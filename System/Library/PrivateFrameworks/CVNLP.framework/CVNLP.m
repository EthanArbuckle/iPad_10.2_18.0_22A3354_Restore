_QWORD *sub_1B02D38C0(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E60CCA98;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1B5E07CB4](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return a1;
}

uint64_t sub_1B02D3910(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v9;

  *(_QWORD *)a1 = off_1E60CBCC0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E60CCA98;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E60CCA98;
  *(_QWORD *)(a1 + 64) = 0;
  v7 = (uint64_t *)(a1 + 96);
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_1B0303128((_QWORD *)(a1 + 96));
  sub_1B02D3A54(a1, a3, a4, (uint64_t *)&v9);
  sub_1B0303344(v7, &v9);
  sub_1B0303130((uint64_t *)&v9);
  return a1;
}

void sub_1B02D39CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  uint64_t **v3;
  uint64_t *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v9;
  uint64_t v10;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B0303130(v4);
  v2[7] = v6;
  *v7 = 0;
  v7[1] = 0;
  v9 = v2[10];
  if (v9)
  {
    MEMORY[0x1B5E07CB4](v9, 0x1000C8052888210);
    v2[10] = 0;
  }
  v2[3] = v6;
  *v5 = 0;
  v5[1] = 0;
  v10 = v2[6];
  if (v10)
  {
    MEMORY[0x1B5E07CB4](v10, 0x1000C8052888210);
    v2[6] = 0;
  }
  sub_1B02D7938(v3, 0);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02D3A54@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _DWORD *v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  _DWORD *v24;
  _QWORD v25[33];
  uint64_t *v26;
  unsigned int v27;
  _DWORD *v28;
  unint64_t v29;

  v28 = a2;
  v29 = a3;
  result = sub_1B02D40E4(a2, a3, (_DWORD *)(a1 + 88), a4);
  if (!*a4)
  {
    sub_1B0303130(a4);
    result = sub_1B03017B0(&v28, 4uLL, a4);
    if (!*a4)
    {
      sub_1B0303130(a4);
      result = sub_1B02D40E4(v28, v29, (_DWORD *)(a1 + 92), a4);
      if (!*a4)
      {
        sub_1B0303130(a4);
        result = sub_1B03017B0(&v28, 4uLL, a4);
        if (!*a4)
        {
          sub_1B0303130(a4);
          v27 = 0;
          result = sub_1B02D4250(v28, v29, &v27, a4);
          if (!*a4)
          {
            sub_1B0303130(a4);
            result = sub_1B03017B0(&v28, 4uLL, a4);
            if (!*a4)
            {
              sub_1B0303130(a4);
              v7 = v27;
              if (v29 < v27)
                v7 = v29;
              v24 = v28;
              v25[0] = v7;
              sub_1B02D43BC((uint64_t)&v24, &v26);
              v8 = v26;
              v26 = 0;
              sub_1B02D7938((uint64_t **)(a1 + 16), v8);
              sub_1B02D7938(&v26, 0);
              v9 = sub_1B030172C(v27, 4uLL);
              result = sub_1B03017B0(&v28, v9, a4);
              if (!*a4)
              {
                sub_1B0303130(a4);
                LODWORD(v26) = 0;
                result = sub_1B02D4250(v28, v29, &v26, a4);
                if (!*a4)
                {
                  sub_1B0303130(a4);
                  result = sub_1B03017B0(&v28, 4uLL, a4);
                  if (!*a4)
                  {
                    sub_1B0303130(a4);
                    v10 = v26;
                    if (!(_DWORD)v26)
                    {
                      LODWORD(v24) = 13;
                      v12 = (_QWORD *)sub_1B02D685C((uint64_t)v25);
                      sub_1B02D7994(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_1B02D7994(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_1B02D7994(v25, (uint64_t)") [", 3);
                      sub_1B02D7994(v25, (uint64_t)"(pieces_blob_size) > (0)", 24);
                      sub_1B02D7994(v25, (uint64_t)"] ", 2);
                      sub_1B02D4430((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_1B02D44BC((uint64_t)&v24);
                    }
                    if (v29 < v26)
                    {
                      LODWORD(v24) = 13;
                      v11 = (_QWORD *)sub_1B02D685C((uint64_t)v25);
                      sub_1B02D7994(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_1B02D7994(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_1B02D7994(v25, (uint64_t)") [", 3);
                      sub_1B02D7994(v25, (uint64_t)"(blob.size()) >= (pieces_blob_size)", 35);
                      sub_1B02D7994(v25, (uint64_t)"] ", 2);
                      sub_1B02D4430((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_1B02D44BC((uint64_t)&v24);
                    }
                    if ((v26 & 3) != 0)
                    {
                      LODWORD(v24) = 13;
                      v13 = (_QWORD *)sub_1B02D685C((uint64_t)v25);
                      sub_1B02D7994(v13, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                      sub_1B02D7994(v25, (uint64_t)"(", 1);
                      std::ostream::operator<<();
                      sub_1B02D7994(v25, (uint64_t)") [", 3);
                      sub_1B02D7994(v25, (uint64_t)"(pieces_blob_size % pieces_.unit_size()) == (0)", 47);
                      sub_1B02D7994(v25, (uint64_t)"] ", 2);
                      sub_1B02D4430((unsigned int *)&v24, (uint64_t)a4);
                      return (_QWORD *)sub_1B02D44BC((uint64_t)&v24);
                    }
                    v14 = v28;
                    v15 = v26 >> 2;
                    *(_QWORD *)(a1 + 32) = 0;
                    *(_QWORD *)(a1 + 40) = 0;
                    if (*(_QWORD *)(a1 + 48))
                    {
                      MEMORY[0x1B5E07CB4](*(_QWORD *)(a1 + 48), 0x1000C8052888210);
                      *(_QWORD *)(a1 + 48) = 0;
                      v10 = v26;
                    }
                    *(_QWORD *)(a1 + 32) = v15;
                    *(_QWORD *)(a1 + 40) = v14;
                    v16 = sub_1B030172C(v10, 4uLL);
                    result = sub_1B03017B0(&v28, v16, a4);
                    if (!*a4)
                    {
                      sub_1B0303130(a4);
                      v23 = 0;
                      result = sub_1B02D4250(v28, v29, &v23, a4);
                      if (!*a4)
                      {
                        sub_1B0303130(a4);
                        result = sub_1B03017B0(&v28, 4uLL, a4);
                        if (!*a4)
                        {
                          sub_1B0303130(a4);
                          if (!v23)
                          {
                            LODWORD(v24) = 13;
                            v18 = (_QWORD *)sub_1B02D685C((uint64_t)v25);
                            sub_1B02D7994(v18, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_1B02D7994(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_1B02D7994(v25, (uint64_t)") [", 3);
                            sub_1B02D7994(v25, (uint64_t)"(reserved_id_map_size) > (0)", 28);
                            sub_1B02D7994(v25, (uint64_t)"] ", 2);
                            sub_1B02D4430((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_1B02D44BC((uint64_t)&v24);
                          }
                          if (v29 < v23)
                          {
                            LODWORD(v24) = 13;
                            v17 = (_QWORD *)sub_1B02D685C((uint64_t)v25);
                            sub_1B02D7994(v17, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_1B02D7994(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_1B02D7994(v25, (uint64_t)") [", 3);
                            sub_1B02D7994(v25, (uint64_t)"(blob.size()) >= (reserved_id_map_size)", 39);
                            sub_1B02D7994(v25, (uint64_t)"] ", 2);
                            sub_1B02D4430((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_1B02D44BC((uint64_t)&v24);
                          }
                          if ((v23 & 3) != 0)
                          {
                            LODWORD(v24) = 13;
                            v19 = (_QWORD *)sub_1B02D685C((uint64_t)v25);
                            sub_1B02D7994(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/model_interface.cc", 74);
                            sub_1B02D7994(v25, (uint64_t)"(", 1);
                            std::ostream::operator<<();
                            sub_1B02D7994(v25, (uint64_t)") [", 3);
                            sub_1B02D7994(v25, (uint64_t)"(reserved_id_map_size % reserved_id_map_.unit_size()) == (0)", 60);
                            sub_1B02D7994(v25, (uint64_t)"] ", 2);
                            sub_1B02D4430((unsigned int *)&v24, (uint64_t)a4);
                            return (_QWORD *)sub_1B02D44BC((uint64_t)&v24);
                          }
                          v20 = v28;
                          v21 = v23 >> 2;
                          *(_QWORD *)(a1 + 64) = 0;
                          *(_QWORD *)(a1 + 72) = 0;
                          v22 = *(_QWORD *)(a1 + 80);
                          if (v22)
                          {
                            MEMORY[0x1B5E07CB4](v22, 0x1000C8052888210);
                            *(_QWORD *)(a1 + 80) = 0;
                          }
                          *(_QWORD *)(a1 + 64) = v21;
                          *(_QWORD *)(a1 + 72) = v20;
                          return sub_1B0303128(a4);
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B02D40A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B02D44BC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02D40E4@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_1B02D685C((uint64_t)v8);
    sub_1B02D7994(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_1B02D7994(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v8, (uint64_t)") [", 3);
    sub_1B02D7994(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_1B02D7994(v8, (uint64_t)"] ", 2);
    sub_1B02D4430(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1B5E07C60](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_1B0303128(a4);
  }
}

void sub_1B02D4238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02D4250@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_1B02D685C((uint64_t)v8);
    sub_1B02D7994(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_1B02D7994(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v8, (uint64_t)") [", 3);
    sub_1B02D7994(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_1B02D7994(v8, (uint64_t)"] ", 2);
    sub_1B02D4430(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1B5E07C60](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_1B0303128(a4);
  }
}

void sub_1B02D43A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02D43BC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_1B02DCAD0(v4, *(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_1B02D440C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1B02D4430(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  void **v4;
  unint64_t v5;
  void *__p[2];
  unsigned __int8 v7;

  v3 = *a1;
  std::stringbuf::str();
  if ((v7 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v7 & 0x80u) == 0)
    v5 = v7;
  else
    v5 = (unint64_t)__p[1];
  sub_1B030328C(a2, v3, v4, v5);
  if ((char)v7 < 0)
    operator delete(__p[0]);
}

void sub_1B02D44A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02D44BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 8) = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + 8 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 16) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](a1 + 120);
  return a1;
}

void **sub_1B02D4544(uint64_t a1)
{
  void **v1;
  void **result;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v8;

  v1 = *(void ***)(a1 + 8);
  if (!v1 || (v3 = *v1, result = v1 - 2, v3 != &unk_1E60CBA88))
  {
    v8 = 1;
    v4 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    sub_1B02D7994(v4, (uint64_t)"(", 1);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_1B02D7994(v5, (uint64_t)") [", 3);
    v7 = sub_1B02D7994(v6, (uint64_t)"(model_proto = dynamic_cast<const ModelProto *>(model_proto_))", 62);
    sub_1B02D7994(v7, (uint64_t)"] ", 2);
    sub_1B02D6948(&v8);
    return 0;
  }
  return result;
}

void sub_1B02D45F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1B02D6948(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02D460C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)a1 = off_1E60CBCC0;
  sub_1B0303130((uint64_t *)(a1 + 96));
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E60CCA98;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    MEMORY[0x1B5E07CB4](v2, 0x1000C8052888210);
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E60CCA98;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3)
  {
    MEMORY[0x1B5E07CB4](v3, 0x1000C8052888210);
    *(_QWORD *)(a1 + 48) = 0;
  }
  sub_1B02D7938((uint64_t **)(a1 + 16), 0);
  return a1;
}

const char *sub_1B02D46A8(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
  else
    return "<unk>";
}

const char *sub_1B02D46F8(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  else
    return "<s>";
}

const char *sub_1B02D4748(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  else
    return "</s>";
}

const char *sub_1B02D4798(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (v2)
    return (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  else
    return "<pad>";
}

uint64_t sub_1B02D47E8(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  uint64_t result;
  unsigned int v7;

  v7 = 0;
  sub_1B02D4868(a1 + 56, a2, (int *)&v7, a3, 0);
  result = v7;
  if (v7 == -1)
  {
    sub_1B02D4868(a1 + 24, a2, (int *)&v7, a3, 0);
    result = v7;
    if (v7 == -1)
      return *(unsigned int *)(a1 + 88);
  }
  return result;
}

uint64_t sub_1B02D4868(uint64_t result, _BYTE *a2, int *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unsigned int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  int v10;
  int v11;

  v5 = *(_QWORD *)(result + 16);
  v6 = *(_DWORD *)(v5 + 4 * a5);
  if (a4)
  {
    while (1)
    {
      v7 = *a2++;
      a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v7;
      v6 = *(_DWORD *)(v5 + 4 * a5);
      if ((v6 & 0x800000FF) != v7)
        break;
      if (!--a4)
        goto LABEL_9;
    }
  }
  else
  {
    v8 = *a2;
    if (*a2)
    {
      v9 = a2 + 1;
      while (1)
      {
        a5 ^= (v6 >> 10 << ((v6 >> 6) & 8)) ^ v8;
        v6 = *(_DWORD *)(v5 + 4 * a5);
        if ((v6 & 0x800000FF) != v8)
          break;
        v10 = *v9++;
        v8 = v10;
        if (!v10)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((v6 & 0x100) != 0)
      {
        v11 = *(_DWORD *)(v5 + 4 * (a5 ^ (v6 >> 10 << ((v6 >> 6) & 8)))) & 0x7FFFFFFF;
        goto LABEL_12;
      }
    }
  }
  v11 = -1;
LABEL_12:
  *a3 = v11;
  return result;
}

uint64_t sub_1B02D4918@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_1B03013F4() <= 2)
  {
    v9 = 0;
    v2 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    sub_1B02D7994(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_1B02D7994(v3, (uint64_t)") ", 2);
    v5 = sub_1B02D7994(v4, (uint64_t)"LOG(", 4);
    v6 = sub_1B02D7994(v5, (uint64_t)"ERROR", 5);
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    sub_1B02D7994(v7, (uint64_t)"Not implemented.", 16);
    sub_1B02D6948(&v9);
  }
  return sub_1B030328C(a1, 12, "Not implemented.", 16);
}

void sub_1B02D49EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1B02D6948(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02D4A00@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;

  if ((int)sub_1B03013F4() <= 2)
  {
    v9 = 0;
    v2 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.cc", 18);
    sub_1B02D7994(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_1B02D7994(v3, (uint64_t)") ", 2);
    v5 = sub_1B02D7994(v4, (uint64_t)"LOG(", 4);
    v6 = sub_1B02D7994(v5, (uint64_t)"ERROR", 5);
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    sub_1B02D7994(v7, (uint64_t)"Not implemented.", 16);
    sub_1B02D6948(&v9);
  }
  return sub_1B030328C(a1, 12, "Not implemented.", 16);
}

void sub_1B02D4AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1B02D6948(&a13);
  _Unwind_Resume(a1);
}

void sub_1B02D4AE8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  int v11;
  BOOL v12;
  uint64_t **v13;
  unint64_t v14;
  char v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  size_t v22;
  void *v23;
  unsigned int v24;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  size_t v30;
  __int128 *v31;
  const void *v32;
  const char *v33;
  size_t v34;
  void *v35;
  std::string *v36;
  __int128 v37;
  const char *v38;
  std::string *v39;
  __int128 v40;
  size_t v41;
  std::string v42;
  _DWORD *v43;
  void *__p;
  unint64_t v45;
  uint64_t *v46;
  _QWORD *v47[2];
  _QWORD **v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD **v51;
  _QWORD *v52;
  uint64_t v53;
  __int128 v54;
  int64_t v55;

  v52 = 0;
  v53 = 0;
  v50 = 0;
  v51 = &v52;
  v48 = &v49;
  v49 = 0;
  *(_DWORD *)(a1 + 88) = -1;
  v47[0] = 0;
  v47[1] = 0;
  v46 = (uint64_t *)v47;
  LOBYTE(v54) = 0;
  sub_1B02D7D1C(&__p, 0x100uLL, (unsigned __int8 *)&v54);
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    v3 = v2 - 16;
  else
    v3 = 0;
  if (*(int *)(v3 + 64) < 1)
  {
LABEL_38:
    if (*(_DWORD *)(a1 + 88) == -1)
    {
      sub_1B030328C(&v54, 13, "unk is not defined.", 19);
      sub_1B0303344((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
    else
    {
      v25 = *(_BYTE **)(v3 + 80);
      if (!v25)
        v25 = &unk_1EEEB29A8;
      if (!v25[248]
        || (*(_QWORD *)&v54 = __p,
            DWORD2(v54) = 0,
            sub_1B02D841C((uint64_t)&v54, v45, (uint64_t)&v42),
            v42.__r_.__value_.__l.__data_ == (char *)__p + 8 * (v45 >> 6))
        && LODWORD(v42.__r_.__value_.__r.__words[1]) == (v45 & 0x3F))
      {
        if (!v53
          || (sub_1B02D536C((_QWORD *)(a1 + 24), &v51, (int *)(a1 + 92), &v54),
              sub_1B0303344((uint64_t *)(a1 + 96), (_DWORD **)&v54),
              sub_1B0303130((uint64_t *)&v54),
              (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
              v26 = v54,
              sub_1B0303130((uint64_t *)&v54),
              !v26))
        {
          if (!v50
            || (sub_1B02D536C((_QWORD *)(a1 + 56), &v48, 0, &v54),
                sub_1B0303344((uint64_t *)(a1 + 96), (_DWORD **)&v54),
                sub_1B0303130((uint64_t *)&v54),
                (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v54, a1),
                v27 = v54,
                sub_1B0303130((uint64_t *)&v54),
                !v27))
          {
            sub_1B02D583C(&v46, &v54);
            v28 = (uint64_t *)v54;
            *(_QWORD *)&v54 = 0;
            sub_1B02D7938((uint64_t **)(a1 + 16), v28);
            sub_1B02D7938((uint64_t **)&v54, 0);
          }
        }
        goto LABEL_69;
      }
      sub_1B0303344((uint64_t *)(a1 + 96), (_DWORD **)&v54);
    }
LABEL_68:
    sub_1B0303130((uint64_t *)&v54);
    goto LABEL_69;
  }
  v4 = 0;
  while (1)
  {
    v5 = sub_1B02D69FC(v3 + 56, v4);
    v6 = v5;
    v7 = *(_QWORD *)(v5 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v8 = *(unsigned __int8 *)(v7 + 23);
    if (*(char *)(v7 + 23) < 0)
    {
      if (!*(_QWORD *)(v7 + 8))
      {
LABEL_50:
        sub_1B030328C(&v54, 13, "piece must not be empty.", 24);
        sub_1B0303344((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
    }
    else if (!*(_BYTE *)(v7 + 23))
    {
      goto LABEL_50;
    }
    v9 = *(_DWORD *)(v5 + 60);
    v10 = v9 > 5;
    v11 = (1 << v9) & 0x32;
    v12 = v10 || v11 == 0;
    v13 = (uint64_t **)(v12 ? &v48 : &v51);
    if ((v8 & 0x80) != 0)
    {
      v14 = *(_QWORD *)v7;
      v8 = *(_QWORD *)(v7 + 8);
    }
    else
    {
      v14 = v7;
    }
    *(_QWORD *)&v54 = v14;
    *((_QWORD *)&v54 + 1) = v8;
    LODWORD(v55) = v4;
    sub_1B02D7FC0(v13, (uint64_t)&v54, (uint64_t)&v54);
    if ((v15 & 1) == 0)
      break;
    v16 = *(_DWORD *)(v6 + 60);
    if (v16 == 4)
    {
      v17 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v17 + 23) < 0)
      {
        v19 = *(_QWORD *)v17;
        v18 = *(_QWORD *)(v17 + 8);
      }
      else
      {
        v18 = *(unsigned __int8 *)(v17 + 23);
        v19 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      }
      *(_QWORD *)&v54 = v19;
      *((_QWORD *)&v54 + 1) = v18;
      sub_1B02D839C(&v46, (uint64_t)&v54, &v54);
      v16 = *(_DWORD *)(v6 + 60);
    }
    if (v16 == 6)
    {
      v20 = *(_BYTE **)(v3 + 80);
      if (!v20)
        v20 = &unk_1EEEB29A8;
      if (!v20[248])
      {
        std::operator+<char>();
        v37 = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v55 = v36->__r_.__value_.__r.__words[2];
        v54 = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
LABEL_78:
        v41 = strlen(v38);
        sub_1B030328C(&v43, 13, v38, v41);
        sub_1B0303344((uint64_t *)(a1 + 96), &v43);
        sub_1B0303130((uint64_t *)&v43);
        if (SHIBYTE(v55) < 0)
          operator delete((void *)v54);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v35 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_82;
        }
        goto LABEL_69;
      }
      v21 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v21 + 23) < 0)
      {
        v23 = *(void **)v21;
        v22 = *(_QWORD *)(v21 + 8);
      }
      else
      {
        v22 = *(unsigned __int8 *)(v21 + 23);
        v23 = (void *)(*(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v24 = sub_1B02D5220(v23, v22);
      if ((v24 & 0x80000000) != 0)
      {
        std::operator+<char>();
        v39 = std::string::append(&v42, " is invalid.");
        v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
        v55 = v39->__r_.__value_.__r.__words[2];
        v54 = v40;
        v39->__r_.__value_.__l.__size_ = 0;
        v39->__r_.__value_.__r.__words[2] = 0;
        v39->__r_.__value_.__r.__words[0] = 0;
        if (v55 >= 0)
          v38 = (const char *)&v54;
        else
          v38 = (const char *)v54;
        goto LABEL_78;
      }
      *(_QWORD *)((char *)__p + (((unint64_t)v24 >> 3) & 0x1FFFFFF8)) |= 1 << v24;
    }
    else if (v16 == 2)
    {
      if ((*(_DWORD *)(a1 + 88) & 0x80000000) == 0)
      {
        sub_1B030328C(&v54, 13, "unk is already defined.", 23);
        sub_1B0303344((uint64_t *)(a1 + 96), (_DWORD **)&v54);
        goto LABEL_68;
      }
      *(_DWORD *)(a1 + 88) = v4;
    }
    if (++v4 >= *(_DWORD *)(v3 + 64))
      goto LABEL_38;
  }
  v29 = *(_QWORD *)(v6 + 48) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v29 + 23) >= 0)
    v30 = *(unsigned __int8 *)(v29 + 23);
  else
    v30 = *(_QWORD *)(v29 + 8);
  v31 = &v54;
  sub_1B02D8318((uint64_t)&v54, v30 + 20);
  if (v55 < 0)
    v31 = (__int128 *)v54;
  if (v30)
  {
    if (*(char *)(v29 + 23) >= 0)
      v32 = (const void *)v29;
    else
      v32 = *(const void **)v29;
    memmove(v31, v32, v30);
  }
  strcpy((char *)v31 + v30, " is already defined.");
  if (v55 >= 0)
    v33 = (const char *)&v54;
  else
    v33 = (const char *)v54;
  v34 = strlen(v33);
  sub_1B030328C(&v42, 13, v33, v34);
  sub_1B0303344((uint64_t *)(a1 + 96), &v42);
  sub_1B0303130((uint64_t *)&v42);
  if (SHIBYTE(v55) < 0)
  {
    v35 = (void *)v54;
LABEL_82:
    operator delete(v35);
  }
LABEL_69:
  if (__p)
    operator delete(__p);
  sub_1B02D7CDC((uint64_t)&v46, v47[0]);
  sub_1B02D7CDC((uint64_t)&v48, v49);
  sub_1B02D7CDC((uint64_t)&v51, v52);
}

void sub_1B02D5108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, char a19, _QWORD *a20,uint64_t a21,char a22,_QWORD *a23,uint64_t a24,char a25,_QWORD *a26)
{
  uint64_t v26;

  sub_1B0303130(&a15);
  if (*(char *)(v26 - 89) < 0)
    operator delete(*(void **)(v26 - 112));
  if (a14 < 0)
    operator delete(__p);
  if (a16)
    operator delete(a16);
  sub_1B02D7CDC((uint64_t)&a19, a20);
  sub_1B02D7CDC((uint64_t)&a22, a23);
  sub_1B02D7CDC((uint64_t)&a25, a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02D5220(void *__src, size_t __len)
{
  unsigned __int8 v4;
  _QWORD *v5;
  void **v6;
  size_t v7;
  size_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  void *__dst[2];
  unint64_t v13;

  v4 = atomic_load((unsigned __int8 *)&qword_1EEEB28B0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1EEEB28B0))
  {
    qword_1EEEB28A8 = sub_1B02D613C();
    __cxa_guard_release(&qword_1EEEB28B0);
  }
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v5 = (_QWORD *)qword_1EEEB28A8;
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = (void **)operator new(v7 + 1);
    __dst[1] = (void *)__len;
    v13 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_9;
  }
  HIBYTE(v13) = __len;
  v6 = __dst;
  if (__len)
LABEL_9:
    memmove(v6, __src, __len);
  *((_BYTE *)v6 + __len) = 0;
  v9 = sub_1B02D8548(v5, (unsigned __int8 *)__dst);
  v10 = v9;
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__dst[0]);
    if (v10)
      return v10[40];
  }
  else if (v9)
  {
    return v10[40];
  }
  return 0xFFFFFFFFLL;
}

void sub_1B02D533C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_guard_abort(&qword_1EEEB28B0);
  _Unwind_Resume(a1);
}

void sub_1B02D536C(_QWORD *a1@<X0>, _QWORD *a2@<X1>, int *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  BOOL v29;
  _QWORD *v30;
  char *v31;
  unint64_t v32;
  _DWORD *v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  char *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  char *v47;
  int v48;
  _QWORD *v49;
  _QWORD *v50;
  void *v55;
  _BYTE *v56;
  void *__p;
  char *v58;
  char *v59;
  void *v60;
  char *v61;
  char *v62;

  if (a2[2])
  {
    v60 = 0;
    v61 = 0;
    v62 = 0;
    __p = 0;
    v58 = 0;
    v59 = 0;
    v5 = a2 + 1;
    v4 = (_QWORD *)*a2;
    do
    {
      v6 = v4[4];
      v7 = v61;
      if (v61 >= v62)
      {
        v9 = (v61 - (_BYTE *)v60) >> 3;
        if ((unint64_t)(v9 + 1) >> 61)
          sub_1B02D7758();
        v10 = (v62 - (_BYTE *)v60) >> 2;
        if (v10 <= v9 + 1)
          v10 = v9 + 1;
        if ((unint64_t)(v62 - (_BYTE *)v60) >= 0x7FFFFFFFFFFFFFF8)
          v11 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v11 = v10;
        if (v11)
          v12 = (char *)sub_1B02D7E30((uint64_t)&v62, v11);
        else
          v12 = 0;
        v13 = &v12[8 * v9];
        *(_QWORD *)v13 = v6;
        v8 = v13 + 8;
        v15 = (char *)v60;
        v14 = v61;
        if (v61 != v60)
        {
          do
          {
            v16 = *((_QWORD *)v14 - 1);
            v14 -= 8;
            *((_QWORD *)v13 - 1) = v16;
            v13 -= 8;
          }
          while (v14 != v15);
          v14 = (char *)v60;
        }
        v60 = v13;
        v61 = v8;
        v62 = &v12[8 * v11];
        if (v14)
          operator delete(v14);
      }
      else
      {
        *(_QWORD *)v61 = v6;
        v8 = v7 + 8;
      }
      v61 = v8;
      v17 = v58;
      if (v58 >= v59)
      {
        v19 = (char *)__p;
        v20 = (v58 - (_BYTE *)__p) >> 2;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 62)
          sub_1B02D7758();
        v22 = v59 - (_BYTE *)__p;
        if ((v59 - (_BYTE *)__p) >> 1 > v21)
          v21 = v22 >> 1;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFFCLL)
          v23 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          v24 = (char *)sub_1B02D8648((uint64_t)&v59, v23);
          v19 = (char *)__p;
          v17 = v58;
        }
        else
        {
          v24 = 0;
        }
        v25 = &v24[4 * v20];
        *(_DWORD *)v25 = *((_DWORD *)v4 + 12);
        v18 = v25 + 4;
        while (v17 != v19)
        {
          v26 = *((_DWORD *)v17 - 1);
          v17 -= 4;
          *((_DWORD *)v25 - 1) = v26;
          v25 -= 4;
        }
        __p = v25;
        v58 = v18;
        v59 = &v24[4 * v23];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_DWORD *)v58 = *((_DWORD *)v4 + 12);
        v18 = v17 + 4;
      }
      v58 = v18;
      v27 = (_QWORD *)v4[1];
      if (v27)
      {
        do
        {
          v28 = v27;
          v27 = (_QWORD *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          v28 = (_QWORD *)v4[2];
          v29 = *v28 == (_QWORD)v4;
          v4 = v28;
        }
        while (!v29);
      }
      v4 = v28;
    }
    while (v28 != v5);
    if (sub_1B02D6220(a1, (v61 - (_BYTE *)v60) >> 3, (unint64_t)v60, 0, (unint64_t)__p, 0))
    {
      sub_1B030328C(a4, 13, "cannot build double-array.", 26);
    }
    else if (a3)
    {
      sub_1B02DB104(&v55, 0x400uLL);
      *a3 = 0;
      v30 = (_QWORD *)*a2;
      if ((_QWORD *)*a2 == v5)
        goto LABEL_81;
      v31 = (char *)v55;
      v32 = (v56 - (_BYTE *)v55) >> 4;
      v33 = (_DWORD *)a1[2];
      do
      {
        v34 = (_BYTE *)v30[4];
        v35 = v30[5];
        v36 = (*v33 >> 10 << ((*v33 >> 6) & 8));
        if (v35)
        {
          v37 = 0;
          v38 = 0;
          do
          {
            v39 = v34[v37];
            v40 = v36 ^ v39;
            v41 = v33[v40];
            if ((v41 & 0x800000FF) != (_DWORD)v39)
              break;
            v36 = v40 ^ (v41 >> 10 << ((v41 >> 6) & 8));
            if ((v41 & 0x100) != 0)
            {
              if (v38 < v32)
              {
                v42 = &v31[16 * v38];
                *(_DWORD *)v42 = v33[v36] & 0x7FFFFFFF;
                *((_QWORD *)v42 + 1) = v37 + 1;
              }
              ++v38;
            }
            ++v37;
          }
          while (v35 != v37);
        }
        else
        {
          v43 = *v34;
          if (*v34)
          {
            v38 = 0;
            v44 = 1;
            do
            {
              v45 = v36 ^ v43;
              v46 = v33[v45];
              if ((v46 & 0x800000FF) != v43)
                break;
              v36 = v45 ^ (v46 >> 10 << ((v46 >> 6) & 8));
              if ((v46 & 0x100) != 0)
              {
                if (v38 < v32)
                {
                  v47 = &v31[16 * v38];
                  *(_DWORD *)v47 = v33[v36] & 0x7FFFFFFF;
                  *((_QWORD *)v47 + 1) = v44;
                }
                ++v38;
              }
              v43 = v34[v44++];
            }
            while (v43);
          }
          else
          {
            LODWORD(v38) = 0;
          }
        }
        v48 = *a3;
        if (*a3 <= (int)v38)
          v48 = v38;
        *a3 = v48;
        v49 = (_QWORD *)v30[1];
        if (v49)
        {
          do
          {
            v50 = v49;
            v49 = (_QWORD *)*v49;
          }
          while (v49);
        }
        else
        {
          do
          {
            v50 = (_QWORD *)v30[2];
            v29 = *v50 == (_QWORD)v30;
            v30 = v50;
          }
          while (!v29);
        }
        v30 = v50;
      }
      while (v50 != v5);
      if (!v48)
LABEL_81:
        sub_1B030328C(a4, 13, "no entry is found in the trie.", 30);
      else
        sub_1B0303128(a4);
      if (v55)
      {
        v56 = v55;
        operator delete(v55);
      }
    }
    else
    {
      sub_1B0303128(a4);
    }
    if (__p)
    {
      v58 = (char *)__p;
      operator delete(__p);
    }
    if (v60)
    {
      v61 = (char *)v60;
      operator delete(v60);
    }
  }
  else
  {
    sub_1B030328C(a4, 13, "no pieces are loaded.", 21);
  }
}

void sub_1B02D57E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  if (a20)
    operator delete(a20);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02D583C@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_1B02DC9F4(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B02D588C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x20C4093837F09);
  _Unwind_Resume(a1);
}

void sub_1B02D58B0(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  int v10;
  int v11;
  int v12;
  std::string *p_p;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string::size_type v17;
  const std::string::value_type *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::string *v21;
  std::string *v22;
  std::string::size_type v23;
  uint64_t v24;
  const std::string::value_type *v25;
  uint64_t v26;
  std::string::size_type v27;
  std::string *v28;
  std::string *v29;
  std::string::size_type v30;
  std::string __p;
  std::string v32;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v4 = &v32;
  else
    v4 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v4->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 88);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v32;
  else
    v5 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    size = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  memset(&v32, 0, sizeof(v32));
  std::string::resize(&v32, 4uLL, 0);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &v32;
  else
    v7 = (std::string *)v32.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 92);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &v32;
  else
    v8 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v9 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  sub_1B02DCAD4(*(_QWORD *)(a1 + 16), &v32);
  v10 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  v11 = v32.__r_.__value_.__r.__words[1];
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((v10 & 0x80u) == 0)
    v12 = v10;
  else
    v12 = v11;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = v12;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = &__p;
  else
    v14 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v15 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v14, v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v32;
  else
    v16 = (std::string *)v32.__r_.__value_.__r.__words[0];
  if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
  else
    v17 = v32.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v16, v17);
  sub_1B0301750(a2);
  v19 = *(_QWORD *)(a1 + 32);
  v18 = *(const std::string::value_type **)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v20 = 4 * v19;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v21 = &__p;
  else
    v21 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v21->__r_.__value_.__l.__data_) = v20;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = &__p;
  else
    v22 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v23 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v22, v23);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v18, v20);
  sub_1B0301750(a2);
  v26 = a1 + 64;
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(const std::string::value_type **)(v26 + 8);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  v27 = 4 * v24;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v28 = &__p;
  else
    v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v28->__r_.__value_.__l.__data_) = v27;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v29 = &__p;
  else
    v29 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v30 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v30 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v29, v30);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::append(a2, v25, v27);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
}

void sub_1B02D5B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

void sub_1B02D5BEC(unsigned __int8 *__s1@<X0>, uint64_t a2@<X1>, char a3@<W2>, int a4@<W3>, unsigned __int8 ***a5@<X8>)
{
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 **v13;
  char *v14;
  char *v15;
  _BOOL4 v16;
  int v17;
  uint64_t v18;
  _BOOL4 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned __int8 **v26;
  char *v27;
  char *v28;
  unsigned __int8 **v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  unsigned __int8 **v36;
  char *v37;
  char *v38;
  unsigned __int8 **v39;
  unsigned __int8 **v40;
  int v41;
  _QWORD *v42;
  unsigned __int8 *v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unsigned __int8 **v54;
  char *v55;
  char *v56;
  unsigned __int8 **v57;

  v6 = __s1;
  v8 = &__s1[a2];
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  if ((a3 & 1) == 0)
  {
    if (a2 < 1)
      return;
    v40 = 0;
    v41 = 0;
    v42 = a5 + 2;
    v43 = __s1;
    while (1)
    {
      v44 = asc_1B03A8CD7[(unint64_t)*v43 >> 4];
      if ((int)v8 - (int)v43 < v44)
        v44 = (_DWORD)v8 - (_DWORD)v43;
      v45 = v44;
      if (v44 == 3)
      {
        v46 = memcmp(v43, "▁", 3uLL);
        v47 = v46 == 0;
        if (v43 == v6)
          goto LABEL_62;
        if ((v41 & a4 & 1) == 0 && !v46)
        {
          v47 = 1;
LABEL_62:
          if ((unint64_t)v40 >= *v42)
          {
            v48 = ((char *)v40 - (char *)*a5) >> 4;
            if ((unint64_t)(v48 + 1) >> 60)
              sub_1B02D7758();
            v49 = *v42 - (_QWORD)*a5;
            v50 = v49 >> 3;
            if (v49 >> 3 <= (unint64_t)(v48 + 1))
              v50 = v48 + 1;
            if ((unint64_t)v49 >= 0x7FFFFFFFFFFFFFF0)
              v51 = 0xFFFFFFFFFFFFFFFLL;
            else
              v51 = v50;
            v52 = (char *)sub_1B02D8514((uint64_t)(a5 + 2), v51);
            v54 = (unsigned __int8 **)&v52[16 * v48];
            *v54 = v43;
            v54[1] = 0;
            v56 = (char *)*a5;
            v55 = (char *)a5[1];
            v57 = v54;
            if (v55 != (char *)*a5)
            {
              do
              {
                *((_OWORD *)v57 - 1) = *((_OWORD *)v55 - 1);
                v57 -= 2;
                v55 -= 16;
              }
              while (v55 != v56);
              v55 = (char *)*a5;
            }
            v40 = v54 + 2;
            *a5 = v57;
            a5[1] = v54 + 2;
            a5[2] = (unsigned __int8 **)&v52[16 * v53];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *v40 = v43;
            v40[1] = 0;
            v40 += 2;
          }
          a5[1] = v40;
          goto LABEL_76;
        }
        if ((v41 & 1) != 0)
        {
          v47 = v41 & (v46 == 0);
          goto LABEL_76;
        }
      }
      else if (v43 == v6)
      {
        v47 = 0;
        goto LABEL_62;
      }
      v47 = 0;
LABEL_76:
      *(v40 - 1) += v45;
      v43 += v45;
      v41 = v47;
      if (v43 >= v8)
        return;
    }
  }
  if (a2 >= 1)
  {
    v9 = a5 + 2;
    v10 = sub_1B02D8514((uint64_t)(a5 + 2), 1uLL);
    v12 = (unsigned __int8 **)&v10[2 * v11];
    *v10 = v6;
    v10[1] = 0;
    v13 = (unsigned __int8 **)(v10 + 2);
    v15 = (char *)*a5;
    v14 = (char *)a5[1];
    if (v14 != (char *)*a5)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v14 - 1);
        v10 -= 2;
        v14 -= 16;
      }
      while (v14 != v15);
      v14 = (char *)*a5;
    }
    *a5 = (unsigned __int8 **)v10;
    a5[1] = v13;
    a5[2] = v12;
    if (v14)
      operator delete(v14);
    v16 = 0;
    a5[1] = v13;
    do
    {
      v17 = asc_1B03A8CD7[(unint64_t)*v6 >> 4];
      if ((int)v8 - (int)v6 < v17)
        v17 = (_DWORD)v8 - (_DWORD)v6;
      v18 = v17;
      if (v17 == 3)
      {
        v19 = memcmp(v6, "▁", 3uLL) == 0;
        if (v19)
          goto LABEL_18;
      }
      else
      {
        v19 = 0;
      }
      if ((v16 & a4) != 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v20 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v20 + 1) >> 60)
            sub_1B02D7758();
          v21 = *v9 - (_QWORD)*a5;
          v22 = v21 >> 3;
          if (v21 >> 3 <= (unint64_t)(v20 + 1))
            v22 = v20 + 1;
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v22;
          v24 = (char *)sub_1B02D8514((uint64_t)(a5 + 2), v23);
          v26 = (unsigned __int8 **)&v24[16 * v20];
          *v26 = v6;
          v26[1] = 0;
          v28 = (char *)*a5;
          v27 = (char *)a5[1];
          v29 = v26;
          if (v27 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v29 - 1) = *((_OWORD *)v27 - 1);
              v29 -= 2;
              v27 -= 16;
            }
            while (v27 != v28);
            v27 = (char *)*a5;
          }
          v13 = v26 + 2;
          *a5 = v29;
          a5[1] = v26 + 2;
          a5[2] = (unsigned __int8 **)&v24[16 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        v16 = 0;
        a5[1] = v13;
        goto LABEL_31;
      }
LABEL_18:
      v16 = v19;
LABEL_31:
      *(v13 - 1) += v18;
      v6 += v18;
      if (v6 < v8 && v19 && (a4 & 1) == 0)
      {
        if ((unint64_t)v13 >= *v9)
        {
          v30 = ((char *)v13 - (char *)*a5) >> 4;
          if ((unint64_t)(v30 + 1) >> 60)
            sub_1B02D7758();
          v31 = *v9 - (_QWORD)*a5;
          v32 = v31 >> 3;
          if (v31 >> 3 <= (unint64_t)(v30 + 1))
            v32 = v30 + 1;
          if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0)
            v33 = 0xFFFFFFFFFFFFFFFLL;
          else
            v33 = v32;
          v34 = (char *)sub_1B02D8514((uint64_t)(a5 + 2), v33);
          v36 = (unsigned __int8 **)&v34[16 * v30];
          *v36 = v6;
          v36[1] = 0;
          v38 = (char *)*a5;
          v37 = (char *)a5[1];
          v39 = v36;
          if (v37 != (char *)*a5)
          {
            do
            {
              *((_OWORD *)v39 - 1) = *((_OWORD *)v37 - 1);
              v39 -= 2;
              v37 -= 16;
            }
            while (v37 != v38);
            v37 = (char *)*a5;
          }
          v13 = v36 + 2;
          *a5 = v39;
          a5[1] = v36 + 2;
          a5[2] = (unsigned __int8 **)&v34[16 * v35];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v13 = v6;
          v13[1] = 0;
          v13 += 2;
        }
        a5[1] = v13;
      }
    }
    while (v6 < v8);
  }
}

void sub_1B02D6030(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02D6064@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;

  v3 = a1;
  return sub_1B02D6090("<0x%02X>", &v3, a2);
}

uint64_t sub_1B02D6090@<X0>(char *__format@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  char *v8;

  v6 = snprintf(0, 0, __format, *a2);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  std::string::resize((std::string *)a3, v6, 0);
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) == 0)
    v8 = (char *)a3;
  else
    v8 = *(char **)a3;
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  return snprintf(v8, v7 + 1, __format, *a2);
}

void sub_1B02D6120(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02D613C()
{
  uint64_t v0;
  int v1;
  void *__p[2];
  char v4;
  void **v5;

  v0 = operator new();
  v1 = 0;
  *(_OWORD *)v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_DWORD *)(v0 + 32) = 1065353216;
  do
  {
    LOBYTE(v5) = v1;
    sub_1B02D6090("<0x%02X>", (unsigned __int8 *)&v5, (uint64_t)__p);
    v5 = __p;
    *((_BYTE *)sub_1B02D6AD8(v0, (unsigned __int8 *)__p, (uint64_t)&unk_1B03B0E24, (__int128 **)&v5) + 40) = v1;
    if (v4 < 0)
      operator delete(__p[0]);
    ++v1;
  }
  while (v1 != 256);
  return v0;
}

void sub_1B02D6204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02D6220(_QWORD *a1, unint64_t a2, unint64_t a3, unint64_t a4, unint64_t a5, void (*a6)(unint64_t, uint64_t))
{
  uint64_t v9;
  size_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t v13;
  int *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  void (*v19)(unint64_t, uint64_t);
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  int v24;
  unint64_t v25[4];

  v25[0] = a2;
  v25[1] = a3;
  v25[2] = a4;
  v25[3] = a5;
  v19 = a6;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v23 = 0u;
  v24 = 0;
  sub_1B02D867C(&v19, v25);
  v9 = *((_QWORD *)&v20 + 1);
  v10 = 4 * *((_QWORD *)&v20 + 1);
  v11 = (_DWORD *)operator new[]();
  v12 = v11;
  if (v9)
    bzero(v11, v10);
  v13 = *((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v14 = (int *)v20;
    v15 = v12;
    do
    {
      v16 = *v14++;
      *v15++ = v16;
      --v13;
    }
    while (v13);
  }
  a1[1] = 0;
  a1[2] = 0;
  v17 = a1[3];
  if (v17)
  {
    MEMORY[0x1B5E07CB4](v17, 0x1000C8052888210);
    a1[3] = 0;
  }
  a1[1] = v9;
  a1[2] = v12;
  a1[3] = v12;
  if (a6)
    a6(a2 + 1, a2 + 1);
  sub_1B02DB04C((uint64_t)&v19);
  return 0;
}

void sub_1B02D6330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02DB04C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02D6348@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0303340(a2, a1 + 96);
}

uint64_t sub_1B02D6354(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

uint64_t sub_1B02D635C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_1B03013F4();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_1B02D7994(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_1B02D7994(v4, (uint64_t)") ", 2);
    v6 = sub_1B02D7994(v5, (uint64_t)"LOG(", 4);
    v7 = sub_1B02D7994(v6, (uint64_t)"ERROR", 5);
    v8 = sub_1B02D7994(v7, (uint64_t)") ", 2);
    sub_1B02D7994(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_1B02D6948(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B02D6420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1B02D6948(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02D6434@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;

  result = sub_1B03013F4();
  if ((int)result <= 2)
  {
    v9 = 0;
    v3 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_1B02D7994(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_1B02D7994(v4, (uint64_t)") ", 2);
    v6 = sub_1B02D7994(v5, (uint64_t)"LOG(", 4);
    v7 = sub_1B02D7994(v6, (uint64_t)"ERROR", 5);
    v8 = sub_1B02D7994(v7, (uint64_t)") ", 2);
    sub_1B02D7994(v8, (uint64_t)"Not implemented.", 16);
    result = (uint64_t)sub_1B02D6948(&v9);
  }
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B02D64F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1B02D6948(&a13);
  _Unwind_Resume(a1);
}

void sub_1B02D650C(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  void *__p;
  void *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  if ((int)sub_1B03013F4() <= 2)
  {
    LOBYTE(__p) = 0;
    v2 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_1B02D7994(v2, (uint64_t)"(", 1);
    v3 = (_QWORD *)std::ostream::operator<<();
    v4 = sub_1B02D7994(v3, (uint64_t)") ", 2);
    v5 = sub_1B02D7994(v4, (uint64_t)"LOG(", 4);
    v6 = sub_1B02D7994(v5, (uint64_t)"ERROR", 5);
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    sub_1B02D7994(v7, (uint64_t)"Not implemented.", 16);
    sub_1B02D6948(&__p);
  }
  __p = 0;
  v10 = 0;
  v12 = 0;
  v11 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v8 = (char *)operator new(0x20uLL);
  *a1 = v8;
  a1[1] = v8;
  a1[2] = v8 + 32;
  a1[1] = sub_1B02D75C8((uint64_t)(a1 + 2), (uint64_t)&__p, (uint64_t)&v13, (uint64_t)v8);
  if (__p)
  {
    v10 = __p;
    operator delete(__p);
  }
}

void sub_1B02D6654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, void *__p, uint64_t a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = v14;
  *(_QWORD *)(v13 + 8) = v15;
  sub_1B02D7830(&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_1B02D6698()
{
  _QWORD *v0;
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  char v7;

  if ((int)sub_1B03013F4() <= 2)
  {
    v7 = 0;
    v0 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_interface.h", 17);
    sub_1B02D7994(v0, (uint64_t)"(", 1);
    v1 = (_QWORD *)std::ostream::operator<<();
    v2 = sub_1B02D7994(v1, (uint64_t)") ", 2);
    v3 = sub_1B02D7994(v2, (uint64_t)"LOG(", 4);
    v4 = sub_1B02D7994(v3, (uint64_t)"ERROR", 5);
    v5 = sub_1B02D7994(v4, (uint64_t)") ", 2);
    sub_1B02D7994(v5, (uint64_t)"Not implemented.", 16);
    sub_1B02D6948(&v7);
  }
  return 0.0;
}

void sub_1B02D6754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1B02D6948(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02D6768()
{
  return 0;
}

uint64_t sub_1B02D6770()
{
  return 0;
}

uint64_t sub_1B02D6778()
{
  return 0;
}

uint64_t sub_1B02D6780()
{
  return 0;
}

uint64_t sub_1B02D6788(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 88))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1B02D6798(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t sub_1B02D67B0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1B02D67C0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 112))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1B02D67D0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1B02D67E0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1B02D67F0(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1B02D6800(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_1B02D6810(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 64))(result);
  return result;
}

BOOL sub_1B02D6828(int a1, void *__s1, size_t a3, void *__s2, uint64_t a5)
{
  return a3 == a5 && memcmp(__s1, __s2, a3) == 0;
}

uint64_t sub_1B02D685C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::ios_base *v6;

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)(a1 + 112) = MEMORY[0x1E0DE4FE0] + 64;
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + *(_QWORD *)(v4 - 24)) = v5;
  v6 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v6, (void *)(a1 + 8));
  v6[1].__vftable = 0;
  v6[1].__fmtflags_ = -1;
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 112) = v3;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_1B02D6920(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

_BYTE *sub_1B02D6948(_BYTE *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)(MEMORY[0x1E0DE4A50] + *(_QWORD *)(*MEMORY[0x1E0DE4A50] - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  if (*a1)
    sub_1B0303018();
  return a1;
}

void sub_1B02D69E0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  sub_1B0303828(a1);
}

uint64_t sub_1B02D69FC(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B02D6AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B02D6AD8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *i;
  unint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_1B02D6D60(a1 + 24, (uint64_t)a2);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      for (i = *v14; i; i = *(void **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v10)
        {
          if ((sub_1B02D7208(a1 + 32, (unsigned __int8 *)i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v13 > 1)
          {
            if (v16 >= v11)
              v16 %= v11;
          }
          else
          {
            v16 &= v11 - 1;
          }
          if (v16 != v4)
            break;
        }
      }
    }
  }
  v17 = (_QWORD *)(a1 + 16);
  i = operator new(0x30uLL);
  *(_QWORD *)i = 0;
  *((_QWORD *)i + 1) = v10;
  v18 = *a4;
  v19 = **a4;
  *((_QWORD *)i + 4) = *((_QWORD *)*a4 + 2);
  *((_OWORD *)i + 1) = v19;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *(_QWORD *)v18 = 0;
  *((_BYTE *)i + 40) = 0;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_1B02D72D4(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)i = *v27;
LABEL_38:
    *v27 = i;
    goto LABEL_39;
  }
  *(_QWORD *)i = *v17;
  *v17 = i;
  *(_QWORD *)(v26 + 8 * v4) = v17;
  if (*(_QWORD *)i)
  {
    v28 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_38;
  }
LABEL_39:
  ++*v8;
  return i;
}

void sub_1B02D6D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  void **v10;
  uint64_t v11;

  sub_1B02D7508(v11, v10);
  _Unwind_Resume(a1);
}

unint64_t sub_1B02D6D60(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  char v5;

  v2 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v3 = v2;
  }
  return sub_1B02D6D9C((uint64_t)&v5, (uint64_t *)a2, v3);
}

unint64_t sub_1B02D6D9C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;

  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      v11 = v7 + v9;
      v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      v14 = v8 + a3 + v7 + v4;
      v15 = v14 + v5;
      v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      v18 = v17 + v6 + v9;
      v19 = __ROR8__(v18, 44);
      v20 = v18 + v10;
      v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      v23 = *a2;
      v22 = a2 + 4;
      v24 = v23 - 0x4B6D499041670D8DLL * v5;
      v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        v26 = *(v22 - 3);
        v27 = v24 + v15 + v11 + v26;
        v28 = v22[2];
        v29 = v22[3];
        v30 = v22[1];
        v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        v31 = v13 + v20;
        v32 = *(v22 - 2);
        v33 = *(v22 - 1);
        v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        v35 = v34 + v20 + v33;
        v36 = v34 + v26 + v32;
        v15 = v36 + v33;
        v37 = __ROR8__(v36, 44) + v34;
        v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        v16 = v37 + __ROR8__(v35 + v38, 21);
        v39 = v24 + v21 + *v22;
        v20 = v39 + v30 + v28 + v29;
        v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        v13 = v38;
        v25 += 64;
      }
      while (v25);
      v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1B02D7148(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_1B02D709C(a2, a3);
  }
  else
  {
    return sub_1B02D6FA4(a2, a3);
  }
}

unint64_t sub_1B02D6FA4(_DWORD *a1, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  if (a2 < 9)
  {
    if (a2 < 4)
    {
      result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    v3 = *(_QWORD *)((char *)a1 + a2 - 8);
    v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(_QWORD *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_1B02D709C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v2 = a1[1];
  v3 = 0xB492B66FBE98F273 * *a1;
  v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(_QWORD *)((char *)a1 + a2 - 8);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(_QWORD *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1B02D7148(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)((char *)a1 + a2 - 16);
  v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  v5 = a1[2];
  v4 = a1[3];
  v6 = __ROR8__(v3 + v4, 52);
  v7 = v3 + a1[1];
  v8 = __ROR8__(v7, 7);
  v9 = v7 + v5;
  v10 = *(_QWORD *)((char *)a1 + a2 - 32) + v5;
  v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  v12 = *(_QWORD *)((char *)a1 + a2 - 24) + v10 + v2;
  v13 = 0xC3A5C85C97CB3127 * (v12 + *(_QWORD *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(_QWORD *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

uint64_t sub_1B02D7208(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  int v12;
  BOOL v14;
  uint64_t result;

  v3 = a3;
  v4 = a2[23];
  if ((v4 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = a3[23];
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = *((_QWORD *)a3 + 1);
  if (v5 != v6)
    return 0;
  if (v7 < 0)
    v3 = *(unsigned __int8 **)a3;
  if ((v4 & 0x80) != 0)
    return memcmp(*(const void **)a2, v3, *((_QWORD *)a2 + 1)) == 0;
  if (!a2[23])
    return 1;
  v8 = v4 - 1;
  do
  {
    v10 = *a2++;
    v9 = v10;
    v12 = *v3++;
    v11 = v12;
    v14 = v8-- != 0;
    result = v9 == v11;
  }
  while (v9 == v11 && v14);
  return result;
}

void sub_1B02D72AC()
{
  std::bad_array_new_length *exception;
  std::bad_array_new_length *v1;

  exception = (std::bad_array_new_length *)__cxa_allocate_exception(8uLL);
  v1 = std::bad_array_new_length::bad_array_new_length(exception);
  __cxa_throw(v1, MEMORY[0x1E0DE4E98], MEMORY[0x1E0DE4390]);
}

void sub_1B02D72D4(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  unint64_t v5;
  uint8x8_t v6;
  uint64_t v7;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v4)
    goto LABEL_16;
  if (prime < *(_QWORD *)&v4)
  {
    v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      v5 = std::__next_prime(v5);
    }
    else
    {
      v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2)
        v5 = v7;
    }
    if (prime <= v5)
      prime = v5;
    if (prime < *(_QWORD *)&v4)
LABEL_16:
      sub_1B02D73B0(a1, prime);
  }
}

void sub_1B02D73B0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  uint8x8_t v9;
  void *v10;
  _QWORD *v11;
  unint64_t v12;

  if (a2)
  {
    if (a2 >> 61)
      sub_1B02D72AC();
    v4 = operator new(8 * a2);
    v5 = *(void **)a1;
    *(_QWORD *)a1 = v4;
    if (v5)
      operator delete(v5);
    v6 = 0;
    *(_QWORD *)(a1 + 8) = a2;
    do
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    v7 = *(_QWORD **)(a1 + 16);
    if (v7)
    {
      v8 = v7[1];
      v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2)
          v8 %= a2;
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v8) = a1 + 16;
      v11 = (_QWORD *)*v7;
      if (*v7)
      {
        do
        {
          v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2)
              v12 %= a2;
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v12))
            {
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *v7 = *v11;
            *v11 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
            **(_QWORD **)(*(_QWORD *)a1 + 8 * v12) = v11;
            v11 = v7;
          }
          v12 = v8;
LABEL_24:
          v7 = v11;
          v11 = (_QWORD *)*v11;
          v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    v10 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v10)
      operator delete(v10);
    *(_QWORD *)(a1 + 8) = 0;
  }
}

void sub_1B02D7508(uint64_t a1, void **__p)
{
  if (*(_BYTE *)(a1 + 8))
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void sub_1B02D7554(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1B02D75A4(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E60CA320, MEMORY[0x1E0DE42D0]);
}

void sub_1B02D7590(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1B02D75A4(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5020] + 16);
  return result;
}

uint64_t sub_1B02D75C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_1B02D768C((char *)v4, *(__int128 **)v6, *(__int128 **)(v6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3));
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1B02D77B0((uint64_t)v8);
  return v4;
}

void sub_1B02D7678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D77B0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *sub_1B02D768C(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = sub_1B02D7708(result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B02D76EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B02D7708(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1B02D7758();
  result = (char *)sub_1B02D776C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void sub_1B02D7758()
{
  sub_1B02D7554("vector");
}

void *sub_1B02D776C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    sub_1B02D72AC();
  return operator new(24 * a2);
}

uint64_t sub_1B02D77B0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02D77E4(a1);
  return a1;
}

void sub_1B02D77E4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  if (v1 != v2)
  {
    v3 = **(_QWORD **)(a1 + 16);
    do
    {
      v5 = *(void **)(v3 - 32);
      v3 -= 32;
      v4 = v5;
      if (v5)
      {
        *(_QWORD *)(v1 - 24) = v4;
        operator delete(v4);
      }
      v1 = v3;
    }
    while (v3 != v2);
  }
}

void sub_1B02D7830(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1B02D7870((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1B02D7870(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 32);
      v4 -= 32;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 24) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1B02D78C4()
{
  sub_1B02D7554("basic_string");
}

void sub_1B02D78D8(_QWORD *a1)
{
  uint64_t v2;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E60CCA98;
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1B5E07CB4](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  JUMPOUT(0x1B5E07CD8);
}

uint64_t **sub_1B02D7938(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    JUMPOUT(0x1B5E07CD8);
  }
  return result;
}

_QWORD *sub_1B02D7994(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  const std::locale::facet *v10;
  uint64_t v11;
  _BYTE v13[16];
  std::locale v14;

  MEMORY[0x1B5E07AF8](v13, a1);
  if (v13[0])
  {
    v6 = (uint64_t)a1 + *(_QWORD *)(*a1 - 24);
    v7 = *(_QWORD *)(v6 + 40);
    v8 = *(_DWORD *)(v6 + 8);
    v9 = *(_DWORD *)(v6 + 144);
    if (v9 == -1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
      v10 = std::locale::use_facet(&v14, MEMORY[0x1E0DE4A90]);
      v9 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
      std::locale::~locale(&v14);
      *(_DWORD *)(v6 + 144) = v9;
    }
    if ((v8 & 0xB0) == 0x20)
      v11 = a2 + a3;
    else
      v11 = a2;
    if (!sub_1B02D7AF8(v7, a2, v11, a2 + a3, v6, (char)v9))
      std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 5);
  }
  MEMORY[0x1B5E07B04](v13);
  return a1;
}

void sub_1B02D7A9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
  _QWORD *v12;

  MEMORY[0x1B5E07B04](&a10);
  __cxa_begin_catch(a1);
  std::ios_base::__set_badbit_and_consider_rethrow((std::ios_base *)((char *)v12 + *(_QWORD *)(*v12 - 24)));
  __cxa_end_catch();
  JUMPOUT(0x1B02D7A7CLL);
}

void sub_1B02D7AE4(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1B02D7AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6;
  uint64_t v11;
  int64_t v12;
  void **v13;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v18;

  v6 = a1;
  if (a1)
  {
    v11 = *(_QWORD *)(a5 + 24);
    if (v11 <= a4 - a2)
      v12 = 0;
    else
      v12 = v11 - (a4 - a2);
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1) != a3 - a2)
      return 0;
    if (v12 >= 1)
    {
      sub_1B02D7C34(__p, v12, __c);
      v13 = v18 >= 0 ? __p : (void **)__p[0];
      v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(_QWORD *)v6 + 96))(v6, v13, v12);
      if (v18 < 0)
        operator delete(__p[0]);
      if (v14 != v12)
        return 0;
    }
    v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 96))(v6, a3, v15) == v15)
      *(_QWORD *)(a5 + 24) = 0;
    else
      return 0;
  }
  return v6;
}

void sub_1B02D7C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02D7C34(_QWORD *__b, size_t __len, int __c)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __b[1] = __len;
    __b[2] = v8 | 0x8000000000000000;
    *__b = v6;
  }
  else
  {
    *((_BYTE *)__b + 23) = __len;
    v6 = __b;
    if (!__len)
      goto LABEL_9;
  }
  memset(v6, __c, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __b;
}

void sub_1B02D7CDC(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1B02D7CDC(a1, *a2);
    sub_1B02D7CDC(a1, a2[1]);
    operator delete(a2);
  }
}

_QWORD *sub_1B02D7D1C(_QWORD *a1, unint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v13;
  int v14;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02D7DEC(a1, a2);
    v6 = *a3;
    v7 = a1[1];
    v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        v13 = *a1 + 8 * (v7 >> 6);
        v14 = v7 & 0x3F;
        if (v6)
          sub_1B02D7E64(&v13, a2);
        else
          sub_1B02D7F14((uint64_t)&v13, a2);
        return a1;
      }
    }
    else
    {
      v9 = v8 - 1;
    }
    v10 = v9 >> 6;
    if (v8 >= 0x41)
      v11 = v10;
    else
      v11 = 0;
    *(_QWORD *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

void *sub_1B02D7DEC(_QWORD *a1, uint64_t a2)
{
  void *result;
  uint64_t v4;

  if (a2 < 0)
    sub_1B02D7758();
  result = sub_1B02D7E30((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void *sub_1B02D7E30(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61)
    sub_1B02D72AC();
  return operator new(8 * a2);
}

_QWORD *sub_1B02D7E64(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v3;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v3 = result;
  v4 = *((_DWORD *)result + 2);
  v5 = (_QWORD *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    v2 = a2 - v6;
    *result = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    result = memset(v5, 255, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void sub_1B02D7F14(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  int v4;
  _QWORD *v5;
  unint64_t v6;
  unint64_t v7;
  _QWORD *v8;

  v2 = a2;
  v4 = *(_DWORD *)(a1 + 8);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2)
      v6 = a2;
    else
      v6 = (64 - v4);
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    v2 = a2 - v6;
    *(_QWORD *)a1 = v5;
  }
  v7 = v2 >> 6;
  if (v2 >= 0x40)
    bzero(v5, 8 * v7);
  if ((v2 & 0x3F) != 0)
  {
    v8 = &v5[v7];
    *(_QWORD *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

_OWORD *sub_1B02D7FC0(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1B02D8048((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    sub_1B02D80E4(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

_QWORD *sub_1B02D8048(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;

  v5 = (_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(a1 + 8);
  if (v4)
  {
    v7 = a1 + 16;
    do
    {
      while (1)
      {
        v8 = v4;
        v9 = (uint64_t)(v4 + 4);
        if (!sub_1B02D8138(v7, a3, (uint64_t)(v4 + 4)))
          break;
        v4 = (_QWORD *)*v8;
        v5 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (!sub_1B02D8138(v7, v9, a3))
        break;
      v5 = v8 + 1;
      v4 = (_QWORD *)v8[1];
    }
    while (v4);
  }
  else
  {
    v8 = (_QWORD *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t *sub_1B02D80E4(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t *v5;
  uint64_t *result;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  result = sub_1B02D8180(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t sub_1B02D8138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v3;
  size_t v4;
  const void *v5;
  size_t v6;
  size_t v7;
  int v8;
  unsigned int v9;

  v3 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(const void **)a3;
  v6 = *(_QWORD *)(a3 + 8);
  if (v6 >= v4)
    v7 = v4;
  else
    v7 = *(_QWORD *)(a3 + 8);
  v8 = memcmp(v3, v5, v7);
  if (v4 < v6)
    v9 = -1;
  else
    v9 = 1;
  if (v4 == v6)
    v9 = 0;
  if (v8)
    v9 = v8;
  return v9 >> 31;
}

uint64_t *sub_1B02D8180(uint64_t *result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *((_BYTE *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      v2 = (uint64_t *)a2[2];
      if (*((_BYTE *)v2 + 24))
        return result;
      v3 = (uint64_t *)v2[2];
      v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), v5 = (_BYTE *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            v9 = (uint64_t **)a2[2];
          }
          else
          {
            v9 = (uint64_t **)v2[1];
            v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = v9;
            *v9 = v2;
            v2[2] = (uint64_t)v9;
            v3 = v9[2];
            v2 = (uint64_t *)*v3;
          }
          *((_BYTE *)v9 + 24) = 1;
          *((_BYTE *)v3 + 24) = 0;
          v13 = v2[1];
          *v3 = v13;
          if (v13)
            *(_QWORD *)(v13 + 16) = v3;
          v2[2] = v3[2];
          *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          v11 = a2[1];
          *v2 = v11;
          if (v11)
          {
            *(_QWORD *)(v11 + 16) = v2;
            v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(_QWORD *)(v2[2] + 8 * (*(_QWORD *)v2[2] != (_QWORD)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((_BYTE *)a2 + 24) = 1;
        *((_BYTE *)v3 + 24) = 0;
        v2 = (uint64_t *)v3[1];
        v12 = *v2;
        v3[1] = *v2;
        if (v12)
          *(_QWORD *)(v12 + 16) = v3;
        v2[2] = v3[2];
        *(_QWORD *)(v3[2] + 8 * (*(_QWORD *)v3[2] != (_QWORD)v3)) = v2;
        *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((_BYTE *)v2 + 24) = 1;
      a2 = v3;
      *((_BYTE *)v3 + 24) = v3 == result;
      *v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_1B02D8318(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  if (a2 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (a2 > 0x16)
  {
    v4 = (a2 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a2 | 7) != 0x17)
      v4 = a2 | 7;
    v5 = v4 + 1;
    v6 = operator new(v4 + 1);
    *(_QWORD *)(a1 + 8) = a2;
    *(_QWORD *)(a1 + 16) = v5 | 0x8000000000000000;
    *(_QWORD *)a1 = v6;
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = 0;
    *(_BYTE *)(a1 + 23) = a2;
  }
  return a1;
}

uint64_t *sub_1B02D839C(uint64_t **a1, uint64_t a2, _OWORD *a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)sub_1B02D8048((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    sub_1B02D80E4(a1, v9, v7, v6);
  }
  return v6;
}

uint64_t sub_1B02D841C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(_QWORD **)result;
  if (!(_DWORD)v3)
    goto LABEL_9;
  v5 = (64 - v3);
  if (v5 >= a2)
    v6 = a2;
  else
    v6 = (64 - v3);
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4) != 0)
  {
    v7 = __rbit64((0xFFFFFFFFFFFFFFFFLL >> (64 - v3 - v6)) & (-1 << v3) & ~*v4);
LABEL_22:
    *(_QWORD *)a3 = v4;
    *(_DWORD *)(a3 + 8) = __clz(v7);
    return result;
  }
  if (v5 < a2)
  {
    a2 -= v6;
    *(_QWORD *)result = ++v4;
LABEL_9:
    if (a2 < 0x40)
    {
LABEL_12:
      if (!a2 || (v8 = (0xFFFFFFFFFFFFFFFFLL >> -(char)a2) & ~*v4) == 0)
      {
        *(_QWORD *)a3 = v4;
        *(_DWORD *)(a3 + 8) = a2;
        return result;
      }
    }
    else
    {
      while (*v4 == -1)
      {
        *(_QWORD *)result = ++v4;
        a2 -= 64;
        if (a2 <= 0x3F)
          goto LABEL_12;
      }
      v8 = ~*v4;
    }
    v7 = __rbit64(v8);
    goto LABEL_22;
  }
  v9 = v3 + a2 - 63;
  if (v9 < 0)
    v9 = v3 + a2;
  v10 = v9 >> 6;
  v11 = (v3 + a2) >> 6;
  if ((a2 & 0x8000000000000000) != 0)
    v11 = v10;
  *(_QWORD *)a3 = &v4[v11];
  *(_DWORD *)(a3 + 8) = ((_BYTE)v3 + (_BYTE)a2) & 0x3F;
  return result;
}

void *sub_1B02D8514(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60)
    sub_1B02D72AC();
  return operator new(16 * a2);
}

unsigned __int8 *sub_1B02D8548(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = sub_1B02D6D60((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v6 == v13)
      {
        if ((sub_1B02D7208(v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

void *sub_1B02D8648(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62)
    sub_1B02D72AC();
  return operator new(4 * a2);
}

uint64_t *sub_1B02D867C(void (**a1)(unint64_t, uint64_t), unint64_t *a2)
{
  _OWORD v4[3];
  _OWORD v5[6];
  _OWORD v6[3];
  uint64_t v7;

  if (!a2[3])
    return (uint64_t *)sub_1B02D8FD4((uint64_t)a1, a2);
  v7 = 0;
  memset(v6, 0, sizeof(v6));
  memset(v5, 0, sizeof(v5));
  memset(v4, 0, sizeof(v4));
  sub_1B02D8BA4(a1, a2, (int **)v4);
  sub_1B02D8CB8((uint64_t)a1, (uint64_t)v4);
  sub_1B02D9768((uint64_t *)v4);
  sub_1B02D955C((uint64_t *)&v4[1] + 1);
  sub_1B02D87A4((uint64_t *)v5);
  sub_1B02D94D4((uint64_t *)&v5[1] + 1);
  sub_1B02D9290((uint64_t *)&v5[4] + 1);
  sub_1B02D9290((uint64_t *)v6);
  sub_1B02D9290((uint64_t *)&v6[1] + 1);
  v7 = 0;
  return sub_1B02DAAC0((uint64_t *)v4);
}

void sub_1B02D8748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02DAAC0(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02D875C(uint64_t *a1)
{
  sub_1B02D87A4(a1);
  if (*a1)
  {
    MEMORY[0x1B5E07CB4](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B02D87A4(uint64_t *a1)
{
  uint64_t result;

  sub_1B02D87EC(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_1B02D87EC(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_1B02D8848(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_1B02D8848(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_BYTE *)(v5 + i) = *(_BYTE *)(result + i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1B5E07CB4);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

void sub_1B02D895C(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

const char *sub_1B02D8980(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 8))
    return *(const char **)(a1 + 8);
  else
    return "";
}

uint64_t *sub_1B02D8998(uint64_t *a1)
{
  sub_1B02D89E0(a1);
  if (*a1)
  {
    MEMORY[0x1B5E07CB4](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B02D89E0(uint64_t *a1)
{
  uint64_t result;

  sub_1B02D8A28(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B02D8A28(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_1B02D8A94(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_1B02D8A94(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1B5E07CB4);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t sub_1B02D8BA4(void (**a1)(unint64_t, uint64_t), unint64_t *a2, int **a3)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v11;
  int v12;
  uint64_t v13;
  char v14;
  int v15;
  int v16;

  sub_1B02D9954((uint64_t *)a3);
  if (*a2)
  {
    v6 = 0;
    do
    {
      v7 = a2[2];
      v8 = *(_QWORD *)(a2[1] + 8 * v6);
      if (v7)
      {
        v9 = *(_QWORD *)(v7 + 8 * v6);
      }
      else
      {
        while (*(unsigned __int8 *)(v8 + v7++))
          ;
        v9 = v7 - 1;
      }
      v11 = a2[3];
      if (v11)
        v12 = *(_DWORD *)(v11 + 4 * v6);
      else
        v12 = v6;
      sub_1B02D9A24(a3, v8, v9, v12);
      ++v6;
      if (*a1)
        (*a1)(v6, *a2 + 1);
    }
    while (v6 < *a2);
  }
  sub_1B02D9E04((uint64_t)a3, 0);
  v13 = (uint64_t)*a3;
  v14 = *((_BYTE *)*a3 + 8);
  v15 = **a3;
  if (v14)
    v16 = (2 * *(unsigned __int8 *)(v13 + 9)) | (4 * v15);
  else
    v16 = 2 * v15;
  *a3[3] = v16 | *(unsigned __int8 *)(v13 + 10);
  *(_BYTE *)a3[6] = v14;
  sub_1B02D9768((uint64_t *)a3);
  sub_1B02D9290((uint64_t *)a3 + 15);
  sub_1B02D9290((uint64_t *)a3 + 18);
  sub_1B02D9290((uint64_t *)a3 + 21);
  return sub_1B02DA258((unsigned int **)a3 + 9);
}

uint64_t sub_1B02D8CB8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t i;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  int v16;
  int v17;
  unint64_t v18;
  int v19;
  int v20;
  int v21;
  unint64_t v22;
  char v23;
  int j;
  int *v25;
  _DWORD *v26;
  uint64_t v27;
  unsigned int v28;
  int *v29;
  int v30;
  uint64_t result;
  uint64_t v32;

  v4 = *(_QWORD *)(a2 + 32);
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_1B02D8A94((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  v9 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v8;
  if (v9)
    MEMORY[0x1B5E07CB4](v9, 0x1000C8052888210);
  v10 = *(_QWORD *)(a2 + 104);
  if (v10)
    bzero(*(void **)(a1 + 64), 4 * v10);
  v11 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v13 = v11 + i;
    *(_WORD *)(v13 + 8) = 0;
    *(_QWORD *)v13 = 0;
  }
  v14 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v11;
  if (v14)
    MEMORY[0x1B5E07CB4](v14, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_1B02DA550(a1);
  v15 = *(int **)(a1 + 32);
  v16 = v15[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v16;
    if (!v16)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v17 = *v15;
  v15[3 * (*v15 & 0xFFF) + 1] = v16;
  v15[3 * (v15[1] & 0xFFF)] = v17;
  *((_WORD *)v15 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (**(_DWORD **)(a2 + 24) >= 4u)
  {
    sub_1B02DA3EC(a1, (_QWORD *)a2, 0, 0);
    v15 = *(int **)(a1 + 32);
  }
  v18 = *(_QWORD *)(a1 + 16) >> 8;
  if (v18 <= 0x10)
    v19 = 0;
  else
    v19 = v18 - 16;
  v32 = *(_QWORD *)(a1 + 16) >> 8;
  if (v19 != (_DWORD)v18)
  {
    v20 = v19 << 8;
    do
    {
      v21 = 0;
      v22 = (v19 << 8);
      while (1)
      {
        v23 = v20 + v21;
        if (!BYTE1(v15[3 * ((v20 + v21) & 0xFFF) + 2]))
          break;
        if (++v21 == 256)
        {
          v23 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v15[3 * (v22 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v22)
          {
            sub_1B02DA550(a1);
            v15 = *(int **)(a1 + 32);
          }
          v25 = &v15[3 * (v22 & 0xFFF)];
          v28 = v25[1];
          v26 = v25 + 1;
          v27 = v28;
          if (v22 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v27;
            if (v22 == v27)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v29 = &v15[3 * (v22 & 0xFFF)];
          v30 = *v29;
          v15[3 * (v30 & 0xFFF) + 1] = v27;
          v15[3 * (*v26 & 0xFFF)] = v30;
          *((_BYTE *)v29 + 8) = 1;
          LOBYTE((*v7)[v22]) = v23 ^ (v20 + j);
        }
        ++v22;
      }
      ++v19;
      v20 += 256;
    }
    while (v19 != (_DWORD)v32);
  }
  if (v15)
  {
    MEMORY[0x1B5E07CB4](v15, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_1B02D87A4((uint64_t *)(a1 + 40));
  result = *(_QWORD *)(a1 + 64);
  if (result)
  {
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_1B02D8FD4(uint64_t a1, unint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned int **v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int v13;
  int v14;
  unint64_t v15;
  int v16;
  int v17;
  int v18;
  unint64_t v19;
  char v20;
  int j;
  int *v22;
  _DWORD *v23;
  uint64_t v24;
  unsigned int v25;
  int *v26;
  int v27;
  uint64_t v29;

  v4 = *a2;
  v5 = 1;
  do
  {
    v6 = v5;
    v5 *= 2;
  }
  while (v6 < v4);
  v7 = (unsigned int **)(a1 + 8);
  if (*(_QWORD *)(a1 + 24) < v6)
    sub_1B02D8A94((uint64_t *)(a1 + 8), v6);
  v8 = operator new[]();
  for (i = 0; i != 49152; i += 12)
  {
    v10 = v8 + i;
    *(_WORD *)(v10 + 8) = 0;
    *(_QWORD *)v10 = 0;
  }
  v11 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = v8;
  if (v11)
    MEMORY[0x1B5E07CB4](v11, 0x1000C80CBA68D63);
  if (!*(_QWORD *)(a1 + 16))
    sub_1B02DA550(a1);
  v12 = *(int **)(a1 + 32);
  v13 = v12[1];
  if (!*(_DWORD *)(a1 + 72))
  {
    *(_DWORD *)(a1 + 72) = v13;
    if (!v13)
      *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
  }
  v14 = *v12;
  v12[3 * (*v12 & 0xFFF) + 1] = v13;
  v12[3 * (v12[1] & 0xFFF)] = v14;
  *((_WORD *)v12 + 4) = 257;
  **v7 = **v7 & 0x80000100 | 0x400;
  if (*a2)
  {
    sub_1B02DAB7C(a1, a2, 0, *a2, 0, 0);
    v12 = *(int **)(a1 + 32);
  }
  v15 = *(_QWORD *)(a1 + 16) >> 8;
  if (v15 <= 0x10)
    v16 = 0;
  else
    v16 = v15 - 16;
  v29 = *(_QWORD *)(a1 + 16) >> 8;
  if (v16 != (_DWORD)v15)
  {
    v17 = v16 << 8;
    do
    {
      v18 = 0;
      v19 = (v16 << 8);
      while (1)
      {
        v20 = v17 + v18;
        if (!BYTE1(v12[3 * ((v17 + v18) & 0xFFF) + 2]))
          break;
        if (++v18 == 256)
        {
          v20 = 0;
          break;
        }
      }
      for (j = 0; j != 256; ++j)
      {
        if (!LOBYTE(v12[3 * (v19 & 0xFFF) + 2]))
        {
          if (*(_QWORD *)(a1 + 16) <= v19)
          {
            sub_1B02DA550(a1);
            v12 = *(int **)(a1 + 32);
          }
          v22 = &v12[3 * (v19 & 0xFFF)];
          v25 = v22[1];
          v23 = v22 + 1;
          v24 = v25;
          if (v19 == *(_DWORD *)(a1 + 72))
          {
            *(_DWORD *)(a1 + 72) = v24;
            if (v19 == v24)
              *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          }
          v26 = &v12[3 * (v19 & 0xFFF)];
          v27 = *v26;
          v12[3 * (v27 & 0xFFF) + 1] = v24;
          v12[3 * (*v23 & 0xFFF)] = v27;
          *((_BYTE *)v26 + 8) = 1;
          LOBYTE((*v7)[v19]) = v20 ^ (v17 + j);
        }
        ++v19;
      }
      ++v16;
      v17 += 256;
    }
    while (v16 != (_DWORD)v29);
  }
  if (v12)
  {
    MEMORY[0x1B5E07CB4](v12, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  return sub_1B02D87A4((uint64_t *)(a1 + 40));
}

uint64_t *sub_1B02D9268(uint64_t *a1)
{
  sub_1B02D9290(a1);
  return sub_1B02D9444(a1);
}

uint64_t sub_1B02D9290(uint64_t *a1)
{
  uint64_t result;

  sub_1B02D92D8(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_1B02D92D8(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_1B02D9334(result, a2);
    v4 = v3[1];
  }
  if (v4 < a2)
    v3[1] = a2;
  return result;
}

uint64_t sub_1B02D9334(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1B5E07CB4);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_1B02D9444(uint64_t *a1)
{
  sub_1B02D9290(a1);
  if (*a1)
  {
    MEMORY[0x1B5E07CB4](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t *sub_1B02D948C(uint64_t *a1)
{
  uint64_t v2;

  sub_1B02D94D4(a1);
  v2 = a1[3];
  if (v2)
  {
    MEMORY[0x1B5E07CB4](v2, 0x1000C8052888210);
    a1[3] = 0;
  }
  return sub_1B02D9444(a1);
}

uint64_t sub_1B02D94D4(uint64_t *a1)
{
  uint64_t result;

  sub_1B02D9290(a1);
  result = a1[3];
  if (result)
  {
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8052888210);
    a1[3] = 0;
  }
  return result;
}

uint64_t *sub_1B02D9514(uint64_t *a1)
{
  sub_1B02D955C(a1);
  if (*a1)
  {
    MEMORY[0x1B5E07CB4](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B02D955C(uint64_t *a1)
{
  uint64_t result;

  sub_1B02D95A4(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

void sub_1B02D95A4(uint64_t *a1, unint64_t a2)
{
  unint64_t v4;

  v4 = a1[1];
  if (v4 > a2)
  {
    a1[1] = a2;
    v4 = a2;
  }
  if (a1[2] < a2)
  {
    sub_1B02D9610(a1, a2);
    v4 = a1[1];
  }
  if (a2 > v4)
  {
    bzero((void *)(*a1 + 4 * v4), 4 * (a2 - v4));
    a1[1] = a2;
  }
}

uint64_t sub_1B02D9610(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t i;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    for (i = 0; i != v7; ++i)
      *(_DWORD *)(v5 + 4 * i) = *(_DWORD *)(result + 4 * i);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1B5E07CB4);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_1B02D9720(uint64_t *a1)
{
  sub_1B02D9768(a1);
  if (*a1)
  {
    MEMORY[0x1B5E07CB4](*a1, 0x1000C8077774924);
    *a1 = 0;
  }
  return a1;
}

uint64_t sub_1B02D9768(uint64_t *a1)
{
  uint64_t result;

  sub_1B02D97B0(a1, 0);
  result = *a1;
  if (*a1)
  {
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8077774924);
    *a1 = 0;
  }
  a1[1] = 0;
  a1[2] = 0;
  return result;
}

uint64_t *sub_1B02D97B0(uint64_t *result, unint64_t a2)
{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;

  v3 = result;
  v4 = result[1];
  if (v4 > a2)
  {
    result[1] = a2;
    v4 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_1B02D9830(result, a2);
    v4 = v3[1];
  }
  for (; v4 < a2; v4 = v3[1])
  {
    v3[1] = v4 + 1;
    v5 = *v3 + 12 * v4;
    *(_DWORD *)(v5 + 7) = 0;
    *(_QWORD *)v5 = 0;
  }
  return result;
}

uint64_t sub_1B02D9830(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a2 >= 2 * a1[2])
  {
    v4 = a2;
  }
  else
  {
    v3 = 1;
    do
    {
      v4 = v3;
      v3 *= 2;
    }
    while (v4 < a2);
  }
  v5 = operator new[]();
  result = *a1;
  v7 = a1[1];
  if (v7)
  {
    v8 = 0;
    do
    {
      v9 = v5 + v8;
      v10 = *(_QWORD *)(result + v8);
      *(_DWORD *)(v9 + 8) = *(_DWORD *)(result + v8 + 8);
      *(_QWORD *)v9 = v10;
      v8 += 12;
      --v7;
    }
    while (v7);
    *a1 = v5;
    a1[2] = v4;
LABEL_11:
    JUMPOUT(0x1B5E07CB4);
  }
  *a1 = v5;
  a1[2] = v4;
  if (result)
    goto LABEL_11;
  return result;
}

uint64_t *sub_1B02D9954(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;

  v7 = 0;
  sub_1B02D9C48(a1 + 15, 0x400uLL, &v7);
  v2 = a1[22];
  if (v2)
  {
    v3 = *a1 + 12 * *(unsigned int *)(a1[21] + 4 * v2 - 4);
    *(_DWORD *)(v3 + 7) = 0;
    *(_QWORD *)v3 = 0;
    --a1[22];
  }
  else
  {
    sub_1B02D9CCC(a1);
  }
  sub_1B02D9D20(a1 + 9);
  sub_1B02D9D6C(a1 + 3);
  v4 = a1[7];
  if (v4 == a1[8])
  {
    sub_1B02D8848(a1 + 6, v4 + 1);
    v4 = a1[7];
  }
  a1[7] = v4 + 1;
  a1[24] = 1;
  *(_BYTE *)(*a1 + 8) = -1;
  v6 = 0;
  return sub_1B02D9DB4(a1 + 18, &v6);
}

_QWORD *sub_1B02D9A24(_QWORD *result, uint64_t a2, unint64_t a3, int a4)
{
  int v5;
  _QWORD *v7;
  unint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  int *v19;
  int v20;
  unsigned int v21;
  _QWORD *exception;
  const char *v23;
  int v24;
  unsigned int v25;

  if (a4 < 0)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1106: exception: failed to"
          " insert key: negative value";
    goto LABEL_27;
  }
  if (!a3)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1108: exception: failed to"
          " insert key: zero-length key";
LABEL_27:
    *exception = &off_1E60CCAB8;
    exception[1] = v23;
    __cxa_throw(exception, (struct type_info *)&unk_1E60CAF60, (void (*)(void *))std::exception::~exception);
  }
  v5 = a4;
  v7 = result;
  v8 = 0;
  v9 = 0;
  v10 = *result;
  while (1)
  {
    v11 = *(_DWORD *)(v10 + 12 * v9);
    if (!v11)
      goto LABEL_12;
    v12 = *(unsigned __int8 *)(a2 + v8);
    if (v8 < a3 && !*(_BYTE *)(a2 + v8))
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1122: exception: failed "
            "to insert key: invalid null character";
      goto LABEL_27;
    }
    v13 = *(unsigned __int8 *)(v10 + 12 * v11 + 8);
    if (v12 < v13)
    {
      exception = __cxa_allocate_exception(0x10uLL);
      v23 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1127: exception: failed "
            "to insert key: wrong key order";
      goto LABEL_27;
    }
    if (v12 > v13)
      break;
    ++v8;
    v9 = *(_DWORD *)(v10 + 12 * v9);
    if (v8 > a3)
      return result;
  }
  *(_BYTE *)(v10 + 12 * v11 + 10) = 1;
  result = (_QWORD *)sub_1B02D9E04((uint64_t)result, v11);
LABEL_12:
  if (v8 <= a3)
  {
    v24 = v5;
    do
    {
      if (v8 >= a3)
        v14 = 0;
      else
        v14 = *(_BYTE *)(a2 + v8);
      v25 = 0;
      v15 = v7[22];
      if (v15)
      {
        v16 = *(_DWORD *)(v7[21] + 4 * v15 - 4);
        v17 = *v7 + 12 * v16;
        *(_DWORD *)(v17 + 7) = 0;
        *(_QWORD *)v17 = 0;
        --v7[22];
      }
      else
      {
        v16 = *((_DWORD *)v7 + 2);
        sub_1B02D9CCC(v7);
      }
      v25 = v16;
      v18 = *v7;
      v19 = (int *)(*v7 + 12 * v9);
      v20 = *v19;
      if (!*v19)
        *(_BYTE *)(v18 + 12 * v16 + 9) = 1;
      *(_DWORD *)(v18 + 12 * v16 + 4) = v20;
      v21 = v25;
      *(_BYTE *)(v18 + 12 * v25 + 8) = v14;
      *v19 = v21;
      result = sub_1B02D9DB4(v7 + 18, &v25);
      v9 = v25;
      ++v8;
    }
    while (v8 <= a3);
    v5 = v24;
  }
  *(_DWORD *)(*v7 + 12 * v9) = v5;
  return result;
}

uint64_t *sub_1B02D9C48(uint64_t *result, unint64_t a2, _DWORD *a3)
{
  uint64_t *v5;
  unint64_t v6;
  uint64_t v7;

  v5 = result;
  v6 = result[1];
  if (v6 > a2)
  {
    result[1] = a2;
    v6 = a2;
  }
  if (result[2] < a2)
  {
    result = (uint64_t *)sub_1B02D9334(result, a2);
    v6 = v5[1];
  }
  if (v6 < a2)
  {
    v7 = *v5;
    do
      *(_DWORD *)(v7 + 4 * v6++) = *a3;
    while (a2 != v6);
    v5[1] = a2;
  }
  return result;
}

uint64_t *sub_1B02D9CCC(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_1B02D9830(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  v3 = *v1 + 12 * v2;
  *(_DWORD *)(v3 + 7) = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t *sub_1B02D9D20(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;
  int v3;

  v1 = result;
  v2 = result[5];
  if ((v2 & 0x1F) == 0)
  {
    v3 = 0;
    result = sub_1B02D9DB4(result, &v3);
    v2 = v1[5];
  }
  v1[5] = v2 + 1;
  return result;
}

uint64_t *sub_1B02D9D6C(uint64_t *result)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = result;
  v2 = result[1];
  if (v2 == result[2])
  {
    result = (uint64_t *)sub_1B02D9610(result, v2 + 1);
    v2 = v1[1];
  }
  v1[1] = v2 + 1;
  *(_DWORD *)(*v1 + 4 * v2) = 0;
  return result;
}

uint64_t *sub_1B02D9DB4(uint64_t *result, _DWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_1B02D9334(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_DWORD *)(*v3 + 4 * v4) = *a2;
  return result;
}

uint64_t sub_1B02D9E04(uint64_t result, int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  unsigned int v37;
  int v38;
  unsigned int v39;

  v2 = result;
  v3 = *(_QWORD *)(result + 152) - 1;
  v4 = *(_DWORD *)(*(_QWORD *)(result + 144) + 4 * v3);
  if (v4 != a2)
  {
    v35 = (uint64_t *)(result + 120);
    v5 = (_QWORD *)(result + 24);
    v6 = (_QWORD *)(result + 72);
    while (1)
    {
      *(_QWORD *)(v2 + 152) = v3;
      v7 = *(_QWORD *)(v2 + 128);
      if (*(_QWORD *)(v2 + 192) >= v7 - (v7 >> 2))
      {
        v8 = 2 * v7;
        sub_1B02D9290(v35);
        v38 = 0;
        sub_1B02D9C48(v35, v8, &v38);
        v9 = *(_QWORD *)(v2 + 32);
        if (v9 >= 2)
        {
          v10 = *(_QWORD *)(v2 + 48);
          for (i = 1; i != v9; ++i)
          {
            if (!*(_BYTE *)(v10 + i) || (*(_DWORD *)(*v5 + 4 * i) & 2) != 0)
            {
              v12 = 0;
              if ((_DWORD)i)
              {
                v13 = i;
                do
                {
                  v14 = *(_DWORD *)(*v5 + 4 * v13);
                  v15 = (v14 ^ ~(*(unsigned __int8 *)(v10 + v13) << 24)) + (v14 << 15);
                  v16 = 2057 * ((5 * (v15 ^ (v15 >> 12))) ^ ((5 * (v15 ^ (v15 >> 12))) >> 4));
                  v12 ^= HIWORD(v16) ^ v16;
                  v17 = __CFADD__(v13++, 1);
                }
                while (!v17 && (v14 & 1) != 0);
              }
              v18 = *(_QWORD *)(v2 + 120);
              do
              {
                v19 = (unint64_t)v12 % *(_QWORD *)(v2 + 128);
                v12 = v19 + 1;
              }
              while (*(_DWORD *)(v18 + 4 * v19));
              *(_DWORD *)(v18 + 4 * v19) = i;
            }
          }
        }
      }
      v20 = 0;
      if (v4)
      {
        v21 = v4;
        do
        {
          ++v20;
          v21 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v21 + 4);
        }
        while (v21);
      }
      v37 = 0;
      result = sub_1B02DA0EC((uint64_t *)v2, v4, &v37);
      if ((_DWORD)result)
      {
        v22 = result;
        *(_DWORD *)(*v6 + 4 * (result >> 5)) |= 1 << result;
        if (v4)
          goto LABEL_22;
        goto LABEL_23;
      }
      if (!v20)
        break;
      do
      {
        sub_1B02D9D20((uint64_t *)(v2 + 72));
        result = (uint64_t)sub_1B02D9D6C((uint64_t *)(v2 + 24));
        v25 = *(_QWORD *)(v2 + 56);
        if (v25 == *(_QWORD *)(v2 + 64))
        {
          result = sub_1B02D8848((uint64_t *)(v2 + 48), v25 + 1);
          v25 = *(_QWORD *)(v2 + 56);
        }
        *(_QWORD *)(v2 + 56) = v25 + 1;
        --v20;
      }
      while (v20);
      v26 = *(_DWORD *)(v2 + 112) - 1;
      if (v4)
        goto LABEL_32;
LABEL_37:
      v22 = v26 + 1;
      *(_DWORD *)(*(_QWORD *)(v2 + 120) + 4 * v37) = v26 + 1;
      ++*(_QWORD *)(v2 + 192);
      if (v4)
      {
        do
        {
LABEL_22:
          v23 = *(_DWORD *)(*(_QWORD *)v2 + 12 * v4 + 4);
          v39 = v4;
          result = (uint64_t)sub_1B02D9DB4((uint64_t *)(v2 + 168), &v39);
          v4 = v23;
        }
        while (v23);
      }
LABEL_23:
      v24 = *(_QWORD *)(v2 + 144);
      v3 = *(_QWORD *)(v2 + 152) - 1;
      *(_DWORD *)(*(_QWORD *)v2 + 12 * *(unsigned int *)(v24 + 4 * v3)) = v22;
      v4 = *(_DWORD *)(v24 + 4 * v3);
      if (v4 == a2)
        goto LABEL_2;
    }
    v26 = 0;
    if (!v4)
      goto LABEL_37;
LABEL_32:
    v27 = *(_QWORD *)v2;
    v28 = v4;
    do
    {
      v29 = v28;
      v30 = v27 + 12 * v28;
      v31 = *(unsigned __int8 *)(v30 + 8);
      v32 = *(_DWORD *)v30;
      if (v31)
        v33 = (2 * *(unsigned __int8 *)(v27 + 12 * v29 + 9)) | (4 * v32);
      else
        v33 = 2 * v32;
      v34 = 3 * v29;
      *(_DWORD *)(*(_QWORD *)(v2 + 24) + 4 * v26) = v33 | *(unsigned __int8 *)(v27 + 4 * v34 + 10);
      *(_BYTE *)(*(_QWORD *)(v2 + 48) + v26--) = v31;
      v27 = *(_QWORD *)v2;
      v28 = *(_DWORD *)(*(_QWORD *)v2 + 4 * v34 + 4);
    }
    while (v28);
    goto LABEL_37;
  }
LABEL_2:
  *(_QWORD *)(v2 + 152) = v3;
  return result;
}

uint64_t sub_1B02DA0EC(uint64_t *a1, unsigned int a2, _DWORD *a3)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  int *v24;
  int v25;
  int v26;
  int v27;

  v3 = a2;
  if (a2)
  {
    LODWORD(v4) = 0;
    v5 = *a1;
    v6 = a2;
    do
    {
      v7 = (int *)(v5 + 12 * v6);
      v8 = *((unsigned __int8 *)v7 + 8);
      v9 = *v7;
      if (v8)
        v10 = (2 * *(unsigned __int8 *)(v5 + 12 * v6 + 9)) | (4 * v9);
      else
        v10 = 2 * v9;
      v11 = v5 + 12 * v6;
      v12 = ((v10 | *(unsigned __int8 *)(v11 + 10)) ^ ~(v8 << 24)) + ((v10 | *(unsigned __int8 *)(v11 + 10)) << 15);
      v13 = 2057 * ((5 * (v12 ^ (v12 >> 12))) ^ ((5 * (v12 ^ (v12 >> 12))) >> 4));
      v4 = v4 ^ HIWORD(v13) ^ v13;
      v6 = *(unsigned int *)(v11 + 4);
    }
    while ((_DWORD)v6);
  }
  else
  {
    v4 = 0;
  }
  v15 = a1[15];
  v14 = a1[16];
  v16 = v4 % v14;
  *a3 = v4 % v14;
  v17 = *(unsigned int *)(v15 + 4 * (v4 % v14));
  if ((_DWORD)v17)
  {
    v18 = *a1;
    v19 = (unsigned int *)(*a1 + 12 * a2 + 4);
    v20 = a1[3];
    do
    {
      v21 = *v19;
      v22 = v17;
      if ((_DWORD)v21)
      {
        v22 = v17;
        while ((*(_DWORD *)(v20 + 4 * v22) & 1) != 0)
        {
          ++v22;
          LODWORD(v21) = *(_DWORD *)(v18 + 12 * v21 + 4);
          if (!(_DWORD)v21)
            goto LABEL_15;
        }
      }
      else
      {
LABEL_15:
        if ((*(_DWORD *)(v20 + 4 * v22) & 1) == 0)
        {
          if (!v3)
            return v17;
          v23 = v3;
          while (1)
          {
            v24 = (int *)(v18 + 12 * v23);
            v25 = *((unsigned __int8 *)v24 + 8);
            v26 = *v24;
            v27 = v25 ? (2 * *(unsigned __int8 *)(v18 + 12 * v23 + 9)) | (4 * v26) : 2 * v26;
            if ((v27 | *(unsigned __int8 *)(v18 + 12 * v23 + 10)) != *(_DWORD *)(v20 + 4 * v22)
              || v25 != *(unsigned __int8 *)(a1[6] + v22))
            {
              break;
            }
            v23 = *(unsigned int *)(v18 + 12 * v23 + 4);
            --v22;
            if (!(_DWORD)v23)
              return v17;
          }
        }
      }
      v16 = (v16 + 1) % v14;
      *a3 = v16;
      v17 = *(unsigned int *)(v15 + 4 * v16);
    }
    while ((_DWORD)v17);
  }
  return v17;
}

uint64_t sub_1B02DA258(unsigned int **a1)
{
  uint64_t v2;
  uint64_t result;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;

  v2 = operator new[]();
  result = (uint64_t)a1[3];
  a1[3] = (unsigned int *)v2;
  if (result)
    result = MEMORY[0x1B5E07CB4](result, 0x1000C8052888210);
  a1[4] = 0;
  v4 = a1[1];
  if (v4)
  {
    v5 = 0;
    v6 = a1[3];
    v7 = *a1;
    do
    {
      *v6++ = v5;
      v8 = *v7++;
      v9 = ((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
          + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)
          + (((((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) >> 2) & 0x33333333)
            + ((((v8 >> 1) & 0x55555555) + (v8 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
      v5 = (unsigned int *)((char *)v5 + (((_BYTE)v9 + BYTE1(v9) + ((v9 + (v9 >> 8)) >> 16)) & 0x3F));
      v4 = (unsigned int *)((char *)v4 - 1);
    }
    while (v4);
    a1[4] = v5;
  }
  return result;
}

unsigned int *sub_1B02DA380(unsigned int *result, unsigned int a2)
{
  int v2;
  _QWORD *exception;

  if (a2 >> 29)
  {
    exception = __cxa_allocate_exception(0x10uLL);
    *exception = &off_1E60CCAB8;
    exception[1] = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1339: exception: "
                   "failed to modify unit: too large offset";
    __cxa_throw(exception, (struct type_info *)&unk_1E60CAF60, (void (*)(void *))std::exception::~exception);
  }
  v2 = (4 * a2) | 0x200;
  if (a2 < 0x200000)
    v2 = a2 << 10;
  *result = *result & 0x800001FF | v2;
  return result;
}

unsigned int *sub_1B02DA3EC(uint64_t a1, _QWORD *a2, unsigned int a3, unsigned int a4)
{
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *result;
  int v19;
  int v20;

  v8 = a2 + 9;
  v9 = *(unsigned int *)(a2[3] + 4 * a3);
  v10 = v9 >> 2;
  v11 = v9 >> 7;
  v12 = 1 << (v9 >> 2);
  if ((v12 & *(_DWORD *)(a2[9] + 4 * (v9 >> 7))) != 0
    && (v13 = *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * (sub_1B02DAA0C(a2 + 9, v10) - 1))) != 0
    && ((v14 = v13 ^ a4, ((v13 ^ a4) & 0x1FE00000) != 0) ? (v15 = (v13 ^ a4) == 0) : (v15 = 1), v15))
  {
    if (*(_BYTE *)(a2[6] + v10))
    {
      v16 = *(_QWORD *)(a1 + 8);
      v17 = a4;
    }
    else
    {
      v17 = a4;
      v16 = *(_QWORD *)(a1 + 8);
      *(_DWORD *)(v16 + 4 * a4) |= 0x100u;
    }
    return sub_1B02DA380((unsigned int *)(v16 + 4 * v17), v14);
  }
  else
  {
    result = (unsigned int *)sub_1B02DA760(a1, (uint64_t)a2, a3, a4);
    v19 = (int)result;
    if ((*(_DWORD *)(a2[9] + 4 * v11) & v12) != 0)
    {
      result = (unsigned int *)sub_1B02DAA0C(v8, v10);
      *(_DWORD *)(*(_QWORD *)(a1 + 64) + 4 * ((_DWORD)result - 1)) = v19;
    }
    do
    {
      if (*(_BYTE *)(a2[6] + v10))
        result = (unsigned int *)sub_1B02DA3EC(a1, a2, v10, v19 ^ *(unsigned __int8 *)(a2[6] + v10));
      if ((_DWORD)v10 == -1)
        break;
      v20 = *(_DWORD *)(a2[3] + 4 * v10);
      LODWORD(v10) = v10 + 1;
    }
    while ((v20 & 1) != 0);
  }
  return result;
}

void sub_1B02DA550(uint64_t a1)
{
  uint64_t *v2;
  unint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int i;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  v4 = (v3 + 256);
  v5 = (v3 >> 8) - 16;
  if (v5 >= 0xFFFFFFEF)
  {
    sub_1B02D8A28((uint64_t *)(a1 + 8), (v3 + 256));
  }
  else
  {
    v6 = 0;
    v7 = v5 << 8;
    v8 = *(_QWORD *)(a1 + 32);
    while (1)
    {
      v9 = v7 + v6;
      if (!*(_BYTE *)(v8 + 12 * (((_DWORD)v7 + v6) & 0xFFF) + 9))
        break;
      if (++v6 == 256)
      {
        v9 = 0;
        break;
      }
    }
    v10 = 0;
    v11 = 3072 * ((v3 >> 8) & 0xF);
    do
    {
      if (!*(_BYTE *)(v8 + v11 + v10 + 8))
      {
        if (*(_QWORD *)(a1 + 16) <= v7)
        {
          sub_1B02DA550(a1);
          v8 = *(_QWORD *)(a1 + 32);
        }
        v12 = (int *)(v8 + v11 + v10);
        v13 = v12[1];
        if (v7 == *(_DWORD *)(a1 + 72))
        {
          *(_DWORD *)(a1 + 72) = v13;
          if (v7 == v13)
            *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
        }
        v14 = *v12;
        *(_DWORD *)(v8 + 12 * (*v12 & 0xFFF) + 4) = v13;
        *(_DWORD *)(v8 + 12 * (v12[1] & 0xFFF)) = v14;
        *((_BYTE *)v12 + 8) = 1;
        *(_BYTE *)(*v2 + 4 * v7) = v9 ^ v7;
      }
      ++v7;
      v10 += 12;
    }
    while ((_DWORD)v10 != 3072);
    sub_1B02D8A28(v2, (v3 + 256));
    v15 = v3;
    if (v3 < (unint64_t)v4)
    {
      v16 = *(_QWORD *)(a1 + 32);
      do
        *(_WORD *)(v16 + 12 * (v15++ & 0xFFF) + 8) = 0;
      while (v4 != v15);
    }
  }
  v17 = *(_QWORD *)(a1 + 32);
  if ((int)v3 + 1 < v4)
  {
    for (i = 0; i != 255; ++i)
    {
      v19 = v3 + i;
      *(_DWORD *)(v17 + 12 * (v19 & 0xFFF) + 4) = v19 + 1;
      *(_DWORD *)(v17 + 12 * ((v19 + 1) & 0xFFF)) = v19;
    }
  }
  v20 = 12 * (v3 & 0xFFF);
  *(_DWORD *)(v17 + v20) = v3 + 255;
  v21 = *(_DWORD *)(a1 + 72);
  v22 = 12 * (v21 & 0xFFF);
  *(_DWORD *)(v17 + v20) = *(_DWORD *)(v17 + v22);
  LOWORD(v20) = *(_DWORD *)(v17 + v22);
  *(_DWORD *)(v17 + 12 * (((_DWORD)v3 + 255) & 0xFFF) + 4) = v21;
  *(_DWORD *)(v17 + 12 * (v20 & 0xFFF) + 4) = v3;
  *(_DWORD *)(v17 + v22) = v3 + 255;
}

uint64_t sub_1B02DA760(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t *v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  _BOOL4 v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v24;
  unsigned int v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  int v29;
  int *v30;
  int v31;
  uint64_t v32;
  unsigned int v33;
  char v35;

  v8 = (uint64_t *)(a1 + 40);
  sub_1B02D87EC((uint64_t *)(a1 + 40), 0);
  v9 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3);
  if (v9 >= 4)
  {
    v10 = v9 >> 2;
    do
    {
      v35 = *(_BYTE *)(*(_QWORD *)(a2 + 48) + v10);
      sub_1B02DAA70(v8, &v35);
      v11 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v10);
      v13 = __CFADD__(v10++, 1);
    }
    while ((v11 & 1) != 0 && !v13);
  }
  v14 = *(unsigned int *)(a1 + 72);
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 <= v14)
  {
LABEL_20:
    v19 = a4 | v15;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 32);
    v16 = *(unsigned __int8 **)(a1 + 40);
    v18 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v19 = v18 ^ *v16;
      v20 = ((unsigned __int16)v18 ^ *v16) & 0xFFF;
      if (!*(_BYTE *)(v17 + 12 * (((unsigned __int16)v18 ^ *v16) & 0xFFF) + 9)
        && (!((v18 ^ *v16) ^ a4) || ((v19 ^ a4) & 0x1FE00000) == 0))
      {
        v21 = *(_QWORD *)(a1 + 48);
        if (v21 < 2)
          goto LABEL_21;
        if (!*(_BYTE *)(v17 + 12 * (v20 ^ v16[1]) + 8))
          break;
      }
LABEL_19:
      v18 = *(_DWORD *)(v17 + 12 * (v18 & 0xFFF) + 4);
      if (v18 == (_DWORD)v14)
        goto LABEL_20;
    }
    v22 = 2;
    while (v21 != v22)
    {
      if (*(unsigned __int8 *)(v17 + 12 * (v20 ^ v16[v22++]) + 8))
      {
        if (v22 - 1 >= v21)
          break;
        goto LABEL_19;
      }
    }
  }
LABEL_21:
  sub_1B02DA380((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a4), v19 ^ a4);
  if (*(_QWORD *)(a1 + 48))
  {
    v24 = 0;
    v25 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * a3) >> 2;
    do
    {
      v26 = v19 ^ *(unsigned __int8 *)(*(_QWORD *)(a1 + 40) + v24);
      if (*(_QWORD *)(a1 + 16) <= v26)
        sub_1B02DA550(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v26)
      {
        v27 = v26 & 0xFFF;
        v28 = *(_QWORD *)(a1 + 32);
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v29;
        if (v29 == (_DWORD)v26)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v29 = v26;
        }
      }
      else
      {
        v28 = *(_QWORD *)(a1 + 32);
        v27 = v26 & 0xFFF;
        v29 = *(_DWORD *)(v28 + 12 * (v26 & 0xFFF) + 4);
      }
      v30 = (int *)(v28 + 12 * v27);
      v31 = *v30;
      *(_DWORD *)(v28 + 12 * (*v30 & 0xFFF) + 4) = v29;
      *(_DWORD *)(v28 + 12 * (v30[1] & 0xFFF)) = v31;
      *((_BYTE *)v30 + 8) = 1;
      v32 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(*(_QWORD *)(a2 + 48) + v25))
      {
        *(_BYTE *)(v32 + 4 * v26) = *(_BYTE *)(*v8 + v24);
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
      }
      else
      {
        *(_DWORD *)(v32 + 4 * a4) |= 0x100u;
        v33 = *(_DWORD *)(*(_QWORD *)(a2 + 24) + 4 * v25);
        *(_DWORD *)(v32 + 4 * v26) = (v33 >> 1) | 0x80000000;
      }
      v25 = ((int)(v33 << 31) >> 31) & (v25 + 1);
      ++v24;
    }
    while (v24 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v28 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v28 + 12 * (v19 & 0xFFF) + 9) = 1;
  return v19;
}

uint64_t sub_1B02DAA0C(_QWORD *a1, unint64_t a2)
{
  uint64_t v2;
  int v3;

  v2 = (a2 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
  v3 = *(_DWORD *)(a1[3] + v2);
  LODWORD(v2) = *(_DWORD *)(*a1 + v2) & (0xFFFFFFFF >> ~(_BYTE)a2);
  LODWORD(v2) = ((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
               + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)
               + (((((unint64_t)(((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) >> 2) & 0x33333333)
                 + ((((v2 >> 1) & 0x55555555) + (v2 & 0x55555555)) & 0x33333333)) >> 4)) & 0xF0F0F0F;
  return (((_BYTE)v2 + BYTE1(v2) + ((v2 + (v2 >> 8)) >> 16)) & 0x3Fu) + v3;
}

uint64_t *sub_1B02DAA70(uint64_t *result, _BYTE *a2)
{
  uint64_t *v3;
  uint64_t v4;

  v3 = result;
  v4 = result[1];
  if (v4 == result[2])
  {
    result = (uint64_t *)sub_1B02D8848(result, v4 + 1);
    v4 = v3[1];
  }
  v3[1] = v4 + 1;
  *(_BYTE *)(*v3 + v4) = *a2;
  return result;
}

uint64_t *sub_1B02DAAC0(uint64_t *a1)
{
  sub_1B02D9768(a1);
  sub_1B02D955C(a1 + 3);
  sub_1B02D87A4(a1 + 6);
  sub_1B02D94D4(a1 + 9);
  sub_1B02D9290(a1 + 15);
  sub_1B02D9290(a1 + 18);
  sub_1B02D9290(a1 + 21);
  a1[24] = 0;
  sub_1B02D9268(a1 + 21);
  sub_1B02D9268(a1 + 18);
  sub_1B02D9444(a1 + 15);
  sub_1B02D948C(a1 + 9);
  sub_1B02D875C(a1 + 6);
  sub_1B02D9514(a1 + 3);
  return sub_1B02D9720(a1);
}

uint64_t sub_1B02DAB7C(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t result;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unint64_t v16;
  int v17;

  while (1)
  {
    result = sub_1B02DACE0(a1, a2, a3, a4, a5, a6);
    v12 = result;
    if (a3 < a4)
    {
      v13 = a2[2];
      while (v13 && *(_QWORD *)(v13 + 8 * a3) <= a5 || !*(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5))
      {
        if (a4 == ++a3)
          return result;
      }
    }
    if (a3 == a4)
      break;
    v14 = a2[2];
    if (v14 && *(_QWORD *)(v14 + 8 * a3) <= a5)
      v15 = 0;
    else
      v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
    v16 = a3 + 1;
    if (a3 + 1 < a4)
    {
      do
      {
        if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
          v17 = 0;
        else
          v17 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
        if (v17 != v15)
        {
          sub_1B02DAB7C(a1, a2, a3, v16, a5 + 1, v12 ^ v15);
          v14 = a2[2];
          if (v14 && *(_QWORD *)(v14 + 8 * v16) <= a5)
            v15 = 0;
          else
            v15 = *(unsigned __int8 *)(*(_QWORD *)(a2[1] + 8 * v16) + a5);
          a3 = v16;
        }
        ++v16;
      }
      while (a4 != v16);
    }
    a6 = v12 ^ v15;
    ++a5;
  }
  return result;
}

uint64_t sub_1B02DACE0(uint64_t a1, _QWORD *a2, unint64_t a3, unint64_t a4, unint64_t a5, unsigned int a6)
{
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unint64_t v18;
  unint64_t v19;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;
  uint64_t v33;
  int v34;
  int *v35;
  int v36;
  uint64_t v37;
  _QWORD *exception;
  const char *v40;
  unsigned __int8 v41;

  v12 = (uint64_t *)(a1 + 40);
  sub_1B02D87EC((uint64_t *)(a1 + 40), 0);
  v13 = -1;
  if (a3 < a4)
  {
    do
    {
      v41 = 0;
      v14 = a2[2];
      if (v14)
      {
        if (*(_QWORD *)(v14 + 8 * a3) > a5)
        {
          v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
          if (!v41)
          {
            exception = __cxa_allocate_exception(0x10uLL);
            v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1675: exception: f"
                  "ailed to build double-array: invalid null character";
            goto LABEL_52;
          }
          goto LABEL_17;
        }
      }
      else
      {
        v41 = *(_BYTE *)(*(_QWORD *)(a2[1] + 8 * a3) + a5);
        if (v41)
          goto LABEL_17;
      }
      v15 = a2[3];
      if (v15)
      {
        if ((*(_DWORD *)(v15 + 4 * a3) & 0x80000000) != 0)
          goto LABEL_51;
      }
      else if ((a3 & 0x80000000) != 0)
      {
LABEL_51:
        exception = __cxa_allocate_exception(0x10uLL);
        v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1677: exception: faile"
              "d to build double-array: negative value";
LABEL_52:
        *exception = &off_1E60CCAB8;
        exception[1] = v40;
        __cxa_throw(exception, (struct type_info *)&unk_1E60CAF60, (void (*)(void *))std::exception::~exception);
      }
      if (v13 == -1)
      {
        if (v15)
          v13 = *(_DWORD *)(v15 + 4 * a3);
        else
          v13 = a3;
      }
      if (*(_QWORD *)a1)
        (*(void (**)(unint64_t, uint64_t))a1)(a3 + 1, *a2 + 1);
LABEL_17:
      v16 = *(_QWORD *)(a1 + 48);
      if (!v16)
        goto LABEL_21;
      v17 = *(unsigned __int8 *)(v16 + *v12 - 1);
      if (v41 != v17)
      {
        if (v41 < v17)
        {
          exception = __cxa_allocate_exception(0x10uLL);
          v40 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/darts_clone/darts.h:1692: exception: fai"
                "led to build double-array: wrong key order";
          goto LABEL_52;
        }
LABEL_21:
        sub_1B02DAA70(v12, &v41);
      }
      ++a3;
    }
    while (a4 != a3);
  }
  v18 = *(unsigned int *)(a1 + 72);
  v19 = *(_QWORD *)(a1 + 16);
  if (v19 <= v18)
  {
LABEL_35:
    v23 = a6 | v19;
  }
  else
  {
    v21 = *(_QWORD *)(a1 + 32);
    v20 = *(unsigned __int8 **)(a1 + 40);
    v22 = *(_DWORD *)(a1 + 72);
    while (1)
    {
      v23 = v22 ^ *v20;
      v24 = ((unsigned __int16)v22 ^ *v20) & 0xFFF;
      if (!*(_BYTE *)(v21 + 12 * (((unsigned __int16)v22 ^ *v20) & 0xFFF) + 9)
        && (!((v22 ^ *v20) ^ a6) || ((v23 ^ a6) & 0x1FE00000) == 0))
      {
        v25 = *(_QWORD *)(a1 + 48);
        if (v25 < 2)
          goto LABEL_36;
        if (!*(_BYTE *)(v21 + 12 * (v24 ^ v20[1]) + 8))
          break;
      }
LABEL_34:
      v22 = *(_DWORD *)(v21 + 12 * (v22 & 0xFFF) + 4);
      if (v22 == (_DWORD)v18)
        goto LABEL_35;
    }
    v26 = 2;
    while (v25 != v26)
    {
      if (*(unsigned __int8 *)(v21 + 12 * (v24 ^ v20[v26++]) + 8))
      {
        if (v26 - 1 >= v25)
          break;
        goto LABEL_34;
      }
    }
  }
LABEL_36:
  sub_1B02DA380((unsigned int *)(*(_QWORD *)(a1 + 8) + 4 * a6), v23 ^ a6);
  if (*(_QWORD *)(a1 + 48))
  {
    v28 = 0;
    v29 = v13 | 0x80000000;
    v30 = *v12;
    do
    {
      v31 = v23 ^ *(unsigned __int8 *)(v30 + v28);
      if (*(_QWORD *)(a1 + 16) <= v31)
        sub_1B02DA550(a1);
      if (*(_DWORD *)(a1 + 72) == (_DWORD)v31)
      {
        v32 = v31 & 0xFFF;
        v33 = *(_QWORD *)(a1 + 32);
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
        *(_DWORD *)(a1 + 72) = v34;
        if (v34 == (_DWORD)v31)
        {
          *(_DWORD *)(a1 + 72) = *(_QWORD *)(a1 + 16);
          v34 = v31;
        }
      }
      else
      {
        v33 = *(_QWORD *)(a1 + 32);
        v32 = v31 & 0xFFF;
        v34 = *(_DWORD *)(v33 + 12 * (v31 & 0xFFF) + 4);
      }
      v35 = (int *)(v33 + 12 * v32);
      v36 = *v35;
      *(_DWORD *)(v33 + 12 * (*v35 & 0xFFF) + 4) = v34;
      *(_DWORD *)(v33 + 12 * (v35[1] & 0xFFF)) = v36;
      *((_BYTE *)v35 + 8) = 1;
      v30 = *(_QWORD *)(a1 + 40);
      v37 = *(_QWORD *)(a1 + 8);
      if (*(_BYTE *)(v30 + v28))
      {
        *(_BYTE *)(v37 + 4 * v31) = *(_BYTE *)(v30 + v28);
      }
      else
      {
        *(_DWORD *)(v37 + 4 * a6) |= 0x100u;
        *(_DWORD *)(v37 + 4 * v31) = v29;
      }
      ++v28;
    }
    while (v28 < *(_QWORD *)(a1 + 48));
  }
  else
  {
    v33 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(v33 + 12 * (v23 & 0xFFF) + 9) = 1;
  return v23;
}

uint64_t sub_1B02DB04C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)(a1 + 8);
  sub_1B02D89E0((uint64_t *)(a1 + 8));
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
  {
    MEMORY[0x1B5E07CB4](v3, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_1B02D87A4((uint64_t *)(a1 + 40));
  v4 = *(_QWORD *)(a1 + 64);
  if (v4)
  {
    MEMORY[0x1B5E07CB4](v4, 0x1000C8052888210);
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 72) = 0;
  sub_1B02D875C((uint64_t *)(a1 + 40));
  v5 = *(_QWORD *)(a1 + 32);
  if (v5)
  {
    MEMORY[0x1B5E07CB4](v5, 0x1000C80CBA68D63);
    *(_QWORD *)(a1 + 32) = 0;
  }
  sub_1B02D8998(v2);
  return a1;
}

_QWORD *sub_1B02DB104(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02DB178(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B02DB15C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B02DB178(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    sub_1B02D7758();
  result = (char *)sub_1B02D8514((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

uint64_t sub_1B02DB1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E60CBB78;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a3 + 245);
  sub_1B0303128((_QWORD *)(a1 + 56));
  v5 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    v5 = *(_QWORD *)v5;
    v6 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v6 = *(unsigned __int8 *)(v5 + 23);
  }
  sub_1B02DB270((uint64_t *)a1, (unsigned int *)v5, v6);
  return a1;
}

void sub_1B02DB23C(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_1B0303130(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02DB270(uint64_t *result, unsigned int *a2, unint64_t a3)
{
  uint64_t *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  unsigned int *v7;
  unint64_t v8;
  _DWORD *v9;
  __int128 v10;
  unsigned int *v11;
  unint64_t v12;

  if (a3)
  {
    v3 = result;
    v11 = 0;
    v12 = 0;
    v10 = 0uLL;
    sub_1B02DB644(a2, a3, &v11, &v10, &v9);
    sub_1B0303344(v3 + 7, &v9);
    result = sub_1B0303130((uint64_t *)&v9);
    if (!v3[7])
    {
      v4 = (_QWORD *)operator new();
      *v4 = &off_1E60CCA98;
      v4[1] = 0;
      v4[2] = 0;
      v4[3] = 0;
      v5 = v3[1];
      v3[1] = (uint64_t)v4;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      if (!v12 || (v12 & 3) != 0)
      {
        sub_1B030328C(&v9, 13, "Trie blob is wrongly formatted.", 31);
        sub_1B0303344(v3 + 7, &v9);
        return sub_1B0303130((uint64_t *)&v9);
      }
      else
      {
        v6 = (_QWORD *)v3[1];
        v7 = v11;
        v8 = v12 >> 2;
        v6[1] = 0;
        v6[2] = 0;
        result = (uint64_t *)v6[3];
        if (result)
        {
          result = (uint64_t *)MEMORY[0x1B5E07CB4](result, 0x1000C8052888210);
          v6[3] = 0;
        }
        v6[1] = v8;
        v6[2] = v7;
        *((_OWORD *)v3 + 1) = v10;
      }
    }
  }
  return result;
}

void sub_1B02DB3A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DB3C0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;

  *(_QWORD *)a1 = &off_1E60CBB78;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = a2 + 16;
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  sub_1B0303128((_QWORD *)(a1 + 56));
  v4 = *(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v4 + 23) < 0)
  {
    v4 = *(_QWORD *)v4;
    v5 = *(_QWORD *)((*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL) + 8);
  }
  else
  {
    v5 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_1B02DB270((uint64_t *)a1, (unsigned int *)v4, v5);
  return a1;
}

void sub_1B02DB440(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_1B0303130(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02DB478(uint64_t *a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  _DWORD *v8;
  _DWORD *v10;
  int v11;

  *a1 = (uint64_t)&off_1E60CBB78;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  a1[4] = a2;
  a1[5] = 0;
  v7 = a1 + 7;
  *((_BYTE *)a1 + 48) = 0;
  sub_1B0303128(a1 + 7);
  v11 = 0;
  sub_1B02D4250(a3, a4, &v11, &v10);
  sub_1B0303344(v7, &v10);
  sub_1B0303130((uint64_t *)&v10);
  (*(void (**)(_DWORD **__return_ptr, uint64_t *))(*a1 + 24))(&v10, a1);
  v8 = v10;
  sub_1B0303130((uint64_t *)&v10);
  if (!v8)
  {
    *((_BYTE *)a1 + 48) = v11 != 0;
    sub_1B02DB270(a1, a3 + 1, a4 - 4);
  }
  return a1;
}

void sub_1B02DB554(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v4;

  sub_1B0303130(v1);
  v4 = *v2;
  *v2 = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02DB5A4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CBB78;
  sub_1B0303130(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B02DB5EC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CBB78;
  sub_1B0303130(a1 + 7);
  v2 = a1[1];
  a1[1] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1B5E07CD8);
}

_QWORD *sub_1B02DB644@<X0>(unsigned int *a1@<X0>, unint64_t a2@<X1>, unsigned int **a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  unsigned int *v7;
  unsigned int *v8;
  const char *v10;
  uint64_t v11;

  if (a2 < 5 || (v7 = (unsigned int *)*a1, a2 <= (unint64_t)v7))
  {
    v10 = "Blob for normalization rule is broken.";
    v11 = 38;
  }
  else
  {
    if ((unint64_t)(v7 + 1) < a2)
    {
      v8 = a1 + 1;
      *a3 = v8;
      a3[1] = v7;
      *a4 = (char *)v7 + (_QWORD)v8;
      a4[1] = a2 - (_QWORD)v7 - 4;
      return sub_1B0303128(a5);
    }
    v10 = "Trie data size exceeds the input blob size.";
    v11 = 43;
  }
  return (_QWORD *)sub_1B030328C(a5, 13, v10, v11);
}

_QWORD *sub_1B02DB6AC@<X0>(size_t a1@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  unint64_t v6;
  _QWORD *result;
  _QWORD *v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  std::string::size_type i;
  void **v19;
  uint64_t v20;
  char *v21;
  char *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void **v32;
  uint64_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  int v45;
  size_t v46;
  const char *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type size;
  BOOL v52;
  std::string::size_type v53;
  void **v54;
  uint64_t v55;
  char *v56;
  char *v57;
  _QWORD *v58;
  char *v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  _QWORD *v65;
  char *v66;
  char *v67;
  uint64_t v68;
  std::string::size_type v69;
  _QWORD *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  uint64_t v76;
  void *__p;
  char v78;
  uint64_t v79;
  _QWORD v80[5];
  const std::string::value_type *v81;
  std::string::size_type v82;
  int v83;
  void **v84;
  std::string *v85;

  v6 = a3;
  v84 = (void **)a5;
  v85 = (std::string *)a4;
  *(_QWORD *)(a5 + 8) = *(_QWORD *)a5;
  if (*(char *)(a4 + 23) < 0)
  {
    **(_BYTE **)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    if (a3)
      goto LABEL_3;
    return sub_1B0303128(a6);
  }
  *(_BYTE *)a4 = 0;
  *(_BYTE *)(a4 + 23) = 0;
  if (!a3)
    return sub_1B0303128(a6);
LABEL_3:
  result = (_QWORD *)(*(uint64_t (**)(size_t))(*(_QWORD *)a1 + 24))(a1);
  if (*a6)
    return result;
  sub_1B0303130(a6);
  v83 = 0;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    do
    {
      sub_1B02DBE5C(a1, a2, v6, (uint64_t)&v74);
      if (v75 != 1 || *v74 != 32)
        goto LABEL_11;
      a2 += (int)v76;
      v83 += v76;
      v6 -= (int)v76;
    }
    while (v6);
    v11 = a6;
    return sub_1B0303128(v11);
  }
LABEL_11:
  v71 = (uint64_t)a6;
  std::string::reserve(v85, 3 * v6);
  sub_1B02DC040(v84, 3 * v6);
  v81 = "▁";
  v82 = 3;
  v80[0] = a1;
  v80[1] = &v83;
  v80[2] = &v85;
  v80[3] = &v84;
  v80[4] = &v81;
  if (!*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_1B02DC0D4((uint64_t)v80);
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  do
  {
    sub_1B02DBE5C(a1, a2, v6, (uint64_t)&v74);
    v13 = v74;
    v14 = v75;
    if ((v12 & 1) != 0)
    {
      if (!v75)
        goto LABEL_64;
      while (*v13 == 32)
      {
        ++v13;
        if (!--v14)
          goto LABEL_64;
      }
    }
    else if (!v75)
    {
      v12 = 0;
      goto LABEL_64;
    }
    v72 = a2;
    v73 = v6;
    v15 = 0;
    do
    {
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
      v17 = v13[v15];
      if (v16 && v17 == 32)
      {
        std::string::append(v85, v81, v82);
        if (v82)
        {
          for (i = 0; i < v82; ++i)
          {
            v19 = v84;
            v20 = v83;
            v21 = (char *)v84[1];
            v22 = (char *)v84[2];
            if (v21 >= v22)
            {
              v24 = (char *)*v84;
              v25 = (v21 - (_BYTE *)*v84) >> 3;
              v26 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 61)
                goto LABEL_114;
              v27 = v22 - v24;
              if (v27 >> 2 > v26)
                v26 = v27 >> 2;
              if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
                v28 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v28 = v26;
              if (v28)
              {
                v29 = (char *)sub_1B02D7E30((uint64_t)(v84 + 2), v28);
                v24 = (char *)*v19;
                v21 = (char *)v19[1];
              }
              else
              {
                v29 = 0;
              }
              v30 = &v29[8 * v25];
              *(_QWORD *)v30 = v20;
              v23 = v30 + 8;
              while (v21 != v24)
              {
                v31 = *((_QWORD *)v21 - 1);
                v21 -= 8;
                *((_QWORD *)v30 - 1) = v31;
                v30 -= 8;
              }
              *v19 = v30;
              v19[1] = v23;
              v19[2] = &v29[8 * v28];
              if (v24)
                operator delete(v24);
            }
            else
            {
              *(_QWORD *)v21 = v83;
              v23 = v21 + 8;
            }
            v19[1] = v23;
          }
        }
      }
      else
      {
        std::string::push_back(v85, v17);
        v32 = v84;
        v33 = v83;
        v34 = (char *)v84[1];
        v35 = (char *)v84[2];
        if (v34 >= v35)
        {
          v37 = (char *)*v84;
          v38 = (v34 - (_BYTE *)*v84) >> 3;
          v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 61)
LABEL_114:
            sub_1B02D7758();
          v40 = v35 - v37;
          if (v40 >> 2 > v39)
            v39 = v40 >> 2;
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
            v41 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v41 = v39;
          if (v41)
          {
            v42 = (char *)sub_1B02D7E30((uint64_t)(v84 + 2), v41);
            v37 = (char *)*v32;
            v34 = (char *)v32[1];
          }
          else
          {
            v42 = 0;
          }
          v43 = &v42[8 * v38];
          *(_QWORD *)v43 = v33;
          v36 = v43 + 8;
          while (v34 != v37)
          {
            v44 = *((_QWORD *)v34 - 1);
            v34 -= 8;
            *((_QWORD *)v43 - 1) = v44;
            v43 -= 8;
          }
          *v32 = v43;
          v32[1] = v36;
          v32[2] = &v42[8 * v41];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *(_QWORD *)v34 = v83;
          v36 = v34 + 8;
        }
        v32[1] = v36;
      }
      ++v15;
    }
    while (v15 != v14);
    v12 = v13[v14 - 1] == 32;
    a2 = v72;
    v6 = v73;
LABEL_64:
    v83 += v76;
    a2 += (int)v76;
    v6 -= (int)v76;
    v12 &= (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32));
  }
  while (v6);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 24))(*(_QWORD *)(a1 + 32)))
  {
    v45 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 32))(*(_QWORD *)(a1 + 32));
    if (v45)
      v46 = v82;
    else
      v46 = 1;
    if (v45)
      v47 = v81;
    else
      v47 = " ";
    while (1)
    {
      v48 = v85;
      LODWORD(v49) = HIBYTE(v85->__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
      {
        v50 = (std::string *)v85->__r_.__value_.__r.__words[0];
        size = v85->__r_.__value_.__l.__size_;
        if (!v46)
          goto LABEL_79;
      }
      else
      {
        v50 = v85;
        size = HIBYTE(v85->__r_.__value_.__r.__words[2]);
        if (!v46)
          goto LABEL_79;
      }
      v52 = size >= v46;
      v53 = size - v46;
      if (!v52 || memcmp((char *)v50 + v53, v47, v46))
        break;
LABEL_79:
      if ((v49 & 0x80) != 0)
        v49 = v48->__r_.__value_.__l.__size_;
      if ((_DWORD)v49 - (_DWORD)v46 < 0)
      {
        LODWORD(v74) = 13;
        v65 = (_QWORD *)sub_1B02D685C((uint64_t)&v75);
        sub_1B02D7994(v65, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
        sub_1B02D7994(&v75, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&v75, (uint64_t)") [", 3);
        sub_1B02D7994(&v75, (uint64_t)"(length) >= (0)", 15);
        sub_1B02D7994(&v75, (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)&v74, v71);
        goto LABEL_110;
      }
      v83 = *((_QWORD *)*v84 + (v49 - v46));
      std::string::resize(v48, (v49 - v46), 0);
      sub_1B02DC2EC((uint64_t)v84, (v49 - v46));
    }
  }
  if (*(_BYTE *)(a1 + 48)
    && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32)))
  {
    sub_1B02DC0D4((uint64_t)v80);
  }
  v54 = v84;
  v55 = v83;
  v56 = (char *)v84[1];
  v57 = (char *)v84[2];
  if (v56 >= v57)
  {
    v59 = (char *)*v84;
    v60 = (v56 - (_BYTE *)*v84) >> 3;
    v61 = v60 + 1;
    if ((unint64_t)(v60 + 1) >> 61)
      sub_1B02D7758();
    v62 = v57 - v59;
    if (v62 >> 2 > v61)
      v61 = v62 >> 2;
    if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8)
      v63 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v63 = v61;
    if (v63)
    {
      v64 = (char *)sub_1B02D7E30((uint64_t)(v84 + 2), v63);
      v59 = (char *)*v54;
      v56 = (char *)v54[1];
    }
    else
    {
      v64 = 0;
    }
    v66 = &v64[8 * v60];
    v67 = &v64[8 * v63];
    *(_QWORD *)v66 = v55;
    v58 = v66 + 8;
    while (v56 != v59)
    {
      v68 = *((_QWORD *)v56 - 1);
      v56 -= 8;
      *((_QWORD *)v66 - 1) = v68;
      v66 -= 8;
    }
    *v54 = v66;
    v54[1] = v58;
    v54[2] = v67;
    if (v59)
      operator delete(v59);
  }
  else
  {
    *(_QWORD *)v56 = v83;
    v58 = v56 + 8;
  }
  v54[1] = v58;
  if (SHIBYTE(v85->__r_.__value_.__r.__words[2]) < 0)
    v69 = v85->__r_.__value_.__l.__size_;
  else
    v69 = HIBYTE(v85->__r_.__value_.__r.__words[2]);
  if (((_BYTE *)v84[1] - (_BYTE *)*v84) >> 3 == v69 + 1)
  {
    v11 = (_QWORD *)v71;
    return sub_1B0303128(v11);
  }
  LODWORD(v74) = 13;
  v70 = (_QWORD *)sub_1B02D685C((uint64_t)&v75);
  sub_1B02D7994(v70, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/normalizer.cc", 69);
  sub_1B02D7994(&v75, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_1B02D7994(&v75, (uint64_t)") [", 3);
  sub_1B02D7994(&v75, (uint64_t)"(norm_to_orig->size()) == (normalized->size() + 1)", 50);
  sub_1B02D7994(&v75, (uint64_t)"] ", 2);
  sub_1B02D4430((unsigned int *)&v74, v71);
LABEL_110:
  v75 = *MEMORY[0x1E0DE4F60];
  *(uint64_t *)((char *)&v75 + *(_QWORD *)(v75 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v76 = MEMORY[0x1E0DE4FB8] + 16;
  if (v78 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1B5E07C60](&v79);
}

void sub_1B02DBE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1B02D44BC((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_1B02DBE5C@<X0>(size_t result@<X0>, char *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v6;
  size_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  int v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  uint64_t v26;
  _QWORD v27[64];

  v27[63] = *MEMORY[0x1E0C80C00];
  if (a3)
  {
    v6 = a2;
    v7 = result;
    v8 = *(_QWORD *)(result + 40);
    if (v8 && (LOBYTE(v26) = 0, result = sub_1B02DC3C4(v8, a2, a3, (BOOL *)&v26), (_BYTE)v26))
    {
      v9 = (int)result;
      if (a3 < (int)result)
        v9 = a3;
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = v9;
      *(_DWORD *)(a4 + 16) = result;
    }
    else
    {
      v10 = *(_QWORD *)(v7 + 8);
      if (!v10)
        goto LABEL_24;
      v11 = 0;
      v12 = 0;
      v13 = *(_DWORD **)(v10 + 16);
      v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
      do
      {
        v15 = v6[v11];
        v16 = v14 ^ v15;
        v17 = v13[v16];
        if ((v17 & 0x800000FF) != (_DWORD)v15)
          break;
        v14 = v16 ^ (v17 >> 10 << ((v17 >> 6) & 8));
        if ((v17 & 0x100) != 0)
        {
          if (v12 <= 0x1F)
          {
            v18 = &v27[2 * v12 - 1];
            *(_DWORD *)v18 = v13[v14] & 0x7FFFFFFF;
            v18[1] = v11 + 1;
          }
          ++v12;
        }
        ++v11;
      }
      while (a3 != v11);
      if (!v12)
        goto LABEL_24;
      v19 = 0;
      v20 = 0;
      v21 = v27;
      v22 = v27;
      do
      {
        v24 = *v22;
        v22 += 2;
        v23 = v24;
        if (!v19 || v23 > v19)
        {
          v20 = *((_DWORD *)v21 - 2);
          v19 = v23;
        }
        v21 = v22;
        --v12;
      }
      while (v12);
      if (v19)
      {
        v6 = (char *)(*(_QWORD *)(v7 + 16) + v20);
        result = strlen(v6);
      }
      else
      {
LABEL_24:
        v26 = 0;
        v25 = sub_1B0301404((unsigned __int8 *)v6, (uint64_t)&v6[a3], &v26) != 65533 || v26 == 3;
        if (v25)
          LODWORD(v19) = v26;
        else
          LODWORD(v19) = 1;
        if (v25)
          result = (int)v26;
        else
          result = 3;
        if (!v25)
          v6 = (char *)&unk_1B03AEE14;
      }
      *(_QWORD *)a4 = v6;
      *(_QWORD *)(a4 + 8) = result;
      *(_DWORD *)(a4 + 16) = v19;
    }
  }
  else
  {
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_1B02DC040(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1B02D7758();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B02D7E30(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_QWORD *)v11 - 1);
        v11 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

void sub_1B02DC0D4(uint64_t a1)
{
  int v2;
  std::string *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)a1 + 32) + 32))(*(_QWORD *)(*(_QWORD *)a1 + 32));
  v3 = **(std::string ***)(a1 + 16);
  if (v2)
  {
    std::string::append(v3, **(const std::string::value_type ***)(a1 + 32), *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    if (*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8))
    {
      v4 = 0;
      do
      {
        v5 = **(_QWORD **)(a1 + 24);
        v6 = **(int **)(a1 + 8);
        v7 = *(_QWORD **)(v5 + 8);
        v8 = *(_QWORD *)(v5 + 16);
        if ((unint64_t)v7 >= v8)
        {
          v10 = *(_QWORD **)v5;
          v11 = ((uint64_t)v7 - *(_QWORD *)v5) >> 3;
          v12 = v11 + 1;
          if ((unint64_t)(v11 + 1) >> 61)
            goto LABEL_40;
          v13 = v8 - (_QWORD)v10;
          if (v13 >> 2 > v12)
            v12 = v13 >> 2;
          if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
            v14 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v14 = v12;
          if (v14)
          {
            v15 = (char *)sub_1B02D7E30(v5 + 16, v14);
            v10 = *(_QWORD **)v5;
            v7 = *(_QWORD **)(v5 + 8);
          }
          else
          {
            v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(_QWORD *)v16 = v6;
          v9 = v16 + 8;
          while (v7 != v10)
          {
            v17 = *--v7;
            *((_QWORD *)v16 - 1) = v17;
            v16 -= 8;
          }
          *(_QWORD *)v5 = v16;
          *(_QWORD *)(v5 + 8) = v9;
          *(_QWORD *)(v5 + 16) = &v15[8 * v14];
          if (v10)
            operator delete(v10);
        }
        else
        {
          *v7 = v6;
          v9 = v7 + 1;
        }
        *(_QWORD *)(v5 + 8) = v9;
        ++v4;
      }
      while (v4 < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8));
    }
  }
  else
  {
    std::string::append(v3, " ");
    v18 = **(_QWORD **)(a1 + 24);
    v19 = **(int **)(a1 + 8);
    v20 = *(_QWORD **)(v18 + 8);
    v21 = *(_QWORD *)(v18 + 16);
    if ((unint64_t)v20 >= v21)
    {
      v23 = *(_QWORD **)v18;
      v24 = ((uint64_t)v20 - *(_QWORD *)v18) >> 3;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 61)
LABEL_40:
        sub_1B02D7758();
      v26 = v21 - (_QWORD)v23;
      if (v26 >> 2 > v25)
        v25 = v26 >> 2;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
        v27 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        v28 = (char *)sub_1B02D7E30(v18 + 16, v27);
        v23 = *(_QWORD **)v18;
        v20 = *(_QWORD **)(v18 + 8);
      }
      else
      {
        v28 = 0;
      }
      v29 = &v28[8 * v24];
      v30 = &v28[8 * v27];
      *(_QWORD *)v29 = v19;
      v22 = v29 + 8;
      while (v20 != v23)
      {
        v31 = *--v20;
        *((_QWORD *)v29 - 1) = v31;
        v29 -= 8;
      }
      *(_QWORD *)v18 = v29;
      *(_QWORD *)(v18 + 8) = v22;
      *(_QWORD *)(v18 + 16) = v30;
      if (v23)
        operator delete(v23);
    }
    else
    {
      *v20 = v19;
      v22 = v20 + 1;
    }
    *(_QWORD *)(v18 + 8) = v22;
  }
}

void sub_1B02DC2EC(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 8 * a2;
  }
  else
  {
    sub_1B02DCC68((char **)a1, a2 - v2);
  }
}

void sub_1B02DC31C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  void *__p;
  void *v4;
  uint64_t v5;

  __p = 0;
  v4 = 0;
  v5 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 32))(&v2);
  nullsub_3(&v2);
  sub_1B0303130(&v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
}

void sub_1B02DC388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;

  sub_1B0303130(&a9);
  if (*(char *)(v11 + 23) < 0)
    operator delete(*(void **)v11);
  if (__p)
  {
    a11 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DC3C4(uint64_t a1, _BYTE *a2, uint64_t a3, BOOL *a4)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  _BYTE *v16;
  uint64_t result;
  int *v18;
  unsigned int v19;
  int v20;
  int v21;
  _BYTE v22[1024];
  _QWORD v23[128];

  v23[127] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)a1)
  {
    if (a4)
      *a4 = 0;
    goto LABEL_33;
  }
  v4 = *(_DWORD **)(*(_QWORD *)a1 + 16);
  v5 = (*v4 >> 10 << ((*v4 >> 6) & 8));
  if (a3)
  {
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = a2[v6];
      v9 = v5 ^ v8;
      v10 = v4[v9];
      if ((v10 & 0x800000FF) != (_DWORD)v8)
        break;
      v5 = v9 ^ (v10 >> 10 << ((v10 >> 6) & 8));
      if ((v10 & 0x100) != 0)
      {
        if (v7 <= 0x3F)
        {
          v11 = &v22[16 * v7];
          *(_DWORD *)v11 = v4[v5] & 0x7FFFFFFF;
          *((_QWORD *)v11 + 1) = v6 + 1;
        }
        ++v7;
      }
      ++v6;
    }
    while (a3 != v6);
  }
  else
  {
    v12 = *a2;
    if (*a2)
    {
      v7 = 0;
      v13 = 1;
      do
      {
        v14 = v5 ^ v12;
        v15 = v4[v14];
        if ((v15 & 0x800000FF) != v12)
          break;
        v5 = v14 ^ (v15 >> 10 << ((v15 >> 6) & 8));
        if ((v15 & 0x100) != 0)
        {
          if (v7 <= 0x3F)
          {
            v16 = &v22[16 * v7];
            *(_DWORD *)v16 = v4[v5] & 0x7FFFFFFF;
            *((_QWORD *)v16 + 1) = v13;
          }
          ++v7;
        }
        v12 = a2[v13++];
      }
      while (v12);
    }
    else
    {
      LODWORD(v7) = 0;
    }
  }
  if (a4)
    *a4 = (int)v7 > 0;
  if (!(_DWORD)v7)
  {
LABEL_33:
    v21 = asc_1B03A8CD7[(unint64_t)*a2 >> 4];
    if (v21 >= (int)a3)
      return a3;
    else
      return v21;
  }
  if ((int)v7 < 1)
    return 0;
  LODWORD(result) = 0;
  v7 = v7;
  v18 = (int *)v23;
  do
  {
    v20 = *v18;
    v18 += 4;
    v19 = v20;
    if ((int)result <= v20)
      result = v19;
    else
      result = result;
    --v7;
  }
  while (v7);
  return result;
}

void sub_1B02DC590(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  _DWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  uint64_t v8;
  std::string::size_type v9;
  std::string *v10;
  std::string *v11;
  std::string::size_type size;
  std::string v13;

  v4 = *(unsigned __int8 *)(a1 + 48);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  std::string::resize((std::string *)a2, 4uLL, 0);
  if (*(char *)(a2 + 23) >= 0)
    v5 = (_DWORD *)a2;
  else
    v5 = *(_DWORD **)a2;
  *v5 = v4;
  v6 = *(_QWORD *)(a1 + 8);
  if (v6)
  {
    v8 = *(_QWORD *)(v6 + 8);
    v7 = *(const std::string::value_type **)(v6 + 16);
    memset(&v13, 0, sizeof(v13));
    std::string::resize(&v13, 4uLL, 0);
    v9 = 4 * v8;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v13;
    else
      v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
    LODWORD(v10->__r_.__value_.__l.__data_) = v9;
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v11 = &v13;
    else
      v11 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    std::string::append((std::string *)a2, (const std::string::value_type *)v11, size);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    std::string::append((std::string *)a2, v7, v9);
    std::string::append((std::string *)a2, *(const std::string::value_type **)(a1 + 16), *(_QWORD *)(a1 + 24));
  }
}

void sub_1B02DC684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02DC6C0(_QWORD *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  char v28;
  void *__p;
  char *v30;
  char *v31;

  *a1 = 0;
  v4 = a2[2];
  if (v4)
  {
    __p = 0;
    v30 = 0;
    v31 = 0;
    sub_1B02DC960(&__p, v4);
    v7 = (_QWORD *)*a2;
    v5 = a2 + 1;
    v6 = v7;
    if (v7 != v5)
    {
      v8 = v30;
      do
      {
        v9 = v6[4];
        if (v8 >= v31)
        {
          v10 = (v8 - (_BYTE *)__p) >> 3;
          if ((unint64_t)(v10 + 1) >> 61)
            sub_1B02D7758();
          v11 = (v31 - (_BYTE *)__p) >> 2;
          if (v11 <= v10 + 1)
            v11 = v10 + 1;
          if ((unint64_t)(v31 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v12 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v12 = v11;
          if (v12)
            v13 = (char *)sub_1B02D7E30((uint64_t)&v31, v12);
          else
            v13 = 0;
          v14 = &v13[8 * v10];
          *(_QWORD *)v14 = v9;
          v8 = v14 + 8;
          v16 = (char *)__p;
          v15 = v30;
          if (v30 != __p)
          {
            do
            {
              v17 = *((_QWORD *)v15 - 1);
              v15 -= 8;
              *((_QWORD *)v14 - 1) = v17;
              v14 -= 8;
            }
            while (v15 != v16);
            v15 = (char *)__p;
          }
          __p = v14;
          v30 = v8;
          v31 = &v13[8 * v12];
          if (v15)
            operator delete(v15);
        }
        else
        {
          *(_QWORD *)v8 = v9;
          v8 += 8;
        }
        v30 = v8;
        v18 = (_QWORD *)v6[1];
        if (v18)
        {
          do
          {
            v19 = v18;
            v18 = (_QWORD *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            v19 = (_QWORD *)v6[2];
            v20 = *v19 == (_QWORD)v6;
            v6 = v19;
          }
          while (!v20);
        }
        v6 = v19;
      }
      while (v19 != v5);
    }
    v21 = (_QWORD *)operator new();
    *v21 = &off_1E60CCA98;
    v21[1] = 0;
    v21[2] = 0;
    v21[3] = 0;
    v22 = (_QWORD *)*a1;
    *a1 = v21;
    if (v22)
    {
      (*(void (**)(_QWORD *))(*v22 + 8))(v22);
      v21 = (_QWORD *)*a1;
    }
    if (sub_1B02D6220(v21, (v30 - (_BYTE *)__p) >> 3, (unint64_t)__p, 0, 0, 0))
    {
      v28 = 1;
      v23 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"normalizer.cc", 13);
      sub_1B02D7994(v23, (uint64_t)"(", 1);
      v24 = (_QWORD *)std::ostream::operator<<();
      v25 = sub_1B02D7994(v24, (uint64_t)") [", 3);
      v26 = sub_1B02D7994(v25, (uint64_t)"(0) == (trie_->build(key.size(), const_cast<char **>(&key[0]), nullptr, nullptr))", 81);
      sub_1B02D7994(v26, (uint64_t)"] ", 2);
      sub_1B02D6948(&v28);
    }
    if (__p)
    {
      v30 = (char *)__p;
      operator delete(__p);
    }
  }
  return a1;
}

void sub_1B02DC910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, char a12, void *__p, uint64_t a14)
{
  uint64_t *v14;
  uint64_t v16;

  if (__p)
    operator delete(__p);
  v16 = *v14;
  *v14 = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  _Unwind_Resume(exception_object);
}

void sub_1B02DC960(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 3)
  {
    if (a2 >> 61)
      sub_1B02D7758();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B02D7E30(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v9 = &v6[8 * v8];
    v11 = (char *)*a1;
    v10 = (char *)a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 1);
        v10 -= 8;
        *((_QWORD *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_1B02DC9F8(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;

  *a1 = 0;
  if (a3)
  {
    v6 = (_QWORD *)operator new();
    *v6 = &off_1E60CCA98;
    v6[1] = 0;
    v6[2] = 0;
    v6[3] = 0;
    v7 = (_QWORD *)*a1;
    *a1 = v6;
    if (v7)
      (*(void (**)(_QWORD *))(*v7 + 8))(v7);
    if ((a3 & 3) == 0)
    {
      v8 = (_QWORD *)*a1;
      v9 = a3 >> 2;
      v8[1] = 0;
      v8[2] = 0;
      v10 = v8[3];
      if (v10)
      {
        MEMORY[0x1B5E07CB4](v10, 0x1000C8052888210);
        v8[3] = 0;
      }
      v8[1] = v9;
      v8[2] = a2;
    }
  }
  return a1;
}

void sub_1B02DCAAC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02DCAD4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  if (*(_QWORD *)a1)
    return sub_1B02DCB10(a2, *(void **)(*(_QWORD *)a1 + 16), 4 * *(_QWORD *)(*(_QWORD *)a1 + 8));
  else
    return sub_1B02DCBB8(a2, "");
}

uint64_t sub_1B02DCAFC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = a2;
  return result;
}

uint64_t sub_1B02DCB04@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0303340(a2, a1 + 56);
}

_QWORD *sub_1B02DCB10(_QWORD *__dst, void *__src, size_t __len)
{
  void *v6;
  size_t v7;
  size_t v8;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (__len >= 0x17)
  {
    v7 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v7 = __len | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    __dst[1] = __len;
    __dst[2] = v8 | 0x8000000000000000;
    *__dst = v6;
  }
  else
  {
    *((_BYTE *)__dst + 23) = __len;
    v6 = __dst;
    if (!__len)
      goto LABEL_9;
  }
  memmove(v6, __src, __len);
LABEL_9:
  *((_BYTE *)v6 + __len) = 0;
  return __dst;
}

_QWORD *sub_1B02DCBB8(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v4;
    v6 = a1;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((_BYTE *)v6 + v5) = 0;
  return a1;
}

void sub_1B02DCC68(char **a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = *a1;
    v9 = v7 - *a1;
    v10 = a2 + (v9 >> 3);
    if (v10 >> 61)
      sub_1B02D7758();
    v11 = v9 >> 3;
    v12 = v5 - v8;
    if (v12 >> 2 > v10)
      v10 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v10;
    if (v13)
    {
      v14 = (char *)sub_1B02D7E30(v4, v13);
      v8 = *a1;
      v7 = a1[1];
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v11];
    v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      v18 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      *((_QWORD *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
      operator delete(v8);
  }
}

uint64_t sub_1B02DCD70@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _DWORD *v3;
  uint64_t result;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;

  if (*(_QWORD *)(a1 + 80))
    v3 = *(_DWORD **)(a1 + 80);
  else
    v3 = &unk_1EEEB29A8;
  switch(v3[68])
  {
    case 1:
      result = sub_1B02DCEC0(a1, &v11);
      goto LABEL_12;
    case 2:
      result = sub_1B02DCF34(a1, &v11);
      goto LABEL_12;
    case 3:
      result = sub_1B02DCFA8(a1, &v11);
      goto LABEL_12;
    case 4:
      result = sub_1B02DD01C(a1, &v11);
LABEL_12:
      *a2 = v11;
      break;
    default:
      result = sub_1B03013F4();
      if ((int)result <= 2)
      {
        LOBYTE(v11) = 0;
        v5 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
        sub_1B02D7994(v5, (uint64_t)"(", 1);
        v6 = (_QWORD *)std::ostream::operator<<();
        v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
        v8 = sub_1B02D7994(v7, (uint64_t)"LOG(", 4);
        v9 = sub_1B02D7994(v8, (uint64_t)"ERROR", 5);
        v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
        sub_1B02D7994(v10, (uint64_t)"Unknown model_type: ", 20);
        std::ostream::operator<<();
        result = (uint64_t)sub_1B02D6948(&v11);
      }
      *a2 = 0;
      break;
  }
  return result;
}

void sub_1B02DCEAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02D6948(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DCEC0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_1B02F0308(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B02DCF10(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DCF34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_1B030199C(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B02DCF84(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DCFA8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_1B02F4808(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B02DCFF8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DD01C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_1B02F45A8(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B02DD06C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DD090@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  int v6;
  uint64_t result;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
  if (v6 == 1)
  {
    result = (uint64_t)sub_1B02DD25C(a1, (uint64_t)v15, &v14);
    goto LABEL_5;
  }
  if (!v6)
  {
    result = sub_1B02DD1E0(a1, v15, &v14);
LABEL_5:
    *a4 = v14;
    return result;
  }
  result = sub_1B03013F4();
  if ((int)result <= 2)
  {
    LOBYTE(v14) = 0;
    v8 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"model_factory.cc", 16);
    sub_1B02D7994(v8, (uint64_t)"(", 1);
    v9 = (_QWORD *)std::ostream::operator<<();
    v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
    v11 = sub_1B02D7994(v10, (uint64_t)"LOG(", 4);
    v12 = sub_1B02D7994(v11, (uint64_t)"ERROR", 5);
    v13 = sub_1B02D7994(v12, (uint64_t)") ", 2);
    sub_1B02D7994(v13, (uint64_t)"Unknown model_type: ", 20);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 80))(a1);
    std::ostream::operator<<();
    result = (uint64_t)sub_1B02D6948(&v14);
  }
  *a4 = 0;
  return result;
}

void sub_1B02DD1C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02D6948(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DD1E0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_1B02F05C8(v6, a1, *a2, a2[1]);
  *a3 = v6;
  return result;
}

void sub_1B02DD238(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10E1C404363080ALL);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02DD25C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  result = sub_1B03019A0(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_1B02DD2B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10E1C4039E95E28);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02DD2D8(_QWORD *a1)
{
  *a1 = &off_1E60CC3B8;
  sub_1B02EA238((uint64_t)(a1 + 2));
  return a1;
}

void sub_1B02DD308(_QWORD *a1)
{
  *a1 = &off_1E60CC3B8;
  sub_1B02EA238((uint64_t)(a1 + 2));
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02DD348(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;

  v3 = a1 + 16;
  result = *(_QWORD *)(a1 + 16);
  if (!result)
  {
    sub_1B02EA36C(&v7);
    sub_1B02DD3D0(v3, &v7);
    v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
    if (*((_QWORD *)&v7 + 1))
    {
      v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
      if (!v6)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    result = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = result;
  }
  return result;
}

uint64_t sub_1B02DD3D0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;

  v3 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v3;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

_QWORD *sub_1B02DD434(_QWORD *a1)
{
  *a1 = &off_1E60CC418;
  sub_1B02EA238((uint64_t)(a1 + 1));
  return a1;
}

void sub_1B02DD464(_QWORD *a1)
{
  *a1 = &off_1E60CC418;
  sub_1B02EA238((uint64_t)(a1 + 1));
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02DD4A4(uint64_t a1)
{
  uint64_t result;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v2 = a1 + 8;
  result = *(_QWORD *)(a1 + 8);
  if (!result)
  {
    sub_1B02EA44C(&v6);
    sub_1B02DD3D0(v2, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    return *(_QWORD *)v2;
  }
  return result;
}

_QWORD *sub_1B02DD524@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
    return (_QWORD *)sub_1B0310884(v2, (uint64_t)a2);
  else
    return sub_1B02DCBB8(a2, "");
}

double sub_1B02DD540(uint64_t a1)
{
  double result;

  *(_QWORD *)a1 = &off_1E60CC0C8;
  result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  return result;
}

uint64_t sub_1B02DD570(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)a1 = &off_1E60CC0C8;
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  v2 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *(void **)(a1 + 64);
  if (v3)
  {
    *(_QWORD *)(a1 + 72) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    *(_QWORD *)(a1 + 48) = v4;
    operator delete(v4);
  }
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  v8 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return a1;
}

void sub_1B02DD648(uint64_t a1)
{
  sub_1B02DD570(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02DD66C()
{
  _QWORD v1[2];
  _BYTE v2[408];
  _QWORD v3[20];

  v3[19] = *MEMORY[0x1E0C80C00];
  sub_1B02DD778(v1);
  if ((v2[*(_QWORD *)(v1[0] - 24) + 16] & 5) == 0)
    std::istream::read();
  v1[0] = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)v1 + *(_QWORD *)(v1[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 24);
  MEMORY[0x1B5E07A8C](v2);
  std::istream::~istream();
  MEMORY[0x1B5E07C60](v3);
  return 0;
}

void sub_1B02DD75C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02DD884((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02DD778(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;

  v2 = MEMORY[0x1E0DE4FA8];
  v3 = MEMORY[0x1E0DE4FA8] + 64;
  a1[53] = MEMORY[0x1E0DE4FA8] + 64;
  v4 = a1 + 2;
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F40] + 16);
  *a1 = v5;
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v5 - 24)) = v6;
  a1[1] = 0;
  v7 = (std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  std::ios_base::init(v7, a1 + 2);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  *a1 = v2 + 24;
  a1[53] = v3;
  MEMORY[0x1B5E07A80](v4);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | 4);
  return a1;
}

void sub_1B02DD84C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::istream::~istream();
  MEMORY[0x1B5E07C60](v1 + 424);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02DD884(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F40];
  v3 = *MEMORY[0x1E0DE4F40];
  *a1 = *MEMORY[0x1E0DE4F40];
  *(_QWORD *)((char *)a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  MEMORY[0x1B5E07A8C](a1 + 2);
  std::istream::~istream();
  MEMORY[0x1B5E07C60](a1 + 53);
  return a1;
}

uint64_t sub_1B02DD8DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (sub_1B02DD66C())
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, a3);
  sub_1B02DDA10(&v13);
  sub_1B02DDA78(a2, a3, v13, a4);
  if (!*a4)
  {
    sub_1B0303130(a4);
    v12 = v13;
    v13 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v12);
    v9 = v12;
    v12 = 0;
    if (v9)
    {
      v10 = sub_1B02FDF78(v9);
      MEMORY[0x1B5E07CD8](v10, 0x10A1C4047CE62CFLL);
    }
  }
  result = v13;
  v13 = 0;
  if (result)
  {
    v11 = sub_1B02FDF78(result);
    return MEMORY[0x1B5E07CD8](v11, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_1B02DD9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1B02EA52C(&a9, 0);
  sub_1B02EA52C(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DDA10@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;

  v2 = operator new();
  result = sub_1B02FDE10(v2, 0);
  *a1 = v2;
  return result;
}

void sub_1B02DDA54(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DDA78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v6;
  unsigned int v7;
  uint64_t result;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  if (!a2)
    return sub_1B030328C(a4, 5, "model file path should not be empty.", 36);
  sub_1B0300A24(a1, a2, 1, &v16);
  (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
  if (!*a4)
  {
    sub_1B0303130(a4);
    v13 = 0;
    v14 = 0;
    v15 = 0;
    if (((*(uint64_t (**)(uint64_t, char **))(*(_QWORD *)v16 + 32))(v16, &v13) & 1) != 0)
    {
      if (v15 >= 0)
        v6 = (char *)&v13;
      else
        v6 = v13;
      if (v15 >= 0)
        v7 = HIBYTE(v15);
      else
        v7 = v14;
      if ((sub_1B0310554(a3, v6, v7) & 1) != 0)
      {
        sub_1B0303128(a4);
LABEL_18:
        if (SHIBYTE(v15) < 0)
          operator delete(v13);
        goto LABEL_20;
      }
      v9 = 13;
      sub_1B02D685C((uint64_t)v10);
      sub_1B02D7994(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v10, (uint64_t)") [", 3);
      sub_1B02D7994(v10, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
      sub_1B02D7994(v10, (uint64_t)"] ", 2);
      sub_1B02D4430(&v9, (uint64_t)a4);
    }
    else
    {
      v9 = 13;
      sub_1B02D685C((uint64_t)v10);
      sub_1B02D7994(v10, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v10, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v10, (uint64_t)") [", 3);
      sub_1B02D7994(v10, (uint64_t)"input->ReadAll(&serialized)", 27);
      sub_1B02D7994(v10, (uint64_t)"] ", 2);
      sub_1B02D4430(&v9, (uint64_t)a4);
    }
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](&v12);
    goto LABEL_18;
  }
LABEL_20:
  result = v16;
  v16 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B02DDD24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v3;

  if (*(char *)(v1 - 57) < 0)
    operator delete(*(void **)(v1 - 80));
  v3 = *(_QWORD *)(v1 - 56);
  *(_QWORD *)(v1 - 56) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B02DDD84(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  char v10;
  uint64_t v11;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 16))(&v11);
  if (v11)
  {
    v10 = 1;
    v1 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v1, (uint64_t)"(", 1);
    v2 = (_QWORD *)std::ostream::operator<<();
    v3 = sub_1B02D7994(v2, (uint64_t)") [", 3);
    v4 = sub_1B02D7994(v3, (uint64_t)"_status.ok()", 12);
    v5 = sub_1B02D7994(v4, (uint64_t)"] ", 2);
    sub_1B0303444((uint64_t)&v11, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_1B02D7994(v5, (uint64_t)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1B02D6948(&v10);
  }
  return sub_1B0303130(&v11);
}

void sub_1B02DDE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  sub_1B02D6948((_BYTE *)(v15 - 25));
  sub_1B0303130((uint64_t *)(v15 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DDEB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  sub_1B02DDA10(&v9);
  sub_1B02FF018(v9, a2);
  v8 = v9;
  v9 = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v8);
  v4 = v8;
  v8 = 0;
  if (v4)
  {
    v5 = sub_1B02FDF78(v4);
    MEMORY[0x1B5E07CD8](v5, 0x10A1C4047CE62CFLL);
  }
  result = v9;
  v9 = 0;
  if (result)
  {
    v7 = sub_1B02FDF78(result);
    return MEMORY[0x1B5E07CD8](v7, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_1B02DDF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_1B02EA52C(&a9, 0);
  sub_1B02EA52C(&a10, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DDF8C@<X0>(uint64_t a1@<X0>, char *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD v15[11];
  char v16;
  uint64_t v17;
  uint64_t v18;

  sub_1B02DDA10(&v18);
  if ((sub_1B0310554(v18, a2, a3) & 1) != 0)
  {
    v8 = v18;
    v18 = 0;
    v13 = v8;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 40))(a1, &v13);
    v9 = v13;
    v13 = 0;
    if (v9)
    {
      v10 = sub_1B02FDF78(v9);
      MEMORY[0x1B5E07CD8](v10, 0x10A1C4047CE62CFLL);
    }
  }
  else
  {
    v14 = 13;
    sub_1B02D685C((uint64_t)v15);
    sub_1B02D7994(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v15, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v15, (uint64_t)") [", 3);
    sub_1B02D7994(v15, (uint64_t)"model_proto->ParseFromArray(serialized.data(), serialized.size())", 65);
    sub_1B02D7994(v15, (uint64_t)"] ", 2);
    sub_1B02D4430(&v14, a4);
    v15[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v15[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v16 < 0)
      operator delete((void *)v15[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](&v17);
  }
  result = v18;
  v18 = 0;
  if (result)
  {
    v12 = sub_1B02FDF78(result);
    return MEMORY[0x1B5E07CD8](v12, 0x10A1C4047CE62CFLL);
  }
  return result;
}

void sub_1B02DE150(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B02EA52C((uint64_t *)(v1 - 56), 0);
  _Unwind_Resume(a1);
}

void sub_1B02DE194(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string::size_type v24;
  void *v25;
  void *v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  _QWORD *v30;
  std::string *v31;
  _QWORD *v32;
  unint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  std::string::size_type v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  const std::string::value_type *v50;
  std::string::size_type v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  int v55;
  const std::string::value_type *v56;
  std::string::size_type v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  std::string *v61;
  std::string::size_type size;
  unint64_t v63;
  size_t v64;
  void *v65;
  _OWORD *v66;
  __int128 v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  std::string::size_type v72;
  __int128 v73;
  char *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t v82;
  char *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  std::string __p;
  std::string v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  std::string v102;
  char *v103;
  unint64_t *v104;

  v6 = *a2;
  v7 = *(_BYTE **)(*a2 + 88);
  if (!v7)
    v7 = &unk_1EEEB2B38;
  if (v7[80])
  {
    if ((int)sub_1B03013F4() <= 0)
    {
      v102.__r_.__value_.__s.__data_[0] = 0;
      v8 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
      sub_1B02D7994(v8, (uint64_t)"(", 1);
      v9 = (_QWORD *)std::ostream::operator<<();
      v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
      v11 = sub_1B02D7994(v10, (uint64_t)"LOG(", 4);
      v12 = sub_1B02D7994(v11, (uint64_t)"INFO", 4);
      v13 = sub_1B02D7994(v12, (uint64_t)") ", 2);
      sub_1B02D7994(v13, (uint64_t)"Enable Apple addition for backward compatibility", 48);
      sub_1B02D6948(&v102);
    }
    v6 = *a2;
    *(_DWORD *)(v6 + 48) = *(_DWORD *)(*a2 + 48) | 1;
    v14 = *(_QWORD *)(v6 + 80);
    if (!v14)
    {
      v15 = *(_QWORD *)(v6 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      v14 = sub_1B02FF294((uint64_t)v16);
      *(_QWORD *)(v6 + 80) = v14;
      v6 = *a2;
    }
    *(_DWORD *)(v14 + 40) |= 0x4000u;
    *(_BYTE *)(v14 + 245) = 1;
    *(_DWORD *)(v6 + 48) |= 2u;
    v17 = *(_QWORD *)(v6 + 88);
    if (!v17)
    {
      v18 = *(_QWORD *)(v6 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      v17 = sub_1B02FF348((uint64_t)v19);
      *(_QWORD *)(v6 + 88) = v17;
      v6 = *a2;
    }
    *(_DWORD *)(v17 + 48) |= 0x10u;
    *(_BYTE *)(v17 + 81) = 1;
  }
  *a2 = 0;
  if (v6)
    v20 = v6 + 16;
  else
    v20 = 0;
  v21 = a1[4];
  a1[4] = v20;
  if (v21)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    v20 = a1[4];
  }
  sub_1B02DCD70(v20 - 16, &v102);
  v22 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v23 = a1[1];
  a1[1] = v22;
  if (v23)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    v24 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v24)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v24 + 8))(v24);
  }
  if (*(_QWORD *)(v20 + 72))
    v25 = *(void **)(v20 + 72);
  else
    v25 = &unk_1EEEB2B38;
  if (*(_QWORD *)(v20 + 64))
    v26 = *(void **)(v20 + 64);
  else
    v26 = &unk_1EEEB29A8;
  sub_1B02DEABC((uint64_t)v25, (uint64_t)v26, (uint64_t *)&v102);
  v27 = v102.__r_.__value_.__r.__words[0];
  v102.__r_.__value_.__r.__words[0] = 0;
  v28 = a1[2];
  a1[2] = v27;
  if (v28)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
    v29 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    if (v29)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v29 + 8))(v29);
  }
  if ((*(_DWORD *)(v20 + 32) & 8) != 0)
  {
    v30 = *(_QWORD **)(v20 + 88);
    if (!v30)
    {
      sub_1B0305328((uint64_t)&v102, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v31 = sub_1B0305340(&v102, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_1B0305470((uint64_t)&v99, (const char **)&v31->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)&v102);
      v30 = *(_QWORD **)(v20 + 88);
    }
    if (v30)
      v32 = v30;
    else
      v32 = &unk_1EEEB2B38;
    v33 = v32[8] & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v33 + 23) < 0)
    {
      if (!*(_QWORD *)(v33 + 8))
        goto LABEL_45;
    }
    else if (!*(_BYTE *)(v33 + 23))
    {
      goto LABEL_45;
    }
    sub_1B02DEB38((uint64_t)v32, (uint64_t *)&v102);
    v34 = v102.__r_.__value_.__r.__words[0];
    v102.__r_.__value_.__r.__words[0] = 0;
    v35 = a1[3];
    a1[3] = v34;
    if (v35)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
      v36 = v102.__r_.__value_.__r.__words[0];
      v102.__r_.__value_.__r.__words[0] = 0;
      if (v36)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v36 + 8))(v36);
    }
  }
LABEL_45:
  v37 = a1[2];
  v38 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 16))(v37, v38);
  (*(void (**)(_QWORD *))(*a1 + 88))(a1);
  if (!*a3)
  {
    sub_1B0303130(a3);
    v99 = 0;
    v100 = 0;
    v101 = 0;
    v96 = 0;
    v97 = 0;
    v98 = 0;
    v39 = *(int **)(v20 + 80);
    if (!v39)
      v39 = (int *)&unk_1EEEB2AF0;
    v40 = *((_QWORD *)v39 + 7);
    if (v40)
      v41 = (uint64_t *)(v40 + 8);
    else
      v41 = 0;
    v42 = v39[12];
    if ((_DWORD)v42)
    {
      v43 = &v41[v42];
      while (1)
      {
        v44 = *v41;
        v45 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v45 + 23) < 0)
        {
          v47 = *(_QWORD *)v45;
          v46 = *(_QWORD *)(v45 + 8);
        }
        else
        {
          v46 = *(unsigned __int8 *)(v45 + 23);
          v47 = *(_QWORD *)(*v41 + 24) & 0xFFFFFFFFFFFFFFFELL;
        }
        (*(void (**)(_QWORD *, unint64_t, uint64_t, uint64_t *))(*a1 + 136))(a1, v47, v46, &v96);
        if (*a3)
          break;
        sub_1B0303130(a3);
        memset(&v95, 0, sizeof(v95));
        v48 = v96;
        if (v96 == v97)
        {
          v52 = v96;
        }
        else
        {
          v49 = *(char *)(v96 + 23);
          if (v49 >= 0)
            v50 = (const std::string::value_type *)v96;
          else
            v50 = *(const std::string::value_type **)v96;
          if (v49 >= 0)
            v51 = *(unsigned __int8 *)(v96 + 23);
          else
            v51 = *(_QWORD *)(v96 + 8);
          std::string::append(&v95, v50, v51);
          v48 = v96;
          v52 = v97;
        }
        if (0xAAAAAAAAAAAAAAABLL * ((v52 - v48) >> 3) >= 2)
        {
          v53 = 0;
          v54 = 1;
          do
          {
            std::string::append(&v95, " ", 1uLL);
            v55 = *(char *)(v96 + v53 + 47);
            if (v55 >= 0)
              v56 = (const std::string::value_type *)(v96 + v53 + 24);
            else
              v56 = *(const std::string::value_type **)(v96 + v53 + 24);
            if (v55 >= 0)
              v57 = *(unsigned __int8 *)(v96 + v53 + 47);
            else
              v57 = *(_QWORD *)(v96 + v53 + 32);
            std::string::append(&v95, v56, v57);
            ++v54;
            v53 += 24;
          }
          while (v54 < 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3));
        }
        v58 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v58 + 23) < 0)
        {
          v60 = *(_QWORD *)v58;
          v59 = *(_QWORD *)(v58 + 8);
        }
        else
        {
          v59 = *(unsigned __int8 *)(v58 + 23);
          v60 = *(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL;
        }
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v61 = &v95;
        else
          v61 = (std::string *)v95.__r_.__value_.__r.__words[0];
        if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v95.__r_.__value_.__r.__words[2]);
        else
          size = v95.__r_.__value_.__l.__size_;
        if (((*(uint64_t (**)(_QWORD, unint64_t, uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 192))(a1[1], v60, v59, v61, size) & 1) == 0)
        {
          v63 = *(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL;
          if (*(char *)(v63 + 23) < 0)
          {
            v65 = *(void **)v63;
            v64 = *(_QWORD *)(v63 + 8);
          }
          else
          {
            v64 = *(unsigned __int8 *)(v63 + 23);
            v65 = (void *)(*(_QWORD *)(v44 + 24) & 0xFFFFFFFFFFFFFFFELL);
          }
          sub_1B02DEBAC(v65, v64, "\t", (void **)(*(_QWORD *)(v44 + 32) & 0xFFFFFFFFFFFFFFFELL), "\t", (void **)&v95.__r_.__value_.__l.__data_, &__p);
          v66 = v100;
          if ((unint64_t)v100 >= v101)
          {
            v68 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v100[-v99] >> 3);
            v69 = v68 + 1;
            if (v68 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1B02D7758();
            if (0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3) > v69)
              v69 = 0x5555555555555556 * ((uint64_t)(v101 - v99) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v101 - v99) >> 3) >= 0x555555555555555)
              v70 = 0xAAAAAAAAAAAAAAALL;
            else
              v70 = v69;
            v104 = &v101;
            if (v70)
              v71 = (char *)sub_1B02D776C((uint64_t)&v101, v70);
            else
              v71 = 0;
            v72 = (std::string::size_type)&v71[24 * v68];
            v102.__r_.__value_.__r.__words[0] = (std::string::size_type)v71;
            v102.__r_.__value_.__l.__size_ = v72;
            v103 = &v71[24 * v70];
            v73 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *(_QWORD *)(v72 + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *(_OWORD *)v72 = v73;
            memset(&__p, 0, sizeof(__p));
            v102.__r_.__value_.__r.__words[2] = v72 + 24;
            sub_1B02EA840(&v99, &v102);
            v74 = v100;
            sub_1B02EA9C8((uint64_t)&v102);
            v100 = v74;
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
          }
          else
          {
            v67 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
            *((_QWORD *)v100 + 2) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
            *v66 = v67;
            v100 = (char *)v66 + 24;
          }
        }
        if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v95.__r_.__value_.__l.__data_);
        if (++v41 == v43)
        {
          if ((char *)v99 == v100)
            goto LABEL_119;
          if ((int)sub_1B03013F4() <= 0)
          {
            v102.__r_.__value_.__s.__data_[0] = 0;
            v75 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
            sub_1B02D7994(v75, (uint64_t)"(", 1);
            v76 = (_QWORD *)std::ostream::operator<<();
            v77 = sub_1B02D7994(v76, (uint64_t)") ", 2);
            v78 = sub_1B02D7994(v77, (uint64_t)"LOG(", 4);
            v79 = sub_1B02D7994(v78, (uint64_t)"INFO", 4);
            sub_1B02D7994(v79, (uint64_t)") ", 2);
            v80 = (_QWORD *)std::ostream::operator<<();
            sub_1B02D7994(v80, (uint64_t)"/", 1);
            v81 = (_QWORD *)std::ostream::operator<<();
            sub_1B02D7994(v81, (uint64_t)" samples did not pass the test.", 31);
            sub_1B02D6948(&v102);
          }
          v82 = v99;
          v83 = v100;
          if ((char *)v99 != v100)
          {
            v84 = (_QWORD *)MEMORY[0x1E0DE4A50];
            do
            {
              if ((int)sub_1B03013F4() <= 0)
              {
                v102.__r_.__value_.__s.__data_[0] = 0;
                v85 = sub_1B02D7994(v84, (uint64_t)"sentencepiece_processor.cc", 26);
                sub_1B02D7994(v85, (uint64_t)"(", 1);
                v86 = (_QWORD *)std::ostream::operator<<();
                v87 = sub_1B02D7994(v86, (uint64_t)") ", 2);
                v88 = sub_1B02D7994(v87, (uint64_t)"LOG(", 4);
                v89 = sub_1B02D7994(v88, (uint64_t)"INFO", 4);
                v90 = sub_1B02D7994(v89, (uint64_t)") ", 2);
                v91 = *(char *)(v82 + 23);
                if (v91 >= 0)
                  v92 = v82;
                else
                  v92 = *(_QWORD *)v82;
                if (v91 >= 0)
                  v93 = *(unsigned __int8 *)(v82 + 23);
                else
                  v93 = *(_QWORD *)(v82 + 8);
                sub_1B02D7994(v90, v92, v93);
                sub_1B02D6948(&v102);
              }
              v82 += 24;
            }
            while ((char *)v82 != v83);
          }
          sub_1B030328C(a3, 13, "Self-test failures. See LOG(INFO).", 34);
          break;
        }
      }
    }
    else
    {
LABEL_119:
      sub_1B0303128(a3);
    }
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
    sub_1B02E9D04((void ***)&v102);
    v102.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99;
    sub_1B02E9D04((void ***)&v102);
  }
}

void sub_1B02DEA00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_1B0305478((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DEABC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t result;

  v6 = operator new();
  result = sub_1B02DB3BC(v6, a1, a2);
  *a3 = v6;
  return result;
}

void sub_1B02DEB14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DEB38@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t result;

  v4 = operator new();
  result = sub_1B02DB474(v4, a1);
  *a2 = v4;
  return result;
}

void sub_1B02DEB88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

void sub_1B02DEBAC(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, char *a5@<X4>, void **a6@<X5>, std::string *a7@<X8>)
{
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_1B02DCB10(&__dst, __src, __len);
  v12 = strlen(a3);
  sub_1B02EA568(a3, v12, a4, a5, a6, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a7 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1B02DEC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1B02DECB4(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_1B02DECBC((uint64_t *)a1, a2, a3, (char **)(a1 + 40), a4);
}

void sub_1B02DECBC(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  unsigned __int8 v10;
  uint64_t *v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  int v25;
  int v26;
  const char *v27;
  size_t v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  uint64_t *v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *__p[2];
  __int128 v45;
  uint64_t v46;
  _QWORD v47[21];

  v47[19] = *MEMORY[0x1E0C80C00];
  a4[1] = *a4;
  if (a3)
  {
    (*(void (**)(uint64_t *))(*a1 + 88))(a1);
    if (!*a5)
    {
      sub_1B0303130(a5);
      v10 = atomic_load((unsigned __int8 *)&qword_1EEEB2880);
      if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_1EEEB2880))
      {
        v43 = xmmword_1E60CDC48;
        *(_OWORD *)__p = unk_1E60CDC58;
        v45 = xmmword_1E60CDC68;
        v46 = 3;
        v39 = xmmword_1E60CDC08;
        v40 = unk_1E60CDC18;
        v41 = xmmword_1E60CDC28;
        v42 = *(_OWORD *)&off_1E60CDC38;
        sub_1B02EC8A0((uint64_t)&unk_1EEEB2890, (uint64_t)&v39, 5);
        __cxa_atexit((void (*)(void *))sub_1B02E7090, &unk_1EEEB2890, &dword_1B02D2000);
        __cxa_guard_release(&qword_1EEEB2880);
      }
      sub_1B02E999C((char **)&v37, a2, a3, ":", 1, 0);
      v11 = (uint64_t *)v37;
      v12 = v38;
      if (v37 == v38)
      {
LABEL_29:
        if (v11)
        {
          v38 = v11;
          operator delete(v11);
        }
        sub_1B0303128(a5);
      }
      else
      {
        while (1)
        {
          v13 = sub_1B02EACEC((uint64_t)&unk_1EEEB2890, (uint64_t)v11);
          v14 = v13;
          if (v13 == (_QWORD *)&unk_1EEEB2898)
            break;
          v16 = a4[1];
          v15 = (unint64_t)a4[2];
          if ((unint64_t)v16 >= v15)
          {
            v18 = *a4;
            v19 = (v16 - *a4) >> 2;
            v20 = v19 + 1;
            if ((unint64_t)(v19 + 1) >> 62)
              sub_1B02D7758();
            v21 = v15 - (_QWORD)v18;
            if (v21 >> 1 > v20)
              v20 = v21 >> 1;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL)
              v22 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v22 = v20;
            if (v22)
            {
              v23 = (char *)sub_1B02D8648((uint64_t)(a4 + 2), v22);
              v18 = *a4;
              v16 = a4[1];
            }
            else
            {
              v23 = 0;
            }
            v24 = &v23[4 * v19];
            *(_DWORD *)v24 = *((_DWORD *)v14 + 12);
            v17 = v24 + 4;
            while (v16 != v18)
            {
              v25 = *((_DWORD *)v16 - 1);
              v16 -= 4;
              *((_DWORD *)v24 - 1) = v25;
              v24 -= 4;
            }
            *a4 = v24;
            a4[1] = v17;
            a4[2] = &v23[4 * v22];
            if (v18)
              operator delete(v18);
          }
          else
          {
            *(_DWORD *)v16 = *((_DWORD *)v13 + 12);
            v17 = v16 + 4;
          }
          a4[1] = v17;
          v26 = *((_DWORD *)v14 + 12);
          if (v26 == 1)
          {
            v27 = sub_1B02D46F8(a1[1]);
            v28 = strlen(v27);
            v29 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v27, v28);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v29) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_1B02D685C((uint64_t)&v39 + 8);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->bos_piece().data())))", 68);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v33 = sub_1B02D46F8(a1[1]);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)v33, v34);
              sub_1B02D4430((unsigned int *)&v39, (uint64_t)a5);
              goto LABEL_38;
            }
            v26 = *((_DWORD *)v14 + 12);
          }
          if (v26 == 2)
          {
            v30 = sub_1B02D4748(a1[1]);
            v31 = strlen(v30);
            v32 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v30, v31);
            if (((*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v32) & 1) != 0)
            {
              LODWORD(v39) = 13;
              sub_1B02D685C((uint64_t)&v39 + 8);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"!IsUnknown(PieceToId(absl::string_view(model_->eos_piece().data())))", 68);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
              v35 = sub_1B02D4748(a1[1]);
              sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)v35, v36);
              sub_1B02D4430((unsigned int *)&v39, (uint64_t)a5);
LABEL_38:
              *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
              *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
              *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
              if (SBYTE7(v45) < 0)
                operator delete(__p[0]);
              goto LABEL_40;
            }
          }
          v11 += 2;
          if (v11 == v12)
          {
            v11 = (uint64_t *)v37;
            goto LABEL_29;
          }
        }
        LODWORD(v39) = 13;
        sub_1B02D685C((uint64_t)&v39 + 8);
        sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)") [", 3);
        sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"it != extra_option_map.end()", 28);
        sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"] ", 2);
        sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"option \"", 8);
        sub_1B02D7994((_QWORD *)&v39 + 1, *v11, v11[1]);
        sub_1B02D7994((_QWORD *)&v39 + 1, (uint64_t)"\" is not available.", 19);
        sub_1B02D4430((unsigned int *)&v39, (uint64_t)a5);
        *((_QWORD *)&v39 + 1) = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)&v39 + *(_QWORD *)(*((_QWORD *)&v39 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60]
                                                                                              + 24);
        *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
        if (SBYTE7(v45) < 0)
          operator delete(__p[0]);
LABEL_40:
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B5E07C60](v47);
        if (v37)
        {
          v38 = (uint64_t *)v37;
          operator delete(v37);
        }
      }
    }
  }
  else
  {
    sub_1B0303128(a5);
  }
}

void sub_1B02DF360(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  __cxa_guard_abort(&qword_1EEEB2880);
  _Unwind_Resume(a1);
}

void sub_1B02DF3DC(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  sub_1B02DECBC((uint64_t *)a1, a2, a3, (char **)(a1 + 64), a4);
}

_QWORD *sub_1B02DF3E4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    if (*(_QWORD *)(a1 + 16))
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 16))(v4);
      if (!*a2)
      {
        sub_1B0303130(a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
        if (!*a2)
        {
          v6 = sub_1B0303130(a2);
          return sub_1B0303128(v6);
        }
      }
      return result;
    }
    v9 = 13;
    v8 = (_QWORD *)sub_1B02D685C((uint64_t)v10);
    sub_1B02D7994(v8, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v10, (uint64_t)") [", 3);
    sub_1B02D7994(v10, (uint64_t)"normalizer_", 11);
    sub_1B02D7994(v10, (uint64_t)"] ", 2);
    sub_1B02D7994(v10, (uint64_t)"Normalizer is not initialized.", 30);
    sub_1B02D4430(&v9, (uint64_t)a2);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)sub_1B02D685C((uint64_t)v10);
    sub_1B02D7994(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v10, (uint64_t)") [", 3);
    sub_1B02D7994(v10, (uint64_t)"model_", 6);
    sub_1B02D7994(v10, (uint64_t)"] ", 2);
    sub_1B02D7994(v10, (uint64_t)"Model is not initialized.", 25);
    sub_1B02D4430(&v9, (uint64_t)a2);
  }
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1B5E07C60](&v12);
}

void sub_1B02DF63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B02DF65C(_QWORD *a1@<X0>, _OWORD **a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  _QWORD *v19;
  _QWORD v20[2];
  unsigned int v21;
  _QWORD *v22[11];
  char v23;
  uint64_t v24;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a3);
  if (*a3)
    return;
  sub_1B0303130(a3);
  v6 = a1[4];
  if (!v6 || *(_UNKNOWN **)v6 != &unk_1E60CBA88)
  {
    v21 = 13;
    v7 = (_QWORD *)sub_1B02D685C((uint64_t)v22);
    sub_1B02D7994(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v22, (uint64_t)") [", 3);
    sub_1B02D7994(v22, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
    sub_1B02D7994(v22, (uint64_t)"] ", 2);
    sub_1B02D7994(v22, (uint64_t)"SetVocabulary is not supported when mmap-based model is loaded.", 63);
    sub_1B02D4430(&v21, (uint64_t)a3);
LABEL_5:
    v22[0] = *(_QWORD **)MEMORY[0x1E0DE4F60];
    *(_QWORD **)((char *)v22 + *(v22[0] - 3)) = *(_QWORD **)(MEMORY[0x1E0DE4F60] + 24);
    v22[1] = (_QWORD *)(MEMORY[0x1E0DE4FB8] + 16);
    if (v23 < 0)
      operator delete(v22[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](&v24);
    return;
  }
  v8 = &unk_1EEEB29A8;
  if (*(_QWORD *)(v6 + 64))
    v8 = *(_DWORD **)(v6 + 64);
  if ((v8[68] - 1) >= 2)
  {
    v21 = 13;
    v19 = (_QWORD *)sub_1B02D685C((uint64_t)v22);
    sub_1B02D7994(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v22, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v22, (uint64_t)") [", 3);
    sub_1B02D7994(v22, (uint64_t)"type == TrainerSpec::UNIGRAM || type == TrainerSpec::BPE", 56);
    sub_1B02D7994(v22, (uint64_t)"] ", 2);
    sub_1B02D7994(v22, (uint64_t)"Vocabulary constraint is only enabled in subword units.", 55);
    sub_1B02D4430(&v21, (uint64_t)a3);
    goto LABEL_5;
  }
  sub_1B02EAA50((uint64_t)&v21, *a2, a2[1]);
  if (*(int *)(v6 + 48) >= 1)
  {
    v9 = 0;
    do
    {
      v10 = sub_1B02E98C0(v6 + 40, v9);
      v11 = v10;
      if ((*(_DWORD *)(v10 + 60) - 2) >= 3)
      {
        v12 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        if (*(char *)(v12 + 23) < 0)
        {
          v14 = *(_QWORD *)v12;
          v13 = *(_QWORD *)(v12 + 8);
        }
        else
        {
          v13 = *(unsigned __int8 *)(v12 + 23);
          v14 = *(_QWORD *)(v10 + 48) & 0xFFFFFFFFFFFFFFFELL;
        }
        v20[0] = v14;
        v20[1] = v13;
        if (v22 == sub_1B02EACEC((uint64_t)&v21, (uint64_t)v20)
          && ((v15 = *(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL, *(char *)(v15 + 23) < 0)
            ? (unsigned __int8 *)(v17 = *(unsigned __int8 **)v15, v16 = *(_QWORD *)(v15 + 8))
            : (v16 = *(unsigned __int8 *)(v15 + 23),
               v17 = (unsigned __int8 *)(*(_QWORD *)(v11 + 48) & 0xFFFFFFFFFFFFFFFELL)),
              v16 != asc_1B03A8CD7[(unint64_t)*v17 >> 4]))
        {
          if (!sub_1B02F7BE0(5))
LABEL_32:
            __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
          v18 = 5;
        }
        else
        {
          if (!sub_1B02F7BE0(1))
            goto LABEL_32;
          v18 = 1;
        }
        *(_DWORD *)(v11 + 40) |= 4u;
        *(_DWORD *)(v11 + 60) = v18;
      }
      ++v9;
    }
    while (v9 < *(_DWORD *)(v6 + 48));
  }
  sub_1B0303128(a3);
  sub_1B02D7CDC((uint64_t)&v21, v22[0]);
}

void sub_1B02DF9FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, _QWORD *a12)
{
  sub_1B02D7CDC((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02DFA3C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *result;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD v13[11];
  char v14;
  uint64_t v15;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*a1 + 88))(a2);
  if (!*a2)
  {
    sub_1B0303130(a2);
    v5 = a1[4];
    if (v5 && *(_UNKNOWN **)v5 == &unk_1E60CBA88)
    {
      v7 = *(_QWORD *)(v5 + 56);
      if (v7)
        v8 = (uint64_t *)(v7 + 8);
      else
        v8 = 0;
      v9 = *(int *)(v5 + 48);
      if ((_DWORD)v9)
      {
        v10 = 8 * v9;
        do
        {
          v11 = *v8;
          if (*(_DWORD *)(*v8 + 60) == 5)
          {
            if (!sub_1B02F7BE0(1))
              sub_1B02ECF5C();
            *(_DWORD *)(v11 + 40) |= 4u;
            *(_DWORD *)(v11 + 60) = 1;
          }
          ++v8;
          v10 -= 8;
        }
        while (v10);
      }
      return sub_1B0303128(a2);
    }
    else
    {
      v12 = 13;
      v6 = (_QWORD *)sub_1B02D685C((uint64_t)v13);
      sub_1B02D7994(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v13, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v13, (uint64_t)") [", 3);
      sub_1B02D7994(v13, (uint64_t)"(model_proto = dynamic_cast<ModelProto *>(model_proto_.get()))", 62);
      sub_1B02D7994(v13, (uint64_t)"] ", 2);
      sub_1B02D7994(v13, (uint64_t)"ResetVocabulary is not supported when mmap-based model is loaded.", 65);
      sub_1B02D4430(&v12, (uint64_t)a2);
      v13[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v13 + *(_QWORD *)(v13[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v13[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v14 < 0)
        operator delete((void *)v13[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v15);
    }
  }
  return result;
}

void sub_1B02DFC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02DFC4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  void **v8;
  unint64_t v9;
  __int128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __int128 *v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  const char *v18;
  uint64_t v19;
  __int128 *v20;
  __int128 v21;
  __int128 *v22;
  uint64_t result;
  void *__p;
  _QWORD v25[11];
  char v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  uint64_t v30;
  __int128 *v31;
  unint64_t v32;
  void **v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37[4];

  sub_1B0300A24(a2, a3, 0, &v36);
  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 16))(v36);
  if (!*a5)
  {
    sub_1B0303130(a5);
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    while ((*(unsigned int (**)(uint64_t, void ***))(*(_QWORD *)v36 + 24))(v36, &v33))
    {
      if (v35 >= 0)
        v8 = (void **)&v33;
      else
        v8 = v33;
      if (v35 >= 0)
        v9 = HIBYTE(v35);
      else
        v9 = v34;
      sub_1B02E999C((char **)&__p, (uint64_t)v8, v9, "\t", 1, 0);
      sub_1B02E9C64(&v28, (uint64_t)(v25[0] - (_QWORD)__p) >> 4);
      v10 = v29;
      if (v29 == v28)
      {
        v14 = v29;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = 0;
        v10 = v28;
        do
        {
          MEMORY[0x1B5E07A08]((char *)v10 + v11, *(_QWORD *)((char *)__p + v12), *(_QWORD *)((char *)__p + v12 + 8));
          ++v13;
          v10 = v28;
          v14 = v29;
          v11 += 24;
          v12 += 16;
        }
        while (v13 < 0xAAAAAAAAAAAAAAABLL * (((char *)v29 - (char *)v28) >> 3));
      }
      if (__p)
      {
        v25[0] = __p;
        operator delete(__p);
        v10 = v28;
        v14 = v29;
      }
      v15 = (char *)v14 - (char *)v10;
      if (!v15)
      {
        LODWORD(__p) = 13;
        sub_1B02D685C((uint64_t)v25);
        sub_1B02D7994(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(v25, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(v25, (uint64_t)") [", 3);
        sub_1B02D7994(v25, (uint64_t)"(v.size()) >= (1)", 17);
        sub_1B02D7994(v25, (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)&__p, (uint64_t)a5);
LABEL_42:
        v25[0] = *MEMORY[0x1E0DE4F60];
        *(_QWORD *)((char *)v25 + *(_QWORD *)(v25[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v25[1] = MEMORY[0x1E0DE4FB8] + 16;
        if (v26 < 0)
          operator delete((void *)v25[9]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B5E07C60](&v27);
        __p = &v28;
        sub_1B02E9D04((void ***)&__p);
        goto LABEL_45;
      }
      if (*((char *)v10 + 23) < 0)
      {
        if (!*((_QWORD *)v10 + 1))
        {
LABEL_40:
          LODWORD(__p) = 13;
          sub_1B02D685C((uint64_t)v25);
          sub_1B02D7994(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_1B02D7994(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_1B02D7994(v25, (uint64_t)") [", 3);
          sub_1B02D7994(v25, (uint64_t)"!v[0].empty()", 13);
          sub_1B02D7994(v25, (uint64_t)"] ", 2);
          sub_1B02D4430((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
      }
      else if (!*((_BYTE *)v10 + 23))
      {
        goto LABEL_40;
      }
      v16 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 3);
      v17 = 1;
      v37[0] = 1;
      if (v16 >= 2)
      {
        if (*((char *)v10 + 47) < 0)
        {
          v18 = (const char *)*((_QWORD *)v10 + 3);
          v19 = *((_QWORD *)v10 + 4);
        }
        else
        {
          v18 = (char *)v10 + 24;
          v19 = *((unsigned __int8 *)v10 + 47);
        }
        if (!sub_1B02E022C(v18, v19, (uint64_t)v37))
        {
          LODWORD(__p) = 13;
          sub_1B02D685C((uint64_t)v25);
          sub_1B02D7994(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_1B02D7994(v25, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_1B02D7994(v25, (uint64_t)") [", 3);
          sub_1B02D7994(v25, (uint64_t)"absl::SimpleAtoi(v[1], &freq)", 29);
          sub_1B02D7994(v25, (uint64_t)"] ", 2);
          sub_1B02D7994(v25, (uint64_t)"Could not parse the frequency", 29);
          sub_1B02D4430((unsigned int *)&__p, (uint64_t)a5);
          goto LABEL_42;
        }
        v17 = v37[0];
      }
      if (v17 >= a4)
      {
        v20 = v31;
        if ((unint64_t)v31 >= v32)
        {
          v22 = (__int128 *)sub_1B02EAF88(&v30, v28);
        }
        else
        {
          if (*((char *)v28 + 23) < 0)
          {
            sub_1B02EB0A8(v31, *(void **)v28, *((_QWORD *)v28 + 1));
          }
          else
          {
            v21 = *v28;
            *((_QWORD *)v31 + 2) = *((_QWORD *)v28 + 2);
            *v20 = v21;
          }
          v22 = (__int128 *)((char *)v20 + 24);
        }
        v31 = v22;
      }
      __p = &v28;
      sub_1B02E9D04((void ***)&__p);
    }
    sub_1B02E0350(&v30, &__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 112))(a1, &__p);
    if (__p)
    {
      v25[0] = __p;
      operator delete(__p);
    }
LABEL_45:
    __p = &v30;
    sub_1B02E9D04((void ***)&__p);
    if (SHIBYTE(v35) < 0)
      operator delete(v33);
  }
  result = v36;
  v36 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1B02E0150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  uint64_t v10;
  uint64_t v12;

  __p = (void *)(v10 - 176);
  sub_1B02E9D04((void ***)&__p);
  __p = (void *)(v10 - 152);
  sub_1B02E9D04((void ***)&__p);
  if (*(char *)(v10 - 105) < 0)
    operator delete(*(void **)(v10 - 128));
  v12 = *(_QWORD *)(v10 - 104);
  *(_QWORD *)(v10 - 104) = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  _Unwind_Resume(a1);
}

BOOL sub_1B02E022C(const char *a1, uint64_t a2, uint64_t a3)
{
  size_t v5;
  _QWORD *v6;
  _BOOL8 v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[2];
  _QWORD v12[11];
  char v13;
  uint64_t v14;

  sub_1B02EAD78((uint64_t)v11);
  v5 = strlen(a1);
  v6 = sub_1B02D7994(v12, (uint64_t)a1, v5);
  if ((*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) != 0)
  {
    v7 = 0;
  }
  else
  {
    v8 = (_QWORD *)MEMORY[0x1B5E07AD4](v11, a3);
    v7 = (*((_BYTE *)v8 + *(_QWORD *)(*v8 - 24) + 32) & 5) == 0;
  }
  v11[0] = *MEMORY[0x1E0DE4F50];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v12[0] = v9;
  v12[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v13 < 0)
    operator delete((void *)v12[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](&v14);
  return v7;
}

void sub_1B02E033C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EAEA4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E0350@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;

  result = sub_1B02E9D90(a2, 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3));
  v4 = *a1;
  if (a1[1] != *a1)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = (_QWORD *)(v4 + v5);
      LODWORD(v4) = *(char *)(v4 + v5 + 23);
      if ((v4 & 0x80000000) != 0)
      {
        v9 = (_QWORD *)*v8;
        v4 = v8[1];
      }
      else
      {
        v4 = v4;
        v9 = v8;
      }
      v10 = (_QWORD *)(*result + v6);
      *v10 = v9;
      v10[1] = v4;
      ++v7;
      v4 = *a1;
      v6 += 16;
      v5 += 24;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3) > v7);
  }
  return result;
}

_QWORD *sub_1B02E03F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD v17[6];
  int v18;
  uint64_t v19;
  void *__p;
  char v21;
  uint64_t v22;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_1B0303130(a5);
    if (a4)
    {
      sub_1B02E9D44(a4);
      sub_1B02F5B38(&v16, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v16);
      if (!*a5)
      {
        sub_1B0303130(a5);
        if (v19)
          v11 = v19 + 8;
        else
          v11 = 0;
        if (v18)
        {
          v12 = a4[1];
          v13 = 8 * v18;
          do
          {
            v14 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v11 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v12 >= a4[2])
            {
              v12 = sub_1B02EAF88(a4, v14);
            }
            else
            {
              sub_1B02EAF2C(a4, v14);
              v12 += 24;
            }
            a4[1] = v12;
            v11 += 8;
            v13 -= 8;
          }
          while (v13);
        }
        sub_1B0303128(a5);
      }
      return (_QWORD *)sub_1B02F5C58(&v16);
    }
    else
    {
      v16 = 13;
      v15 = (_QWORD *)sub_1B02D685C((uint64_t)v17);
      sub_1B02D7994(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v17, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v17, (uint64_t)") [", 3);
      sub_1B02D7994(v17, (uint64_t)"pieces", 6);
      sub_1B02D7994(v17, (uint64_t)"] ", 2);
      sub_1B02D7994(v17, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v16, (uint64_t)a5);
      v17[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v17 + *(_QWORD *)(v17[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v17[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v21 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v22);
    }
  }
  return result;
}

void sub_1B02E061C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E0648@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char **a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  int v24;
  _QWORD *v25;
  unsigned int v26;
  _QWORD v27[6];
  int v28;
  uint64_t v29;
  void *__p;
  char v31;
  uint64_t v32;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a5);
  if (!*a5)
  {
    sub_1B0303130(a5);
    if (a4)
    {
      a4[1] = *a4;
      sub_1B02F5B38(&v26, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v26);
      if (!*a5)
      {
        sub_1B0303130(a5);
        if (v29)
          v11 = v29 + 8;
        else
          v11 = 0;
        if (v28)
        {
          v12 = a4 + 2;
          v13 = a4[1];
          v14 = v11 + 8 * v28;
          do
          {
            v15 = *(_DWORD *)(*(_QWORD *)v11 + 64);
            if ((unint64_t)v13 >= *v12)
            {
              v17 = *a4;
              v18 = (v13 - *a4) >> 2;
              v19 = v18 + 1;
              if ((unint64_t)(v18 + 1) >> 62)
                sub_1B02D7758();
              v20 = *v12 - (_QWORD)v17;
              if (v20 >> 1 > v19)
                v19 = v20 >> 1;
              if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL)
                v21 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v21 = v19;
              if (v21)
              {
                v22 = (char *)sub_1B02D8648((uint64_t)(a4 + 2), v21);
                v17 = *a4;
                v13 = a4[1];
              }
              else
              {
                v22 = 0;
              }
              v23 = &v22[4 * v18];
              *(_DWORD *)v23 = v15;
              v16 = v23 + 4;
              while (v13 != v17)
              {
                v24 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v23 - 1) = v24;
                v23 -= 4;
              }
              *a4 = v23;
              a4[1] = v16;
              a4[2] = &v22[4 * v21];
              if (v17)
                operator delete(v17);
            }
            else
            {
              *(_DWORD *)v13 = v15;
              v16 = v13 + 4;
            }
            a4[1] = v16;
            v11 += 8;
            v13 = v16;
          }
          while (v11 != v14);
        }
        sub_1B0303128(a5);
      }
      return (_QWORD *)sub_1B02F5C58(&v26);
    }
    else
    {
      v26 = 13;
      v25 = (_QWORD *)sub_1B02D685C((uint64_t)v27);
      sub_1B02D7994(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v27, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v27, (uint64_t)") [", 3);
      sub_1B02D7994(v27, (uint64_t)"ids", 3);
      sub_1B02D7994(v27, (uint64_t)"] ", 2);
      sub_1B02D7994(v27, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v26, (uint64_t)a5);
      v27[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v27 + *(_QWORD *)(v27[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v27[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v31 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v32);
    }
  }
  return result;
}

void sub_1B02E090C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B02E093C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_1B02E0350(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 160))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B02E09A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02E09C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_1B0303130(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_1B02F5B38(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 272))(a1, a2, &v10);
      if (!*a4)
      {
        sub_1B0303130(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_1B0303128(a4);
      }
      return (_QWORD *)sub_1B02F5C58(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_1B02D685C((uint64_t)v11);
      sub_1B02D7994(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v11, (uint64_t)") [", 3);
      sub_1B02D7994(v11, (uint64_t)"detokenized", 11);
      sub_1B02D7994(v11, (uint64_t)"] ", 2);
      sub_1B02D7994(v11, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v11[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v13);
    }
  }
  return result;
}

void sub_1B02E0BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E0BD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  _QWORD *v9;
  unsigned int v10;
  _QWORD v11[11];
  char v12;
  uint64_t v13;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a4);
  if (!*a4)
  {
    sub_1B0303130(a4);
    if (a3)
    {
      if (*(char *)(a3 + 23) < 0)
      {
        **(_BYTE **)a3 = 0;
        *(_QWORD *)(a3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)a3 = 0;
        *(_BYTE *)(a3 + 23) = 0;
      }
      sub_1B02F5B38(&v10, 0);
      (*(void (**)(uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 280))(a1, a2, &v10);
      if (!*a4)
      {
        sub_1B0303130(a4);
        std::string::operator=((std::string *)a3, (const std::string *)(v11[8] & 0xFFFFFFFFFFFFFFFELL));
        sub_1B0303128(a4);
      }
      return (_QWORD *)sub_1B02F5C58(&v10);
    }
    else
    {
      v10 = 13;
      v9 = (_QWORD *)sub_1B02D685C((uint64_t)v11);
      sub_1B02D7994(v9, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v11, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v11, (uint64_t)") [", 3);
      sub_1B02D7994(v11, (uint64_t)"detokenized", 11);
      sub_1B02D7994(v11, (uint64_t)"] ", 2);
      sub_1B02D7994(v11, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v10, (uint64_t)a4);
      v11[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v11 + *(_QWORD *)(v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v11[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v12 < 0)
        operator delete((void *)v11[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v13);
    }
  }
  return result;
}

void sub_1B02E0DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E0DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t v13;
  void **v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  __int128 v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  __int128 *v28;
  unint64_t v29;
  unint64_t v30;
  void **v31;
  _QWORD v32[2];
  int v33;
  uint64_t v34;
  void *__p;
  char v36;
  uint64_t v37;
  __int128 **v38;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_1B0303130(a6);
    if (a5)
    {
      v13 = *a5;
      v14 = (void **)a5[1];
      while (v14 != (void **)v13)
      {
        v14 -= 3;
        v31 = v14;
        sub_1B02E9D04(&v31);
      }
      a5[1] = v13;
      sub_1B02F6620(&v31, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void ***))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v31);
      if (!*a6)
      {
        sub_1B0303130(a6);
        if (v34)
          v15 = (uint64_t *)(v34 + 8);
        else
          v15 = 0;
        if (v33)
        {
          v16 = &v15[v33];
          do
          {
            v17 = *v15;
            v28 = 0;
            v29 = 0;
            v30 = 0;
            v18 = *(_QWORD *)(v17 + 64);
            if (v18)
              v19 = v18 + 8;
            else
              v19 = 0;
            v20 = *(int *)(v17 + 56);
            if ((_DWORD)v20)
            {
              v21 = 0;
              v22 = 8 * v20;
              do
              {
                v23 = *(_QWORD *)(*(_QWORD *)v19 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v21 >= v30)
                {
                  v21 = sub_1B02EAF88((uint64_t *)&v28, (__int128 *)v23);
                }
                else
                {
                  if (*(char *)(v23 + 23) < 0)
                  {
                    sub_1B02EB0A8((_BYTE *)v21, *(void **)v23, *(_QWORD *)(v23 + 8));
                  }
                  else
                  {
                    v24 = *(_OWORD *)v23;
                    *(_QWORD *)(v21 + 16) = *(_QWORD *)(v23 + 16);
                    *(_OWORD *)v21 = v24;
                  }
                  v21 += 24;
                }
                v29 = v21;
                v19 += 8;
                v22 -= 8;
              }
              while (v22);
            }
            v25 = a5[1];
            if (v25 >= a5[2])
            {
              v26 = sub_1B02EB190(a5, &v28);
            }
            else
            {
              sub_1B02EB134((uint64_t)a5, &v28);
              v26 = v25 + 24;
            }
            a5[1] = v26;
            v38 = &v28;
            sub_1B02E9D04((void ***)&v38);
            ++v15;
          }
          while (v15 != v16);
        }
        sub_1B0303128(a6);
      }
      return (_QWORD *)sub_1B02F66D8(&v31);
    }
    else
    {
      LODWORD(v31) = 13;
      v27 = (_QWORD *)sub_1B02D685C((uint64_t)v32);
      sub_1B02D7994(v27, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v32, (uint64_t)") [", 3);
      sub_1B02D7994(v32, (uint64_t)"pieces", 6);
      sub_1B02D7994(v32, (uint64_t)"] ", 2);
      sub_1B02D7994(v32, (uint64_t)"output container is null", 24);
      sub_1B02D4430((unsigned int *)&v31, (uint64_t)a6);
      v32[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v32 + *(_QWORD *)(v32[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v32[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v36 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v37);
    }
  }
  return result;
}

void sub_1B02E10DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1B02D44BC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E112C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>)
{
  _QWORD *result;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t *v33;
  void *__p;
  char *v35;
  char *v36;
  unsigned int v37;
  _QWORD v38[2];
  int v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_1B0303130(a6);
    if (a5)
    {
      sub_1B02EA174(a5);
      sub_1B02F6620(&v37, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4, &v37);
      if (!*a6)
      {
        sub_1B0303130(a6);
        if (v40)
          v13 = (uint64_t *)(v40 + 8);
        else
          v13 = 0;
        if (v39)
        {
          v33 = &v13[v39];
          do
          {
            v14 = *v13;
            __p = 0;
            v35 = 0;
            v36 = 0;
            v15 = *(_QWORD *)(v14 + 64);
            if (v15)
              v16 = v15 + 8;
            else
              v16 = 0;
            v17 = *(int *)(v14 + 56);
            if ((_DWORD)v17)
            {
              v18 = 0;
              v19 = v16 + 8 * v17;
              do
              {
                v20 = *(_DWORD *)(*(_QWORD *)v16 + 64);
                if (v18 >= v36)
                {
                  v22 = (char *)__p;
                  v23 = (v18 - (_BYTE *)__p) >> 2;
                  v24 = v23 + 1;
                  if ((unint64_t)(v23 + 1) >> 62)
                    sub_1B02D7758();
                  v25 = v36 - (_BYTE *)__p;
                  if ((v36 - (_BYTE *)__p) >> 1 > v24)
                    v24 = v25 >> 1;
                  if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
                    v26 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v26 = v24;
                  if (v26)
                  {
                    v27 = (char *)sub_1B02D8648((uint64_t)&v36, v26);
                    v22 = (char *)__p;
                    v18 = v35;
                  }
                  else
                  {
                    v27 = 0;
                  }
                  v28 = &v27[4 * v23];
                  *(_DWORD *)v28 = v20;
                  v21 = v28 + 4;
                  while (v18 != v22)
                  {
                    v29 = *((_DWORD *)v18 - 1);
                    v18 -= 4;
                    *((_DWORD *)v28 - 1) = v29;
                    v28 -= 4;
                  }
                  __p = v28;
                  v35 = v21;
                  v36 = &v27[4 * v26];
                  if (v22)
                    operator delete(v22);
                }
                else
                {
                  *(_DWORD *)v18 = v20;
                  v21 = v18 + 4;
                }
                v35 = v21;
                v16 += 8;
                v18 = v21;
              }
              while (v16 != v19);
            }
            v30 = a5[1];
            if (v30 >= a5[2])
            {
              v31 = sub_1B02EB6C8(a5, (uint64_t)&__p);
            }
            else
            {
              sub_1B02EB678((uint64_t)a5, (uint64_t)&__p);
              v31 = v30 + 24;
            }
            a5[1] = v31;
            if (__p)
            {
              v35 = (char *)__p;
              operator delete(__p);
            }
            ++v13;
          }
          while (v13 != v33);
        }
        sub_1B0303128(a6);
      }
      return (_QWORD *)sub_1B02F66D8(&v37);
    }
    else
    {
      v37 = 13;
      v32 = (_QWORD *)sub_1B02D685C((uint64_t)v38);
      sub_1B02D7994(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v38, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v38, (uint64_t)") [", 3);
      sub_1B02D7994(v38, (uint64_t)"ids", 3);
      sub_1B02D7994(v38, (uint64_t)"] ", 2);
      sub_1B02D7994(v38, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v37, (uint64_t)a6);
      v38[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v38 + *(_QWORD *)(v38[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v38[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v42 < 0)
        operator delete(v41);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v43);
    }
  }
  return result;
}

void sub_1B02E1478(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14)
{
  sub_1B02D44BC((uint64_t)&a14);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E14C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int128 *v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD v21[6];
  int v22;
  uint64_t v23;
  void *__p;
  char v25;
  uint64_t v26;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_1B0303130(a6);
    if (a5)
    {
      sub_1B02E9D44(a5);
      sub_1B02F5B38(&v20, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v20, a7);
      if (!*a6)
      {
        sub_1B0303130(a6);
        if (v23)
          v15 = v23 + 8;
        else
          v15 = 0;
        if (v22)
        {
          v16 = a5[1];
          v17 = 8 * v22;
          do
          {
            v18 = (__int128 *)(*(_QWORD *)(*(_QWORD *)v15 + 48) & 0xFFFFFFFFFFFFFFFELL);
            if (v16 >= a5[2])
            {
              v16 = sub_1B02EAF88(a5, v18);
            }
            else
            {
              sub_1B02EAF2C(a5, v18);
              v16 += 24;
            }
            a5[1] = v16;
            v15 += 8;
            v17 -= 8;
          }
          while (v17);
        }
        sub_1B0303128(a6);
      }
      return (_QWORD *)sub_1B02F5C58(&v20);
    }
    else
    {
      v20 = 13;
      v19 = (_QWORD *)sub_1B02D685C((uint64_t)v21);
      sub_1B02D7994(v19, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v21, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v21, (uint64_t)") [", 3);
      sub_1B02D7994(v21, (uint64_t)"pieces", 6);
      sub_1B02D7994(v21, (uint64_t)"] ", 2);
      sub_1B02D7994(v21, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v20, (uint64_t)a6);
      v21[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v21 + *(_QWORD *)(v21[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v21[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v25 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v26);
    }
  }
  return result;
}

void sub_1B02E170C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E1738@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char **a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *result;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  _QWORD *v29;
  unsigned int v30;
  _QWORD v31[6];
  int v32;
  uint64_t v33;
  void *__p;
  char v35;
  uint64_t v36;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a6);
  if (!*a6)
  {
    sub_1B0303130(a6);
    if (a5)
    {
      a5[1] = *a5;
      sub_1B02F5B38(&v30, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 248))(a1, a2, a3, a4, &v30, a7);
      if (!*a6)
      {
        sub_1B0303130(a6);
        if (v33)
          v15 = v33 + 8;
        else
          v15 = 0;
        if (v32)
        {
          v16 = a5 + 2;
          v17 = a5[1];
          v18 = v15 + 8 * v32;
          do
          {
            v19 = *(_DWORD *)(*(_QWORD *)v15 + 64);
            if ((unint64_t)v17 >= *v16)
            {
              v21 = *a5;
              v22 = (v17 - *a5) >> 2;
              v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 62)
                sub_1B02D7758();
              v24 = *v16 - (_QWORD)v21;
              if (v24 >> 1 > v23)
                v23 = v24 >> 1;
              if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
                v25 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v25 = v23;
              if (v25)
              {
                v26 = (char *)sub_1B02D8648((uint64_t)(a5 + 2), v25);
                v21 = *a5;
                v17 = a5[1];
              }
              else
              {
                v26 = 0;
              }
              v27 = &v26[4 * v22];
              *(_DWORD *)v27 = v19;
              v20 = v27 + 4;
              while (v17 != v21)
              {
                v28 = *((_DWORD *)v17 - 1);
                v17 -= 4;
                *((_DWORD *)v27 - 1) = v28;
                v27 -= 4;
              }
              *a5 = v27;
              a5[1] = v20;
              a5[2] = &v26[4 * v25];
              if (v21)
                operator delete(v21);
            }
            else
            {
              *(_DWORD *)v17 = v19;
              v20 = v17 + 4;
            }
            a5[1] = v20;
            v15 += 8;
            v17 = v20;
          }
          while (v15 != v18);
        }
        sub_1B0303128(a6);
      }
      return (_QWORD *)sub_1B02F5C58(&v30);
    }
    else
    {
      v30 = 13;
      v29 = (_QWORD *)sub_1B02D685C((uint64_t)v31);
      sub_1B02D7994(v29, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v31, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v31, (uint64_t)") [", 3);
      sub_1B02D7994(v31, (uint64_t)"ids", 3);
      sub_1B02D7994(v31, (uint64_t)"] ", 2);
      sub_1B02D7994(v31, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v30, (uint64_t)a6);
      v31[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v31 + *(_QWORD *)(v31[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v31[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v36);
    }
  }
  return result;
}

void sub_1B02E1A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E1A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t v19;
  void **v20;
  __int128 *v21;
  __int128 *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  __int128 v33;
  unint64_t v34;
  uint64_t v35;
  __int128 *v36;
  void *__dst;
  unint64_t v38;
  void **v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  void *__p;
  char v44;
  uint64_t v45;
  void **v46[2];

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_1B0303130(a8);
    if (a7)
    {
      v19 = *a7;
      v20 = (void **)a7[1];
      while (v20 != (void **)v19)
      {
        v20 -= 4;
        v39 = v20;
        sub_1B02E9D04(&v39);
      }
      a7[1] = v19;
      sub_1B02F6620(&v39, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void ***, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v39, a9);
      if (!*a8)
      {
        sub_1B0303130(a8);
        v21 = (__int128 *)*a7;
        v22 = (__int128 *)a7[1];
        while (v22 != v21)
        {
          v22 -= 2;
          v36 = v22;
          sub_1B02E9D04((void ***)&v36);
        }
        a7[1] = (uint64_t)v21;
        sub_1B02E1DFC(a7, v41);
        if (v42)
          v24 = (uint64_t *)(v42 + 8);
        else
          v24 = 0;
        if (v41)
        {
          v25 = &v24[v41];
          do
          {
            v26 = *v24;
            v36 = 0;
            __dst = 0;
            v38 = 0;
            sub_1B02E1E8C((uint64_t *)&v36, *(int *)(v26 + 56));
            v27 = *(_QWORD *)(v26 + 64);
            if (v27)
              v28 = v27 + 8;
            else
              v28 = 0;
            v29 = *(int *)(v26 + 56);
            if ((_DWORD)v29)
            {
              v30 = (unint64_t)__dst;
              v31 = 8 * v29;
              do
              {
                v32 = *(_QWORD *)(*(_QWORD *)v28 + 48) & 0xFFFFFFFFFFFFFFFELL;
                if (v30 >= v38)
                {
                  v30 = sub_1B02EAF88((uint64_t *)&v36, (__int128 *)v32);
                }
                else
                {
                  if (*(char *)(v32 + 23) < 0)
                  {
                    sub_1B02EB0A8((_BYTE *)v30, *(void **)v32, *(_QWORD *)(v32 + 8));
                  }
                  else
                  {
                    v33 = *(_OWORD *)v32;
                    *(_QWORD *)(v30 + 16) = *(_QWORD *)(v32 + 16);
                    *(_OWORD *)v30 = v33;
                  }
                  v30 += 24;
                }
                __dst = (void *)v30;
                v28 += 8;
                v31 -= 8;
              }
              while (v31);
            }
            LODWORD(v46[0]) = *(_DWORD *)(v26 + 80);
            v34 = a7[1];
            if (v34 >= a7[2])
            {
              v35 = sub_1B02EBD28(a7, &v36, v46);
            }
            else
            {
              sub_1B02EBCB8((uint64_t)a7, &v36, (float *)v46);
              v35 = v34 + 32;
            }
            a7[1] = v35;
            v46[0] = (void **)&v36;
            sub_1B02E9D04(v46);
            ++v24;
          }
          while (v24 != v25);
        }
        sub_1B0303128(a8);
      }
      return (_QWORD *)sub_1B02F66D8(&v39);
    }
    else
    {
      LODWORD(v39) = 13;
      v23 = (_QWORD *)sub_1B02D685C((uint64_t)v40);
      sub_1B02D7994(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v40, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v40, (uint64_t)") [", 3);
      sub_1B02D7994(v40, (uint64_t)"pieces", 6);
      sub_1B02D7994(v40, (uint64_t)"] ", 2);
      sub_1B02D7994(v40, (uint64_t)"output container is null", 24);
      sub_1B02D4430((unsigned int *)&v39, (uint64_t)a8);
      v40[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v40 + *(_QWORD *)(v40[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v40[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v44 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v45);
    }
  }
  return result;
}

void sub_1B02E1DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1B02D44BC((uint64_t)va);
  _Unwind_Resume(a1);
}

void **sub_1B02E1DFC(uint64_t *a1, unint64_t a2)
{
  void **result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7[5];

  v4 = a1[2];
  result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_1B02D7758();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1B02EBAE0((uint64_t)result, a2);
    v7[1] = (char *)v7[0] + v5;
    v7[2] = (char *)v7[0] + v5;
    v7[3] = (char *)v7[0] + 32 * v6;
    sub_1B02EBA6C(a1, v7);
    return sub_1B02EBC38(v7);
  }
  return result;
}

void sub_1B02E1E78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBC38((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E1E8C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_1B02D7758();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1B02D776C(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 24 * v6;
    sub_1B02EA840(a1, v7);
    return sub_1B02EA9C8((uint64_t)v7);
  }
  return result;
}

void sub_1B02E1F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EA9C8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E1F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t *a8@<X8>, float a9@<S0>)
{
  _QWORD *result;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  int v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  int v41;
  void *__p;
  char *v43;
  char *v44;
  unsigned int v45;
  _QWORD v46[2];
  int v47;
  uint64_t v48;
  void *v49;
  char v50;
  uint64_t v51;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 88))(a8);
  if (!*a8)
  {
    sub_1B0303130(a8);
    if (a7)
    {
      sub_1B02D7870(a7);
      sub_1B02F6620(&v45, 0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned int *, float))(*(_QWORD *)a1 + 256))(a1, a2, a3, a4, a5, a6, &v45, a9);
      if (!*a8)
      {
        v39 = a8;
        sub_1B0303130(a8);
        sub_1B02D7870(a7);
        sub_1B02E232C(a7, v47);
        if (v48)
          v19 = (uint64_t *)(v48 + 8);
        else
          v19 = 0;
        if (v47)
        {
          v40 = &v19[v47];
          do
          {
            v20 = *v19;
            __p = 0;
            v43 = 0;
            v44 = 0;
            sub_1B02E23BC(&__p, *(int *)(v20 + 56));
            v21 = *(_QWORD *)(v20 + 64);
            if (v21)
              v22 = v21 + 8;
            else
              v22 = 0;
            v23 = *(int *)(v20 + 56);
            if ((_DWORD)v23)
            {
              v24 = v22 + 8 * v23;
              v25 = v43;
              do
              {
                v26 = *(_DWORD *)(*(_QWORD *)v22 + 64);
                if (v25 >= v44)
                {
                  v28 = (char *)__p;
                  v29 = (v25 - (_BYTE *)__p) >> 2;
                  v30 = v29 + 1;
                  if ((unint64_t)(v29 + 1) >> 62)
                    sub_1B02D7758();
                  v31 = v44 - (_BYTE *)__p;
                  if ((v44 - (_BYTE *)__p) >> 1 > v30)
                    v30 = v31 >> 1;
                  if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL)
                    v32 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v32 = v30;
                  if (v32)
                  {
                    v33 = (char *)sub_1B02D8648((uint64_t)&v44, v32);
                    v28 = (char *)__p;
                    v25 = v43;
                  }
                  else
                  {
                    v33 = 0;
                  }
                  v34 = &v33[4 * v29];
                  *(_DWORD *)v34 = v26;
                  v27 = v34 + 4;
                  while (v25 != v28)
                  {
                    v35 = *((_DWORD *)v25 - 1);
                    v25 -= 4;
                    *((_DWORD *)v34 - 1) = v35;
                    v34 -= 4;
                  }
                  __p = v34;
                  v43 = v27;
                  v44 = &v33[4 * v32];
                  if (v28)
                    operator delete(v28);
                }
                else
                {
                  *(_DWORD *)v25 = v26;
                  v27 = v25 + 4;
                }
                v43 = v27;
                v22 += 8;
                v25 = v27;
              }
              while (v22 != v24);
            }
            v41 = *(_DWORD *)(v20 + 80);
            v36 = a7[1];
            if (v36 >= a7[2])
            {
              v37 = sub_1B02EC0B8(a7, (uint64_t)&__p, &v41);
            }
            else
            {
              sub_1B02EC054((uint64_t)a7, (uint64_t)&__p, (float *)&v41);
              v37 = v36 + 32;
            }
            a7[1] = v37;
            if (__p)
            {
              v43 = (char *)__p;
              operator delete(__p);
            }
            ++v19;
          }
          while (v19 != v40);
        }
        sub_1B0303128(v39);
      }
      return (_QWORD *)sub_1B02F66D8(&v45);
    }
    else
    {
      v45 = 13;
      v38 = (_QWORD *)sub_1B02D685C((uint64_t)v46);
      sub_1B02D7994(v38, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v46, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v46, (uint64_t)") [", 3);
      sub_1B02D7994(v46, (uint64_t)"ids", 3);
      sub_1B02D7994(v46, (uint64_t)"] ", 2);
      sub_1B02D7994(v46, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v45, (uint64_t)a8);
      v46[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v46 + *(_QWORD *)(v46[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v46[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v50 < 0)
        operator delete(v49);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v51);
    }
  }
  return result;
}

void sub_1B02E22E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16)
{
  sub_1B02D44BC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E232C(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 5)
  {
    if (a2 >> 59)
      sub_1B02D7758();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = sub_1B02EBAE0(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 32 * v6;
    sub_1B02EBE34(a1, v7);
    return sub_1B02EBFC8((uint64_t)v7);
  }
  return result;
}

void sub_1B02E23A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02E23BC(void **a1, unint64_t a2)
{
  uint64_t v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (_BYTE *)*a1) >> 2)
  {
    if (a2 >> 62)
      sub_1B02D7758();
    v5 = (_BYTE *)a1[1] - (_BYTE *)*a1;
    v6 = (char *)sub_1B02D8648(v3, a2);
    v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    v9 = &v6[4 * v8];
    v10 = (char *)*a1;
    v11 = (char *)a1[1];
    v12 = v7;
    if (v11 != *a1)
    {
      v12 = v7;
      do
      {
        v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

_QWORD *sub_1B02E2450@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  unint64_t v12;
  char v13;
  size_t v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  char *v28;
  size_t v29;
  unsigned __int8 v30;
  unsigned __int8 v31;
  int *v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *p_dst;
  std::string::size_type size;
  int v40;
  std::string *v41;
  std::string::size_type v42;
  uint64_t v43;
  _QWORD *v44;
  int v45;
  uint64_t v46;
  _QWORD *v47;
  int v48;
  int v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  std::string *v59;
  int *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  int v67;
  uint64_t v68;
  _QWORD *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  _QWORD *v79;
  size_t v80;
  uint64_t v81;
  std::string *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  int v86;
  const std::string::value_type *v87;
  std::string::size_type v88;
  std::string *v89;
  __int128 v90;
  uint64_t v91;
  _QWORD *v92;
  _QWORD *result;
  uint64_t v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v110;
  int v111;
  uint64_t v112;
  char *__src;
  size_t __len;
  std::string __dst;
  void *__p[2];
  uint64_t v117;
  void *v118;
  char v119;
  uint64_t v120;

  v10 = *a6;
  v110 = a6[1];
  if (*a6 != v110)
  {
    v11 = a5;
    v12 = 0;
    v13 = 0;
    v112 = a7 + 48;
    while (1)
    {
      v14 = *(_QWORD *)(v10 + 8);
      if (!v14)
      {
        LODWORD(__p[0]) = 13;
        v97 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[1]);
        sub_1B02D7994(v97, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&__p[1], (uint64_t)") [", 3);
        sub_1B02D7994(&__p[1], (uint64_t)"!w.empty()", 10);
        sub_1B02D7994(&__p[1], (uint64_t)"] ", 2);
        sub_1B02D7994(&__p[1], (uint64_t)"Empty piece is not allowed.", 27);
        sub_1B02D4430((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v15 = *(unsigned __int8 **)v10;
      v16 = *(unsigned int *)(v10 + 16);
      v111 = (*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v16);
      if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v16))
      {
        v17 = *(int **)(a7 + 64);
        if (v17)
        {
          v18 = *(int *)(a7 + 56);
          v19 = *v17;
          if ((int)v18 < *v17)
          {
            *(_DWORD *)(a7 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_58:
            *(_DWORD *)(v20 + 40) |= 1u;
            sub_1B02DCB10(__p, v15, v14);
            v53 = *(_QWORD *)(v20 + 8);
            v54 = (_QWORD *)(v53 & 0xFFFFFFFFFFFFFFFELL);
            if ((v53 & 1) != 0)
              v54 = (_QWORD *)*v54;
            sub_1B0304260((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v54);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v55 = *(_DWORD *)(v20 + 40);
            *(_DWORD *)(v20 + 64) = v16;
            v56 = *(_QWORD *)(*v11 + 8 * v12);
            *(_DWORD *)(v20 + 68) = v56;
            *(_DWORD *)(v20 + 40) = v55 | 0x1C;
            goto LABEL_83;
          }
          if (v19 != *(_DWORD *)(a7 + 60))
          {
LABEL_57:
            *v17 = v19 + 1;
            v20 = sub_1B02F6D84(*(_QWORD *)(a7 + 48));
            v51 = *(_QWORD *)(a7 + 64);
            v52 = *(int *)(a7 + 56);
            *(_DWORD *)(a7 + 56) = v52 + 1;
            *(_QWORD *)(v51 + 8 * v52 + 8) = v20;
            goto LABEL_58;
          }
        }
        else
        {
          v19 = *(_DWORD *)(a7 + 60);
        }
        sub_1B0316A4C(v112, v19 + 1);
        v17 = *(int **)(a7 + 64);
        v19 = *v17;
        goto LABEL_57;
      }
      v21 = *v11;
      v22 = v11[1] - *v11;
      if (v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v98 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[1]);
        sub_1B02D7994(v98, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&__p[1], (uint64_t)") [", 3);
        sub_1B02D7994(&__p[1], (uint64_t)"(begin) < (norm_to_orig.size())", 31);
        sub_1B02D7994(&__p[1], (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v23 = v14 + v12;
      if (v14 + v12 >= v22 >> 3)
      {
        LODWORD(__p[0]) = 13;
        v99 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[1]);
        sub_1B02D7994(v99, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&__p[1], (uint64_t)") [", 3);
        sub_1B02D7994(&__p[1], (uint64_t)"(end) < (norm_to_orig.size())", 29);
        sub_1B02D7994(&__p[1], (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v24 = *(_QWORD *)(v21 + 8 * v12);
      if (v24 > a3)
      {
        LODWORD(__p[0]) = 13;
        v100 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[1]);
        sub_1B02D7994(v100, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&__p[1], (uint64_t)") [", 3);
        sub_1B02D7994(&__p[1], (uint64_t)"(orig_begin) <= (input.size())", 30);
        sub_1B02D7994(&__p[1], (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v25 = *(_QWORD *)(v21 + 8 * v23);
      if (v25 > a3)
      {
        LODWORD(__p[0]) = 13;
        v101 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[1]);
        sub_1B02D7994(v101, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&__p[1], (uint64_t)") [", 3);
        sub_1B02D7994(&__p[1], (uint64_t)"(orig_end) <= (input.size())", 28);
        sub_1B02D7994(&__p[1], (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      v26 = v25 - v24;
      if (v25 < v24)
      {
        LODWORD(__p[0]) = 13;
        v102 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[1]);
        sub_1B02D7994(v102, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&__p[1], (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&__p[1], (uint64_t)") [", 3);
        sub_1B02D7994(&__p[1], (uint64_t)"(orig_begin) <= (orig_end)", 26);
        sub_1B02D7994(&__p[1], (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)__p, (uint64_t)a8);
        goto LABEL_137;
      }
      if (a3 >= v24)
        v27 = v24;
      else
        v27 = a3;
      v28 = &a2[v27];
      v29 = a3 - v27;
      if (v29 < v26)
        v26 = v29;
      __src = v28;
      __len = v26;
      if (v111)
      {
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1[1] + 184))(a1[1]))
        {
          while (1)
          {
            v31 = *v15++;
            v30 = v31;
            v32 = *(int **)(a7 + 64);
            if (!v32)
              break;
            v33 = *(int *)(a7 + 56);
            v34 = *v32;
            if ((int)v33 >= *v32)
            {
              if (v34 == *(_DWORD *)(a7 + 60))
              {
LABEL_25:
                sub_1B0316A4C(v112, v34 + 1);
                v32 = *(int **)(a7 + 64);
                v34 = *v32;
              }
              *v32 = v34 + 1;
              v35 = sub_1B02F6D84(*(_QWORD *)(a7 + 48));
              v36 = *(_QWORD *)(a7 + 64);
              v37 = *(int *)(a7 + 56);
              *(_DWORD *)(a7 + 56) = v37 + 1;
              *(_QWORD *)(v36 + 8 * v37 + 8) = v35;
              goto LABEL_27;
            }
            *(_DWORD *)(a7 + 56) = v33 + 1;
            v35 = *(_QWORD *)&v32[2 * v33 + 2];
LABEL_27:
            sub_1B02D6064(v30, (uint64_t)&__dst);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              p_dst = &__dst;
            else
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              size = __dst.__r_.__value_.__l.__size_;
            v40 = (*(uint64_t (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)a1[1] + 112))(a1[1], p_dst, size);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v41 = &__dst;
            else
              v41 = (std::string *)__dst.__r_.__value_.__r.__words[0];
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v42 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
            else
              v42 = __dst.__r_.__value_.__l.__size_;
            *(_DWORD *)(v35 + 40) |= 1u;
            sub_1B02DCB10(__p, v41, v42);
            v43 = *(_QWORD *)(v35 + 8);
            v44 = (_QWORD *)(v43 & 0xFFFFFFFFFFFFFFFELL);
            if ((v43 & 1) != 0)
              v44 = (_QWORD *)*v44;
            sub_1B0304260((uint64_t *)(v35 + 48), (__int128 *)__p, (uint64_t)v44);
            if (SHIBYTE(v117) < 0)
              operator delete(__p[0]);
            v45 = *(_DWORD *)(v35 + 40);
            *(_DWORD *)(v35 + 40) = v45 | 4;
            *(_DWORD *)(v35 + 64) = v40;
            if (v14 == 1)
            {
              *(_DWORD *)(v35 + 40) = v45 | 6;
              sub_1B02DCB10(__p, __src, __len);
              v46 = *(_QWORD *)(v35 + 8);
              v47 = (_QWORD *)(v46 & 0xFFFFFFFFFFFFFFFELL);
              if ((v46 & 1) != 0)
                v47 = (_QWORD *)*v47;
              sub_1B0304260((uint64_t *)(v35 + 56), (__int128 *)__p, (uint64_t)v47);
              if (SHIBYTE(v117) < 0)
                operator delete(__p[0]);
              v48 = *(_DWORD *)(v35 + 40);
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v48 | 0x18;
              v50 = v25;
            }
            else
            {
              *(_DWORD *)(v35 + 68) = v24;
              v49 = v45 | 0x1C;
              v50 = v24;
            }
            *(_DWORD *)(v35 + 40) = v49;
            *(_DWORD *)(v35 + 72) = v50;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            if (!--v14)
            {
              v12 = v23;
              v11 = a5;
              goto LABEL_84;
            }
          }
          v34 = *(_DWORD *)(a7 + 60);
          goto LABEL_25;
        }
        if ((v13 & 1) != 0)
        {
          v57 = sub_1B02EA290(v112, *(_DWORD *)(a7 + 56) - 1);
          if (v14 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_141;
          v20 = v57;
          v58 = *(_QWORD *)(v57 + 48);
          v104 = (uint64_t *)(v57 + 48);
          if (v14 >= 0x17)
          {
            v71 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v14 | 7) != 0x17)
              v71 = v14 | 7;
            v103 = v71 + 1;
            v59 = (std::string *)operator new(v71 + 1);
            __dst.__r_.__value_.__l.__size_ = v14;
            __dst.__r_.__value_.__r.__words[2] = v103 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
            v59 = &__dst;
          }
          v72 = v58 & 0xFFFFFFFFFFFFFFFELL;
          memmove(v59, v15, v14);
          v59->__r_.__value_.__s.__data_[v14] = 0;
          v73 = *(char *)(v72 + 23);
          if (v73 >= 0)
            v74 = (const std::string::value_type *)v72;
          else
            v74 = *(const std::string::value_type **)v72;
          if (v73 >= 0)
            v75 = *(unsigned __int8 *)(v72 + 23);
          else
            v75 = *(_QWORD *)(v72 + 8);
          v76 = std::string::insert(&__dst, 0, v74, v75);
          v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
          v117 = v76->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v77;
          v76->__r_.__value_.__l.__size_ = 0;
          v76->__r_.__value_.__r.__words[2] = 0;
          v76->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 1u;
          v78 = *(_QWORD *)(v20 + 8);
          v79 = (_QWORD *)(v78 & 0xFFFFFFFFFFFFFFFELL);
          v80 = __len;
          if ((v78 & 1) != 0)
            v79 = (_QWORD *)*v79;
          sub_1B0304260(v104, (__int128 *)__p, (uint64_t)v79);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          if (__len > 0x7FFFFFFFFFFFFFF7)
LABEL_141:
            sub_1B02D78C4();
          v81 = *(_QWORD *)(v20 + 56);
          if (__len >= 0x17)
          {
            v83 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((__len | 7) != 0x17)
              v83 = __len | 7;
            v84 = v83 + 1;
            v82 = (std::string *)operator new(v83 + 1);
            v85 = v84 | 0x8000000000000000;
            v80 = __len;
            __dst.__r_.__value_.__l.__size_ = __len;
            __dst.__r_.__value_.__r.__words[2] = v85;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v82;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
            v82 = &__dst;
            if (!__len)
              goto LABEL_109;
          }
          memmove(v82, __src, v80);
LABEL_109:
          v82->__r_.__value_.__s.__data_[v80] = 0;
          v86 = *(char *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          if (v86 >= 0)
            v87 = (const std::string::value_type *)(v81 & 0xFFFFFFFFFFFFFFFELL);
          else
            v87 = *(const std::string::value_type **)(v81 & 0xFFFFFFFFFFFFFFFELL);
          if (v86 >= 0)
            v88 = *(unsigned __int8 *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 23);
          else
            v88 = *(_QWORD *)((v81 & 0xFFFFFFFFFFFFFFFELL) + 8);
          v89 = std::string::insert(&__dst, 0, v87, v88);
          v90 = *(_OWORD *)&v89->__r_.__value_.__l.__data_;
          v117 = v89->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = v90;
          v89->__r_.__value_.__l.__size_ = 0;
          v89->__r_.__value_.__r.__words[2] = 0;
          v89->__r_.__value_.__r.__words[0] = 0;
          *(_DWORD *)(v20 + 40) |= 2u;
          v91 = *(_QWORD *)(v20 + 8);
          v92 = (_QWORD *)(v91 & 0xFFFFFFFFFFFFFFFELL);
          v11 = a5;
          if ((v91 & 1) != 0)
            v92 = (_QWORD *)*v92;
          sub_1B0304260((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v92);
          if (SHIBYTE(v117) < 0)
            operator delete(__p[0]);
          if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst.__r_.__value_.__l.__data_);
          *(_DWORD *)(v20 + 40) |= 0x10u;
          LODWORD(v56) = v25;
          v12 = v23;
          goto LABEL_83;
        }
      }
      v60 = *(int **)(a7 + 64);
      if (!v60)
        break;
      v61 = *(int *)(a7 + 56);
      v62 = *v60;
      if ((int)v61 >= *v60)
      {
        if (v62 == *(_DWORD *)(a7 + 60))
        {
LABEL_72:
          sub_1B0316A4C(v112, v62 + 1);
          v60 = *(int **)(a7 + 64);
          v62 = *v60;
        }
        *v60 = v62 + 1;
        v20 = sub_1B02F6D84(*(_QWORD *)(a7 + 48));
        v63 = *(_QWORD *)(a7 + 64);
        v64 = *(int *)(a7 + 56);
        *(_DWORD *)(a7 + 56) = v64 + 1;
        *(_QWORD *)(v63 + 8 * v64 + 8) = v20;
        goto LABEL_74;
      }
      *(_DWORD *)(a7 + 56) = v61 + 1;
      v20 = *(_QWORD *)&v60[2 * v61 + 2];
LABEL_74:
      *(_DWORD *)(v20 + 40) |= 1u;
      sub_1B02DCB10(__p, v15, v14);
      v65 = *(_QWORD *)(v20 + 8);
      v66 = (_QWORD *)(v65 & 0xFFFFFFFFFFFFFFFELL);
      if ((v65 & 1) != 0)
        v66 = (_QWORD *)*v66;
      sub_1B0304260((uint64_t *)(v20 + 48), (__int128 *)__p, (uint64_t)v66);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v67 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 64) = v16;
      *(_DWORD *)(v20 + 40) = v67 | 6;
      sub_1B02DCB10(__p, __src, __len);
      v68 = *(_QWORD *)(v20 + 8);
      v69 = (_QWORD *)(v68 & 0xFFFFFFFFFFFFFFFELL);
      if ((v68 & 1) != 0)
        v69 = (_QWORD *)*v69;
      sub_1B0304260((uint64_t *)(v20 + 56), (__int128 *)__p, (uint64_t)v69);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      v70 = *(_DWORD *)(v20 + 40);
      *(_DWORD *)(v20 + 68) = v24;
      *(_DWORD *)(v20 + 40) = v70 | 0x18;
      LODWORD(v56) = v25;
      v12 = v23;
      v11 = a5;
LABEL_83:
      *(_DWORD *)(v20 + 72) = v56;
      v23 = v12;
LABEL_84:
      v10 += 24;
      v13 = v111;
      if (v10 == v110)
        goto LABEL_123;
    }
    v62 = *(_DWORD *)(a7 + 60);
    goto LABEL_72;
  }
  v23 = 0;
LABEL_123:
  if (v23 == a4)
  {
    result = sub_1B02E31C8(a1, (uint64_t)(a1 + 5), a7, a8);
    if (!*a8)
    {
      sub_1B0303130(a8);
      *(_DWORD *)(a7 + 40) |= 1u;
      sub_1B02DCB10(__p, a2, a3);
      v94 = *(_QWORD *)(a7 + 8);
      v95 = (_QWORD *)(v94 & 0xFFFFFFFFFFFFFFFELL);
      if ((v94 & 1) != 0)
        v95 = (_QWORD *)*v95;
      sub_1B0304260((uint64_t *)(a7 + 72), (__int128 *)__p, (uint64_t)v95);
      if (SHIBYTE(v117) < 0)
        operator delete(__p[0]);
      return sub_1B0303128(a8);
    }
    return result;
  }
  LODWORD(__p[0]) = 13;
  v96 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[1]);
  sub_1B02D7994(v96, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
  sub_1B02D7994(&__p[1], (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_1B02D7994(&__p[1], (uint64_t)") [", 3);
  sub_1B02D7994(&__p[1], (uint64_t)"(consumed) == (normalized.size())", 33);
  sub_1B02D7994(&__p[1], (uint64_t)"] ", 2);
  sub_1B02D7994(&__p[1], (uint64_t)"all normalized characters are not consumed.", 43);
  sub_1B02D4430((unsigned int *)__p, (uint64_t)a8);
LABEL_137:
  __p[1] = *(void **)MEMORY[0x1E0DE4F60];
  *(void **)((char *)&__p[1] + *((_QWORD *)__p[1] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
  v117 = MEMORY[0x1E0DE4FB8] + 16;
  if (v119 < 0)
    operator delete(v118);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return (_QWORD *)MEMORY[0x1B5E07C60](&v120);
}

void sub_1B02E311C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02E31C8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  BOOL v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  int *v18;
  int v19;
  int v20;
  int v21;
  int *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  char *v28;
  size_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::string *v38;
  uint64_t v39;
  const char *v40;
  size_t v41;
  int v42;
  char *v43;
  size_t v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  const char *v49;
  size_t v50;
  int v51;
  char *v52;
  size_t v53;
  uint64_t v54;
  _QWORD *v55;
  char v57;
  std::string __p[2];

  v6 = *(_DWORD **)a2;
  v5 = *(_DWORD **)(a2 + 8);
  if (*(_DWORD **)a2 != v5)
  {
    v9 = a3 + 48;
    while (1)
    {
      switch(*v6)
      {
        case 0:
          v10 = *(_QWORD *)(a3 + 64);
          if (v10)
            v11 = v10 + 8;
          else
            v11 = 0;
          v12 = *(int *)(a3 + 56);
          v13 = (uint64_t *)(v11 + 8 * v12 - 8);
          if ((_DWORD)v12)
            v14 = (unint64_t)v13 > v11;
          else
            v14 = 0;
          if (v14)
          {
            v15 = v11 + 8;
            do
            {
              v16 = *v13--;
              sub_1B02EC85C(*(_QWORD *)(v15 - 8), v16);
              v17 = v15 >= (unint64_t)v13;
              v15 += 8;
            }
            while (!v17);
          }
          goto LABEL_52;
        case 1:
          v18 = *(int **)(a3 + 64);
          if (!v18)
          {
            v20 = *(_DWORD *)(a3 + 60);
LABEL_34:
            sub_1B0316A4C(v9, v20 + 1);
            v18 = *(int **)(a3 + 64);
            v20 = *v18;
            goto LABEL_35;
          }
          v19 = *(_DWORD *)(a3 + 56);
          v20 = *v18;
          if (v19 < *v18)
          {
            v21 = v19 + 1;
            *(_DWORD *)(a3 + 56) = v19 + 1;
            goto LABEL_36;
          }
          if (v20 == *(_DWORD *)(a3 + 60))
            goto LABEL_34;
LABEL_35:
          *v18 = v20 + 1;
          v32 = sub_1B02F6D84(*(_QWORD *)(a3 + 48));
          v33 = *(_QWORD *)(a3 + 64);
          v34 = *(int *)(a3 + 56);
          v21 = v34 + 1;
          *(_DWORD *)(a3 + 56) = v34 + 1;
          *(_QWORD *)(v33 + 8 * v34 + 8) = v32;
LABEL_36:
          if (v21 > 1)
          {
            v35 = v21;
            do
            {
              v36 = *(_QWORD *)(a3 + 64) + 8;
              v37 = *(_QWORD *)(v36 + 8 * (v35 - 2));
              *(_QWORD *)(v36 + 8 * (v35 - 2)) = *(_QWORD *)(v36 + 8 * (v35 - 1));
              *(_QWORD *)(v36 + 8 * (v35 - 1)) = v37;
              v14 = v35-- > 2;
            }
            while (v14);
          }
          if (v21 < 1)
          {
            sub_1B0305328((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
            v38 = sub_1B0305340(__p, "CHECK failed: (index) < (current_size_): ");
            sub_1B0305470((uint64_t)&v57, (const char **)&v38->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)__p);
          }
          v39 = *(_QWORD *)(*(_QWORD *)(a3 + 64) + 8);
          v40 = sub_1B02D46F8(a1[1]);
          v41 = strlen(v40);
          v42 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v40, v41);
          *(_DWORD *)(v39 + 40) |= 4u;
          *(_DWORD *)(v39 + 64) = v42;
          v43 = (char *)sub_1B02D46F8(a1[1]);
          sub_1B02D46F8(a1[1]);
          *(_DWORD *)(v39 + 40) |= 1u;
          sub_1B02DCB10(__p, v43, v44);
          v45 = *(_QWORD *)(v39 + 8);
          v46 = (_QWORD *)(v45 & 0xFFFFFFFFFFFFFFFELL);
          if ((v45 & 1) != 0)
            v46 = (_QWORD *)*v46;
          sub_1B0304260((uint64_t *)(v39 + 48), (__int128 *)__p, (uint64_t)v46);
          goto LABEL_50;
        case 2:
          v22 = *(int **)(a3 + 64);
          if (!v22)
          {
            v24 = *(_DWORD *)(a3 + 60);
LABEL_45:
            sub_1B0316A4C(v9, v24 + 1);
            v22 = *(int **)(a3 + 64);
            v24 = *v22;
            goto LABEL_46;
          }
          v23 = *(int *)(a3 + 56);
          v24 = *v22;
          if ((int)v23 < *v22)
          {
            *(_DWORD *)(a3 + 56) = v23 + 1;
            v25 = *(_QWORD *)&v22[2 * v23 + 2];
            goto LABEL_47;
          }
          if (v24 == *(_DWORD *)(a3 + 60))
            goto LABEL_45;
LABEL_46:
          *v22 = v24 + 1;
          v25 = sub_1B02F6D84(*(_QWORD *)(a3 + 48));
          v47 = *(_QWORD *)(a3 + 64);
          v48 = *(int *)(a3 + 56);
          *(_DWORD *)(a3 + 56) = v48 + 1;
          *(_QWORD *)(v47 + 8 * v48 + 8) = v25;
LABEL_47:
          v49 = sub_1B02D4748(a1[1]);
          v50 = strlen(v49);
          v51 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v49, v50);
          *(_DWORD *)(v25 + 40) |= 4u;
          *(_DWORD *)(v25 + 64) = v51;
          v52 = (char *)sub_1B02D4748(a1[1]);
          sub_1B02D4748(a1[1]);
          *(_DWORD *)(v25 + 40) |= 1u;
          sub_1B02DCB10(__p, v52, v53);
          v54 = *(_QWORD *)(v25 + 8);
          v55 = (_QWORD *)(v54 & 0xFFFFFFFFFFFFFFFELL);
          if ((v54 & 1) != 0)
            v55 = (_QWORD *)*v55;
          sub_1B0304260((uint64_t *)(v25 + 48), (__int128 *)__p, (uint64_t)v55);
LABEL_50:
          if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_52:
          if (++v6 == v5)
            return sub_1B0303128(a4);
          break;
        case 3:
          if (*(int *)(a3 + 56) >= 1)
          {
            v26 = 0;
            do
            {
              v27 = sub_1B02EA290(v9, v26);
              if ((*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 528))(a1, *(unsigned int *)(v27 + 64)))
              {
                v28 = (char *)sub_1B02D46A8(a1[1]);
                sub_1B02D46A8(a1[1]);
                *(_DWORD *)(v27 + 40) |= 1u;
                sub_1B02DCB10(__p, v28, v29);
                v30 = *(_QWORD *)(v27 + 8);
                v31 = (_QWORD *)(v30 & 0xFFFFFFFFFFFFFFFELL);
                if ((v30 & 1) != 0)
                  v31 = (_QWORD *)*v31;
                sub_1B0304260((uint64_t *)(v27 + 48), (__int128 *)__p, (uint64_t)v31);
                if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p[0].__r_.__value_.__l.__data_);
              }
              ++v26;
            }
            while (v26 < *(_DWORD *)(a3 + 56));
          }
          goto LABEL_52;
        default:
          return (_QWORD *)sub_1B030328C(a4, 13, "unknown extra_option type.", 26);
      }
    }
  }
  return sub_1B0303128(a4);
}

void sub_1B02E3610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  sub_1B0305478((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void sub_1B02E3648(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  void *__p[3];
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  char v21;
  uint64_t v22;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (!*a5)
  {
    sub_1B0303130(a5);
    if (a4)
    {
      sub_1B02F5CB8(a4);
      v17 = 0;
      v18 = 0;
      v19 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v17, &v14);
      if (!*a5)
      {
        sub_1B0303130(a5);
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(__p);
        if (v19 >= 0)
          v10 = HIBYTE(v19);
        else
          v10 = v18;
        sub_1B02E2450(a1, a2, a3, v10, (uint64_t *)&v14, (uint64_t *)__p, a4, a5);
        if (!*a5)
        {
          v11 = sub_1B0303130(a5);
          sub_1B0303128(v11);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      if (v14)
      {
        v15 = v14;
        operator delete(v14);
      }
      if (SHIBYTE(v19) < 0)
        operator delete(v17);
    }
    else
    {
      LODWORD(v17) = 13;
      v12 = (_QWORD *)sub_1B02D685C((uint64_t)&v18);
      sub_1B02D7994(v12, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(&v18, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(&v18, (uint64_t)") [", 3);
      sub_1B02D7994(&v18, (uint64_t)"spt", 3);
      sub_1B02D7994(&v18, (uint64_t)"] ", 2);
      sub_1B02D7994(&v18, (uint64_t)"output proto is null", 20);
      sub_1B02D4430((unsigned int *)&v17, (uint64_t)a5);
      v18 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v18 + *(_QWORD *)(v18 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v19 = MEMORY[0x1E0DE4FB8] + 16;
      if (v21 < 0)
        operator delete(v20);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B5E07C60](&v22);
    }
  }
}

void sub_1B02E38C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1B02E391C(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  int *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *__p;
  char v33;
  _BYTE v34[152];

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a5);
  if (*a5)
    return;
  sub_1B0303130(a5);
  if (a4)
  {
    sub_1B02F6700(a4);
    v26 = 0;
    v27 = 0;
    v28 = 0;
    v23 = 0;
    v24 = 0;
    v25 = 0;
    (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v26, &v23);
    if (!*a5)
    {
      sub_1B0303130(a5);
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]) & 1) != 0)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v21);
        v10 = v21;
        v11 = v22;
        if (v21 != v22)
        {
          while (1)
          {
            v12 = *(int **)(a4 + 32);
            if (!v12)
              break;
            v13 = *(int *)(a4 + 24);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a4 + 28))
              {
LABEL_12:
                sub_1B0316A4C(a4 + 16, v14 + 1);
                v12 = *(int **)(a4 + 32);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_1B02F6E38(*(_QWORD *)(a4 + 16));
              v16 = *(_QWORD *)(a4 + 32);
              v17 = *(int *)(a4 + 24);
              *(_DWORD *)(a4 + 24) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              goto LABEL_14;
            }
            *(_DWORD *)(a4 + 24) = v13 + 1;
            v15 = *(_QWORD *)&v12[2 * v13 + 2];
LABEL_14:
            v18 = *(_DWORD *)(v10 + 24);
            *(_DWORD *)(v15 + 40) |= 2u;
            *(_DWORD *)(v15 + 80) = v18;
            if (v28 >= 0)
              v19 = HIBYTE(v28);
            else
              v19 = v27;
            sub_1B02E2450(a1, a2, a3, v19, (uint64_t *)&v23, (uint64_t *)v10, v15, a5);
            if (*a5)
              goto LABEL_29;
            sub_1B0303130(a5);
            v10 += 32;
            if (v10 == v11)
            {
              sub_1B0303128(a5);
              goto LABEL_29;
            }
          }
          v14 = *(_DWORD *)(a4 + 28);
          goto LABEL_12;
        }
        LODWORD(v29) = 13;
        sub_1B02D685C((uint64_t)&v30);
        sub_1B02D7994(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&v30, (uint64_t)") [", 3);
        sub_1B02D7994(&v30, (uint64_t)"!nbests.empty()", 15);
        sub_1B02D7994(&v30, (uint64_t)"] ", 2);
        sub_1B02D7994(&v30, (uint64_t)"NBestEncode returns empty result.", 33);
        sub_1B02D4430((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B5E07C60](v34);
LABEL_29:
        v29 = (void **)&v21;
        sub_1B02D7830(&v29);
      }
      else
      {
        LODWORD(v29) = 13;
        sub_1B02D685C((uint64_t)&v30);
        sub_1B02D7994(&v30, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(&v30, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(&v30, (uint64_t)") [", 3);
        sub_1B02D7994(&v30, (uint64_t)"model_->IsNBestEncodeAvailable()", 32);
        sub_1B02D7994(&v30, (uint64_t)"] ", 2);
        sub_1B02D7994(&v30, (uint64_t)"NBestEncode is not available for the current model.", 51);
        sub_1B02D4430((unsigned int *)&v29, (uint64_t)a5);
        v30 = *MEMORY[0x1E0DE4F60];
        *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
        v31 = MEMORY[0x1E0DE4FB8] + 16;
        if (v33 < 0)
          operator delete(__p);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B5E07C60](v34);
      }
    }
    if (v23)
    {
      v24 = v23;
      operator delete(v23);
    }
    if (SHIBYTE(v28) < 0)
      operator delete(v26);
  }
  else
  {
    LODWORD(v29) = 13;
    v20 = (_QWORD *)sub_1B02D685C((uint64_t)&v30);
    sub_1B02D7994(v20, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(&v30, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(&v30, (uint64_t)") [", 3);
    sub_1B02D7994(&v30, (uint64_t)"nbest_spt", 9);
    sub_1B02D7994(&v30, (uint64_t)"] ", 2);
    sub_1B02D7994(&v30, (uint64_t)"output proto is null", 20);
    sub_1B02D4430((unsigned int *)&v29, (uint64_t)a5);
    v30 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v30 + *(_QWORD *)(v30 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v31 = MEMORY[0x1E0DE4FB8] + 16;
    if (v33 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](v34);
  }
}

void sub_1B02E3E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_1B02D7830((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_1B02E3F1C(uint64_t *a1@<X0>, char *a2@<X1>, size_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t *a6@<X8>, float a7@<S0>)
{
  _QWORD *v14;
  _QWORD *v15;
  char v16;
  char v17;
  uint64_t v18;
  float *v19;
  uint64_t v20;
  float *v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  void *v29[3];
  uint64_t v30;
  uint64_t v31;
  void *__p;
  void *v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  float *v39[11];
  char v40;
  uint64_t v41;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a6);
  if (*a6)
    return;
  sub_1B0303130(a6);
  if (a5)
  {
    sub_1B02F5CB8(a5);
    if (a4 < 513)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      __p = 0;
      v33 = 0;
      v34 = 0;
      (*(void (**)(uint64_t, char *, size_t, void **, void **))(*(_QWORD *)a1[2] + 32))(a1[2], a2, a3, &v35, &__p);
      if (*a6)
      {
LABEL_5:
        if (__p)
        {
          v33 = __p;
          operator delete(__p);
        }
        if (SHIBYTE(v37) < 0)
          operator delete(v35);
        return;
      }
      sub_1B0303130(a6);
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 88))(a1[1]);
      if (a4 >= 0)
        v17 = v16;
      else
        v17 = 0;
      if ((v17 & 1) != 0)
      {
        if (a4 > 1)
        {
          (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1[1] + 48))(&v30);
          if (v30 == v31)
          {
            LODWORD(v38) = 13;
            sub_1B02D685C((uint64_t)v39);
            sub_1B02D7994(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_1B02D7994(v39, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_1B02D7994(v39, (uint64_t)") [", 3);
            sub_1B02D7994(v39, (uint64_t)"!nbests.empty()", 15);
            sub_1B02D7994(v39, (uint64_t)"] ", 2);
            sub_1B02D7994(v39, (uint64_t)"NBestEncode returns empty result.", 33);
            sub_1B02D4430((unsigned int *)&v38, (uint64_t)a6);
            sub_1B02D44BC((uint64_t)&v38);
            v38 = &v30;
            sub_1B02D7830((void ***)&v38);
            goto LABEL_5;
          }
          LODWORD(v29[0]) = 0;
          sub_1B02EC1B8(&v38, (v31 - v30) >> 5, v29);
          if (v31 != v30)
          {
            v19 = (float *)v38;
            if ((unint64_t)((v31 - v30) >> 5) <= 1)
              v20 = 1;
            else
              v20 = (v31 - v30) >> 5;
            v21 = (float *)(v30 + 24);
            do
            {
              v22 = *v21;
              v21 += 8;
              *v19++ = expf(v22 * a7);
              --v20;
            }
            while (v20);
          }
          v23 = sub_1B030154C();
          sub_1B02EC238((uint64_t)v29, (float *)v38, v39[0]);
          v24 = HIBYTE(v37);
          v25 = v36;
          v26 = sub_1B02EC564((uint64_t)v29, v23, (double **)v29);
          if ((v24 & 0x80u) == 0)
            v27 = v24;
          else
            v27 = v25;
          sub_1B02E2450(a1, a2, a3, v27, (uint64_t *)&__p, (uint64_t *)(v30 + 32 * v26), a5, a6);
          v28 = *a6;
          if (!*a6)
            sub_1B0303130(a6);
          if (v29[0])
          {
            v29[1] = v29[0];
            operator delete(v29[0]);
          }
          if (v38)
          {
            v39[0] = (float *)v38;
            operator delete(v38);
          }
          v38 = &v30;
          sub_1B02D7830((void ***)&v38);
          if (v28)
            goto LABEL_5;
          goto LABEL_51;
        }
        (*(void (**)(void **__return_ptr))(*(_QWORD *)a1[1] + 40))(&v38);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[1] + 80))(a1[1]) & 1) == 0)
        {
          LODWORD(v38) = 13;
          sub_1B02D685C((uint64_t)v39);
          sub_1B02D7994(v39, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
          sub_1B02D7994(v39, (uint64_t)"(", 1);
          std::ostream::operator<<();
          sub_1B02D7994(v39, (uint64_t)") [", 3);
          sub_1B02D7994(v39, (uint64_t)"model_->IsSampleEncodeAvailable()", 33);
          sub_1B02D7994(v39, (uint64_t)"] ", 2);
          sub_1B02D7994(v39, (uint64_t)"SampleEncode is not available for the current model.", 52);
          sub_1B02D4430((unsigned int *)&v38, (uint64_t)a6);
          sub_1B02D44BC((uint64_t)&v38);
          goto LABEL_5;
        }
        (*(void (**)(void **__return_ptr, float))(*(_QWORD *)a1[1] + 56))(&v38, a7);
        if (v37 >= 0)
          v18 = HIBYTE(v37);
        else
          v18 = v36;
      }
      sub_1B02E2450(a1, a2, a3, v18, (uint64_t *)&__p, (uint64_t *)&v38, a5, a6);
      if (*a6)
      {
        if (v38)
        {
          v39[0] = (float *)v38;
          operator delete(v38);
        }
        goto LABEL_5;
      }
      sub_1B0303130(a6);
      if (v38)
      {
        v39[0] = (float *)v38;
        operator delete(v38);
      }
LABEL_51:
      sub_1B0303128(a6);
      goto LABEL_5;
    }
    LODWORD(v38) = 13;
    v15 = (_QWORD *)sub_1B02D685C((uint64_t)v39);
    sub_1B02D7994(v15, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v39, (uint64_t)") [", 3);
    sub_1B02D7994(v39, (uint64_t)"(nbest_size) <= (512)", 21);
    sub_1B02D7994(v39, (uint64_t)"] ", 2);
    sub_1B02D7994(v39, (uint64_t)"nbest_size must be nbest_size <= 512", 36);
    sub_1B02D4430((unsigned int *)&v38, (uint64_t)a6);
  }
  else
  {
    LODWORD(v38) = 13;
    v14 = (_QWORD *)sub_1B02D685C((uint64_t)v39);
    sub_1B02D7994(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v39, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v39, (uint64_t)") [", 3);
    sub_1B02D7994(v39, (uint64_t)"spt", 3);
    sub_1B02D7994(v39, (uint64_t)"] ", 2);
    sub_1B02D7994(v39, (uint64_t)"output proto is null", 20);
    sub_1B02D4430((unsigned int *)&v38, (uint64_t)a6);
  }
  v39[0] = *(float **)MEMORY[0x1E0DE4F60];
  *(float **)((char *)v39 + *((_QWORD *)v39[0] - 3)) = *(float **)(MEMORY[0x1E0DE4F60] + 24);
  v39[1] = (float *)(MEMORY[0x1E0DE4FB8] + 16);
  if (v40 < 0)
    operator delete(v39[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](&v41);
}

void sub_1B02E45D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char *a24,uint64_t a25)
{
  a24 = &a12;
  sub_1B02D7830((void ***)&a24);
  if (__p)
  {
    a16 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

void sub_1B02E46C4(uint64_t a1@<X0>, char *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X6>, uint64_t *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void **v31;
  uint64_t v32;
  uint64_t v33;
  void *__p;
  char v35;
  _BYTE v36[152];

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v28 = 0;
    v29 = 0;
    v30 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    (*(void (**)(_QWORD, char *, size_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v28, &v25);
    if (!*a5)
    {
      sub_1B0303130(a5);
      (*(void (**)(uint64_t *__return_ptr, float))(**(_QWORD **)(a1 + 8) + 64))(&v23, a6);
      v12 = v23;
      v13 = v24;
      if (v23 != v24)
      {
        while (1)
        {
          v14 = *(int **)(a4 + 32);
          if (!v14)
            break;
          v15 = *(int *)(a4 + 24);
          v16 = *v14;
          if ((int)v15 >= *v14)
          {
            if (v16 == *(_DWORD *)(a4 + 28))
            {
LABEL_9:
              sub_1B0316A4C(a4 + 16, v16 + 1);
              v14 = *(int **)(a4 + 32);
              v16 = *v14;
            }
            *v14 = v16 + 1;
            v17 = sub_1B02F6E38(*(_QWORD *)(a4 + 16));
            v18 = *(_QWORD *)(a4 + 32);
            v19 = *(int *)(a4 + 24);
            *(_DWORD *)(a4 + 24) = v19 + 1;
            *(_QWORD *)(v18 + 8 * v19 + 8) = v17;
            goto LABEL_11;
          }
          *(_DWORD *)(a4 + 24) = v15 + 1;
          v17 = *(_QWORD *)&v14[2 * v15 + 2];
LABEL_11:
          v20 = *(_DWORD *)(v12 + 24);
          *(_DWORD *)(v17 + 40) |= 2u;
          *(_DWORD *)(v17 + 80) = v20;
          if (v30 >= 0)
            v21 = HIBYTE(v30);
          else
            v21 = v29;
          sub_1B02E2450((uint64_t *)a1, a2, a3, v21, (uint64_t *)&v25, (uint64_t *)v12, v17, a5);
          if (*a5)
            goto LABEL_23;
          sub_1B0303130(a5);
          v12 += 32;
          if (v12 == v13)
          {
            sub_1B0303128(a5);
            goto LABEL_23;
          }
        }
        v16 = *(_DWORD *)(a4 + 28);
        goto LABEL_9;
      }
      LODWORD(v31) = 13;
      sub_1B02D685C((uint64_t)&v32);
      sub_1B02D7994(&v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(&v32, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(&v32, (uint64_t)") [", 3);
      sub_1B02D7994(&v32, (uint64_t)"!results.empty()", 16);
      sub_1B02D7994(&v32, (uint64_t)"] ", 2);
      sub_1B02D7994(&v32, (uint64_t)"SampleEncodeAndScore returns empty result.", 42);
      sub_1B02D4430((unsigned int *)&v31, (uint64_t)a5);
      v32 = *MEMORY[0x1E0DE4F60];
      *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v33 = MEMORY[0x1E0DE4FB8] + 16;
      if (v35 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B5E07C60](v36);
LABEL_23:
      v31 = (void **)&v23;
      sub_1B02D7830(&v31);
    }
    if (v25)
    {
      v26 = v25;
      operator delete(v25);
    }
    if (SHIBYTE(v30) < 0)
      operator delete(v28);
  }
  else
  {
    LODWORD(v31) = 13;
    v22 = (_QWORD *)sub_1B02D685C((uint64_t)&v32);
    sub_1B02D7994(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(&v32, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(&v32, (uint64_t)") [", 3);
    sub_1B02D7994(&v32, (uint64_t)"model_->IsSampleEncodeAndScoreAvailable()", 41);
    sub_1B02D7994(&v32, (uint64_t)"] ", 2);
    sub_1B02D7994(&v32, (uint64_t)"SampleEncodeAndScore is not available for the current model.", 60);
    sub_1B02D4430((unsigned int *)&v31, (uint64_t)a5);
    v32 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v32 + *(_QWORD *)(v32 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v33 = MEMORY[0x1E0DE4FB8] + 16;
    if (v35 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](v36);
  }
}

void sub_1B02E4B14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char *a22)
{
  a22 = &a10;
  sub_1B02D7830((void ***)&a22);
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_1B02E4B8C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, float *a4@<X3>, uint64_t *a5@<X8>, float a6@<S0>)
{
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  void *__p;
  void *v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  char v22;
  uint64_t v23;

  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8)) & 1) != 0)
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    __p = 0;
    v16 = 0;
    v17 = 0;
    (*(void (**)(_QWORD, uint64_t, uint64_t, void **, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, &v18, &__p);
    if (!*a5)
    {
      sub_1B0303130(a5);
      if (v20 >= 0)
        v12 = &v18;
      else
        v12 = v18;
      if (v20 >= 0)
        v13 = HIBYTE(v20);
      else
        v13 = v19;
      *a4 = (*(float (**)(_QWORD, void *, uint64_t, float))(**(_QWORD **)(a1 + 8) + 72))(*(_QWORD *)(a1 + 8), v12, v13, a6);
      sub_1B0303128(a5);
    }
    if (__p)
    {
      v16 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v18);
  }
  else
  {
    LODWORD(v18) = 13;
    v14 = (_QWORD *)sub_1B02D685C((uint64_t)&v19);
    sub_1B02D7994(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(&v19, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(&v19, (uint64_t)") [", 3);
    sub_1B02D7994(&v19, (uint64_t)"model_->IsCalculateEntropyAvailable()", 37);
    sub_1B02D7994(&v19, (uint64_t)"] ", 2);
    sub_1B02D7994(&v19, (uint64_t)"CalculateEntropy is not available for the current model.", 56);
    sub_1B02D4430((unsigned int *)&v18, (uint64_t)a5);
    v19 = *MEMORY[0x1E0DE4F60];
    *(uint64_t *)((char *)&v19 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v20 = MEMORY[0x1E0DE4FB8] + 16;
    if (v22 < 0)
      operator delete(v21);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](&v23);
  }
}

void sub_1B02E4D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (__p)
    operator delete(__p);
  if (a18 < 0)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

void sub_1B02E4DDC(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  void *__p[3];

  sub_1B02E0350(a2, __p);
  (*(void (**)(uint64_t, void **, uint64_t))(*(_QWORD *)a1 + 272))(a1, __p, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B02E4E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02E4E64(uint64_t *a1@<X0>, uint64_t **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  char *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  _BOOL4 v28;
  int v29;
  int v30;
  char v31;
  uint64_t v32;
  unint64_t v33;
  size_t v34;
  unsigned __int8 *v35;
  uint64_t v36;
  const void *v37;
  uint64_t v38;
  __int128 *p_dst;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  size_t v47;
  _BOOL4 v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t *v55;
  __int128 v56;
  void *__p[2];
  uint64_t v58;
  _QWORD v59[2];
  _QWORD *v60[2];
  uint64_t *v61;
  __int128 v62;
  uint64_t v63;
  BOOL v64;
  void *v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  void *v70;
  _QWORD *v71;
  __int128 __dst;
  unint64_t v73;

  v4 = a3;
  v68 = a3;
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 88))(a4);
  if (*a4)
    return;
  sub_1B0303130(a4);
  if (v4)
  {
    sub_1B02F5CB8(v4);
    v8 = a1[4];
    if (v8 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8))
      v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 24))(a1[4]);
    else
      v9 = (char *)&unk_1B03AEE85;
    v10 = *a2;
    v11 = a2[1];
    if (*a2 != v11)
    {
      while (1)
      {
        v12 = *v10;
        v13 = v10[1];
        v14 = v68;
        v15 = *(int **)(v68 + 64);
        if (!v15)
          break;
        v16 = *(int *)(v68 + 56);
        v17 = *v15;
        if ((int)v16 >= *v15)
        {
          if (v17 == *(_DWORD *)(v68 + 60))
          {
LABEL_14:
            sub_1B0316A4C(v68 + 48, v17 + 1);
            v15 = *(int **)(v68 + 64);
            v17 = *v15;
          }
          *v15 = v17 + 1;
          v18 = sub_1B02F6D84(*(_QWORD *)(v14 + 48));
          v19 = *(_QWORD *)(v14 + 64);
          v20 = *(int *)(v14 + 56);
          *(_DWORD *)(v14 + 56) = v20 + 1;
          *(_QWORD *)(v19 + 8 * v20 + 8) = v18;
          goto LABEL_16;
        }
        *(_DWORD *)(v68 + 56) = v16 + 1;
        v18 = *(_QWORD *)&v15[2 * v16 + 2];
LABEL_16:
        *(_DWORD *)(v18 + 40) |= 1u;
        v21 = *(_QWORD *)(v18 + 8);
        v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
        if ((v21 & 1) != 0)
          v22 = (_QWORD *)*v22;
        v23 = sub_1B0304284((uint64_t *)(v18 + 48), (uint64_t)v22);
        MEMORY[0x1B5E07A08](v23, v12, v13);
        v24 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*a1 + 504))(a1, v12, v13);
        *(_DWORD *)(v18 + 40) |= 4u;
        *(_DWORD *)(v18 + 64) = v24;
        v10 += 2;
        if (v10 == v11)
        {
          v4 = v68;
          goto LABEL_20;
        }
      }
      v17 = *(_DWORD *)(v68 + 60);
      goto LABEL_14;
    }
LABEL_20:
    sub_1B02E31C8(a1, (uint64_t)(a1 + 8), v4, a4);
    if (*a4)
      return;
    sub_1B0303130(a4);
    v61 = 0;
    *(_DWORD *)(v4 + 40) |= 1u;
    v25 = *(_QWORD *)(v4 + 8);
    v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL);
    if ((v25 & 1) != 0)
      v26 = (_QWORD *)*v26;
    v60[1] = &v61;
    v61 = sub_1B0304284((uint64_t *)(v4 + 72), (uint64_t)v26);
    v58 = 0;
    v59[0] = &v68;
    v59[1] = v60;
    v60[0] = &v68;
    __p[0] = 0;
    __p[1] = 0;
    v27 = *(_DWORD *)(v4 + 56);
    if (v27 >= 1)
    {
      v28 = 0;
      v29 = 0;
      v30 = 0;
      v31 = 1;
      while (1)
      {
        v32 = sub_1B02E9644(v4 + 48, v30);
        if (!(*(unsigned int (**)(uint64_t *, _QWORD))(*a1 + 552))(a1, *(unsigned int *)(v32 + 64)))
          break;
        ++v30;
LABEL_68:
        v4 = v68;
        v27 = *(_DWORD *)(v68 + 56);
        if (v30 >= v27)
          goto LABEL_89;
      }
      sub_1B02E55EC((uint64_t)v59, v29, v30, a4);
      if (*a4)
        goto LABEL_95;
      sub_1B0303130(a4);
      if (!v28)
      {
        if (*((char *)v61 + 23) < 0)
        {
          if (!v61[1])
          {
LABEL_32:
            v33 = *(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL;
            if (*(char *)(v33 + 23) < 0)
            {
              v35 = *(unsigned __int8 **)v33;
              v34 = *(_QWORD *)(v33 + 8);
            }
            else
            {
              v34 = *(unsigned __int8 *)(v33 + 23);
              v35 = (unsigned __int8 *)(*(_QWORD *)(v32 + 48) & 0xFFFFFFFFFFFFFFFELL);
            }
            v36 = *(unsigned int *)(v32 + 64);
            if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v36))
            {
              sub_1B02DCBB8(&v62, "");
LABEL_58:
              v64 = 0;
LABEL_59:
              if (SHIBYTE(v58) < 0)
                operator delete(__p[0]);
              v58 = v63;
              *(_OWORD *)__p = v62;
              v28 = v64;
              if (v63 >= 0)
                v46 = __p;
              else
                v46 = (void **)v62;
              if (v63 >= 0)
                v47 = HIBYTE(v63);
              else
                v47 = *((_QWORD *)&v62 + 1);
              sub_1B02E5AF4(v60, v30++, v46, v47);
              v29 = v30;
              goto LABEL_68;
            }
            if (!(*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v36))
            {
              if ((v31 & 1) != 0
                && ((v40 = a1[4]) == 0
                 || (v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 152))(v40),
                     ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 16))(v41) & 1) != 0)
                 || (v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1[4] + 152))(a1[4]),
                     (*(unsigned int (**)(uint64_t))(*(_QWORD *)v42 + 24))(v42))))
              {
                if (v34 >= 3)
                {
                  v49 = *(unsigned __int16 *)v35 != 38626 || v35[2] != 129;
                  if (!v49)
                  {
                    v35 += 3;
                    v34 -= 3;
                  }
                  v43 = !v49;
                }
                else
                {
                  v43 = 0;
                }
                v50 = a1[4];
                if (v50)
                {
                  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 152))(v50);
                  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v51 + 24))(v51))
                    v43 = 0;
                }
              }
              else
              {
                v43 = 0;
              }
              v52 = operator new(0x20uLL);
              v70 = v52 + 4;
              v71 = v52 + 4;
              *v52 = &unk_1B03AEF1A;
              v52[1] = 3;
              v52[2] = " ";
              v52[3] = 1;
              v69 = v52;
              sub_1B02E9E04(v35, v34, (uint64_t *)&v69, (uint64_t)&__dst);
              v62 = __dst;
              v63 = v73;
              v73 = 0;
              __dst = 0uLL;
              v64 = v43;
              if (v69)
              {
                v70 = v69;
                operator delete(v69);
              }
              goto LABEL_59;
            }
            v37 = (const void *)(*(uint64_t (**)(uint64_t *, uint64_t))(*a1 + 512))(a1, v36);
            if (v38 == v34 && !memcmp(v37, v35, v34))
            {
              sub_1B02DCBB8(&v62, v9);
              goto LABEL_58;
            }
            if (v34 >= 0x7FFFFFFFFFFFFFF8)
              sub_1B02D78C4();
            if (v34 >= 0x17)
            {
              v44 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v34 | 7) != 0x17)
                v44 = v34 | 7;
              v45 = v44 + 1;
              p_dst = (__int128 *)operator new(v44 + 1);
              *((_QWORD *)&__dst + 1) = v34;
              v73 = v45 | 0x8000000000000000;
              *(_QWORD *)&__dst = p_dst;
            }
            else
            {
              HIBYTE(v73) = v34;
              p_dst = &__dst;
              if (!v34)
                goto LABEL_57;
            }
            memmove(p_dst, v35, v34);
LABEL_57:
            *((_BYTE *)p_dst + v34) = 0;
            v62 = __dst;
            v63 = v73;
            goto LABEL_58;
          }
        }
        else if (!*((_BYTE *)v61 + 23))
        {
          goto LABEL_32;
        }
      }
      v31 = 0;
      goto LABEL_32;
    }
    v29 = 0;
LABEL_89:
    sub_1B02E55EC((uint64_t)v59, v29, v27, a4);
    if (!*a4)
    {
      sub_1B0303130(a4);
      v54 = a1[3];
      if (v54)
      {
        (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v54 + 40))(&v62);
        v55 = v61;
        if (*((char *)v61 + 23) < 0)
          operator delete((void *)*v61);
        v56 = v62;
        v55[2] = v63;
        *(_OWORD *)v55 = v56;
      }
      sub_1B0303128(a4);
    }
LABEL_95:
    if (SHIBYTE(v58) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LODWORD(v62) = 13;
    v53 = (_QWORD *)sub_1B02D685C((uint64_t)&v62 + 8);
    sub_1B02D7994(v53, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994((_QWORD *)&v62 + 1, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994((_QWORD *)&v62 + 1, (uint64_t)") [", 3);
    sub_1B02D7994((_QWORD *)&v62 + 1, (uint64_t)"spt", 3);
    sub_1B02D7994((_QWORD *)&v62 + 1, (uint64_t)"] ", 2);
    sub_1B02D7994((_QWORD *)&v62 + 1, (uint64_t)"output proto is null", 20);
    sub_1B02D4430((unsigned int *)&v62, (uint64_t)a4);
    *((_QWORD *)&v62 + 1) = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)&v62 + *(_QWORD *)(*((_QWORD *)&v62 + 1) - 24) + 8) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v63 = MEMORY[0x1E0DE4FB8] + 16;
    if (v66 < 0)
      operator delete(v65);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](&v67);
  }
}

void sub_1B02E5594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02E55EC(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  int v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  std::string::size_type size;
  unint64_t v17;
  std::string *v18;
  int v19;
  std::string::size_type v20;
  unint64_t v21;
  unint64_t v22;
  std::string *v23;
  unint64_t v24;
  unint64_t v25;
  const char *v26;
  int v27;
  unint64_t v28;
  const char *v29;
  size_t v30;
  _QWORD *v31;
  unint64_t v32;
  unsigned int v33;
  _QWORD v34[11];
  char v35;
  uint64_t v36;
  std::string v37;

  if (a2 >= a3)
  {
    sub_1B0303128(a4);
  }
  else
  {
    memset(&v37, 0, sizeof(v37));
    v8 = a2;
    do
    {
      v9 = sub_1B02E9644(**(_QWORD **)a1 + 48, v8);
      v10 = *(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v10 + 23) < 0)
      {
        v12 = *(void **)v10;
        v11 = *(_QWORD *)(v10 + 8);
      }
      else
      {
        v11 = *(unsigned __int8 *)(v10 + 23);
        v12 = (void *)(*(_QWORD *)(v9 + 48) & 0xFFFFFFFFFFFFFFFELL);
      }
      v13 = sub_1B02D5220(v12, v11);
      if (v13 < 0)
      {
        v33 = 13;
        sub_1B02D685C((uint64_t)v34);
        sub_1B02D7994(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(v34, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(v34, (uint64_t)") [", 3);
        sub_1B02D7994(v34, (uint64_t)"(0) <= (byte)", 13);
        sub_1B02D7994(v34, (uint64_t)"] ", 2);
        sub_1B02D4430(&v33, (uint64_t)a4);
        goto LABEL_50;
      }
      std::string::append(&v37, 1uLL, v13);
      ++v8;
    }
    while (a3 != v8);
    v31 = a4;
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      v14 = v37.__r_.__value_.__r.__words[1];
    if (v14 >= 1)
    {
      v15 = 0;
      while (1)
      {
        v32 = 0;
        size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v37.__r_.__value_.__l.__size_;
        if (size < v15)
          sub_1B02EA050("string_view::substr");
        v17 = v15;
        v18 = (std::string *)v37.__r_.__value_.__r.__words[0];
        if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v18 = &v37;
        if (sub_1B0301404((unsigned __int8 *)v18 + v17, (uint64_t)v18 + size, (uint64_t *)&v32) != 65533)
          break;
        v19 = v17 + a2;
        if (v32 != 1)
        {
          if (v32 != 3)
          {
            v33 = 13;
            sub_1B02D685C((uint64_t)v34);
            sub_1B02D7994(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
            sub_1B02D7994(v34, (uint64_t)"(", 1);
            std::ostream::operator<<();
            sub_1B02D7994(v34, (uint64_t)") [", 3);
            sub_1B02D7994(v34, (uint64_t)"(consumed) == (1)", 17);
            sub_1B02D7994(v34, (uint64_t)"] ", 2);
            sub_1B02D4430(&v33, (uint64_t)v31);
            goto LABEL_50;
          }
          goto LABEL_23;
        }
        sub_1B02E5AF4(*(_QWORD ***)(a1 + 8), v19, &unk_1B03AEF16, 3uLL);
        LODWORD(v22) = v32;
LABEL_42:
        v15 = v17 + v22;
        if (v15 >= v14)
          goto LABEL_47;
      }
      v19 = v17 + a2;
LABEL_23:
      v20 = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v20 = v37.__r_.__value_.__l.__size_;
      v21 = v20 - v17;
      if (v20 < v17)
        sub_1B02EA050("string_view::substr");
      v22 = v32;
      v23 = &v37;
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v23 = (std::string *)v37.__r_.__value_.__r.__words[0];
      if (v21 >= v32)
        v24 = v32;
      else
        v24 = v21;
      if (v32)
      {
        v25 = 0;
        v26 = (char *)v23 + v17;
        v27 = v19;
        do
        {
          v28 = v22 - 1;
          if (v25 == v28)
            v29 = v26;
          else
            v29 = "";
          if (v25 == v28)
            v30 = v24;
          else
            v30 = 0;
          sub_1B02E5AF4(*(_QWORD ***)(a1 + 8), v27 + v25++, v29, v30);
          v22 = v32;
        }
        while (v32 > v25);
      }
      goto LABEL_42;
    }
    v15 = 0;
LABEL_47:
    if (v15 + a2 == a3)
    {
      sub_1B0303128(v31);
      goto LABEL_53;
    }
    v33 = 13;
    sub_1B02D685C((uint64_t)v34);
    sub_1B02D7994(v34, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v34, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v34, (uint64_t)") [", 3);
    sub_1B02D7994(v34, (uint64_t)"(token_index_begin + offset) == (token_index_end)", 49);
    sub_1B02D7994(v34, (uint64_t)"] ", 2);
    sub_1B02D4430(&v33, (uint64_t)v31);
LABEL_50:
    v34[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v34 + *(_QWORD *)(v34[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v34[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v35 < 0)
      operator delete((void *)v34[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](&v36);
LABEL_53:
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
}

void sub_1B02E5A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  if (*(char *)(v11 - 89) < 0)
    operator delete(*(void **)(v11 - 112));
  _Unwind_Resume(exception_object);
}

std::string *sub_1B02E5AF4(_QWORD **a1, int a2, const void *a3, size_t a4)
{
  uint64_t v7;
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  __int128 __dst;
  unint64_t v20;

  v7 = sub_1B02EA290(**a1 + 48, a2);
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v8 = v7;
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v20 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v20) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  *(_DWORD *)(v8 + 40) |= 2u;
  v12 = *(_QWORD *)(v8 + 8);
  v13 = (_QWORD *)(v12 & 0xFFFFFFFFFFFFFFFELL);
  if ((v12 & 1) != 0)
    v13 = (_QWORD *)*v13;
  sub_1B0304260((uint64_t *)(v8 + 56), &__dst, (uint64_t)v13);
  if (SHIBYTE(v20) < 0)
    operator delete((void *)__dst);
  v14 = *a1[1];
  if (*(char *)(v14 + 23) < 0)
    v15 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v15) = *(unsigned __int8 *)(v14 + 23);
  v16 = *(_DWORD *)(v8 + 40);
  *(_DWORD *)(v8 + 40) = v16 | 8;
  *(_DWORD *)(v8 + 68) = v15;
  if (*(char *)(v14 + 23) < 0)
    v17 = *(_QWORD *)(v14 + 8);
  else
    LODWORD(v17) = *(unsigned __int8 *)(v14 + 23);
  *(_DWORD *)(v8 + 40) = v16 | 0x18;
  *(_DWORD *)(v8 + 72) = v17 + a4;
  return std::string::append((std::string *)v14, (const std::string::value_type *)a3, a4);
}

void sub_1B02E5C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02E5C68(uint64_t a1@<X0>, int **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  int *v9;
  int *v10;
  int v11;
  std::string::size_type v12;
  _BYTE *v13;
  _BYTE *v14;
  std::string *p_p;
  std::string::size_type size;
  std::string __p;
  int v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;

  v19 = 0;
  v20 = 0;
  v21 = 0;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 496))(a1);
  sub_1B02E1E8C(&v19, a2[1] - *a2);
  v9 = *a2;
  v10 = a2[1];
  if (*a2 == v10)
  {
LABEL_8:
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 264))(a1, &v19, a3);
  }
  else
  {
    while (1)
    {
      v11 = *v9;
      v18 = v11;
      if (v11 < 0 || v11 >= v8)
        break;
      __p.__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 512))(a1);
      __p.__r_.__value_.__l.__size_ = v12;
      v13 = v20;
      if ((unint64_t)v20 >= v21)
      {
        v14 = (_BYTE *)sub_1B02EC6B8(&v19, (uint64_t)&__p);
      }
      else
      {
        sub_1B02EC7C4((int)&v21, v20, (uint64_t)&__p);
        v14 = v13 + 24;
      }
      v20 = v14;
      if (++v9 == v10)
        goto LABEL_8;
    }
    sub_1B02E5E20("Invalid id: ", 0xCuLL, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    sub_1B030328C(a4, 11, p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  sub_1B02E9D04((void ***)&__p);
}

void sub_1B02E5DD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18)
{
  if (a15 < 0)
    operator delete(__p);
  __p = &a17;
  sub_1B02E9D04((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_1B02E5E20(void *__src@<X0>, size_t __len@<X1>, std::string *a3@<X8>)
{
  void **v4;
  std::string::size_type v5;
  std::string *v6;
  void *v7[2];
  unsigned __int8 v8;
  std::string __dst;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  sub_1B02DCB10(&__dst, __src, __len);
  sub_1B02D685C((uint64_t)v10);
  std::ostream::operator<<();
  std::stringbuf::str();
  v10[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v10[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v11 < 0)
    operator delete((void *)v10[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](&v12);
  if ((v8 & 0x80u) == 0)
    v4 = v7;
  else
    v4 = (void **)v7[0];
  if ((v8 & 0x80u) == 0)
    v5 = v8;
  else
    v5 = (std::string::size_type)v7[1];
  v6 = std::string::append(&__dst, (const std::string::value_type *)v4, v5);
  *a3 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if ((char)v8 < 0)
    operator delete(v7[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1B02E5F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02E5F90(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  const char *v9;
  size_t v10;
  _QWORD *v11;
  char v13;
  uint64_t v14;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v14);
  v2 = v14;
  sub_1B0303130(&v14);
  if (!v2)
    return (*(uint64_t (**)(_QWORD *))(*a1[1] + 128))(a1[1]);
  if ((int)sub_1B03013F4() <= 2)
  {
    v13 = 0;
    v3 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v3, (uint64_t)"(", 1);
    v4 = (_QWORD *)std::ostream::operator<<();
    v5 = sub_1B02D7994(v4, (uint64_t)") ", 2);
    v6 = sub_1B02D7994(v5, (uint64_t)"LOG(", 4);
    v7 = sub_1B02D7994(v6, (uint64_t)"ERROR", 5);
    v8 = sub_1B02D7994(v7, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v14, a1);
    v9 = sub_1B0303418(&v14);
    v10 = strlen(v9);
    v11 = sub_1B02D7994(v8, (uint64_t)v9, v10);
    sub_1B02D7994(v11, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B0303130(&v14);
    sub_1B02D6948(&v13);
  }
  return 0;
}

void sub_1B02E60CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E60F4(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  const char *v13;
  size_t v14;
  _QWORD *v15;
  char v17;
  uint64_t v18;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v18);
  v6 = v18;
  sub_1B0303130(&v18);
  if (!v6)
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*a1[1] + 112))(a1[1], a2, a3);
  if ((int)sub_1B03013F4() <= 2)
  {
    v17 = 0;
    v7 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v7, (uint64_t)"(", 1);
    v8 = (_QWORD *)std::ostream::operator<<();
    v9 = sub_1B02D7994(v8, (uint64_t)") ", 2);
    v10 = sub_1B02D7994(v9, (uint64_t)"LOG(", 4);
    v11 = sub_1B02D7994(v10, (uint64_t)"ERROR", 5);
    v12 = sub_1B02D7994(v11, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v18, a1);
    v13 = sub_1B0303418(&v18);
    v14 = strlen(v13);
    v15 = sub_1B02D7994(v12, (uint64_t)v13, v14);
    sub_1B02D7994(v15, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B0303130(&v18);
    sub_1B02D6948(&v17);
  }
  return 0;
}

void sub_1B02E6248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

const char *sub_1B02E6270(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_1B0303130(&v17);
  if (!v4)
    return (const char *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 120))(a1[1], a2);
  if ((int)sub_1B03013F4() <= 2)
  {
    v16 = 0;
    v5 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    v8 = sub_1B02D7994(v7, (uint64_t)"LOG(", 4);
    v9 = sub_1B02D7994(v8, (uint64_t)"ERROR", 5);
    v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v11 = sub_1B0303418(&v17);
    v12 = strlen(v11);
    v13 = sub_1B02D7994(v10, (uint64_t)v11, v12);
    v14 = sub_1B02D7994(v13, (uint64_t)"\nReturns default value ", 23);
    sub_1B02D7994(v14, (uint64_t)"", 0);
    sub_1B0303130(&v17);
    sub_1B02D6948(&v16);
  }
  return "";
}

void sub_1B02E63CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

float sub_1B02E63F4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  float v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  size_t v13;
  _QWORD *v14;
  char v16;
  uint64_t v17;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v17);
  v4 = v17;
  sub_1B0303130(&v17);
  if (!v4)
    return (*(float (**)(_QWORD *, uint64_t))(*a1[1] + 136))(a1[1], a2);
  v5 = 0.0;
  if ((int)sub_1B03013F4() <= 2)
  {
    v16 = 0;
    v6 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v6, (uint64_t)"(", 1);
    v7 = (_QWORD *)std::ostream::operator<<();
    v8 = sub_1B02D7994(v7, (uint64_t)") ", 2);
    v9 = sub_1B02D7994(v8, (uint64_t)"LOG(", 4);
    v10 = sub_1B02D7994(v9, (uint64_t)"ERROR", 5);
    v11 = sub_1B02D7994(v10, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v17, a1);
    v12 = sub_1B0303418(&v17);
    v13 = strlen(v12);
    v14 = sub_1B02D7994(v11, (uint64_t)v12, v13);
    sub_1B02D7994(v14, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B0303130(&v17);
    sub_1B02D6948(&v16);
  }
  return v5;
}

void sub_1B02E6550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E6578(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_1B0303130(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 152))(a1[1], a2);
  if ((int)sub_1B03013F4() <= 2)
  {
    v15 = 0;
    v5 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    v8 = sub_1B02D7994(v7, (uint64_t)"LOG(", 4);
    v9 = sub_1B02D7994(v8, (uint64_t)"ERROR", 5);
    v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_1B0303418(&v16);
    v12 = strlen(v11);
    v13 = sub_1B02D7994(v10, (uint64_t)v11, v12);
    sub_1B02D7994(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B0303130(&v16);
    sub_1B02D6948(&v15);
  }
  return 0;
}

void sub_1B02E66C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E66EC(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_1B0303130(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 144))(a1[1], a2);
  if ((int)sub_1B03013F4() <= 2)
  {
    v15 = 0;
    v5 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    v8 = sub_1B02D7994(v7, (uint64_t)"LOG(", 4);
    v9 = sub_1B02D7994(v8, (uint64_t)"ERROR", 5);
    v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_1B0303418(&v16);
    v12 = strlen(v11);
    v13 = sub_1B02D7994(v10, (uint64_t)v11, v12);
    sub_1B02D7994(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B0303130(&v16);
    sub_1B02D6948(&v15);
  }
  return 0;
}

void sub_1B02E6838(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E6860(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_1B0303130(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 160))(a1[1], a2);
  if ((int)sub_1B03013F4() <= 2)
  {
    v15 = 0;
    v5 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    v8 = sub_1B02D7994(v7, (uint64_t)"LOG(", 4);
    v9 = sub_1B02D7994(v8, (uint64_t)"ERROR", 5);
    v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_1B0303418(&v16);
    v12 = strlen(v11);
    v13 = sub_1B02D7994(v10, (uint64_t)v11, v12);
    sub_1B02D7994(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B0303130(&v16);
    sub_1B02D6948(&v15);
  }
  return 0;
}

void sub_1B02E69AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E69D4(_QWORD **a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  char v15;
  uint64_t v16;

  ((void (*)(uint64_t *__return_ptr))(*a1)[11])(&v16);
  v4 = v16;
  sub_1B0303130(&v16);
  if (!v4)
    return (*(uint64_t (**)(_QWORD *, uint64_t))(*a1[1] + 176))(a1[1], a2);
  if ((int)sub_1B03013F4() <= 2)
  {
    v15 = 0;
    v5 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"sentencepiece_processor.cc", 26);
    sub_1B02D7994(v5, (uint64_t)"(", 1);
    v6 = (_QWORD *)std::ostream::operator<<();
    v7 = sub_1B02D7994(v6, (uint64_t)") ", 2);
    v8 = sub_1B02D7994(v7, (uint64_t)"LOG(", 4);
    v9 = sub_1B02D7994(v8, (uint64_t)"ERROR", 5);
    v10 = sub_1B02D7994(v9, (uint64_t)") ", 2);
    ((void (*)(uint64_t *__return_ptr, _QWORD **))(*a1)[11])(&v16, a1);
    v11 = sub_1B0303418(&v16);
    v12 = strlen(v11);
    v13 = sub_1B02D7994(v10, (uint64_t)v11, v12);
    sub_1B02D7994(v13, (uint64_t)"\nReturns default value ", 23);
    std::ostream::operator<<();
    sub_1B0303130(&v16);
    sub_1B02D6948(&v15);
  }
  return 0;
}

void sub_1B02E6B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
  sub_1B02D6948(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E6B48(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_1B02D46A8(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 528))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1B02E6BAC(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_1B02D46F8(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1B02E6C10(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_1B02D4748(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

uint64_t sub_1B02E6C74(uint64_t *a1)
{
  const char *v2;
  size_t v3;
  uint64_t v4;

  v2 = sub_1B02D4798(a1[1]);
  v3 = strlen(v2);
  v4 = (*(uint64_t (**)(uint64_t *, const char *, size_t))(*a1 + 504))(a1, v2, v3);
  if ((*(unsigned int (**)(uint64_t *, uint64_t))(*a1 + 536))(a1, v4))
    return v4;
  else
    return 0xFFFFFFFFLL;
}

_QWORD *sub_1B02E6CD8@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_1B0303130(a5);
    if (a4)
    {
      sub_1B02E9D44(a4);
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t *))(*a1[1] + 200))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_1B02D685C((uint64_t)v16);
      sub_1B02D7994(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v16, (uint64_t)") [", 3);
      sub_1B02D7994(v16, (uint64_t)"pieces", 6);
      sub_1B02D7994(v16, (uint64_t)"] ", 2);
      sub_1B02D7994(v16, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v18);
    }
  }
  return result;
}

void sub_1B02E6E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02E6EB4@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;

  result = ((_QWORD *(*)(uint64_t *__return_ptr))(*a1)[11])(a5);
  if (!*a5)
  {
    sub_1B0303130(a5);
    if (a4)
    {
      a4[1] = *a4;
      v11 = *((char *)a2 + 23);
      if (v11 >= 0)
        v12 = a2;
      else
        v12 = (uint64_t *)*a2;
      if (v11 >= 0)
        v13 = *((unsigned __int8 *)a2 + 23);
      else
        v13 = a2[1];
      return (_QWORD *)(*(uint64_t (**)(_QWORD *, uint64_t *, uint64_t, uint64_t, _QWORD *))(*a1[1] + 208))(a1[1], v12, v13, a3, a4);
    }
    else
    {
      v15 = 13;
      v14 = (_QWORD *)sub_1B02D685C((uint64_t)v16);
      sub_1B02D7994(v14, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v16, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v16, (uint64_t)") [", 3);
      sub_1B02D7994(v16, (uint64_t)"ids", 3);
      sub_1B02D7994(v16, (uint64_t)"] ", 2);
      sub_1B02D7994(v16, (uint64_t)"output container is null", 24);
      sub_1B02D4430(&v15, (uint64_t)a5);
      v16[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      v16[1] = MEMORY[0x1E0DE4FB8] + 16;
      if (v17 < 0)
        operator delete((void *)v16[9]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return (_QWORD *)MEMORY[0x1B5E07C60](&v18);
    }
  }
  return result;
}

void sub_1B02E7078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E7090(uint64_t a1)
{
  sub_1B02D7CDC(a1, *(_QWORD **)(a1 + 8));
  return a1;
}

_QWORD *sub_1B02E70B8@<X0>(_QWORD *a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *result;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  _DWORD *v43;
  _QWORD v44[11];
  char v45;
  uint64_t v46;
  _DWORD *v47;
  unint64_t v48;

  v47 = a2;
  v48 = a3;
  if (a3 <= 0x13)
  {
    LODWORD(v43) = 13;
    v7 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
    sub_1B02D7994(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v44, (uint64_t)") [", 3);
    sub_1B02D7994(v44, (uint64_t)"(size) >= (sizeof(MMapHeader))", 30);
    sub_1B02D7994(v44, (uint64_t)"] ", 2);
    sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  if (*a2)
  {
    LODWORD(v43) = 13;
    v6 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
    sub_1B02D7994(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v44, (uint64_t)") [", 3);
    sub_1B02D7994(v44, (uint64_t)"header->sentinel == 0", 21);
    sub_1B02D7994(v44, (uint64_t)"] ", 2);
    sub_1B02D7994(v44, (uint64_t)"This file format is not for mmap-based loading.", 47);
    sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
LABEL_5:
    v44[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v44[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v45 < 0)
      operator delete((void *)v44[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1B5E07C60](&v46);
  }
  result = sub_1B03017B0(&v47, 0x14uLL, a4);
  if (*a4)
    return result;
  sub_1B0303130(a4);
  v10 = a2[1];
  if (v48 < v10)
  {
    LODWORD(v43) = 13;
    v11 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
    sub_1B02D7994(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v44, (uint64_t)") [", 3);
    sub_1B02D7994(v44, (uint64_t)"(blob.size()) >= (header->model_proto_size)", 43);
    sub_1B02D7994(v44, (uint64_t)"] ", 2);
    sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  v12 = (uint64_t)v47;
  v13 = operator new();
  sub_1B0316E1C(v13, v12, v10);
  v14 = a1[4];
  a1[4] = v13;
  if (v14)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v13 = a1[4];
  }
  sub_1B0303340(&v43, v13 + 88);
  v15 = (uint64_t)v43;
  sub_1B0303130((uint64_t *)&v43);
  if (v15)
  {
    LODWORD(v43) = 13;
    v16 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
    sub_1B02D7994(v16, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v44, (uint64_t)") [", 3);
    sub_1B02D7994(v44, (uint64_t)"model_proto->status().ok()", 26);
    sub_1B02D7994(v44, (uint64_t)"] ", 2);
    sub_1B02D7994(v44, (uint64_t)"Failed to initialize ModelProto.", 32);
    sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
    goto LABEL_5;
  }
  result = sub_1B03017B0(&v47, a2[1], a4);
  if (*a4)
    return result;
  sub_1B0303130(a4);
  if (v48 >= a2[2])
    v17 = a2[2];
  else
    v17 = v48;
  sub_1B02DD090(v13, (uint64_t)v47, v17, &v43);
  v18 = (uint64_t)v43;
  v43 = 0;
  v19 = a1[1];
  a1[1] = v18;
  if (v19)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    v20 = (uint64_t)v43;
    v43 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v18 = a1[1];
  }
  if (!v18)
  {
    LODWORD(v43) = 13;
    v22 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
    sub_1B02D7994(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
    sub_1B02D7994(v44, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v44, (uint64_t)") [", 3);
    sub_1B02D7994(v44, (uint64_t)"model_", 6);
    sub_1B02D7994(v44, (uint64_t)"] ", 2);
    sub_1B02D7994(v44, (uint64_t)"Failed to initialize Model.", 27);
    sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
    return (_QWORD *)sub_1B02D44BC((uint64_t)&v43);
  }
  (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)v18 + 16))(&v43);
  v21 = (uint64_t)v43;
  sub_1B0303130((uint64_t *)&v43);
  if (v21)
    return (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 16))(a1[1]);
  result = sub_1B03017B0(&v47, a2[2], a4);
  if (!*a4)
  {
    sub_1B0303130(a4);
    v23 = a2[3];
    if ((_DWORD)v23)
    {
      if (v48 >= v23)
      {
        v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 152))(a1[4]);
        v27 = a2[3];
        if (v48 < v27)
          v27 = v48;
        v43 = v47;
        v44[0] = v27;
        sub_1B02E7AA4(v26, (uint64_t)&v43, &v42);
        v28 = v42;
        v42 = 0;
        v29 = a1[2];
        a1[2] = v28;
        if (v29)
        {
          (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          v30 = v42;
          v42 = 0;
          if (v30)
            (*(void (**)(uint64_t *))(*v30 + 8))(v30);
        }
        (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[2] + 24))(&v43);
        v31 = (uint64_t)v43;
        sub_1B0303130((uint64_t *)&v43);
        if (!v31)
        {
          result = sub_1B03017B0(&v47, a2[3], a4);
          if (*a4)
            return result;
          sub_1B0303130(a4);
          v33 = a1[2];
          v34 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[1] + 32))(a1[1]);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 16))(v33, v34);
          if (a2[4])
          {
            v35 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4] + 160))(a1[4]);
            v36 = a2[4];
            if (v48 < v36)
              v36 = v48;
            v43 = v47;
            v44[0] = v36;
            sub_1B02E7AA4(v35, (uint64_t)&v43, &v42);
            v37 = v42;
            v42 = 0;
            v38 = a1[3];
            a1[3] = v37;
            if (v38)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
              v39 = v42;
              v42 = 0;
              if (v39)
                (*(void (**)(uint64_t *))(*v39 + 8))(v39);
            }
            (*(void (**)(_DWORD **__return_ptr))(*(_QWORD *)a1[3] + 24))(&v43);
            v40 = (uint64_t)v43;
            sub_1B0303130((uint64_t *)&v43);
            if (v40)
            {
              LODWORD(v43) = 13;
              v41 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
              sub_1B02D7994(v41, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
              sub_1B02D7994(v44, (uint64_t)"(", 1);
              std::ostream::operator<<();
              sub_1B02D7994(v44, (uint64_t)") [", 3);
              sub_1B02D7994(v44, (uint64_t)"denormalizer_->status().ok()", 28);
              sub_1B02D7994(v44, (uint64_t)"] ", 2);
              sub_1B02D7994(v44, (uint64_t)"Failed to initialize Denormalizer.", 34);
              sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
              return (_QWORD *)sub_1B02D44BC((uint64_t)&v43);
            }
            result = sub_1B03017B0(&v47, a2[4], a4);
            if (*a4)
              return result;
            sub_1B0303130(a4);
          }
          return sub_1B0303128(a4);
        }
        LODWORD(v43) = 13;
        v32 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
        sub_1B02D7994(v32, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(v44, (uint64_t)") [", 3);
        sub_1B02D7994(v44, (uint64_t)"normalizer_->status().ok()", 26);
        sub_1B02D7994(v44, (uint64_t)"] ", 2);
        sub_1B02D7994(v44, (uint64_t)"Failed to initialize Normalizer.", 32);
        sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
      }
      else
      {
        LODWORD(v43) = 13;
        v24 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
        sub_1B02D7994(v24, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
        sub_1B02D7994(v44, (uint64_t)"(", 1);
        std::ostream::operator<<();
        sub_1B02D7994(v44, (uint64_t)") [", 3);
        sub_1B02D7994(v44, (uint64_t)"(blob.size()) >= (header->normalizer_size)", 42);
        sub_1B02D7994(v44, (uint64_t)"] ", 2);
        sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
      }
    }
    else
    {
      LODWORD(v43) = 13;
      v25 = (_QWORD *)sub_1B02D685C((uint64_t)v44);
      sub_1B02D7994(v25, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/sentencepiece_processor.cc", 82);
      sub_1B02D7994(v44, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(v44, (uint64_t)") [", 3);
      sub_1B02D7994(v44, (uint64_t)"(header->normalizer_size) > (0)", 31);
      sub_1B02D7994(v44, (uint64_t)"] ", 2);
      sub_1B02D4430((unsigned int *)&v43, (uint64_t)a4);
    }
    return (_QWORD *)sub_1B02D44BC((uint64_t)&v43);
  }
  return result;
}

void sub_1B02E7A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B02D44BC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E7AA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t *v6;
  uint64_t *result;

  v6 = (uint64_t *)operator new();
  result = sub_1B02DB5A0(v6, a1, *(_DWORD **)a2, *(_QWORD *)(a2 + 8));
  *a3 = v6;
  return result;
}

void sub_1B02E7AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10F1C40C7D4252BLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E7B20(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + 96;
  MEMORY[0x1B5E07A08](a1 + 96);
  if (*(char *)(a1 + 119) < 0)
  {
    v2 = *(_QWORD *)(a1 + 96);
    v3 = *(_QWORD *)(a1 + 104);
  }
  else
  {
    v3 = *(unsigned __int8 *)(a1 + 119);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(a1, v2, v3);
}

void sub_1B02E7B7C(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E60CC5A8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_1B02ECCE8(&__p, &v8);
  sub_1B02E7C7C(v6, (uint64_t)&__p, 0, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_1B0303130(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_1B02E7C60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02E7C7C(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, _QWORD *a4@<X8>)
{
  std::__fs::filesystem::path *v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  _BYTE *v13;
  std::__fs::filesystem::path *v14;
  int v15;
  int v16;
  std::string::size_type size;
  std::__fs::filesystem::path *v18;
  std::__fs::filesystem::path *v19;
  off_t st_size;
  void *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _BYTE *v25;
  std::__fs::filesystem::path __p[3];
  void *v27;
  char v28;
  _BYTE v29[152];
  std::__fs::filesystem::path v30;
  std::__fs::filesystem::path v31;
  stat v32;

  sub_1B02ECA24(a1);
  if (!a3)
  {
    if (*(char *)(a2 + 23) < 0)
      sub_1B02EB0A8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    else
      __p[0] = *(std::__fs::filesystem::path *)a2;
    if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v8 = __p;
    else
      v8 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
    v9 = open((const char *)v8, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
    v10 = v9;
    *(_DWORD *)(a1 + 24) = v9;
    if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
      if ((v10 & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    v11 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_1B02D7994(v11, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(fd = ::open(filename.string().data(), mode)) >= 0", 50);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    v12 = *(unsigned __int8 *)(a2 + 23);
    if ((v12 & 0x80u) == 0)
      v13 = (_BYTE *)a2;
    else
      v13 = *(_BYTE **)a2;
    if ((v12 & 0x80u) != 0)
      v12 = *(_QWORD *)(a2 + 8);
LABEL_66:
    sub_1B02ECBE8(&__p[0].__pn_.__r_.__value_.__l.__size_, v13, &v13[v12], 0x22u, 0x5Cu);
    sub_1B02D4430((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](v29);
    return;
  }
  sub_1B02ECA68((const std::__fs::filesystem::path *)a2, (uint64_t)&v31);
  sub_1B02ECB28((const std::__fs::filesystem::path *)a2, (uint64_t)&v30);
  std::__fs::filesystem::__status(&v31, 0);
  if (__p[0].__pn_.__r_.__value_.__s.__data_[0] != 2)
    goto LABEL_30;
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(__p, v31.__pn_.__r_.__value_.__l.__data_, v31.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v31;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v14 = __p;
  else
    v14 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  v15 = open((const char *)v14, 0, __p[0].__pn_.__r_.__value_.__r.__words[0], __p[0].__pn_.__r_.__value_.__l.__size_, __p[0].__pn_.__r_.__value_.__r.__words[2]);
  v16 = v15;
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
    if ((v16 & 0x80000000) == 0)
      goto LABEL_27;
LABEL_30:
    LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
    sub_1B02D685C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"std::filesystem::is_directory(dir) && (dirfd = ::open(dir.string().data(), mode)) >= 0", 86);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
    sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
    size = HIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]);
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v18 = &v31;
    else
      v18 = (std::__fs::filesystem::path *)v31.__pn_.__r_.__value_.__r.__words[0];
    if ((v31.__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v31.__pn_.__r_.__value_.__l.__size_;
    sub_1B02ECBE8(&__p[0].__pn_.__r_.__value_.__l.__size_, v18, (_BYTE *)v18 + size, 0x22u, 0x5Cu);
    sub_1B02D4430((unsigned int *)__p, (uint64_t)a4);
    __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
    *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                              + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
    if (v28 < 0)
      operator delete(v27);
    goto LABEL_37;
  }
  if (v15 < 0)
    goto LABEL_30;
LABEL_27:
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(__p, v30.__pn_.__r_.__value_.__l.__data_, v30.__pn_.__r_.__value_.__l.__size_);
  else
    __p[0] = v30;
  if ((__p[0].__pn_.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = __p;
  else
    v19 = (std::__fs::filesystem::path *)__p[0].__pn_.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 24) = openat_authenticated_np(v16, (const char *)v19, 0, -1);
  if (SHIBYTE(__p[0].__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__pn_.__r_.__value_.__l.__data_);
  close(v16);
  if ((*(_DWORD *)(a1 + 24) & 0x80000000) == 0)
  {
    if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__pn_.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__pn_.__r_.__value_.__l.__data_);
LABEL_52:
    if (fstat(*(_DWORD *)(a1 + 24), &v32) < 0)
    {
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v22 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_1B02D7994(v22, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"::fstat(fd, &st) >= 0", 21);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"failed to get file size: ", 25);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    else
    {
      st_size = v32.st_size;
      *(_QWORD *)(a1 + 16) = v32.st_size;
      v21 = mmap(0, st_size, 1, 1, *(_DWORD *)(a1 + 24), 0);
      if (v21 != (void *)-1)
      {
        *(_QWORD *)(a1 + 8) = v21;
        close(*(_DWORD *)(a1 + 24));
        *(_DWORD *)(a1 + 24) = -1;
        sub_1B0303128(a4);
        return;
      }
      LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
      v23 = (_QWORD *)sub_1B02D685C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
      sub_1B02D7994(v23, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
      std::ostream::operator<<();
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(p = reinterpret_cast<char*>( ::mmap(0, length, PROT_READ, MAP_SHARED, fd, 0))) != MAP_FAILED", 93);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
      sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"mmap() failed: ", 15);
      v12 = *(unsigned __int8 *)(a2 + 23);
      if ((v12 & 0x80u) == 0)
        v13 = (_BYTE *)a2;
      else
        v13 = *(_BYTE **)a2;
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(a2 + 8);
    }
    goto LABEL_66;
  }
  LODWORD(__p[0].__pn_.__r_.__value_.__l.__data_) = 13;
  sub_1B02D685C((uint64_t)&__p[0].__pn_.__r_.__value_.__l.__size_);
  sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/mmap.h", 62);
  sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"(", 1);
  std::ostream::operator<<();
  sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)") [", 3);
  sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"fd >= 0", 7);
  sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"] ", 2);
  sub_1B02D7994(&__p[0].__pn_.__r_.__value_.__l.__size_, (uint64_t)"open failed: ", 13);
  v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) == 0)
    v25 = (_BYTE *)a2;
  else
    v25 = *(_BYTE **)a2;
  if ((v24 & 0x80u) != 0)
    v24 = *(_QWORD *)(a2 + 8);
  sub_1B02ECBE8(&__p[0].__pn_.__r_.__value_.__l.__size_, v25, &v25[v24], 0x22u, 0x5Cu);
  sub_1B02D4430((unsigned int *)__p, (uint64_t)a4);
  __p[0].__pn_.__r_.__value_.__l.__size_ = *MEMORY[0x1E0DE4F60];
  *(std::string::size_type *)((char *)&__p[0].__pn_.__r_.__value_.__r.__words[1]
                            + *(_QWORD *)(__p[0].__pn_.__r_.__value_.__l.__size_ - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  __p[0].__pn_.__r_.__value_.__r.__words[2] = MEMORY[0x1E0DE4FB8] + 16;
  if (v28 < 0)
    operator delete(v27);
LABEL_37:
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v29);
  if (SHIBYTE(v30.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__pn_.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__pn_.__r_.__value_.__l.__data_);
}

void sub_1B02E8418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 217) < 0)
    operator delete(*(void **)(v14 - 240));
  if (*(char *)(v14 - 193) < 0)
    operator delete(*(void **)(v14 - 216));
  _Unwind_Resume(exception_object);
}

void sub_1B02E84CC(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::string __p;

  v6 = operator new();
  *(_QWORD *)v6 = &off_1E60CC5A8;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 24) = -1;
  v7 = a1[11];
  a1[11] = v6;
  if (v7)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v6 = a1[11];
  }
  v8 = a2;
  sub_1B02ECCE8(&__p, &v8);
  sub_1B02E7C7C(v6, (uint64_t)&__p, 1, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    sub_1B0303130(a3);
    (*(void (**)(_QWORD *, _QWORD, _QWORD))(*a1 + 48))(a1, *(_QWORD *)(a1[11] + 8), *(_QWORD *)(a1[11] + 16));
  }
}

void sub_1B02E85B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B02E85CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 136))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E8614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E9D04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E862C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 144))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E8674(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B02E8690@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 176))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E86D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EA0C4((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E86F0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 184))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E8738(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EA134((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E8750@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 192))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E8798(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E9D04((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E87B0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 200))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E87F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B02E8814@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 208))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E885C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EA1C8((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E8874@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 216))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E88BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02D7830((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E88D4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 152))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E891C(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B02E8938@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 160))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E8980(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B02E899C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 168))(&v3);
  return sub_1B0303130(&v3);
}

void sub_1B02E89E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

float sub_1B02E8A00(uint64_t a1)
{
  float v1;
  uint64_t v3;
  float v4;

  v4 = 0.0;
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)a1 + 224))(&v3);
  v1 = v4;
  sub_1B0303130(&v3);
  return v1;
}

void sub_1B02E8A48(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t (**v13)();
  void *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v13 = &off_1E60CC3B8;
  v15 = 0;
  v16 = 0;
  v14 = sub_1B02F5C80();
  v8 = sub_1B02DD348((uint64_t)&v13);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v12, a1, a2, a3, v8);
  sub_1B0310884((uint64_t)v14, a4);
  sub_1B0303130(&v12);
  v13 = &off_1E60CC3B8;
  v9 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1B02E8B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B02EA238(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_1B02E8B44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t (**v17)();
  void *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v17 = &off_1E60CC3B8;
  v19 = 0;
  v20 = 0;
  v18 = sub_1B02F5C80();
  v12 = sub_1B02DD348((uint64_t)&v17);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v16, a1, a2, a3, a4, v12, a6);
  sub_1B0310884((uint64_t)v18, a5);
  sub_1B0303130(&v16);
  v17 = &off_1E60CC3B8;
  v13 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1B02E8C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B02EA238(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_1B02E8C60(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[2];
  std::__shared_weak_count *v16;

  v15[1] = 0;
  v16 = 0;
  v15[0] = &off_1E60CC418;
  v10 = sub_1B02DD4A4((uint64_t)v15);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v14, a1, a2, a3, a4, v10);
  sub_1B02DD524((uint64_t)v15, a5);
  sub_1B0303130(&v14);
  v15[0] = &off_1E60CC418;
  v11 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_1B02E8D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_1B0303130(&a9);
  sub_1B02EA238(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_1B02E8D64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _QWORD v21[2];
  std::__shared_weak_count *v22;

  v21[1] = 0;
  v22 = 0;
  v21[0] = &off_1E60CC418;
  v16 = sub_1B02DD4A4((uint64_t)v21);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v20, a1, a2, a3, a4, a5, a6, v16, a8);
  sub_1B02DD524((uint64_t)v21, a7);
  sub_1B0303130(&v20);
  v21[0] = &off_1E60CC418;
  v17 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1B02E8E68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_1B0303130(&a9);
  sub_1B02EA238(v9 + 8);
  _Unwind_Resume(a1);
}

void sub_1B02E8E90(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E60CC3B8;
  v13 = 0;
  v14 = 0;
  v12 = sub_1B02F5C80();
  v6 = sub_1B02DD348((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v10, a1, a2, v6);
  sub_1B0310884((uint64_t)v12, a3);
  sub_1B0303130(&v10);
  v11 = &off_1E60CC3B8;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B02E8F5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B02EA238(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_1B02E8F84(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E60CC3B8;
  v13 = 0;
  v14 = 0;
  v12 = sub_1B02F5C80();
  v6 = sub_1B02DD348((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v10, a1, a2, v6);
  sub_1B0310884((uint64_t)v12, a3);
  sub_1B0303130(&v10);
  v11 = &off_1E60CC3B8;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B02E9050(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B02EA238(v2 + 16);
  _Unwind_Resume(a1);
}

void sub_1B02E9078(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t (**v11)();
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v11 = &off_1E60CC3B8;
  v13 = 0;
  v14 = 0;
  v12 = sub_1B02F5C80();
  v6 = sub_1B02DD348((uint64_t)&v11);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v10, a1, a2, v6);
  sub_1B0310884((uint64_t)v12, a3);
  sub_1B0303130(&v10);
  v11 = &off_1E60CC3B8;
  v7 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1B02E9144(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B02EA238(v2 + 16);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E916C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v10;

  *a4 = &off_1E60CC3B8;
  a4[1] = sub_1B02F5C80();
  a4[2] = 0;
  a4[3] = 0;
  v8 = sub_1B02DD348((uint64_t)a4);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 232))(&v10, a1, a2, a3, v8);
  return sub_1B0303130(&v10);
}

void sub_1B02E91FC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1B02EA238(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E9214@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>, float a6@<S0>)
{
  uint64_t v12;
  uint64_t v14;

  *a5 = &off_1E60CC3B8;
  a5[1] = sub_1B02F5C80();
  a5[2] = 0;
  a5[3] = 0;
  v12 = sub_1B02DD348((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 248))(&v14, a1, a2, a3, a4, v12, a6);
  return sub_1B0303130(&v14);
}

void sub_1B02E92C4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1B02EA238(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E92DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v9;
  uint64_t v11;

  *a5 = &off_1E60CC418;
  a5[1] = 0;
  a5[2] = 0;
  v9 = sub_1B02DD4A4((uint64_t)a5);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 240))(&v11, a1, a2, a3, a4, v9);
  return sub_1B0303130(&v11);
}

void sub_1B02E9374(_Unwind_Exception *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  *v2 = v3;
  sub_1B02EA238(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E938C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, _QWORD *a7@<X8>, float a8@<S0>)
{
  uint64_t v15;
  uint64_t v17;

  *a7 = &off_1E60CC418;
  a7[1] = 0;
  a7[2] = 0;
  v15 = sub_1B02DD4A4((uint64_t)a7);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, float))(*(_QWORD *)a1 + 256))(&v17, a1, a2, a3, a4, a5, a6, v15, a8);
  return sub_1B0303130(&v17);
}

void sub_1B02E944C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1B02EA238(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E9464@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_1E60CC3B8;
  a3[1] = sub_1B02F5C80();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_1B02DD348((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 264))(&v8, a1, a2, v6);
  return sub_1B0303130(&v8);
}

void sub_1B02E94EC(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1B02EA238(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E9504@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_1E60CC3B8;
  a3[1] = sub_1B02F5C80();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_1B02DD348((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 272))(&v8, a1, a2, v6);
  return sub_1B0303130(&v8);
}

void sub_1B02E958C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1B02EA238(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02E95A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v8;

  *a3 = &off_1E60CC3B8;
  a3[1] = sub_1B02F5C80();
  a3[2] = 0;
  a3[3] = 0;
  v6 = sub_1B02DD348((uint64_t)a3);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 280))(&v8, a1, a2, v6);
  return sub_1B0303130(&v8);
}

void sub_1B02E962C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  *v1 = v3;
  sub_1B02EA238(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E9644(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B02E9700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B02E9720(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    sub_1B02D7758();
  result = (char *)sub_1B02D8648((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

uint64_t sub_1B02E9760(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B02E981C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02E983C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = MEMORY[0x1E0DE4F60];
  v3 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 24);
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE4FB8] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](a1 + 112);
  return a1;
}

uint64_t sub_1B02E98C0(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B02E997C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_1B02E999C(char **a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, int a6)
{
  unsigned __int8 **v9;
  unsigned __int8 *v10;
  int v11;
  unsigned __int8 *v14;
  _QWORD *v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  _BOOL4 v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  BOOL v34;
  unint64_t v35;
  unsigned __int8 *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;

  v9 = 0;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v10 = 0;
  if (a5)
  {
    v11 = a6;
    if (a3)
    {
      v9 = 0;
      v10 = 0;
      v14 = (unsigned __int8 *)(a2 + a3);
      v15 = a1 + 2;
      while (2)
      {
        v16 = &v10[a2];
        v17 = &v10[a2];
LABEL_5:
        v18 = a5;
        v19 = a4;
        while (*v17 != *v19)
        {
          ++v19;
          if (!--v18)
          {
            if (++v17 != v14)
              goto LABEL_5;
            goto LABEL_37;
          }
        }
        if (v17 != v14)
        {
          v20 = &v17[-a2];
          if (&v17[-a2] != (unsigned __int8 *)-1)
          {
            v21 = (unsigned __int8 *)(v20 - v10);
            v22 = v20 >= v10;
            if (!v11)
              v22 = v20 > v10;
            if (v22)
            {
              v23 = (unsigned __int8 *)(a3 - (_QWORD)v10);
              if (v23 >= v21)
                v24 = v21;
              else
                v24 = v23;
              if ((unint64_t)v9 >= *v15)
              {
                v25 = ((char *)v9 - *a1) >> 4;
                if ((unint64_t)(v25 + 1) >> 60)
                  sub_1B02D7758();
                v26 = *v15 - (_QWORD)*a1;
                v27 = v26 >> 3;
                if (v26 >> 3 <= (unint64_t)(v25 + 1))
                  v27 = v25 + 1;
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
                  v28 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v28 = v27;
                if (v28)
                  v29 = (char *)sub_1B02D8514((uint64_t)v15, v28);
                else
                  v29 = 0;
                v30 = &v29[16 * v25];
                *(_QWORD *)v30 = v16;
                *((_QWORD *)v30 + 1) = v24;
                v32 = *a1;
                v31 = a1[1];
                v33 = v30;
                if (v31 != *a1)
                {
                  do
                  {
                    *((_OWORD *)v33 - 1) = *((_OWORD *)v31 - 1);
                    v33 -= 16;
                    v31 -= 16;
                  }
                  while (v31 != v32);
                  v31 = *a1;
                }
                v9 = (unsigned __int8 **)(v30 + 16);
                *a1 = v33;
                a1[1] = v30 + 16;
                a1[2] = &v29[16 * v28];
                if (v31)
                  operator delete(v31);
                v11 = a6;
                v15 = a1 + 2;
              }
              else
              {
                *v9 = v16;
                v9[1] = v24;
                v9 += 2;
              }
              a1[1] = (char *)v9;
            }
            v10 = v20 + 1;
            if (a3 > (unint64_t)(v20 + 1))
              continue;
          }
        }
        break;
      }
    }
  }
LABEL_37:
  v34 = a3 > (unint64_t)v10;
  v35 = a3 - (_QWORD)v10;
  if (v34)
  {
    v36 = &v10[a2];
    v37 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v37)
    {
      v39 = ((char *)v9 - *a1) >> 4;
      if ((unint64_t)(v39 + 1) >> 60)
        sub_1B02D7758();
      v40 = v37 - (_QWORD)*a1;
      v41 = v40 >> 3;
      if (v40 >> 3 <= (unint64_t)(v39 + 1))
        v41 = v39 + 1;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v42 = 0xFFFFFFFFFFFFFFFLL;
      else
        v42 = v41;
      if (v42)
        v43 = (char *)sub_1B02D8514((uint64_t)(a1 + 2), v42);
      else
        v43 = 0;
      v44 = &v43[16 * v39];
      v45 = &v43[16 * v42];
      *(_QWORD *)v44 = v36;
      *((_QWORD *)v44 + 1) = v35;
      v38 = v44 + 16;
      v47 = *a1;
      v46 = a1[1];
      if (v46 != *a1)
      {
        do
        {
          *((_OWORD *)v44 - 1) = *((_OWORD *)v46 - 1);
          v44 -= 16;
          v46 -= 16;
        }
        while (v46 != v47);
        v46 = *a1;
      }
      *a1 = v44;
      a1[1] = v38;
      a1[2] = v45;
      if (v46)
        operator delete(v46);
    }
    else
    {
      *v9 = v36;
      v9[1] = (unsigned __int8 *)v35;
      v38 = (char *)(v9 + 2);
    }
    a1[1] = v38;
  }
  return a1;
}

void sub_1B02E9C40(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02E9C64(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02D7708(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B02E9CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1B02E9D04(&a9);
  _Unwind_Resume(a1);
}

void sub_1B02E9D04(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1B02E9D44((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1B02E9D44(uint64_t *a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *a1;
  for (i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0)
      operator delete(*(void **)(i - 24));
  }
  a1[1] = v2;
}

_QWORD *sub_1B02E9D90(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02DB178(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 16 * a2);
    a1[1] = &v4[16 * a2];
  }
  return a1;
}

void sub_1B02E9DE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B02E9E04(void *__src@<X0>, size_t __len@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  std::string *p_dst;
  std::string::size_type size;
  char *v10;
  int64_t v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string __dst;
  std::string *v18;
  std::string::size_type v19;

  sub_1B02DCB10(&__dst, __src, __len);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  v6 = *a3;
  v7 = a3[1];
  while (v6 != v7)
  {
    if (*(char *)(a4 + 23) < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a4 = 0;
      *(_BYTE *)(a4 + 23) = 0;
    }
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_dst = &__dst;
    else
      p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    else
      size = __dst.__r_.__value_.__l.__size_;
    v10 = *(char **)v6;
    v11 = *(_QWORD *)(v6 + 8);
    v12 = *(const std::string::value_type **)(v6 + 16);
    v13 = *(_QWORD *)(v6 + 24);
    v18 = p_dst;
    v19 = size;
    if (v11)
    {
      v14 = sub_1B02E9F98((uint64_t *)&v18, v10, v11, 0);
      if (v14 == -1)
      {
        v16 = 0;
      }
      else
      {
        v15 = v14;
        v16 = 0;
        do
        {
          std::string::append((std::string *)a4, (const std::string::value_type *)v18 + v16, v15 - v16);
          std::string::append((std::string *)a4, v12, v13);
          v16 = v15 + v11;
          v15 = sub_1B02E9F98((uint64_t *)&v18, v10, v11, v15 + v11);
        }
        while (v15 != -1);
      }
      p_dst = (std::string *)((char *)v18 + v16);
      size = v19 - v16;
    }
    std::string::append((std::string *)a4, (const std::string::value_type *)p_dst, size);
    std::string::operator=(&__dst, (const std::string *)a4);
    v6 += 32;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1B02E9F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02E9F98(uint64_t *a1, char *a2, int64_t a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  void *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v13;
  uint64_t v14;
  char *v15;

  v4 = a1[1];
  if (v4 < a4)
    return -1;
  if (a3)
  {
    v6 = *a1;
    v7 = (void *)(*a1 + a4);
    v8 = (char *)(v6 + v4);
    v9 = v6 + v4 - (_QWORD)v7;
    if (v9 >= a3)
    {
      v13 = *a2;
      do
      {
        v14 = v9 - a3;
        if (v14 == -1)
          break;
        v15 = (char *)memchr(v7, v13, v14 + 1);
        if (!v15)
          break;
        v10 = v15;
        if (!memcmp(v15, a2, a3))
          goto LABEL_6;
        v7 = v10 + 1;
        v9 = v8 - (v10 + 1);
      }
      while (v9 >= a3);
    }
    v10 = v8;
LABEL_6:
    if (v10 == v8)
      return -1;
    else
      return (uint64_t)&v10[-v6];
  }
  return a4;
}

void sub_1B02EA050(const char *a1)
{
  std::logic_error *exception;

  exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
  sub_1B02EA0A0(exception, a1);
  __cxa_throw(exception, (struct type_info *)off_1E60CA328, (void (*)(void *))MEMORY[0x1E0DE42E0]);
}

void sub_1B02EA08C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1B02EA0A0(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
  return result;
}

void sub_1B02EA0C4(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1B02E9D04(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1B02EA134(void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    sub_1B02EA174((uint64_t *)v2);
    operator delete(**a1);
  }
}

void sub_1B02EA174(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void sub_1B02EA1C8(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        v6 = v4;
        sub_1B02E9D04(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1B02EA238(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

uint64_t sub_1B02EA290(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1727);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1728);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B02EA34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02EA36C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x70uLL);
  result = sub_1B02EA3B4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B02EA3A0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02EA3B4(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E60CD5E8;
  sub_1B02F5B38(a1 + 3, 0);
  return a1;
}

void sub_1B02EA3EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1B02EA400(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD5E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B02EA410(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD5E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02EA440(uint64_t a1)
{
  return sub_1B02F5C58(a1 + 24);
}

_QWORD *sub_1B02EA44C@<X0>(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  _QWORD *result;

  v2 = operator new(0x48uLL);
  result = sub_1B02EA494(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_1B02EA480(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02EA494(_QWORD *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E60CD620;
  sub_1B02F6620(a1 + 3, 0);
  return a1;
}

void sub_1B02EA4CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1B02EA4E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD620;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B02EA4F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD620;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02EA520(uint64_t a1)
{
  return sub_1B02F66D8(a1 + 24);
}

uint64_t sub_1B02EA52C(uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1B02FDF78();
    JUMPOUT(0x1B5E07CD8);
  }
  return result;
}

void sub_1B02EA568(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, char *a4@<X3>, void **a5@<X4>, std::string *a6@<X8>)
{
  int v10;
  void *v11;
  size_t v12;
  std::string *p_p;
  std::string::size_type size;
  std::string *v15;
  std::string __p;
  std::string __dst;

  sub_1B02DCB10(&__dst, __src, __len);
  v10 = *((char *)a3 + 23);
  if (v10 >= 0)
    v11 = a3;
  else
    v11 = *a3;
  if (v10 >= 0)
    v12 = *((unsigned __int8 *)a3 + 23);
  else
    v12 = (size_t)a3[1];
  sub_1B02EA668(v11, v12, a4, a5, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v15 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a6 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1B02EA634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1B02EA668(void *__src@<X0>, size_t __len@<X1>, char *a3@<X2>, void **a4@<X3>, std::string *a5@<X8>)
{
  size_t v8;
  std::string *p_p;
  std::string::size_type size;
  std::string *v11;
  std::string __p;
  std::string __dst;

  sub_1B02DCB10(&__dst, __src, __len);
  v8 = strlen(a3);
  sub_1B02EA758(a3, v8, a4, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v11 = std::string::append(&__dst, (const std::string::value_type *)p_p, size);
  *a5 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1B02EA724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1B02EA758(void *__src@<X0>, size_t __len@<X1>, void **a3@<X2>, std::string *a4@<X8>)
{
  int v6;
  void *v7;
  size_t v8;
  void **v9;
  std::string::size_type v10;
  std::string *v11;
  void *__p[2];
  unsigned __int8 v13;
  std::string __dst;

  sub_1B02DCB10(&__dst, __src, __len);
  v6 = *((char *)a3 + 23);
  if (v6 >= 0)
    v7 = a3;
  else
    v7 = *a3;
  if (v6 >= 0)
    v8 = *((unsigned __int8 *)a3 + 23);
  else
    v8 = (size_t)a3[1];
  sub_1B02DCB10(__p, v7, v8);
  if ((v13 & 0x80u) == 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v10 = v13;
  else
    v10 = (std::string::size_type)__p[1];
  v11 = std::string::append(&__dst, (const std::string::value_type *)v9, v10);
  *a4 = *v11;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if ((char)v13 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1B02EA80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02EA840(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02EA8B4((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B02EA8B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v9;
  __int128 v10;
  _QWORD v12[3];
  char v13;
  __int128 v14;
  __int128 v15;

  v7 = a7;
  *(_QWORD *)&v15 = a6;
  *((_QWORD *)&v15 + 1) = a7;
  v14 = v15;
  v12[0] = a1;
  v12[1] = &v14;
  v12[2] = &v15;
  if (a3 != a5)
  {
    v9 = a7;
    do
    {
      v10 = *(_OWORD *)(a3 - 24);
      *(_QWORD *)(v9 - 8) = *(_QWORD *)(a3 - 8);
      *(_OWORD *)(v9 - 24) = v10;
      v9 -= 24;
      *(_QWORD *)(a3 - 16) = 0;
      *(_QWORD *)(a3 - 8) = 0;
      *(_QWORD *)(a3 - 24) = 0;
      v7 -= 24;
      a3 -= 24;
    }
    while (a3 != a5);
    *((_QWORD *)&v15 + 1) = v9;
  }
  v13 = 1;
  sub_1B02EA950((uint64_t)v12);
  return a6;
}

uint64_t sub_1B02EA950(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EA984(a1);
  return a1;
}

void sub_1B02EA984(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    v1 += 24;
  }
}

uint64_t sub_1B02EA9C8(uint64_t a1)
{
  sub_1B02EA9FC(a1, *(void ***)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B02EA9FC(uint64_t a1, void **a2)
{
  void **v2;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != a2);
  }
}

uint64_t sub_1B02EAA50(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  _QWORD *v4;
  _OWORD *v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      sub_1B02EAAD0((uint64_t **)a1, v4, (uint64_t)v6, v6);
      ++v6;
    }
    while (v6 != a3);
  }
  return a1;
}

void sub_1B02EAAB8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B02D7CDC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02EAAD0(uint64_t **a1, _QWORD *a2, uint64_t a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1B02EAB54(a1, a2, &v11, &v10, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v7 + 2) = *a4;
    sub_1B02D80E4(a1, v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_1B02EAB54(_QWORD *a1, _QWORD *a2, _QWORD *a3, uint64_t *a4, uint64_t a5)
{
  _QWORD *v9;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  _QWORD *v18;

  v9 = a1 + 1;
  if (a1 + 1 == a2 || sub_1B02D8138((uint64_t)(a1 + 2), a5, (uint64_t)(a2 + 4)))
  {
    if ((_QWORD *)*a1 == a2)
    {
      v12 = a2;
LABEL_16:
      if (*a2)
      {
        *a3 = v12;
        return v12 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    v11 = (_QWORD *)*a2;
    if (*a2)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)v11[1];
      }
      while (v11);
    }
    else
    {
      v16 = a2;
      do
      {
        v12 = (_QWORD *)v16[2];
        v17 = *v12 == (_QWORD)v16;
        v16 = v12;
      }
      while (v17);
    }
    if (sub_1B02D8138((uint64_t)(a1 + 2), (uint64_t)(v12 + 4), a5))
      goto LABEL_16;
    return sub_1B02D8048((uint64_t)a1, a3, a5);
  }
  if (sub_1B02D8138((uint64_t)(a1 + 2), (uint64_t)(a2 + 4), a5))
  {
    a4 = a2 + 1;
    v13 = a2[1];
    if (v13)
    {
      v14 = (_QWORD *)a2[1];
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      v18 = a2;
      do
      {
        v15 = (_QWORD *)v18[2];
        v17 = *v15 == (_QWORD)v18;
        v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_1B02D8138((uint64_t)(a1 + 2), a5, (uint64_t)(v15 + 4)))
        return sub_1B02D8048((uint64_t)a1, a3, a5);
      v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = a2;
    }
    return a4;
  }
  *a3 = a2;
  *a4 = (uint64_t)a2;
  return a4;
}

_QWORD *sub_1B02EACEC(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  _QWORD *v6;
  int v7;
  _QWORD *v8;

  v2 = (_QWORD *)(a1 + 8);
  v3 = *(_QWORD **)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 16;
  v6 = (_QWORD *)(a1 + 8);
  do
  {
    v7 = sub_1B02D8138(v5, (uint64_t)(v3 + 4), a2);
    v8 = v3 + 1;
    if (!v7)
    {
      v8 = v3;
      v6 = v3;
    }
    v3 = (_QWORD *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1B02D8138(v5, a2, (uint64_t)(v6 + 4)))
    return v2;
  return v6;
}

uint64_t sub_1B02EAD78(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = MEMORY[0x1E0DE4FD0];
  v3 = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 128) = MEMORY[0x1E0DE4FD0] + 104;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  v4 = a1 + 16;
  v5 = (_QWORD *)MEMORY[0x1E0DE4F50];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 16);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 24);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 24)) = v7;
  *(_QWORD *)(a1 + 8) = 0;
  v8 = (std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24));
  std::ios_base::init(v8, (void *)(a1 + 24));
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v9 = v5[4];
  v10 = v5[5];
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(v4 + *(_QWORD *)(v9 - 24)) = v10;
  v11 = v5[1];
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + *(_QWORD *)(v11 - 24)) = v5[6];
  *(_QWORD *)a1 = v2 + 24;
  *(_QWORD *)(a1 + 128) = v3;
  *(_QWORD *)(a1 + 16) = v2 + 64;
  std::streambuf::basic_streambuf();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_1B02EAE7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EAEA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = MEMORY[0x1E0DE4F50];
  v3 = *MEMORY[0x1E0DE4F50];
  *(_QWORD *)a1 = *MEMORY[0x1E0DE4F50];
  v4 = *(_QWORD *)(v2 + 72);
  *(_QWORD *)(a1 + *(_QWORD *)(v3 - 24)) = *(_QWORD *)(v2 + 64);
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DE4FB8] + 16;
  *(_QWORD *)(a1 + 16) = v4;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](a1 + 128);
  return a1;
}

_QWORD *sub_1B02EAF2C(_QWORD *result, __int128 *a2)
{
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;

  v2 = result;
  v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    result = sub_1B02EB0A8((_BYTE *)result[1], *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    *(_QWORD *)(v3 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_1B02EAF80(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EAF88(uint64_t *a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v15[2];
  char *v16;
  char *v17;
  uint64_t *v18;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D7758();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v18 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1B02D776C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  v16 = v11;
  v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8(v11, *(void **)a2, *((_QWORD *)a2 + 1));
    v11 = v16;
  }
  else
  {
    v12 = *a2;
    *((_QWORD *)v11 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v11 = v12;
  }
  v16 = v11 + 24;
  sub_1B02EA840(a1, v15);
  v13 = a1[1];
  sub_1B02EA9C8((uint64_t)v15);
  return v13;
}

void sub_1B02EB094(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EA9C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1B02EB0A8(_BYTE *__dst, void *__src, unint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8)
      sub_1B02D78C4();
    v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v6 = a3 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v5[1] = a3;
    v5[2] = v7 | 0x8000000000000000;
    *v5 = v8;
    v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }
  return memmove(v5, __src, a3 + 1);
}

char *sub_1B02EB134(uint64_t a1, __int128 **a2)
{
  uint64_t v3;
  char *result;

  v3 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  result = sub_1B02EB2B0((char *)v3, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 8) = v3 + 24;
  return result;
}

void sub_1B02EB188(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EB190(uint64_t *a1, __int128 **a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void *v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D7758();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1B02D776C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_1B02EB2B0(v11, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v15 += 24;
  sub_1B02EB468(a1, v14);
  v12 = a1[1];
  sub_1B02EB5F8(v14);
  return v12;
}

void sub_1B02EB29C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EB5F8((void **)va);
  _Unwind_Resume(a1);
}

char *sub_1B02EB2B0(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;

  if (a4)
  {
    v6 = result;
    sub_1B02D7708(result, a4);
    result = sub_1B02EB334((uint64_t)(v6 + 16), a2, a3, *((char **)v6 + 1));
    *((_QWORD *)v6 + 1) = result;
  }
  return result;
}

void sub_1B02EB314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v9 + 8) = v10;
  sub_1B02E9D04(&a9);
  _Unwind_Resume(a1);
}

char *sub_1B02EB334(uint64_t a1, __int128 *a2, __int128 *a3, char *__dst)
{
  char *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  char v10;
  char *v11;
  char *v12;

  v4 = __dst;
  v11 = __dst;
  v12 = __dst;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1B02EB0A8(v4, *(void **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        *((_QWORD *)v4 + 2) = *((_QWORD *)v6 + 2);
        *(_OWORD *)v4 = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v4 += 24;
      v12 = v4;
    }
    while (v6 != a3);
  }
  v10 = 1;
  sub_1B02EB3F0((uint64_t)v9);
  return v4;
}

void sub_1B02EB3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02EB3F0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EB3F0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EB424(a1);
  return a1;
}

void sub_1B02EB424(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  v1 = **(_QWORD **)(a1 + 16);
  v2 = **(_QWORD **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0)
      operator delete(*(void **)(v1 - 24));
    v1 -= 24;
  }
}

uint64_t sub_1B02EB468(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02EB4DC((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B02EB4DC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1B02EB57C((uint64_t)v11);
  return v9;
}

uint64_t sub_1B02EB57C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EB5B0(a1);
  return a1;
}

void sub_1B02EB5B0(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_1B02E9D04(&v3);
    v1 += 3;
  }
}

void **sub_1B02EB5F8(void **a1)
{
  sub_1B02EB628((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1B02EB628(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 24);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_1B02E9D04(&v5);
  }
}

_QWORD *sub_1B02EB678(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  _QWORD *result;

  v3 = *(_QWORD **)(a1 + 8);
  *v3 = 0;
  v3[1] = 0;
  v3[2] = 0;
  result = sub_1B02EB7DC(v3, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *(_QWORD *)(a1 + 8) = v3 + 3;
  return result;
}

void sub_1B02EB6C0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EB6C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D7758();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)sub_1B02D776C(v7, v9);
  else
    v10 = 0;
  v11 = &v10[24 * v4];
  v14[0] = v10;
  v14[1] = v11;
  v15 = v11;
  v16 = &v10[24 * v9];
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  sub_1B02EB7DC(v11, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v15 += 24;
  sub_1B02EB854(a1, v14);
  v12 = a1[1];
  sub_1B02EB9E0((uint64_t)v14);
  return v12;
}

void sub_1B02EB7C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EB9E0((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02EB7DC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1B02E9720(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B02EB838(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02EB854(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02EB8C8((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B02EB8C8(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1B02EB968((uint64_t)v11);
  return v9;
}

uint64_t sub_1B02EB968(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EB99C(a1);
  return a1;
}

void sub_1B02EB99C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 24;
  }
}

uint64_t sub_1B02EB9E0(uint64_t a1)
{
  sub_1B02EBA14(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B02EBA14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t sub_1B02EBA6C(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02EBB14((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_1B02EBAE0(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59)
    sub_1B02D72AC();
  return operator new(32 * a2);
}

uint64_t sub_1B02EBB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1B02EBBBC((uint64_t)v11);
  return v9;
}

uint64_t sub_1B02EBBBC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EBBF0(a1);
  return a1;
}

void sub_1B02EBBF0(uint64_t a1)
{
  void **v1;
  void **v2;
  void **v3;

  v1 = *(void ***)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(void ***)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = v1;
    sub_1B02E9D04(&v3);
    v1 += 4;
  }
}

void **sub_1B02EBC38(void **a1)
{
  sub_1B02EBC68((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_1B02EBC68(uint64_t a1)
{
  uint64_t i;
  uint64_t v2;
  void **v4;
  void **v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (void **)(i - 32);
    *(_QWORD *)(a1 + 16) = v4;
    v5 = v4;
    sub_1B02E9D04(&v5);
  }
}

float sub_1B02EBCB8(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_1B02EB2B0((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B02EBD20(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EBD28(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void *v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_1B02D7758();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_1B02EBAE0(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_1B02EB2B0(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B02EBA6C(a1, v16);
  v14 = a1[1];
  sub_1B02EBC38(v16);
  return v14;
}

void sub_1B02EBE20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBC38((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EBE34(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02EBEA8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B02EBEA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1B02EBF50((uint64_t)v11);
  return v9;
}

uint64_t sub_1B02EBF50(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EBF84(a1);
  return a1;
}

void sub_1B02EBF84(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    v3 = *(void **)v1;
    if (*(_QWORD *)v1)
    {
      *(_QWORD *)(v1 + 8) = v3;
      operator delete(v3);
    }
    v1 += 32;
  }
}

uint64_t sub_1B02EBFC8(uint64_t a1)
{
  sub_1B02EBFFC(a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B02EBFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 32);
    *(_QWORD *)(a1 + 16) = v2 - 32;
    if (v5)
    {
      *(_QWORD *)(v2 - 24) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
}

float sub_1B02EC054(uint64_t a1, uint64_t a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_1B02EB7DC((_QWORD *)v5, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B02EC0B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EC0B8(uint64_t *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_1B02D7758();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_1B02EBAE0(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_1B02EB7DC(v13, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B02EBE34(a1, v16);
  v14 = a1[1];
  sub_1B02EBFC8((uint64_t)v16);
  return v14;
}

void sub_1B02EC1A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02EC1B8(_QWORD *a1, unint64_t a2, _DWORD *a3)
{
  _DWORD *v6;
  _DWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02E9720(a1, a2);
    v6 = (_DWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 4 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 4;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B02EC21C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02EC238(uint64_t a1, float *a2, float *a3)
{
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1B02EC388((char *)a1, a2, a3, a3 - a2);
  sub_1B02EC290((double **)a1);
  return a1;
}

void sub_1B02EC274(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B02EC290(double **a1)
{
  double *v1;
  double *v2;
  uint64_t v4;
  double v5;
  double *v6;
  double v7;
  double *v8;
  uint64_t v9;
  double *v10;
  double *v11;
  double v12;
  double *v13;
  double v14;
  double *v15;
  double *v16;
  __int128 v17;

  v1 = *a1;
  v2 = a1[1];
  if (*a1 != v2)
  {
    if ((unint64_t)((char *)v2 - (char *)v1) < 9)
    {
      a1[1] = v1;
      sub_1B02EC43C((uint64_t)a1);
    }
    else
    {
      v4 = v2 - v1;
      v5 = 0.0;
      v6 = *a1;
      do
      {
        v7 = *v6++;
        v5 = v5 + v7;
      }
      while (v6 != v2);
      while (v1 < v2)
      {
        *v1 = *v1 / v5;
        ++v1;
      }
      sub_1B02EC4F0(&v16, v4 - 1);
      v8 = *a1;
      v9 = (uint64_t)(a1[1] - 1);
      v10 = v16;
      if (*a1 != (double *)v9)
      {
        v11 = v8 + 1;
        v12 = *v8;
        *v16 = *v8;
        if (v8 + 1 != (double *)v9)
        {
          v13 = v10 + 1;
          do
          {
            v14 = *v11++;
            v12 = v12 + v14;
            *v13++ = v12;
          }
          while (v11 != (double *)v9);
        }
      }
      *a1 = v10;
      v15 = a1[2];
      *(_OWORD *)(a1 + 1) = v17;
      v16 = v8;
      *((_QWORD *)&v17 + 1) = v15;
      if (v8)
      {
        *(_QWORD *)&v17 = v8;
        operator delete(v8);
      }
    }
  }
}

char *sub_1B02EC388(char *result, float *a2, float *a3, unint64_t a4)
{
  char *v6;
  double *v7;
  float v8;

  if (a4)
  {
    v6 = result;
    result = sub_1B02EC3FC(result, a4);
    v7 = (double *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1B02EC3E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B02EC3FC(_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 61)
    sub_1B02D7758();
  result = (char *)sub_1B02D7E30((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void sub_1B02EC43C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  _BYTE *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1 + 16;
  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(char **)a1;
  v5 = *(_BYTE **)(a1 + 8);
  v6 = (v5 - v4) >> 3;
  if (v6 < (v3 - (uint64_t)v4) >> 3)
  {
    if (v5 == v4)
    {
      v11 = 0;
      v9 = 8 * v6;
    }
    else
    {
      v7 = (char *)sub_1B02D7E30(v2, v6);
      v4 = *(char **)a1;
      v8 = *(char **)(a1 + 8);
      v9 = (uint64_t)&v7[8 * v6];
      v11 = &v7[8 * v10];
      if (v8 != *(char **)a1)
      {
        v12 = v9;
        do
        {
          v13 = *((_QWORD *)v8 - 1);
          v8 -= 8;
          *(_QWORD *)(v12 - 8) = v13;
          v12 -= 8;
        }
        while (v8 != v4);
        goto LABEL_9;
      }
    }
    v12 = v9;
LABEL_9:
    *(_QWORD *)a1 = v12;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v11;
    if (v4)
      operator delete(v4);
  }
}

_QWORD *sub_1B02EC4F0(_QWORD *a1, unint64_t a2)
{
  char *v4;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02EC3FC(a1, a2);
    v4 = (char *)a1[1];
    bzero(v4, 8 * a2);
    a1[1] = &v4[8 * a2];
  }
  return a1;
}

void sub_1B02EC548(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B02EC564(uint64_t a1, uint64_t a2, double **a3)
{
  double *v5;
  double *v6;
  unsigned int v7;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  double *v11;
  double *v12;
  double v13;

  v5 = *a3;
  v6 = a3[1];
  v7 = sub_1B02EC618(a2);
  v8 = sub_1B02EC618(a2);
  if (v6 != v5)
  {
    v9 = v6 - v5;
    do
    {
      v10 = v9 >> 1;
      v11 = &v5[v9 >> 1];
      v13 = *v11;
      v12 = v11 + 1;
      v9 += ~(v9 >> 1);
      if (((double)v7 + (double)v8 * 4294967300.0) * 5.42101086e-20 + 0.0 < v13)
        v9 = v10;
      else
        v5 = v12;
    }
    while (v9);
    v6 = v5;
  }
  return (unint64_t)((char *)v6 - (char *)*a3) >> 3;
}

uint64_t sub_1B02EC618(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  unsigned int v3;

  v1 = *(_QWORD *)(a1 + 2496);
  v2 = (v1 + 1) % 0x270uLL;
  v3 = *(_DWORD *)(a1 + 4 * ((v1 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(a1 + 4 * v2) & 0x7FFFFFFE | *(_DWORD *)(a1 + 4 * v1) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(a1 + 4 * v2) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(a1 + 4 * v1) = v3;
  *(_QWORD *)(a1 + 2496) = v2;
  LODWORD(v1) = ((v3 ^ (v3 >> 11)) << 7) & 0x9D2C5680 ^ v3 ^ (v3 >> 11);
  return ((_DWORD)v1 << 15) & 0xEFC60000 ^ v1 ^ ((((_DWORD)v1 << 15) & 0xEFC60000 ^ v1) >> 18);
}

uint64_t sub_1B02EC6B8(uint64_t *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  char *v10;
  char *v11;
  _BYTE *v12;
  char *v13;
  uint64_t *v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D7758();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  v14 = a1 + 2;
  if (v6)
    v7 = (char *)sub_1B02D776C((uint64_t)(a1 + 2), v6);
  else
    v7 = 0;
  v10 = v7;
  v11 = &v7[24 * v3];
  v13 = &v7[24 * v6];
  sub_1B02EC7C4((_DWORD)a1 + 16, v11, a2);
  v12 = v11 + 24;
  sub_1B02EA840(a1, &v10);
  v8 = a1[1];
  sub_1B02EA9C8((uint64_t)&v10);
  return v8;
}

void sub_1B02EC7B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EA9C8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02EC7C4(int a1, _BYTE *__dst, uint64_t a3)
{
  _QWORD *v3;
  size_t v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v3 = __dst;
  v4 = *(_QWORD *)(a3 + 8);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v5 = *(const void **)a3;
  if (v4 >= 0x17)
  {
    v6 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v6 = v4 | 7;
    v7 = v6 + 1;
    v8 = operator new(v6 + 1);
    v3[1] = v4;
    v3[2] = v7 | 0x8000000000000000;
    *v3 = v8;
    v3 = v8;
  }
  else
  {
    __dst[23] = v4;
    if (!v4)
      goto LABEL_9;
  }
  memmove(v3, v5, v4);
LABEL_9:
  *((_BYTE *)v3 + v4) = 0;
}

uint64_t sub_1B02EC85C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;

  if (a2 != a1)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
    if ((v2 & 1) != 0)
      v3 = (_QWORD *)*v3;
    v4 = *(_QWORD *)(a2 + 8);
    v5 = (_QWORD *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    if ((v4 & 1) != 0)
      v5 = (_QWORD *)*v5;
    if (v3 == v5)
      return (uint64_t)sub_1B02F5894(a1, a2);
    else
      return sub_1B030FFB0(a1, a2);
  }
  return a1;
}

uint64_t sub_1B02EC8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;

  *(_QWORD *)(a1 + 8) = 0;
  v4 = (_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = a1 + 8;
  if (a3)
  {
    v6 = 24 * a3;
    do
    {
      sub_1B02EC920((uint64_t **)a1, v4, a2, a2);
      a2 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1B02EC908(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B02D7CDC(v1, *(_QWORD **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1B02EC920(uint64_t **a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v6;
  _OWORD *v7;
  uint64_t **v8;
  uint64_t v10;
  uint64_t v11;

  v6 = sub_1B02EAB54(a1, a2, &v11, &v10, a3);
  v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = operator new(0x38uLL);
    v7[2] = *(_OWORD *)a4;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a4 + 16);
    sub_1B02D80E4(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

_QWORD *sub_1B02EC9AC(_QWORD *a1)
{
  *a1 = &off_1E60CC5A8;
  sub_1B02ECA24((uint64_t)a1);
  return a1;
}

void sub_1B02EC9E0(_QWORD *a1)
{
  *a1 = &off_1E60CC5A8;
  sub_1B02ECA24((uint64_t)a1);
  JUMPOUT(0x1B5E07CD8);
}

void *sub_1B02ECA24(uint64_t a1)
{
  int v2;
  void *result;

  v2 = *(_DWORD *)(a1 + 24);
  if ((v2 & 0x80000000) == 0)
  {
    close(v2);
    *(_DWORD *)(a1 + 24) = -1;
  }
  result = *(void **)(a1 + 8);
  if (result)
    result = (void *)munmap(result, *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = 0;
  return result;
}

double sub_1B02ECA68@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__parent_path(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

double sub_1B02ECB28@<D0>(const std::__fs::filesystem::path *a1@<X0>, uint64_t a2@<X8>)
{
  std::__fs::filesystem::path::__string_view v3;
  __int128 *p_dst;
  std::basic_string_view<_CharT, _Traits>::size_type v5;
  std::basic_string_view<_CharT, _Traits>::size_type v6;
  double result;
  __int128 __dst;
  unint64_t v9;

  v3 = std::__fs::filesystem::path::__filename(a1);
  if (v3.__size_ >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v3.__size_ >= 0x17)
  {
    v5 = (v3.__size_ & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3.__size_ | 7) != 0x17)
      v5 = v3.__size_ | 7;
    v6 = v5 + 1;
    p_dst = (__int128 *)operator new(v5 + 1);
    *((_QWORD *)&__dst + 1) = v3.__size_;
    v9 = v6 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v9) = v3.__size_;
    p_dst = &__dst;
    if (!v3.__size_)
      goto LABEL_9;
  }
  memmove(p_dst, v3.__data_, v3.__size_);
LABEL_9:
  *((_BYTE *)p_dst + v3.__size_) = 0;
  result = *(double *)&__dst;
  *(_OWORD *)a2 = __dst;
  *(_QWORD *)(a2 + 16) = v9;
  return result;
}

_QWORD *sub_1B02ECBE8(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  while (a2 != a3)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
    ++a2;
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_1B02D7994(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_1B02ECCC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *sub_1B02ECCE8(std::string *this, char **a2)
{
  char *v3;
  char *v4;

  *(_OWORD *)&this->__r_.__value_.__l.__data_ = 0uLL;
  this->__r_.__value_.__r.__words[2] = 0;
  v3 = *a2;
  v4 = v3 - 1;
  while (*++v4)
    ;
  sub_1B02ECD44(this, v3, v4);
  return this;
}

void sub_1B02ECD28(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::string *sub_1B02ECD44(std::string *this, char *a2, char *a3)
{
  char *v4;
  unint64_t v6;
  unint64_t v7;
  std::string::size_type size;
  std::string::size_type v9;
  std::string *v10;
  unint64_t v11;
  void **v12;
  std::string::size_type v13;
  std::string *v14;
  _BYTE *i;
  char v16;
  std::string::size_type v17;
  void *__p[2];
  unsigned __int8 v20;

  v4 = a2;
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  v7 = a3 - a2;
  if ((v6 & 0x80000000) != 0)
  {
    if (a3 == a2)
      return this;
    size = this->__r_.__value_.__l.__size_;
    v11 = this->__r_.__value_.__r.__words[2];
    v9 = (v11 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v10 = (std::string *)this->__r_.__value_.__r.__words[0];
    v6 = HIBYTE(v11);
  }
  else
  {
    if (a3 == a2)
      return this;
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    v9 = 22;
    v10 = this;
  }
  if (v10 > (std::string *)v4 || (char *)&v10->__r_.__value_.__l.__data_ + size + 1 <= v4)
  {
    if (v9 - size < v7)
    {
      std::string::__grow_by(this, v9, size - v9 + v7, size, size, 0, 0);
      this->__r_.__value_.__l.__size_ = size;
      LOBYTE(v6) = *((_BYTE *)&this->__r_.__value_.__s + 23);
    }
    v14 = this;
    if ((v6 & 0x80) != 0)
      v14 = (std::string *)this->__r_.__value_.__r.__words[0];
    for (i = (char *)v14 + size; v4 != a3; ++i)
    {
      v16 = *v4++;
      *i = v16;
    }
    *i = 0;
    v17 = v7 + size;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      this->__r_.__value_.__l.__size_ = v17;
    else
      *((_BYTE *)&this->__r_.__value_.__s + 23) = v17 & 0x7F;
  }
  else
  {
    sub_1B02ECEB8(__p, v4, a3, v7);
    if ((v20 & 0x80u) == 0)
      v12 = __p;
    else
      v12 = (void **)__p[0];
    if ((v20 & 0x80u) == 0)
      v13 = v20;
    else
      v13 = (std::string::size_type)__p[1];
    std::string::append(this, (const std::string::value_type *)v12, v13);
    if ((char)v20 < 0)
      operator delete(__p[0]);
  }
  return this;
}

void sub_1B02ECE9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B02ECEB8(_QWORD *result, char *a2, char *a3, unint64_t a4)
{
  _QWORD *v4;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (a4 > 0x16)
  {
    v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v8 = a4 | 7;
    v9 = v8 + 1;
    result = operator new(v8 + 1);
    v4[1] = a4;
    v4[2] = v9 | 0x8000000000000000;
    *v4 = result;
    v4 = result;
  }
  else
  {
    *((_BYTE *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    v10 = *a2++;
    *(_BYTE *)v4 = v10;
    v4 = (_QWORD *)((char *)v4 + 1);
  }
  *(_BYTE *)v4 = 0;
  return result;
}

void sub_1B02ECF5C()
{
  __assert_rtn("_internal_set_type", "sentencepiece_model.pb.h", 4686, "::sentencepiece::ModelProto_SentencePiece_Type_IsValid(value)");
}

uint64_t sub_1B02ECF84(uint64_t a1)
{
  void *v2;
  void **v4;

  *(_QWORD *)a1 = &off_1E60CC808;
  sub_1B02F361C((_QWORD *)(a1 + 96));
  v4 = (void **)(a1 + 72);
  sub_1B02EA134(&v4);
  v4 = (void **)(a1 + 48);
  sub_1B02EA134(&v4);
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B02ECFF4(uint64_t a1)
{
  sub_1B02ECF84(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02ED018(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  v6 = (char **)(a1 + 1);
  if (v2 == (a1[2] - v5) >> 3)
  {
    v7 = 48 * v3;
    is_mul_ok(v3, 0x30uLL);
    v8 = (_QWORD *)operator new[]();
    v9 = v8;
    if (v3)
    {
      v10 = v8;
      do
      {
        *v10 = 0;
        v10[1] = 0;
        v10 += 6;
        v7 -= 48;
      }
      while (v7);
    }
    bzero(v8, 48 * a1[6]);
    v11 = a1[3];
    v12 = (_QWORD *)a1[2];
    if ((unint64_t)v12 >= v11)
    {
      v14 = ((char *)v12 - *v6) >> 3;
      if ((unint64_t)(v14 + 1) >> 61)
        sub_1B02D7758();
      v15 = v11 - (_QWORD)*v6;
      v16 = v15 >> 2;
      if (v15 >> 2 <= (unint64_t)(v14 + 1))
        v16 = v14 + 1;
      if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17)
        v18 = (char *)sub_1B02D7E30((uint64_t)(a1 + 3), v17);
      else
        v18 = 0;
      v19 = &v18[8 * v14];
      v20 = &v18[8 * v17];
      *(_QWORD *)v19 = v9;
      v13 = v19 + 8;
      v22 = (char *)a1[1];
      v21 = (char *)a1[2];
      if (v21 != v22)
      {
        do
        {
          v23 = *((_QWORD *)v21 - 1);
          v21 -= 8;
          *((_QWORD *)v19 - 1) = v23;
          v19 -= 8;
        }
        while (v21 != v22);
        v21 = *v6;
      }
      a1[1] = v19;
      a1[2] = v13;
      a1[3] = v20;
      if (v21)
        operator delete(v21);
    }
    else
    {
      *v12 = v9;
      v13 = v12 + 1;
    }
    a1[2] = v13;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 48 * v4;
  a1[4] = v4 + 1;
  return result;
}

void sub_1B02ED198(_QWORD *a1)
{
  sub_1B02EA174(a1 + 6);
  sub_1B02EA174(a1 + 9);
  a1[1] = "";
  a1[2] = 0;
  a1[4] = a1[3];
  sub_1B02ED1DC((uint64_t)(a1 + 12));
}

void sub_1B02ED1DC(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 40);
  if (v2 + 1 < (int)((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3))
    v3 = v2 + 1;
  else
    v3 = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  if (v3 >= 1)
  {
    v4 = 0;
    v5 = 8 * v3;
    do
    {
      bzero(*(void **)(*(_QWORD *)(a1 + 8) + v4), 48 * *(_QWORD *)(a1 + 48));
      v4 += 8;
    }
    while (v5 != v4);
  }
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
}

void sub_1B02ED254(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  char **v6;
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  int v31;
  unsigned int v32;
  uint64_t v33;
  _DWORD *v34;
  void **v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  _DWORD *v49;
  _DWORD *v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  unint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  uint64_t v65;

  sub_1B02ED198((_QWORD *)a1);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  v6 = (char **)(a1 + 24);
  sub_1B02DC960((void **)(a1 + 24), a3 + 1);
  if (a3)
  {
    v7 = (_QWORD *)(a1 + 40);
    v8 = *(_QWORD **)(a1 + 32);
    do
    {
      if ((int)a3 >= asc_1B03A8CD7[(unint64_t)*a2 >> 4])
        v9 = asc_1B03A8CD7[(unint64_t)*a2 >> 4];
      else
        v9 = a3;
      if ((unint64_t)v8 >= *v7)
      {
        v10 = ((char *)v8 - *v6) >> 3;
        if ((unint64_t)(v10 + 1) >> 61)
          goto LABEL_76;
        v11 = *v7 - (_QWORD)*v6;
        v12 = v11 >> 2;
        if (v11 >> 2 <= (unint64_t)(v10 + 1))
          v12 = v10 + 1;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
          v13 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13)
          v14 = (char *)sub_1B02D7E30(a1 + 40, v13);
        else
          v14 = 0;
        v15 = &v14[8 * v10];
        *(_QWORD *)v15 = a2;
        v8 = v15 + 8;
        v17 = *(char **)(a1 + 24);
        v16 = *(char **)(a1 + 32);
        if (v16 != v17)
        {
          do
          {
            v18 = *((_QWORD *)v16 - 1);
            v16 -= 8;
            *((_QWORD *)v15 - 1) = v18;
            v15 -= 8;
          }
          while (v16 != v17);
          v16 = *v6;
        }
        *(_QWORD *)(a1 + 24) = v15;
        *(_QWORD *)(a1 + 32) = v8;
        *(_QWORD *)(a1 + 40) = &v14[8 * v13];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v8++ = a2;
      }
      *(_QWORD *)(a1 + 32) = v8;
      a2 += v9;
      a3 -= v9;
    }
    while (a3);
  }
  else
  {
    v8 = *(_QWORD **)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v8 >= v19)
  {
    v21 = ((char *)v8 - *v6) >> 3;
    if ((unint64_t)(v21 + 1) >> 61)
LABEL_76:
      sub_1B02D7758();
    v22 = v19 - (_QWORD)*v6;
    v23 = v22 >> 2;
    if (v22 >> 2 <= (unint64_t)(v21 + 1))
      v23 = v21 + 1;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v24 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v24 = v23;
    if (v24)
      v25 = (char *)sub_1B02D7E30(a1 + 40, v24);
    else
      v25 = 0;
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v24];
    *(_QWORD *)v26 = a2;
    v20 = v26 + 8;
    v29 = *(char **)(a1 + 24);
    v28 = *(char **)(a1 + 32);
    if (v28 != v29)
    {
      do
      {
        v30 = *((_QWORD *)v28 - 1);
        v28 -= 8;
        *((_QWORD *)v26 - 1) = v30;
        v26 -= 8;
      }
      while (v28 != v29);
      v28 = *v6;
    }
    *(_QWORD *)(a1 + 24) = v26;
    *(_QWORD *)(a1 + 32) = v20;
    *(_QWORD *)(a1 + 40) = v27;
    if (v28)
      operator delete(v28);
  }
  else
  {
    *v8 = a2;
    v20 = v8 + 1;
  }
  *(_QWORD *)(a1 + 32) = v20;
  v31 = (((unint64_t)v20 - *(_QWORD *)(a1 + 24)) >> 3) - 1;
  v32 = v31 & ~(v31 >> 31);
  sub_1B02ED690((uint64_t *)(a1 + 48), v32 + 1);
  sub_1B02ED690((uint64_t *)(a1 + 72), v32 + 1);
  v33 = 0;
  do
  {
    sub_1B02DC960((void **)(*(_QWORD *)(a1 + 48) + v33), 0x10uLL);
    sub_1B02DC960((void **)(*(_QWORD *)(a1 + 72) + v33), 0x10uLL);
    v33 += 24;
  }
  while (24 * v32 + 24 != v33);
  v34 = (_DWORD *)sub_1B02ED018((_QWORD *)(a1 + 96));
  v34[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v34[7] = -1;
  v34[4] = 0;
  v35 = *(void ***)(a1 + 72);
  v36 = v35[1];
  v37 = (unint64_t)v35[2];
  if ((unint64_t)v36 >= v37)
  {
    v39 = ((char *)v36 - (_BYTE *)*v35) >> 3;
    if ((unint64_t)(v39 + 1) >> 61)
      sub_1B02D7758();
    v40 = v37 - (_QWORD)*v35;
    v41 = v40 >> 2;
    if (v40 >> 2 <= (unint64_t)(v39 + 1))
      v41 = v39 + 1;
    if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      v42 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v42 = v41;
    if (v42)
      v43 = (char *)sub_1B02D7E30((uint64_t)(v35 + 2), v42);
    else
      v43 = 0;
    v44 = &v43[8 * v39];
    v45 = &v43[8 * v42];
    *(_QWORD *)v44 = v34;
    v38 = v44 + 8;
    v47 = (char *)*v35;
    v46 = (char *)v35[1];
    if (v46 != *v35)
    {
      do
      {
        v48 = *((_QWORD *)v46 - 1);
        v46 -= 8;
        *((_QWORD *)v44 - 1) = v48;
        v44 -= 8;
      }
      while (v46 != v47);
      v46 = (char *)*v35;
    }
    *v35 = v44;
    v35[1] = v38;
    v35[2] = v45;
    if (v46)
      operator delete(v46);
  }
  else
  {
    *v36 = v34;
    v38 = v36 + 1;
  }
  v35[1] = v38;
  v49 = (_DWORD *)sub_1B02ED018((_QWORD *)(a1 + 96));
  v50 = v49;
  v49[6] = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  v49[7] = -1;
  v49[4] = v32;
  v51 = (void **)(*(_QWORD *)(a1 + 48) + 24 * v32);
  v52 = v51 + 1;
  v53 = v51[1];
  v54 = (unint64_t)v51[2];
  if ((unint64_t)v53 >= v54)
  {
    v56 = ((char *)v53 - (_BYTE *)*v51) >> 3;
    if ((unint64_t)(v56 + 1) >> 61)
      sub_1B02D7758();
    v57 = v54 - (_QWORD)*v51;
    v58 = v57 >> 2;
    if (v57 >> 2 <= (unint64_t)(v56 + 1))
      v58 = v56 + 1;
    if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
      v59 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v59 = v58;
    if (v59)
      v60 = (char *)sub_1B02D7E30((uint64_t)(v51 + 2), v59);
    else
      v60 = 0;
    v61 = &v60[8 * v56];
    v62 = &v60[8 * v59];
    *(_QWORD *)v61 = v50;
    v55 = v61 + 8;
    v63 = (char *)*v52;
    v64 = (char *)*v51;
    if (*v52 != *v51)
    {
      do
      {
        v65 = *((_QWORD *)v63 - 1);
        v63 -= 8;
        *((_QWORD *)v61 - 1) = v65;
        v61 -= 8;
      }
      while (v63 != v64);
      v63 = (char *)*v51;
    }
    *v51 = v61;
    *v52 = v55;
    v51[2] = v62;
    if (v63)
      operator delete(v63);
  }
  else
  {
    *v53 = v49;
    v55 = v53 + 1;
  }
  *v52 = v55;
}

void sub_1B02ED690(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;

  v3 = a1[1];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1B02F3698(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 24 * a2;
    if (v3 != v7)
    {
      v8 = a1[1];
      do
      {
        v10 = *(void **)(v8 - 24);
        v8 -= 24;
        v9 = v10;
        if (v10)
        {
          *(_QWORD *)(v3 - 16) = v9;
          operator delete(v9);
        }
        v3 = v8;
      }
      while (v8 != v7);
    }
    a1[1] = v7;
  }
}

uint64_t sub_1B02ED724(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  void **v13;
  uint64_t *v14;
  unint64_t v15;
  char **v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void **v28;
  void **v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;

  v6 = sub_1B02ED018((_QWORD *)(a1 + 96));
  v7 = v6;
  v8 = *(_DWORD *)(a1 + 128) + *(_DWORD *)(a1 + 136) * *(_DWORD *)(a1 + 144) - 1;
  *(_DWORD *)(v6 + 20) = a3;
  *(_DWORD *)(v6 + 24) = v8;
  *(_DWORD *)(v6 + 16) = a2;
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(v9 + 8 * (a3 + a2));
  v11 = *(_QWORD *)(v9 + 8 * a2);
  *(_QWORD *)v6 = v11;
  *(_QWORD *)(v6 + 8) = (int)v10 - (int)v11;
  v12 = (uint64_t **)(*(_QWORD *)(a1 + 48) + 24 * a2);
  v13 = (void **)(v12 + 1);
  v14 = v12[1];
  v16 = (char **)(v12 + 2);
  v15 = (unint64_t)v12[2];
  if ((unint64_t)v14 >= v15)
  {
    v18 = v14 - *v12;
    if ((unint64_t)(v18 + 1) >> 61)
      sub_1B02D7758();
    v19 = v15 - (_QWORD)*v12;
    v20 = v19 >> 2;
    if (v19 >> 2 <= (unint64_t)(v18 + 1))
      v20 = v18 + 1;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v20;
    if (v21)
      v22 = (char *)sub_1B02D7E30((uint64_t)v16, v21);
    else
      v22 = 0;
    v23 = (uint64_t *)&v22[8 * v18];
    v24 = &v22[8 * v21];
    *v23 = v7;
    v17 = v23 + 1;
    v25 = (char *)*v13;
    v26 = (char *)*v12;
    if (*v13 != *v12)
    {
      do
      {
        v27 = *((_QWORD *)v25 - 1);
        v25 -= 8;
        *--v23 = v27;
      }
      while (v25 != v26);
      v25 = (char *)*v12;
    }
    *v12 = v23;
    *v13 = v17;
    *v16 = v24;
    if (v25)
      operator delete(v25);
  }
  else
  {
    *v14 = v6;
    v17 = v14 + 1;
  }
  *v13 = v17;
  v28 = (void **)(*(_QWORD *)(a1 + 72) + 24 * (*(_DWORD *)(v7 + 20) + a2));
  v29 = v28 + 1;
  v30 = (uint64_t *)v28[1];
  v31 = (unint64_t)v28[2];
  if ((unint64_t)v30 >= v31)
  {
    v33 = ((char *)v30 - (_BYTE *)*v28) >> 3;
    if ((unint64_t)(v33 + 1) >> 61)
      sub_1B02D7758();
    v34 = v31 - (_QWORD)*v28;
    v35 = v34 >> 2;
    if (v34 >> 2 <= (unint64_t)(v33 + 1))
      v35 = v33 + 1;
    if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8)
      v36 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v36 = v35;
    if (v36)
      v37 = (char *)sub_1B02D7E30((uint64_t)(v28 + 2), v36);
    else
      v37 = 0;
    v38 = (uint64_t *)&v37[8 * v33];
    v39 = &v37[8 * v36];
    *v38 = v7;
    v32 = v38 + 1;
    v40 = (char *)*v29;
    v41 = (char *)*v28;
    if (*v29 != *v28)
    {
      do
      {
        v42 = *((_QWORD *)v40 - 1);
        v40 -= 8;
        *--v38 = v42;
      }
      while (v40 != v41);
      v40 = (char *)*v28;
    }
    *v28 = v38;
    *v29 = v32;
    v28[2] = v39;
    if (v40)
      operator delete(v40);
  }
  else
  {
    *v30 = v7;
    v32 = v30 + 1;
  }
  *v29 = v32;
  return v7;
}

void sub_1B02ED948(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  uint64_t v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void *v33;
  char *v34;
  char *v36;
  uint64_t v37;
  BOOL v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  void *__p;
  char *v46;
  char *v47;

  v3 = 0;
  v4 = ((a1[4] - a1[3]) >> 3) - 1;
  v5 = v4 & ~(v4 >> 31);
  v6 = a1[6];
  while (1)
  {
    v7 = (uint64_t **)(v6 + 24 * v3);
    v8 = *v7;
    v9 = v7[1];
    if (v8 != v9)
      break;
LABEL_14:
    if (++v3 == v5 + 1)
    {
      __p = 0;
      v46 = 0;
      v47 = 0;
      v21 = **(_QWORD **)(v6 + 24 * v5);
      v22 = *(_DWORD *)(v21 + 36);
      v23 = *(_QWORD *)(v21 + 40);
      if (*(_QWORD *)(v23 + 40))
      {
        v24 = 0;
        do
        {
          if (v24 >= v47)
          {
            v25 = (v24 - (_BYTE *)__p) >> 3;
            if ((unint64_t)(v25 + 1) >> 61)
              sub_1B02D7758();
            v26 = (v47 - (_BYTE *)__p) >> 2;
            if (v26 <= v25 + 1)
              v26 = v25 + 1;
            if ((unint64_t)(v47 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF8)
              v27 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v27 = v26;
            if (v27)
              v28 = (char *)sub_1B02D7E30((uint64_t)&v47, v27);
            else
              v28 = 0;
            v29 = &v28[8 * v25];
            *(_QWORD *)v29 = v23;
            v24 = v29 + 8;
            v31 = (char *)__p;
            v30 = v46;
            if (v46 != __p)
            {
              do
              {
                v32 = *((_QWORD *)v30 - 1);
                v30 -= 8;
                *((_QWORD *)v29 - 1) = v32;
                v29 -= 8;
              }
              while (v30 != v31);
              v30 = (char *)__p;
            }
            __p = v29;
            v46 = v24;
            v47 = &v28[8 * v27];
            if (v30)
              operator delete(v30);
          }
          else
          {
            *(_QWORD *)v24 = v23;
            v24 += 8;
          }
          v46 = v24;
          v23 = *(_QWORD *)(v23 + 40);
        }
        while (*(_QWORD *)(v23 + 40));
        v33 = __p;
        v34 = v24 - 8;
        if (__p != v24 && v34 > __p)
        {
          v36 = (char *)__p + 8;
          do
          {
            v37 = *((_QWORD *)v36 - 1);
            *((_QWORD *)v36 - 1) = *(_QWORD *)v34;
            *(_QWORD *)v34 = v37;
            v34 -= 8;
            v38 = v36 >= v34;
            v36 += 8;
          }
          while (!v38);
          v33 = __p;
          v24 = v46;
        }
      }
      else
      {
        v24 = 0;
        v33 = 0;
      }
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      sub_1B02F27CC((_QWORD *)a2, v33, (uint64_t)v24, (v24 - (_BYTE *)v33) >> 3);
      *(_DWORD *)(a2 + 24) = v22;
      if (__p)
      {
        v46 = (char *)__p;
        operator delete(__p);
      }
      return;
    }
  }
  v10 = (uint64_t **)(a1[9] + 24 * v3);
  v11 = *v10;
  v12 = v10[1];
  while (1)
  {
    v13 = *v8;
    *(_QWORD *)(*v8 + 40) = 0;
    if (v11 == v12)
      break;
    v14 = 0;
    v15 = 0.0;
    v16 = v11;
    do
    {
      v18 = *v16++;
      v17 = v18;
      v19 = *(float *)(v18 + 36) + *(float *)(v13 + 32);
      if (v19 > v15 || v14 == 0)
      {
        v15 = v19;
        v14 = v17;
      }
    }
    while (v16 != v12);
    if (!v14)
      break;
    *(_QWORD *)(v13 + 40) = v14;
    *(float *)(v13 + 36) = v15;
    if (++v8 == v9)
      goto LABEL_14;
  }
  if ((int)sub_1B03013F4() <= 2)
  {
    LOBYTE(__p) = 0;
    v39 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    sub_1B02D7994(v39, (uint64_t)"(", 1);
    v40 = (_QWORD *)std::ostream::operator<<();
    v41 = sub_1B02D7994(v40, (uint64_t)") ", 2);
    v42 = sub_1B02D7994(v41, (uint64_t)"LOG(", 4);
    v43 = sub_1B02D7994(v42, (uint64_t)"ERROR", 5);
    v44 = sub_1B02D7994(v43, (uint64_t)") ", 2);
    sub_1B02D7994(v44, (uint64_t)"Failed to find the best path in Viterbi.", 40);
    sub_1B02D6948(&__p);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 16) = 0;
}

void sub_1B02EDC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02EDC74(_QWORD *a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  int v6;
  int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  _QWORD *v20;
  float v21;
  float v22;
  double v23;
  long double v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;

  v6 = ((a1[4] - a1[3]) >> 3) - 1;
  v7 = v6 & ~(v6 >> 31);
  v8 = a1[16] + a1[17] * a1[18];
  v29 = 0;
  v25 = a2;
  sub_1B02EC1B8(a2, v8, &v29);
  v9 = 0;
  v28 = a1[6];
  v26 = a1;
  v27 = (v7 + 1);
  do
  {
    v10 = (uint64_t *)(v28 + 24 * v9);
    v11 = *v10;
    v12 = v10[1];
    if (*v10 != v12)
    {
      v13 = v26[9] + 24 * v9;
      v15 = *(_QWORD **)v13;
      v14 = *(_QWORD **)(v13 + 8);
      v16 = *v25;
      do
      {
        if (v15 != v14)
        {
          v17 = *(unsigned int *)(*(_QWORD *)v11 + 24);
          v18 = *v15;
          v19 = *(float *)(v16 + 4 * v17);
          v20 = v15;
          do
          {
            v21 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
            if (*v20 != v18)
            {
              if (v21 >= v19)
                v22 = v19;
              else
                v22 = *(float *)(v16 + 4 * *(unsigned int *)(*v20 + 24)) + (float)(a3 * *(float *)(*v20 + 32));
              if (v19 >= v21)
                v21 = v19;
              if (v21 <= (float)(v22 + 50.0))
              {
                v23 = v21;
                v24 = exp((float)(v22 - v21));
                v21 = log(v24 + 1.0) + v23;
              }
            }
            *(float *)(v16 + 4 * v17) = v21;
            ++v20;
            v19 = v21;
          }
          while (v20 != v14);
        }
        v11 += 8;
      }
      while (v11 != v12);
    }
    ++v9;
  }
  while (v9 != v27);
}

float sub_1B02EDDF8(_QWORD *a1, float a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t *v12;
  uint64_t *v13;
  float *v14;
  float *v15;
  uint64_t v16;
  float v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  float v21;
  void *v22;
  float v23;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  void *__p[3];
  void *v29[3];

  v5 = a1[3];
  v4 = a1[4];
  v6 = a1[16] + a1[17] * a1[18];
  LODWORD(__p[0]) = 0;
  sub_1B02EC1B8(v29, v6, __p);
  sub_1B02EDC74(a1, (uint64_t *)__p, a2);
  v7 = 0;
  v27 = a1[6];
  v25 = (((unint64_t)(v4 - v5) >> 3) - 1) & ~((int)(((unint64_t)(v4 - v5) >> 3) - 1) >> 31);
  v26 = a1;
  do
  {
    v8 = (uint64_t *)(v27 + 24 * v7);
    v9 = *v8;
    v10 = v8[1];
    if (*v8 != v10)
    {
      v11 = (uint64_t **)(v26[9] + 24 * v7);
      v12 = *v11;
      v13 = v11[1];
      v14 = (float *)__p[0];
      v15 = (float *)v29[0];
      do
      {
        if (v12 != v13)
        {
          v16 = *(unsigned int *)(*(_QWORD *)v9 + 24);
          v17 = v15[v16];
          v18 = v12;
          do
          {
            v19 = *v18++;
            v20 = *(unsigned int *)(v19 + 24);
            v21 = (float)(v14[v20] + (float)(a2 * *(float *)(v19 + 32))) - v14[v16];
            v17 = v17 + (float)(expf(v21) * (float)(v21 + v15[v20]));
            v15[v16] = v17;
          }
          while (v18 != v13);
        }
        v9 += 8;
      }
      while (v9 != v10);
    }
    ++v7;
  }
  while (v7 != v25 + 1);
  v22 = v29[0];
  v23 = *((float *)v29[0] + *(unsigned int *)(**(_QWORD **)(v27 + 24 * v25) + 24));
  if (!__p[0] || (__p[1] = __p[0], operator delete(__p[0]), (v22 = v29[0]) != 0))
  {
    v29[1] = v22;
    operator delete(v22);
  }
  return -v23;
}

void sub_1B02EDF98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02EDFB4(_QWORD *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>, float a5@<S0>)
{
  uint64_t v5;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  int v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  float v20;
  float v21;
  int v22;
  int v23;
  __int128 v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD **v33;
  _QWORD *i;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  int v51;
  uint64_t v52;
  uint64_t v53;
  float v54;
  unint64_t v55;
  float v56;
  float v57;
  uint64_t v58;
  unsigned int v59;
  float v60;
  float v61;
  int v62;
  double *v63;
  float v64;
  float *v65;
  float v66;
  float v67;
  float v68;
  float v69;
  float v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  float v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  void *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  int v94;
  unint64_t v95;
  uint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint8x8_t v101;
  unint64_t v102;
  _QWORD *v103;
  _QWORD *j;
  unint64_t v105;
  uint64_t v106;
  __int128 v107;
  uint8x8_t v108;
  _QWORD *v109;
  _QWORD *k;
  unint64_t v111;
  _QWORD *v112;
  float v113;
  _BOOL4 v114;
  unint64_t v115;
  unint64_t v116;
  int8x8_t prime;
  void *v118;
  void *v119;
  uint64_t v120;
  _QWORD **v121;
  unint64_t v122;
  uint8x8_t v123;
  unint64_t v124;
  uint8x8_t v125;
  uint64_t v126;
  _QWORD *m;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  unint64_t v131;
  void *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  __int128 v141;
  uint64_t v142;
  uint64_t v143;
  __int128 v144;
  void *v145;
  int v146;
  char v147;
  int v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t v153;
  void *v154[2];
  __int128 v155;
  float v156;
  _BYTE v157[48];
  uint64_t v158;
  __int128 v159;
  uint64_t v160;
  void *v161;
  _BYTE *v162;
  void *v163[3];
  void *v164[3];
  void *v165[4];
  void *__p[3];
  uint64_t v167;
  __int128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t (**v171)();
  __int128 v172;
  _QWORD v173[3];
  uint64_t v174;
  uint64_t v175;

  v175 = *MEMORY[0x1E0C80C00];
  if (a2 == 1)
  {
    if ((a3 & 1) == 0)
    {
      sub_1B02ED948(a1, (uint64_t)&v171);
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      *(_QWORD *)v157 = a4;
      v157[8] = 0;
      v145 = operator new(0x20uLL);
      *a4 = (uint64_t)v145;
      a4[1] = (uint64_t)v145;
      a4[2] = (uint64_t)v145 + 32;
      a4[1] = sub_1B02F3944((uint64_t)(a4 + 2), (uint64_t)&v171, (uint64_t)&v173[1], (uint64_t)v145);
      if (v171)
      {
        *(_QWORD *)&v172 = v171;
        operator delete(v171);
      }
      return;
    }
  }
  else if (!a2)
  {
    if ((int)sub_1B03013F4() <= 1)
    {
      LOBYTE(v171) = 0;
      v9 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      sub_1B02D7994(v9, (uint64_t)"(", 1);
      v10 = (_QWORD *)std::ostream::operator<<();
      v11 = sub_1B02D7994(v10, (uint64_t)") ", 2);
      v12 = sub_1B02D7994(v11, (uint64_t)"LOG(", 4);
      v13 = sub_1B02D7994(v12, (uint64_t)"WARNING", 7);
      v14 = sub_1B02D7994(v13, (uint64_t)") ", 2);
      sub_1B02D7994(v14, (uint64_t)"nbest_size >= 1. Returns empty result.", 38);
      sub_1B02D6948(&v171);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  v172 = 0u;
  memset(v173, 0, sizeof(v173));
  v171 = &off_1E60CC6B8;
  v174 = 512;
  v168 = 0uLL;
  v169 = 0;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v15 = sub_1B02EF174(&v171);
  v167 = v15;
  v16 = ((a1[4] - a1[3]) >> 3) - 1;
  *(_QWORD *)v15 = **(_QWORD **)(a1[6] + 24 * (v16 & ~(v16 >> 31)));
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 20) = 0;
  v17 = a1[16] + a1[17] * a1[18];
  *(_DWORD *)v157 = 0;
  sub_1B02EC1B8(__p, v17, v157);
  if (a3)
  {
    sub_1B02EDC74(a1, (uint64_t *)v157, a5);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v157;
    __p[2] = *(void **)&v157[16];
    v18 = sub_1B030154C();
    v19 = sub_1B02EC618(v18);
    v20 = logf((float)((float)((float)v19 * 2.3283e-10) + 0.0) + 0.0000001);
    v21 = -logf(-v20);
  }
  else
  {
    sub_1B02ED948(a1, (uint64_t)v165);
    if (v165[0])
    {
      v165[1] = v165[0];
      operator delete(v165[0]);
    }
    v21 = *(float *)(*(_QWORD *)v15 + 36);
  }
  *(float *)(v15 + 16) = v21;
  sub_1B02EF2E0((uint64_t *)&v168, &v167);
  v146 = 0;
  v147 = 0;
  if (10 * (int)a2 >= 512)
    v22 = 512;
  else
    v22 = 10 * a2;
  if (v22 <= 1)
    v23 = 1;
  else
    v23 = v22;
  v148 = v23;
  while (1)
  {
    v24 = v168;
    if ((_QWORD)v168 == *((_QWORD *)&v168 + 1))
      break;
    v25 = *(uint64_t **)v168;
    if ((uint64_t)(*((_QWORD *)&v168 + 1) - v168) >= 9)
    {
      v26 = 0;
      v27 = (uint64_t)(*((_QWORD *)&v168 + 1) - v168) >> 3;
      v28 = (_QWORD *)v168;
      do
      {
        v29 = v28;
        v28 += v26 + 1;
        v30 = 2 * v26;
        v26 = (2 * v26) | 1;
        v31 = v30 + 2;
        if (v31 < v27 && *(float *)(*v28 + 16) < *(float *)(v28[1] + 16))
        {
          ++v28;
          v26 = v31;
        }
        *v29 = *v28;
      }
      while (v26 <= (uint64_t)((unint64_t)(v27 - 2) >> 1));
      if (v28 == (_QWORD *)(*((_QWORD *)&v24 + 1) - 8))
      {
        *v28 = v25;
      }
      else
      {
        *v28 = **((_QWORD **)&v24 + 1);
        **((_QWORD **)&v24 + 1) = v25;
        sub_1B02F3A54(v24, (uint64_t)(v28 + 1), (uint64_t)((uint64_t)v28 - v24 + 8) >> 3);
      }
    }
    *((_QWORD *)&v168 + 1) -= 8;
    v32 = *v25;
    v33 = (_QWORD **)a1[9];
    if (*v25 == **v33)
    {
      sub_1B02EF3E0(a4, ((a4[1] - *a4) >> 5) + 1);
      for (i = (_QWORD *)v25[1]; i[1]; i = (_QWORD *)i[1])
      {
        v35 = a4[1];
        v36 = *(_QWORD **)(v35 - 24);
        v37 = *(_QWORD *)(v35 - 16);
        if ((unint64_t)v36 >= v37)
        {
          v39 = *(_QWORD *)(v35 - 32);
          v40 = ((uint64_t)v36 - v39) >> 3;
          if ((unint64_t)(v40 + 1) >> 61)
            sub_1B02D7758();
          v41 = v37 - v39;
          v42 = v41 >> 2;
          if (v41 >> 2 <= (unint64_t)(v40 + 1))
            v42 = v40 + 1;
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8)
            v43 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v43 = v42;
          if (v43)
            v44 = (char *)sub_1B02D7E30(v35 - 16, v43);
          else
            v44 = 0;
          v45 = &v44[8 * v40];
          *(_QWORD *)v45 = *i;
          v38 = v45 + 8;
          v47 = *(char **)(v35 - 32);
          v46 = *(char **)(v35 - 24);
          if (v46 != v47)
          {
            do
            {
              v48 = *((_QWORD *)v46 - 1);
              v46 -= 8;
              *((_QWORD *)v45 - 1) = v48;
              v45 -= 8;
            }
            while (v46 != v47);
            v46 = *(char **)(v35 - 32);
          }
          *(_QWORD *)(v35 - 32) = v45;
          *(_QWORD *)(v35 - 24) = v38;
          *(_QWORD *)(v35 - 16) = &v44[8 * v43];
          if (v46)
            operator delete(v46);
        }
        else
        {
          *v36 = *i;
          v38 = v36 + 1;
        }
        *(_QWORD *)(v35 - 24) = v38;
      }
      v49 = a4[1];
      *(_DWORD *)(v49 - 8) = *((_DWORD *)v25 + 4);
      if (a2 == (v49 - *a4) >> 5)
        break;
    }
    else
    {
      v50 = (int)(v33[3 * *(int *)(v32 + 16) + 1] - v33[3 * *(int *)(v32 + 16)]);
      *(_DWORD *)v157 = 0;
      sub_1B02EC1B8(v164, v50, v157);
      *(_DWORD *)v157 = 0;
      sub_1B02EC1B8(v163, v50, v157);
      *(_QWORD *)v157 = 0;
      sub_1B02F3D24(&v161, v50, v157);
      v51 = *(_DWORD *)(v32 + 16);
      v52 = a1[9];
      if (a3)
      {
        v53 = *(_QWORD *)(v52 + 24 * v51);
        v54 = -100000000.0;
        if (*(_QWORD *)(v52 + 24 * v51 + 8) != v53)
        {
          v55 = 0;
          v56 = *((float *)__p[0] + *(unsigned int *)(v32 + 24));
          v54 = -100000000.0;
          do
          {
            v57 = (float)((float)(*((float *)v25 + 5)
                                + *((float *)__p[0] + *(unsigned int *)(*(_QWORD *)(v53 + 8 * v55) + 24)))
                        + (float)(a5 * *(float *)(*(_QWORD *)(v53 + 8 * v55) + 32)))
                - v56;
            *((float *)v164[0] + v55) = v57;
            v58 = sub_1B030154C();
            v59 = sub_1B02EC618(v58);
            v60 = logf((float)((float)((float)v59 * 2.3283e-10) + 0.0) + 0.0000001);
            v61 = v57 - logf(-v60);
            *((float *)v163[0] + v55) = v61;
            if (v61 > v54)
              v54 = v61;
            ++v55;
            v62 = *(_DWORD *)(v32 + 16);
            v52 = a1[9];
            v53 = *(_QWORD *)(v52 + 24 * v62);
          }
          while (v55 < (*(_QWORD *)(v52 + 24 * v62 + 8) - v53) >> 3);
          v51 = *(_DWORD *)(v32 + 16);
        }
        v63 = (double *)v161;
        if (v162 != v161)
        {
          v64 = *((float *)v25 + 4);
          v65 = (float *)v163[0];
          if ((unint64_t)((v162 - (_BYTE *)v161) >> 3) <= 1)
            v5 = 1;
          else
            v5 = (v162 - (_BYTE *)v161) >> 3;
          do
          {
            v66 = *v65++;
            v67 = expf(v66 - v54);
            v68 = (float)(v64 - v66) + log1pf(-v67);
            v69 = v64 - fmaxf(v68, 0.0);
            v70 = expf(-fabsf(v68));
            *v63++ = (float)(v69 - log1pf(v70));
            --v5;
          }
          while (v5);
        }
      }
      v71 = *(_QWORD *)(v52 + 24 * v51);
      if (*(_QWORD *)(v52 + 24 * v51 + 8) != v71)
      {
        v72 = 0;
        do
        {
          v73 = *(_QWORD *)(v71 + 8 * v72);
          v74 = sub_1B02EF174(&v171);
          *(_QWORD *)v157 = v74;
          *(_QWORD *)v74 = v73;
          if (a3)
          {
            *(_DWORD *)(v74 + 20) = *((_DWORD *)v164[0] + v72);
            v75 = *((double *)v161 + v72);
          }
          else
          {
            *(float *)(v74 + 20) = *(float *)(v73 + 32) + *((float *)v25 + 5);
            v75 = *(float *)(v73 + 36) + *((float *)v25 + 5);
          }
          *(float *)(v74 + 16) = v75;
          *(_QWORD *)(v74 + 8) = v25;
          sub_1B02EF2E0((uint64_t *)&v168, v157);
          ++v72;
          v71 = *(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16));
        }
        while (v72 < (*(_QWORD *)(a1[9] + 24 * *(int *)(v32 + 16) + 8) - v71) >> 3);
      }
      if (!(((unint64_t)(v173[1] + v173[2] * v174) < 0x3B9ACA00) | v147 & 1))
      {
        if ((int)sub_1B03013F4() <= 1)
        {
          v157[0] = 0;
          v76 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          sub_1B02D7994(v76, (uint64_t)"(", 1);
          v77 = (_QWORD *)std::ostream::operator<<();
          v78 = sub_1B02D7994(v77, (uint64_t)") ", 2);
          v79 = sub_1B02D7994(v78, (uint64_t)"LOG(", 4);
          v80 = sub_1B02D7994(v79, (uint64_t)"WARNING", 7);
          v81 = sub_1B02D7994(v80, (uint64_t)") ", 2);
          sub_1B02D7994(v81, (uint64_t)"Allocator size exceeds ", 23);
          v82 = (_QWORD *)std::ostream::operator<<();
          sub_1B02D7994(v82, (uint64_t)" with an example of length ", 27);
          std::ostream::operator<<();
          sub_1B02D6948(v157);
        }
        v147 = 1;
      }
      v83 = *((_QWORD *)&v168 + 1);
      v84 = (void *)v168;
      if (*((_QWORD *)&v168 + 1) - (_QWORD)v168 >= 0x13879uLL)
      {
        v159 = 0uLL;
        v160 = 0;
        memset(&v157[8], 0, 40);
        *(_QWORD *)v157 = &off_1E60CC6B8;
        v158 = 512;
        *(_OWORD *)v154 = 0u;
        v155 = 0u;
        v156 = 1.0;
        ++v146;
        if ((int)sub_1B03013F4() <= 1)
        {
          LOBYTE(v170) = 0;
          v85 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
          sub_1B02D7994(v85, (uint64_t)"(", 1);
          v86 = (_QWORD *)std::ostream::operator<<();
          v87 = sub_1B02D7994(v86, (uint64_t)") ", 2);
          v88 = sub_1B02D7994(v87, (uint64_t)"LOG(", 4);
          v89 = sub_1B02D7994(v88, (uint64_t)"WARNING", 7);
          v90 = sub_1B02D7994(v89, (uint64_t)") ", 2);
          sub_1B02D7994(v90, (uint64_t)"Too big agenda size ", 20);
          v91 = (_QWORD *)std::ostream::operator<<();
          sub_1B02D7994(v91, (uint64_t)". Shrinking (round ", 19);
          v92 = (_QWORD *)std::ostream::operator<<();
          sub_1B02D7994(v92, (uint64_t)") down to ", 10);
          v93 = (_QWORD *)std::ostream::operator<<();
          sub_1B02D7994(v93, (uint64_t)".", 1);
          sub_1B02D6948(&v170);
        }
        if (10 * (int)a2 >= 1)
        {
          v94 = 0;
          while (1)
          {
            v149 = (_QWORD *)v168;
            v150 = v83;
            v95 = *(_QWORD *)v168;
            v153 = 0;
            v170 = 0;
            if (!v95)
              goto LABEL_181;
            v96 = &v170;
            v97 = (unint64_t)v154[1];
            do
            {
              v98 = 0x9DDFEA08EB382D69 * (((8 * v95) + 8) ^ HIDWORD(v95));
              v99 = 0x9DDFEA08EB382D69 * (HIDWORD(v95) ^ (v98 >> 47) ^ v98);
              v100 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
              if (v97)
              {
                v101 = (uint8x8_t)vcnt_s8((int8x8_t)v97);
                v101.i16[0] = vaddlv_u8(v101);
                if (v101.u32[0] > 1uLL)
                {
                  v102 = 0x9DDFEA08EB382D69 * (v99 ^ (v99 >> 47));
                  if (v100 >= v97)
                    v102 = v100 % v97;
                }
                else
                {
                  v102 = v100 & (v97 - 1);
                }
                v103 = (_QWORD *)*((_QWORD *)v154[0] + v102);
                if (v103)
                {
                  for (j = (_QWORD *)*v103; j; j = (_QWORD *)*j)
                  {
                    v105 = j[1];
                    if (v105 == v100)
                    {
                      if (j[2] == v95)
                      {
                        *v96 = j[3];
                        goto LABEL_181;
                      }
                    }
                    else
                    {
                      if (v101.u32[0] > 1uLL)
                      {
                        if (v105 >= v97)
                          v105 %= v97;
                      }
                      else
                      {
                        v105 &= v97 - 1;
                      }
                      if (v105 != v102)
                        break;
                    }
                  }
                }
              }
              v106 = sub_1B02EF174(v157);
              v107 = *(_OWORD *)v95;
              *(_QWORD *)(v106 + 16) = *(_QWORD *)(v95 + 16);
              *(_OWORD *)v106 = v107;
              *v96 = v106;
              v97 = (unint64_t)v154[1];
              if (v154[1])
              {
                v108 = (uint8x8_t)vcnt_s8((int8x8_t)v154[1]);
                v108.i16[0] = vaddlv_u8(v108);
                if (v108.u32[0] > 1uLL)
                {
                  v5 = v100;
                  if ((void *)v100 >= v154[1])
                    v5 = v100 % (unint64_t)v154[1];
                }
                else
                {
                  v5 = ((unint64_t)v154[1] - 1) & v100;
                }
                v109 = (_QWORD *)*((_QWORD *)v154[0] + v5);
                if (v109)
                {
                  for (k = (_QWORD *)*v109; k; k = (_QWORD *)*k)
                  {
                    v111 = k[1];
                    if (v111 == v100)
                    {
                      if (k[2] == v95)
                        goto LABEL_170;
                    }
                    else
                    {
                      if (v108.u32[0] > 1uLL)
                      {
                        if ((void *)v111 >= v154[1])
                          v111 %= (unint64_t)v154[1];
                      }
                      else
                      {
                        v111 &= (unint64_t)v154[1] - 1;
                      }
                      if (v111 != v5)
                        break;
                    }
                  }
                }
              }
              v112 = operator new(0x20uLL);
              *v112 = 0;
              v112[1] = v100;
              v112[2] = v95;
              v112[3] = v106;
              v113 = (float)(unint64_t)(*((_QWORD *)&v155 + 1) + 1);
              if (!v97 || (float)(v156 * (float)v97) < v113)
              {
                v114 = (v97 & (v97 - 1)) == 0;
                if (v97 < 3)
                  v114 = 0;
                v115 = (2 * v97) | !v114;
                v116 = vcvtps_u32_f32(v113 / v156);
                if (v115 <= v116)
                  prime = (int8x8_t)v116;
                else
                  prime = (int8x8_t)v115;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v97 = (unint64_t)v154[1];
                }
                if (*(_QWORD *)&prime <= v97)
                {
                  if (*(_QWORD *)&prime < v97)
                  {
                    v124 = vcvtps_u32_f32((float)*((unint64_t *)&v155 + 1) / v156);
                    if (v97 < 3
                      || (v125 = (uint8x8_t)vcnt_s8((int8x8_t)v97), v125.i16[0] = vaddlv_u8(v125), v125.u32[0] > 1uLL))
                    {
                      v124 = std::__next_prime(v124);
                    }
                    else
                    {
                      v126 = 1 << -(char)__clz(v124 - 1);
                      if (v124 >= 2)
                        v124 = v126;
                    }
                    if (*(_QWORD *)&prime <= v124)
                      prime = (int8x8_t)v124;
                    if (*(_QWORD *)&prime >= v97)
                    {
                      v97 = (unint64_t)v154[1];
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_126;
                      v132 = v154[0];
                      v154[0] = 0;
                      if (v132)
                        operator delete(v132);
                      v97 = 0;
                      v154[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_126:
                  if (*(_QWORD *)&prime >> 61)
                    sub_1B02D72AC();
                  v118 = operator new(8 * *(_QWORD *)&prime);
                  v119 = v154[0];
                  v154[0] = v118;
                  if (v119)
                    operator delete(v119);
                  v120 = 0;
                  v154[1] = (void *)prime;
                  do
                    *((_QWORD *)v154[0] + v120++) = 0;
                  while (*(_QWORD *)&prime != v120);
                  v121 = (_QWORD **)v155;
                  if ((_QWORD)v155)
                  {
                    v122 = *(_QWORD *)(v155 + 8);
                    v123 = (uint8x8_t)vcnt_s8(prime);
                    v123.i16[0] = vaddlv_u8(v123);
                    if (v123.u32[0] > 1uLL)
                    {
                      if (v122 >= *(_QWORD *)&prime)
                        v122 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v122 &= *(_QWORD *)&prime - 1;
                    }
                    *((_QWORD *)v154[0] + v122) = &v155;
                    for (m = *v121; m; v122 = v128)
                    {
                      v128 = m[1];
                      if (v123.u32[0] > 1uLL)
                      {
                        if (v128 >= *(_QWORD *)&prime)
                          v128 %= *(_QWORD *)&prime;
                      }
                      else
                      {
                        v128 &= *(_QWORD *)&prime - 1;
                      }
                      if (v128 != v122)
                      {
                        if (!*((_QWORD *)v154[0] + v128))
                        {
                          *((_QWORD *)v154[0] + v128) = v121;
                          goto LABEL_151;
                        }
                        *v121 = (_QWORD *)*m;
                        *m = **((_QWORD **)v154[0] + v128);
                        **((_QWORD **)v154[0] + v128) = m;
                        m = v121;
                      }
                      v128 = v122;
LABEL_151:
                      v121 = (_QWORD **)m;
                      m = (_QWORD *)*m;
                    }
                  }
                  v97 = (unint64_t)prime;
                }
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v100 >= v97)
                    v5 = v100 % v97;
                  else
                    v5 = v100;
                }
                else
                {
                  v5 = (v97 - 1) & v100;
                }
              }
              v129 = v154[0];
              v130 = (_QWORD *)*((_QWORD *)v154[0] + v5);
              if (v130)
              {
                *v112 = *v130;
LABEL_168:
                *v130 = v112;
                goto LABEL_169;
              }
              *v112 = v155;
              *(_QWORD *)&v155 = v112;
              v129[v5] = &v155;
              if (*v112)
              {
                v131 = *(_QWORD *)(*v112 + 8);
                if ((v97 & (v97 - 1)) != 0)
                {
                  if (v131 >= v97)
                    v131 %= v97;
                }
                else
                {
                  v131 &= v97 - 1;
                }
                v130 = (char *)v154[0] + 8 * v131;
                goto LABEL_168;
              }
LABEL_169:
              ++*((_QWORD *)&v155 + 1);
LABEL_170:
              v95 = *(_QWORD *)(v95 + 8);
              v96 = (uint64_t *)(v106 + 8);
            }
            while (v95);
LABEL_181:
            v153 = v170;
            sub_1B02EF2E0((uint64_t *)&v159, &v153);
            if (v150 - (uint64_t)v149 >= 9)
            {
              v133 = 0;
              v134 = (v150 - (uint64_t)v149) >> 3;
              v135 = *v149;
              v136 = v149;
              do
              {
                v137 = v136;
                v136 += v133 + 1;
                v138 = 2 * v133;
                v133 = (2 * v133) | 1;
                v139 = v138 + 2;
                if (v139 < v134 && *(float *)(*v136 + 16) < *(float *)(v136[1] + 16))
                {
                  ++v136;
                  v133 = v139;
                }
                *v137 = *v136;
              }
              while (v133 <= (uint64_t)((unint64_t)(v134 - 2) >> 1));
              v140 = (_QWORD *)(v150 - 8);
              if (v136 == (_QWORD *)(v150 - 8))
              {
                *v136 = v135;
              }
              else
              {
                *v136 = *v140;
                *v140 = v135;
                sub_1B02F3A54((uint64_t)v149, (uint64_t)(v136 + 1), v136 + 1 - v149);
              }
            }
            v83 = *((_QWORD *)&v168 + 1) - 8;
            *((_QWORD *)&v168 + 1) -= 8;
            if (++v94 == v148)
            {
              v84 = (void *)v168;
              break;
            }
          }
        }
        if (v84)
        {
          *((_QWORD *)&v168 + 1) = v84;
          operator delete(v84);
        }
        v168 = v159;
        v169 = v160;
        v141 = v172;
        v172 = *(_OWORD *)&v157[8];
        *(_OWORD *)&v157[8] = v141;
        v142 = *(_QWORD *)&v157[24];
        v143 = v174;
        *(_QWORD *)&v157[24] = v173[0];
        v144 = *(_OWORD *)&v173[1];
        *(_OWORD *)&v173[1] = *(_OWORD *)&v157[32];
        *(_OWORD *)&v157[32] = v144;
        v173[0] = v142;
        v174 = v158;
        v158 = v143;
        sub_1B02EF468((uint64_t)v154);
        sub_1B02EF4B0(v157);
      }
      if (v161)
      {
        v162 = v161;
        operator delete(v161);
      }
      if (v163[0])
      {
        v163[1] = v163[0];
        operator delete(v163[0]);
      }
      if (v164[0])
      {
        v164[1] = v164[0];
        operator delete(v164[0]);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if ((_QWORD)v168)
    operator delete((void *)v168);
  sub_1B02EF4B0(&v171);
}

void sub_1B02EF004(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,void *a57)
{
  uint64_t v57;
  void *v59;

  sub_1B02EF468((uint64_t)&a21);
  sub_1B02EF4B0(&a27);
  if (__p)
  {
    a41 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a43)
  {
    a44 = (uint64_t)a43;
    operator delete(a43);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a53)
  {
    a54 = (uint64_t)a53;
    operator delete(a53);
  }
  v59 = a57;
  sub_1B02D7830((void ***)&a27);
  if (v59)
    operator delete(v59);
  sub_1B02EF4B0((_QWORD *)(v57 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_1B02EF174(_QWORD *a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t result;

  v2 = a1[5];
  v3 = a1[6];
  v4 = a1[4];
  if (v4 >= v3)
  {
    v4 = 0;
    ++v2;
    a1[4] = 0;
    a1[5] = v2;
  }
  v5 = a1[1];
  if (v2 == (a1[2] - v5) >> 3)
  {
    is_mul_ok(v3, 0x18uLL);
    v6 = (void *)operator new[]();
    bzero(v6, 24 * a1[6]);
    v8 = (_QWORD *)a1[2];
    v7 = a1[3];
    if ((unint64_t)v8 >= v7)
    {
      v10 = (_QWORD *)a1[1];
      v11 = v8 - v10;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_1B02D7758();
      v13 = v7 - (_QWORD)v10;
      if (v13 >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_1B02D72AC();
        v15 = (char *)operator new(8 * v14);
      }
      else
      {
        v15 = 0;
      }
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = v6;
      v9 = v16 + 8;
      if (v8 != v10)
      {
        do
        {
          v17 = *--v8;
          *((_QWORD *)v16 - 1) = v17;
          v16 -= 8;
        }
        while (v8 != v10);
        v8 = (_QWORD *)a1[1];
      }
      a1[1] = v16;
      a1[2] = v9;
      a1[3] = &v15[8 * v14];
      if (v8)
        operator delete(v8);
    }
    else
    {
      *v8 = v6;
      v9 = v8 + 1;
    }
    a1[2] = v9;
    v5 = a1[1];
    v4 = a1[4];
    v2 = a1[5];
  }
  result = *(_QWORD *)(v5 + 8 * v2) + 24 * v4;
  a1[4] = v4 + 1;
  return result;
}

uint64_t sub_1B02EF2E0(uint64_t *a1, _QWORD *a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[1];
  v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    v7 = *a1;
    v8 = ((uint64_t)v5 - *a1) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      sub_1B02D7758();
    v10 = v4 - v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1B02D72AC();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *a2;
    v6 = (uint64_t)(v13 + 8);
    if (v5 != (_QWORD *)v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != (_QWORD *)v7);
      v5 = (_QWORD *)*a1;
    }
    *a1 = (uint64_t)v13;
    a1[1] = v6;
    a1[2] = (uint64_t)&v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = *a2;
    v6 = (uint64_t)(v5 + 1);
  }
  a1[1] = v6;
  return sub_1B02F3A54(*a1, v6, (v6 - *a1) >> 3);
}

void sub_1B02EF3E0(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v3 = a1[1];
  v4 = (v3 - *a1) >> 5;
  if (a2 <= v4)
  {
    if (a2 < v4)
    {
      v5 = *a1 + 32 * a2;
      if (v3 != v5)
      {
        v6 = a1[1];
        do
        {
          v8 = *(void **)(v6 - 32);
          v6 -= 32;
          v7 = v8;
          if (v8)
          {
            *(_QWORD *)(v3 - 24) = v7;
            operator delete(v7);
          }
          v3 = v6;
        }
        while (v6 != v5);
      }
      a1[1] = v5;
    }
  }
  else
  {
    sub_1B02F3AB0(a1, a2 - v4);
  }
}

uint64_t sub_1B02EF468(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

_QWORD *sub_1B02EF4B0(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E60CC6B8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1B5E07CB4](*v2, 0x1020C8062D53EE8);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B02EF52C(_QWORD *a1@<X0>, void **a2@<X8>, float a3@<S0>)
{
  unint64_t v6;
  int v7;
  uint64_t v8;
  float v9;
  float *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  float *v14;
  float v15;
  float *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  float *v22;
  void *v23;
  int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  BOOL v45;
  uint64_t v46;
  void *v47[3];
  void *v48[2];
  float *v49;
  void *__p[2];
  float *v51;

  if ((int)(((a1[4] - a1[3]) >> 3) - 1) <= 0)
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  else
  {
    v6 = a1[16] + a1[17] * a1[18];
    LODWORD(v48[0]) = 0;
    sub_1B02EC1B8(__p, v6, v48);
    sub_1B02EDC74(a1, (uint64_t *)v48, a3);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_OWORD *)__p = *(_OWORD *)v48;
    v51 = v49;
    v46 = sub_1B030154C();
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    v48[0] = 0;
    v48[1] = 0;
    v49 = 0;
    v7 = ((a1[4] - a1[3]) >> 3) - 1;
    v8 = **(_QWORD **)(a1[6] + 24 * (v7 & ~(v7 >> 31)));
    v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
    do
    {
      v10 = (float *)v48[0];
      v48[1] = v48[0];
      v11 = (uint64_t *)(a1[9] + 24 * *(unsigned int *)(v8 + 16));
      v13 = *v11;
      v12 = v11[1];
      v14 = (float *)v48[0];
      if (*v11 != v12)
      {
        do
        {
          v15 = exp((float)((float)(*((float *)__p[0] + *(unsigned int *)(*(_QWORD *)v13 + 24))
                                  + (float)(a3 * *(float *)(*(_QWORD *)v13 + 32)))
                          - v9));
          if (v10 >= v49)
          {
            v16 = (float *)v48[0];
            v17 = ((char *)v10 - (char *)v48[0]) >> 2;
            v18 = v17 + 1;
            if ((unint64_t)(v17 + 1) >> 62)
              sub_1B02D7758();
            v19 = (char *)v49 - (char *)v48[0];
            if (((char *)v49 - (char *)v48[0]) >> 1 > v18)
              v18 = v19 >> 1;
            if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL)
              v20 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v20 = v18;
            if (v20)
            {
              v21 = (char *)sub_1B02D8648((uint64_t)&v49, v20);
              v16 = (float *)v48[0];
              v10 = (float *)v48[1];
            }
            else
            {
              v21 = 0;
            }
            v22 = (float *)&v21[4 * v17];
            *v22 = v15;
            v23 = v22 + 1;
            while (v10 != v16)
            {
              v24 = *((_DWORD *)v10-- - 1);
              *((_DWORD *)v22-- - 1) = v24;
            }
            v48[0] = v22;
            v48[1] = v23;
            v49 = (float *)&v21[4 * v20];
            if (v16)
              operator delete(v16);
            v10 = (float *)v23;
          }
          else
          {
            *v10++ = v15;
          }
          v48[1] = v10;
          v13 += 8;
        }
        while (v13 != v12);
        v14 = (float *)v48[0];
      }
      sub_1B02EC238((uint64_t)v47, v14, v10);
      v25 = *(_DWORD *)(v8 + 16);
      v26 = a1[9];
      v8 = *(_QWORD *)(*(_QWORD *)(v26 + 24 * v25) + 8 * (int)sub_1B02EC564((uint64_t)v47, v46, (double **)v47));
      v27 = **(_QWORD **)a1[9];
      if (v8 != v27)
      {
        v9 = *((float *)__p[0] + *(unsigned int *)(v8 + 24));
        v29 = a2[1];
        v28 = (unint64_t)a2[2];
        if ((unint64_t)v29 >= v28)
        {
          v31 = ((char *)v29 - (_BYTE *)*a2) >> 3;
          if ((unint64_t)(v31 + 1) >> 61)
            sub_1B02D7758();
          v32 = v28 - (_QWORD)*a2;
          v33 = v32 >> 2;
          if (v32 >> 2 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          if (v34)
            v35 = (char *)sub_1B02D7E30((uint64_t)(a2 + 2), v34);
          else
            v35 = 0;
          v36 = &v35[8 * v31];
          *(_QWORD *)v36 = v8;
          v30 = v36 + 8;
          v38 = (char *)*a2;
          v37 = (char *)a2[1];
          if (v37 != *a2)
          {
            do
            {
              v39 = *((_QWORD *)v37 - 1);
              v37 -= 8;
              *((_QWORD *)v36 - 1) = v39;
              v36 -= 8;
            }
            while (v37 != v38);
            v37 = (char *)*a2;
          }
          *a2 = v36;
          a2[1] = v30;
          a2[2] = &v35[8 * v34];
          if (v37)
            operator delete(v37);
        }
        else
        {
          *v29 = v8;
          v30 = v29 + 1;
        }
        a2[1] = v30;
      }
      if (v47[0])
      {
        v47[1] = v47[0];
        operator delete(v47[0]);
      }
    }
    while (v8 != v27);
    v41 = (unint64_t)*a2;
    v40 = (char *)a2[1];
    if (*a2 != v40)
    {
      v42 = v40 - 8;
      if ((unint64_t)v42 > v41)
      {
        v43 = v41 + 8;
        do
        {
          v44 = *(_QWORD *)(v43 - 8);
          *(_QWORD *)(v43 - 8) = *(_QWORD *)v42;
          *(_QWORD *)v42 = v44;
          v42 -= 8;
          v45 = v43 >= (unint64_t)v42;
          v43 += 8;
        }
        while (!v45);
      }
    }
    if (v48[0])
    {
      v48[1] = v48[0];
      operator delete(v48[0]);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
  }
}

void sub_1B02EF8E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02EF94C(uint64_t a1, _QWORD *a2)
{
  float v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _BYTE *v10;
  char *v11;
  unint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  char *v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  char *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  BOOL v31;
  unint64_t *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  double v38;
  float v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  void *__p;
  _BYTE *v46;

  v4 = *(float *)(a1 + 104);
  v5 = ((a2[4] - a2[3]) >> 3) - 1;
  v6 = a2[1];
  v7 = a2[2];
  sub_1B02DB104(&__p, *(int *)(a1 + 92) + 1);
  v42 = v5;
  if ((int)v5 < 1)
    goto LABEL_40;
  v43 = 0;
  v8 = 0;
  v9 = v4 + -10.0;
  v41 = v6 + (int)v7;
  do
  {
    v10 = *(_BYTE **)(a2[3] + 8 * v8);
    v11 = (char *)__p;
    v12 = (v46 - (_BYTE *)__p) >> 4;
    v13 = *(_DWORD **)(a1 + 40);
    v14 = (*v13 >> 10 << ((*v13 >> 6) & 8));
    if ((v41 - (_QWORD)v10) << 32)
    {
      v15 = 0;
      v16 = 0;
      do
      {
        v17 = v10[v15];
        v18 = v14 ^ v17;
        v19 = v13[v18];
        if ((v19 & 0x800000FF) != (_DWORD)v17)
          break;
        v14 = v18 ^ (v19 >> 10 << ((v19 >> 6) & 8));
        if ((v19 & 0x100) != 0)
        {
          if (v16 < v12)
          {
            v20 = &v11[16 * v16];
            *(_DWORD *)v20 = v13[v14] & 0x7FFFFFFF;
            *((_QWORD *)v20 + 1) = v15 + 1;
          }
          ++v16;
        }
        ++v15;
      }
      while ((_DWORD)v41 - (_DWORD)v10 != v15);
    }
    else
    {
      v21 = *v10;
      if (*v10)
      {
        v16 = 0;
        v22 = 1;
        do
        {
          v23 = v14 ^ v21;
          v24 = v13[v23];
          if ((v24 & 0x800000FF) != v21)
            break;
          v14 = v23 ^ (v24 >> 10 << ((v24 >> 6) & 8));
          if ((v24 & 0x100) != 0)
          {
            if (v16 < v12)
            {
              v25 = &v11[16 * v16];
              *(_DWORD *)v25 = v13[v14] & 0x7FFFFFFF;
              *((_QWORD *)v25 + 1) = v22;
            }
            ++v16;
          }
          v21 = v10[v22++];
        }
        while (v21);
      }
      else
      {
        v16 = 0;
      }
    }
    if (v16 >= v12)
    {
      v44 = 1;
      v26 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
      sub_1B02D7994(v26, (uint64_t)"(", 1);
      v27 = (_QWORD *)std::ostream::operator<<();
      v28 = sub_1B02D7994(v27, (uint64_t)") [", 3);
      v29 = sub_1B02D7994(v28, (uint64_t)"(num_nodes) < (trie_results.size())", 35);
      sub_1B02D7994(v29, (uint64_t)"] ", 2);
      sub_1B02D6948(&v44);
    }
    if (!v16)
    {
LABEL_38:
      v40 = sub_1B02ED724((uint64_t)a2, v8, 1);
      *(_DWORD *)(v40 + 28) = *(_DWORD *)(a1 + 88);
      *(float *)(v40 + 32) = v9;
      goto LABEL_39;
    }
    v30 = 0;
    v31 = 0;
    do
    {
      while (1)
      {
        v32 = (unint64_t *)(a2[3] + v43);
        v33 = -1;
        do
        {
          v34 = *v32++;
          ++v33;
        }
        while (v34 < (unint64_t)&v10[*((_QWORD *)__p + 2 * v30 + 1)]);
        v35 = *((unsigned int *)__p + 4 * v30);
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v35) & 1) != 0)
          break;
        v36 = v8;
        v37 = sub_1B02ED724((uint64_t)a2, v8, v33);
        *(_DWORD *)(v37 + 28) = v35;
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v35))
          v38 = (float)(*(float *)(a1 + 108) * (float)v33) + -0.1;
        else
          v38 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v35);
        v39 = v38;
        *(float *)(v37 + 32) = v39;
        if (!v31)
        {
          v31 = *(_DWORD *)(v37 + 20) == 1;
          v8 = v36;
          break;
        }
        ++v30;
        v31 = 1;
        v8 = v36;
        if (v30 == v16)
          goto LABEL_39;
      }
      ++v30;
    }
    while (v30 != v16);
    if (!v31)
      goto LABEL_38;
LABEL_39:
    ++v8;
    v43 += 8;
  }
  while (v8 != v42);
LABEL_40:
  if (__p)
  {
    v46 = __p;
    operator delete(__p);
  }
}

void sub_1B02EFCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02EFD08(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD v20[2];
  void *__p;
  unsigned int *v22;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_1B0303130((uint64_t *)&__p);
  if (v12)
  {
    sub_1B0303340(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_1B02EFEA4(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v22;
    if (__p != v22)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v20[0] = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 120))(a1, v16);
          v20[1] = v17;
          v18 = a5[1];
          if (v18 >= a5[2])
          {
            v19 = sub_1B02EC6B8(a5, (uint64_t)v20);
          }
          else
          {
            sub_1B02EC7C4((_DWORD)a5 + 16, (_BYTE *)a5[1], (uint64_t)v20);
            v19 = v18 + 24;
            a5[1] = v18 + 24;
          }
          a5[1] = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_1B0303340(a6, a1 + 96);
    if (__p)
    {
      v22 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B02EFE74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02EFEA4(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, int a5@<W4>, uint64_t *a6@<X8>)
{
  unint64_t v12;

  if (a4 != -1)
    a5 = a4;
  sub_1B02DB104(a6, a5);
  v12 = sub_1B02F2844(a1, a2, *a6, (a6[1] - *a6) >> 4, a3, a4);
  sub_1B02F2B48((uint64_t)a6, v12);
}

void sub_1B02EFF20(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B02EFF3C(uint64_t a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  void *v12;
  int v13;
  unsigned int *v14;
  unsigned int *v15;
  uint64_t v16;
  unint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  int v27;
  void *__p;
  unsigned int *v29;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(&__p);
  v12 = __p;
  sub_1B0303130((uint64_t *)&__p);
  if (v12)
  {
    sub_1B0303340(a6, a1 + 96);
  }
  else
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 128))(a1);
    sub_1B02EFEA4(a1 + 24, a2, a3, a4, v13, (uint64_t *)&__p);
    v14 = (unsigned int *)__p;
    v15 = v29;
    if (__p != v29)
    {
      do
      {
        v16 = *v14;
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v16) & 1) == 0
          && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 152))(a1, v16) & 1) == 0)
        {
          v18 = *(_DWORD **)(a5 + 8);
          v17 = *(_QWORD *)(a5 + 16);
          if ((unint64_t)v18 >= v17)
          {
            v20 = *(_DWORD **)a5;
            v21 = ((uint64_t)v18 - *(_QWORD *)a5) >> 2;
            v22 = v21 + 1;
            if ((unint64_t)(v21 + 1) >> 62)
              sub_1B02D7758();
            v23 = v17 - (_QWORD)v20;
            if (v23 >> 1 > v22)
              v22 = v23 >> 1;
            if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFFCLL)
              v24 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v24 = v22;
            if (v24)
            {
              v25 = (char *)sub_1B02D8648(a5 + 16, v24);
              v20 = *(_DWORD **)a5;
              v18 = *(_DWORD **)(a5 + 8);
            }
            else
            {
              v25 = 0;
            }
            v26 = &v25[4 * v21];
            *(_DWORD *)v26 = v16;
            v19 = v26 + 4;
            while (v18 != v20)
            {
              v27 = *--v18;
              *((_DWORD *)v26 - 1) = v27;
              v26 -= 4;
            }
            *(_QWORD *)a5 = v26;
            *(_QWORD *)(a5 + 8) = v19;
            *(_QWORD *)(a5 + 16) = &v25[4 * v24];
            if (v20)
              operator delete(v20);
          }
          else
          {
            *v18 = v16;
            v19 = v18 + 1;
          }
          *(_QWORD *)(a5 + 8) = v19;
        }
        v14 += 4;
      }
      while (v14 != v15);
    }
    sub_1B0303340(a6, a1 + 96);
    if (__p)
    {
      v29 = (unsigned int *)__p;
      operator delete(__p);
    }
  }
}

void sub_1B02F0110(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02F0134(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  float v6;
  float v7;

  v4 = sub_1B02F0228(a1);
  *(_QWORD *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(_QWORD *)v4 = &off_1E60CC718;
  *(_QWORD *)(v4 + 8) = a2 + 16;
  sub_1B02D4AE8(v4);
  v5 = 0;
  *(_QWORD *)(a1 + 104) = 0x8000007F7FFFFFLL;
  while (v5 < (*(int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
  {
    if ((*(unsigned int (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v5))
    {
      v6 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (v6 >= *(float *)(a1 + 104))
        v6 = *(float *)(a1 + 104);
      *(float *)(a1 + 104) = v6;
      v7 = (*(float (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v5);
      if (*(float *)(a1 + 108) >= v7)
        v7 = *(float *)(a1 + 108);
      *(float *)(a1 + 108) = v7;
    }
    ++v5;
  }
  return a1;
}

void sub_1B02F0208(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B02D460C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F0228(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E60CBCC0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = &off_1E60CCA98;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = &off_1E60CCA98;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  sub_1B0303128((_QWORD *)(a1 + 96));
  return a1;
}

void sub_1B02F0294(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v5 = v2;
  *(_QWORD *)(v1 + 56) = v5;
  *v4 = 0;
  v4[1] = 0;
  v7 = *(_QWORD *)(v1 + 80);
  if (v7)
  {
    MEMORY[0x1B5E07CB4](v7, 0x1000C8052888210);
    *(_QWORD *)(v1 + 80) = 0;
  }
  *(_QWORD *)(v1 + 24) = &off_1E60CCA98;
  *v3 = 0;
  v3[1] = 0;
  v8 = *(_QWORD *)(v1 + 48);
  if (v8)
  {
    MEMORY[0x1B5E07CB4](v8, 0x1000C8052888210);
    *(_QWORD *)(v1 + 48) = 0;
  }
  sub_1B02D7938((uint64_t **)(v1 + 16), 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F030C(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  BOOL v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  _DWORD *v11;
  _DWORD *v12;
  uint64_t *v13;
  _DWORD *v14;
  _DWORD *v15;
  _DWORD *v17;

  v7 = a4 > 7;
  if (a4 <= 7)
    v8 = 0;
  else
    v8 = a4 - 8;
  if (v7)
    v9 = (char *)(a3 + 2);
  else
    v9 = "";
  v10 = sub_1B02D3910(a1, a2, v9, v8);
  *(_DWORD *)(v10 + 104) = 0;
  v11 = (_DWORD *)(v10 + 104);
  *(_QWORD *)v10 = &off_1E60CC718;
  *(_DWORD *)(v10 + 108) = 0;
  v12 = (_DWORD *)(v10 + 108);
  *(_DWORD *)(v10 + 112) = 0;
  v13 = (uint64_t *)(v10 + 96);
  sub_1B0303340(&v17, v10 + 96);
  v14 = v17;
  sub_1B0303130((uint64_t *)&v17);
  if (!v14)
  {
    sub_1B02F045C(a3, a4, v11, &v17);
    sub_1B0303344(v13, &v17);
    sub_1B0303130((uint64_t *)&v17);
    (*(void (**)(_DWORD **__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v17, a1);
    v15 = v17;
    sub_1B0303130((uint64_t *)&v17);
    if (!v15)
    {
      sub_1B02F045C(a3 + 1, a4 - 4, v12, &v17);
      sub_1B0303344(v13, &v17);
      sub_1B0303130((uint64_t *)&v17);
    }
  }
  return a1;
}

void sub_1B02F0428(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B02D460C(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02F045C@<X0>(_DWORD *a1@<X0>, unint64_t a2@<X1>, _DWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v6;
  unsigned int v7;
  _QWORD v8[11];
  char v9;
  uint64_t v10;

  if (a2 <= 3)
  {
    v7 = 13;
    v6 = (_QWORD *)sub_1B02D685C((uint64_t)v8);
    sub_1B02D7994(v6, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.h", 62);
    sub_1B02D7994(v8, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v8, (uint64_t)") [", 3);
    sub_1B02D7994(v8, (uint64_t)"string.size() >= sizeof(T)", 26);
    sub_1B02D7994(v8, (uint64_t)"] ", 2);
    sub_1B02D4430(&v7, (uint64_t)a4);
    v8[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v8 + *(_QWORD *)(v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v8[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v9 < 0)
      operator delete((void *)v8[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1B5E07C60](&v10);
  }
  else
  {
    *a3 = *a1;
    return sub_1B0303128(a4);
  }
}

void sub_1B02F05B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B02F05D0(uint64_t a1)
{
  sub_1B02D460C(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B02F05F4(_DWORD *a1@<X0>, unsigned __int8 *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t (**v25)();
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;

  if (a1[28])
  {
    (*(void (**)(uint64_t (***__return_ptr)(), _DWORD *))(*(_QWORD *)a1 + 16))(&v25, a1);
    if (v25)
    {
      sub_1B0303130((uint64_t *)&v25);
LABEL_4:
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      return;
    }
    sub_1B0303130((uint64_t *)&v25);
    if (!a3)
      goto LABEL_4;
    v25 = &off_1E60CC808;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0;
    v32 = &off_1E60CC6D8;
    v33 = 0u;
    v34 = 0u;
    v35 = 0;
    v36 = 1024;
    sub_1B02ED254((uint64_t)&v25, a2, a3);
    sub_1B02EF94C((uint64_t)a1, &v25);
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    sub_1B02ED948(&v25, (uint64_t)&v23);
    v8 = v23;
    v9 = v24;
    if (v23 != v24)
    {
      v10 = a4 + 2;
      v11 = (char *)a4[1];
      do
      {
        v12 = *v8;
        if ((unint64_t)v11 >= *v10)
        {
          v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v11[-*a4] >> 3);
          v14 = v13 + 1;
          if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_1B02D7758();
          if (0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3) > v14)
            v14 = 0x5555555555555556 * ((uint64_t)(*v10 - *a4) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v10 - *a4) >> 3) >= 0x555555555555555)
            v15 = 0xAAAAAAAAAAAAAAALL;
          else
            v15 = v14;
          v16 = (char *)sub_1B02D776C((uint64_t)(a4 + 2), v15);
          v18 = &v16[24 * v13];
          *(_OWORD *)v18 = *(_OWORD *)v12;
          *((_DWORD *)v18 + 4) = *(_DWORD *)(v12 + 28);
          v20 = (char *)*a4;
          v19 = (char *)a4[1];
          v21 = v18;
          if (v19 != (char *)*a4)
          {
            do
            {
              v22 = *(_OWORD *)(v19 - 24);
              *((_QWORD *)v21 - 1) = *((_QWORD *)v19 - 1);
              *(_OWORD *)(v21 - 24) = v22;
              v21 -= 24;
              v19 -= 24;
            }
            while (v19 != v20);
            v19 = (char *)*a4;
          }
          v11 = v18 + 24;
          *a4 = v21;
          a4[1] = v18 + 24;
          a4[2] = &v16[24 * v17];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_OWORD *)v11 = *(_OWORD *)v12;
          *((_DWORD *)v11 + 4) = *(_DWORD *)(v12 + 28);
          v11 += 24;
        }
        a4[1] = v11;
        ++v8;
      }
      while (v8 != v9);
      v8 = v23;
    }
    if (v8)
    {
      v24 = v8;
      operator delete(v8);
    }
    sub_1B02ECF84((uint64_t)&v25);
  }
  else
  {
    sub_1B02F08B0((uint64_t)a1, (uint64_t)a2, a3, a4);
  }
}

void sub_1B02F0868(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v15;

  v15 = *(void **)v13;
  if (*(_QWORD *)v13)
  {
    *(_QWORD *)(v13 + 8) = v15;
    operator delete(v15);
  }
  sub_1B02ECF84((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B02F08B0(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  float v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float *v12;
  float *v13;
  int v14;
  float v15;
  unint64_t v16;
  float v17;
  int v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  int *v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t v28;
  double v29;
  double v30;
  float v31;
  float *v32;
  int *v33;
  int v34;
  float v35;
  char *v37;
  _QWORD *v38;
  unsigned int v39;
  float *v40;
  unint64_t v41;
  unsigned int *v42;
  int v43;
  uint64_t v44;
  unint64_t v45;
  char **v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  char *v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 *v57;
  char *i;
  __int128 v59;
  int v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  float *v64;
  _QWORD *v65;
  uint64_t v66;
  __int128 v67;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)a1 + 16))(&v67);
  if ((_QWORD)v67)
  {
    sub_1B0303130((uint64_t *)&v67);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B0303130((uint64_t *)&v67);
  if (!a3)
    goto LABEL_3;
  v8 = *(float *)(a1 + 104);
  v9 = (a3 << 32) + 0x100000000;
  v66 = a2;
  if (a3 << 32 == 0xFFFFFFFF00000000)
  {
    v12 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_1B02D7758();
    v10 = v9 >> 32;
    v11 = 3 * v10;
    v12 = (float *)operator new(12 * v10);
    v13 = v12;
    do
    {
      *(_QWORD *)v13 = 0xFFFFFFFFLL;
      v13[2] = NAN;
      v13 += 3;
    }
    while (v13 != &v12[v11]);
    a2 = v66;
  }
  if ((int)a3 <= 0)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
  else
  {
    v65 = a4;
    v14 = 0;
    v15 = v8 + -10.0;
    v16 = (int)a3;
    v62 = (char *)(v12 + 5);
    v63 = a3;
    v64 = v12;
    v61 = (int)a3;
    do
    {
      v17 = v12[3 * v14 + 1];
      if ((int)a3 - v14 >= asc_1B03A8CD7[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4])
        v18 = asc_1B03A8CD7[(unint64_t)*(unsigned __int8 *)(a2 + v14) >> 4];
      else
        v18 = a3 - v14;
      if (v16 <= v14)
        goto LABEL_31;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v22 = a2 + v14;
      v23 = v16 - v14;
      v24 = (int *)&v62[12 * v14];
      do
      {
        v25 = *(_QWORD *)(a1 + 40);
        v26 = *(unsigned __int8 *)(v22 + v19);
        LODWORD(v21) = (*(_DWORD *)(v25 + 4 * v21) >> 10 << ((*(_DWORD *)(v25 + 4 * v21) >> 6) & 8)) ^ v21 ^ v26;
        v27 = *(_DWORD *)(v25 + 4 * v21);
        if ((v27 & 0x800000FF) != v26)
          break;
        if ((v27 & 0x100) != 0)
        {
          v28 = *(_DWORD *)(v25 + 4 * ((v27 >> 10 << ((v27 >> 6) & 8)) ^ v21)) & 0x7FFFFFFF;
          if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8), v28) & 1) == 0)
          {
            if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v28))
            {
              v29 = (float)(*(float *)(a1 + 108) * (float)(unint64_t)(v19 + 1)) + -0.1;
            }
            else
            {
              v29 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v28);
            }
            v30 = v29 + v17;
            if (*v24 == -1 || v30 > *((float *)v24 - 1))
            {
              v31 = v30;
              *((float *)v24 - 1) = v31;
              *v24 = v14;
              *(v24 - 2) = v28;
            }
            v20 |= v18 - 1 == v19;
          }
        }
        ++v19;
        v24 += 3;
      }
      while (v23 != v19);
      LODWORD(a3) = v63;
      v12 = v64;
      a2 = v66;
      v16 = v61;
      if ((v20 & 1) == 0)
      {
LABEL_31:
        v32 = &v12[3 * v18 + 3 * v14];
        v34 = *((_DWORD *)v32 + 2);
        v33 = (int *)(v32 + 2);
        v35 = v15 + v17;
        if (v34 == -1 || v35 > *((float *)v33 - 1))
        {
          *((float *)v33 - 1) = v35;
          *v33 = v14;
          v12[3 * v18 + 3 * v14] = *(float *)(a1 + 88);
        }
      }
      v14 += v18;
    }
    while (v14 < (int)a3);
    v37 = 0;
    v65[2] = 0;
    v38 = v65 + 2;
    *v65 = 0;
    v65[1] = 0;
    v39 = a3;
    do
    {
      v40 = &v12[3 * v39];
      v42 = (unsigned int *)(v40 + 2);
      v41 = *((int *)v40 + 2);
      if (v63 < v41)
        sub_1B02EA050("string_view::substr");
      v43 = v39 - v41;
      v44 = v66 + v41;
      if (v63 - v41 >= v43)
        v45 = v43;
      else
        v45 = v63 - v41;
      if ((unint64_t)v37 >= *v38)
      {
        v47 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v37[-*v65] >> 3);
        v48 = v47 + 1;
        if (v47 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1B02D7758();
        if (0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3) > v48)
          v48 = 0x5555555555555556 * ((uint64_t)(*v38 - *v65) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v38 - *v65) >> 3) >= 0x555555555555555)
          v49 = 0xAAAAAAAAAAAAAAALL;
        else
          v49 = v48;
        v50 = (char *)sub_1B02D776C((uint64_t)v38, v49);
        v52 = &v50[24 * v47];
        *(_QWORD *)v52 = v44;
        *((_QWORD *)v52 + 1) = v45;
        *((float *)v52 + 4) = *v40;
        v46 = (char **)v65;
        v54 = (char *)*v65;
        v53 = (char *)v65[1];
        v55 = v52;
        if (v53 == (char *)*v65)
        {
          v12 = v64;
        }
        else
        {
          v12 = v64;
          do
          {
            v56 = *(_OWORD *)(v53 - 24);
            *((_QWORD *)v55 - 1) = *((_QWORD *)v53 - 1);
            *(_OWORD *)(v55 - 24) = v56;
            v55 -= 24;
            v53 -= 24;
          }
          while (v53 != v54);
          v53 = (char *)*v65;
        }
        v37 = v52 + 24;
        *v65 = v55;
        v65[1] = v52 + 24;
        v65[2] = &v50[24 * v51];
        if (v53)
          operator delete(v53);
      }
      else
      {
        *(_QWORD *)v37 = v44;
        *((_QWORD *)v37 + 1) = v45;
        *((float *)v37 + 4) = *v40;
        v37 += 24;
        v12 = v64;
        v46 = (char **)v65;
      }
      v46[1] = v37;
      v39 = *v42;
    }
    while ((int)*v42 > 0);
    v57 = (__int128 *)*v46;
    if (*v46 != v37)
    {
      for (i = v37 - 24; v57 < (__int128 *)i; i -= 24)
      {
        v67 = *v57;
        v59 = v67;
        *v57 = *(_OWORD *)i;
        *(_OWORD *)i = v59;
        v60 = *((_DWORD *)v57 + 4);
        *((_DWORD *)v57 + 4) = *((_DWORD *)i + 4);
        *((_DWORD *)i + 4) = v60;
        v57 = (__int128 *)((char *)v57 + 24);
      }
    }
  }
  if (v12)
    operator delete(v12);
}

void sub_1B02F0D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  void *v15;

  v15 = *(void **)a14;
  if (*(_QWORD *)a14)
  {
    *(_QWORD *)(a14 + 8) = v15;
    operator delete(v15);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02F0DCC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  char *v10;
  void *v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t i;
  uint64_t *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  float *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  void *v35;
  char *v36;
  char *v37;
  __int128 v38;
  void *v39;
  void *__p[13];
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 16))(__p);
  if (__p[0])
  {
    sub_1B0303130((uint64_t *)__p);
LABEL_3:
    memset(__p, 0, 24);
    sub_1B02D768C((char *)__p, 0, 0, 0);
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    *(_QWORD *)&v38 = a5;
    BYTE8(v38) = 0;
    v10 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v10;
    a5[1] = (uint64_t)v10;
    a5[2] = (uint64_t)(v10 + 32);
    a5[1] = sub_1B02D75C8((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v10);
    v11 = __p[0];
    if (!__p[0])
      return;
    __p[1] = __p[0];
    goto LABEL_5;
  }
  sub_1B0303130((uint64_t *)__p);
  if (!a3)
    goto LABEL_3;
  if (a4 >= 1024)
    v12 = 1024;
  else
    v12 = a4;
  if (v12 <= 1)
    v13 = 1;
  else
    v13 = v12;
  if (v13 > 1)
  {
    __p[0] = &off_1E60CC808;
    memset(&__p[1], 0, 88);
    __p[12] = &off_1E60CC6D8;
    v41 = 0u;
    v42 = 0u;
    v43 = 0;
    v44 = 1024;
    sub_1B02ED254((uint64_t)__p, a2, a3);
    sub_1B02EF94C(a1, __p);
    *a5 = 0;
    a5[1] = 0;
    a5[2] = 0;
    v34 = a5;
    sub_1B02EDFB4(__p, v13, 0, (uint64_t *)&v38, 0.0);
    v33 = *((_QWORD *)&v38 + 1);
    for (i = v38; i != v33; i += 32)
    {
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v16 = *(uint64_t **)i;
      v17 = *(uint64_t **)(i + 8);
      if (*(uint64_t **)i != v17)
      {
        v18 = 0;
        do
        {
          v19 = *v16;
          if (v18 >= v37)
          {
            v20 = 0xAAAAAAAAAAAAAAABLL * ((v18 - (_BYTE *)v35) >> 3);
            v21 = v20 + 1;
            if (v20 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1B02D7758();
            if (0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3) > v21)
              v21 = 0x5555555555555556 * ((v37 - (_BYTE *)v35) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((v37 - (_BYTE *)v35) >> 3) >= 0x555555555555555)
              v22 = 0xAAAAAAAAAAAAAAALL;
            else
              v22 = v21;
            v23 = (char *)sub_1B02D776C((uint64_t)&v37, v22);
            v25 = &v23[24 * v20];
            *(_OWORD *)v25 = *(_OWORD *)v19;
            *((_DWORD *)v25 + 4) = *(_DWORD *)(v19 + 28);
            v27 = (char *)v35;
            v26 = v36;
            v28 = v25;
            if (v36 != v35)
            {
              do
              {
                v29 = *(_OWORD *)(v26 - 24);
                *((_QWORD *)v28 - 1) = *((_QWORD *)v26 - 1);
                *(_OWORD *)(v28 - 24) = v29;
                v28 -= 24;
                v26 -= 24;
              }
              while (v26 != v27);
              v26 = (char *)v35;
            }
            v18 = v25 + 24;
            v35 = v28;
            v36 = v25 + 24;
            v37 = &v23[24 * v24];
            if (v26)
              operator delete(v26);
          }
          else
          {
            *(_OWORD *)v18 = *(_OWORD *)v19;
            *((_DWORD *)v18 + 4) = *(_DWORD *)(v19 + 28);
            v18 += 24;
          }
          v36 = v18;
          ++v16;
        }
        while (v16 != v17);
      }
      v30 = (float *)(i + 24);
      v31 = v34[1];
      if (v31 >= v34[2])
      {
        v32 = sub_1B02F3E14(v34, (__int128 **)&v35, v30);
      }
      else
      {
        sub_1B02F3DA4((uint64_t)v34, (__int128 **)&v35, v30);
        v32 = v31 + 32;
      }
      v34[1] = v32;
      if (v35)
      {
        v36 = (char *)v35;
        operator delete(v35);
      }
    }
    v35 = &v38;
    sub_1B02D7830((void ***)&v35);
    sub_1B02ECF84((uint64_t)__p);
  }
  else
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, unsigned __int8 *, uint64_t))(*(_QWORD *)a1 + 40))(&v38, a1, a2, a3);
    *(_OWORD *)__p = v38;
    __p[2] = v39;
    v39 = 0;
    v38 = 0uLL;
    LODWORD(__p[3]) = 0;
    a5[1] = 0;
    a5[2] = 0;
    *a5 = 0;
    v35 = a5;
    LOBYTE(v36) = 0;
    v14 = (char *)operator new(0x20uLL);
    *a5 = (uint64_t)v14;
    a5[1] = (uint64_t)v14;
    a5[2] = (uint64_t)(v14 + 32);
    a5[1] = sub_1B02D75C8((uint64_t)(a5 + 2), (uint64_t)__p, (uint64_t)&__p[4], (uint64_t)v14);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    v11 = (void *)v38;
    if ((_QWORD)v38)
    {
      *((_QWORD *)&v38 + 1) = v38;
LABEL_5:
      operator delete(v11);
    }
  }
}

void sub_1B02F11D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  a12 = a11;
  sub_1B02D7830((void ***)&a12);
  sub_1B02ECF84((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02F12A8@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  uint64_t *result;
  _QWORD *v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t (**v28)();
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  uint64_t (**v35)();
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;

  (*(void (**)(uint64_t (***__return_ptr)()))(*(_QWORD *)a1 + 16))(&v28);
  if (v28)
  {
    result = sub_1B0303130((uint64_t *)&v28);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return result;
  }
  result = sub_1B0303130((uint64_t *)&v28);
  if (!a3)
    goto LABEL_3;
  v28 = &off_1E60CC808;
  v29 = 0u;
  v30 = 0u;
  v31 = 0u;
  v32 = 0u;
  v33 = 0u;
  v34 = 0;
  v35 = &off_1E60CC6D8;
  v36 = 0u;
  v37 = 0u;
  v38 = 0;
  v39 = 1024;
  sub_1B02ED254((uint64_t)&v28, a2, a3);
  sub_1B02EF94C(a1, &v28);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1B02EF52C(&v28, (void **)&v26, a5);
  v11 = v26;
  v12 = v27;
  if (v26 != v27)
  {
    v13 = 0;
    v14 = a4 + 2;
    do
    {
      v15 = *v11;
      if ((unint64_t)v13 >= *v14)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v13[-*a4] >> 3);
        v17 = v16 + 1;
        if (v16 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1B02D7758();
        if (0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3) > v17)
          v17 = 0x5555555555555556 * ((uint64_t)(*v14 - *a4) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v14 - *a4) >> 3) >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v17;
        v19 = (char *)sub_1B02D776C((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v16];
        *(_OWORD *)v21 = *(_OWORD *)v15;
        *((_DWORD *)v21 + 4) = *(_DWORD *)(v15 + 28);
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != (char *)*a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v13 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v15;
        *((_DWORD *)v13 + 4) = *(_DWORD *)(v15 + 28);
        v13 += 24;
      }
      a4[1] = v13;
      ++v11;
    }
    while (v11 != v12);
    v11 = v26;
  }
  if (v11)
  {
    v27 = v11;
    operator delete(v11);
  }
  return (uint64_t *)sub_1B02ECF84((uint64_t)&v28);
}

void sub_1B02F14F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  sub_1B02ECF84((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B02F1534(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, char a5@<W4>, int a6@<W5>, uint64_t *j@<X8>, float a8@<S0>)
{
  uint64_t v14;
  float v16;
  uint64_t *v17;
  uint64_t *v18;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  __int128 *v28;
  __int128 *v29;
  __int128 v30;
  char *v31;
  float v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  __int128 *v40;
  __int128 *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  __int128 *v48;
  char *v49;
  uint64_t v50;
  double v51;
  double v52;
  float v53;
  __int128 *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  char *v61;
  __int128 *v62;
  __int128 *v63;
  __int128 *v64;
  __int128 v65;
  char *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 *v69;
  __int128 *v70;
  void *v71;
  void *v72;
  void *v73;
  float v74;
  __int128 *i;
  uint64_t *v76;
  uint64_t *v77;
  char *v78;
  float v79;
  uint64_t v80;
  float v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  __int128 v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  float v96;
  double v97;
  long double v98;
  long double v99;
  double v100;
  float v101;
  uint64_t *v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  unsigned __int8 *v107;
  unsigned __int8 *v108;
  uint64_t v109;
  uint64_t v110;
  __int128 *v111;
  float v112;
  void *__p[13];
  __int128 v114;
  __int128 v115;
  uint64_t v116;
  uint64_t v117;
  double v118;
  double v119;
  __int128 *v120;
  __int128 *v121;
  char *v122;
  void *v123[3];
  void **v124;
  __int128 v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  uint64_t v130;
  uint64_t (**v131)();
  __int128 v132;
  __int128 v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  unint64_t v138;

  v14 = a1;
  (*(void (**)(void ***__return_ptr))(*(_QWORD *)a1 + 16))(&v124);
  if (v124)
  {
    sub_1B0303130((uint64_t *)&v124);
LABEL_3:
    *j = 0;
    j[1] = 0;
    j[2] = 0;
    return;
  }
  sub_1B0303130((uint64_t *)&v124);
  if (!a3)
    goto LABEL_3;
  v136 = 0;
  v137 = 0;
  v138 = 0;
  v124 = (void **)&off_1E60CC808;
  v125 = 0u;
  v126 = 0u;
  v127 = 0u;
  v128 = 0u;
  v129 = 0u;
  v130 = 0;
  v131 = &off_1E60CC6D8;
  v132 = 0u;
  v133 = 0u;
  v134 = 0;
  v135 = 1024;
  sub_1B02ED254((uint64_t)&v124, a2, a3);
  sub_1B02EF94C(v14, &v124);
  sub_1B02EDC74(&v124, (uint64_t *)v123, a8);
  v16 = *((float *)v123[0]
        + *(unsigned int *)(**(_QWORD **)(*((_QWORD *)&v127 + 1)
                                        + 24
                                        * ((((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) & ~((int)(((*((_QWORD *)&v126 + 1) - (_QWORD)v126) >> 3) - 1) >> 31)))
                          + 24));
  if (a6)
  {
    if ((a5 & 1) == 0)
    {
      if ((int)sub_1B03013F4() <= 2)
      {
        LOBYTE(__p[0]) = 0;
        v34 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
        sub_1B02D7994(v34, (uint64_t)"(", 1);
        v35 = (_QWORD *)std::ostream::operator<<();
        v36 = sub_1B02D7994(v35, (uint64_t)") ", 2);
        v37 = sub_1B02D7994(v36, (uint64_t)"LOG(", 4);
        v38 = sub_1B02D7994(v37, (uint64_t)"ERROR", 5);
        v39 = sub_1B02D7994(v38, (uint64_t)") ", 2);
        sub_1B02D7994(v39, (uint64_t)"include_best not supported for wor false", 40);
        sub_1B02D6948(__p);
      }
      goto LABEL_113;
    }
    v103 = a4;
    v104 = a6;
    v105 = v14;
    v107 = a2;
    v109 = a3;
    v120 = 0;
    v121 = 0;
    v122 = 0;
    sub_1B02ED948(&v124, (uint64_t)__p);
    v17 = (uint64_t *)__p[0];
    v18 = (uint64_t *)__p[1];
    if (__p[0] != __p[1])
    {
      v19 = v121;
      do
      {
        v20 = *v17;
        if (v19 >= (__int128 *)v122)
        {
          v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v19 - (char *)v120) >> 3);
          v22 = v21 + 1;
          if (v21 + 1 > 0xAAAAAAAAAAAAAAALL)
            sub_1B02D7758();
          if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v22)
            v22 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
            v23 = 0xAAAAAAAAAAAAAAALL;
          else
            v23 = v22;
          v24 = (char *)sub_1B02D776C((uint64_t)&v122, v23);
          v26 = &v24[24 * v21];
          *(_OWORD *)v26 = *(_OWORD *)v20;
          *((_DWORD *)v26 + 4) = *(_DWORD *)(v20 + 28);
          v28 = v120;
          v27 = v121;
          v29 = (__int128 *)v26;
          if (v121 != v120)
          {
            do
            {
              v30 = *(__int128 *)((char *)v27 - 24);
              *((_QWORD *)v29 - 1) = *((_QWORD *)v27 - 1);
              *(__int128 *)((char *)v29 - 24) = v30;
              v29 = (__int128 *)((char *)v29 - 24);
              v27 = (__int128 *)((char *)v27 - 24);
            }
            while (v27 != v28);
            v27 = v120;
          }
          v19 = (__int128 *)(v26 + 24);
          v120 = v29;
          v121 = (__int128 *)(v26 + 24);
          v122 = &v24[24 * v25];
          if (v27)
            operator delete(v27);
        }
        else
        {
          *v19 = *(_OWORD *)v20;
          *((_DWORD *)v19 + 4) = *(_DWORD *)(v20 + 28);
          v19 = (__int128 *)((char *)v19 + 24);
        }
        v121 = v19;
        ++v17;
      }
      while (v17 != v18);
    }
    v118 = 0.0;
    v31 = v137;
    if ((unint64_t)v137 >= v138)
    {
      v33 = sub_1B02F4070(&v136, &v120, &v118);
      a2 = v107;
      a3 = v109;
    }
    else
    {
      *(_QWORD *)v137 = 0;
      *((_QWORD *)v31 + 1) = 0;
      *((_QWORD *)v31 + 2) = 0;
      sub_1B02D768C(v31, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
      a2 = v107;
      a3 = v109;
      v32 = v118;
      *((float *)v31 + 6) = v32;
      v33 = (uint64_t)(v31 + 32);
    }
    a4 = v103;
    v14 = v105;
    a6 = v104;
    v137 = (char *)v33;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v120)
    {
      v121 = v120;
      operator delete(v120);
    }
  }
  if ((a5 & 1) != 0)
  {
    sub_1B02EDFB4(&v124, a4 + 1, 1, (uint64_t *)&v120, a8);
    v102 = j;
    if (a6)
    {
      sub_1B02F4180(&v118, ((char *)v121 - (char *)v120) >> 5);
      v41 = v120;
      v40 = v121;
      if (v121 != v120)
      {
        v42 = 0;
        v43 = 0;
        v44 = 0;
        do
        {
          if (&v41[v42] != (__int128 *)(*(_QWORD *)&v118 + v43))
          {
            sub_1B02F4220((char *)(*(_QWORD *)&v118 + v43), *(char **)&v41[v42], *((_QWORD *)&v41[v42] + 1), (uint64_t)(*((_QWORD *)&v41[v42] + 1) - *(_QWORD *)&v41[v42]) >> 3);
            v41 = v120;
            v40 = v121;
          }
          ++v44;
          v43 += 24;
          v42 += 2;
        }
        while (v44 < ((char *)v40 - (char *)v41) >> 5);
      }
      sub_1B02ED948(&v124, (uint64_t)__p);
      v45 = sub_1B02F4328(*(uint64_t *)&v118, *(uint64_t *)&v119, (uint64_t)__p);
      v46 = (int)(-1431655765 * ((unint64_t)(v45 - *(_QWORD *)&v118) >> 3));
      if (v46 == ((char *)v121 - (char *)v120) >> 5)
      {
        v48 = v121 - 2;
        v47 = (void *)*((_QWORD *)v121 - 4);
        if (v47)
        {
          *((_QWORD *)v121 - 3) = v47;
          operator delete(v47);
        }
      }
      else
      {
        sub_1B02F4394((__n128 *)&v120[2 * v46 + 2], (__n128 *)v121, (uint64_t)&v120[2 * v46]);
        v48 = v68;
        v69 = v121;
        if (v121 != v68)
        {
          v70 = v121;
          do
          {
            v72 = (void *)*((_QWORD *)v70 - 4);
            v70 -= 2;
            v71 = v72;
            if (v72)
            {
              *((_QWORD *)v69 - 3) = v71;
              operator delete(v71);
            }
            v69 = v70;
          }
          while (v70 != v48);
        }
      }
      v121 = v48;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      __p[0] = &v118;
      sub_1B02EA134((void ***)__p);
    }
    v73 = (void *)*((_QWORD *)v121 - 4);
    v111 = v121 - 2;
    v74 = *((float *)v121 - 2);
    if (v73)
    {
      *((_QWORD *)v121 - 3) = v73;
      operator delete(v73);
    }
    v121 = v111;
    for (i = v120; i != v111; i += 2)
    {
      memset(__p, 0, 24);
      v76 = *(uint64_t **)i;
      v77 = (uint64_t *)*((_QWORD *)i + 1);
      if (*(uint64_t **)i == v77)
      {
        v79 = 0.0;
      }
      else
      {
        v78 = 0;
        v79 = 0.0;
        do
        {
          v80 = *v76;
          v81 = *(float *)(*v76 + 32);
          if (v78 >= __p[2])
          {
            v82 = 0xAAAAAAAAAAAAAAABLL * ((v78 - (char *)__p[0]) >> 3);
            v83 = v82 + 1;
            if (v82 + 1 > 0xAAAAAAAAAAAAAAALL)
              sub_1B02D7758();
            if (0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3) > v83)
              v83 = 0x5555555555555556 * (((char *)__p[2] - (char *)__p[0]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)__p[2] - (char *)__p[0]) >> 3) >= 0x555555555555555)
              v84 = 0xAAAAAAAAAAAAAAALL;
            else
              v84 = v83;
            v85 = (char *)sub_1B02D776C((uint64_t)&__p[2], v84);
            v87 = &v85[24 * v82];
            *(_OWORD *)v87 = *(_OWORD *)v80;
            *((_DWORD *)v87 + 4) = *(_DWORD *)(v80 + 28);
            v89 = (char *)__p[0];
            v88 = (char *)__p[1];
            v90 = v87;
            if (__p[1] != __p[0])
            {
              do
              {
                v91 = *(_OWORD *)(v88 - 24);
                *((_QWORD *)v90 - 1) = *((_QWORD *)v88 - 1);
                *(_OWORD *)(v90 - 24) = v91;
                v90 -= 24;
                v88 -= 24;
              }
              while (v88 != v89);
              v88 = (char *)__p[0];
            }
            v78 = v87 + 24;
            __p[0] = v90;
            __p[1] = v87 + 24;
            __p[2] = &v85[24 * v86];
            if (v88)
              operator delete(v88);
          }
          else
          {
            *(_OWORD *)v78 = *(_OWORD *)v80;
            *((_DWORD *)v78 + 4) = *(_DWORD *)(v80 + 28);
            v78 += 24;
          }
          __p[1] = v78;
          v79 = v79 + (float)(a8 * v81);
          ++v76;
        }
        while (v76 != v77);
      }
      *(float *)&v118 = v79 - v16;
      v92 = v137;
      if ((unint64_t)v137 >= v138)
      {
        v93 = sub_1B02F444C(&v136, (__int128 **)__p, &v118);
      }
      else
      {
        *(_QWORD *)v137 = 0;
        *((_QWORD *)v92 + 1) = 0;
        *((_QWORD *)v92 + 2) = 0;
        sub_1B02D768C(v92, (__int128 *)__p[0], (__int128 *)__p[1], 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3));
        *((_DWORD *)v92 + 6) = LODWORD(v118);
        v93 = (uint64_t)(v92 + 32);
      }
      v137 = (char *)v93;
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    v94 = v136;
    v95 = v137;
    for (j = v102; (char *)v94 != v95; v94 += 32)
    {
      v96 = *(float *)(v94 + 24);
      if (v96 != 0.0)
      {
        v97 = v96 - v74;
        v98 = exp(v97);
        if (v97 <= -10.0)
        {
          v100 = v97 + v98 * -0.5 + v98 * v98 / 24.0 + pow(v98, 4.0) / -2880.0;
        }
        else
        {
          v99 = expm1(-v98);
          v100 = log(-v99);
        }
        v101 = v100;
        *(float *)(v94 + 24) = v101;
      }
    }
    __p[0] = &v120;
    sub_1B02D7830((void ***)__p);
    v50 = v136;
    v49 = v137;
  }
  else
  {
    v50 = v136;
    v49 = v137;
    if (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5))
    {
      v108 = a2;
      v110 = a3;
      v106 = v14;
      do
      {
        memset(&__p[1], 0, 88);
        __p[0] = &off_1E60CC808;
        __p[12] = &off_1E60CC6D8;
        v114 = 0u;
        v115 = 0u;
        v116 = 0;
        v117 = 1024;
        sub_1B02ED254((uint64_t)__p, a2, a3);
        sub_1B02EF94C(v14, __p);
        v120 = 0;
        v121 = 0;
        v122 = 0;
        sub_1B02EF52C(__p, (void **)&v118, a8);
        v52 = v118;
        v51 = v119;
        v53 = 0.0;
        if (*(_QWORD *)&v118 != *(_QWORD *)&v119)
        {
          v54 = v121;
          do
          {
            v55 = **(_QWORD **)&v52;
            if (v54 >= (__int128 *)v122)
            {
              v56 = 0xAAAAAAAAAAAAAAABLL * (((char *)v54 - (char *)v120) >> 3);
              v57 = v56 + 1;
              if (v56 + 1 > 0xAAAAAAAAAAAAAAALL)
                sub_1B02D7758();
              if (0x5555555555555556 * ((v122 - (char *)v120) >> 3) > v57)
                v57 = 0x5555555555555556 * ((v122 - (char *)v120) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((v122 - (char *)v120) >> 3) >= 0x555555555555555)
                v58 = 0xAAAAAAAAAAAAAAALL;
              else
                v58 = v57;
              v59 = (char *)sub_1B02D776C((uint64_t)&v122, v58);
              v61 = &v59[24 * v56];
              *(_OWORD *)v61 = *(_OWORD *)v55;
              *((_DWORD *)v61 + 4) = *(_DWORD *)(v55 + 28);
              v63 = v120;
              v62 = v121;
              v64 = (__int128 *)v61;
              if (v121 != v120)
              {
                do
                {
                  v65 = *(__int128 *)((char *)v62 - 24);
                  *((_QWORD *)v64 - 1) = *((_QWORD *)v62 - 1);
                  *(__int128 *)((char *)v64 - 24) = v65;
                  v64 = (__int128 *)((char *)v64 - 24);
                  v62 = (__int128 *)((char *)v62 - 24);
                }
                while (v62 != v63);
                v62 = v120;
              }
              v54 = (__int128 *)(v61 + 24);
              v120 = v64;
              v121 = (__int128 *)(v61 + 24);
              v122 = &v59[24 * v60];
              if (v62)
                operator delete(v62);
            }
            else
            {
              *v54 = *(_OWORD *)v55;
              *((_DWORD *)v54 + 4) = *(_DWORD *)(v55 + 28);
              v54 = (__int128 *)((char *)v54 + 24);
            }
            v121 = v54;
            v53 = v53 + (float)(a8 * *(float *)(v55 + 32));
            *(_QWORD *)&v52 += 8;
          }
          while (*(_QWORD *)&v52 != *(_QWORD *)&v51);
        }
        v112 = v53 - v16;
        v66 = v137;
        if ((unint64_t)v137 >= v138)
        {
          v67 = sub_1B02F444C(&v136, &v120, &v112);
        }
        else
        {
          *(_QWORD *)v137 = 0;
          *((_QWORD *)v66 + 1) = 0;
          *((_QWORD *)v66 + 2) = 0;
          sub_1B02D768C(v66, v120, v121, 0xAAAAAAAAAAAAAAABLL * (((char *)v121 - (char *)v120) >> 3));
          *((float *)v66 + 6) = v112;
          v67 = (uint64_t)(v66 + 32);
        }
        a2 = v108;
        a3 = v110;
        v14 = v106;
        v137 = (char *)v67;
        if (v118 != 0.0)
        {
          v119 = v118;
          operator delete(*(void **)&v118);
        }
        if (v120)
        {
          v121 = v120;
          operator delete(v120);
        }
        sub_1B02ECF84((uint64_t)__p);
        v50 = v136;
        v49 = v137;
      }
      while (a4 > (unint64_t)((uint64_t)&v137[-v136] >> 5));
    }
  }
  *j = v50;
  j[1] = (uint64_t)v49;
  j[2] = v138;
  j = &v136;
LABEL_113:
  *j = 0;
  j[1] = 0;
  j[2] = 0;
  if (v123[0])
  {
    v123[1] = v123[0];
    operator delete(v123[0]);
  }
  sub_1B02ECF84((uint64_t)&v124);
  v124 = (void **)&v136;
  sub_1B02D7830(&v124);
}

void sub_1B02F1FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char *__p, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void **a44)
{
  uint64_t v44;
  uint64_t v45;
  void *v47;

  if (__p)
  {
    a17 = __p;
    operator delete(__p);
  }
  __p = &a35;
  sub_1B02EA134((void ***)&__p);
  __p = &a38;
  sub_1B02D7830((void ***)&__p);
  v47 = *(void **)(v44 + 200);
  if (v47)
  {
    *(_QWORD *)(v44 + 208) = v47;
    operator delete(v47);
  }
  sub_1B02ECF84((uint64_t)&a44);
  a44 = (void **)(v45 - 160);
  sub_1B02D7830(&a44);
  _Unwind_Resume(a1);
}

float sub_1B02F2140(uint64_t a1, unsigned __int8 *a2, uint64_t a3, float a4)
{
  float v6;
  uint64_t (**v8)();
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t (**v15)();
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v8 = &off_1E60CC808;
  v9 = 0u;
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v14 = 0;
  v15 = &off_1E60CC6D8;
  v16 = 0u;
  v17 = 0u;
  v18 = 0;
  v19 = 1024;
  sub_1B02ED254((uint64_t)&v8, a2, a3);
  sub_1B02EF94C(a1, &v8);
  v6 = sub_1B02EDDF8(&v8, a4);
  sub_1B02ECF84((uint64_t)&v8);
  return v6;
}

void sub_1B02F21D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02ECF84((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1B02F21E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  size_t v10;
  _QWORD *v11;
  _QWORD *v12;
  float v13;
  float v14;
  uint64_t v15;
  uint64_t v16;
  double v17;
  size_t v18;
  _QWORD *v19;
  _QWORD *v20;
  float v21;
  float v22;
  uint64_t v23;
  uint64_t v24;
  double v25;
  float v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  void *v40;
  _QWORD *v41;
  uint64_t v42;
  void *v43;
  _BYTE *v44;
  void *__p;
  _QWORD *v46;
  uint64_t v47;
  char __s[2];

  strcpy(__s, " ");
  v10 = strlen(__s);
  sub_1B02E999C((char **)&v43, a2, a3, (unsigned __int8 *)__s, v10, 0);
  v46 = 0;
  v47 = 0;
  __p = 0;
  sub_1B02F3580(&__p, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v11 = __p;
  v12 = v46;
  if (__p == v46)
  {
    v14 = 0.0;
    if (__p)
    {
LABEL_11:
      v46 = v11;
      operator delete(v11);
    }
  }
  else
  {
    v13 = *(float *)(a1 + 104) + -10.0;
    v14 = 0.0;
    do
    {
      v15 = v11[1];
      v16 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v11, v15);
      if ((_DWORD)v16 == *(_DWORD *)(a1 + 88))
      {
        v14 = v13 + v14;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v16))
          v17 = (float)(*(float *)(a1 + 108) * (float)(int)v15) + -0.1;
        else
          v17 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v16);
        v14 = v17 + v14;
      }
      v11 += 2;
    }
    while (v11 != v12);
    v11 = __p;
    if (__p)
      goto LABEL_11;
  }
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  strcpy(__s, " ");
  v18 = strlen(__s);
  sub_1B02E999C((char **)&v43, a4, a5, (unsigned __int8 *)__s, v18, 0);
  v41 = 0;
  v42 = 0;
  v40 = 0;
  sub_1B02F3580(&v40, v43, (uint64_t)v44, (v44 - (_BYTE *)v43) >> 4);
  v19 = v40;
  v20 = v41;
  if (v40 != v41)
  {
    v21 = *(float *)(a1 + 104) + -10.0;
    v22 = 0.0;
    do
    {
      v23 = v19[1];
      v24 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 112))(a1, *v19, v23);
      if ((_DWORD)v24 == *(_DWORD *)(a1 + 88))
      {
        v22 = v21 + v22;
      }
      else
      {
        if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v24))
          v25 = (float)(*(float *)(a1 + 108) * (float)(int)v23) + -0.1;
        else
          v25 = (*(float (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8), v24);
        v22 = v25 + v22;
      }
      v19 += 2;
    }
    while (v19 != v20);
    v19 = v40;
    if (!v40)
      goto LABEL_25;
    goto LABEL_24;
  }
  v22 = 0.0;
  if (v40)
  {
LABEL_24:
    v41 = v19;
    operator delete(v19);
  }
LABEL_25:
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  v26 = vabds_f32(v14, v22);
  if (v26 > 0.0000001 && (int)sub_1B03013F4() <= 1)
  {
    LOBYTE(v43) = 0;
    v27 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"unigram_model.cc", 16);
    sub_1B02D7994(v27, (uint64_t)"(", 1);
    v28 = (_QWORD *)std::ostream::operator<<();
    v29 = sub_1B02D7994(v28, (uint64_t)") ", 2);
    v30 = sub_1B02D7994(v29, (uint64_t)"LOG(", 4);
    v31 = sub_1B02D7994(v30, (uint64_t)"WARNING", 7);
    v32 = sub_1B02D7994(v31, (uint64_t)") ", 2);
    v33 = sub_1B02D7994(v32, (uint64_t)"Two sentence piece sequences are not equivalent! Left: ", 55);
    v34 = sub_1B02D7994(v33, a2, a3);
    sub_1B02D7994(v34, (uint64_t)", Score: ", 9);
    v35 = (_QWORD *)std::ostream::operator<<();
    v36 = sub_1B02D7994(v35, (uint64_t)". Right: ", 9);
    v37 = sub_1B02D7994(v36, a4, a5);
    sub_1B02D7994(v37, (uint64_t)", Score: ", 9);
    v38 = (_QWORD *)std::ostream::operator<<();
    sub_1B02D7994(v38, (uint64_t)".", 1);
    sub_1B02D6948(&v43);
  }
  return v26 <= 0.0000001;
}

void sub_1B02F25BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B02F2618(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *p_p;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string __p;
  std::string v13;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_1B02D58B0(a1, &v13);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(p_p->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 104);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &__p;
  else
    v5 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v5, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  memset(&__p, 0, sizeof(__p));
  std::string::resize(&__p, 4uLL, 0);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v7 = &__p;
  else
    v7 = (std::string *)__p.__r_.__value_.__r.__words[0];
  LODWORD(v7->__r_.__value_.__l.__data_) = *(_DWORD *)(a1 + 108);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = &__p;
  else
    v8 = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v9 = __p.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v8, v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v13;
  else
    v10 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  else
    v11 = v13.__r_.__value_.__l.__size_;
  std::string::append(a2, (const std::string::value_type *)v10, v11);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
}

void sub_1B02F2754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 23) < 0)
    operator delete(*(void **)v20);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02F27AC()
{
  return 1;
}

uint64_t sub_1B02F27B4()
{
  return 1;
}

uint64_t sub_1B02F27BC()
{
  return 1;
}

uint64_t sub_1B02F27C4()
{
  return 1;
}

_QWORD *sub_1B02F27CC(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1B02EC3FC(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B02F2828(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B02F2844(uint64_t a1, _BYTE *a2, uint64_t a3, unint64_t a4, uint64_t a5, int a6)
{
  unsigned int *v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  unint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  unint64_t v24;
  int *v25;
  int v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  BOOL v31;
  unsigned __int32 v32;
  int i;
  uint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  __n128 v41;
  int v42;
  _OWORD v43[2];
  __int128 v44;

  v9 = *(unsigned int **)(a1 + 16);
  v10 = *v9;
  if (a5)
  {
    v11 = *a2;
    v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v11;
    v10 = v9[v12];
    if ((v10 & 0x800000FF) == v11)
    {
      v13 = a5 - 1;
      v14 = a2 + 1;
      while (1)
      {
        v15 = v12;
        if (!v13)
          goto LABEL_16;
        v16 = *v14++;
        v12 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v16;
        v10 = v9[v12];
        --v13;
        if ((v10 & 0x800000FF) != v16)
          goto LABEL_14;
      }
    }
  }
  else
  {
    v17 = *a2;
    if (!*a2)
    {
      v15 = 0;
      LODWORD(v12) = 0;
LABEL_16:
      if ((v10 & 0x100) != 0)
        v22 = v9[(v10 >> 10 << ((v10 >> 6) & 8)) ^ v12] & 0x7FFFFFFF;
      else
        v22 = -1;
      goto LABEL_19;
    }
    v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v17;
    v10 = v9[v18];
    if ((v10 & 0x800000FF) == v17)
    {
      v19 = a2 + 1;
      LODWORD(v12) = v18;
      while (1)
      {
        v15 = v18;
        v21 = *v19++;
        v20 = v21;
        if (!v21)
          goto LABEL_16;
        v18 = (v10 >> 10 << ((v10 >> 6) & 8)) ^ v12 ^ v20;
        v10 = v9[v18];
        LODWORD(v12) = v18;
        if ((v10 & 0x800000FF) != v20)
          goto LABEL_14;
      }
    }
  }
  v15 = 0;
LABEL_14:
  v22 = -2;
LABEL_19:
  v44 = 0u;
  memset(v43, 0, sizeof(v43));
  v41.n128_u32[0] = 0;
  v41.n128_u64[1] = v15;
  v42 = v22;
  sub_1B02F2B78(v43, &v41);
  v23 = *((_QWORD *)&v44 + 1);
  if (*((_QWORD *)&v44 + 1))
  {
    v24 = 0;
    do
    {
      v25 = (int *)(*(_QWORD *)(*((_QWORD *)&v43[0] + 1) + 8 * ((unint64_t)v44 / 0xAA))
                  + 24 * ((unint64_t)v44 % 0xAA));
      v26 = *v25;
      v27 = v25[2];
      v28 = v25[4];
      *(_QWORD *)&v44 = v44 + 1;
      *((_QWORD *)&v44 + 1) = v23 - 1;
      if ((unint64_t)v44 >= 0x154)
      {
        operator delete(**((void ***)&v43[0] + 1));
        *((_QWORD *)&v43[0] + 1) += 8;
        *(_QWORD *)&v44 = v44 - 170;
      }
      if ((v28 & 0x80000000) == 0)
      {
        v29 = a3 + 16 * v24;
        *(_DWORD *)v29 = v28;
        *(_QWORD *)(v29 + 8) = a5;
        ++v24;
      }
      v31 = a6 >= 0 && v26 > a6;
      if (v24 >= a4 || v31)
        break;
      if (v28 != -2)
      {
        v32 = v26 + 1;
        for (i = 1; i != 256; ++i)
        {
          v34 = *(_QWORD *)(a1 + 16);
          v35 = (*(_DWORD *)(v34 + 4 * v27) >> 10 << ((*(_DWORD *)(v34 + 4 * v27) >> 6) & 8)) ^ v27 ^ i;
          v36 = *(_DWORD *)(v34 + 4 * v35);
          if (i == (v36 & 0x800000FF))
          {
            if ((v36 & 0x100) != 0)
              v37 = *(_DWORD *)(v34 + 4 * ((v36 >> 10 << ((v36 >> 6) & 8)) ^ v35)) & 0x7FFFFFFF;
            else
              v37 = -1;
            v41.n128_u32[0] = v32;
            v41.n128_u64[1] = v35;
            v42 = v37;
            sub_1B02F2B78(v43, &v41);
          }
        }
      }
      v23 = *((_QWORD *)&v44 + 1);
    }
    while (*((_QWORD *)&v44 + 1));
  }
  else
  {
    v24 = 0;
  }
  sub_1B02F3394(v43);
  return v24;
}

void sub_1B02F2B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_1B02F3394((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B02F2B48(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = (uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2)
      *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 16 * a2;
  }
  else
  {
    sub_1B02F3474((void **)a1, a2 - v2);
  }
}

__n128 sub_1B02F2B78(_QWORD *a1, __n128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  __n128 *v8;
  __n128 result;

  v4 = a1[2];
  v5 = a1[1];
  v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5)
    v6 = 0;
  v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    sub_1B02F2C24(a1);
    v5 = a1[1];
    v7 = a1[5] + a1[4];
  }
  v8 = (__n128 *)(*(_QWORD *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  *v8 = result;
  ++a1[5];
  return result;
}

void sub_1B02F2C24(_QWORD *a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  uint64_t v5;
  char *v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  unint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  void *v53;
  __int128 v54;
  __int128 v55;
  _QWORD *v56;

  v2 = a1[4];
  v3 = v2 >= 0xAA;
  v4 = v2 - 170;
  if (v3)
  {
    v5 = (uint64_t)(a1 + 3);
    v6 = (char *)a1[3];
    a1[4] = v4;
    v7 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v11 = *v7;
    v9 = (char *)(v7 + 1);
    v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(_QWORD *)v8 = v10;
      a1[2] += 8;
      return;
    }
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v33 = 1;
      else
        v33 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1B02D7E30(v5, v33);
      v35 = &v34[8 * (v33 >> 2)];
      v37 = &v34[8 * v36];
      v38 = (uint64_t *)a1[1];
      v8 = v35;
      v39 = a1[2] - (_QWORD)v38;
      if (v39)
      {
        v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        v40 = 8 * (v39 >> 3);
        v41 = &v34[8 * (v33 >> 2)];
        do
        {
          v42 = *v38++;
          *(_QWORD *)v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    v13 = v12 >> 3;
    v14 = v12 >> 3 < -1;
    v15 = (v12 >> 3) + 2;
    if (v14)
      v16 = v15;
    else
      v16 = v13 + 1;
    v17 = -(v16 >> 1);
    v18 = v16 >> 1;
    v19 = &v9[-8 * v18];
    v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      v9 = (char *)a1[1];
    }
    v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  v21 = a1[2];
  v22 = (v21 - a1[1]) >> 3;
  v23 = a1[3];
  v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(_QWORD *)&v54 = operator new(0xFF0uLL);
      sub_1B02F2F38(a1, &v54);
      return;
    }
    *(_QWORD *)&v54 = operator new(0xFF0uLL);
    sub_1B02F304C((uint64_t)a1, &v54);
    v44 = (_QWORD *)a1[1];
    v8 = (char *)a1[2];
    v45 = *v44;
    v9 = (char *)(v44 + 1);
    v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3])
      goto LABEL_33;
    v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1)
        v46 = 1;
      else
        v46 = (uint64_t)&v8[-*a1] >> 2;
      v34 = (char *)sub_1B02D7E30((uint64_t)(a1 + 3), v46);
      v35 = &v34[8 * (v46 >> 2)];
      v37 = &v34[8 * v47];
      v48 = (uint64_t *)a1[1];
      v8 = v35;
      v49 = a1[2] - (_QWORD)v48;
      if (v49)
      {
        v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        v50 = 8 * (v49 >> 3);
        v51 = &v34[8 * (v46 >> 2)];
        do
        {
          v52 = *v48++;
          *(_QWORD *)v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1)
    v25 = 1;
  else
    v25 = v24 >> 2;
  v56 = a1 + 3;
  *(_QWORD *)&v54 = sub_1B02D7E30((uint64_t)(a1 + 3), v25);
  *((_QWORD *)&v54 + 1) = v54 + 8 * v22;
  *(_QWORD *)&v55 = *((_QWORD *)&v54 + 1);
  *((_QWORD *)&v55 + 1) = v54 + 8 * v26;
  v53 = operator new(0xFF0uLL);
  sub_1B02F3168(&v54, &v53);
  v27 = (_QWORD *)a1[2];
  v28 = -7 - (_QWORD)v27;
  while (v27 != (_QWORD *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1B02F327C((uint64_t)&v54, v27);
  }
  v29 = (char *)*a1;
  v30 = v54;
  v31 = v55;
  *(_QWORD *)&v54 = *a1;
  *((_QWORD *)&v54 + 1) = v27;
  v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  v55 = v32;
  if (v27 != (_QWORD *)v32)
    *(_QWORD *)&v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  if (v29)
    operator delete(v29);
}

void sub_1B02F2EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  void *v13;

  operator delete(v13);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B02F2F38(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;

  v5 = (char *)a1[3];
  v4 = (uint64_t)(a1 + 3);
  v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    v7 = (char *)a1[1];
    v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1)
        v18 = 1;
      else
        v18 = (uint64_t)&v6[-*a1] >> 2;
      v19 = (char *)sub_1B02D7E30(v4, v18);
      v21 = &v19[8 * (v18 >> 2)];
      v22 = (uint64_t *)a1[1];
      v6 = v21;
      v23 = a1[2] - (_QWORD)v22;
      if (v23)
      {
        v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        v24 = 8 * (v23 >> 3);
        v25 = &v19[8 * (v18 >> 2)];
        do
        {
          v26 = *v22++;
          *(_QWORD *)v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        v6 = (char *)a1[2];
      }
    }
    else
    {
      v9 = v8 >> 3;
      v10 = v8 >> 3 < -1;
      v11 = (v8 >> 3) + 2;
      if (v10)
        v12 = v11;
      else
        v12 = v9 + 1;
      v13 = -(v12 >> 1);
      v14 = v12 >> 1;
      v15 = &v7[-8 * v14];
      v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        v6 = (char *)a1[1];
      }
      v17 = &v6[8 * v13];
      v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(_QWORD *)v6 = *a2;
  a1[2] += 8;
}

void sub_1B02F304C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = a1 + 24;
    v7 = *(_BYTE **)(a1 + 24);
    v8 = *(_BYTE **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4)
        v12 = 1;
      else
        v12 = (v7 - v4) >> 2;
      v13 = 2 * v12;
      v14 = (char *)sub_1B02D7E30(v6, v12);
      v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      v16 = *(uint64_t **)(a1 + 8);
      v17 = v5;
      v18 = *(_QWORD *)(a1 + 16) - (_QWORD)v16;
      if (v18)
      {
        v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        v19 = 8 * (v18 >> 3);
        v20 = v5;
        do
        {
          v21 = *v16++;
          *(_QWORD *)v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      v22 = *(char **)a1;
      *(_QWORD *)a1 = v14;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v17;
      *(_QWORD *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v9 = (v7 - v8) >> 3;
      if (v9 >= -1)
        v10 = v9 + 1;
      else
        v10 = v9 + 2;
      v11 = v10 >> 1;
      v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

void sub_1B02F3168(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)sub_1B02D7E30(a1[4], v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1B02F327C(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)sub_1B02D7E30(*(_QWORD *)(a1 + 32), v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t sub_1B02F3394(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  a1[5] = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = (void **)a1[2];
      v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 85;
  }
  else
  {
    if (v5 != 2)
      goto LABEL_9;
    v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    v7 = *v2++;
    operator delete(v7);
  }
  return sub_1B02F3428((uint64_t)a1);
}

uint64_t sub_1B02F3428(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
    *(_QWORD *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  v4 = *(void **)a1;
  if (*(_QWORD *)a1)
    operator delete(v4);
  return a1;
}

void sub_1B02F3474(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - (_BYTE *)*a1;
    v9 = a2 + (v8 >> 4);
    if (v9 >> 60)
      sub_1B02D7758();
    v10 = v8 >> 4;
    v11 = v5 - (_BYTE *)*a1;
    if (v11 >> 3 > v9)
      v9 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    if (v12)
      v13 = (char *)sub_1B02D8514(v4, v12);
    else
      v13 = 0;
    v14 = &v13[16 * v10];
    v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    v16 = &v14[16 * a2];
    v18 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 1) = *((_OWORD *)v17 - 1);
        v14 -= 16;
        v17 -= 16;
      }
      while (v17 != v18);
      v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
      operator delete(v17);
  }
}

_QWORD *sub_1B02F3580(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = sub_1B02DB178(result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1B02F35DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B02F35F8(_QWORD *a1)
{
  sub_1B02F361C(a1);
  JUMPOUT(0x1B5E07CD8);
}

_QWORD *sub_1B02F361C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E60CC6D8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1B5E07CB4](*v2, 0x1070C8005A2B047);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1B02F3698(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  size_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1B02D7758();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    v19 = v4;
    if (v11)
      v12 = (char *)sub_1B02D776C(v4, v11);
    else
      v12 = 0;
    v15 = v12;
    v16 = &v12[24 * v8];
    v18 = &v12[24 * v11];
    v14 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v16, v14);
    v17 = &v16[v14];
    sub_1B02F37FC(a1, &v15);
    sub_1B02EB9E0((uint64_t)&v15);
  }
}

void sub_1B02F37E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EB9E0((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F37FC(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02F3870((uint64_t)(a1 + 2), a1[1], (_QWORD *)a1[1], *a1, (_QWORD *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B02F3870(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      *(_QWORD *)(v7 - 8) = 0;
      v8 = *(_OWORD *)(a3 - 3);
      a3 -= 3;
      *(_OWORD *)(v7 - 24) = v8;
      *(_QWORD *)(v7 - 8) = a3[2];
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      v7 = *((_QWORD *)&v14 + 1) - 24;
      *((_QWORD *)&v14 + 1) -= 24;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1B02F3910((uint64_t)v11);
  return v9;
}

uint64_t sub_1B02F3910(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EB99C(a1);
  return a1;
}

uint64_t sub_1B02F3944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v8[3];
  char v9;
  uint64_t v10;
  uint64_t v11;

  v4 = a4;
  v10 = a4;
  v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  v8[2] = &v11;
  v9 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *(_QWORD *)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      sub_1B02F27CC((_QWORD *)v4, *(const void **)v6, *(_QWORD *)(v6 + 8), (uint64_t)(*(_QWORD *)(v6 + 8) - *(_QWORD *)v6) >> 3);
      *(_DWORD *)(v4 + 24) = *(_DWORD *)(v6 + 24);
      v4 = v11 + 32;
      v11 += 32;
      v6 += 32;
    }
    while (v6 != a3);
  }
  v9 = 1;
  sub_1B02F39FC((uint64_t)v8);
  return v4;
}

void sub_1B02F39E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02F39FC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F39FC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02D77E4(a1);
  return a1;
}

void sub_1B02F3A30(_QWORD *a1)
{
  sub_1B02EF4B0(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02F3A54(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  float v9;
  _QWORD *v10;

  if (a3 >= 2)
  {
    v3 = (unint64_t)(a3 - 2) >> 1;
    v4 = (_QWORD *)(result + 8 * v3);
    v5 = *v4;
    v8 = *(_QWORD *)(a2 - 8);
    v6 = (_QWORD *)(a2 - 8);
    v7 = v8;
    v9 = *(float *)(v8 + 16);
    if (*(float *)(*v4 + 16) < v9)
    {
      do
      {
        v10 = v4;
        *v6 = v5;
        if (!v3)
          break;
        v3 = (v3 - 1) >> 1;
        v4 = (_QWORD *)(result + 8 * v3);
        v5 = *v4;
        v6 = v10;
      }
      while (*(float *)(*v4 + 16) < v9);
      *v10 = v7;
    }
  }
  return result;
}

uint64_t sub_1B02F3AB0(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  _QWORD v19[5];

  v6 = a1[2];
  result = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(result - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      v14 = 32 * a2;
      v15 = v7 + 32 * a2;
      do
      {
        *(_QWORD *)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
        *(_DWORD *)(v7 + 24) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        v7 += 32;
        v14 -= 32;
      }
      while (v14);
      v7 = v15;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = v7 - *a1;
    v9 = a2 + (v8 >> 5);
    if (v9 >> 59)
      sub_1B02D7758();
    v10 = v8 >> 5;
    v11 = v5 - *a1;
    if (v11 >> 4 > v9)
      v9 = v11 >> 4;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0)
      v12 = 0x7FFFFFFFFFFFFFFLL;
    else
      v12 = v9;
    v19[4] = result;
    if (v12)
      v13 = (char *)sub_1B02EBAE0(result, v12);
    else
      v13 = 0;
    v16 = &v13[32 * v10];
    v19[0] = v13;
    v19[1] = v16;
    v19[3] = &v13[32 * v12];
    v17 = 32 * a2;
    v18 = &v16[32 * a2];
    do
    {
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_DWORD *)v16 + 6) = 0;
      *((_QWORD *)v16 + 2) = 0;
      v16 += 32;
      v17 -= 32;
    }
    while (v17);
    v19[2] = v18;
    sub_1B02F3BD4(a1, v19);
    return sub_1B02EBFC8((uint64_t)v19);
  }
  return result;
}

void sub_1B02F3BC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F3BD4(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02F3C48((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B02F3C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1B02F3CF0((uint64_t)v11);
  return v9;
}

uint64_t sub_1B02F3CF0(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EBF84(a1);
  return a1;
}

_QWORD *sub_1B02F3D24(_QWORD *a1, unint64_t a2, _QWORD *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02EC3FC(a1, a2);
    v6 = (_QWORD *)a1[1];
    v7 = &v6[a2];
    v8 = 8 * a2;
    do
    {
      *v6++ = *a3;
      v8 -= 8;
    }
    while (v8);
    a1[1] = v7;
  }
  return a1;
}

void sub_1B02F3D88(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

float sub_1B02F3DA4(uint64_t a1, __int128 **a2, float *a3)
{
  uint64_t v5;
  float result;

  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  *(_QWORD *)(v5 + 16) = 0;
  sub_1B02D768C((char *)v5, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  result = *a3;
  *(float *)(v5 + 24) = *a3;
  *(_QWORD *)(a1 + 8) = v5 + 32;
  return result;
}

void sub_1B02F3E0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F3E14(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_1B02D7758();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_1B02EBAE0(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_1B02D768C(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B02F3F20(a1, v16);
  v14 = a1[1];
  sub_1B02EBFC8((uint64_t)v16);
  return v14;
}

void sub_1B02F3F0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F3F20(uint64_t *a1, _QWORD *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_1B02F3F94((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1B02F3F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  _QWORD v11[3];
  char v12;
  __int128 v13;
  __int128 v14;

  v7 = a7;
  *(_QWORD *)&v14 = a6;
  *((_QWORD *)&v14 + 1) = a7;
  v13 = v14;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  if (a3 == a5)
  {
    v9 = a6;
  }
  else
  {
    do
    {
      *(_QWORD *)(v7 - 32) = 0;
      *(_QWORD *)(v7 - 24) = 0;
      *(_QWORD *)(v7 - 16) = 0;
      v8 = *(_OWORD *)(a3 - 32);
      a3 -= 32;
      *(_OWORD *)(v7 - 32) = v8;
      *(_QWORD *)(v7 - 16) = *(_QWORD *)(a3 + 16);
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_DWORD *)(v7 - 8) = *(_DWORD *)(a3 + 24);
      v7 = *((_QWORD *)&v14 + 1) - 32;
      *((_QWORD *)&v14 + 1) -= 32;
    }
    while (a3 != a5);
    v9 = v14;
  }
  v12 = 1;
  sub_1B02F403C((uint64_t)v11);
  return v9;
}

uint64_t sub_1B02F403C(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 24))
    sub_1B02EBF84(a1);
  return a1;
}

uint64_t sub_1B02F4070(uint64_t *a1, __int128 **a2, double *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  float v14;
  uint64_t v15;
  _QWORD v17[2];
  char *v18;
  char *v19;
  uint64_t *v20;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_1B02D7758();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v20 = a1 + 2;
  if (v11)
    v12 = (char *)sub_1B02EBAE0(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v17[0] = v12;
  v17[1] = v13;
  v18 = v13;
  v19 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_1B02D768C(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v14 = *a3;
  *((float *)v13 + 6) = v14;
  v18 += 32;
  sub_1B02F3F20(a1, v17);
  v15 = a1[1];
  sub_1B02EBFC8((uint64_t)v17);
  return v15;
}

void sub_1B02F416C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02F4180(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    sub_1B02D7708(a1, a2);
    v4 = (char *)a1[1];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_1B02F420C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1B02EA134(&a9);
  _Unwind_Resume(a1);
}

char *sub_1B02F4220(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  char *v13;
  _BYTE *v14;
  unint64_t v15;
  char *v16;
  size_t v17;
  void *v18;
  char *v19;

  v7 = result;
  v8 = *((_QWORD *)result + 2);
  v9 = *(char **)result;
  if (a4 > (v8 - *(_QWORD *)result) >> 3)
  {
    if (v9)
    {
      *((_QWORD *)result + 1) = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61)
      sub_1B02D7758();
    v10 = v8 >> 2;
    if (v8 >> 2 <= a4)
      v10 = a4;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    result = sub_1B02EC3FC(v7, v11);
    v13 = (char *)v7[1];
    v12 = (void **)(v7 + 1);
    v9 = v13;
LABEL_16:
    v17 = a3 - (_QWORD)__src;
    if (v17)
    {
      v18 = v9;
      v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  v12 = (void **)(result + 8);
  v14 = (_BYTE *)*((_QWORD *)result + 1);
  v15 = (v14 - v9) >> 3;
  if (v15 >= a4)
    goto LABEL_16;
  v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    result = (char *)memmove(*(void **)result, __src, v14 - v9);
    v9 = (char *)*v12;
  }
  v17 = a3 - (_QWORD)v16;
  if (v17)
  {
    v18 = v9;
    v19 = v16;
LABEL_18:
    result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *v12 = &v9[v17];
  return result;
}

uint64_t sub_1B02F4328(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
    while (*(_QWORD *)(v3 + 8) - *(_QWORD *)v3 != v6 || memcmp(*(const void **)v3, v5, v6))
    {
      v3 += 24;
      if (v3 == a2)
        return a2;
    }
  }
  return v3;
}

__n128 *sub_1B02F4394(__n128 *a1, __n128 *a2, uint64_t a3)
{
  __n128 *v4;
  __n128 *v5;

  v4 = a1;
  if (a1 == a2)
    return a1;
  v5 = a2;
  do
  {
    sub_1B02F43FC(a3, v4);
    *(_DWORD *)(a3 + 24) = v4[1].n128_u32[2];
    a3 += 32;
    v4 += 2;
  }
  while (v4 != v5);
  return v5;
}

__n128 sub_1B02F43FC(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1B02F444C(uint64_t *a1, __int128 **a2, _DWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD v16[2];
  char *v17;
  char *v18;
  uint64_t *v19;

  v4 = *a1;
  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_1B02D7758();
  v9 = (uint64_t)(a1 + 2);
  v10 = a1[2] - v4;
  if (v10 >> 4 > v6)
    v6 = v10 >> 4;
  if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0)
    v11 = 0x7FFFFFFFFFFFFFFLL;
  else
    v11 = v6;
  v19 = a1 + 2;
  if (v11)
    v12 = (char *)sub_1B02EBAE0(v9, v11);
  else
    v12 = 0;
  v13 = &v12[32 * v5];
  v16[0] = v12;
  v16[1] = v13;
  v17 = v13;
  v18 = &v12[32 * v11];
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  sub_1B02D768C(v13, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *((_DWORD *)v13 + 6) = *a3;
  v17 += 32;
  sub_1B02F3F20(a1, v16);
  v14 = a1[1];
  sub_1B02EBFC8((uint64_t)v16);
  return v14;
}

void sub_1B02F4544(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02EBFC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F4558(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1B02F0228(a1);
  *v4 = &off_1E60CC828;
  v4[1] = a2 + 16;
  sub_1B02D4AE8((uint64_t)v4);
  return a1;
}

void sub_1B02F4594(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B02D460C(v1);
  _Unwind_Resume(a1);
}

void sub_1B02F45B0(uint64_t a1)
{
  sub_1B02D460C(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B02F45D4(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  uint64_t v8;
  int v9;
  int v10;
  char *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  __int128 v24;
  uint64_t v25;

  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v25);
  if (v25)
  {
    sub_1B0303130(&v25);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B0303130(&v25);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    v8 = (int)sub_1B02DC3C4(a1[2], a2, a3, 0);
    v9 = (*(uint64_t (**)(uint64_t *, _BYTE *, uint64_t))(*a1 + 112))(a1, a2, v8);
    v10 = v9;
    v12 = (char *)a4[1];
    v11 = (char *)a4[2];
    if (v12 >= v11)
    {
      v14 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        sub_1B02D7758();
      v16 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*a4) >> 3);
      if (2 * v16 > v15)
        v15 = 2 * v16;
      if (v16 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v15;
      v18 = (char *)sub_1B02D776C((uint64_t)(a4 + 2), v17);
      v20 = &v18[24 * v14];
      *(_QWORD *)v20 = a2;
      *((_QWORD *)v20 + 1) = v8;
      *((_DWORD *)v20 + 4) = v10;
      v22 = (char *)*a4;
      v21 = (char *)a4[1];
      v23 = v20;
      if (v21 != *a4)
      {
        do
        {
          v24 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v23 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v23 - 24) = v24;
          v23 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        v21 = (char *)*a4;
      }
      v13 = v20 + 24;
      *a4 = v23;
      a4[1] = v20 + 24;
      a4[2] = &v18[24 * v19];
      if (v21)
        operator delete(v21);
    }
    else
    {
      *(_QWORD *)v12 = a2;
      *((_QWORD *)v12 + 1) = v8;
      v13 = v12 + 24;
      *((_DWORD *)v12 + 4) = v9;
    }
    a4[1] = v13;
    a2 += v8;
    a3 -= v8;
  }
  while (a3);
}

void sub_1B02F4794(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B02F47B8(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1B02F0228(a1);
  *v4 = &off_1E60CC5C8;
  v4[1] = a2 + 16;
  sub_1B02D4AE8((uint64_t)v4);
  return a1;
}

void sub_1B02F47F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B02D460C(v1);
  _Unwind_Resume(a1);
}

void sub_1B02F4810(uint64_t a1)
{
  sub_1B02D460C(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B02F4834(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void **a4@<X8>)
{
  unsigned __int8 **v8;
  unsigned __int8 **v9;
  int v10;
  int v11;
  char *v12;
  char *v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  __int128 v25;
  unsigned __int8 **v26;
  unsigned __int8 **v27;

  (*(void (**)(unsigned __int8 ***__return_ptr))(*(_QWORD *)a1 + 16))(&v26);
  if (v26)
  {
    sub_1B0303130((uint64_t *)&v26);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B0303130((uint64_t *)&v26);
  if (!a3)
    goto LABEL_3;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  sub_1B02D5BEC(a2, a3, 0, 0, &v26);
  v8 = v26;
  v9 = v27;
  if (v26 != v27)
  {
    do
    {
      v10 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned __int8 *))(*(_QWORD *)a1 + 112))(a1, *v8, v8[1]);
      v11 = v10;
      v13 = (char *)a4[1];
      v12 = (char *)a4[2];
      if (v13 >= v12)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v13 - (_BYTE *)*a4) >> 3);
        v16 = v15 + 1;
        if (v15 + 1 > 0xAAAAAAAAAAAAAAALL)
          sub_1B02D7758();
        v17 = 0xAAAAAAAAAAAAAAABLL * ((v12 - (_BYTE *)*a4) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        v19 = (char *)sub_1B02D776C((uint64_t)(a4 + 2), v18);
        v21 = &v19[24 * v15];
        *(_OWORD *)v21 = *(_OWORD *)v8;
        *((_DWORD *)v21 + 4) = v11;
        v23 = (char *)*a4;
        v22 = (char *)a4[1];
        v24 = v21;
        if (v22 != *a4)
        {
          do
          {
            v25 = *(_OWORD *)(v22 - 24);
            *((_QWORD *)v24 - 1) = *((_QWORD *)v22 - 1);
            *(_OWORD *)(v24 - 24) = v25;
            v24 -= 24;
            v22 -= 24;
          }
          while (v22 != v23);
          v22 = (char *)*a4;
        }
        v14 = v21 + 24;
        *a4 = v24;
        a4[1] = v21 + 24;
        a4[2] = &v19[24 * v20];
        if (v22)
          operator delete(v22);
      }
      else
      {
        *(_OWORD *)v13 = *(_OWORD *)v8;
        *((_DWORD *)v13 + 4) = v10;
        v14 = v13 + 24;
      }
      a4[1] = v14;
      v8 += 2;
    }
    while (v8 != v9);
    v8 = v26;
  }
  if (v8)
  {
    v27 = v8;
    operator delete(v8);
  }
}

void sub_1B02F4A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  uint64_t v11;
  void *v13;

  if (__p)
    operator delete(__p);
  v13 = *(void **)v11;
  if (*(_QWORD *)v11)
  {
    *(_QWORD *)(v11 + 8) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B02F4A48()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_1B02F65B0((uint64_t)&unk_1EEEB2CA8, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&unk_1EEEB2CA8);
}

void sub_1B02F4A9C()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_1B02F5A98((uint64_t)&unk_1EEEB2B90, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&unk_1EEEB2B90);
}

void sub_1B02F4AF0()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc");
  sub_1B02F4B44((uint64_t)&unk_1EEEB2C50, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&unk_1EEEB2C50);
}

uint64_t sub_1B02F4B44(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E60CC438;
  *(_QWORD *)(a1 + 8) = a2;
  sub_1B03058C4(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EEEB1B10))
    sub_1B0310068(dword_1EEEB1B10);
  *(_QWORD *)(a1 + 48) = &qword_1EEEB2CE0;
  *(_QWORD *)(a1 + 56) = &qword_1EEEB2CE0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  return a1;
}

void sub_1B02F4BB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B03059A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F4BC8(uint64_t a1)
{
  sub_1B02F4C00(a1);
  sub_1B02F4D24((uint64_t *)(a1 + 8));
  sub_1B03059A0(a1 + 16);
  return a1;
}

uint64_t *sub_1B02F4C00(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 140);
    v4 = sub_1B0305340(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
  }
LABEL_4:
  result = (uint64_t *)(a1 + 48);
  if (*(uint64_t **)(a1 + 48) != &qword_1EEEB2CE0)
  {
    v6 = sub_1B02F6FF0(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (uint64_t *)MEMORY[0x1B5E07CD8](v7, 0x1012C40EC159624);
  }
  v9 = *(uint64_t **)(a1 + 56);
  v8 = (uint64_t *)(a1 + 56);
  if (v9 != &qword_1EEEB2CE0)
  {
    v10 = sub_1B02F6FF0(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (uint64_t *)MEMORY[0x1B5E07CD8](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B02F4D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02F4D24(uint64_t *result)
{
  uint64_t v1;
  unint64_t v2;

  v1 = *result;
  if ((*result & 1) != 0)
  {
    v2 = v1 & 0xFFFFFFFFFFFFFFFELL;
    if (!*(_QWORD *)(v1 & 0xFFFFFFFFFFFFFFFELL) && v2 != 0)
    {
      if (*(char *)(v2 + 31) < 0)
        operator delete(*(void **)(v2 + 8));
      JUMPOUT(0x1B5E07CD8);
    }
  }
  return result;
}

void sub_1B02F4D8C(uint64_t a1)
{
  sub_1B02F4BC8(a1);
  JUMPOUT(0x1B5E07CD8);
}

unsigned __int8 *sub_1B02F4DB0(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  result = sub_1B0309390((unsigned __int8 *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 3) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v4 + 23) < 0)
      {
        **(_BYTE **)v4 = 0;
        *(_QWORD *)(v4 + 8) = 0;
        if ((v3 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
    if ((v3 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v5 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 23) < 0)
    {
      **(_BYTE **)v5 = 0;
      *(_QWORD *)(v5 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v5 = 0;
      *(_BYTE *)(v5 + 23) = 0;
    }
  }
LABEL_11:
  if ((v3 & 0x1C) != 0)
  {
    *(_DWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 64) = 0;
  }
  *(_DWORD *)(a1 + 40) = 0;
  v6 = *(_QWORD *)(a1 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v7 + 31) < 0)
    {
      **(_BYTE **)(v7 + 8) = 0;
      *(_QWORD *)(v7 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v7 + 8) = 0;
      *(_BYTE *)(v7 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B02F4E7C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  int v15;
  int v16;
  uint64_t v17;
  std::string *v18;
  void *v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  BOOL v26;
  uint64_t v27;
  unsigned int v28;
  std::string *v29;
  uint64_t v30;
  int v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  int v36[2];

  *(_QWORD *)v36 = a2;
  v5 = 0;
  if ((sub_1B02F70C0((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v36 + 1);
      v9 = **(_BYTE **)v36;
      if ((char)**(_BYTE **)v36 < 0)
      {
        v10 = v9 + (*v8 << 7);
        v9 = v10 - 128;
        if (*v8 < 0)
        {
          v27 = sub_1B0311940(*(uint64_t *)v36, v10 - 128);
          *(_QWORD *)v36 = v27;
          if (!v27)
            goto LABEL_56;
          v8 = (char *)v27;
          v9 = v28;
          goto LABEL_8;
        }
        v8 = (char *)(*(_QWORD *)v36 + 2);
      }
      *(_QWORD *)v36 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 1u;
          v11 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 48);
          goto LABEL_22;
        case 2u:
          if (v9 != 16)
            goto LABEL_37;
          v5 |= 4u;
          v14 = v8 + 1;
          v15 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_17;
          v16 = *v14;
          v15 = v15 + (v16 << 7) - 128;
          if (v16 < 0)
          {
            v30 = sub_1B0311890((uint64_t)v8, v15);
            *(_QWORD *)v36 = v30;
            *(_DWORD *)(a1 + 64) = v31;
            if (!v30)
              goto LABEL_56;
          }
          else
          {
            v14 = v8 + 2;
LABEL_17:
            *(_QWORD *)v36 = v14;
            *(_DWORD *)(a1 + 64) = v15;
          }
          goto LABEL_35;
        case 3u:
          if (v9 != 26)
            goto LABEL_37;
          *(_DWORD *)(a1 + 40) |= 2u;
          v17 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
          if ((v17 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 56);
LABEL_22:
          v18 = (std::string *)sub_1B0304284(v13, (uint64_t)v12);
          v19 = (void *)sub_1B03119F4(v18, *(char **)v36, (uint64_t)a3);
          goto LABEL_23;
        case 4u:
          if (v9 != 32)
            goto LABEL_37;
          v5 |= 8u;
          v20 = v8 + 1;
          v21 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v32 = sub_1B0311890((uint64_t)v8, v21);
            *(_QWORD *)v36 = v32;
            *(_DWORD *)(a1 + 68) = v33;
            if (!v32)
              goto LABEL_56;
          }
          else
          {
            v20 = v8 + 2;
LABEL_29:
            *(_QWORD *)v36 = v20;
            *(_DWORD *)(a1 + 68) = v21;
          }
          goto LABEL_35;
        case 5u:
          if (v9 != 40)
            goto LABEL_37;
          v5 |= 0x10u;
          v23 = v8 + 1;
          v24 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v34 = sub_1B0311890((uint64_t)v8, v24);
            *(_QWORD *)v36 = v34;
            *(_DWORD *)(a1 + 72) = v35;
            if (!v34)
              goto LABEL_56;
          }
          else
          {
            v23 = v8 + 2;
LABEL_34:
            *(_QWORD *)v36 = v23;
            *(_DWORD *)(a1 + 72) = v24;
          }
          goto LABEL_35;
        default:
LABEL_37:
          if (v9)
            v26 = (v9 & 7) == 4;
          else
            v26 = 1;
          if (v26)
          {
            a3[10].i32[0] = v9 - 1;
            goto LABEL_2;
          }
          if (v9 < 0x640)
          {
            if ((*v7 & 1) != 0)
            {
              v29 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            }
            else
            {
              v29 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
              v8 = *(char **)v36;
            }
            v19 = sub_1B0311E20(v9, v29, v8, a3);
          }
          else
          {
            v19 = sub_1B030A930((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EEEB2C50, (unint64_t *)(a1 + 8), a3);
          }
LABEL_23:
          *(_QWORD *)v36 = v19;
          if (!v19)
          {
LABEL_56:
            *(_QWORD *)v36 = 0;
            goto LABEL_2;
          }
LABEL_35:
          if ((sub_1B02F70C0((uint64_t)a3, (char **)v36, a3[11].i32[1]) & 1) != 0)
            goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v36;
}

char *sub_1B02F51A0(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) == 0)
  {
    if ((v6 & 4) == 0)
      goto LABEL_3;
LABEL_11:
    if (*a3 <= (unint64_t)v4)
      v4 = sub_1B0304904((uint64_t)a3, v4);
    v8 = *(_DWORD *)(a1 + 64);
    *v4 = 16;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v10 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v10 | 0x80;
          v13 = v10 >> 7;
          ++v4;
          v14 = v10 >> 14;
          v10 >>= 7;
        }
        while (v14);
        *(v4 - 1) = v13;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
      else
      {
        v4[2] = v10;
        v4 += 3;
        if ((v6 & 2) != 0)
          goto LABEL_27;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
      if ((v6 & 2) != 0)
        goto LABEL_27;
    }
LABEL_4:
    if ((v6 & 8) == 0)
      goto LABEL_5;
    goto LABEL_28;
  }
  v4 = sub_1B02F5444(a3, 1, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v6 & 4) != 0)
    goto LABEL_11;
LABEL_3:
  if ((v6 & 2) == 0)
    goto LABEL_4;
LABEL_27:
  v4 = sub_1B02F5444(a3, 3, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
  {
LABEL_5:
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
    goto LABEL_6;
  }
LABEL_28:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_1B0304904((uint64_t)a3, v4);
  v15 = *(_DWORD *)(a1 + 68);
  *v4 = 32;
  if (v15 > 0x7F)
  {
    v4[1] = v15 | 0x80;
    v16 = v15 >> 7;
    if (v15 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v16 | 0x80;
        v17 = v16 >> 7;
        ++v4;
        v18 = v16 >> 14;
        v16 >>= 7;
      }
      while (v18);
      *(v4 - 1) = v17;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
    else
    {
      v4[2] = v16;
      v4 += 3;
      if ((v6 & 0x10) == 0)
        goto LABEL_39;
    }
  }
  else
  {
    v4[1] = v15;
    v4 += 2;
    if ((v6 & 0x10) == 0)
      goto LABEL_39;
  }
LABEL_6:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_1B0304904((uint64_t)a3, v4);
  v7 = *(_DWORD *)(a1 + 72);
  *v4 = 40;
  if (v7 > 0x7F)
  {
    v4[1] = v7 | 0x80;
    v9 = v7 >> 7;
    if (v7 >> 14)
    {
      v4 += 3;
      do
      {
        *(v4 - 1) = v9 | 0x80;
        v11 = v9 >> 7;
        ++v4;
        v12 = v9 >> 14;
        v9 >>= 7;
      }
      while (v12);
      *(v4 - 1) = v11;
    }
    else
    {
      v4[2] = v9;
      v4 += 3;
    }
  }
  else
  {
    v4[1] = v7;
    v4 += 2;
  }
LABEL_39:
  v19 = sub_1B030B564(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v20 = v19;
  v21 = *(_QWORD *)(a1 + 8);
  if ((v21 & 1) == 0)
    return v20;
  v23 = v21 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v23 + 31) < 0)
  {
    v24 = *(void **)(v23 + 8);
    v25 = *(_QWORD *)(v23 + 16);
  }
  else
  {
    v24 = (void *)(v23 + 8);
    LODWORD(v25) = *(unsigned __int8 *)(v23 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v19) >= (int)v25)
  {
    v26 = (int)v25;
    memcpy(v19, v24, (int)v25);
    v20 += v26;
    return v20;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v24, v25, (unint64_t)v19);
}

char *sub_1B02F5444(unint64_t *a1, int a2, uint64_t a3, char *a4)
{
  int64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  _BYTE *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  char *v15;
  const void *v16;

  if (*(char *)(a3 + 23) < 0)
  {
    v4 = *(_QWORD *)(a3 + 8);
    if (v4 > 127)
      return sub_1B0304C28(a1, a2, (void **)a3, a4);
  }
  else
  {
    v4 = *(unsigned __int8 *)(a3 + 23);
  }
  v5 = 8 * a2;
  v6 = 1;
  v7 = 2;
  v8 = 3;
  v9 = 4;
  if ((8 * a2) >> 28)
    v9 = 5;
  if (v5 >= 0x200000)
    v8 = v9;
  if (v5 >= 0x4000)
    v7 = v8;
  if (v5 >= 0x80)
    v6 = v7;
  if ((uint64_t)(*a1 + ~(unint64_t)&a4[v6] + 16) < v4)
    return sub_1B0304C28(a1, a2, (void **)a3, a4);
  v10 = v5 | 2;
  if ((v5 | 2) > 0x7F)
  {
    *a4 = v5 | 0x82;
    v12 = v5 >> 7;
    if (v10 >> 14)
    {
      v11 = a4 + 2;
      do
      {
        *(v11 - 1) = v12 | 0x80;
        v13 = v12 >> 7;
        ++v11;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
      *(v11 - 1) = v13;
    }
    else
    {
      a4[1] = v12;
      v11 = a4 + 2;
    }
  }
  else
  {
    *a4 = v10;
    v11 = a4 + 1;
  }
  *v11 = v4;
  v15 = v11 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const void *)a3;
  else
    v16 = *(const void **)a3;
  memcpy(v15, v16, v4);
  return &v15[v4];
}

uint64_t sub_1B02F555C(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  result = sub_1B030E0F8(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 0x1F) == 0)
    goto LABEL_8;
  if ((v3 & 1) != 0)
  {
    v5 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    v6 = *(unsigned __int8 *)(v5 + 23);
    v7 = *(_QWORD *)(v5 + 8);
    if ((v6 & 0x80u) == 0)
      v7 = v6;
    result += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 2) == 0)
    {
LABEL_4:
      if ((v3 & 4) == 0)
        goto LABEL_5;
LABEL_16:
      result += ((9 * (__clz(*(_DWORD *)(a1 + 64) | 1) ^ 0x1F) + 73) >> 6) + 1;
      if ((v3 & 8) == 0)
      {
LABEL_6:
        if ((v3 & 0x10) == 0)
          goto LABEL_8;
        goto LABEL_7;
      }
      goto LABEL_17;
    }
  }
  else if ((v3 & 2) == 0)
  {
    goto LABEL_4;
  }
  v8 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v9 = *(unsigned __int8 *)(v8 + 23);
  v10 = *(_QWORD *)(v8 + 8);
  if ((v9 & 0x80u) == 0)
    v10 = v9;
  result += v10 + ((9 * (__clz(v10 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 4) != 0)
    goto LABEL_16;
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_17:
  result += ((9 * (__clz(*(_DWORD *)(a1 + 68) | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 0x10) != 0)
LABEL_7:
    result += ((9 * (__clz(*(_DWORD *)(a1 + 72) | 1) ^ 0x1F) + 73) >> 6) + 1;
LABEL_8:
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v11 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    result += v12;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_1B02F56CC(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CC438)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  sub_1B02F56F4(a1, (uint64_t)a2);
}

void sub_1B02F56F4(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  std::string v21[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 375);
    v4 = sub_1B0305340(v21, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v21);
  }
  sub_1B030942C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 0x1F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_1B030424C((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_28;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 2u;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    sub_1B030424C((uint64_t *)(a1 + 56), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_29;
    }
LABEL_28:
    *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
      {
LABEL_20:
        *(_DWORD *)(a1 + 40) |= v13;
        return;
      }
LABEL_19:
      *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
      goto LABEL_20;
    }
LABEL_29:
    *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
    if ((v13 & 0x10) == 0)
      goto LABEL_20;
    goto LABEL_19;
  }
}

void sub_1B02F5874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F588C(uint64_t a1)
{
  return sub_1B030A5FC(a1 + 16);
}

uint64_t *sub_1B02F5894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t *result;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;

  sub_1B030A3EC(a1 + 16, a2 + 16);
  v5 = (uint64_t *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v4 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v10 = sub_1B02F71FC((unint64_t *)(a2 + 8));
      v4 = *v5;
      if ((*v5 & 1) != 0)
        goto LABEL_6;
LABEL_21:
      v11 = sub_1B02F71FC((unint64_t *)(a1 + 8));
      goto LABEL_7;
    }
  }
  else if ((v6 & 1) == 0)
  {
    v7 = 0;
    v8 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(_DWORD *)(a2 + 40) = v8;
    v9 = (uint64_t *)(v4 & 0xFFFFFFFFFFFFFFFELL);
    goto LABEL_9;
  }
  v10 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
  if ((v4 & 1) == 0)
    goto LABEL_21;
LABEL_6:
  v11 = (v4 & 0xFFFFFFFFFFFFFFFELL) + 8;
LABEL_7:
  v12 = *(_QWORD *)(v11 + 16);
  v13 = *(_OWORD *)v11;
  v14 = *(_QWORD *)(v10 + 16);
  *(_OWORD *)v11 = *(_OWORD *)v10;
  *(_QWORD *)(v11 + 16) = v14;
  *(_OWORD *)v10 = v13;
  *(_QWORD *)(v10 + 16) = v12;
  v15 = *(_QWORD *)(a1 + 8);
  LODWORD(v14) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v14;
  v9 = (uint64_t *)(v15 & 0xFFFFFFFFFFFFFFFELL);
  if ((v15 & 1) != 0)
  {
    v16 = *v9;
    v7 = 1;
    goto LABEL_10;
  }
  v7 = 0;
LABEL_9:
  v16 = (uint64_t)v9;
LABEL_10:
  if (*(uint64_t **)(a1 + 48) != &qword_1EEEB2CE0 || *(uint64_t **)(a2 + 48) != &qword_1EEEB2CE0)
  {
    v17 = sub_1B0304284((uint64_t *)(a1 + 48), v16);
    v18 = sub_1B0304284((uint64_t *)(a2 + 48), v16);
    v19 = v17[2];
    v20 = *(_OWORD *)v17;
    v21 = v18[2];
    *(_OWORD *)v17 = *(_OWORD *)v18;
    v17[2] = v21;
    *(_OWORD *)v18 = v20;
    v18[2] = v19;
    v7 = *v5 & 1;
    v9 = (uint64_t *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
  }
  result = (uint64_t *)(a1 + 56);
  if (v7)
    v9 = (uint64_t *)*v9;
  if ((uint64_t *)*result != &qword_1EEEB2CE0 || *(uint64_t **)(a2 + 56) != &qword_1EEEB2CE0)
  {
    v23 = sub_1B0304284(result, (uint64_t)v9);
    result = sub_1B0304284((uint64_t *)(a2 + 56), (uint64_t)v9);
    v24 = v23[2];
    v25 = *(_OWORD *)v23;
    v26 = result[2];
    *(_OWORD *)v23 = *(_OWORD *)result;
    v23[2] = v26;
    *(_OWORD *)result = v25;
    result[2] = v24;
  }
  v27 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = v27;
  LODWORD(v27) = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = v27;
  return result;
}

_QWORD *sub_1B02F5A88@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.SentencePieceText.SentencePiece");
}

uint64_t sub_1B02F5A98(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E60CBE90;
  *(_QWORD *)(a1 + 8) = a2;
  sub_1B03058C4(a1 + 16, a2);
  *(_QWORD *)(a1 + 48) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_1EEEB1B28))
    sub_1B0310068(dword_1EEEB1B28);
  *(_QWORD *)(a1 + 72) = &qword_1EEEB2CE0;
  *(_DWORD *)(a1 + 80) = 0;
  return a1;
}

void sub_1B02F5B1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_1B02F740C(v2);
  sub_1B03059A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F5B3C(uint64_t a1)
{
  sub_1B02F5B7C(a1);
  sub_1B02F4D24((uint64_t *)(a1 + 8));
  sub_1B02F740C((uint64_t *)(a1 + 48));
  sub_1B03059A0(a1 + 16);
  return a1;
}

uint64_t sub_1B02F5B7C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 486);
    v4 = sub_1B0305340(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_1B0305478((uint64_t)v10);
  }
LABEL_4:
  v6 = *(uint64_t **)(v1 + 72);
  v5 = (uint64_t *)(v1 + 72);
  if (v6 != &qword_1EEEB2CE0)
  {
    v7 = sub_1B02F6FF0(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    return MEMORY[0x1B5E07CD8](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B02F5C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02F5C5C(uint64_t a1)
{
  sub_1B02F5B3C(a1);
  JUMPOUT(0x1B5E07CD8);
}

void *sub_1B02F5C80()
{
  if (atomic_load(dword_1EEEB1B28))
    sub_1B0310068(dword_1EEEB1B28);
  return &unk_1EEEB2B90;
}

unsigned __int8 *sub_1B02F5CB8(uint64_t a1)
{
  unsigned __int8 *result;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  sub_1B0309390((unsigned __int8 *)(a1 + 16));
  result = sub_1B02F72B4((unsigned __int8 *)(a1 + 48));
  if ((*(_BYTE *)(a1 + 40) & 1) != 0)
  {
    v3 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
  *(_DWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  v4 = *(_QWORD *)(a1 + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B02F5D48(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  void *v14;
  char *v15;
  unsigned __int8 *v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  std::string *v25;
  uint64_t v26;
  unsigned int v27;
  std::string *v28;
  int v29[2];

  *(_QWORD *)v29 = a2;
  v5 = 0;
  if ((sub_1B02F70C0((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v29 + 1);
      v9 = **(_BYTE **)v29;
      if (((char)**(_BYTE **)v29 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*v8 << 7);
      v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0)
        break;
      v26 = sub_1B0311940(*(uint64_t *)v29, v10 - 128);
      *(_QWORD *)v29 = v26;
      if (!v26)
        goto LABEL_48;
      v8 = (char *)v26;
      v9 = v27;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 29)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 80) = *(_DWORD *)v8;
          *(_QWORD *)v29 = v8 + 4;
          goto LABEL_44;
        }
        goto LABEL_14;
      }
      if (v11 == 2)
      {
        if (v9 == 18)
        {
          v15 = v8 - 1;
          while (1)
          {
            v16 = (unsigned __int8 *)(v15 + 1);
            *(_QWORD *)v29 = v15 + 1;
            v17 = *(int **)(a1 + 64);
            if (!v17)
              break;
            v18 = *(int *)(a1 + 56);
            v19 = *v17;
            if ((int)v18 >= *v17)
            {
              if (v19 == *(_DWORD *)(a1 + 60))
              {
LABEL_29:
                sub_1B0316A4C(a1 + 48, v19 + 1);
                v17 = *(int **)(a1 + 64);
                v19 = *v17;
              }
              *v17 = v19 + 1;
              v20 = sub_1B02F6D84(*(_QWORD *)(a1 + 48));
              v21 = *(_QWORD *)(a1 + 64);
              v22 = *(int *)(a1 + 56);
              *(_DWORD *)(a1 + 56) = v22 + 1;
              *(_QWORD *)(v21 + 8 * v22 + 8) = v20;
              v16 = *(unsigned __int8 **)v29;
              goto LABEL_31;
            }
            *(_DWORD *)(a1 + 56) = v18 + 1;
            v20 = *(_QWORD *)&v17[2 * v18 + 2];
LABEL_31:
            v15 = (char *)sub_1B02F5FFC(a3, v20, v16);
            *(_QWORD *)v29 = v15;
            if (!v15)
              goto LABEL_48;
            if (*(_QWORD *)a3 <= (unint64_t)v15 || *v15 != 18)
              goto LABEL_44;
          }
          v19 = *(_DWORD *)(a1 + 60);
          goto LABEL_29;
        }
LABEL_14:
        if (v9)
          v13 = (v9 & 7) == 4;
        else
          v13 = 1;
        if (v13)
        {
          a3[10].i32[0] = v9 - 1;
          goto LABEL_2;
        }
        if (v9 < 0x640)
        {
          if ((*v7 & 1) != 0)
          {
            v28 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v28 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
            v8 = *(char **)v29;
          }
          v14 = sub_1B0311E20(v9, v28, v8, a3);
        }
        else
        {
          v14 = sub_1B030A930((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EEEB2B90, (unint64_t *)(a1 + 8), a3);
        }
        goto LABEL_43;
      }
      if (v11 != 1 || v9 != 10)
        goto LABEL_14;
      *(_DWORD *)(a1 + 40) |= 1u;
      v23 = *(_QWORD *)(a1 + 8);
      v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
      if ((v23 & 1) != 0)
        v24 = (_QWORD *)*v24;
      v25 = (std::string *)sub_1B0304284((uint64_t *)(a1 + 72), (uint64_t)v24);
      v14 = (void *)sub_1B03119F4(v25, *(char **)v29, (uint64_t)a3);
LABEL_43:
      *(_QWORD *)v29 = v14;
      if (!v14)
      {
LABEL_48:
        *(_QWORD *)v29 = 0;
        goto LABEL_2;
      }
LABEL_44:
      if ((sub_1B02F70C0((uint64_t)a3, (char **)v29, a3[11].i32[1]) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (char *)(*(_QWORD *)v29 + 2);
LABEL_7:
    *(_QWORD *)v29 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v29;
}

uint64_t sub_1B02F5FFC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_1B02F74E0((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_1B02F4E7C(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B02F60C0(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  int v7;
  int i;
  uint64_t v9;
  unsigned int v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
    v4 = sub_1B02F5444(a3, 1, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, a2);
  v7 = *(_DWORD *)(a1 + 56);
  if (v7)
  {
    for (i = 0; i != v7; ++i)
    {
      if (*a3 <= (unint64_t)v4)
        v4 = sub_1B0304904((uint64_t)a3, v4);
      v9 = sub_1B02E9644(a1 + 48, i);
      *v4 = 18;
      v10 = *(_DWORD *)(v9 + 44);
      if (v10 > 0x7F)
      {
        v4[1] = v10 | 0x80;
        v12 = v10 >> 7;
        if (v10 >> 14)
        {
          v11 = v4 + 3;
          do
          {
            *(v11 - 1) = v12 | 0x80;
            v13 = v12 >> 7;
            ++v11;
            v14 = v12 >> 14;
            v12 >>= 7;
          }
          while (v14);
          *(v11 - 1) = v13;
        }
        else
        {
          v4[2] = v12;
          v11 = v4 + 3;
        }
      }
      else
      {
        v4[1] = v10;
        v11 = v4 + 2;
      }
      v4 = sub_1B02F51A0(v9, v11, a3);
    }
  }
  if ((v6 & 2) != 0)
  {
    if (*a3 <= (unint64_t)v4)
      v4 = sub_1B0304904((uint64_t)a3, v4);
    v15 = *(_DWORD *)(a1 + 80);
    *v4 = 29;
    *(_DWORD *)(v4 + 1) = v15;
    v4 += 5;
  }
  v16 = sub_1B030B564(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 8);
  if ((v18 & 1) == 0)
    return v17;
  v20 = v18 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v20 + 31) < 0)
  {
    v21 = *(void **)(v20 + 8);
    v22 = *(_QWORD *)(v20 + 16);
  }
  else
  {
    v21 = (void *)(v20 + 8);
    LODWORD(v22) = *(unsigned __int8 *)(v20 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v16) >= (int)v22)
  {
    v23 = (int)v22;
    memcpy(v16, v21, (int)v22);
    v17 += v23;
    return v17;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v21, v22, (unint64_t)v16);
}

uint64_t sub_1B02F62A0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v16;
  uint64_t v17;

  v2 = sub_1B030E0F8(a1 + 16);
  v3 = *(int *)(a1 + 56);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 64);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_1B02F555C(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 40);
  if ((v10 & 3) != 0)
  {
    if ((v10 & 1) != 0)
    {
      v11 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
      v12 = *(unsigned __int8 *)(v11 + 23);
      v13 = *(_QWORD *)(v11 + 8);
      if ((v12 & 0x80u) == 0)
        v13 = v12;
      v4 += v13 + ((9 * (__clz(v13 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v10 & 2) != 0)
      v4 += 5;
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) != 0)
  {
    v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v16 + 31) < 0)
      v17 = *(_QWORD *)(v16 + 16);
    else
      v17 = *(unsigned __int8 *)(v16 + 31);
    v4 += v17;
  }
  *(_DWORD *)(a1 + 44) = v4;
  return v4;
}

void sub_1B02F63A8(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CBE90)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  sub_1B02F63D0(a1, (uint64_t)a2);
}

void sub_1B02F63D0(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  std::string v18[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 674);
    v4 = sub_1B0305340(v18, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v18);
  }
  sub_1B030942C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_1B02F7598(a1 + 48, a2 + 48);
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_1B030424C((uint64_t *)(a1 + 72), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    *(_DWORD *)(a1 + 40) |= v13;
  }
}

void sub_1B02F64FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F6514(uint64_t a1)
{
  uint64_t result;

  result = sub_1B030A5FC(a1 + 16);
  if ((_DWORD)result)
    return sub_1B02F654C(a1 + 48);
  return result;
}

BOOL sub_1B02F654C(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_1B02E9644(a1, v2);
  }
  while ((sub_1B030A5FC(v5 + 16) & 1) != 0);
  return v3 < 1;
}

_QWORD *sub_1B02F65A0@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.SentencePieceText");
}

uint64_t sub_1B02F65B0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E60CC048;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  if (atomic_load(dword_1EEEB1A50))
    sub_1B0310068(dword_1EEEB1A50);
  return a1;
}

void sub_1B02F660C(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_1B02F7740(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F6624(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 755);
    v5 = sub_1B0305340(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
LABEL_4:
  sub_1B02F4D24(v3);
  sub_1B02F7740((uint64_t *)(a1 + 16));
  return a1;
}

void sub_1B02F66B8(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  sub_1B0303828(a1);
}

void sub_1B02F66DC(uint64_t a1)
{
  sub_1B02F6624(a1);
  JUMPOUT(0x1B5E07CD8);
}

unsigned __int8 *sub_1B02F6700(uint64_t a1)
{
  unsigned __int8 *result;
  uint64_t v3;
  unint64_t v4;

  result = sub_1B02F7360((unsigned __int8 *)(a1 + 16));
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_1B02F6750(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  std::string *v10;
  char *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unsigned int v20;
  char *v22;

  v22 = a2;
  if ((sub_1B02F70C0((uint64_t)a3, &v22, a3[11].i32[1]) & 1) == 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v22 + 1;
      v7 = *v22;
      if ((*v22 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*v6 << 7);
      v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0)
        break;
      v19 = (char *)sub_1B0311940((uint64_t)v22, v8 - 128);
      v22 = v19;
      if (!v19)
        return 0;
      v6 = v19;
      v7 = v20;
LABEL_7:
      if (v7 == 10)
      {
        v11 = v6 - 1;
        while (1)
        {
          v12 = (unsigned __int8 *)(v11 + 1);
          v22 = v11 + 1;
          v13 = *(int **)(a1 + 32);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 24);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 28))
            {
LABEL_22:
              sub_1B0316A4C(a1 + 16, v15 + 1);
              v13 = *(int **)(a1 + 32);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = sub_1B02F6E38(*(_QWORD *)(a1 + 16));
            v17 = *(_QWORD *)(a1 + 32);
            v18 = *(int *)(a1 + 24);
            *(_DWORD *)(a1 + 24) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = (unsigned __int8 *)v22;
            goto LABEL_24;
          }
          *(_DWORD *)(a1 + 24) = v14 + 1;
          v16 = *(_QWORD *)&v13[2 * v14 + 2];
LABEL_24:
          v11 = (char *)sub_1B02F692C(a3, v16, v12);
          v22 = v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_27;
        }
        v15 = *(_DWORD *)(a1 + 28);
        goto LABEL_22;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v22;
      }
      if ((*v5 & 1) != 0)
      {
        v10 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v10 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
        v6 = v22;
      }
      v22 = (char *)sub_1B0311E20(v7, v10, v6, a3);
      if (!v22)
        return 0;
LABEL_27:
      if (sub_1B02F70C0((uint64_t)a3, &v22, a3[11].i32[1]))
        return v22;
    }
    v6 = v22 + 2;
LABEL_6:
    v22 = v6;
    goto LABEL_7;
  }
  return v22;
}

uint64_t sub_1B02F692C(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_1B02F74E0((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_1B02F5D48(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B02F69F0(uint64_t a1, char *__dst, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = *(_DWORD *)(a1 + 24);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)__dst)
        __dst = sub_1B0304904((uint64_t)a3, __dst);
      v8 = sub_1B02E9760(a1 + 16, i);
      *__dst = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        __dst[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = __dst + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          __dst[2] = v11;
          v10 = __dst + 3;
        }
      }
      else
      {
        __dst[1] = v9;
        v10 = __dst + 2;
      }
      __dst = sub_1B02F60C0(v8, v10, a3);
    }
  }
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) == 0)
    return __dst;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)__dst) >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(__dst, v17, (int)v18);
    __dst += v19;
    return __dst;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v17, v18, (unint64_t)__dst);
}

uint64_t sub_1B02F6B58(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;

  v2 = *(int *)(a1 + 24);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3)
    v4 = (uint64_t *)(v3 + 8);
  else
    v4 = 0;
  if ((_DWORD)v2)
  {
    v5 = 8 * v2;
    do
    {
      v6 = *v4++;
      v7 = sub_1B02F62A0(v6);
      v2 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      v5 -= 8;
    }
    while (v5);
  }
  else
  {
    v2 = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    v2 += v11;
  }
  *(_DWORD *)(a1 + 40) = v2;
  return v2;
}

void sub_1B02F6C00(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CC048)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  sub_1B02F6C28(a1, (uint64_t)a2);
}

void sub_1B02F6C28(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v13;
  std::string v14[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece.pb.cc", 877);
    v4 = sub_1B0305340(v14, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v13, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v14);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_1B02F77E4(a1 + 16, a2 + 16);
}

void sub_1B02F6CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1B02F6D08(uint64_t a1)
{
  return sub_1B02F6D10(a1 + 16);
}

BOOL sub_1B02F6D10(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_1B02E9760(a1, v2);
    if (!sub_1B030A5FC(v5 + 16))
      break;
  }
  while (sub_1B02F654C(v5 + 48));
  return v3 < 1;
}

_QWORD *sub_1B02F6D74@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.NBestSentencePieceText");
}

uint64_t sub_1B02F6D84(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CADA8, 80);
    v2 = sub_1B0303E20(a1, 80);
    sub_1B02F4B44(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_1B02F4B44(v2, 0);
  }
  return v2;
}

void sub_1B02F6E14(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C40E4A317A1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F6E38(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CACD8, 88);
    v2 = sub_1B0303E20(a1, 88);
    sub_1B02F5A98(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_1B02F5A98(v2, 0);
  }
  return v2;
}

void sub_1B02F6EC8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C40431D3885);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F6EEC(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CAD30, 48);
    v2 = sub_1B0303E20(a1, 48);
    sub_1B02F65B0(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_1B02F65B0(v2, 0);
  }
  return v2;
}

void sub_1B02F6F7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C40290C9B23);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F6FA0()
{
  return sub_1B02F6D84(0);
}

uint64_t sub_1B02F6FA8(uint64_t a1, uint64_t a2)
{
  return sub_1B02F6D84(a2);
}

uint64_t sub_1B02F6FB0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1B02F6FB8()
{
  return 0;
}

uint64_t sub_1B02F6FC0()
{
  return sub_1B02F6E38(0);
}

uint64_t sub_1B02F6FC8(uint64_t a1, uint64_t a2)
{
  return sub_1B02F6E38(a2);
}

uint64_t sub_1B02F6FD0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1B02F6FD8()
{
  return sub_1B02F6EEC(0);
}

uint64_t sub_1B02F6FE0(uint64_t a1, uint64_t a2)
{
  return sub_1B02F6EEC(a2);
}

uint64_t sub_1B02F6FE8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1B02F6FF0(uint64_t *a1)
{
  uint64_t result;
  std::string *v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  result = *a1;
  if ((result & 1) != 0)
  {
    sub_1B0305328((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 363);
    v3 = sub_1B0305340(v6, "CHECK failed: !tagged_ptr_.IsTagged(): ");
    sub_1B0305470((uint64_t)&v5, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v6);
    result = *a1;
  }
  if (!result)
  {
    sub_1B0305328((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arenastring.h", 364);
    v4 = sub_1B0305340(v6, "CHECK failed: tagged_ptr_.UnsafeGet() != nullptr: ");
    sub_1B0305470((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v6);
    return *a1;
  }
  return result;
}

void sub_1B02F70A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02F70C0(uint64_t a1, char **a2, int a3)
{
  char *v6;
  std::string *v7;
  signed int v9;
  std::string *v10;
  char v11;
  char v12;
  std::string v13[2];

  v6 = *a2;
  if (!*a2)
  {
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 209);
    v7 = sub_1B0305340(v13, "CHECK failed: *ptr: ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
    v6 = *a2;
  }
  if ((unint64_t)v6 < *(_QWORD *)a1)
    return 0;
  v9 = (_DWORD)v6 - *(_DWORD *)(a1 + 8);
  if (v9 >= 17)
  {
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 212);
    v10 = sub_1B0305340(v13, "CHECK failed: (overrun) <= (kSlopBytes): ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
  }
  if (*(_DWORD *)(a1 + 28) == v9)
  {
    if (v9 >= 1 && !*(_QWORD *)(a1 + 16))
      *a2 = 0;
    return 1;
  }
  else
  {
    *a2 = sub_1B0311068(a1, v9, a3);
    return v11 & 1;
  }
}

void sub_1B02F71DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B02F71FC(unint64_t *a1)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *a1 & 0xFFFFFFFFFFFFFFFELL;
  if ((*a1 & 1) != 0)
  {
    v2 = *(_QWORD *)v2;
    if (v2)
      goto LABEL_3;
LABEL_7:
    v3 = operator new();
    goto LABEL_8;
  }
  if (!v2)
    goto LABEL_7;
LABEL_3:
  if ((*(_BYTE *)(v2 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v2 + 32) + 32), &unk_1E60CB3D8, 32);
  v3 = sub_1B0303B3C((unint64_t *)v2, 0x20uLL, (uint64_t)sub_1B02F72A0);
LABEL_8:
  *(_OWORD *)v3 = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  *a1 = v3 | 1;
  *(_QWORD *)v3 = v2;
  return v3 + 8;
}

void sub_1B02F72A0(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

unsigned __int8 *sub_1B02F72B4(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_1B0305340(v7, "CHECK failed: (n) >= (0): ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_1B0305478((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_1B02F4DB0(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_1B02F7348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B02F7360(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_1B0305340(v7, "CHECK failed: (n) >= (0): ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_1B0305478((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_1B02F5CB8(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_1B02F73F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02F740C(uint64_t *a1)
{
  sub_1B02F7434(a1);
  return sub_1B02F74B0(a1);
}

void sub_1B02F7434(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_1B02F4BC8(*v3);
          MEMORY[0x1B5E07CD8](v5, 0x10A1C40E4A317A1);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t *sub_1B02F74B0(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  if (v2)
    sub_1B0303838(v2);
  return a1;
}

uint64_t sub_1B02F74E0(uint64_t a1, int a2, unsigned int a3)
{
  std::string *v6;
  uint64_t v7;
  int v8;
  char v10;
  std::string v11[2];

  if (a3 >= 0x7FFFFFF0)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 128);
    v6 = sub_1B0305340(v11, "CHECK failed: limit >= 0 && limit <= INT_MAX - kSlopBytes: ");
    sub_1B0305470((uint64_t)&v10, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
  }
  v7 = *(_QWORD *)(a1 + 8);
  v8 = a2 - v7 + a3;
  *(_QWORD *)a1 = v7 + (v8 & (v8 >> 31));
  LODWORD(v7) = *(_DWORD *)(a1 + 28);
  *(_DWORD *)(a1 + 28) = v8;
  return (v7 - v8);
}

void sub_1B02F7580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02F7598(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_1B0305340(v11, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_1B0316A60((uint64_t *)a1, v5);
    sub_1B02F7684((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1B02F766C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02F7684(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_1B02F7730(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_1B02F6D84(v18);
      sub_1B02F7730(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_1B02F7730(uint64_t a1, uint64_t a2)
{
  sub_1B02F56F4(a2, a1);
}

uint64_t *sub_1B02F7740(uint64_t *a1)
{
  sub_1B02F7768(a1);
  return sub_1B02F74B0(a1);
}

void sub_1B02F7768(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_1B02F5B3C(*v3);
          MEMORY[0x1B5E07CD8](v5, 0x10A1C40431D3885);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_1B02F77E4(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_1B0305340(v11, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_1B0316A60((uint64_t *)a1, v5);
    sub_1B02F78D0((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1B02F78B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02F78D0(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_1B02F797C(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_1B02F6E38(v18);
      sub_1B02F797C(v21, v22);
      *v20++ = v22;
      --v17;
    }
    while (v17);
  }
}

void sub_1B02F797C(uint64_t a1, uint64_t a2)
{
  sub_1B02F63D0(a2, a1);
}

void sub_1B02F798C(const char *a1, const char *a2, uint64_t a3, const char *a4)
{
  __assert_rtn(a1, a2, 94, a4);
}

void sub_1B02F7994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B02F798C("down_cast", "casts.h", a3, "f == nullptr || dynamic_cast<To>(f) != nullptr");
}

void sub_1B02F79B8()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B02FDD70((uint64_t)&unk_1EEEB2938, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&unk_1EEEB2938);
}

void sub_1B02F7A0C()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B02FD494(qword_1EEEB2C10, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)qword_1EEEB2C10);
}

void sub_1B02F7A60()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B02FB888((uint64_t)&unk_1EEEB2B38, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&unk_1EEEB2B38);
}

void sub_1B02F7AB4()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B02FCC94((uint64_t)&unk_1EEEB2AF0, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&unk_1EEEB2AF0);
}

void sub_1B02F7B08()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  qword_1EEEB2BE8 = (uint64_t)&off_1E60CBF10;
  unk_1EEEB2BF0 = 0;
  qword_1EEEB2BF8 = 0;
  if (atomic_load(dword_1EEEB1AD8))
    sub_1B0310068(dword_1EEEB1AD8);
  qword_1EEEB2C00 = (uint64_t)&qword_1EEEB2CE0;
  unk_1EEEB2C08 = &qword_1EEEB2CE0;
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&qword_1EEEB2BE8);
}

void sub_1B02F7B8C()
{
  sub_1B0304FC0(3014000, 3014000, "/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc");
  sub_1B02F7BF0((uint64_t)&unk_1EEEB29A8, 0);
  sub_1B03108F0((uint64_t)sub_1B030FF00, (uint64_t)&unk_1EEEB29A8);
}

BOOL sub_1B02F7BE0(int a1)
{
  return (a1 - 1) < 6;
}

uint64_t sub_1B02F7BF0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E60CBBC0;
  *(_QWORD *)(a1 + 8) = a2;
  sub_1B03058C4(a1 + 16, a2);
  *(_QWORD *)(a1 + 128) = a2;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 56) = a2;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a2;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  if (atomic_load(dword_1EEEB1B48))
    sub_1B0310068(dword_1EEEB1B48);
  *(_QWORD *)(a1 + 152) = &qword_1EEEB2CE0;
  *(_QWORD *)(a1 + 160) = &qword_1EEEB2CE0;
  *(_QWORD *)(a1 + 168) = &qword_1EEEB2CE0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = &qword_1EEEB2CE0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0x1F4000000001;
  *(_QWORD *)(a1 + 280) = 0xF42403F7FDF3BLL;
  *(_DWORD *)(a1 + 288) = 1061158912;
  *(_OWORD *)(a1 + 292) = xmmword_1B03AF270;
  *(_DWORD *)(a1 + 308) = 16843009;
  *(_WORD *)(a1 + 312) = 257;
  *(_DWORD *)(a1 + 316) = 1;
  *(_QWORD *)(a1 + 320) = 0xFFFFFFFF00000002;
  return a1;
}

void sub_1B02F7D18(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_1B0316A48(v3);
  sub_1B0316A48(v5);
  sub_1B0316A48(v4);
  sub_1B0316A48(v2);
  sub_1B03059A0(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B02F7D4C(uint64_t *a1)
{
  sub_1B02F7DA4(a1);
  sub_1B02F4D24(a1 + 1);
  sub_1B0316A48(a1 + 16);
  sub_1B0316A48(a1 + 13);
  sub_1B0316A48(a1 + 10);
  sub_1B0316A48(a1 + 7);
  sub_1B03059A0((uint64_t)(a1 + 2));
  return a1;
}

uint64_t *sub_1B02F7DA4(uint64_t *a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *result;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v2 = a1[1];
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 519);
    v4 = sub_1B0305340(v27, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v27);
  }
LABEL_4:
  if ((uint64_t *)a1[19] != &qword_1EEEB2CE0)
  {
    v5 = sub_1B02F6FF0(a1 + 19);
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1B5E07CD8](v6, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[20] != &qword_1EEEB2CE0)
  {
    v7 = sub_1B02F6FF0(a1 + 20);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    MEMORY[0x1B5E07CD8](v8, 0x1012C40EC159624);
  }
  if ((uint64_t *)a1[21] != &qword_1EEEB2CE0)
  {
    v9 = sub_1B02F6FF0(a1 + 21);
    v10 = v9;
    if (*(char *)(v9 + 23) < 0)
      operator delete(*(void **)v9);
    MEMORY[0x1B5E07CD8](v10, 0x1012C40EC159624);
  }
  if (a1[22])
  {
    v11 = sub_1B02F6FF0(a1 + 22);
    v12 = v11;
    if (*(char *)(v11 + 23) < 0)
      operator delete(*(void **)v11);
    MEMORY[0x1B5E07CD8](v12, 0x1012C40EC159624);
  }
  if (a1[23])
  {
    v13 = sub_1B02F6FF0(a1 + 23);
    v14 = v13;
    if (*(char *)(v13 + 23) < 0)
      operator delete(*(void **)v13);
    MEMORY[0x1B5E07CD8](v14, 0x1012C40EC159624);
  }
  if (a1[24])
  {
    v15 = sub_1B02F6FF0(a1 + 24);
    v16 = v15;
    if (*(char *)(v15 + 23) < 0)
      operator delete(*(void **)v15);
    MEMORY[0x1B5E07CD8](v16, 0x1012C40EC159624);
  }
  if (a1[25])
  {
    v17 = sub_1B02F6FF0(a1 + 25);
    v18 = v17;
    if (*(char *)(v17 + 23) < 0)
      operator delete(*(void **)v17);
    MEMORY[0x1B5E07CD8](v18, 0x1012C40EC159624);
  }
  result = a1 + 26;
  if (a1[26])
  {
    v20 = sub_1B02F6FF0(result);
    v21 = v20;
    if (*(char *)(v20 + 23) < 0)
      operator delete(*(void **)v20);
    result = (uint64_t *)MEMORY[0x1B5E07CD8](v21, 0x1012C40EC159624);
  }
  v23 = (uint64_t *)a1[27];
  v22 = a1 + 27;
  if (v23 != &qword_1EEEB2CE0)
  {
    v24 = sub_1B02F6FF0(v22);
    v25 = v24;
    if (*(char *)(v24 + 23) < 0)
      operator delete(*(void **)v24);
    return (uint64_t *)MEMORY[0x1B5E07CD8](v25, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B02F805C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02F8078(uint64_t *a1)
{
  sub_1B02F7D4C(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02F809C(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  sub_1B0309390((unsigned __int8 *)(a1 + 16));
  sub_1B0300094(a1 + 56);
  sub_1B0300094(a1 + 80);
  sub_1B0300094(a1 + 104);
  result = sub_1B0300094(a1 + 128);
  v3 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v3)
    goto LABEL_10;
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_16;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_5;
LABEL_20:
    v6 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
      if ((v3 & 8) != 0)
        goto LABEL_24;
    }
LABEL_6:
    if ((v3 & 0x10) == 0)
      goto LABEL_7;
    goto LABEL_25;
  }
  if ((v3 & 2) == 0)
    goto LABEL_4;
LABEL_16:
  v5 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v5 + 23) < 0)
  {
    **(_BYTE **)v5 = 0;
    *(_QWORD *)(v5 + 8) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
  else
  {
    *(_BYTE *)v5 = 0;
    *(_BYTE *)(v5 + 23) = 0;
    if ((v3 & 4) != 0)
      goto LABEL_20;
  }
LABEL_5:
  if ((v3 & 8) == 0)
    goto LABEL_6;
LABEL_24:
  result = (uint64_t)sub_1B0304530((std::string *)(a1 + 176), &off_1EEEB1BA0);
  if ((v3 & 0x10) == 0)
  {
LABEL_7:
    if ((v3 & 0x20) == 0)
      goto LABEL_8;
    goto LABEL_26;
  }
LABEL_25:
  result = (uint64_t)sub_1B0304530((std::string *)(a1 + 184), &off_1EEEB1B60);
  if ((v3 & 0x20) == 0)
  {
LABEL_8:
    if ((v3 & 0x40) == 0)
      goto LABEL_9;
    goto LABEL_27;
  }
LABEL_26:
  result = (uint64_t)sub_1B0304530((std::string *)(a1 + 192), &off_1EEEB1980);
  if ((v3 & 0x40) != 0)
  {
LABEL_27:
    result = (uint64_t)sub_1B0304530((std::string *)(a1 + 200), &off_1EEEB19A0);
    if ((v3 & 0x80) != 0)
      goto LABEL_28;
LABEL_10:
    if ((v3 & 0x100) == 0)
      goto LABEL_32;
    goto LABEL_29;
  }
LABEL_9:
  if ((v3 & 0x80) == 0)
    goto LABEL_10;
LABEL_28:
  result = (uint64_t)sub_1B0304530((std::string *)(a1 + 208), &off_1EEEB1B80);
  if ((v3 & 0x100) == 0)
    goto LABEL_32;
LABEL_29:
  v7 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v7 + 23) < 0)
  {
    **(_BYTE **)v7 = 0;
    *(_QWORD *)(v7 + 8) = 0;
  }
  else
  {
    *(_BYTE *)v7 = 0;
    *(_BYTE *)(v7 + 23) = 0;
  }
LABEL_32:
  if ((v3 & 0xFE00) != 0)
  {
    *(_QWORD *)(a1 + 224) = 0;
    *(_QWORD *)(a1 + 232) = 0;
    *(_QWORD *)(a1 + 239) = 0;
  }
  if ((v3 & 0xFF0000) != 0)
  {
    *(_QWORD *)(a1 + 247) = 0;
    *(_BYTE *)(a1 + 271) = 0;
    *(_QWORD *)(a1 + 255) = 0;
    *(_QWORD *)(a1 + 263) = 0;
    *(_DWORD *)(a1 + 272) = 1;
  }
  if (HIBYTE(v3))
  {
    *(_QWORD *)(a1 + 276) = 0x3F7FDF3B00001F40;
    *(_QWORD *)(a1 + 284) = 0x3F400000000F4240;
    *(_OWORD *)(a1 + 292) = xmmword_1B03AF270;
  }
  if (*(_BYTE *)(a1 + 44))
  {
    *(_WORD *)(a1 + 312) = 257;
    *(_DWORD *)(a1 + 308) = 16843009;
    *(_QWORD *)(a1 + 316) = 0x200000001;
  }
  *(_DWORD *)(a1 + 324) = -1;
  *(_QWORD *)(a1 + 40) = 0;
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v9 + 31) < 0)
    {
      **(_BYTE **)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v9 + 8) = 0;
      *(_BYTE *)(v9 + 31) = 0;
    }
  }
  return result;
}

char *sub_1B02F8360(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  char v5;
  char *result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  char *v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  int *v15;
  uint64_t v16;
  int v17;
  std::string *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  char *v26;
  unint64_t v27;
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  int v32;
  char *v33;
  int *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  uint64_t v44;
  char *v45;
  int v46;
  char *v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  char *v54;
  int v55;
  uint64_t v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  char *v61;
  int v62;
  uint64_t v63;
  char *v64;
  int v65;
  uint64_t v66;
  char *v67;
  int v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  char *v73;
  int v74;
  char *v75;
  uint64_t v76;
  int v77;
  char *v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  int v83;
  char *v84;
  uint64_t v85;
  int v86;
  char *v87;
  uint64_t v88;
  int v89;
  char *v90;
  uint64_t v91;
  int v92;
  char *v93;
  int *v94;
  uint64_t v95;
  int v96;
  std::string *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  int *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  int v111;
  char *v112;
  uint64_t v113;
  int v114;
  char *v115;
  uint64_t v116;
  int v117;
  char *v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  int v124;
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  char *v129;
  int v130;
  uint64_t v131;
  char *v132;
  int v133;
  uint64_t v134;
  _QWORD *v135;
  char **v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  int v143;
  char *v144;
  uint64_t v145;
  int v146;
  int v147;
  char *v148;
  uint64_t v149;
  int v150;
  uint64_t v151;
  std::string *v152;
  uint64_t v153;
  int v154;
  BOOL v155;
  std::string *v156;
  unint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  int v179;
  int v180;
  int v181;
  int v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  std::string *v186;
  unint64_t *v187;
  int v188[2];

  *(_QWORD *)v188 = a2;
  v5 = sub_1B02F70C0((uint64_t)a3, (char **)v188, a3[11].i32[1]);
  result = *(char **)v188;
  if ((v5 & 1) != 0)
    return result;
  v187 = (unint64_t *)(a1 + 8);
  v7 = (uint64_t *)(a1 + 128);
  v8 = (uint64_t *)(a1 + 104);
  v9 = (uint64_t *)(a1 + 80);
  v10 = (uint64_t *)(a1 + 56);
  while (2)
  {
    v11 = result + 1;
    v12 = *result;
    if ((*result & 0x80000000) == 0)
      goto LABEL_7;
    v13 = v12 + (*v11 << 7);
    v12 = v13 - 128;
    if ((*v11 & 0x80000000) == 0)
    {
      v11 = result + 2;
LABEL_7:
      *(_QWORD *)v188 = v11;
      goto LABEL_8;
    }
    result = (char *)sub_1B0311940((uint64_t)result, v13 - 128);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    v11 = result;
    v12 = v22;
LABEL_8:
    switch(v12 >> 3)
    {
      case 1u:
        if (v12 != 10)
          goto LABEL_279;
        result = v11 - 1;
        while (2)
        {
          v14 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v15 = *(int **)(a1 + 72);
          if (!v15)
          {
            v17 = *(_DWORD *)(a1 + 68);
LABEL_16:
            sub_1B0316A4C(a1 + 56, v17 + 1);
            v15 = *(int **)(a1 + 72);
            v17 = *v15;
            goto LABEL_17;
          }
          v16 = *(int *)(a1 + 64);
          v17 = *v15;
          if ((int)v16 < *v15)
          {
            *(_DWORD *)(a1 + 64) = v16 + 1;
            v18 = *(std::string **)&v15[2 * v16 + 2];
            goto LABEL_23;
          }
          if (v17 == *(_DWORD *)(a1 + 68))
            goto LABEL_16;
LABEL_17:
          *v15 = v17 + 1;
          v19 = *v10;
          if (*v10)
          {
            if ((*(_BYTE *)(v19 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v19 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v19 + 32) + 32), &unk_1E60CB5B0, 24);
            v18 = (std::string *)sub_1B0303B3C((unint64_t *)v19, 0x18uLL, (uint64_t)sub_1B02FFFA4);
          }
          else
          {
            v18 = (std::string *)operator new();
          }
          v18->__r_.__value_.__r.__words[0] = 0;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v20 = *(_QWORD *)(a1 + 72);
          v21 = *(int *)(a1 + 64);
          *(_DWORD *)(a1 + 64) = v21 + 1;
          *(_QWORD *)(v20 + 8 * v21 + 8) = v18;
          v14 = *(char **)v188;
LABEL_23:
          result = (char *)sub_1B03119F4(v18, v14, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (result)
          {
            if (*(_QWORD *)a3 <= (unint64_t)result || *result != 10)
              goto LABEL_277;
            continue;
          }
          return result;
        }
      case 2u:
        if (v12 != 18)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 1u;
        v23 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL);
        if ((v23 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 152);
        goto LABEL_269;
      case 3u:
        if (v12 != 24)
          goto LABEL_279;
        v26 = v11 + 1;
        v27 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_37;
        v28 = *v26;
        v29 = v27 + (v28 << 7);
        v27 = (v29 - 128);
        if (v28 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, (v29 - 128));
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          v27 = v157;
        }
        else
        {
          v26 = v11 + 2;
LABEL_37:
          *(_QWORD *)v188 = v26;
        }
        if ((v27 - 1) > 3)
        {
          if ((*v187 & 1) != 0)
            v186 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          else
            v186 = (std::string *)sub_1B02F71FC(v187);
          sub_1B03117F8(3, v27, v186);
        }
        else
        {
          *(_DWORD *)(a1 + 40) |= 0x800000u;
          *(_DWORD *)(a1 + 272) = v27;
        }
        goto LABEL_277;
      case 4u:
        if (v12 != 32)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000000u;
        v31 = v11 + 1;
        LODWORD(v30) = *v11;
        if ((v30 & 0x80) == 0)
          goto LABEL_44;
        v32 = *v31;
        v30 = v30 + (v32 << 7) - 128;
        if (v32 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v30);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 276) = v158;
          if (!result)
            return result;
        }
        else
        {
          v31 = v11 + 2;
LABEL_44:
          *(_QWORD *)v188 = v31;
          *(_DWORD *)(a1 + 276) = v30;
        }
        goto LABEL_277;
      case 5u:
        if (v12 != 42)
          goto LABEL_279;
        result = v11 - 1;
        while (1)
        {
          v33 = result + 1;
          *(_QWORD *)v188 = result + 1;
          v34 = *(int **)(a1 + 96);
          if (!v34)
            break;
          v35 = *(int *)(a1 + 88);
          v36 = *v34;
          if ((int)v35 >= *v34)
          {
            if (v36 == *(_DWORD *)(a1 + 92))
            {
LABEL_52:
              sub_1B0316A4C(a1 + 80, v36 + 1);
              v34 = *(int **)(a1 + 96);
              v36 = *v34;
            }
            *v34 = v36 + 1;
            v38 = *v9;
            if (*v9)
            {
              if ((*(_BYTE *)(v38 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v38 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v38 + 32) + 32), &unk_1E60CB5B0, 24);
              v37 = (std::string *)sub_1B0303B3C((unint64_t *)v38, 0x18uLL, (uint64_t)sub_1B02FFFA4);
            }
            else
            {
              v37 = (std::string *)operator new();
            }
            v37->__r_.__value_.__r.__words[0] = 0;
            v37->__r_.__value_.__l.__size_ = 0;
            v37->__r_.__value_.__r.__words[2] = 0;
            v39 = *(_QWORD *)(a1 + 96);
            v40 = *(int *)(a1 + 88);
            *(_DWORD *)(a1 + 88) = v40 + 1;
            *(_QWORD *)(v39 + 8 * v40 + 8) = v37;
            v33 = *(char **)v188;
            goto LABEL_59;
          }
          *(_DWORD *)(a1 + 88) = v35 + 1;
          v37 = *(std::string **)&v34[2 * v35 + 2];
LABEL_59:
          result = (char *)sub_1B03119F4(v37, v33, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *result != 42)
            goto LABEL_277;
        }
        v36 = *(_DWORD *)(a1 + 92);
        goto LABEL_52;
      case 6u:
        if (v12 != 48)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200u;
        v42 = v11 + 1;
        LODWORD(v41) = *v11;
        if ((v41 & 0x80) == 0)
          goto LABEL_67;
        v43 = *v42;
        v41 = v41 + (v43 << 7) - 128;
        if (v43 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v41);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 224) = v159;
          if (!result)
            return result;
        }
        else
        {
          v42 = v11 + 2;
LABEL_67:
          *(_QWORD *)v188 = v42;
          *(_DWORD *)(a1 + 224) = v41;
        }
        goto LABEL_277;
      case 7u:
        if (v12 != 58)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 2u;
        v44 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v44 & 0xFFFFFFFFFFFFFFFELL);
        if ((v44 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 160);
        goto LABEL_269;
      case 0xAu:
        if (v12 != 85)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000000u;
        v46 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 280) = v46;
        goto LABEL_259;
      case 0xBu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x800u;
        v47 = v11 + 1;
        v48 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_78;
        v49 = *v47;
        v48 = v48 + (v49 << 7) - 128;
        if (v49 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v48);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 232) = v160;
          if (!result)
            return result;
        }
        else
        {
          v47 = v11 + 2;
LABEL_78:
          *(_QWORD *)v188 = v47;
          *(_QWORD *)(a1 + 232) = v48;
        }
        goto LABEL_277;
      case 0xCu:
        if (v12 != 96)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400u;
        v51 = v11 + 1;
        LODWORD(v50) = *v11;
        if ((v50 & 0x80) == 0)
          goto LABEL_83;
        v52 = *v51;
        v50 = v50 + (v52 << 7) - 128;
        if (v52 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v50);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 228) = v161;
          if (!result)
            return result;
        }
        else
        {
          v51 = v11 + 2;
LABEL_83:
          *(_QWORD *)v188 = v51;
          *(_DWORD *)(a1 + 228) = v50;
        }
        goto LABEL_277;
      case 0xDu:
        if (v12 != 104)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x1000u;
        v54 = v11 + 1;
        LODWORD(v53) = *v11;
        if ((v53 & 0x80) == 0)
          goto LABEL_88;
        v55 = *v54;
        v53 = v53 + (v55 << 7) - 128;
        if (v55 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v53);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 240) = v162;
          if (!result)
            return result;
        }
        else
        {
          v54 = v11 + 2;
LABEL_88:
          *(_QWORD *)v188 = v54;
          *(_DWORD *)(a1 + 240) = v53;
        }
        goto LABEL_277;
      case 0xEu:
        if (v12 != 112)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000000u;
        v57 = v11 + 1;
        LODWORD(v56) = *v11;
        if ((v56 & 0x80) == 0)
          goto LABEL_93;
        v58 = *v57;
        v56 = v56 + (v58 << 7) - 128;
        if (v58 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v56);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 284) = v163;
          if (!result)
            return result;
        }
        else
        {
          v57 = v11 + 2;
LABEL_93:
          *(_QWORD *)v188 = v57;
          *(_DWORD *)(a1 + 284) = v56;
        }
        goto LABEL_277;
      case 0xFu:
        if (v12 != 125)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000000u;
        v59 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 288) = v59;
        goto LABEL_259;
      case 0x10u:
        if (v12 != 128)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000000u;
        v61 = v11 + 1;
        LODWORD(v60) = *v11;
        if ((v60 & 0x80) == 0)
          goto LABEL_100;
        v62 = *v61;
        v60 = v60 + (v62 << 7) - 128;
        if (v62 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v60);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 292) = v164;
          if (!result)
            return result;
        }
        else
        {
          v61 = v11 + 2;
LABEL_100:
          *(_QWORD *)v188 = v61;
          *(_DWORD *)(a1 + 292) = v60;
        }
        goto LABEL_277;
      case 0x11u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000000u;
        v64 = v11 + 1;
        LODWORD(v63) = *v11;
        if ((v63 & 0x80) == 0)
          goto LABEL_105;
        v65 = *v64;
        v63 = v63 + (v65 << 7) - 128;
        if (v65 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v63);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 296) = v165;
          if (!result)
            return result;
        }
        else
        {
          v64 = v11 + 2;
LABEL_105:
          *(_QWORD *)v188 = v64;
          *(_DWORD *)(a1 + 296) = v63;
        }
        goto LABEL_277;
      case 0x12u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000000u;
        v67 = v11 + 1;
        LODWORD(v66) = *v11;
        if ((v66 & 0x80) == 0)
          goto LABEL_110;
        v68 = *v67;
        v66 = v66 + (v68 << 7) - 128;
        if (v68 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v66);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 300) = v166;
          if (!result)
            return result;
        }
        else
        {
          v67 = v11 + 2;
LABEL_110:
          *(_QWORD *)v188 = v67;
          *(_DWORD *)(a1 + 300) = v66;
        }
        goto LABEL_277;
      case 0x13u:
        if (v12 != 152)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 1u;
        v69 = v11 + 1;
        v70 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_115;
        v71 = *v69;
        v70 = v70 + (v71 << 7) - 128;
        if (v71 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v70);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 308) = v167 != 0;
          if (!result)
            return result;
        }
        else
        {
          v69 = v11 + 2;
LABEL_115:
          *(_QWORD *)v188 = v69;
          *(_BYTE *)(a1 + 308) = v70 != 0;
        }
        goto LABEL_277;
      case 0x14u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000000;
        v73 = v11 + 1;
        LODWORD(v72) = *v11;
        if ((v72 & 0x80) == 0)
          goto LABEL_120;
        v74 = *v73;
        v72 = v72 + (v74 << 7) - 128;
        if (v74 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v72);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 304) = v168;
          if (!result)
            return result;
        }
        else
        {
          v73 = v11 + 2;
LABEL_120:
          *(_QWORD *)v188 = v73;
          *(_DWORD *)(a1 + 304) = v72;
        }
        goto LABEL_277;
      case 0x15u:
        if (v12 != 168)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 2u;
        v75 = v11 + 1;
        v76 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_125;
        v77 = *v75;
        v76 = v76 + (v77 << 7) - 128;
        if (v77 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v76);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 309) = v169 != 0;
          if (!result)
            return result;
        }
        else
        {
          v75 = v11 + 2;
LABEL_125:
          *(_QWORD *)v188 = v75;
          *(_BYTE *)(a1 + 309) = v76 != 0;
        }
        goto LABEL_277;
      case 0x16u:
        if (v12 != 176)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 8u;
        v78 = v11 + 1;
        v79 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_130;
        v80 = *v78;
        v79 = v79 + (v80 << 7) - 128;
        if (v80 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v79);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 311) = v170 != 0;
          if (!result)
            return result;
        }
        else
        {
          v78 = v11 + 2;
LABEL_130:
          *(_QWORD *)v188 = v78;
          *(_BYTE *)(a1 + 311) = v79 != 0;
        }
        goto LABEL_277;
      case 0x17u:
        if (v12 != 184)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 4u;
        v81 = v11 + 1;
        v82 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_135;
        v83 = *v81;
        v82 = v82 + (v83 << 7) - 128;
        if (v83 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v82);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 310) = v171 != 0;
          if (!result)
            return result;
        }
        else
        {
          v81 = v11 + 2;
LABEL_135:
          *(_QWORD *)v188 = v81;
          *(_BYTE *)(a1 + 310) = v82 != 0;
        }
        goto LABEL_277;
      case 0x18u:
        if (v12 != 192)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x4000u;
        v84 = v11 + 1;
        v85 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_140;
        v86 = *v84;
        v85 = v85 + (v86 << 7) - 128;
        if (v86 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v85);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 245) = v172 != 0;
          if (!result)
            return result;
        }
        else
        {
          v84 = v11 + 2;
LABEL_140:
          *(_QWORD *)v188 = v84;
          *(_BYTE *)(a1 + 245) = v85 != 0;
        }
        goto LABEL_277;
      case 0x19u:
        if (v12 != 200)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10000u;
        v87 = v11 + 1;
        v88 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_145;
        v89 = *v87;
        v88 = v88 + (v89 << 7) - 128;
        if (v89 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v88);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 247) = v173 != 0;
          if (!result)
            return result;
        }
        else
        {
          v87 = v11 + 2;
LABEL_145:
          *(_QWORD *)v188 = v87;
          *(_BYTE *)(a1 + 247) = v88 != 0;
        }
        goto LABEL_277;
      case 0x1Au:
        if (v12 != 208)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x8000u;
        v90 = v11 + 1;
        v91 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_150;
        v92 = *v90;
        v91 = v91 + (v92 << 7) - 128;
        if (v92 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v91);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 246) = v174 != 0;
          if (!result)
            return result;
        }
        else
        {
          v90 = v11 + 2;
LABEL_150:
          *(_QWORD *)v188 = v90;
          *(_BYTE *)(a1 + 246) = v91 != 0;
        }
        goto LABEL_277;
      case 0x1Eu:
        if (v12 != 242)
          goto LABEL_279;
        result = v11 - 2;
        while (1)
        {
          v93 = result + 2;
          *(_QWORD *)v188 = result + 2;
          v94 = *(int **)(a1 + 120);
          if (!v94)
            break;
          v95 = *(int *)(a1 + 112);
          v96 = *v94;
          if ((int)v95 >= *v94)
          {
            if (v96 == *(_DWORD *)(a1 + 116))
            {
LABEL_158:
              sub_1B0316A4C(a1 + 104, v96 + 1);
              v94 = *(int **)(a1 + 120);
              v96 = *v94;
            }
            *v94 = v96 + 1;
            v98 = *v8;
            if (*v8)
            {
              if ((*(_BYTE *)(v98 + 24) & 1) != 0)
                (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v98 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v98 + 32) + 32), &unk_1E60CB5B0, 24);
              v97 = (std::string *)sub_1B0303B3C((unint64_t *)v98, 0x18uLL, (uint64_t)sub_1B02FFFA4);
            }
            else
            {
              v97 = (std::string *)operator new();
            }
            v97->__r_.__value_.__r.__words[0] = 0;
            v97->__r_.__value_.__l.__size_ = 0;
            v97->__r_.__value_.__r.__words[2] = 0;
            v99 = *(_QWORD *)(a1 + 120);
            v100 = *(int *)(a1 + 112);
            *(_DWORD *)(a1 + 112) = v100 + 1;
            *(_QWORD *)(v99 + 8 * v100 + 8) = v97;
            v93 = *(char **)v188;
            goto LABEL_165;
          }
          *(_DWORD *)(a1 + 112) = v95 + 1;
          v97 = *(std::string **)&v94[2 * v95 + 2];
LABEL_165:
          result = (char *)sub_1B03119F4(v97, v93, (uint64_t)a3);
          *(_QWORD *)v188 = result;
          if (!result)
            return result;
          if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 498)
            goto LABEL_277;
        }
        v96 = *(_DWORD *)(a1 + 116);
        goto LABEL_158;
      case 0x1Fu:
        if (v12 != 250)
          goto LABEL_279;
        result = v11 - 2;
        break;
      case 0x20u:
        if ((_BYTE)v12)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x10u;
        v109 = v11 + 1;
        v110 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_191;
        v111 = *v109;
        v110 = v110 + (v111 << 7) - 128;
        if (v111 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v110);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 312) = v175 != 0;
          if (!result)
            return result;
        }
        else
        {
          v109 = v11 + 2;
LABEL_191:
          *(_QWORD *)v188 = v109;
          *(_BYTE *)(a1 + 312) = v110 != 0;
        }
        goto LABEL_277;
      case 0x21u:
        if (v12 != 8)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x20u;
        v112 = v11 + 1;
        v113 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_196;
        v114 = *v112;
        v113 = v113 + (v114 << 7) - 128;
        if (v114 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v113);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 313) = v176 != 0;
          if (!result)
            return result;
        }
        else
        {
          v112 = v11 + 2;
LABEL_196:
          *(_QWORD *)v188 = v112;
          *(_BYTE *)(a1 + 313) = v113 != 0;
        }
        goto LABEL_277;
      case 0x22u:
        if (v12 != 16)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40000u;
        v115 = v11 + 1;
        v116 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_201;
        v117 = *v115;
        v116 = v116 + (v117 << 7) - 128;
        if (v117 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v116);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 249) = v177 != 0;
          if (!result)
            return result;
        }
        else
        {
          v115 = v11 + 2;
LABEL_201:
          *(_QWORD *)v188 = v115;
          *(_BYTE *)(a1 + 249) = v116 != 0;
        }
        goto LABEL_277;
      case 0x23u:
        if (v12 != 24)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20000u;
        v118 = v11 + 1;
        v119 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_206;
        v120 = *v118;
        v119 = v119 + (v120 << 7) - 128;
        if (v120 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v119);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 248) = v178 != 0;
          if (!result)
            return result;
        }
        else
        {
          v118 = v11 + 2;
LABEL_206:
          *(_QWORD *)v188 = v118;
          *(_BYTE *)(a1 + 248) = v119 != 0;
        }
        goto LABEL_277;
      case 0x24u:
        if (v12 != 34)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 4u;
        v121 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v121 & 0xFFFFFFFFFFFFFFFELL);
        if ((v121 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 168);
        goto LABEL_269;
      case 0x28u:
        if (v12 != 64)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100000u;
        v123 = v11 + 1;
        LODWORD(v122) = *v11;
        if ((v122 & 0x80) == 0)
          goto LABEL_215;
        v124 = *v123;
        v122 = v122 + (v124 << 7) - 128;
        if (v124 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v122);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 252) = v179;
          if (!result)
            return result;
        }
        else
        {
          v123 = v11 + 2;
LABEL_215:
          *(_QWORD *)v188 = v123;
          *(_DWORD *)(a1 + 252) = v122;
        }
        goto LABEL_277;
      case 0x29u:
        if (v12 != 72)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x40u;
        v126 = v11 + 1;
        LODWORD(v125) = *v11;
        if ((v125 & 0x80) == 0)
          goto LABEL_220;
        v127 = *v126;
        v125 = v125 + (v127 << 7) - 128;
        if (v127 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v125);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 316) = v180;
          if (!result)
            return result;
        }
        else
        {
          v126 = v11 + 2;
LABEL_220:
          *(_QWORD *)v188 = v126;
          *(_DWORD *)(a1 + 316) = v125;
        }
        goto LABEL_277;
      case 0x2Au:
        if (v12 != 80)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x80u;
        v129 = v11 + 1;
        LODWORD(v128) = *v11;
        if ((v128 & 0x80) == 0)
          goto LABEL_225;
        v130 = *v129;
        v128 = v128 + (v130 << 7) - 128;
        if (v130 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v128);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 320) = v181;
          if (!result)
            return result;
        }
        else
        {
          v129 = v11 + 2;
LABEL_225:
          *(_QWORD *)v188 = v129;
          *(_DWORD *)(a1 + 320) = v128;
        }
        goto LABEL_277;
      case 0x2Bu:
        if (v12 != 88)
          goto LABEL_279;
        *(_DWORD *)(a1 + 44) |= 0x100u;
        v132 = v11 + 1;
        LODWORD(v131) = *v11;
        if ((v131 & 0x80) == 0)
          goto LABEL_230;
        v133 = *v132;
        v131 = v131 + (v133 << 7) - 128;
        if (v133 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v131);
          *(_QWORD *)v188 = result;
          *(_DWORD *)(a1 + 324) = v182;
          if (!result)
            return result;
        }
        else
        {
          v132 = v11 + 2;
LABEL_230:
          *(_QWORD *)v188 = v132;
          *(_DWORD *)(a1 + 324) = v131;
        }
        goto LABEL_277;
      case 0x2Cu:
        if (v12 != 98)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 8u;
        v153 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v153 & 0xFFFFFFFFFFFFFFFELL);
        if ((v153 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EEEB1BA0;
        v137 = (uint64_t *)(a1 + 176);
        goto LABEL_274;
      case 0x2Du:
        if (v12 != 106)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x10u;
        v134 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v134 & 0xFFFFFFFFFFFFFFFELL);
        if ((v134 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EEEB1B60;
        v137 = (uint64_t *)(a1 + 184);
        goto LABEL_274;
      case 0x2Eu:
        if (v12 != 114)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x20u;
        v138 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v138 & 0xFFFFFFFFFFFFFFFELL);
        if ((v138 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EEEB1980;
        v137 = (uint64_t *)(a1 + 192);
        goto LABEL_274;
      case 0x2Fu:
        if (v12 != 122)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x40u;
        v139 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v139 & 0xFFFFFFFFFFFFFFFELL);
        if ((v139 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EEEB19A0;
        v137 = (uint64_t *)(a1 + 200);
        goto LABEL_274;
      case 0x30u:
        if (v12 != 130)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80u;
        v140 = *(_QWORD *)(a1 + 8);
        v135 = (_QWORD *)(v140 & 0xFFFFFFFFFFFFFFFELL);
        if ((v140 & 1) != 0)
          v135 = (_QWORD *)*v135;
        v136 = &off_1EEEB1B80;
        v137 = (uint64_t *)(a1 + 208);
LABEL_274:
        v152 = (std::string *)sub_1B030439C(v137, v136, (uint64_t)v135);
        goto LABEL_275;
      case 0x31u:
        if (v12 != 136)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x80000u;
        v141 = v11 + 1;
        v142 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_251;
        v143 = *v141;
        v142 = v142 + (v143 << 7) - 128;
        if (v143 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v142);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 250) = v183 != 0;
          if (!result)
            return result;
        }
        else
        {
          v141 = v11 + 2;
LABEL_251:
          *(_QWORD *)v188 = v141;
          *(_BYTE *)(a1 + 250) = v142 != 0;
        }
        goto LABEL_277;
      case 0x32u:
        if (v12 != 144)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x2000u;
        v144 = v11 + 1;
        v145 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_256;
        v146 = *v144;
        v145 = v145 + (v146 << 7) - 128;
        if (v146 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v145);
          *(_QWORD *)v188 = result;
          *(_BYTE *)(a1 + 244) = v184 != 0;
          if (!result)
            return result;
        }
        else
        {
          v144 = v11 + 2;
LABEL_256:
          *(_QWORD *)v188 = v144;
          *(_BYTE *)(a1 + 244) = v145 != 0;
        }
        goto LABEL_277;
      case 0x33u:
        if (v12 != 157)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x200000u;
        v147 = *(_DWORD *)v11;
        v45 = v11 + 4;
        *(_DWORD *)(a1 + 256) = v147;
LABEL_259:
        *(_QWORD *)v188 = v45;
        goto LABEL_277;
      case 0x34u:
        if (v12 != 160)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x400000u;
        v148 = v11 + 1;
        v149 = *v11;
        if ((*v11 & 0x80000000) == 0)
          goto LABEL_264;
        v150 = *v148;
        v149 = v149 + (v150 << 7) - 128;
        if (v150 < 0)
        {
          result = (char *)sub_1B03118F8((uint64_t)v11, v149);
          *(_QWORD *)v188 = result;
          *(_QWORD *)(a1 + 264) = v185;
          if (!result)
            return result;
        }
        else
        {
          v148 = v11 + 2;
LABEL_264:
          *(_QWORD *)v188 = v148;
          *(_QWORD *)(a1 + 264) = v149;
        }
        goto LABEL_277;
      case 0x35u:
        if (v12 != 170)
          goto LABEL_279;
        *(_DWORD *)(a1 + 40) |= 0x100u;
        v151 = *(_QWORD *)(a1 + 8);
        v24 = (_QWORD *)(v151 & 0xFFFFFFFFFFFFFFFELL);
        if ((v151 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v25 = (uint64_t *)(a1 + 216);
LABEL_269:
        v152 = (std::string *)sub_1B0304284(v25, (uint64_t)v24);
LABEL_275:
        result = (char *)sub_1B03119F4(v152, *(char **)v188, (uint64_t)a3);
        goto LABEL_276;
      default:
LABEL_279:
        if (v12)
          v155 = (v12 & 7) == 4;
        else
          v155 = 1;
        if (v155)
        {
          a3[10].i32[0] = v12 - 1;
          return v11;
        }
        if (v12 < 0x640)
        {
          if ((*v187 & 1) != 0)
          {
            v156 = (std::string *)((*v187 & 0xFFFFFFFFFFFFFFFELL) + 8);
          }
          else
          {
            v156 = (std::string *)sub_1B02F71FC(v187);
            v11 = *(char **)v188;
          }
          result = (char *)sub_1B0311E20(v12, v156, v11, a3);
        }
        else
        {
          result = (char *)sub_1B030A930((uint64_t *)(a1 + 16), v12, (unsigned __int8 *)v11, (uint64_t)&unk_1EEEB29A8, v187, a3);
        }
LABEL_276:
        *(_QWORD *)v188 = result;
        if (!result)
          return result;
LABEL_277:
        v154 = sub_1B02F70C0((uint64_t)a3, (char **)v188, a3[11].i32[1]);
        result = *(char **)v188;
        if (v154)
          return result;
        continue;
    }
    break;
  }
  while (1)
  {
    v101 = result + 2;
    *(_QWORD *)v188 = result + 2;
    v102 = *(int **)(a1 + 144);
    if (!v102)
      break;
    v103 = *(int *)(a1 + 136);
    v104 = *v102;
    if ((int)v103 >= *v102)
    {
      if (v104 == *(_DWORD *)(a1 + 140))
      {
LABEL_176:
        sub_1B0316A4C(a1 + 128, v104 + 1);
        v102 = *(int **)(a1 + 144);
        v104 = *v102;
      }
      *v102 = v104 + 1;
      v106 = *v7;
      if (*v7)
      {
        if ((*(_BYTE *)(v106 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v106 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v106 + 32) + 32), &unk_1E60CB5B0, 24);
        v105 = (std::string *)sub_1B0303B3C((unint64_t *)v106, 0x18uLL, (uint64_t)sub_1B02FFFA4);
      }
      else
      {
        v105 = (std::string *)operator new();
      }
      v105->__r_.__value_.__r.__words[0] = 0;
      v105->__r_.__value_.__l.__size_ = 0;
      v105->__r_.__value_.__r.__words[2] = 0;
      v107 = *(_QWORD *)(a1 + 144);
      v108 = *(int *)(a1 + 136);
      *(_DWORD *)(a1 + 136) = v108 + 1;
      *(_QWORD *)(v107 + 8 * v108 + 8) = v105;
      v101 = *(char **)v188;
      goto LABEL_183;
    }
    *(_DWORD *)(a1 + 136) = v103 + 1;
    v105 = *(std::string **)&v102[2 * v103 + 2];
LABEL_183:
    result = (char *)sub_1B03119F4(v105, v101, (uint64_t)a3);
    *(_QWORD *)v188 = result;
    if (!result)
      return result;
    if (*(_QWORD *)a3 <= (unint64_t)result || *(_WORD *)result != 506)
      goto LABEL_277;
  }
  v104 = *(_DWORD *)(a1 + 140);
  goto LABEL_176;
}

char *sub_1B02F9878(uint64_t a1, char *a2, uint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  int64_t v9;
  const void *v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int j;
  uint64_t v22;
  int64_t v23;
  const void *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  int v64;
  char v65;
  char v66;
  char v67;
  int v68;
  char v69;
  char v70;
  char v71;
  int v72;
  int k;
  uint64_t v74;
  int64_t v75;
  const void *v76;
  int v77;
  int m;
  uint64_t v79;
  int64_t v80;
  const void *v81;
  int v82;
  char v83;
  char v84;
  int v85;
  char v86;
  char v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  int v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  int v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char v110;
  char v111;
  int v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  void *v118;
  uint64_t v119;
  uint64_t v120;

  v6 = *(_DWORD *)(a1 + 64);
  if (v6 >= 1)
  {
    for (i = 0; v6 != i; ++i)
    {
      v8 = sub_1B0300154(a1 + 56, i);
      if (*(char *)(v8 + 23) < 0)
      {
        v9 = *(_QWORD *)(v8 + 8);
        if (v9 > 127)
          goto LABEL_13;
      }
      else
      {
        v9 = *(unsigned __int8 *)(v8 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v9)
      {
        *a2 = 10;
        a2[1] = v9;
        if (*(char *)(v8 + 23) >= 0)
          v10 = (const void *)v8;
        else
          v10 = *(const void **)v8;
        memcpy(a2 + 2, v10, v9);
        a2 += v9 + 2;
        continue;
      }
LABEL_13:
      a2 = sub_1B0304E14(a3, 1, v8, a2);
    }
  }
  v11 = *(_DWORD *)(a1 + 40);
  if ((v11 & 1) != 0)
  {
    a2 = sub_1B02F5444((unint64_t *)a3, 2, *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v11 & 0x800000) == 0)
    {
LABEL_16:
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
      goto LABEL_17;
    }
  }
  else if ((v11 & 0x800000) == 0)
  {
    goto LABEL_16;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v13 = *(int *)(a1 + 272);
  *a2 = 24;
  if (v13 > 0x7F)
  {
    a2[1] = v13 | 0x80;
    v15 = v13 >> 7;
    if (v13 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v15 | 0x80;
        v18 = v15 >> 7;
        ++a2;
        v19 = v15 >> 14;
        v15 >>= 7;
      }
      while (v19);
      *(a2 - 1) = v18;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
    else
    {
      a2[2] = v15;
      a2 += 3;
      if ((v11 & 0x1000000) == 0)
        goto LABEL_38;
    }
  }
  else
  {
    a2[1] = v13;
    a2 += 2;
    if ((v11 & 0x1000000) == 0)
      goto LABEL_38;
  }
LABEL_17:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v12 = *(int *)(a1 + 276);
  *a2 = 32;
  if (v12 > 0x7F)
  {
    a2[1] = v12 | 0x80;
    v14 = v12 >> 7;
    if (v12 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        ++a2;
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      *(a2 - 1) = v16;
    }
    else
    {
      a2[2] = v14;
      a2 += 3;
    }
  }
  else
  {
    a2[1] = v12;
    a2 += 2;
  }
LABEL_38:
  v20 = *(_DWORD *)(a1 + 88);
  if (v20 >= 1)
  {
    for (j = 0; v20 != j; ++j)
    {
      v22 = sub_1B0300154(a1 + 80, j);
      if (*(char *)(v22 + 23) < 0)
      {
        v23 = *(_QWORD *)(v22 + 8);
        if (v23 > 127)
          goto LABEL_50;
      }
      else
      {
        v23 = *(unsigned __int8 *)(v22 + 23);
      }
      if (*a3 - (uint64_t)a2 + 14 >= v23)
      {
        *a2 = 42;
        a2[1] = v23;
        if (*(char *)(v22 + 23) >= 0)
          v24 = (const void *)v22;
        else
          v24 = *(const void **)v22;
        memcpy(a2 + 2, v24, v23);
        a2 += v23 + 2;
        continue;
      }
LABEL_50:
      a2 = sub_1B0304E14(a3, 5, v22, a2);
    }
  }
  if ((v11 & 0x200) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v26 = *(int *)(a1 + 224);
    *a2 = 48;
    if (v26 > 0x7F)
    {
      a2[1] = v26 | 0x80;
      v28 = v26 >> 7;
      if (v26 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v28 | 0x80;
          v31 = v28 >> 7;
          ++a2;
          v32 = v28 >> 14;
          v28 >>= 7;
        }
        while (v32);
        *(a2 - 1) = v31;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
      else
      {
        a2[2] = v28;
        a2 += 3;
        if ((v11 & 2) != 0)
          goto LABEL_82;
      }
    }
    else
    {
      a2[1] = v26;
      a2 += 2;
      if ((v11 & 2) != 0)
        goto LABEL_82;
    }
LABEL_53:
    if ((v11 & 0x2000000) == 0)
      goto LABEL_54;
    goto LABEL_83;
  }
  if ((v11 & 2) == 0)
    goto LABEL_53;
LABEL_82:
  a2 = sub_1B02F5444((unint64_t *)a3, 7, *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v11 & 0x2000000) == 0)
  {
LABEL_54:
    if ((v11 & 0x800) == 0)
      goto LABEL_55;
    goto LABEL_86;
  }
LABEL_83:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v33 = *(_DWORD *)(a1 + 280);
  *a2 = 85;
  *(_DWORD *)(a2 + 1) = v33;
  a2 += 5;
  if ((v11 & 0x800) == 0)
  {
LABEL_55:
    if ((v11 & 0x400) == 0)
      goto LABEL_56;
LABEL_97:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v38 = *(int *)(a1 + 228);
    *a2 = 96;
    if (v38 > 0x7F)
    {
      a2[1] = v38 | 0x80;
      v39 = v38 >> 7;
      if (v38 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v39 | 0x80;
          v40 = v39 >> 7;
          ++a2;
          v41 = v39 >> 14;
          v39 >>= 7;
        }
        while (v41);
        *(a2 - 1) = v40;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
      else
      {
        a2[2] = v39;
        a2 += 3;
        if ((v11 & 0x1000) != 0)
          goto LABEL_108;
      }
    }
    else
    {
      a2[1] = v38;
      a2 += 2;
      if ((v11 & 0x1000) != 0)
        goto LABEL_108;
    }
LABEL_57:
    if ((v11 & 0x4000000) == 0)
      goto LABEL_58;
LABEL_119:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v46 = *(int *)(a1 + 284);
    *a2 = 112;
    if (v46 > 0x7F)
    {
      a2[1] = v46 | 0x80;
      v47 = v46 >> 7;
      if (v46 >> 14)
      {
        a2 += 3;
        do
        {
          *(a2 - 1) = v47 | 0x80;
          v48 = v47 >> 7;
          ++a2;
          v49 = v47 >> 14;
          v47 >>= 7;
        }
        while (v49);
        *(a2 - 1) = v48;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
      else
      {
        a2[2] = v47;
        a2 += 3;
        if ((v11 & 0x8000000) != 0)
          goto LABEL_130;
      }
    }
    else
    {
      a2[1] = v46;
      a2 += 2;
      if ((v11 & 0x8000000) != 0)
        goto LABEL_130;
    }
LABEL_59:
    if ((v11 & 0x10000000) == 0)
      goto LABEL_60;
LABEL_133:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v51 = *(int *)(a1 + 292);
    *(_WORD *)a2 = 384;
    if (v51 > 0x7F)
    {
      a2[2] = v51 | 0x80;
      v52 = v51 >> 7;
      if (v51 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v52 | 0x80;
          v53 = v52 >> 7;
          ++a2;
          v54 = v52 >> 14;
          v52 >>= 7;
        }
        while (v54);
        *(a2 - 1) = v53;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
      else
      {
        a2[3] = v52;
        a2 += 4;
        if ((v11 & 0x20000000) != 0)
          goto LABEL_144;
      }
    }
    else
    {
      a2[2] = v51;
      a2 += 3;
      if ((v11 & 0x20000000) != 0)
        goto LABEL_144;
    }
LABEL_61:
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
    goto LABEL_62;
  }
LABEL_86:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v34 = *(_QWORD *)(a1 + 232);
  *a2 = 88;
  if (v34 > 0x7F)
  {
    a2[1] = v34 | 0x80;
    v35 = v34 >> 7;
    if (v34 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v35 | 0x80;
        v36 = v35 >> 7;
        ++a2;
        v37 = v35 >> 14;
        v35 >>= 7;
      }
      while (v37);
      *(a2 - 1) = v36;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
    else
    {
      a2[2] = v35;
      a2 += 3;
      if ((v11 & 0x400) != 0)
        goto LABEL_97;
    }
  }
  else
  {
    a2[1] = v34;
    a2 += 2;
    if ((v11 & 0x400) != 0)
      goto LABEL_97;
  }
LABEL_56:
  if ((v11 & 0x1000) == 0)
    goto LABEL_57;
LABEL_108:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v42 = *(int *)(a1 + 240);
  *a2 = 104;
  if (v42 > 0x7F)
  {
    a2[1] = v42 | 0x80;
    v43 = v42 >> 7;
    if (v42 >> 14)
    {
      a2 += 3;
      do
      {
        *(a2 - 1) = v43 | 0x80;
        v44 = v43 >> 7;
        ++a2;
        v45 = v43 >> 14;
        v43 >>= 7;
      }
      while (v45);
      *(a2 - 1) = v44;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
    else
    {
      a2[2] = v43;
      a2 += 3;
      if ((v11 & 0x4000000) != 0)
        goto LABEL_119;
    }
  }
  else
  {
    a2[1] = v42;
    a2 += 2;
    if ((v11 & 0x4000000) != 0)
      goto LABEL_119;
  }
LABEL_58:
  if ((v11 & 0x8000000) == 0)
    goto LABEL_59;
LABEL_130:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v50 = *(_DWORD *)(a1 + 288);
  *a2 = 125;
  *(_DWORD *)(a2 + 1) = v50;
  a2 += 5;
  if ((v11 & 0x10000000) != 0)
    goto LABEL_133;
LABEL_60:
  if ((v11 & 0x20000000) == 0)
    goto LABEL_61;
LABEL_144:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v55 = *(int *)(a1 + 296);
  *(_WORD *)a2 = 392;
  if (v55 > 0x7F)
  {
    a2[2] = v55 | 0x80;
    v56 = v55 >> 7;
    if (v55 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v56 | 0x80;
        v57 = v56 >> 7;
        ++a2;
        v58 = v56 >> 14;
        v56 >>= 7;
      }
      while (v58);
      *(a2 - 1) = v57;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
    else
    {
      a2[3] = v56;
      a2 += 4;
      if ((v11 & 0x40000000) == 0)
        goto LABEL_155;
    }
  }
  else
  {
    a2[2] = v55;
    a2 += 3;
    if ((v11 & 0x40000000) == 0)
      goto LABEL_155;
  }
LABEL_62:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v25 = *(int *)(a1 + 300);
  *(_WORD *)a2 = 400;
  if (v25 > 0x7F)
  {
    a2[2] = v25 | 0x80;
    v27 = v25 >> 7;
    if (v25 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v27 | 0x80;
        v29 = v27 >> 7;
        ++a2;
        v30 = v27 >> 14;
        v27 >>= 7;
      }
      while (v30);
      *(a2 - 1) = v29;
    }
    else
    {
      a2[3] = v27;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v25;
    a2 += 3;
  }
LABEL_155:
  if ((*(_BYTE *)(a1 + 44) & 1) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v59 = *(_BYTE *)(a1 + 308);
    *(_WORD *)a2 = 408;
    a2[2] = v59;
    a2 += 3;
  }
  if ((*(_DWORD *)(a1 + 40) & 0x80000000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v60 = *(int *)(a1 + 304);
    *(_WORD *)a2 = 416;
    if (v60 > 0x7F)
    {
      a2[2] = v60 | 0x80;
      v61 = v60 >> 7;
      if (v60 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v61 | 0x80;
          v62 = v61 >> 7;
          ++a2;
          v63 = v61 >> 14;
          v61 >>= 7;
        }
        while (v63);
        *(a2 - 1) = v62;
      }
      else
      {
        a2[3] = v61;
        a2 += 4;
      }
    }
    else
    {
      a2[2] = v60;
      a2 += 3;
    }
  }
  v64 = *(_DWORD *)(a1 + 44);
  if ((v64 & 2) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v65 = *(_BYTE *)(a1 + 309);
    *(_WORD *)a2 = 424;
    a2[2] = v65;
    a2 += 3;
    if ((v64 & 8) == 0)
    {
LABEL_171:
      if ((v64 & 4) == 0)
        goto LABEL_182;
      goto LABEL_179;
    }
  }
  else if ((v64 & 8) == 0)
  {
    goto LABEL_171;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v66 = *(_BYTE *)(a1 + 311);
  *(_WORD *)a2 = 432;
  a2[2] = v66;
  a2 += 3;
  if ((v64 & 4) != 0)
  {
LABEL_179:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v67 = *(_BYTE *)(a1 + 310);
    *(_WORD *)a2 = 440;
    a2[2] = v67;
    a2 += 3;
  }
LABEL_182:
  v68 = *(_DWORD *)(a1 + 40);
  if ((v68 & 0x4000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v69 = *(_BYTE *)(a1 + 245);
    *(_WORD *)a2 = 448;
    a2[2] = v69;
    a2 += 3;
    if ((v68 & 0x10000) == 0)
    {
LABEL_184:
      if ((v68 & 0x8000) == 0)
        goto LABEL_195;
      goto LABEL_192;
    }
  }
  else if ((v68 & 0x10000) == 0)
  {
    goto LABEL_184;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v70 = *(_BYTE *)(a1 + 247);
  *(_WORD *)a2 = 456;
  a2[2] = v70;
  a2 += 3;
  if ((v68 & 0x8000) != 0)
  {
LABEL_192:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v71 = *(_BYTE *)(a1 + 246);
    *(_WORD *)a2 = 464;
    a2[2] = v71;
    a2 += 3;
  }
LABEL_195:
  v72 = *(_DWORD *)(a1 + 112);
  if (v72 >= 1)
  {
    for (k = 0; v72 != k; ++k)
    {
      v74 = sub_1B0300154(a1 + 104, k);
      if (*(char *)(v74 + 23) < 0)
      {
        v75 = *(_QWORD *)(v74 + 8);
        if (v75 > 127)
          goto LABEL_207;
      }
      else
      {
        v75 = *(unsigned __int8 *)(v74 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v75)
      {
        *(_WORD *)a2 = 498;
        a2[2] = v75;
        if (*(char *)(v74 + 23) >= 0)
          v76 = (const void *)v74;
        else
          v76 = *(const void **)v74;
        memcpy(a2 + 3, v76, v75);
        a2 += v75 + 3;
        continue;
      }
LABEL_207:
      a2 = sub_1B0304E14(a3, 30, v74, a2);
    }
  }
  v77 = *(_DWORD *)(a1 + 136);
  if (v77 >= 1)
  {
    for (m = 0; v77 != m; ++m)
    {
      v79 = sub_1B0300154(a1 + 128, m);
      if (*(char *)(v79 + 23) < 0)
      {
        v80 = *(_QWORD *)(v79 + 8);
        if (v80 > 127)
          goto LABEL_220;
      }
      else
      {
        v80 = *(unsigned __int8 *)(v79 + 23);
      }
      if (*a3 - (uint64_t)a2 + 13 >= v80)
      {
        *(_WORD *)a2 = 506;
        a2[2] = v80;
        if (*(char *)(v79 + 23) >= 0)
          v81 = (const void *)v79;
        else
          v81 = *(const void **)v79;
        memcpy(a2 + 3, v81, v80);
        a2 += v80 + 3;
        continue;
      }
LABEL_220:
      a2 = sub_1B0304E14(a3, 31, v79, a2);
    }
  }
  v82 = *(_DWORD *)(a1 + 44);
  if ((v82 & 0x10) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v83 = *(_BYTE *)(a1 + 312);
    *(_WORD *)a2 = 640;
    a2[2] = v83;
    a2 += 3;
  }
  if ((v82 & 0x20) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v84 = *(_BYTE *)(a1 + 313);
    *(_WORD *)a2 = 648;
    a2[2] = v84;
    a2 += 3;
  }
  v85 = *(_DWORD *)(a1 + 40);
  if ((v85 & 0x40000) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v86 = *(_BYTE *)(a1 + 249);
    *(_WORD *)a2 = 656;
    a2[2] = v86;
    a2 += 3;
    if ((v85 & 0x20000) == 0)
    {
LABEL_231:
      if ((v85 & 4) == 0)
        goto LABEL_232;
      goto LABEL_240;
    }
  }
  else if ((v85 & 0x20000) == 0)
  {
    goto LABEL_231;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v87 = *(_BYTE *)(a1 + 248);
  *(_WORD *)a2 = 664;
  a2[2] = v87;
  a2 += 3;
  if ((v85 & 4) == 0)
  {
LABEL_232:
    if ((v85 & 0x100000) == 0)
      goto LABEL_250;
    goto LABEL_241;
  }
LABEL_240:
  a2 = sub_1B02F5444((unint64_t *)a3, 36, *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v85 & 0x100000) == 0)
    goto LABEL_250;
LABEL_241:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v88 = *(int *)(a1 + 252);
  *(_WORD *)a2 = 704;
  if (v88 > 0x7F)
  {
    a2[2] = v88 | 0x80;
    v89 = v88 >> 7;
    if (v88 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v89 | 0x80;
        v90 = v89 >> 7;
        ++a2;
        v91 = v89 >> 14;
        v89 >>= 7;
      }
      while (v91);
      *(a2 - 1) = v90;
    }
    else
    {
      a2[3] = v89;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v88;
    a2 += 3;
  }
LABEL_250:
  v92 = *(_DWORD *)(a1 + 44);
  if ((v92 & 0x40) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v94 = *(int *)(a1 + 316);
    *(_WORD *)a2 = 712;
    if (v94 > 0x7F)
    {
      a2[2] = v94 | 0x80;
      v96 = v94 >> 7;
      if (v94 >> 14)
      {
        a2 += 4;
        do
        {
          *(a2 - 1) = v96 | 0x80;
          v99 = v96 >> 7;
          ++a2;
          v100 = v96 >> 14;
          v96 >>= 7;
        }
        while (v100);
        *(a2 - 1) = v99;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
      else
      {
        a2[3] = v96;
        a2 += 4;
        if ((v92 & 0x80) != 0)
          goto LABEL_273;
      }
    }
    else
    {
      a2[2] = v94;
      a2 += 3;
      if ((v92 & 0x80) != 0)
        goto LABEL_273;
    }
LABEL_252:
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
    goto LABEL_253;
  }
  if ((v92 & 0x80) == 0)
    goto LABEL_252;
LABEL_273:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v101 = *(int *)(a1 + 320);
  *(_WORD *)a2 = 720;
  if (v101 > 0x7F)
  {
    a2[2] = v101 | 0x80;
    v102 = v101 >> 7;
    if (v101 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v102 | 0x80;
        v103 = v102 >> 7;
        ++a2;
        v104 = v102 >> 14;
        v102 >>= 7;
      }
      while (v104);
      *(a2 - 1) = v103;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
    else
    {
      a2[3] = v102;
      a2 += 4;
      if ((v92 & 0x100) == 0)
        goto LABEL_284;
    }
  }
  else
  {
    a2[2] = v101;
    a2 += 3;
    if ((v92 & 0x100) == 0)
      goto LABEL_284;
  }
LABEL_253:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v93 = *(int *)(a1 + 324);
  *(_WORD *)a2 = 728;
  if (v93 > 0x7F)
  {
    a2[2] = v93 | 0x80;
    v95 = v93 >> 7;
    if (v93 >> 14)
    {
      a2 += 4;
      do
      {
        *(a2 - 1) = v95 | 0x80;
        v97 = v95 >> 7;
        ++a2;
        v98 = v95 >> 14;
        v95 >>= 7;
      }
      while (v98);
      *(a2 - 1) = v97;
    }
    else
    {
      a2[3] = v95;
      a2 += 4;
    }
  }
  else
  {
    a2[2] = v93;
    a2 += 3;
  }
LABEL_284:
  v105 = *(_DWORD *)(a1 + 40);
  if ((v105 & 8) != 0)
  {
    a2 = sub_1B02F5444((unint64_t *)a3, 44, *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v105 & 0x10) == 0)
    {
LABEL_286:
      if ((v105 & 0x20) == 0)
        goto LABEL_287;
      goto LABEL_299;
    }
  }
  else if ((v105 & 0x10) == 0)
  {
    goto LABEL_286;
  }
  a2 = sub_1B02F5444((unint64_t *)a3, 45, *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x20) == 0)
  {
LABEL_287:
    if ((v105 & 0x40) == 0)
      goto LABEL_288;
    goto LABEL_300;
  }
LABEL_299:
  a2 = sub_1B02F5444((unint64_t *)a3, 46, *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x40) == 0)
  {
LABEL_288:
    if ((v105 & 0x80) == 0)
      goto LABEL_289;
    goto LABEL_301;
  }
LABEL_300:
  a2 = sub_1B02F5444((unint64_t *)a3, 47, *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x80) == 0)
  {
LABEL_289:
    if ((v105 & 0x80000) == 0)
      goto LABEL_290;
    goto LABEL_302;
  }
LABEL_301:
  a2 = sub_1B02F5444((unint64_t *)a3, 48, *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL, a2);
  if ((v105 & 0x80000) == 0)
  {
LABEL_290:
    if ((v105 & 0x2000) == 0)
      goto LABEL_291;
    goto LABEL_305;
  }
LABEL_302:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v110 = *(_BYTE *)(a1 + 250);
  *(_WORD *)a2 = 904;
  a2[2] = v110;
  a2 += 3;
  if ((v105 & 0x2000) == 0)
  {
LABEL_291:
    if ((v105 & 0x200000) == 0)
      goto LABEL_292;
    goto LABEL_308;
  }
LABEL_305:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v111 = *(_BYTE *)(a1 + 244);
  *(_WORD *)a2 = 912;
  a2[2] = v111;
  a2 += 3;
  if ((v105 & 0x200000) == 0)
  {
LABEL_292:
    if ((v105 & 0x400000) == 0)
      goto LABEL_293;
    goto LABEL_311;
  }
LABEL_308:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v112 = *(_DWORD *)(a1 + 256);
  *(_WORD *)a2 = 925;
  *(_DWORD *)(a2 + 2) = v112;
  a2 += 6;
  if ((v105 & 0x400000) == 0)
  {
LABEL_293:
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
    goto LABEL_294;
  }
LABEL_311:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v113 = *(_QWORD *)(a1 + 264);
  *(_WORD *)a2 = 928;
  if (v113 <= 0x7F)
  {
    a2[2] = v113;
    a2 += 3;
    if ((v105 & 0x100) == 0)
      goto LABEL_295;
LABEL_294:
    a2 = sub_1B02F5444((unint64_t *)a3, 53, *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL, a2);
    goto LABEL_295;
  }
  a2[2] = v113 | 0x80;
  v114 = v113 >> 7;
  if (v113 >> 14)
  {
    a2 += 4;
    do
    {
      *(a2 - 1) = v114 | 0x80;
      v115 = v114 >> 7;
      ++a2;
      v116 = v114 >> 14;
      v114 >>= 7;
    }
    while (v116);
    *(a2 - 1) = v115;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
  else
  {
    a2[3] = v114;
    a2 += 4;
    if ((v105 & 0x100) != 0)
      goto LABEL_294;
  }
LABEL_295:
  v106 = sub_1B030B564(a1 + 16, 200, 0x20000000, a2, a3);
  v107 = v106;
  v108 = *(_QWORD *)(a1 + 8);
  if ((v108 & 1) == 0)
    return v107;
  v117 = v108 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v117 + 31) < 0)
  {
    v118 = *(void **)(v117 + 8);
    v119 = *(_QWORD *)(v117 + 16);
  }
  else
  {
    v118 = (void *)(v117 + 8);
    LODWORD(v119) = *(unsigned __int8 *)(v117 + 31);
  }
  if (*a3 - (uint64_t)v106 >= (int)v119)
  {
    v120 = (int)v119;
    memcpy(v106, v118, (int)v119);
    v107 += v120;
    return v107;
  }
  return sub_1B0304A14(a3, (char *)v118, v119, (unint64_t)v106);
}

uint64_t sub_1B02FAA2C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  uint64_t v96;
  int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;

  v2 = sub_1B030E0F8(a1 + 16);
  v3 = *(unsigned int *)(a1 + 64);
  v4 = v2 + v3;
  if ((int)v3 >= 1)
  {
    v5 = 0;
    do
    {
      v6 = sub_1B0300154(a1 + 56, v5);
      v7 = *(unsigned __int8 *)(v6 + 23);
      if ((v7 & 0x80u) != 0)
        v7 = *(_QWORD *)(v6 + 8);
      v4 += v7 + ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6);
      ++v5;
    }
    while ((_DWORD)v3 != v5);
  }
  v8 = *(unsigned int *)(a1 + 88);
  v9 = v4 + v8;
  if ((int)v8 >= 1)
  {
    v10 = 0;
    do
    {
      v11 = sub_1B0300154(a1 + 80, v10);
      v12 = *(unsigned __int8 *)(v11 + 23);
      if ((v12 & 0x80u) != 0)
        v12 = *(_QWORD *)(v11 + 8);
      v9 += v12 + ((9 * (__clz(v12 | 1) ^ 0x1F) + 73) >> 6);
      ++v10;
    }
    while ((_DWORD)v8 != v10);
  }
  v13 = *(unsigned int *)(a1 + 112);
  v14 = v9 + 2 * v13;
  if ((int)v13 >= 1)
  {
    v15 = 0;
    do
    {
      v16 = sub_1B0300154(a1 + 104, v15);
      v17 = *(unsigned __int8 *)(v16 + 23);
      if ((v17 & 0x80u) != 0)
        v17 = *(_QWORD *)(v16 + 8);
      v14 += v17 + ((9 * (__clz(v17 | 1) ^ 0x1F) + 73) >> 6);
      ++v15;
    }
    while ((_DWORD)v13 != v15);
  }
  v18 = *(unsigned int *)(a1 + 136);
  v19 = v14 + 2 * v18;
  if ((int)v18 >= 1)
  {
    v20 = 0;
    do
    {
      v21 = sub_1B0300154(a1 + 128, v20);
      v22 = *(unsigned __int8 *)(v21 + 23);
      if ((v22 & 0x80u) != 0)
        v22 = *(_QWORD *)(v21 + 8);
      v19 += v22 + ((9 * (__clz(v22 | 1) ^ 0x1F) + 73) >> 6);
      ++v20;
    }
    while ((_DWORD)v18 != v20);
  }
  v23 = *(_DWORD *)(a1 + 40);
  if (!(_BYTE)v23)
    goto LABEL_33;
  if ((v23 & 1) != 0)
  {
    v58 = *(_QWORD *)(a1 + 152) & 0xFFFFFFFFFFFFFFFELL;
    v59 = *(unsigned __int8 *)(v58 + 23);
    v60 = *(_QWORD *)(v58 + 8);
    if ((v59 & 0x80u) == 0)
      v60 = v59;
    v19 += v60 + ((9 * (__clz(v60 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v23 & 2) == 0)
    {
LABEL_24:
      if ((v23 & 4) == 0)
        goto LABEL_25;
      goto LABEL_131;
    }
  }
  else if ((v23 & 2) == 0)
  {
    goto LABEL_24;
  }
  v61 = *(_QWORD *)(a1 + 160) & 0xFFFFFFFFFFFFFFFELL;
  v62 = *(unsigned __int8 *)(v61 + 23);
  v63 = *(_QWORD *)(v61 + 8);
  if ((v62 & 0x80u) == 0)
    v63 = v62;
  v19 += v63 + ((9 * (__clz(v63 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v23 & 4) == 0)
  {
LABEL_25:
    if ((v23 & 8) == 0)
      goto LABEL_26;
    goto LABEL_134;
  }
LABEL_131:
  v64 = *(_QWORD *)(a1 + 168) & 0xFFFFFFFFFFFFFFFELL;
  v65 = *(unsigned __int8 *)(v64 + 23);
  v66 = *(_QWORD *)(v64 + 8);
  if ((v65 & 0x80u) == 0)
    v66 = v65;
  v19 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 8) == 0)
  {
LABEL_26:
    if ((v23 & 0x10) == 0)
      goto LABEL_27;
    goto LABEL_137;
  }
LABEL_134:
  v67 = *(_QWORD *)(a1 + 176) & 0xFFFFFFFFFFFFFFFELL;
  v68 = *(unsigned __int8 *)(v67 + 23);
  v69 = *(_QWORD *)(v67 + 8);
  if ((v68 & 0x80u) == 0)
    v69 = v68;
  v19 += v69 + ((9 * (__clz(v69 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x10) == 0)
  {
LABEL_27:
    if ((v23 & 0x20) == 0)
      goto LABEL_28;
LABEL_140:
    v73 = *(_QWORD *)(a1 + 192) & 0xFFFFFFFFFFFFFFFELL;
    v74 = *(unsigned __int8 *)(v73 + 23);
    v75 = *(_QWORD *)(v73 + 8);
    if ((v74 & 0x80u) == 0)
      v75 = v74;
    v19 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x40) == 0)
    {
LABEL_29:
      if ((v23 & 0x80) == 0)
        goto LABEL_33;
      goto LABEL_30;
    }
    goto LABEL_143;
  }
LABEL_137:
  v70 = *(_QWORD *)(a1 + 184) & 0xFFFFFFFFFFFFFFFELL;
  v71 = *(unsigned __int8 *)(v70 + 23);
  v72 = *(_QWORD *)(v70 + 8);
  if ((v71 & 0x80u) == 0)
    v72 = v71;
  v19 += v72 + ((9 * (__clz(v72 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x20) != 0)
    goto LABEL_140;
LABEL_28:
  if ((v23 & 0x40) == 0)
    goto LABEL_29;
LABEL_143:
  v76 = *(_QWORD *)(a1 + 200) & 0xFFFFFFFFFFFFFFFELL;
  v77 = *(unsigned __int8 *)(v76 + 23);
  v78 = *(_QWORD *)(v76 + 8);
  if ((v77 & 0x80u) == 0)
    v78 = v77;
  v19 += v78 + ((9 * (__clz(v78 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if ((v23 & 0x80) != 0)
  {
LABEL_30:
    v24 = *(_QWORD *)(a1 + 208) & 0xFFFFFFFFFFFFFFFELL;
    v25 = *(unsigned __int8 *)(v24 + 23);
    v26 = *(_QWORD *)(v24 + 8);
    if ((v25 & 0x80u) == 0)
      v26 = v25;
    v19 += v26 + ((9 * (__clz(v26 | 1) ^ 0x1F) + 73) >> 6) + 2;
  }
LABEL_33:
  if ((v23 & 0xFF00) == 0)
    goto LABEL_50;
  if ((v23 & 0x100) != 0)
  {
    v79 = *(_QWORD *)(a1 + 216) & 0xFFFFFFFFFFFFFFFELL;
    v80 = *(unsigned __int8 *)(v79 + 23);
    v81 = *(_QWORD *)(v79 + 8);
    if ((v80 & 0x80u) == 0)
      v81 = v80;
    v19 += v81 + ((9 * (__clz(v81 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if ((v23 & 0x200) == 0)
    {
LABEL_36:
      if ((v23 & 0x400) == 0)
        goto LABEL_37;
      goto LABEL_154;
    }
  }
  else if ((v23 & 0x200) == 0)
  {
    goto LABEL_36;
  }
  v82 = *(_DWORD *)(a1 + 224);
  v83 = (9 * (__clz(v82 | 1) ^ 0x1F) + 73) >> 6;
  if (v82 >= 0)
    v84 = v83;
  else
    v84 = 10;
  v19 += v84 + 1;
  if ((v23 & 0x400) == 0)
  {
LABEL_37:
    if ((v23 & 0x800) == 0)
      goto LABEL_38;
LABEL_158:
    v19 += ((9 * (__clz(*(_QWORD *)(a1 + 232) | 1) ^ 0x3F) + 73) >> 6) + 1;
    if ((v23 & 0x1000) != 0)
      goto LABEL_39;
    goto LABEL_43;
  }
LABEL_154:
  v85 = *(_DWORD *)(a1 + 228);
  v86 = (9 * (__clz(v85 | 1) ^ 0x1F) + 73) >> 6;
  if (v85 >= 0)
    v87 = v86;
  else
    v87 = 10;
  v19 += v87 + 1;
  if ((v23 & 0x800) != 0)
    goto LABEL_158;
LABEL_38:
  if ((v23 & 0x1000) != 0)
  {
LABEL_39:
    v27 = *(_DWORD *)(a1 + 240);
    v28 = (9 * (__clz(v27 | 1) ^ 0x1F) + 73) >> 6;
    if (v27 >= 0)
      v29 = v28;
    else
      v29 = 10;
    v19 += v29 + 1;
  }
LABEL_43:
  v30 = v19 + 3;
  if ((v23 & 0x2000) == 0)
    v30 = v19;
  if ((v23 & 0x4000) != 0)
    v30 += 3;
  if ((v23 & 0x8000) != 0)
    v19 = v30 + 3;
  else
    v19 = v30;
LABEL_50:
  if ((v23 & 0xFF0000) != 0)
  {
    v31 = v19 + 3;
    if ((v23 & 0x10000) == 0)
      v31 = v19;
    if ((v23 & 0x20000) != 0)
      v31 += 3;
    if ((v23 & 0x40000) != 0)
      v31 += 3;
    if ((v23 & 0x80000) != 0)
      v31 += 3;
    if ((v23 & 0x100000) != 0)
    {
      v32 = *(_DWORD *)(a1 + 252);
      v33 = (9 * (__clz(v32 | 1) ^ 0x1F) + 73) >> 6;
      if (v32 >= 0)
        v34 = v33;
      else
        v34 = 10;
      v31 += v34 + 2;
    }
    if ((v23 & 0x200000) != 0)
      v19 = v31 + 6;
    else
      v19 = v31;
    if ((v23 & 0x400000) != 0)
      v19 += ((9 * (__clz(*(_QWORD *)(a1 + 264) | 1) ^ 0x3F) + 73) >> 6) + 2;
    if ((v23 & 0x800000) != 0)
    {
      v35 = *(_DWORD *)(a1 + 272);
      v36 = (9 * (__clz(v35 | 1) ^ 0x1F) + 73) >> 6;
      if (v35 >= 0)
        v37 = v36;
      else
        v37 = 10;
      v19 += v37 + 1;
    }
  }
  if (!HIBYTE(v23))
    goto LABEL_94;
  if ((v23 & 0x1000000) != 0)
  {
    v38 = *(_DWORD *)(a1 + 276);
    v39 = (9 * (__clz(v38 | 1) ^ 0x1F) + 73) >> 6;
    if (v38 >= 0)
      v40 = v39;
    else
      v40 = 10;
    v19 += v40 + 1;
  }
  v41 = v19 + 5;
  if ((v23 & 0x2000000) == 0)
    v41 = v19;
  if ((v23 & 0x4000000) != 0)
  {
    v42 = *(_DWORD *)(a1 + 284);
    v43 = (9 * (__clz(v42 | 1) ^ 0x1F) + 73) >> 6;
    if (v42 >= 0)
      v44 = v43;
    else
      v44 = 10;
    v41 += v44 + 1;
  }
  if ((v23 & 0x8000000) != 0)
    v19 = v41 + 5;
  else
    v19 = v41;
  if ((v23 & 0x10000000) == 0)
  {
    if ((v23 & 0x20000000) == 0)
      goto LABEL_92;
LABEL_164:
    v91 = *(_DWORD *)(a1 + 296);
    v92 = ((9 * (__clz(v91 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v91 >= 0)
      v93 = v92;
    else
      v93 = 12;
    v19 += v93;
    if ((v23 & 0x40000000) == 0)
    {
LABEL_93:
      if ((v23 & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_172;
    }
    goto LABEL_168;
  }
  v88 = *(_DWORD *)(a1 + 292);
  v89 = (9 * (__clz(v88 | 1) ^ 0x1F) + 73) >> 6;
  if (v88 >= 0)
    v90 = v89;
  else
    v90 = 10;
  v19 += v90 + 2;
  if ((v23 & 0x20000000) != 0)
    goto LABEL_164;
LABEL_92:
  if ((v23 & 0x40000000) == 0)
    goto LABEL_93;
LABEL_168:
  v94 = *(_DWORD *)(a1 + 300);
  v95 = ((9 * (__clz(v94 | 1) ^ 0x1F) + 73) >> 6) + 2;
  if (v94 >= 0)
    v96 = v95;
  else
    v96 = 12;
  v19 += v96;
  if ((v23 & 0x80000000) != 0)
  {
LABEL_172:
    v97 = *(_DWORD *)(a1 + 304);
    v98 = ((9 * (__clz(v97 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v97 >= 0)
      v99 = v98;
    else
      v99 = 12;
    v19 += v99;
  }
LABEL_94:
  v45 = *(_DWORD *)(a1 + 44);
  if ((_BYTE)v45)
  {
    v46 = v19 + 3;
    if ((v45 & 1) == 0)
      v46 = v19;
    if ((v45 & 2) != 0)
      v46 += 3;
    if ((v45 & 4) != 0)
      v46 += 3;
    if ((v45 & 8) != 0)
      v46 += 3;
    if ((v45 & 0x10) != 0)
      v46 += 3;
    if ((v45 & 0x20) != 0)
      v19 = v46 + 3;
    else
      v19 = v46;
    if ((v45 & 0x40) != 0)
    {
      v47 = *(_DWORD *)(a1 + 316);
      v48 = ((9 * (__clz(v47 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v47 >= 0)
        v49 = v48;
      else
        v49 = 12;
      v19 += v49;
    }
    if ((v45 & 0x80) != 0)
    {
      v50 = *(_DWORD *)(a1 + 320);
      v51 = ((9 * (__clz(v50 | 1) ^ 0x1F) + 73) >> 6) + 2;
      if (v50 >= 0)
        v52 = v51;
      else
        v52 = 12;
      v19 += v52;
    }
  }
  if ((v45 & 0x100) != 0)
  {
    v53 = *(_DWORD *)(a1 + 324);
    v54 = ((9 * (__clz(v53 | 1) ^ 0x1F) + 73) >> 6) + 2;
    if (v53 >= 0)
      v55 = v54;
    else
      v55 = 12;
    v19 += v55;
  }
  v56 = *(_QWORD *)(a1 + 8);
  if ((v56 & 1) != 0)
  {
    v100 = v56 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v100 + 31) < 0)
      v101 = *(_QWORD *)(v100 + 16);
    else
      v101 = *(unsigned __int8 *)(v100 + 31);
    v19 += v101;
  }
  *(_DWORD *)(a1 + 48) = v19;
  return v19;
}

unint64_t sub_1B02FB2D8(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CBBC0)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  return sub_1B02FB300(a1, (uint64_t)a2);
}

unint64_t sub_1B02FB300(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  unint64_t result;
  unsigned int v14;
  __int128 *v15;
  uint64_t v16;
  _QWORD *v17;
  __int128 *v18;
  uint64_t v19;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  _QWORD *v23;
  __int128 *v24;
  uint64_t v25;
  _QWORD *v26;
  __int128 *v27;
  uint64_t v28;
  _QWORD *v29;
  __int128 *v30;
  uint64_t v31;
  _QWORD *v32;
  __int128 *v33;
  uint64_t v34;
  _QWORD *v35;
  __int128 *v36;
  uint64_t v37;
  _QWORD *v38;
  int v39;
  int v40;
  __int128 *v41;
  uint64_t v42;
  _QWORD *v43;
  char v44;
  std::string v45[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v45, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1671);
    v4 = sub_1B0305340(v45, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v44, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v45);
  }
  sub_1B030942C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_1B0300388(a1 + 56, a2 + 56);
  sub_1B0300388(a1 + 80, a2 + 80);
  sub_1B0300388(a1 + 104, a2 + 104);
  result = sub_1B0300388(a1 + 128, a2 + 128);
  v14 = *(_DWORD *)(a2 + 40);
  if (!(_BYTE)v14)
    goto LABEL_47;
  if ((v14 & 1) != 0)
  {
    v15 = (__int128 *)(*(_QWORD *)(a2 + 152) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 1u;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = (_QWORD *)(v16 & 0xFFFFFFFFFFFFFFFELL);
    if ((v16 & 1) != 0)
      v17 = (_QWORD *)*v17;
    result = sub_1B030424C((uint64_t *)(a1 + 152), v15, (uint64_t)v17);
    if ((v14 & 2) == 0)
    {
LABEL_16:
      if ((v14 & 4) == 0)
        goto LABEL_17;
      goto LABEL_29;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_16;
  }
  v18 = (__int128 *)(*(_QWORD *)(a2 + 160) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 2u;
  v19 = *(_QWORD *)(a1 + 8);
  v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
  if ((v19 & 1) != 0)
    v20 = (_QWORD *)*v20;
  result = sub_1B030424C((uint64_t *)(a1 + 160), v18, (uint64_t)v20);
  if ((v14 & 4) == 0)
  {
LABEL_17:
    if ((v14 & 8) == 0)
      goto LABEL_18;
    goto LABEL_32;
  }
LABEL_29:
  v21 = (__int128 *)(*(_QWORD *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 4u;
  v22 = *(_QWORD *)(a1 + 8);
  v23 = (_QWORD *)(v22 & 0xFFFFFFFFFFFFFFFELL);
  if ((v22 & 1) != 0)
    v23 = (_QWORD *)*v23;
  result = sub_1B030424C((uint64_t *)(a1 + 168), v21, (uint64_t)v23);
  if ((v14 & 8) == 0)
  {
LABEL_18:
    if ((v14 & 0x10) == 0)
      goto LABEL_19;
    goto LABEL_35;
  }
LABEL_32:
  v24 = (__int128 *)(*(_QWORD *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 8u;
  v25 = *(_QWORD *)(a1 + 8);
  v26 = (_QWORD *)(v25 & 0xFFFFFFFFFFFFFFFELL);
  if ((v25 & 1) != 0)
    v26 = (_QWORD *)*v26;
  result = sub_1B0304274((uint64_t *)(a1 + 176), v24, (uint64_t)v26);
  if ((v14 & 0x10) == 0)
  {
LABEL_19:
    if ((v14 & 0x20) == 0)
      goto LABEL_20;
LABEL_38:
    v30 = (__int128 *)(*(_QWORD *)(a2 + 192) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x20u;
    v31 = *(_QWORD *)(a1 + 8);
    v32 = (_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL);
    if ((v31 & 1) != 0)
      v32 = (_QWORD *)*v32;
    result = sub_1B0304274((uint64_t *)(a1 + 192), v30, (uint64_t)v32);
    if ((v14 & 0x40) == 0)
    {
LABEL_21:
      if ((v14 & 0x80) == 0)
        goto LABEL_47;
      goto LABEL_44;
    }
    goto LABEL_41;
  }
LABEL_35:
  v27 = (__int128 *)(*(_QWORD *)(a2 + 184) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x10u;
  v28 = *(_QWORD *)(a1 + 8);
  v29 = (_QWORD *)(v28 & 0xFFFFFFFFFFFFFFFELL);
  if ((v28 & 1) != 0)
    v29 = (_QWORD *)*v29;
  result = sub_1B0304274((uint64_t *)(a1 + 184), v27, (uint64_t)v29);
  if ((v14 & 0x20) != 0)
    goto LABEL_38;
LABEL_20:
  if ((v14 & 0x40) == 0)
    goto LABEL_21;
LABEL_41:
  v33 = (__int128 *)(*(_QWORD *)(a2 + 200) & 0xFFFFFFFFFFFFFFFELL);
  *(_DWORD *)(a1 + 40) |= 0x40u;
  v34 = *(_QWORD *)(a1 + 8);
  v35 = (_QWORD *)(v34 & 0xFFFFFFFFFFFFFFFELL);
  if ((v34 & 1) != 0)
    v35 = (_QWORD *)*v35;
  result = sub_1B0304274((uint64_t *)(a1 + 200), v33, (uint64_t)v35);
  if ((v14 & 0x80) != 0)
  {
LABEL_44:
    v36 = (__int128 *)(*(_QWORD *)(a2 + 208) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x80u;
    v37 = *(_QWORD *)(a1 + 8);
    v38 = (_QWORD *)(v37 & 0xFFFFFFFFFFFFFFFELL);
    if ((v37 & 1) != 0)
      v38 = (_QWORD *)*v38;
    result = sub_1B0304274((uint64_t *)(a1 + 208), v36, (uint64_t)v38);
  }
LABEL_47:
  if ((v14 & 0xFF00) == 0)
    goto LABEL_58;
  if ((v14 & 0x100) != 0)
  {
    v41 = (__int128 *)(*(_QWORD *)(a2 + 216) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 40) |= 0x100u;
    v42 = *(_QWORD *)(a1 + 8);
    v43 = (_QWORD *)(v42 & 0xFFFFFFFFFFFFFFFELL);
    if ((v42 & 1) != 0)
      v43 = (_QWORD *)*v43;
    result = sub_1B030424C((uint64_t *)(a1 + 216), v41, (uint64_t)v43);
    if ((v14 & 0x200) == 0)
    {
LABEL_50:
      if ((v14 & 0x400) == 0)
        goto LABEL_51;
      goto LABEL_97;
    }
  }
  else if ((v14 & 0x200) == 0)
  {
    goto LABEL_50;
  }
  *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
  if ((v14 & 0x400) == 0)
  {
LABEL_51:
    if ((v14 & 0x800) == 0)
      goto LABEL_52;
    goto LABEL_98;
  }
LABEL_97:
  *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
  if ((v14 & 0x800) == 0)
  {
LABEL_52:
    if ((v14 & 0x1000) == 0)
      goto LABEL_53;
    goto LABEL_99;
  }
LABEL_98:
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  if ((v14 & 0x1000) == 0)
  {
LABEL_53:
    if ((v14 & 0x2000) == 0)
      goto LABEL_54;
    goto LABEL_100;
  }
LABEL_99:
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  if ((v14 & 0x2000) == 0)
  {
LABEL_54:
    if ((v14 & 0x4000) == 0)
      goto LABEL_55;
LABEL_101:
    *(_BYTE *)(a1 + 245) = *(_BYTE *)(a2 + 245);
    if ((v14 & 0x8000) == 0)
      goto LABEL_57;
    goto LABEL_56;
  }
LABEL_100:
  *(_BYTE *)(a1 + 244) = *(_BYTE *)(a2 + 244);
  if ((v14 & 0x4000) != 0)
    goto LABEL_101;
LABEL_55:
  if ((v14 & 0x8000) != 0)
LABEL_56:
    *(_BYTE *)(a1 + 246) = *(_BYTE *)(a2 + 246);
LABEL_57:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_58:
  if ((v14 & 0xFF0000) == 0)
    goto LABEL_69;
  if ((v14 & 0x10000) != 0)
  {
    *(_BYTE *)(a1 + 247) = *(_BYTE *)(a2 + 247);
    if ((v14 & 0x20000) == 0)
    {
LABEL_61:
      if ((v14 & 0x40000) == 0)
        goto LABEL_62;
      goto LABEL_105;
    }
  }
  else if ((v14 & 0x20000) == 0)
  {
    goto LABEL_61;
  }
  *(_BYTE *)(a1 + 248) = *(_BYTE *)(a2 + 248);
  if ((v14 & 0x40000) == 0)
  {
LABEL_62:
    if ((v14 & 0x80000) == 0)
      goto LABEL_63;
    goto LABEL_106;
  }
LABEL_105:
  *(_BYTE *)(a1 + 249) = *(_BYTE *)(a2 + 249);
  if ((v14 & 0x80000) == 0)
  {
LABEL_63:
    if ((v14 & 0x100000) == 0)
      goto LABEL_64;
    goto LABEL_107;
  }
LABEL_106:
  *(_BYTE *)(a1 + 250) = *(_BYTE *)(a2 + 250);
  if ((v14 & 0x100000) == 0)
  {
LABEL_64:
    if ((v14 & 0x200000) == 0)
      goto LABEL_65;
    goto LABEL_108;
  }
LABEL_107:
  *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
  if ((v14 & 0x200000) == 0)
  {
LABEL_65:
    if ((v14 & 0x400000) == 0)
      goto LABEL_66;
LABEL_109:
    *(_QWORD *)(a1 + 264) = *(_QWORD *)(a2 + 264);
    if ((v14 & 0x800000) == 0)
      goto LABEL_68;
    goto LABEL_67;
  }
LABEL_108:
  *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
  if ((v14 & 0x400000) != 0)
    goto LABEL_109;
LABEL_66:
  if ((v14 & 0x800000) != 0)
LABEL_67:
    *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
LABEL_68:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_69:
  if (!HIBYTE(v14))
    goto LABEL_79;
  if ((v14 & 0x1000000) != 0)
  {
    *(_DWORD *)(a1 + 276) = *(_DWORD *)(a2 + 276);
    if ((v14 & 0x2000000) == 0)
    {
LABEL_72:
      if ((v14 & 0x4000000) == 0)
        goto LABEL_73;
      goto LABEL_121;
    }
  }
  else if ((v14 & 0x2000000) == 0)
  {
    goto LABEL_72;
  }
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  if ((v14 & 0x4000000) == 0)
  {
LABEL_73:
    if ((v14 & 0x8000000) == 0)
      goto LABEL_74;
    goto LABEL_122;
  }
LABEL_121:
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  if ((v14 & 0x8000000) == 0)
  {
LABEL_74:
    if ((v14 & 0x10000000) == 0)
      goto LABEL_75;
    goto LABEL_123;
  }
LABEL_122:
  *(_DWORD *)(a1 + 288) = *(_DWORD *)(a2 + 288);
  if ((v14 & 0x10000000) == 0)
  {
LABEL_75:
    if ((v14 & 0x20000000) == 0)
      goto LABEL_76;
    goto LABEL_124;
  }
LABEL_123:
  *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
  if ((v14 & 0x20000000) == 0)
  {
LABEL_76:
    if ((v14 & 0x40000000) == 0)
      goto LABEL_77;
LABEL_125:
    *(_DWORD *)(a1 + 300) = *(_DWORD *)(a2 + 300);
    if ((v14 & 0x80000000) == 0)
      goto LABEL_78;
LABEL_126:
    *(_DWORD *)(a1 + 304) = *(_DWORD *)(a2 + 304);
    goto LABEL_78;
  }
LABEL_124:
  *(_DWORD *)(a1 + 296) = *(_DWORD *)(a2 + 296);
  if ((v14 & 0x40000000) != 0)
    goto LABEL_125;
LABEL_77:
  if ((v14 & 0x80000000) != 0)
    goto LABEL_126;
LABEL_78:
  *(_DWORD *)(a1 + 40) |= v14;
LABEL_79:
  v39 = *(_DWORD *)(a2 + 44);
  if (!(_BYTE)v39)
    goto LABEL_90;
  if ((v39 & 1) != 0)
  {
    *(_BYTE *)(a1 + 308) = *(_BYTE *)(a2 + 308);
    if ((v39 & 2) == 0)
    {
LABEL_82:
      if ((v39 & 4) == 0)
        goto LABEL_83;
      goto LABEL_113;
    }
  }
  else if ((v39 & 2) == 0)
  {
    goto LABEL_82;
  }
  *(_BYTE *)(a1 + 309) = *(_BYTE *)(a2 + 309);
  if ((v39 & 4) == 0)
  {
LABEL_83:
    if ((v39 & 8) == 0)
      goto LABEL_84;
    goto LABEL_114;
  }
LABEL_113:
  *(_BYTE *)(a1 + 310) = *(_BYTE *)(a2 + 310);
  if ((v39 & 8) == 0)
  {
LABEL_84:
    if ((v39 & 0x10) == 0)
      goto LABEL_85;
    goto LABEL_115;
  }
LABEL_114:
  *(_BYTE *)(a1 + 311) = *(_BYTE *)(a2 + 311);
  if ((v39 & 0x10) == 0)
  {
LABEL_85:
    if ((v39 & 0x20) == 0)
      goto LABEL_86;
    goto LABEL_116;
  }
LABEL_115:
  *(_BYTE *)(a1 + 312) = *(_BYTE *)(a2 + 312);
  if ((v39 & 0x20) == 0)
  {
LABEL_86:
    if ((v39 & 0x40) == 0)
      goto LABEL_87;
LABEL_117:
    *(_DWORD *)(a1 + 316) = *(_DWORD *)(a2 + 316);
    if ((v39 & 0x80) == 0)
      goto LABEL_89;
    goto LABEL_88;
  }
LABEL_116:
  *(_BYTE *)(a1 + 313) = *(_BYTE *)(a2 + 313);
  if ((v39 & 0x40) != 0)
    goto LABEL_117;
LABEL_87:
  if ((v39 & 0x80) != 0)
LABEL_88:
    *(_DWORD *)(a1 + 320) = *(_DWORD *)(a2 + 320);
LABEL_89:
  *(_DWORD *)(a1 + 44) |= v39;
LABEL_90:
  if ((v39 & 0x100) != 0)
  {
    v40 = *(_DWORD *)(a2 + 324);
    *(_DWORD *)(a1 + 44) |= 0x100u;
    *(_DWORD *)(a1 + 324) = v40;
  }
  return result;
}

void sub_1B02FB858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FB870(uint64_t a1)
{
  return sub_1B030A5FC(a1 + 16);
}

_QWORD *sub_1B02FB878@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.TrainerSpec");
}

uint64_t sub_1B02FB888(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E60CBDB0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E60CBE50;
  sub_1B03058C4(a1 + 24, a2);
  *(_QWORD *)(a1 + 48) = 0;
  if (atomic_load(dword_1EEEB1AC0))
    sub_1B0310068(dword_1EEEB1AC0);
  *(_QWORD *)(a1 + 56) = &qword_1EEEB2CE0;
  *(_QWORD *)(a1 + 64) = &qword_1EEEB2CE0;
  *(_QWORD *)(a1 + 72) = &qword_1EEEB2CE0;
  *(_DWORD *)(a1 + 80) = 16843008;
  return a1;
}

void sub_1B02FB908(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B03059A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FB91C(uint64_t a1)
{
  sub_1B02FB954(a1);
  sub_1B02F4D24((uint64_t *)(a1 + 8));
  sub_1B03059A0(a1 + 24);
  return a1;
}

uint64_t *sub_1B02FB954(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  std::string v15[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 1972);
    v4 = sub_1B0305340(v15, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v15);
  }
LABEL_4:
  if (*(uint64_t **)(a1 + 56) != &qword_1EEEB2CE0)
  {
    v5 = sub_1B02F6FF0((uint64_t *)(a1 + 56));
    v6 = v5;
    if (*(char *)(v5 + 23) < 0)
      operator delete(*(void **)v5);
    MEMORY[0x1B5E07CD8](v6, 0x1012C40EC159624);
  }
  result = (uint64_t *)(a1 + 64);
  if (*(uint64_t **)(a1 + 64) != &qword_1EEEB2CE0)
  {
    v8 = sub_1B02F6FF0(result);
    v9 = v8;
    if (*(char *)(v8 + 23) < 0)
      operator delete(*(void **)v8);
    result = (uint64_t *)MEMORY[0x1B5E07CD8](v9, 0x1012C40EC159624);
  }
  v11 = *(uint64_t **)(a1 + 72);
  v10 = (uint64_t *)(a1 + 72);
  if (v11 != &qword_1EEEB2CE0)
  {
    v12 = sub_1B02F6FF0(v10);
    v13 = v12;
    if (*(char *)(v12 + 23) < 0)
      operator delete(*(void **)v12);
    return (uint64_t *)MEMORY[0x1B5E07CD8](v13, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B02FBAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FBABC(uint64_t a1)
{
  return sub_1B02FB91C(a1 - 16);
}

void sub_1B02FBAC4(uint64_t a1)
{
  sub_1B02FB91C(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B02FBAE8(uint64_t a1)
{
  sub_1B02FB91C(a1 - 16);
  JUMPOUT(0x1B5E07CD8);
}

unsigned __int8 *sub_1B02FBB10(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;

  result = sub_1B0309390((unsigned __int8 *)(a1 + 24));
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) == 0)
    {
      if ((v3 & 2) == 0)
        goto LABEL_4;
LABEL_10:
      v5 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v5 + 23) < 0)
      {
        **(_BYTE **)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        if ((v3 & 4) == 0)
          goto LABEL_17;
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_BYTE *)(v5 + 23) = 0;
        if ((v3 & 4) == 0)
          goto LABEL_17;
      }
      goto LABEL_14;
    }
    v4 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
      if ((v3 & 2) != 0)
        goto LABEL_10;
    }
LABEL_4:
    if ((v3 & 4) == 0)
      goto LABEL_17;
LABEL_14:
    v6 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 23) < 0)
    {
      **(_BYTE **)v6 = 0;
      *(_QWORD *)(v6 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v6 = 0;
      *(_BYTE *)(v6 + 23) = 0;
    }
  }
LABEL_17:
  if ((v3 & 0x78) != 0)
    *(_DWORD *)(a1 + 80) = 16843008;
  *(_DWORD *)(a1 + 48) = 0;
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) != 0)
  {
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v8 + 31) < 0)
    {
      **(_BYTE **)(v8 + 8) = 0;
      *(_QWORD *)(v8 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v8 + 8) = 0;
      *(_BYTE *)(v8 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B02FBC1C(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  std::string *v30;
  void *v31;
  BOOL v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42[2];

  *(_QWORD *)v42 = a2;
  v5 = 0;
  if ((sub_1B02F70C0((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v42 + 1);
      v9 = **(_BYTE **)v42;
      if ((char)**(_BYTE **)v42 < 0)
      {
        v10 = v9 + (*v8 << 7);
        v9 = v10 - 128;
        if (*v8 < 0)
        {
          v17 = sub_1B0311940(*(uint64_t *)v42, v10 - 128);
          *(_QWORD *)v42 = v17;
          if (!v17)
            goto LABEL_67;
          v8 = (char *)v17;
          v9 = v18;
          goto LABEL_8;
        }
        v8 = (char *)(*(_QWORD *)v42 + 2);
      }
      *(_QWORD *)v42 = v8;
LABEL_8:
      switch(v9 >> 3)
      {
        case 1u:
          if (v9 != 10)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 1u;
          v11 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v11 & 0xFFFFFFFFFFFFFFFELL);
          if ((v11 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 56);
          goto LABEL_44;
        case 2u:
          if (v9 != 18)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 2u;
          v19 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
          if ((v19 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 64);
          goto LABEL_44;
        case 3u:
          if (v9 != 24)
            goto LABEL_48;
          v5 |= 0x10u;
          v20 = v8 + 1;
          v21 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_29;
          v22 = *v20;
          v21 = v21 + (v22 << 7) - 128;
          if (v22 < 0)
          {
            v36 = sub_1B03118F8((uint64_t)v8, v21);
            *(_QWORD *)v42 = v36;
            *(_BYTE *)(a1 + 81) = v37 != 0;
            if (!v36)
              goto LABEL_67;
          }
          else
          {
            v20 = v8 + 2;
LABEL_29:
            *(_QWORD *)v42 = v20;
            *(_BYTE *)(a1 + 81) = v21 != 0;
          }
          goto LABEL_46;
        case 4u:
          if (v9 != 32)
            goto LABEL_48;
          v5 |= 0x20u;
          v23 = v8 + 1;
          v24 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_34;
          v25 = *v23;
          v24 = v24 + (v25 << 7) - 128;
          if (v25 < 0)
          {
            v38 = sub_1B03118F8((uint64_t)v8, v24);
            *(_QWORD *)v42 = v38;
            *(_BYTE *)(a1 + 82) = v39 != 0;
            if (!v38)
              goto LABEL_67;
          }
          else
          {
            v23 = v8 + 2;
LABEL_34:
            *(_QWORD *)v42 = v23;
            *(_BYTE *)(a1 + 82) = v24 != 0;
          }
          goto LABEL_46;
        case 5u:
          if (v9 != 40)
            goto LABEL_48;
          v5 |= 0x40u;
          v26 = v8 + 1;
          v27 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_39;
          v28 = *v26;
          v27 = v27 + (v28 << 7) - 128;
          if (v28 < 0)
          {
            v40 = sub_1B03118F8((uint64_t)v8, v27);
            *(_QWORD *)v42 = v40;
            *(_BYTE *)(a1 + 83) = v41 != 0;
            if (!v40)
              goto LABEL_67;
          }
          else
          {
            v26 = v8 + 2;
LABEL_39:
            *(_QWORD *)v42 = v26;
            *(_BYTE *)(a1 + 83) = v27 != 0;
          }
          goto LABEL_46;
        case 6u:
          if (v9 != 50)
            goto LABEL_48;
          *(_DWORD *)(a1 + 48) |= 4u;
          v29 = *(_QWORD *)(a1 + 8);
          v12 = (_QWORD *)(v29 & 0xFFFFFFFFFFFFFFFELL);
          if ((v29 & 1) != 0)
            v12 = (_QWORD *)*v12;
          v13 = (uint64_t *)(a1 + 72);
LABEL_44:
          v30 = (std::string *)sub_1B0304284(v13, (uint64_t)v12);
          v31 = (void *)sub_1B03119F4(v30, *(char **)v42, (uint64_t)a3);
          goto LABEL_45;
        default:
          if (v9 >> 3 == 200 && v9 == 64)
          {
            v5 |= 8u;
            v14 = v8 + 1;
            v15 = *v8;
            if ((*v8 & 0x80000000) == 0)
              goto LABEL_18;
            v16 = *v14;
            v15 = v15 + (v16 << 7) - 128;
            if ((v16 & 0x80000000) == 0)
            {
              v14 = v8 + 2;
LABEL_18:
              *(_QWORD *)v42 = v14;
              *(_BYTE *)(a1 + 80) = v15 != 0;
              goto LABEL_46;
            }
            v34 = sub_1B03118F8((uint64_t)v8, v15);
            *(_QWORD *)v42 = v34;
            *(_BYTE *)(a1 + 80) = v35 != 0;
            if (!v34)
              goto LABEL_67;
          }
          else
          {
LABEL_48:
            if (v9)
              v32 = (v9 & 7) == 4;
            else
              v32 = 1;
            if (v32)
            {
              a3[10].i32[0] = v9 - 1;
              goto LABEL_2;
            }
            if (v9 < 0x648)
            {
              if ((*v7 & 1) != 0)
              {
                v33 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
              }
              else
              {
                v33 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
                v8 = *(char **)v42;
              }
              v31 = sub_1B0311E20(v9, v33, v8, a3);
            }
            else
            {
              v31 = sub_1B030A930((uint64_t *)(a1 + 24), v9, (unsigned __int8 *)v8, (uint64_t)&unk_1EEEB2B38, (unint64_t *)(a1 + 8), a3);
            }
LABEL_45:
            *(_QWORD *)v42 = v31;
            if (!v31)
            {
LABEL_67:
              *(_QWORD *)v42 = 0;
              goto LABEL_2;
            }
          }
LABEL_46:
          if ((sub_1B02F70C0((uint64_t)a3, (char **)v42, a3[11].i32[1]) & 1) != 0)
            goto LABEL_2;
          break;
      }
    }
  }
LABEL_2:
  *(_DWORD *)(a1 + 48) |= v5;
  return *(_QWORD *)v42;
}

char *sub_1B02FC018(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  char v7;
  char v8;
  char v9;
  char v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 48);
  if ((v6 & 1) != 0)
  {
    v4 = sub_1B02F5444(a3, 1, *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 0x10) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v4 = sub_1B02F5444(a3, 2, *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 0x10) == 0)
  {
LABEL_4:
    if ((v6 & 0x20) == 0)
      goto LABEL_5;
    goto LABEL_14;
  }
LABEL_11:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_1B0304904((uint64_t)a3, v4);
  v7 = *(_BYTE *)(a1 + 81);
  *v4 = 24;
  v4[1] = v7;
  v4 += 2;
  if ((v6 & 0x20) == 0)
  {
LABEL_5:
    if ((v6 & 0x40) == 0)
      goto LABEL_6;
    goto LABEL_17;
  }
LABEL_14:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_1B0304904((uint64_t)a3, v4);
  v8 = *(_BYTE *)(a1 + 82);
  *v4 = 32;
  v4[1] = v8;
  v4 += 2;
  if ((v6 & 0x40) == 0)
  {
LABEL_6:
    if ((v6 & 4) == 0)
      goto LABEL_7;
    goto LABEL_20;
  }
LABEL_17:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_1B0304904((uint64_t)a3, v4);
  v9 = *(_BYTE *)(a1 + 83);
  *v4 = 40;
  v4[1] = v9;
  v4 += 2;
  if ((v6 & 4) == 0)
  {
LABEL_7:
    if ((v6 & 8) == 0)
      goto LABEL_24;
    goto LABEL_21;
  }
LABEL_20:
  v4 = sub_1B02F5444(a3, 6, *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL, v4);
  if ((v6 & 8) == 0)
    goto LABEL_24;
LABEL_21:
  if (*a3 <= (unint64_t)v4)
    v4 = sub_1B0304904((uint64_t)a3, v4);
  v10 = *(_BYTE *)(a1 + 80);
  *(_WORD *)v4 = 3264;
  v4[2] = v10;
  v4 += 3;
LABEL_24:
  v11 = sub_1B030B564(a1 + 24, 201, 0x20000000, v4, (uint64_t *)a3);
  v12 = v11;
  v13 = *(_QWORD *)(a1 + 8);
  if ((v13 & 1) == 0)
    return v12;
  v15 = v13 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v15 + 31) < 0)
  {
    v16 = *(void **)(v15 + 8);
    v17 = *(_QWORD *)(v15 + 16);
  }
  else
  {
    v16 = (void *)(v15 + 8);
    LODWORD(v17) = *(unsigned __int8 *)(v15 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v11) >= (int)v17)
  {
    v18 = (int)v17;
    memcpy(v11, v16, (int)v17);
    v12 += v18;
    return v12;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v16, v17, (unint64_t)v11);
}

uint64_t sub_1B02FC218(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;

  result = sub_1B030E0F8(a1 + 24);
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0x7F) == 0)
    goto LABEL_17;
  if ((v3 & 1) == 0)
  {
    if ((v3 & 2) == 0)
      goto LABEL_4;
LABEL_22:
    v12 = *(_QWORD *)(a1 + 64) & 0xFFFFFFFFFFFFFFFELL;
    v13 = *(unsigned __int8 *)(v12 + 23);
    v14 = *(_QWORD *)(v12 + 8);
    if ((v13 & 0x80u) == 0)
      v14 = v13;
    result += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v3 & 4) == 0)
      goto LABEL_8;
    goto LABEL_5;
  }
  v9 = *(_QWORD *)(a1 + 56) & 0xFFFFFFFFFFFFFFFELL;
  v10 = *(unsigned __int8 *)(v9 + 23);
  v11 = *(_QWORD *)(v9 + 8);
  if ((v10 & 0x80u) == 0)
    v11 = v10;
  result += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v3 & 2) != 0)
    goto LABEL_22;
LABEL_4:
  if ((v3 & 4) != 0)
  {
LABEL_5:
    v4 = *(_QWORD *)(a1 + 72) & 0xFFFFFFFFFFFFFFFELL;
    v5 = *(unsigned __int8 *)(v4 + 23);
    v6 = *(_QWORD *)(v4 + 8);
    if ((v5 & 0x80u) == 0)
      v6 = v5;
    result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_8:
  v7 = result + 3;
  if ((v3 & 8) == 0)
    v7 = result;
  if ((v3 & 0x10) != 0)
    v7 += 2;
  if ((v3 & 0x20) != 0)
    v7 += 2;
  if ((v3 & 0x40) != 0)
    result = v7 + 2;
  else
    result = v7;
LABEL_17:
  v8 = *(_QWORD *)(a1 + 8);
  if ((v8 & 1) != 0)
  {
    v15 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v15 + 31) < 0)
      v16 = *(_QWORD *)(v15 + 16);
    else
      v16 = *(unsigned __int8 *)(v15 + 31);
    result += v16;
  }
  *(_DWORD *)(a1 + 52) = result;
  return result;
}

void sub_1B02FC37C(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CBDB0)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  sub_1B02FC3A4(a1, (uint64_t)a2);
}

void sub_1B02FC3A4(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  __int128 *v20;
  uint64_t v21;
  _QWORD *v22;
  char v23;
  std::string v24[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v24, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2246);
    v4 = sub_1B0305340(v24, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v23, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v24);
  }
  sub_1B030942C(a1 + 24, a2 + 24);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0x7F) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 48) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_1B030424C((uint64_t *)(a1 + 56), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
          goto LABEL_17;
        goto LABEL_30;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    v17 = (__int128 *)(*(_QWORD *)(a2 + 64) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 2u;
    v18 = *(_QWORD *)(a1 + 8);
    v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
    if ((v18 & 1) != 0)
      v19 = (_QWORD *)*v19;
    sub_1B030424C((uint64_t *)(a1 + 64), v17, (uint64_t)v19);
    if ((v13 & 4) == 0)
    {
LABEL_17:
      if ((v13 & 8) == 0)
        goto LABEL_18;
      goto LABEL_33;
    }
LABEL_30:
    v20 = (__int128 *)(*(_QWORD *)(a2 + 72) & 0xFFFFFFFFFFFFFFFELL);
    *(_DWORD *)(a1 + 48) |= 4u;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = (_QWORD *)(v21 & 0xFFFFFFFFFFFFFFFELL);
    if ((v21 & 1) != 0)
      v22 = (_QWORD *)*v22;
    sub_1B030424C((uint64_t *)(a1 + 72), v20, (uint64_t)v22);
    if ((v13 & 8) == 0)
    {
LABEL_18:
      if ((v13 & 0x10) == 0)
        goto LABEL_19;
      goto LABEL_34;
    }
LABEL_33:
    *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
    if ((v13 & 0x10) == 0)
    {
LABEL_19:
      if ((v13 & 0x20) == 0)
        goto LABEL_20;
      goto LABEL_35;
    }
LABEL_34:
    *(_BYTE *)(a1 + 81) = *(_BYTE *)(a2 + 81);
    if ((v13 & 0x20) == 0)
    {
LABEL_20:
      if ((v13 & 0x40) == 0)
      {
LABEL_22:
        *(_DWORD *)(a1 + 48) |= v13;
        return;
      }
LABEL_21:
      *(_BYTE *)(a1 + 83) = *(_BYTE *)(a2 + 83);
      goto LABEL_22;
    }
LABEL_35:
    *(_BYTE *)(a1 + 82) = *(_BYTE *)(a2 + 82);
    if ((v13 & 0x40) == 0)
      goto LABEL_22;
    goto LABEL_21;
  }
}

void sub_1B02FC56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FC584(uint64_t a1)
{
  return sub_1B030A5FC(a1 + 24);
}

_QWORD *sub_1B02FC58C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.NormalizerSpec");
}

uint64_t sub_1B02FC59C(uint64_t a1)
{
  sub_1B02FC5CC(a1);
  sub_1B02F4D24((uint64_t *)(a1 + 8));
  return a1;
}

uint64_t *sub_1B02FC5CC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v2 = *(_QWORD *)(a1 + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2362);
    v4 = sub_1B0305340(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
  }
LABEL_4:
  result = (uint64_t *)(a1 + 24);
  if (*(uint64_t **)(a1 + 24) != &qword_1EEEB2CE0)
  {
    v6 = sub_1B02F6FF0(result);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    result = (uint64_t *)MEMORY[0x1B5E07CD8](v7, 0x1012C40EC159624);
  }
  v9 = *(uint64_t **)(a1 + 32);
  v8 = (uint64_t *)(a1 + 32);
  if (v9 != &qword_1EEEB2CE0)
  {
    v10 = sub_1B02F6FF0(v8);
    v11 = v10;
    if (*(char *)(v10 + 23) < 0)
      operator delete(*(void **)v10);
    return (uint64_t *)MEMORY[0x1B5E07CD8](v11, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B02FC6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02FC6F4(uint64_t a1)
{
  sub_1B02FC59C(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02FC718(uint64_t result)
{
  int v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v1 = *(_DWORD *)(result + 16);
  if ((v1 & 3) != 0)
  {
    if ((v1 & 1) != 0)
    {
      v2 = *(_QWORD *)(result + 24) & 0xFFFFFFFFFFFFFFFELL;
      if (*(char *)(v2 + 23) < 0)
      {
        **(_BYTE **)v2 = 0;
        *(_QWORD *)(v2 + 8) = 0;
        if ((v1 & 2) == 0)
          goto LABEL_11;
        goto LABEL_6;
      }
      *(_BYTE *)v2 = 0;
      *(_BYTE *)(v2 + 23) = 0;
    }
    if ((v1 & 2) == 0)
      goto LABEL_11;
LABEL_6:
    v3 = *(_QWORD *)(result + 32) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v3 + 23) < 0)
    {
      **(_BYTE **)v3 = 0;
      *(_QWORD *)(v3 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v3 = 0;
      *(_BYTE *)(v3 + 23) = 0;
    }
  }
LABEL_11:
  *(_DWORD *)(result + 16) = 0;
  v4 = *(_QWORD *)(result + 8);
  if ((v4 & 1) != 0)
  {
    v5 = v4 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v5 + 31) < 0)
    {
      **(_BYTE **)(v5 + 8) = 0;
      *(_QWORD *)(v5 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v5 + 8) = 0;
      *(_BYTE *)(v5 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B02FC7B4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v11;
  std::string *v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  std::string *v18;
  uint64_t v19;
  unsigned int v20;
  int v21[2];

  *(_QWORD *)v21 = a2;
  if ((sub_1B02F70C0((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) == 0)
  {
    v6 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v7 = (char *)(*(_QWORD *)v21 + 1);
      v8 = **(_BYTE **)v21;
      if (((char)**(_BYTE **)v21 & 0x80000000) == 0)
        goto LABEL_7;
      v9 = v8 + (*v7 << 7);
      v8 = v9 - 128;
      if ((*v7 & 0x80000000) == 0)
        break;
      v19 = sub_1B0311940(*(uint64_t *)v21, v9 - 128);
      *(_QWORD *)v21 = v19;
      if (!v19)
      {
LABEL_35:
        *(_QWORD *)v21 = 0;
        return *(_QWORD *)v21;
      }
      v7 = (char *)v19;
      v8 = v20;
LABEL_8:
      if (v8 >> 3 == 2)
      {
        if (v8 == 18)
        {
          *(_DWORD *)(a1 + 16) |= 2u;
          v14 = *(_QWORD *)(a1 + 8);
          v15 = (_QWORD *)(v14 & 0xFFFFFFFFFFFFFFFELL);
          if ((v14 & 1) != 0)
            v15 = (_QWORD *)*v15;
          v16 = (uint64_t *)(a1 + 32);
          goto LABEL_27;
        }
      }
      else if (v8 >> 3 == 1 && v8 == 10)
      {
        *(_DWORD *)(a1 + 16) |= 1u;
        v17 = *(_QWORD *)(a1 + 8);
        v15 = (_QWORD *)(v17 & 0xFFFFFFFFFFFFFFFELL);
        if ((v17 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v16 = (uint64_t *)(a1 + 24);
LABEL_27:
        v18 = (std::string *)sub_1B0304284(v16, (uint64_t)v15);
        v13 = (void *)sub_1B03119F4(v18, *(char **)v21, (uint64_t)a3);
        goto LABEL_28;
      }
      if (v8)
        v11 = (v8 & 7) == 4;
      else
        v11 = 1;
      if (v11)
      {
        a3[10].i32[0] = v8 - 1;
        return *(_QWORD *)v21;
      }
      if ((*v6 & 1) != 0)
      {
        v12 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
      }
      else
      {
        v12 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
        v7 = *(char **)v21;
      }
      v13 = sub_1B0311E20(v8, v12, v7, a3);
LABEL_28:
      *(_QWORD *)v21 = v13;
      if (!v13)
        goto LABEL_35;
      if ((sub_1B02F70C0((uint64_t)a3, (char **)v21, a3[11].i32[1]) & 1) != 0)
        return *(_QWORD *)v21;
    }
    v7 = (char *)(*(_QWORD *)v21 + 2);
LABEL_7:
    *(_QWORD *)v21 = v7;
    goto LABEL_8;
  }
  return *(_QWORD *)v21;
}

char *sub_1B02FC95C(uint64_t a1, char *__dst, unint64_t *a3)
{
  char *v4;
  int v6;
  uint64_t v7;
  unint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;

  v4 = __dst;
  v6 = *(_DWORD *)(a1 + 16);
  if ((v6 & 1) != 0)
    v4 = sub_1B02F5444(a3, 1, *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL, __dst);
  if ((v6 & 2) != 0)
    v4 = sub_1B02F5444(a3, 2, *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL, v4);
  v7 = *(_QWORD *)(a1 + 8);
  if ((v7 & 1) == 0)
    return v4;
  v9 = v7 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v9 + 31) < 0)
  {
    v10 = *(void **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = (void *)(v9 + 8);
    LODWORD(v11) = *(unsigned __int8 *)(v9 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v4) >= (int)v11)
  {
    v12 = (int)v11;
    memcpy(v4, v10, (int)v11);
    v4 += v12;
    return v4;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v10, v11, (unint64_t)v4);
}

uint64_t sub_1B02FCA34(uint64_t a1)
{
  int v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;

  v1 = *(_DWORD *)(a1 + 16);
  if ((v1 & 3) == 0)
  {
    v2 = 0;
    goto LABEL_12;
  }
  if ((v1 & 1) == 0)
  {
    v2 = 0;
    if ((v1 & 2) == 0)
      goto LABEL_12;
    goto LABEL_9;
  }
  v3 = *(_QWORD *)(a1 + 24) & 0xFFFFFFFFFFFFFFFELL;
  v4 = *(unsigned __int8 *)(v3 + 23);
  v5 = *(_QWORD *)(v3 + 8);
  if ((v4 & 0x80u) == 0)
    v5 = v4;
  v2 = v5 + ((9 * (__clz(v5 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v1 & 2) != 0)
  {
LABEL_9:
    v6 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
    v7 = *(unsigned __int8 *)(v6 + 23);
    v8 = *(_QWORD *)(v6 + 8);
    if ((v7 & 0x80u) == 0)
      v8 = v7;
    v2 += v8 + ((9 * (__clz(v8 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_12:
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v11 + 31) < 0)
      v12 = *(_QWORD *)(v11 + 16);
    else
      v12 = *(unsigned __int8 *)(v11 + 31);
    v2 += v12;
  }
  *(_DWORD *)(a1 + 20) = v2;
  return v2;
}

unint64_t sub_1B02FCB0C(unint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CBF10)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  return sub_1B02FCB34(a1, (uint64_t)a2);
}

unint64_t sub_1B02FCB34(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  __int128 *v17;
  uint64_t v18;
  _QWORD *v19;
  char v20;
  std::string v21[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2516);
    v4 = sub_1B0305340(v21, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v20, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_1B0305478((uint64_t)v21);
  }
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(v3 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(v3 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    result = (unint64_t)std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 16);
  if ((v13 & 3) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 24) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 1u;
      v15 = *(_QWORD *)(v3 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      result = sub_1B030424C((uint64_t *)(v3 + 24), v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      v17 = (__int128 *)(*(_QWORD *)(a2 + 32) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(v3 + 16) |= 2u;
      v18 = *(_QWORD *)(v3 + 8);
      v19 = (_QWORD *)(v18 & 0xFFFFFFFFFFFFFFFELL);
      if ((v18 & 1) != 0)
        v19 = (_QWORD *)*v19;
      return sub_1B030424C((uint64_t *)(v3 + 32), v17, (uint64_t)v19);
    }
  }
  return result;
}

void sub_1B02FCC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FCC7C()
{
  return 1;
}

_QWORD *sub_1B02FCC84@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.SelfTestData.Sample");
}

uint64_t sub_1B02FCC94(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E60CBC40;
  *(_QWORD *)(a1 + 8) = a2;
  sub_1B03058C4(a1 + 16, a2);
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (atomic_load(dword_1EEEB1AF0))
    sub_1B0310068(dword_1EEEB1AF0);
  return a1;
}

void sub_1B02FCD08(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_1B030058C(v2);
  sub_1B03059A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FCD24(uint64_t a1)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = (uint64_t *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 8);
  v4 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) != 0)
  {
    if (!*v4)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v4)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2589);
    v5 = sub_1B0305340(v8, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
LABEL_4:
  sub_1B02F4D24(v3);
  sub_1B030058C((uint64_t *)(a1 + 40));
  sub_1B03059A0(a1 + 16);
  return a1;
}

void sub_1B02FCDC0(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  sub_1B0303828(a1);
}

void sub_1B02FCDE4(uint64_t a1)
{
  sub_1B02FCD24(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02FCE08(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  unint64_t v4;

  sub_1B0309390((unsigned __int8 *)(a1 + 16));
  result = sub_1B0300230(a1 + 40);
  v3 = *(_QWORD *)(a1 + 8);
  if ((v3 & 1) != 0)
  {
    v4 = v3 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 31) < 0)
    {
      **(_BYTE **)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v4 + 8) = 0;
      *(_BYTE *)(v4 + 31) = 0;
    }
  }
  return result;
}

char *sub_1B02FCE60(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v5;
  char *v6;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  unsigned __int8 *v10;
  char *v11;
  unsigned __int8 *v12;
  int *v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  char *v20;
  unsigned int v21;
  char *v23;

  v23 = a2;
  if ((sub_1B02F70C0((uint64_t)a3, &v23, a3[11].i32[1]) & 1) == 0)
  {
    v5 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v6 = v23 + 1;
      v7 = *v23;
      if ((*v23 & 0x80000000) == 0)
        goto LABEL_6;
      v8 = v7 + (*v6 << 7);
      v7 = v8 - 128;
      if ((*v6 & 0x80000000) == 0)
        break;
      v20 = (char *)sub_1B0311940((uint64_t)v23, v8 - 128);
      v23 = v20;
      if (!v20)
        return 0;
      v6 = v20;
      v7 = v21;
LABEL_7:
      if (v7 == 10)
      {
        v11 = v6 - 1;
        while (1)
        {
          v12 = (unsigned __int8 *)(v11 + 1);
          v23 = v11 + 1;
          v13 = *(int **)(a1 + 56);
          if (!v13)
            break;
          v14 = *(int *)(a1 + 48);
          v15 = *v13;
          if ((int)v14 >= *v13)
          {
            if (v15 == *(_DWORD *)(a1 + 52))
            {
LABEL_20:
              sub_1B0316A4C(a1 + 40, v15 + 1);
              v13 = *(int **)(a1 + 56);
              v15 = *v13;
            }
            *v13 = v15 + 1;
            v16 = sub_1B02FF3FC(*(_QWORD *)(a1 + 40));
            v17 = *(_QWORD *)(a1 + 56);
            v18 = *(int *)(a1 + 48);
            *(_DWORD *)(a1 + 48) = v18 + 1;
            *(_QWORD *)(v17 + 8 * v18 + 8) = v16;
            v12 = (unsigned __int8 *)v23;
            goto LABEL_22;
          }
          *(_DWORD *)(a1 + 48) = v14 + 1;
          v16 = *(_QWORD **)&v13[2 * v14 + 2];
LABEL_22:
          v11 = (char *)sub_1B02FD074(a3, (uint64_t)v16, v12);
          v23 = v11;
          if (!v11)
            return 0;
          if (*(_QWORD *)a3 <= (unint64_t)v11 || *v11 != 10)
            goto LABEL_30;
        }
        v15 = *(_DWORD *)(a1 + 52);
        goto LABEL_20;
      }
      if (v7)
        v9 = (v7 & 7) == 4;
      else
        v9 = 1;
      if (v9)
      {
        a3[10].i32[0] = v7 - 1;
        return v23;
      }
      if (v7 < 0x640)
      {
        if ((*v5 & 1) != 0)
        {
          v19 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v19 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
          v6 = v23;
        }
        v10 = sub_1B0311E20(v7, v19, v6, a3);
      }
      else
      {
        v10 = sub_1B030A930((uint64_t *)(a1 + 16), v7, (unsigned __int8 *)v6, (uint64_t)&unk_1EEEB2AF0, (unint64_t *)(a1 + 8), a3);
      }
      v23 = (char *)v10;
      if (!v10)
        return 0;
LABEL_30:
      if (sub_1B02F70C0((uint64_t)a3, &v23, a3[11].i32[1]))
        return v23;
    }
    v6 = v23 + 2;
LABEL_6:
    v23 = v6;
    goto LABEL_7;
  }
  return v23;
}

uint64_t sub_1B02FD074(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_1B02F74E0((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_1B02FC7B4(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B02FD138(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;

  v6 = *(_DWORD *)(a1 + 48);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = sub_1B0304904((uint64_t)a3, a2);
      v8 = sub_1B02FFFB8(a1 + 40, i);
      *a2 = 10;
      v9 = *(_DWORD *)(v8 + 20);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = sub_1B02FC95C(v8, v10, a3);
    }
  }
  v14 = sub_1B030B564(a1 + 16, 200, 0x20000000, a2, (uint64_t *)a3);
  v15 = v14;
  v16 = *(_QWORD *)(a1 + 8);
  if ((v16 & 1) == 0)
    return v15;
  v18 = v16 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v18 + 31) < 0)
  {
    v19 = *(void **)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16);
  }
  else
  {
    v19 = (void *)(v18 + 8);
    LODWORD(v20) = *(unsigned __int8 *)(v18 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v14) >= (int)v20)
  {
    v21 = (int)v20;
    memcpy(v14, v19, (int)v20);
    v15 += v21;
    return v15;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v19, v20, (unint64_t)v14);
}

uint64_t sub_1B02FD2BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;

  v2 = sub_1B030E0F8(a1 + 16);
  v3 = *(int *)(a1 + 48);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 56);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_1B02FCA34(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_QWORD *)(a1 + 8);
  if ((v10 & 1) != 0)
  {
    v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v12 + 31) < 0)
      v13 = *(_QWORD *)(v12 + 16);
    else
      v13 = *(unsigned __int8 *)(v12 + 31);
    v4 += v13;
  }
  *(_DWORD *)(a1 + 64) = v4;
  return v4;
}

unint64_t sub_1B02FD368(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CBC40)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  return sub_1B02FD390(a1, (uint64_t)a2);
}

unint64_t sub_1B02FD390(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  char v14;
  std::string v15[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2724);
    v4 = sub_1B0305340(v15, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v14, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v15);
  }
  sub_1B030942C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  return sub_1B0300630(a1 + 40, a2 + 40);
}

void sub_1B02FD464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FD47C(uint64_t a1)
{
  return sub_1B030A5FC(a1 + 16);
}

_QWORD *sub_1B02FD484@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.SelfTestData");
}

_QWORD *sub_1B02FD494(_QWORD *a1, uint64_t a2)
{
  *a1 = &off_1E60CC338;
  a1[1] = a2;
  sub_1B03058C4((uint64_t)(a1 + 2), a2);
  a1[5] = 0;
  if (atomic_load(dword_1EEEB1A70))
    sub_1B0310068(dword_1EEEB1A70);
  a1[6] = &qword_1EEEB2CE0;
  a1[7] = 0x100000000;
  return a1;
}

void sub_1B02FD500(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B03059A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FD514(uint64_t a1)
{
  sub_1B02FD54C(a1);
  sub_1B02F4D24((uint64_t *)(a1 + 8));
  sub_1B03059A0(a1 + 16);
  return a1;
}

uint64_t sub_1B02FD54C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  std::string v10[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 2813);
    v4 = sub_1B0305340(v10, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_1B0305478((uint64_t)v10);
  }
LABEL_4:
  v6 = *(uint64_t **)(v1 + 48);
  v5 = (uint64_t *)(v1 + 48);
  if (v6 != &qword_1EEEB2CE0)
  {
    v7 = sub_1B02F6FF0(v5);
    v8 = v7;
    if (*(char *)(v7 + 23) < 0)
      operator delete(*(void **)v7);
    return MEMORY[0x1B5E07CD8](v8, 0x1012C40EC159624);
  }
  return result;
}

void sub_1B02FD610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02FD62C(uint64_t a1)
{
  sub_1B02FD514(a1);
  JUMPOUT(0x1B5E07CD8);
}

unsigned __int8 *sub_1B02FD650(uint64_t a1)
{
  unsigned __int8 *result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  result = sub_1B0309390((unsigned __int8 *)(a1 + 16));
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = 0;
      *(_QWORD *)(v4 + 8) = 0;
    }
    else
    {
      *(_BYTE *)v4 = 0;
      *(_BYTE *)(v4 + 23) = 0;
    }
  }
  if ((v3 & 6) != 0)
    *(_QWORD *)(a1 + 56) = 0x100000000;
  *(_DWORD *)(a1 + 40) = 0;
  v5 = *(_QWORD *)(a1 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v6 + 31) < 0)
    {
      **(_BYTE **)(v6 + 8) = 0;
      *(_QWORD *)(v6 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v6 + 8) = 0;
      *(_BYTE *)(v6 + 31) = 0;
    }
  }
  return result;
}

uint64_t sub_1B02FD6E4(uint64_t a1, uint64_t a2, int32x2_t *a3)
{
  int v5;
  _QWORD *v7;
  char *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  BOOL v13;
  void *v14;
  char *v15;
  unint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  std::string *v21;
  uint64_t v22;
  unsigned int v23;
  std::string *v24;
  unint64_t v25;
  std::string *v26;
  int v27[2];

  *(_QWORD *)v27 = a2;
  v5 = 0;
  if ((sub_1B02F70C0((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) == 0)
  {
    v7 = (_QWORD *)(a1 + 8);
    while (1)
    {
      v8 = (char *)(*(_QWORD *)v27 + 1);
      v9 = **(_BYTE **)v27;
      if (((char)**(_BYTE **)v27 & 0x80000000) == 0)
        goto LABEL_7;
      v10 = v9 + (*v8 << 7);
      v9 = v10 - 128;
      if ((*v8 & 0x80000000) == 0)
        break;
      v22 = sub_1B0311940(*(uint64_t *)v27, v10 - 128);
      *(_QWORD *)v27 = v22;
      if (!v22)
        goto LABEL_48;
      v8 = (char *)v22;
      v9 = v23;
LABEL_8:
      v11 = v9 >> 3;
      if (v9 >> 3 == 3)
      {
        if (v9 == 24)
        {
          v15 = v8 + 1;
          v16 = *v8;
          if ((*v8 & 0x80000000) == 0)
            goto LABEL_24;
          v17 = *v15;
          v18 = v16 + (v17 << 7);
          v16 = (v18 - 128);
          if (v17 < 0)
          {
            *(_QWORD *)v27 = sub_1B03118F8((uint64_t)v8, (v18 - 128));
            if (!*(_QWORD *)v27)
            {
LABEL_48:
              *(_QWORD *)v27 = 0;
              goto LABEL_2;
            }
            v16 = v25;
          }
          else
          {
            v15 = v8 + 2;
LABEL_24:
            *(_QWORD *)v27 = v15;
          }
          if ((v16 - 1) > 5)
          {
            if ((*v7 & 1) != 0)
              v26 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
            else
              v26 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
            sub_1B03117F8(3, v16, v26);
          }
          else
          {
            *(_DWORD *)(a1 + 40) |= 4u;
            *(_DWORD *)(a1 + 60) = v16;
          }
          goto LABEL_38;
        }
      }
      else if (v11 == 2)
      {
        if (v9 == 21)
        {
          v5 |= 2u;
          *(_DWORD *)(a1 + 56) = *(_DWORD *)v8;
          *(_QWORD *)v27 = v8 + 4;
          goto LABEL_38;
        }
      }
      else if (v11 == 1 && v9 == 10)
      {
        *(_DWORD *)(a1 + 40) |= 1u;
        v19 = *(_QWORD *)(a1 + 8);
        v20 = (_QWORD *)(v19 & 0xFFFFFFFFFFFFFFFELL);
        if ((v19 & 1) != 0)
          v20 = (_QWORD *)*v20;
        v21 = (std::string *)sub_1B0304284((uint64_t *)(a1 + 48), (uint64_t)v20);
        v14 = (void *)sub_1B03119F4(v21, *(char **)v27, (uint64_t)a3);
        goto LABEL_37;
      }
      if (v9)
        v13 = (v9 & 7) == 4;
      else
        v13 = 1;
      if (v13)
      {
        a3[10].i32[0] = v9 - 1;
        goto LABEL_2;
      }
      if (v9 < 0x640)
      {
        if ((*v7 & 1) != 0)
        {
          v24 = (std::string *)((*v7 & 0xFFFFFFFFFFFFFFFELL) + 8);
        }
        else
        {
          v24 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
          v8 = *(char **)v27;
        }
        v14 = sub_1B0311E20(v9, v24, v8, a3);
      }
      else
      {
        v14 = sub_1B030A930((uint64_t *)(a1 + 16), v9, (unsigned __int8 *)v8, (uint64_t)qword_1EEEB2C10, (unint64_t *)(a1 + 8), a3);
      }
LABEL_37:
      *(_QWORD *)v27 = v14;
      if (!v14)
        goto LABEL_48;
LABEL_38:
      if ((sub_1B02F70C0((uint64_t)a3, (char **)v27, a3[11].i32[1]) & 1) != 0)
        goto LABEL_2;
    }
    v8 = (char *)(*(_QWORD *)v27 + 2);
LABEL_7:
    *(_QWORD *)v27 = v8;
    goto LABEL_8;
  }
LABEL_2:
  *(_DWORD *)(a1 + 40) |= v5;
  return *(_QWORD *)v27;
}

char *sub_1B02FD968(uint64_t a1, char *a2, unint64_t *a3)
{
  char *v4;
  int v6;
  int v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a2;
  v6 = *(_DWORD *)(a1 + 40);
  if ((v6 & 1) != 0)
  {
    v4 = sub_1B02F5444(a3, 1, *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL, a2);
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_18;
      goto LABEL_9;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  if (*a3 <= (unint64_t)v4)
    v4 = sub_1B0304904((uint64_t)a3, v4);
  v7 = *(_DWORD *)(a1 + 56);
  *v4 = 21;
  *(_DWORD *)(v4 + 1) = v7;
  v4 += 5;
  if ((v6 & 4) != 0)
  {
LABEL_9:
    if (*a3 <= (unint64_t)v4)
      v4 = sub_1B0304904((uint64_t)a3, v4);
    v8 = *(int *)(a1 + 60);
    *v4 = 24;
    if (v8 > 0x7F)
    {
      v4[1] = v8 | 0x80;
      v9 = v8 >> 7;
      if (v8 >> 14)
      {
        v4 += 3;
        do
        {
          *(v4 - 1) = v9 | 0x80;
          v10 = v9 >> 7;
          ++v4;
          v11 = v9 >> 14;
          v9 >>= 7;
        }
        while (v11);
        *(v4 - 1) = v10;
      }
      else
      {
        v4[2] = v9;
        v4 += 3;
      }
    }
    else
    {
      v4[1] = v8;
      v4 += 2;
    }
  }
LABEL_18:
  v12 = sub_1B030B564(a1 + 16, 200, 0x20000000, v4, (uint64_t *)a3);
  v13 = v12;
  v14 = *(_QWORD *)(a1 + 8);
  if ((v14 & 1) == 0)
    return v13;
  v16 = v14 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v16 + 31) < 0)
  {
    v17 = *(void **)(v16 + 8);
    v18 = *(_QWORD *)(v16 + 16);
  }
  else
  {
    v17 = (void *)(v16 + 8);
    LODWORD(v18) = *(unsigned __int8 *)(v16 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v12) >= (int)v18)
  {
    v19 = (int)v18;
    memcpy(v12, v17, (int)v18);
    v13 += v19;
    return v13;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v17, v18, (unint64_t)v12);
}

uint64_t sub_1B02FDB00(uint64_t a1)
{
  uint64_t result;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;

  result = sub_1B030E0F8(a1 + 16);
  v3 = *(_DWORD *)(a1 + 40);
  if ((v3 & 7) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 48) & 0xFFFFFFFFFFFFFFFELL;
      v5 = *(unsigned __int8 *)(v4 + 23);
      v6 = *(_QWORD *)(v4 + 8);
      if ((v5 & 0x80u) == 0)
        v6 = v5;
      result += v6 + ((9 * (__clz(v6 | 1) ^ 0x1F) + 73) >> 6) + 1;
    }
    if ((v3 & 2) != 0)
      result += 5;
    if ((v3 & 4) != 0)
    {
      v7 = *(_DWORD *)(a1 + 60);
      if (v7 < 0)
        v8 = 11;
      else
        v8 = ((9 * (__clz(v7 | 1) ^ 0x1F) + 73) >> 6) + 1;
      result += v8;
    }
  }
  v9 = *(_QWORD *)(a1 + 8);
  if ((v9 & 1) != 0)
  {
    v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v10 + 31) < 0)
      v11 = *(_QWORD *)(v10 + 16);
    else
      v11 = *(unsigned __int8 *)(v10 + 31);
    result += v11;
  }
  *(_DWORD *)(a1 + 44) = result;
  return result;
}

void sub_1B02FDBE0(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CC338)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  sub_1B02FDC08(a1, (uint64_t)a2);
}

void sub_1B02FDC08(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  __int128 *v14;
  uint64_t v15;
  _QWORD *v16;
  char v17;
  std::string v18[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3001);
    v4 = sub_1B0305340(v18, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v17, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v18);
  }
  sub_1B030942C(a1 + 16, a2 + 16);
  v5 = *(_QWORD *)(a2 + 8);
  if ((v5 & 1) != 0)
  {
    v6 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = (v5 & 0xFFFFFFFFFFFFFFFELL) + 8;
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & 1) != 0)
      v9 = (std::string *)((v8 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v6 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v7;
    else
      v11 = *(const std::string::value_type **)(v6 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v6 + 31);
    else
      v12 = *(_QWORD *)(v6 + 16);
    std::string::append(v9, v11, v12);
  }
  v13 = *(_DWORD *)(a2 + 40);
  if ((v13 & 7) != 0)
  {
    if ((v13 & 1) != 0)
    {
      v14 = (__int128 *)(*(_QWORD *)(a2 + 48) & 0xFFFFFFFFFFFFFFFELL);
      *(_DWORD *)(a1 + 40) |= 1u;
      v15 = *(_QWORD *)(a1 + 8);
      v16 = (_QWORD *)(v15 & 0xFFFFFFFFFFFFFFFELL);
      if ((v15 & 1) != 0)
        v16 = (_QWORD *)*v16;
      sub_1B030424C((uint64_t *)(a1 + 48), v14, (uint64_t)v16);
      if ((v13 & 2) == 0)
      {
LABEL_16:
        if ((v13 & 4) == 0)
        {
LABEL_18:
          *(_DWORD *)(a1 + 40) |= v13;
          return;
        }
LABEL_17:
        *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
        goto LABEL_18;
      }
    }
    else if ((v13 & 2) == 0)
    {
      goto LABEL_16;
    }
    *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
    if ((v13 & 4) == 0)
      goto LABEL_18;
    goto LABEL_17;
  }
}

void sub_1B02FDD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FDD58(uint64_t a1)
{
  return sub_1B030A5FC(a1 + 16);
}

_QWORD *sub_1B02FDD60@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.ModelProto.SentencePiece");
}

uint64_t sub_1B02FDD70(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &off_1E60CB970;
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = &unk_1E60CBA88;
  sub_1B03058C4(a1 + 24, a2);
  *(_QWORD *)(a1 + 56) = a2;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  if (atomic_load(dword_1EEEB1A88))
    sub_1B0310068(dword_1EEEB1A88);
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  return a1;
}

void sub_1B02FDDF4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t *v2;

  sub_1B03007D8(v2);
  sub_1B03059A0(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FDE14(uint64_t a1)
{
  sub_1B02FDE54(a1);
  sub_1B02F4D24((uint64_t *)(a1 + 8));
  sub_1B03007D8((uint64_t *)(a1 + 56));
  sub_1B03059A0(a1 + 24);
  return a1;
}

uint64_t sub_1B02FDE54(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  std::string *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  std::string v13[2];

  v1 = result;
  v2 = *(_QWORD *)(result + 8);
  v3 = (_QWORD *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  if ((v2 & 1) == 0)
  {
    if (!v3)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*v3)
  {
LABEL_3:
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3145);
    v4 = sub_1B0305340(v13, "CHECK failed: GetArena() == nullptr: ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_1B0305478((uint64_t)v13);
  }
LABEL_4:
  if ((_UNKNOWN *)v1 != &unk_1EEEB2938)
  {
    v5 = *(uint64_t **)(v1 + 80);
    if (v5)
    {
      v6 = sub_1B02F7D4C(v5);
      MEMORY[0x1B5E07CD8](v6, 0x10A1C4074230EEALL);
    }
    v7 = *(_QWORD *)(v1 + 88);
    if (v7)
    {
      v8 = sub_1B02FB91C(v7);
      MEMORY[0x1B5E07CD8](v8, 0x10A1C402CDD3876);
    }
    v9 = *(_QWORD *)(v1 + 96);
    if (v9)
    {
      v10 = sub_1B02FCD24(v9);
      MEMORY[0x1B5E07CD8](v10, 0x10A1C4075D007F8);
    }
    result = *(_QWORD *)(v1 + 104);
    if (result)
    {
      v11 = sub_1B02FB91C(result);
      return MEMORY[0x1B5E07CD8](v11, 0x10A1C402CDD3876);
    }
  }
  return result;
}

void sub_1B02FDF60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FDF7C(uint64_t a1)
{
  return sub_1B02FDE14(a1 - 16);
}

void sub_1B02FDF84(uint64_t a1)
{
  sub_1B02FDE14(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B02FDFA8(uint64_t a1)
{
  sub_1B02FDE14(a1 - 16);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B02FDFD0(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  std::string v15[2];

  sub_1B0309390((unsigned __int8 *)(a1 + 24));
  result = (uint64_t)sub_1B03002DC((unsigned __int8 *)(a1 + 56));
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 0xF) != 0)
  {
    if ((v3 & 1) != 0)
    {
      v4 = *(_QWORD *)(a1 + 80);
      if (!v4)
      {
        sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3178);
        v5 = sub_1B0305340(v15, "CHECK failed: trainer_spec_ != nullptr: ");
        sub_1B0305470((uint64_t)&v14, (const char **)&v5->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v15);
        v4 = *(_QWORD *)(a1 + 80);
      }
      result = sub_1B02F809C(v4);
    }
    if ((v3 & 2) != 0)
    {
      v6 = *(_QWORD *)(a1 + 88);
      if (!v6)
      {
        sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3182);
        v7 = sub_1B0305340(v15, "CHECK failed: normalizer_spec_ != nullptr: ");
        sub_1B0305470((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v15);
        v6 = *(_QWORD *)(a1 + 88);
      }
      result = (uint64_t)sub_1B02FBB10(v6);
    }
    if ((v3 & 4) != 0)
    {
      v8 = *(_QWORD *)(a1 + 96);
      if (!v8)
      {
        sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3186);
        v9 = sub_1B0305340(v15, "CHECK failed: self_test_data_ != nullptr: ");
        sub_1B0305470((uint64_t)&v14, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v15);
        v8 = *(_QWORD *)(a1 + 96);
      }
      result = sub_1B02FCE08(v8);
    }
    if ((v3 & 8) != 0)
    {
      v10 = *(_QWORD *)(a1 + 104);
      if (!v10)
      {
        sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3190);
        v11 = sub_1B0305340(v15, "CHECK failed: denormalizer_spec_ != nullptr: ");
        sub_1B0305470((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v15);
        v10 = *(_QWORD *)(a1 + 104);
      }
      result = (uint64_t)sub_1B02FBB10(v10);
    }
  }
  *(_DWORD *)(a1 + 48) = 0;
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v13 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v13 + 31) < 0)
    {
      **(_BYTE **)(v13 + 8) = 0;
      *(_QWORD *)(v13 + 16) = 0;
    }
    else
    {
      *(_BYTE *)(v13 + 8) = 0;
      *(_BYTE *)(v13 + 31) = 0;
    }
  }
  return result;
}

void sub_1B02FE180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B02FE1B0(uint64_t a1, char *a2, int32x2_t *a3)
{
  _QWORD *v6;
  char *v7;
  unsigned int v8;
  unsigned int v9;
  char *v10;
  unsigned __int8 *v11;
  int *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  BOOL v26;
  char *v27;
  unsigned int v28;
  std::string *v29;
  char *v30;

  v30 = a2;
  if ((sub_1B02F70C0((uint64_t)a3, &v30, a3[11].i32[1]) & 1) == 0)
  {
    v6 = (_QWORD *)(a1 + 8);
    while (2)
    {
      v7 = v30 + 1;
      v8 = *v30;
      if (*v30 < 0)
      {
        v9 = v8 + (*v7 << 7);
        v8 = v9 - 128;
        if (*v7 < 0)
        {
          v27 = (char *)sub_1B0311940((uint64_t)v30, v9 - 128);
          v30 = v27;
          if (!v27)
            return 0;
          v7 = v27;
          v8 = v28;
LABEL_8:
          switch(v8 >> 3)
          {
            case 1u:
              if (v8 != 10)
                goto LABEL_49;
              v10 = v7 - 1;
              break;
            case 2u:
              if (v8 != 18)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 1u;
              v18 = *(_QWORD *)(a1 + 80);
              if (!v18)
              {
                v19 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v19 = (_QWORD *)*v19;
                v18 = sub_1B02FF294((uint64_t)v19);
                *(_QWORD *)(a1 + 80) = v18;
                v7 = v30;
              }
              v20 = (char *)sub_1B02FE5EC(a3, v18, (unsigned __int8 *)v7);
              goto LABEL_46;
            case 3u:
              if (v8 != 26)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 2u;
              v21 = *(_QWORD *)(a1 + 88);
              if (v21)
                goto LABEL_45;
              v22 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v22 = (_QWORD *)*v22;
              v21 = sub_1B02FF348((uint64_t)v22);
              *(_QWORD *)(a1 + 88) = v21;
              goto LABEL_44;
            case 4u:
              if (v8 != 34)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 4u;
              v23 = *(_QWORD *)(a1 + 96);
              if (!v23)
              {
                v24 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
                if ((*v6 & 1) != 0)
                  v24 = (_QWORD *)*v24;
                v23 = sub_1B02FF508((uint64_t)v24);
                *(_QWORD *)(a1 + 96) = v23;
                v7 = v30;
              }
              v20 = (char *)sub_1B02FE774(a3, v23, v7);
              goto LABEL_46;
            case 5u:
              if (v8 != 42)
                goto LABEL_49;
              *(_DWORD *)(a1 + 48) |= 8u;
              v21 = *(_QWORD *)(a1 + 104);
              if (v21)
                goto LABEL_45;
              v25 = (_QWORD *)(*v6 & 0xFFFFFFFFFFFFFFFELL);
              if ((*v6 & 1) != 0)
                v25 = (_QWORD *)*v25;
              v21 = sub_1B02FF348((uint64_t)v25);
              *(_QWORD *)(a1 + 104) = v21;
LABEL_44:
              v7 = v30;
LABEL_45:
              v20 = (char *)sub_1B02FE6B0(a3, v21, (unsigned __int8 *)v7);
              goto LABEL_46;
            default:
LABEL_49:
              if (v8)
                v26 = (v8 & 7) == 4;
              else
                v26 = 1;
              if (v26)
              {
                a3[10].i32[0] = v8 - 1;
                return v30;
              }
              if (v8 < 0x640)
              {
                if ((*v6 & 1) != 0)
                {
                  v29 = (std::string *)((*v6 & 0xFFFFFFFFFFFFFFFELL) + 8);
                }
                else
                {
                  v29 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
                  v7 = v30;
                }
                v20 = (char *)sub_1B0311E20(v8, v29, v7, a3);
              }
              else
              {
                v20 = (char *)sub_1B030A930((uint64_t *)(a1 + 24), v8, (unsigned __int8 *)v7, (uint64_t)&unk_1EEEB2938, (unint64_t *)(a1 + 8), a3);
              }
LABEL_46:
              v30 = v20;
              if (!v20)
                return 0;
LABEL_47:
              if ((sub_1B02F70C0((uint64_t)a3, &v30, a3[11].i32[1]) & 1) != 0)
                return v30;
              continue;
          }
          while (1)
          {
            v11 = (unsigned __int8 *)(v10 + 1);
            v30 = v10 + 1;
            v12 = *(int **)(a1 + 72);
            if (!v12)
              break;
            v13 = *(int *)(a1 + 64);
            v14 = *v12;
            if ((int)v13 >= *v12)
            {
              if (v14 == *(_DWORD *)(a1 + 68))
              {
LABEL_16:
                sub_1B0316A4C(a1 + 56, v14 + 1);
                v12 = *(int **)(a1 + 72);
                v14 = *v12;
              }
              *v12 = v14 + 1;
              v15 = sub_1B02FF5BC(*(_QWORD *)(a1 + 56));
              v16 = *(_QWORD *)(a1 + 72);
              v17 = *(int *)(a1 + 64);
              *(_DWORD *)(a1 + 64) = v17 + 1;
              *(_QWORD *)(v16 + 8 * v17 + 8) = v15;
              v11 = (unsigned __int8 *)v30;
              goto LABEL_18;
            }
            *(_DWORD *)(a1 + 64) = v13 + 1;
            v15 = *(_QWORD **)&v12[2 * v13 + 2];
LABEL_18:
            v10 = (char *)sub_1B02FE528(a3, (uint64_t)v15, v11);
            v30 = v10;
            if (!v10)
              return 0;
            if (*(_QWORD *)a3 <= (unint64_t)v10 || *v10 != 10)
              goto LABEL_47;
          }
          v14 = *(_DWORD *)(a1 + 68);
          goto LABEL_16;
        }
        v7 = v30 + 2;
      }
      break;
    }
    v30 = v7;
    goto LABEL_8;
  }
  return v30;
}

uint64_t sub_1B02FE528(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_1B02F74E0((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_1B02FD6E4(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_1B02FE5EC(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_1B02F74E0((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (uint64_t)sub_1B02F8360(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_1B02FE6B0(int32x2_t *a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = result;
    v7 = v10;
  }
  else
  {
    v8 = (uint64_t)(a3 + 1);
  }
  v11 = sub_1B02F74E0((uint64_t)a1, v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = sub_1B02FBC1C(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

uint64_t sub_1B02FE774(int32x2_t *a1, uint64_t a2, char *a3)
{
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = *a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = (char *)result;
    v7 = v10;
  }
  else
  {
    v8 = a3 + 1;
  }
  v11 = sub_1B02F74E0((uint64_t)a1, (int)v8, v7);
  v12 = a1[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a1[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (uint64_t)sub_1B02FCE60(a2, v8, a1);
  if (!result)
    return result;
  ++a1[11].i32[0];
  if (a1[10].i32[0])
    return 0;
  v15 = a1[3].i32[1] + v14;
  a1[3].i32[1] = v15;
  *a1 = (int32x2_t)(*(_QWORD *)&a1[1] + (v15 & (v15 >> 31)));
  return result;
}

char *sub_1B02FE838(uint64_t a1, char *a2, unint64_t *a3)
{
  int v6;
  int i;
  uint64_t v8;
  unsigned int v9;
  char *v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unsigned int v22;
  char *v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  char *v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  char *v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;

  v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    for (i = 0; i != v6; ++i)
    {
      if (*a3 <= (unint64_t)a2)
        a2 = sub_1B0304904((uint64_t)a3, a2);
      v8 = sub_1B02D69FC(a1 + 56, i);
      *a2 = 10;
      v9 = *(_DWORD *)(v8 + 44);
      if (v9 > 0x7F)
      {
        a2[1] = v9 | 0x80;
        v11 = v9 >> 7;
        if (v9 >> 14)
        {
          v10 = a2 + 3;
          do
          {
            *(v10 - 1) = v11 | 0x80;
            v12 = v11 >> 7;
            ++v10;
            v13 = v11 >> 14;
            v11 >>= 7;
          }
          while (v13);
          *(v10 - 1) = v12;
        }
        else
        {
          a2[2] = v11;
          v10 = a2 + 3;
        }
      }
      else
      {
        a2[1] = v9;
        v10 = a2 + 2;
      }
      a2 = sub_1B02FD968(v8, v10, a3);
    }
  }
  v14 = *(_DWORD *)(a1 + 48);
  if ((v14 & 1) != 0)
  {
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v15 = *(_QWORD *)(a1 + 80);
    *a2 = 18;
    v16 = *(_DWORD *)(v15 + 48);
    if (v16 > 0x7F)
    {
      a2[1] = v16 | 0x80;
      v18 = v16 >> 7;
      if (v16 >> 14)
      {
        v17 = a2 + 3;
        do
        {
          *(v17 - 1) = v18 | 0x80;
          v19 = v18 >> 7;
          ++v17;
          v20 = v18 >> 14;
          v18 >>= 7;
        }
        while (v20);
        *(v17 - 1) = v19;
      }
      else
      {
        a2[2] = v18;
        v17 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v16;
      v17 = a2 + 2;
    }
    a2 = sub_1B02F9878(v15, v17, (uint64_t *)a3);
    if ((v14 & 2) == 0)
    {
LABEL_15:
      if ((v14 & 4) == 0)
        goto LABEL_16;
      goto LABEL_38;
    }
  }
  else if ((v14 & 2) == 0)
  {
    goto LABEL_15;
  }
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v21 = *(_QWORD *)(a1 + 88);
  *a2 = 26;
  v22 = *(_DWORD *)(v21 + 52);
  if (v22 > 0x7F)
  {
    a2[1] = v22 | 0x80;
    v24 = v22 >> 7;
    if (v22 >> 14)
    {
      v23 = a2 + 3;
      do
      {
        *(v23 - 1) = v24 | 0x80;
        v25 = v24 >> 7;
        ++v23;
        v26 = v24 >> 14;
        v24 >>= 7;
      }
      while (v26);
      *(v23 - 1) = v25;
    }
    else
    {
      a2[2] = v24;
      v23 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v22;
    v23 = a2 + 2;
  }
  a2 = sub_1B02FC018(v21, v23, a3);
  if ((v14 & 4) == 0)
  {
LABEL_16:
    if ((v14 & 8) == 0)
      goto LABEL_58;
    goto LABEL_48;
  }
LABEL_38:
  if (*a3 <= (unint64_t)a2)
    a2 = sub_1B0304904((uint64_t)a3, a2);
  v27 = *(_QWORD *)(a1 + 96);
  *a2 = 34;
  v28 = *(_DWORD *)(v27 + 64);
  if (v28 > 0x7F)
  {
    a2[1] = v28 | 0x80;
    v30 = v28 >> 7;
    if (v28 >> 14)
    {
      v29 = a2 + 3;
      do
      {
        *(v29 - 1) = v30 | 0x80;
        v31 = v30 >> 7;
        ++v29;
        v32 = v30 >> 14;
        v30 >>= 7;
      }
      while (v32);
      *(v29 - 1) = v31;
    }
    else
    {
      a2[2] = v30;
      v29 = a2 + 3;
    }
  }
  else
  {
    a2[1] = v28;
    v29 = a2 + 2;
  }
  a2 = sub_1B02FD138(v27, v29, a3);
  if ((v14 & 8) != 0)
  {
LABEL_48:
    if (*a3 <= (unint64_t)a2)
      a2 = sub_1B0304904((uint64_t)a3, a2);
    v33 = *(_QWORD *)(a1 + 104);
    *a2 = 42;
    v34 = *(_DWORD *)(v33 + 52);
    if (v34 > 0x7F)
    {
      a2[1] = v34 | 0x80;
      v36 = v34 >> 7;
      if (v34 >> 14)
      {
        v35 = a2 + 3;
        do
        {
          *(v35 - 1) = v36 | 0x80;
          v37 = v36 >> 7;
          ++v35;
          v38 = v36 >> 14;
          v36 >>= 7;
        }
        while (v38);
        *(v35 - 1) = v37;
      }
      else
      {
        a2[2] = v36;
        v35 = a2 + 3;
      }
    }
    else
    {
      a2[1] = v34;
      v35 = a2 + 2;
    }
    a2 = sub_1B02FC018(v33, v35, a3);
  }
LABEL_58:
  v39 = sub_1B030B564(a1 + 24, 200, 0x20000000, a2, (uint64_t *)a3);
  v40 = v39;
  v41 = *(_QWORD *)(a1 + 8);
  if ((v41 & 1) == 0)
    return v40;
  v43 = v41 & 0xFFFFFFFFFFFFFFFELL;
  if (*(char *)(v43 + 31) < 0)
  {
    v44 = *(void **)(v43 + 8);
    v45 = *(_QWORD *)(v43 + 16);
  }
  else
  {
    v44 = (void *)(v43 + 8);
    LODWORD(v45) = *(unsigned __int8 *)(v43 + 31);
  }
  if ((uint64_t)(*a3 - (_QWORD)v39) >= (int)v45)
  {
    v46 = (int)v45;
    memcpy(v39, v44, (int)v45);
    v40 += v46;
    return v40;
  }
  return sub_1B0304A14((uint64_t *)a3, (char *)v44, v45, (unint64_t)v39);
}

uint64_t sub_1B02FEC30(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;

  v2 = sub_1B030E0F8(a1 + 24);
  v3 = *(int *)(a1 + 64);
  v4 = v2 + v3;
  v5 = *(_QWORD *)(a1 + 72);
  if (v5)
    v6 = (uint64_t *)(v5 + 8);
  else
    v6 = 0;
  if ((_DWORD)v3)
  {
    v7 = 8 * v3;
    do
    {
      v8 = *v6++;
      v9 = sub_1B02FDB00(v8);
      v4 += v9 + ((9 * (__clz(v9 | 1) ^ 0x1F) + 73) >> 6);
      v7 -= 8;
    }
    while (v7);
  }
  v10 = *(_DWORD *)(a1 + 48);
  if ((v10 & 0xF) == 0)
    goto LABEL_13;
  if ((v10 & 1) == 0)
  {
    if ((v10 & 2) == 0)
      goto LABEL_10;
LABEL_16:
    v15 = sub_1B02FC218(*(_QWORD *)(a1 + 88));
    v4 += v15 + ((9 * (__clz(v15 | 1) ^ 0x1F) + 73) >> 6) + 1;
    if ((v10 & 4) == 0)
    {
LABEL_11:
      if ((v10 & 8) == 0)
        goto LABEL_13;
      goto LABEL_12;
    }
    goto LABEL_17;
  }
  v14 = sub_1B02FAA2C(*(_QWORD *)(a1 + 80));
  v4 += v14 + ((9 * (__clz(v14 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 2) != 0)
    goto LABEL_16;
LABEL_10:
  if ((v10 & 4) == 0)
    goto LABEL_11;
LABEL_17:
  v16 = sub_1B02FD2BC(*(_QWORD *)(a1 + 96));
  v4 += v16 + ((9 * (__clz(v16 | 1) ^ 0x1F) + 73) >> 6) + 1;
  if ((v10 & 8) != 0)
  {
LABEL_12:
    v11 = sub_1B02FC218(*(_QWORD *)(a1 + 104));
    v4 += v11 + ((9 * (__clz(v11 | 1) ^ 0x1F) + 73) >> 6) + 1;
  }
LABEL_13:
  v12 = *(_QWORD *)(a1 + 8);
  if ((v12 & 1) != 0)
  {
    v17 = v12 & 0xFFFFFFFFFFFFFFFELL;
    if (*(char *)(v17 + 31) < 0)
      v18 = *(_QWORD *)(v17 + 16);
    else
      v18 = *(unsigned __int8 *)(v17 + 31);
    v4 += v18;
  }
  *(_DWORD *)(a1 + 52) = v4;
  return v4;
}

void sub_1B02FEDB8(uint64_t a1, uint64_t (***a2)(), uint64_t a3)
{
  if (*a2 != &off_1E60CB970)
    sub_1B02F7994(a1, (uint64_t)a2, a3);
  sub_1B02FEDE0(a1, (uint64_t)a2);
}

void sub_1B02FEDE0(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  int v10;
  const std::string::value_type *v11;
  std::string::size_type v12;
  int v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  uint64_t v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  void *v25;
  char v26;
  std::string v27[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.cc", 3397);
    v4 = sub_1B0305340(v27, "CHECK failed: (&from) != (this): ");
    sub_1B0305470((uint64_t)&v26, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v27);
  }
  sub_1B030942C(a1 + 24, a2 + 24);
  v5 = (_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a2 + 8);
  if ((v6 & 1) != 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    v8 = (v6 & 0xFFFFFFFFFFFFFFFELL) + 8;
    if ((*v5 & 1) != 0)
      v9 = (std::string *)((*v5 & 0xFFFFFFFFFFFFFFFELL) + 8);
    else
      v9 = (std::string *)sub_1B02F71FC((unint64_t *)(a1 + 8));
    v10 = *(char *)(v7 + 31);
    if (v10 >= 0)
      v11 = (const std::string::value_type *)v8;
    else
      v11 = *(const std::string::value_type **)(v7 + 8);
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v7 + 31);
    else
      v12 = *(_QWORD *)(v7 + 16);
    std::string::append(v9, v11, v12);
  }
  sub_1B030087C(a1 + 56, a2 + 56);
  v13 = *(_DWORD *)(a2 + 48);
  if ((v13 & 0xF) != 0)
  {
    if ((v13 & 1) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 1u;
      v14 = *(_QWORD *)(a1 + 80);
      if (!v14)
      {
        v15 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v15 = (_QWORD *)*v15;
        v14 = sub_1B02FF294((uint64_t)v15);
        *(_QWORD *)(a1 + 80) = v14;
      }
      if (*(_QWORD *)(a2 + 80))
        v16 = *(void **)(a2 + 80);
      else
        v16 = &unk_1EEEB29A8;
      sub_1B02FB300(v14, (uint64_t)v16);
    }
    if ((v13 & 2) != 0)
    {
      *(_DWORD *)(a1 + 48) |= 2u;
      v17 = *(_QWORD *)(a1 + 88);
      if (!v17)
      {
        v18 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v18 = (_QWORD *)*v18;
        v17 = sub_1B02FF348((uint64_t)v18);
        *(_QWORD *)(a1 + 88) = v17;
      }
      if (*(_QWORD *)(a2 + 88))
        v19 = *(void **)(a2 + 88);
      else
        v19 = &unk_1EEEB2B38;
      sub_1B02FC3A4(v17, (uint64_t)v19);
      if ((v13 & 4) == 0)
      {
LABEL_25:
        if ((v13 & 8) == 0)
          return;
        goto LABEL_43;
      }
    }
    else if ((v13 & 4) == 0)
    {
      goto LABEL_25;
    }
    *(_DWORD *)(a1 + 48) |= 4u;
    v20 = *(_QWORD *)(a1 + 96);
    if (!v20)
    {
      v21 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
      if ((*v5 & 1) != 0)
        v21 = (_QWORD *)*v21;
      v20 = sub_1B02FF508((uint64_t)v21);
      *(_QWORD *)(a1 + 96) = v20;
    }
    if (*(_QWORD *)(a2 + 96))
      v22 = *(void **)(a2 + 96);
    else
      v22 = &unk_1EEEB2AF0;
    sub_1B02FD390(v20, (uint64_t)v22);
    if ((v13 & 8) != 0)
    {
LABEL_43:
      *(_DWORD *)(a1 + 48) |= 8u;
      v23 = *(_QWORD *)(a1 + 104);
      if (!v23)
      {
        v24 = (_QWORD *)(*v5 & 0xFFFFFFFFFFFFFFFELL);
        if ((*v5 & 1) != 0)
          v24 = (_QWORD *)*v24;
        v23 = sub_1B02FF348((uint64_t)v24);
        *(_QWORD *)(a1 + 104) = v23;
      }
      if (*(_QWORD *)(a2 + 104))
        v25 = *(void **)(a2 + 104);
      else
        v25 = &unk_1EEEB2B38;
      sub_1B02FC3A4(v23, (uint64_t)v25);
    }
  }
}

void sub_1B02FF000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B02FF018(uint64_t a1, uint64_t a2)
{
  if (a2 != a1)
  {
    sub_1B02FDFD0(a1);
    sub_1B02FEDE0(a1, a2);
  }
}

uint64_t sub_1B02FF050(uint64_t a1)
{
  uint64_t result;
  int v3;
  uint64_t v4;
  std::string *v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  char v12;
  std::string v13[2];

  result = sub_1B030A5FC(a1 + 24);
  if (!(_DWORD)result)
    return result;
  result = sub_1B02FF230(a1 + 56);
  if (!(_DWORD)result)
    return result;
  v3 = *(_DWORD *)(a1 + 48);
  if ((v3 & 1) != 0)
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (!v4)
    {
      sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4741);
      v5 = sub_1B0305340(v13, "CHECK failed: !value || trainer_spec_ != nullptr: ");
      sub_1B0305470((uint64_t)&v12, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v13);
      v4 = *(_QWORD *)(a1 + 80);
    }
    result = sub_1B030A5FC(v4 + 16);
    if (!(_DWORD)result)
      return result;
    v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 2) != 0)
  {
    v6 = *(_QWORD *)(a1 + 88);
    if (!v6)
    {
      sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4824);
      v7 = sub_1B0305340(v13, "CHECK failed: !value || normalizer_spec_ != nullptr: ");
      sub_1B0305470((uint64_t)&v12, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v13);
      v6 = *(_QWORD *)(a1 + 88);
    }
    result = sub_1B030A5FC(v6 + 24);
    if (!(_DWORD)result)
      return result;
    v3 = *(_DWORD *)(a1 + 48);
  }
  if ((v3 & 4) == 0)
  {
LABEL_18:
    if ((v3 & 8) == 0)
      return 1;
    v10 = *(_QWORD *)(a1 + 104);
    if (!v10)
    {
      sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4990);
      v11 = sub_1B0305340(v13, "CHECK failed: !value || denormalizer_spec_ != nullptr: ");
      sub_1B0305470((uint64_t)&v12, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v13);
      v10 = *(_QWORD *)(a1 + 104);
    }
    result = sub_1B030A5FC(v10 + 24);
    if ((_DWORD)result)
      return 1;
    return result;
  }
  v8 = *(_QWORD *)(a1 + 96);
  if (!v8)
  {
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/builtin_pb/sentencepiece_model.pb.h", 4907);
    v9 = sub_1B0305340(v13, "CHECK failed: !value || self_test_data_ != nullptr: ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
    v8 = *(_QWORD *)(a1 + 96);
  }
  result = sub_1B030A5FC(v8 + 16);
  if ((_DWORD)result)
  {
    v3 = *(_DWORD *)(a1 + 48);
    goto LABEL_18;
  }
  return result;
}

void sub_1B02FF200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1B02FF230(uint64_t a1)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  do
  {
    v3 = v2;
    v4 = __OFSUB__(v2--, 1);
    if (v2 < 0 != v4)
      break;
    v5 = sub_1B02D69FC(a1, v2);
  }
  while ((sub_1B030A5FC(v5 + 16) & 1) != 0);
  return v3 < 1;
}

_QWORD *sub_1B02FF284@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "sentencepiece.ModelProto");
}

uint64_t sub_1B02FF294(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CAC50, 328);
    v2 = sub_1B0303E20(a1, 328);
    sub_1B02F7BF0(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_1B02F7BF0(v2, 0);
  }
  return v2;
}

void sub_1B02FF324(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C4074230EEALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FF348(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CACA0, 88);
    v2 = sub_1B0303E20(a1, 88);
    sub_1B02FB888(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_1B02FB888(v2, 0);
  }
  return v2;
}

void sub_1B02FF3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C402CDD3876);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02FF3FC(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CAD00, 40);
    v2 = (_QWORD *)sub_1B0303E20(a1, 40);
    *v2 = &off_1E60CBF10;
    v2[1] = a1;
    v2[2] = 0;
    if (atomic_load(dword_1EEEB1AD8))
      goto LABEL_7;
  }
  else
  {
    v2 = (_QWORD *)operator new();
    *v2 = &off_1E60CBF10;
    v2[1] = 0;
    v2[2] = 0;
    if (atomic_load(dword_1EEEB1AD8))
LABEL_7:
      sub_1B0310068(dword_1EEEB1AD8);
  }
  v2[3] = &qword_1EEEB2CE0;
  v2[4] = &qword_1EEEB2CE0;
  return v2;
}

void sub_1B02FF4E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x1081C400F7E8713);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FF508(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CAC68, 72);
    v2 = sub_1B0303E20(a1, 72);
    sub_1B02FCC94(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_1B02FCC94(v2, 0);
  }
  return v2;
}

void sub_1B02FF598(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C4075D007F8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B02FF5BC(uint64_t a1)
{
  _QWORD *v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CAD58, 64);
    v2 = (_QWORD *)sub_1B0303E20(a1, 64);
    sub_1B02FD494(v2, a1);
  }
  else
  {
    v2 = (_QWORD *)operator new();
    sub_1B02FD494(v2, 0);
  }
  return v2;
}

void sub_1B02FF64C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C40F497E4DALL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FF670(uint64_t a1)
{
  uint64_t v2;

  if (a1)
  {
    if ((*(_BYTE *)(a1 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 32), &unk_1E60CABE0, 112);
    v2 = sub_1B0303E20(a1, 112);
    sub_1B02FDD70(v2, a1);
  }
  else
  {
    v2 = operator new();
    sub_1B02FDD70(v2, 0);
  }
  return v2;
}

void sub_1B02FF700(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10A1C4047CE62CFLL);
  _Unwind_Resume(a1);
}

uint64_t sub_1B02FF724()
{
  return sub_1B02FF294(0);
}

uint64_t sub_1B02FF72C(uint64_t a1, uint64_t a2)
{
  return sub_1B02FF294(a2);
}

uint64_t sub_1B02FF734(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1B02FF73C()
{
  return sub_1B02FF348(0);
}

uint64_t sub_1B02FF744(uint64_t a1, uint64_t a2)
{
  return sub_1B02FF348(a2);
}

uint64_t sub_1B02FF74C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1B02FF754(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 80);
}

uint64_t sub_1B02FF75C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 81);
}

uint64_t sub_1B02FF764(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 82);
}

uint64_t sub_1B02FF76C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83);
}

uint64_t sub_1B02FF774(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 65);
}

uint64_t sub_1B02FF77C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 66);
}

uint64_t sub_1B02FF784(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 67);
}

uint64_t sub_1B02FF78C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 64);
}

_QWORD *sub_1B02FF794()
{
  return sub_1B02FF3FC(0);
}

_QWORD *sub_1B02FF79C(uint64_t a1, uint64_t a2)
{
  return sub_1B02FF3FC(a2);
}

uint64_t sub_1B02FF7A4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t sub_1B02FF7AC()
{
  return sub_1B02FF508(0);
}

uint64_t sub_1B02FF7B4(uint64_t a1, uint64_t a2)
{
  return sub_1B02FF508(a2);
}

uint64_t sub_1B02FF7BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

_QWORD *sub_1B02FF7C4()
{
  return sub_1B02FF5BC(0);
}

_QWORD *sub_1B02FF7CC(uint64_t a1, uint64_t a2)
{
  return sub_1B02FF5BC(a2);
}

uint64_t sub_1B02FF7D4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1B02FF7DC()
{
  return sub_1B02FF670(0);
}

uint64_t sub_1B02FF7E4(uint64_t a1, uint64_t a2)
{
  return sub_1B02FF670(a2);
}

uint64_t sub_1B02FF7EC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1B02FF7F4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

char *sub_1B02FF7FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1BB8);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1BA0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FF864(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1B78);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1B60);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FF8CC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1998);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1980);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FF934(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB19B8);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB19A0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FF99C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1B98);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1B80);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_1B02FFA04(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 80);
  if (!v1)
    v1 = (unsigned __int8 *)&unk_1EEEB29A8;
  return v1[248];
}

uint64_t sub_1B02FFA20(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&unk_1EEEB29A8;
  if (*(_QWORD *)(a1 + 80))
    v1 = *(unsigned __int8 **)(a1 + 80);
  return (v1[40] >> 3) & 1;
}

char *sub_1B02FFA40(uint64_t a1, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(sub_1B02D69FC(a1 + 56, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sub_1B02FFA74(uint64_t a1, int a2)
{
  return *(float *)(sub_1B02D69FC(a1 + 56, a2) + 56);
}

BOOL sub_1B02FFA90(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 56, a2) + 60) == 1;
}

BOOL sub_1B02FFAB4(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 56, a2) + 60) == 2;
}

BOOL sub_1B02FFAD8(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 56, a2) + 60) == 3;
}

BOOL sub_1B02FFAFC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 56, a2) + 60) == 5;
}

BOOL sub_1B02FFB20(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 56, a2) + 60) == 4;
}

BOOL sub_1B02FFB44(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 56, a2) + 60) == 6;
}

char *sub_1B02FFB68(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 88);
  if (!v1)
    v1 = (char *)&unk_1EEEB2B38;
  return v1 + 16;
}

char *sub_1B02FFB84(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 104);
  if (!v1)
    v1 = (char *)&unk_1EEEB2B38;
  return v1 + 16;
}

uint64_t sub_1B02FFBA0(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD **)(a1 + 80);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

uint64_t sub_1B02FFBCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

char *sub_1B02FFBD4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[22];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1BB8);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1BA0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FFC3C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[23];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1B78);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1B60);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FFCA4(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[24];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1998);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1980);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FFD0C(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[25];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB19B8);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB19A0);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

char *sub_1B02FFD74(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  char *result;

  v1 = *(_QWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[26];
  if (v2)
  {
    result = (char *)(v2 & 0xFFFFFFFFFFFFFFFELL);
  }
  else
  {
    result = (char *)atomic_load(&qword_1EEEB1B98);
    if (!result)
      result = (char *)sub_1B0303F4C(&off_1EEEB1B80);
  }
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

uint64_t sub_1B02FFDDC(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = *(unsigned __int8 **)(a1 + 64);
  if (!v1)
    v1 = (unsigned __int8 *)&unk_1EEEB29A8;
  return v1[248];
}

uint64_t sub_1B02FFDF8(uint64_t a1)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)&unk_1EEEB29A8;
  if (*(_QWORD *)(a1 + 64))
    v1 = *(unsigned __int8 **)(a1 + 64);
  return (v1[40] >> 3) & 1;
}

uint64_t sub_1B02FFE18(uint64_t a1)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  unsigned int v4;

  v1 = *(_DWORD **)(a1 + 64);
  if (!v1)
    v1 = &unk_1EEEB29A8;
  v2 = v1[68];
  v3 = v2 - 2;
  v4 = v2 - 1;
  if (v3 >= 3)
    return 0;
  else
    return v4;
}

char *sub_1B02FFE44(uint64_t a1, int a2)
{
  char *result;

  result = (char *)(*(_QWORD *)(sub_1B02D69FC(a1 + 40, a2) + 48) & 0xFFFFFFFFFFFFFFFELL);
  if (result[23] < 0)
    return *(char **)result;
  return result;
}

float sub_1B02FFE78(uint64_t a1, int a2)
{
  return *(float *)(sub_1B02D69FC(a1 + 40, a2) + 56);
}

BOOL sub_1B02FFE94(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 40, a2) + 60) == 1;
}

BOOL sub_1B02FFEB8(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 40, a2) + 60) == 2;
}

BOOL sub_1B02FFEDC(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 40, a2) + 60) == 3;
}

BOOL sub_1B02FFF00(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 40, a2) + 60) == 5;
}

BOOL sub_1B02FFF24(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 40, a2) + 60) == 4;
}

BOOL sub_1B02FFF48(uint64_t a1, int a2)
{
  return *(_DWORD *)(sub_1B02D69FC(a1 + 40, a2) + 60) == 6;
}

char *sub_1B02FFF6C(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 72);
  if (!v1)
    v1 = (char *)&unk_1EEEB2B38;
  return v1 + 16;
}

char *sub_1B02FFF88(uint64_t a1)
{
  char *v1;

  v1 = *(char **)(a1 + 88);
  if (!v1)
    v1 = (char *)&unk_1EEEB2B38;
  return v1 + 16;
}

void sub_1B02FFFA4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t sub_1B02FFFB8(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B0300074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0300094(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::string *v4;
  char v5;
  std::string v6[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B0305328((uint64_t)v6, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v4 = sub_1B0305340(v6, "CHECK failed: (n) >= (0): ");
    sub_1B0305470((uint64_t)&v5, (const char **)&v4->__r_.__value_.__l.__data_);
    return sub_1B0305478((uint64_t)v6);
  }
  else if ((_DWORD)v1)
  {
    v2 = *(_QWORD *)(result + 16) + 8;
    do
    {
      v3 = *(_QWORD *)v2;
      if (*(char *)(*(_QWORD *)v2 + 23) < 0)
      {
        **(_BYTE **)v3 = 0;
        *(_QWORD *)(v3 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v3 = 0;
        *(_BYTE *)(v3 + 23) = 0;
      }
      v2 += 8;
      --v1;
    }
    while (v1);
    *(_DWORD *)(result + 8) = 0;
  }
  return result;
}

void sub_1B030013C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0300154(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B0300210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0300230(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_1B0305340(v7, "CHECK failed: (n) >= (0): ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_1B0305478((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3++;
      result = sub_1B02FC718(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_1B03002C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B03002DC(unsigned __int8 *result)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *((unsigned int *)result + 2);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_1B0305340(v7, "CHECK failed: (n) >= (0): ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return (unsigned __int8 *)sub_1B0305478((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*((_QWORD *)result + 2) + 8);
    do
    {
      v4 = *v3++;
      result = sub_1B02FD650(v4);
      --v1;
    }
    while (v1);
    *((_DWORD *)v2 + 2) = 0;
  }
  return result;
}

void sub_1B0300370(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0300388(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  std::string *v4;
  int v5;
  const std::string **v6;
  std::string **v7;
  int v8;
  int *v9;
  char v10;
  std::string v11[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_1B0305340(v11, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_1B0305478((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (const std::string **)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (std::string **)sub_1B0316A60((uint64_t *)v3, v5);
    result = (uint64_t)sub_1B0300474((std::string *)v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    v9 = *(int **)(v3 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

void sub_1B030045C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

std::string *sub_1B0300474(std::string *result, std::string **a2, const std::string **a3, signed int a4, signed int a5)
{
  std::string::__raw *v9;
  uint64_t v10;
  const std::string **v11;
  std::string **v12;
  const std::string *v13;
  const std::string *v14;
  std::string *v15;
  int v16;
  std::string::size_type v17;
  const std::string **v18;
  std::string **v19;
  const std::string *v20;
  std::string *v21;
  std::string *v22;

  v9 = (std::string::__raw *)result;
  if (a5 >= a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = std::string::operator=(v15, v13);
      --v10;
    }
    while (v10);
  }
  v16 = a4 - a5;
  if (a4 > a5)
  {
    v17 = v9->__words[0];
    v18 = &a3[a5];
    v19 = &a2[a5];
    do
    {
      v20 = *v18;
      if (v17)
      {
        if ((*(_BYTE *)(v17 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v17 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v17 + 32) + 32), &unk_1E60CB5B0, 24);
        v21 = (std::string *)sub_1B0303B3C((unint64_t *)v17, 0x18uLL, (uint64_t)sub_1B02FFFA4);
      }
      else
      {
        v21 = (std::string *)operator new();
      }
      v22 = v21;
      v21->__r_.__value_.__r.__words[0] = 0;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      result = std::string::operator=(v21, v20);
      *v19++ = v22;
      ++v18;
      --v16;
    }
    while (v16);
  }
  return result;
}

uint64_t *sub_1B030058C(uint64_t *a1)
{
  sub_1B03005B4(a1);
  return sub_1B02F74B0(a1);
}

void sub_1B03005B4(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_1B02FC59C(*v3);
          MEMORY[0x1B5E07CD8](v5, 0x1081C400F7E8713);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

unint64_t sub_1B0300630(unint64_t result, uint64_t a2)
{
  unint64_t v3;
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  unint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_1B0305340(v11, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    result = sub_1B0305478((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (unint64_t *)sub_1B0316A60((uint64_t *)v3, v5);
    result = sub_1B030071C(v3, v7, v6, v5, **(_DWORD **)(v3 + 16) - *(_DWORD *)(v3 + 8));
    v8 = *(_DWORD *)(v3 + 8) + v5;
    *(_DWORD *)(v3 + 8) = v8;
    v9 = *(signed int **)(v3 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
  return result;
}

void sub_1B0300704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B030071C(unint64_t result, unint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  unint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  v9 = (uint64_t *)result;
  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      result = sub_1B03007C8(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *v9;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_1B02FF3FC(v18);
      result = sub_1B03007C8(v21, (unint64_t)v22);
      *v20++ = (unint64_t)v22;
      --v17;
    }
    while (v17);
  }
  return result;
}

unint64_t sub_1B03007C8(uint64_t a1, unint64_t a2)
{
  return sub_1B02FCB34(a2, a1);
}

uint64_t *sub_1B03007D8(uint64_t *a1)
{
  sub_1B0300800(a1);
  return sub_1B02F74B0(a1);
}

void sub_1B0300800(_QWORD *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (uint64_t *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 1;
    v4 = *(unsigned int *)v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
        {
          v5 = sub_1B02FD514(*v3);
          MEMORY[0x1B5E07CD8](v5, 0x10A1C40F497E4DALL);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (uint64_t *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

void sub_1B030087C(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t *v7;
  signed int v8;
  signed int *v9;
  char v10;
  std::string v11[2];

  if (a2 == a1)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1799);
    v4 = sub_1B0305340(v11, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v10, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
  }
  v5 = *(_DWORD *)(a2 + 8);
  if (v5)
  {
    v6 = (uint64_t *)(*(_QWORD *)(a2 + 16) + 8);
    v7 = (uint64_t *)sub_1B0316A60((uint64_t *)a1, v5);
    sub_1B0300968((uint64_t *)a1, v7, v6, v5, **(_DWORD **)(a1 + 16) - *(_DWORD *)(a1 + 8));
    v8 = *(_DWORD *)(a1 + 8) + v5;
    *(_DWORD *)(a1 + 8) = v8;
    v9 = *(signed int **)(a1 + 16);
    if (*v9 < v8)
      *v9 = v8;
  }
}

void sub_1B0300950(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0300968(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;

  if ((int)a5 >= (int)a4)
    v10 = a4;
  else
    v10 = a5;
  if ((int)v10 >= 1)
  {
    v11 = a3;
    v12 = a2;
    do
    {
      v14 = *v11++;
      v13 = v14;
      v15 = *v12++;
      sub_1B0300A14(v13, v15);
      --v10;
    }
    while (v10);
  }
  v16 = __OFSUB__(a4, a5);
  v17 = a4 - a5;
  if (!((v17 < 0) ^ v16 | (v17 == 0)))
  {
    v18 = *a1;
    v19 = &a3[a5];
    v20 = &a2[a5];
    do
    {
      v21 = *v19++;
      v22 = sub_1B02FF5BC(v18);
      sub_1B0300A14(v21, (uint64_t)v22);
      *v20++ = (uint64_t)v22;
      --v17;
    }
    while (v17);
  }
}

void sub_1B0300A14(uint64_t a1, uint64_t a2)
{
  sub_1B02FDC08(a2, a1);
}

_QWORD *sub_1B0300A24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v6;
  char v7;
  _QWORD v8[2];

  v8[0] = a1;
  v8[1] = a2;
  v7 = a3;
  result = sub_1B0300A68((uint64_t)v8, &v6);
  *a4 = v6;
  return result;
}

_QWORD *sub_1B0300A68@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v4;
  _QWORD *result;

  v4 = (_QWORD *)operator new();
  result = sub_1B0300AE4(v4, *(const char **)a1, *(_QWORD *)(a1 + 8));
  *a2 = v4;
  return result;
}

void sub_1B0300AC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0300AE4(_QWORD *a1, const char *a2, uint64_t a3)
{
  uint64_t *v6;
  _QWORD *v7;
  size_t v8;
  int *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v14;
  unsigned int v15;
  _QWORD v16[11];
  char v17;
  uint64_t v18;
  _DWORD *v19;

  *a1 = &off_1E60CBB40;
  v6 = a1 + 1;
  sub_1B0303128(a1 + 1);
  if (a3)
  {
    v7 = (_QWORD *)operator new();
    sub_1B02DD778(v7);
  }
  else
  {
    v7 = (_QWORD *)MEMORY[0x1E0DE4948];
  }
  a1[2] = v7;
  if ((*((_BYTE *)v7 + *(_QWORD *)(*v7 - 24) + 32) & 5) != 0)
  {
    v15 = 5;
    sub_1B02D685C((uint64_t)v16);
    sub_1B02D7994(v16, (uint64_t)"\"", 1);
    v8 = strlen(a2);
    sub_1B02D7994(v16, (uint64_t)a2, v8);
    sub_1B02D7994(v16, (uint64_t)"\": ", 3);
    v9 = __error();
    sub_1B0301600(*v9);
    if ((v14 & 0x80u) == 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if ((v14 & 0x80u) == 0)
      v11 = v14;
    else
      v11 = (uint64_t)__p[1];
    sub_1B02D7994(v16, (uint64_t)v10, v11);
    sub_1B02D4430(&v15, (uint64_t)&v19);
    sub_1B0303344(v6, &v19);
    sub_1B0303130((uint64_t *)&v19);
    if ((char)v14 < 0)
      operator delete(__p[0]);
    v16[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v16 + *(_QWORD *)(v16[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v16[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v17 < 0)
      operator delete((void *)v16[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](&v18);
  }
  return a1;
}

void sub_1B0300CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t *v15;
  uint64_t v16;

  sub_1B0303130((uint64_t *)(v16 - 56));
  if (a14 < 0)
    operator delete(__p);
  sub_1B02D44BC((uint64_t)&a15);
  sub_1B0303130(v15);
  _Unwind_Resume(a1);
}

void sub_1B0300D38(_QWORD *a1)
{
  sub_1B0300F24(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0300D5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B0303340(a2, a1 + 8);
}

BOOL sub_1B0300D68(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  const std::locale::facet *v4;
  unsigned __int8 v5;
  _QWORD *v6;
  std::locale v8;

  v3 = *(_QWORD **)(a1 + 16);
  std::ios_base::getloc((const std::ios_base *)((char *)v3 + *(_QWORD *)(*v3 - 24)));
  v4 = std::locale::use_facet(&v8, MEMORY[0x1E0DE4A90]);
  v5 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v4->__vftable[2].~facet_0)(v4, 10);
  std::locale::~locale(&v8);
  v6 = sub_1B0300F7C(v3, a2, v5);
  return (*((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 32) & 5) == 0;
}

void sub_1B0300E04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_1B0300E18(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  char v11;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (_QWORD *)MEMORY[0x1E0DE4948];
  if (v2 == (_QWORD *)MEMORY[0x1E0DE4948])
  {
    if ((int)sub_1B03013F4() <= 2)
    {
      v11 = 0;
      v4 = sub_1B02D7994(MEMORY[0x1E0DE4A50], (uint64_t)"filesystem.cc", 13);
      sub_1B02D7994(v4, (uint64_t)"(", 1);
      v5 = (_QWORD *)std::ostream::operator<<();
      v6 = sub_1B02D7994(v5, (uint64_t)") ", 2);
      v7 = sub_1B02D7994(v6, (uint64_t)"LOG(", 4);
      v8 = sub_1B02D7994(v7, (uint64_t)"ERROR", 5);
      v9 = sub_1B02D7994(v8, (uint64_t)") ", 2);
      sub_1B02D7994(v9, (uint64_t)"ReadAll is not supported for stdin.", 35);
      sub_1B02D6948(&v11);
    }
  }
  else
  {
    sub_1B0301100(a2, *(_QWORD **)((char *)v2 + *(_QWORD *)(*v2 - 24) + 40), 0);
  }
  return v2 != v3;
}

void sub_1B0300F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_1B02D6948(&a13);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0300F24(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CBB40;
  v2 = a1[2];
  if (v2 != MEMORY[0x1E0DE4948] && v2 != 0)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1B0303130(a1 + 1);
  return a1;
}

_QWORD *sub_1B0300F7C(_QWORD *a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;
  _BYTE *v8;
  int v9;
  char v11;

  MEMORY[0x1B5E07ABC](&v11, a1, 1);
  if (!v11)
    return a1;
  if (*(char *)(a2 + 23) < 0)
  {
    **(_BYTE **)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
  }
  else
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 23) = 0;
  }
  v6 = 0;
  while (1)
  {
    v7 = *(_QWORD **)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
    v8 = (_BYTE *)v7[3];
    if (v8 != (_BYTE *)v7[4])
    {
      v7[3] = v8 + 1;
      LOBYTE(v7) = *v8;
      goto LABEL_9;
    }
    LODWORD(v7) = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
    if ((_DWORD)v7 == -1)
      break;
LABEL_9:
    if (v7 == a3)
    {
      v9 = 0;
      goto LABEL_17;
    }
    std::string::push_back((std::string *)a2, (std::string::value_type)v7);
    --v6;
    if (*(char *)(a2 + 23) < 0 && *(_QWORD *)(a2 + 8) == 0x7FFFFFFFFFFFFFF7)
    {
      v9 = 4;
      goto LABEL_17;
    }
  }
  if (v6)
    v9 = 2;
  else
    v9 = 6;
LABEL_17:
  std::ios_base::clear((std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)), *(_DWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 32) | v9);
  return a1;
}

void sub_1B03010A8(void *a1)
{
  _QWORD *v1;
  uint64_t v2;

  __cxa_begin_catch(a1);
  v2 = *v1;
  *(_DWORD *)((char *)v1 + *(_QWORD *)(*v1 - 24) + 32) |= 1u;
  if ((*((_BYTE *)v1 + *(_QWORD *)(v2 - 24) + 36) & 1) == 0)
  {
    __cxa_end_catch();
    JUMPOUT(0x1B0301074);
  }
  __cxa_rethrow();
}

void sub_1B03010EC(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

void sub_1B0301100(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::string *p_p;
  std::string::size_type size;
  std::string __p;

  sub_1B030117C(&__p, a2, a3);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  MEMORY[0x1B5E07A08](a1, p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1B0301160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B030117C(std::string *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  std::string::value_type *v5;
  std::string::value_type v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;

  v8 = a3;
  v9 = a2;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  while (1)
  {
    result = sub_1B0301248(&v9, &v8);
    if ((result & 1) != 0)
      break;
    v5 = (std::string::value_type *)v9[3];
    if (v5 == (std::string::value_type *)v9[4])
      v6 = (*(uint64_t (**)(_QWORD *))(*v9 + 72))(v9);
    else
      v6 = *v5;
    std::string::push_back(a1, v6);
    v7 = v9[3];
    if (v7 == v9[4])
      (*(void (**)(_QWORD *))(*v9 + 80))(v9);
    else
      v9[3] = v7 + 1;
  }
  return result;
}

void sub_1B0301218(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  __cxa_rethrow();
}

void sub_1B0301234(_Unwind_Exception *a1)
{
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

uint64_t sub_1B0301248(_QWORD **a1, _QWORD **a2)
{
  _QWORD *v4;
  _BOOL4 v5;
  _QWORD *v6;
  _BOOL4 v7;

  v4 = *a1;
  if (v4)
  {
    if (v4[3] != v4[4])
    {
      v5 = 0;
      goto LABEL_8;
    }
    if ((*(unsigned int (**)(_QWORD *))(*v4 + 72))(v4) != -1)
    {
      v5 = *a1 == 0;
      goto LABEL_8;
    }
    *a1 = 0;
  }
  v5 = 1;
LABEL_8:
  v6 = *a2;
  if (!*a2)
    goto LABEL_14;
  if (v6[3] == v6[4])
  {
    if ((*(unsigned int (**)(_QWORD *))(*v6 + 72))(v6) != -1)
    {
      v7 = *a2 == 0;
      return v5 ^ v7 ^ 1u;
    }
    *a2 = 0;
LABEL_14:
    v7 = 1;
    return v5 ^ v7 ^ 1u;
  }
  v7 = 0;
  return v5 ^ v7 ^ 1u;
}

uint64_t sub_1B0301300()
{
  unsigned int v0;
  uint64_t v1;
  std::random_device v3;

  v0 = atomic_load(&dword_1EEEB1BC0);
  if (v0 != -1)
    return atomic_load(&dword_1EEEB1BC0);
  sub_1B0301384(&v3);
  v1 = MEMORY[0x1B5E07B7C](&v3);
  std::random_device::~random_device(&v3);
  return v1;
}

void sub_1B030135C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  unsigned int *v12;

  std::random_device::~random_device(&a11);
  __cxa_begin_catch(a1);
  atomic_load(v12);
  __cxa_end_catch();
  JUMPOUT(0x1B0301348);
}

std::random_device *sub_1B0301384(std::random_device *a1)
{
  std::string __token;

  sub_1B02DCBB8(&__token, "/dev/urandom");
  std::random_device::random_device(a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1B03013D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03013F4()
{
  return atomic_load((unsigned int *)&unk_1EEEB28B8);
}

uint64_t sub_1B0301404(unsigned __int8 *a1, uint64_t a2, uint64_t *a3)
{
  int v3;
  uint64_t result;
  unint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  char v9;
  int v10;
  int v11;
  char v12;
  int v13;

  v3 = (char)*a1;
  if ((v3 & 0x80000000) == 0)
  {
    *a3 = 1;
    return *a1;
  }
  v5 = a2 - (_QWORD)a1;
  if ((unint64_t)(a2 - (_QWORD)a1) >= 2)
  {
    if ((v3 & 0xE0) == 0xC0)
    {
      v6 = a1[1];
      if (v6 <= -65)
      {
        result = v6 & 0x3F | ((v3 & 0x1F) << 6);
        if (result >= 0x80)
        {
          v7 = 2;
LABEL_8:
          *a3 = v7;
          return result;
        }
      }
    }
    else if (v5 >= 3)
    {
      if ((v3 & 0xF0) == 0xE0)
      {
        v8 = (char)a1[1];
        if (v8 <= -65)
        {
          v9 = a1[2];
          if (v9 <= -65)
          {
            result = v9 & 0x3F | ((v8 & 0x3F) << 6) & 0xFFF | ((v3 & 0xF) << 12);
            if (result >= 0x800
              && (((v3 & 0xF) << 12) - 57344 < 0x102000u || result >> 11 <= 0x1A))
            {
              v7 = 3;
              goto LABEL_8;
            }
          }
        }
      }
      else if (v5 >= 4 && (v3 & 0xF8) == 0xF0)
      {
        v10 = (char)a1[1];
        if (v10 <= -65)
        {
          v11 = (char)a1[2];
          if (v11 <= -65)
          {
            v12 = a1[3];
            if (v12 <= -65)
            {
              v13 = ((v3 & 7) << 18) | ((v10 & 0x3F) << 12);
              result = v12 & 0x3F | ((v11 & 0x3F) << 6) | v13;
              if (result >= 0x10000 && (v13 - 57344) < 0x102000)
              {
                v7 = 4;
                goto LABEL_8;
              }
            }
          }
        }
      }
    }
  }
  *a3 = 1;
  return 65533;
}

uint64_t sub_1B030154C()
{
  uint64_t (*v0)(_QWORD);
  _DWORD *v2;
  uint64_t (*v3)(_QWORD);
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;

  v0 = off_1EEEB1E88;
  if ((*(_BYTE *)off_1EEEB1E88(&off_1EEEB1E88) & 1) == 0)
  {
    sub_1B0301300();
    v2 = (_DWORD *)off_1EEEB1E70(&off_1EEEB1E70);
    *v2 = v4;
    do
    {
      v5 = v3(&off_1EEEB1E70);
      *(_DWORD *)(v5 + 4 * v7) = v6;
    }
    while (v7 != 623);
    *(_QWORD *)(v3(&off_1EEEB1E70) + 2496) = 0;
    *(_BYTE *)v0(&off_1EEEB1E88) = 1;
  }
  return off_1EEEB1E70(&off_1EEEB1E70);
}

uint64_t sub_1B0301600(int a1)
{
  size_t v1;
  _QWORD *v2;
  _QWORD v4[11];
  char v5;
  uint64_t v6;
  char __strerrbuf[1024];
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  strerror_r(a1, __strerrbuf, 0x3FFuLL);
  sub_1B02D685C((uint64_t)v4);
  v1 = strlen(__strerrbuf);
  v2 = sub_1B02D7994(v4, (uint64_t)__strerrbuf, v1);
  sub_1B02D7994(v2, (uint64_t)" Error #", 8);
  std::ostream::operator<<();
  std::stringbuf::str();
  v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  v4[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v5 < 0)
    operator delete((void *)v4[9]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](&v6);
}

void sub_1B0301710(_Unwind_Exception *exception_object)
{
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B030172C(uint64_t a1, unint64_t a2)
{
  if (!a2)
    sub_1B0301924();
  return (a1 + a2 - 1) / a2 * a2;
}

void sub_1B0301750(std::string *this)
{
  std::string::size_type size;
  std::string::size_type v3;

  LOBYTE(size) = *((_BYTE *)&this->__r_.__value_.__s + 23);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if ((size & 3) != 0)
  {
    do
    {
      std::string::push_back(this, 0);
      LOBYTE(v3) = *((_BYTE *)&this->__r_.__value_.__s + 23);
      if ((v3 & 0x80u) != 0)
        v3 = this->__r_.__value_.__l.__size_;
    }
    while ((v3 & 3) != 0);
  }
}

_QWORD *sub_1B03017B0@<X0>(_QWORD *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  _QWORD *v7;
  unsigned int v9;
  _QWORD v10[11];
  char v11;
  uint64_t v12;

  v4 = a1[1];
  v5 = v4 >= a2;
  v6 = v4 - a2;
  if (v5)
  {
    *a1 += a2;
    a1[1] = v6;
    return sub_1B0303128(a3);
  }
  else
  {
    v9 = 13;
    v7 = (_QWORD *)sub_1B02D685C((uint64_t)v10);
    sub_1B02D7994(v7, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/src/util.cc", 63);
    sub_1B02D7994(v10, (uint64_t)"(", 1);
    std::ostream::operator<<();
    sub_1B02D7994(v10, (uint64_t)") [", 3);
    sub_1B02D7994(v10, (uint64_t)"string.size() >= size", 21);
    sub_1B02D7994(v10, (uint64_t)"] ", 2);
    sub_1B02D4430(&v9, (uint64_t)a3);
    v10[0] = *MEMORY[0x1E0DE4F60];
    *(_QWORD *)((char *)v10 + *(_QWORD *)(v10[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
    v10[1] = MEMORY[0x1E0DE4FB8] + 16;
    if (v11 < 0)
      operator delete((void *)v10[9]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (_QWORD *)MEMORY[0x1B5E07C60](&v12);
  }
}

void sub_1B030190C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02D44BC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B0301924()
{
  __assert_rtn("RoundUp", "util.cc", 276, "multiple");
}

uint64_t sub_1B030194C(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;

  v4 = (_QWORD *)sub_1B02F0228(a1);
  *v4 = &off_1E60CC4B8;
  v4[1] = a2 + 16;
  sub_1B02D4AE8((uint64_t)v4);
  return a1;
}

void sub_1B0301988(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B02D460C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B03019A0(uint64_t a1, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  _QWORD *result;

  result = (_QWORD *)sub_1B02D3910(a1, a2, a3, a4);
  *result = &off_1E60CC4B8;
  return result;
}

void sub_1B03019C4(uint64_t a1)
{
  sub_1B02D460C(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B03019E8(uint64_t *a1@<X0>, _BYTE *a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>, float a5@<S0>)
{
  int v8;
  int v9;
  int v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  int **v26;
  char *v27;
  uint64_t v28;
  int *v29;
  uint64_t v30;
  uint64_t v31;
  int **v32;
  int **v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  float v37;
  float v38;
  int **v39;
  int v40;
  uint64_t v41;
  _DWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  char *v48;
  char *v49;
  uint64_t v50;
  _QWORD *v51;
  __int128 *v52;
  uint64_t v53;
  int v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v69[5];
  uint64_t (**v70)();
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  _OWORD v75[2];
  int v76;
  void *__p;
  char *v78;
  char *v79;
  void *v80;
  char *v81;
  uint64_t v82;
  _QWORD v83[3];
  _QWORD *v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t (***__return_ptr)()))(*a1 + 16))(&v70);
  if (v70)
  {
    sub_1B0303130((uint64_t *)&v70);
LABEL_3:
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  sub_1B0303130((uint64_t *)&v70);
  if (!a3)
    goto LABEL_3;
  v80 = 0;
  v81 = 0;
  v82 = 0;
  __p = 0;
  v78 = 0;
  v79 = 0;
  if (a3 >> 59)
    sub_1B02D7758();
  v8 = 0;
  __p = operator new(32 * a3);
  v78 = (char *)__p;
  v79 = (char *)__p + 32 * a3;
  memset(v75, 0, sizeof(v75));
  v76 = 1065353216;
  v70 = &off_1E60CC6F8;
  v71 = 0u;
  v72 = 0u;
  v73 = 0;
  v74 = 256;
  v69[0] = (uint64_t)a1;
  v69[1] = (uint64_t)&v70;
  v69[2] = (uint64_t)&__p;
  v69[3] = (uint64_t)&v80;
  v69[4] = (uint64_t)v75;
  do
  {
    v86 = 0uLL;
    v9 = sub_1B02DC3C4(a1[2], a2, a3, (BOOL *)&v85 + 8);
    *(_QWORD *)&v86 = a2;
    *((_QWORD *)&v86 + 1) = v9;
    a3 -= v9;
    if (a3)
      v10 = v8 + 1;
    else
      v10 = -1;
    LODWORD(v85) = v8 - 1;
    DWORD1(v85) = v10;
    v11 = v78;
    if (v78 >= v79)
    {
      v14 = (char *)__p;
      v15 = (v78 - (_BYTE *)__p) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        sub_1B02D7758();
      v17 = v79 - (_BYTE *)__p;
      if ((v79 - (_BYTE *)__p) >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          sub_1B02D72AC();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v86;
      v21 = &v19[32 * v15];
      *(_OWORD *)v21 = v85;
      *((_OWORD *)v21 + 1) = v20;
      v22 = v21;
      if (v11 != v14)
      {
        do
        {
          v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        v11 = v14;
      }
      v24 = &v19[32 * v18];
      v13 = v21 + 32;
      __p = v22;
      v78 = v21 + 32;
      v79 = v24;
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v86;
      *(_OWORD *)v78 = v85;
      *((_OWORD *)v11 + 1) = v12;
      v13 = v11 + 32;
    }
    a2 += v9;
    ++v8;
    v78 = v13;
  }
  while (a3);
  if (__p == v13)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    goto LABEL_76;
  }
  if ((unint64_t)(v13 - (_BYTE *)__p) >= 0x21)
  {
    v25 = 1;
    do
    {
      sub_1B0302188(v69, v25 - 1, v25);
      ++v25;
    }
    while (v25 < (v78 - (_BYTE *)__p) >> 5);
  }
  v26 = (int **)v80;
  v27 = v81;
  if (v80 != v81)
  {
    v28 = 0;
    do
    {
      v29 = *v26;
      if (v27 - (char *)v26 >= 9)
      {
        v30 = 0;
        v31 = (v27 - (char *)v26) >> 3;
        v32 = v26;
        do
        {
          v33 = v32;
          v32 += v30 + 1;
          v34 = 2 * v30;
          v30 = (2 * v30) | 1;
          v35 = v34 + 2;
          if (v35 < v31)
          {
            v36 = v32[1];
            v37 = *((float *)*v32 + 2);
            v38 = *((float *)v36 + 2);
            if (v37 < v38 || v37 == v38 && **v32 > *v36)
            {
              ++v32;
              v30 = v35;
            }
          }
          *v33 = *v32;
        }
        while (v30 <= (uint64_t)((unint64_t)(v31 - 2) >> 1));
        v39 = (int **)(v27 - 8);
        if (v32 == v39)
        {
          *v32 = v29;
        }
        else
        {
          *v32 = *v39;
          *v39 = v29;
          sub_1B0302674((uint64_t)v26, (uint64_t)(v32 + 1), v32 + 1 - v26);
        }
      }
      v81 -= 8;
      v40 = *v29;
      v41 = *v29;
      v42 = __p;
      v43 = *((_QWORD *)__p + 4 * v41 + 3);
      if (!v43)
        goto LABEL_58;
      v44 = v29[1];
      v45 = *((_QWORD *)__p + 4 * v44 + 3);
      if (!v45)
        goto LABEL_58;
      v46 = v45 + v43;
      if (v46 != *((_QWORD *)v29 + 2))
        goto LABEL_58;
      if (a5 > 0.0)
      {
        if (a5 >= 1.0)
          goto LABEL_58;
        if (!v28)
          v28 = sub_1B030154C();
        v47 = sub_1B02EC618(v28);
        if (((double)v47 + (double)sub_1B02EC618(v28) * 4294967300.0) * 5.42101086e-20 + 0.0 < a5)
          goto LABEL_58;
        v42 = __p;
        v40 = *v29;
        v44 = v29[1];
        v41 = *v29;
        v46 = *((_QWORD *)__p + 4 * v44 + 3) + *((_QWORD *)__p + 4 * v41 + 3);
      }
      v48 = (char *)&v42[8 * v41];
      v49 = (char *)&v42[8 * v44];
      *((_QWORD *)v48 + 3) = v46;
      *((_DWORD *)v48 + 1) = *((_DWORD *)v49 + 1);
      v50 = *((unsigned int *)v49 + 1);
      if ((v50 & 0x80000000) == 0)
        v42[8 * v50] = v40;
      *((_QWORD *)v49 + 2) = "";
      *((_QWORD *)v49 + 3) = 0;
      sub_1B0302188(v69, *((_DWORD *)__p + 8 * v41), v40);
      sub_1B0302188(v69, *v29, *((_DWORD *)__p + 8 * *v29 + 1));
LABEL_58:
      v26 = (int **)v80;
      v27 = v81;
    }
    while (v80 != v81);
  }
  v84 = 0;
  v51 = operator new(0x20uLL);
  *v51 = &off_1E60CD1C0;
  v51[1] = a1;
  v51[2] = v83;
  v51[3] = v75;
  *((_QWORD *)&v86 + 1) = v51;
  sub_1B0302EA4(&v85, v83);
  v52 = (__int128 *)*((_QWORD *)&v86 + 1);
  if (*((__int128 **)&v86 + 1) == &v85)
  {
    v53 = 4;
    v52 = &v85;
  }
  else
  {
    if (!*((_QWORD *)&v86 + 1))
      goto LABEL_65;
    v53 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v52 + 8 * v53))();
LABEL_65:
  v54 = 0;
  v55 = (_QWORD *)MEMORY[0x1E0DE4A50];
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  do
  {
    if (v54 < 0)
    {
      LOBYTE(v85) = 1;
      v56 = sub_1B02D7994(v55, (uint64_t)"bpe_model.cc", 12);
      sub_1B02D7994(v56, (uint64_t)"(", 1);
      v57 = (_QWORD *)std::ostream::operator<<();
      v58 = sub_1B02D7994(v57, (uint64_t)") [", 3);
      v59 = sub_1B02D7994(v58, (uint64_t)"(index) >= (0)", 14);
      sub_1B02D7994(v59, (uint64_t)"] ", 2);
      sub_1B02D6948(&v85);
    }
    v60 = __p;
    if (v54 >= (int)((unint64_t)(v78 - (_BYTE *)__p) >> 5))
    {
      LOBYTE(v85) = 1;
      v61 = sub_1B02D7994(v55, (uint64_t)"bpe_model.cc", 12);
      sub_1B02D7994(v61, (uint64_t)"(", 1);
      v62 = (_QWORD *)std::ostream::operator<<();
      v63 = sub_1B02D7994(v62, (uint64_t)") [", 3);
      v64 = sub_1B02D7994(v63, (uint64_t)"(index) < (static_cast<int>(symbols.size()))", 44);
      sub_1B02D7994(v64, (uint64_t)"] ", 2);
      sub_1B02D6948(&v85);
      v60 = __p;
    }
    sub_1B0302598((uint64_t)v83, v60[4 * v54 + 2], v60[4 * v54 + 3], (uint64_t)a4);
    v54 = *((_DWORD *)__p + 8 * v54 + 1);
  }
  while (v54 != -1);
  v65 = v84;
  if (v84 == v83)
  {
    v66 = 4;
    v65 = v83;
    goto LABEL_75;
  }
  if (v84)
  {
    v66 = 5;
LABEL_75:
    (*(void (**)(void))(*v65 + 8 * v66))();
  }
LABEL_76:
  sub_1B03025D8(&v70);
  sub_1B02EF468((uint64_t)v75);
  if (__p)
  {
    v78 = (char *)__p;
    operator delete(__p);
  }
  if (v80)
  {
    v81 = (char *)v80;
    operator delete(v80);
  }
}

void sub_1B03020C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  sub_1B03025D8(&a16);
  sub_1B02EF468((uint64_t)&a23);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a32)
  {
    a33 = (uint64_t)a32;
    operator delete(a32);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1B0302188(uint64_t *a1, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  unsigned __int8 *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  uint64_t *v54;
  char *v55;
  uint64_t v56;
  __n128 result;
  uint64_t v58;
  uint64_t v59;
  __n128 *v60;
  void *v61;
  unsigned int v62;
  uint64_t v63;
  __n128 v64;
  __n128 v65;
  _QWORD v66[2];
  _OWORD *v67;

  if (a2 == -1)
    return result;
  if (a3 == -1)
    return result;
  v6 = a2;
  v7 = *(_QWORD *)a1[2];
  if (*(_BYTE *)(v7 + 32 * a2 + 8))
    return result;
  v8 = a3;
  v9 = v7 + 32 * a3;
  if (*(_BYTE *)(v9 + 8))
    return result;
  v10 = *a1;
  v11 = v7 + 32 * a2;
  v12 = *(_BYTE **)(v11 + 16);
  v13 = *(_QWORD *)(v9 + 24) + *(_QWORD *)(v11 + 24);
  v66[0] = v12;
  v66[1] = v13;
  v14 = *(unsigned int **)(v10 + 40);
  v15 = *v14;
  if (v13)
  {
    v16 = 0;
    v17 = v13;
    while (1)
    {
      v18 = *v12++;
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v18;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v18)
        return result;
      if (!--v17)
        goto LABEL_17;
    }
  }
  v19 = *v12;
  if (*v12)
  {
    v16 = 0;
    v20 = v12 + 1;
    while (1)
    {
      v16 ^= (v15 >> 10 << ((v15 >> 6) & 8)) ^ v19;
      v15 = v14[v16];
      if ((v15 & 0x800000FF) != v19)
        return result;
      v21 = *v20++;
      v19 = v21;
      if (!v21)
        goto LABEL_17;
    }
  }
  v16 = 0;
LABEL_17:
  if ((v15 & 0x100) != 0)
  {
    v22 = v14[v16 ^ (v15 >> 10 << ((v15 >> 6) & 8))];
    v23 = (_QWORD *)a1[1];
    v24 = v23[5];
    v25 = v23[6];
    v26 = v23[4];
    if (v26 >= v25)
    {
      v26 = 0;
      ++v24;
      v23[4] = 0;
      v23[5] = v24;
    }
    v27 = v23[1];
    v63 = v10;
    if (v24 == (v23[2] - v27) >> 3)
    {
      v62 = v22;
      is_mul_ok(v25, 0x18uLL);
      v28 = (void *)operator new[]();
      bzero(v28, 24 * v23[6]);
      v30 = (_QWORD *)v23[2];
      v29 = v23[3];
      if ((unint64_t)v30 >= v29)
      {
        v61 = v28;
        v32 = (_QWORD *)v23[1];
        v33 = v30 - v32;
        v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 61)
          goto LABEL_60;
        v35 = v29 - (_QWORD)v32;
        if (v35 >> 2 > v34)
          v34 = v35 >> 2;
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF8)
          v36 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v36 = v34;
        v37 = v61;
        if (v36)
        {
          if (v36 >> 61)
            goto LABEL_61;
          v38 = (char *)operator new(8 * v36);
          v33 = v30 - v32;
          v37 = v61;
        }
        else
        {
          v38 = 0;
        }
        v39 = &v38[8 * v33];
        v40 = &v38[8 * v36];
        *(_QWORD *)v39 = v37;
        v31 = v39 + 8;
        if (v30 != v32)
        {
          do
          {
            v41 = *--v30;
            *((_QWORD *)v39 - 1) = v41;
            v39 -= 8;
          }
          while (v30 != v32);
          v30 = (_QWORD *)v23[1];
        }
        v23[1] = v39;
        v23[2] = v31;
        v23[3] = v40;
        v22 = v62;
        if (v30)
          operator delete(v30);
      }
      else
      {
        *v30 = v28;
        v31 = v30 + 1;
        v22 = v62;
      }
      v23[2] = v31;
      v27 = v23[1];
      v26 = v23[4];
      v24 = v23[5];
      v10 = v63;
    }
    v42 = *(_QWORD *)(v27 + 8 * v24) + 24 * v26;
    v23[4] = v26 + 1;
    *(_DWORD *)v42 = a2;
    *(_DWORD *)(v42 + 4) = a3;
    v43 = v22 & 0x7FFFFFFF;
    *(float *)(v42 + 8) = (*(float (**)(uint64_t))(*(_QWORD *)v10 + 136))(v10);
    *(_QWORD *)(v42 + 16) = v13;
    v44 = (uint64_t *)a1[3];
    v46 = (_QWORD *)v44[1];
    v45 = v44[2];
    if ((unint64_t)v46 < v45)
    {
      *v46 = v42;
      v47 = (uint64_t)(v46 + 1);
LABEL_58:
      v44[1] = v47;
      sub_1B0302674(*v44, v47, (v47 - *v44) >> 3);
      if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 8) + 128))(*(_QWORD *)(v10 + 8), v43))
      {
        v58 = *(_QWORD *)a1[2];
        v64 = *(__n128 *)(v58 + 32 * v6 + 16);
        v65 = *(__n128 *)(v58 + 32 * v8 + 16);
        v59 = a1[4];
        v67 = v66;
        v60 = (__n128 *)sub_1B030270C(v59, (uint64_t)v66, (uint64_t)&unk_1B03B0E24, &v67);
        result = v64;
        v60[2] = v64;
        v60[3] = v65;
      }
      return result;
    }
    v48 = *v44;
    v49 = ((uint64_t)v46 - *v44) >> 3;
    v50 = v49 + 1;
    if (!((unint64_t)(v49 + 1) >> 61))
    {
      v51 = v45 - v48;
      if (v51 >> 2 > v50)
        v50 = v51 >> 2;
      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
        v52 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v52 = v50;
      if (!v52)
      {
        v53 = 0;
        goto LABEL_51;
      }
      if (!(v52 >> 61))
      {
        v53 = (char *)operator new(8 * v52);
LABEL_51:
        v54 = (uint64_t *)&v53[8 * v49];
        v55 = &v53[8 * v52];
        *v54 = v42;
        v47 = (uint64_t)(v54 + 1);
        if (v46 == (_QWORD *)v48)
        {
          v10 = v63;
        }
        else
        {
          v10 = v63;
          do
          {
            v56 = *--v46;
            *--v54 = v56;
          }
          while (v46 != (_QWORD *)v48);
          v46 = (_QWORD *)*v44;
        }
        *v44 = (uint64_t)v54;
        v44[1] = v47;
        v44[2] = (uint64_t)v55;
        if (v46)
          operator delete(v46);
        goto LABEL_58;
      }
LABEL_61:
      sub_1B02D72AC();
    }
LABEL_60:
    sub_1B02D7758();
  }
  return result;
}

uint64_t sub_1B0302598(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  _QWORD v7[2];

  v7[0] = a2;
  v7[1] = a3;
  v6 = a4;
  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
    sub_1B03029C8();
  return (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)v4 + 48))(v4, v7, &v6);
}

_QWORD *sub_1B03025D8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;

  *a1 = &off_1E60CC6F8;
  v2 = (_QWORD *)a1[1];
  v3 = (_QWORD *)a1[2];
  if (v2 != v3)
  {
    do
    {
      if (*v2)
        MEMORY[0x1B5E07CB4](*v2, 0x1000C801E56706BLL);
      ++v2;
    }
    while (v2 != v3);
    v2 = (_QWORD *)a1[1];
  }
  if (v2)
  {
    a1[2] = v2;
    operator delete(v2);
  }
  return a1;
}

uint64_t sub_1B0302654(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, float))(*(_QWORD *)a1 + 56))(a1, 0.0);
}

uint64_t sub_1B0302664()
{
  return 1;
}

uint64_t sub_1B030266C()
{
  return 0;
}

uint64_t sub_1B0302674(uint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  float v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  _DWORD *v12;
  float v13;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v4 = v3 >> 1;
    v5 = result + 8 * (v3 >> 1);
    v6 = *(_DWORD **)v5;
    v7 = *(_QWORD *)(a2 - 8);
    v8 = *(float *)(*(_QWORD *)v5 + 8);
    v9 = *(float *)(v7 + 8);
    if (v8 < v9 || v8 == v9 && *v6 > *(_DWORD *)v7)
    {
      *(_QWORD *)(a2 - 8) = v6;
      if (v3 >= 2)
      {
        while (1)
        {
          v11 = v4 - 1;
          v4 = (v4 - 1) >> 1;
          v10 = result + 8 * v4;
          v12 = *(_DWORD **)v10;
          v13 = *(float *)(*(_QWORD *)v10 + 8);
          if (v13 >= v9 && (v13 != v9 || *v12 <= *(_DWORD *)v7))
            break;
          *(_QWORD *)v5 = v12;
          v5 = result + 8 * v4;
          if (v11 <= 1)
            goto LABEL_11;
        }
      }
      v10 = v5;
LABEL_11:
      *(_QWORD *)v10 = v7;
    }
  }
  return result;
}

void *sub_1B030270C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v4;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  unint64_t v13;
  void **v14;
  void *v15;
  uint64_t *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  size_t v25;
  uint64_t v26;
  _QWORD *v27;
  unint64_t v28;

  v8 = (_QWORD *)(a1 + 24);
  v9 = sub_1B0302980(a1 + 24, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    v13 = v12.u32[0];
    if (v12.u32[0] > 1uLL)
    {
      v4 = v9;
      if (v9 >= v11)
        v4 = v9 % v11;
    }
    else
    {
      v4 = (v11 - 1) & v9;
    }
    v14 = *(void ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v18 = a2;
        v16 = *(uint64_t **)a2;
        v17 = *(_QWORD *)(v18 + 8);
        do
        {
          v19 = *((_QWORD *)v15 + 1);
          if (v19 == v10)
          {
            if (*((_QWORD *)v15 + 3) == v17 && !memcmp(*((const void **)v15 + 2), v16, v17))
              return v15;
          }
          else
          {
            if (v13 > 1)
            {
              if (v19 >= v11)
                v19 %= v11;
            }
            else
            {
              v19 &= v11 - 1;
            }
            if (v19 != v4)
              break;
          }
          v15 = *(void **)v15;
        }
        while (v15);
      }
    }
  }
  v15 = operator new(0x40uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v10;
  *((_OWORD *)v15 + 1) = **a4;
  *((_OWORD *)v15 + 2) = 0u;
  *((_OWORD *)v15 + 3) = 0u;
  v20 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v21 = *(float *)(a1 + 32);
  if (!v11 || (float)(v21 * (float)v11) < v20)
  {
    v22 = 1;
    if (v11 >= 3)
      v22 = (v11 & (v11 - 1)) != 0;
    v23 = v22 | (2 * v11);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      v25 = v24;
    else
      v25 = v23;
    sub_1B02D72D4(a1, v25);
    v11 = *(_QWORD *)(a1 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
        v4 = v10 % v11;
      else
        v4 = v10;
    }
    else
    {
      v4 = (v11 - 1) & v10;
    }
  }
  v26 = *(_QWORD *)a1;
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  if (v27)
  {
    *(_QWORD *)v15 = *v27;
LABEL_40:
    *v27 = v15;
    goto LABEL_41;
  }
  *(_QWORD *)v15 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v15;
  *(_QWORD *)(v26 + 8 * v4) = a1 + 16;
  if (*(_QWORD *)v15)
  {
    v28 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v28 >= v11)
        v28 %= v11;
    }
    else
    {
      v28 &= v11 - 1;
    }
    v27 = (_QWORD *)(*(_QWORD *)a1 + 8 * v28);
    goto LABEL_40;
  }
LABEL_41:
  ++*v8;
  return v15;
}

void sub_1B030296C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1B0302980(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  char v4;

  return sub_1B02D6D9C((uint64_t)&v4, a2, a3);
}

void sub_1B03029A4(_QWORD *a1)
{
  sub_1B03025D8(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B03029C8()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
  *exception = &unk_1E60CD4A0;
  __cxa_throw(exception, (struct type_info *)&unk_1E60CB680, (void (*)(void *))std::exception::~exception);
}

void sub_1B0302A00(std::exception *a1)
{
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0302A28()
{
  JUMPOUT(0x1B5E07CD8);
}

__n128 sub_1B0302A3C(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E60CD1C0;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1B0302A7C(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E60CD1C0;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1B0302AA4(uint64_t a1, _QWORD *a2, void ***a3)
{
  uint64_t v4;
  void **v5;
  _QWORD **v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  char *v31;
  __int128 v32;
  __int128 v33;

  v4 = a2[1];
  v5 = *a3;
  *(_QWORD *)&v33 = *a2;
  *((_QWORD *)&v33 + 1) = v4;
  v6 = *(_QWORD ***)(a1 + 8);
  v7 = ((uint64_t (*)(_QWORD **, _QWORD, uint64_t))(*v6)[14])(v6, v33, v4);
  if ((_DWORD)v7 == -1 || ((*(uint64_t (**)(_QWORD *, uint64_t))(*v6[1] + 128))(v6[1], v7) & 1) == 0)
  {
    v10 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v10)
    {
      v13 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v15 = 0xAAAAAAAAAAAAAAABLL * ((v10 - (_BYTE *)*v5) >> 3);
        if (2 * v15 > v14)
          v14 = 2 * v15;
        if (v15 >= 0x555555555555555)
          v16 = 0xAAAAAAAAAAAAAAALL;
        else
          v16 = v14;
        v17 = (char *)sub_1B02D776C((uint64_t)(v5 + 2), v16);
        v18 = &v17[24 * v13];
        v20 = &v17[24 * v19];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v22 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v23 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v23;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v22);
        goto LABEL_15;
      }
LABEL_30:
      sub_1B02D7758();
    }
  }
  else
  {
    v8 = sub_1B0302D44(*(_QWORD **)(a1 + 24), (uint64_t)&v33);
    if (v8)
    {
      v9 = (uint64_t *)v8;
      sub_1B0302598(*(_QWORD *)(a1 + 16), v9[4], v9[5], (uint64_t)v5);
      sub_1B0302598(*(_QWORD *)(a1 + 16), v9[6], v9[7], (uint64_t)v5);
      return;
    }
    v24 = (char *)v5[2];
    v11 = (char *)v5[1];
    if (v11 >= v24)
    {
      v25 = 0xAAAAAAAAAAAAAAABLL * ((v11 - (_BYTE *)*v5) >> 3);
      v26 = v25 + 1;
      if (v25 + 1 <= 0xAAAAAAAAAAAAAAALL)
      {
        v27 = 0xAAAAAAAAAAAAAAABLL * ((v24 - (_BYTE *)*v5) >> 3);
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x555555555555555)
          v28 = 0xAAAAAAAAAAAAAAALL;
        else
          v28 = v26;
        v29 = (char *)sub_1B02D776C((uint64_t)(v5 + 2), v28);
        v18 = &v29[24 * v25];
        v20 = &v29[24 * v30];
        *(_OWORD *)v18 = v33;
        *((_DWORD *)v18 + 4) = v7;
        v12 = v18 + 24;
        v31 = (char *)*v5;
        v21 = (char *)v5[1];
        if (v21 == *v5)
          goto LABEL_16;
        do
        {
          v32 = *(_OWORD *)(v21 - 24);
          *((_QWORD *)v18 - 1) = *((_QWORD *)v21 - 1);
          *(_OWORD *)(v18 - 24) = v32;
          v18 -= 24;
          v21 -= 24;
        }
        while (v21 != v31);
LABEL_15:
        v21 = (char *)*v5;
LABEL_16:
        *v5 = v18;
        v5[1] = v12;
        v5[2] = v20;
        if (v21)
          operator delete(v21);
        goto LABEL_18;
      }
      goto LABEL_30;
    }
  }
  *(_OWORD *)v11 = v33;
  *((_DWORD *)v11 + 4) = v7;
  v12 = v11 + 24;
LABEL_18:
  v5[1] = v12;
}

uint64_t sub_1B0302CFC(uint64_t a1, uint64_t a2)
{
  if (sub_1B0302E58(a2, (uint64_t)&unk_1E60CB900))
    return a1 + 8;
  else
    return 0;
}

void *sub_1B0302D38()
{
  return &unk_1E60CB900;
}

uint64_t **sub_1B0302D44(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t *v12;
  size_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = sub_1B0302980((uint64_t)(a1 + 3), *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v14 = a2;
    v12 = *(uint64_t **)a2;
    v13 = *(_QWORD *)(v14 + 8);
    do
    {
      v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13))
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(_QWORD *)&v5)
            v15 %= *(_QWORD *)&v5;
        }
        else
        {
          v15 &= *(_QWORD *)&v5 - 1;
        }
        if (v15 != v9)
          return 0;
      }
      v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

BOOL sub_1B0302E58(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v2 == v3)
    return 1;
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3))
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  return 0;
}

_QWORD *sub_1B0302EA4(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x1E0C80C00];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_1B030300C(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_1B0303828(a1);
}

void sub_1B0303018()
{
  _QWORD *v0;
  _QWORD *v1;

  if (!dword_1EEEB2CD8)
  {
    v0 = sub_1B0303060(MEMORY[0x1E0DE4A50], "Program terminated with an unrecoverable error.");
    v1 = sub_1B0303094(v0);
    sub_1B0303124(v1);
    exit(-1);
  }
  dword_1EEEB2CD8 = 2;
}

_QWORD *sub_1B0303060(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  return sub_1B02D7994(a1, (uint64_t)__s, v4);
}

_QWORD *sub_1B0303094(_QWORD *a1)
{
  const std::locale::facet *v2;
  std::locale v4;

  std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(_QWORD *)(*a1 - 24)));
  v2 = std::locale::use_facet(&v4, MEMORY[0x1E0DE4A90]);
  ((void (*)(const std::locale::facet *, uint64_t))v2->__vftable[2].~facet_0)(v2, 10);
  std::locale::~locale(&v4);
  std::ostream::put();
  std::ostream::flush();
  return a1;
}

void sub_1B0303110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0303128(_QWORD *result)
{
  *result = 0;
  return result;
}

uint64_t *sub_1B0303130(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
    sub_1B0303508((uint64_t)a1, v2);
  return a1;
}

uint64_t sub_1B0303164(uint64_t a1, int a2, const void *a3, size_t a4)
{
  uint64_t v8;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __dst;
  unint64_t v16;

  v8 = operator new();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 0;
  *(_QWORD *)(v8 + 8) = 0;
  *(_QWORD *)a1 = v8;
  *(_DWORD *)v8 = a2;
  if (a4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (a4 >= 0x17)
  {
    v10 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17)
      v10 = a4 | 7;
    v11 = v10 + 1;
    p_dst = (__int128 *)operator new(v10 + 1);
    *((_QWORD *)&__dst + 1) = a4;
    v16 = v11 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = a4;
  p_dst = &__dst;
  if (a4)
LABEL_8:
    memmove(p_dst, a3, a4);
  *((_BYTE *)p_dst + a4) = 0;
  v12 = *(_QWORD *)a1 + 8;
  if (*(char *)(*(_QWORD *)a1 + 31) < 0)
    operator delete(*(void **)v12);
  v13 = __dst;
  *(_QWORD *)(v12 + 16) = v16;
  *(_OWORD *)v12 = v13;
  return a1;
}

void sub_1B030326C(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v3;

  v3 = *v1;
  *v1 = 0;
  if (v3)
    sub_1B0303508((uint64_t)v1, v3);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B0303290(uint64_t *a1, _DWORD **a2)
{
  uint64_t v4;
  _DWORD *v5;
  _BYTE *v6;
  __int128 v7;

  if (*a2)
  {
    v4 = operator new();
    v5 = *a2;
    *(_DWORD *)v4 = **a2;
    v6 = (_BYTE *)(v4 + 8);
    if (*((char *)v5 + 31) < 0)
    {
      sub_1B02EB0A8(v6, *((void **)v5 + 1), *((_QWORD *)v5 + 2));
    }
    else
    {
      v7 = *(_OWORD *)(v5 + 2);
      *(_QWORD *)(v4 + 24) = *((_QWORD *)v5 + 3);
      *(_OWORD *)v6 = v7;
    }
  }
  else
  {
    v4 = 0;
  }
  *a1 = v4;
  return a1;
}

void sub_1B030331C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

void sub_1B0303344(uint64_t *a1, _DWORD **a2)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  _BYTE *v7;
  __int128 v8;

  v3 = *a1;
  if ((_DWORD *)*a1 != *a2)
  {
    if (*a2)
    {
      v5 = operator new();
      v6 = *a2;
      *(_DWORD *)v5 = **a2;
      v7 = (_BYTE *)(v5 + 8);
      if (*((char *)v6 + 31) < 0)
      {
        sub_1B02EB0A8(v7, *((void **)v6 + 1), *((_QWORD *)v6 + 2));
      }
      else
      {
        v8 = *(_OWORD *)(v6 + 2);
        *(_QWORD *)(v5 + 24) = *((_QWORD *)v6 + 3);
        *(_OWORD *)v7 = v8;
      }
      v3 = *a1;
    }
    else
    {
      v5 = 0;
    }
    *a1 = v5;
    if (v3)
      sub_1B0303508((uint64_t)a1, v3);
  }
}

void sub_1B03033F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x1012C40849EBCB1);
  _Unwind_Resume(a1);
}

const char *sub_1B0303418(uint64_t *a1)
{
  uint64_t v1;
  const char *result;

  v1 = *a1;
  if (!*a1)
    return "";
  result = (const char *)(v1 + 8);
  if (*(char *)(v1 + 31) < 0)
    return *(const char **)result;
  return result;
}

std::string *sub_1B0303444@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  _DWORD *v3;
  unsigned int v5;
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;

  v3 = *(_DWORD **)a1;
  if (!*(_QWORD *)a1)
    return (std::string *)sub_1B02DCBB8(a2, "OK");
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v5 = *v3 - 1;
  if (v5 < 0x10)
    MEMORY[0x1B5E079FC](a2, off_1E60CDC80[v5]);
  std::string::append(a2, ": ");
  v6 = *(char *)(*(_QWORD *)a1 + 31);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)(*(_QWORD *)a1 + 8);
  else
    v7 = *(const std::string::value_type **)(*(_QWORD *)a1 + 8);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(*(_QWORD *)a1 + 31);
  else
    v8 = *(_QWORD *)(*(_QWORD *)a1 + 16);
  return std::string::append(a2, v7, v8);
}

void sub_1B03034E8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B0303508(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0)
      operator delete(*(void **)(a2 + 8));
    JUMPOUT(0x1B5E07CD8);
  }
}

_QWORD *sub_1B0303560()
{
  unsigned __int8 v0;
  pthread_key_t *v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EEEB28C8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EEEB28C8))
  {
    v2 = (pthread_key_t *)operator new();
    pthread_key_create(v2, (void (__cdecl *)(void *))sub_1B0303F3C);
    qword_1EEEB28C0 = (uint64_t)v2;
    __cxa_guard_release(&qword_1EEEB28C8);
  }
  return sub_1B0303614((pthread_key_t *)qword_1EEEB28C0);
}

void sub_1B03035DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x1000C4000313F17);
  __cxa_guard_abort(&qword_1EEEB28C8);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0303614(pthread_key_t *a1)
{
  _QWORD *v2;

  v2 = pthread_getspecific(*a1);
  if (!v2)
  {
    v2 = operator new(0x40uLL, (std::align_val_t)0x40uLL);
    *(_OWORD *)v2 = xmmword_1B03AF6D0;
    v2[2] = 0;
    pthread_setspecific(*a1, v2);
  }
  return v2;
}

uint64_t sub_1B0303680(uint64_t a1, unint64_t a2)
{
  std::string *v4;
  char v6;
  std::string v7[2];

  if (*(_QWORD *)(a1 + 16) < a2)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 111);
    v4 = sub_1B0305340(v7, "CHECK failed: n <= size_: ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v7);
  }
  return a1 + a2;
}

void sub_1B03036F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0303728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  _QWORD *v9;
  uint64_t v10;
  char v12;
  std::string v13[2];

  v6 = *(_QWORD *)(a1 + 8);
  v7 = v6 + 72;
  if (v6 + 72 > *(_QWORD *)(a1 + 16))
  {
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 398);
    v8 = sub_1B0305340(v13, "CHECK failed: (pos + ArenaImpl::kSerialArenaSize) <= (b->size()): ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
  }
  v9 = (_QWORD *)sub_1B0303680(a1, v6);
  *(_QWORD *)(a1 + 8) = v7;
  *v9 = a3;
  v9[1] = a2;
  v9[2] = a1;
  v9[5] = sub_1B0303680(a1, v7);
  v10 = sub_1B0303680(a1, *(_QWORD *)(a1 + 16));
  v9[3] = 0;
  v9[7] = 0;
  v9[8] = 0;
  v9[6] = v10;
  return v9;
}

void sub_1B03037F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0303828(void *a1)
{
  __cxa_begin_catch(a1);
  std::terminate();
}

uint64_t sub_1B0303838(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16);
}

void *sub_1B0303850(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  size_t v9;
  void *result;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  std::string v14[2];

  v5 = *(_QWORD *)(a1 + 32);
  if (a2 == -1)
  {
    if (v5)
      v7 = *(_QWORD *)v5;
    else
      v7 = 256;
  }
  else
  {
    if (v5)
      v6 = *(_QWORD *)(v5 + 8);
    else
      v6 = 0x2000;
    if (v6 >= 2 * a2)
      v7 = 2 * a2;
    else
      v7 = v6;
  }
  if (a3 >= 0xFFFFFFFFFFFFFFE8)
  {
    sub_1B0305328((uint64_t)v14, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arena.cc", 245);
    v8 = sub_1B0305340(v14, "CHECK failed: (min_bytes) <= (std::numeric_limits<size_t>::max() - kBlockHeaderSize): ");
    sub_1B0305470((uint64_t)&v13, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v14);
    v5 = *(_QWORD *)(a1 + 32);
  }
  if (v7 <= a3 + 24)
    v9 = a3 + 24;
  else
    v9 = v7;
  if (v5)
    result = (void *)(*(uint64_t (**)(size_t))(v5 + 16))(v9);
  else
    result = operator new(v9);
  v11 = (unint64_t *)(a1 + 16);
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + v9, v11));
  return result;
}

void sub_1B0303944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B030395C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;

  if (a1)
    v6 = *(_QWORD *)(a1 + 16);
  else
    v6 = -1;
  v7 = (uint64_t *)sub_1B0303850(a3, v6, a2);
  return sub_1B0303E94(v7, v8, a1, 0, 0);
}

_QWORD *sub_1B03039A4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;

  result = (_QWORD *)a1[3];
  do
  {
    if (result)
    {
      if ((unint64_t)(2 * *result) >= 0x40)
        v7 = 64;
      else
        v7 = 2 * *result;
    }
    else
    {
      v7 = 8;
    }
    result = (_QWORD *)sub_1B0303A38(a1, (16 * (_WORD)v7 + 23) & 0xFF0);
    v8 = a1[3];
    *result = v7;
    result[1] = v8;
    a1[3] = (uint64_t)result;
    a1[7] = (uint64_t)(result + 2);
    a1[8] = (uint64_t)&result[2 * v7 + 2];
  }
  while (!(16 * v7));
  result[2] = a2;
  result[3] = a3;
  a1[7] = (uint64_t)(result + 4);
  return result;
}

unint64_t sub_1B0303A38(uint64_t *a1, unint64_t a2)
{
  std::string *v4;
  unint64_t result;
  unint64_t v6;
  std::string *v7;
  char v8;
  std::string v9[2];

  if (((a2 + 7) & 0xFFFFFFFFFFFFFFF8) != a2)
  {
    sub_1B0305328((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 159);
    v4 = sub_1B0305340(v9, "CHECK failed: (internal::AlignUpTo8(n)) == (n): ");
    sub_1B0305470((uint64_t)&v8, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v9);
  }
  result = a1[5];
  v6 = a1[6];
  if (v6 < result)
  {
    sub_1B0305328((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 160);
    v7 = sub_1B0305340(v9, "CHECK failed: (limit_) >= (ptr_): ");
    sub_1B0305470((uint64_t)&v8, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v9);
    result = a1[5];
    v6 = a1[6];
  }
  if (v6 - result < a2)
    return sub_1B0303DA4(a1, a2);
  a1[5] = result + a2;
  return result;
}

void sub_1B0303B1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1B0303B3C(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;
  _QWORD *v9;

  v6 = sub_1B0303560();
  if (v6[1] == a1[3])
  {
    v7 = (uint64_t *)v6[2];
    return sub_1B0303BC4(v7, a2, a3);
  }
  v9 = sub_1B0303560();
  v7 = (uint64_t *)atomic_load(a1 + 1);
  if (v7 && (_QWORD *)v7[1] == v9)
    return sub_1B0303BC4(v7, a2, a3);
  return sub_1B0303C20(a1, a2, a3);
}

unint64_t sub_1B0303BC4(uint64_t *a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;

  v5 = sub_1B0303A38(a1, a2);
  v6 = v5;
  v7 = (unint64_t *)a1[7];
  if (v7 == (unint64_t *)a1[8])
  {
    sub_1B03039A4(a1, v5, a3);
  }
  else
  {
    *v7 = v5;
    v7[1] = a3;
    a1[7] = (uint64_t)(v7 + 2);
  }
  return v6;
}

unint64_t sub_1B0303C20(unint64_t *a1, unint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t *v7;

  v6 = sub_1B0303560();
  v7 = (uint64_t *)sub_1B0303CAC(a1, (uint64_t)v6);
  return sub_1B0303BC4(v7, a2, a3);
}

unint64_t sub_1B0303C78(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;

  v4 = sub_1B0303560();
  v5 = (uint64_t *)sub_1B0303CAC(a1, (uint64_t)v4);
  return sub_1B0303A38(v5, a2);
}

unint64_t sub_1B0303CAC(unint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char v11;
  unint64_t v12;

  v4 = atomic_load(a1);
  if (!v4)
  {
LABEL_4:
    v5 = sub_1B0303850((uint64_t)a1, -1, 0x48uLL);
    *(_OWORD *)v5 = xmmword_1B03AF6E0;
    v5[2] = v6;
    v7 = sub_1B0303728((uint64_t)v5, a2, (uint64_t)a1);
    v4 = (unint64_t)v7;
    v8 = *a1;
    v7[4] = *a1;
    v9 = __ldxr(a1);
    if (v9 == v8)
    {
      if (__stlxr((unint64_t)v7, a1))
        goto LABEL_8;
      goto LABEL_14;
    }
    __clrex();
LABEL_8:
    while (1)
    {
      v7[4] = v9;
      v10 = __ldxr(a1);
      if (v10 != v9)
        break;
      if (__stlxr((unint64_t)v7, a1))
        goto LABEL_12;
      v11 = 1;
LABEL_13:
      v9 = v10;
      if ((v11 & 1) != 0)
        goto LABEL_14;
    }
    __clrex();
LABEL_12:
    v11 = 0;
    goto LABEL_13;
  }
  while (*(_QWORD *)(v4 + 8) != a2)
  {
    v4 = *(_QWORD *)(v4 + 32);
    if (!v4)
      goto LABEL_4;
  }
LABEL_14:
  sub_1B0303560()[2] = v4;
  v12 = a1[3];
  sub_1B0303560()[1] = v12;
  atomic_store(v4, a1 + 1);
  return v4;
}

uint64_t sub_1B0303DA4(uint64_t *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;

  v4 = a1[2];
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(v4 + 16) - a1[6] + a1[5];
  v5 = sub_1B030395C(v4, a2, *a1);
  a1[2] = (uint64_t)v5;
  a1[5] = sub_1B0303680((uint64_t)v5, v5[1]);
  a1[6] = sub_1B0303680(a1[2], *(_QWORD *)(a1[2] + 16));
  return sub_1B0303A38(a1, a2);
}

unint64_t sub_1B0303E24(unint64_t *a1, unint64_t a2)
{
  _QWORD *v4;
  uint64_t *v5;
  _QWORD *v7;

  v4 = sub_1B0303560();
  if (v4[1] == a1[3])
  {
    v5 = (uint64_t *)v4[2];
    return sub_1B0303A38(v5, a2);
  }
  v7 = sub_1B0303560();
  v5 = (uint64_t *)atomic_load(a1 + 1);
  if (v5 && (_QWORD *)v5[1] == v7)
    return sub_1B0303A38(v5, a2);
  return sub_1B0303C78(a1, a2);
}

uint64_t *sub_1B0303E94(uint64_t *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v6;
  std::string *v7;
  char v9;
  std::string v10[2];

  v6 = 2;
  if (!a5)
    v6 = 0;
  *a1 = v6 | a4 | a3;
  a1[1] = 24;
  a1[2] = a2;
  if ((a3 & 3) != 0)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/arena_impl.h", 107);
    v7 = sub_1B0305340(v10, "CHECK failed: (reinterpret_cast<uintptr_t>(next) & 3) == (0u): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v10);
  }
  return a1;
}

void sub_1B0303F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0303F3C(uint64_t result)
{
  if (result)
    JUMPOUT(0x1B5E07CCCLL);
  return result;
}

unint64_t sub_1B0303F4C(_QWORD *a1)
{
  unsigned __int8 v2;
  unint64_t v3;

  v2 = atomic_load((unsigned __int8 *)&qword_1EEEB2888);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EEEB2888))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1EEEB1A08, &dword_1B02D2000);
    __cxa_guard_release(&qword_1EEEB2888);
  }
  std::mutex::lock(&stru_1EEEB1A08);
  v3 = atomic_load(a1 + 3);
  if (!v3)
  {
    sub_1B02DCB10(a1, (void *)*a1, a1[1]);
    atomic_store((unint64_t)a1, a1 + 3);
    v3 = (unint64_t)a1;
  }
  std::mutex::unlock(&stru_1EEEB1A08);
  return v3;
}

unint64_t sub_1B0303FFC(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  unint64_t result;
  unint64_t v8;
  __int128 v9;

  if (*a1 != a2)
  {
    sub_1B02F6FF0(a1);
    JUMPOUT(0x1B5E07A08);
  }
  if (!a4)
  {
    result = operator new();
    v8 = result;
    if ((*((char *)a3 + 23) & 0x80000000) == 0)
    {
      *(_OWORD *)result = *a3;
      *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
      goto LABEL_11;
    }
LABEL_10:
    result = (unint64_t)sub_1B02EB0A8((_BYTE *)result, *(void **)a3, *((_QWORD *)a3 + 1));
    goto LABEL_11;
  }
  if ((*(_BYTE *)(a4 + 24) & 1) != 0)
    (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 32), &unk_1E60CB5B0, 24);
  result = sub_1B0303B3C((unint64_t *)a4, 0x18uLL, (uint64_t)sub_1B02FFFA4);
  v8 = result;
  if (*((char *)a3 + 23) < 0)
    goto LABEL_10;
  v9 = *a3;
  *(_QWORD *)(result + 16) = *((_QWORD *)a3 + 2);
  *(_OWORD *)result = v9;
LABEL_11:
  *a1 = v8;
  return result;
}

void sub_1B0304120(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

void sub_1B0304144(uint64_t *a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*a1 == a2)
  {
    if (a4)
    {
      if ((*(_BYTE *)(a4 + 24) & 1) != 0)
      {
        v11 = a4;
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a4 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a4 + 32) + 32), &unk_1E60CB5B0, 24);
        a4 = v11;
      }
      v9 = sub_1B0303B3C((unint64_t *)a4, 0x18uLL, (uint64_t)sub_1B02FFFA4);
      v10 = *((_QWORD *)a3 + 2);
      *(_OWORD *)v9 = *a3;
      *(_QWORD *)(v9 + 16) = v10;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
      *(_QWORD *)a3 = 0;
    }
    else
    {
      v9 = operator new();
      *(_OWORD *)v9 = *a3;
      *(_QWORD *)(v9 + 16) = *((_QWORD *)a3 + 2);
      *(_QWORD *)a3 = 0;
      *((_QWORD *)a3 + 1) = 0;
      *((_QWORD *)a3 + 2) = 0;
    }
    *a1 = v9;
  }
  else
  {
    v6 = sub_1B02F6FF0(a1);
    v7 = v6;
    if (*(char *)(v6 + 23) < 0)
      operator delete(*(void **)v6);
    v8 = *a3;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v7 = v8;
    *((_BYTE *)a3 + 23) = 0;
    *(_BYTE *)a3 = 0;
  }
}

unint64_t sub_1B030424C(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  return sub_1B0303FFC(a1, (uint64_t)&qword_1EEEB2CE0, a2, a3);
}

void sub_1B0304260(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  sub_1B0304144(a1, (uint64_t)&qword_1EEEB2CE0, a2, a3);
}

unint64_t sub_1B0304274(uint64_t *a1, __int128 *a2, uint64_t a3)
{
  return sub_1B0303FFC(a1, 0, a2, a3);
}

uint64_t *sub_1B0304284(uint64_t *a1, uint64_t a2)
{
  if ((uint64_t *)*a1 == &qword_1EEEB2CE0)
    return sub_1B03042A0((uint64_t **)a1, a2);
  else
    return (uint64_t *)sub_1B02F6FF0(a1);
}

uint64_t *sub_1B03042A0(uint64_t **a1, uint64_t a2)
{
  std::string *v4;
  uint64_t *result;
  char v6;
  std::string v7[2];

  if (*a1 != &qword_1EEEB2CE0)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v4 = sub_1B0305340(v7, "CHECK failed: IsDefault(default_value): ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v7);
  }
  if (a2)
  {
    if ((*(_BYTE *)(a2 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32), &unk_1E60CB5B0, 24);
    result = (uint64_t *)sub_1B0303B3C((unint64_t *)a2, 0x18uLL, (uint64_t)sub_1B02FFFA4);
  }
  else
  {
    result = (uint64_t *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  *a1 = result;
  return result;
}

void sub_1B0304384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_1B030439C(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  if (*a1)
    return (_BYTE *)sub_1B02F6FF0(a1);
  else
    return sub_1B03043B8(a1, a3, a2);
}

_BYTE *sub_1B03043B8(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  std::string *v6;
  unint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  __int128 v10;
  char v12;
  std::string v13[2];

  if (*a1)
  {
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/arenastring.cc", 147);
    v6 = sub_1B0305340(v13, "CHECK failed: IsDefault(default_value): ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v6->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
  }
  v7 = atomic_load(a3 + 3);
  if (v7)
  {
    if (a2)
      goto LABEL_5;
  }
  else
  {
    v7 = sub_1B0303F4C(a3);
    if (a2)
    {
LABEL_5:
      if ((*(_BYTE *)(a2 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(a2 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(a2 + 32) + 32), &unk_1E60CB5B0, 24);
      v8 = (_BYTE *)sub_1B0303B3C((unint64_t *)a2, 0x18uLL, (uint64_t)sub_1B02FFFA4);
      v9 = v8;
      if (*(char *)(v7 + 23) < 0)
        goto LABEL_8;
LABEL_11:
      v10 = *(_OWORD *)v7;
      *((_QWORD *)v9 + 2) = *(_QWORD *)(v7 + 16);
      *(_OWORD *)v9 = v10;
      goto LABEL_12;
    }
  }
  v8 = (_BYTE *)operator new();
  v9 = v8;
  if ((*(char *)(v7 + 23) & 0x80000000) == 0)
    goto LABEL_11;
LABEL_8:
  sub_1B02EB0A8(v8, *(void **)v7, *(_QWORD *)(v7 + 8));
LABEL_12:
  *a1 = v9;
  return v9;
}

void sub_1B03044F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x1012C40EC159624);
  _Unwind_Resume(a1);
}

std::string *sub_1B0304530(std::string *result, _QWORD *a2)
{
  std::string *v3;
  const std::string *v4;

  if (result->__r_.__value_.__r.__words[0])
  {
    v3 = (std::string *)sub_1B02F6FF0((uint64_t *)result);
    v4 = (const std::string *)atomic_load(a2 + 3);
    if (!v4)
      v4 = (const std::string *)sub_1B0303F4C(a2);
    return std::string::operator=(v3, v4);
  }
  return result;
}

int64_t sub_1B0304588(uint64_t a1, char *a2)
{
  void *v4;
  char *v5;
  int v6;
  std::string *v7;
  std::string *v8;
  int64_t v9;
  int64_t v10;
  char *v11;
  std::string *v12;
  char v14;
  std::string v15[2];

  while (1)
  {
    v5 = *(char **)a1;
    v4 = *(void **)(a1 + 8);
    if (!v4)
    {
      v10 = v5 - a2;
      v9 = v10 + 16;
      *(_QWORD *)(a1 + 8) = a2;
      if ((((_DWORD)v10 + 16) & 0x80000000) == 0)
        return v9;
      goto LABEL_12;
    }
    v6 = (_DWORD)a2 - (_DWORD)v5;
    if (a2 <= v5)
      break;
    if (*(_BYTE *)(a1 + 56))
    {
      sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 685);
      v7 = sub_1B0305340(v15, "CHECK failed: !had_error_: ");
      sub_1B0305470((uint64_t)&v14, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v15);
    }
    if (v6 >= 17)
    {
      sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 686);
      v8 = sub_1B0305340(v15, "CHECK failed: overrun <= kSlopBytes: ");
      sub_1B0305470((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v15);
    }
    a2 = &sub_1B030471C((char **)a1)[v6];
    if (*(_BYTE *)(a1 + 56))
      return 0;
  }
  memcpy(v4, (const void *)(a1 + 16), (size_t)&a2[-a1 - 16]);
  v11 = *(char **)a1;
  *(_QWORD *)(a1 + 8) += &a2[-a1 - 16];
  v9 = v11 - a2;
  if ((((_DWORD)v11 - (_DWORD)a2) & 0x80000000) == 0)
    return v9;
LABEL_12:
  sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 700);
  v12 = sub_1B0305340(v15, "CHECK failed: s >= 0: ");
  sub_1B0305470((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
  sub_1B0305478((uint64_t)v15);
  return v9;
}

void sub_1B03046F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B030471C(char **a1)
{
  std::string *v2;
  char *v3;
  char *v4;
  char *v5;
  uint64_t v6;
  char *v7;
  std::string *v9;
  std::string::size_type v10;
  char v11;
  int v12;
  std::string v13[2];

  if (*((_BYTE *)a1 + 56))
  {
    sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 788);
    v2 = sub_1B0305340(v13, "CHECK failed: !had_error_: ");
    sub_1B0305470((uint64_t)&v12, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v13);
  }
  if (a1[6])
  {
    v3 = (char *)(a1 + 2);
    v5 = *a1;
    v4 = a1[1];
    if (v4)
    {
      memcpy(v4, a1 + 2, v5 - v3);
      v12 = 0;
      do
      {
        v13[0].__r_.__value_.__r.__words[0] = 0;
        if (((*(uint64_t (**)(char *, std::string *, int *))(*(_QWORD *)a1[6] + 16))(a1[6], v13, &v12) & 1) == 0)
        {
          *((_BYTE *)a1 + 56) = 1;
          goto LABEL_14;
        }
        v6 = v12;
      }
      while (!v12);
      v5 = (char *)v13[0].__r_.__value_.__r.__words[0];
      if (v12 >= 17)
      {
        *(_OWORD *)v13[0].__r_.__value_.__l.__data_ = *(_OWORD *)*a1;
        *a1 = &v5[v6 - 16];
        a1[1] = 0;
        return v5;
      }
      if (v12 <= 0)
      {
        v10 = v13[0].__r_.__value_.__r.__words[0];
        sub_1B0305328((uint64_t)v13, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 810);
        v9 = sub_1B0305340(v13, "CHECK failed: size > 0: ");
        sub_1B0305470((uint64_t)&v11, (const char **)&v9->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v13);
        LODWORD(v6) = v12;
        v5 = (char *)v10;
      }
      *(_OWORD *)v3 = *(_OWORD *)*a1;
      v7 = &v3[(int)v6];
    }
    else
    {
      *(_OWORD *)v3 = *(_OWORD *)v5;
      v7 = (char *)(a1 + 4);
    }
    *a1 = v7;
    a1[1] = v5;
  }
  else
  {
    *((_BYTE *)a1 + 56) = 1;
    v3 = (char *)(a1 + 2);
LABEL_14:
    *a1 = (char *)(a1 + 4);
  }
  return v3;
}

void sub_1B0304898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B03048B8(uint64_t a1, char *a2)
{
  int64_t v3;

  if (!*(_BYTE *)(a1 + 56))
  {
    v3 = sub_1B0304588(a1, a2);
    if ((_DWORD)v3)
      (*(void (**)(_QWORD, int64_t))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), v3);
    a2 = (char *)(a1 + 16);
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = a1 + 16;
  }
  return a2;
}

char *sub_1B0304904(uint64_t a1, char *a2)
{
  char *v3;
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  while (!*(_BYTE *)(a1 + 56))
  {
    v3 = &a2[-*(_QWORD *)a1];
    if ((v3 & 0x80000000) != 0)
    {
      sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 829);
      v5 = sub_1B0305340(v8, "CHECK failed: overrun >= 0: ");
      sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      goto LABEL_6;
    }
    if (v3 > 0x10)
    {
      sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/coded_stream.cc", 830);
      v4 = sub_1B0305340(v8, "CHECK failed: overrun <= kSlopBytes: ");
      sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
LABEL_6:
      sub_1B0305478((uint64_t)v8);
    }
    a2 = &sub_1B030471C((char **)a1)[(int)v3];
    if ((unint64_t)a2 < *(_QWORD *)a1)
      return a2;
  }
  return (char *)(a1 + 16);
}

void sub_1B03049F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B0304A14(uint64_t *a1, char *a2, int a3, unint64_t a4)
{
  char *v4;
  int i;

  v4 = (char *)a4;
  for (i = sub_1B0304AB4(a1, a4); a3 > i; i = sub_1B0304AB4(a1, (unint64_t)v4))
  {
    memcpy(v4, a2, i);
    a3 -= i;
    a2 += i;
    v4 = sub_1B0304904((uint64_t)a1, &v4[i]);
  }
  memcpy(v4, a2, a3);
  return &v4[a3];
}

uint64_t sub_1B0304AB4(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  std::string *v5;
  char v7;
  std::string v8[2];

  v3 = *a1;
  if (*a1 + 16 < a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 838);
    v5 = sub_1B0305340(v8, "CHECK failed: ptr <= end_ + kSlopBytes: ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
    v3 = *a1;
  }
  return v3 - a2 + 16;
}

void sub_1B0304B34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B0304B4C(uint64_t a1, void *a2, uint64_t a3, char *a4)
{
  char *v8;

  if (sub_1B0304AB4((uint64_t *)a1, (unint64_t)a4) <= (int)a3)
  {
    v8 = sub_1B03048B8(a1, a4);
    if (((*(uint64_t (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(a1 + 48) + 40))(*(_QWORD *)(a1 + 48), a2, a3) & 1) == 0)
    {
      *(_BYTE *)(a1 + 56) = 1;
      v8 = (char *)(a1 + 16);
      *(_QWORD *)a1 = a1 + 32;
    }
    return v8;
  }
  if (*(_QWORD *)a1 - (_QWORD)a4 >= (int)a3)
  {
    memcpy(a4, a2, (int)a3);
    return &a4[(int)a3];
  }
  return sub_1B0304A14((uint64_t *)a1, (char *)a2, a3, (unint64_t)a4);
}

char *sub_1B0304C28(unint64_t *a1, int a2, void **a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  void *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    v4 = sub_1B0304904((uint64_t)a1, a4);
    v8 = *a1;
  }
  if (*((char *)a3 + 23) >= 0)
    v9 = *((unsigned __int8 *)a3 + 23);
  else
    v9 = *((unsigned int *)a3 + 2);
  if (v8 <= (unint64_t)v4)
  {
    sub_1B0305328((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = sub_1B0305340(v23, "CHECK failed: ptr < end_: ");
    sub_1B0305470((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v23);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*((char *)a3 + 23) >= 0)
    v18 = a3;
  else
    v18 = *a3;
  return sub_1B0304DAC((uint64_t)a1, v18, v9, v17);
}

void sub_1B0304D94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B0304DAC(uint64_t a1, void *a2, uint64_t a3, char *__dst)
{
  uint64_t v6;

  if (*(_BYTE *)(a1 + 57))
    return sub_1B0304B4C(a1, a2, a3, __dst);
  if (*(_QWORD *)a1 - (_QWORD)__dst < (int)a3)
    return sub_1B0304A14((uint64_t *)a1, (char *)a2, a3, (unint64_t)__dst);
  v6 = (int)a3;
  memcpy(__dst, a2, (int)a3);
  return &__dst[v6];
}

char *sub_1B0304E14(uint64_t *a1, int a2, uint64_t a3, char *a4)
{
  char *v4;
  unint64_t v8;
  uint64_t v9;
  std::string *v10;
  unsigned int v11;
  _BYTE *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  char *v17;
  char *v18;
  unsigned int v20;
  unsigned int v21;
  char v22;
  std::string v23[2];

  v4 = a4;
  v8 = *a1;
  if (*a1 <= (unint64_t)a4)
  {
    v4 = sub_1B0304904((uint64_t)a1, a4);
    v8 = *a1;
  }
  if (*(char *)(a3 + 23) >= 0)
    LODWORD(v9) = *(unsigned __int8 *)(a3 + 23);
  else
    v9 = *(_QWORD *)(a3 + 8);
  if (v8 <= (unint64_t)v4)
  {
    sub_1B0305328((uint64_t)v23, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/io/coded_stream.h", 858);
    v10 = sub_1B0305340(v23, "CHECK failed: ptr < end_: ");
    sub_1B0305470((uint64_t)&v22, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v23);
  }
  v11 = (8 * a2) | 2;
  if (v11 > 0x7F)
  {
    *v4 = (8 * a2) | 0x82;
    v13 = (8 * a2) >> 7;
    if (v11 >> 14)
    {
      v12 = v4 + 2;
      do
      {
        *(v12 - 1) = v13 | 0x80;
        v14 = v13 >> 7;
        ++v12;
        v15 = v13 >> 14;
        v13 >>= 7;
      }
      while (v15);
      *(v12 - 1) = v14;
    }
    else
    {
      v4[1] = v13;
      v12 = v4 + 2;
    }
  }
  else
  {
    *v4 = v11;
    v12 = v4 + 1;
  }
  if (v9 >= 0x80)
  {
    v20 = v9;
    do
    {
      *v12++ = v20 | 0x80;
      v16 = v20 >> 7;
      v21 = v20 >> 14;
      v20 >>= 7;
    }
    while (v21);
  }
  else
  {
    LOBYTE(v16) = v9;
  }
  *v12 = v16;
  v17 = v12 + 1;
  if (*(char *)(a3 + 23) >= 0)
    v18 = (char *)a3;
  else
    v18 = *(char **)a3;
  if (*a1 - (uint64_t)v17 < (int)v9)
    return sub_1B0304A14(a1, v18, v9, (unint64_t)v17);
  memcpy(v17, v18, (int)v9);
  return &v17[(int)v9];
}

void sub_1B0304FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0304FC0(int a1, int a2, const std::string::value_type *a3)
{
  const std::string::value_type *v6;
  std::string::size_type v7;
  const std::string::value_type *p_p;
  std::string::size_type v9;
  const std::string::value_type *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string::size_type v13;
  void *__p;
  std::string::size_type v15;
  unsigned __int8 v16;
  void *v17;
  std::string::size_type v18;
  unsigned __int8 v19;
  const char *v20;
  const char *v21;
  int v22;
  std::string v23;
  char __str[127];
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a2 > 3014000)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v22 = 76;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program requires version ");
    sub_1B03053A8(a2, &v17);
    if ((v19 & 0x80u) == 0)
      v6 = (const std::string::value_type *)&v17;
    else
      v6 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v7 = v19;
    else
      v7 = v18;
    std::string::append(&v23, v6, v7);
    std::string::append(&v23, " of the Protocol Buffer runtime library, but the installed version is ");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v25 = 0;
    sub_1B02DCBB8(&__p, __str);
    if ((v16 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v9 = v16;
    else
      v9 = v15;
    std::string::append(&v23, p_p, v9);
    std::string::append(&v23, ".  Please update your library.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1B030560C(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
  if (a1 < 3014000)
  {
    LODWORD(v20) = 3;
    v21 = "/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/common.cc";
    v22 = 87;
    memset(&v23, 0, sizeof(v23));
    std::string::append(&v23, "This program was compiled against version ");
    sub_1B03053A8(a1, &v17);
    if ((v19 & 0x80u) == 0)
      v10 = (const std::string::value_type *)&v17;
    else
      v10 = (const std::string::value_type *)v17;
    if ((v19 & 0x80u) == 0)
      v11 = v19;
    else
      v11 = v18;
    std::string::append(&v23, v10, v11);
    std::string::append(&v23, " of the Protocol Buffer runtime library, which is not compatible with the installed version (");
    snprintf(__str, 0x80uLL, "%d.%d.%d", 3, 14, 0);
    v25 = 0;
    sub_1B02DCBB8(&__p, __str);
    if ((v16 & 0x80u) == 0)
      v12 = (const std::string::value_type *)&__p;
    else
      v12 = (const std::string::value_type *)__p;
    if ((v16 & 0x80u) == 0)
      v13 = v16;
    else
      v13 = v15;
    std::string::append(&v23, v12, v13);
    std::string::append(&v23, ").  Contact the program author for an update.  If you compiled the program yourself, make sure that your headers are from the same version of Protocol Buffers as your link-time library.  (Version verification failed in \"");
    std::string::append(&v23, a3);
    std::string::append(&v23, "\".)");
    sub_1B030560C(&v20);
    if ((char)v16 < 0)
      operator delete(__p);
    if ((char)v19 < 0)
      operator delete(v17);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

void sub_1B03052B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0305328(uint64_t result, int a2, uint64_t a3, int a4)
{
  *(_DWORD *)result = a2;
  *(_QWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 16) = a4;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_QWORD *)(result + 24) = 0;
  return result;
}

std::string *sub_1B0305340(std::string *a1, const std::string::value_type *a2)
{
  std::string::append(a1 + 1, a2);
  return a1;
}

std::string *sub_1B0305368(std::string *a1, const std::string::value_type *a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string::size_type v5;

  v3 = a1 + 1;
  v4 = *((_QWORD *)a2 + 1);
  if (a2[23] >= 0)
  {
    v5 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = *(const std::string::value_type **)a2;
    v5 = v4;
  }
  std::string::append(v3, a2, v5);
  return a1;
}

_QWORD *sub_1B03053A8@<X0>(int a1@<W0>, _QWORD *a2@<X8>)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d.%d.%d", a1 / 1000000, a1 / 1000 % 1000, a1 % 1000);
  __str[127] = 0;
  return sub_1B02DCBB8(a2, __str);
}

const char **sub_1B0305470(uint64_t a1, const char **a2)
{
  return sub_1B030560C(a2);
}

uint64_t sub_1B0305478(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1B03054A8(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  FILE **v4;
  const char *v5;

  if ((result & 0x80000000) == 0)
  {
    v4 = (FILE **)MEMORY[0x1E0C80C10];
    if (*(char *)(a4 + 23) >= 0)
      v5 = (const char *)a4;
    else
      v5 = *(const char **)a4;
    fprintf((FILE *)*MEMORY[0x1E0C80C10], "[libprotobuf %s %s:%d] %s\n", off_1E60CDD00[result], a2, a3, v5);
    return fflush(*v4);
  }
  return result;
}

std::string *sub_1B0305514(std::string *a1, int a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%d", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

std::string *sub_1B0305590(std::string *a1, uint64_t a2)
{
  char __str[128];
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  snprintf(__str, 0x80uLL, "%lu", a2);
  __str[127] = 0;
  std::string::append(a1 + 1, __str);
  return a1;
}

const char **sub_1B030560C(const char **result)
{
  const char **v1;
  uint64_t v2;
  int v3;
  void *exception;

  v1 = result;
  if (*(_DWORD *)result == 3)
  {
    v2 = 3;
  }
  else
  {
    v3 = atomic_load((unsigned int *)&unk_1EEEB28D0);
    if (v3 > 0)
      goto LABEL_6;
    v2 = *(unsigned int *)result;
  }
  result = (const char **)off_1EEEB1A48(v2, v1[1], *((_DWORD *)v1 + 4), (uint64_t)(v1 + 3));
LABEL_6:
  if (*(_DWORD *)v1 == 3)
  {
    exception = __cxa_allocate_exception(0x30uLL);
    sub_1B03056C0(exception, v1[1], *((unsigned int *)v1 + 4), v1 + 3);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB340, (void (*)(void *))sub_1B03056C4);
  }
  return result;
}

void sub_1B03056AC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B03056C8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)&off_1E60CCFD0;
  if (SHIBYTE(this[5].__vftable) < 0)
    operator delete(this[3].__vftable);
  std::exception::~exception(this);
}

void sub_1B0305704(std::exception *a1)
{
  sub_1B03056C8(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0305728(uint64_t a1)
{
  uint64_t result;

  result = a1 + 24;
  if (*(char *)(a1 + 47) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_1B0305744(uint64_t a1, uint64_t a2, int a3, __int128 *a4)
{
  uint64_t v5;
  __int128 v6;

  *(_QWORD *)a1 = &off_1E60CCFD0;
  *(_QWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 16) = a3;
  v5 = a1 + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1B02EB0A8((_BYTE *)v5, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v6 = *a4;
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v5 = v6;
  }
  return a1;
}

void sub_1B030579C(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03057B0(uint64_t a1, int a2, _OWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  uint64_t **v10;
  uint64_t *i;
  unint64_t v12;
  __int128 v14;

  if (qword_1EEEB28D8)
  {
    v3 = *(int8x8_t *)(qword_1EEEB28D8 + 8);
    if (v3)
    {
      v4 = *(_QWORD *)(a1 + 8);
      v5 = 0x9DDFEA08EB382D69 * (((8 * v4) + 8) ^ HIDWORD(v4));
      v6 = 0x9DDFEA08EB382D69 * (HIDWORD(v4) ^ (v5 >> 47) ^ v5);
      v7 = (0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47))) ^ a2;
      v8 = (uint8x8_t)vcnt_s8(v3);
      v8.i16[0] = vaddlv_u8(v8);
      if (v8.u32[0] > 1uLL)
      {
        v9 = v7;
        if (v7 >= *(_QWORD *)&v3)
          v9 = v7 % *(_QWORD *)&v3;
      }
      else
      {
        v9 = (*(_QWORD *)&v3 - 1) & v7;
      }
      v10 = *(uint64_t ***)(*(_QWORD *)qword_1EEEB28D8 + 8 * v9);
      if (v10)
      {
        for (i = *v10; i; i = (uint64_t *)*i)
        {
          v12 = i[1];
          if (v7 == v12)
          {
            if (i[2] == v4 && *((_DWORD *)i + 6) == a2)
            {
              v14 = *((_OWORD *)i + 3);
              *a3 = *((_OWORD *)i + 2);
              a3[1] = v14;
              return 1;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= *(_QWORD *)&v3)
                v12 %= *(_QWORD *)&v3;
            }
            else
            {
              v12 &= *(_QWORD *)&v3 - 1;
            }
            if (v12 != v9)
              return 0;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1B03058C4(uint64_t result, uint64_t a2)
{
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t sub_1B03058D4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v7;

  if (!*(_QWORD *)a1)
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      sub_1B030EF9C(*(unsigned __int8 **)v2, (unsigned __int8 *)(v2 + 8));
    }
    else if (*(_WORD *)(a1 + 10))
    {
      v3 = 32 * *(unsigned __int16 *)(a1 + 10);
      v4 = (unsigned __int8 *)(v2 + 8);
      do
      {
        sub_1B030ED5C(v4);
        v4 += 32;
        v3 -= 32;
      }
      while (v3);
    }
    v5 = *(_QWORD *)(a1 + 16);
    if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
    {
      if (v5)
      {
        v7 = *(_QWORD *)(a1 + 16);
        sub_1B02D7CDC(v5, *(_QWORD **)(v5 + 8));
        MEMORY[0x1B5E07CD8](v7, 0x1020C4062D53EE8);
      }
    }
    else if (v5)
    {
      MEMORY[0x1B5E07CB4](v5, 0x1062C802AB6010CLL);
    }
  }
  return a1;
}

unsigned __int8 *sub_1B03059A4(unsigned __int8 *result)
{
  unsigned __int8 *v1;
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  std::string *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(void);
  char v10;
  std::string v11[2];

  v1 = result;
  if (result[9])
  {
    v2 = result[8];
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = sub_1B0305340(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_1B0305478((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
      case 2:
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
      case 8:
      case 13:
      case 14:
      case 15:
      case 16:
      case 17:
      case 18:
        **(_DWORD **)v1 = 0;
        break;
      case 9:
      case 12:
        result = (unsigned __int8 *)sub_1B0300094(*(_QWORD *)v1);
        break;
      case 10:
      case 11:
        result = (unsigned __int8 *)sub_1B030F744(*(_QWORD *)v1);
        break;
      default:
        return result;
    }
  }
  else if ((result[10] & 1) == 0)
  {
    v4 = result[8];
    if ((v4 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = sub_1B0305340(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_1B0305478((uint64_t)v11);
    }
    v6 = dword_1B03AFBC8[v4];
    if (v6 == 10)
    {
      v8 = **(_QWORD **)v1;
      if ((v1[10] & 0x10) != 0)
        v9 = *(uint64_t (**)(void))(v8 + 112);
      else
        v9 = *(uint64_t (**)(void))(v8 + 40);
      result = (unsigned __int8 *)v9();
    }
    else if (v6 == 9)
    {
      v7 = *(_QWORD *)v1;
      if (*(char *)(*(_QWORD *)v1 + 23) < 0)
      {
        **(_BYTE **)v7 = 0;
        *(_QWORD *)(v7 + 8) = 0;
      }
      else
      {
        *(_BYTE *)v7 = 0;
        *(_BYTE *)(v7 + 23) = 0;
      }
    }
    v1[10] = v1[10] & 0xF0 | 1;
  }
  return result;
}

void sub_1B0305B38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0305B58(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 1)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 1)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_1B0305D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0305D6C(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 1)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB300, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F004);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 1)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT32): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 348);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B03144A4(v23, v24 + 1);
    result = sub_1B0314918((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_1B0314918((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B030604C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B030608C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 2)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 2)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_QWORD *)v9 = a4;
  return result;
}

void sub_1B0306268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03062A0(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 2)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB320, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F008);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 2)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_INT64): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 349);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B03150F4(v23, v24 + 1);
    result = sub_1B0315568((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = sub_1B0315568((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B0306580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03065C0(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 3)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 3)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_1B030679C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03067D4(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 3)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB310, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F00C);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 3)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT32): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 350);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B0314ACC(v23, v24 + 1);
    result = sub_1B0314F40((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_1B0314F40((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B0306AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0306AF4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 4)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 4)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_QWORD *)v9 = a4;
  return result;
}

void sub_1B0306CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0306D08(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB330, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F010);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_UINT64): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 351);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B031571C(v23, v24 + 1);
    result = sub_1B0315B90((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
  }
  else
  {
    result = sub_1B0315B90((uint64_t)v23);
    *(_QWORD *)(result + 8 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B0306FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0307028(uint64_t a1, uint64_t a2, int a3, uint64_t a4, float a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a4;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 6)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 6)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(float *)v9 = a5;
  return result;
}

void sub_1B030720C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0307244(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, float a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 6)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB2F0, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F014);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 6)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_FLOAT): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 352);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B0315D44(v23, v24 + 1);
    result = sub_1B03161B8((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
  }
  else
  {
    result = sub_1B03161B8((uint64_t)v23);
    *(float *)(result + 4 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B030752C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B030756C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, double a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a4;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 5)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 5)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(double *)v9 = a5;
  return result;
}

void sub_1B0307750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0307788(uint64_t *a1, uint64_t a2, int a3, int a4, uint64_t *a5, double a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a5;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 5)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB2E0, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F018);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 5)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_DOUBLE): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 353);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B031636C(v23, v24 + 1);
    result = sub_1B03167E0((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
  }
  else
  {
    result = sub_1B03167E0((uint64_t)v23);
    *(double *)(result + 8 * v24) = a6;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B0307A70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0307AB0(uint64_t a1, uint64_t a2, int a3, char a4, uint64_t a5)
{
  uint64_t result;
  _BYTE *v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = (_BYTE *)result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 7)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v9[9] = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = v9[8];
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 7)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  v9[10] &= 0xF0u;
  *v9 = a4;
  return result;
}

void sub_1B0307C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0307CC4(uint64_t *a1, uint64_t a2, int a3, int a4, char a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 7)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB2D0, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F01C);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 7)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_BOOL): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 354);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B0313E84(v23, v24 + 1);
    result = sub_1B03142F4((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
  }
  else
  {
    result = sub_1B03142F4((uint64_t)v23);
    *(_BYTE *)(result + v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B0307FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0307FE4(uint64_t *a1, uint64_t a2, int a3, char a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  uint64_t v12;
  uint64_t (*v13)();
  uint64_t *v14;
  uint64_t v15;
  uint64_t *(*v16)(uint64_t *);

  v9 = sub_1B030A4B4((uint64_t)a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 9) = 1;
    *((_BYTE *)v9 + 8) = a3;
    *((_BYTE *)v9 + 11) = a4;
    switch(a3)
    {
      case 1:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB2E0, 16);
        v13 = sub_1B030F018;
        goto LABEL_31;
      case 2:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB2F0, 16);
        v13 = sub_1B030F014;
        goto LABEL_31;
      case 3:
      case 16:
      case 18:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB320, 16);
        v13 = sub_1B030F008;
        goto LABEL_31;
      case 4:
      case 6:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB330, 16);
        v13 = sub_1B030F010;
        goto LABEL_31;
      case 5:
      case 14:
      case 15:
      case 17:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB300, 16);
        v13 = sub_1B030F004;
        goto LABEL_31;
      case 7:
      case 13:
        v12 = *a1;
        if (!v12)
          goto LABEL_32;
        if ((*(_BYTE *)(v12 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB310, 16);
        v13 = sub_1B030F00C;
        goto LABEL_31;
      case 8:
        v12 = *a1;
        if (v12)
        {
          if ((*(_BYTE *)(v12 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB2D0, 16);
          v13 = sub_1B030F01C;
LABEL_31:
          v14 = (uint64_t *)sub_1B0303B3C((unint64_t *)v12, 0x10uLL, (uint64_t)v13);
          *v14 = 0;
          v14[1] = v12;
        }
        else
        {
LABEL_32:
          v14 = (uint64_t *)operator new();
          *v14 = 0;
          v14[1] = 0;
        }
        goto LABEL_44;
      case 9:
      case 12:
        v15 = *a1;
        if (!v15)
          goto LABEL_42;
        if ((*(_BYTE *)(v15 + 24) & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 32), &unk_1E60CB380, 24);
        v16 = (uint64_t *(*)(uint64_t *))sub_1B030F020;
        goto LABEL_41;
      case 10:
      case 11:
        v15 = *a1;
        if (v15)
        {
          if ((*(_BYTE *)(v15 + 24) & 1) != 0)
            (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v15 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v15 + 32) + 32), &unk_1E60CB358, 24);
          v16 = sub_1B030F024;
LABEL_41:
          v14 = (uint64_t *)sub_1B0303B3C((unint64_t *)v15, 0x18uLL, (uint64_t)v16);
          v14[2] = 0;
          *v14 = v15;
        }
        else
        {
LABEL_42:
          v14 = (uint64_t *)operator new();
          v14[2] = 0;
          *v14 = 0;
        }
        v14[1] = 0;
LABEL_44:
        *v10 = v14;
        break;
      default:
        return *v10;
    }
  }
  return *v10;
}

uint64_t sub_1B0308320(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  char v17;
  std::string v18[2];

  result = (uint64_t)sub_1B030A4B4(a1, a2);
  v9 = result;
  *(_QWORD *)(result + 16) = a5;
  if (v10)
  {
    *(_BYTE *)(result + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[a3] != 8)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 460);
      v12 = sub_1B0305340(v18, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v12->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    *(_BYTE *)(v9 + 9) = 0;
  }
  else
  {
    if (*(_BYTE *)(result + 9))
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v13 = sub_1B0305340(v18, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    v14 = *(unsigned __int8 *)(v9 + 8);
    if ((v14 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v15 = sub_1B0305340(v18, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v15->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
    if (dword_1B03AFBC8[v14] != 8)
    {
      sub_1B0305328((uint64_t)v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 463);
      v16 = sub_1B0305340(v18, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B0305470((uint64_t)&v17, (const char **)&v16->__r_.__value_.__l.__data_);
      result = sub_1B0305478((uint64_t)v18);
    }
  }
  *(_BYTE *)(v9 + 10) &= 0xF0u;
  *(_DWORD *)v9 = a4;
  return result;
}

void sub_1B03084FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0308534(uint64_t *a1, uint64_t a2, int a3, int a4, int a5, uint64_t *a6)
{
  uint64_t **v11;
  uint64_t **v12;
  char v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  uint64_t *v17;
  std::string *v18;
  uint64_t v19;
  std::string *v20;
  std::string *v21;
  std::string *v22;
  int *v23;
  uint64_t v24;
  int v25;
  uint64_t result;
  char v27;
  std::string v28[2];

  v11 = sub_1B030A4B4((uint64_t)a1, a2);
  v12 = v11;
  v11[2] = a6;
  if (v13)
  {
    *((_BYTE *)v11 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v14 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[a3] != 8)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 488);
      v15 = sub_1B0305340(v28, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    *((_BYTE *)v12 + 9) = 1;
    *((_BYTE *)v12 + 11) = a4;
    v16 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v16 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v16 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v16 + 32) + 32), &unk_1E60CB300, 16);
      v17 = (uint64_t *)sub_1B0303B3C((unint64_t *)v16, 0x10uLL, (uint64_t)sub_1B030F004);
      *v17 = 0;
      v17[1] = v16;
    }
    else
    {
      v17 = (uint64_t *)operator new();
      *v17 = 0;
      v17[1] = 0;
    }
    *v12 = v17;
  }
  else
  {
    if (!*((_BYTE *)v11 + 9))
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v18 = sub_1B0305340(v28, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    v19 = *((unsigned __int8 *)v12 + 8);
    if ((v19 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v28, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (dword_1B03AFBC8[v19] != 8)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 494);
      v21 = sub_1B0305340(v28, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_ENUM): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v21->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
    if (*((unsigned __int8 *)v12 + 11) != a4)
    {
      sub_1B0305328((uint64_t)v28, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 495);
      v22 = sub_1B0305340(v28, "CHECK failed: (extension->is_packed) == (packed): ");
      sub_1B0305470((uint64_t)&v27, (const char **)&v22->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v28);
    }
  }
  v23 = (int *)*v12;
  v24 = *v23;
  if ((_DWORD)v24 == v23[1])
  {
    v25 = v24 + 1;
    sub_1B03144A4(v23, v24 + 1);
    result = sub_1B0314918((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
  }
  else
  {
    result = sub_1B0314918((uint64_t)v23);
    *(_DWORD *)(result + 4 * v24) = a5;
    v25 = v24 + 1;
  }
  *v23 = v25;
  return result;
}

void sub_1B0308814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0308854(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  unsigned __int8 *v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  _QWORD *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  char v19;
  std::string v20[2];

  v7 = sub_1B030A4B4((uint64_t)a1, a2);
  v8 = (unsigned __int8 *)v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = sub_1B0305340(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v19, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v20);
    }
    if (dword_1B03AFBC8[a3] != 9)
    {
      sub_1B0305328((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 520);
      v11 = sub_1B0305340(v20, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B0305470((uint64_t)&v19, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v20);
    }
    v8[9] = 0;
    v12 = *a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB5B0, 24);
      v13 = (_QWORD *)sub_1B0303B3C((unint64_t *)v12, 0x18uLL, (uint64_t)sub_1B02FFFA4);
    }
    else
    {
      v13 = (_QWORD *)operator new();
    }
    *v13 = 0;
    v13[1] = 0;
    v13[2] = 0;
    *(_QWORD *)v8 = v13;
  }
  else
  {
    if (*((_BYTE *)v7 + 9))
    {
      sub_1B0305328((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v14 = sub_1B0305340(v20, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v19, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v20);
    }
    v15 = v8[8];
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = sub_1B0305340(v20, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v19, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v20);
    }
    if (dword_1B03AFBC8[v15] != 9)
    {
      sub_1B0305328((uint64_t)v20, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 524);
      v17 = sub_1B0305340(v20, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B0305470((uint64_t)&v19, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v20);
    }
  }
  v8[10] &= 0xF0u;
  return *(_QWORD *)v8;
}

void sub_1B0308AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0308AD8(uint64_t *a1, uint64_t a2, int a3, uint64_t *a4)
{
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  std::string *v10;
  std::string *v11;
  uint64_t v12;
  uint64_t *v13;
  std::string *v14;
  uint64_t v15;
  std::string *v16;
  std::string *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  int v21;
  _QWORD *result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  std::string v27[2];

  v7 = sub_1B030A4B4((uint64_t)a1, a2);
  v8 = v7;
  v7[2] = a4;
  if (v9)
  {
    *((_BYTE *)v7 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v10 = sub_1B0305340(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v26, (const char **)&v10->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v27);
    }
    if (dword_1B03AFBC8[a3] != 9)
    {
      sub_1B0305328((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 550);
      v11 = sub_1B0305340(v27, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B0305470((uint64_t)&v26, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v27);
    }
    *((_BYTE *)v8 + 9) = 1;
    *((_BYTE *)v8 + 11) = 0;
    v12 = *a1;
    if (v12)
    {
      if ((*(_BYTE *)(v12 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v12 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v12 + 32) + 32), &unk_1E60CB380, 24);
      v13 = (uint64_t *)sub_1B0303B3C((unint64_t *)v12, 0x18uLL, (uint64_t)sub_1B030F020);
      v13[2] = 0;
      *v13 = v12;
    }
    else
    {
      v13 = (uint64_t *)operator new();
      v13[2] = 0;
      *v13 = 0;
    }
    v13[1] = 0;
    *v8 = v13;
  }
  else
  {
    if (!*((_BYTE *)v7 + 9))
    {
      sub_1B0305328((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v14 = sub_1B0305340(v27, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v26, (const char **)&v14->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v27);
    }
    v15 = *((unsigned __int8 *)v8 + 8);
    if ((v15 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v16 = sub_1B0305340(v27, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v26, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v27);
    }
    if (dword_1B03AFBC8[v15] != 9)
    {
      sub_1B0305328((uint64_t)v27, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 556);
      v17 = sub_1B0305340(v27, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_STRING): ");
      sub_1B0305470((uint64_t)&v26, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v27);
    }
  }
  v18 = (uint64_t)*v8;
  v19 = *(int **)(v18 + 16);
  if (!v19)
  {
    v21 = *(_DWORD *)(v18 + 12);
LABEL_23:
    sub_1B0316A4C(v18, v21 + 1);
    v19 = *(int **)(v18 + 16);
    v21 = *v19;
    goto LABEL_24;
  }
  v20 = *(int *)(v18 + 8);
  v21 = *v19;
  if ((int)v20 < *v19)
  {
    *(_DWORD *)(v18 + 8) = v20 + 1;
    return *(_QWORD **)&v19[2 * v20 + 2];
  }
  if (v21 == *(_DWORD *)(v18 + 12))
    goto LABEL_23;
LABEL_24:
  *v19 = v21 + 1;
  v23 = *(_QWORD *)v18;
  if (*(_QWORD *)v18)
  {
    if ((*(_BYTE *)(v23 + 24) & 1) != 0)
      (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v23 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v23 + 32) + 32), &unk_1E60CB5B0, 24);
    result = (_QWORD *)sub_1B0303B3C((unint64_t *)v23, 0x18uLL, (uint64_t)sub_1B02FFFA4);
  }
  else
  {
    result = (_QWORD *)operator new();
  }
  *result = 0;
  result[1] = 0;
  result[2] = 0;
  v24 = *(_QWORD *)(v18 + 16);
  v25 = *(int *)(v18 + 8);
  *(_DWORD *)(v18 + 8) = v25 + 1;
  *(_QWORD *)(v24 + 8 * v25 + 8) = result;
  return result;
}

void sub_1B0308E0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0308E44(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  uint64_t **v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t result;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  std::string *v18;
  char v19;
  char v20;
  std::string v21[2];

  v9 = sub_1B030A4B4((uint64_t)a1, a2);
  v10 = v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = sub_1B0305340(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v20, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v21);
    }
    if (dword_1B03AFBC8[a3] != 10)
    {
      sub_1B0305328((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 591);
      v13 = sub_1B0305340(v21, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B0305470((uint64_t)&v20, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v21);
    }
    *((_BYTE *)v10 + 9) = 0;
    *((_BYTE *)v10 + 10) &= 0xFu;
    result = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *a1);
    *v10 = (uint64_t *)result;
    *((_BYTE *)v10 + 10) &= 0xF0u;
  }
  else
  {
    if (*((_BYTE *)v9 + 9))
    {
      sub_1B0305328((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v15 = sub_1B0305340(v21, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (OPTIONAL_FIELD): ");
      sub_1B0305470((uint64_t)&v20, (const char **)&v15->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v21);
    }
    v16 = *((unsigned __int8 *)v10 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = sub_1B0305340(v21, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v20, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v21);
    }
    if (dword_1B03AFBC8[v16] != 10)
    {
      sub_1B0305328((uint64_t)v21, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 598);
      v18 = sub_1B0305340(v21, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B0305470((uint64_t)&v20, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v21);
    }
    v19 = *((_BYTE *)v10 + 10);
    *((_BYTE *)v10 + 10) = v19 & 0xF0;
    result = (uint64_t)*v10;
    if ((v19 & 0x10) != 0)
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, a4);
  }
  return result;
}

void sub_1B0309070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03090A8(_QWORD *a1, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t **v9;
  unsigned __int8 *v10;
  char v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  _QWORD *v15;
  std::string *v16;
  uint64_t v17;
  std::string *v18;
  std::string *v19;
  uint64_t v20;
  _DWORD *v21;
  uint64_t v22;
  uint64_t v23;
  char v25;
  std::string v26[2];

  v9 = sub_1B030A4B4((uint64_t)a1, a2);
  v10 = (unsigned __int8 *)v9;
  v9[2] = a5;
  if (v11)
  {
    *((_BYTE *)v9 + 8) = a3;
    if ((a3 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v12 = sub_1B0305340(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v25, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v26);
    }
    if (dword_1B03AFBC8[a3] != 10)
    {
      sub_1B0305328((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 762);
      v13 = sub_1B0305340(v26, "CHECK failed: (cpp_type(extension->type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B0305470((uint64_t)&v25, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v26);
    }
    v10[9] = 1;
    v14 = *a1;
    if (*a1)
    {
      if ((*(_BYTE *)(v14 + 24) & 1) != 0)
        (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v14 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v14 + 32) + 32), &unk_1E60CB358, 24);
      v15 = (_QWORD *)sub_1B0303B3C((unint64_t *)v14, 0x18uLL, (uint64_t)sub_1B030F024);
      v15[2] = 0;
      *v15 = v14;
    }
    else
    {
      v15 = (_QWORD *)operator new();
      v15[2] = 0;
      *v15 = 0;
    }
    v15[1] = 0;
    *(_QWORD *)v10 = v15;
  }
  else
  {
    if (!*((_BYTE *)v9 + 9))
    {
      sub_1B0305328((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v16 = sub_1B0305340(v26, "CHECK failed: ((*extension).is_repeated ? REPEATED_FIELD : OPTIONAL_FIELD) == (REPEATED_FIELD): ");
      sub_1B0305470((uint64_t)&v25, (const char **)&v16->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v26);
    }
    v17 = v10[8];
    if ((v17 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v18 = sub_1B0305340(v26, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v25, (const char **)&v18->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v26);
    }
    if (dword_1B03AFBC8[v17] != 10)
    {
      sub_1B0305328((uint64_t)v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 767);
      v19 = sub_1B0305340(v26, "CHECK failed: (cpp_type((*extension).type)) == (WireFormatLite::CPPTYPE_MESSAGE): ");
      sub_1B0305470((uint64_t)&v25, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v26);
    }
  }
  v20 = *(_QWORD *)v10;
  v21 = *(_DWORD **)(*(_QWORD *)v10 + 16);
  if (!v21
    || (v22 = *(int *)(v20 + 8), (int)v22 >= *v21)
    || (*(_DWORD *)(v20 + 8) = v22 + 1, (v23 = *(_QWORD *)&v21[2 * v22 + 2]) == 0))
  {
    v23 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 32))(a4, *a1);
    sub_1B030F124(*(_QWORD *)v10, v23);
  }
  return v23;
}

void sub_1B0309358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B0309390(unsigned __int8 *result)
{
  _QWORD *v1;
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  BOOL v9;

  v1 = (_QWORD *)*((_QWORD *)result + 2);
  if (*((unsigned __int16 *)result + 4) >= 0x101u)
  {
    v6 = (unsigned __int8 *)*v1;
    v4 = (unsigned __int8 *)(v1 + 1);
    v5 = v6;
    if (v6 != v4)
    {
      do
      {
        result = sub_1B03059A4(v5 + 40);
        v7 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = *(unsigned __int8 **)v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (unsigned __int8 *)*((_QWORD *)v5 + 2);
            v9 = *(_QWORD *)v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v4);
    }
  }
  else if (*((_WORD *)result + 5))
  {
    v2 = 32 * *((unsigned __int16 *)result + 5);
    v3 = (unsigned __int8 *)(v1 + 1);
    do
    {
      result = sub_1B03059A4(v3);
      v3 += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

void sub_1B030942C(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  char *v13;
  unint64_t v14;
  int *v15;
  int *v16;
  _QWORD *v17;
  unsigned int v18;

  if (*(unsigned __int16 *)(a1 + 8) <= 0x100u)
  {
    v4 = *(unsigned __int16 *)(a2 + 8);
    v5 = *(char **)(a1 + 16);
    v6 = *(unsigned __int16 *)(a1 + 10);
    v7 = &v5[32 * v6];
    v8 = *(_QWORD *)(a2 + 16);
    if (v4 > 0x100)
    {
      v14 = sub_1B0309734(v5, v7, *(_QWORD **)v8, (_QWORD *)(v8 + 8));
    }
    else
    {
      v9 = *(unsigned __int16 *)(a2 + 10);
      v10 = v8 + 32 * v9;
      v12 = (_DWORD)v6 == 0;
      v11 = 0;
      v12 = v12 || (_DWORD)v9 == 0;
      if (!v12)
      {
        do
        {
          if (*(_DWORD *)v5 == *(_DWORD *)v8)
            v13 = v5 + 32;
          else
            v13 = v5;
          if (*(_DWORD *)v5 < *(_DWORD *)v8)
          {
            v5 += 32;
          }
          else
          {
            v8 += 32;
            v5 = v13;
          }
          ++v11;
        }
        while (v5 != v7 && v8 != v10);
      }
      v14 = v11 + ((v10 - v8) >> 5) + ((v7 - v5) >> 5);
    }
    sub_1B0309548((_QWORD *)a1, v14);
  }
  v15 = *(int **)(a2 + 16);
  if (*(unsigned __int16 *)(a2 + 8) >= 0x101u)
  {
    sub_1B030F23C(*(_QWORD **)v15, (_QWORD *)v15 + 1, (uint64_t *)a1);
  }
  else if (*(_WORD *)(a2 + 10))
  {
    v16 = &v15[8 * *(unsigned __int16 *)(a2 + 10)];
    do
    {
      v17 = v15 + 2;
      v18 = *v15;
      v15 += 8;
      sub_1B030983C((uint64_t *)a1, v18, v17);
    }
    while (v15 != v16);
  }
}

_QWORD *sub_1B0309548(_QWORD *result, unint64_t a2)
{
  unint64_t v2;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t *v7;
  size_t v8;
  uint64_t **v9;
  uint64_t *v10;
  char *v11;
  char *v12;
  __int128 v13;
  BOOL v14;
  int v15;
  __int128 v16;
  uint64_t v17;

  v2 = *((unsigned __int16 *)result + 4);
  if (v2 <= 0x100 && v2 < a2)
  {
    v4 = result;
    do
    {
      if ((_WORD)v2)
        LOWORD(v2) = 4 * v2;
      else
        LOWORD(v2) = 1;
    }
    while ((unsigned __int16)v2 < a2);
    v5 = (char *)result[2];
    v6 = *((unsigned __int16 *)result + 5);
    v7 = (uint64_t *)*result;
    if ((unsigned __int16)v2 < 0x101u)
    {
      v8 = 32 * (unsigned __int16)v2;
      if (v7)
      {
        if ((v7[3] & 1) != 0)
        {
          (*(void (**)(_QWORD, void *, size_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_1E60CB3A8, v8);
          v8 = 32 * (unsigned __int16)v2;
        }
        result = (_QWORD *)sub_1B0303E20(v7, v8);
      }
      else
      {
        result = operator new[](v8);
      }
      v9 = (uint64_t **)result;
      if ((_DWORD)v6)
        result = memmove(result, v5, 32 * v6);
    }
    else
    {
      if (v7)
      {
        if ((v7[3] & 1) != 0)
          (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(v7[4] + 32) + 40))(*(_QWORD *)(v7[4] + 32), &unk_1E60CB8A8, 24);
        result = (_QWORD *)sub_1B0303B3C((unint64_t *)v7, 0x18uLL, (uint64_t)sub_1B030F920);
      }
      else
      {
        result = (_QWORD *)operator new();
      }
      v9 = (uint64_t **)result;
      result[1] = 0;
      v10 = result + 1;
      result[2] = 0;
      *result = result + 1;
      if ((_DWORD)v6)
      {
        v11 = &v5[32 * v6];
        v12 = v5;
        do
        {
          v15 = *(_DWORD *)v12;
          v13 = *(_OWORD *)(v12 + 8);
          v17 = *((_QWORD *)v12 + 3);
          v16 = v13;
          result = sub_1B030F928(v9, v10, &v15, &v15);
          v10 = result;
          v12 += 32;
        }
        while (v12 != v11);
      }
    }
    if (*v4)
      v14 = 1;
    else
      v14 = v5 == 0;
    if (!v14)
      result = (_QWORD *)MEMORY[0x1B5E07CB4](v5, 0x1062C802AB6010CLL);
    *((_WORD *)v4 + 4) = v2;
    v4[2] = v9;
    if ((unsigned __int16)v2 >= 0x101u)
      *((_WORD *)v4 + 5) = 0;
  }
  return result;
}

uint64_t sub_1B0309734(char *a1, char *a2, _QWORD *a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  BOOL v13;

  v4 = 0;
  if (a1 != a2 && a3 != a4)
  {
    v4 = 0;
    do
    {
      v5 = *((_DWORD *)a3 + 8);
      if (*(_DWORD *)a1 >= v5)
      {
        if (*(_DWORD *)a1 == v5)
        {
          a1 += 32;
          v6 = (_QWORD *)a3[1];
          if (v6)
          {
            do
            {
              a3 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v7);
          }
        }
        else
        {
          v8 = (_QWORD *)a3[1];
          if (v8)
          {
            do
            {
              a3 = v8;
              v8 = (_QWORD *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = a3;
              a3 = (_QWORD *)a3[2];
            }
            while ((_QWORD *)*a3 != v9);
          }
        }
      }
      else
      {
        a1 += 32;
      }
      ++v4;
    }
    while (a1 != a2 && a3 != a4);
  }
  if (a3 == a4)
  {
    v10 = 0;
  }
  else
  {
    v10 = 0;
    do
    {
      v11 = (_QWORD *)a3[1];
      if (v11)
      {
        do
        {
          v12 = v11;
          v11 = (_QWORD *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          v12 = (_QWORD *)a3[2];
          v13 = *v12 == (_QWORD)a3;
          a3 = v12;
        }
        while (!v13);
      }
      ++v10;
      a3 = v12;
    }
    while (v12 != a4);
  }
  return v4 + ((a2 - a1) >> 5) + v10;
}

void sub_1B030983C(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  uint64_t *v6;
  uint64_t **v7;
  uint64_t *v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  std::string *v15;
  uint64_t v16;
  std::string *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  int *v37;
  __int128 v38;
  uint64_t *v39;
  uint64_t **v40;
  uint64_t **v41;
  char v42;
  char v43;
  uint64_t v44;
  int *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::string *v53;
  std::string *v54;
  std::string *v55;
  uint64_t *v56;
  int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *__p[2];
  uint64_t v62;
  char v63;
  std::string v64[2];

  if (*((_BYTE *)a3 + 9))
  {
    v6 = (uint64_t *)a3[2];
    v7 = sub_1B030A4B4((uint64_t)a1, a2);
    v8 = (uint64_t *)v7;
    v7[2] = v6;
    v10 = v9;
    if (v9)
    {
      *((_BYTE *)v7 + 8) = *((_BYTE *)a3 + 8);
      *((_BYTE *)v7 + 11) = *((_BYTE *)a3 + 11);
      *((_BYTE *)v7 + 9) = 1;
    }
    else
    {
      if (*((unsigned __int8 *)v7 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 931);
        v13 = sub_1B0305340(v64, "CHECK failed: (extension->type) == (other_extension.type): ");
        sub_1B0305470((uint64_t)&v63, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v64);
      }
      if (*((unsigned __int8 *)v8 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 932);
        v14 = sub_1B0305340(v64, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        sub_1B0305470((uint64_t)&v63, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v64);
      }
      if (!*((_BYTE *)v8 + 9))
      {
        sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 933);
        v15 = sub_1B0305340(v64, "CHECK failed: extension->is_repeated: ");
        sub_1B0305470((uint64_t)&v63, (const char **)&v15->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v64);
      }
    }
    v16 = *((unsigned __int8 *)a3 + 8);
    if ((v16 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v17 = sub_1B0305340(v64, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v63, (const char **)&v17->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v64);
    }
    switch(v16)
    {
      case 1:
        if (v10)
        {
          v26 = *a1;
          if (v26)
          {
            if ((*(_BYTE *)(v26 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v26 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v26 + 32) + 32), &unk_1E60CB2E0, 16);
            v27 = sub_1B0303B3C((unint64_t *)v26, 0x10uLL, (uint64_t)sub_1B030F018);
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = v26;
          }
          else
          {
            v27 = operator new();
            *(_QWORD *)v27 = 0;
            *(_QWORD *)(v27 + 8) = 0;
          }
          *v8 = v27;
        }
        else
        {
          v27 = *v8;
        }
        sub_1B0316868((int *)v27, (int *)*a3);
        break;
      case 2:
        if (v10)
        {
          v28 = *a1;
          if (v28)
          {
            if ((*(_BYTE *)(v28 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v28 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v28 + 32) + 32), &unk_1E60CB2F0, 16);
            v29 = sub_1B0303B3C((unint64_t *)v28, 0x10uLL, (uint64_t)sub_1B030F014);
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = v28;
          }
          else
          {
            v29 = operator new();
            *(_QWORD *)v29 = 0;
            *(_QWORD *)(v29 + 8) = 0;
          }
          *v8 = v29;
        }
        else
        {
          v29 = *v8;
        }
        sub_1B0316240((int *)v29, (int *)*a3);
        break;
      case 3:
      case 16:
      case 18:
        if (v10)
        {
          v20 = *a1;
          if (v20)
          {
            if ((*(_BYTE *)(v20 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v20 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v20 + 32) + 32), &unk_1E60CB320, 16);
            v21 = sub_1B0303B3C((unint64_t *)v20, 0x10uLL, (uint64_t)sub_1B030F008);
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = v20;
          }
          else
          {
            v21 = operator new();
            *(_QWORD *)v21 = 0;
            *(_QWORD *)(v21 + 8) = 0;
          }
          *v8 = v21;
        }
        else
        {
          v21 = *v8;
        }
        sub_1B03155F0((int *)v21, (int *)*a3);
        break;
      case 4:
      case 6:
        if (v10)
        {
          v24 = *a1;
          if (v24)
          {
            if ((*(_BYTE *)(v24 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v24 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v24 + 32) + 32), &unk_1E60CB330, 16);
            v25 = sub_1B0303B3C((unint64_t *)v24, 0x10uLL, (uint64_t)sub_1B030F010);
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = v24;
          }
          else
          {
            v25 = operator new();
            *(_QWORD *)v25 = 0;
            *(_QWORD *)(v25 + 8) = 0;
          }
          *v8 = v25;
        }
        else
        {
          v25 = *v8;
        }
        sub_1B0315C18((int *)v25, (int *)*a3);
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        if (v10)
        {
          v18 = *a1;
          if (v18)
          {
            if ((*(_BYTE *)(v18 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v18 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v18 + 32) + 32), &unk_1E60CB300, 16);
            v19 = sub_1B0303B3C((unint64_t *)v18, 0x10uLL, (uint64_t)sub_1B030F004);
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = v18;
          }
          else
          {
            v19 = operator new();
            *(_QWORD *)v19 = 0;
            *(_QWORD *)(v19 + 8) = 0;
          }
          *v8 = v19;
        }
        else
        {
          v19 = *v8;
        }
        sub_1B03149A0((int *)v19, (int *)*a3);
        break;
      case 7:
      case 13:
        if (v10)
        {
          v22 = *a1;
          if (v22)
          {
            if ((*(_BYTE *)(v22 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v22 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v22 + 32) + 32), &unk_1E60CB310, 16);
            v23 = sub_1B0303B3C((unint64_t *)v22, 0x10uLL, (uint64_t)sub_1B030F00C);
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = v22;
          }
          else
          {
            v23 = operator new();
            *(_QWORD *)v23 = 0;
            *(_QWORD *)(v23 + 8) = 0;
          }
          *v8 = v23;
        }
        else
        {
          v23 = *v8;
        }
        sub_1B0314FC8((int *)v23, (int *)*a3);
        break;
      case 8:
        if (v10)
        {
          v30 = *a1;
          if (v30)
          {
            if ((*(_BYTE *)(v30 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v30 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v30 + 32) + 32), &unk_1E60CB2D0, 16);
            v31 = sub_1B0303B3C((unint64_t *)v30, 0x10uLL, (uint64_t)sub_1B030F01C);
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = v30;
          }
          else
          {
            v31 = operator new();
            *(_QWORD *)v31 = 0;
            *(_QWORD *)(v31 + 8) = 0;
          }
          *v8 = v31;
        }
        else
        {
          v31 = *v8;
        }
        sub_1B031437C((int *)v31, (int *)*a3);
        break;
      case 9:
      case 12:
        if (v10)
        {
          v32 = *a1;
          if (v32)
          {
            if ((*(_BYTE *)(v32 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v32 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v32 + 32) + 32), &unk_1E60CB380, 24);
            v33 = (_QWORD *)sub_1B0303B3C((unint64_t *)v32, 0x18uLL, (uint64_t)sub_1B030F020);
            v33[2] = 0;
            *v33 = v32;
          }
          else
          {
            v33 = (_QWORD *)operator new();
            v33[2] = 0;
            *v33 = 0;
          }
          v33[1] = 0;
          *v8 = (uint64_t)v33;
        }
        else
        {
          v33 = (_QWORD *)*v8;
        }
        sub_1B0300388((uint64_t)v33, *a3);
        break;
      case 10:
      case 11:
        if (v10)
        {
          v34 = *a1;
          if (*a1)
          {
            if ((*(_BYTE *)(v34 + 24) & 1) != 0)
              (*(void (**)(_QWORD, void *, uint64_t))(**(_QWORD **)(*(_QWORD *)(v34 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v34 + 32) + 32), &unk_1E60CB358, 24);
            v35 = (_QWORD *)sub_1B0303B3C((unint64_t *)v34, 0x18uLL, (uint64_t)sub_1B030F024);
            v35[2] = 0;
            *v35 = v34;
          }
          else
          {
            v35 = (_QWORD *)operator new();
            v35[2] = 0;
            *v35 = 0;
          }
          v35[1] = 0;
          *v8 = (uint64_t)v35;
        }
        v45 = (int *)*a3;
        if (v45[2] >= 1)
        {
          v46 = 0;
          do
          {
            v47 = sub_1B030F048((uint64_t)v45, v46);
            v48 = v47;
            v49 = *v8;
            v50 = *(_DWORD **)(*v8 + 16);
            if (!v50
              || (v51 = *(int *)(v49 + 8), (int)v51 >= *v50)
              || (*(_DWORD *)(v49 + 8) = v51 + 1, (v52 = *(_QWORD *)&v50[2 * v51 + 2]) == 0))
            {
              v52 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 32))(v47, *a1);
              sub_1B030F124(*v8, v52);
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v52 + 64))(v52, v48);
            ++v46;
          }
          while (v46 < v45[2]);
        }
        break;
      default:
        return;
    }
    return;
  }
  if ((*((_BYTE *)a3 + 10) & 1) != 0)
    return;
  v11 = *((unsigned __int8 *)a3 + 8);
  if ((v11 - 19) <= 0xFFFFFFED)
  {
    sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v12 = sub_1B0305340(v64, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_1B0305470((uint64_t)&v63, (const char **)&v12->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v64);
  }
  switch(v11)
  {
    case 1:
      sub_1B030756C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(double *)a3);
      return;
    case 2:
      sub_1B0307028((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), a3[2], *(float *)a3);
      return;
    case 3:
    case 16:
    case 18:
      sub_1B030608C((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
      return;
    case 4:
    case 6:
      sub_1B0306AF4((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *a3, a3[2]);
      return;
    case 5:
    case 15:
    case 17:
      sub_1B0305B58((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    case 7:
    case 13:
      sub_1B03065C0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    case 8:
      sub_1B0307AB0((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_BYTE *)a3, a3[2]);
      return;
    case 9:
    case 12:
      v36 = *((unsigned __int8 *)a3 + 8);
      v37 = (int *)*a3;
      if (*(char *)(*a3 + 23) < 0)
      {
        sub_1B02EB0A8(__p, *(void **)v37, *((_QWORD *)v37 + 1));
      }
      else
      {
        v38 = *(_OWORD *)v37;
        v62 = *((_QWORD *)v37 + 2);
        *(_OWORD *)__p = v38;
      }
      sub_1B030A39C(a1, a2, v36, (__n128 *)__p, (uint64_t *)a3[2]);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      return;
    case 10:
    case 11:
      v39 = (uint64_t *)a3[2];
      v40 = sub_1B030A4B4((uint64_t)a1, a2);
      v41 = v40;
      v40[2] = v39;
      if (v42)
      {
        *((_BYTE *)v40 + 8) = *((_BYTE *)a3 + 8);
        *((_BYTE *)v40 + 11) = *((_BYTE *)a3 + 11);
        *((_BYTE *)v40 + 9) = 0;
        v43 = *((_BYTE *)v40 + 10) & 0xF;
        if ((*((_BYTE *)a3 + 10) & 0x10) != 0)
        {
          *((_BYTE *)v40 + 10) = v43 | 0x10;
          v59 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 16))(*a3, *a1);
          *v41 = (uint64_t *)v59;
          (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v59 + 104))(v59, *a3);
          goto LABEL_135;
        }
        *((_BYTE *)v40 + 10) = v43;
        v44 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 32))(*a3, *a1);
        *v41 = (uint64_t *)v44;
        goto LABEL_133;
      }
      if (*((unsigned __int8 *)v40 + 8) != *((unsigned __int8 *)a3 + 8))
      {
        sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1026);
        v53 = sub_1B0305340(v64, "CHECK failed: (extension->type) == (other_extension.type): ");
        sub_1B0305470((uint64_t)&v63, (const char **)&v53->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v64);
      }
      if (*((unsigned __int8 *)v41 + 11) != *((unsigned __int8 *)a3 + 11))
      {
        sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1027);
        v54 = sub_1B0305340(v64, "CHECK failed: (extension->is_packed) == (other_extension.is_packed): ");
        sub_1B0305470((uint64_t)&v63, (const char **)&v54->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v64);
      }
      if (*((_BYTE *)v41 + 9))
      {
        sub_1B0305328((uint64_t)v64, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1028);
        v55 = sub_1B0305340(v64, "CHECK failed: !extension->is_repeated: ");
        sub_1B0305470((uint64_t)&v63, (const char **)&v55->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v64);
      }
      v56 = *v41;
      v57 = (int *)*a3;
      if ((*((_BYTE *)a3 + 10) & 0x10) == 0)
      {
        v58 = *v56;
        if ((*((_BYTE *)v41 + 10) & 0x10) == 0)
        {
          (*(void (**)(uint64_t *, int *))(v58 + 64))(v56, v57);
          goto LABEL_135;
        }
        v44 = (*(uint64_t (**)(uint64_t *, int *))(v58 + 32))(*v41, v57);
LABEL_133:
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 64))(v44, *a3);
        goto LABEL_135;
      }
      if ((*((_BYTE *)v41 + 10) & 0x10) != 0)
      {
        (*(void (**)(uint64_t *, int *))(*v56 + 104))(v56, v57);
      }
      else
      {
        v60 = (*(uint64_t (**)(_QWORD, uint64_t *))(*(_QWORD *)v57 + 24))(*a3, *v41);
        (*(void (**)(uint64_t *, uint64_t))(*v56 + 64))(v56, v60);
      }
LABEL_135:
      *((_BYTE *)v41 + 10) &= 0xF0u;
      return;
    case 14:
      sub_1B0308320((uint64_t)a1, a2, *((unsigned __int8 *)a3 + 8), *(_DWORD *)a3, a3[2]);
      return;
    default:
      return;
  }
}

void sub_1B030A334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  sub_1B0305478((uint64_t)&a16);
  _Unwind_Resume(a1);
}

__n128 sub_1B030A39C(uint64_t *a1, uint64_t a2, int a3, __n128 *a4, uint64_t *a5)
{
  uint64_t v6;
  __n128 *v7;
  __n128 result;

  v6 = sub_1B0308854(a1, a2, a3, a5);
  v7 = (__n128 *)v6;
  if (*(char *)(v6 + 23) < 0)
    operator delete(*(void **)v6);
  result = *a4;
  v7[1].n128_u64[0] = a4[1].n128_u64[0];
  *v7 = result;
  a4[1].n128_u8[7] = 0;
  a4->n128_u8[0] = 0;
  return result;
}

uint64_t sub_1B030A3EC(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v3;
  __int16 v4;
  __int16 v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = (unsigned __int8 *)result;
  if (*(_QWORD *)result == *(_QWORD *)a2)
  {
    v4 = *(_WORD *)(result + 8);
    *(_WORD *)(result + 8) = *(_WORD *)(a2 + 8);
    *(_WORD *)(a2 + 8) = v4;
    v5 = *(_WORD *)(result + 10);
    *(_WORD *)(result + 10) = *(_WORD *)(a2 + 10);
    *(_WORD *)(a2 + 10) = v5;
    v6 = *(_QWORD *)(result + 16);
    *(_QWORD *)(result + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = v6;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    sub_1B030942C((uint64_t)&v7, a2);
    sub_1B0309390((unsigned __int8 *)a2);
    sub_1B030942C(a2, (uint64_t)v3);
    sub_1B0309390(v3);
    sub_1B030942C((uint64_t)v3, (uint64_t)&v7);
    return sub_1B03058D4((uint64_t)&v7);
  }
  return result;
}

void sub_1B030A4A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B03058D4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1B030A4B4(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t **v4;
  uint64_t v6;
  uint64_t **v7;
  unint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t **v11;
  int v12;
  uint64_t **result;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *(unsigned __int16 *)(a1 + 8);
  v4 = *(uint64_t ***)(a1 + 16);
  if (v3 >= 0x101)
  {
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0;
    v16 = 0;
    LODWORD(v14) = a2;
    return sub_1B030F868(v4, (int *)&v14, &v14) + 5;
  }
  v6 = *(unsigned __int16 *)(a1 + 10);
  v7 = &v4[4 * v6];
  if (!*(_WORD *)(a1 + 10))
  {
    if (!*(_WORD *)(a1 + 8))
      goto LABEL_18;
    LOWORD(v6) = 0;
LABEL_17:
    *(_WORD *)(a1 + 10) = v6 + 1;
    *(_DWORD *)v7 = a2;
    v7[1] = 0;
    result = v7 + 1;
    v7[2] = 0;
    v7[3] = 0;
    return result;
  }
  v8 = *(unsigned __int16 *)(a1 + 10);
  do
  {
    v9 = v8 >> 1;
    v10 = (int *)&v4[4 * (v8 >> 1)];
    v12 = *v10;
    v11 = (uint64_t **)(v10 + 8);
    v8 += ~(v8 >> 1);
    if (v12 < (int)a2)
      v4 = v11;
    else
      v8 = v9;
  }
  while (v8);
  if (v4 != v7)
  {
    if (*(_DWORD *)v4 == (_DWORD)a2)
      return v4 + 1;
    if (v6 < v3)
    {
      memmove(v4 + 4, v4, (char *)v7 - (char *)v4);
      LOWORD(v6) = *(_WORD *)(a1 + 10);
      v7 = v4;
      goto LABEL_17;
    }
    goto LABEL_18;
  }
  if (v6 < v3)
    goto LABEL_17;
LABEL_18:
  sub_1B0309548((_QWORD *)a1, v6 + 1);
  return (uint64_t **)sub_1B030A4B4(a1, a2);
}

uint64_t sub_1B030A5FC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  BOOL v11;

  v1 = *(_QWORD **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    v8 = (unsigned __int8 *)*v1;
    v7 = (unsigned __int8 *)(v1 + 1);
    v6 = v8;
    if (v8 == v7)
    {
      return 1;
    }
    else
    {
      do
      {
        v4 = sub_1B030A6CC(v6 + 40);
        if (!(_DWORD)v4)
          break;
        v9 = (unsigned __int8 *)*((_QWORD *)v6 + 1);
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (unsigned __int8 *)*((_QWORD *)v6 + 2);
            v11 = *(_QWORD *)v10 == (_QWORD)v6;
            v6 = v10;
          }
          while (!v11);
        }
        v6 = v10;
      }
      while (v10 != v7);
    }
  }
  else
  {
    while (1)
    {
      v3 = *(_QWORD *)(a1 + 16) + 32 * *(unsigned __int16 *)(a1 + 10);
      v4 = v1 == (_QWORD *)v3;
      if (v1 == (_QWORD *)v3)
        break;
      v5 = (unsigned __int8 *)(v1 + 1);
      if (!sub_1B030A6CC(v5))
        break;
      v1 = v5 + 24;
      if (*(unsigned __int16 *)(a1 + 8) > 0x100u)
        sub_1B030FED8();
    }
  }
  return v4;
}

uint64_t sub_1B030A6CC(unsigned __int8 *a1)
{
  uint64_t v2;
  std::string *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  char v9;
  std::string v10[2];

  v2 = a1[8];
  if ((v2 - 19) <= 0xFFFFFFED)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v3 = sub_1B0305340(v10, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v3->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v10);
  }
  if (dword_1B03AFBC8[v2] != 10)
    return 1;
  if (a1[9])
  {
    v4 = *(_QWORD *)a1;
    if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
    {
      v5 = 0;
      while (1)
      {
        v6 = sub_1B030F048(v4, v5);
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 48))(v6) & 1) == 0)
          break;
        ++v5;
        v4 = *(_QWORD *)a1;
        if (v5 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
          return 1;
      }
      return 0;
    }
    return 1;
  }
  if ((a1[10] & 1) != 0)
    return 1;
  v7 = **(_QWORD **)a1;
  if ((a1[10] & 0x10) != 0)
    return ((*(uint64_t (**)(void))(v7 + 72))() & 1) != 0;
  result = (*(uint64_t (**)(void))(v7 + 48))();
  if ((_DWORD)result)
    return 1;
  return result;
}

void sub_1B030A7D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B030A7F0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5, _BYTE *a6)
{
  uint64_t result;
  uint64_t v10;
  std::string *v11;
  unsigned int v12;
  std::string *v13;
  char v14;
  std::string v15[2];

  result = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(_QWORD *)a4 + 16))(a4, a3, a5);
  if ((_DWORD)result)
  {
    v10 = *a5;
    if ((v10 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v15, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v14, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v15);
    }
    v12 = dword_1B03AFC14[v10];
    *a6 = 0;
    if (a2 == 2 && a5[1])
    {
      if (v12 > 5)
      {
        sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 82);
        v13 = sub_1B0305340(v15, "can't reach here.");
        sub_1B0305470((uint64_t)&v14, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v15);
      }
      else
      {
        result = 1;
        if (((1 << v12) & 0x1C) == 0)
        {
          *a6 = 1;
          return result;
        }
      }
    }
    return v12 == a2;
  }
  return result;
}

void sub_1B030A910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B030A930(uint64_t *a1, unint64_t a2, unsigned __int8 *a3, uint64_t a4, unint64_t *a5, int32x2_t *a6)
{
  unsigned int v9;
  uint64_t v11;
  std::string *v13;
  unsigned __int8 v14[39];
  unsigned __int8 v15;
  _QWORD v16[2];

  v9 = a2;
  v16[0] = &off_1E60CCFF8;
  v16[1] = a4;
  v11 = a2 >> 3;
  v15 = 0;
  if ((sub_1B030A7F0((uint64_t)a1, a2 & 7, a2 >> 3, (uint64_t)v16, v14, &v15) & 1) != 0)
    return (unsigned __int8 *)sub_1B030A9F8(a1, v11, v15, (uint64_t)v14, a5, a3, a6);
  if ((*a5 & 1) != 0)
    v13 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
  else
    v13 = (std::string *)sub_1B02F71FC(a5);
  return sub_1B0311E20(v9, v13, (char *)a3, a6);
}

char *sub_1B030A9F8(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unint64_t *a5, unsigned __int8 *a6, int32x2_t *a7)
{
  unsigned __int8 *v8;
  uint64_t v11;
  uint64_t *v12;
  std::string *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  char *result;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t *v27;
  int v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t *v38;
  double v39;
  float v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t *v44;
  int v45;
  int v46;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unint64_t v53;
  int v54;
  uint64_t *v55;
  int v56;
  unint64_t v57;
  std::string *v58;
  int v59;
  std::string::value_type *v60;
  uint64_t v61;
  int v62;
  int v63;
  int v64;
  uint64_t v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  int v70;
  uint64_t v71;
  int v72;
  int v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  __int32 v77;
  int v78;
  uint64_t v79;
  int v80;
  int v81;
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  std::string *v87;
  char v88;
  std::string v89;
  unint64_t *v90;
  int v91;

  v8 = a6;
  v11 = a2;
  v12 = a1;
  if (a3)
  {
    switch(*(_BYTE *)a4)
    {
      case 1:
        v30 = sub_1B0307FE4(a1, a2, 1, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311CD0(v30, v8, a7);
        break;
      case 2:
        v31 = sub_1B0307FE4(a1, a2, 2, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311C68(v31, v8, a7);
        break;
      case 3:
        v32 = sub_1B0307FE4(a1, a2, 3, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311A78((int *)v32, v8, (uint64_t)a7);
        break;
      case 4:
        v33 = sub_1B0307FE4(a1, a2, 4, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311A88((int *)v33, v8, (uint64_t)a7);
        break;
      case 5:
        v16 = sub_1B0307FE4(a1, a2, 5, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311A58((int *)v16, v8, (uint64_t)a7);
        break;
      case 6:
        v34 = sub_1B0307FE4(a1, a2, 6, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311B98(v34, v8, a7);
        break;
      case 7:
        v35 = sub_1B0307FE4(a1, a2, 7, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311AC8(v35, v8, a7);
        break;
      case 8:
        v36 = sub_1B0307FE4(a1, a2, 8, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311AB8((int *)v36, v8, (uint64_t)a7);
        break;
      case 9:
      case 0xA:
      case 0xB:
      case 0xC:
        sub_1B0305328((uint64_t)&v89, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/extension_set_inl.h", 79);
        v13 = sub_1B0305340(&v89, "Non-primitive types can't be packed.");
        sub_1B0305470((uint64_t)&v88, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v89);
        return (char *)v8;
      case 0xD:
        v18 = sub_1B0307FE4(a1, a2, 13, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311A68((int *)v18, v8, (uint64_t)a7);
        break;
      case 0xE:
        v89.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1B0307FE4(a1, a2, 14, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        *(_OWORD *)&v89.__r_.__value_.__r.__words[1] = *(_OWORD *)(a4 + 8);
        v90 = a5;
        v91 = v11;
        return sub_1B030F314((uint64_t)a7, (char *)v8, (uint64_t)&v89);
      case 0xF:
        v19 = sub_1B0307FE4(a1, a2, 15, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311B30(v19, v8, a7);
        break;
      case 0x10:
        v37 = sub_1B0307FE4(a1, a2, 16, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311C00(v37, v8, a7);
        break;
      case 0x11:
        v20 = sub_1B0307FE4(a1, a2, 17, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311A98((int *)v20, v8, (uint64_t)a7);
        break;
      case 0x12:
        v38 = sub_1B0307FE4(a1, a2, 18, *(_BYTE *)(a4 + 2), *(uint64_t **)(a4 + 24));
        result = (char *)sub_1B0311AA8((int *)v38, v8, (uint64_t)a7);
        break;
      default:
        return (char *)v8;
    }
    return result;
  }
  switch(*(_BYTE *)a4)
  {
    case 1:
      v8 = a6 + 8;
      v39 = *(double *)a6;
      if (*(_BYTE *)(a4 + 1))
        sub_1B0307788(a1, a2, 1, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v39);
      else
        sub_1B030756C((uint64_t)a1, a2, 1, *(_QWORD *)(a4 + 24), v39);
      return (char *)v8;
    case 2:
      v8 = a6 + 4;
      v40 = *(float *)a6;
      if (*(_BYTE *)(a4 + 1))
        sub_1B0307244(a1, a2, 2, *(unsigned __int8 *)(a4 + 2), *(uint64_t **)(a4 + 24), v40);
      else
        sub_1B0307028((uint64_t)a1, a2, 2, *(_QWORD *)(a4 + 24), v40);
      return (char *)v8;
    case 3:
      v41 = *a6;
      if ((char)*a6 < 0)
      {
        v67 = v41 + (a6[1] << 7);
        v41 = (v67 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, (v67 - 128));
          if (!v8)
            return (char *)v8;
          v41 = v84;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v56 = 3;
        goto LABEL_136;
      }
      v79 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v80 = 3;
      goto LABEL_138;
    case 4:
      v42 = *a6;
      if ((char)*a6 < 0)
      {
        v68 = v42 + (a6[1] << 7);
        v42 = (v68 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, (v68 - 128));
          if (!v8)
            return (char *)v8;
          v42 = v85;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v43 = *(unsigned __int8 *)(a4 + 2);
        v44 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v45 = 4;
        goto LABEL_117;
      }
      v69 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v70 = 4;
      goto LABEL_119;
    case 5:
      v21 = *a6;
      if ((char)*a6 < 0)
      {
        v63 = v21 + (a6[1] << 7);
        v21 = v63 - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, (v63 - 128));
          if (!v8)
            return (char *)v8;
          v21 = v81;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v28 = 5;
        goto LABEL_104;
      }
      v65 = *(_QWORD *)(a4 + 24);
      a1 = v12;
      a2 = v11;
      v66 = 5;
      v82 = v21;
      goto LABEL_107;
    case 6:
      v8 = a6 + 8;
      v42 = *(_QWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v43 = *(unsigned __int8 *)(a4 + 2);
        v44 = *(uint64_t **)(a4 + 24);
        v45 = 6;
LABEL_117:
        sub_1B0306D08(a1, a2, v45, v43, v42, v44);
      }
      else
      {
        v69 = *(_QWORD *)(a4 + 24);
        v70 = 6;
LABEL_119:
        sub_1B0306AF4((uint64_t)a1, a2, v70, v42, v69);
      }
      return (char *)v8;
    case 7:
      v8 = a6 + 4;
      v25 = *(_DWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v46 = *(unsigned __int8 *)(a4 + 2);
        v47 = *(uint64_t **)(a4 + 24);
        v48 = 7;
        goto LABEL_98;
      }
      v71 = *(_QWORD *)(a4 + 24);
      v72 = 7;
      v73 = *(_DWORD *)a6;
      goto LABEL_100;
    case 8:
      v49 = *a6;
      if ((char)*a6 < 0)
      {
        v49 = v49 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, v49);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
        sub_1B0307CC4(v12, v11, 8, *(unsigned __int8 *)(a4 + 2), v49 != 0, *(uint64_t **)(a4 + 24));
      else
        sub_1B0307AB0((uint64_t)v12, v11, 8, v49 != 0, *(_QWORD *)(a4 + 24));
      return (char *)v8;
    case 9:
    case 0xC:
      v14 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v15 = (uint64_t)sub_1B0308AD8(a1, a2, 9, v14);
      else
        v15 = sub_1B0308854(a1, a2, 9, v14);
      v58 = (std::string *)v15;
      v59 = *v8;
      if (((char)*v8 & 0x80000000) == 0)
      {
        v60 = (std::string::value_type *)(v8 + 1);
        return (char *)sub_1B030F2BC((uint64_t)a7, v60, v59, v58);
      }
      v61 = sub_1B0311984((uint64_t)v8, *v8);
      if (v61)
      {
        v60 = (std::string::value_type *)v61;
        v59 = v62;
        return (char *)sub_1B030F2BC((uint64_t)a7, v60, v59, v58);
      }
      return 0;
    case 0xA:
      v50 = *(_QWORD *)(a4 + 8);
      v51 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v52 = sub_1B03090A8(a1, a2, 10, v50, v51);
      else
        v52 = sub_1B0308E44(a1, a2, 10, v50, v51);
      v74 = a7[11].i32[0];
      v75 = __OFSUB__(v74--, 1);
      a7[11].i32[0] = v74;
      if (v74 < 0 != v75)
        return 0;
      ++a7[11].i32[1];
      v76 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, int32x2_t *))(*(_QWORD *)v52 + 88))(v52, v8, a7);
      a7[11] = vadd_s32(a7[11], (int32x2_t)0xFFFFFFFF00000001);
      v77 = a7[10].i32[0];
      a7[10].i32[0] = 0;
      if (v77 == ((8 * (_DWORD)v11) | 3))
        return (char *)v76;
      else
        return 0;
    case 0xB:
      v22 = *(_QWORD *)(a4 + 8);
      v23 = *(uint64_t **)(a4 + 24);
      if (*(_BYTE *)(a4 + 1))
        v24 = sub_1B03090A8(a1, a2, 11, v22, v23);
      else
        v24 = sub_1B0308E44(a1, a2, 11, v22, v23);
      return (char *)sub_1B0311728(a7, v24, v8);
    case 0xD:
      v25 = *a6;
      if ((char)*a6 < 0)
      {
        v64 = v25 + (a6[1] << 7);
        v25 = v64 - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, (v64 - 128));
          if (!v8)
            return (char *)v8;
          v25 = v83;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (*(_BYTE *)(a4 + 1))
      {
        v46 = *(unsigned __int8 *)(a4 + 2);
        v47 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v48 = 13;
LABEL_98:
        sub_1B03067D4(a1, a2, v48, v46, v25, v47);
      }
      else
      {
        v71 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v72 = 13;
        v73 = v25;
LABEL_100:
        sub_1B03065C0((uint64_t)a1, a2, v72, v73, v71);
      }
      return (char *)v8;
    case 0xE:
      v53 = *a6;
      if ((char)*a6 < 0)
      {
        v78 = v53 + (a6[1] << 7);
        v53 = (v78 - 128);
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, (v78 - 128));
          if (!v8)
            return (char *)v8;
          v53 = v86;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      if (((*(uint64_t (**)(_QWORD, unint64_t))(a4 + 8))(*(_QWORD *)(a4 + 16), v53) & 1) != 0)
      {
        if (*(_BYTE *)(a4 + 1))
          sub_1B0308534(v12, v11, 14, *(unsigned __int8 *)(a4 + 2), v53, *(uint64_t **)(a4 + 24));
        else
          sub_1B0308320((uint64_t)v12, v11, 14, v53, *(_QWORD *)(a4 + 24));
      }
      else
      {
        if ((*a5 & 1) != 0)
          v87 = (std::string *)((*a5 & 0xFFFFFFFFFFFFFFFELL) + 8);
        else
          v87 = (std::string *)sub_1B02F71FC(a5);
        sub_1B03117F8(v11, v53, v87);
      }
      return (char *)v8;
    case 0xF:
      v8 = a6 + 4;
      v21 = *(_DWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        v28 = 15;
        goto LABEL_104;
      }
      v65 = *(_QWORD *)(a4 + 24);
      v66 = 15;
      goto LABEL_106;
    case 0x10:
      v8 = a6 + 8;
      v41 = *(_QWORD *)a6;
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        v56 = 16;
        goto LABEL_136;
      }
      v79 = *(_QWORD *)(a4 + 24);
      v80 = 16;
      goto LABEL_138;
    case 0x11:
      LODWORD(v29) = *a6;
      if ((char)*a6 < 0)
      {
        v29 = v29 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, v29);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      v21 = -(v29 & 1) ^ (v29 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v26 = *(unsigned __int8 *)(a4 + 2);
        v27 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v28 = 17;
LABEL_104:
        sub_1B0305D6C(a1, a2, v28, v26, v21, v27);
      }
      else
      {
        v65 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v66 = 17;
LABEL_106:
        v82 = v21;
LABEL_107:
        sub_1B0305B58((uint64_t)a1, a2, v66, v82, v65);
      }
      return (char *)v8;
    case 0x12:
      v57 = *a6;
      if ((char)*a6 < 0)
      {
        v57 = v57 + (a6[1] << 7) - 128;
        if ((char)a6[1] < 0)
        {
          v8 = (unsigned __int8 *)sub_1B03118F8((uint64_t)a6, v57);
          if (!v8)
            return (char *)v8;
        }
        else
        {
          v8 = a6 + 2;
        }
      }
      else
      {
        v8 = a6 + 1;
      }
      v41 = -(uint64_t)(v57 & 1) ^ (v57 >> 1);
      if (*(_BYTE *)(a4 + 1))
      {
        v54 = *(unsigned __int8 *)(a4 + 2);
        v55 = *(uint64_t **)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v56 = 18;
LABEL_136:
        sub_1B03062A0(a1, a2, v56, v54, v41, v55);
      }
      else
      {
        v79 = *(_QWORD *)(a4 + 24);
        a1 = v12;
        a2 = v11;
        v80 = 18;
LABEL_138:
        sub_1B030608C((uint64_t)a1, a2, v80, v41, v79);
      }
      return (char *)v8;
    default:
      return (char *)v8;
  }
}

void sub_1B030B548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B030B564(uint64_t a1, signed int a2, int a3, char *a4, uint64_t *a5)
{
  unsigned int *v7;
  unint64_t v8;
  unsigned int *v9;
  unint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  signed int v13;
  uint64_t v14;
  uint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  _QWORD *v19;
  int v20;
  BOOL v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int *v24;
  unsigned int *v25;
  BOOL v26;

  v7 = *(unsigned int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) >= 0x101u)
  {
    v18 = *((_QWORD *)v7 + 1);
    v17 = v7 + 2;
    v16 = v18;
    if (v18)
    {
      v19 = v17;
      do
      {
        v20 = *(_DWORD *)(v16 + 32);
        v21 = v20 < a2;
        if (v20 >= a2)
          v22 = (uint64_t *)v16;
        else
          v22 = (uint64_t *)(v16 + 8);
        if (!v21)
          v19 = (_QWORD *)v16;
        v16 = *v22;
      }
      while (*v22);
      if (v19 != (_QWORD *)v17)
      {
        do
        {
          v23 = *((unsigned int *)v19 + 8);
          if ((int)v23 >= a3)
            break;
          a4 = sub_1B030B690((_BYTE *)v19 + 40, v23, a4, a5);
          v24 = (unsigned int *)v19[1];
          if (v24)
          {
            do
            {
              v25 = v24;
              v24 = *(unsigned int **)v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              v25 = (unsigned int *)v19[2];
              v26 = *(_QWORD *)v25 == (_QWORD)v19;
              v19 = v25;
            }
            while (!v26);
          }
          v19 = v25;
        }
        while (v25 != v17);
      }
    }
  }
  else
  {
    v8 = *(unsigned __int16 *)(a1 + 10);
    if (*(_WORD *)(a1 + 10))
    {
      v9 = &v7[8 * v8];
      do
      {
        v10 = v8 >> 1;
        v11 = &v7[8 * (v8 >> 1)];
        v13 = *v11;
        v12 = v11 + 8;
        v8 += ~(v8 >> 1);
        if (v13 < a2)
          v7 = v12;
        else
          v8 = v10;
      }
      while (v8);
      while (v7 != v9)
      {
        v14 = *v7;
        if ((int)v14 >= a3)
          break;
        a4 = sub_1B030B690((_BYTE *)v7 + 8, v14, a4, a5);
        v7 += 8;
      }
    }
  }
  return a4;
}

char *sub_1B030B690(_BYTE *a1, uint64_t a2, char *a3, uint64_t *a4)
{
  char *v5;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  std::string *v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  std::string *v19;
  _DWORD *v20;
  int v21;
  unsigned int v22;
  unsigned int v23;
  char v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  std::string *v40;
  std::string *v41;
  _DWORD *v42;
  int v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  _DWORD *v48;
  int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  _DWORD *v54;
  int v55;
  _DWORD *v56;
  int v57;
  int *v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  unsigned int v62;
  int *v63;
  int v64;
  _DWORD *v65;
  int v66;
  _DWORD *v67;
  int v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  int v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  _DWORD *v79;
  int v80;
  _DWORD *v81;
  int v82;
  _DWORD *v83;
  int v84;
  _DWORD *v85;
  int v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  _DWORD *v91;
  int v92;
  _DWORD *v93;
  int v94;
  uint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  _DWORD *v100;
  int v101;
  unsigned int v102;
  unsigned int v103;
  unsigned int v104;
  char v105;
  int v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  unsigned int v110;
  _DWORD *v111;
  int v112;
  unsigned int v113;
  char v114;
  unsigned int v115;
  unint64_t v116;
  _BYTE *v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _DWORD *v124;
  int v125;
  unsigned int v126;
  char v127;
  unsigned int v128;
  unint64_t v129;
  _BYTE *v130;
  unsigned int v131;
  unsigned int v132;
  unsigned int v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _DWORD *v137;
  int v138;
  unsigned int v139;
  char v140;
  unsigned int v141;
  unint64_t v142;
  _BYTE *v143;
  unsigned int v144;
  unsigned int v145;
  unsigned int v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  _DWORD *v150;
  int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  uint64_t v157;
  _QWORD *v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  _DWORD *v162;
  int v163;
  unsigned int v164;
  unsigned int v165;
  unsigned int v166;
  char v167;
  int v168;
  _DWORD *v169;
  unsigned int v170;
  unsigned int v171;
  unsigned int v172;
  _DWORD *v173;
  int v174;
  unsigned int v175;
  char v176;
  unsigned int v177;
  char v178;
  _BYTE *v179;
  unsigned int v180;
  unsigned int v181;
  unsigned int v182;
  uint64_t v183;
  int v184;
  unsigned int v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int64_t v191;
  _BYTE *v192;
  unsigned int v193;
  unsigned int v194;
  unsigned int v195;
  char *v196;
  const void *v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  char v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char v205;
  uint64_t v206;
  char *v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  char *v211;
  unsigned int v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  int v216;
  unsigned int v217;
  unsigned int v218;
  unsigned int v219;
  char v220;
  uint64_t v221;
  uint64_t v222;
  _BYTE *v223;
  unsigned int v224;
  unsigned int v225;
  unsigned int v226;
  unsigned int v227;
  _BYTE *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  uint64_t v232;
  int v233;
  unsigned int v234;
  uint64_t v235;
  unsigned int v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  int64_t v240;
  _BYTE *v241;
  unsigned int v242;
  unsigned int v243;
  unsigned int v244;
  char *v245;
  const void *v246;
  _DWORD *v247;
  int v248;
  unsigned int v249;
  char v250;
  unsigned int v251;
  unsigned int v252;
  _BYTE *v253;
  unsigned int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  _DWORD *v260;
  int v261;
  unsigned int v262;
  char v263;
  unsigned int v264;
  unint64_t v265;
  _BYTE *v266;
  unsigned int v267;
  unsigned int v268;
  unsigned int v269;
  unint64_t v270;
  unint64_t v271;
  unint64_t v272;
  _DWORD *v273;
  int v274;
  unsigned int v275;
  unsigned int v276;
  unsigned int v277;
  char v278;
  int v279;
  _DWORD *v280;
  unsigned int v281;
  unsigned int v282;
  unsigned int v283;
  _DWORD *v284;
  int v285;
  unsigned int v286;
  unsigned int v287;
  char v288;
  unsigned int v289;
  unsigned int v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v293;
  unsigned int v294;
  unsigned int v295;
  _DWORD *v296;
  int v297;
  unsigned int v298;
  char v299;
  unsigned int v300;
  int v301;
  _BYTE *v302;
  unsigned int v303;
  unsigned int v304;
  unsigned int v305;
  unsigned int v306;
  unsigned int v307;
  unsigned int v308;
  unsigned int v309;
  _DWORD *v310;
  int v311;
  unsigned int v312;
  char v313;
  unsigned int v314;
  uint64_t v315;
  _BYTE *v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  unint64_t v322;
  unint64_t v323;
  int v324;
  unsigned int v325;
  unsigned int v326;
  _DWORD *v327;
  unsigned int v328;
  unsigned int v329;
  unint64_t v330;
  unsigned int v331;
  char *v332;
  unsigned int v333;
  unsigned int v334;
  unsigned int v335;
  unsigned int v336;
  unsigned int v337;
  unsigned int v338;
  _QWORD *v339;
  int64_t v340;
  uint64_t v341;
  unsigned int v342;
  unsigned int v343;
  unsigned int v344;
  char *v345;
  uint64_t v346;
  unsigned int v347;
  _BYTE *v348;
  unsigned int v349;
  unsigned int v350;
  int v351;
  unsigned int v352;
  uint64_t v353;
  unsigned int v354;
  unsigned int v355;
  unsigned int v356;
  unsigned int v357;
  unsigned int v358;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  unsigned int v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  uint64_t v368;
  unsigned int v369;
  unsigned int v370;
  _BYTE *v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t v378;
  unsigned int v379;
  unsigned int v380;
  unsigned int v381;
  unint64_t v382;
  unint64_t v383;
  unint64_t v384;
  unsigned int v385;
  unsigned int v386;
  unint64_t v387;
  unsigned int v388;
  unsigned int v389;
  unint64_t v390;
  unsigned int v391;
  unsigned int v392;
  unsigned int v393;
  unsigned int v394;
  unsigned int v395;
  unsigned int v396;
  unsigned int v397;
  unsigned int v398;
  unsigned int v399;
  unsigned int v400;
  unsigned int v401;
  unsigned int v402;
  unsigned int v403;
  unsigned int v404;
  unsigned int v405;
  unsigned int v406;
  unsigned int v407;
  unsigned int v408;
  unint64_t v409;
  unint64_t v410;
  unsigned int v411;
  unsigned int v412;
  unsigned int v413;
  unint64_t v414;
  unsigned int v415;
  unsigned int v416;
  unint64_t v417;
  unint64_t v418;
  unsigned int v419;
  char *v420;
  unsigned int v421;
  unsigned int v422;
  unsigned int v423;
  _BYTE *v424;
  unsigned int v425;
  unsigned int v426;
  unsigned int v427;
  unsigned int v429;
  unsigned int v430;
  char v431;
  std::string v432[2];

  v5 = a3;
  if (a1[9])
  {
    if (a1[11])
    {
      if (*((_DWORD *)a1 + 3))
      {
        if (*a4 <= (unint64_t)a3)
          v5 = sub_1B0304904((uint64_t)a4, a3);
        v8 = (8 * a2) | 2;
        if (v8 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          v32 = (8 * a2) >> 7;
          if (v8 >> 14)
          {
            v9 = v5 + 2;
            do
            {
              *(v9 - 1) = v32 | 0x80;
              v33 = v32 >> 7;
              ++v9;
              v34 = v32 >> 14;
              v32 >>= 7;
            }
            while (v34);
            *(v9 - 1) = v33;
          }
          else
          {
            v5[1] = v32;
            v9 = v5 + 2;
          }
        }
        else
        {
          *v5 = v8;
          v9 = v5 + 1;
        }
        v35 = *((int *)a1 + 3);
        if (v35 > 0x7F)
        {
          *v9 = v35 | 0x80;
          v36 = v35 >> 7;
          if (v35 >> 14)
          {
            v5 = v9 + 2;
            do
            {
              *(v5 - 1) = v36 | 0x80;
              v37 = v36 >> 7;
              ++v5;
              v38 = v36 >> 14;
              v36 >>= 7;
            }
            while (v38);
            *(v5 - 1) = v37;
          }
          else
          {
            v9[1] = v36;
            v5 = v9 + 2;
          }
        }
        else
        {
          *v9 = v35;
          v5 = v9 + 1;
        }
        v39 = a1[8];
        if ((v39 - 19) <= 0xFFFFFFED)
        {
          sub_1B0305328((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
          v40 = sub_1B0305340(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
          sub_1B0305470((uint64_t)&v431, (const char **)&v40->__r_.__value_.__l.__data_);
          sub_1B0305478((uint64_t)v432);
        }
        switch(v39)
        {
          case 1:
            v63 = *(int **)a1;
            if (**(int **)a1 >= 1)
            {
              v64 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v63 = *(int **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_1B03166BC(v63, v64);
                v5 += 8;
                ++v64;
                v63 = *(int **)a1;
              }
              while (v64 < **(_DWORD **)a1);
            }
            break;
          case 2:
            v65 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v66 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v65 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_1B0316094(v65, v66);
                v5 += 4;
                ++v66;
                v65 = *(_DWORD **)a1;
              }
              while (v66 < **(_DWORD **)a1);
            }
            break;
          case 3:
            v67 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v68 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v67 = *(_DWORD **)a1;
                }
                v69 = *(_QWORD *)sub_1B0315444(v67, v68);
                if (v69 > 0x7F)
                {
                  *v5 = v69 | 0x80;
                  v70 = v69 >> 7;
                  if (v69 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v70 | 0x80;
                      v71 = v70 >> 7;
                      ++v5;
                      v72 = v70 >> 14;
                      v70 >>= 7;
                    }
                    while (v72);
                    *(v5 - 1) = v71;
                  }
                  else
                  {
                    v5[1] = v70;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v69;
                }
                ++v68;
                v67 = *(_DWORD **)a1;
              }
              while (v68 < **(_DWORD **)a1);
            }
            break;
          case 4:
            v73 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v74 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v73 = *(_DWORD **)a1;
                }
                v75 = *(_QWORD *)sub_1B0315A6C(v73, v74);
                if (v75 > 0x7F)
                {
                  *v5 = v75 | 0x80;
                  v76 = v75 >> 7;
                  if (v75 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v76 | 0x80;
                      v77 = v76 >> 7;
                      ++v5;
                      v78 = v76 >> 14;
                      v76 >>= 7;
                    }
                    while (v78);
                    *(v5 - 1) = v77;
                  }
                  else
                  {
                    v5[1] = v76;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v75;
                }
                ++v74;
                v73 = *(_DWORD **)a1;
              }
              while (v74 < **(_DWORD **)a1);
            }
            break;
          case 5:
            v42 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v43 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v42 = *(_DWORD **)a1;
                }
                v44 = *(int *)sub_1B03147F4(v42, v43);
                if (v44 > 0x7F)
                {
                  *v5 = v44 | 0x80;
                  v45 = v44 >> 7;
                  if (v44 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v45 | 0x80;
                      v46 = v45 >> 7;
                      ++v5;
                      v47 = v45 >> 14;
                      v45 >>= 7;
                    }
                    while (v47);
                    *(v5 - 1) = v46;
                  }
                  else
                  {
                    v5[1] = v45;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v44;
                }
                ++v43;
                v42 = *(_DWORD **)a1;
              }
              while (v43 < **(_DWORD **)a1);
            }
            break;
          case 6:
            v79 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v80 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v79 = *(_DWORD **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_1B0315A6C(v79, v80);
                v5 += 8;
                ++v80;
                v79 = *(_DWORD **)a1;
              }
              while (v80 < **(_DWORD **)a1);
            }
            break;
          case 7:
            v81 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v82 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v81 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_1B0314E1C(v81, v82);
                v5 += 4;
                ++v82;
                v81 = *(_DWORD **)a1;
              }
              while (v82 < **(_DWORD **)a1);
            }
            break;
          case 8:
            v83 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v84 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v83 = *(_DWORD **)a1;
                }
                *v5++ = *(_BYTE *)sub_1B03141D0(v83, v84++);
                v83 = *(_DWORD **)a1;
              }
              while (v84 < **(_DWORD **)a1);
            }
            break;
          case 9:
          case 10:
          case 11:
          case 12:
            sub_1B0305328((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1966);
            v41 = sub_1B0305340(v432, "Non-primitive types can't be packed.");
            sub_1B0305470((uint64_t)&v431, (const char **)&v41->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v432);
            break;
          case 13:
            v48 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v49 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v48 = *(_DWORD **)a1;
                }
                v50 = *(_DWORD *)sub_1B0314E1C(v48, v49);
                if (v50 > 0x7F)
                {
                  *v5 = v50 | 0x80;
                  v51 = v50 >> 7;
                  if (v50 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v51 | 0x80;
                      v52 = v51 >> 7;
                      ++v5;
                      v53 = v51 >> 14;
                      v51 >>= 7;
                    }
                    while (v53);
                    *(v5 - 1) = v52;
                  }
                  else
                  {
                    v5[1] = v51;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v50;
                }
                ++v49;
                v48 = *(_DWORD **)a1;
              }
              while (v49 < **(_DWORD **)a1);
            }
            break;
          case 14:
            v85 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v86 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v85 = *(_DWORD **)a1;
                }
                v87 = *(int *)sub_1B03147F4(v85, v86);
                if (v87 > 0x7F)
                {
                  *v5 = v87 | 0x80;
                  v88 = v87 >> 7;
                  if (v87 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v88 | 0x80;
                      v89 = v88 >> 7;
                      ++v5;
                      v90 = v88 >> 14;
                      v88 >>= 7;
                    }
                    while (v90);
                    *(v5 - 1) = v89;
                  }
                  else
                  {
                    v5[1] = v88;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v87;
                }
                ++v86;
                v85 = *(_DWORD **)a1;
              }
              while (v86 < **(_DWORD **)a1);
            }
            break;
          case 15:
            v54 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v55 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v54 = *(_DWORD **)a1;
                }
                *(_DWORD *)v5 = *(_DWORD *)sub_1B03147F4(v54, v55);
                v5 += 4;
                ++v55;
                v54 = *(_DWORD **)a1;
              }
              while (v55 < **(_DWORD **)a1);
            }
            break;
          case 16:
            v91 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v92 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v91 = *(_DWORD **)a1;
                }
                *(_QWORD *)v5 = *(_QWORD *)sub_1B0315444(v91, v92);
                v5 += 8;
                ++v92;
                v91 = *(_DWORD **)a1;
              }
              while (v92 < **(_DWORD **)a1);
            }
            break;
          case 17:
            v56 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v57 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v56 = *(_DWORD **)a1;
                }
                v58 = (int *)sub_1B03147F4(v56, v57);
                v59 = (2 * *v58) ^ (*v58 >> 31);
                if (v59 > 0x7F)
                {
                  *v5 = v59 | 0x80;
                  v60 = v59 >> 7;
                  if (v59 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v60 | 0x80;
                      v61 = v60 >> 7;
                      ++v5;
                      v62 = v60 >> 14;
                      v60 >>= 7;
                    }
                    while (v62);
                    *(v5 - 1) = v61;
                  }
                  else
                  {
                    v5[1] = v60;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v59;
                }
                ++v57;
                v56 = *(_DWORD **)a1;
              }
              while (v57 < **(_DWORD **)a1);
            }
            break;
          case 18:
            v93 = *(_DWORD **)a1;
            if (**(int **)a1 >= 1)
            {
              v94 = 0;
              do
              {
                if (*a4 <= (unint64_t)v5)
                {
                  v5 = sub_1B0304904((uint64_t)a4, v5);
                  v93 = *(_DWORD **)a1;
                }
                v95 = (uint64_t *)sub_1B0315444(v93, v94);
                v96 = (2 * *v95) ^ (*v95 >> 63);
                if (v96 > 0x7F)
                {
                  *v5 = v96 | 0x80;
                  v97 = v96 >> 7;
                  if (v96 >> 14)
                  {
                    v5 += 2;
                    do
                    {
                      *(v5 - 1) = v97 | 0x80;
                      v98 = v97 >> 7;
                      ++v5;
                      v99 = v97 >> 14;
                      v97 >>= 7;
                    }
                    while (v99);
                    *(v5 - 1) = v98;
                  }
                  else
                  {
                    v5[1] = v97;
                    v5 += 2;
                  }
                }
                else
                {
                  *v5++ = v96;
                }
                ++v94;
                v93 = *(_DWORD **)a1;
              }
              while (v94 < **(_DWORD **)a1);
            }
            break;
          default:
            return v5;
        }
      }
      return v5;
    }
    v18 = a1[8];
    if ((v18 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v19 = sub_1B0305340(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v431, (const char **)&v19->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v432);
    }
    switch(v18)
    {
      case 1:
        v20 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v21 = 0;
          v22 = 8 * a2;
          v23 = (8 * a2) | 1;
          v24 = (8 * a2) | 0x81;
          v25 = (a2 >> 4) & 0x1FFFFFF;
          v26 = v22 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v20 = *(_DWORD **)a1;
            }
            v27 = *(_QWORD *)sub_1B03166BC(v20, v21);
            if (v23 > 0x7F)
            {
              *v5 = v24;
              if (v23 >= 0x4000)
              {
                v28 = v5 + 2;
                v29 = v25;
                do
                {
                  *((_BYTE *)v28 - 1) = v29 | 0x80;
                  v30 = v29 >> 7;
                  v28 = (_QWORD *)((char *)v28 + 1);
                  v31 = v29 >> 14;
                  v29 >>= 7;
                }
                while (v31);
                *((_BYTE *)v28 - 1) = v30;
              }
              else
              {
                v5[1] = v26;
                v28 = v5 + 2;
              }
            }
            else
            {
              *v5 = v23;
              v28 = v5 + 1;
            }
            *v28 = v27;
            v5 = (char *)(v28 + 1);
            ++v21;
            v20 = *(_DWORD **)a1;
          }
          while (v21 < **(_DWORD **)a1);
        }
        return v5;
      case 2:
        v100 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v101 = 0;
          v102 = (8 * a2) | 5;
          v103 = (a2 >> 4) & 0x1FFFFFF;
          v104 = (8 * a2) >> 7;
          v105 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v100 = *(_DWORD **)a1;
            }
            v106 = *(_DWORD *)sub_1B0316094(v100, v101);
            if (v102 > 0x7F)
            {
              *v5 = v105;
              if (v102 >= 0x4000)
              {
                v107 = v5 + 2;
                v108 = v103;
                do
                {
                  *((_BYTE *)v107 - 1) = v108 | 0x80;
                  v109 = v108 >> 7;
                  v107 = (_DWORD *)((char *)v107 + 1);
                  v110 = v108 >> 14;
                  v108 >>= 7;
                }
                while (v110);
                *((_BYTE *)v107 - 1) = v109;
              }
              else
              {
                v5[1] = v104;
                v107 = v5 + 2;
              }
            }
            else
            {
              *v5 = v102;
              v107 = v5 + 1;
            }
            *v107 = v106;
            v5 = (char *)(v107 + 1);
            ++v101;
            v100 = *(_DWORD **)a1;
          }
          while (v101 < **(_DWORD **)a1);
        }
        return v5;
      case 3:
        v111 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v112 = 0;
          v113 = 8 * a2;
          v114 = (8 * a2) | 0x80;
          v115 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v111 = *(_DWORD **)a1;
            }
            v116 = *(_QWORD *)sub_1B0315444(v111, v112);
            if (v113 > 0x7F)
            {
              *v5 = v114;
              if (v113 >= 0x4000)
              {
                v117 = v5 + 2;
                v118 = v115;
                do
                {
                  *(v117 - 1) = v118 | 0x80;
                  v119 = v118 >> 7;
                  ++v117;
                  v120 = v118 >> 14;
                  v118 >>= 7;
                }
                while (v120);
                *(v117 - 1) = v119;
              }
              else
              {
                v5[1] = v113 >> 7;
                v117 = v5 + 2;
              }
            }
            else
            {
              v117 = v5 + 1;
              *v5 = v113;
            }
            if (v116 > 0x7F)
            {
              *v117 = v116 | 0x80;
              v121 = v116 >> 7;
              if (v116 >> 14)
              {
                v5 = v117 + 2;
                do
                {
                  *(v5 - 1) = v121 | 0x80;
                  v122 = v121 >> 7;
                  ++v5;
                  v123 = v121 >> 14;
                  v121 >>= 7;
                }
                while (v123);
                *(v5 - 1) = v122;
              }
              else
              {
                v117[1] = v121;
                v5 = v117 + 2;
              }
            }
            else
            {
              *v117 = v116;
              v5 = v117 + 1;
            }
            ++v112;
            v111 = *(_DWORD **)a1;
          }
          while (v112 < **(_DWORD **)a1);
        }
        return v5;
      case 4:
        v124 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v125 = 0;
          v126 = 8 * a2;
          v127 = (8 * a2) | 0x80;
          v128 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v124 = *(_DWORD **)a1;
            }
            v129 = *(_QWORD *)sub_1B0315A6C(v124, v125);
            if (v126 > 0x7F)
            {
              *v5 = v127;
              if (v126 >= 0x4000)
              {
                v130 = v5 + 2;
                v131 = v128;
                do
                {
                  *(v130 - 1) = v131 | 0x80;
                  v132 = v131 >> 7;
                  ++v130;
                  v133 = v131 >> 14;
                  v131 >>= 7;
                }
                while (v133);
                *(v130 - 1) = v132;
              }
              else
              {
                v5[1] = v126 >> 7;
                v130 = v5 + 2;
              }
            }
            else
            {
              v130 = v5 + 1;
              *v5 = v126;
            }
            if (v129 > 0x7F)
            {
              *v130 = v129 | 0x80;
              v134 = v129 >> 7;
              if (v129 >> 14)
              {
                v5 = v130 + 2;
                do
                {
                  *(v5 - 1) = v134 | 0x80;
                  v135 = v134 >> 7;
                  ++v5;
                  v136 = v134 >> 14;
                  v134 >>= 7;
                }
                while (v136);
                *(v5 - 1) = v135;
              }
              else
              {
                v130[1] = v134;
                v5 = v130 + 2;
              }
            }
            else
            {
              *v130 = v129;
              v5 = v130 + 1;
            }
            ++v125;
            v124 = *(_DWORD **)a1;
          }
          while (v125 < **(_DWORD **)a1);
        }
        return v5;
      case 5:
        v137 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v138 = 0;
          v139 = 8 * a2;
          v140 = (8 * a2) | 0x80;
          v141 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v137 = *(_DWORD **)a1;
            }
            v142 = *(int *)sub_1B03147F4(v137, v138);
            if (v139 > 0x7F)
            {
              *v5 = v140;
              if (v139 >= 0x4000)
              {
                v143 = v5 + 2;
                v144 = v141;
                do
                {
                  *(v143 - 1) = v144 | 0x80;
                  v145 = v144 >> 7;
                  ++v143;
                  v146 = v144 >> 14;
                  v144 >>= 7;
                }
                while (v146);
                *(v143 - 1) = v145;
              }
              else
              {
                v5[1] = v139 >> 7;
                v143 = v5 + 2;
              }
            }
            else
            {
              v143 = v5 + 1;
              *v5 = v139;
            }
            if (v142 > 0x7F)
            {
              *v143 = v142 | 0x80;
              v147 = v142 >> 7;
              if (v142 >> 14)
              {
                v5 = v143 + 2;
                do
                {
                  *(v5 - 1) = v147 | 0x80;
                  v148 = v147 >> 7;
                  ++v5;
                  v149 = v147 >> 14;
                  v147 >>= 7;
                }
                while (v149);
                *(v5 - 1) = v148;
              }
              else
              {
                v143[1] = v147;
                v5 = v143 + 2;
              }
            }
            else
            {
              *v143 = v142;
              v5 = v143 + 1;
            }
            ++v138;
            v137 = *(_DWORD **)a1;
          }
          while (v138 < **(_DWORD **)a1);
        }
        return v5;
      case 6:
        v150 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v151 = 0;
          v152 = 8 * a2;
          v153 = (8 * a2) | 1;
          v154 = (8 * a2) | 0x81;
          v155 = (a2 >> 4) & 0x1FFFFFF;
          v156 = v152 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v150 = *(_DWORD **)a1;
            }
            v157 = *(_QWORD *)sub_1B0315A6C(v150, v151);
            if (v153 > 0x7F)
            {
              *v5 = v154;
              if (v153 >= 0x4000)
              {
                v158 = v5 + 2;
                v159 = v155;
                do
                {
                  *((_BYTE *)v158 - 1) = v159 | 0x80;
                  v160 = v159 >> 7;
                  v158 = (_QWORD *)((char *)v158 + 1);
                  v161 = v159 >> 14;
                  v159 >>= 7;
                }
                while (v161);
                *((_BYTE *)v158 - 1) = v160;
              }
              else
              {
                v5[1] = v156;
                v158 = v5 + 2;
              }
            }
            else
            {
              *v5 = v153;
              v158 = v5 + 1;
            }
            *v158 = v157;
            v5 = (char *)(v158 + 1);
            ++v151;
            v150 = *(_DWORD **)a1;
          }
          while (v151 < **(_DWORD **)a1);
        }
        return v5;
      case 7:
        v162 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v163 = 0;
          v164 = (8 * a2) | 5;
          v165 = (a2 >> 4) & 0x1FFFFFF;
          v166 = (8 * a2) >> 7;
          v167 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v162 = *(_DWORD **)a1;
            }
            v168 = *(_DWORD *)sub_1B0314E1C(v162, v163);
            if (v164 > 0x7F)
            {
              *v5 = v167;
              if (v164 >= 0x4000)
              {
                v169 = v5 + 2;
                v170 = v165;
                do
                {
                  *((_BYTE *)v169 - 1) = v170 | 0x80;
                  v171 = v170 >> 7;
                  v169 = (_DWORD *)((char *)v169 + 1);
                  v172 = v170 >> 14;
                  v170 >>= 7;
                }
                while (v172);
                *((_BYTE *)v169 - 1) = v171;
              }
              else
              {
                v5[1] = v166;
                v169 = v5 + 2;
              }
            }
            else
            {
              *v5 = v164;
              v169 = v5 + 1;
            }
            *v169 = v168;
            v5 = (char *)(v169 + 1);
            ++v163;
            v162 = *(_DWORD **)a1;
          }
          while (v163 < **(_DWORD **)a1);
        }
        return v5;
      case 8:
        v173 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v174 = 0;
          v175 = 8 * a2;
          v176 = (8 * a2) | 0x80;
          v177 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v173 = *(_DWORD **)a1;
            }
            v178 = *(_BYTE *)sub_1B03141D0(v173, v174);
            if (v175 > 0x7F)
            {
              *v5 = v176;
              if (v175 >= 0x4000)
              {
                v179 = v5 + 2;
                v180 = v177;
                do
                {
                  *(v179 - 1) = v180 | 0x80;
                  v181 = v180 >> 7;
                  ++v179;
                  v182 = v180 >> 14;
                  v180 >>= 7;
                }
                while (v182);
                *(v179 - 1) = v181;
              }
              else
              {
                v5[1] = v175 >> 7;
                v179 = v5 + 2;
              }
            }
            else
            {
              *v5 = v175;
              v179 = v5 + 1;
            }
            *v179 = v178;
            v5 = v179 + 1;
            ++v174;
            v173 = *(_DWORD **)a1;
          }
          while (v174 < **(_DWORD **)a1);
        }
        return v5;
      case 9:
        v183 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v184 = 0;
        v185 = 8 * a2;
        v186 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v186 = 5;
        v187 = (8 * a2) | 2;
        v188 = 1;
        if (v185 >= 0x80)
          v188 = 2;
        if (v185 < 0x200000)
          v186 = 3;
        if (v185 >= 0x4000)
          v189 = v186;
        else
          v189 = v188;
        v429 = v185 >> 7;
        while (1)
        {
          if (*a4 <= (unint64_t)v5)
          {
            v5 = sub_1B0304904((uint64_t)a4, v5);
            v183 = *(_QWORD *)a1;
          }
          v190 = sub_1B0300154(v183, v184);
          if (*(char *)(v190 + 23) < 0)
          {
            v191 = *(_QWORD *)(v190 + 8);
            if (v191 > 127)
              goto LABEL_326;
          }
          else
          {
            v191 = *(unsigned __int8 *)(v190 + 23);
          }
          if ((uint64_t)(*a4 + ~(unint64_t)&v5[v189] + 16) >= v191)
          {
            if (v187 > 0x7F)
            {
              *v5 = (8 * a2) | 0x82;
              if (v187 >= 0x4000)
              {
                v192 = v5 + 2;
                v193 = (a2 >> 4) & 0x1FFFFFF;
                do
                {
                  *(v192 - 1) = v193 | 0x80;
                  v194 = v193 >> 7;
                  ++v192;
                  v195 = v193 >> 14;
                  v193 >>= 7;
                }
                while (v195);
                *(v192 - 1) = v194;
              }
              else
              {
                v5[1] = v429;
                v192 = v5 + 2;
              }
            }
            else
            {
              v192 = v5 + 1;
              *v5 = v187;
            }
            *v192 = v191;
            v196 = v192 + 1;
            if (*(char *)(v190 + 23) >= 0)
              v197 = (const void *)v190;
            else
              v197 = *(const void **)v190;
            memcpy(v196, v197, v191);
            v5 = &v196[v191];
            goto LABEL_324;
          }
LABEL_326:
          v5 = sub_1B0304E14(a4, a2, v190, v5);
LABEL_324:
          ++v184;
          v183 = *(_QWORD *)a1;
          if (v184 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
            return v5;
        }
      case 10:
        v198 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v199 = 0;
          v200 = (8 * a2) | 3;
          v201 = (8 * a2) | 0x83;
          v202 = (a2 >> 4) & 0x1FFFFFF;
          v203 = (8 * a2) | 4;
          v204 = (8 * a2) >> 7;
          v205 = (8 * a2) | 0x84;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v198 = *(_QWORD *)a1;
            }
            v206 = sub_1B030F048(v198, v199);
            if (v200 > 0x7F)
            {
              *v5 = v201;
              if (v200 >= 0x4000)
              {
                v207 = v5 + 2;
                v208 = v202;
                do
                {
                  *(v207 - 1) = v208 | 0x80;
                  v209 = v208 >> 7;
                  ++v207;
                  v210 = v208 >> 14;
                  v208 >>= 7;
                }
                while (v210);
                *(v207 - 1) = v209;
              }
              else
              {
                v5[1] = v204;
                v207 = v5 + 2;
              }
            }
            else
            {
              v207 = v5 + 1;
              *v5 = v200;
            }
            v211 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v206 + 96))(v206, v207, a4);
            if (*a4 <= (unint64_t)v211)
              v211 = sub_1B0304904((uint64_t)a4, v211);
            if (v203 > 0x7F)
            {
              *v211 = v205;
              if (v203 >= 0x4000)
              {
                v5 = v211 + 2;
                v212 = v202;
                do
                {
                  *(v5 - 1) = v212 | 0x80;
                  v213 = v212 >> 7;
                  ++v5;
                  v214 = v212 >> 14;
                  v212 >>= 7;
                }
                while (v214);
                *(v5 - 1) = v213;
              }
              else
              {
                v211[1] = v204;
                v5 = v211 + 2;
              }
            }
            else
            {
              v5 = v211 + 1;
              *v211 = v203;
            }
            ++v199;
            v198 = *(_QWORD *)a1;
          }
          while (v199 < *(_DWORD *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 11:
        v215 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) >= 1)
        {
          v216 = 0;
          v217 = (8 * a2) | 2;
          v218 = (a2 >> 4) & 0x1FFFFFF;
          v219 = (8 * a2) >> 7;
          v220 = (8 * a2) | 0x82;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v215 = *(_QWORD *)a1;
            }
            v221 = sub_1B030F048(v215, v216);
            v222 = v221;
            if (v217 > 0x7F)
            {
              *v5 = v220;
              if (v217 >= 0x4000)
              {
                v223 = v5 + 2;
                v224 = v218;
                do
                {
                  *(v223 - 1) = v224 | 0x80;
                  v225 = v224 >> 7;
                  ++v223;
                  v226 = v224 >> 14;
                  v224 >>= 7;
                }
                while (v226);
                *(v223 - 1) = v225;
              }
              else
              {
                v5[1] = v219;
                v223 = v5 + 2;
              }
            }
            else
            {
              v223 = v5 + 1;
              *v5 = v217;
            }
            v227 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v221 + 80))(v221);
            if (v227 > 0x7F)
            {
              *v223 = v227 | 0x80;
              v229 = v227 >> 7;
              if (v227 >> 14)
              {
                v228 = v223 + 2;
                do
                {
                  *(v228 - 1) = v229 | 0x80;
                  v230 = v229 >> 7;
                  ++v228;
                  v231 = v229 >> 14;
                  v229 >>= 7;
                }
                while (v231);
                *(v228 - 1) = v230;
              }
              else
              {
                v223[1] = v229;
                v228 = v223 + 2;
              }
            }
            else
            {
              *v223 = v227;
              v228 = v223 + 1;
            }
            v5 = (char *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v222 + 96))(v222, v228, a4);
            ++v216;
            v215 = *(_QWORD *)a1;
          }
          while (v216 < *(_DWORD *)(*(_QWORD *)a1 + 8));
        }
        return v5;
      case 12:
        v232 = *(_QWORD *)a1;
        if (*(int *)(*(_QWORD *)a1 + 8) < 1)
          return v5;
        v233 = 0;
        v234 = 8 * a2;
        v235 = 4;
        if (((a2 >> 25) & 0xF) != 0)
          v235 = 5;
        v236 = (8 * a2) | 2;
        v237 = 1;
        if (v234 >= 0x80)
          v237 = 2;
        if (v234 < 0x200000)
          v235 = 3;
        if (v234 >= 0x4000)
          v238 = v235;
        else
          v238 = v237;
        v430 = v234 >> 7;
        break;
      case 13:
        v247 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v248 = 0;
          v249 = 8 * a2;
          v250 = (8 * a2) | 0x80;
          v251 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v247 = *(_DWORD **)a1;
            }
            v252 = *(_DWORD *)sub_1B0314E1C(v247, v248);
            if (v249 > 0x7F)
            {
              *v5 = v250;
              if (v249 >= 0x4000)
              {
                v253 = v5 + 2;
                v254 = v251;
                do
                {
                  *(v253 - 1) = v254 | 0x80;
                  v255 = v254 >> 7;
                  ++v253;
                  v256 = v254 >> 14;
                  v254 >>= 7;
                }
                while (v256);
                *(v253 - 1) = v255;
              }
              else
              {
                v5[1] = v249 >> 7;
                v253 = v5 + 2;
              }
            }
            else
            {
              v253 = v5 + 1;
              *v5 = v249;
            }
            if (v252 > 0x7F)
            {
              *v253 = v252 | 0x80;
              v257 = v252 >> 7;
              if (v252 >> 14)
              {
                v5 = v253 + 2;
                do
                {
                  *(v5 - 1) = v257 | 0x80;
                  v258 = v257 >> 7;
                  ++v5;
                  v259 = v257 >> 14;
                  v257 >>= 7;
                }
                while (v259);
                *(v5 - 1) = v258;
              }
              else
              {
                v253[1] = v257;
                v5 = v253 + 2;
              }
            }
            else
            {
              *v253 = v252;
              v5 = v253 + 1;
            }
            ++v248;
            v247 = *(_DWORD **)a1;
          }
          while (v248 < **(_DWORD **)a1);
        }
        return v5;
      case 14:
        v260 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v261 = 0;
          v262 = 8 * a2;
          v263 = (8 * a2) | 0x80;
          v264 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v260 = *(_DWORD **)a1;
            }
            v265 = *(int *)sub_1B03147F4(v260, v261);
            if (v262 > 0x7F)
            {
              *v5 = v263;
              if (v262 >= 0x4000)
              {
                v266 = v5 + 2;
                v267 = v264;
                do
                {
                  *(v266 - 1) = v267 | 0x80;
                  v268 = v267 >> 7;
                  ++v266;
                  v269 = v267 >> 14;
                  v267 >>= 7;
                }
                while (v269);
                *(v266 - 1) = v268;
              }
              else
              {
                v5[1] = v262 >> 7;
                v266 = v5 + 2;
              }
            }
            else
            {
              v266 = v5 + 1;
              *v5 = v262;
            }
            if (v265 > 0x7F)
            {
              *v266 = v265 | 0x80;
              v270 = v265 >> 7;
              if (v265 >> 14)
              {
                v5 = v266 + 2;
                do
                {
                  *(v5 - 1) = v270 | 0x80;
                  v271 = v270 >> 7;
                  ++v5;
                  v272 = v270 >> 14;
                  v270 >>= 7;
                }
                while (v272);
                *(v5 - 1) = v271;
              }
              else
              {
                v266[1] = v270;
                v5 = v266 + 2;
              }
            }
            else
            {
              *v266 = v265;
              v5 = v266 + 1;
            }
            ++v261;
            v260 = *(_DWORD **)a1;
          }
          while (v261 < **(_DWORD **)a1);
        }
        return v5;
      case 15:
        v273 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v274 = 0;
          v275 = (8 * a2) | 5;
          v276 = (a2 >> 4) & 0x1FFFFFF;
          v277 = (8 * a2) >> 7;
          v278 = (8 * a2) | 0x85;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v273 = *(_DWORD **)a1;
            }
            v279 = *(_DWORD *)sub_1B03147F4(v273, v274);
            if (v275 > 0x7F)
            {
              *v5 = v278;
              if (v275 >= 0x4000)
              {
                v280 = v5 + 2;
                v281 = v276;
                do
                {
                  *((_BYTE *)v280 - 1) = v281 | 0x80;
                  v282 = v281 >> 7;
                  v280 = (_DWORD *)((char *)v280 + 1);
                  v283 = v281 >> 14;
                  v281 >>= 7;
                }
                while (v283);
                *((_BYTE *)v280 - 1) = v282;
              }
              else
              {
                v5[1] = v277;
                v280 = v5 + 2;
              }
            }
            else
            {
              *v5 = v275;
              v280 = v5 + 1;
            }
            *v280 = v279;
            v5 = (char *)(v280 + 1);
            ++v274;
            v273 = *(_DWORD **)a1;
          }
          while (v274 < **(_DWORD **)a1);
        }
        return v5;
      case 16:
        v284 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v285 = 0;
          v286 = 8 * a2;
          v287 = (8 * a2) | 1;
          v288 = (8 * a2) | 0x81;
          v289 = (a2 >> 4) & 0x1FFFFFF;
          v290 = v286 >> 7;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v284 = *(_DWORD **)a1;
            }
            v291 = *(_QWORD *)sub_1B0315444(v284, v285);
            if (v287 > 0x7F)
            {
              *v5 = v288;
              if (v287 >= 0x4000)
              {
                v292 = v5 + 2;
                v293 = v289;
                do
                {
                  *((_BYTE *)v292 - 1) = v293 | 0x80;
                  v294 = v293 >> 7;
                  v292 = (_QWORD *)((char *)v292 + 1);
                  v295 = v293 >> 14;
                  v293 >>= 7;
                }
                while (v295);
                *((_BYTE *)v292 - 1) = v294;
              }
              else
              {
                v5[1] = v290;
                v292 = v5 + 2;
              }
            }
            else
            {
              *v5 = v287;
              v292 = v5 + 1;
            }
            *v292 = v291;
            v5 = (char *)(v292 + 1);
            ++v285;
            v284 = *(_DWORD **)a1;
          }
          while (v285 < **(_DWORD **)a1);
        }
        return v5;
      case 17:
        v296 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v297 = 0;
          v298 = 8 * a2;
          v299 = (8 * a2) | 0x80;
          v300 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v296 = *(_DWORD **)a1;
            }
            v301 = *(_DWORD *)sub_1B03147F4(v296, v297);
            if (v298 > 0x7F)
            {
              *v5 = v299;
              if (v298 >= 0x4000)
              {
                v302 = v5 + 2;
                v303 = v300;
                do
                {
                  *(v302 - 1) = v303 | 0x80;
                  v304 = v303 >> 7;
                  ++v302;
                  v305 = v303 >> 14;
                  v303 >>= 7;
                }
                while (v305);
                *(v302 - 1) = v304;
              }
              else
              {
                v5[1] = v298 >> 7;
                v302 = v5 + 2;
              }
            }
            else
            {
              v302 = v5 + 1;
              *v5 = v298;
            }
            v306 = (2 * v301) ^ (v301 >> 31);
            if (v306 > 0x7F)
            {
              *v302 = v306 | 0x80;
              v307 = v306 >> 7;
              if (v306 >> 14)
              {
                v5 = v302 + 2;
                do
                {
                  *(v5 - 1) = v307 | 0x80;
                  v308 = v307 >> 7;
                  ++v5;
                  v309 = v307 >> 14;
                  v307 >>= 7;
                }
                while (v309);
                *(v5 - 1) = v308;
              }
              else
              {
                v302[1] = v307;
                v5 = v302 + 2;
              }
            }
            else
            {
              *v302 = v306;
              v5 = v302 + 1;
            }
            ++v297;
            v296 = *(_DWORD **)a1;
          }
          while (v297 < **(_DWORD **)a1);
        }
        return v5;
      case 18:
        v310 = *(_DWORD **)a1;
        if (**(int **)a1 >= 1)
        {
          v311 = 0;
          v312 = 8 * a2;
          v313 = (8 * a2) | 0x80;
          v314 = (a2 >> 4) & 0x1FFFFFF;
          do
          {
            if (*a4 <= (unint64_t)v5)
            {
              v5 = sub_1B0304904((uint64_t)a4, v5);
              v310 = *(_DWORD **)a1;
            }
            v315 = *(_QWORD *)sub_1B0315444(v310, v311);
            if (v312 > 0x7F)
            {
              *v5 = v313;
              if (v312 >= 0x4000)
              {
                v316 = v5 + 2;
                v317 = v314;
                do
                {
                  *(v316 - 1) = v317 | 0x80;
                  v318 = v317 >> 7;
                  ++v316;
                  v319 = v317 >> 14;
                  v317 >>= 7;
                }
                while (v319);
                *(v316 - 1) = v318;
              }
              else
              {
                v5[1] = v312 >> 7;
                v316 = v5 + 2;
              }
            }
            else
            {
              v316 = v5 + 1;
              *v5 = v312;
            }
            v320 = (2 * v315) ^ (v315 >> 63);
            if (v320 > 0x7F)
            {
              *v316 = v320 | 0x80;
              v321 = v320 >> 7;
              if (v320 >> 14)
              {
                v5 = v316 + 2;
                do
                {
                  *(v5 - 1) = v321 | 0x80;
                  v322 = v321 >> 7;
                  ++v5;
                  v323 = v321 >> 14;
                  v321 >>= 7;
                }
                while (v323);
                *(v5 - 1) = v322;
              }
              else
              {
                v316[1] = v321;
                v5 = v316 + 2;
              }
            }
            else
            {
              *v316 = v320;
              v5 = v316 + 1;
            }
            ++v311;
            v310 = *(_DWORD **)a1;
          }
          while (v311 < **(_DWORD **)a1);
        }
        return v5;
      default:
        return v5;
    }
    while (1)
    {
      if (*a4 <= (unint64_t)v5)
      {
        v5 = sub_1B0304904((uint64_t)a4, v5);
        v232 = *(_QWORD *)a1;
      }
      v239 = sub_1B0300154(v232, v233);
      if (*(char *)(v239 + 23) < 0)
      {
        v240 = *(_QWORD *)(v239 + 8);
        if (v240 > 127)
          goto LABEL_399;
      }
      else
      {
        v240 = *(unsigned __int8 *)(v239 + 23);
      }
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v238] + 16) >= v240)
      {
        if (v236 > 0x7F)
        {
          *v5 = (8 * a2) | 0x82;
          if (v236 >= 0x4000)
          {
            v241 = v5 + 2;
            v242 = (a2 >> 4) & 0x1FFFFFF;
            do
            {
              *(v241 - 1) = v242 | 0x80;
              v243 = v242 >> 7;
              ++v241;
              v244 = v242 >> 14;
              v242 >>= 7;
            }
            while (v244);
            *(v241 - 1) = v243;
          }
          else
          {
            v5[1] = v430;
            v241 = v5 + 2;
          }
        }
        else
        {
          v241 = v5 + 1;
          *v5 = v236;
        }
        *v241 = v240;
        v245 = v241 + 1;
        if (*(char *)(v239 + 23) >= 0)
          v246 = (const void *)v239;
        else
          v246 = *(const void **)v239;
        memcpy(v245, v246, v240);
        v5 = &v245[v240];
        goto LABEL_397;
      }
LABEL_399:
      v5 = sub_1B0304E14(a4, a2, v239, v5);
LABEL_397:
      ++v233;
      v232 = *(_QWORD *)a1;
      if (v233 >= *(_DWORD *)(*(_QWORD *)a1 + 8))
        return v5;
    }
  }
  if ((a1[10] & 1) != 0)
    return v5;
  v10 = a1[8];
  if ((v10 - 19) <= 0xFFFFFFED)
  {
    sub_1B0305328((uint64_t)v432, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
    v11 = sub_1B0305340(v432, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
    sub_1B0305470((uint64_t)&v431, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v432);
  }
  switch(v10)
  {
    case 1:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = v5 + 2;
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (_QWORD *)((char *)v15 + 1);
        v17 = v14 >> 14;
        v14 >>= 7;
      }
      while (v17);
      goto LABEL_693;
    case 2:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = v5 + 2;
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        v329 = v326 >> 14;
        v326 >>= 7;
      }
      while (v329);
      goto LABEL_689;
    case 3:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v330 = *(_QWORD *)a1;
      v331 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v331 | 0x80;
        v355 = v331 >> 7;
        if (v331 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v355 | 0x80;
            v380 = v355 >> 7;
            ++v332;
            v381 = v355 >> 14;
            v355 >>= 7;
          }
          while (v381);
          *(v332 - 1) = v380;
        }
        else
        {
          v5[1] = v355;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v331;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v384 = v382 >> 14;
        v382 >>= 7;
      }
      while (v384);
      goto LABEL_718;
    case 4:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v330 = *(_QWORD *)a1;
      v333 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v333 | 0x80;
        v356 = v333 >> 7;
        if (v333 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v356 | 0x80;
            v385 = v356 >> 7;
            ++v332;
            v386 = v356 >> 14;
            v356 >>= 7;
          }
          while (v386);
          *(v332 - 1) = v385;
        }
        else
        {
          v5[1] = v356;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v333;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v387 = v382 >> 14;
        v382 >>= 7;
      }
      while (v387);
      goto LABEL_718;
    case 5:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v330 = *(int *)a1;
      v334 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v334 | 0x80;
        v357 = v334 >> 7;
        if (v334 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v357 | 0x80;
            v388 = v357 >> 7;
            ++v332;
            v389 = v357 >> 14;
            v357 >>= 7;
          }
          while (v389);
          *(v332 - 1) = v388;
        }
        else
        {
          v5[1] = v357;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v334;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
        goto LABEL_684;
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
        goto LABEL_686;
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v390 = v382 >> 14;
        v382 >>= 7;
      }
      while (v390);
      goto LABEL_718;
    case 6:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 <= 0x7F)
        goto LABEL_575;
      *v5 = (8 * a2) | 0x81;
      v14 = (8 * a2) >> 7;
      if (!(v13 >> 14))
        goto LABEL_602;
      v15 = v5 + 2;
      do
      {
        *((_BYTE *)v15 - 1) = v14 | 0x80;
        v16 = v14 >> 7;
        v15 = (_QWORD *)((char *)v15 + 1);
        v335 = v14 >> 14;
        v14 >>= 7;
      }
      while (v335);
      goto LABEL_693;
    case 7:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 <= 0x7F)
        goto LABEL_571;
      *v5 = (8 * a2) | 0x85;
      v326 = (8 * a2) >> 7;
      if (!(v325 >> 14))
        goto LABEL_600;
      v327 = v5 + 2;
      do
      {
        *((_BYTE *)v327 - 1) = v326 | 0x80;
        v328 = v326 >> 7;
        v327 = (_DWORD *)((char *)v327 + 1);
        v336 = v326 >> 14;
        v326 >>= 7;
      }
      while (v336);
      goto LABEL_689;
    case 8:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      LOBYTE(v337) = *a1;
      v338 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v338 | 0x80;
        v358 = v338 >> 7;
        if (v338 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v358 | 0x80;
            v391 = v358 >> 7;
            ++v332;
            v392 = v358 >> 14;
            v358 >>= 7;
          }
          while (v392);
          *(v332 - 1) = v391;
        }
        else
        {
          v5[1] = v358;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v338;
        v332 = v5 + 1;
      }
      goto LABEL_677;
    case 9:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v339 = *(_QWORD **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
      {
        v340 = v339[1];
        if (v340 > 127)
          return sub_1B0304E14(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
      }
      v364 = 8 * a2;
      v365 = 1;
      v366 = 2;
      v367 = 3;
      v368 = 4;
      if ((8 * a2) >> 28)
        v368 = 5;
      if (v364 >= 0x200000)
        v367 = v368;
      if (v364 >= 0x4000)
        v366 = v367;
      if (v364 >= 0x80)
        v365 = v366;
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v365] + 16) < v340)
        return sub_1B0304E14(a4, a2, (uint64_t)v339, v5);
      v369 = v364 | 2;
      if ((v364 | 2) <= 0x7F)
        goto LABEL_633;
      *v5 = v364 | 0x82;
      v370 = v364 >> 7;
      if (!(v369 >> 14))
        goto LABEL_635;
      v371 = v5 + 2;
      do
      {
        *(v371 - 1) = v370 | 0x80;
        v372 = v370 >> 7;
        ++v371;
        v373 = v370 >> 14;
        v370 >>= 7;
      }
      while (v373);
      goto LABEL_727;
    case 10:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v341 = *(_QWORD *)a1;
      v342 = 8 * a2;
      v343 = (8 * a2) | 3;
      v344 = (8 * a2) >> 7;
      if (v343 > 0x7F)
      {
        *v5 = (8 * a2) | 0x83;
        if (v343 >> 14)
        {
          v345 = v5 + 2;
          v393 = v342 >> 7;
          do
          {
            *(v345 - 1) = v393 | 0x80;
            v394 = v393 >> 7;
            ++v345;
            v395 = v393 >> 14;
            v393 >>= 7;
          }
          while (v395);
          *(v345 - 1) = v394;
        }
        else
        {
          v5[1] = v344;
          v345 = v5 + 2;
        }
      }
      else
      {
        *v5 = v343;
        v345 = v5 + 1;
      }
      v332 = (char *)(*(uint64_t (**)(uint64_t, char *, uint64_t *))(*(_QWORD *)v341 + 96))(v341, v345, a4);
      if (*a4 <= (unint64_t)v332)
        v332 = sub_1B0304904((uint64_t)a4, v332);
      v337 = v342 | 4;
      if ((v342 | 4) <= 0x7F)
        goto LABEL_677;
      *v332 = v342 | 0x84;
      if (!(v337 >> 14))
      {
        v332[1] = v344;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v344 | 0x80;
        v411 = v344 >> 7;
        ++v5;
        v412 = v344 >> 14;
        v344 >>= 7;
      }
      while (v412);
      goto LABEL_715;
    case 11:
      if ((a1[10] & 0x10) != 0)
        return (char *)(*(uint64_t (**)(_QWORD, uint64_t, char *, uint64_t *))(**(_QWORD **)a1 + 136))(*(_QWORD *)a1, a2, v5, a4);
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v346 = *(_QWORD *)a1;
      v347 = (8 * a2) | 2;
      if (v347 > 0x7F)
      {
        *v5 = (8 * a2) | 0x82;
        v379 = (8 * a2) >> 7;
        if (v347 >> 14)
        {
          v348 = v5 + 2;
          do
          {
            *(v348 - 1) = v379 | 0x80;
            v421 = v379 >> 7;
            ++v348;
            v422 = v379 >> 14;
            v379 >>= 7;
          }
          while (v422);
          *(v348 - 1) = v421;
        }
        else
        {
          v5[1] = v379;
          v348 = v5 + 2;
        }
      }
      else
      {
        *v5 = v347;
        v348 = v5 + 1;
      }
      v423 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v346 + 80))(v346);
      if (v423 > 0x7F)
      {
        *v348 = v423 | 0x80;
        v425 = v423 >> 7;
        if (v423 >> 14)
        {
          v424 = v348 + 2;
          do
          {
            *(v424 - 1) = v425 | 0x80;
            v426 = v425 >> 7;
            ++v424;
            v427 = v425 >> 14;
            v425 >>= 7;
          }
          while (v427);
          *(v424 - 1) = v426;
        }
        else
        {
          v348[1] = v425;
          v424 = v348 + 2;
        }
      }
      else
      {
        *v348 = v423;
        v424 = v348 + 1;
      }
      return (char *)(*(uint64_t (**)(uint64_t, _BYTE *, uint64_t *))(*(_QWORD *)v346 + 96))(v346, v424, a4);
    case 12:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v339 = *(_QWORD **)a1;
      if (*(char *)(*(_QWORD *)a1 + 23) < 0)
      {
        v340 = v339[1];
        if (v340 > 127)
          return sub_1B0304E14(a4, a2, (uint64_t)v339, v5);
      }
      else
      {
        v340 = *(unsigned __int8 *)(*(_QWORD *)a1 + 23);
      }
      v374 = 8 * a2;
      v375 = 1;
      v376 = 2;
      v377 = 3;
      v378 = 4;
      if ((8 * a2) >> 28)
        v378 = 5;
      if (v374 >= 0x200000)
        v377 = v378;
      if (v374 >= 0x4000)
        v376 = v377;
      if (v374 >= 0x80)
        v375 = v376;
      if ((uint64_t)(*a4 + ~(unint64_t)&v5[v375] + 16) < v340)
        return sub_1B0304E14(a4, a2, (uint64_t)v339, v5);
      v369 = v374 | 2;
      if ((v374 | 2) > 0x7F)
      {
        *v5 = v374 | 0x82;
        v370 = v374 >> 7;
        if (v369 >> 14)
        {
          v371 = v5 + 2;
          do
          {
            *(v371 - 1) = v370 | 0x80;
            v372 = v370 >> 7;
            ++v371;
            v419 = v370 >> 14;
            v370 >>= 7;
          }
          while (v419);
LABEL_727:
          *(v371 - 1) = v372;
        }
        else
        {
LABEL_635:
          v5[1] = v370;
          v371 = v5 + 2;
        }
      }
      else
      {
LABEL_633:
        *v5 = v369;
        v371 = v5 + 1;
      }
      *v371 = v340;
      v420 = v371 + 1;
      if (*((char *)v339 + 23) < 0)
        v339 = (_QWORD *)*v339;
      memcpy(v420, v339, v340);
      return &v420[v340];
    case 13:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v337 = *(_DWORD *)a1;
      v349 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v349 | 0x80;
        v360 = v349 >> 7;
        if (v349 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v360 | 0x80;
            v396 = v360 >> 7;
            ++v332;
            v397 = v360 >> 14;
            v360 >>= 7;
          }
          while (v397);
          *(v332 - 1) = v396;
        }
        else
        {
          v5[1] = v360;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v349;
        v332 = v5 + 1;
      }
      if (v337 <= 0x7F)
      {
LABEL_677:
        *v332 = v337;
        return v332 + 1;
      }
      *v332 = v337 | 0x80;
      v398 = v337 >> 7;
      if (!(v337 >> 14))
      {
        v332[1] = v398;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v398 | 0x80;
        v411 = v398 >> 7;
        ++v5;
        v413 = v398 >> 14;
        v398 >>= 7;
      }
      while (v413);
LABEL_715:
      *(v5 - 1) = v411;
      return v5;
    case 14:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v330 = *(int *)a1;
      v350 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v350 | 0x80;
        v361 = v350 >> 7;
        if (v350 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v361 | 0x80;
            v399 = v361 >> 7;
            ++v332;
            v400 = v361 >> 14;
            v361 >>= 7;
          }
          while (v400);
          *(v332 - 1) = v399;
        }
        else
        {
          v5[1] = v361;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v350;
        v332 = v5 + 1;
      }
      if (v330 <= 0x7F)
      {
LABEL_684:
        *v332 = v330;
        return v332 + 1;
      }
      *v332 = v330 | 0x80;
      v382 = v330 >> 7;
      if (!(v330 >> 14))
      {
LABEL_686:
        v332[1] = v382;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v382 | 0x80;
        v383 = v382 >> 7;
        ++v5;
        v414 = v382 >> 14;
        v382 >>= 7;
      }
      while (v414);
LABEL_718:
      *(v5 - 1) = v383;
      return v5;
    case 15:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v324 = *(_DWORD *)a1;
      v325 = (8 * a2) | 5;
      if (v325 > 0x7F)
      {
        *v5 = (8 * a2) | 0x85;
        v326 = (8 * a2) >> 7;
        if (v325 >> 14)
        {
          v327 = v5 + 2;
          do
          {
            *((_BYTE *)v327 - 1) = v326 | 0x80;
            v328 = v326 >> 7;
            v327 = (_DWORD *)((char *)v327 + 1);
            v401 = v326 >> 14;
            v326 >>= 7;
          }
          while (v401);
LABEL_689:
          *((_BYTE *)v327 - 1) = v328;
        }
        else
        {
LABEL_600:
          v5[1] = v326;
          v327 = v5 + 2;
        }
      }
      else
      {
LABEL_571:
        *v5 = v325;
        v327 = v5 + 1;
      }
      *v327 = v324;
      return (char *)(v327 + 1);
    case 16:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v12 = *(_QWORD *)a1;
      v13 = (8 * a2) | 1;
      if (v13 > 0x7F)
      {
        *v5 = (8 * a2) | 0x81;
        v14 = (8 * a2) >> 7;
        if (v13 >> 14)
        {
          v15 = v5 + 2;
          do
          {
            *((_BYTE *)v15 - 1) = v14 | 0x80;
            v16 = v14 >> 7;
            v15 = (_QWORD *)((char *)v15 + 1);
            v402 = v14 >> 14;
            v14 >>= 7;
          }
          while (v402);
LABEL_693:
          *((_BYTE *)v15 - 1) = v16;
        }
        else
        {
LABEL_602:
          v5[1] = v14;
          v15 = v5 + 2;
        }
      }
      else
      {
LABEL_575:
        *v5 = v13;
        v15 = v5 + 1;
      }
      *v15 = v12;
      return (char *)(v15 + 1);
    case 17:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v351 = *(_DWORD *)a1;
      v352 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v352 | 0x80;
        v362 = v352 >> 7;
        if (v352 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v362 | 0x80;
            v403 = v362 >> 7;
            ++v332;
            v404 = v362 >> 14;
            v362 >>= 7;
          }
          while (v404);
          *(v332 - 1) = v403;
        }
        else
        {
          v5[1] = v362;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v352;
        v332 = v5 + 1;
      }
      v405 = (2 * v351) ^ (v351 >> 31);
      if (v405 <= 0x7F)
      {
        *v332 = v405;
        return v332 + 1;
      }
      *v332 = v405 | 0x80;
      v406 = v405 >> 7;
      if (!(v405 >> 14))
      {
        v332[1] = v406;
        return v332 + 2;
      }
      v5 = v332 + 2;
      do
      {
        *(v5 - 1) = v406 | 0x80;
        v415 = v406 >> 7;
        ++v5;
        v416 = v406 >> 14;
        v406 >>= 7;
      }
      while (v416);
      *(v5 - 1) = v415;
      return v5;
    case 18:
      if (*a4 <= (unint64_t)v5)
        v5 = sub_1B0304904((uint64_t)a4, v5);
      v353 = *(_QWORD *)a1;
      v354 = 8 * a2;
      if ((8 * a2) > 0x7F)
      {
        *v5 = v354 | 0x80;
        v363 = v354 >> 7;
        if (v354 >> 14)
        {
          v332 = v5 + 2;
          do
          {
            *(v332 - 1) = v363 | 0x80;
            v407 = v363 >> 7;
            ++v332;
            v408 = v363 >> 14;
            v363 >>= 7;
          }
          while (v408);
          *(v332 - 1) = v407;
        }
        else
        {
          v5[1] = v363;
          v332 = v5 + 2;
        }
      }
      else
      {
        *v5 = v354;
        v332 = v5 + 1;
      }
      v409 = (2 * v353) ^ (v353 >> 63);
      if (v409 > 0x7F)
      {
        *v332 = v409 | 0x80;
        v410 = v409 >> 7;
        if (v409 >> 14)
        {
          v5 = v332 + 2;
          do
          {
            *(v5 - 1) = v410 | 0x80;
            v417 = v410 >> 7;
            ++v5;
            v418 = v410 >> 14;
            v410 >>= 7;
          }
          while (v418);
          *(v5 - 1) = v417;
        }
        else
        {
          v332[1] = v410;
          return v332 + 2;
        }
      }
      else
      {
        *v332 = v409;
        return v332 + 1;
      }
      return v5;
    default:
      return v5;
  }
}

void sub_1B030E0C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B030E0F8(uint64_t a1)
{
  int *v1;
  uint64_t v2;
  int *v3;
  _QWORD *v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  unint64_t v9;
  int *v10;
  int *v11;
  BOOL v12;

  v1 = *(int **)(a1 + 16);
  if (*(unsigned __int16 *)(a1 + 8) < 0x101u)
  {
    if (*(_WORD *)(a1 + 10))
    {
      v2 = 0;
      v3 = &v1[8 * *(unsigned __int16 *)(a1 + 10)];
      do
      {
        v4 = v1 + 2;
        v5 = *v1;
        v1 += 8;
        v2 += sub_1B030E1B8(v4, v5);
      }
      while (v1 != v3);
      return v2;
    }
    return 0;
  }
  v8 = *(int **)v1;
  v6 = v1 + 2;
  v7 = v8;
  if (v8 == v6)
    return 0;
  v2 = 0;
  do
  {
    v9 = sub_1B030E1B8((_QWORD *)v7 + 5, v7[8]);
    v10 = (int *)*((_QWORD *)v7 + 1);
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = *(int **)v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (int *)*((_QWORD *)v7 + 2);
        v12 = *(_QWORD *)v11 == (_QWORD)v7;
        v7 = v11;
      }
      while (!v12);
    }
    v2 += v9;
    v7 = v11;
  }
  while (v11 != v6);
  return v2;
}

unint64_t sub_1B030E1B8(_QWORD *a1, int a2)
{
  int v4;
  unsigned __int8 v5;
  std::string *v6;
  std::string *v7;
  unint64_t v8;
  int v9;
  unsigned __int8 v10;
  std::string *v11;
  int v12;
  std::string *v13;
  int v14;
  char v15;
  std::string *v16;
  unint64_t v17;
  unsigned int v18;
  char v19;
  std::string *v20;
  uint64_t v21;
  int *v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int *v27;
  int v28;
  int *v29;
  int v30;
  int *v31;
  int v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  int *v36;
  int v37;
  int *v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  int v42;
  uint64_t *v43;
  unint64_t v44;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  int v51;
  int v52;
  int *v53;
  int v54;
  int v55;
  int *v56;
  int v57;
  int v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  int *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  int *v67;
  int v68;
  int v69;
  uint64_t v70;
  int *v71;
  int v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int *v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int *v81;
  int v82;
  int v83;
  int *v84;
  int v85;
  int v86;
  int *v87;
  uint64_t v88;
  uint64_t v89;
  int *v90;
  int v91;
  int v92;
  int *v93;
  int *v94;
  int v95;
  int v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t (*v99)(void);
  int v100;
  uint64_t v101;
  char v102;
  std::string v103[2];

  if (*((_BYTE *)a1 + 9))
  {
    v4 = *((unsigned __int8 *)a1 + 8);
    v5 = v4 - 19;
    if (*((_BYTE *)a1 + 11))
    {
      if ((v4 - 19) <= 0xEDu)
      {
        sub_1B0305328((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v6 = sub_1B0305340(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_1B0305470((uint64_t)&v102, (const char **)&v6->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v103);
      }
      switch(v4)
      {
        case 1:
        case 6:
        case 16:
          v21 = 8 * *(unsigned int *)*a1;
          goto LABEL_63;
        case 2:
        case 7:
        case 15:
          v21 = 4 * *(unsigned int *)*a1;
          goto LABEL_63;
        case 3:
          v27 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v28 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)sub_1B0315444(v27, v28++) | 1) ^ 0x3F) + 73) >> 6;
            v27 = (int *)*a1;
          }
          while (v28 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 4:
          v29 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v30 = 0;
          do
          {
            v21 += (9 * (__clz(*(_QWORD *)sub_1B0315A6C(v29, v30++) | 1) ^ 0x3F) + 73) >> 6;
            v29 = (int *)*a1;
          }
          while (v30 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 5:
          v31 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v32 = 0;
          do
          {
            v33 = (int *)sub_1B03147F4(v31, v32);
            v34 = (9 * (__clz(*v33 | 1) ^ 0x1F) + 73) >> 6;
            if (*v33 >= 0)
              v35 = v34;
            else
              v35 = 10;
            v21 += v35;
            ++v32;
            v31 = (int *)*a1;
          }
          while (v32 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 8:
          v21 = *(unsigned int *)*a1;
          goto LABEL_63;
        case 9:
        case 10:
        case 11:
        case 12:
          sub_1B0305328((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 1599);
          v7 = sub_1B0305340(v103, "Non-primitive types can't be packed.");
          sub_1B0305470((uint64_t)&v102, (const char **)&v7->__r_.__value_.__l.__data_);
          sub_1B0305478((uint64_t)v103);
          goto LABEL_7;
        case 13:
          v22 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v23 = 0;
          do
          {
            v21 += (9 * (__clz(*(_DWORD *)sub_1B0314E1C(v22, v23++) | 1) ^ 0x1F) + 73) >> 6;
            v22 = (int *)*a1;
          }
          while (v23 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 14:
          v36 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v37 = 0;
          do
          {
            v38 = (int *)sub_1B03147F4(v36, v37);
            v39 = (9 * (__clz(*v38 | 1) ^ 0x1F) + 73) >> 6;
            if (*v38 >= 0)
              v40 = v39;
            else
              v40 = 10;
            v21 += v40;
            ++v37;
            v36 = (int *)*a1;
          }
          while (v37 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 17:
          v24 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v25 = 0;
          do
          {
            v26 = (int *)sub_1B03147F4(v24, v25);
            v21 += (9 * (__clz((2 * *v26) ^ (*v26 >> 31) | 1) ^ 0x1F) + 73) >> 6;
            ++v25;
            v24 = (int *)*a1;
          }
          while (v25 < *(_DWORD *)*a1);
          goto LABEL_63;
        case 18:
          v41 = (int *)*a1;
          if (*(int *)*a1 < 1)
            goto LABEL_7;
          v21 = 0;
          v42 = 0;
          do
          {
            v43 = (uint64_t *)sub_1B0315444(v41, v42);
            v21 += (9 * (__clz((2 * *v43) ^ (*v43 >> 63) | 1) ^ 0x3F) + 73) >> 6;
            ++v42;
            v41 = (int *)*a1;
          }
          while (v42 < *(_DWORD *)*a1);
LABEL_63:
          *((_DWORD *)a1 + 3) = v21;
          v44 = v21 + ((9 * (__clz((8 * a2) | 3) ^ 0x1F) + 73) >> 6) + ((9 * (__clz(v21 | 1) ^ 0x1F) + 73) >> 6);
          if (v21)
            v8 = v44;
          else
            v8 = 0;
          break;
        default:
LABEL_7:
          v8 = 0;
          *((_DWORD *)a1 + 3) = 0;
          break;
      }
    }
    else
    {
      if ((v4 - 19) > 0xEDu)
      {
        v14 = *((unsigned __int8 *)a1 + 8);
      }
      else
      {
        sub_1B0305328((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v13 = sub_1B0305340(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_1B0305470((uint64_t)&v102, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v103);
        v14 = *((unsigned __int8 *)a1 + 8);
        v5 = v14 - 19;
      }
      v15 = v4 == 10;
      if (v5 <= 0xEDu)
      {
        sub_1B0305328((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
        v16 = sub_1B0305340(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
        sub_1B0305470((uint64_t)&v102, (const char **)&v16->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)v103);
      }
      v17 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v15;
      switch(v14)
      {
        case 1:
        case 6:
        case 16:
          v18 = v17 + 8;
          goto LABEL_27;
        case 2:
        case 7:
        case 15:
          v18 = v17 + 4;
LABEL_27:
          v8 = v18 * (unint64_t)*(unsigned int *)*a1;
          break;
        case 3:
          v50 = (int *)*a1;
          v51 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v51;
          if (v51 >= 1)
          {
            v52 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)sub_1B0315444(v50, v52++) | 1) ^ 0x3F) + 73) >> 6;
              v50 = (int *)*a1;
            }
            while (v52 < *(_DWORD *)*a1);
          }
          break;
        case 4:
          v53 = (int *)*a1;
          v54 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v54;
          if (v54 >= 1)
          {
            v55 = 0;
            do
            {
              v8 += (9 * (__clz(*(_QWORD *)sub_1B0315A6C(v53, v55++) | 1) ^ 0x3F) + 73) >> 6;
              v53 = (int *)*a1;
            }
            while (v55 < *(_DWORD *)*a1);
          }
          break;
        case 5:
          v56 = (int *)*a1;
          v57 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v57;
          if (v57 >= 1)
          {
            v58 = 0;
            do
            {
              v59 = (int *)sub_1B03147F4(v56, v58);
              v60 = (9 * (__clz(*v59 | 1) ^ 0x1F) + 73) >> 6;
              if (*v59 >= 0)
                v61 = v60;
              else
                v61 = 10;
              v8 += v61;
              ++v58;
              v56 = (int *)*a1;
            }
            while (v58 < *(_DWORD *)*a1);
          }
          break;
        case 8:
          v8 = *(unsigned int *)*a1 + *(unsigned int *)*a1 * (unint64_t)v17;
          break;
        case 9:
          v62 = (int *)*a1;
          v63 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v63;
          if (v63 >= 1)
          {
            v64 = 0;
            do
            {
              v65 = sub_1B0300154((uint64_t)v62, v64);
              v66 = *(unsigned __int8 *)(v65 + 23);
              if ((v66 & 0x80u) != 0)
                v66 = *(_QWORD *)(v65 + 8);
              v8 += v66 + ((9 * (__clz(v66 | 1) ^ 0x1F) + 73) >> 6);
              ++v64;
              v62 = (int *)*a1;
            }
            while (v64 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 10:
          v67 = (int *)*a1;
          v68 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v68;
          if (v68 >= 1)
          {
            v69 = 0;
            do
            {
              v70 = sub_1B030F048((uint64_t)v67, v69);
              v8 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v70 + 72))(v70);
              ++v69;
              v67 = (int *)*a1;
            }
            while (v69 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 11:
          v71 = (int *)*a1;
          v72 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v72;
          if (v72 >= 1)
          {
            v73 = 0;
            do
            {
              v74 = sub_1B030F048((uint64_t)v71, v73);
              v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v74 + 72))(v74);
              v8 += v75 + ((9 * (__clz(v75 | 1) ^ 0x1F) + 73) >> 6);
              ++v73;
              v71 = (int *)*a1;
            }
            while (v73 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 12:
          v76 = (int *)*a1;
          v77 = *(_DWORD *)(*a1 + 8);
          v8 = v17 * (unint64_t)v77;
          if (v77 >= 1)
          {
            v78 = 0;
            do
            {
              v79 = sub_1B0300154((uint64_t)v76, v78);
              v80 = *(unsigned __int8 *)(v79 + 23);
              if ((v80 & 0x80u) != 0)
                v80 = *(_QWORD *)(v79 + 8);
              v8 += v80 + ((9 * (__clz(v80 | 1) ^ 0x1F) + 73) >> 6);
              ++v78;
              v76 = (int *)*a1;
            }
            while (v78 < *(_DWORD *)(*a1 + 8));
          }
          break;
        case 13:
          v81 = (int *)*a1;
          v82 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v82;
          if (v82 >= 1)
          {
            v83 = 0;
            do
            {
              v8 += (9 * (__clz(*(_DWORD *)sub_1B0314E1C(v81, v83++) | 1) ^ 0x1F) + 73) >> 6;
              v81 = (int *)*a1;
            }
            while (v83 < *(_DWORD *)*a1);
          }
          break;
        case 14:
          v84 = (int *)*a1;
          v85 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v85;
          if (v85 >= 1)
          {
            v86 = 0;
            do
            {
              v87 = (int *)sub_1B03147F4(v84, v86);
              v88 = (9 * (__clz(*v87 | 1) ^ 0x1F) + 73) >> 6;
              if (*v87 >= 0)
                v89 = v88;
              else
                v89 = 10;
              v8 += v89;
              ++v86;
              v84 = (int *)*a1;
            }
            while (v86 < *(_DWORD *)*a1);
          }
          break;
        case 17:
          v90 = (int *)*a1;
          v91 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v91;
          if (v91 >= 1)
          {
            v92 = 0;
            do
            {
              v93 = (int *)sub_1B03147F4(v90, v92);
              v8 += (9 * (__clz((2 * *v93) ^ (*v93 >> 31) | 1) ^ 0x1F) + 73) >> 6;
              ++v92;
              v90 = (int *)*a1;
            }
            while (v92 < *(_DWORD *)*a1);
          }
          break;
        case 18:
          v94 = (int *)*a1;
          v95 = *(_DWORD *)*a1;
          v8 = v17 * (unint64_t)v95;
          if (v95 >= 1)
          {
            v96 = 0;
            do
            {
              v97 = (uint64_t *)sub_1B0315444(v94, v96);
              v8 += (9 * (__clz((2 * *v97) ^ (*v97 >> 63) | 1) ^ 0x3F) + 73) >> 6;
              ++v96;
              v94 = (int *)*a1;
            }
            while (v96 < *(_DWORD *)*a1);
          }
          break;
        default:
          return 0;
      }
    }
  }
  else if ((*((_BYTE *)a1 + 10) & 1) != 0)
  {
    return 0;
  }
  else
  {
    v9 = *((unsigned __int8 *)a1 + 8);
    v10 = v9 - 19;
    if ((v9 - 19) > 0xEDu)
    {
      v12 = *((unsigned __int8 *)a1 + 8);
    }
    else
    {
      sub_1B0305328((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v11 = sub_1B0305340(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v102, (const char **)&v11->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v103);
      v12 = *((unsigned __int8 *)a1 + 8);
      v10 = v12 - 19;
    }
    v19 = v9 == 10;
    if (v10 <= 0xEDu)
    {
      sub_1B0305328((uint64_t)v103, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v20 = sub_1B0305340(v103, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v102, (const char **)&v20->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v103);
    }
    v8 = (unint64_t)((9 * (__clz((8 * a2) | 1) ^ 0x1F) + 73) >> 6) << v19;
    switch(v12)
    {
      case 1:
      case 6:
      case 16:
        v8 += 8;
        return v8;
      case 2:
      case 7:
      case 15:
        v8 += 4;
        return v8;
      case 3:
      case 4:
        v46 = *a1;
        goto LABEL_138;
      case 5:
      case 14:
        v47 = (9 * (__clz(*(_DWORD *)a1 | 1) ^ 0x1F) + 73) >> 6;
        if (*(int *)a1 >= 0)
          v48 = v47;
        else
          v48 = 10;
        v8 += v48;
        return v8;
      case 8:
        return ++v8;
      case 9:
      case 12:
        v49 = *(_QWORD *)(*a1 + 8);
        if (*(char *)(*a1 + 23) >= 0)
          v49 = *(unsigned __int8 *)(*a1 + 23);
        v8 += v49 + ((9 * (__clz(v49 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 10:
        v8 += (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 72))(*a1);
        return v8;
      case 11:
        v98 = *(_QWORD *)*a1;
        if ((*((_BYTE *)a1 + 10) & 0x10) != 0)
          v99 = *(uint64_t (**)(void))(v98 + 88);
        else
          v99 = *(uint64_t (**)(void))(v98 + 72);
        v101 = v99();
        v8 += v101 + ((9 * (__clz(v101 | 1) ^ 0x1F) + 73) >> 6);
        return v8;
      case 13:
        v100 = *(_DWORD *)a1;
        goto LABEL_136;
      case 17:
        v100 = (2 * *(_DWORD *)a1) ^ (*(int *)a1 >> 31);
LABEL_136:
        v8 += (9 * (__clz(v100 | 1) ^ 0x1F) + 73) >> 6;
        break;
      case 18:
        v46 = (2 * *a1) ^ ((uint64_t)*a1 >> 63);
LABEL_138:
        v8 += (9 * (__clz(v46 | 1) ^ 0x3F) + 73) >> 6;
        break;
      default:
        return v8;
    }
  }
  return v8;
}

void sub_1B030ED1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B030ED5C(unsigned __int8 *result)
{
  unsigned __int8 **v1;
  uint64_t v2;
  std::string *v3;
  uint64_t *v4;
  std::string *v5;
  int v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t *v9;
  char v10;
  std::string v11[2];

  v1 = (unsigned __int8 **)result;
  v2 = result[8];
  if (result[9])
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v3 = sub_1B0305340(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v10, (const char **)&v3->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_1B0305478((uint64_t)v11);
    }
    switch(v2)
    {
      case 1:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B03167DC();
          goto LABEL_29;
        }
        break;
      case 2:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B03161B4();
          goto LABEL_29;
        }
        break;
      case 3:
      case 16:
      case 18:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B0315564();
          goto LABEL_29;
        }
        break;
      case 4:
      case 6:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B0315B8C();
          goto LABEL_29;
        }
        break;
      case 5:
      case 14:
      case 15:
      case 17:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B0314914();
          goto LABEL_29;
        }
        break;
      case 7:
      case 13:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B0314F3C();
          goto LABEL_29;
        }
        break;
      case 8:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B03142F0();
LABEL_29:
          v8 = 0x1080C4057E67DB5;
          return (unsigned __int8 *)MEMORY[0x1B5E07CD8](v4, v8);
        }
        break;
      case 9:
      case 12:
        result = *v1;
        if (*v1)
        {
          v4 = (uint64_t *)sub_1B0316A48();
          goto LABEL_34;
        }
        break;
      case 10:
      case 11:
        v9 = (uint64_t *)*v1;
        if (v9)
        {
          sub_1B030F7F8(v9);
          v4 = sub_1B02F74B0(v9);
LABEL_34:
          v8 = 0x1020C4014030ADELL;
          return (unsigned __int8 *)MEMORY[0x1B5E07CD8](v4, v8);
        }
        break;
      default:
        return result;
    }
  }
  else
  {
    if ((v2 - 19) <= 0xFFFFFFED)
    {
      sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/extension_set.cc", 60);
      v5 = sub_1B0305340(v11, "CHECK failed: type > 0 && type <= WireFormatLite::MAX_FIELD_TYPE: ");
      sub_1B0305470((uint64_t)&v10, (const char **)&v5->__r_.__value_.__l.__data_);
      result = (unsigned __int8 *)sub_1B0305478((uint64_t)v11);
    }
    v6 = dword_1B03AFBC8[v2];
    if (v6 == 10)
    {
      result = *v1;
      if (*v1)
        return (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)result + 8))(result);
    }
    else if (v6 == 9)
    {
      v7 = *v1;
      if (v7)
      {
        if ((char)v7[23] < 0)
          operator delete(*(void **)v7);
        v4 = (uint64_t *)v7;
        v8 = 0x1012C40EC159624;
        return (unsigned __int8 *)MEMORY[0x1B5E07CD8](v4, v8);
      }
    }
  }
  return result;
}

void sub_1B030EF68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B030EF88()
{
  JUMPOUT(0x1B5E07CD8);
}

unsigned __int8 *sub_1B030EF9C(unsigned __int8 *result, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  BOOL v6;

  if (result != a2)
  {
    v3 = result;
    do
    {
      result = sub_1B030ED5C(v3 + 40);
      v4 = (unsigned __int8 *)*((_QWORD *)v3 + 1);
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (unsigned __int8 *)*((_QWORD *)v3 + 2);
          v6 = *(_QWORD *)v5 == (_QWORD)v3;
          v3 = v5;
        }
        while (!v6);
      }
      v3 = v5;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t *sub_1B030F024(uint64_t *a1)
{
  sub_1B030F7F8(a1);
  return sub_1B02F74B0(a1);
}

uint64_t sub_1B030F048(uint64_t a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1705);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*(_DWORD *)(a1 + 8) <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1706);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * a2 + 8);
}

void sub_1B030F104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B030F124(uint64_t result, uint64_t a2)
{
  int *v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;

  v2 = *(int **)(result + 16);
  if (!v2)
    return sub_1B030F178(result, a2);
  v3 = *v2;
  if ((int)v3 >= *(_DWORD *)(result + 12))
    return sub_1B030F178(result, a2);
  v4 = v2 + 2;
  v5 = *(int *)(result + 8);
  if ((int)v5 < (int)v3)
    *(_QWORD *)&v4[2 * v3] = *(_QWORD *)&v4[2 * v5];
  *(_QWORD *)&v4[2 * v5] = a2;
  *(_DWORD *)(result + 8) = v5 + 1;
  ++**(_DWORD **)(result + 16);
  return result;
}

uint64_t sub_1B030F178(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  int *v4;
  int v5;
  int v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  uint64_t v10;

  v3 = result;
  v4 = *(int **)(result + 16);
  if (!v4)
  {
    v5 = *(_DWORD *)(result + 12);
    goto LABEL_11;
  }
  v5 = *(_DWORD *)(result + 8);
  v6 = *(_DWORD *)(result + 12);
  if (v5 == v6)
  {
LABEL_11:
    result = sub_1B0316A4C(result, v5 + 1);
    goto LABEL_12;
  }
  v7 = *v4;
  if ((_DWORD)v7 != v6)
  {
    if (v5 >= (int)v7)
    {
      v9 = v7 + 1;
      goto LABEL_13;
    }
    *(_QWORD *)&v4[2 * v7 + 2] = *(_QWORD *)&v4[2 * v5 + 2];
LABEL_12:
    v4 = *(int **)(v3 + 16);
    v9 = *v4 + 1;
LABEL_13:
    *v4 = v9;
    goto LABEL_14;
  }
  result = *(_QWORD *)&v4[2 * v5 + 2];
  if (result)
    v8 = *(_QWORD *)v3 == 0;
  else
    v8 = 0;
  if (v8)
  {
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    v4 = *(int **)(v3 + 16);
  }
LABEL_14:
  v10 = *(int *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = v10 + 1;
  *(_QWORD *)&v4[2 * v10 + 2] = a2;
  return result;
}

uint64_t *sub_1B030F23C(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      sub_1B030983C(a3, *((unsigned int *)v5 + 8), v5 + 5);
      v6 = (_QWORD *)v5[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v5[2];
          v8 = *v7 == (_QWORD)v5;
          v5 = v7;
        }
        while (!v8);
      }
      v5 = v7;
    }
    while (v7 != a2);
  }
  return a3;
}

const std::string::value_type *sub_1B030F2BC(uint64_t a1, std::string::value_type *__s, int a3, std::string *a4)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return sub_1B0311440(a1, __s, a3, a4);
  v6 = a3;
  MEMORY[0x1B5E07A08](a4, __s, a3);
  return &__s[v6];
}

char *sub_1B030F314(uint64_t a1, char *a2, uint64_t a3)
{
  int v5;
  char *result;
  int v7;
  unint64_t v8;
  int v9;
  __int128 v10;
  signed int v11;
  std::string *v12;
  int v13;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  std::string *v18;
  _OWORD v19[2];
  uint64_t v20;
  _OWORD v21[2];
  uint64_t v22;
  char v23;
  _OWORD v24[2];
  uint64_t v25;
  std::string v26;
  __int16 v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v15 = (unint64_t)&result[v5];
    v16 = *(_OWORD *)(a3 + 16);
    v19[0] = *(_OWORD *)a3;
    v19[1] = v16;
    v20 = *(_QWORD *)(a3 + 32);
    result = sub_1B030F56C(result, v15, (unsigned int **)v19);
    if ((char *)v15 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      v10 = *(_OWORD *)(a3 + 16);
      v24[0] = *(_OWORD *)a3;
      v24[1] = v10;
      v25 = *(_QWORD *)(a3 + 32);
      result = sub_1B030F56C(result, v8, (unsigned int **)v24);
      if (!result)
        break;
      v11 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v11 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v12 = sub_1B0305340(&v26, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v23, (const char **)&v12->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v26);
      }
      v13 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v27 = 0;
        v26.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v22 = *(_QWORD *)(a3 + 32);
        v17 = *(_OWORD *)(a3 + 16);
        v21[0] = *(_OWORD *)a3;
        v21[1] = v17;
        v18 = (std::string *)sub_1B030F56C((char *)&v26 + v11, (unint64_t)&v26 + v13, (unsigned int **)v21);
        result = 0;
        if (v18 && v18 == (std::string *)((char *)&v26 + v13))
          return (char *)(*(_QWORD *)(a1 + 8) + v13);
        return result;
      }
      v5 = v5 - v9 - v11;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v26, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v14 = sub_1B0305340(&v26, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v23, (const char **)&v14->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v26);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v11;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B030F544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1B0305478((uint64_t)&a27);
  _Unwind_Resume(a1);
}

char *sub_1B030F56C(char *a1, unint64_t a2, unsigned int **a3)
{
  char *v3;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int *v9;
  uint64_t v10;
  int v11;
  int v12;
  unint64_t *v13;
  std::string *v14;

  v3 = a1;
  while ((unint64_t)v3 < a2)
  {
    v6 = *v3;
    if (*v3 < 0)
    {
      v7 = v6 + (v3[1] << 7);
      v6 = (v7 - 128);
      if (v3[1] < 0)
      {
        v3 = (char *)sub_1B03118F8((uint64_t)v3, (v7 - 128));
        if (!v3)
          return v3;
        v6 = v8;
      }
      else
      {
        v3 += 2;
      }
    }
    else
    {
      ++v3;
    }
    if (((unsigned int (*)(unsigned int *, unint64_t))a3[1])(a3[2], v6))
    {
      v9 = (int *)*a3;
      v10 = **a3;
      if ((_DWORD)v10 == (*a3)[1])
      {
        v11 = v10 + 1;
        sub_1B03144A4((int *)*a3, v10 + 1);
        *(_DWORD *)(sub_1B0314918((uint64_t)v9) + 4 * v10) = v6;
      }
      else
      {
        *(_DWORD *)(sub_1B0314918((uint64_t)*a3) + 4 * v10) = v6;
        v11 = v10 + 1;
      }
      *v9 = v11;
    }
    else
    {
      v12 = *((_DWORD *)a3 + 8);
      v13 = (unint64_t *)a3[3];
      if ((*v13 & 1) != 0)
        v14 = (std::string *)((*v13 & 0xFFFFFFFFFFFFFFFELL) + 8);
      else
        v14 = (std::string *)sub_1B02F71FC(v13);
      sub_1B03117F8(v12, v6, v14);
    }
  }
  return v3;
}

char *sub_1B030F694(uint64_t a1, char *__src, int64_t __n)
{
  char *v6;
  uint64_t v7;
  char *v8;

  *(_DWORD *)(a1 + 84) = 0;
  if (__n >= 17)
  {
    *(_DWORD *)(a1 + 28) = 16;
    v6 = &__src[__n - 16];
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = v6;
    *(_QWORD *)(a1 + 16) = a1 + 40;
    if (*(_QWORD *)(a1 + 72) != 1)
      return __src;
    v7 = 2;
    v8 = __src;
    goto LABEL_6;
  }
  v8 = (char *)(a1 + 40);
  memcpy((void *)(a1 + 40), __src, __n);
  *(_DWORD *)(a1 + 28) = 0;
  *(_QWORD *)a1 = &v8[__n];
  *(_QWORD *)(a1 + 8) = &v8[__n];
  *(_QWORD *)(a1 + 16) = 0;
  if (*(_QWORD *)(a1 + 72) == 1)
  {
    v7 = __src - v8;
LABEL_6:
    *(_QWORD *)(a1 + 72) = v7;
  }
  return v8;
}

uint64_t sub_1B030F744(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::string *v5;
  char v6;
  std::string v7[2];

  v1 = *(unsigned int *)(result + 8);
  if ((v1 & 0x80000000) != 0)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1780);
    v5 = sub_1B0305340(v7, "CHECK failed: (n) >= (0): ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v5->__r_.__value_.__l.__data_);
    return sub_1B0305478((uint64_t)v7);
  }
  else if ((_DWORD)v1)
  {
    v2 = result;
    v3 = (uint64_t *)(*(_QWORD *)(result + 16) + 8);
    do
    {
      v4 = *v3++;
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
      --v1;
    }
    while (v1);
    *(_DWORD *)(v2 + 8) = 0;
  }
  return result;
}

void sub_1B030F7E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B030F7F8(_QWORD *a1)
{
  unsigned int *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = v2 + 2;
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        if (*v3)
          (*(void (**)(_QWORD))(*(_QWORD *)*v3 + 8))(*v3);
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t **sub_1B030F868(uint64_t **a1, int *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  uint64_t **v8;
  int v9;
  uint64_t *v10;
  __int128 v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *a2;
    while (1)
    {
      while (1)
      {
        v8 = (uint64_t **)v5;
        v9 = *((_DWORD *)v5 + 8);
        if (v7 >= v9)
          break;
        v5 = *v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_10;
      }
      if (v9 >= v7)
        break;
      v5 = v8[1];
      if (!v5)
      {
        v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    v8 = a1 + 1;
LABEL_10:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = a3[1];
    *((_OWORD *)v10 + 2) = *a3;
    *((_OWORD *)v10 + 3) = v11;
    sub_1B02D80E4(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1B030F920(uint64_t a1)
{
  sub_1B02D7CDC(a1, *(_QWORD **)(a1 + 8));
}

uint64_t *sub_1B030F928(uint64_t **a1, uint64_t *a2, int *a3, _OWORD *a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t **v8;
  __int128 v9;
  uint64_t v11;
  uint64_t *v12;

  v6 = sub_1B030F9AC(a1, a2, &v12, &v11, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = (uint64_t **)v6;
    v7 = (uint64_t *)operator new(0x40uLL);
    v9 = a4[1];
    *((_OWORD *)v7 + 2) = *a4;
    *((_OWORD *)v7 + 3) = v9;
    sub_1B02D80E4(a1, (uint64_t)v12, v8, v7);
  }
  return v7;
}

uint64_t *sub_1B030F9AC(_QWORD *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, int *a5)
{
  uint64_t *v5;
  int v6;
  int v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  int v22;

  v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      v9 = (uint64_t *)*a2;
      do
      {
        v10 = v9;
        v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      v13 = a2;
      do
      {
        v10 = (uint64_t *)v13[2];
        v14 = *v10 == (_QWORD)v13;
        v13 = v10;
      }
      while (v14);
    }
    v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5)
      goto LABEL_17;
    v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v17 = (uint64_t *)v16;
          v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18)
            break;
          v16 = *v17;
          v5 = v17;
          if (!*v17)
            goto LABEL_29;
        }
        if (v18 >= v15)
          break;
        v5 = v17 + 1;
        v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  v11 = a2[1];
  if (v11)
  {
    v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      v14 = *a4 == (_QWORD)v19;
      v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          v21 = (uint64_t *)v20;
          v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22)
            break;
          v20 = *v21;
          v5 = v21;
          if (!*v21)
            goto LABEL_48;
        }
        if (v22 >= v6)
          break;
        v5 = v21 + 1;
        v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

uint64_t *sub_1B030FB54(uint64_t *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  uint64_t **v6;
  uint64_t *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *a2;
  v3 = a2;
  if (*a2)
  {
    v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      v3 = a2;
      goto LABEL_7;
    }
    do
    {
      v3 = v4;
      v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  v2 = v3[1];
  if (v2)
  {
LABEL_7:
    v5 = 0;
    *(_QWORD *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  v5 = 1;
LABEL_8:
  v6 = (uint64_t **)v3[2];
  v7 = *v6;
  if (*v6 == v3)
  {
    *v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      v7 = 0;
      result = (uint64_t *)v2;
    }
    else
    {
      v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    v9 = a2[2];
    v3[2] = v9;
    *(_QWORD *)(v9 + 8 * (*(_QWORD *)a2[2] != (_QWORD)a2)) = v3;
    v11 = *a2;
    v10 = a2[1];
    *(_QWORD *)(v11 + 16) = v3;
    *v3 = v11;
    v3[1] = v10;
    if (v10)
      *(_QWORD *)(v10 + 16) = v3;
    *((_BYTE *)v3 + 24) = *((_BYTE *)a2 + 24);
    if (result == a2)
      result = v3;
  }
  if (!v8 || !result)
    return result;
  if (!v5)
  {
    *(_BYTE *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    v12 = v7[2];
    if (*(uint64_t **)v12 == v7)
      break;
    if (!*((_BYTE *)v7 + 24))
    {
      *((_BYTE *)v7 + 24) = 1;
      *(_BYTE *)(v12 + 24) = 0;
      v13 = *(uint64_t **)(v12 + 8);
      v14 = *v13;
      *(_QWORD *)(v12 + 8) = *v13;
      if (v14)
        *(_QWORD *)(v14 + 16) = v12;
      v13[2] = *(_QWORD *)(v12 + 16);
      *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v13;
      *v13 = v12;
      *(_QWORD *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7)
        result = v7;
      v7 = *(uint64_t **)(*v7 + 8);
    }
    v15 = (_QWORD *)*v7;
    if (*v7 && !*((_BYTE *)v15 + 24))
    {
      v16 = (uint64_t *)v7[1];
      if (!v16)
        goto LABEL_56;
LABEL_55:
      if (*((_BYTE *)v16 + 24))
      {
LABEL_56:
        *((_BYTE *)v15 + 24) = 1;
        *((_BYTE *)v7 + 24) = 0;
        v22 = v15[1];
        *v7 = v22;
        if (v22)
          *(_QWORD *)(v22 + 16) = v7;
        v15[2] = v7[2];
        *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v15;
        v15[1] = v7;
        v7[2] = (uint64_t)v15;
        v16 = v7;
      }
      else
      {
        v15 = v7;
      }
      v23 = v15[2];
      *((_BYTE *)v15 + 24) = *(_BYTE *)(v23 + 24);
      *(_BYTE *)(v23 + 24) = 1;
      *((_BYTE *)v16 + 24) = 1;
      v24 = *(uint64_t **)(v23 + 8);
      v25 = *v24;
      *(_QWORD *)(v23 + 8) = *v24;
      if (v25)
        *(_QWORD *)(v25 + 16) = v23;
      v24[2] = *(_QWORD *)(v23 + 16);
      *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
      *v24 = v23;
      goto LABEL_72;
    }
    v16 = (uint64_t *)v7[1];
    if (v16 && !*((_BYTE *)v16 + 24))
      goto LABEL_55;
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      v17 = result;
LABEL_53:
      *((_BYTE *)v17 + 24) = 1;
      return result;
    }
    if (!*((_BYTE *)v17 + 24))
      goto LABEL_53;
LABEL_49:
    v7 = *(uint64_t **)(v17[2] + 8 * (*(_QWORD *)v17[2] == (_QWORD)v17));
  }
  if (!*((_BYTE *)v7 + 24))
  {
    *((_BYTE *)v7 + 24) = 1;
    *(_BYTE *)(v12 + 24) = 0;
    v18 = v7[1];
    *(_QWORD *)v12 = v18;
    if (v18)
      *(_QWORD *)(v18 + 16) = v12;
    v7[2] = *(_QWORD *)(v12 + 16);
    *(_QWORD *)(*(_QWORD *)(v12 + 16) + 8 * (**(_QWORD **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(_QWORD *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12)
      result = v7;
    v7 = *(uint64_t **)v12;
  }
  v19 = (_QWORD *)*v7;
  if (*v7 && !*((_BYTE *)v19 + 24))
    goto LABEL_68;
  v20 = (uint64_t *)v7[1];
  if (!v20 || *((_BYTE *)v20 + 24))
  {
    *((_BYTE *)v7 + 24) = 0;
    v17 = (uint64_t *)v7[2];
    if (*((_BYTE *)v17 + 24))
      v21 = v17 == result;
    else
      v21 = 1;
    if (v21)
      goto LABEL_53;
    goto LABEL_49;
  }
  if (v19 && !*((_BYTE *)v19 + 24))
  {
LABEL_68:
    v20 = v7;
  }
  else
  {
    *((_BYTE *)v20 + 24) = 1;
    *((_BYTE *)v7 + 24) = 0;
    v26 = *v20;
    v7[1] = *v20;
    if (v26)
      *(_QWORD *)(v26 + 16) = v7;
    v20[2] = v7[2];
    *(_QWORD *)(v7[2] + 8 * (*(_QWORD *)v7[2] != (_QWORD)v7)) = v20;
    *v20 = (uint64_t)v7;
    v7[2] = (uint64_t)v20;
    v19 = v7;
  }
  v23 = v20[2];
  *((_BYTE *)v20 + 24) = *(_BYTE *)(v23 + 24);
  *(_BYTE *)(v23 + 24) = 1;
  *((_BYTE *)v19 + 24) = 1;
  v24 = *(uint64_t **)v23;
  v27 = *(_QWORD *)(*(_QWORD *)v23 + 8);
  *(_QWORD *)v23 = v27;
  if (v27)
    *(_QWORD *)(v27 + 16) = v23;
  v24[2] = *(_QWORD *)(v23 + 16);
  *(_QWORD *)(*(_QWORD *)(v23 + 16) + 8 * (**(_QWORD **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(_QWORD *)(v23 + 16) = v24;
  return result;
}

void sub_1B030FED8()
{
  __assert_rtn("flat_end", "extension_set.h", 829, "!is_large()");
}

uint64_t sub_1B030FF00(uint64_t (***a1)(_QWORD))
{
  return (**a1)(a1);
}

void sub_1B030FF0C(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void sub_1B030FF20()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_1EEEB2878);
  if ((v0 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_1EEEB2878))
    {
      qword_1EEEB2CE0 = 0;
      *(_QWORD *)algn_1EEEB2CE8 = 0;
      qword_1EEEB2CF0 = 0;
      sub_1B03108F0((uint64_t)sub_1B030FF0C, (uint64_t)&qword_1EEEB2CE0);
      atomic_store(1u, byte_1EEEB2CA0);
      __cxa_guard_release(&qword_1EEEB2878);
    }
  }
}

void sub_1B030FF98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EEEB2878);
  _Unwind_Resume(a1);
}

uint64_t sub_1B030FFB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v4, a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 64))(a2, v4);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
}

void sub_1B031004C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B0310068(_DWORD *a1)
{
  unsigned __int8 v2;
  pthread_t v3;
  uint64_t v4;
  std::string *v5;
  unsigned __int8 v6;
  char v7;
  std::string v8[2];

  v2 = atomic_load((unsigned __int8 *)&qword_1EEEB2870);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_1EEEB2870))
  {
    __cxa_atexit((void (*)(void *))std::mutex::~mutex, &stru_1EEEB19C0, &dword_1B02D2000);
    __cxa_guard_release(&qword_1EEEB2870);
  }
  v3 = pthread_self();
  v4 = (uint64_t)v3;
  if (qword_1EEEB28E0)
  {
    if (v3 && v3 == (pthread_t)qword_1EEEB28E0)
      goto LABEL_5;
  }
  else if (!v3)
  {
LABEL_5:
    if (*a1 != 1)
    {
      sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/generated_message_util.cc", 785);
      v5 = sub_1B0305340(v8, "CHECK failed: (scc->visit_status.load(std::memory_order_relaxed)) == (SCCInfoBase::kRunning): ");
      sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v8);
    }
    return;
  }
  v6 = atomic_load(byte_1EEEB2CA0);
  if ((v6 & 1) == 0)
    sub_1B030FF20();
  std::mutex::lock(&stru_1EEEB19C0);
  qword_1EEEB28E0 = v4;
  sub_1B03101B8(a1);
  qword_1EEEB28E0 = 0;
  std::mutex::unlock(&stru_1EEEB19C0);
}

void sub_1B031019C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_1B03101B8(_DWORD *result)
{
  uint64_t (**v1)(void);
  _DWORD *v2;
  int v3;
  uint64_t i;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _DWORD *v8;

  if (*result == -1)
  {
    v1 = (uint64_t (**)(void))result;
    *result = 1;
    v2 = result + 6;
    v3 = result[1];
    if (v3 >= 1)
    {
      for (i = 0; i < v3; ++i)
      {
        if (*(_QWORD *)&v2[2 * i])
        {
          sub_1B03101B8();
          v3 = *((_DWORD *)v1 + 1);
        }
      }
    }
    v5 = v3;
    v6 = *((_DWORD *)v1 + 2);
    if (v6 >= 1)
    {
      v7 = 0;
      v8 = &v2[2 * v5];
      do
      {
        if (**(_QWORD **)&v8[2 * v7])
        {
          sub_1B03101B8();
          v6 = *((_DWORD *)v1 + 2);
        }
        ++v7;
      }
      while (v7 < v6);
    }
    result = (_DWORD *)v1[2]();
    atomic_store(0, (unsigned int *)v1);
  }
  return result;
}

uint64_t sub_1B0310264(char *__src, int64_t __n, uint64_t a3, char a4)
{
  char *v6;
  BOOL v7;
  _BYTE v9[32];
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v10 = 0u;
  v11 = 0u;
  v12 = 0u;
  v13 = 0x7FFFFFFF00000000;
  v14 = dword_1EEEB1BC4;
  v15 = 0x80000000;
  v16 = 0;
  v17 = 0;
  v6 = sub_1B030F694((uint64_t)v9, __src, __n);
  if ((*(uint64_t (**)(uint64_t, char *, _BYTE *))(*(_QWORD *)a3 + 88))(a3, v6, v9))
    v7 = (_DWORD)v13 == 0;
  else
    v7 = 0;
  if (v7)
  {
    if ((a4 & 2) != 0 || ((*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3) & 1) != 0)
      return 1;
    sub_1B031035C(a3);
  }
  return 0;
}

_QWORD *sub_1B031034C@<X0>(_QWORD *a1@<X8>)
{
  return sub_1B02DCBB8(a1, "(cannot determine missing fields for lite message)");
}

uint64_t sub_1B031035C(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string __p;
  std::string v6[2];

  sub_1B0305328((uint64_t)v6, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 133);
  sub_1B031040C("parse", a1, &__p);
  v2 = sub_1B0305368(v6, (const std::string::value_type *)&__p);
  sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return sub_1B0305478((uint64_t)v6);
}

void sub_1B03103DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1B0305478((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1B031040C(const std::string::value_type *a1@<X0>, uint64_t a2@<X1>, std::string *a3@<X8>)
{
  const std::string::value_type *p_p;
  std::string::size_type v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  void *__p;
  std::string::size_type v11;
  unsigned __int8 v12;

  a3->__r_.__value_.__r.__words[0] = 0;
  a3->__r_.__value_.__l.__size_ = 0;
  a3->__r_.__value_.__r.__words[2] = 0;
  std::string::append(a3, "Can't ");
  std::string::append(a3, a1);
  std::string::append(a3, " message of type \"");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 16))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    p_p = (const std::string::value_type *)&__p;
  else
    p_p = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v7 = v12;
  else
    v7 = v11;
  std::string::append(a3, p_p, v7);
  if ((char)v12 < 0)
    operator delete(__p);
  std::string::append(a3, "\" because it is missing required fields: ");
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a2 + 56))(&__p, a2);
  if ((v12 & 0x80u) == 0)
    v8 = (const std::string::value_type *)&__p;
  else
    v8 = (const std::string::value_type *)__p;
  if ((v12 & 0x80u) == 0)
    v9 = v12;
  else
    v9 = v11;
  std::string::append(a3, v8, v9);
  if ((char)v12 < 0)
    operator delete(__p);
}

void sub_1B0310514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0310554(uint64_t a1, char *a2, unsigned int a3)
{
  int64_t v5;

  if ((a3 & 0x80000000) != 0)
    sub_1B0310BA4();
  v5 = a3;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  return sub_1B0310264(a2, v5, a1, 1);
}

BOOL sub_1B03105A4(uint64_t a1, std::string *a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string __p;
  std::string v9[2];

  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) & 1) == 0)
  {
    sub_1B0305328((uint64_t)v9, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 449);
    v4 = sub_1B0305340(v9, "CHECK failed: IsInitialized(): ");
    sub_1B031040C("serialize", a1, &__p);
    v5 = sub_1B0305368(v4, (const std::string::value_type *)&__p);
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v9);
  }
  return sub_1B0310694(a1, a2);
}

void sub_1B0310660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1B0305478((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1B0310694(uint64_t a1, std::string *a2)
{
  std::string *v2;
  std::string::size_type size;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  char v14;
  std::string __p[2];
  std::string v16[2];
  uint64_t v17;
  __int16 v18;
  char v19;
  uint64_t v20;

  v2 = a2;
  v20 = *MEMORY[0x1E0C80C00];
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    size = a2->__r_.__value_.__l.__size_;
  else
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
  v6 = v5;
  v7 = v5 >> 31;
  if (v5 >> 31)
  {
    sub_1B0305328((uint64_t)v16, 2, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 457);
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(__p, a1);
    v10 = sub_1B0305368(v16, (const std::string::value_type *)__p);
    v11 = sub_1B0305340(v10, " exceeded maximum protobuf size of 2GB: ");
    v12 = sub_1B0305590(v11, v6);
    sub_1B0305470((uint64_t)&v14, (const char **)&v12->__r_.__value_.__l.__data_);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v9 = v16;
    goto LABEL_12;
  }
  std::string::resize(v2, v5 + size, 0);
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
  *(_OWORD *)&v16[0].__r_.__value_.__l.__data_ = (unint64_t)v2 + size + v6;
  v17 = 0;
  v18 = 0;
  v19 = byte_1EEEB2CDC & 1;
  if (v16[0].__r_.__value_.__r.__words[0] != (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1))
  {
    sub_1B0305328((uint64_t)__p, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/message_lite.cc", 360);
    v8 = sub_1B0305340(__p, "CHECK failed: target + size == res: ");
    sub_1B0305470((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
    v9 = __p;
LABEL_12:
    sub_1B0305478((uint64_t)v9);
  }
  return v7 == 0;
}

void sub_1B031083C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  sub_1B0305478((uint64_t)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_1B0310884@<W0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BOOL8 result;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  result = sub_1B03105A4(a1, (std::string *)a2);
  if (!result)
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return result;
}

void sub_1B03108D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B03108F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;

  v4 = sub_1B0310A10();
  std::mutex::lock((std::mutex *)(v4 + 24));
  v5 = *(_QWORD **)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  if ((unint64_t)v5 >= v6)
  {
    v8 = ((uint64_t)v5 - *(_QWORD *)v4) >> 4;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 60)
      sub_1B02D7758();
    v10 = v6 - *(_QWORD *)v4;
    if (v10 >> 3 > v9)
      v9 = v10 >> 3;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)sub_1B02D8514(v4 + 16, v11);
    else
      v12 = 0;
    v13 = &v12[16 * v8];
    v14 = &v12[16 * v11];
    *(_QWORD *)v13 = a1;
    *((_QWORD *)v13 + 1) = a2;
    v7 = v13 + 16;
    v16 = *(char **)v4;
    v15 = *(char **)(v4 + 8);
    if (v15 != *(char **)v4)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v15 - 1);
        v13 -= 16;
        v15 -= 16;
      }
      while (v15 != v16);
      v15 = *(char **)v4;
    }
    *(_QWORD *)v4 = v13;
    *(_QWORD *)(v4 + 8) = v7;
    *(_QWORD *)(v4 + 16) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a1;
    v5[1] = a2;
    v7 = v5 + 2;
  }
  *(_QWORD *)(v4 + 8) = v7;
  std::mutex::unlock((std::mutex *)(v4 + 24));
}

void sub_1B03109FC(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0310A10()
{
  unsigned __int8 v0;
  uint64_t v2;

  v0 = atomic_load((unsigned __int8 *)&qword_1EEEB1978);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_1EEEB1978))
  {
    v2 = operator new();
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    *(_QWORD *)(v2 + 16) = 0;
    *(_QWORD *)(v2 + 24) = 850045863;
    *(_OWORD *)(v2 + 32) = 0u;
    *(_OWORD *)(v2 + 48) = 0u;
    *(_OWORD *)(v2 + 64) = 0u;
    *(_QWORD *)(v2 + 80) = 0;
    qword_1EEEB1A00 = v2;
    __cxa_guard_release(&qword_1EEEB1978);
  }
  return qword_1EEEB1A00;
}

void sub_1B0310A9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_1EEEB1978);
  _Unwind_Resume(a1);
}

void sub_1B0310AB4()
{
  uint64_t v0;
  uint64_t v1;

  if ((byte_1EEEB28E8 & 1) == 0)
  {
    v0 = sub_1B0310A10();
    if (v0)
    {
      v1 = sub_1B0310B00(v0);
      MEMORY[0x1B5E07CD8](v1, 0x1020C40A0054943);
    }
    byte_1EEEB28E8 = 1;
  }
}

uint64_t sub_1B0310B00(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  void (*v6)(_QWORD);
  uint64_t v7;
  _QWORD *v8;

  v2 = *(_QWORD **)a1;
  v3 = *(_QWORD **)(a1 + 8);
  v4 = v3 - 2;
  if (*(_QWORD **)a1 != v3 && v4 > v2)
  {
    do
    {
      v6 = (void (*)(_QWORD))*v2;
      *v2 = *v4;
      *v4 = v6;
      v7 = v2[1];
      v2[1] = v4[1];
      v4[1] = v7;
      v2 += 2;
      v4 -= 2;
    }
    while (v2 < v4);
    v2 = *(_QWORD **)a1;
    v3 = *(_QWORD **)(a1 + 8);
  }
  while (v2 != v3)
  {
    ((void (*)(_QWORD))*v2)(v2[1]);
    v2 += 2;
  }
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  v8 = *(_QWORD **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v8;
    operator delete(v8);
  }
  return a1;
}

void sub_1B0310BA4()
{
  __assert_rtn("StringPiece", "stringpiece.h", 229, "len >= 0");
}

_OWORD *sub_1B0310BCC(uint64_t a1)
{
  std::string *v2;
  _OWORD *result;
  uint64_t v4;
  int v5;
  char v6;
  std::string v7[2];

  if (*(int *)(a1 + 28) <= 16)
  {
    sub_1B0305328((uint64_t)v7, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 158);
    v2 = sub_1B0305340(v7, "CHECK failed: limit_ > kSlopBytes: ");
    sub_1B0305470((uint64_t)&v6, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v7);
  }
  result = sub_1B0310C90(a1, 0, -1);
  v4 = *(_QWORD *)(a1 + 8);
  if (result)
  {
    v5 = *(_DWORD *)(a1 + 28) + (_DWORD)result - v4;
    *(_DWORD *)(a1 + 28) = v5;
    v4 += v5 & (v5 >> 31);
  }
  else
  {
    *(_DWORD *)(a1 + 80) = 1;
  }
  *(_QWORD *)a1 = v4;
  return result;
}

void sub_1B0310C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_1B0310C90(uint64_t a1, unsigned int a2, int a3)
{
  _OWORD *v3;
  uint64_t v5;
  int v6;
  std::string *v7;
  int v8;
  std::string *v10;
  std::string *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  int v16;
  BOOL v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  size_t v21;
  std::string *v22;
  std::string *v23;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  char *v28;
  void *v29;
  unint64_t v30;
  char v31;
  void *__src;
  std::string v33[2];

  v3 = *(_OWORD **)(a1 + 16);
  if (!v3)
    return v3;
  v5 = a1 + 40;
  if (v3 != (_OWORD *)(a1 + 40))
  {
    v6 = *(_DWORD *)(a1 + 24);
    if (v6 <= 16)
    {
      sub_1B0305328((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 105);
      v7 = sub_1B0305340(v33, "CHECK failed: size_ > kSlopBytes: ");
      sub_1B0305470((uint64_t)&__src, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v33);
      v3 = *(_OWORD **)(a1 + 16);
      v6 = *(_DWORD *)(a1 + 24);
    }
    *(_QWORD *)(a1 + 8) = (char *)v3 + v6 - 16;
    *(_QWORD *)(a1 + 16) = v5;
    if (*(_QWORD *)(a1 + 72) == 1)
      *(_QWORD *)(a1 + 72) = 2;
    return v3;
  }
  *v3 = *(_OWORD *)*(_QWORD *)(a1 + 8);
  if (*(int *)(a1 + 84) < 1)
    goto LABEL_46;
  v8 = a3;
  if (a3 < 0)
    goto LABEL_39;
  if ((a2 & 0x80000000) != 0)
  {
    sub_1B0305328((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 53);
    v11 = sub_1B0305340(v33, "CHECK failed: overrun >= 0: ");
    sub_1B0305470((uint64_t)&__src, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v33);
LABEL_14:
    v12 = a1 + 56;
    v13 = (unsigned __int8 *)v3 + (int)a2;
    v14 = v13;
    while (2)
    {
      v15 = (char)*v14++;
      v16 = v15;
      if (v15 < 0)
      {
        v16 = v16 + (*v14 << 7) - 128;
        if ((char)*v14 < 0)
        {
          v14 = v13 + 3;
          v20 = -21;
          while (1)
          {
            v16 += (*(v14 - 1) - 1) << (v20 + 35);
            if (((char)*(v14 - 1) & 0x80000000) == 0)
              break;
            ++v14;
            v20 += 7;
            if (!v20)
              goto LABEL_39;
          }
        }
        else
        {
          v14 = v13 + 2;
        }
      }
      if ((unint64_t)v14 <= v12)
      {
        if (!v16)
          goto LABEL_46;
        switch(v16 & 7)
        {
          case 0:
            v33[0].__r_.__value_.__r.__words[0] = 0;
            v14 = sub_1B0311F84((char *)v14, v33);
            if (!v14)
              goto LABEL_39;
            goto LABEL_38;
          case 1:
            v14 += 8;
            goto LABEL_38;
          case 2:
            v18 = *v14;
            if ((char)*v14 < 0)
            {
              v19 = sub_1B0311984((uint64_t)v14, v18);
              if (!v19)
                goto LABEL_39;
            }
            else
            {
              v19 = (uint64_t)(v14 + 1);
            }
            if ((uint64_t)(v12 - v19) < v18)
              goto LABEL_39;
            v14 = (unsigned __int8 *)(v19 + v18);
LABEL_38:
            v13 = v14;
            if ((unint64_t)v14 >= v12)
              goto LABEL_39;
            continue;
          case 3:
            ++v8;
            goto LABEL_38;
          case 4:
            v17 = __OFSUB__(v8--, 1);
            if (v8 < 0 != v17)
              goto LABEL_46;
            goto LABEL_38;
          case 5:
            v14 += 4;
            goto LABEL_38;
          default:
            goto LABEL_39;
        }
      }
      goto LABEL_39;
    }
  }
  if (a2 >= 0x11)
  {
    sub_1B0305328((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 54);
    v10 = sub_1B0305340(v33, "CHECK failed: overrun <= kSlopBytes: ");
    sub_1B0305470((uint64_t)&__src, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v33);
    goto LABEL_39;
  }
  if (a2 != 16)
    goto LABEL_14;
LABEL_39:
  __src = 0;
  if (!(*(unsigned int (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, a1 + 24))
  {
LABEL_45:
    *(_DWORD *)(a1 + 84) = 0;
LABEL_46:
    if (*(_QWORD *)(a1 + 72) == 2)
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 8) - (_QWORD)v3;
    *(_QWORD *)(a1 + 8) = a1 + 56;
    *(_QWORD *)(a1 + 16) = 0;
    *(_DWORD *)(a1 + 24) = 0;
    return v3;
  }
  while (1)
  {
    v21 = *(unsigned int *)(a1 + 24);
    *(_DWORD *)(a1 + 84) -= v21;
    if ((int)v21 >= 17)
    {
      v27 = *(_QWORD *)(a1 + 72);
      v26 = (_QWORD *)(a1 + 72);
      v25 = v27;
      v28 = (char *)(v26 - 2);
      v29 = __src;
      *((_OWORD *)v26 - 1) = *(_OWORD *)__src;
      *(v26 - 7) = v29;
      goto LABEL_52;
    }
    if ((int)v21 >= 1)
      break;
    if ((_DWORD)v21)
    {
      sub_1B0305328((uint64_t)v33, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 137);
      v22 = sub_1B0305340(v33, "CHECK failed: size_ == 0: ");
      v23 = sub_1B0305514(v22, *(_DWORD *)(a1 + 24));
      sub_1B0305470((uint64_t)&v31, (const char **)&v23->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v33);
    }
    if (((*(uint64_t (**)(_QWORD, void **, uint64_t))(**(_QWORD **)(a1 + 32) + 16))(*(_QWORD *)(a1 + 32), &__src, a1 + 24) & 1) == 0)goto LABEL_45;
  }
  memcpy((void *)(a1 + 56), __src, v21);
  v30 = *(_QWORD *)(a1 + 72);
  v26 = (_QWORD *)(a1 + 72);
  v25 = v30;
  v28 = (char *)v3 + v21;
  *(v26 - 7) = v3;
LABEL_52:
  *(v26 - 8) = v28;
  if (v25 > 1)
    *v26 = 1;
  return v3;
}

void sub_1B0311038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_1B0311068(uint64_t a1, signed int a2, int a3)
{
  int v3;
  signed int v5;
  std::string *v7;
  std::string *v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  _OWORD *v13;
  uint64_t v14;
  int v15;
  char *result;
  std::string *v17;
  char v18;
  std::string v19[2];

  v3 = *(_DWORD *)(a1 + 28);
  if (v3 < a2)
    return 0;
  v5 = a2;
  if (v3 == a2)
  {
    sub_1B0305328((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 175);
    v7 = sub_1B0305340(v19, "CHECK failed: overrun != limit_: ");
    sub_1B0305470((uint64_t)&v18, (const char **)&v7->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= v5)
  {
    sub_1B0305328((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 176);
    v8 = sub_1B0305340(v19, "CHECK failed: overrun < limit_: ");
    sub_1B0305470((uint64_t)&v18, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8) + (v3 & (v3 >> 31)))
  {
    sub_1B0305328((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 181);
    v9 = sub_1B0305340(v19, "CHECK failed: limit_end_ == buffer_end_ + (std::min)(0, limit_): ");
    sub_1B0305470((uint64_t)&v18, (const char **)&v9->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v19);
    v3 = *(_DWORD *)(a1 + 28);
  }
  if (v3 <= 0)
  {
    sub_1B0305328((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 183);
    v10 = sub_1B0305340(v19, "CHECK failed: limit_ > 0: ");
    sub_1B0305470((uint64_t)&v18, (const char **)&v10->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v19);
  }
  if (*(_QWORD *)a1 != *(_QWORD *)(a1 + 8))
  {
    sub_1B0305328((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 184);
    v11 = sub_1B0305340(v19, "CHECK failed: limit_end_ == buffer_end_: ");
    sub_1B0305470((uint64_t)&v18, (const char **)&v11->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v19);
  }
  while (1)
  {
    if (v5 < 0)
    {
      sub_1B0305328((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 188);
      v12 = sub_1B0305340(v19, "CHECK failed: overrun >= 0: ");
      sub_1B0305470((uint64_t)&v18, (const char **)&v12->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v19);
    }
    v13 = sub_1B0310C90(a1, v5, a3);
    if (!v13)
      break;
    v14 = *(_QWORD *)(a1 + 8);
    v15 = *(_DWORD *)(a1 + 28) + (_DWORD)v13 - v14;
    *(_DWORD *)(a1 + 28) = v15;
    result = (char *)v13 + v5;
    v5 = (_DWORD)result - v14;
    if ((int)result - (int)v14 < 0)
    {
      *(_QWORD *)a1 = v14 + (v15 & (v15 >> 31));
      return result;
    }
  }
  if (v5)
    return 0;
  if (*(int *)(a1 + 28) <= 0)
  {
    sub_1B0305328((uint64_t)v19, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/parse_context.cc", 193);
    v17 = sub_1B0305340(v19, "CHECK failed: limit_ > 0: ");
    sub_1B0305470((uint64_t)&v18, (const char **)&v17->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v19);
  }
  result = *(char **)(a1 + 8);
  *(_QWORD *)a1 = result;
  *(_DWORD *)(a1 + 80) = 1;
  return result;
}

void sub_1B0311314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

_OWORD *sub_1B031135C(uint64_t a1, int a2, int a3)
{
  int v5;
  BOOL v6;
  std::string *v7;
  _OWORD *result;
  char v9;
  std::string v10[2];

  v5 = *(_DWORD *)(a1 + 8) - a2 + 16;
  while (1)
  {
    v6 = __OFSUB__(a3, v5);
    a3 -= v5;
    if ((a3 < 0) ^ v6 | (a3 == 0))
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v7 = sub_1B0305340(v10, "CHECK failed: size > chunk_size: ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    if (!*(_QWORD *)(a1 + 16) || *(int *)(a1 + 28) < 17)
      break;
    result = sub_1B0310BCC(a1);
    if (!result)
      return result;
    v5 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (a3 <= v5)
      return (_OWORD *)((char *)result + a3 + 16);
  }
  return 0;
}

void sub_1B0311428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_1B0311440(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  const std::string::value_type *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
  {
    *this->__r_.__value_.__l.__data_ = 0;
    this->__r_.__value_.__l.__size_ = 0;
  }
  else
  {
    this->__r_.__value_.__s.__data_[0] = 0;
    *((_BYTE *)&this->__r_.__value_.__s + 23) = 0;
  }
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = sub_1B0305340(v16, "CHECK failed: size > chunk_size: ");
      sub_1B0305470((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v16);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = (const std::string::value_type *)sub_1B0310BCC(a1);
    if (!result)
      return result;
    v6 = result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_1B03115AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

const std::string::value_type *sub_1B03115C4(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  int v5;
  const std::string::value_type *v6;
  uint64_t v8;
  std::string::size_type size;
  int v10;
  int v11;
  BOOL v12;
  std::string *v13;
  const std::string::value_type *result;
  char v15;
  std::string v16[2];

  v5 = a3;
  v6 = __s;
  v8 = *(_QWORD *)(a1 + 8);
  if (v8 - (uint64_t)__s + *(int *)(a1 + 28) >= a3)
  {
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
      size = this->__r_.__value_.__l.__size_;
    else
      size = HIBYTE(this->__r_.__value_.__r.__words[2]);
    if (a3 >= 50000000)
      v10 = 50000000;
    else
      v10 = a3;
    std::string::reserve(this, size + v10);
    v8 = *(_QWORD *)(a1 + 8);
  }
  v11 = v8 - (_DWORD)v6 + 16;
  while (1)
  {
    v12 = __OFSUB__(v5, v11);
    v5 -= v11;
    if ((v5 < 0) ^ v12 | (v5 == 0))
    {
      sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 323);
      v13 = sub_1B0305340(v16, "CHECK failed: size > chunk_size: ");
      sub_1B0305470((uint64_t)&v15, (const char **)&v13->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v16);
    }
    if (!*(_QWORD *)(a1 + 16))
      break;
    std::string::append(this, v6, v11);
    if (*(int *)(a1 + 28) < 17)
      break;
    result = (const std::string::value_type *)sub_1B0310BCC(a1);
    if (!result)
      return result;
    v6 = result + 16;
    v11 = *(_DWORD *)(a1 + 8) - (_DWORD)result;
    if (v5 <= v11)
    {
      std::string::append(this, v6, v5);
      return &v6[v5];
    }
  }
  return 0;
}

void sub_1B0311710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B031172C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v6;
  unsigned int v7;
  char *v8;
  uint64_t result;
  unsigned int v10;
  int v11;
  int v12;
  BOOL v13;
  int v14;
  int v15;

  v6 = (char)*a3;
  v7 = *a3;
  if (v6 < 0)
  {
    result = sub_1B0311984((uint64_t)a3, v7);
    if (!result)
      return result;
    v8 = (char *)result;
    v7 = v10;
  }
  else
  {
    v8 = (char *)(a3 + 1);
  }
  v11 = sub_1B02F74E0(a1, (int)v8, v7);
  v12 = *(_DWORD *)(a1 + 88);
  v13 = __OFSUB__(v12--, 1);
  *(_DWORD *)(a1 + 88) = v12;
  if (v12 < 0 != v13)
    return 0;
  v14 = v11;
  result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)a2 + 88))(a2, v8, a1);
  if (!result)
    return result;
  ++*(_DWORD *)(a1 + 88);
  if (*(_DWORD *)(a1 + 80))
    return 0;
  v15 = *(_DWORD *)(a1 + 28) + v14;
  *(_DWORD *)(a1 + 28) = v15;
  *(_QWORD *)a1 = *(_QWORD *)(a1 + 8) + (v15 & (v15 >> 31));
  return result;
}

void sub_1B03117F8(int a1, unint64_t a2, std::string *this)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = (8 * a1);
  if (v5 < 0x80)
  {
    LOBYTE(v6) = 8 * a1;
  }
  else
  {
    do
    {
      std::string::push_back(this, v5 | 0x80);
      v6 = v5 >> 7;
      v7 = v5 >> 14;
      v5 >>= 7;
    }
    while (v7);
  }
  std::string::push_back(this, v6);
  if (a2 < 0x80)
  {
    LOBYTE(v8) = a2;
  }
  else
  {
    do
    {
      std::string::push_back(this, a2 | 0x80);
      v8 = a2 >> 7;
      v9 = a2 >> 14;
      a2 >>= 7;
    }
    while (v9);
  }
  std::string::push_back(this, v8);
}

uint64_t sub_1B0311890(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;

  result = a1 + 3;
  v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 35);
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      while (*(char *)(a1 + v4 + 5) < 0)
      {
        result = 0;
        if (++v4 == 5)
          return result;
      }
      return a1 + v4 + 6;
    }
  }
  return result;
}

uint64_t sub_1B03118F8(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  a2 = a2;
  result = a1 + 3;
  v4 = (char *)(a1 + 2);
  v5 = 14;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << v5;
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (v5 == 70)
      return 0;
  }
  return result;
}

uint64_t sub_1B0311940(uint64_t a1, int a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  int v6;

  result = a1 + 3;
  v4 = (char *)(a1 + 2);
  v5 = -21;
  while (1)
  {
    v6 = *v4++;
    a2 += (v6 - 1) << (v5 + 35);
    if ((v6 & 0x80000000) == 0)
      break;
    ++result;
    v5 += 7;
    if (!v5)
      return 0;
  }
  return result;
}

uint64_t sub_1B0311984(uint64_t a1, int a2)
{
  uint64_t result;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;

  result = a1 + 2;
  v4 = -21;
  while (1)
  {
    a2 += (*(unsigned __int8 *)(result - 1) - 1) << (v4 + 28);
    if ((*(char *)(result - 1) & 0x80000000) == 0)
      break;
    ++result;
    v4 += 7;
    if (!v4)
    {
      v5 = *(unsigned __int8 *)(a1 + 4);
      v6 = a1 + 5;
      if (a2 + (v5 << 28) - 0x10000000 > 0x7FFFFFEF)
        v6 = 0;
      if (v5 <= 7)
        return v6;
      else
        return 0;
    }
  }
  return result;
}

const std::string::value_type *sub_1B03119F4(std::string *a1, char *a2, uint64_t a3)
{
  int v5;
  std::string::value_type *v6;
  const std::string::value_type *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (const std::string::value_type *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = (std::string::value_type *)result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_1B030F2BC(a3, v6, v5, a1);
}

unsigned __int8 *sub_1B0311A58(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B0311FF8(a3, a2, a1);
}

unsigned __int8 *sub_1B0311A68(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B03122C4(a3, a2, a1);
}

unsigned __int8 *sub_1B0311A78(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B0312590(a3, a2, a1);
}

unsigned __int8 *sub_1B0311A88(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B031285C(a3, a2, a1);
}

unsigned __int8 *sub_1B0311A98(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B0312B28(a3, a2, a1);
}

unsigned __int8 *sub_1B0311AA8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B0312E00(a3, a2, a1);
}

unsigned __int8 *sub_1B0311AB8(int *a1, unsigned __int8 *a2, uint64_t a3)
{
  return sub_1B03130D8(a3, a2, a1);
}

char *sub_1B0311ACC(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_1B03133AC(a3, v6, v5, a1);
}

char *sub_1B0311B34(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_1B03134B0(a3, v6, v5, a1);
}

char *sub_1B0311B9C(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_1B03135B4(a3, v6, v5, a1);
}

char *sub_1B0311C04(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_1B03136B8(a3, v6, v5, a1);
}

char *sub_1B0311C6C(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_1B03137BC(a3, v6, v5, a1);
}

char *sub_1B0311CD4(int *a1, char *a2, uint64_t a3)
{
  int v5;
  char *v6;
  char *result;
  int v8;

  v5 = *a2;
  if (*a2 < 0)
  {
    result = (char *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v6 = result;
    v5 = v8;
  }
  else
  {
    v6 = a2 + 1;
  }
  return sub_1B03138C0(a3, v6, v5, a1);
}

char *sub_1B0311D38(uint64_t a1, char *a2, uint64_t a3)
{
  char *v5;
  unsigned int v6;
  uint64_t v8;
  char *v10;

  v10 = a2;
  while (1)
  {
    if ((sub_1B02F70C0(a3, &v10, *(_DWORD *)(a3 + 92)) & 1) != 0)
      return v10;
    v5 = v10 + 1;
    v6 = *v10;
    if (*v10 < 0)
    {
      v6 = v6 + (*v5 << 7) - 128;
      if (*v5 < 0)
      {
        v5 = v10 + 3;
        v8 = -21;
        while (1)
        {
          v6 += (*(v5 - 1) - 1) << (v8 + 35);
          if ((*(v5 - 1) & 0x80000000) == 0)
            break;
          ++v5;
          v8 += 7;
          if (!v8)
            return 0;
        }
      }
      else
      {
        v5 = v10 + 2;
      }
    }
    v10 = v5;
    if (!v6 || (v6 & 7) == 4)
      break;
    v10 = (char *)sub_1B0311E48(v6, a1);
    if (!v10)
      return 0;
  }
  *(_DWORD *)(a3 + 80) = v6 - 1;
  return v5;
}

unsigned __int8 *sub_1B0311E20(unsigned int a1, std::string *a2, char *a3, int32x2_t *a4)
{
  std::string *v5;

  v5 = a2;
  return sub_1B0311E48(a1, &v5, a3, a4);
}

unsigned __int8 *sub_1B0311E48(unint64_t a1, std::string **a2, char *a3, int32x2_t *a4)
{
  unint64_t v4;
  unsigned __int8 *v5;
  std::string *v7;
  unsigned __int8 *v8;
  char v10;
  std::string v11[2];

  v4 = a1 >> 3;
  if (!(a1 >> 3))
    return 0;
  v5 = (unsigned __int8 *)a3;
  switch(a1 & 7)
  {
    case 0uLL:
      v11[0].__r_.__value_.__r.__words[0] = 0;
      v5 = sub_1B0311F84(a3, v11);
      if (v5)
        sub_1B03139C4(a2, v4, v11[0].__r_.__value_.__r.__words[0]);
      return v5;
    case 1uLL:
      v5 = (unsigned __int8 *)(a3 + 8);
      sub_1B0313A78((std::string *)a2, v4, *(_QWORD *)a3);
      return v5;
    case 2uLL:
      v8 = (unsigned __int8 *)sub_1B0313B30(a2, v4, a3, (uint64_t)a4);
      goto LABEL_10;
    case 3uLL:
      v8 = (unsigned __int8 *)sub_1B0313C78(a2, v4, a3, a4);
LABEL_10:
      v5 = v8;
      break;
    case 4uLL:
      sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 758);
      v7 = sub_1B0305340(v11, "Can't happen");
      sub_1B0305470((uint64_t)&v10, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v11);
      break;
    case 5uLL:
      v5 = (unsigned __int8 *)(a3 + 4);
      sub_1B0313DA0((std::string *)a2, v4, *(_DWORD *)a3);
      break;
    default:
      return 0;
  }
  return v5;
}

void sub_1B0311F6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B0311F84(char *a1, _QWORD *a2)
{
  uint64_t v2;
  unsigned __int8 *result;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  if (*a1 < 0)
  {
    v4 = a1[1];
    v5 = (v2 + (v4 << 7) - 128);
    if ((v4 & 0x80) != 0)
    {
      result = (unsigned __int8 *)(a1 + 3);
      v6 = 14;
      while (1)
      {
        v5 += (*(result - 1) - 1) << v6;
        if (((char)*(result - 1) & 0x80000000) == 0)
          break;
        ++result;
        v6 += 7;
        if (v6 == 70)
        {
          result = 0;
          v5 = 0;
          break;
        }
      }
      *a2 = v5;
    }
    else
    {
      *a2 = v5;
      return (unsigned __int8 *)(a1 + 2);
    }
  }
  else
  {
    *a2 = v2;
    return (unsigned __int8 *)(a1 + 1);
  }
  return result;
}

unsigned __int8 *sub_1B0311FF8(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_1B0312218(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_1B0312218(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_1B0305340(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_1B0312218((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_1B0305340(&v18, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B03121F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B0312218(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_1B0311F84((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_1B03144A4(a3, v7 + 1);
      *(_DWORD *)(sub_1B0314918((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_1B0314918((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B03122C4(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_1B03124E4(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_1B03124E4(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_1B0305340(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_1B03124E4((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_1B0305340(&v18, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B03124BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B03124E4(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_1B0311F84((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_1B0314ACC(a3, v7 + 1);
      *(_DWORD *)(sub_1B0314F40((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_1B0314F40((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B0312590(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_1B03127B0(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_1B03127B0(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_1B0305340(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_1B03127B0((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_1B0305340(&v18, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B0312788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B03127B0(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_1B0311F84((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_1B03150F4(a3, v7 + 1);
      *(_QWORD *)(sub_1B0315568((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_1B0315568((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B031285C(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_1B0312A7C(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_1B0312A7C(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_1B0305340(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_1B0312A7C((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_1B0305340(&v18, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B0312A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B0312A7C(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_1B0311F84((char *)i, &v10);
    if (!i)
      break;
    v6 = v10;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_1B031571C(a3, v7 + 1);
      *(_QWORD *)(sub_1B0315B90((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_1B0315B90((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B0312B28(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_1B0312D48(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_1B0312D48(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_1B0305340(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_1B0312D48((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_1B0305340(&v18, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B0312D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B0312D48(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_1B0311F84((char *)i, &v10);
    if (!i)
      break;
    v6 = -(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_1B03144A4(a3, v7 + 1);
      *(_DWORD *)(sub_1B0314918((uint64_t)a3) + 4 * v7) = v6;
    }
    else
    {
      *(_DWORD *)(sub_1B0314918((uint64_t)a3) + 4 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B0312E00(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_1B0313020(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_1B0313020(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_1B0305340(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_1B0313020((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_1B0305340(&v18, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B0312FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B0313020(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  unint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_1B0311F84((char *)i, &v10);
    if (!i)
      break;
    v6 = -(uint64_t)(v10 & 1) ^ (v10 >> 1);
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_1B03150F4(a3, v7 + 1);
      *(_QWORD *)(sub_1B0315568((uint64_t)a3) + 8 * v7) = v6;
    }
    else
    {
      *(_QWORD *)(sub_1B0315568((uint64_t)a3) + 8 * v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

unsigned __int8 *sub_1B03130D8(uint64_t a1, unsigned __int8 *a2, int *a3)
{
  int v5;
  unsigned __int8 *result;
  int v7;
  unint64_t v8;
  int v9;
  signed int v10;
  std::string *v11;
  int v12;
  std::string *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  BOOL v16;
  char v17;
  std::string v18;
  __int16 v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((char)*a2 < 0)
  {
    result = (unsigned __int8 *)sub_1B0311984((uint64_t)a2, *a2);
    if (!result)
      return result;
    v5 = v7;
  }
  else
  {
    result = a2 + 1;
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = v8 - (_DWORD)result;
  if (v5 <= (int)v8 - (int)result)
  {
LABEL_15:
    v14 = (unint64_t)&result[v5];
    result = sub_1B03132F8(result, v14, a3);
    if ((unsigned __int8 *)v14 != result)
      return 0;
  }
  else
  {
    while (1)
    {
      result = sub_1B03132F8(result, v8, a3);
      if (!result)
        break;
      v10 = (_DWORD)result - *(_QWORD *)(a1 + 8);
      if (v10 >= 0x11)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 674);
        v11 = sub_1B0305340(&v18, "CHECK failed: overrun >= 0 && overrun <= kSlopBytes: ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v11->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      v12 = v5 - v9;
      if (v5 - v9 <= 16)
      {
        v19 = 0;
        v18.__r_.__value_.__r.__words[2] = 0;
        *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)*(_QWORD *)(a1 + 8);
        v15 = sub_1B03132F8((unsigned __int8 *)&v18 + v10, (unint64_t)&v18 + v12, a3);
        if (v15)
          v16 = v15 == (unsigned __int8 *)((char *)&v18 + v12);
        else
          v16 = 0;
        if (!v16)
          return 0;
        return (unsigned __int8 *)(*(_QWORD *)(a1 + 8) + v12);
      }
      v5 = v5 - v9 - v10;
      if (v5 <= 0)
      {
        sub_1B0305328((uint64_t)&v18, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/parse_context.h", 688);
        v13 = sub_1B0305340(&v18, "CHECK failed: (size) > (0): ");
        sub_1B0305470((uint64_t)&v17, (const char **)&v13->__r_.__value_.__l.__data_);
        sub_1B0305478((uint64_t)&v18);
      }
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (unsigned __int8 *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      result += v10;
      v8 = *(_QWORD *)(a1 + 8);
      v9 = v8 - (_DWORD)result;
      if (v5 <= (int)v8 - (int)result)
        goto LABEL_15;
    }
  }
  return result;
}

void sub_1B03132D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B03132F8(unsigned __int8 *a1, unint64_t a2, int *a3)
{
  unsigned __int8 *i;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v10;

  for (i = a1; (unint64_t)i < a2; *a3 = v8)
  {
    v10 = 0;
    i = sub_1B0311F84((char *)i, &v10);
    if (!i)
      break;
    v6 = v10 != 0;
    v7 = *a3;
    if ((_DWORD)v7 == a3[1])
    {
      v8 = v7 + 1;
      sub_1B0313E84(a3, v7 + 1);
      *(_BYTE *)(sub_1B03142F4((uint64_t)a3) + v7) = v6;
    }
    else
    {
      *(_BYTE *)(sub_1B03142F4((uint64_t)a3) + v7) = v6;
      v8 = v7 + 1;
    }
  }
  return i;
}

char *sub_1B03133AC(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B0314ACC(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_1B0314C84((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_1B0314ACC(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_1B0314C84((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_1B03134B0(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B03144A4(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_1B031465C((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_1B03144A4(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_1B031465C((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_1B03135B4(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B031571C(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_1B03158D4((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_1B031571C(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_1B03158D4((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_1B03136B8(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B03150F4(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_1B03152AC((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_1B03150F4(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_1B03152AC((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_1B03137BC(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B0315D44(a4, *a4 + (v5 >> 2));
    v11 = (void *)sub_1B0315EFC((uint64_t)a4, v5 >> 2);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFFC));
    if (v5 == (v5 & 0xFFFFFFFC))
      return &v6[v5 & 0xFFFFFFFC];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_1B0315D44(a4, *a4 + (v7 >> 2));
      v9 = (void *)sub_1B0315EFC((uint64_t)a4, v7 >> 2);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFFC));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFFC;
      v6 = &result[-(v7 & 3) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 3));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

char *sub_1B03138C0(uint64_t a1, char *a2, int a3, int *a4)
{
  int v5;
  char *v6;
  int v7;
  void *v9;
  char *result;
  void *v11;

  v5 = a3;
  v6 = a2;
  v7 = *(_DWORD *)(a1 + 8) - (_DWORD)a2 + 16;
  if (v7 >= a3)
  {
LABEL_5:
    sub_1B031636C(a4, *a4 + (v5 >> 3));
    v11 = (void *)sub_1B0316524((uint64_t)a4, v5 >> 3);
    memcpy(v11, v6, (int)(v5 & 0xFFFFFFF8));
    if (v5 == (v5 & 0xFFFFFFF8))
      return &v6[v5 & 0xFFFFFFF8];
    else
      return 0;
  }
  else
  {
    while (1)
    {
      sub_1B031636C(a4, *a4 + (v7 >> 3));
      v9 = (void *)sub_1B0316524((uint64_t)a4, v7 >> 3);
      memcpy(v9, v6, (int)(v7 & 0xFFFFFFF8));
      if (*(int *)(a1 + 28) < 17)
        return 0;
      result = (char *)sub_1B0310BCC(a1);
      if (!result)
        return result;
      v5 -= v7 & 0xFFFFFFF8;
      v6 = &result[-(v7 & 7) + 16];
      v7 = *(_DWORD *)(a1 + 8) - ((_DWORD)result - (v7 & 7));
      if (v5 <= v7)
        goto LABEL_5;
    }
  }
}

void sub_1B03139C4(std::string **a1, int a2, unint64_t a3)
{
  std::string *v3;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string *v9;
  unint64_t v10;
  unint64_t v11;

  v3 = *a1;
  if (*a1)
  {
    v6 = (8 * a2);
    if (v6 < 0x80)
    {
      LOBYTE(v7) = 8 * a2;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9 = *a1;
    if (a3 < 0x80)
    {
      LOBYTE(v10) = a3;
    }
    else
    {
      do
      {
        std::string::push_back(v9, a3 | 0x80);
        v10 = a3 >> 7;
        v11 = a3 >> 14;
        a3 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v9, v10);
  }
}

std::string *sub_1B0313A78(std::string *result, int a2, uint64_t a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD v9[2];

  v9[1] = *MEMORY[0x1E0C80C00];
  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)result;
    v6 = (8 * a2) | 1u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 1;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    v9[0] = a3;
    return std::string::append(*v5, (const std::string::value_type *)v9, 8uLL);
  }
  return result;
}

const std::string::value_type *sub_1B0313B30(std::string **a1, int a2, char *a3, uint64_t a4)
{
  int v7;
  std::string::value_type *v8;
  const std::string::value_type *result;
  int v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::string *v16;
  unint64_t v17;
  unint64_t v18;

  v7 = *a3;
  if (*a3 < 0)
  {
    result = (const std::string::value_type *)sub_1B0311984((uint64_t)a3, *a3);
    if (!result)
      return result;
    v8 = (std::string::value_type *)result;
    v7 = v10;
  }
  else
  {
    v8 = a3 + 1;
  }
  v11 = *a1;
  if (*a1)
  {
    v12 = (8 * a2) | 2u;
    if (v12 < 0x80)
    {
      LOBYTE(v13) = v12;
    }
    else
    {
      do
      {
        std::string::push_back(v11, v12 | 0x80);
        v13 = v12 >> 7;
        v14 = v12 >> 14;
        v12 >>= 7;
      }
      while (v14);
    }
    std::string::push_back(v11, v13);
    v15 = v7;
    v16 = *a1;
    if (v7 < 0x80)
    {
      LOBYTE(v17) = v7;
    }
    else
    {
      do
      {
        std::string::push_back(v16, v15 | 0x80);
        v17 = v15 >> 7;
        v18 = v15 >> 14;
        v15 >>= 7;
      }
      while (v18);
    }
    std::string::push_back(v16, v17);
    return sub_1B0313E2C(a4, v8, v7, *a1);
  }
  else if (*(_QWORD *)(a4 + 8) - (_QWORD)v8 + 16 >= v7)
  {
    return &v8[v7];
  }
  else
  {
    return (const std::string::value_type *)sub_1B031135C(a4, (int)v8, v7);
  }
}

char *sub_1B0313C78(std::string **a1, int a2, char *a3, int32x2_t *a4)
{
  std::string *v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  BOOL v13;
  char *v14;
  __int32 v15;
  char *v17;
  std::string *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;

  v7 = *a1;
  v8 = 8 * a2;
  if (*a1)
  {
    v9 = v8 | 3u;
    if (v9 < 0x80)
    {
      LOBYTE(v10) = v8 | 3;
    }
    else
    {
      do
      {
        std::string::push_back(v7, v9 | 0x80);
        v10 = v9 >> 7;
        v11 = v9 >> 14;
        v9 >>= 7;
      }
      while (v11);
    }
    std::string::push_back(v7, v10);
  }
  v12 = a4[11].i32[0];
  v13 = __OFSUB__(v12--, 1);
  a4[11].i32[0] = v12;
  if (v12 < 0 != v13)
    return 0;
  ++a4[11].i32[1];
  v14 = sub_1B0311D38((uint64_t)a1, a3, (uint64_t)a4);
  a4[11] = vadd_s32(a4[11], (int32x2_t)0xFFFFFFFF00000001);
  v15 = a4[10].i32[0];
  a4[10].i32[0] = 0;
  if (v15 != (v8 | 3) || v14 == 0)
    return 0;
  v17 = v14;
  v18 = *a1;
  if (v18)
  {
    v19 = v8 | 4u;
    if (v19 < 0x80)
    {
      LOBYTE(v20) = v8 | 4;
    }
    else
    {
      do
      {
        std::string::push_back(v18, v19 | 0x80);
        v20 = v19 >> 7;
        v21 = v19 >> 14;
        v19 >>= 7;
      }
      while (v21);
    }
    std::string::push_back(v18, v20);
  }
  return v17;
}

std::string *sub_1B0313DA0(std::string *result, int a2, int a3)
{
  std::string *v3;
  std::string **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  std::string::value_type __s[4];

  v3 = (std::string *)result->__r_.__value_.__r.__words[0];
  if (result->__r_.__value_.__r.__words[0])
  {
    v5 = (std::string **)result;
    v6 = (8 * a2) | 5u;
    if (v6 < 0x80)
    {
      LOBYTE(v7) = (8 * a2) | 5;
    }
    else
    {
      do
      {
        std::string::push_back(v3, v6 | 0x80);
        v7 = v6 >> 7;
        v8 = v6 >> 14;
        v6 >>= 7;
      }
      while (v8);
    }
    std::string::push_back(v3, v7);
    *(_DWORD *)__s = a3;
    return std::string::append(*v5, __s, 4uLL);
  }
  return result;
}

const std::string::value_type *sub_1B0313E2C(uint64_t a1, std::string::value_type *__s, int a3, std::string *this)
{
  uint64_t v6;

  if (*(_QWORD *)(a1 + 8) - (_QWORD)__s + 16 < a3)
    return sub_1B03115C4(a1, __s, a3, this);
  v6 = a3;
  std::string::append(this, __s, a3);
  return &__s[v6];
}

void sub_1B0313E84(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  _QWORD *v12;
  void *v13;
  char v14;
  std::string v15[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_1B03142F4((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B0305328((uint64_t)v15, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_1B0305340(v15, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B0305470((uint64_t)&v14, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v15);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_1B03142F4((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  if (v6)
  {
    v11 = (v9 + 15) & 0x1FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v11);
    v12 = (_QWORD *)sub_1B0303E20(v6, v11);
  }
  else
  {
    v12 = operator new(v9 + 8);
  }
  *v12 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v12 + 1;
  sub_1B03142F4((uint64_t)a1);
  if (*a1 >= 1)
  {
    v13 = (void *)sub_1B03142F4((uint64_t)a1);
    memcpy(v13, v5 + 1, *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1B0314020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0314038(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_1B0305340(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_1B0305514(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_1B0305340(v6, ", ");
    v8 = sub_1B0305514(v7, *(_DWORD *)a1);
    sub_1B0305470((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B03140DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03140F4(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B03142F4((uint64_t)a1) + a2;
}

void sub_1B03141B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03141D0(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B03142F4((uint64_t)a1) + a2;
}

void sub_1B031428C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03142AC(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_1B03142F4(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B03142F4(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B0305328((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_1B0305340(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1B0314364(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B031437C(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_1B0305340(v10, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_1B0305478((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_1B0313E84(v3, *v3 + *a2);
    sub_1B0314038((uint64_t)v3, *a2);
    v6 = (void *)sub_1B03140F4(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_1B0305340(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    v8 = (const void *)sub_1B03142F4((uint64_t)a2);
    return (int *)memcpy(v6, v8, *a2);
  }
  return result;
}

void sub_1B0314484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03144A4(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_1B0314918((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_1B0305340(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B0305470((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_1B0314918((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_1B0303E20(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_1B0314918((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_1B0314918((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1B0314644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B031465C(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_1B0305340(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_1B0305514(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_1B0305340(v6, ", ");
    v8 = sub_1B0305514(v7, *(_DWORD *)a1);
    sub_1B0305470((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B0314700(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0314718(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0314918((uint64_t)a1) + 4 * a2;
}

void sub_1B03147D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03147F4(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0314918((uint64_t)a1) + 4 * a2;
}

void sub_1B03148B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03148D0(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_1B0314918(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B0314918(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B0305328((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_1B0305340(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1B0314988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B03149A0(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_1B0305340(v10, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_1B0305478((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_1B03144A4(v3, *v3 + *a2);
    sub_1B031465C((uint64_t)v3, *a2);
    v6 = (void *)sub_1B0314718(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_1B0305340(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    v8 = (const void *)sub_1B0314918((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_1B0314AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0314ACC(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_1B0314F40((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_1B0305340(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B0305470((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_1B0314F40((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_1B0303E20(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_1B0314F40((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_1B0314F40((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1B0314C6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0314C84(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_1B0305340(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_1B0305514(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_1B0305340(v6, ", ");
    v8 = sub_1B0305514(v7, *(_DWORD *)a1);
    sub_1B0305470((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B0314D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0314D40(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0314F40((uint64_t)a1) + 4 * a2;
}

void sub_1B0314DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0314E1C(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0314F40((uint64_t)a1) + 4 * a2;
}

void sub_1B0314ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0314EF8(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_1B0314F40(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B0314F40(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B0305328((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_1B0305340(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1B0314FB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B0314FC8(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_1B0305340(v10, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_1B0305478((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_1B0314ACC(v3, *v3 + *a2);
    sub_1B0314C84((uint64_t)v3, *a2);
    v6 = (void *)sub_1B0314D40(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_1B0305340(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    v8 = (const void *)sub_1B0314F40((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_1B03150D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03150F4(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_1B0315568((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_1B0305340(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B0305470((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_1B0315568((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_1B0303E20(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_1B0315568((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_1B0315568((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1B0315294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03152AC(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_1B0305340(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_1B0305514(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_1B0305340(v6, ", ");
    v8 = sub_1B0305514(v7, *(_DWORD *)a1);
    sub_1B0305470((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B0315350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315368(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0315568((uint64_t)a1) + 8 * a2;
}

void sub_1B0315424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315444(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0315568((uint64_t)a1) + 8 * a2;
}

void sub_1B0315500(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315520(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_1B0315568(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B0315568(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B0305328((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_1B0305340(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1B03155D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B03155F0(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_1B0305340(v10, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_1B0305478((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_1B03150F4(v3, *v3 + *a2);
    sub_1B03152AC((uint64_t)v3, *a2);
    v6 = (void *)sub_1B0315368(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_1B0305340(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    v8 = (const void *)sub_1B0315568((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_1B03156FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B031571C(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_1B0315B90((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_1B0305340(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B0305470((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_1B0315B90((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_1B0303E20(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_1B0315B90((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_1B0315B90((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1B03158BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03158D4(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_1B0305340(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_1B0305514(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_1B0305340(v6, ", ");
    v8 = sub_1B0305514(v7, *(_DWORD *)a1);
    sub_1B0305470((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B0315978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315990(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0315B90((uint64_t)a1) + 8 * a2;
}

void sub_1B0315A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315A6C(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B0315B90((uint64_t)a1) + 8 * a2;
}

void sub_1B0315B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315B48(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_1B0315B90(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B0315B90(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B0305328((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_1B0305340(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1B0315C00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B0315C18(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_1B0305340(v10, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_1B0305478((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_1B031571C(v3, *v3 + *a2);
    sub_1B03158D4((uint64_t)v3, *a2);
    v6 = (void *)sub_1B0315990(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_1B0305340(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    v8 = (const void *)sub_1B0315B90((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_1B0315D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0315D44(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_1B03161B8((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_1B0305340(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B0305470((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_1B03161B8((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 4 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0x7FFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_1B0303E20(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_1B03161B8((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_1B03161B8((uint64_t)a1);
    memcpy(v14, v5 + 1, 4 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1B0315EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315EFC(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_1B0305340(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_1B0305514(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_1B0305340(v6, ", ");
    v8 = sub_1B0305514(v7, *(_DWORD *)a1);
    sub_1B0305470((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 4 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B0315FA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0315FB8(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B03161B8((uint64_t)a1) + 4 * a2;
}

void sub_1B0316074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0316094(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B03161B8((uint64_t)a1) + 4 * a2;
}

void sub_1B0316150(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0316170(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_1B03161B8(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B03161B8(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B0305328((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_1B0305340(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1B0316228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B0316240(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_1B0305340(v10, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_1B0305478((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_1B0315D44(v3, *v3 + *a2);
    sub_1B0315EFC((uint64_t)v3, *a2);
    v6 = (void *)sub_1B0315FB8(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_1B0305340(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    v8 = (const void *)sub_1B03161B8((uint64_t)a2);
    return (int *)memcpy(v6, v8, 4 * *a2);
  }
  return result;
}

void sub_1B031634C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B031636C(int *a1, int a2)
{
  int v2;
  _QWORD *v5;
  uint64_t v6;
  int v7;
  std::string *v8;
  unsigned int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  void *v14;
  char v15;
  std::string v16[2];

  v2 = a1[1];
  if (v2 >= a2)
    return;
  if (v2 < 1)
  {
    v5 = 0;
    if (v2)
    {
LABEL_4:
      v6 = *(_QWORD *)(sub_1B03167E0((uint64_t)a1) - 8);
      if (a2 >= 4)
      {
        v7 = a1[1];
        if (v7 > 0x3FFFFFFF)
        {
          if (a2 <= 0x40000000)
          {
            sub_1B0305328((uint64_t)v16, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1550);
            v8 = sub_1B0305340(v16, "CHECK failed: (new_size) > (kRepeatedFieldUpperClampLimit): ");
            sub_1B0305470((uint64_t)&v15, (const char **)&v8->__r_.__value_.__l.__data_);
            sub_1B0305478((uint64_t)v16);
          }
          v9 = 0x7FFFFFFF;
          goto LABEL_16;
        }
        goto LABEL_13;
      }
      goto LABEL_11;
    }
  }
  else
  {
    v5 = (_QWORD *)(sub_1B03167E0((uint64_t)a1) - 8);
    if (a1[1])
      goto LABEL_4;
  }
  v6 = *((_QWORD *)a1 + 1);
  if (a2 >= 4)
  {
    v7 = 0;
LABEL_13:
    v10 = 2 * v7;
    if (v10 <= a2)
      v9 = a2;
    else
      v9 = v10;
    goto LABEL_16;
  }
LABEL_11:
  v9 = 4;
LABEL_16:
  v11 = 8 * v9;
  if (v6)
  {
    v12 = (v11 + 15) & 0xFFFFFFFF8;
    if ((*(_BYTE *)(v6 + 24) & 1) != 0)
      (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v6 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v6 + 32) + 32), MEMORY[0x1E0DE4EC8], v12);
    v13 = (_QWORD *)sub_1B0303E20(v6, v12);
  }
  else
  {
    v13 = operator new(v11 + 8);
  }
  *v13 = v6;
  a1[1] = v9;
  *((_QWORD *)a1 + 1) = v13 + 1;
  sub_1B03167E0((uint64_t)a1);
  if (*a1 >= 1)
  {
    v14 = (void *)sub_1B03167E0((uint64_t)a1);
    memcpy(v14, v5 + 1, 8 * *a1);
  }
  if (v5)
  {
    if (!*v5)
      operator delete(v5);
  }
}

void sub_1B031650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0316524(uint64_t a1, int a2)
{
  int v4;
  std::string *v5;
  std::string *v6;
  std::string *v7;
  std::string *v8;
  uint64_t result;
  char v10;
  std::string v11[2];

  v4 = *(_DWORD *)a1;
  if (*(_DWORD *)(a1 + 4) - *(_DWORD *)a1 < a2)
  {
    sub_1B0305328((uint64_t)v11, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1278);
    v5 = sub_1B0305340(v11, "CHECK failed: (total_size_ - current_size_) >= (n): ");
    v6 = sub_1B0305514(v5, *(_DWORD *)(a1 + 4));
    v7 = sub_1B0305340(v6, ", ");
    v8 = sub_1B0305514(v7, *(_DWORD *)a1);
    sub_1B0305470((uint64_t)&v10, (const char **)&v8->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v11);
    v4 = *(_DWORD *)a1;
  }
  result = *(_QWORD *)(a1 + 8) + 8 * v4;
  *(_DWORD *)a1 = v4 + a2;
  return result;
}

void sub_1B03165C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03165E0(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1322);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1323);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B03167E0((uint64_t)a1) + 8 * a2;
}

void sub_1B031669C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03166BC(_DWORD *a1, int a2)
{
  std::string *v4;
  std::string *v5;
  char v7;
  std::string v8[2];

  if (a2 < 0)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1301);
    v4 = sub_1B0305340(v8, "CHECK failed: (index) >= (0): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v4->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  if (*a1 <= a2)
  {
    sub_1B0305328((uint64_t)v8, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
    v5 = sub_1B0305340(v8, "CHECK failed: (index) < (current_size_): ");
    sub_1B0305470((uint64_t)&v7, (const char **)&v5->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v8);
  }
  return sub_1B03167E0((uint64_t)a1) + 8 * a2;
}

void sub_1B0316778(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0316798(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;

  if (*(int *)(a1 + 4) >= 1)
  {
    v2 = sub_1B03167E0(a1);
    v4 = *(_QWORD *)(v2 - 8);
    v3 = (void *)(v2 - 8);
    if (!v4)
      operator delete(v3);
  }
  return a1;
}

uint64_t sub_1B03167E0(uint64_t a1)
{
  std::string *v2;
  char v4;
  std::string v5[2];

  if (*(int *)(a1 + 4) <= 0)
  {
    sub_1B0305328((uint64_t)v5, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 352);
    v2 = sub_1B0305340(v5, "CHECK failed: (total_size_) > (0): ");
    sub_1B0305470((uint64_t)&v4, (const char **)&v2->__r_.__value_.__l.__data_);
    sub_1B0305478((uint64_t)v5);
  }
  return *(_QWORD *)(a1 + 8);
}

void sub_1B0316850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

int *sub_1B0316868(int *result, int *a2)
{
  int *v3;
  std::string *v4;
  int v5;
  void *v6;
  std::string *v7;
  const void *v8;
  char v9;
  std::string v10[2];

  v3 = result;
  if (a2 == result)
  {
    sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1415);
    v4 = sub_1B0305340(v10, "CHECK failed: (&other) != (this): ");
    sub_1B0305470((uint64_t)&v9, (const char **)&v4->__r_.__value_.__l.__data_);
    result = (int *)sub_1B0305478((uint64_t)v10);
  }
  if (*a2)
  {
    v5 = *v3;
    sub_1B031636C(v3, *v3 + *a2);
    sub_1B0316524((uint64_t)v3, *a2);
    v6 = (void *)sub_1B03165E0(v3, v5);
    if (*a2 <= 0)
    {
      sub_1B0305328((uint64_t)v10, 3, (uint64_t)"/Library/Caches/com.apple.xbs/Sources/SentencePiece/third_party/protobuf-lite/google/protobuf/repeated_field.h", 1302);
      v7 = sub_1B0305340(v10, "CHECK failed: (index) < (current_size_): ");
      sub_1B0305470((uint64_t)&v9, (const char **)&v7->__r_.__value_.__l.__data_);
      sub_1B0305478((uint64_t)v10);
    }
    v8 = (const void *)sub_1B03167E0((uint64_t)a2);
    return (int *)memcpy(v6, v8, 8 * *a2);
  }
  return result;
}

void sub_1B0316974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B0305478((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0316994(uint64_t *a1)
{
  sub_1B03169BC(a1);
  return sub_1B02F74B0(a1);
}

void sub_1B03169BC(_QWORD *a1)
{
  unsigned int *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v2 = (unsigned int *)a1[2];
  if (v2 && !*a1)
  {
    v3 = (uint64_t *)(v2 + 2);
    v4 = *v2;
    if ((int)v4 >= 1)
    {
      do
      {
        v5 = *v3;
        if (*v3)
        {
          if (*(char *)(v5 + 23) < 0)
            operator delete(*(void **)v5);
          MEMORY[0x1B5E07CD8](v5, 0x1012C40EC159624);
        }
        ++v3;
        --v4;
      }
      while (v4);
      v2 = (unsigned int *)a1[2];
    }
    operator delete(v2);
  }
  a1[2] = 0;
}

uint64_t sub_1B0316A4C(uint64_t result, int a2)
{
  int v2;
  BOOL v3;
  int v4;

  v2 = *(_DWORD *)(result + 8);
  v3 = __OFSUB__(a2, v2);
  v4 = a2 - v2;
  if (!((v4 < 0) ^ v3 | (v4 == 0)))
    return sub_1B0316A60((uint64_t *)result, v4);
  return result;
}

uint64_t sub_1B0316A60(uint64_t *a1, int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int *v5;
  uint64_t v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int *v12;
  uint64_t v13;

  v2 = *((_DWORD *)a1 + 2);
  v3 = *((_DWORD *)a1 + 3);
  v4 = v2 + a2;
  v5 = (unsigned int *)a1[2];
  if (v3 < v2 + a2)
  {
    v7 = *a1;
    v8 = 2 * v3;
    if (2 * v3 <= v4)
      v8 = v4;
    if (v8 <= 4)
      v9 = 4;
    else
      v9 = v8;
    v10 = 8 * v9;
    if (v7)
    {
      v11 = (v10 + 15) & 0x7FFFFFFF8;
      if ((*(_BYTE *)(v7 + 24) & 1) != 0)
        (*(void (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(v7 + 32) + 32) + 40))(*(_QWORD *)(*(_QWORD *)(v7 + 32) + 32), MEMORY[0x1E0DE4EC8], v11);
      v12 = (unsigned int *)sub_1B0303E20(v7, v11);
    }
    else
    {
      v12 = (unsigned int *)operator new(v10 + 8);
    }
    a1[2] = (uint64_t)v12;
    *((_DWORD *)a1 + 3) = v9;
    if (v5 && (v13 = *v5, (int)v13 >= 1))
    {
      memcpy(v12 + 2, v5 + 2, 8 * v13);
      v12 = (unsigned int *)a1[2];
      *v12 = *v5;
      if (!v7)
        goto LABEL_17;
    }
    else
    {
      *v12 = 0;
      if (!v7)
      {
LABEL_17:
        operator delete(v5);
        v12 = (unsigned int *)a1[2];
      }
    }
    v2 = *((_DWORD *)a1 + 2);
    v5 = v12;
  }
  return (uint64_t)&v5[2 * v2 + 2];
}

uint64_t sub_1B0316B70(uint64_t a1, _DWORD *a2, unint64_t a3)
{
  uint64_t *v6;
  _DWORD *v8;

  *(_QWORD *)a1 = &off_1E60CBF90;
  *(_QWORD *)(a1 + 16) = &off_1E60CC3D8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = &off_1E60CC3D8;
  *(_DWORD *)(a1 + 40) = 0;
  v6 = (uint64_t *)(a1 + 88);
  sub_1B0303128((_QWORD *)(a1 + 88));
  sub_1B0316C24(a1, a2, a3, (uint64_t *)&v8);
  sub_1B0303344(v6, &v8);
  sub_1B0303130((uint64_t *)&v8);
  return a1;
}

void sub_1B0316C00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t *v2;
  va_list va;

  va_start(va, a2);
  sub_1B0303130((uint64_t *)va);
  sub_1B0303130(v2);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0316C24@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  _QWORD *result;
  int v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  int v11;
  int v12;
  _DWORD *v13;
  unint64_t v14;

  v13 = a2;
  v14 = a3;
  v12 = 0;
  result = sub_1B02D4250(a2, a3, &v12, a4);
  if (!*a4)
  {
    sub_1B0303130(a4);
    result = sub_1B03017B0(&v13, 4uLL, a4);
    if (!*a4)
    {
      sub_1B0303130(a4);
      *(_DWORD *)(a1 + 8) = v12;
      v11 = 0;
      result = sub_1B02D4250(v13, v14, &v11, a4);
      if (!*a4)
      {
        sub_1B0303130(a4);
        result = sub_1B03017B0(&v13, 4uLL, a4);
        if (!*a4)
        {
          sub_1B0303130(a4);
          *(_DWORD *)(a1 + 24) = v11;
          v10 = 0;
          result = sub_1B02D4250(v13, v14, &v10, a4);
          if (!*a4)
          {
            sub_1B0303130(a4);
            result = sub_1B03017B0(&v13, 4uLL, a4);
            if (!*a4)
            {
              sub_1B0303130(a4);
              v7 = v10;
              *(_DWORD *)(a1 + 48) = 0;
              *(_DWORD *)(a1 + 40) = v7;
              result = sub_1B02D40E4(v13, v14, (_DWORD *)(a1 + 48), a4);
              if (!*a4)
              {
                sub_1B0303130(a4);
                result = sub_1B03017B0(&v13, 4uLL, a4);
                if (!*a4)
                {
                  sub_1B0303130(a4);
                  *(_QWORD *)(a1 + 56) = v13;
                  v8 = sub_1B030172C(*(int *)(a1 + 48), 4uLL);
                  result = sub_1B03017B0(&v13, v8, a4);
                  if (!*a4)
                  {
                    sub_1B0303130(a4);
                    *(_QWORD *)(a1 + 64) = v13;
                    result = sub_1B03017B0(&v13, 4 * *(int *)(a1 + 48), a4);
                    if (!*a4)
                    {
                      sub_1B0303130(a4);
                      *(_QWORD *)(a1 + 72) = v13;
                      result = sub_1B03017B0(&v13, 4 * *(int *)(a1 + 48) + 20, a4);
                      if (!*a4)
                      {
                        v9 = sub_1B0303130(a4);
                        *(_QWORD *)(a1 + 80) = v13;
                        return sub_1B0303128(v9);
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void sub_1B0316E20()
{
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0316E34(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_1B0316E40(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_1B0316E4C(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 2) & 1;
}

uint64_t sub_1B0316E58(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 3) & 1;
}

_QWORD *sub_1B0316E64(_QWORD *a1)
{
  *a1 = &off_1E60CBF90;
  sub_1B0303130(a1 + 11);
  return a1;
}

void sub_1B0316E94(_QWORD *a1)
{
  *a1 = &off_1E60CBF90;
  sub_1B0303130(a1 + 11);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0316ED4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

const char *sub_1B0316EDC(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + **(unsigned int **)(a1 + 72));
  strlen(v1);
  return v1;
}

const char *sub_1B0316F10(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4));
  strlen(v1);
  return v1;
}

const char *sub_1B0316F44(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 8));
  strlen(v1);
  return v1;
}

const char *sub_1B0316F78(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 12));
  strlen(v1);
  return v1;
}

const char *sub_1B0316FAC(uint64_t a1)
{
  const char *v1;

  v1 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 16));
  strlen(v1);
  return v1;
}

uint64_t sub_1B0316FE0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) & 1;
}

uint64_t sub_1B0316FEC(uint64_t a1)
{
  return (*(unsigned __int8 *)(a1 + 8) >> 1) & 1;
}

uint64_t sub_1B0316FF8(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) >> 30;
}

const char *sub_1B0317004(uint64_t a1, int a2)
{
  const char *v2;

  v2 = (const char *)(*(_QWORD *)(a1 + 80) + *(unsigned int *)(*(_QWORD *)(a1 + 72) + 4 * (a2 + 5)));
  strlen(v2);
  return v2;
}

float sub_1B031703C(uint64_t a1, int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 64) + 4 * a2);
}

BOOL sub_1B0317048(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 1;
}

BOOL sub_1B031705C(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 2;
}

BOOL sub_1B0317070(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 3;
}

BOOL sub_1B0317084(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 4;
}

BOOL sub_1B0317098(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 5;
}

BOOL sub_1B03170AC(uint64_t a1, int a2)
{
  return *(_BYTE *)(*(_QWORD *)(a1 + 56) + a2) == 6;
}

uint64_t sub_1B03170C0(uint64_t a1)
{
  return a1 + 16;
}

uint64_t sub_1B03170C8(uint64_t a1)
{
  return a1 + 32;
}

void sub_1B03170D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::locale::id *v4;
  __int128 v5;
  _QWORD *v6;
  const std::locale::facet *v7;
  unsigned __int8 v8;
  _QWORD *v9;
  unint64_t v10;
  void *__p[2];
  uint64_t v12;
  std::locale v13;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  v4 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (1)
  {
    v6 = *(_QWORD **)(a1 + 32);
    std::ios_base::getloc((const std::ios_base *)((char *)v6 + *(_QWORD *)(*v6 - 24)));
    v7 = std::locale::use_facet(&v13, v4);
    v8 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
    std::locale::~locale(&v13);
    v9 = sub_1B0300F7C(v6, (uint64_t)__p, v8);
    if ((*((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 32) & 5) != 0)
      break;
    v10 = *(_QWORD *)(a2 + 8);
    if (v10 < *(_QWORD *)(a2 + 16))
    {
      if (SHIBYTE(v12) < 0)
      {
        sub_1B02EB0A8(*(_BYTE **)(a2 + 8), __p[0], (unint64_t)__p[1]);
      }
      else
      {
        v5 = *(_OWORD *)__p;
        *(_QWORD *)(v10 + 16) = v12;
        *(_OWORD *)v10 = v5;
      }
      *(_QWORD *)(a2 + 8) = v10 + 24;
      *(_QWORD *)(a2 + 8) = v10 + 24;
    }
    else
    {
      *(_QWORD *)(a2 + 8) = sub_1B03179B4((char **)a2, (uint64_t)__p);
    }
  }
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_1B031720C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  uint64_t v15;
  uint64_t v16;

  *(_QWORD *)(v15 + 8) = v16;
  if (a14 < 0)
    operator delete(__p);
  sub_1B031724C((void **)v15);
  _Unwind_Resume(a1);
}

void **sub_1B031724C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B03172BC(uint64_t a1)
{
  std::ios_base::clear((std::ios_base *)(*(_QWORD *)(a1 + 32) + *(_QWORD *)(**(_QWORD **)(a1 + 32) - 24)), 0);
  return std::istream::seekg();
}

uint64_t sub_1B03172FC(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1B031733C(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1B031737C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_1E60CCEC0;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1B03173E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = &unk_1E60CCEC0;
  v2 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E07CD8);
}

BOOL sub_1B031744C(uint64_t a1)
{
  _OWORD *v2;
  _BOOL8 v3;
  int v4;
  std::__fs::filesystem::path v6;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v8;

  v2 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1B02EB0A8(&__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *v2;
    __p.__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
  }
  v8 = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&v8, 0);
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    v3 = 0;
    v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
    if (!v6.__pn_.__r_.__value_.__s.__data_[0])
      return v3;
    goto LABEL_10;
  }
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_6:
  v3 = 0;
  v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
  if (!v6.__pn_.__r_.__value_.__s.__data_[0])
    return v3;
LABEL_10:
  if (v4 == 255)
    return v3;
  if (*(char *)(a1 + 31) < 0)
    sub_1B02EB0A8(&v6, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v6 = *(std::__fs::filesystem::path *)v2;
  __p = v6;
  memset(&v6, 0, sizeof(v6));
  std::__fs::filesystem::__canonical(&v8, &__p, 0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v6.__pn_.__r_.__value_.__l.__data_);
LABEL_16:
  std::__fs::filesystem::__status(&v8, 0);
  v3 = __p.__pn_.__r_.__value_.__s.__data_[0] == 1;
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v3;
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1B03175DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0317640()
{
  return std::istream::tellg();
}

void sub_1B0317650(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E07CD8);
}

BOOL sub_1B0317690(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v5;
  unsigned __int8 v6;

  if (*(char *)(a1 + 31) < 0)
    sub_1B02EB0A8(&__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    __p = *(std::__fs::filesystem::path *)(a1 + 8);
  v5 = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&v5, 0);
  v1 = v6;
  if (SHIBYTE(v5.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v5.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
  }
  else if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(__p.__pn_.__r_.__value_.__l.__data_);
LABEL_6:
  if (v1)
    v2 = v1 == 255;
  else
    v2 = 1;
  return !v2;
}

void sub_1B0317744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

void sub_1B0317780(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E07CD8);
}

BOOL sub_1B03177C0(uint64_t a1)
{
  _OWORD *v2;
  _BOOL8 v3;
  int v4;
  std::__fs::filesystem::path v6;
  std::__fs::filesystem::path __p;
  std::__fs::filesystem::path v8;

  v2 = (_OWORD *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    sub_1B02EB0A8(&__p, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_ = *v2;
    __p.__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
  }
  v8 = __p;
  memset(&__p, 0, sizeof(__p));
  std::__fs::filesystem::__status(&v8, 0);
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_6;
LABEL_9:
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    v3 = 0;
    v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
    if (!v6.__pn_.__r_.__value_.__s.__data_[0])
      return v3;
    goto LABEL_10;
  }
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_9;
LABEL_6:
  v3 = 0;
  v4 = v6.__pn_.__r_.__value_.__s.__data_[0];
  if (!v6.__pn_.__r_.__value_.__s.__data_[0])
    return v3;
LABEL_10:
  if (v4 == 255)
    return v3;
  if (*(char *)(a1 + 31) < 0)
    sub_1B02EB0A8(&v6, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v6 = *(std::__fs::filesystem::path *)v2;
  __p = v6;
  memset(&v6, 0, sizeof(v6));
  std::__fs::filesystem::__canonical(&v8, &__p, 0);
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__pn_.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
  }
  else if ((SHIBYTE(v6.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_16;
  }
  operator delete(v6.__pn_.__r_.__value_.__l.__data_);
LABEL_16:
  std::__fs::filesystem::__status(&v8, 0);
  v3 = __p.__pn_.__r_.__value_.__s.__data_[0] == 2;
  if ((SHIBYTE(v8.__pn_.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return v3;
  operator delete(v8.__pn_.__r_.__value_.__l.__data_);
  return v3;
}

void sub_1B0317950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *sub_1B03179B4(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D7758();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1B02D72AC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1B0317B74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0317B88((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0317B88(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v5;

  v3 = *(void ***)(a1 + 8);
  v2 = *(void ***)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 3;
      *(_QWORD *)(a1 + 16) = v2 - 3;
      if (*((char *)v2 - 1) < 0)
      {
        operator delete(*v5);
        v5 = *(void ***)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1B0317BEC(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  void *__p[2];
  uint64_t v7;

  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B02EB0A8(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v7 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = (char *)HIBYTE(v7);
  if (v7 >= 0)
    v4 = (char *)__p;
  else
    v4 = (char *)__p[0];
  if (v7 < 0)
    v3 = (char *)__p[1];
  sub_1B02ECD44((std::string *)(a1 + 8), v4, &v3[(_QWORD)v4]);
  *(_QWORD *)a1 = &unk_1E60CCEF8;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E60CCF80;
  return a1;
}

void sub_1B0317CB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 31) < 0)
  {
    operator delete(*v15);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

id sub_1B0317CEC(int a1)
{
  if (qword_1EEEB2D28 == -1)
    return (id)qword_1EEEB2CF8[a1];
  dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
  return (id)qword_1EEEB2CF8[a1];
}

void sub_1B0317D50()
{
  os_log_t v0;
  void *v1;
  os_log_t v2;
  void *v3;
  os_log_t v4;
  void *v5;
  os_log_t v6;
  void *v7;
  os_log_t v8;
  void *v9;
  os_log_t v10;
  void *v11;

  v0 = os_log_create("com.apple.cvnlp", "General");
  v1 = (void *)qword_1EEEB2CF8;
  qword_1EEEB2CF8 = (uint64_t)v0;

  v2 = os_log_create("com.apple.cvnlp", "TextDecoder");
  v3 = (void *)qword_1EEEB2D00;
  qword_1EEEB2D00 = (uint64_t)v2;

  v4 = os_log_create("com.apple.cvnlp", "CTCTextDecoder");
  v5 = (void *)qword_1EEEB2D08;
  qword_1EEEB2D08 = (uint64_t)v4;

  v6 = os_log_create("com.apple.cvnlp", "CVNLPLanguageModel");
  v7 = (void *)qword_1EEEB2D10;
  qword_1EEEB2D10 = (uint64_t)v6;

  v8 = os_log_create("com.apple.cvnlp", "CVNLPCLIPModel");
  v9 = (void *)qword_1EEEB2D18;
  qword_1EEEB2D18 = (uint64_t)v8;

  v10 = os_log_create("com.apple.cvnlp", "CVNLPVideoCaptioningModel");
  v11 = (void *)qword_1EEEB2D20;
  qword_1EEEB2D20 = (uint64_t)v10;

}

void sub_1B0317E20()
{
  JUMPOUT(0x1B5E07CD8);
}

_QWORD *sub_1B0317E34(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E60CD168;
  result[1] = v3;
  return result;
}

uint64_t sub_1B0317E6C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E60CD168;
  a2[1] = v2;
  return result;
}

uint64_t sub_1B0317E8C(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a2;
  v4 = *(_DWORD **)(a1 + 8);
  v5 = 2;
  if (*v4)
  {
    v6 = *a3;
  }
  else
  {
    v5 = 4;
    v6 = *a2;
  }
  if (!*v4)
    v3 = *a3;
  return v3 + v6 * *(_QWORD *)&v4[v5];
}

uint64_t sub_1B0317EC0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B03AFDA7)
    return a1 + 8;
  if (((v3 & 0x80000001B03AFDA7 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B03AFDA7))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B03AFDA7 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 8;
  return 0;
}

void *sub_1B0317F3C()
{
  return &unk_1E60CB8F0;
}

_QWORD *sub_1B0317F48@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *result;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD v39[3];
  _QWORD *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[3];
  uint64_t *v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v49[3];
  _QWORD *v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[3];
  _QWORD *v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v43 = *a1;
  v7 = v44;
  v9 = a1 + 4;
  v8 = (uint64_t *)a1[4];
  if (v8)
  {
    if (v8 == a1 + 1)
    {
      v45 = v44;
      (*(void (**)(uint64_t *, _QWORD *))(*v8 + 24))(v8, v44);
      v6 = v43;
    }
    else
    {
      v45 = v8;
      *v9 = 0;
    }
  }
  else
  {
    v45 = 0;
  }
  v46 = *(_OWORD *)(a1 + 5);
  v47 = a1[7];
  v53 = v6;
  v10 = v54;
  if (!v45)
  {
    v56 = *(_OWORD *)(a1 + 5);
    v12 = a1[7];
    v55 = 0;
    v57 = v12;
    v48 = v6;
LABEL_14:
    v13 = &v48;
    goto LABEL_15;
  }
  if (v45 == v44)
  {
    v55 = v54;
    (*(void (**)(_QWORD *, _QWORD *))(v44[0] + 24))(v44, v54);
    v11 = v55;
  }
  else
  {
    v11 = (_QWORD *)(*(uint64_t (**)(void))(*v45 + 16))();
    v55 = v11;
  }
  v13 = &v53;
  v56 = v46;
  v57 = v47;
  v48 = v53;
  if (!v11)
    goto LABEL_14;
  if (v11 != v54)
  {
    v50 = v11;
LABEL_15:
    v13[4] = 0;
    goto LABEL_16;
  }
  v50 = v49;
  (*(void (**)(_QWORD *))(v54[0] + 24))(v54);
LABEL_16:
  v52 = v57;
  v51 = v56;
  if (v55 == v54)
  {
    v14 = 4;
  }
  else
  {
    if (!v55)
      goto LABEL_21;
    v14 = 5;
    v10 = v55;
  }
  (*(void (**)(_QWORD *))(*v10 + 8 * v14))(v10);
LABEL_21:
  v15 = *a2;
  v33 = *a2;
  v16 = v34;
  v17 = (uint64_t *)a2[4];
  if (v17)
  {
    if (v17 == a2 + 1)
    {
      v35 = v34;
      (*(void (**)(uint64_t *, _QWORD *))(*v17 + 24))(v17, v34);
      v15 = v33;
    }
    else
    {
      v35 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v35 = 0;
  }
  v36 = *(_OWORD *)(a2 + 5);
  v37 = a2[7];
  v53 = v15;
  v18 = v54;
  if (!v35)
  {
    v56 = *(_OWORD *)(a2 + 5);
    v20 = a2[7];
    v55 = 0;
    v57 = v20;
    v38 = v15;
LABEL_34:
    v21 = &v38;
    goto LABEL_35;
  }
  if (v35 == v34)
  {
    v55 = v54;
    (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v54);
    v19 = v55;
  }
  else
  {
    v19 = (_QWORD *)(*(uint64_t (**)(void))(*v35 + 16))();
    v55 = v19;
  }
  v21 = &v53;
  v56 = v36;
  v57 = v37;
  v38 = v53;
  if (!v19)
    goto LABEL_34;
  if (v19 != v54)
  {
    v40 = v19;
LABEL_35:
    v21[4] = 0;
    goto LABEL_36;
  }
  v40 = v39;
  (*(void (**)(_QWORD *))(v54[0] + 24))(v54);
LABEL_36:
  v42 = v57;
  v41 = v56;
  if (v55 == v54)
  {
    v22 = 4;
  }
  else
  {
    if (!v55)
      goto LABEL_41;
    v22 = 5;
    v18 = v55;
  }
  (*(void (**)(_QWORD *))(*v18 + 8 * v22))(v18);
LABEL_41:
  v23 = v50;
  *(_QWORD *)a3 = v48;
  v24 = a3 + 8;
  if (v23)
  {
    if (v23 == v49)
    {
      *(_QWORD *)(a3 + 32) = v24;
      (*(void (**)(void))(v49[0] + 24))();
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v23;
      v50 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
  }
  *(_OWORD *)(a3 + 40) = v51;
  v25 = v38;
  v26 = v40;
  *(_QWORD *)(a3 + 56) = v52;
  *(_QWORD *)(a3 + 64) = v25;
  if (v26)
  {
    if (v26 == v39)
    {
      *(_QWORD *)(a3 + 96) = a3 + 72;
      (*(void (**)(void))(v39[0] + 24))();
    }
    else
    {
      *(_QWORD *)(a3 + 96) = v26;
      v40 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 96) = 0;
  }
  *(_OWORD *)(a3 + 104) = v41;
  *(_QWORD *)(a3 + 120) = v42;
  v27 = v40;
  if (v40 == v39)
  {
    v28 = 4;
    v27 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_56;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_56:
  if (v35 == v34)
  {
    v29 = 4;
  }
  else
  {
    if (!v35)
      goto LABEL_61;
    v29 = 5;
    v16 = v35;
  }
  (*(void (**)(_QWORD *, uint64_t))(*v16 + 8 * v29))(v16, v24);
LABEL_61:
  result = v50;
  if (v50 == v49)
  {
    v31 = 4;
    result = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_66;
    v31 = 5;
  }
  result = (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v31))();
LABEL_66:
  if (v45 == v44)
  {
    v32 = 4;
  }
  else
  {
    if (!v45)
      return result;
    v32 = 5;
    v7 = v45;
  }
  return (_QWORD *)(*(uint64_t (**)(uint64_t *, uint64_t))(*v7 + 8 * v32))(v7, v24);
}

void sub_1B0318434(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1B0303828(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0318474@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v6;
  _BYTE *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[24];
  _BYTE *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE v20[24];
  _BYTE *v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;

  v24 = *MEMORY[0x1E0C80C00];
  v19 = *(_QWORD *)a1;
  v6 = v20;
  v8 = (_QWORD *)(a1 + 32);
  v7 = *(_BYTE **)(a1 + 32);
  if (v7)
  {
    if (v7 == (_BYTE *)(a1 + 8))
    {
      v21 = v20;
      (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)v7 + 24))(v7, v20);
    }
    else
    {
      v21 = v7;
      *v8 = 0;
    }
  }
  else
  {
    v21 = 0;
  }
  v22 = *(_OWORD *)(a1 + 40);
  v23 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)a2;
  v9 = v15;
  v10 = *(_QWORD *)(a2 + 32);
  if (v10)
  {
    if (v10 == a2 + 8)
    {
      v16 = v15;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v10 + 24))(v10, v15);
    }
    else
    {
      v16 = *(_BYTE **)(a2 + 32);
      *(_QWORD *)(a2 + 32) = 0;
    }
  }
  else
  {
    v16 = 0;
  }
  v17 = *(_OWORD *)(a2 + 40);
  v18 = *(_QWORD *)(a2 + 56);
  result = sub_1B031869C(&v19, &v14, a3);
  if (v16 == v15)
  {
    v12 = 4;
  }
  else
  {
    if (!v16)
      goto LABEL_16;
    v12 = 5;
    v9 = v16;
  }
  result = (*(uint64_t (**)(_QWORD *))(*v9 + 8 * v12))(v9);
LABEL_16:
  if (v21 == v20)
  {
    v13 = 4;
  }
  else
  {
    if (!v21)
      return result;
    v13 = 5;
    v6 = v21;
  }
  return (*(uint64_t (**)(_QWORD *))(*v6 + 8 * v13))(v6);
}

void sub_1B031860C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1B0303828(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B031861C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = a1 + 9;
  v3 = (_QWORD *)a1[12];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = (_QWORD *)a1[4];
  if (v5 == a1 + 1)
  {
    v6 = 4;
    v5 = a1 + 1;
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*v5 + 8 * v6))();
  }
  return a1;
}

uint64_t sub_1B031869C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[3];
  _QWORD *v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[24];
  uint64_t *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v20 = *a1;
  v6 = (uint64_t *)v21;
  v8 = a1 + 4;
  v7 = (uint64_t *)a1[4];
  if (v7)
  {
    if (v7 == a1 + 1)
    {
      v22 = (uint64_t *)v21;
      (*(void (**)(uint64_t *, _BYTE *))(*v7 + 24))(v7, v21);
    }
    else
    {
      v22 = v7;
      *v8 = 0;
    }
  }
  else
  {
    v22 = 0;
  }
  v23 = *(_OWORD *)(a1 + 5);
  v24 = a1[7];
  v9 = *a2;
  v15 = *a2;
  v10 = v16;
  result = a2[4];
  if (result)
  {
    if ((uint64_t *)result == a2 + 1)
    {
      v17 = v16;
      result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)result + 24))(result, v16);
      v9 = v15;
    }
    else
    {
      v17 = (_QWORD *)a2[4];
      a2[4] = 0;
    }
  }
  else
  {
    v17 = 0;
  }
  v18 = *(_OWORD *)(a2 + 5);
  v19 = a2[7];
  *(_QWORD *)a3 = v9;
  v12 = a3 + 8;
  if (v17)
  {
    if (v17 == v16)
    {
      *(_QWORD *)(a3 + 32) = v12;
      result = (*(uint64_t (**)(_QWORD *))(v16[0] + 24))(v16);
    }
    else
    {
      *(_QWORD *)(a3 + 32) = v17;
      v17 = 0;
    }
  }
  else
  {
    *(_QWORD *)(a3 + 32) = 0;
  }
  *(_OWORD *)(a3 + 40) = v18;
  *(_QWORD *)(a3 + 56) = v19;
  if (v17 == v16)
  {
    v13 = 4;
  }
  else
  {
    if (!v17)
      goto LABEL_21;
    v13 = 5;
    v10 = v17;
  }
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v10 + 8 * v13))(v10, v12);
LABEL_21:
  if (v22 == (uint64_t *)v21)
  {
    v14 = 4;
  }
  else
  {
    if (!v22)
      return result;
    v14 = 5;
    v6 = v22;
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(*v6 + 8 * v14))(v6, v12);
}

void sub_1B0318890(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1B0303828(a1);
  _Unwind_Resume(a1);
}

void sub_1B03188A8(uint64_t a1@<X0>, unint64_t a2@<X1>, char *a3@<X2>, int64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v9;
  char *v10;
  __int128 v11;
  unint64_t v12;
  std::string::value_type *v13;
  int64_t v14;
  char *v15;
  int v16;
  void *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  std::string v25;

  *(_QWORD *)a5 = 0;
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  if (a4)
  {
    v9 = 0;
    v10 = (char *)(a1 + a2);
    do
    {
      v12 = a2 - v9;
      if (a2 <= v9)
        break;
      v13 = (std::string::value_type *)(a1 + v9);
      v14 = (int64_t)&v10[-a1 - v9];
      v15 = v10;
      if (v14 >= a4)
      {
        v16 = *a3;
        v17 = (void *)(a1 + v9);
        do
        {
          v18 = v14 - a4;
          if (v18 == -1)
            break;
          v19 = (char *)memchr(v17, v16, v18 + 1);
          if (!v19)
            break;
          v15 = v19;
          if (!memcmp(v19, a3, a4))
            goto LABEL_13;
          v17 = v15 + 1;
          v14 = v10 - (v15 + 1);
        }
        while (v14 >= a4);
        v15 = v10;
      }
LABEL_13:
      if (v15 == v10)
        v20 = -1;
      else
        v20 = (uint64_t)&v15[-a1];
      if (v20 != v9)
      {
        if (v12 >= v20 - v9)
          v12 = v20 - v9;
        memset(&v25, 0, sizeof(v25));
        for (; v12; --v12)
          std::string::push_back(&v25, *v13++);
        v21 = *(_QWORD *)(a5 + 8);
        if (v21 < *(_QWORD *)(a5 + 16))
        {
          v11 = *(_OWORD *)&v25.__r_.__value_.__l.__data_;
          *(_QWORD *)(v21 + 16) = *((_QWORD *)&v25.__r_.__value_.__l + 2);
          *(_OWORD *)v21 = v11;
          *(_QWORD *)(a5 + 8) = v21 + 24;
        }
        else
        {
          v22 = sub_1B0318CBC((void **)a5, (uint64_t)&v25);
          v23 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
          *(_QWORD *)(a5 + 8) = v22;
          if (v23 < 0)
            operator delete(v25.__r_.__value_.__l.__data_);
        }
      }
      v9 = v20 + 1;
    }
    while (v20 != -1);
  }
}

void sub_1B0318A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  sub_1B031724C(v15);
  _Unwind_Resume(a1);
}

void sub_1B0318A34(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v6;
  int v7;
  int64_t v8;
  uint64_t v9;
  char *v10;
  std::locale v11;
  std::locale v12;
  std::locale v13;

  MEMORY[0x1B5E07C24](&v11);
  LODWORD(v12.__locale_) = 0x4000;
  std::locale::locale(&v13, &v11);
  sub_1B0318E10((std::string *)a1, &v12);
  std::locale::~locale(&v13);
  std::locale::~locale(&v11);
  if (*(char *)(a1 + 23) < 0)
  {
    v9 = a1;
    a1 = *(_QWORD *)a1;
    v6 = *(_QWORD *)(v9 + 8);
    v7 = a2[23];
    if ((v7 & 0x80000000) == 0)
      goto LABEL_3;
LABEL_5:
    v10 = a2;
    a2 = *(char **)a2;
    v8 = *((_QWORD *)v10 + 1);
    goto LABEL_6;
  }
  v6 = *(unsigned __int8 *)(a1 + 23);
  v7 = a2[23];
  if (v7 < 0)
    goto LABEL_5;
LABEL_3:
  v8 = v7;
LABEL_6:
  sub_1B03188A8(a1, v6, a2, v8, a3);
}

void sub_1B0318AE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
  std::locale *v10;

  std::locale::~locale(v10);
  std::locale::~locale(&a10);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0318B00(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  char *v9;
  __int128 *v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >= 0xAAAAAAAAAAAAAABLL)
      sub_1B02D7758();
    v5 = 24 * a3;
    v6 = (char *)operator new(24 * a3);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    do
    {
      v9 = &v6[v7];
      v10 = (__int128 *)(a2 + v7);
      if (*(char *)(a2 + v7 + 23) < 0)
      {
        sub_1B02EB0A8(v9, *(void **)v10, *((_QWORD *)v10 + 1));
      }
      else
      {
        v8 = *v10;
        *((_QWORD *)v9 + 2) = *((_QWORD *)v10 + 2);
        *(_OWORD *)v9 = v8;
      }
      v7 += 24;
    }
    while (v5 != v7);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1B0318BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1B0318C28(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0318BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_1B0318C28(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B0318C28(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 3;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

char *sub_1B0318CBC(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  void **v11;
  void **v12;
  __int128 v13;
  void **v14;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D7758();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_1B02D72AC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v9 = &v7[24 * v6];
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v10 = v8 + 24;
  v11 = (void **)*a1;
  v12 = (void **)a1[1];
  if (v12 == *a1)
  {
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
  }
  else
  {
    do
    {
      v13 = *(_OWORD *)(v12 - 3);
      *((_QWORD *)v8 - 1) = *(v12 - 1);
      *(_OWORD *)(v8 - 24) = v13;
      v8 -= 24;
      *(v12 - 2) = 0;
      *(v12 - 1) = 0;
      *(v12 - 3) = 0;
      v12 -= 3;
    }
    while (v12 != v11);
    v12 = (void **)*a1;
    v14 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v10;
    a1[2] = v9;
    while (v14 != v12)
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
  }
  if (v12)
    operator delete(v12);
  return v10;
}

void sub_1B0318E10(std::string *a1, std::locale *a2)
{
  const std::locale *v3;
  int v4;
  std::string *v5;
  std::string::size_type size;
  std::string *v7;
  std::locale::id *v8;
  std::string::size_type v9;
  uint64_t v10;
  const std::locale::facet *v11;
  int v12;
  std::string::size_type v13;
  std::string *v14;
  int v15;
  std::string *v16;
  std::string::size_type v17;
  unsigned __int8 *v18;
  std::locale::id *v19;
  std::string *v20;
  uint64_t v21;
  const std::locale::facet *v22;
  std::string::size_type v23;
  int v25;
  std::locale v26;
  int locale;
  std::locale v28;
  int v29;
  std::locale v30;
  int v31;
  std::locale v32;

  v3 = a2 + 1;
  locale = (int)a2->__locale_;
  std::locale::locale(&v28, a2 + 1);
  v4 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    v5 = a1;
  else
    v5 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v4 >= 0)
    size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    size = a1->__r_.__value_.__l.__size_;
  v7 = (std::string *)((char *)v5 + size);
  v29 = locale;
  std::locale::locale(&v30, &v28);
  v31 = v29;
  std::locale::locale(&v32, &v30);
  v8 = (std::locale::id *)MEMORY[0x1E0DE4A90];
  while (size)
  {
    v9 = size;
    v10 = v5->__r_.__value_.__s.__data_[size - 1];
    v11 = std::locale::use_facet(&v32, v8);
    if ((v10 & 0x80) != 0)
    {
      v5 = v7;
      break;
    }
    v7 = (std::string *)((char *)v7 - 1);
    v12 = *((_DWORD *)&v11[1].~facet + v10);
    size = v9 - 1;
    if ((v12 & v31) == 0)
    {
      v5 = (std::string *)((char *)v5 + v9);
      break;
    }
  }
  std::locale::~locale(&v32);
  v13 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((v13 & 0x80u) == 0)
    v14 = a1;
  else
    v14 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if ((v13 & 0x80u) != 0)
    v13 = a1->__r_.__value_.__l.__size_;
  std::string::erase(a1, (char *)v5 - (char *)v14, (char *)v14 + v13 - (char *)v5);
  std::locale::~locale(&v30);
  std::locale::~locale(&v28);
  v25 = (int)a2->__locale_;
  std::locale::locale(&v26, v3);
  v15 = SHIBYTE(a1->__r_.__value_.__r.__words[2]);
  if (v15 >= 0)
    v16 = a1;
  else
    v16 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (v15 >= 0)
    v17 = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  else
    v17 = a1->__r_.__value_.__l.__size_;
  v31 = v25;
  std::locale::locale(&v32, &v26);
  if (v17)
  {
    v18 = (unsigned __int8 *)v16 + v17;
    v19 = (std::locale::id *)MEMORY[0x1E0DE4A90];
    v20 = v16;
    while (1)
    {
      v21 = v20->__r_.__value_.__s.__data_[0];
      v22 = std::locale::use_facet(&v32, v19);
      if ((v21 & 0x80) != 0 || (*((_DWORD *)&v22[1].~facet + v21) & v31) == 0)
        break;
      v20 = (std::string *)((char *)v20 + 1);
      if (!--v17)
      {
        v20 = (std::string *)v18;
        break;
      }
    }
  }
  else
  {
    v20 = v16;
  }
  if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = (std::string::size_type)a1;
  else
    v23 = a1->__r_.__value_.__r.__words[0];
  std::string::erase(a1, (std::string::size_type)v16 - v23, (char *)v20 - (char *)v16);
  std::locale::~locale(&v32);
  std::locale::~locale(&v26);
}

void sub_1B0319038(_Unwind_Exception *a1)
{
  std::locale *v1;
  std::locale *v2;

  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B031905C(_Unwind_Exception *a1)
{
  std::locale *v1;
  std::locale *v2;
  std::locale *v3;

  std::locale::~locale(v3);
  std::locale::~locale(v2);
  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

void sub_1B0319080(std::string *a1, uint64_t *a2, char *a3, char *a4, std::string *a5, _BYTE *a6, char *a7, char *a8)
{
  std::string *v8;
  std::string::size_type size;
  std::string *v10;
  std::string *v12;
  std::string *v13;
  std::string *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  _BOOL8 v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  char *v59;
  unint64_t v60;
  char *v61;
  unint64_t v62;
  char *v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  char *v79;
  uint64_t v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  int64_t v86;
  unint64_t v87;
  _BYTE *v88;
  unint64_t v89;
  char *v90;
  BOOL v91;
  int64_t v92;
  unint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  __int128 *v99;
  _OWORD *v100;
  uint64_t v101;
  __int128 v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  char *v107;
  char *v108;
  void *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  unint64_t v115;
  char *v116;
  char *v117;
  unint64_t v118;
  char *v119;
  int64_t v120;
  unint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  __int128 *v128;
  char *v129;
  uint64_t v130;
  __int128 v131;
  _QWORD *v132;
  uint64_t *v133;
  void *v134;
  char *v135;
  char *v136;
  unint64_t v137;
  char *v138;
  unint64_t v139;
  unint64_t v140;
  char *v141;
  char *v142;
  char *v143;
  char *v144;
  char *v145;
  char v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  char *v152;
  char *v153;
  unint64_t v154;
  char *v155;
  char *v156;
  unint64_t v157;
  int64_t v158;
  unint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  __int128 *v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  char *v176;
  unint64_t v177;
  char *v178;
  char *v179;
  unint64_t v180;
  int64_t v181;
  unint64_t v182;
  uint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  __int128 *v189;
  char *v190;
  uint64_t v191;
  __int128 v192;
  unint64_t v193;
  uint64_t v194;
  char *v195;
  char *v196;
  void **v197;
  char *v198;
  unint64_t v199;
  char *v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  size_t v205;
  uint64_t v206;
  char v207;
  uint64_t v208;
  char *v209;
  unint64_t v210;
  size_t v211;
  char *v212;
  char *v213;
  void **v214;
  char *v215;
  uint64_t v216;
  size_t v217;
  char *v218;
  char *v219;
  char *v220;
  void *v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  char *v226;
  unint64_t v227;
  char *v228;
  char *v229;
  unint64_t v230;
  char *v231;
  int64_t v232;
  unint64_t v233;
  uint64_t v234;
  char *v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  __int128 *v240;
  char *v241;
  uint64_t v242;
  __int128 v243;
  _QWORD *j;
  char *v245;
  void *v246;
  char *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  char *v251;
  char *v252;
  unint64_t v253;
  char *v254;
  char *v255;
  unint64_t v256;
  int64_t v257;
  unint64_t v258;
  uint64_t v259;
  char *v260;
  char *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  __int128 *v265;
  char *v266;
  uint64_t v267;
  __int128 v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  unint64_t v274;
  char *v275;
  char *v276;
  unint64_t v277;
  int64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  __int128 *v285;
  char *v286;
  uint64_t v287;
  __int128 v288;
  uint64_t v289;
  uint64_t v290;
  char *v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  char *v296;
  unint64_t v297;
  char *v298;
  unint64_t v299;
  char *v300;
  int64_t v301;
  unint64_t v302;
  char *v303;
  char *v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int128 *v308;
  char *v309;
  uint64_t v310;
  __int128 v311;
  uint64_t v312;
  uint64_t *v313;
  uint64_t v314;
  uint64_t v315;
  size_t v316;
  char *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  size_t v321;
  char *v322;
  uint64_t i;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  char *v327;
  char *v328;
  unint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char *v332;
  char *v333;
  char *v334;
  char *v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  void *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  int64_t v347;
  unint64_t v348;
  _BYTE *v349;
  unint64_t v350;
  char *v351;
  int64_t v352;
  unint64_t v353;
  char *v354;
  uint64_t v355;
  unint64_t v356;
  uint64_t v357;
  uint64_t v358;
  __int128 *v359;
  _OWORD *v360;
  uint64_t v361;
  __int128 v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  unint64_t v370;
  _BYTE *v371;
  uint64_t v372;
  char *v373;
  char *v374;
  _BYTE *v375;
  char *v376;
  size_t v377;
  _BYTE *v378;
  char *v379;
  char *v380;
  unint64_t v381;
  char *v382;
  size_t v383;
  _BYTE *v384;
  _BYTE *v385;
  _BYTE *v386;
  char *v387;
  char *v388;
  size_t v389;
  _BYTE *v390;
  char *v391;
  uint64_t v392;
  char *v393;
  size_t v394;
  uint64_t v395;
  char *v396;
  char *v397;
  uint64_t v398;
  char *v399;
  size_t v400;
  char *v401;
  uint64_t v402;
  _BYTE *v403;
  uint64_t v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _BYTE *v408;
  _BYTE *v409;
  int v410;
  std::string::size_type v411;
  char *v412;
  std::string::value_type *v413;
  char *v414;
  uint64_t v415;
  std::string::size_type v416;
  std::string::size_type v417;
  std::string::value_type *v418;
  std::string *v419;
  std::string::size_type v420;
  std::string::size_type v421;
  std::string::size_type v422;
  std::string *v423;
  size_t v424;
  std::string::size_type v425;
  std::string::value_type *v426;
  std::string *v427;
  unint64_t v428;
  std::string::size_type *v429;
  _OWORD *v430;
  unint64_t v431;
  __int128 v432;
  uint64_t *v433;
  _QWORD *v434;
  unint64_t v435;
  uint64_t v436;
  std::string::value_type v437;
  void **v438;
  void **v439;
  unint64_t v440;
  unint64_t v441;
  uint64_t v442;
  void *v443;
  unint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  unint64_t v452;
  std::string *v453;
  std::string *v454;
  unint64_t v455;
  char *v456;
  char *v457;
  void *__src[2];
  __int128 v459;
  int64x2_t v460;
  std::string v461;

  v8 = a1;
  v459 = 0u;
  v460 = 0u;
  *(_OWORD *)__src = 0u;
  size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0)
    v10 = a1;
  else
    v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
  if (a5 != a6)
  {
    v12 = a6;
    v13 = v10;
    v14 = v10;
    while (1)
    {
      v456 = a8;
      v454 = (std::string *)sub_1B031B22C((uint64_t)__src, v13, v14, (std::string *)a5);
      v15 = v460.i64[1];
      LOWORD(v16) = v460.i16[0];
      v17 = v460.i64[0] + v460.i64[1];
      v18 = (unint64_t)(v460.i64[0] + v460.i64[1]) >> 12;
      v20 = (char *)__src[1];
      v19 = (char *)v459;
      v21 = (char *)__src[1] + 8 * v18;
      v22 = v459 - (unint64_t)__src[1];
      if ((void *)v459 == __src[1])
        break;
      v23 = *(_QWORD *)v21 + (v17 & 0xFFF);
      v24 = (unint64_t)v460.i64[0] >> 12;
      v25 = (char *)__src[1] + 8 * ((unint64_t)v460.i64[0] >> 12);
      v26 = *(_QWORD *)v25 + (v460.i16[0] & 0xFFF);
      if (v23 == v26)
        goto LABEL_10;
      v27 = v23 + ((v21 - v25) << 9) - (v26 + *(_QWORD *)v21) + *(_QWORD *)v25;
LABEL_11:
      v28 = v456 - a7;
      v455 = v27;
      v457 = a7;
      v452 = v456 - a7;
      v453 = (std::string *)v12;
      if (v27 < v460.i64[1] - v27)
      {
        v29 = v28 - v460.i64[0];
        if (v28 > v460.i64[0])
        {
          v446 = v460.i64[0];
          v30 = (v22 << 9) - 1;
          if ((void *)v459 == __src[1])
          {
            v30 = 0;
            ++v29;
          }
          if ((v29 & 0xFFF) != 0)
            v31 = (v29 >> 12) + 1;
          else
            v31 = v29 >> 12;
          v32 = (unint64_t)(v30 - v17) >> 12;
          if (v31 >= v32)
            v33 = (unint64_t)(v30 - v17) >> 12;
          else
            v33 = v31;
          if (v31 <= v32)
          {
            v16 = v460.i64[0] + (v33 << 12);
            for (v460.i64[0] = v16; v33; --v33)
            {
              while (1)
              {
                v54 = (char *)(v459 - 8);
                v53 = *(_QWORD *)(v459 - 8);
                *(_QWORD *)&v459 = v459 - 8;
                if (v20 == __src[0])
                  break;
                *((_QWORD *)v20 - 1) = v53;
                v20 = (char *)__src[1] - 8;
                __src[1] = (char *)__src[1] - 8;
                if (!--v33)
                  goto LABEL_149;
              }
              if ((unint64_t)v54 >= *((_QWORD *)&v459 + 1))
              {
                if (*((char **)&v459 + 1) == v20)
                  v60 = 1;
                else
                  v60 = (uint64_t)(*((_QWORD *)&v459 + 1) - (_QWORD)v20) >> 2;
                if (v60 >> 61)
                  goto LABEL_613;
                v61 = (char *)operator new(8 * v60);
                v62 = (v60 + 3) >> 2;
                v59 = &v61[8 * v62];
                v63 = v59;
                v64 = v54 - v20;
                if (v54 != v20)
                {
                  v63 = &v59[v64 & 0xFFFFFFFFFFFFFFF8];
                  v65 = v64 - 8;
                  v66 = &v61[8 * v62];
                  v67 = v20;
                  if (v65 < 0x38)
                    goto LABEL_622;
                  v68 = 8 * v62;
                  v66 = &v61[8 * v62];
                  v67 = v20;
                  if ((unint64_t)(v66 - v20) < 0x20)
                    goto LABEL_622;
                  v69 = (v65 >> 3) + 1;
                  v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
                  v66 = &v59[v70];
                  v67 = &v20[v70];
                  v71 = (__int128 *)(v20 + 16);
                  v72 = &v61[v68 + 16];
                  v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v74 = *v71;
                    *((_OWORD *)v72 - 1) = *(v71 - 1);
                    *(_OWORD *)v72 = v74;
                    v71 += 2;
                    v72 += 32;
                    v73 -= 4;
                  }
                  while (v73);
                  if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_622:
                    do
                    {
                      v75 = *(_QWORD *)v67;
                      v67 += 8;
                      *(_QWORD *)v66 = v75;
                      v66 += 8;
                    }
                    while (v66 != v63);
                  }
                }
                __src[0] = v61;
                __src[1] = v59;
                *(_QWORD *)&v459 = v63;
                *((_QWORD *)&v459 + 1) = &v61[8 * v60];
                if (v20)
                  operator delete(v20);
              }
              else
              {
                v55 = (uint64_t)(*((_QWORD *)&v459 + 1) - (_QWORD)v54) >> 3;
                if (v55 >= -1)
                  v56 = v55 + 1;
                else
                  v56 = v55 + 2;
                v57 = v56 >> 1;
                v58 = &v54[8 * (v56 >> 1)];
                v59 = &v58[-(v54 - v20)];
                if (v54 != v20)
                {
                  memmove(&v58[-(v54 - v20)], v20, v54 - v20);
                  v20 = v54;
                }
                __src[1] = v59;
                *(_QWORD *)&v459 = &v20[8 * v57];
              }
              a7 = v457;
              *((_QWORD *)v59 - 1) = v53;
              v20 = (char *)__src[1] - 8;
              __src[1] = (char *)__src[1] - 8;
            }
          }
          else
          {
            v34 = v31 - v33;
            v35 = *((_QWORD *)&v459 + 1) - (unint64_t)__src[0];
            v36 = (uint64_t)(v459 - (unint64_t)__src[1]) >> 3;
            if (v31 - v33 > ((uint64_t)(*((_QWORD *)&v459 + 1) - (unint64_t)__src[0]) >> 3) - v36)
            {
              v37 = (void *)v459 == __src[1];
              v38 = v34 + v36;
              if (v35 >> 2 <= v38)
                v39 = v38;
              else
                v39 = v35 >> 2;
              if (v39)
              {
                if (v39 >> 61)
                  goto LABEL_613;
                v40 = (char *)operator new(8 * v39);
              }
              else
              {
                v40 = 0;
              }
              v444 = (v31 << 12) - v37;
              v107 = &v40[8 * v39];
              v20 = v40;
              v108 = v40;
              while (1)
              {
                v109 = operator new(0x1000uLL);
                if (v108 == v107)
                {
                  if (v20 <= v40)
                  {
                    if (v107 == v40)
                      v115 = 1;
                    else
                      v115 = (v107 - v40) >> 2;
                    if (v115 >> 61)
                      sub_1B02D72AC();
                    v116 = (char *)operator new(8 * v115);
                    v117 = v116;
                    v118 = v115 >> 2;
                    v119 = &v116[8 * (v115 >> 2)];
                    v108 = v119;
                    v120 = v107 - v20;
                    if (v107 != v20)
                    {
                      v108 = &v119[v120 & 0xFFFFFFFFFFFFFFF8];
                      v121 = v120 - 8;
                      if (v121 < 0x38 || (v122 = 8 * v118, (unint64_t)(&v116[8 * v118] - v20) < 0x20))
                      {
                        v123 = &v116[8 * (v115 >> 2)];
                        v124 = v20;
                        goto LABEL_136;
                      }
                      v126 = (v121 >> 3) + 1;
                      v127 = 8 * (v126 & 0x3FFFFFFFFFFFFFFCLL);
                      v123 = &v119[v127];
                      v124 = &v20[v127];
                      v128 = (__int128 *)(v20 + 16);
                      v129 = &v116[v122 + 16];
                      v130 = v126 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v131 = *v128;
                        *((_OWORD *)v129 - 1) = *(v128 - 1);
                        *(_OWORD *)v129 = v131;
                        v128 += 2;
                        v129 += 32;
                        v130 -= 4;
                      }
                      while (v130);
                      if (v126 != (v126 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_136:
                          v125 = *(_QWORD *)v124;
                          v124 += 8;
                          *(_QWORD *)v123 = v125;
                          v123 += 8;
                        }
                        while (v123 != v108);
                      }
                    }
                    v107 = &v116[8 * v115];
                    if (v40)
                      operator delete(v40);
                    v20 = v119;
                    v40 = v117;
                    goto LABEL_120;
                  }
                  v110 = (v20 - v40) >> 3;
                  if (v110 >= -1)
                    v111 = v110 + 1;
                  else
                    v111 = v110 + 2;
                  v112 = v111 >> 1;
                  v113 = &v20[-8 * (v111 >> 1)];
                  v114 = v107;
                  if (v107 != v20)
                  {
                    memmove(v113, v20, v107 - v20);
                    v114 = v20;
                  }
                  v108 = &v113[v107 - v20];
                  v20 = &v114[-8 * v112];
                }
LABEL_120:
                *(_QWORD *)v108 = v109;
                v108 += 8;
                if (!--v34)
                {
                  v132 = (_QWORD *)v459;
                  if (!v33)
                  {
LABEL_145:
                    v133 = (uint64_t *)__src[1];
                    if (__src[1] == v132)
                    {
LABEL_146:
                      v134 = __src[0];
                      __src[0] = v40;
                      __src[1] = v20;
                      *(_QWORD *)&v459 = v108;
                      *((_QWORD *)&v459 + 1) = v107;
                      v16 = v444 + v446;
                      v460.i64[0] = v444 + v446;
                      if (v134)
                        operator delete(v134);
                      a7 = v457;
                      goto LABEL_149;
                    }
                    while (2)
                    {
                      if (v108 != v107)
                      {
                        v170 = v20;
                        goto LABEL_187;
                      }
                      if (v20 > v40)
                      {
                        v172 = (v20 - v40) >> 3;
                        if (v172 >= -1)
                          v173 = v172 + 1;
                        else
                          v173 = v172 + 2;
                        v174 = v173 >> 1;
                        v175 = &v20[-8 * (v173 >> 1)];
                        v176 = v107;
                        if (v107 != v20)
                        {
                          memmove(v175, v20, v107 - v20);
                          v176 = v20;
                        }
                        v108 = &v175[v107 - v20];
                        v170 = &v176[-8 * v174];
                        goto LABEL_187;
                      }
                      if (v107 == v40)
                        v177 = 1;
                      else
                        v177 = (v107 - v40) >> 2;
                      if (v177 >> 61)
                        sub_1B02D72AC();
                      v178 = (char *)operator new(8 * v177);
                      v179 = v178;
                      v180 = v177 >> 2;
                      v170 = &v178[8 * (v177 >> 2)];
                      v108 = v170;
                      v181 = v107 - v20;
                      if (v107 != v20)
                      {
                        v108 = &v170[v181 & 0xFFFFFFFFFFFFFFF8];
                        v182 = v181 - 8;
                        if (v182 < 0x38 || (v183 = 8 * v180, (unint64_t)(&v178[8 * v180] - v20) < 0x20))
                        {
                          v184 = &v178[8 * (v177 >> 2)];
                          v185 = v20;
                          goto LABEL_204;
                        }
                        v187 = (v182 >> 3) + 1;
                        v188 = 8 * (v187 & 0x3FFFFFFFFFFFFFFCLL);
                        v184 = &v170[v188];
                        v185 = &v20[v188];
                        v189 = (__int128 *)(v20 + 16);
                        v190 = &v178[v183 + 16];
                        v191 = v187 & 0x3FFFFFFFFFFFFFFCLL;
                        do
                        {
                          v192 = *v189;
                          *((_OWORD *)v190 - 1) = *(v189 - 1);
                          *(_OWORD *)v190 = v192;
                          v189 += 2;
                          v190 += 32;
                          v191 -= 4;
                        }
                        while (v191);
                        if (v187 != (v187 & 0x3FFFFFFFFFFFFFFCLL))
                        {
                          do
                          {
LABEL_204:
                            v186 = *(_QWORD *)v185;
                            v185 += 8;
                            *(_QWORD *)v184 = v186;
                            v184 += 8;
                          }
                          while (v184 != v108);
                        }
                      }
                      v107 = &v178[8 * v177];
                      if (v40)
                        operator delete(v40);
                      v40 = v179;
LABEL_187:
                      v171 = *v133++;
                      *(_QWORD *)v108 = v171;
                      v108 += 8;
                      v20 = v170;
                      if (v133 == (uint64_t *)v459)
                        goto LABEL_146;
                      continue;
                    }
                  }
                  while (2)
                  {
                    if (v108 != v107)
                    {
                      v148 = v20;
                      goto LABEL_161;
                    }
                    if (v20 > v40)
                    {
                      v149 = (v20 - v40) >> 3;
                      if (v149 >= -1)
                        v150 = v149 + 1;
                      else
                        v150 = v149 + 2;
                      v151 = v150 >> 1;
                      v152 = &v20[-8 * (v150 >> 1)];
                      v153 = v107;
                      if (v107 != v20)
                      {
                        memmove(v152, v20, v107 - v20);
                        v153 = v20;
                      }
                      v108 = &v152[v107 - v20];
                      v148 = &v153[-8 * v151];
                      goto LABEL_161;
                    }
                    if (v107 == v40)
                      v154 = 1;
                    else
                      v154 = (v107 - v40) >> 2;
                    if (v154 >> 61)
                      sub_1B02D72AC();
                    v155 = (char *)operator new(8 * v154);
                    v156 = v155;
                    v157 = v154 >> 2;
                    v148 = &v155[8 * (v154 >> 2)];
                    v108 = v148;
                    v158 = v107 - v20;
                    if (v107 != v20)
                    {
                      v108 = &v148[v158 & 0xFFFFFFFFFFFFFFF8];
                      v159 = v158 - 8;
                      if (v159 < 0x38 || (v160 = 8 * v157, (unint64_t)(&v155[8 * v157] - v20) < 0x20))
                      {
                        v161 = &v155[8 * (v154 >> 2)];
                        v162 = v20;
                        goto LABEL_178;
                      }
                      v164 = (v159 >> 3) + 1;
                      v165 = 8 * (v164 & 0x3FFFFFFFFFFFFFFCLL);
                      v161 = &v148[v165];
                      v162 = &v20[v165];
                      v166 = (__int128 *)(v20 + 16);
                      v167 = &v155[v160 + 16];
                      v168 = v164 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v169 = *v166;
                        *((_OWORD *)v167 - 1) = *(v166 - 1);
                        *(_OWORD *)v167 = v169;
                        v166 += 2;
                        v167 += 32;
                        v168 -= 4;
                      }
                      while (v168);
                      if (v164 != (v164 & 0x3FFFFFFFFFFFFFFCLL))
                      {
                        do
                        {
LABEL_178:
                          v163 = *(_QWORD *)v162;
                          v162 += 8;
                          *(_QWORD *)v161 = v163;
                          v161 += 8;
                        }
                        while (v161 != v108);
                      }
                    }
                    v107 = &v155[8 * v154];
                    if (v40)
                      operator delete(v40);
                    v40 = v156;
LABEL_161:
                    *(_QWORD *)v108 = *(v132 - 1);
                    v108 += 8;
                    v132 = (_QWORD *)(v459 - 8);
                    *(_QWORD *)&v459 = v459 - 8;
                    v20 = v148;
                    if (!--v33)
                      goto LABEL_145;
                    continue;
                  }
                }
              }
            }
            if (v34)
            {
              if (__src[1] == __src[0])
              {
LABEL_108:
                v106 = v34;
                do
                {
                  v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                  sub_1B031B9B0((char **)__src, &v461);
                  --v106;
                }
                while (v106);
                v33 += v34;
                v105 = v460.i64[0];
                v20 = (char *)__src[1];
              }
              else
              {
                while (1)
                {
                  v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
                  sub_1B031BB3C(__src, &v461);
                  v20 = (char *)__src[1];
                  v104 = 4095;
                  if ((_QWORD)v459 - (unint64_t)__src[1] != 8)
                    v104 = 4096;
                  v105 = v104 + v460.i64[0];
                  v460.i64[0] += v104;
                  if (!--v34)
                    break;
                  if (__src[1] == __src[0])
                    goto LABEL_108;
                }
              }
              v16 = v105 + (v33 << 12);
              v460.i64[0] = v16;
              if (!v33)
                goto LABEL_149;
            }
            else
            {
              v16 = v460.i64[0] + (v33 << 12);
              v460.i64[0] = v16;
              if (!v33)
                goto LABEL_149;
            }
            do
            {
              while (1)
              {
                v291 = (char *)(v459 - 8);
                v290 = *(_QWORD *)(v459 - 8);
                *(_QWORD *)&v459 = v459 - 8;
                if (v20 == __src[0])
                  break;
                *((_QWORD *)v20 - 1) = v290;
                v20 = (char *)__src[1] - 8;
                __src[1] = (char *)__src[1] - 8;
                if (!--v33)
                  goto LABEL_149;
              }
              if ((unint64_t)v291 >= *((_QWORD *)&v459 + 1))
              {
                if (*((char **)&v459 + 1) == v20)
                  v297 = 1;
                else
                  v297 = (uint64_t)(*((_QWORD *)&v459 + 1) - (_QWORD)v20) >> 2;
                if (v297 >> 61)
                  goto LABEL_613;
                v298 = (char *)operator new(8 * v297);
                v299 = (v297 + 3) >> 2;
                v296 = &v298[8 * v299];
                v300 = v296;
                v301 = v291 - v20;
                if (v291 != v20)
                {
                  v300 = &v296[v301 & 0xFFFFFFFFFFFFFFF8];
                  v302 = v301 - 8;
                  v303 = &v298[8 * v299];
                  v304 = v20;
                  if (v302 < 0x38)
                    goto LABEL_623;
                  v305 = 8 * v299;
                  v303 = &v298[8 * v299];
                  v304 = v20;
                  if ((unint64_t)(v303 - v20) < 0x20)
                    goto LABEL_623;
                  v306 = (v302 >> 3) + 1;
                  v307 = 8 * (v306 & 0x3FFFFFFFFFFFFFFCLL);
                  v303 = &v296[v307];
                  v304 = &v20[v307];
                  v308 = (__int128 *)(v20 + 16);
                  v309 = &v298[v305 + 16];
                  v310 = v306 & 0x3FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v311 = *v308;
                    *((_OWORD *)v309 - 1) = *(v308 - 1);
                    *(_OWORD *)v309 = v311;
                    v308 += 2;
                    v309 += 32;
                    v310 -= 4;
                  }
                  while (v310);
                  if (v306 != (v306 & 0x3FFFFFFFFFFFFFFCLL))
                  {
LABEL_623:
                    do
                    {
                      v312 = *(_QWORD *)v304;
                      v304 += 8;
                      *(_QWORD *)v303 = v312;
                      v303 += 8;
                    }
                    while (v303 != v300);
                  }
                }
                __src[0] = v298;
                __src[1] = v296;
                *(_QWORD *)&v459 = v300;
                *((_QWORD *)&v459 + 1) = &v298[8 * v297];
                if (v20)
                  operator delete(v20);
              }
              else
              {
                v292 = (uint64_t)(*((_QWORD *)&v459 + 1) - (_QWORD)v291) >> 3;
                if (v292 >= -1)
                  v293 = v292 + 1;
                else
                  v293 = v292 + 2;
                v294 = v293 >> 1;
                v295 = &v291[8 * (v293 >> 1)];
                v296 = &v295[-(v291 - v20)];
                if (v291 != v20)
                {
                  memmove(&v295[-(v291 - v20)], v20, v291 - v20);
                  v20 = v291;
                }
                __src[1] = v296;
                *(_QWORD *)&v459 = &v20[8 * v294];
              }
              a7 = v457;
              *((_QWORD *)v296 - 1) = v290;
              v20 = (char *)__src[1] - 8;
              __src[1] = (char *)__src[1] - 8;
              --v33;
            }
            while (v33);
          }
LABEL_149:
          v19 = (char *)v459;
          v24 = v16 >> 12;
        }
        v135 = &v20[8 * v24];
        if (v19 == v20)
        {
          v136 = 0;
          v137 = v455;
          v138 = v456;
          v139 = v452;
          v140 = v452 - v455;
          if (v452 > v455)
          {
LABEL_152:
            v141 = &a7[v140];
            if (v137 >= v139 >> 1)
              v142 = v141;
            else
              v142 = &v138[-v137];
            if (v142 == a7)
            {
              v145 = v136;
              v144 = &v20[8 * v24];
              v142 = a7;
              v139 = v137;
              if (!v137)
                goto LABEL_527;
            }
            else
            {
              v143 = v142;
              v144 = &v20[8 * v24];
              v145 = v136;
              do
              {
                if (v145 == *(char **)v144)
                {
                  v147 = *((_QWORD *)v144 - 1);
                  v144 -= 8;
                  v145 = (char *)(v147 + 4096);
                }
                v146 = *--v143;
                *--v145 = v146;
                v460 = vaddq_s64(v460, (int64x2_t)xmmword_1B03AFDD0);
              }
              while (v143 != a7);
              v137 = v455;
              v139 = v455;
              if (!v455)
                goto LABEL_527;
            }
            goto LABEL_218;
          }
        }
        else
        {
          v136 = (char *)(*(_QWORD *)v135 + (v16 & 0xFFF));
          v137 = v455;
          v138 = v456;
          v139 = v452;
          v140 = v452 - v455;
          if (v452 > v455)
            goto LABEL_152;
        }
        v145 = v136;
        v144 = &v20[8 * v24];
        v142 = a7;
        if (!v139)
          goto LABEL_527;
LABEL_218:
        v193 = v139;
        v194 = (uint64_t)&v136[v139 - *(_QWORD *)v135];
        if (v194 >= 1)
        {
          v195 = &v135[8 * ((unint64_t)v194 >> 12)];
          v196 = (char *)(*(_QWORD *)v195 + (v194 & 0xFFF));
          v197 = (void **)v195;
          v198 = v196;
          if (v196 != v136)
            goto LABEL_233;
LABEL_222:
          if (v193 >= v137)
            goto LABEL_259;
          v200 = *(char **)v135;
          v201 = (uint64_t)&v136[v137 - *(_QWORD *)v135];
          if (v201 < 1)
          {
            v210 = 4095 - v201;
            v202 = &v135[-8 * (v210 >> 12)];
            v203 = (char *)(*(_QWORD *)v202 + (~(_WORD)v210 & 0xFFF));
            if (v195 != v202)
            {
LABEL_225:
              v204 = *(_QWORD *)v195 + 4096;
              if ((char *)v204 != v196)
              {
                v135 = &v20[8 * v24 + 8];
                if (v204 - (uint64_t)v196 >= v200 - v136 + 4096)
                  v205 = v200 - v136 + 4096;
                else
                  v205 = v204 - (_QWORD)v196;
                if (v205)
                  goto LABEL_240;
                while (1)
                {
                  v196 += v205;
                  if (v196 == (char *)v204)
                    break;
                  v209 = *(char **)v135;
                  v135 += 8;
                  v136 = v209;
                  if (v204 - (uint64_t)v196 >= 4096)
                    v205 = 4096;
                  else
                    v205 = v204 - (_QWORD)v196;
                  if (v205)
LABEL_240:
                    memmove(v136, v196, v205);
                }
                v136 += v205;
                v200 = (char *)*((_QWORD *)v135 - 1);
                if (v200 + 4096 == v136)
                {
                  v200 = *(char **)v135;
                  v136 = *(char **)v135;
                }
                else
                {
                  v135 -= 8;
                }
              }
              v313 = (uint64_t *)(v195 + 8);
              if (v195 + 8 == v202)
              {
LABEL_397:
                v318 = *(char **)v202;
                if (*(char **)v202 != v203)
                {
                  v319 = *(char **)v135;
                  v135 += 8;
                  v138 = v456;
                  v320 = v319 - v136 + 4096;
                  if (v203 - v318 >= v320)
                    v321 = v320;
                  else
                    v321 = v203 - v318;
                  if (v321)
                    goto LABEL_407;
                  while (1)
                  {
                    v318 += v321;
                    if (v318 == v203)
                      break;
                    v322 = *(char **)v135;
                    v135 += 8;
                    v136 = v322;
                    if (v203 - v318 >= 4096)
                      v321 = 4096;
                    else
                      v321 = v203 - v318;
                    if (v321)
LABEL_407:
                      memmove(v136, v318, v321);
                  }
                  v136 += v321;
                  v213 = v135 - 8;
                  if ((char *)(*((_QWORD *)v135 - 1) + 4096) != v136)
                  {
LABEL_410:
                    v135 = v213;
                    if (v142 == v138)
                      goto LABEL_527;
                    goto LABEL_260;
                  }
                  goto LABEL_258;
                }
                goto LABEL_412;
              }
              while (1)
              {
                v314 = 0;
                v315 = *v313;
                v135 += 8;
                if (v200 - v136 + 4096 <= 4096)
                  v316 = v200 - v136 + 4096;
                else
                  v316 = 4096;
                if (v316)
LABEL_393:
                  memmove(v136, (const void *)(v315 + v314), v316);
                while (1)
                {
                  v314 += v316;
                  if (v314 == 4096)
                    break;
                  v317 = *(char **)v135;
                  v135 += 8;
                  v136 = v317;
                  if (4096 - v314 >= 4096)
                    v316 = 4096;
                  else
                    v316 = 4096 - v314;
                  if (v316)
                    goto LABEL_393;
                }
                v136 += v316;
                v200 = (char *)*((_QWORD *)v135 - 1);
                if (v200 + 4096 == v136)
                {
                  v200 = *(char **)v135;
                  v136 = *(char **)v135;
                  if (++v313 == (uint64_t *)v202)
                    goto LABEL_397;
                }
                else
                {
                  v135 -= 8;
                  if (++v313 == (uint64_t *)v202)
                    goto LABEL_397;
                }
              }
            }
          }
          else
          {
            v202 = &v135[8 * ((unint64_t)v201 >> 12)];
            v203 = (char *)(*(_QWORD *)v202 + (v201 & 0xFFF));
            if (v195 != v202)
              goto LABEL_225;
          }
          if (v196 != v203)
          {
            v135 = &v20[8 * v24 + 8];
            v138 = v456;
            if (v203 - v196 >= v200 - v136 + 4096)
              v211 = v200 - v136 + 4096;
            else
              v211 = v203 - v196;
            if (v211)
              goto LABEL_255;
            while (1)
            {
              v196 += v211;
              if (v196 == v203)
                break;
              v212 = *(char **)v135;
              v135 += 8;
              v136 = v212;
              if (v203 - v196 >= 4096)
                v211 = 4096;
              else
                v211 = v203 - v196;
              if (v211)
LABEL_255:
                memmove(v136, v196, v211);
            }
            v136 += v211;
            v213 = v135 - 8;
            if ((char *)(*((_QWORD *)v135 - 1) + 4096) != v136)
              goto LABEL_410;
LABEL_258:
            v136 = *(char **)v135;
LABEL_259:
            if (v142 == v138)
              goto LABEL_527;
            goto LABEL_260;
          }
LABEL_412:
          v138 = v456;
          if (v142 == v456)
            goto LABEL_527;
LABEL_260:
          v215 = *(char **)v135;
          v214 = (void **)(v135 + 8);
          v216 = v215 - v136 + 4096;
          if (v138 - v142 >= v216)
            v217 = v216;
          else
            v217 = v138 - v142;
          if (v217)
            goto LABEL_269;
          while (1)
          {
            do
            {
              v142 += v217;
              if (v142 == v138)
                goto LABEL_527;
              v218 = (char *)*v214++;
              v136 = v218;
              if (v138 - v142 >= 4096)
                v217 = 4096;
              else
                v217 = v138 - v142;
            }
            while (!v217);
LABEL_269:
            memmove(v136, v142, v217);
          }
        }
        v199 = 4095 - v194;
        v195 = &v135[-8 * (v199 >> 12)];
        v196 = (char *)(*(_QWORD *)v195 + (~(_WORD)v199 & 0xFFF));
        v197 = (void **)v195;
        v198 = v196;
        if (v196 == v136)
          goto LABEL_222;
        while (1)
        {
LABEL_233:
          if (v145 == *(char **)v144)
          {
            v206 = *((_QWORD *)v144 - 1);
            v144 -= 8;
            v145 = (char *)(v206 + 4096);
            if (v198 == *v197)
              goto LABEL_235;
          }
          else if (v198 == *v197)
          {
LABEL_235:
            v208 = (uint64_t)*--v197;
            v198 = (char *)(v208 + 4096);
          }
          v207 = *--v198;
          *--v145 = v207;
          v460 = vaddq_s64(v460, (int64x2_t)xmmword_1B03AFDD0);
          if (v198 == v136)
            goto LABEL_222;
        }
      }
      v41 = (v22 << 9) - 1;
      v42 = v459 - (unint64_t)__src[1];
      if ((void *)v459 == __src[1])
        v41 = 0;
      v43 = v41 - v17;
      v44 = v28 >= v43;
      v45 = v28 - v43;
      if (v45 == 0 || !v44)
        goto LABEL_422;
      v447 = v460.i64[0];
      if ((void *)v459 == __src[1])
        v46 = v45 + 1;
      else
        v46 = v45;
      if ((v46 & 0xFFF) != 0)
        v47 = (v46 >> 12) + 1;
      else
        v47 = v46 >> 12;
      if (v47 >= v24)
        v48 = v24;
      else
        v48 = v47;
      if (v47 <= v24)
      {
        v76 = v460.i64[0] - (v48 << 12);
        v460.i64[0] = v76;
        if (!v48)
          goto LABEL_421;
        while (2)
        {
          v78 = (char *)__src[1];
          v79 = (char *)__src[1] + 8;
          v80 = *(_QWORD *)__src[1];
          __src[1] = (char *)__src[1] + 8;
          if (v19 == *((char **)&v459 + 1))
          {
            v81 = __src[0];
            if (v79 > __src[0])
            {
              v82 = (v79 - (char *)__src[0]) >> 3;
              if (v82 >= -1)
                v83 = v82 + 1;
              else
                v83 = v82 + 2;
              v84 = v83 >> 1;
              v85 = &v79[-8 * (v83 >> 1)];
              v86 = v19 - v79;
              if (v19 != v79)
              {
                memmove(&v79[-8 * (v83 >> 1)], v79, v19 - v79);
                v19 = v79;
              }
              v77 = &v19[-8 * v84];
              v19 = &v85[v86];
              __src[1] = v77;
              *(_QWORD *)&v459 = &v85[v86];
              goto LABEL_79;
            }
            if (v19 == __src[0])
              v87 = 1;
            else
              v87 = (v19 - (char *)__src[0]) >> 2;
            if (v87 >> 61)
LABEL_613:
              sub_1B02D72AC();
            v88 = operator new(8 * v87);
            v89 = v87 >> 2;
            v90 = &v88[8 * (v87 >> 2)];
            v92 = v19 - v79;
            v91 = v19 == v79;
            v19 = v90;
            if (!v91)
            {
              v19 = &v90[v92 & 0xFFFFFFFFFFFFFFF8];
              v93 = v92 - 8;
              if (v93 < 0x38)
              {
                v94 = &v88[8 * (v87 >> 2)];
                goto LABEL_99;
              }
              v95 = 8 * v89;
              v96 = &v88[8 * v89] - v79;
              v94 = &v88[8 * (v87 >> 2)];
              if (v96 < 0x20)
                goto LABEL_624;
              v97 = (v93 >> 3) + 1;
              v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
              v94 = &v90[v98];
              v79 += v98;
              v99 = (__int128 *)(v78 + 24);
              v100 = &v88[v95 + 16];
              v101 = v97 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v102 = *v99;
                *(v100 - 1) = *(v99 - 1);
                *v100 = v102;
                v99 += 2;
                v100 += 2;
                v101 -= 4;
              }
              while (v101);
              if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_624:
                do
                {
LABEL_99:
                  v103 = *(_QWORD *)v79;
                  v79 += 8;
                  *(_QWORD *)v94 = v103;
                  v94 += 8;
                }
                while (v94 != v19);
              }
            }
            __src[0] = v88;
            __src[1] = &v88[8 * (v87 >> 2)];
            *(_QWORD *)&v459 = v19;
            *((_QWORD *)&v459 + 1) = &v88[8 * v87];
            if (v81)
              operator delete(v81);
LABEL_79:
            a7 = v457;
          }
          *(_QWORD *)v19 = v80;
          v19 = (char *)(v459 + 8);
          *(_QWORD *)&v459 = v459 + 8;
          if (!--v48)
            goto LABEL_421;
          continue;
        }
      }
      v49 = v47 - v48;
      v50 = v42 >> 3;
      if (v47 - v48 <= ((uint64_t)(*((_QWORD *)&v459 + 1) - (unint64_t)__src[0]) >> 3) - (v42 >> 3))
      {
        if (!v49)
          goto LABEL_419;
        do
        {
          if (*((_QWORD *)&v459 + 1) == (_QWORD)v459)
          {
            for (i = 0; i != v49; ++i)
            {
              v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
              sub_1B031BB3C(__src, &v461);
              v19 = (char *)v459;
              v324 = 4095;
              if ((_QWORD)v459 - (unint64_t)__src[1] != 8)
                v324 = 4096;
              v325 = v324 + v460.i64[0];
              v460.i64[0] = v325;
            }
            v48 = v47;
            goto LABEL_420;
          }
          v461.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x1000uLL);
          sub_1B031B9B0((char **)__src, &v461);
          --v47;
          --v49;
        }
        while (v49);
        v19 = (char *)v459;
LABEL_419:
        v325 = v460.i64[0];
LABEL_420:
        v76 = v325 - (v48 << 12);
        v460.i64[0] = v76;
        if (!v48)
          goto LABEL_421;
        while (2)
        {
          v339 = (char *)__src[1];
          v340 = (char *)__src[1] + 8;
          v341 = *(_QWORD *)__src[1];
          __src[1] = (char *)__src[1] + 8;
          if (v19 == *((char **)&v459 + 1))
          {
            v342 = __src[0];
            if (v340 > __src[0])
            {
              v343 = (v340 - (char *)__src[0]) >> 3;
              if (v343 >= -1)
                v344 = v343 + 1;
              else
                v344 = v343 + 2;
              v345 = v344 >> 1;
              v346 = &v340[-8 * (v344 >> 1)];
              v347 = v19 - v340;
              if (v19 != v340)
              {
                memmove(&v340[-8 * (v344 >> 1)], v340, v19 - v340);
                v19 = v340;
              }
              v338 = &v19[-8 * v345];
              v19 = &v346[v347];
              __src[1] = v338;
              *(_QWORD *)&v459 = &v346[v347];
              goto LABEL_433;
            }
            if (v19 == __src[0])
              v348 = 1;
            else
              v348 = (v19 - (char *)__src[0]) >> 2;
            if (v348 >> 61)
              goto LABEL_613;
            v349 = operator new(8 * v348);
            v350 = v348 >> 2;
            v351 = &v349[8 * (v348 >> 2)];
            v352 = v19 - v340;
            v91 = v19 == v340;
            v19 = v351;
            if (!v91)
            {
              v19 = &v351[v352 & 0xFFFFFFFFFFFFFFF8];
              v353 = v352 - 8;
              if (v353 < 0x38)
              {
                v354 = &v349[8 * (v348 >> 2)];
                goto LABEL_453;
              }
              v355 = 8 * v350;
              v356 = &v349[8 * v350] - v340;
              v354 = &v349[8 * (v348 >> 2)];
              if (v356 < 0x20)
                goto LABEL_625;
              v357 = (v353 >> 3) + 1;
              v358 = 8 * (v357 & 0x3FFFFFFFFFFFFFFCLL);
              v354 = &v351[v358];
              v340 += v358;
              v359 = (__int128 *)(v339 + 24);
              v360 = &v349[v355 + 16];
              v361 = v357 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v362 = *v359;
                *(v360 - 1) = *(v359 - 1);
                *v360 = v362;
                v359 += 2;
                v360 += 2;
                v361 -= 4;
              }
              while (v361);
              if (v357 != (v357 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_625:
                do
                {
LABEL_453:
                  v363 = *(_QWORD *)v340;
                  v340 += 8;
                  *(_QWORD *)v354 = v363;
                  v354 += 8;
                }
                while (v354 != v19);
              }
            }
            __src[0] = v349;
            __src[1] = &v349[8 * (v348 >> 2)];
            *(_QWORD *)&v459 = v19;
            *((_QWORD *)&v459 + 1) = &v349[8 * v348];
            if (v342)
              operator delete(v342);
LABEL_433:
            a7 = v457;
          }
          *(_QWORD *)v19 = v341;
          v19 = (char *)(v459 + 8);
          *(_QWORD *)&v459 = v459 + 8;
          if (!--v48)
            goto LABEL_421;
          continue;
        }
      }
      if ((uint64_t)(*((_QWORD *)&v459 + 1) - (unint64_t)__src[0]) >> 2 <= v49 + v50)
        v51 = v49 + v50;
      else
        v51 = (uint64_t)(*((_QWORD *)&v459 + 1) - (unint64_t)__src[0]) >> 2;
      if (v51)
      {
        if (v51 >> 61)
          goto LABEL_613;
        v52 = (char *)operator new(8 * v51);
      }
      else
      {
        v52 = 0;
      }
      v445 = v48 << 12;
      v219 = &v52[8 * (v50 - v48)];
      v220 = &v52[8 * v51];
      v19 = v219;
      do
      {
        v221 = operator new(0x1000uLL);
        if (v19 != v220)
          goto LABEL_276;
        if (v219 > v52)
        {
          v222 = (v219 - v52) >> 3;
          if (v222 >= -1)
            v223 = v222 + 1;
          else
            v223 = v222 + 2;
          v224 = v223 >> 1;
          v225 = &v219[-8 * (v223 >> 1)];
          v226 = v220;
          if (v220 != v219)
          {
            memmove(v225, v219, v220 - v219);
            v226 = v219;
          }
          v19 = &v225[v220 - v219];
          v219 = &v226[-8 * v224];
          goto LABEL_276;
        }
        if (v220 == v52)
          v227 = 1;
        else
          v227 = (v220 - v52) >> 2;
        if (v227 >> 61)
          sub_1B02D72AC();
        v228 = (char *)operator new(8 * v227);
        v229 = v228;
        v230 = v227 >> 2;
        v231 = &v228[8 * (v227 >> 2)];
        v19 = v231;
        v232 = v220 - v219;
        if (v220 != v219)
        {
          v19 = &v231[v232 & 0xFFFFFFFFFFFFFFF8];
          v233 = v232 - 8;
          if (v233 >= 0x38 && (v234 = 8 * v230, (unint64_t)(&v228[8 * v230] - v219) >= 0x20))
          {
            v238 = (v233 >> 3) + 1;
            v239 = 8 * (v238 & 0x3FFFFFFFFFFFFFFCLL);
            v235 = &v231[v239];
            v236 = &v219[v239];
            v240 = (__int128 *)(v219 + 16);
            v241 = &v228[v234 + 16];
            v242 = v238 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v243 = *v240;
              *((_OWORD *)v241 - 1) = *(v240 - 1);
              *(_OWORD *)v241 = v243;
              v240 += 2;
              v241 += 32;
              v242 -= 4;
            }
            while (v242);
            if (v238 == (v238 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_293;
          }
          else
          {
            v235 = &v228[8 * (v227 >> 2)];
            v236 = v219;
          }
          do
          {
            v237 = *(_QWORD *)v236;
            v236 += 8;
            *(_QWORD *)v235 = v237;
            v235 += 8;
          }
          while (v235 != v19);
        }
LABEL_293:
        v220 = &v228[8 * v227];
        if (v52)
          operator delete(v52);
        v219 = v231;
        v52 = v229;
LABEL_276:
        *(_QWORD *)v19 = v221;
        v19 += 8;
        --v49;
      }
      while (v49);
      for (j = __src[1]; v48; --v48)
      {
        if (v19 == v220)
        {
          if (v219 <= v52)
          {
            if (v220 == v52)
              v253 = 1;
            else
              v253 = (v220 - v52) >> 2;
            if (v253 >> 61)
              sub_1B02D72AC();
            v254 = (char *)operator new(8 * v253);
            v255 = v254;
            v256 = v253 >> 2;
            v247 = &v254[8 * (v253 >> 2)];
            v19 = v247;
            v257 = v220 - v219;
            if (v220 != v219)
            {
              v19 = &v247[v257 & 0xFFFFFFFFFFFFFFF8];
              v258 = v257 - 8;
              if (v258 < 0x38 || (v259 = 8 * v256, (unint64_t)(&v254[8 * v256] - v219) < 0x20))
              {
                v260 = &v254[8 * (v253 >> 2)];
                v261 = v219;
                goto LABEL_323;
              }
              v263 = (v258 >> 3) + 1;
              v264 = 8 * (v263 & 0x3FFFFFFFFFFFFFFCLL);
              v260 = &v247[v264];
              v261 = &v219[v264];
              v265 = (__int128 *)(v219 + 16);
              v266 = &v254[v259 + 16];
              v267 = v263 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v268 = *v265;
                *((_OWORD *)v266 - 1) = *(v265 - 1);
                *(_OWORD *)v266 = v268;
                v265 += 2;
                v266 += 32;
                v267 -= 4;
              }
              while (v267);
              if (v263 != (v263 & 0x3FFFFFFFFFFFFFFCLL))
              {
                do
                {
LABEL_323:
                  v262 = *(_QWORD *)v261;
                  v261 += 8;
                  *(_QWORD *)v260 = v262;
                  v260 += 8;
                }
                while (v260 != v19);
              }
            }
            v220 = &v254[8 * v253];
            if (v52)
              operator delete(v52);
            v52 = v255;
            goto LABEL_306;
          }
          v248 = (v219 - v52) >> 3;
          if (v248 >= -1)
            v249 = v248 + 1;
          else
            v249 = v248 + 2;
          v250 = v249 >> 1;
          v251 = &v219[-8 * (v249 >> 1)];
          v252 = v220;
          if (v220 != v219)
          {
            memmove(v251, v219, v220 - v219);
            v252 = v219;
          }
          v19 = &v251[v220 - v219];
          v247 = &v252[-8 * v250];
        }
        else
        {
          v247 = v219;
        }
LABEL_306:
        *(_QWORD *)v19 = *j;
        v19 += 8;
        j = (char *)__src[1] + 8;
        __src[1] = (char *)__src[1] + 8;
        v219 = v247;
      }
      v245 = (char *)v459;
      if ((_QWORD *)v459 != j)
      {
        do
        {
          if (v219 == v52)
          {
            if (v19 >= v220)
            {
              if (v220 == v52)
                v274 = 1;
              else
                v274 = (v220 - v52) >> 2;
              if (v274 >> 61)
                sub_1B02D72AC();
              v275 = (char *)operator new(8 * v274);
              v276 = v275;
              v277 = (v274 + 3) >> 2;
              v219 = &v275[8 * v277];
              v278 = v19 - v52;
              v91 = v19 == v52;
              v19 = v219;
              if (!v91)
              {
                v19 = &v219[v278 & 0xFFFFFFFFFFFFFFF8];
                v279 = v278 - 8;
                v280 = &v275[8 * v277];
                v281 = v52;
                if (v279 < 0x38)
                  goto LABEL_626;
                v282 = 8 * v277;
                v280 = &v275[8 * v277];
                v281 = v52;
                if ((unint64_t)(v280 - v52) < 0x20)
                  goto LABEL_626;
                v283 = (v279 >> 3) + 1;
                v284 = 8 * (v283 & 0x3FFFFFFFFFFFFFFCLL);
                v280 = &v219[v284];
                v281 = &v52[v284];
                v285 = (__int128 *)(v52 + 16);
                v286 = &v275[v282 + 16];
                v287 = v283 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v288 = *v285;
                  *((_OWORD *)v286 - 1) = *(v285 - 1);
                  *(_OWORD *)v286 = v288;
                  v285 += 2;
                  v286 += 32;
                  v287 -= 4;
                }
                while (v287);
                if (v283 != (v283 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_626:
                  do
                  {
                    v289 = *(_QWORD *)v281;
                    v281 += 8;
                    *(_QWORD *)v280 = v289;
                    v280 += 8;
                  }
                  while (v280 != v19);
                }
              }
              v220 = &v275[8 * v274];
              if (v52)
                operator delete(v52);
              v52 = v276;
            }
            else
            {
              v270 = (v220 - v19) >> 3;
              if (v270 >= -1)
                v271 = v270 + 1;
              else
                v271 = v270 + 2;
              v272 = v271 >> 1;
              v219 = &v52[8 * (v271 >> 1)];
              v273 = v52;
              if (v19 != v52)
              {
                memmove(v219, v52, v19 - v52);
                v273 = v19;
              }
              v19 = &v273[8 * v272];
            }
          }
          v269 = *((_QWORD *)v245 - 1);
          v245 -= 8;
          *((_QWORD *)v219 - 1) = v269;
          v219 -= 8;
        }
        while (v245 != __src[1]);
      }
      v246 = __src[0];
      __src[0] = v52;
      __src[1] = v219;
      *(_QWORD *)&v459 = v19;
      *((_QWORD *)&v459 + 1) = v220;
      v76 = v447 - v445;
      v460.i64[0] = v447 - v445;
      if (v246)
        operator delete(v246);
      a7 = v457;
LABEL_421:
      v15 = v460.i64[1];
      v20 = (char *)__src[1];
      LOWORD(v17) = v76 + v460.i16[4];
      v18 = (unint64_t)(v76 + v460.i64[1]) >> 12;
LABEL_422:
      v326 = &v20[8 * v18];
      if (v19 != v20)
      {
        v327 = (char *)(*(_QWORD *)v326 + (v17 & 0xFFF));
        v328 = v456;
        v329 = v452;
        v330 = v15 - v455;
        v331 = v330 - v452;
        if (v330 < v452)
          goto LABEL_424;
LABEL_457:
        v336 = v327;
        v335 = v326;
        v333 = v328;
        if (!v329)
          goto LABEL_527;
LABEL_461:
        v364 = v329;
        v365 = (uint64_t)&v327[-v329 - *(_QWORD *)v326];
        if (v365 >= 1)
        {
          v366 = &v326[8 * ((unint64_t)v365 >> 12)];
          v367 = (char *)(*(_QWORD *)v366 + (v365 & 0xFFF));
          v368 = v366;
          v369 = v367;
          if (v367 != v327)
            goto LABEL_477;
LABEL_465:
          if (v364 >= v330)
            goto LABEL_515;
          v371 = *(_BYTE **)v326;
          v372 = (uint64_t)&v327[-v330 - *(_QWORD *)v326];
          if (v372 < 1)
          {
            v381 = 4095 - v372;
            v373 = &v326[-8 * (v381 >> 12)];
            v374 = (char *)(*(_QWORD *)v373 + (~(_WORD)v381 & 0xFFF));
            if (v373 == v366)
              goto LABEL_483;
LABEL_468:
            v375 = *(_BYTE **)v366;
            if (*(char **)v366 != v367)
            {
              while (1)
              {
                v376 = (char *)(v327 - v371);
                if (v367 - v375 >= (uint64_t)v376)
                  v377 = (size_t)v376;
                else
                  v377 = v367 - v375;
                v367 -= v377;
                v327 -= v377;
                if (v377)
                  memmove(v327, v367, v377);
                if (v367 == v375)
                  break;
                v378 = (_BYTE *)*((_QWORD *)v326 - 1);
                v326 -= 8;
                v371 = v378;
                v327 = v378 + 4096;
              }
              goto LABEL_492;
            }
            while (1)
            {
              v366 -= 8;
              if (v366 == v373)
                break;
              v386 = *(_BYTE **)v366;
              v387 = (char *)(*(_QWORD *)v366 + 4096);
              while (1)
              {
                v388 = (char *)(v327 - v371);
                if (v387 - v386 >= (uint64_t)v388)
                  v389 = (size_t)v388;
                else
                  v389 = v387 - v386;
                v387 -= v389;
                v327 -= v389;
                if (v389)
                  memmove(v327, v387, v389);
                if (v387 == v386)
                  break;
                v390 = (_BYTE *)*((_QWORD *)v326 - 1);
                v326 -= 8;
                v371 = v390;
                v327 = v390 + 4096;
              }
LABEL_492:
              v371 = *(_BYTE **)v326;
              if ((char *)(*(_QWORD *)v326 + 4096) == v327)
              {
                v385 = (_BYTE *)*((_QWORD *)v326 + 1);
                v326 += 8;
                v371 = v385;
                v327 = v385;
              }
            }
            v391 = (char *)(*(_QWORD *)v373 + 4096);
            if (v391 != v374)
            {
              v392 = *(_QWORD *)v326;
              a7 = v457;
              while (1)
              {
                v393 = &v327[-v392];
                if (v391 - v374 >= (uint64_t)v393)
                  v394 = (size_t)v393;
                else
                  v394 = v391 - v374;
                v391 -= v394;
                v327 -= v394;
                if (v394)
                  memmove(v327, v391, v394);
                if (v391 == v374)
                  break;
                v395 = *((_QWORD *)v326 - 1);
                v326 -= 8;
                v392 = v395;
                v327 = (char *)(v395 + 4096);
              }
              goto LABEL_512;
            }
          }
          else
          {
            v373 = &v326[8 * ((unint64_t)v372 >> 12)];
            v374 = (char *)(*(_QWORD *)v373 + (v372 & 0xFFF));
            if (v373 != v366)
              goto LABEL_468;
LABEL_483:
            if (v374 != v367)
            {
              a7 = v457;
              while (1)
              {
                v382 = (char *)(v327 - v371);
                if (v367 - v374 >= (uint64_t)v382)
                  v383 = (size_t)v382;
                else
                  v383 = v367 - v374;
                v367 -= v383;
                v327 -= v383;
                if (v383)
                  memmove(v327, v367, v383);
                if (v367 == v374)
                  break;
                v384 = (_BYTE *)*((_QWORD *)v326 - 1);
                v326 -= 8;
                v371 = v384;
                v327 = v384 + 4096;
              }
LABEL_512:
              if ((char *)(*(_QWORD *)v326 + 4096) == v327)
              {
                v396 = (char *)*((_QWORD *)v326 + 1);
                v326 += 8;
                v327 = v396;
              }
LABEL_515:
              if (v333 == a7)
                goto LABEL_527;
              v398 = *(_QWORD *)v326;
              v397 = v326 - 8;
              v399 = &v327[-v398];
              if (v333 - a7 >= (uint64_t)&v327[-v398])
                v400 = (size_t)v399;
              else
                v400 = v333 - a7;
              v401 = &v333[-v400];
              if (v400)
                goto LABEL_525;
              while (1)
              {
                do
                {
                  if (v401 == a7)
                    goto LABEL_527;
                  v402 = *(_QWORD *)v397;
                  v397 -= 8;
                  v327 = (char *)(v402 + 4096);
                  if (v401 - a7 >= 4096)
                    v400 = 4096;
                  else
                    v400 = v401 - a7;
                  v401 -= v400;
                }
                while (!v400);
LABEL_525:
                memmove(&v327[-v400], v401, v400);
              }
            }
          }
          a7 = v457;
          goto LABEL_515;
        }
        v370 = 4095 - v365;
        v366 = &v326[-8 * (v370 >> 12)];
        v367 = (char *)(*(_QWORD *)v366 + (~(_WORD)v370 & 0xFFF));
        v368 = v366;
        v369 = v367;
        if (v367 == v327)
          goto LABEL_465;
LABEL_477:
        while (2)
        {
          *v336++ = *v369;
          if (&v336[-*(_QWORD *)v335] == (char *)4096)
          {
            v379 = (char *)*((_QWORD *)v335 + 1);
            v335 += 8;
            v336 = v379;
            if (&(++v369)[-*(_QWORD *)v368] == (char *)4096)
            {
LABEL_481:
              v380 = (char *)*((_QWORD *)v368 + 1);
              v368 += 8;
              v369 = v380;
            }
          }
          else if (&(++v369)[-*(_QWORD *)v368] == (char *)4096)
          {
            goto LABEL_481;
          }
          ++v460.i64[1];
          if (v369 == v327)
            goto LABEL_465;
          continue;
        }
      }
      v327 = 0;
      v328 = v456;
      v329 = v452;
      v330 = v15 - v455;
      v331 = v330 - v452;
      if (v330 >= v452)
        goto LABEL_457;
LABEL_424:
      v332 = &v328[v331];
      if (v330 >= v329 >> 1)
        v333 = v332;
      else
        v333 = &a7[v330];
      if (v333 == v328)
      {
        v336 = v327;
        v335 = v326;
        v333 = v328;
      }
      else
      {
        v334 = v333;
        v335 = v326;
        v336 = v327;
        do
        {
          *v336++ = *v334;
          if (&v336[-*(_QWORD *)v335] == (char *)4096)
          {
            v337 = (char *)*((_QWORD *)v335 + 1);
            v335 += 8;
            v336 = v337;
          }
          ++v334;
          ++v460.i64[1];
        }
        while (v334 != v328);
      }
      v329 = v330;
      if (v330)
        goto LABEL_461;
LABEL_527:
      v8 = a1;
      size = HIBYTE(a1->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) == 0)
        v10 = a1;
      else
        v10 = (std::string *)a1->__r_.__value_.__r.__words[0];
      if ((size & 0x80u) != 0)
        size = a1->__r_.__value_.__l.__size_;
      v403 = (char *)v10 + size;
      v14 = v453;
      if (v453 == (std::string *)((char *)v10 + size) || (v404 = *a2, v405 = a2[1], *a2 == v405))
      {
LABEL_544:
        v13 = v454;
        goto LABEL_548;
      }
      a5 = v453;
      while (1)
      {
        v406 = 0;
        do
        {
          if (a5[v406] != *(_BYTE *)(v404 + v406))
            break;
          if (&a5[++v406] == v403)
            break;
        }
        while (v406 + v404 != v405);
        v407 = v404 + v406;
        v408 = &a5[v406];
        if (v407 == v405)
          break;
        if (++a5 == v403)
          goto LABEL_544;
      }
      v12 = v408;
      a7 = a3;
      a8 = a4;
      v13 = v454;
      if (a5 == v408)
        goto LABEL_548;
    }
    v24 = (unint64_t)v460.i64[0] >> 12;
LABEL_10:
    v27 = 0;
    goto LABEL_11;
  }
  if ((size & 0x80u) != 0)
    size = a1->__r_.__value_.__l.__size_;
  v14 = v10;
  v13 = v10;
LABEL_548:
  v409 = sub_1B031B22C((uint64_t)__src, v13, v14, (_BYTE *)v10 + size);
  v410 = SHIBYTE(v8->__r_.__value_.__r.__words[2]);
  if (v410 >= 0)
    v411 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  else
    v411 = v8->__r_.__value_.__l.__size_;
  if (v460.i64[1])
  {
    v412 = (char *)__src[1] + 8 * ((unint64_t)v460.i64[0] >> 12);
    if ((void *)v459 == __src[1])
      goto LABEL_599;
    v413 = (std::string::value_type *)(*(_QWORD *)v412 + (v460.i16[0] & 0xFFF));
    v414 = (char *)__src[1] + 8 * ((unint64_t)(v460.i64[0] + v460.i64[1]) >> 12);
    v415 = *(_QWORD *)v414 + ((v460.i64[0] + v460.i64[1]) & 0xFFF);
    if ((std::string::value_type *)v415 == v413)
      goto LABEL_599;
    v417 = v415 + ((v414 - v412) << 9) - (_QWORD)&v413[*(_QWORD *)v414] + *(_QWORD *)v412;
    if (!v417)
      goto LABEL_599;
    memset(&v461, 0, sizeof(v461));
    do
    {
      std::string::push_back(&v461, *v413++);
      if (&v413[-*(_QWORD *)v412] == (std::string::value_type *)4096)
      {
        v418 = (std::string::value_type *)*((_QWORD *)v412 + 1);
        v412 += 8;
        v413 = v418;
      }
    }
    while (v413 != (std::string::value_type *)v415);
    if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v419 = &v461;
    else
      v419 = (std::string *)v461.__r_.__value_.__r.__words[0];
    if ((v461.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v420 = HIBYTE(v461.__r_.__value_.__r.__words[2]);
    else
      v420 = v461.__r_.__value_.__l.__size_;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
    {
      v421 = v8->__r_.__value_.__l.__size_;
      v422 = (v8->__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
      if (v422 - v421 >= v417)
      {
        v423 = (std::string *)v8->__r_.__value_.__r.__words[0];
        v424 = v421 - v411;
        if (v421 == v411)
        {
LABEL_573:
          v425 = v411 + v417;
          if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          {
LABEL_581:
            v8->__r_.__value_.__l.__size_ = v425;
            v423->__r_.__value_.__s.__data_[v425] = 0;
            if (!v420)
              goto LABEL_597;
            goto LABEL_582;
          }
LABEL_577:
          *((_BYTE *)&v8->__r_.__value_.__s + 23) = v425 & 0x7F;
          v423->__r_.__value_.__s.__data_[v425] = 0;
          if (!v420)
            goto LABEL_597;
LABEL_582:
          v426 = (char *)v423 + v411;
          if (v420 < 8)
          {
            v427 = v419;
            goto LABEL_596;
          }
          v427 = v419;
          if ((unint64_t)((char *)v423 + v411 - (char *)v419) >= 0x20)
          {
            if (v420 < 0x20)
            {
              v428 = 0;
              goto LABEL_591;
            }
            v428 = v420 & 0xFFFFFFFFFFFFFFE0;
            v429 = &v419->__r_.__value_.__r.__words[2];
            v430 = (_OWORD *)((char *)&v423->__r_.__value_.__r.__words[2] + v411);
            v431 = v420 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v432 = *(_OWORD *)v429;
              *(v430 - 1) = *((_OWORD *)v429 - 1);
              *v430 = v432;
              v429 += 4;
              v430 += 2;
              v431 -= 32;
            }
            while (v431);
            if (v420 == v428)
              goto LABEL_597;
            if ((v420 & 0x18) != 0)
            {
LABEL_591:
              v426 += v420 & 0xFFFFFFFFFFFFFFF8;
              v427 = (std::string *)((char *)v419 + (v420 & 0xFFFFFFFFFFFFFFF8));
              v433 = (uint64_t *)((char *)v419 + v428);
              v434 = (std::string::size_type *)((char *)v423->__r_.__value_.__r.__words + v411 + v428);
              v435 = v428 - (v420 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v436 = *v433++;
                *v434++ = v436;
                v435 += 8;
              }
              while (v435);
              if (v420 != (v420 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_596;
LABEL_597:
              if (SHIBYTE(v461.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v461.__r_.__value_.__l.__data_);
              goto LABEL_599;
            }
            v427 = (std::string *)((char *)v419 + v428);
            v426 += v428;
          }
          do
          {
LABEL_596:
            v437 = v427->__r_.__value_.__s.__data_[0];
            v427 = (std::string *)((char *)v427 + 1);
            *v426++ = v437;
          }
          while (v427 != (std::string *)((char *)v419 + v420));
          goto LABEL_597;
        }
LABEL_580:
        memmove((char *)v423 + v411 + v417, (char *)v423 + v411, v424);
        v425 = v421 + v417;
        if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_581;
        goto LABEL_577;
      }
    }
    else
    {
      v421 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
      v422 = 22;
      v423 = v8;
      if (22 - v421 >= v417)
      {
        v424 = v421 - v411;
        if (v421 == v411)
          goto LABEL_573;
        goto LABEL_580;
      }
    }
    std::string::__grow_by(v8, v422, v421 + v417 - v422, v421, v411, 0, v417);
    v8->__r_.__value_.__l.__size_ = v421 + v417;
    v423 = (std::string *)v8->__r_.__value_.__r.__words[0];
    v425 = v421 + v417;
    if (SHIBYTE(v8->__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_581;
    goto LABEL_577;
  }
  v416 = v8->__r_.__value_.__r.__words[0];
  if (v410 >= 0)
    v416 = (std::string::size_type)v8;
  std::string::erase(v8, (std::string::size_type)&v409[-v416], v416 + v411 - (_QWORD)v409);
LABEL_599:
  v438 = (void **)__src[1];
  v439 = (void **)v459;
  v460.i64[1] = 0;
  v440 = v459 - (unint64_t)__src[1];
  if ((unint64_t)v459 - (unint64_t)__src[1] >= 0x11)
  {
    do
    {
      operator delete(*v438);
      v439 = (void **)v459;
      v438 = (void **)((char *)__src[1] + 8);
      __src[1] = v438;
      v440 = v459 - (_QWORD)v438;
    }
    while ((_QWORD)v459 - (_QWORD)v438 > 0x10uLL);
  }
  v441 = v440 >> 3;
  if (v441 == 1)
  {
    v442 = 2048;
    goto LABEL_605;
  }
  if (v441 == 2)
  {
    v442 = 4096;
LABEL_605:
    v460.i64[0] = v442;
  }
  if (v438 != v439)
  {
    do
    {
      v443 = *v438++;
      operator delete(v443);
    }
    while (v438 != v439);
    if ((void *)v459 != __src[1])
      *(_QWORD *)&v459 = v459 + (((unint64_t)__src[1] - v459 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__src[0])
    operator delete(__src[0]);
}

void sub_1B031B000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_1B031BCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B031B014(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  uint64_t v15;
  va_list va;

  va_start(va, a15);
  if (*(char *)(v15 - 89) < 0)
  {
    operator delete(*(void **)(v15 - 112));
    sub_1B031BCD4((uint64_t)va);
    _Unwind_Resume(a1);
  }
  sub_1B031BCD4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B031B038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  void *v23;

  if (v23)
  {
    operator delete(v23);
    sub_1B031BCD4((uint64_t)&a23);
    _Unwind_Resume(a1);
  }
  sub_1B031BCD4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1B031B1F4(void *a1)
{
  uint64_t v1;

  __cxa_begin_catch(a1);
  if (*(char *)(v1 - 89) < 0)
    operator delete(*(void **)(v1 - 112));
  __cxa_rethrow();
}

void sub_1B031B210()
{
  __cxa_end_catch();
  JUMPOUT(0x1B031B218);
}

_BYTE *sub_1B031B22C(uint64_t a1, _BYTE *__dst, _BYTE *__src, _BYTE *a4)
{
  _BYTE *v6;
  uint64_t v8;
  BOOL v9;
  void **v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  BOOL v16;
  unint64_t v17;
  char *v18;
  void *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  void *v33;
  char *v34;
  char *v35;
  char *v36;
  void *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  _QWORD *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  int64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  unint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  __int128 *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  __int128 *v78;
  char *v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  unint64_t v83;
  int64x2_t v84;
  unint64_t v85;
  unint64_t v86;
  int64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  __int128 *v92;
  char *v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void **v97;
  unint64_t v98;
  BOOL v99;
  size_t v100;
  _BYTE *v102;
  void *v103;

  v6 = __dst;
  v8 = *(_QWORD *)(a1 + 40);
  if (v8)
    v9 = __dst == __src;
  else
    v9 = 1;
  if (!v9)
  {
    v97 = *(void ***)(a1 + 8);
    v98 = *(_QWORD *)(a1 + 32);
    do
    {
      *v6 = (*(_BYTE **)((char *)v97 + ((v98 >> 9) & 0x7FFFFFFFFFFFF8)))[v98 & 0xFFF];
      v97 = *(void ***)(a1 + 8);
      v8 = *(_QWORD *)(a1 + 40) - 1;
      v98 = *(_QWORD *)(a1 + 32) + 1;
      *(_QWORD *)(a1 + 32) = v98;
      *(_QWORD *)(a1 + 40) = v8;
      if (v98 >= 0x2000)
      {
        operator delete(*v97);
        v97 = (void **)(*(_QWORD *)(a1 + 8) + 8);
        *(_QWORD *)(a1 + 8) = v97;
        v8 = *(_QWORD *)(a1 + 40);
        v98 = *(_QWORD *)(a1 + 32) - 4096;
        *(_QWORD *)(a1 + 32) = v98;
      }
      ++v6;
      if (v8)
        v99 = v6 == __src;
      else
        v99 = 1;
    }
    while (!v99);
  }
  if (v8)
  {
    if (v6 != a4)
    {
      v10 = *(void ***)(a1 + 8);
      v11 = *(_QWORD *)(a1 + 32);
      v102 = a4;
      while (1)
      {
        v12 = *(char **)(a1 + 16);
        v13 = v12 - (char *)v10;
        v14 = v12 == (char *)v10 ? 0 : ((v12 - (char *)v10) << 9) - 1;
        v15 = *(_QWORD *)(a1 + 40) + v11;
        if (v14 == v15)
          break;
LABEL_92:
        (*(_BYTE **)((char *)v10 + ((v15 >> 9) & 0x7FFFFFFFFFFFF8)))[v15 & 0xFFF] = *v6;
        v83 = *(_QWORD *)(a1 + 32);
        ++*(_QWORD *)(a1 + 40);
        *v6 = *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + ((v83 >> 9) & 0x7FFFFFFFFFFFF8)) + (v83 & 0xFFF));
        v10 = *(void ***)(a1 + 8);
        v84 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_1B03AFDE0);
        *(int64x2_t *)(a1 + 32) = v84;
        v11 = v84.i64[0];
        if (v84.i64[0] >= 0x2000uLL)
        {
          operator delete(*v10);
          v10 = (void **)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v10;
          v11 = *(_QWORD *)(a1 + 32) - 4096;
          *(_QWORD *)(a1 + 32) = v11;
        }
        if (++v6 == a4)
          return a4;
      }
      v16 = v11 >= 0x1000;
      v17 = v11 - 4096;
      if (v16)
      {
        *(_QWORD *)(a1 + 32) = v17;
        v18 = (char *)(v10 + 1);
        v19 = *v10;
        *(_QWORD *)(a1 + 8) = v10 + 1;
        if (v12 == *(char **)(a1 + 24))
        {
          v20 = *(char **)a1;
          if ((unint64_t)v18 > *(_QWORD *)a1)
          {
            v21 = (uint64_t)&v18[-*(_QWORD *)a1] >> 3;
            if (v21 >= -1)
              v22 = v21 + 1;
            else
              v22 = v21 + 2;
            v23 = v22 >> 1;
            v24 = &v18[-8 * (v22 >> 1)];
            v25 = v12 - v18;
            if (v12 != v18)
            {
              memmove(&v18[-8 * (v22 >> 1)], v10 + 1, v12 - v18);
              v12 = *(char **)(a1 + 8);
            }
            v26 = &v12[-8 * v23];
            v12 = &v24[v25];
            goto LABEL_24;
          }
          v39 = (v12 - v20) >> 2;
          if (v12 == v20)
            v39 = 1;
          if (v39 >> 61)
LABEL_118:
            sub_1B02D72AC();
          v40 = v39 >> 2;
          v41 = 8 * v39;
          v42 = (char *)operator new(8 * v39);
          v43 = &v42[8 * v40];
          v44 = v12 - v18;
          v9 = v12 == v18;
          v12 = v43;
          if (!v9)
          {
            v12 = &v43[v44 & 0xFFFFFFFFFFFFFFF8];
            v45 = v44 - 8;
            if ((unint64_t)(v44 - 8) >= 0x38)
            {
              v46 = &v42[8 * v40];
              if ((unint64_t)(v46 - v18) >= 0x20)
              {
                v76 = (v45 >> 3) + 1;
                v77 = 8 * (v76 & 0x3FFFFFFFFFFFFFFCLL);
                v46 = &v43[v77];
                v18 += v77;
                v78 = (__int128 *)(v10 + 3);
                v79 = &v42[8 * v40 + 16];
                v80 = v76 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v81 = *v78;
                  *((_OWORD *)v79 - 1) = *(v78 - 1);
                  *(_OWORD *)v79 = v81;
                  v78 += 2;
                  v79 += 32;
                  v80 -= 4;
                }
                while (v80);
                if (v76 == (v76 & 0x3FFFFFFFFFFFFFFCLL))
                  goto LABEL_88;
              }
            }
            else
            {
              v46 = &v42[8 * v40];
            }
            do
            {
              v82 = *(_QWORD *)v18;
              v18 += 8;
              *(_QWORD *)v46 = v82;
              v46 += 8;
            }
            while (v46 != v12);
          }
LABEL_88:
          *(_QWORD *)a1 = v42;
          *(_QWORD *)(a1 + 8) = v43;
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 24) = &v42[v41];
          a4 = v102;
          if (v20)
          {
            operator delete(v20);
            v12 = *(char **)(a1 + 16);
          }
        }
LABEL_90:
        *(_QWORD *)v12 = v19;
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_91;
      }
      v27 = v13 >> 3;
      v28 = *(char **)(a1 + 24);
      v29 = (uint64_t)&v28[-*(_QWORD *)a1];
      if (v13 >> 3 < (unint64_t)(v29 >> 3))
      {
        if (v28 != v12)
        {
          v103 = operator new(0x1000uLL);
          sub_1B031B9B0((char **)a1, &v103);
          a4 = v102;
LABEL_91:
          v10 = *(void ***)(a1 + 8);
          v15 = *(_QWORD *)(a1 + 40) + *(_QWORD *)(a1 + 32);
          goto LABEL_92;
        }
        v103 = operator new(0x1000uLL);
        sub_1B031BB3C((void **)a1, &v103);
        v47 = *(_QWORD **)(a1 + 8);
        v12 = *(char **)(a1 + 16);
        v48 = (char *)(v47 + 1);
        v19 = (void *)*v47;
        *(_QWORD *)(a1 + 8) = v47 + 1;
        a4 = v102;
        if (v12 == *(char **)(a1 + 24))
        {
          v20 = *(char **)a1;
          if ((unint64_t)v48 > *(_QWORD *)a1)
          {
            v49 = (uint64_t)&v48[-*(_QWORD *)a1] >> 3;
            if (v49 >= -1)
              v50 = v49 + 1;
            else
              v50 = v49 + 2;
            v51 = v50 >> 1;
            v52 = &v48[-8 * (v50 >> 1)];
            v53 = v12 - v48;
            if (v12 != v48)
            {
              memmove(&v48[-8 * (v50 >> 1)], v48, v12 - v48);
              v48 = *(char **)(a1 + 8);
            }
            v12 = &v52[v53];
            v26 = &v48[-8 * v51];
LABEL_24:
            *(_QWORD *)(a1 + 8) = v26;
            *(_QWORD *)(a1 + 16) = v12;
            a4 = v102;
            goto LABEL_90;
          }
          v85 = (v12 - v20) >> 2;
          if (v12 == v20)
            v85 = 1;
          if (v85 >> 61)
            goto LABEL_118;
          v86 = v85 >> 2;
          v41 = 8 * v85;
          v42 = (char *)operator new(8 * v85);
          v43 = &v42[8 * v86];
          v87 = v12 - v48;
          v9 = v12 == v48;
          v12 = v43;
          if (!v9)
          {
            v12 = &v43[v87 & 0xFFFFFFFFFFFFFFF8];
            v88 = v87 - 8;
            if ((unint64_t)(v87 - 8) < 0x38)
            {
              v89 = &v42[8 * v86];
              do
              {
LABEL_104:
                v96 = *(_QWORD *)v48;
                v48 += 8;
                *(_QWORD *)v89 = v96;
                v89 += 8;
              }
              while (v89 != v12);
              goto LABEL_88;
            }
            v89 = &v42[8 * v86];
            if ((unint64_t)(v89 - v48) < 0x20)
              goto LABEL_104;
            v90 = (v88 >> 3) + 1;
            v91 = 8 * (v90 & 0x3FFFFFFFFFFFFFFCLL);
            v89 = &v43[v91];
            v48 += v91;
            v92 = (__int128 *)(v47 + 3);
            v93 = &v42[8 * v86 + 16];
            v94 = v90 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v95 = *v92;
              *((_OWORD *)v93 - 1) = *(v92 - 1);
              *(_OWORD *)v93 = v95;
              v92 += 2;
              v93 += 32;
              v94 -= 4;
            }
            while (v94);
            if (v90 != (v90 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_104;
          }
          goto LABEL_88;
        }
        goto LABEL_90;
      }
      v30 = v29 >> 2;
      if (v28 == *(char **)a1)
        v31 = 1;
      else
        v31 = v30;
      if (v31 >> 61)
        goto LABEL_118;
      v32 = (char *)operator new(8 * v31);
      v33 = operator new(0x1000uLL);
      v34 = &v32[8 * v27];
      v35 = &v32[8 * v31];
      if (v27 == v31)
      {
        v37 = v33;
        if (v13 < 1)
        {
          if (v12 == (char *)v10)
            v54 = 1;
          else
            v54 = v13 >> 2;
          if (v54 >> 61)
            sub_1B02D72AC();
          v34 = (char *)operator new(8 * v54);
          v35 = &v34[8 * v54];
          operator delete(v32);
          v10 = *(void ***)(a1 + 8);
          v12 = *(char **)(a1 + 16);
          v32 = v34;
        }
        else
        {
          v38 = v27 + 2;
          if (v27 >= -1)
            v38 = v27 + 1;
          v34 -= 8 * (v38 >> 1);
        }
        *(_QWORD *)v34 = v37;
        v36 = v34 + 8;
        a4 = v102;
        if (v12 == (char *)v10)
          goto LABEL_59;
      }
      else
      {
        *(_QWORD *)v34 = v33;
        v36 = v34 + 8;
        a4 = v102;
        if (v12 == (char *)v10)
        {
LABEL_59:
          v55 = *(char **)a1;
          *(_QWORD *)a1 = v32;
          *(_QWORD *)(a1 + 8) = v34;
          *(_QWORD *)(a1 + 16) = v36;
          *(_QWORD *)(a1 + 24) = v35;
          if (v55)
            operator delete(v55);
          goto LABEL_91;
        }
      }
      do
      {
        if (v34 == v32)
        {
          if (v36 >= v35)
          {
            if (v35 == v34)
              v61 = 1;
            else
              v61 = (v35 - v34) >> 2;
            if (v61 >> 61)
              sub_1B02D72AC();
            v62 = (char *)operator new(8 * v61);
            v32 = v62;
            v63 = (v61 + 3) >> 2;
            v56 = &v62[8 * v63];
            v57 = v56;
            v64 = v36 - v34;
            if (v36 != v34)
            {
              v57 = &v56[v64 & 0xFFFFFFFFFFFFFFF8];
              v65 = v64 - 8;
              v66 = &v62[8 * v63];
              v67 = v34;
              if (v65 < 0x38)
                goto LABEL_122;
              v68 = 8 * v63;
              v66 = &v62[8 * v63];
              v67 = v34;
              if ((unint64_t)(v66 - v34) < 0x20)
                goto LABEL_122;
              v69 = (v65 >> 3) + 1;
              v70 = 8 * (v69 & 0x3FFFFFFFFFFFFFFCLL);
              v66 = &v56[v70];
              v67 = &v34[v70];
              v71 = (__int128 *)(v34 + 16);
              v72 = &v62[v68 + 16];
              v73 = v69 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v74 = *v71;
                *((_OWORD *)v72 - 1) = *(v71 - 1);
                *(_OWORD *)v72 = v74;
                v71 += 2;
                v72 += 32;
                v73 -= 4;
              }
              while (v73);
              if (v69 != (v69 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_122:
                do
                {
                  v75 = *(_QWORD *)v67;
                  v67 += 8;
                  *(_QWORD *)v66 = v75;
                  v66 += 8;
                }
                while (v66 != v57);
              }
            }
            v35 = &v62[8 * v61];
            operator delete(v34);
          }
          else
          {
            v59 = (v35 - v36) >> 3;
            if (v59 >= -1)
              v60 = v59 + 1;
            else
              v60 = v59 + 2;
            v57 = &v36[8 * (v60 >> 1)];
            v56 = &v34[8 * (v60 >> 1)];
            if (v36 == v34)
            {
              v32 = v36;
            }
            else
            {
              memmove(&v34[8 * (v60 >> 1)], v34, v36 - v34);
              v32 = v34;
            }
          }
        }
        else
        {
          v56 = v34;
          v57 = v36;
        }
        v58 = *((_QWORD *)v12 - 1);
        v12 -= 8;
        *((_QWORD *)v56 - 1) = v58;
        v34 = v56 - 8;
        v36 = v57;
      }
      while (v12 != *(char **)(a1 + 8));
      goto LABEL_59;
    }
  }
  else if (v6 != __src)
  {
    v100 = a4 - __src;
    if (v100)
      memmove(v6, __src, v100);
    return &v6[v100];
  }
  return a4;
}

void sub_1B031B94C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B031B96C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B031B980(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B031B998(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B031B9B0(char **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  BOOL v19;
  int64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  __int128 *v27;
  _OWORD *v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;

  v4 = a1[2];
  if (v4 != a1[3])
    goto LABEL_22;
  v5 = *a1;
  v6 = a1[1];
  if (v6 > *a1)
  {
    v7 = (v6 - *a1) >> 3;
    if (v7 >= -1)
      v8 = v7 + 1;
    else
      v8 = v7 + 2;
    v9 = v8 >> 1;
    v10 = -v9;
    v11 = &v6[-8 * v9];
    v12 = v4 - v6;
    if (v4 != v6)
    {
      memmove(&v6[-8 * v9], a1[1], v4 - v6);
      v4 = a1[1];
    }
    v13 = &v4[8 * v10];
    v4 = &v11[v12];
    a1[1] = v13;
    a1[2] = &v11[v12];
    goto LABEL_22;
  }
  v14 = (v4 - v5) >> 2;
  if (v4 == v5)
    v14 = 1;
  if (v14 >> 61)
    sub_1B02D72AC();
  v15 = v14 >> 2;
  v16 = 8 * v14;
  v17 = (char *)operator new(8 * v14);
  v18 = &v17[8 * v15];
  v20 = v4 - v6;
  v19 = v4 == v6;
  v4 = v18;
  if (!v19)
  {
    v4 = &v18[v20 & 0xFFFFFFFFFFFFFFF8];
    v21 = v20 - 8;
    if ((unint64_t)(v20 - 8) < 0x38)
    {
      v22 = &v17[8 * v15];
      do
      {
LABEL_19:
        v31 = *(_QWORD *)v6;
        v6 += 8;
        *(_QWORD *)v22 = v31;
        v22 += 8;
      }
      while (v22 != v4);
      goto LABEL_20;
    }
    v23 = &v17[8 * v15];
    v22 = v23;
    if ((unint64_t)(v23 - v6) < 0x20)
      goto LABEL_19;
    v24 = (v21 >> 3) + 1;
    v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
    v22 = &v18[v25];
    v26 = &v6[v25];
    v27 = (__int128 *)(v6 + 16);
    v28 = v23 + 16;
    v29 = v24 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v30 = *v27;
      *(v28 - 1) = *(v27 - 1);
      *v28 = v30;
      v27 += 2;
      v28 += 2;
      v29 -= 4;
    }
    while (v29);
    v6 = v26;
    if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_19;
  }
LABEL_20:
  *a1 = v17;
  a1[1] = v18;
  a1[2] = v4;
  a1[3] = &v17[v16];
  if (v5)
  {
    operator delete(v5);
    v4 = a1[2];
  }
LABEL_22:
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void sub_1B031BB3C(void **a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 *v26;
  _OWORD *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;

  v4 = (char *)a1[1];
  if (v4 == *a1)
  {
    v7 = a1[2];
    v6 = a1[3];
    if (v7 >= v6)
    {
      v13 = v6 - v4;
      v12 = v13 == 0;
      v14 = v13 >> 2;
      if (v12)
        v14 = 1;
      if (v14 >> 61)
        sub_1B02D72AC();
      v15 = (v14 + 3) >> 2;
      v16 = 8 * v14;
      v17 = (char *)operator new(8 * v14);
      v5 = &v17[8 * v15];
      v18 = v5;
      v19 = v7 - v4;
      if (v7 != v4)
      {
        v18 = &v5[v19 & 0xFFFFFFFFFFFFFFF8];
        v20 = v19 - 8;
        v21 = &v17[8 * v15];
        v22 = v4;
        if (v20 < 0x38)
          goto LABEL_27;
        v23 = &v17[8 * v15];
        v21 = v23;
        v22 = v4;
        if ((unint64_t)(v23 - v4) < 0x20)
          goto LABEL_27;
        v24 = (v20 >> 3) + 1;
        v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
        v21 = &v5[v25];
        v22 = &v4[v25];
        v26 = (__int128 *)(v4 + 16);
        v27 = v23 + 16;
        v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v29 = *v26;
          *(v27 - 1) = *(v26 - 1);
          *v27 = v29;
          v26 += 2;
          v27 += 2;
          v28 -= 4;
        }
        while (v28);
        if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_27:
          do
          {
            v30 = *(_QWORD *)v22;
            v22 += 8;
            *(_QWORD *)v21 = v30;
            v21 += 8;
          }
          while (v21 != v18);
        }
      }
      *a1 = v17;
      a1[1] = v5;
      a1[2] = v18;
      a1[3] = &v17[v16];
      if (v4)
      {
        operator delete(v4);
        v5 = (char *)a1[1];
      }
    }
    else
    {
      v8 = (v6 - v7) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v11 = &v7[8 * (v9 >> 1)];
      v5 = &v11[-(v7 - v4)];
      if (v7 != v4)
      {
        memmove(&v11[-(v7 - v4)], v4, v7 - v4);
        v4 = (char *)a1[2];
      }
      a1[1] = v5;
      a1[2] = &v4[8 * v10];
    }
  }
  else
  {
    v5 = (char *)a1[1];
  }
  *((_QWORD *)v5 - 1) = *a2;
  a1[1] = (char *)a1[1] - 8;
}

uint64_t sub_1B031BCD4(uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 2048;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 4096;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1B031BD98(_QWORD *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  _QWORD *v21;
  std::__shared_weak_count *v22;
  _BYTE v23[24];
  _BYTE *v24;
  _BYTE v25[24];
  _BYTE *v26;
  std::__shared_weak_count *v27;
  void *v28;
  void *v29;
  void *__p;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v4 = (std::__shared_weak_count *)operator new(0x30uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD7A8;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD0E8;
  v4[1].__shared_owners_ = (uint64_t)a1;
  v4[1].__shared_weak_owners_ = *(_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24) + 40);
  v20 = v4;
  v21 = &v4[1].__vftable;
  v22 = v4;
  do
    v6 = __ldxr(p_shared_owners);
  while (__stxr(v6 + 1, p_shared_owners));
  v24 = 0;
  sub_1B032B480((uint64_t)v25, (uint64_t)&v21, (uint64_t)v23, 1);
  sub_1B032AB58((uint64_t)v25, 0, a2);
  if (v31 < 0)
    operator delete(__p);
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v7 = v27;
  if (v27)
  {
    v8 = (unint64_t *)&v27->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
      v10 = v26;
      if (v26 != v25)
        goto LABEL_12;
LABEL_15:
      v11 = 4;
      v10 = v25;
      goto LABEL_16;
    }
  }
  v10 = v26;
  if (v26 == v25)
    goto LABEL_15;
LABEL_12:
  if (!v10)
    goto LABEL_17;
  v11 = 5;
LABEL_16:
  (*(void (**)(_QWORD *))(*v10 + 8 * v11))(v10);
LABEL_17:
  v12 = v24;
  if (v24 == v23)
  {
    v13 = 4;
    v12 = v23;
    goto LABEL_21;
  }
  if (v24)
  {
    v13 = 5;
LABEL_21:
    (*(void (**)(_QWORD *))(*v12 + 8 * v13))(v12);
  }
  v14 = v22;
  if (v22)
  {
    v15 = (unint64_t *)&v22->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v20)
  {
    v17 = (unint64_t *)&v20->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  return a1;
}

void sub_1B031BFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char a17)
{
  char *v18;
  uint64_t v19;

  sub_1B032B244((uint64_t)&a17);
  v18 = a16;
  if (a16 == &a13)
  {
    v19 = 4;
    v18 = &a13;
  }
  else
  {
    if (!a16)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  sub_1B0320680((uint64_t)&a11);
  sub_1B0320680((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_1B031C01C(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  size_t v6;
  const void *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  _BOOL4 v14;
  BOOL v15;
  uint64_t *v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  _BOOL4 v22;

  if (a1 != 1)
    return 0;
  v3 = a2 + 8;
  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
    goto LABEL_41;
  v5 = *(char *)(a3 + 23);
  v6 = v5 >= 0 ? *(unsigned __int8 *)(a3 + 23) : *(_QWORD *)(a3 + 8);
  v7 = v5 >= 0 ? (const void *)a3 : *(const void **)a3;
  v8 = a2 + 8;
  do
  {
    v9 = *(char *)(v4 + 55);
    if (v9 >= 0)
      v10 = *(unsigned __int8 *)(v4 + 55);
    else
      v10 = *(_QWORD *)(v4 + 40);
    if (v9 >= 0)
      v11 = (const void *)(v4 + 32);
    else
      v11 = *(const void **)(v4 + 32);
    if (v6 >= v10)
      v12 = v10;
    else
      v12 = v6;
    v13 = memcmp(v11, v7, v12);
    v14 = v10 < v6;
    if (v13)
      v14 = v13 < 0;
    v15 = !v14;
    if (v14)
      v16 = (uint64_t *)(v4 + 8);
    else
      v16 = (uint64_t *)v4;
    if (v15)
      v8 = v4;
    v4 = *v16;
  }
  while (*v16);
  if (v8 == v3)
    goto LABEL_41;
  v17 = *(char *)(v8 + 55);
  v18 = v17 >= 0 ? *(unsigned __int8 *)(v8 + 55) : *(_QWORD *)(v8 + 40);
  v19 = v17 >= 0 ? (const void *)(v8 + 32) : *(const void **)(v8 + 32);
  v20 = v18 >= v6 ? v6 : v18;
  v21 = memcmp(v7, v19, v20);
  v22 = v6 < v18;
  if (v21)
    v22 = v21 < 0;
  if (v22)
LABEL_41:
    v8 = v3;
  return v8 != v3;
}

uint64_t sub_1B031C13C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  uint64_t v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v21[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16 = v7;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
  std::ios_base::init(v9, v17);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16 = v4 + 24;
  v21[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v17[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 16;
  sub_1B02D7994(&v16, (uint64_t)"[KeyError] ", 11);
  sub_1B02D7994(&v16, (uint64_t)"Expected bridge_model_spec.json to contain key: ", 48);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  sub_1B02D7994(&v16, v12, v13);
  std::stringbuf::str();
  v16 = *v6;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
  v17[0] = v10 + 16;
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v21);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  v14 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v14 = *(const char **)(a1 + 16);
  std::runtime_error::runtime_error((std::runtime_error *)a1, v14);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  return a1;
}

void sub_1B031C2E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B031C340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1B031C354(std::runtime_error *a1)
{
  uint64_t v2;

  std::runtime_error::~runtime_error(a1);
  if (*(char *)(v2 + 39) < 0)
    operator delete(a1[1].__vftable);
  return a1;
}

uint64_t **sub_1B031C398(char *a1, const char *a2)
{
  uint64_t **v4;
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  void *exception;
  unint64_t v13;
  char *v14;
  std::string *v15;
  __int128 v16;
  std::string v17;
  __int128 __dst;
  unint64_t v19;

  if (*a1)
  {
    if (*a1 != 1)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      v13 = *a1;
      if (v13 > 8)
        v14 = "number";
      else
        v14 = off_1E60CDE48[v13];
      sub_1B02DCBB8(&v17, v14);
      v15 = std::string::insert(&v17, 0, "cannot use operator[] with a string argument with ");
      v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v19 = v15->__r_.__value_.__r.__words[2];
      __dst = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      sub_1B0330F3C(305, (uint64_t)&__dst, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
    }
    v4 = (uint64_t **)*((_QWORD *)a1 + 1);
  }
  else
  {
    *a1 = 1;
    v4 = (uint64_t **)operator new(0x18uLL);
    v4[2] = 0;
    v4[1] = 0;
    *v4 = (uint64_t *)(v4 + 1);
    *((_QWORD *)a1 + 1) = v4;
  }
  v5 = strlen(a2);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    p_dst = (__int128 *)operator new(v8 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v19 = v9 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_12;
  }
  HIBYTE(v19) = v5;
  p_dst = &__dst;
  if (v5)
LABEL_12:
    memcpy(p_dst, a2, v6);
  *((_BYTE *)p_dst + v6) = 0;
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
  v10 = sub_1B0333C8C(v4, (const void **)&__dst, (uint64_t)&unk_1B03B0E24, &v17);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)__dst);
  return v10 + 7;
}

void sub_1B031C560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B031C5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  uint64_t v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v21[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16 = v7;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
  std::ios_base::init(v9, v17);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16 = v4 + 24;
  v21[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v17[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 16;
  sub_1B02D7994(&v16, (uint64_t)"[KeyError] ", 11);
  sub_1B02D7994(&v16, (uint64_t)"Expected model_spec.json to contain key: ", 41);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  sub_1B02D7994(&v16, v12, v13);
  std::stringbuf::str();
  v16 = *v6;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
  v17[0] = v10 + 16;
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v21);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  v14 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v14 = *(const char **)(a1 + 16);
  std::runtime_error::runtime_error((std::runtime_error *)a1, v14);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  return a1;
}

void sub_1B031C788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B031C7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B031C7F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  uint64_t v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v21[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16 = v7;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
  std::ios_base::init(v9, v17);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16 = v4 + 24;
  v21[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v17[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 16;
  sub_1B02D7994(&v16, (uint64_t)"[KeyError] ", 11);
  sub_1B02D7994(&v16, (uint64_t)"runtime_parameters.json file exists but does not contain filterTokens: ", 71);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  sub_1B02D7994(&v16, v12, v13);
  std::stringbuf::str();
  v16 = *v6;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
  v17[0] = v10 + 16;
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v21);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  v14 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v14 = *(const char **)(a1 + 16);
  std::runtime_error::runtime_error((std::runtime_error *)a1, v14);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  return a1;
}

void sub_1B031C9A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B031C9F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B031CA0C(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)(a1 + 48));
  return a1;
}

uint64_t sub_1B031CA64(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *(_QWORD *)(a1 + 24) = &unk_1E60CCA78;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(void **)(a1 + 40);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(void **)(a1 + 40);
  if (v5)
  {
LABEL_6:
    *(_QWORD *)(a1 + 48) = v5;
    operator delete(v5);
  }
LABEL_7:
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B031CB08(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  int32x2_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int32x2_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  int v32;
  void *__p;
  char *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;

  v2 = *(int *)(a1 + 4);
  v3 = operator new(0x10uLL);
  *v3 = 1;
  v3[1] = v2;
  v29 = v3 + 2;
  v30 = v3 + 2;
  v28 = v3;
  v4.i32[0] = 0;
  sub_1B0325CC0((int32x4_t **)&v28, (uint64_t)&v31, v4);
  *(_DWORD *)(a1 + 16) = v32;
  if ((void **)(a1 + 8) != &v31)
    sub_1B03267E8((_QWORD *)(a1 + 24), (char *)__p, v34, (v34 - (_BYTE *)__p) >> 3);
  v6 = v35;
  v5 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v31 = &unk_1E60CCA78;
  v12 = v36;
  if (v36)
  {
    v13 = (unint64_t *)&v36->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v15 = *(int *)(a1 + 4);
  v16 = operator new(0x10uLL);
  *v16 = 1;
  v16[1] = v15;
  v29 = v16 + 2;
  v30 = v16 + 2;
  v28 = v16;
  v17.i32[0] = 0;
  sub_1B0325CC0((int32x4_t **)&v28, (uint64_t)&v31, v17);
  *(_DWORD *)(a1 + 72) = v32;
  if ((void **)(a1 + 64) != &v31)
    sub_1B03267E8((_QWORD *)(a1 + 80), (char *)__p, v34, (v34 - (_BYTE *)__p) >> 3);
  v19 = v35;
  v18 = v36;
  if (v36)
  {
    v20 = (unint64_t *)&v36->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(std::__shared_weak_count **)(a1 + 112);
  *(_QWORD *)(a1 + 104) = v19;
  *(_QWORD *)(a1 + 112) = v18;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v31 = &unk_1E60CCA78;
  v25 = v36;
  if (v36)
  {
    v26 = (unint64_t *)&v36->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (__p)
  {
    v34 = (char *)__p;
    operator delete(__p);
  }
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  *(_DWORD *)a1 = 0;
}

void sub_1B031CD68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12)
{
  sub_1B031CD9C(&a12);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B031CD9C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

uint64_t sub_1B031CE20(int *a1, unsigned int a2)
{
  uint64_t result;
  uint64_t v4;
  std::runtime_error *exception;

  if (a1[4] != 1
    || (*(float *)((*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 6) + 24))(*((_QWORD *)a1 + 6)) + 4 * *a1) = (float)a2,
        a1[18] != 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)a1 + 13) + 24))(*((_QWORD *)a1 + 13));
  v4 = *a1;
  *(_DWORD *)(result + 4 * v4) = 1065353216;
  *a1 = v4 + 1;
  return result;
}

void sub_1B031CEE8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B031CEFC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B031CF10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v4;
  NSObject *v5;
  _BYTE *v6;
  std::string::size_type size;
  std::string::size_type i;
  __int128 v9;
  unsigned __int8 *v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  char *v14;
  char *v15;
  char *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  void *v19;
  std::string::size_type v20;
  uint64_t v21;
  void **v22;
  char v23;
  void **v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  int v30;
  int v31;
  NSObject *v32;
  _BOOL4 v33;
  const char *v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  NSObject *v38;
  std::string *p_src;
  std::string::size_type v40;
  char *v41;
  __int128 v42;
  unsigned __int8 *v43;
  uint64_t **v44;
  uint64_t **v45;
  uint64_t **v46;
  uint64_t **v47;
  uint64_t **v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  void *v53;
  std::string::size_type v54;
  void *v55;
  _QWORD *v56;
  uint64_t v57;
  void **v58;
  void **v59;
  void **v60;
  char v61;
  void **v62;
  unint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  int32x2_t v67;
  uint64_t v68;
  std::string::size_type v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  uint64_t v90;
  void *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _BOOL4 v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t *v121;
  uint64_t **v122;
  int v123;
  unint64_t v124;
  std::string::size_type v125;
  std::string::size_type v126;
  unint64_t v127;
  int v128;
  std::string::size_type v129;
  std::string::size_type v130;
  __int128 *v131;
  __int128 *v132;
  unsigned __int8 *v133;
  int v134;
  char *v135;
  __int128 v136;
  _BYTE *v137;
  const std::string *v138;
  char *v139;
  int64_t v140;
  uint64_t v141;
  uint64_t v142;
  std::string *v143;
  unint64_t v144;
  uint64_t v145;
  unint64_t v146;
  char *v147;
  uint64_t v148;
  const std::string *v149;
  uint64_t v150;
  __int128 v151;
  char *v152;
  char *v153;
  char *v154;
  std::string::size_type v155;
  uint64_t v156;
  std::string::size_type v157;
  __int128 v158;
  std::string::size_type v159;
  std::string *v160;
  std::string *v161;
  void *v162;
  __int128 v163;
  std::string *v164;
  __int128 v165;
  std::string *v166;
  unint64_t v167;
  char *j;
  __int128 v169;
  std::string *v170;
  char *v171;
  uint64_t v172;
  __int128 *v173;
  __int128 v174;
  void **v175;
  void **k;
  __int128 *v177;
  void **v178;
  void **v179;
  void *v180;
  int v181;
  std::string::size_type v182;
  _QWORD *v183;
  _QWORD *v184;
  _QWORD *v185;
  void **v186;
  void **v187;
  void **v188;
  NSObject *v189;
  _BOOL4 v190;
  const char *v191;
  _QWORD *v192;
  _QWORD *v193;
  uint64_t v194;
  _QWORD *v195;
  _QWORD *v196;
  std::__shared_weak_count *v197;
  unint64_t *v198;
  unint64_t v199;
  uint64_t v200;
  _QWORD *v201;
  std::__shared_weak_count *v202;
  unint64_t *v203;
  unint64_t v204;
  std::string::size_type v205;
  uint64_t v206;
  uint64_t v207;
  void *v208;
  uint64_t v209;
  char *v210;
  void **v211;
  void *v212;
  std::string::size_type v213;
  std::string::size_type v214;
  void *v215;
  void **v216;
  void **v217;
  void *v218;
  std::string::size_type v219;
  std::string::size_type v220;
  void *v221;
  void **v222;
  void *v224;
  void *exception;
  void *v226;
  std::runtime_error *v227;
  void *v228;
  _QWORD *v229;
  void *v230;
  _QWORD *v231;
  std::string *v232;
  _QWORD *v233;
  char *v234;
  char *v235;
  uint64_t *v236;
  char *v237;
  void **v238;
  int v239;
  int v240;
  uint64_t v242;
  std::string *v243;
  _QWORD *v244;
  __int128 *v245;
  std::string v247;
  __int128 v248;
  uint64_t v249;
  void *v250;
  std::string v251;
  _BYTE __dst[32];
  std::string v253;
  std::string v254;
  std::string v255;
  __int128 v256;
  __int128 v257;
  int v258;
  void *v259;
  char v260;
  uint64_t v261;
  std::string v262;
  void *v263;
  __int128 v264;
  void *v265;
  char *v266;
  uint64_t v267;
  void *v268;
  __int128 v269;
  char v270[8];
  uint64_t v271;
  std::string __src;
  std::string v273;
  char v274;
  _QWORD *v275;
  std::string v276;
  char *v277;
  _QWORD *v278;
  std::string __p;
  _BYTE v280[40];
  _BYTE v281[48];
  void *v282;
  void *v283;
  int v284;
  char v285;
  _BYTE v286[48];
  int v287;
  char v288;
  void *v289[2];
  __int128 v290;
  uint64_t v291;
  std::string buf;
  std::string v293;
  __int128 v294;
  _BYTE v295[24];
  uint64_t v296;
  std::string v297;
  __int128 v298;
  uint64_t v299;

  v299 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  v238 = (void **)(a1 + 88);
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 224) = &unk_1E60CC938;
  *(_DWORD *)(a1 + 232) = 1;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 296) = 1;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_QWORD *)(a1 + 288) = &unk_1E60CC938;
  *(_DWORD *)(a1 + 352) = 1;
  *(_OWORD *)(a1 + 360) = 0u;
  v243 = (std::string *)(a1 + 280);
  v244 = (_QWORD *)(a1 + 360);
  *(_OWORD *)(a1 + 376) = 0u;
  *(_QWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 344) = &unk_1E60CC938;
  *(_DWORD *)(a1 + 408) = 1;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_QWORD *)(a1 + 392) = 0;
  *(_QWORD *)(a1 + 400) = &unk_1E60CC938;
  *(_DWORD *)(a1 + 464) = 1;
  *(_OWORD *)(a1 + 472) = 0u;
  v4 = (_QWORD *)(a1 + 472);
  *(_QWORD *)(a1 + 504) = 0;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_QWORD *)(a1 + 448) = 0;
  *(_QWORD *)(a1 + 456) = &unk_1E60CC938;
  *(_BYTE *)(a1 + 512) = 0;
  *(_BYTE *)(a1 + 536) = 0;
  v236 = (uint64_t *)(a1 + 544);
  v237 = (char *)(a1 + 512);
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  strcpy((char *)&__p, "bridge_model_spec.json");
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 22;
  sub_1B0320384(a2, (char *)&__p, &v261);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v262.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v262.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_3:
    *(std::string *)__dst = v262;
    goto LABEL_6;
  }
  sub_1B02EB0A8(__dst, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
LABEL_6:
  v233 = v4;
  if (qword_1EEEB2D28 != -1)
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
  v5 = (id)qword_1EEEB2D20;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    v6 = __dst;
    if (__dst[23] < 0)
      v6 = *(_BYTE **)__dst;
    LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)v6;
    _os_log_impl(&dword_1B02D2000, v5, OS_LOG_TYPE_DEBUG, "Attempting to parse ModelSpec from JSON path: %s", (uint8_t *)&__p, 0xCu);
  }

  if ((__dst[23] & 0x80000000) != 0)
    sub_1B02EB0A8(&v276, *(void **)__dst, *(unint64_t *)&__dst[8]);
  else
    v276 = *(std::string *)__dst;
  if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&__p, v276.__r_.__value_.__l.__data_, v276.__r_.__value_.__l.__size_);
  else
    __p = v276;
  sub_1B032A2E4((uint64_t)&buf, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCF20;
    if ((SHIBYTE(v276.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
  }
  else
  {
    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCF20;
    if ((SHIBYTE(v276.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_20;
  }
  operator delete(v276.__r_.__value_.__l.__data_);
LABEL_20:
  LOBYTE(v250) = 0;
  v251.__r_.__value_.__r.__words[0] = 0;
  sub_1B031BD98((_QWORD *)v293.__r_.__value_.__l.__size_, (unsigned __int8 *)&v250);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "bolt_id");
  v280[23] = 8;
  strcpy(v280, "net_file");
  v281[7] = 11;
  strcpy(&v280[24], "output_name");
  v281[31] = 7;
  strcpy(&v281[8], "encoder");
  HIBYTE(v282) = 10;
  strcpy(&v281[32], "num_layers");
  sub_1B0318B00(&v273, (uint64_t)&__p, 5uLL);
  if (SHIBYTE(v282) < 0)
  {
    operator delete(*(void **)&v281[32]);
    if ((v281[31] & 0x80000000) == 0)
    {
LABEL_22:
      if ((v281[7] & 0x80000000) == 0)
        goto LABEL_23;
      goto LABEL_63;
    }
  }
  else if ((v281[31] & 0x80000000) == 0)
  {
    goto LABEL_22;
  }
  operator delete(*(void **)&v281[8]);
  if ((v281[7] & 0x80000000) == 0)
  {
LABEL_23:
    if ((v280[23] & 0x80000000) == 0)
      goto LABEL_24;
LABEL_64:
    operator delete(*(void **)v280);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_25;
LABEL_65:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_25;
  }
LABEL_63:
  operator delete(*(void **)&v280[24]);
  if ((v280[23] & 0x80000000) != 0)
    goto LABEL_64;
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_65;
LABEL_25:
  size = v273.__r_.__value_.__l.__size_;
  for (i = v273.__r_.__value_.__r.__words[0]; i != size; i += 24)
  {
    if (*(char *)(i + 23) < 0)
    {
      sub_1B02EB0A8(&__p, *(void **)i, *(_QWORD *)(i + 8));
    }
    else
    {
      v9 = *(_OWORD *)i;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(i + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v9;
    }
    if (!sub_1B031C01C((char)v250, (uint64_t)v251.__r_.__value_.__l.__data_, (uint64_t)&__p))
    {
      exception = __cxa_allocate_exception(0x28uLL);
      sub_1B031C13C((uint64_t)exception, (uint64_t)&__p);
      __cxa_throw(exception, (struct type_info *)&unk_1E60CB248, (void (*)(void *))sub_1B031C354);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v10 = (unsigned __int8 *)sub_1B031C398((char *)&v250, "encoder");
  sub_1B0333E08((uint64_t)&__p, v10);
  v11 = sub_1B031C398((char *)&v250, "bolt_id");
  memset(&v253, 0, sizeof(v253));
  sub_1B03346C8((const std::string **)v11, &v253);
  v12 = sub_1B031C398((char *)&v250, "net_file");
  memset(&v254, 0, sizeof(v254));
  sub_1B03346C8((const std::string **)v12, &v254);
  v13 = sub_1B031C398((char *)&v250, "output_name");
  memset(&v255, 0, sizeof(v255));
  sub_1B03346C8((const std::string **)v13, &v255);
  v14 = (char *)sub_1B031C398((char *)&__p, "seq_len");
  LODWORD(__src.__r_.__value_.__l.__data_) = 0;
  sub_1B0334804(v14, &__src);
  LODWORD(v256) = __src.__r_.__value_.__l.__data_;
  v15 = (char *)sub_1B031C398((char *)&__p, "embed_dim");
  LODWORD(__src.__r_.__value_.__l.__data_) = 0;
  sub_1B0334804(v15, &__src);
  DWORD1(v256) = __src.__r_.__value_.__l.__data_;
  v16 = (char *)sub_1B031C398((char *)&v250, "num_layers");
  LODWORD(__src.__r_.__value_.__l.__data_) = 0;
  sub_1B0334804(v16, &__src);
  DWORD2(v256) = __src.__r_.__value_.__l.__data_;
  sub_1B03299FC((uint64_t *)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  v17 = v273.__r_.__value_.__r.__words[0];
  v242 = a2;
  if (v273.__r_.__value_.__r.__words[0])
  {
    v18 = v273.__r_.__value_.__l.__size_;
    v19 = (void *)v273.__r_.__value_.__r.__words[0];
    if (v273.__r_.__value_.__l.__size_ != v273.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v18 - 1) < 0)
          operator delete(*(void **)(v18 - 24));
        v18 -= 24;
      }
      while (v18 != v17);
      v19 = (void *)v273.__r_.__value_.__r.__words[0];
    }
    v273.__r_.__value_.__l.__size_ = v17;
    operator delete(v19);
  }
  sub_1B03299FC((uint64_t *)&v251, v250);
  v20 = v293.__r_.__value_.__l.__size_;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCEC0;
  v293.__r_.__value_.__l.__size_ = 0;
  if (v20)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v20 + 8))(v20);
  if (v293.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)buf.__r_.__value_.__l.__size_);
    v21 = a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_46;
  }
  else
  {
    v21 = a1;
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_46;
  }
  operator delete(*(void **)v21);
LABEL_46:
  *(std::string *)v21 = v253;
  *((_BYTE *)&v253.__r_.__value_.__s + 23) = 0;
  v253.__r_.__value_.__s.__data_[0] = 0;
  v22 = (void **)(v21 + 24);
  if (*(char *)(v21 + 47) < 0)
    operator delete(*v22);
  v23 = 0;
  *(_OWORD *)v22 = *(_OWORD *)&v254.__r_.__value_.__l.__data_;
  *(_QWORD *)(v21 + 40) = *((_QWORD *)&v254.__r_.__value_.__l + 2);
  *((_BYTE *)&v254.__r_.__value_.__s + 23) = 0;
  v254.__r_.__value_.__s.__data_[0] = 0;
  v24 = (void **)(v21 + 48);
  if (*(char *)(v21 + 71) < 0)
  {
    operator delete(*v24);
    v23 = HIBYTE(v254.__r_.__value_.__r.__words[2]);
  }
  *(_OWORD *)v24 = *(_OWORD *)&v255.__r_.__value_.__l.__data_;
  *(_QWORD *)(v21 + 64) = *((_QWORD *)&v255.__r_.__value_.__l + 2);
  *((_BYTE *)&v255.__r_.__value_.__s + 23) = 0;
  v255.__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)(v21 + 72) = v256;
  *(_DWORD *)(v21 + 80) = DWORD2(v256);
  if ((v23 & 0x80) == 0)
  {
    if ((SHIBYTE(v253.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_52;
LABEL_69:
    operator delete(v253.__r_.__value_.__l.__data_);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_53;
LABEL_70:
    operator delete(*(void **)__dst);
    goto LABEL_53;
  }
  operator delete(v254.__r_.__value_.__l.__data_);
  if (SHIBYTE(v253.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_69;
LABEL_52:
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_70;
LABEL_53:
  *(_DWORD *)(v21 + 232) = 1;
  *(_QWORD *)(v21 + 248) = *(_QWORD *)(v21 + 240);
  v25 = *(std::__shared_weak_count **)(v21 + 272);
  *(_QWORD *)(v21 + 264) = 0;
  *(_QWORD *)(v21 + 272) = 0;
  if (!v25)
    goto LABEL_57;
  p_shared_owners = (unint64_t *)&v25->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
    if ((*(char *)(v21 + 71) & 0x80000000) == 0)
      goto LABEL_58;
  }
  else
  {
LABEL_57:
    if ((*(char *)(v21 + 71) & 0x80000000) == 0)
    {
LABEL_58:
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v24;
      __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v21 + 64);
      v28 = v242;
      goto LABEL_73;
    }
  }
  sub_1B02EB0A8(&__p, *(void **)(v21 + 48), *(_QWORD *)(v21 + 56));
  v28 = v242;
LABEL_73:
  sub_1B0318B00(&v253, (uint64_t)&__p, 1uLL);
  LODWORD(v254.__r_.__value_.__l.__data_) = a3;
  v254.__r_.__value_.__s.__data_[4] = BYTE4(a3);
  v29 = (a3 & 0xFF00000000) != 0 && (_DWORD)a3 == 0;
  v30 = v29;
  v240 = v30;
  if (qword_1EEEB2D28 != -1)
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
  v31 = 65552;
  v32 = (id)qword_1EEEB2CF8[0];
  v33 = os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG);
  v239 = 65552;
  if (v240)
  {
    v31 = 65568;
    if (!v33)
      goto LABEL_87;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v34 = "Setting Espresso storage type to FLOAT32 since CPU runtime requested.";
  }
  else
  {
    if (!v33)
      goto LABEL_87;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v34 = "Setting Espresso storage type to FLOAT16.";
  }
  _os_log_impl(&dword_1B02D2000, v32, OS_LOG_TYPE_DEBUG, v34, (uint8_t *)&buf, 2u);
LABEL_87:

  LODWORD(v254.__r_.__value_.__r.__words[1]) = v31;
  v254.__r_.__value_.__s.__data_[12] = 1;
  v254.__r_.__value_.__r.__words[2] = 0xFFFFFFFFLL;
  v255.__r_.__value_.__s.__data_[0] = 0;
  v255.__r_.__value_.__s.__data_[4] = 0;
  v255.__r_.__value_.__s.__data_[8] = 0;
  v255.__r_.__value_.__s.__data_[16] = 0;
  v256 = 0u;
  v257 = 0u;
  v258 = 1065353216;
  v260 = 0;
  LOBYTE(v259) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_1B0320384(v28, (char *)(v21 + 24), __dst);
  if (!sub_1B0317690((uint64_t)__dst))
  {
    v229 = __cxa_allocate_exception(0x20uLL);
    sub_1B03358E0((uint64_t)(v229 + 1), (uint64_t)__dst);
    *v229 = off_1E60CCE98;
    __cxa_throw(v229, (struct type_info *)&unk_1E60CB1A8, (void (*)(void *))sub_1B032059C);
  }
  if ((__dst[31] & 0x80000000) != 0)
    sub_1B02EB0A8(&__p, *(void **)&__dst[8], *(unint64_t *)&__dst[16]);
  else
    __p = *(std::string *)&__dst[8];
  v35 = (_QWORD *)operator new();
  *v35 = &unk_1E60CC918;
  v36 = operator new(0x128uLL);
  v36[2] = 0;
  *v36 = &unk_1E60CD658;
  v36[1] = 0;
  v35[1] = sub_1B0335C04((uint64_t)(v36 + 3), (__int128 *)&__p, (uint64_t)&v253);
  v35[2] = v36;
  v37 = *v236;
  *v236 = (uint64_t)v35;
  if (v37)
    (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1B03AFE10;
  strcpy(buf.__r_.__value_.__l.__data_, "decoder_model_spec.json");
  sub_1B0320384(v28, (char *)&buf, &__p);
  std::string::operator=(&v262, (const std::string *)&__p.__r_.__value_.__r.__words[1]);
  if ((v280[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_99;
LABEL_102:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v262.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_100;
    goto LABEL_103;
  }
  operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_102;
LABEL_99:
  if ((SHIBYTE(v262.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_100:
    __src = v262;
    goto LABEL_104;
  }
LABEL_103:
  sub_1B02EB0A8(&__src, v262.__r_.__value_.__l.__data_, v262.__r_.__value_.__l.__size_);
LABEL_104:
  if (qword_1EEEB2D28 == -1)
  {
    v38 = (id)qword_1EEEB2D20;
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      goto LABEL_109;
  }
  else
  {
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
    v38 = (id)qword_1EEEB2D20;
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEBUG))
      goto LABEL_109;
  }
  p_src = &__src;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
  LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
  *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_src;
  _os_log_impl(&dword_1B02D2000, v38, OS_LOG_TYPE_DEBUG, "Attempting to parse ModelSpec from JSON path: %s", (uint8_t *)&__p, 0xCu);
LABEL_109:

  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&v273, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    v273 = __src;
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&__p, v273.__r_.__value_.__l.__data_, v273.__r_.__value_.__l.__size_);
  else
    __p = v273;
  sub_1B032A2E4((uint64_t)&v276, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCF20;
    if ((SHIBYTE(v273.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_117;
  }
  else
  {
    v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCF20;
    if ((SHIBYTE(v273.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_117;
  }
  operator delete(v273.__r_.__value_.__l.__data_);
LABEL_117:
  LOBYTE(v268) = 0;
  *(_QWORD *)&v269 = 0;
  sub_1B031BD98(v278, (unsigned __int8 *)&v268);
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__p, "bolt_id");
  v280[23] = 8;
  strcpy(v280, "net_file");
  strcpy(&v281[7], "\nvocab_name");
  strcpy(&v280[24], "vocab_file");
  strcpy(&v281[31], "\noutput_name");
  HIBYTE(v282) = 11;
  v286[7] = 6;
  strcpy((char *)&v283, "bridge");
  strcpy(&v286[31], "\nmax_seq_len");
  strcpy(&v286[8], "num_layers");
  v288 = 11;
  sub_1B0318B00(&v250, (uint64_t)&__p, 8uLL);
  if (v288 < 0)
  {
    operator delete(*(void **)&v286[32]);
    if ((v286[31] & 0x80000000) == 0)
    {
LABEL_119:
      if ((v286[7] & 0x80000000) == 0)
        goto LABEL_120;
      goto LABEL_231;
    }
  }
  else if ((v286[31] & 0x80000000) == 0)
  {
    goto LABEL_119;
  }
  operator delete(*(void **)&v286[8]);
  if ((v286[7] & 0x80000000) == 0)
  {
LABEL_120:
    if ((SHIBYTE(v282) & 0x80000000) == 0)
      goto LABEL_121;
    goto LABEL_232;
  }
LABEL_231:
  operator delete(v283);
  if ((SHIBYTE(v282) & 0x80000000) == 0)
  {
LABEL_121:
    if ((v281[31] & 0x80000000) == 0)
      goto LABEL_122;
    goto LABEL_233;
  }
LABEL_232:
  operator delete(*(void **)&v281[32]);
  if ((v281[31] & 0x80000000) == 0)
  {
LABEL_122:
    if ((v281[7] & 0x80000000) == 0)
      goto LABEL_123;
    goto LABEL_234;
  }
LABEL_233:
  operator delete(*(void **)&v281[8]);
  if ((v281[7] & 0x80000000) == 0)
  {
LABEL_123:
    if ((v280[23] & 0x80000000) == 0)
      goto LABEL_124;
LABEL_235:
    operator delete(*(void **)v280);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_125;
LABEL_236:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_125;
  }
LABEL_234:
  operator delete(*(void **)&v280[24]);
  if ((v280[23] & 0x80000000) != 0)
    goto LABEL_235;
LABEL_124:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_236;
LABEL_125:
  v41 = (char *)v250;
  v40 = v251.__r_.__value_.__r.__words[0];
  while (v41 != (char *)v40)
  {
    if (v41[23] < 0)
    {
      sub_1B02EB0A8(&__p, *(void **)v41, *((_QWORD *)v41 + 1));
    }
    else
    {
      v42 = *(_OWORD *)v41;
      __p.__r_.__value_.__r.__words[2] = *((_QWORD *)v41 + 2);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v42;
    }
    if (!sub_1B031C01C((char)v268, v269, (uint64_t)&__p))
    {
      v226 = __cxa_allocate_exception(0x28uLL);
      sub_1B031C5DC((uint64_t)v226, (uint64_t)&__p);
      __cxa_throw(v226, (struct type_info *)&unk_1E60CB248, (void (*)(void *))sub_1B031C354);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v41 += 24;
  }
  v43 = (unsigned __int8 *)sub_1B031C398((char *)&v268, "bridge");
  sub_1B0333E08((uint64_t)&__p, v43);
  v44 = sub_1B031C398((char *)&v268, "bolt_id");
  memset(&buf, 0, sizeof(buf));
  sub_1B03346C8((const std::string **)v44, &buf);
  v45 = sub_1B031C398((char *)&v268, "net_file");
  memset(&v293, 0, sizeof(v293));
  sub_1B03346C8((const std::string **)v45, &v293);
  v46 = sub_1B031C398((char *)&v268, "vocab_file");
  v294 = 0uLL;
  *(_QWORD *)v295 = 0;
  sub_1B03346C8((const std::string **)v46, (std::string *)&v294);
  v47 = sub_1B031C398((char *)&v268, "vocab_name");
  *(_QWORD *)&v295[8] = 0;
  *(_QWORD *)&v295[16] = 0;
  v296 = 0;
  sub_1B03346C8((const std::string **)v47, (std::string *)&v295[8]);
  v48 = sub_1B031C398((char *)&v268, "output_name");
  memset(&v297, 0, sizeof(v297));
  sub_1B03346C8((const std::string **)v48, &v297);
  v49 = (char *)sub_1B031C398((char *)&__p, "seq_len");
  LODWORD(v265) = 0;
  sub_1B0334804(v49, &v265);
  LODWORD(v298) = (_DWORD)v265;
  v50 = (char *)sub_1B031C398((char *)&__p, "embed_dim");
  LODWORD(v265) = 0;
  sub_1B0334804(v50, &v265);
  DWORD1(v298) = (_DWORD)v265;
  v51 = (char *)sub_1B031C398((char *)&v268, "num_layers");
  LODWORD(v265) = 0;
  sub_1B0334804(v51, &v265);
  DWORD2(v298) = (_DWORD)v265;
  v52 = (char *)sub_1B031C398((char *)&v268, "max_seq_len");
  LODWORD(v265) = 0;
  sub_1B0334804(v52, &v265);
  HIDWORD(v298) = (_DWORD)v265;
  sub_1B03299FC((uint64_t *)&__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__s.__data_[0]);
  v53 = v250;
  if (v250)
  {
    v54 = v251.__r_.__value_.__r.__words[0];
    v55 = v250;
    if (v251.__r_.__value_.__l.__data_ != v250)
    {
      do
      {
        if (*(char *)(v54 - 1) < 0)
          operator delete(*(void **)(v54 - 24));
        v54 -= 24;
      }
      while ((void *)v54 != v53);
      v55 = v250;
    }
    v251.__r_.__value_.__r.__words[0] = (std::string::size_type)v53;
    operator delete(v55);
  }
  sub_1B03299FC((uint64_t *)&v269, v268);
  v56 = v278;
  v276.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCEC0;
  v278 = 0;
  if (v56)
    (*(void (**)(_QWORD *))(*v56 + 8))(v56);
  if (SHIBYTE(v277) < 0)
  {
    operator delete((void *)v276.__r_.__value_.__l.__size_);
    v57 = a1;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_146;
  }
  else
  {
    v57 = a1;
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
      goto LABEL_146;
  }
  operator delete(*v238);
LABEL_146:
  *(std::string *)v238 = buf;
  *((_BYTE *)&buf.__r_.__value_.__s + 23) = 0;
  buf.__r_.__value_.__s.__data_[0] = 0;
  v58 = (void **)(v57 + 112);
  if (*(char *)(v57 + 135) < 0)
    operator delete(*v58);
  *(_OWORD *)v58 = *(_OWORD *)&v293.__r_.__value_.__l.__data_;
  v235 = (char *)(v57 + 112);
  *(_QWORD *)(v57 + 128) = *((_QWORD *)&v293.__r_.__value_.__l + 2);
  *((_BYTE *)&v293.__r_.__value_.__s + 23) = 0;
  v293.__r_.__value_.__s.__data_[0] = 0;
  v59 = (void **)(v57 + 136);
  if (*(char *)(v57 + 159) < 0)
    operator delete(*v59);
  *(_OWORD *)v59 = v294;
  *(_QWORD *)(v57 + 152) = *(_QWORD *)v295;
  v295[7] = 0;
  LOBYTE(v294) = 0;
  v60 = (void **)(v57 + 160);
  if (*(char *)(v57 + 183) < 0)
    operator delete(*v60);
  v61 = 0;
  *(_OWORD *)v60 = *(_OWORD *)&v295[8];
  *(_QWORD *)(v57 + 176) = v296;
  HIBYTE(v296) = 0;
  v295[8] = 0;
  v62 = (void **)(v57 + 184);
  if (*(char *)(v57 + 207) < 0)
  {
    operator delete(*v62);
    v61 = HIBYTE(v296);
  }
  *(_OWORD *)v62 = *(_OWORD *)&v297.__r_.__value_.__l.__data_;
  *(_QWORD *)(v57 + 200) = *((_QWORD *)&v297.__r_.__value_.__l + 2);
  *((_BYTE *)&v297.__r_.__value_.__s + 23) = 0;
  v297.__r_.__value_.__s.__data_[0] = 0;
  *(_OWORD *)(v57 + 208) = v298;
  if (v61 < 0)
  {
    operator delete(*(void **)&v295[8]);
    if ((v295[7] & 0x80000000) == 0)
    {
LABEL_156:
      if ((SHIBYTE(v293.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_157;
      goto LABEL_241;
    }
  }
  else if ((v295[7] & 0x80000000) == 0)
  {
    goto LABEL_156;
  }
  operator delete((void *)v294);
  if ((SHIBYTE(v293.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_157:
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_158;
LABEL_242:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_159;
    goto LABEL_243;
  }
LABEL_241:
  operator delete(v293.__r_.__value_.__l.__data_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_242;
LABEL_158:
  if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_159;
LABEL_243:
  operator delete(__src.__r_.__value_.__l.__data_);
LABEL_159:
  v63 = *(int *)(v57 + 220);
  HIDWORD(__p.__r_.__value_.__r.__words[0]) = v63;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = 1;
  memset(v280, 0, sizeof(v280));
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E60CC938;
  *(_DWORD *)&v281[8] = 1;
  memset(&v281[16], 0, 32);
  *(_QWORD *)v281 = &unk_1E60CC938;
  v284 = 1;
  memset(v286, 0, 40);
  v282 = 0;
  v283 = &unk_1E60CC938;
  v287 = 1;
  v291 = 0;
  *(_OWORD *)v289 = 0u;
  v290 = 0u;
  *(_QWORD *)&v286[40] = &unk_1E60CC938;
  sub_1B031CB08((uint64_t)&__p);
  v232 = (std::string *)v62;
  v64 = operator new(8uLL);
  *v64 = 1;
  v65 = operator new(0x10uLL);
  *v65 = 1;
  v65[1] = v63;
  operator delete(v64);
  v66 = operator new(0x20uLL);
  v66[2] = 1;
  *(_OWORD *)v66 = *(_OWORD *)v65;
  v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v66;
  v276.__r_.__value_.__r.__words[2] = (std::string::size_type)(v66 + 4);
  operator delete(v65);
  v66[3] = v63;
  v276.__r_.__value_.__l.__size_ = (std::string::size_type)(v66 + 4);
  v67.i32[0] = 0;
  sub_1B0325CC0((int32x4_t **)&v276, (uint64_t)&buf, v67);
  v284 = buf.__r_.__value_.__r.__words[1];
  sub_1B03267E8(v286, (char *)buf.__r_.__value_.__r.__words[2], v293.__r_.__value_.__l.__data_, (uint64_t)(v293.__r_.__value_.__r.__words[0] - buf.__r_.__value_.__r.__words[2]) >> 3);
  v69 = v293.__r_.__value_.__r.__words[2];
  v68 = v294;
  if ((_QWORD)v294)
  {
    v70 = (unint64_t *)(v294 + 8);
    do
      v71 = __ldxr(v70);
    while (__stxr(v71 + 1, v70));
  }
  v72 = *(std::__shared_weak_count **)&v286[32];
  *(_QWORD *)&v286[24] = v69;
  *(_QWORD *)&v286[32] = v68;
  if (v72)
  {
    v73 = (unint64_t *)&v72->__shared_owners_;
    do
      v74 = __ldaxr(v73);
    while (__stlxr(v74 - 1, v73));
    if (!v74)
    {
      ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
      std::__shared_weak_count::__release_weak(v72);
    }
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCA78;
  v75 = (std::__shared_weak_count *)v294;
  if ((_QWORD)v294)
  {
    v76 = (unint64_t *)(v294 + 8);
    do
      v77 = __ldaxr(v76);
    while (__stlxr(v77 - 1, v76));
    if (!v77)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  if (buf.__r_.__value_.__r.__words[2])
  {
    v293.__r_.__value_.__r.__words[0] = buf.__r_.__value_.__r.__words[2];
    operator delete((void *)buf.__r_.__value_.__r.__words[2]);
  }
  v234 = (char *)v59;
  if (v276.__r_.__value_.__r.__words[0])
  {
    v276.__r_.__value_.__l.__size_ = v276.__r_.__value_.__r.__words[0];
    operator delete(v276.__r_.__value_.__l.__data_);
  }
  v78 = (int)v63 * (uint64_t)(int)v63;
  v79 = v78 / v63;
  v80 = v78 % v63;
  if (v78 >= v63 || v80)
  {
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 1;
    do
    {
      if (v112 < v113)
      {
        if (v284 != 1)
        {
          v227 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v227, "Incorrect data type requested.");
          __cxa_throw(v227, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)&v286[24] + 24))(*(_QWORD *)&v286[24])
                  + 4 * (v112 + v113 * v63)) = -971227136;
      }
      ++v114;
      v113 = v115 / v63;
      v112 = v114 - v115 / v63 * v63;
      ++v115;
    }
    while (v113 != v79 || v112 != v80);
  }
  v81 = a1;
  *(_QWORD *)(a1 + 280) = __p.__r_.__value_.__r.__words[0];
  *(_DWORD *)(a1 + 296) = __p.__r_.__value_.__r.__words[2];
  v82 = v242;
  if (v243 != &__p)
    sub_1B03267E8((_QWORD *)(a1 + 304), *(char **)v280, *(char **)&v280[8], (uint64_t)(*(_QWORD *)&v280[8] - *(_QWORD *)v280) >> 3);
  v83 = *(_QWORD *)&v280[24];
  v84 = *(_QWORD *)&v280[32];
  if (*(_QWORD *)&v280[32])
  {
    v85 = (unint64_t *)(*(_QWORD *)&v280[32] + 8);
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v87 = *(std::__shared_weak_count **)(a1 + 336);
  *(_QWORD *)(a1 + 328) = v83;
  *(_QWORD *)(a1 + 336) = v84;
  if (!v87)
    goto LABEL_187;
  v88 = (unint64_t *)&v87->__shared_owners_;
  do
    v89 = __ldaxr(v88);
  while (__stlxr(v89 - 1, v88));
  if (v89)
  {
LABEL_187:
    *(_DWORD *)(a1 + 352) = *(_DWORD *)&v281[8];
    if (v243 == &__p)
      goto LABEL_189;
    goto LABEL_188;
  }
  ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
  std::__shared_weak_count::__release_weak(v87);
  *(_DWORD *)(a1 + 352) = *(_DWORD *)&v281[8];
  if (v243 != &__p)
LABEL_188:
    sub_1B03267E8(v244, *(char **)&v281[16], *(char **)&v281[24], (uint64_t)(*(_QWORD *)&v281[24] - *(_QWORD *)&v281[16]) >> 3);
LABEL_189:
  v90 = *(_QWORD *)&v281[40];
  v91 = v282;
  if (v282)
  {
    v92 = (unint64_t *)((char *)v282 + 8);
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  v94 = *(std::__shared_weak_count **)(a1 + 392);
  *(_QWORD *)(a1 + 384) = v90;
  *(_QWORD *)(a1 + 392) = v91;
  if (!v94)
    goto LABEL_196;
  v95 = (unint64_t *)&v94->__shared_owners_;
  do
    v96 = __ldaxr(v95);
  while (__stlxr(v96 - 1, v95));
  if (v96)
  {
LABEL_196:
    *(_DWORD *)(a1 + 408) = v284;
    if (v243 == &__p)
      goto LABEL_198;
    goto LABEL_197;
  }
  ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
  std::__shared_weak_count::__release_weak(v94);
  *(_DWORD *)(a1 + 408) = v284;
  if (v243 != &__p)
LABEL_197:
    sub_1B03267E8((_QWORD *)(a1 + 416), *(char **)v286, *(char **)&v286[8], (uint64_t)(*(_QWORD *)&v286[8] - *(_QWORD *)v286) >> 3);
LABEL_198:
  v97 = *(_QWORD *)&v286[24];
  v98 = *(_QWORD *)&v286[32];
  if (*(_QWORD *)&v286[32])
  {
    v99 = (unint64_t *)(*(_QWORD *)&v286[32] + 8);
    do
      v100 = __ldxr(v99);
    while (__stxr(v100 + 1, v99));
  }
  v101 = *(std::__shared_weak_count **)(a1 + 448);
  *(_QWORD *)(a1 + 440) = v97;
  *(_QWORD *)(a1 + 448) = v98;
  if (!v101)
    goto LABEL_205;
  v102 = (unint64_t *)&v101->__shared_owners_;
  do
    v103 = __ldaxr(v102);
  while (__stlxr(v103 - 1, v102));
  if (v103)
  {
LABEL_205:
    *(_DWORD *)(a1 + 464) = v287;
    if (v243 == &__p)
      goto LABEL_207;
    goto LABEL_206;
  }
  ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
  std::__shared_weak_count::__release_weak(v101);
  *(_DWORD *)(a1 + 464) = v287;
  if (v243 != &__p)
LABEL_206:
    sub_1B03267E8(v233, (char *)v289[0], (char *)v289[1], ((char *)v289[1] - (char *)v289[0]) >> 3);
LABEL_207:
  v104 = *((_QWORD *)&v290 + 1);
  v105 = v291;
  if (v291)
  {
    v106 = (unint64_t *)(v291 + 8);
    do
      v107 = __ldxr(v106);
    while (__stxr(v107 + 1, v106));
  }
  v108 = *(std::__shared_weak_count **)(a1 + 504);
  *(_QWORD *)(a1 + 496) = v104;
  *(_QWORD *)(a1 + 504) = v105;
  if (v108)
  {
    v109 = (unint64_t *)&v108->__shared_owners_;
    do
      v110 = __ldaxr(v109);
    while (__stlxr(v110 - 1, v109));
    if (!v110)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  sub_1B03269E4(&__p);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&buf.__r_.__value_.__r.__words[1] = xmmword_1B03AFE10;
  strcpy(buf.__r_.__value_.__l.__data_, "runtime_parameters.json");
  sub_1B0320384(v242, (char *)&buf, &__p);
  v111 = sub_1B0317690((uint64_t)&__p);
  if ((v280[7] & 0x80000000) == 0)
  {
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_217;
LABEL_245:
    operator delete(buf.__r_.__value_.__l.__data_);
    if (!v111)
      goto LABEL_420;
    goto LABEL_246;
  }
  operator delete((void *)__p.__r_.__value_.__l.__size_);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_245;
LABEL_217:
  if (!v111)
    goto LABEL_420;
LABEL_246:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x19uLL);
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1B03AFE10;
  strcpy(__p.__r_.__value_.__l.__data_, "runtime_parameters.json");
  sub_1B0320384(v242, (char *)&__p, &v250);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_248;
  }
  else if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_248:
    v247 = v251;
    goto LABEL_257;
  }
  sub_1B02EB0A8(&v247, v251.__r_.__value_.__l.__data_, v251.__r_.__value_.__l.__size_);
LABEL_257:
  if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&__src, v247.__r_.__value_.__l.__data_, v247.__r_.__value_.__l.__size_);
  else
    __src = v247;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&__p, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    __p = __src;
  sub_1B032A2E4((uint64_t)&v273, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCF20;
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_265;
LABEL_280:
    operator delete(__src.__r_.__value_.__l.__data_);
    goto LABEL_265;
  }
  v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCF20;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_280;
LABEL_265:
  v270[0] = 0;
  v271 = 0;
  sub_1B031BD98(v275, (unsigned __int8 *)v270);
  if (v270[0] != 1)
    goto LABEL_529;
  v117 = v271 + 8;
  v118 = *(_QWORD *)(v271 + 8);
  if (!v118)
    goto LABEL_273;
  v119 = v271 + 8;
  do
  {
    v120 = std::string::compare((const std::string *)(v118 + 32), "filterTokens");
    v121 = (uint64_t *)(v118 + 8);
    if (v120 >= 0)
    {
      v121 = (uint64_t *)v118;
      v119 = v118;
    }
    v118 = *v121;
  }
  while (*v121);
  if (v119 == v117 || std::string::compare((const std::string *)(v119 + 32), "filterTokens") >= 1)
LABEL_273:
    v119 = v117;
  if (v119 == v271 + 8)
  {
LABEL_529:
    v230 = __cxa_allocate_exception(0x28uLL);
    sub_1B031C7F4((uint64_t)v230, (uint64_t)&v247);
    __cxa_throw(v230, (struct type_info *)&unk_1E60CB248, (void (*)(void *))sub_1B031C354);
  }
  v268 = 0;
  v269 = 0uLL;
  v122 = sub_1B031C398(v270, "filterTokens");
  v123 = *(unsigned __int8 *)v122;
  v124 = 1;
  if (*(_BYTE *)v122)
  {
    if (v123 == 2)
    {
      v126 = 0;
      v125 = *v122[1];
      v127 = 0x8000000000000000;
    }
    else if (v123 == 1)
    {
      v125 = 0;
      v126 = *v122[1];
      v127 = 0x8000000000000000;
    }
    else
    {
      v125 = 0;
      v127 = 0;
      v126 = 0;
    }
  }
  else
  {
    v125 = 0;
    v126 = 0;
    v127 = 1;
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  __p.__r_.__value_.__l.__size_ = v126;
  __p.__r_.__value_.__r.__words[2] = v125;
  *(_OWORD *)v280 = v127;
  *(_QWORD *)&v280[16] = 0;
  *(_WORD *)&v281[7] = 1;
  strcpy(&v280[24], "0");
  v281[31] = 0;
  v128 = *(unsigned __int8 *)v122;
  if (v128 == 2)
  {
    v130 = 0;
    v129 = v122[1][1];
  }
  else
  {
    if (v128 != 1)
    {
      v129 = 0;
      v130 = 0;
      goto LABEL_290;
    }
    v129 = 0;
    v130 = (std::string::size_type)(v122[1] + 1);
  }
  v124 = 0x8000000000000000;
LABEL_290:
  v131 = 0;
  v132 = 0;
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
  buf.__r_.__value_.__l.__size_ = v130;
  buf.__r_.__value_.__r.__words[2] = v129;
  *(_OWORD *)&v293.__r_.__value_.__l.__data_ = v124;
  v293.__r_.__value_.__r.__words[2] = 0;
  *(_WORD *)&v295[7] = 1;
  LOWORD(v294) = 48;
  HIBYTE(v296) = 0;
  while (!sub_1B0330C48((unsigned __int8 **)&__p, (unsigned __int8 **)&buf))
  {
    v133 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[0];
    v134 = *__p.__r_.__value_.__l.__data_;
    if (v134 == 1)
    {
      v133 = (unsigned __int8 *)(__p.__r_.__value_.__l.__size_ + 56);
    }
    else if (v134 == 2)
    {
      v133 = (unsigned __int8 *)__p.__r_.__value_.__r.__words[2];
    }
    else
    {
      if (!*__p.__r_.__value_.__l.__data_)
      {
        v228 = __cxa_allocate_exception(0x20uLL);
        sub_1B02DCBB8(&v276, "cannot get value");
        sub_1B0330D48(214, (uint64_t)&v276, (uint64_t)v228);
        __cxa_throw(v228, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
      }
      if (*(_QWORD *)v280)
      {
        v224 = __cxa_allocate_exception(0x20uLL);
        sub_1B02DCBB8(&v276, "cannot get value");
        sub_1B0330D48(214, (uint64_t)&v276, (uint64_t)v224);
        __cxa_throw(v224, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
      }
    }
    v265 = 0;
    v266 = 0;
    v267 = 0;
    sub_1B03349A4(v133, &v265);
    v263 = 0;
    v264 = 0uLL;
    if (v132 == v131)
    {
      v137 = 0;
      v135 = 0;
      v138 = (const std::string *)v265;
      v139 = v266;
      v140 = v266 - (_BYTE *)v265;
      if (v266 - (_BYTE *)v265 < 1)
        goto LABEL_364;
    }
    else
    {
      v135 = 0;
      do
      {
        if ((unint64_t)v135 < *((_QWORD *)&v264 + 1))
        {
          if (*((char *)v132 + 23) < 0)
          {
            sub_1B02EB0A8(v135, *(void **)v132, *((_QWORD *)v132 + 1));
          }
          else
          {
            v136 = *v132;
            *((_QWORD *)v135 + 2) = *((_QWORD *)v132 + 2);
            *(_OWORD *)v135 = v136;
          }
          v135 += 24;
        }
        else
        {
          v135 = sub_1B033552C((char **)&v263, (uint64_t)v132);
        }
        *(_QWORD *)&v264 = v135;
        v132 = (__int128 *)((char *)v132 + 24);
      }
      while (v132 != v131);
      v137 = v263;
      v138 = (const std::string *)v265;
      v139 = v266;
      v140 = v266 - (_BYTE *)v265;
      if (v266 - (_BYTE *)v265 < 1)
        goto LABEL_364;
    }
    v141 = v140 / 24;
    v142 = (v135 - v137) / 24;
    v143 = (std::string *)&v137[24 * v142];
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v264 + 1) - (_QWORD)v135) >> 3)) < v140 / 24)
    {
      if ((unint64_t)(v141 + v142) > 0xAAAAAAAAAAAAAAALL)
        sub_1B02D7758();
      v144 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v264 + 1) - (_QWORD)v137) >> 3);
      v145 = 2 * v144;
      if (2 * v144 <= v141 + v142)
        v145 = v141 + v142;
      if (v144 >= 0x555555555555555)
        v146 = 0xAAAAAAAAAAAAAAALL;
      else
        v146 = v145;
      v278 = (_QWORD *)&v264 + 1;
      if (v146)
      {
        if (v146 > 0xAAAAAAAAAAAAAAALL)
          sub_1B02D72AC();
        v147 = (char *)operator new(24 * v146);
      }
      else
      {
        v147 = 0;
      }
      v155 = (std::string::size_type)&v147[24 * v142];
      v276.__r_.__value_.__r.__words[0] = (std::string::size_type)v147;
      v276.__r_.__value_.__l.__size_ = v155;
      v276.__r_.__value_.__r.__words[2] = v155;
      v277 = &v147[24 * v146];
      v156 = 24 * v141;
      v157 = v155 + 24 * v141;
      do
      {
        if (SHIBYTE(v138->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1B02EB0A8((_BYTE *)v155, v138->__r_.__value_.__l.__data_, v138->__r_.__value_.__l.__size_);
        }
        else
        {
          v158 = *(_OWORD *)&v138->__r_.__value_.__l.__data_;
          *(_QWORD *)(v155 + 16) = *((_QWORD *)&v138->__r_.__value_.__l + 2);
          *(_OWORD *)v155 = v158;
        }
        v155 += 24;
        ++v138;
        v156 -= 24;
      }
      while (v156);
      v159 = v276.__r_.__value_.__l.__size_;
      v160 = (std::string *)v263;
      if (v263 == v143)
      {
        v162 = (void *)v276.__r_.__value_.__l.__size_;
        v164 = (std::string *)v264;
        if ((std::string *)v264 == v143)
        {
LABEL_345:
          v166 = (std::string *)v263;
          v263 = v162;
          *(_QWORD *)&v264 = v157;
          *((_QWORD *)&v264 + 1) = v277;
          while (v143 != v166)
          {
            if (SHIBYTE(v143[-1].__r_.__value_.__r.__words[2]) < 0)
              operator delete(v143[-1].__r_.__value_.__l.__data_);
            --v143;
          }
          if (v166)
            operator delete(v166);
          goto LABEL_364;
        }
      }
      else
      {
        v161 = v143;
        do
        {
          v162 = (void *)(v159 - 24);
          v163 = *(_OWORD *)&v161[-1].__r_.__value_.__l.__data_;
          *(_QWORD *)(v159 - 8) = *((_QWORD *)&v161[-1].__r_.__value_.__l + 2);
          *(_OWORD *)(v159 - 24) = v163;
          v161[-1].__r_.__value_.__l.__size_ = 0;
          v161[-1].__r_.__value_.__r.__words[2] = 0;
          v161[-1].__r_.__value_.__r.__words[0] = 0;
          v159 -= 24;
          --v161;
        }
        while (v161 != v160);
        v164 = (std::string *)v264;
        if ((std::string *)v264 == v143)
          goto LABEL_345;
      }
      do
      {
        v165 = *(_OWORD *)&v143->__r_.__value_.__l.__data_;
        *(_QWORD *)(v157 + 16) = *((_QWORD *)&v143->__r_.__value_.__l + 2);
        *(_OWORD *)v157 = v165;
        v157 += 24;
        v143->__r_.__value_.__l.__size_ = 0;
        v143->__r_.__value_.__r.__words[2] = 0;
        v143->__r_.__value_.__r.__words[0] = 0;
        ++v143;
      }
      while (v143 != v164);
      v143 = (std::string *)v264;
      goto LABEL_345;
    }
    v148 = v135 - (char *)v143;
    if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((v135 - (char *)v143) >> 3)) >= v141)
    {
      v149 = &v138[v141];
      v154 = v135;
    }
    else
    {
      v149 = (const std::string *)((char *)v138 + 8 * ((v135 - (char *)v143) >> 3));
      if (v149 == (const std::string *)v139)
      {
        v154 = v135;
        *(_QWORD *)&v264 = v135;
        if (v148 < 1)
          goto LABEL_364;
      }
      else
      {
        v150 = 0;
        do
        {
          v152 = &v135[v150 * 24];
          v153 = (char *)&v149[v150];
          if (SHIBYTE(v149[v150].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1B02EB0A8(v152, *(void **)v153, *((_QWORD *)v153 + 1));
          }
          else
          {
            v151 = *(_OWORD *)v153;
            *((_QWORD *)v152 + 2) = *((_QWORD *)v153 + 2);
            *(_OWORD *)v152 = v151;
          }
          ++v150;
        }
        while (&v149[v150] != (const std::string *)v139);
        v154 = &v135[v150 * 24];
        *(_QWORD *)&v264 = &v135[v150 * 24];
        if (v148 < 1)
          goto LABEL_364;
      }
    }
    v167 = (unint64_t)&v154[-24 * v141];
    for (j = v154; v167 < (unint64_t)v135; v167 += 24)
    {
      v169 = *(_OWORD *)v167;
      *((_QWORD *)j + 2) = *(_QWORD *)(v167 + 16);
      *(_OWORD *)j = v169;
      j += 24;
      *(_QWORD *)(v167 + 8) = 0;
      *(_QWORD *)(v167 + 16) = 0;
      *(_QWORD *)v167 = 0;
    }
    v170 = &v143[v141];
    *(_QWORD *)&v264 = j;
    if (v154 != (char *)v170)
    {
      v171 = v154 - 24;
      v172 = 8 * ((v154 - (char *)v170) >> 3);
      do
      {
        if (v171[23] < 0)
          operator delete(*(void **)v171);
        v173 = (__int128 *)((char *)&v143[-1] + v172);
        v174 = *v173;
        *((_QWORD *)v171 + 2) = *(_QWORD *)((char *)&v143->__r_.__value_.__l + v172 - 8);
        *(_OWORD *)v171 = v174;
        v171 -= 24;
        v143->__r_.__value_.__s.__data_[v172 - 1] = 0;
        *(_BYTE *)v173 = 0;
        v172 -= 24;
      }
      while (v172);
    }
    for (; v138 != v149; ++v143)
      std::string::operator=(v143, v138++);
LABEL_364:
    v175 = (void **)v268;
    v81 = a1;
    if (v268)
    {
      for (k = (void **)v269; k != v175; k -= 3)
      {
        if (*((char *)k - 1) < 0)
          operator delete(*(k - 3));
      }
      operator delete(v175);
    }
    v132 = (__int128 *)v263;
    v268 = v263;
    v177 = (__int128 *)v264;
    v269 = v264;
    v178 = (void **)v265;
    if (v265)
    {
      v245 = (__int128 *)v264;
      v179 = (void **)v266;
      v180 = v265;
      if (v266 != v265)
      {
        do
        {
          if (*((char *)v179 - 1) < 0)
            operator delete(*(v179 - 3));
          v179 -= 3;
        }
        while (v179 != v178);
        v180 = v265;
      }
      v266 = (char *)v178;
      operator delete(v180);
      v177 = v245;
    }
    v181 = *__p.__r_.__value_.__l.__data_;
    if (v181 == 2)
    {
      __p.__r_.__value_.__r.__words[2] += 16;
    }
    else if (v181 == 1)
    {
      v182 = __p.__r_.__value_.__l.__size_;
      v183 = *(_QWORD **)(__p.__r_.__value_.__l.__size_ + 8);
      if (v183)
      {
        do
        {
          v184 = v183;
          v183 = (_QWORD *)*v183;
        }
        while (v183);
      }
      else
      {
        do
        {
          v184 = *(_QWORD **)(v182 + 16);
          v29 = *v184 == v182;
          v182 = (std::string::size_type)v184;
        }
        while (!v29);
      }
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v184;
    }
    else
    {
      ++*(_QWORD *)v280;
    }
    ++*(_QWORD *)&v280[8];
    v131 = v177;
  }
  if ((SHIBYTE(v296) & 0x80000000) == 0)
  {
    v82 = v242;
    if ((v295[7] & 0x80000000) == 0)
      goto LABEL_390;
LABEL_410:
    operator delete((void *)v294);
    if ((v281[31] & 0x80000000) != 0)
      goto LABEL_411;
LABEL_391:
    if ((v281[7] & 0x80000000) == 0)
      goto LABEL_392;
LABEL_412:
    operator delete(*(void **)&v280[24]);
    goto LABEL_392;
  }
  operator delete(*(void **)&v295[8]);
  v82 = v242;
  if ((v295[7] & 0x80000000) != 0)
    goto LABEL_410;
LABEL_390:
  if ((v281[31] & 0x80000000) == 0)
    goto LABEL_391;
LABEL_411:
  operator delete(*(void **)&v281[8]);
  if ((v281[7] & 0x80000000) != 0)
    goto LABEL_412;
LABEL_392:
  v249 = 0;
  v248 = 0uLL;
  sub_1B02EB2B0((char *)&v248, v132, v131, 0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)v132) >> 3));
  if (v132)
  {
    while (v131 != v132)
    {
      if (*((char *)v131 - 1) < 0)
        operator delete(*((void **)v131 - 3));
      v131 = (__int128 *)((char *)v131 - 24);
    }
    operator delete(v132);
  }
  sub_1B03299FC(&v271, v270[0]);
  v185 = v275;
  v273.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCEC0;
  v275 = 0;
  if (v185)
    (*(void (**)(_QWORD *))(*v185 + 8))(v185);
  if (v274 < 0)
  {
    operator delete((void *)v273.__r_.__value_.__l.__size_);
    if (!*(_BYTE *)(v81 + 536))
      goto LABEL_414;
LABEL_403:
    v186 = *(void ***)v237;
    if (*(_QWORD *)v237)
    {
      v187 = *(void ***)(v81 + 520);
      v188 = *(void ***)v237;
      if (v187 != v186)
      {
        do
        {
          if (*((char *)v187 - 1) < 0)
            operator delete(*(v187 - 3));
          v187 -= 3;
        }
        while (v187 != v186);
        v188 = *(void ***)v237;
      }
      *(_QWORD *)(v81 + 520) = v186;
      operator delete(v188);
      *(_QWORD *)v237 = 0;
      *((_QWORD *)v237 + 1) = 0;
      *((_QWORD *)v237 + 2) = 0;
    }
    *(_OWORD *)(v81 + 512) = v248;
    *(_QWORD *)(v81 + 528) = v249;
    v249 = 0;
    v248 = 0uLL;
    if ((SHIBYTE(v247.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_419;
LABEL_422:
    operator delete(v247.__r_.__value_.__l.__data_);
    if (SHIBYTE(v251.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_423;
LABEL_420:
    if ((*(char *)(v81 + 207) & 0x80000000) == 0)
      goto LABEL_421;
LABEL_424:
    sub_1B02EB0A8(&buf, *(void **)(v81 + 184), *(_QWORD *)(v81 + 192));
  }
  else
  {
    if (*(_BYTE *)(v81 + 536))
      goto LABEL_403;
LABEL_414:
    *(_OWORD *)(v81 + 512) = v248;
    *(_QWORD *)(v81 + 528) = v249;
    v249 = 0;
    v248 = 0uLL;
    *(_BYTE *)(v81 + 536) = 1;
    if (SHIBYTE(v247.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_422;
LABEL_419:
    if ((SHIBYTE(v251.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_420;
LABEL_423:
    operator delete(v251.__r_.__value_.__l.__data_);
    if (*(char *)(v81 + 207) < 0)
      goto LABEL_424;
LABEL_421:
    buf = *v232;
  }
  sub_1B0318B00(&__p, (uint64_t)&buf, 1uLL);
  *(_DWORD *)v280 = a3;
  v280[4] = BYTE4(a3);
  if (qword_1EEEB2D28 != -1)
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
  v189 = (id)qword_1EEEB2CF8[0];
  v190 = os_log_type_enabled(v189, OS_LOG_TYPE_DEBUG);
  if (v240)
  {
    v239 = 65568;
    if (v190)
    {
      LOWORD(v276.__r_.__value_.__l.__data_) = 0;
      v191 = "Setting Espresso storage type to FLOAT32 since CPU runtime requested.";
      goto LABEL_432;
    }
  }
  else if (v190)
  {
    LOWORD(v276.__r_.__value_.__l.__data_) = 0;
    v191 = "Setting Espresso storage type to FLOAT16.";
LABEL_432:
    _os_log_impl(&dword_1B02D2000, v189, OS_LOG_TYPE_DEBUG, v191, (uint8_t *)&v276, 2u);
  }

  *(_DWORD *)&v280[8] = v239;
  v280[12] = 1;
  *(_QWORD *)&v280[16] = 0xFFFFFFFFLL;
  v280[24] = 0;
  v280[28] = 0;
  v280[32] = 0;
  v281[0] = 0;
  memset(&v281[8], 0, 32);
  *(_DWORD *)&v281[40] = 1065353216;
  v285 = 0;
  LOBYTE(v282) = 0;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  sub_1B0320384(v82, v235, &buf);
  std::string::operator=((std::string *)&__dst[8], (const std::string *)&buf.__r_.__value_.__r.__words[1]);
  if (v293.__r_.__value_.__s.__data_[7] < 0)
    operator delete((void *)buf.__r_.__value_.__l.__size_);
  if (!sub_1B0317690((uint64_t)__dst))
  {
    v231 = __cxa_allocate_exception(0x20uLL);
    sub_1B0336B6C((uint64_t)(v231 + 1), (uint64_t)__dst);
    *v231 = off_1E60CCE98;
    __cxa_throw(v231, (struct type_info *)&unk_1E60CB1A8, (void (*)(void *))sub_1B032059C);
  }
  if ((__dst[31] & 0x80000000) != 0)
    sub_1B02EB0A8(&buf, *(void **)&__dst[8], *(unint64_t *)&__dst[16]);
  else
    buf = *(std::string *)&__dst[8];
  v192 = (_QWORD *)operator new();
  *v192 = &unk_1E60CC918;
  v193 = operator new(0x128uLL);
  v193[2] = 0;
  *v193 = &unk_1E60CD658;
  v193[1] = 0;
  v192[1] = sub_1B0335C04((uint64_t)(v193 + 3), (__int128 *)&buf, (uint64_t)&__p);
  v192[2] = v193;
  v194 = *(_QWORD *)(v81 + 552);
  *(_QWORD *)(v81 + 552) = v192;
  if (v194)
    (*(void (**)(uint64_t))(*(_QWORD *)v194 + 8))(v194);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    operator delete(buf.__r_.__value_.__l.__data_);
  sub_1B0320384(v82, v234, &buf);
  v195 = operator new(0xE0uLL);
  v195[1] = 0;
  v195[2] = 0;
  *v195 = &off_1E60CD700;
  if (v293.__r_.__value_.__s.__data_[7] < 0)
  {
    sub_1B02EB0A8(&v276, (void *)buf.__r_.__value_.__l.__size_, buf.__r_.__value_.__r.__words[2]);
  }
  else
  {
    *(_OWORD *)&v276.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__r.__words[1];
    v276.__r_.__value_.__r.__words[2] = v293.__r_.__value_.__r.__words[0];
  }
  v196 = v195 + 3;
  *((_BYTE *)&v273.__r_.__value_.__s + 23) = 3;
  strcpy((char *)&v273, "bos");
  sub_1B03643B0((uint64_t)(v195 + 3), (uint64_t)&v276);
  sub_1B02DECB4((uint64_t)(v195 + 13), (uint64_t)&v273, 3uLL, (uint64_t *)&v250);
  sub_1B0303130((uint64_t *)&v250);
  if (SHIBYTE(v273.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v273.__r_.__value_.__l.__data_);
    if (SHIBYTE(v276.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_453;
LABEL_450:
    *(_QWORD *)(v81 + 560) = v196;
    v197 = *(std::__shared_weak_count **)(v81 + 568);
    *(_QWORD *)(v81 + 568) = v195;
    if (v197)
    {
LABEL_454:
      v198 = (unint64_t *)&v197->__shared_owners_;
      do
        v199 = __ldaxr(v198);
      while (__stlxr(v199 - 1, v198));
      if (!v199)
      {
        ((void (*)(std::__shared_weak_count *))v197->__on_zero_shared)(v197);
        std::__shared_weak_count::__release_weak(v197);
      }
    }
  }
  else
  {
    if ((SHIBYTE(v276.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_450;
LABEL_453:
    operator delete(v276.__r_.__value_.__l.__data_);
    *(_QWORD *)(v81 + 560) = v196;
    v197 = *(std::__shared_weak_count **)(v81 + 568);
    *(_QWORD *)(v81 + 568) = v195;
    if (v197)
      goto LABEL_454;
  }
  v200 = operator new();
  *(_OWORD *)(v200 + 32) = 0u;
  *(_OWORD *)(v200 + 48) = 0u;
  *(_OWORD *)v200 = 0u;
  *(_OWORD *)(v200 + 16) = 0u;
  *(_BYTE *)(v200 + 4) = 1;
  *(_QWORD *)(v200 + 48) = 0xA00000003;
  *(_DWORD *)(v200 + 56) = 1065353216;
  v276.__r_.__value_.__r.__words[0] = v200;
  v201 = (_QWORD *)operator new();
  *v201 = &off_1E60CD7E0;
  v201[1] = 0;
  v201[2] = 0;
  v201[3] = v200;
  v276.__r_.__value_.__r.__words[0] = 0;
  *(_QWORD *)(v81 + 576) = v200;
  v202 = *(std::__shared_weak_count **)(v81 + 584);
  *(_QWORD *)(v81 + 584) = v201;
  if (v202)
  {
    v203 = (unint64_t *)&v202->__shared_owners_;
    do
      v204 = __ldaxr(v203);
    while (__stlxr(v204 - 1, v203));
    if (!v204)
    {
      ((void (*)(std::__shared_weak_count *))v202->__on_zero_shared)(v202);
      std::__shared_weak_count::__release_weak(v202);
    }
  }
  v205 = v276.__r_.__value_.__r.__words[0];
  if (v276.__r_.__value_.__r.__words[0])
  {
    if (*(_BYTE *)(v276.__r_.__value_.__r.__words[0] + 40))
    {
      v206 = *(_QWORD *)(v276.__r_.__value_.__r.__words[0] + 16);
      if (v206)
      {
        v207 = *(_QWORD *)(v276.__r_.__value_.__r.__words[0] + 24);
        v208 = *(void **)(v276.__r_.__value_.__r.__words[0] + 16);
        if (v207 != v206)
        {
          do
          {
            if (*(char *)(v207 - 1) < 0)
              operator delete(*(void **)(v207 - 24));
            v207 -= 24;
          }
          while (v207 != v206);
          v208 = *(void **)(v205 + 16);
        }
        *(_QWORD *)(v205 + 24) = v206;
        operator delete(v208);
      }
    }
    MEMORY[0x1B5E07CD8](v205, 0x1022C409BF09FA6);
  }
  v209 = *(_QWORD *)(v81 + 576);
  *(_DWORD *)v209 = *(_DWORD *)(v81 + 220);
  if (!*(_BYTE *)(v81 + 536))
  {
LABEL_478:
    if (v293.__r_.__value_.__s.__data_[7] < 0)
      goto LABEL_483;
LABEL_479:
    if (v285 < 0)
      goto LABEL_484;
LABEL_480:
    v211 = *(void ***)&v281[24];
    if (*(_QWORD *)&v281[24])
      goto LABEL_491;
    goto LABEL_485;
  }
  v210 = (char *)(v209 + 16);
  if (*(_BYTE *)(v209 + 40))
  {
    if (v210 != v237)
      sub_1B0336EE0((uint64_t)v210, *(std::string **)(v81 + 512), *(std::string **)(v81 + 520), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v81 + 520) - *(_QWORD *)(v81 + 512)) >> 3));
    goto LABEL_478;
  }
  *(_QWORD *)v210 = 0;
  *(_QWORD *)(v209 + 24) = 0;
  *(_QWORD *)(v209 + 32) = 0;
  sub_1B02EB2B0(v210, *(__int128 **)(v81 + 512), *(__int128 **)(v81 + 520), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v81 + 520) - *(_QWORD *)(v81 + 512)) >> 3));
  *(_BYTE *)(v209 + 40) = 1;
  if ((v293.__r_.__value_.__s.__data_[7] & 0x80000000) == 0)
    goto LABEL_479;
LABEL_483:
  operator delete((void *)buf.__r_.__value_.__l.__size_);
  if ((v285 & 0x80000000) == 0)
    goto LABEL_480;
LABEL_484:
  operator delete(v282);
  v211 = *(void ***)&v281[24];
  if (!*(_QWORD *)&v281[24])
    goto LABEL_485;
  do
  {
LABEL_491:
    v216 = (void **)*v211;
    if (*((char *)v211 + 39) < 0)
      operator delete(v211[2]);
    operator delete(v211);
    v211 = v216;
  }
  while (v216);
LABEL_485:
  v212 = *(void **)&v281[8];
  *(_QWORD *)&v281[8] = 0;
  if (v212)
    operator delete(v212);
  v213 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v214 = __p.__r_.__value_.__l.__size_;
    v215 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v214 - 1) < 0)
          operator delete(*(void **)(v214 - 24));
        v214 -= 24;
      }
      while (v214 != v213);
      v215 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v213;
    operator delete(v215);
  }
  if ((__dst[31] & 0x80000000) == 0)
  {
    if ((v260 & 0x80000000) == 0)
      goto LABEL_500;
LABEL_503:
    operator delete(v259);
    v217 = (void **)v257;
    if (!(_QWORD)v257)
      goto LABEL_504;
    do
    {
LABEL_510:
      v222 = (void **)*v217;
      if (*((char *)v217 + 39) < 0)
        operator delete(v217[2]);
      operator delete(v217);
      v217 = v222;
    }
    while (v222);
    goto LABEL_504;
  }
  operator delete(*(void **)&__dst[8]);
  if (v260 < 0)
    goto LABEL_503;
LABEL_500:
  v217 = (void **)v257;
  if ((_QWORD)v257)
    goto LABEL_510;
LABEL_504:
  v218 = (void *)v256;
  *(_QWORD *)&v256 = 0;
  if (v218)
    operator delete(v218);
  v219 = v253.__r_.__value_.__r.__words[0];
  if (v253.__r_.__value_.__r.__words[0])
  {
    v220 = v253.__r_.__value_.__l.__size_;
    v221 = (void *)v253.__r_.__value_.__r.__words[0];
    if (v253.__r_.__value_.__l.__size_ != v253.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v220 - 1) < 0)
          operator delete(*(void **)(v220 - 24));
        v220 -= 24;
      }
      while (v220 != v219);
      v221 = (void *)v253.__r_.__value_.__r.__words[0];
    }
    v253.__r_.__value_.__l.__size_ = v219;
    operator delete(v221);
  }
  if (SHIBYTE(v262.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v262.__r_.__value_.__l.__data_);
  return v81;
}

void sub_1B031F8F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_QWORD *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a72;
  char a73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  if (SLOBYTE(STACK[0x237]) < 0)
  {
    v74 = a28;
    operator delete((void *)STACK[0x220]);
    if (a34 < 0)
    {
LABEL_8:
      operator delete(a29);
      if ((a46 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a53 & 0x80000000) == 0)
          goto LABEL_11;
        goto LABEL_10;
      }
LABEL_6:
      operator delete(a41);
      if ((a53 & 0x80000000) == 0)
      {
LABEL_11:
        sub_1B0326B84((uint64_t)&a54);
        if (a73 < 0)
          operator delete(a72);
        sub_1B0320680(v74 + 576);
        sub_1B0320680(v74 + 560);
        v75 = *(_QWORD *)(v74 + 552);
        *(_QWORD *)(v74 + 552) = 0;
        if (v75)
          (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
        v76 = *a16;
        *a16 = 0;
        if (v76)
          (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        sub_1B0320784(a17);
        sub_1B03269E4(a22);
        sub_1B0320518(a9);
        sub_1B03205E0(a18);
        sub_1B03204A8(v74);
        _Unwind_Resume(a1);
      }
LABEL_10:
      operator delete(a48);
      goto LABEL_11;
    }
  }
  else
  {
    v74 = a28;
    if (a34 < 0)
      goto LABEL_8;
  }
  if ((a46 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_6;
}

void sub_1B0320384(uint64_t a1@<X0>, char *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  std::string v9;
  std::__fs::filesystem::path __p;

  memset(&v9, 0, sizeof(v9));
  v5 = a2[23];
  v6 = *((_QWORD *)a2 + 1);
  if ((v5 & 0x80u) != 0)
  {
    a2 = *(char **)a2;
    v5 = v6;
  }
  sub_1B02ECD44(&v9, a2, &a2[v5]);
  sub_1B032692C((std::__fs::filesystem::path *)&v9, a1 + 8, &__p);
  v7 = a3 + 1;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1B02EB0A8(v7, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    v8 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    *a3 = &unk_1E60CCEF8;
    if (v8 < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      return;
    }
LABEL_10:
    operator delete(v9.__r_.__value_.__l.__data_);
    return;
  }
  *(_OWORD *)v7 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
  a3[3] = *((_QWORD *)&__p.__pn_.__r_.__value_.__l + 2);
  *a3 = &unk_1E60CCEF8;
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
}

void sub_1B0320470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03204A8(uint64_t a1)
{
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1B0320518(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

std::exception *sub_1B032059C(std::exception *a1)
{
  uint64_t v2;

  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0)
    operator delete(a1[1].__vftable);
  return a1;
}

uint64_t sub_1B03205E0(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_5;
LABEL_10:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_11;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_10;
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_11:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1B0320680(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_1B03206E8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v3 = *(_QWORD *)(v2 + 16);
      if (v3)
      {
        v4 = *(_QWORD *)(v2 + 24);
        v5 = *(void **)(v2 + 16);
        if (v4 != v3)
        {
          do
          {
            if (*(char *)(v4 - 1) < 0)
              operator delete(*(void **)(v4 - 24));
            v4 -= 24;
          }
          while (v4 != v3);
          v5 = *(void **)(v2 + 16);
        }
        *(_QWORD *)(v2 + 24) = v3;
        operator delete(v5);
      }
    }
    MEMORY[0x1B5E07CD8](v2, 0x1022C409BF09FA6);
  }
  return a1;
}

uint64_t sub_1B0320784(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(void ***)(a1 + 8);
      v4 = *(void ***)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((char *)v3 - 1) < 0)
            operator delete(*(v3 - 3));
          v3 -= 3;
        }
        while (v3 != v2);
        v4 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_1B03207FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  int64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  void *v10;
  char *v11;
  void *v12;
  void *v13;
  void *__p;
  void *v15;
  char *v16;
  void *v17;
  char *v18;

  sub_1B0320928(a1, a2, &v17);
  v15 = 0;
  v16 = 0;
  __p = 0;
  v4 = *(const void **)v17;
  v3 = *((_QWORD *)v17 + 1);
  v5 = v3 - *(_QWORD *)v17;
  if (v3 != *(_QWORD *)v17)
  {
    if (v5 < 0)
      sub_1B02D7758();
    v6 = (char *)operator new(v3 - *(_QWORD *)v17);
    v7 = &v6[4 * (v5 >> 2)];
    __p = v6;
    v16 = v7;
    memcpy(v6, v4, v5);
    v15 = v7;
  }
  (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 560) + 32))(*(_QWORD *)(a1 + 560), &__p);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
  v8 = (char *)v17;
  if (v17)
  {
    v9 = v18;
    v10 = v17;
    if (v18 != v17)
    {
      v11 = v18;
      do
      {
        v13 = (void *)*((_QWORD *)v11 - 3);
        v11 -= 24;
        v12 = v13;
        if (v13)
        {
          *((_QWORD *)v9 - 2) = v12;
          operator delete(v12);
        }
        v9 = v11;
      }
      while (v11 != v8);
      v10 = v17;
    }
    v18 = v8;
    operator delete(v10);
  }
}

void sub_1B0320900(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12)
{
  if (__p)
    operator delete(__p);
  sub_1B03242EC(&a12);
  _Unwind_Resume(a1);
}

void sub_1B0320928(uint64_t a1@<X0>, uint64_t a2@<X1>, void **a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  uint64_t (**v18)();
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint32x4_t *v38;
  char *v39;
  float *v40;
  uint64_t v41;
  float32x4_t *v42;
  float *v43;
  uint64_t v44;
  uint32x4_t *v45;
  float *v46;
  unint64_t v47;
  uint64_t v48;
  float32x4_t *v49;
  uint32x4_t *v50;
  uint64_t v51;
  uint32x4_t v52;
  float v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  NSObject *v57;
  uint64_t *v58;
  _QWORD **v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 *v67;
  __int128 *i;
  __int128 v69;
  _QWORD **v70;
  uint8_t *v71;
  uint64_t v72;
  int v73;
  _QWORD **v74;
  _QWORD *v75;
  unsigned int v76;
  unsigned int v77;
  uint64_t v78;
  uint8_t *v79;
  uint8_t *v80;
  unsigned int v81;
  _DWORD *v82;
  void *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t (**v89)();
  unint64_t *v90;
  unint64_t v91;
  __int128 *v92;
  __int128 *j;
  __int128 v94;
  char *v95;
  uint8_t *v96;
  uint64_t v97;
  int v98;
  char *v99;
  uint64_t v100;
  unsigned int v101;
  unsigned int v102;
  uint64_t v103;
  uint8_t *v104;
  uint8_t *v105;
  unsigned int v106;
  _DWORD *v107;
  unsigned int v108;
  unsigned int v109;
  uint64_t v110;
  uint8_t *v111;
  uint8_t *v112;
  unsigned int v113;
  _DWORD *v114;
  unsigned int v115;
  unsigned int v116;
  uint64_t v117;
  uint8_t *v118;
  uint8_t *v119;
  unsigned int v120;
  _DWORD *v121;
  _QWORD *v122;
  unint64_t *v123;
  unint64_t v124;
  int v125;
  unint64_t *v126;
  unint64_t v127;
  char *v128;
  char *v129;
  void *v130;
  void *v131;
  _QWORD *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  unint64_t v136;
  char *v137;
  char *v138;
  int v139;
  int v140;
  int v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  unsigned int *v145;
  size_t v146;
  unint64_t v147;
  _DWORD *v148;
  NSObject *v149;
  unint64_t v150;
  float v151;
  unint64_t v152;
  size_t v153;
  std::locale::__imp *v154;
  char *v155;
  void **v156;
  uint64_t v157;
  void **v158;
  void **v159;
  const void *v160;
  int64_t v161;
  float *v162;
  int32x2_t v163;
  float *v164;
  float *v165;
  float v166;
  uint64_t v167;
  float *v168;
  float v169;
  BOOL v170;
  float *v171;
  float *v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  float32x4_t v177;
  float32x4_t v178;
  float32x4_t *v179;
  float32x4_t v180;
  float v181;
  float32x4_t v182;
  float v183;
  float32x4_t v184;
  float32x4_t v185;
  float v186;
  float32x4_t v187;
  float v188;
  float32x4_t v189;
  float32x4_t v190;
  float v191;
  float v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  float v196;
  BOOL v197;
  int32x2_t v198;
  unint64_t v199;
  float32x4_t v200;
  float32x4_t *v201;
  uint64_t v202;
  float32x4_t v203;
  size_t v204;
  uint64_t v205;
  unint64_t v206;
  unint64_t v207;
  NSObject *v208;
  uint64_t v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  uint64_t v213;
  std::ios_base *v214;
  uint64_t v215;
  uint64_t v216;
  const char *v217;
  size_t v218;
  size_t v219;
  uint64_t v220;
  uint8_t *v221;
  size_t v222;
  std::locale::__imp *p_dst;
  int v224;
  int v225;
  int v226;
  int v227;
  uint64_t v228;
  uint64_t v229;
  void *v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  char *v234;
  char *v235;
  void *v236;
  void *v237;
  float *v238;
  uint64_t v239;
  int v240;
  int v241;
  int v242;
  BOOL v243;
  void **v244;
  _DWORD *v245;
  void **v246;
  void **v247;
  float v248;
  _BYTE *v249;
  _BYTE *v250;
  int64_t v251;
  char *v252;
  const void *v253;
  int64_t v254;
  float *v255;
  int32x2_t v256;
  float *v257;
  float *v258;
  float v259;
  uint64_t v260;
  float *v261;
  float v262;
  float *v263;
  float *v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  size_t v268;
  float32x4_t v269;
  size_t v270;
  float32x4_t v271;
  float32x4_t *v272;
  __int128 v273;
  float v274;
  __int128 v275;
  float v276;
  __int128 v277;
  float32x4_t v278;
  float v279;
  float32x4_t v280;
  float v281;
  float32x4_t v282;
  float32x4_t v283;
  float v284;
  float v285;
  NSObject *v286;
  uint8_t *v287;
  size_t v288;
  uint64_t v289;
  float v290;
  int32x2_t v291;
  unint64_t v292;
  float32x4_t v293;
  float32x4_t *v294;
  uint64_t v295;
  float32x4_t v296;
  float v297;
  float *v298;
  int v299;
  int *v300;
  int *v301;
  char *v302;
  int v303;
  char *v304;
  int64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  unint64_t v309;
  _BYTE *v310;
  int *v311;
  uint64_t v312;
  int64_t v313;
  unint64_t v314;
  char *v315;
  int v316;
  unint64_t v317;
  uint64_t v318;
  uint64_t v319;
  _OWORD *v320;
  __int128 *v321;
  uint64_t v322;
  __int128 v323;
  unint64_t v324;
  char *v325;
  char *v326;
  unint64_t v327;
  uint64_t v328;
  char *v329;
  unint64_t v330;
  uint64_t v331;
  unint64_t v332;
  _BYTE *v333;
  uint64_t v334;
  uint64_t v335;
  char *v336;
  char *v337;
  char *v338;
  int64_t v339;
  uint64_t v340;
  char *v341;
  char *v342;
  unint64_t v343;
  unint64_t v344;
  unint64_t v345;
  char *v346;
  char *v347;
  char *v348;
  unint64_t v349;
  uint64_t v350;
  uint64_t v351;
  _OWORD *v352;
  __int128 *v353;
  uint64_t v354;
  __int128 v355;
  int v356;
  int64_t v357;
  uint64_t v358;
  uint64_t v359;
  _OWORD *v360;
  __int128 *v361;
  uint64_t v362;
  __int128 v363;
  int v364;
  char *v365;
  float *v366;
  __int128 *v367;
  __int128 *v368;
  char v369;
  char v370;
  __int128 v371;
  uint64_t v372;
  char *v373;
  uint64_t v374;
  void *v375;
  uint64_t v376;
  char v377;
  char v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  char v382;
  void *v383;
  float v384;
  float v385;
  int64_t v386;
  char *v387;
  char *v388;
  char *k;
  void *v390;
  NSObject *v391;
  char *v392;
  char *v393;
  char *v394;
  _BYTE *v395;
  _BYTE *v396;
  int64_t v397;
  char *v398;
  char *v399;
  uint64_t v400;
  void **v401;
  void *v402;
  char *v403;
  char *m;
  void *v405;
  char *v406;
  char *v407;
  char *v408;
  void *v409;
  void *v410;
  char *v411;
  char *v412;
  void *v413;
  void *v414;
  uint64_t v415;
  uint64_t v416;
  void *locale;
  uint64_t v418;
  uint64_t v419;
  int v420;
  int v421;
  _BYTE *v422;
  uint64_t v423;
  _BYTE *v424;
  uint64_t v425;
  uint64_t v426;
  unint64_t v427;
  uint64_t v428;
  unint64_t v429;
  char *v430;
  char *v431;
  char *v432;
  int64_t v433;
  unint64_t v434;
  uint64_t v435;
  uint64_t v436;
  char *v437;
  char *v438;
  __int128 *v439;
  uint64_t v440;
  __int128 v441;
  int v442;
  uint64_t v443;
  uint64_t v444;
  _BYTE *v445;
  uint64_t v446;
  uint64_t v447;
  _BYTE *v448;
  uint64_t v449;
  uint64_t v450;
  unint64_t v451;
  uint64_t v452;
  unint64_t v453;
  char *v454;
  char *v455;
  int64_t v456;
  unint64_t v457;
  uint64_t v458;
  uint64_t v459;
  char *v460;
  char *v461;
  __int128 *v462;
  uint64_t v463;
  __int128 v464;
  int v465;
  int v466;
  int v467;
  _BYTE *v468;
  uint64_t v469;
  _BYTE *v470;
  uint64_t v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t v474;
  unint64_t v475;
  char *v476;
  char *v477;
  int64_t v478;
  unint64_t v479;
  uint64_t v480;
  uint64_t v481;
  char *v482;
  char *v483;
  __int128 *v484;
  uint64_t v485;
  __int128 v486;
  int v487;
  int v488;
  int v489;
  int v490;
  NSObject *v491;
  const void *v492;
  int64_t v493;
  char *v494;
  void **v495;
  char *v496;
  char *v497;
  char *v498;
  void *v499;
  void *v500;
  std::__shared_weak_count *v501;
  unint64_t *v502;
  unint64_t v503;
  std::runtime_error *exception;
  uint64_t v505;
  uint64_t v507;
  size_t v508;
  size_t v509;
  uint64_t v510;
  uint64_t v511;
  float *v512;
  unsigned int *v513;
  uint64_t v514;
  uint64_t v515;
  float32x4_t v516;
  int32x2_t v517;
  unint64_t v518;
  float32x4_t v519;
  std::locale::__imp *v520;
  void *v521[2];
  float *v522;
  float32x4_t v523;
  float *v524;
  int32x2_t v525;
  float32x4_t v526;
  float32x4_t v527;
  float32x4_t v528;
  float32x4_t v529;
  float32x4_t v530;
  float *v531;
  void *__srca[2];
  float __srcb;
  void *__srcc[2];
  void *__srcd[2];
  void *__srce[2];
  char *__src;
  float32x4_t v538;
  float32x4_t v539;
  float32x4_t v540;
  float32x4_t v541;
  float v542;
  float32x4_t v543;
  float32x4_t v544;
  float32x4_t v545;
  __int128 v546;
  void *v547;
  void *v548;
  size_t __sz;
  _QWORD **v550;
  std::__shared_weak_count *v551;
  void *v552;
  char *v553;
  char *v554;
  void *v555;
  int v556;
  void *v557;
  char *v558;
  uint64_t v559;
  std::__shared_weak_count *v560;
  void *v561[2];
  char *v562;
  char *v563;
  char *v564;
  void *v565[2];
  uint64_t v566;
  _DWORD *v567;
  _DWORD *v568;
  _DWORD *v569;
  _DWORD *v570;
  _DWORD *v571;
  _DWORD *v572;
  _DWORD *v573;
  _DWORD *v574;
  _DWORD *v575;
  char *v576;
  char *v577;
  char *v578;
  void *v579;
  char *v580;
  char *v581;
  void *v582[2];
  char *v583;
  void *v584;
  uint64_t v585;
  char v586;
  uint8_t buf[16];
  __int128 v588;
  uint64_t v589;
  void *__p;
  uint64_t (**v591)();
  uint64_t (**v592)();
  uint64_t (**v593)();
  void *v594[4];
  std::__shared_weak_count *v595;
  uint64_t v596;
  void *v597;
  char *v598;
  uint64_t v599;
  _BYTE v600[22];
  std::locale __dst;
  __int128 v602;
  __int128 v603;
  __int128 v604;
  uint64_t v605;
  uint8_t v606[16];
  _QWORD v607[6];
  char v608;
  uint64_t v609;
  uint64_t v610;
  char v611;
  char v612;
  uint64_t v613;
  uint8_t v614[16];
  _OWORD v615[2];
  uint64_t (**v616)();
  __int128 *v617;
  __int128 v618;
  _QWORD **v619;
  std::__shared_weak_count *v620;
  char v621;
  uint64_t v622;
  uint64_t v623;

  v623 = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 8);
  if (a1 + 224 != a2)
    sub_1B03267E8((_QWORD *)(a1 + 240), *(char **)(a2 + 16), *(char **)(a2 + 24), (uint64_t)(*(_QWORD *)(a2 + 24) - *(_QWORD *)(a2 + 16)) >> 3);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = *(_QWORD *)(a2 + 48);
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *(std::__shared_weak_count **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = v5;
  *(_QWORD *)(a1 + 272) = v6;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(_QWORD *)(a1 + 544);
  BYTE7(v588) = 13;
  strcpy((char *)buf, "encoder_embed");
  v13 = a1;
  *((_QWORD *)&v588 + 1) = &unk_1E60CCA78;
  LODWORD(v589) = *(_DWORD *)(a1 + 232);
  v592 = 0;
  __p = 0;
  v591 = 0;
  v14 = *(_BYTE **)(a1 + 240);
  v510 = v13;
  v15 = *(_BYTE **)(v13 + 248);
  v16 = v15 - v14;
  if (v15 != v14)
  {
    if (v16 < 0)
      sub_1B02D7758();
    v17 = (char *)operator new(v15 - v14);
    v18 = (uint64_t (**)())&v17[8 * (v16 >> 3)];
    __p = v17;
    v592 = v18;
    memcpy(v17, v14, v16);
    v591 = v18;
  }
  v19 = *(unint64_t **)(v510 + 272);
  v593 = *(uint64_t (***)())(v510 + 264);
  v594[0] = v19;
  if (v19)
  {
    v20 = v19 + 1;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_OWORD *)v614 = 0u;
  v615[0] = 0u;
  LODWORD(v615[1]) = 1065353216;
  sub_1B032948C((uint64_t)v614, (uint64_t)buf, (__int128 *)buf);
  *((_QWORD *)&v588 + 1) = &unk_1E60CCA78;
  v22 = (std::__shared_weak_count *)v594[0];
  if (v594[0])
  {
    v23 = (unint64_t *)((char *)v594[0] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p)
  {
    v591 = (uint64_t (**)())__p;
    operator delete(__p);
  }
  if (SBYTE7(v588) < 0)
    operator delete(*(void **)buf);
  sub_1B0325870((uint64_t)&v555, v12, (uint64_t)v614, v510 + 48);
  sub_1B0328C28((uint64_t)v614);
  sub_1B031CB08(v510 + 280);
  v25 = *(_QWORD *)(v510 + 560);
  if (*(char *)(v25 + 31) < 0)
  {
    v26 = *(_QWORD *)(v25 + 8);
    v27 = *(_QWORD *)(v25 + 16);
  }
  else
  {
    v26 = v25 + 8;
    v27 = *(unsigned __int8 *)(v25 + 31);
  }
  v28 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 40))(v25, v26, v27);
  sub_1B031CE20((int *)(v510 + 280), v28);
  *(_DWORD *)(v510 + 464) = v556;
  if ((void **)(v510 + 456) != &v555)
    sub_1B03267E8((_QWORD *)(v510 + 472), (char *)v557, v558, (v558 - (_BYTE *)v557) >> 3);
  v30 = v559;
  v29 = v560;
  if (v560)
  {
    v31 = (unint64_t *)&v560->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  v33 = *(std::__shared_weak_count **)(v510 + 504);
  *(_QWORD *)(v510 + 496) = v30;
  *(_QWORD *)(v510 + 504) = v29;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  memset(v614, 0, sizeof(v614));
  *(_QWORD *)&v615[0] = 0;
  if (*(_DWORD *)(v510 + 296) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v510 + 328) + 24))(*(_QWORD *)(v510 + 328));
  *(_QWORD *)v606 = v614;
  if (v37 < 4)
  {
    v38 = 0;
    v39 = 0;
    *(_QWORD *)&v588 = 0;
    memset(buf, 0, sizeof(buf));
    goto LABEL_53;
  }
  v40 = (float *)v36;
  v41 = 4 * (v37 >> 2);
  do
  {
    sub_1B0335700((uint64_t *)v606, *v40++);
    v41 -= 4;
  }
  while (v41);
  v42 = *(float32x4_t **)v614;
  v43 = *(float **)&v614[8];
  *(_QWORD *)&v588 = 0;
  memset(buf, 0, sizeof(buf));
  v44 = *(_QWORD *)&v614[8] - *(_QWORD *)v614;
  if (*(_QWORD *)&v614[8] == *(_QWORD *)v614)
  {
    v39 = 0;
    v38 = 0;
    if (*(_QWORD *)v614)
    {
LABEL_52:
      *(_QWORD *)&v614[8] = v42;
      operator delete(v42);
    }
  }
  else
  {
    if (v44 < 0)
      sub_1B02D7758();
    v38 = (uint32x4_t *)operator new(*(_QWORD *)&v614[8] - *(_QWORD *)v614);
    *(_QWORD *)buf = v38;
    *(_QWORD *)&v588 = (char *)v38 + 4 * (v44 >> 2);
    bzero(v38, (char *)v43 - (char *)v42);
    v39 = &v38->i8[v44];
    *(_QWORD *)&buf[8] = (char *)v38 + v44;
    v45 = v38;
    v46 = (float *)v42;
    if ((unint64_t)(v44 - 4) < 0x1C)
      goto LABEL_724;
    v47 = ((unint64_t)(v44 - 4) >> 2) + 1;
    v48 = v47 & 0x7FFFFFFFFFFFFFF8;
    v45 = (uint32x4_t *)((char *)v38 + v48 * 4);
    v46 = &v42->f32[v48];
    v49 = v42 + 1;
    v50 = v38 + 1;
    v51 = v47 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v52 = vcvtq_u32_f32(*v49);
      v50[-1] = vcvtq_u32_f32(v49[-1]);
      *v50 = v52;
      v49 += 2;
      v50 += 2;
      v51 -= 8;
    }
    while (v51);
    if (v47 != (v47 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_724:
      do
      {
        v53 = *v46++;
        v45->i32[0] = v53;
        v45 = (uint32x4_t *)((char *)v45 + 4);
      }
      while (v46 != v43);
    }
    if (v42)
      goto LABEL_52;
  }
LABEL_53:
  v54 = *(int *)(v510 + 280);
  v553 = 0;
  v554 = 0;
  if ((v39 - (char *)v38) >> 2 >= v54)
    v55 = v54;
  else
    v55 = (v39 - (char *)v38) >> 2;
  v552 = 0;
  if (v55)
  {
    if (v55 < 0)
      sub_1B02D7758();
    v552 = operator new(4 * v55);
    v554 = (char *)v552 + 4 * v55;
    memmove(v552, v38, 4 * v55);
    v553 = v554;
  }
  if (v38)
  {
    *(_QWORD *)&buf[8] = v38;
    operator delete(v38);
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v56 = *(uint64_t **)(v510 + 576);
  if (*((_DWORD *)v56 + 13) == 1)
  {
    if (qword_1EEEB2D28 != -1)
      dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
    v57 = (id)qword_1EEEB2D20;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_1B02D2000, v57, OS_LOG_TYPE_DEBUG, "Performing greedy search, since requested topKPerStep is 1.", buf, 2u);
    }

    v58 = *(uint64_t **)(v510 + 576);
    v59 = *(_QWORD ***)(v510 + 560);
    v60 = *(std::__shared_weak_count **)(v510 + 568);
    v550 = v59;
    v551 = v60;
    if (v60)
    {
      v61 = (unint64_t *)&v60->__shared_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      do
        v63 = __ldxr(v61);
      while (__stxr(v63 + 1, v61));
    }
    v64 = *v58;
    *(_QWORD *)&v614[5] = *(uint64_t *)((char *)v58 + 5);
    *(_QWORD *)v614 = v64;
    LOBYTE(v615[0]) = 0;
    BYTE8(v615[1]) = 0;
    if (*((_BYTE *)v58 + 40))
    {
      memset(v615, 0, 24);
      sub_1B02EB2B0((char *)v615, (__int128 *)v58[2], (__int128 *)v58[3], 0xAAAAAAAAAAAAAAABLL * ((v58[3] - v58[2]) >> 3));
      BYTE8(v615[1]) = 1;
    }
    v618 = 0uLL;
    v616 = off_1E60CCFA8;
    v617 = &v618;
    v619 = v59;
    v620 = v60;
    if (v60)
    {
      v65 = (unint64_t *)&v60->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    v607[0] = 0;
    *(_QWORD *)&v606[8] = 0;
    *(_QWORD *)v606 = &v606[8];
    if (*((_BYTE *)v58 + 40))
    {
      v67 = (__int128 *)v58[2];
      for (i = (__int128 *)v58[3]; v67 != i; v67 = (__int128 *)((char *)v67 + 24))
      {
        while (1)
        {
          if (*((char *)v67 + 23) < 0)
          {
            sub_1B02EB0A8(buf, *(void **)v67, *((_QWORD *)v67 + 1));
          }
          else
          {
            v69 = *v67;
            *(_QWORD *)&v588 = *((_QWORD *)v67 + 2);
            *(_OWORD *)buf = v69;
          }
          v70 = v619;
          if ((SBYTE7(v588) & 0x80u) == 0)
            v71 = buf;
          else
            v71 = *(uint8_t **)buf;
          if ((SBYTE7(v588) & 0x80u) == 0)
            v72 = BYTE7(v588);
          else
            v72 = *(_QWORD *)&buf[8];
          v73 = sub_1B02E60F4(v619 + 10, (uint64_t)v71, v72);
          if (*((char *)v70 + 79) < 0)
          {
            v74 = (_QWORD **)v70[7];
            v75 = v70[8];
          }
          else
          {
            v74 = v70 + 7;
            v75 = (_QWORD *)*((unsigned __int8 *)v70 + 79);
          }
          if (v73 != ((unsigned int (*)(_QWORD **, _QWORD **, _QWORD *))(*v70)[5])(v70, v74, v75))
          {
            v76 = ((uint64_t (*)(void))(*v619)[5])();
            v77 = v76;
            v78 = *(_QWORD *)&v606[8];
            v79 = &v606[8];
            v80 = &v606[8];
            if (*(_QWORD *)&v606[8])
            {
              do
              {
                while (1)
                {
                  v80 = (uint8_t *)v78;
                  v81 = *(_DWORD *)(v78 + 28);
                  if (v76 >= v81)
                    break;
                  v78 = *(_QWORD *)v80;
                  v79 = v80;
                  if (!*(_QWORD *)v80)
                    goto LABEL_101;
                }
                if (v81 >= v76)
                  goto LABEL_79;
                v78 = *((_QWORD *)v80 + 1);
              }
              while (v78);
              v79 = v80 + 8;
            }
LABEL_101:
            v82 = operator new(0x20uLL);
            v82[7] = v77;
            *(_QWORD *)v82 = 0;
            *((_QWORD *)v82 + 1) = 0;
            *((_QWORD *)v82 + 2) = v80;
            *(_QWORD *)v79 = v82;
            if (**(_QWORD **)v606)
            {
              *(_QWORD *)v606 = **(_QWORD **)v606;
              v82 = *(_DWORD **)v79;
            }
            sub_1B02D8180(*(uint64_t **)&v606[8], (uint64_t *)v82);
            ++v607[0];
          }
LABEL_79:
          if (SBYTE7(v588) < 0)
            break;
          v67 = (__int128 *)((char *)v67 + 24);
          if (v67 == i)
            goto LABEL_158;
        }
        operator delete(*(void **)buf);
      }
    }
LABEL_158:
    v115 = ((uint64_t (*)(void))(*v619)[5])();
    v116 = v115;
    v117 = *(_QWORD *)&v606[8];
    v118 = &v606[8];
    v119 = &v606[8];
    if (*(_QWORD *)&v606[8])
    {
      do
      {
        while (1)
        {
          v119 = (uint8_t *)v117;
          v120 = *(_DWORD *)(v117 + 28);
          if (v115 >= v120)
            break;
          v117 = *(_QWORD *)v119;
          v118 = v119;
          if (!*(_QWORD *)v119)
            goto LABEL_165;
        }
        if (v120 >= v115)
          goto LABEL_168;
        v117 = *((_QWORD *)v119 + 1);
      }
      while (v117);
      v118 = v119 + 8;
    }
LABEL_165:
    v121 = operator new(0x20uLL);
    v121[7] = v116;
    *(_QWORD *)v121 = 0;
    *((_QWORD *)v121 + 1) = 0;
    *((_QWORD *)v121 + 2) = v119;
    *(_QWORD *)v118 = v121;
    if (**(_QWORD **)v606)
    {
      *(_QWORD *)v606 = **(_QWORD **)v606;
      v121 = *(_DWORD **)v118;
    }
    sub_1B02D8180(*(uint64_t **)&v606[8], (uint64_t *)v121);
    ++v607[0];
LABEL_168:
    v602 = 0uLL;
    __dst.__locale_ = (std::locale::__imp *)&v602;
    sub_1B0329080((uint64_t *)&__dst, *(_QWORD **)v606, &v606[8]);
    *(_QWORD *)buf = off_1E60CCFA8;
    *(std::locale *)&buf[8] = __dst;
    v588 = v602;
    if (*((_QWORD *)&v602 + 1))
    {
      *(_QWORD *)(v602 + 16) = &v588;
      __dst.__locale_ = (std::locale::__imp *)&v602;
      v602 = 0uLL;
    }
    else
    {
      *(_QWORD *)&buf[8] = &v588;
    }
    sub_1B03291F4((_QWORD *)v618);
    v132 = (_QWORD *)v588;
    v617 = *(__int128 **)&buf[8];
    v618 = v588;
    if (*((_QWORD *)&v588 + 1))
    {
      *(_QWORD *)(v588 + 16) = &v618;
      *(_QWORD *)&buf[8] = &v588;
      v588 = 0uLL;
      v132 = 0;
    }
    else
    {
      v617 = &v618;
    }
    *(_QWORD *)buf = off_1E60CCFA8;
    sub_1B03291F4(v132);
    sub_1B03291F4((_QWORD *)v602);
    sub_1B03291F4(*(_QWORD **)&v606[8]);
    if (v60)
    {
      v133 = (unint64_t *)&v60->__shared_owners_;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
      if (!v134)
      {
        ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
        std::__shared_weak_count::__release_weak(v60);
      }
    }
    if (v551)
    {
      v135 = &v551->__shared_owners_;
      do
        v136 = __ldaxr((unint64_t *)v135);
      while (__stlxr(v136 - 1, (unint64_t *)v135));
      if (!v136)
      {
        ((void (*)(std::__shared_weak_count *))v551->__on_zero_shared)(v551);
        std::__shared_weak_count::__release_weak(v551);
      }
    }
    v137 = (char *)v552;
    v138 = v553;
    *(_QWORD *)buf = *(_QWORD *)v614;
    *(_QWORD *)&buf[5] = *(_QWORD *)&v614[5];
    LOBYTE(__p) = 0;
    if (BYTE8(v615[1]))
    {
      v588 = 0uLL;
      v589 = 0;
      sub_1B02EB2B0((char *)&v588, *(__int128 **)&v615[0], *((__int128 **)&v615[0] + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v615[0] + 1) - *(_QWORD *)&v615[0]) >> 3));
      LOBYTE(__p) = 1;
      v139 = buf[12];
      v140 = *(_DWORD *)buf;
      v141 = *(_DWORD *)&buf[8];
      v142 = v588;
      if ((_QWORD)v588)
      {
        v143 = *((_QWORD *)&v588 + 1);
        v144 = (void *)v588;
        if (*((_QWORD *)&v588 + 1) != (_QWORD)v588)
        {
          do
          {
            if (*(char *)(v143 - 1) < 0)
              operator delete(*(void **)(v143 - 24));
            v143 -= 24;
          }
          while (v143 != v142);
          v144 = (void *)v588;
        }
        *((_QWORD *)&v588 + 1) = v142;
        operator delete(v144);
      }
    }
    else
    {
      v139 = buf[12];
      v140 = *(_DWORD *)buf;
      v141 = *(_DWORD *)&buf[8];
    }
    v204 = v553 - (_BYTE *)v552;
    v205 = (v553 - (_BYTE *)v552) >> 2;
    v206 = v141;
    if (v141 >= (unint64_t)(v140 - v205))
      v206 = v140 - v205;
    if (v139)
      v207 = v206;
    else
      v207 = v140 - v205;
    if (qword_1EEEB2D28 != -1)
      dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
    v208 = (id)qword_1EEEB2D20;
    if (!os_log_type_enabled(v208, OS_LOG_TYPE_DEBUG))
    {
      v216 = v510;
      goto LABEL_591;
    }
    v586 = 1;
    LOWORD(v584) = 32;
    v209 = MEMORY[0x1E0DE4FE0];
    v210 = MEMORY[0x1E0DE4FE0] + 64;
    v211 = (_QWORD *)MEMORY[0x1E0DE4F60];
    v212 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v213 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v596 = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)buf = v212;
    *(_QWORD *)&buf[*(_QWORD *)(v212 - 24)] = v213;
    v214 = (std::ios_base *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)];
    std::ios_base::init(v214, &buf[8]);
    v214[1].__vftable = 0;
    v214[1].__fmtflags_ = -1;
    *(_QWORD *)buf = v209 + 24;
    v596 = v210;
    std::streambuf::basic_streambuf();
    v215 = MEMORY[0x1E0DE4FB8];
    *(_QWORD *)&buf[8] = MEMORY[0x1E0DE4FB8] + 16;
    memset(v594, 0, sizeof(v594));
    LODWORD(v595) = 16;
    if (v205 == 1)
    {
      std::ostream::operator<<();
      std::stringbuf::str();
      goto LABEL_584;
    }
    if (!v205)
    {
      v602 = 0uLL;
      __dst.__locale_ = 0;
      goto LABEL_584;
    }
    if (v586 >= 0)
      v217 = (const char *)&v584;
    else
      v217 = (const char *)v584;
    if (v137 != v138)
    {
      if (v217)
      {
        do
        {
          std::ostream::operator<<();
          v218 = strlen(v217);
          sub_1B02D7994(buf, (uint64_t)v217, v218);
          v137 += 4;
        }
        while (v137 != v138);
      }
      else
      {
        do
        {
          std::ostream::operator<<();
          v137 += 4;
        }
        while (v137 != v138);
      }
    }
    std::stringbuf::str();
    v219 = HIBYTE(v607[0]);
    v220 = v586;
    if (v586 < 0)
      v220 = v585;
    if (v607[0] >= 0)
    {
      v221 = v606;
    }
    else
    {
      v219 = *(_QWORD *)&v606[8];
      v221 = *(uint8_t **)v606;
    }
    if (v219 >= v219 - v220)
      v222 = v219 - v220;
    else
      v222 = v219;
    if (v222 >= 0x7FFFFFFFFFFFFFF8)
      sub_1B02D78C4();
    if (v222 >= 0x17)
    {
      v415 = (v222 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v222 | 7) != 0x17)
        v415 = v222 | 7;
      v416 = v415 + 1;
      p_dst = (std::locale::__imp *)operator new(v415 + 1);
      *((_QWORD *)&v602 + 1) = v416 | 0x8000000000000000;
      __dst.__locale_ = p_dst;
      *(_QWORD *)&v602 = v222;
    }
    else
    {
      HIBYTE(v602) = v222;
      p_dst = (std::locale::__imp *)&__dst;
      if (!v222)
      {
LABEL_582:
        *((_BYTE *)p_dst + v222) = 0;
        if (SHIBYTE(v607[0]) < 0)
          operator delete(*(void **)v606);
LABEL_584:
        *(_QWORD *)buf = *v211;
        *(_QWORD *)&buf[*(_QWORD *)(*(_QWORD *)buf - 24)] = v211[3];
        *(_QWORD *)&buf[8] = v215 + 16;
        if (SHIBYTE(v594[2]) < 0)
          operator delete(v594[0]);
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        MEMORY[0x1B5E07C60](&v596);
        locale = &__dst;
        if (v602 < 0)
          locale = __dst.__locale_;
        *(_DWORD *)v600 = 136315394;
        *(_QWORD *)&v600[4] = locale;
        *(_WORD *)&v600[12] = 2048;
        *(_QWORD *)&v600[14] = v207;
        _os_log_impl(&dword_1B02D2000, v208, OS_LOG_TYPE_DEBUG, "sampleTokenIDs(%s, %zu)", v600, 0x16u);
        if (SHIBYTE(v602) < 0)
        {
          operator delete(__dst.__locale_);
          v216 = v510;
          if ((v586 & 0x80000000) == 0)
            goto LABEL_590;
        }
        else
        {
          v216 = v510;
          if ((v586 & 0x80000000) == 0)
          {
LABEL_590:
            v137 = (char *)v552;
            v138 = v553;
            v204 = v553 - (_BYTE *)v552;
            v205 = (v553 - (_BYTE *)v552) >> 2;
LABEL_591:

            memset(buf, 0, sizeof(buf));
            *(_QWORD *)&v588 = 0;
            if (v138 == v137)
            {
              memset(v606, 0, sizeof(v606));
              v607[0] = 0;
            }
            else
            {
              if ((v204 & 0x8000000000000000) != 0)
                sub_1B02D7758();
              *(_QWORD *)buf = operator new(v204);
              *(_QWORD *)&buf[8] = *(_QWORD *)buf;
              v418 = *(_QWORD *)buf + 4 * v205;
              *(_QWORD *)&v588 = v418;
              memcpy(*(void **)buf, v137, v204);
              *(_QWORD *)&buf[8] = v418;
              *(_QWORD *)v606 = operator new(v204);
              *(_QWORD *)&v606[8] = *(_QWORD *)v606;
              v419 = *(_QWORD *)v606 + 4 * v205;
              v607[0] = v419;
              memcpy(*(void **)v606, v137, v204);
              *(_QWORD *)&v606[8] = v419;
            }
            v420 = sub_1B03371E4((uint64_t)v614, (unsigned int **)buf, v216);
            v421 = v420;
            v422 = *(_BYTE **)&v606[8];
            if (*(_QWORD *)&v606[8] < v607[0])
            {
              **(_DWORD **)&v606[8] = v420;
              v423 = (uint64_t)(v422 + 4);
LABEL_616:
              *(_QWORD *)&v606[8] = v423;
              if (v207 <= 1)
                v207 = 1;
              v443 = 1;
              while (1)
              {
                if (v443 == v207)
                {
LABEL_670:
                  v602 = 0uLL;
                  __dst.__locale_ = 0;
                  v492 = *(const void **)v606;
                  v493 = *(_QWORD *)&v606[8] - *(_QWORD *)v606;
                  if (*(_QWORD *)&v606[8] != *(_QWORD *)v606)
                  {
                    if (v493 < 0)
                      sub_1B02D7758();
                    __dst.__locale_ = (std::locale::__imp *)operator new(*(_QWORD *)&v606[8] - *(_QWORD *)v606);
                    *(std::locale *)&v602 = __dst;
                    v494 = (char *)__dst.__locale_ + 4 * (v493 >> 2);
                    *((_QWORD *)&v602 + 1) = v494;
                    memcpy(__dst.__locale_, v492, v493);
                    *(_QWORD *)&v602 = v494;
                  }
                  v582[1] = 0;
                  v582[0] = 0;
                  v583 = 0;
                  v582[0] = operator new(0x18uLL);
                  v582[1] = v582[0];
                  v583 = (char *)v582[0] + 24;
                  v582[1] = sub_1B0343A28((uint64_t)&v583, (uint64_t)&__dst, (uint64_t)&v603, (_QWORD *)v582[0]);
                  if (__dst.__locale_)
                  {
                    *(std::locale *)&v602 = __dst;
                    operator delete(__dst.__locale_);
                  }
                  if (*(_QWORD *)v606)
                  {
                    *(_QWORD *)&v606[8] = *(_QWORD *)v606;
                    operator delete(*(void **)v606);
                  }
                  if (*(_QWORD *)buf)
                  {
                    *(_QWORD *)&buf[8] = *(_QWORD *)buf;
                    operator delete(*(void **)buf);
                  }
                  v495 = a3;
                  v496 = (char *)*a3;
                  if (*a3)
                  {
                    v497 = (char *)a3[1];
                    if (v497 != v496)
                    {
                      v498 = (char *)a3[1];
                      do
                      {
                        v500 = (void *)*((_QWORD *)v498 - 3);
                        v498 -= 24;
                        v499 = v500;
                        if (v500)
                        {
                          *((_QWORD *)v497 - 2) = v499;
                          operator delete(v499);
                        }
                        v497 = v498;
                      }
                      while (v498 != v496);
                    }
                    operator delete(v496);
                    v495 = a3;
                    *a3 = 0;
                    a3[1] = 0;
                    a3[2] = 0;
                  }
                  *(_OWORD *)v495 = *(_OWORD *)v582;
                  v495[2] = v583;
                  sub_1B032922C((uint64_t)v614);
                  if (v137)
                    goto LABEL_687;
                  goto LABEL_688;
                }
                v444 = *(_QWORD *)&v606[8];
                v445 = *(_BYTE **)&buf[8];
                if (*(_QWORD *)&buf[8] < (unint64_t)v588)
                {
                  **(_DWORD **)&buf[8] = *(_DWORD *)(*(_QWORD *)&v606[8] - 4);
                  v446 = (uint64_t)(v445 + 4);
                  v447 = v510;
                  goto LABEL_639;
                }
                v448 = *(_BYTE **)buf;
                v449 = *(_QWORD *)&buf[8] - *(_QWORD *)buf;
                v450 = (uint64_t)(*(_QWORD *)&buf[8] - *(_QWORD *)buf) >> 2;
                v451 = v450 + 1;
                if ((unint64_t)(v450 + 1) >> 62)
                  sub_1B02D7758();
                v452 = v588 - *(_QWORD *)buf;
                if ((uint64_t)(v588 - *(_QWORD *)buf) >> 1 > v451)
                  v451 = v452 >> 1;
                if ((unint64_t)v452 >= 0x7FFFFFFFFFFFFFFCLL)
                  v453 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v453 = v451;
                if (v453)
                {
                  if (v453 >> 62)
                    sub_1B02D72AC();
                  v454 = (char *)operator new(4 * v453);
                  v455 = &v454[4 * v450];
                  *(_DWORD *)v455 = *(_DWORD *)(v444 - 4);
                  v446 = (uint64_t)(v455 + 4);
                  v456 = v445 - v448;
                  if (v445 == v448)
                  {
LABEL_652:
                    v447 = v510;
                    *(_QWORD *)buf = v455;
                    *(_QWORD *)&buf[8] = v446;
                    *(_QWORD *)&v588 = &v454[4 * v453];
                    if (v448)
                      goto LABEL_638;
                    goto LABEL_639;
                  }
                }
                else
                {
                  v454 = 0;
                  v455 = (char *)(4 * v450);
                  *(_DWORD *)(4 * v450) = *(_DWORD *)(*(_QWORD *)&v606[8] - 4);
                  v446 = 4 * v450 + 4;
                  v456 = v445 - v448;
                  if (v445 == v448)
                    goto LABEL_652;
                }
                v457 = v456 - 4;
                v447 = v510;
                if (v457 < 0x2C)
                  goto LABEL_725;
                if ((unint64_t)(v445 - v454 - v449) < 0x20)
                  goto LABEL_725;
                v458 = (v457 >> 2) + 1;
                v459 = 4 * (v458 & 0x7FFFFFFFFFFFFFF8);
                v460 = &v445[-v459];
                v455 -= v459;
                v461 = &v454[4 * v450 - 16];
                v462 = (__int128 *)(v445 - 16);
                v463 = v458 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v464 = *v462;
                  *((_OWORD *)v461 - 1) = *(v462 - 1);
                  *(_OWORD *)v461 = v464;
                  v461 -= 32;
                  v462 -= 2;
                  v463 -= 8;
                }
                while (v463);
                v445 = v460;
                if (v458 != (v458 & 0x7FFFFFFFFFFFFFF8))
                {
LABEL_725:
                  do
                  {
                    v465 = *((_DWORD *)v445 - 1);
                    v445 -= 4;
                    *((_DWORD *)v455 - 1) = v465;
                    v455 -= 4;
                  }
                  while (v445 != v448);
                }
                *(_QWORD *)buf = v455;
                *(_QWORD *)&buf[8] = v446;
                *(_QWORD *)&v588 = &v454[4 * v453];
                if (v448)
LABEL_638:
                  operator delete(v448);
LABEL_639:
                *(_QWORD *)&buf[8] = v446;
                v466 = sub_1B03371E4((uint64_t)v614, (unsigned int **)buf, v447);
                v467 = v466;
                v468 = *(_BYTE **)&v606[8];
                if (*(_QWORD *)&v606[8] >= v607[0])
                {
                  v470 = *(_BYTE **)v606;
                  v471 = *(_QWORD *)&v606[8] - *(_QWORD *)v606;
                  v472 = (uint64_t)(*(_QWORD *)&v606[8] - *(_QWORD *)v606) >> 2;
                  v473 = v472 + 1;
                  if ((unint64_t)(v472 + 1) >> 62)
                    sub_1B02D7758();
                  v474 = v607[0] - *(_QWORD *)v606;
                  if ((uint64_t)(v607[0] - *(_QWORD *)v606) >> 1 > v473)
                    v473 = v474 >> 1;
                  if ((unint64_t)v474 >= 0x7FFFFFFFFFFFFFFCLL)
                    v475 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v475 = v473;
                  if (v475)
                  {
                    if (v475 >> 62)
                      sub_1B02D72AC();
                    v476 = (char *)operator new(4 * v475);
                    v477 = &v476[4 * v472];
                    *(_DWORD *)v477 = v467;
                    v469 = (uint64_t)(v477 + 4);
                    v478 = v468 - v470;
                    if (v468 == v470)
                      goto LABEL_661;
LABEL_655:
                    v479 = v478 - 4;
                    if (v479 < 0x2C)
                      goto LABEL_726;
                    if ((unint64_t)(v468 - &v476[v471]) < 0x20)
                      goto LABEL_726;
                    v480 = (v479 >> 2) + 1;
                    v481 = 4 * (v480 & 0x7FFFFFFFFFFFFFF8);
                    v482 = &v468[-v481];
                    v477 -= v481;
                    v483 = &v476[4 * v472 - 16];
                    v484 = (__int128 *)(v468 - 16);
                    v485 = v480 & 0x7FFFFFFFFFFFFFF8;
                    do
                    {
                      v486 = *v484;
                      *((_OWORD *)v483 - 1) = *(v484 - 1);
                      *(_OWORD *)v483 = v486;
                      v483 -= 32;
                      v484 -= 2;
                      v485 -= 8;
                    }
                    while (v485);
                    v468 = v482;
                    if (v480 != (v480 & 0x7FFFFFFFFFFFFFF8))
                    {
LABEL_726:
                      do
                      {
                        v487 = *((_DWORD *)v468 - 1);
                        v468 -= 4;
                        *((_DWORD *)v477 - 1) = v487;
                        v477 -= 4;
                      }
                      while (v468 != v470);
                    }
                  }
                  else
                  {
                    v476 = 0;
                    v477 = (char *)(4 * v472);
                    *(_DWORD *)(4 * v472) = v467;
                    v469 = 4 * v472 + 4;
                    v478 = v468 - v470;
                    if (v468 != v470)
                      goto LABEL_655;
                  }
LABEL_661:
                  *(_QWORD *)v606 = v477;
                  *(_QWORD *)&v606[8] = v469;
                  v607[0] = &v476[4 * v475];
                  if (v470)
                    operator delete(v470);
                  goto LABEL_663;
                }
                **(_DWORD **)&v606[8] = v466;
                v469 = (uint64_t)(v468 + 4);
LABEL_663:
                *(_QWORD *)&v606[8] = v469;
                v488 = v614[4];
                v489 = *(_DWORD *)(v469 - 4);
                v490 = ((uint64_t (*)(void))(*v619)[5])();
                ++v443;
                if (v488 && v489 == v490)
                {
                  if (qword_1EEEB2D28 != -1)
                    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
                  v491 = (id)qword_1EEEB2D20;
                  if (os_log_type_enabled(v491, OS_LOG_TYPE_DEBUG))
                  {
                    LOWORD(__dst.__locale_) = 0;
                    _os_log_impl(&dword_1B02D2000, v491, OS_LOG_TYPE_DEBUG, "EOS encountered in greedySample. Terminating early.", (uint8_t *)&__dst, 2u);
                  }

                  goto LABEL_670;
                }
              }
            }
            v424 = *(_BYTE **)v606;
            v425 = *(_QWORD *)&v606[8] - *(_QWORD *)v606;
            v426 = (uint64_t)(*(_QWORD *)&v606[8] - *(_QWORD *)v606) >> 2;
            v427 = v426 + 1;
            if ((unint64_t)(v426 + 1) >> 62)
              sub_1B02D7758();
            v428 = v607[0] - *(_QWORD *)v606;
            if ((uint64_t)(v607[0] - *(_QWORD *)v606) >> 1 > v427)
              v427 = v428 >> 1;
            if ((unint64_t)v428 >= 0x7FFFFFFFFFFFFFFCLL)
              v429 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v429 = v427;
            if (v429)
            {
              if (v429 >> 62)
                sub_1B02D72AC();
              v430 = (char *)operator new(4 * v429);
              v431 = &v430[4 * v426];
              v432 = &v430[4 * v429];
              *(_DWORD *)v431 = v421;
              v423 = (uint64_t)(v431 + 4);
              v433 = v422 - v424;
              if (v422 == v424)
                goto LABEL_614;
            }
            else
            {
              v430 = 0;
              v431 = (char *)(4 * v426);
              v432 = 0;
              *(_DWORD *)(4 * v426) = v421;
              v423 = 4 * v426 + 4;
              v433 = v422 - v424;
              if (v422 == v424)
              {
LABEL_614:
                *(_QWORD *)v606 = v431;
                *(_QWORD *)&v606[8] = v423;
                v607[0] = v432;
                if (v424)
                  operator delete(v424);
                goto LABEL_616;
              }
            }
            v434 = v433 - 4;
            if (v434 < 0x2C)
              goto LABEL_727;
            if ((unint64_t)(v422 - v430 - v425) < 0x20)
              goto LABEL_727;
            v435 = (v434 >> 2) + 1;
            v436 = 4 * (v435 & 0x7FFFFFFFFFFFFFF8);
            v437 = &v422[-v436];
            v431 -= v436;
            v438 = &v430[4 * v426 - 16];
            v439 = (__int128 *)(v422 - 16);
            v440 = v435 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v441 = *v439;
              *((_OWORD *)v438 - 1) = *(v439 - 1);
              *(_OWORD *)v438 = v441;
              v438 -= 32;
              v439 -= 2;
              v440 -= 8;
            }
            while (v440);
            v422 = v437;
            if (v435 != (v435 & 0x7FFFFFFFFFFFFFF8))
            {
LABEL_727:
              do
              {
                v442 = *((_DWORD *)v422 - 1);
                v422 -= 4;
                *((_DWORD *)v431 - 1) = v442;
                v431 -= 4;
              }
              while (v422 != v424);
            }
            goto LABEL_614;
          }
        }
        operator delete(v584);
        goto LABEL_590;
      }
    }
    memmove(p_dst, v221, v222);
    goto LABEL_582;
  }
  v83 = *(void **)(v510 + 560);
  v84 = *(std::__shared_weak_count **)(v510 + 568);
  v548 = v83;
  __sz = (size_t)v84;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    do
      v87 = __ldxr(v85);
    while (__stxr(v87 + 1, v85));
  }
  v88 = *v56;
  *(_QWORD *)&buf[5] = *(uint64_t *)((char *)v56 + 5);
  *(_QWORD *)buf = v88;
  LOBYTE(v588) = 0;
  LOBYTE(__p) = 0;
  if (*((_BYTE *)v56 + 40))
  {
    v588 = 0uLL;
    v589 = 0;
    sub_1B02EB2B0((char *)&v588, (__int128 *)v56[2], (__int128 *)v56[3], 0xAAAAAAAAAAAAAAABLL * ((v56[3] - v56[2]) >> 3));
    LOBYTE(__p) = 1;
  }
  v89 = (uint64_t (**)())v56[6];
  LODWORD(v592) = *((_DWORD *)v56 + 14);
  v591 = v89;
  *(_OWORD *)&v594[1] = 0uLL;
  v593 = off_1E60CCFA8;
  v594[0] = &v594[1];
  v594[3] = v83;
  v595 = v84;
  if (v84)
  {
    v90 = (unint64_t *)&v84->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  v607[0] = 0;
  *(_QWORD *)&v606[8] = 0;
  *(_QWORD *)v606 = &v606[8];
  if (*((_BYTE *)v56 + 40))
  {
    v92 = (__int128 *)v56[2];
    for (j = (__int128 *)v56[3]; v92 != j; v92 = (__int128 *)((char *)v92 + 24))
    {
      while (1)
      {
        if (*((char *)v92 + 23) < 0)
        {
          sub_1B02EB0A8(v614, *(void **)v92, *((_QWORD *)v92 + 1));
        }
        else
        {
          v94 = *v92;
          *(_QWORD *)&v615[0] = *((_QWORD *)v92 + 2);
          *(_OWORD *)v614 = v94;
        }
        v95 = (char *)v594[3];
        if ((SBYTE7(v615[0]) & 0x80u) == 0)
          v96 = v614;
        else
          v96 = *(uint8_t **)v614;
        if ((SBYTE7(v615[0]) & 0x80u) == 0)
          v97 = BYTE7(v615[0]);
        else
          v97 = *(_QWORD *)&v614[8];
        v98 = sub_1B02E60F4((_QWORD **)v594[3] + 10, (uint64_t)v96, v97);
        if (v95[79] < 0)
        {
          v99 = (char *)*((_QWORD *)v95 + 7);
          v100 = *((_QWORD *)v95 + 8);
        }
        else
        {
          v99 = v95 + 56;
          v100 = v95[79];
        }
        if (v98 != (*(unsigned int (**)(char *, char *, uint64_t))(*(_QWORD *)v95 + 40))(v95, v99, v100))
        {
          v101 = (*(uint64_t (**)(void))(*(_QWORD *)v594[3] + 40))();
          v102 = v101;
          v103 = *(_QWORD *)&v606[8];
          v104 = &v606[8];
          v105 = &v606[8];
          if (*(_QWORD *)&v606[8])
          {
            while (1)
            {
              while (1)
              {
                v105 = (uint8_t *)v103;
                v106 = *(_DWORD *)(v103 + 28);
                if (v101 >= v106)
                  break;
                v103 = *(_QWORD *)v105;
                v104 = v105;
                if (!*(_QWORD *)v105)
                  goto LABEL_140;
              }
              if (v106 >= v101)
                break;
              v103 = *((_QWORD *)v105 + 1);
              if (!v103)
              {
                v104 = v105 + 8;
                goto LABEL_140;
              }
            }
          }
          else
          {
LABEL_140:
            v107 = operator new(0x20uLL);
            v107[7] = v102;
            *(_QWORD *)v107 = 0;
            *((_QWORD *)v107 + 1) = 0;
            *((_QWORD *)v107 + 2) = v105;
            *(_QWORD *)v104 = v107;
            if (**(_QWORD **)v606)
            {
              *(_QWORD *)v606 = **(_QWORD **)v606;
              v107 = *(_DWORD **)v104;
            }
            sub_1B02D8180(*(uint64_t **)&v606[8], (uint64_t *)v107);
            ++v607[0];
          }
        }
        if (SBYTE7(v615[0]) < 0)
          break;
        v92 = (__int128 *)((char *)v92 + 24);
        if (v92 == j)
          goto LABEL_146;
      }
      operator delete(*(void **)v614);
    }
  }
LABEL_146:
  v108 = (*(uint64_t (**)(void))(*(_QWORD *)v594[3] + 40))();
  v109 = v108;
  v110 = *(_QWORD *)&v606[8];
  v111 = &v606[8];
  v112 = &v606[8];
  if (*(_QWORD *)&v606[8])
  {
    while (1)
    {
      while (1)
      {
        v112 = (uint8_t *)v110;
        v113 = *(_DWORD *)(v110 + 28);
        if (v108 >= v113)
          break;
        v110 = *(_QWORD *)v112;
        v111 = v112;
        if (!*(_QWORD *)v112)
          goto LABEL_153;
      }
      if (v113 >= v108)
        break;
      v110 = *((_QWORD *)v112 + 1);
      if (!v110)
      {
        v111 = v112 + 8;
        goto LABEL_153;
      }
    }
  }
  else
  {
LABEL_153:
    v114 = operator new(0x20uLL);
    v114[7] = v109;
    *(_QWORD *)v114 = 0;
    *((_QWORD *)v114 + 1) = 0;
    *((_QWORD *)v114 + 2) = v112;
    *(_QWORD *)v111 = v114;
    if (**(_QWORD **)v606)
    {
      *(_QWORD *)v606 = **(_QWORD **)v606;
      v114 = *(_DWORD **)v111;
    }
    sub_1B02D8180(*(uint64_t **)&v606[8], (uint64_t *)v114);
    ++v607[0];
  }
  v602 = 0uLL;
  __dst.__locale_ = (std::locale::__imp *)&v602;
  sub_1B0329080((uint64_t *)&__dst, *(_QWORD **)v606, &v606[8]);
  *(_QWORD *)v614 = off_1E60CCFA8;
  *(std::locale *)&v614[8] = __dst;
  v615[0] = v602;
  if (*((_QWORD *)&v602 + 1))
  {
    *(_QWORD *)(v602 + 16) = v615;
    __dst.__locale_ = (std::locale::__imp *)&v602;
    v602 = 0uLL;
  }
  else
  {
    *(_QWORD *)&v614[8] = v615;
  }
  sub_1B03291F4((_QWORD *)v594[1]);
  v122 = *(_QWORD **)&v615[0];
  v594[0] = *(void **)&v614[8];
  *(_OWORD *)&v594[1] = v615[0];
  if (*((_QWORD *)&v615[0] + 1))
  {
    *(_QWORD *)(*(_QWORD *)&v615[0] + 16) = &v594[1];
    *(_QWORD *)&v614[8] = v615;
    v615[0] = 0uLL;
    v122 = 0;
  }
  else
  {
    v594[0] = &v594[1];
  }
  *(_QWORD *)v614 = off_1E60CCFA8;
  sub_1B03291F4(v122);
  sub_1B03291F4((_QWORD *)v602);
  sub_1B03291F4(*(_QWORD **)&v606[8]);
  if (v84)
  {
    v123 = (unint64_t *)&v84->__shared_owners_;
    do
      v124 = __ldaxr(v123);
    while (__stlxr(v124 - 1, v123));
    if (!v124)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
  v125 = *((_DWORD *)v56 + 14);
  LODWORD(v596) = *((_DWORD *)v56 + 12);
  HIDWORD(v596) = v125;
  v599 = 0;
  v597 = 0;
  v598 = 0;
  if (__sz)
  {
    v126 = (unint64_t *)(__sz + 8);
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      (*(void (**)(size_t))(*(_QWORD *)__sz + 16))(__sz);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__sz);
    }
    v128 = (char *)v597;
    if (v597)
    {
      v129 = v598;
      v130 = v597;
      if (v598 != v597)
      {
        do
        {
          v131 = (void *)*((_QWORD *)v129 - 3);
          if (v131)
          {
            *((_QWORD *)v129 - 2) = v131;
            operator delete(v131);
          }
          v129 -= 32;
        }
        while (v129 != v128);
        v130 = v597;
      }
      v598 = v128;
      operator delete(v130);
    }
  }
  v597 = 0;
  v598 = 0;
  v599 = 0;
  v145 = (unsigned int *)v552;
  if (v552 == v553)
  {
    if (qword_1EEEB2D28 != -1)
      dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
    v149 = (id)qword_1EEEB2D20;
    if (os_log_type_enabled(v149, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)v614 = 0;
      _os_log_impl(&dword_1B02D2000, v149, OS_LOG_TYPE_DEBUG, "No context provided. Pushing bosID as first tokenID for beam search.", v614, 2u);
    }

    v224 = (*(uint64_t (**)(void))(*(_QWORD *)v594[3] + 40))();
    v148 = operator new(4uLL);
    *v148 = v224;
    v575 = v148 + 1;
    v573 = v148;
    v574 = v148 + 1;
    sub_1B0343B94((int *)&v596, (uint64_t)&v573, -3.4028e38);
    v574 = v148;
  }
  else
  {
    v146 = v553 - (_BYTE *)v552;
    v147 = (v553 - (_BYTE *)v552) >> 2;
    if (v553 - (_BYTE *)v552 == 4)
    {
      v148 = operator new(4uLL);
      v572 = &v148[v147];
      *v148 = *(_DWORD *)v552;
      v570 = v148;
      v571 = &v148[v147];
      sub_1B0343B94((int *)&v596, (uint64_t)&v570, -3.4028e38);
      v571 = v148;
      goto LABEL_303;
    }
    v518 = v147 - 1;
    if (v147 != 1)
    {
      v508 = v553 - (_BYTE *)v552;
      v150 = 0;
      v151 = 0.0;
      v511 = (v553 - (_BYTE *)v552) >> 2;
      v513 = (unsigned int *)v552;
      while (1)
      {
        if (v147 >= v150)
          v152 = v150;
        else
          v152 = v147;
        v602 = 0uLL;
        __dst.__locale_ = 0;
        if (v152)
        {
          if ((v152 & 0x8000000000000000) != 0)
            sub_1B02D7758();
          v153 = 4 * v152;
          v154 = (std::locale::__imp *)operator new(4 * v152);
          v155 = (char *)v154 + 4 * v152;
          __dst.__locale_ = v154;
          *((_QWORD *)&v602 + 1) = v155;
          memmove(v154, v145, v153);
          *(_QWORD *)&v602 = v155;
        }
        else
        {
          v154 = 0;
        }
        sub_1B0324360(v606, v510, (unsigned int **)&__dst);
        v156 = (void **)v594[0];
        if (v594[0] != &v594[1])
        {
          v157 = *(_QWORD *)v606;
          do
          {
            *(_DWORD *)(v157 + 4 * *((unsigned int *)v156 + 7)) = -8388609;
            v158 = (void **)v156[1];
            if (v158)
            {
              do
              {
                v159 = v158;
                v158 = (void **)*v158;
              }
              while (v158);
            }
            else
            {
              do
              {
                v159 = (void **)v156[2];
                v243 = *v159 == v156;
                v156 = v159;
              }
              while (!v243);
            }
            v156 = v159;
          }
          while (v159 != &v594[1]);
        }
        memset(v614, 0, sizeof(v614));
        *(_QWORD *)&v615[0] = 0;
        v160 = *(const void **)v606;
        v161 = *(_QWORD *)&v606[8] - *(_QWORD *)v606;
        if ((uint64_t)(*(_QWORD *)&v606[8] - *(_QWORD *)v606) < 0)
          sub_1B02D7758();
        v162 = (float *)operator new(*(_QWORD *)&v606[8] - *(_QWORD *)v606);
        v520 = v154;
        memcpy(v162, v160, v161);
        v164 = v162;
        if ((v161 & 0xFFFFFFFFFFFFFFFBLL) != 0)
        {
          v165 = v162 + 1;
          v166 = *v162;
          v167 = 4 * (v161 >> 2) - 4;
          v164 = v162;
          v168 = v162 + 1;
          do
          {
            v169 = *v168++;
            v170 = v166 < v169;
            v166 = fmaxf(v166, v169);
            if (v170)
              v164 = v165;
            v165 = v168;
            v167 -= 4;
          }
          while (v167);
        }
        v163.i32[0] = *(__int32 *)v164;
        v525 = v163;
        operator delete(v162);
        v171 = *(float **)&v606[8];
        v172 = *(float **)v606;
        v173 = *(_QWORD *)&v606[8] - *(_QWORD *)v606;
        if ((int)((*(_QWORD *)&v606[8] - *(_QWORD *)v606) >> 2) < 1)
        {
          v191 = 0.0;
        }
        else
        {
          v174 = (v173 >> 2);
          if ((unint64_t)(v174 - 8) >= 0x7FFFFFF9)
          {
            v193 = 0;
            v191 = 0.0;
            v192 = *(float *)v525.i32;
          }
          else
          {
            v175 = 0;
            v515 = (v173 >> 2) & 7;
            v176 = v174 - v515;
            v523 = (float32x4_t)vdupq_lane_s32(v525, 0);
            v177 = 0uLL;
            v178 = 0uLL;
            do
            {
              v529 = v178;
              *(float32x4_t *)__srca = v177;
              v179 = (float32x4_t *)((char *)v172 + (v175 >> 30));
              v538 = vsubq_f32(*v179, v523);
              v541 = vsubq_f32(v179[1], v523);
              v542 = expf(v538.f32[1]);
              v180.f32[0] = expf(v538.f32[0]);
              v180.f32[1] = v542;
              v543 = v180;
              v181 = expf(v538.f32[2]);
              v182 = v543;
              v182.f32[2] = v181;
              v544 = v182;
              v183 = expf(v538.f32[3]);
              v184 = v544;
              v184.f32[3] = v183;
              v545 = v184;
              v538.i32[0] = expf(v541.f32[1]);
              v185.f32[0] = expf(v541.f32[0]);
              v185.i32[1] = v538.i32[0];
              v539 = v185;
              v186 = expf(v541.f32[2]);
              v187 = v539;
              v187.f32[2] = v186;
              v540 = v187;
              v188 = expf(v541.f32[3]);
              v189 = v540;
              v189.f32[3] = v188;
              v177 = vaddq_f32(v545, *(float32x4_t *)__srca);
              v178 = vaddq_f32(v189, v529);
              v175 += 0x800000000;
              v176 -= 8;
            }
            while (v176);
            v190 = vaddq_f32(v178, v177);
            v191 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v190, v190));
            v147 = v511;
            v145 = v513;
            v192 = *(float *)v525.i32;
            v193 = v174 - v515;
            if (!v515)
              goto LABEL_258;
          }
          v194 = v193 - v174;
          v195 = v193 << 32;
          do
          {
            v196 = expf(*(float *)((char *)v172 + (v195 >> 30)) - v192);
            v192 = *(float *)v525.i32;
            v191 = v196 + v191;
            v195 += 0x100000000;
            v197 = __CFADD__(v194++, 1);
          }
          while (!v197);
        }
LABEL_258:
        if (v172 != v171)
        {
          *(float *)v198.i32 = *(float *)v525.i32 + logf(v191);
          if (v173 - 4 < 0x1C)
            goto LABEL_728;
          v199 = ((v173 - 4) >> 2) + 1;
          v200 = (float32x4_t)vdupq_lane_s32(v198, 0);
          v201 = (float32x4_t *)(v172 + 4);
          v202 = v199 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v203 = vsubq_f32(*v201, v200);
            v201[-1] = vsubq_f32(v201[-1], v200);
            *v201 = v203;
            v201 += 2;
            v202 -= 8;
          }
          while (v202);
          v172 += v199 & 0x7FFFFFFFFFFFFFF8;
          if (v199 != (v199 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_728:
            do
            {
              *v172 = *v172 - *(float *)v198.i32;
              ++v172;
            }
            while (v172 != v171);
          }
        }
        if (v520)
          operator delete(v520);
        v151 = *(float *)(*(_QWORD *)v606 + 4 * v145[++v150]) + v151;
        *(_QWORD *)&v606[8] = *(_QWORD *)v606;
        operator delete(*(void **)v606);
        if (v150 == v518)
        {
          v146 = v508;
          v567 = 0;
          v568 = 0;
          v569 = 0;
          if ((v508 & 0x8000000000000000) == 0)
            goto LABEL_281;
LABEL_577:
          sub_1B02D7758();
        }
      }
    }
    v151 = 0.0;
    v567 = 0;
    v568 = 0;
    v569 = 0;
    if ((v146 & 0x8000000000000000) != 0)
      goto LABEL_577;
LABEL_281:
    v148 = operator new(v146);
    v567 = v148;
    v569 = &v148[v147];
    memcpy(v148, v145, v146);
    v568 = &v148[v147];
    sub_1B0343B94((int *)&v596, (uint64_t)&v567, v151);
    v568 = v148;
  }
LABEL_303:
  operator delete(v148);
  *(_QWORD *)v614 = *(_QWORD *)buf;
  *(_QWORD *)&v614[5] = *(_QWORD *)&buf[5];
  BYTE8(v615[1]) = 0;
  if ((_BYTE)__p)
  {
    memset(v615, 0, 24);
    sub_1B02EB2B0((char *)v615, (__int128 *)v588, *((__int128 **)&v588 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v588 + 1) - v588) >> 3));
    BYTE8(v615[1]) = 1;
    v616 = v591;
    LODWORD(v617) = (_DWORD)v592;
    v225 = v614[12];
    v226 = *(_DWORD *)v614;
    v227 = *(_DWORD *)&v614[8];
    v228 = *(_QWORD *)&v615[0];
    if (*(_QWORD *)&v615[0])
    {
      v229 = *((_QWORD *)&v615[0] + 1);
      v230 = *(void **)&v615[0];
      if (*((_QWORD *)&v615[0] + 1) != *(_QWORD *)&v615[0])
      {
        do
        {
          if (*(char *)(v229 - 1) < 0)
            operator delete(*(void **)(v229 - 24));
          v229 -= 24;
        }
        while (v229 != v228);
        v230 = *(void **)&v615[0];
      }
      *((_QWORD *)&v615[0] + 1) = v228;
      operator delete(v230);
    }
  }
  else
  {
    v225 = v614[12];
    v226 = *(_DWORD *)v614;
    v227 = *(_DWORD *)&v614[8];
  }
  v231 = v227;
  if (v227 >= (unint64_t)(v226 - ((v553 - (_BYTE *)v552) >> 2)))
    v231 = v226 - ((v553 - (_BYTE *)v552) >> 2);
  if (v225)
    v232 = v231;
  else
    v232 = v226 - ((v553 - (_BYTE *)v552) >> 2);
  sub_1B0343D2C(v565, (uint64_t)v597, (uint64_t)v598);
  if (v232)
  {
    v233 = 0;
    v505 = v232;
LABEL_322:
    v507 = v233;
    v234 = (char *)v597;
    if (v597)
    {
      v235 = v598;
      v236 = v597;
      if (v598 != v597)
      {
        do
        {
          v237 = (void *)*((_QWORD *)v235 - 3);
          if (v237)
          {
            *((_QWORD *)v235 - 2) = v237;
            operator delete(v237);
          }
          v235 -= 32;
        }
        while (v235 != v234);
        v236 = v597;
      }
      v598 = v234;
      operator delete(v236);
    }
    v597 = 0;
    v598 = 0;
    v599 = 0;
    v238 = (float *)v565[0];
    v512 = (float *)v565[1];
    if (v565[0] == v565[1])
    {
LABEL_530:
      if (qword_1EEEB2D28 != -1)
        dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
      v391 = (id)qword_1EEEB2D20;
      if (os_log_type_enabled(v391, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)v614 = 134217984;
        *(_QWORD *)&v614[4] = v507;
        _os_log_impl(&dword_1B02D2000, v391, OS_LOG_TYPE_DEBUG, "All beams contain finished sequences. Exiting beam search loop early after %lu steps", v614, 0xCu);
      }

      goto LABEL_535;
    }
    v239 = 0;
LABEL_334:
    v514 = v239;
    v240 = buf[4];
    v241 = *(_DWORD *)(*((_QWORD *)v238 + 2) - 4);
    v242 = (*(uint64_t (**)(void))(*(_QWORD *)v594[3] + 40))();
    if (v240)
      v243 = v241 == v242;
    else
      v243 = 0;
    v524 = v238;
    if (v243)
    {
      v248 = *v238;
      v563 = 0;
      v564 = 0;
      v562 = 0;
      v250 = (_BYTE *)*((_QWORD *)v238 + 1);
      v249 = (_BYTE *)*((_QWORD *)v238 + 2);
      v251 = v249 - v250;
      if (v249 == v250)
      {
        v252 = 0;
      }
      else
      {
        if (v251 < 0)
          sub_1B02D7758();
        v252 = (char *)operator new(v249 - v250);
        v562 = v252;
        v564 = &v252[4 * (v251 >> 2)];
        memcpy(v252, v250, v251);
        v563 = &v252[4 * (v251 >> 2)];
      }
      sub_1B0343B94((int *)&v596, (uint64_t)&v562, v248);
      if (v252)
      {
        v563 = v252;
        operator delete(v252);
      }
      if (qword_1EEEB2D28 != -1)
        dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
      v286 = (id)qword_1EEEB2D20;
      if (os_log_type_enabled(v286, OS_LOG_TYPE_DEBUG))
      {
        (*(void (**)(uint8_t *__return_ptr, void *, float *))(*(_QWORD *)v594[3] + 32))(v614, v594[3], v238 + 2);
        v287 = v614;
        if (SBYTE7(v615[0]) < 0)
          v287 = *(uint8_t **)v614;
        *(_DWORD *)v606 = 136315138;
        *(_QWORD *)&v606[4] = v287;
        _os_log_impl(&dword_1B02D2000, v286, OS_LOG_TYPE_DEBUG, "Skipping generation on sample that ends with EOS: %s", v606, 0xCu);
        if (SBYTE7(v615[0]) < 0)
          operator delete(*(void **)v614);
      }

      v239 = (v239 + 1);
      goto LABEL_333;
    }
    sub_1B0324360(v561, v510, (unsigned int **)v238 + 1);
    v244 = (void **)v594[0];
    if (v594[0] != &v594[1])
    {
      v245 = v561[0];
      do
      {
        v245[*((unsigned int *)v244 + 7)] = -8388609;
        v246 = (void **)v244[1];
        if (v246)
        {
          do
          {
            v247 = v246;
            v246 = (void **)*v246;
          }
          while (v246);
        }
        else
        {
          do
          {
            v247 = (void **)v244[2];
            v243 = *v247 == v244;
            v244 = v247;
          }
          while (!v243);
        }
        v244 = v247;
      }
      while (v247 != &v594[1]);
    }
    memset(v614, 0, sizeof(v614));
    *(_QWORD *)&v615[0] = 0;
    v253 = v561[0];
    v254 = (char *)v561[1] - (char *)v561[0];
    if ((char *)v561[1] - (char *)v561[0] < 0)
      sub_1B02D7758();
    v255 = (float *)operator new((char *)v561[1] - (char *)v561[0]);
    memcpy(v255, v253, v254);
    v257 = v255;
    if ((v254 & 0xFFFFFFFFFFFFFFFBLL) != 0)
    {
      v258 = v255 + 1;
      v259 = *v255;
      v260 = 4 * (v254 >> 2) - 4;
      v257 = v255;
      v261 = v255 + 1;
      do
      {
        v262 = *v261++;
        v170 = v259 < v262;
        v259 = fmaxf(v259, v262);
        if (v170)
          v257 = v258;
        v258 = v261;
        v260 -= 4;
      }
      while (v260);
    }
    v256.i32[0] = *(__int32 *)v257;
    v517 = v256;
    operator delete(v255);
    v264 = (float *)v561[0];
    v263 = (float *)v561[1];
    v265 = (char *)v561[1] - (char *)v561[0];
    if ((int)((unint64_t)((char *)v561[1] - (char *)v561[0]) >> 2) < 1)
    {
      v284 = 0.0;
      goto LABEL_377;
    }
    v266 = (v265 >> 2);
    if ((unint64_t)(v266 - 8) >= 0x7FFFFFF9)
    {
      v268 = 0;
      v284 = 0.0;
      v285 = *(float *)v517.i32;
    }
    else
    {
      v267 = 0;
      v509 = (v265 >> 2) & 7;
      v268 = v266 - v509;
      v516 = (float32x4_t)vdupq_lane_s32(v517, 0);
      v269 = 0uLL;
      v270 = v266 - v509;
      v271 = 0uLL;
      do
      {
        v519 = v271;
        *(float32x4_t *)v521 = v269;
        v272 = (float32x4_t *)((char *)v264 + (v267 >> 30));
        v526 = vsubq_f32(*v272, v516);
        v530 = vsubq_f32(v272[1], v516);
        __srcb = expf(v526.f32[1]);
        *(float *)&v273 = expf(v526.f32[0]);
        *((float *)&v273 + 1) = __srcb;
        *(_OWORD *)__srcc = v273;
        v274 = expf(v526.f32[2]);
        v275 = *(_OWORD *)__srcc;
        *((float *)&v275 + 2) = v274;
        *(_OWORD *)__srcd = v275;
        v276 = expf(v526.f32[3]);
        v277 = *(_OWORD *)__srcd;
        *((float *)&v277 + 3) = v276;
        *(_OWORD *)__srce = v277;
        v526.i32[0] = expf(v530.f32[1]);
        v278.f32[0] = expf(v530.f32[0]);
        v278.i32[1] = v526.i32[0];
        v527 = v278;
        v279 = expf(v530.f32[2]);
        v280 = v527;
        v280.f32[2] = v279;
        v528 = v280;
        v281 = expf(v530.f32[3]);
        v282 = v528;
        v282.f32[3] = v281;
        v269 = vaddq_f32(*(float32x4_t *)__srce, *(float32x4_t *)v521);
        v271 = vaddq_f32(v282, v519);
        v267 += 0x800000000;
        v270 -= 8;
      }
      while (v270);
      v283 = vaddq_f32(v271, v269);
      v284 = vaddv_f32((float32x2_t)*(_OWORD *)&vpaddq_f32(v283, v283));
      v285 = *(float *)v517.i32;
      if (!v509)
      {
LABEL_377:
        v238 = v524;
        if (v264 != v263)
        {
          *(float *)v291.i32 = *(float *)v517.i32 + logf(v284);
          if (v265 - 4 < 0x1C)
            goto LABEL_729;
          v292 = ((v265 - 4) >> 2) + 1;
          v293 = (float32x4_t)vdupq_lane_s32(v291, 0);
          v294 = (float32x4_t *)(v264 + 4);
          v295 = v292 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v296 = vsubq_f32(*v294, v293);
            v294[-1] = vsubq_f32(v294[-1], v293);
            *v294 = v296;
            v294 += 2;
            v295 -= 8;
          }
          while (v295);
          v264 += v292 & 0x7FFFFFFFFFFFFFF8;
          if (v292 != (v292 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_729:
            do
            {
              *v264 = *v264 - *(float *)v291.i32;
              ++v264;
            }
            while (v264 != v263);
          }
        }
        v297 = *v524;
        sub_1B0344A04((uint64_t *)v561, SHIDWORD(v591), v600);
        v298 = *(float **)v600;
        v522 = *(float **)&v600[8];
        if (*(_QWORD *)v600 == *(_QWORD *)&v600[8])
        {
          if (*(_QWORD *)v600)
            goto LABEL_385;
          goto LABEL_386;
        }
        while (1)
        {
          v299 = *((_DWORD *)v298 + 1);
          v531 = v298;
          __src = (char *)operator new(4uLL);
          *(_DWORD *)__src = v299;
          v581 = 0;
          v579 = 0;
          v580 = 0;
          v300 = (int *)*((_QWORD *)v238 + 1);
          v301 = (int *)*((_QWORD *)v238 + 2);
          if (v300 != v301)
          {
            v302 = 0;
            while (1)
            {
              while (v302 < v581)
              {
                v303 = *v300++;
                *(_DWORD *)v302 = v303;
                v302 += 4;
                v580 = v302;
                if (v300 == v301)
                  goto LABEL_421;
              }
              v304 = (char *)v579;
              v305 = v302 - (_BYTE *)v579;
              v306 = (v302 - (_BYTE *)v579) >> 2;
              v307 = v306 + 1;
              if ((unint64_t)(v306 + 1) >> 62)
                sub_1B02D7758();
              v308 = v581 - (_BYTE *)v579;
              if ((v581 - (_BYTE *)v579) >> 1 > v307)
                v307 = v308 >> 1;
              if ((unint64_t)v308 >= 0x7FFFFFFFFFFFFFFCLL)
                v309 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v309 = v307;
              if (v309)
              {
                if (v309 >> 62)
                  sub_1B02D72AC();
                v310 = operator new(4 * v309);
                v311 = (int *)&v310[4 * v306];
                *v311 = *v300;
                v312 = (uint64_t)(v311 + 1);
                v313 = v302 - v304;
                if (v302 == v304)
                  goto LABEL_407;
              }
              else
              {
                v310 = 0;
                v311 = (int *)(4 * v306);
                *(_DWORD *)(4 * v306) = *v300;
                v312 = 4 * v306 + 4;
                v313 = v302 - v304;
                if (v302 == v304)
                  goto LABEL_407;
              }
              v314 = v313 - 4;
              if (v314 >= 0xBC)
              {
                v317 = (v302 - 4 - v304) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v310[v305 - 4 - v317] > &v310[v305 - 4])
                {
                  v315 = v302;
                }
                else if (&v302[-v317 - 4] > v302 - 4)
                {
                  v315 = v302;
                }
                else if ((unint64_t)(v302 - v310 - v305) >= 0x20)
                {
                  v318 = (v314 >> 2) + 1;
                  v319 = 4 * (v318 & 0x7FFFFFFFFFFFFFF8);
                  v315 = &v302[-v319];
                  v311 = (int *)((char *)v311 - v319);
                  v320 = &v310[4 * v306 - 16];
                  v321 = (__int128 *)(v302 - 16);
                  v322 = v318 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v323 = *v321;
                    *(v320 - 1) = *(v321 - 1);
                    *v320 = v323;
                    v320 -= 2;
                    v321 -= 2;
                    v322 -= 8;
                  }
                  while (v322);
                  if (v318 == (v318 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_407;
                }
                else
                {
                  v315 = v302;
                }
              }
              else
              {
                v315 = v302;
              }
              do
              {
                v316 = *((_DWORD *)v315 - 1);
                v315 -= 4;
                *--v311 = v316;
              }
              while (v315 != v304);
LABEL_407:
              v579 = v311;
              v580 = (char *)v312;
              v581 = &v310[4 * v309];
              if (v304)
                operator delete(v304);
              v302 = (char *)v312;
              v580 = (char *)v312;
              if (++v300 == v301)
              {
LABEL_421:
                v324 = (unint64_t)v579;
                v325 = v581;
                v326 = v302;
                goto LABEL_423;
              }
            }
          }
          v302 = 0;
          v325 = 0;
          v324 = 0;
          v326 = 0;
LABEL_423:
          v327 = (unint64_t)&v326[-v324];
          v328 = (uint64_t)&v326[-v324] >> 2;
          v329 = (char *)(v324 + ((unint64_t)&v326[-v324] & 0xFFFFFFFFFFFFFFFCLL));
          if (v325 - v302 < 4)
          {
            v330 = ((uint64_t)&v302[-v324] >> 2) + 1;
            if (v330 >> 62)
              sub_1B02D7758();
            v331 = (uint64_t)&v325[-v324];
            if (v331 >> 1 > v330)
              v330 = v331 >> 1;
            if ((unint64_t)v331 >= 0x7FFFFFFFFFFFFFFCLL)
              v332 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v332 = v330;
            if (v332)
            {
              if (v332 >> 62)
                sub_1B02D72AC();
              v333 = operator new(4 * v332);
              v329 = (char *)(v324 + ((unint64_t)&v326[-v324] & 0xFFFFFFFFFFFFFFFCLL));
            }
            else
            {
              v333 = 0;
            }
            v346 = &v333[4 * v328];
            *(_DWORD *)v346 = *(_DWORD *)__src;
            v347 = v346 + 4;
            if (v326 != (char *)v324)
            {
              if (v327 - 4 < 0x3C)
              {
                v348 = v329;
                goto LABEL_450;
              }
              v348 = v329;
              if (v324 + (v327 & 0xFFFFFFFFFFFFFFFCLL) - (unint64_t)&v333[v327 & 0xFFFFFFFFFFFFFFFCLL] < 0x20)
                goto LABEL_730;
              v349 = ((v327 - 4) >> 2) + 1;
              v350 = 4 * (v349 & 0x7FFFFFFFFFFFFFF8);
              v348 = &v329[-v350];
              v346 -= v350;
              v351 = 4 * ((uint64_t)&v326[-v324] >> 2);
              v352 = &v333[v351 - 16];
              v353 = (__int128 *)(v324 + v351 - 16);
              v354 = v349 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v355 = *v353;
                *(v352 - 1) = *(v353 - 1);
                *v352 = v355;
                v352 -= 2;
                v353 -= 2;
                v354 -= 8;
              }
              while (v354);
              if (v349 != (v349 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_730:
                do
                {
LABEL_450:
                  v356 = *((_DWORD *)v348 - 1);
                  v348 -= 4;
                  *((_DWORD *)v346 - 1) = v356;
                  v346 -= 4;
                }
                while (v348 != (char *)v324);
              }
            }
            v357 = v302 - v329;
            if (v302 != v329)
              memmove(v347, v329, v302 - v329);
            v579 = v346;
            v580 = &v347[v357];
            v581 = &v333[4 * v332];
            if (v324)
              operator delete((void *)v324);
            goto LABEL_464;
          }
          v334 = v302 - v329;
          if (v302 - v329 > 3)
          {
            v338 = v302;
            v336 = __src + 4;
          }
          else
          {
            v335 = (uint64_t)&v326[-v324] >> 2;
            v336 = &__src[v334];
            v337 = v329;
            memmove(v302, &__src[v334], 4 - v334);
            v338 = &v302[4 - v334];
            v580 = v338;
            if (v334 < 1)
              goto LABEL_464;
            v329 = v337;
            v328 = v335;
          }
          v339 = v338 - (v329 + 4);
          v340 = v339 >> 2;
          v341 = v338 - 4;
          v342 = v338;
          if (v338 - 4 < v302)
          {
            v343 = (v327 & 0xFFFFFFFFFFFFFFFCLL) + v339;
            v344 = v324 + v343 + 4;
            if ((unint64_t)v302 > v344)
              v344 = (unint64_t)v302;
            v345 = v344 + ~v324 - v343;
            if (v345 >= 0x2C)
            {
              v342 = v338;
              if ((unint64_t)&v329[-(v327 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v324] >= 0x20)
              {
                v358 = (v345 >> 2) + 1;
                v359 = 4 * (v358 & 0x7FFFFFFFFFFFFFF8);
                v341 += v359;
                v342 = &v338[v359];
                v360 = v338 + 16;
                v361 = (__int128 *)(v324 + 4 * v340 + 4 * v328 + 16);
                v362 = v358 & 0x7FFFFFFFFFFFFFF8;
                do
                {
                  v363 = *v361;
                  *(v360 - 1) = *(v361 - 1);
                  *v360 = v363;
                  v360 += 2;
                  v361 += 2;
                  v362 -= 8;
                }
                while (v362);
                if (v358 == (v358 & 0x7FFFFFFFFFFFFFF8))
                  goto LABEL_460;
              }
            }
            else
            {
              v342 = v338;
            }
            do
            {
              v364 = *(_DWORD *)v341;
              v341 += 4;
              *(_DWORD *)v342 = v364;
              v342 += 4;
            }
            while (v341 < v302);
          }
LABEL_460:
          v580 = v342;
          if (v338 != v329 + 4)
          {
            v365 = v329;
            memmove(&v338[-4 * v340], v329, v339);
            v329 = v365;
          }
          if (v336 != __src)
            memmove(v329, __src, v336 - __src);
LABEL_464:
          operator delete(__src);
          v238 = v524;
          v366 = v531;
          if (!(_BYTE)__p)
            goto LABEL_508;
          (*(void (**)(void **__return_ptr, void *, void **))(*(_QWORD *)v594[3] + 32))(&v584, v594[3], &v579);
          v368 = (__int128 *)*((_QWORD *)&v588 + 1);
          v367 = (__int128 *)v588;
          if ((_QWORD)v588 == *((_QWORD *)&v588 + 1))
          {
            v369 = 0;
          }
          else
          {
            do
            {
              while (1)
              {
                if (*((char *)v367 + 23) < 0)
                {
                  sub_1B02EB0A8(v582, *(void **)v367, *((_QWORD *)v367 + 1));
                }
                else
                {
                  v371 = *v367;
                  v583 = (char *)*((_QWORD *)v367 + 2);
                  *(_OWORD *)v582 = v371;
                }
                sub_1B03379F8((uint64_t)v614, (uint64_t)v582);
                MEMORY[0x1B5E07C24](&__dst);
                *(_QWORD *)&v602 = std::locale::use_facet(&__dst, MEMORY[0x1E0DE4A90]);
                *((_QWORD *)&v602 + 1) = std::locale::use_facet(&__dst, MEMORY[0x1E0DE4C08]);
                v603 = 0u;
                v604 = 0u;
                v605 = 0;
                v372 = BYTE7(v615[0]);
                if ((SBYTE7(v615[0]) & 0x80u) == 0)
                  v373 = (char *)v614;
                else
                  v373 = *(char **)v614;
                if (SBYTE7(v615[0]) < 0)
                  v372 = *(_QWORD *)&v614[8];
                if (&v373[v372] != sub_1B0337C30((uint64_t)&__dst, v373, &v373[v372]))
                  sub_1B03381A0();
                if (SBYTE7(v615[0]) < 0)
                  operator delete(*(void **)v614);
                v374 = v586;
                if (v586 >= 0)
                  v375 = &v584;
                else
                  v375 = v584;
                if (v586 < 0)
                  v374 = v585;
                v376 = (uint64_t)v375 + v374;
                v607[4] = 0;
                v607[5] = 0;
                v608 = 0;
                v609 = 0;
                v610 = 0;
                v611 = 0;
                v612 = 0;
                v613 = 0;
                *(_OWORD *)v606 = 0u;
                memset(v607, 0, 25);
                v616 = 0;
                v617 = 0;
                LOBYTE(v618) = 0;
                *((_QWORD *)&v618 + 1) = 0;
                v619 = 0;
                LOBYTE(v620) = 0;
                v621 = 0;
                v622 = 0;
                *(_OWORD *)v614 = 0u;
                memset(v615, 0, 25);
                v377 = sub_1B0341264((uint64_t)&__dst, (uint64_t)v375, (uint64_t)v375 + v374, (uint64_t)v614);
                sub_1B0342E88((uint64_t)v606, (uint64_t)v375, v376, (uint64_t *)v614);
                if (*(_QWORD *)v614)
                  operator delete(*(void **)v614);
                if (v611)
                  v378 = v377 ^ 1;
                else
                  v378 = 1;
                if (*(_QWORD *)v606)
                  operator delete(*(void **)v606);
                v379 = (std::__shared_weak_count *)*((_QWORD *)&v604 + 1);
                if (*((_QWORD *)&v604 + 1))
                {
                  v380 = (unint64_t *)(*((_QWORD *)&v604 + 1) + 8);
                  do
                    v381 = __ldaxr(v380);
                  while (__stlxr(v381 - 1, v380));
                  if (!v381)
                  {
                    ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                    std::__shared_weak_count::__release_weak(v379);
                  }
                }
                std::locale::~locale(&__dst);
                if (SHIBYTE(v583) < 0)
                  break;
                v369 = v377 & v378;
                v367 = (__int128 *)((char *)v367 + 24);
                if (v367 == v368)
                  v370 = 1;
                else
                  v370 = v369;
                if ((v370 & 1) != 0)
                  goto LABEL_504;
              }
              operator delete(v582[0]);
              v369 = v377 & v378;
              v367 = (__int128 *)((char *)v367 + 24);
              if (v367 == v368)
                v382 = 1;
              else
                v382 = v369;
            }
            while ((v382 & 1) == 0);
          }
LABEL_504:
          v238 = v524;
          v366 = v531;
          if (v586 < 0)
          {
            operator delete(v584);
            if ((v369 & 1) == 0)
            {
LABEL_508:
              v383 = v579;
              if ((unint64_t)(v580 - (_BYTE *)v579) <= 8)
                v384 = 0.0;
              else
                v384 = v297;
              v385 = *v366;
              v578 = 0;
              v576 = 0;
              v577 = 0;
              v386 = v580 - (_BYTE *)v579;
              if (v580 == v579)
              {
                v387 = 0;
              }
              else
              {
                if (v386 < 0)
                  sub_1B02D7758();
                v387 = (char *)operator new(v580 - (_BYTE *)v579);
                v576 = v387;
                v578 = &v387[4 * (v386 >> 2)];
                memcpy(v387, v383, v386);
                v577 = &v387[4 * (v386 >> 2)];
              }
              sub_1B0343B94((int *)&v596, (uint64_t)&v576, v384 + v385);
              if (v387)
              {
                v577 = v387;
                operator delete(v387);
              }
            }
          }
          else if ((v369 & 1) == 0)
          {
            goto LABEL_508;
          }
          if (v579)
          {
            v580 = (char *)v579;
            operator delete(v579);
          }
          v298 = v366 + 2;
          if (v298 == v522)
          {
            v298 = *(float **)v600;
            if (!*(_QWORD *)v600)
              goto LABEL_386;
LABEL_385:
            *(_QWORD *)&v600[8] = v298;
            operator delete(v298);
LABEL_386:
            v239 = v514;
            if (v561[0])
            {
              v561[1] = v561[0];
              operator delete(v561[0]);
            }
LABEL_333:
            v238 += 8;
            if (v238 != v512)
              goto LABEL_334;
            if ((int)v239 == (v598 - (_BYTE *)v597) >> 5)
              goto LABEL_530;
            sub_1B0343D2C(v614, (uint64_t)v597, (uint64_t)v598);
            v388 = (char *)v565[0];
            if (v565[0])
            {
              for (k = (char *)v565[1]; k != v388; k -= 32)
              {
                v390 = (void *)*((_QWORD *)k - 3);
                if (v390)
                {
                  *((_QWORD *)k - 2) = v390;
                  operator delete(v390);
                }
              }
              operator delete(v388);
            }
            *(_OWORD *)v565 = *(_OWORD *)v614;
            v566 = *(_QWORD *)&v615[0];
            v233 = v507 + 1;
            if (v507 + 1 == v505)
              goto LABEL_535;
            goto LABEL_322;
          }
        }
      }
    }
    v288 = v268 - v266;
    v289 = v268 << 32;
    do
    {
      v290 = expf(*(float *)((char *)v264 + (v289 >> 30)) - v285);
      v285 = *(float *)v517.i32;
      v284 = v290 + v284;
      v289 += 0x100000000;
      v197 = __CFADD__(v288++, 1);
    }
    while (!v197);
    goto LABEL_377;
  }
LABEL_535:
  sub_1B0343D2C(v606, (uint64_t)v597, (uint64_t)v598);
  v546 = 0uLL;
  v547 = 0;
  v392 = *(char **)v606;
  v393 = *(char **)&v606[8];
  if (*(_QWORD *)v606 == *(_QWORD *)&v606[8])
  {
    v401 = a3;
    if (!*(_QWORD *)v606)
      goto LABEL_552;
    goto LABEL_551;
  }
  v394 = *(char **)v606;
  do
  {
    memset(v614, 0, sizeof(v614));
    *(_QWORD *)&v615[0] = 0;
    v396 = (_BYTE *)*((_QWORD *)v394 + 1);
    v395 = (_BYTE *)*((_QWORD *)v394 + 2);
    v397 = v395 - v396;
    if (v395 != v396)
    {
      if (v397 < 0)
        sub_1B02D7758();
      v398 = (char *)operator new(v395 - v396);
      v399 = &v398[4 * (v397 >> 2)];
      *(_QWORD *)v614 = v398;
      *(_QWORD *)&v615[0] = v399;
      memcpy(v398, v396, v397);
      *(_QWORD *)&v614[8] = v399;
    }
    v400 = *((_QWORD *)&v546 + 1);
    if (*((_QWORD *)&v546 + 1) < (unint64_t)v547)
    {
      **((_QWORD **)&v546 + 1) = 0;
      *(_QWORD *)(v400 + 8) = 0;
      *(_QWORD *)(v400 + 16) = 0;
      *(_OWORD *)v400 = *(_OWORD *)v614;
      *(_QWORD *)(v400 + 16) = *(_QWORD *)&v615[0];
      *((_QWORD *)&v546 + 1) = v400 + 24;
    }
    else
    {
      *((_QWORD *)&v546 + 1) = sub_1B0345128((char **)&v546, (uint64_t)v614);
      if (*(_QWORD *)v614)
      {
        *(_QWORD *)&v614[8] = *(_QWORD *)v614;
        operator delete(*(void **)v614);
      }
    }
    v394 += 32;
  }
  while (v394 != v393);
  v401 = a3;
  if (v392)
  {
    do
    {
      v402 = (void *)*((_QWORD *)v393 - 3);
      if (v402)
      {
        *((_QWORD *)v393 - 2) = v402;
        operator delete(v402);
      }
      v393 -= 32;
    }
    while (v393 != v392);
LABEL_551:
    operator delete(v392);
    v401 = a3;
  }
LABEL_552:
  v403 = (char *)v565[0];
  if (v565[0])
  {
    for (m = (char *)v565[1]; m != v403; m -= 32)
    {
      v405 = (void *)*((_QWORD *)m - 3);
      if (v405)
      {
        *((_QWORD *)m - 2) = v405;
        operator delete(v405);
      }
    }
    operator delete(v403);
    v401 = a3;
  }
  v406 = (char *)*v401;
  if (*v401)
  {
    v407 = (char *)v401[1];
    if (v407 != v406)
    {
      v408 = v407;
      do
      {
        v410 = (void *)*((_QWORD *)v408 - 3);
        v408 -= 24;
        v409 = v410;
        if (v410)
        {
          *((_QWORD *)v407 - 2) = v409;
          operator delete(v409);
        }
        v407 = v408;
      }
      while (v408 != v406);
    }
    operator delete(v406);
    v401 = a3;
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
  *(_OWORD *)v401 = v546;
  v401[2] = v547;
  v411 = (char *)v597;
  if (v597)
  {
    v412 = v598;
    v413 = v597;
    if (v598 != v597)
    {
      do
      {
        v414 = (void *)*((_QWORD *)v412 - 3);
        if (v414)
        {
          *((_QWORD *)v412 - 2) = v414;
          operator delete(v414);
        }
        v412 -= 32;
      }
      while (v412 != v411);
      v413 = v597;
    }
    v598 = v411;
    operator delete(v413);
  }
  sub_1B03292F0((uint64_t)buf);
  v137 = (char *)v552;
  if (v552)
  {
LABEL_687:
    v553 = v137;
    operator delete(v137);
  }
LABEL_688:
  v555 = &unk_1E60CCA78;
  v501 = v560;
  if (v560)
  {
    v502 = (unint64_t *)&v560->__shared_owners_;
    do
      v503 = __ldaxr(v502);
    while (__stlxr(v503 - 1, v502));
    if (!v503)
    {
      ((void (*)(std::__shared_weak_count *))v501->__on_zero_shared)(v501);
      std::__shared_weak_count::__release_weak(v501);
    }
  }
  if (v557)
  {
    v558 = (char *)v557;
    operator delete(v557);
  }
}

void sub_1B0323AB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56)
{
  void *v56;
  uint64_t v57;

  sub_1B02E983C((uint64_t)&STACK[0x2A0]);
  if (SLOBYTE(STACK[0x29F]) < 0)
    operator delete((void *)STACK[0x288]);

  sub_1B032922C(v57 - 256);
  sub_1B03242EC(a10);
  if (a53)
    operator delete(a53);
  sub_1B031CD9C(&a56);
  _Unwind_Resume(a1);
}

void **sub_1B03242EC(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;
  void *v6;
  void *v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = (char *)a1[1];
      do
      {
        v7 = (void *)*((_QWORD *)v5 - 3);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1B0324360(_QWORD *a1, uint64_t a2, unsigned int **a3)
{
  int *v5;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int64_t v12;
  char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  int64_t v20;
  char *v21;
  char *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  int64_t v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  _BYTE *v34;
  _BYTE *v35;
  int64_t v36;
  char *v37;
  char *v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t v75;
  std::__shared_weak_count **v76;
  uint64_t v77;
  uint64_t *v78;
  __int128 *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  _QWORD *v83;
  __int128 *v84;
  __int128 **v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  _QWORD *v94;
  _QWORD *v95;
  uint64_t v96;
  std::__shared_weak_count **v97;
  _QWORD *v98;
  uint64_t v99;
  __int128 *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  unint64_t *v114;
  unint64_t v115;
  std::runtime_error *exception;
  int v118;
  uint64_t v119;
  _QWORD v120[2];
  void *v121;
  int v122;
  void *v123;
  void *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  uint64_t v127;
  _QWORD v128[3];
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  __int128 v132;
  char v133;
  void *v134;
  __int128 *v135;
  __int128 v136;
  char *v137;
  uint64_t v138;
  std::__shared_weak_count *v139;
  __int128 v140;
  std::__shared_weak_count **v141;
  __int128 v142;
  void *v143;
  void *v144;
  char *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  _BYTE v148[24];
  void *v149;
  int v150;
  void *v151;
  void *v152;
  char *v153;
  uint64_t v154;
  std::__shared_weak_count *v155;
  _BYTE v156[24];
  void *v157;
  int v158;
  void *__p;
  void *v160;
  char *v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  _QWORD v165[3];
  _QWORD *v166;
  __int128 v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD v170[3];
  _QWORD *v171;
  __int128 v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD v175[3];
  _QWORD *v176;
  __int128 v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD v180[3];
  _QWORD *v181;
  __int128 v182;
  uint64_t v183;
  uint64_t v184;
  _BYTE v185[24];
  _BYTE *v186;
  __int128 v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  _QWORD v191[3];
  _QWORD *v192;
  __int128 v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD v196[3];
  _QWORD *v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  _QWORD v201[3];
  _QWORD *v202;
  __int128 v203;
  uint64_t v204;
  uint64_t v205;
  _QWORD v206[3];
  _QWORD *v207;
  __int128 v208;
  uint64_t v209;
  _QWORD *v210;
  _BYTE v211[24];
  __int128 *v212;
  __int128 v213;
  uint64_t v214;
  uint64_t v215;
  _BYTE v216[24];
  _BYTE *v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  _BYTE v221[24];
  _BYTE *v222;
  __int128 v223;
  uint64_t v224;
  uint64_t v225;
  _BYTE v226[24];
  std::__shared_weak_count **v227;
  __int128 v228;
  void *v229;
  uint64_t v230;
  _QWORD v231[3];
  __int128 *v232;
  __int128 v233;
  uint64_t v234;
  _QWORD v235[4];
  __int128 *v236;
  __int128 v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  _BYTE v241[24];
  _BYTE *v242;
  __int128 v243;
  uint64_t v244;
  uint64_t v245;
  _BYTE v246[24];
  _BYTE *v247;
  __int128 v248;
  uint64_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v5 = (int *)(a2 + 280);
  sub_1B031CB08(a2 + 280);
  v7 = *a3;
  v6 = a3[1];
  while (v7 != v6)
  {
    v8 = *v7++;
    sub_1B031CE20(v5, v8);
  }
  v9 = *(_QWORD *)(a2 + 552);
  v133 = 12;
  strcpy((char *)&v132, "bridge_embed");
  v134 = &unk_1E60CCA78;
  LODWORD(v135) = *(_DWORD *)(a2 + 464);
  v137 = 0;
  v136 = 0uLL;
  v11 = *(_BYTE **)(a2 + 472);
  v10 = *(_BYTE **)(a2 + 480);
  v12 = v10 - v11;
  if (v10 != v11)
  {
    if (v12 < 0)
      sub_1B02D7758();
    v13 = (char *)operator new(v10 - v11);
    v14 = &v13[8 * (v12 >> 3)];
    *(_QWORD *)&v136 = v13;
    v137 = v14;
    memcpy(v13, v11, v12);
    *((_QWORD *)&v136 + 1) = v14;
  }
  v15 = *(std::__shared_weak_count **)(a2 + 504);
  v138 = *(_QWORD *)(a2 + 496);
  v139 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  HIBYTE(v141) = 11;
  strcpy((char *)&v140, "caption_ids");
  *(_QWORD *)&v142 = &unk_1E60CCA78;
  DWORD2(v142) = *(_DWORD *)(a2 + 296);
  v144 = 0;
  v145 = 0;
  v143 = 0;
  v19 = *(_BYTE **)(a2 + 304);
  v18 = *(_BYTE **)(a2 + 312);
  v20 = v18 - v19;
  if (v18 != v19)
  {
    if (v20 < 0)
      sub_1B02D7758();
    v21 = (char *)operator new(v18 - v19);
    v22 = &v21[8 * (v20 >> 3)];
    v143 = v21;
    v145 = v22;
    memcpy(v21, v19, v20);
    v144 = v22;
  }
  v23 = *(std::__shared_weak_count **)(a2 + 336);
  v146 = *(_QWORD *)(a2 + 328);
  v147 = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  v148[23] = 16;
  strcpy(v148, "caption_ids_mask");
  v149 = &unk_1E60CCA78;
  v150 = *(_DWORD *)(a2 + 352);
  v152 = 0;
  v153 = 0;
  v151 = 0;
  v27 = *(_BYTE **)(a2 + 360);
  v26 = *(_BYTE **)(a2 + 368);
  v28 = v26 - v27;
  if (v26 != v27)
  {
    if (v28 < 0)
      sub_1B02D7758();
    v29 = (char *)operator new(v26 - v27);
    v30 = &v29[8 * (v28 >> 3)];
    v151 = v29;
    v153 = v30;
    memcpy(v29, v27, v28);
    v152 = v30;
  }
  v31 = *(std::__shared_weak_count **)(a2 + 392);
  v154 = *(_QWORD *)(a2 + 384);
  v155 = v31;
  if (v31)
  {
    v32 = (unint64_t *)&v31->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v156[23] = 19;
  strcpy(v156, "caption_causal_mask");
  v157 = &unk_1E60CCA78;
  v158 = *(_DWORD *)(a2 + 408);
  v160 = 0;
  v161 = 0;
  __p = 0;
  v35 = *(_BYTE **)(a2 + 416);
  v34 = *(_BYTE **)(a2 + 424);
  v36 = v34 - v35;
  if (v34 != v35)
  {
    if (v36 < 0)
      sub_1B02D7758();
    v37 = (char *)operator new(v34 - v35);
    v38 = &v37[8 * (v36 >> 3)];
    __p = v37;
    v161 = v38;
    memcpy(v37, v35, v36);
    v160 = v38;
  }
  v39 = *(std::__shared_weak_count **)(a2 + 448);
  v162 = *(_QWORD *)(a2 + 440);
  v163 = v39;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  memset(v235, 0, sizeof(v235));
  LODWORD(v236) = 1065353216;
  sub_1B032948C((uint64_t)v235, (uint64_t)&v132, &v132);
  sub_1B032948C((uint64_t)v235, (uint64_t)&v140, &v140);
  sub_1B032948C((uint64_t)v235, (uint64_t)v148, (__int128 *)v148);
  sub_1B032948C((uint64_t)v235, (uint64_t)v156, (__int128 *)v156);
  v157 = &unk_1E60CCA78;
  v42 = v163;
  if (v163)
  {
    v43 = (unint64_t *)&v163->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (__p)
  {
    v160 = __p;
    operator delete(__p);
  }
  if ((v156[23] & 0x80000000) != 0)
    operator delete(*(void **)v156);
  v149 = &unk_1E60CCA78;
  v45 = v155;
  if (v155)
  {
    v46 = (unint64_t *)&v155->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v151)
  {
    v152 = v151;
    operator delete(v151);
  }
  if ((v148[23] & 0x80000000) != 0)
    operator delete(*(void **)v148);
  *(_QWORD *)&v142 = &unk_1E60CCA78;
  v48 = v147;
  if (v147)
  {
    v49 = (unint64_t *)&v147->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  if (v143)
  {
    v144 = v143;
    operator delete(v143);
  }
  if (SHIBYTE(v141) < 0)
    operator delete((void *)v140);
  v134 = &unk_1E60CCA78;
  v51 = v139;
  if (v139)
  {
    v52 = (unint64_t *)&v139->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  if ((_QWORD)v136)
  {
    *((_QWORD *)&v136 + 1) = v136;
    operator delete((void *)v136);
  }
  if (v133 < 0)
    operator delete((void *)v132);
  sub_1B0325870((uint64_t)&v121, v9, (uint64_t)v235, a2 + 184);
  sub_1B0328C28((uint64_t)v235);
  v54 = *(int *)(a2 + 220);
  v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 560) + 88))(*(_QWORD *)(a2 + 560));
  if (v122 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v56 = v55;
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v125 + 24))(v125);
  v118 = 0;
  v58 = &v119;
  v119 = v54;
  v120[0] = v56;
  v120[1] = v57;
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  v59 = *v5 - 1;
  v60 = v128;
  v127 = v57;
  v128[0] = &off_1E60CD168;
  v129 = v128;
  v130 = v59;
  v128[1] = &v118;
  v131 = v56;
  v61 = v170;
  v169 = v57;
  v170[0] = &off_1E60CD168;
  v171 = v170;
  v170[1] = &v118;
  v172 = (unint64_t)v59;
  v173 = v56 * v59;
  v62 = v165;
  v164 = v57;
  v165[0] = &off_1E60CD168;
  v166 = v165;
  v165[1] = &v118;
  *(_QWORD *)&v167 = v59;
  *((_QWORD *)&v167 + 1) = v56;
  if (v118)
    v63 = v56;
  else
    v63 = v59;
  if (!v118)
  {
    v59 = v56;
    v58 = v120;
  }
  v168 = v59 + v63 * *v58;
  v179 = v57;
  v181 = v180;
  sub_1B0317E6C((uint64_t)v170, v180);
  v182 = v172;
  v183 = v173;
  v64 = (uint64_t)v166;
  v174 = v164;
  if (!v166)
    goto LABEL_72;
  if (v166 != v165)
  {
    v64 = (*(uint64_t (**)(void))(*v166 + 16))();
LABEL_72:
    v176 = (_QWORD *)v64;
    goto LABEL_74;
  }
  v176 = v175;
  (*(void (**)(_QWORD *, _QWORD *))(v165[0] + 24))(v165, v175);
LABEL_74:
  v177 = v167;
  v178 = v168;
  v195 = v179;
  if (v181)
  {
    if (v181 == v180)
    {
      v197 = v196;
      (*(void (**)(_QWORD *, _QWORD *))(v180[0] + 24))(v180, v196);
    }
    else
    {
      v197 = v181;
      v181 = 0;
    }
  }
  else
  {
    v197 = 0;
  }
  v198 = v182;
  v199 = v183;
  v190 = v174;
  v65 = &v190;
  if (!v176)
    goto LABEL_82;
  if (v176 != v175)
  {
    v65 = &v174;
    v192 = v176;
LABEL_82:
    v65[4] = 0;
    goto LABEL_84;
  }
  v192 = v191;
  (*(void (**)(_QWORD *, _QWORD *))(v175[0] + 24))(v175, v191);
LABEL_84:
  v193 = v177;
  v194 = v178;
  v205 = v195;
  v66 = &v205;
  if (!v197)
  {
LABEL_87:
    v66[4] = 0;
    goto LABEL_89;
  }
  if (v197 != v196)
  {
    v66 = &v195;
    v207 = v197;
    goto LABEL_87;
  }
  v207 = v206;
  (*(void (**)(_QWORD *, _QWORD *))(v196[0] + 24))(v196, v206);
LABEL_89:
  v208 = v198;
  v209 = v199;
  v200 = v190;
  v67 = &v200;
  if (!v192)
  {
LABEL_92:
    v67[4] = 0;
    goto LABEL_94;
  }
  if (v192 != v191)
  {
    v67 = &v190;
    v202 = v192;
    goto LABEL_92;
  }
  v202 = v201;
  (*(void (**)(_QWORD *))(v191[0] + 24))(v191);
LABEL_94:
  v203 = v193;
  v204 = v194;
  v68 = (uint64_t)v207;
  v245 = v205;
  v69 = v246;
  if (!v207)
  {
LABEL_97:
    v247 = (_BYTE *)v68;
    goto LABEL_99;
  }
  if (v207 != v206)
  {
    v68 = (*(uint64_t (**)(_QWORD *))(*v207 + 16))(v207);
    goto LABEL_97;
  }
  v247 = v246;
  (*(void (**)(_QWORD *, _BYTE *))(v206[0] + 24))(v206, v246);
LABEL_99:
  v248 = v208;
  v249 = v209;
  v240 = v200;
  v70 = v241;
  if (v202)
  {
    if (v202 == v201)
    {
      v242 = v241;
      (*(void (**)(void))(v201[0] + 24))();
    }
    else
    {
      v242 = v202;
      v202 = 0;
    }
  }
  else
  {
    v242 = 0;
  }
  v243 = v203;
  v244 = v204;
  sub_1B0317F48(&v245, &v240, (uint64_t)&v132);
  if (v242 == v241)
  {
    v71 = 4;
  }
  else
  {
    if (!v242)
      goto LABEL_109;
    v71 = 5;
    v70 = v242;
  }
  (*(void (**)(_QWORD *))(*v70 + 8 * v71))(v70);
LABEL_109:
  if (v247 == v246)
  {
    v72 = 4;
  }
  else
  {
    if (!v247)
      goto LABEL_114;
    v72 = 5;
    v69 = v247;
  }
  (*(void (**)(_QWORD *))(*v69 + 8 * v72))(v69);
LABEL_114:
  v230 = v132;
  v73 = (__int128 *)&v230;
  v74 = (__int128 *)v231;
  if (!v135)
  {
LABEL_117:
    *((_QWORD *)v73 + 4) = 0;
    goto LABEL_119;
  }
  v73 = &v132;
  if (v135 != (__int128 *)((char *)&v132 + 8))
  {
    v232 = v135;
    goto LABEL_117;
  }
  v232 = (__int128 *)v231;
  (*(void (**)(void))(*(_QWORD *)v135 + 24))();
LABEL_119:
  v233 = v136;
  v75 = v138;
  v234 = (uint64_t)v137;
  v225 = v138;
  v76 = (std::__shared_weak_count **)v226;
  if (v141)
  {
    if (v141 == &v139)
    {
      v227 = (std::__shared_weak_count **)v226;
      ((void (*)(void))(*v141)[1].__vftable)();
      v75 = v225;
    }
    else
    {
      v227 = v141;
      v141 = 0;
    }
  }
  else
  {
    v227 = 0;
  }
  v228 = v142;
  v229 = v143;
  v210 = a1;
  if (v230 != v75 || v233 != v228)
  {
    v77 = v234;
    v75 = v230;
    do
    {
      sub_1B0335700((uint64_t *)&v210, *(float *)(v75 + 4 * v77));
      v215 = ++*((_QWORD *)&v233 + 1);
      v220 = v233;
      if (!v232)
        sub_1B03029C8();
      v77 = (*(uint64_t (**)(__int128 *, uint64_t *, uint64_t *))(*(_QWORD *)v232 + 48))(v232, &v220, &v215);
      v234 = v77;
      v75 = v230;
    }
    while (v230 != v225 || v233 != v228);
  }
  v235[0] = v75;
  v78 = v235;
  v79 = (__int128 *)&v235[1];
  if (!v232)
    goto LABEL_133;
  if (v232 != (__int128 *)v231)
  {
    v78 = &v230;
    v236 = v232;
LABEL_133:
    v78[4] = 0;
    goto LABEL_135;
  }
  v236 = (__int128 *)&v235[1];
  (*(void (**)(_QWORD *, _QWORD *))(v231[0] + 24))(v231, &v235[1]);
LABEL_135:
  v237 = v233;
  v238 = v234;
  v239 = (uint64_t)v210;
  if (v227 == (std::__shared_weak_count **)v226)
  {
    v80 = 4;
  }
  else
  {
    if (!v227)
      goto LABEL_140;
    v80 = 5;
    v76 = v227;
  }
  (*((void (**)(std::__shared_weak_count **))&(*v76)->__vftable + v80))(v76);
LABEL_140:
  if (v232 == (__int128 *)v231)
  {
    v81 = 4;
  }
  else
  {
    if (!v232)
      goto LABEL_145;
    v81 = 5;
    v74 = v232;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v74 + 8 * v81))(v74);
LABEL_145:
  v215 = v205;
  v82 = &v215;
  v83 = v216;
  if (!v207)
  {
LABEL_148:
    v82[4] = 0;
    goto LABEL_150;
  }
  if (v207 != v206)
  {
    v82 = &v205;
    v217 = v207;
    goto LABEL_148;
  }
  v217 = v216;
  (*(void (**)(void))(v206[0] + 24))();
LABEL_150:
  v218 = v208;
  v219 = v209;
  v210 = (_QWORD *)v235[0];
  v84 = (__int128 *)v211;
  if (!v236)
  {
    v85 = &v212;
    goto LABEL_154;
  }
  if (v236 != (__int128 *)&v235[1])
  {
    v85 = &v236;
    v212 = v236;
LABEL_154:
    v86 = v180;
    *v85 = 0;
    goto LABEL_156;
  }
  v86 = v180;
  v212 = (__int128 *)v211;
  (*(void (**)(_QWORD *, _BYTE *))(v235[1] + 24))(&v235[1], v211);
LABEL_156:
  v213 = v237;
  v214 = v238;
  sub_1B0318474((uint64_t)&v215, (uint64_t)&v210, (uint64_t)&v220);
  v87 = v239;
  v184 = v220;
  if (v222)
  {
    if (v222 == v221)
    {
      v186 = v185;
      (*(void (**)(void))(*(_QWORD *)v222 + 24))();
    }
    else
    {
      v186 = v222;
      v222 = 0;
    }
  }
  else
  {
    v186 = 0;
  }
  v187 = v223;
  v88 = v222;
  v188 = v224;
  v189 = v87;
  v89 = v175;
  if (v222 == v221)
  {
    v90 = 4;
    v88 = v221;
  }
  else
  {
    if (!v222)
      goto LABEL_166;
    v90 = 5;
  }
  (*(void (**)(void))(*v88 + 8 * v90))();
LABEL_166:
  if (v212 == (__int128 *)v211)
  {
    v91 = 4;
  }
  else
  {
    if (!v212)
      goto LABEL_171;
    v91 = 5;
    v84 = v212;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v84 + 8 * v91))(v84);
LABEL_171:
  if (v217 == v216)
  {
    v93 = 4;
    v92 = v206;
  }
  else
  {
    v92 = v206;
    if (!v217)
      goto LABEL_176;
    v93 = 5;
    v83 = v217;
  }
  (*(void (**)(_QWORD *))(*v83 + 8 * v93))(v83);
LABEL_176:
  if (v236 == (__int128 *)&v235[1])
  {
    v96 = 4;
    v95 = v191;
    v94 = v196;
  }
  else
  {
    v95 = v191;
    v94 = v196;
    if (!v236)
      goto LABEL_181;
    v96 = 5;
    v79 = v236;
  }
  (*(void (**)(__int128 *))(*(_QWORD *)v79 + 8 * v96))(v79);
LABEL_181:
  v97 = v141;
  if (v141 == &v139)
  {
    v99 = 4;
    v97 = &v139;
    v98 = v201;
  }
  else
  {
    v98 = v201;
    if (!v141)
      goto LABEL_186;
    v99 = 5;
  }
  (*((void (**)(void))&(*v97)->__vftable + v99))();
LABEL_186:
  v100 = v135;
  if (v135 == (__int128 *)((char *)&v132 + 8))
  {
    v101 = 4;
    v100 = (__int128 *)((char *)&v132 + 8);
  }
  else
  {
    if (!v135)
      goto LABEL_191;
    v101 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v100 + 8 * v101))();
LABEL_191:
  if (v202 == v201)
  {
    v102 = 4;
  }
  else
  {
    if (!v202)
      goto LABEL_196;
    v102 = 5;
    v98 = v202;
  }
  (*(void (**)(_QWORD *))(*v98 + 8 * v102))(v98);
LABEL_196:
  if (v207 == v206)
  {
    v103 = 4;
  }
  else
  {
    if (!v207)
      goto LABEL_201;
    v103 = 5;
    v92 = v207;
  }
  (*(void (**)(_QWORD *))(*v92 + 8 * v103))(v92);
LABEL_201:
  if (v192 == v191)
  {
    v104 = 4;
  }
  else
  {
    if (!v192)
      goto LABEL_206;
    v104 = 5;
    v95 = v192;
  }
  (*(void (**)(_QWORD *))(*v95 + 8 * v104))(v95);
LABEL_206:
  if (v197 == v196)
  {
    v106 = 4;
    v105 = v185;
  }
  else
  {
    v105 = v185;
    if (!v197)
      goto LABEL_211;
    v106 = 5;
    v94 = v197;
  }
  (*(void (**)(_QWORD *))(*v94 + 8 * v106))(v94);
LABEL_211:
  if (v186 == v185)
  {
    v107 = 4;
  }
  else
  {
    if (!v186)
      goto LABEL_216;
    v107 = 5;
    v105 = v186;
  }
  (*(void (**)(_QWORD *))(*v105 + 8 * v107))(v105);
LABEL_216:
  if (v176 == v175)
  {
    v108 = 4;
  }
  else
  {
    if (!v176)
      goto LABEL_221;
    v108 = 5;
    v89 = v176;
  }
  (*(void (**)(_QWORD *))(*v89 + 8 * v108))(v89);
LABEL_221:
  if (v181 == v180)
  {
    v109 = 4;
  }
  else
  {
    if (!v181)
      goto LABEL_226;
    v109 = 5;
    v86 = v181;
  }
  (*(void (**)(_QWORD *))(*v86 + 8 * v109))(v86);
LABEL_226:
  if (v166 == v165)
  {
    v110 = 4;
  }
  else
  {
    if (!v166)
      goto LABEL_231;
    v110 = 5;
    v62 = v166;
  }
  (*(void (**)(_QWORD *))(*v62 + 8 * v110))(v62);
LABEL_231:
  if (v171 == v170)
  {
    v111 = 4;
  }
  else
  {
    if (!v171)
      goto LABEL_236;
    v111 = 5;
    v61 = v171;
  }
  (*(void (**)(_QWORD *))(*v61 + 8 * v111))(v61);
LABEL_236:
  if (v129 == v128)
  {
    v112 = 4;
    goto LABEL_240;
  }
  if (v129)
  {
    v112 = 5;
    v60 = v129;
LABEL_240:
    (*(void (**)(_QWORD *))(*v60 + 8 * v112))(v60);
  }
  v121 = &unk_1E60CCA78;
  v113 = v126;
  if (v126)
  {
    v114 = (unint64_t *)&v126->__shared_owners_;
    do
      v115 = __ldaxr(v114);
    while (__stlxr(v115 - 1, v114));
    if (!v115)
    {
      ((void (*)(std::__shared_weak_count *))v113->__on_zero_shared)(v113);
      std::__shared_weak_count::__release_weak(v113);
    }
  }
  if (v123)
  {
    v124 = v123;
    operator delete(v123);
  }
}

void sub_1B032544C(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_1B0303828(a1);
  _Unwind_Resume(a1);
}

void sub_1B0325870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  int64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  void *__p;
  void **v23;
  _QWORD v24[5];
  void *__dst[2];
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a4 + 23) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)a4, *(_QWORD *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a4;
    v26 = *(_QWORD *)(a4 + 16);
  }
  sub_1B0318B00(&__p, (uint64_t)__dst, 1uLL);
  sub_1B0326C50(a2, a3, (__int128 **)&__p, (uint64_t)v24);
  v8 = sub_1B0328D00(v24, a4);
  v9 = v8;
  if (!v8)
    sub_1B02EA050("unordered_map::at: key not found");
  *(_QWORD *)a1 = &unk_1E60CCA78;
  v10 = *((_DWORD *)v8 + 12);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v12 = (_BYTE *)v8[7];
  v11 = (_BYTE *)v8[8];
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_1B02D7758();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 16) = v14;
    v15 = &v14[8 * (v13 >> 3)];
    *(_QWORD *)(a1 + 32) = v15;
    memcpy(v14, v12, v13);
    *(_QWORD *)(a1 + 24) = v15;
  }
  *(_QWORD *)(a1 + 40) = v9[10];
  v16 = v9[11];
  *(_QWORD *)(a1 + 48) = v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)a1 = &unk_1E60CC938;
  sub_1B0328C28((uint64_t)v24);
  v19 = (void **)__p;
  if (__p)
  {
    v20 = v23;
    v21 = __p;
    if (v23 != __p)
    {
      do
      {
        if (*((char *)v20 - 1) < 0)
          operator delete(*(v20 - 3));
        v20 -= 3;
      }
      while (v20 != v19);
      v21 = __p;
    }
    v23 = v19;
    operator delete(v21);
  }
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
}

void sub_1B0325A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1B031724C((void **)&a9);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0325AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 120);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 128);
    v4 = *(void **)(a1 + 120);
    if (v3 != v2)
    {
      do
      {
        v5 = *(void **)(v3 - 24);
        if (v5)
        {
          *(_QWORD *)(v3 - 16) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 128) = v2;
    operator delete(v4);
  }
  return sub_1B03292F0(a1);
}

_QWORD *sub_1B0325B14(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1B0325B98(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  a1[3] = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0325C2C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  a1[3] = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0325CC0@<X0>(int32x4_t **a1@<X0>, uint64_t a2@<X8>, int32x2_t a3@<D0>)
{
  uint64_t result;
  char *v6;
  int32x4_t *v7;
  unint64_t v8;
  signed int v9;
  int32x4_t *v10;
  uint64_t v11;
  int32x4_t *v12;
  int32x4_t v13;
  uint64_t v14;
  int32x4_t v15;
  int32x4_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int8x16_t v20;
  __int32 v21;
  unint64_t v22;
  int32x4_t v23;
  int32x4_t *v24;
  unint64_t v25;
  unint64_t v26;
  _DWORD *v27;
  std::runtime_error *exception;
  int v30;

  v30 = 1;
  sub_1B0325E7C(a2, &v30, (uint64_t)a1);
  if (*(_DWORD *)(a2 + 8) != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 40) + 24))(*(_QWORD *)(a2 + 40));
  v7 = *a1;
  v6 = (char *)a1[1];
  if (*a1 == (int32x4_t *)v6)
    return result;
  v8 = v6 - (char *)v7 - 8;
  if (v8 >= 0x38)
  {
    v11 = (v8 >> 3) + 1;
    v10 = (int32x4_t *)((char *)v7 + 8 * (v11 & 0x3FFFFFFFFFFFFFF8));
    v12 = v7 + 2;
    v13.i64[0] = 0x100000001;
    v13.i64[1] = 0x100000001;
    v14 = v11 & 0x3FFFFFFFFFFFFFF8;
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    do
    {
      v17 = v12[-2];
      v16 = v12[-1];
      v19 = *v12;
      v18 = v12[1];
      v12 += 4;
      v13 = vmulq_s32(v13, vuzp1q_s32(v17, v16));
      v15 = vmulq_s32(v15, vuzp1q_s32(v19, v18));
      v14 -= 8;
    }
    while (v14);
    v20 = (int8x16_t)vmulq_s32(v15, v13);
    *(int32x2_t *)v20.i8 = vmul_s32(*(int32x2_t *)v20.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL));
    v9 = v20.i32[0] * v20.i32[1];
    if (v11 == (v11 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_9;
  }
  else
  {
    v9 = 1;
    v10 = *a1;
  }
  do
  {
    v21 = v10->i32[0];
    v10 = (int32x4_t *)((char *)v10 + 8);
    v9 *= v21;
  }
  while (v10 != (int32x4_t *)v6);
LABEL_9:
  if (!v9)
    return result;
  if (v9 < 8)
  {
    v22 = 0;
LABEL_15:
    v26 = v9 - v22;
    v27 = (_DWORD *)(result + 4 * v22);
    do
    {
      *v27++ = a3.i32[0];
      --v26;
    }
    while (v26);
    return result;
  }
  v22 = v9 & 0xFFFFFFFFFFFFFFF8;
  v23 = vdupq_lane_s32(a3, 0);
  v24 = (int32x4_t *)(result + 16);
  v25 = v22;
  do
  {
    v24[-1] = v23;
    *v24 = v23;
    v24 += 2;
    v25 -= 8;
  }
  while (v25);
  if (v22 != v9)
    goto LABEL_15;
  return result;
}

void sub_1B0325E4C(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void *v2;

  __cxa_free_exception(v2);
  sub_1B031CD9C(v1);
  _Unwind_Resume(a1);
}

void sub_1B0325E68(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_1B031CD9C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0325E7C(uint64_t a1, int *a2, uint64_t a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  int v8;
  int32x4_t *v9;
  int64_t v10;
  char *v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;

  v6 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD6C8;
  sub_1B032609C((uint64_t)&v6[1], a2, (int32x4_t **)a3);
  *(_QWORD *)a1 = &unk_1E60CCA78;
  v8 = *a2;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v9 = *(int32x4_t **)a3;
  v10 = *(_QWORD *)(a3 + 8) - *(_QWORD *)a3;
  if (v10)
  {
    if (v10 < 0)
      sub_1B02D7758();
    v11 = (char *)operator new(v10);
    *(_QWORD *)(a1 + 16) = v11;
    *(_QWORD *)(a1 + 24) = v11;
    v12 = &v11[8 * (v10 >> 3)];
    *(_QWORD *)(a1 + 32) = v12;
    memcpy(v11, v9, v10);
    *(_QWORD *)(a1 + 24) = v12;
  }
  *(_QWORD *)(a1 + 40) = v6 + 1;
  *(_QWORD *)(a1 + 48) = v6;
  do
    v13 = __ldxr(p_shared_owners);
  while (__stxr(v13 + 1, p_shared_owners));
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_QWORD *)a1 = &unk_1E60CC938;
  return a1;
}

void sub_1B0325FF8(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_1B0326010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  void **v12;
  void *v14;

  v14 = *v12;
  if (*v12)
  {
    *(_QWORD *)(v11 + 24) = v14;
    operator delete(v14);
  }
  sub_1B0320680((uint64_t)&a11);
  sub_1B0320680((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B032603C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD6C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B0326050(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD6C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0326084(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 201))
    free(*(void **)(a1 + 32));
}

uint64_t sub_1B032609C(uint64_t a1, _DWORD *a2, int32x4_t **a3)
{
  int v6;
  int32x4_t *v7;
  int32x4_t *v8;
  unint64_t v9;
  int v10;
  int32x4_t *v11;
  int v12;
  uint64_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  uint64_t v16;
  int32x4_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  int32x4_t v21;
  int8x16_t v22;
  int v23;
  unsigned int v24;
  std::runtime_error *exception;
  __int128 v27;
  void *memptr;

  v27 = 0u;
  espresso_buffer_pack_tensor_shape();
  if (!*a2)
  {
    v6 = 1;
    v8 = *a3;
    v7 = a3[1];
    if (*a3 != v7)
      goto LABEL_4;
LABEL_7:
    v12 = 0;
    goto LABEL_13;
  }
  if (*a2 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type");
    goto LABEL_22;
  }
  v6 = 4;
  v8 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
    goto LABEL_7;
LABEL_4:
  v9 = (char *)v7 - (char *)v8 - 8;
  if (v9 >= 0x38)
  {
    v13 = (v9 >> 3) + 1;
    v11 = (int32x4_t *)((char *)v8 + 8 * (v13 & 0x3FFFFFFFFFFFFFF8));
    v14 = v8 + 2;
    v15.i64[0] = 0x100000001;
    v15.i64[1] = 0x100000001;
    v16 = v13 & 0x3FFFFFFFFFFFFFF8;
    v17.i64[0] = 0x100000001;
    v17.i64[1] = 0x100000001;
    do
    {
      v19 = v14[-2];
      v18 = v14[-1];
      v21 = *v14;
      v20 = v14[1];
      v14 += 4;
      v15 = vmulq_s32(v15, vuzp1q_s32(v19, v18));
      v17 = vmulq_s32(v17, vuzp1q_s32(v21, v20));
      v16 -= 8;
    }
    while (v16);
    v22 = (int8x16_t)vmulq_s32(v17, v15);
    *(int32x2_t *)v22.i8 = vmul_s32(*(int32x2_t *)v22.i8, (int32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL));
    v10 = v22.i32[0] * v22.i32[1];
    if (v13 == (v13 & 0x3FFFFFFFFFFFFFF8))
      goto LABEL_12;
  }
  else
  {
    v10 = 1;
    v11 = v8;
  }
  do
  {
    v23 = v11->i32[0];
    v11 = (int32x4_t *)((char *)v11 + 8);
    v10 *= v23;
  }
  while (v11 != v7);
LABEL_12:
  v12 = v10;
LABEL_13:
  memptr = 0;
  if (malloc_type_posix_memalign(&memptr, 0x1000uLL, (v12 * (uint64_t)v6 + 4095) & 0xFFFFFFFFFFFFF000, 0x7AADF4F3uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to allocate aligned memory.");
    goto LABEL_22;
  }
  *(_QWORD *)&v27 = memptr;
  if (!*a2)
  {
    v24 = 262152;
    goto LABEL_18;
  }
  if (*a2 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Unknown data type.");
LABEL_22:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v24 = 65568;
LABEL_18:
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 8) = v27;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)a1 = &unk_1E60CCA18;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 168) = v24;
  *(_WORD *)(a1 + 176) = 257;
  return a1;
}

void sub_1B03262E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B03262FC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0326310(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0326324(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 177))
    free(*(void **)(a1 + 8));
  return a1;
}

void sub_1B0326354(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 177))
    free(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0326394(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 8);
}

uint64_t sub_1B03263AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

unint64_t sub_1B03263C8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t result;
  unint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  uint64_t v8;
  size_t v9;
  __int8 *v10;
  char *v11;
  char *v12;
  std::runtime_error *exception;
  std::string *v14;
  int8x16_t v15;
  int8x16_t v16;
  int8x16_t v17;
  uint64_t v18;
  std::string v19;

  result = espresso_buffer_get_rank();
  v5 = result;
  if (result >= 6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v19, v5);
    v14 = std::string::insert(&v19, 0, "Unsupported tensor rank: ");
    v15 = *(int8x16_t *)&v14->__r_.__value_.__l.__data_;
    v17.i64[0] = v14->__r_.__value_.__r.__words[2];
    v16 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, (const std::string *)&v16);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 152), 2uLL);
  v7 = (int8x16_t)vshlq_n_s64(*(int64x2_t *)(a1 + 136), 2uLL);
  v16 = vextq_s8(v6, v6, 8uLL);
  v17 = vextq_s8(v7, v7, 8uLL);
  v18 = 4 * *(_QWORD *)(a1 + 128);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (result)
  {
    v8 = 8 * (5 - result);
    v9 = 40 - v8;
    v10 = &v16.i8[v8];
    v11 = (char *)operator new(40 - v8);
    *a2 = v11;
    v12 = &v11[v9];
    a2[2] = &v11[v9];
    result = (unint64_t)memcpy(v11, v10, v9);
    a2[1] = v12;
  }
  return result;
}

void sub_1B03264F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  int v23;

  if (a14 < 0)
    operator delete(__p);
  if (a22 < 0)
  {
    operator delete(a17);
    if ((v23 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v23)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v22);
  goto LABEL_8;
}

void sub_1B0326554(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  size_t v5;
  size_t v6;
  void *__p[3];

  v4 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
  v6 = v5;
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 32))(__p, a1);
  sub_1B03265EC(a2, v4, v6, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1B03265D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03265EC(uint64_t a1, const void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;

  v8 = operator new[]();
  *(_QWORD *)a1 = v8;
  v9 = (_QWORD *)operator new();
  *v9 = &unk_1E60CD850;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v8;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v10 = *(const void **)a4;
  v11 = *(_QWORD *)(a4 + 8) - *(_QWORD *)a4;
  if (v11)
  {
    if (v11 < 0)
      sub_1B02D7758();
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 24) = v12;
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[8 * (v11 >> 3)];
    *(_QWORD *)(a1 + 40) = v13;
    memcpy(v12, v10, v11);
    *(_QWORD *)(a1 + 32) = v13;
  }
  memcpy(*(void **)a1, a2, a3);
  return a1;
}

void sub_1B03266D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x1000C4077774924);
  _Unwind_Resume(a1);
}

void sub_1B03266FC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
  }
  sub_1B0320680(v1);
  _Unwind_Resume(a1);
}

void sub_1B0326724(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0326748(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    JUMPOUT(0x1B5E07CB4);
  return result;
}

uint64_t sub_1B0326768(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B03B0601)
    return a1 + 24;
  if (((v3 & 0x80000001B03B0601 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B03B0601))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B03B0601 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *sub_1B03267E8(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 3)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 61)
      goto LABEL_22;
    v10 = v8 >> 2;
    if (v8 >> 2 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8;
    v12 = 0x1FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 61)
LABEL_22:
      sub_1B02D7758();
    v13 = v12;
    result = operator new(8 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = &result[v13];
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 3;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[8 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

std::string *sub_1B032692C@<X0>(std::__fs::filesystem::path *this@<X1>, uint64_t a2@<X0>, std::__fs::filesystem::path *a3@<X8>)
{
  int v6;
  std::__fs::filesystem::path *v7;
  std::string::size_type size;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(a3, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&a3->__pn_.__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    a3->__pn_.__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 16);
  }
  if (std::__fs::filesystem::path::__root_directory(this).__size_)
    return std::string::operator=(&a3->__pn_, &this->__pn_);
  if (std::__fs::filesystem::path::__filename(a3).__size_)
    std::string::push_back(&a3->__pn_, 47);
  v6 = SHIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  if (v6 >= 0)
    v7 = this;
  else
    v7 = (std::__fs::filesystem::path *)this->__pn_.__r_.__value_.__r.__words[0];
  if (v6 >= 0)
    size = HIBYTE(this->__pn_.__r_.__value_.__r.__words[2]);
  else
    size = this->__pn_.__r_.__value_.__l.__size_;
  return std::string::append(&a3->__pn_, (const std::string::value_type *)v7, size);
}

void sub_1B03269C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B03269E4(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  void *v17;

  a1[22] = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[28];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[24];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[24];
  if (v5)
  {
LABEL_6:
    a1[25] = v5;
    operator delete(v5);
  }
LABEL_7:
  a1[15] = &unk_1E60CCA78;
  v6 = (std::__shared_weak_count *)a1[21];
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
      v9 = (void *)a1[17];
      if (!v9)
        goto LABEL_13;
      goto LABEL_12;
    }
  }
  v9 = (void *)a1[17];
  if (v9)
  {
LABEL_12:
    a1[18] = v9;
    operator delete(v9);
  }
LABEL_13:
  a1[8] = &unk_1E60CCA78;
  v10 = (std::__shared_weak_count *)a1[14];
  if (v10)
  {
    v11 = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
      v13 = (void *)a1[10];
      if (!v13)
        goto LABEL_19;
      goto LABEL_18;
    }
  }
  v13 = (void *)a1[10];
  if (v13)
  {
LABEL_18:
    a1[11] = v13;
    operator delete(v13);
  }
LABEL_19:
  a1[1] = &unk_1E60CCA78;
  v14 = (std::__shared_weak_count *)a1[7];
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      v17 = (void *)a1[3];
      if (!v17)
        return a1;
      goto LABEL_24;
    }
  }
  v17 = (void *)a1[3];
  if (v17)
  {
LABEL_24:
    a1[4] = v17;
    operator delete(v17);
  }
  return a1;
}

uint64_t sub_1B0326B84(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    v2 = *(void ***)(a1 + 88);
    if (!v2)
      goto LABEL_5;
  }
  else
  {
    v2 = *(void ***)(a1 + 88);
    if (!v2)
      goto LABEL_5;
  }
  do
  {
    v7 = (void **)*v2;
    if (*((char *)v2 + 39) < 0)
      operator delete(v2[2]);
    operator delete(v2);
    v2 = v7;
  }
  while (v7);
LABEL_5:
  v3 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  if (v3)
    operator delete(v3);
  v4 = *(void ***)a1;
  if (*(_QWORD *)a1)
  {
    v5 = *(void ***)(a1 + 8);
    v6 = *(void ***)a1;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 3;
      }
      while (v5 != v4);
      v6 = *(void ***)a1;
    }
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_1B0326C50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD *v6;
  uint64_t *i;
  __int128 v8;
  __int128 *v9;
  __int128 *v10;
  _QWORD *v11;
  void *v12;
  uint64_t *v13;
  uint64_t *v14;
  _BYTE *v15;
  _BYTE *v16;
  int64_t v17;
  void *v18;
  char *v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v37;
  _OWORD *v38;
  void *v39;
  int v40;
  void *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 *v46[3];
  int v47;
  _BYTE v48[24];
  uint64_t v49;
  __int128 v50;

  v6 = *(_OWORD **)(a1 + 8);
  for (i = *(uint64_t **)(a2 + 16); i; i = (uint64_t *)*i)
  {
    *(_QWORD *)v48 = &unk_1E60CC9A0;
    if (*((char *)i + 39) < 0)
    {
      sub_1B02EB0A8(&v48[8], (void *)i[2], i[3]);
    }
    else
    {
      v8 = *((_OWORD *)i + 1);
      v49 = i[4];
      *(_OWORD *)&v48[8] = v8;
    }
    v50 = *v6;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)i[10] + 16))(i[10], v48);
    if (SHIBYTE(v49) < 0)
      operator delete(*(void **)&v48[8]);
  }
  v37 = a4;
  v38 = v6;
  v9 = *a3;
  v10 = a3[1];
  if (*a3 != v10)
  {
    v11 = v6 + 12;
    v12 = &unk_1E60CCA78;
    while (!sub_1B032774C(v11, (uint64_t)v9))
    {
      v47 = espresso_network_bind_buffer();
      HIBYTE(v46[2]) = 21;
      strcpy((char *)v46, "Binding output buffer");
      sub_1B03270F4(&v47, (uint64_t *)v46);
      if (SHIBYTE(v46[2]) < 0)
        operator delete(v46[0]);
      LOWORD(v46[0]) = 0;
      sub_1B0327978((uint64_t)&v39, (uint64_t)v48, v46);
      v46[0] = v9;
      v24 = sub_1B0327D74((uint64_t)v11, (uint64_t)v9, (uint64_t)&unk_1B03B0E24, v46);
      v25 = v24;
      *((_DWORD *)v24 + 12) = v40;
      if (v24 + 5 != (uint64_t *)&v39)
        sub_1B03267E8(v24 + 7, (char *)v41, v42, (v42 - (_BYTE *)v41) >> 3);
      v27 = v44;
      v26 = v45;
      if (v45)
      {
        p_shared_owners = (unint64_t *)&v45->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      v30 = (std::__shared_weak_count *)v25[11];
      v25[10] = v27;
      v25[11] = (uint64_t)v26;
      if (!v30)
        goto LABEL_32;
      v31 = (unint64_t *)&v30->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      if (v32)
        goto LABEL_32;
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
      v33 = v45;
      v39 = v12;
      if (v45)
      {
LABEL_33:
        v34 = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
LABEL_38:
      if (v41)
      {
        v42 = (char *)v41;
        operator delete(v41);
      }
      v9 = (__int128 *)((char *)v9 + 24);
      if (v9 == v10)
        goto LABEL_42;
    }
    v13 = sub_1B0328D00(v11, (uint64_t)v9);
    if (!v13)
      sub_1B02EA050("unordered_map::at: key not found");
    v14 = v13;
    v39 = &unk_1E60CCA78;
    v40 = *((_DWORD *)v13 + 12);
    v42 = 0;
    v43 = 0;
    v41 = 0;
    v16 = (_BYTE *)v13[7];
    v15 = (_BYTE *)v13[8];
    v17 = v15 - v16;
    if (v15 != v16)
    {
      if (v17 < 0)
        sub_1B02D7758();
      v18 = v12;
      v19 = (char *)operator new(v15 - v16);
      v20 = &v19[8 * (v17 >> 3)];
      v41 = v19;
      v43 = v20;
      memcpy(v19, v16, v17);
      v42 = v20;
      v12 = v18;
    }
    v21 = (std::__shared_weak_count *)v14[11];
    v44 = v14[10];
    v45 = v21;
    if (!v21)
    {
      v39 = &unk_1E60CCA78;
      goto LABEL_38;
    }
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
LABEL_32:
    v33 = v45;
    v39 = v12;
    if (v45)
      goto LABEL_33;
    goto LABEL_38;
  }
LABEL_42:
  LODWORD(v46[0]) = espresso_plan_execute_sync();
  v48[23] = 14;
  strcpy(v48, "Executing plan");
  sub_1B03270F4((int *)v46, (uint64_t *)v48);
  if ((v48[23] & 0x80000000) != 0)
    operator delete(*(void **)v48);
  return sub_1B0328568(v37, (uint64_t)(v38 + 12));
}

void sub_1B0327014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,int a32,__int16 a33,char a34,char a35)
{
  if (a31 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03270B4(uint64_t result)
{
  uint64_t v1;

  v1 = result;
  if (*(char *)(result + 31) < 0)
  {
    operator delete(*(void **)(result + 8));
    return v1;
  }
  return result;
}

uint64_t sub_1B03270F4(int *a1, uint64_t *a2)
{
  uint64_t result;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  std::string::size_type size;
  std::string *v9;
  __int128 v10;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  result = *a1;
  if ((_DWORD)result)
  {
    sub_1B032845C(result, a2);
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::operator+<char>();
    v5 = std::string::append(&v14, " [espresso error: ");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, *a1);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v7 = &v13;
    else
      v7 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v9 = std::string::append(&v15, (const std::string::value_type *)v7, size);
    v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v11 = std::string::append(&v16, "]");
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E60CC958;
    __cxa_throw(exception, (struct type_info *)&unk_1E60CAEA8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  return result;
}

void sub_1B0327228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a33 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a33 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a28);
  if ((a14 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a9);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_1B0327314(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0327354(uint64_t a1, __int128 *a2, _DWORD *a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::runtime_error *exception;
  char __p[22];
  char v9;
  __int128 v10;
  __int128 v11;
  int v12;

  switch(*a3)
  {
    case 0:
      v3 = a2[1];
      v10 = *a2;
      v11 = v3;
      v12 = espresso_network_bind_input_vimagebuffer_bgra8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B03270F4(&v12, (uint64_t *)__p);
      break;
    case 1:
      v5 = a2[1];
      v10 = *a2;
      v11 = v5;
      v12 = espresso_network_bind_input_vimagebuffer_rgba8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B03270F4(&v12, (uint64_t *)__p);
      break;
    case 2:
      v4 = a2[1];
      v10 = *a2;
      v11 = v4;
      v12 = espresso_network_bind_input_vimagebuffer_argb8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B03270F4(&v12, (uint64_t *)__p);
      break;
    case 3:
      v6 = a2[1];
      v10 = *a2;
      v11 = v6;
      v12 = espresso_network_bind_input_vimagebuffer_planar8();
      v9 = 21;
      strcpy(__p, "Binding vImage_Buffer");
      sub_1B03270F4(&v12, (uint64_t *)__p);
      break;
    default:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported image buffer type");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v9 < 0)
    operator delete(*(void **)__p);
}

void sub_1B0327588(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B032759C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B03275C4()
{
  char __p[22];
  char v1;
  int v2;

  v2 = espresso_network_bind_cvpixelbuffer();
  v1 = 21;
  strcpy(__p, "Binding CVPixelBuffer");
  sub_1B03270F4(&v2, (uint64_t *)__p);
  if (v1 < 0)
    operator delete(*(void **)__p);
}

void sub_1B0327660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B032767C()
{
  void *__p;
  __int128 v1;
  int v2;

  v2 = espresso_network_bind_buffer();
  __p = operator new(0x20uLL);
  v1 = xmmword_1B03AFE20;
  strcpy((char *)__p, "Binding espresso_buffer_t");
  sub_1B03270F4(&v2, (uint64_t *)&__p);
  if (SHIBYTE(v1) < 0)
    operator delete(__p);
}

void sub_1B0327730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B032774C(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_1B02D6D9C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v8 == v21)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v8 == v17)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t sub_1B0327978(uint64_t a1, uint64_t a2, _WORD *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  __int128 v8;
  __int128 v9;
  std::__shared_count v10;
  std::__shared_count v11;
  __int128 v12;
  int v13;
  int v14;
  unint64_t v15;
  size_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  unint64_t v21;
  unint64_t v22;
  std::runtime_error *exception;
  void *__p[3];
  _BYTE v26[12];
  char __src[80];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)operator new(0xD0uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD6C8;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CCA18;
  v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)&v6[6].__shared_weak_owners_ = *(_OWORD *)(a2 + 128);
  *(_OWORD *)&v6[7].__shared_owners_ = v8;
  v6[8].__vftable = *(std::__shared_weak_count_vtbl **)(a2 + 160);
  v9 = *(_OWORD *)(a2 + 80);
  v6[4].std::__shared_count = *(std::__shared_count *)(a2 + 64);
  *(_OWORD *)&v6[4].__shared_weak_owners_ = v9;
  v10 = *(std::__shared_count *)(a2 + 112);
  *(_OWORD *)&v6[5].__shared_owners_ = *(_OWORD *)(a2 + 96);
  v6[6].std::__shared_count = v10;
  v11 = *(std::__shared_count *)(a2 + 16);
  *(_OWORD *)&v6[1].__shared_owners_ = *(_OWORD *)a2;
  v6[2].std::__shared_count = v11;
  v12 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v6[2].__shared_weak_owners_ = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v6[3].__shared_owners_ = v12;
  LOWORD(v6[8].__shared_owners_) = *a3;
  v13 = *(_DWORD *)(a2 + 160);
  if (v13 == 262152)
  {
    v14 = 0;
  }
  else
  {
    if (v13 != 65568)
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unsupported espresso type encountered.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    v14 = 1;
  }
  *(_DWORD *)&v26[8] = 0;
  *(_QWORD *)v26 = espresso_buffer_unpack_tensor_shape();
  strcpy((char *)__p, "Unpacking tensor shape");
  HIBYTE(__p[2]) = 22;
  sub_1B03270F4((int *)v26, (uint64_t *)__p);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    v15 = *(_QWORD *)&v26[4];
    memset(__p, 0, sizeof(__p));
    if (*(_QWORD *)&v26[4])
      goto LABEL_7;
LABEL_11:
    v17 = 0;
    goto LABEL_12;
  }
  v15 = *(_QWORD *)&v26[4];
  memset(__p, 0, sizeof(__p));
  if (!*(_QWORD *)&v26[4])
    goto LABEL_11;
LABEL_7:
  if (v15 >> 61)
    sub_1B02D7758();
  v16 = 8 * v15;
  if (((8 * v15) & 0x8000000000000000) != 0)
    sub_1B02D7758();
  v17 = (char *)operator new(8 * v15);
  v15 = (unint64_t)&v17[8 * ((uint64_t)(8 * v15) >> 3)];
  memcpy(v17, __src, v16);
LABEL_12:
  *(_QWORD *)a1 = &unk_1E60CCA78;
  *(_DWORD *)(a1 + 8) = v14;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v18 = v15 - (_QWORD)v17;
  if ((char *)v15 != v17)
  {
    if (v18 < 0)
      sub_1B02D7758();
    v19 = (char *)operator new(v15 - (_QWORD)v17);
    *(_QWORD *)(a1 + 16) = v19;
    v20 = &v19[8 * (v18 >> 3)];
    *(_QWORD *)(a1 + 32) = v20;
    memcpy(v19, v17, v15 - (_QWORD)v17);
    *(_QWORD *)(a1 + 24) = v20;
  }
  *(_QWORD *)(a1 + 40) = v6 + 1;
  *(_QWORD *)(a1 + 48) = v6;
  do
    v21 = __ldxr(p_shared_owners);
  while (__stxr(v21 + 1, p_shared_owners));
  if (v17)
    operator delete(v17);
  do
    v22 = __ldaxr(p_shared_owners);
  while (__stlxr(v22 - 1, p_shared_owners));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  *(_QWORD *)a1 = &unk_1E60CC938;
  return a1;
}

void sub_1B0327CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1B0320680((uint64_t)&a15);
  sub_1B0320680((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_1B0327D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v9 = *v7;
  if (*v7)
  {
    *(_QWORD *)(v5 + 24) = v9;
    operator delete(v9);
  }
  if (v6)
    JUMPOUT(0x1B0327D2CLL);
  sub_1B0320680((uint64_t)va1);
  sub_1B0320680((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0327D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  sub_1B0320680((uint64_t)&a15);
  sub_1B0320680((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0327D74(uint64_t a1, uint64_t a2, uint64_t a3, __int128 **a4)
{
  unint64_t v4;
  _BYTE *v6;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint8x8_t v13;
  uint64_t **v14;
  uint64_t *v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _BYTE *v27;
  __int128 *v28;
  __int128 v29;
  float v30;
  float v31;
  _QWORD *v32;
  _QWORD *v33;
  _BOOL8 v34;
  unint64_t v35;
  unint64_t v36;
  size_t prime;
  int8x8_t v38;
  unint64_t v39;
  uint8x8_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v45[2];
  char v46;

  v6 = (_BYTE *)a2;
  v8 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v9 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v9 = v8;
  }
  v10 = sub_1B02D6D9C((uint64_t)v45, (uint64_t *)a2, v9);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 8);
  if (v12)
  {
    v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      v4 = v10;
      if (v10 >= v12)
        v4 = v10 % v12;
    }
    else
    {
      v4 = (v12 - 1) & v10;
    }
    v14 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v4);
    if (v14)
    {
      v15 = *v14;
      if (*v14)
      {
        v16 = v6[23];
        if (v16 >= 0)
          v17 = v6[23];
        else
          v17 = *((_QWORD *)v6 + 1);
        if (v16 < 0)
          v6 = *(_BYTE **)v6;
        if (v13.u32[0] < 2uLL)
        {
          while (1)
          {
            v22 = v15[1];
            if (v22 == v11)
            {
              v23 = *((unsigned __int8 *)v15 + 39);
              if ((v23 & 0x80u) == 0)
                v24 = *((unsigned __int8 *)v15 + 39);
              else
                v24 = v15[3];
              if (v24 == v17)
              {
                if ((v23 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v15[2], v6, v15[3]))
                    return v15;
                }
                else
                {
                  if (!*((_BYTE *)v15 + 39))
                    return v15;
                  v25 = 0;
                  while (*((unsigned __int8 *)v15 + v25 + 16) == v6[v25])
                  {
                    if (v23 == ++v25)
                      return v15;
                  }
                }
              }
            }
            else if ((v22 & (v12 - 1)) != v4)
            {
              goto LABEL_51;
            }
            v15 = (uint64_t *)*v15;
            if (!v15)
              goto LABEL_51;
          }
        }
        do
        {
          v18 = v15[1];
          if (v18 == v11)
          {
            v19 = *((unsigned __int8 *)v15 + 39);
            if ((v19 & 0x80u) == 0)
              v20 = *((unsigned __int8 *)v15 + 39);
            else
              v20 = v15[3];
            if (v20 == v17)
            {
              if ((v19 & 0x80) != 0)
              {
                if (!memcmp((const void *)v15[2], v6, v15[3]))
                  return v15;
              }
              else
              {
                if (!*((_BYTE *)v15 + 39))
                  return v15;
                v21 = 0;
                while (*((unsigned __int8 *)v15 + v21 + 16) == v6[v21])
                {
                  if (v19 == ++v21)
                    return v15;
                }
              }
            }
          }
          else
          {
            if (v18 >= v12)
              v18 %= v12;
            if (v18 != v4)
              break;
          }
          v15 = (uint64_t *)*v15;
        }
        while (v15);
      }
    }
  }
LABEL_51:
  v26 = (char *)operator new(0x60uLL);
  v45[0] = v26;
  v45[1] = a1 + 16;
  v46 = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v26 + 1) = v11;
  v27 = v26 + 16;
  v28 = *a4;
  if (*((char *)*a4 + 23) < 0)
  {
    sub_1B02EB0A8(v27, *(void **)v28, *((_QWORD *)v28 + 1));
  }
  else
  {
    v29 = *v28;
    *((_QWORD *)v26 + 4) = *((_QWORD *)v28 + 2);
    *(_OWORD *)v27 = v29;
  }
  *((_DWORD *)v26 + 12) = 1;
  *(_OWORD *)(v26 + 56) = 0u;
  *(_OWORD *)(v26 + 72) = 0u;
  *((_QWORD *)v26 + 11) = 0;
  *((_QWORD *)v26 + 5) = &unk_1E60CC938;
  v46 = 1;
  v30 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v31 = *(float *)(a1 + 32);
  if (!v12 || (float)(v31 * (float)v12) < v30)
  {
    v34 = 1;
    if (v12 >= 3)
      v34 = (v12 & (v12 - 1)) != 0;
    v35 = v34 | (2 * v12);
    v36 = vcvtps_u32_f32(v30 / v31);
    if (v35 <= v36)
      prime = v36;
    else
      prime = v35;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v38 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v38)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v38)
    {
      v39 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v38 < 3uLL || (v40 = (uint8x8_t)vcnt_s8(v38), v40.i16[0] = vaddlv_u8(v40), v40.u32[0] > 1uLL))
      {
        v39 = std::__next_prime(v39);
      }
      else
      {
        v41 = 1 << -(char)__clz(v39 - 1);
        if (v39 >= 2)
          v39 = v41;
      }
      if (prime <= v39)
        prime = v39;
      if (prime < *(_QWORD *)&v38)
LABEL_68:
        sub_1B03282B0(a1, prime);
    }
    v12 = *(_QWORD *)(a1 + 8);
    v42 = v12 - 1;
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12)
      {
        v4 = v11 % v12;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v11 % v12));
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
      else
      {
        v4 = v11;
        v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v11);
        v33 = (_QWORD *)v45[0];
        if (v32)
          goto LABEL_57;
      }
    }
    else
    {
      v4 = v42 & v11;
      v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v42 & v11));
      v33 = (_QWORD *)v45[0];
      if (v32)
        goto LABEL_57;
    }
LABEL_81:
    *v33 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v45[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v4) = a1 + 16;
    if (*(_QWORD *)v45[0])
    {
      v43 = *(_QWORD *)(*(_QWORD *)v45[0] + 8);
      if ((v12 & (v12 - 1)) != 0)
      {
        if (v43 >= v12)
          v43 %= v12;
      }
      else
      {
        v43 &= v12 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v43) = v45[0];
    }
    goto LABEL_92;
  }
  v32 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v4);
  v33 = (_QWORD *)v45[0];
  if (!v32)
    goto LABEL_81;
LABEL_57:
  *v33 = *v32;
  *v32 = v45[0];
LABEL_92:
  v15 = (uint64_t *)v45[0];
  ++*(_QWORD *)(a1 + 24);
  return v15;
}

void sub_1B03281D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0328204((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B03281EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0328204((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0328204(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  void *v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      *(_QWORD *)(v2 + 40) = &unk_1E60CCA78;
      v3 = *(std::__shared_weak_count **)(v2 + 88);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = *(void **)(v2 + 56);
      if (v6)
      {
        *(_QWORD *)(v2 + 64) = v6;
        operator delete(v6);
      }
      if (*(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1B03282B0(uint64_t a1, unint64_t a2)
{
  void *v4;
  void *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;

  if (!a2)
  {
    v15 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v15)
      operator delete(v15);
    *(_QWORD *)(a1 + 8) = 0;
    return;
  }
  if (a2 >> 61)
    sub_1B02D72AC();
  v4 = operator new(8 * a2);
  v5 = *(void **)a1;
  *(_QWORD *)a1 = v4;
  if (v5)
    operator delete(v5);
  v6 = 0;
  *(_QWORD *)(a1 + 8) = a2;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v6++) = 0;
  while (a2 != v6);
  v8 = a1 + 16;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7)
  {
    v9 = v7[1];
    v10 = a2 - 1;
    if ((a2 & (a2 - 1)) == 0)
    {
      v11 = v9 & v10;
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v11) = v8;
      while (1)
      {
        v12 = (_QWORD *)*v7;
        if (!*v7)
          break;
        v13 = v12[1] & v10;
        if (v13 == v11)
        {
          v7 = (_QWORD *)*v7;
        }
        else if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v13))
        {
          *v7 = *v12;
          v14 = 8 * v13;
          *v12 = **(_QWORD **)(*(_QWORD *)a1 + v14);
          **(_QWORD **)(*(_QWORD *)a1 + v14) = v12;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = v7;
          v7 = v12;
          v11 = v13;
        }
      }
      return;
    }
    if (v9 >= a2)
      v9 %= a2;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = v8;
    v16 = (_QWORD *)*v7;
    if (*v7)
    {
      while (1)
      {
        v18 = v16[1];
        if (v18 >= a2)
          v18 %= a2;
        if (v18 == v9)
          goto LABEL_25;
        if (*(_QWORD *)(*(_QWORD *)a1 + 8 * v18))
        {
          *v7 = *v16;
          v17 = 8 * v18;
          *v16 = **(_QWORD **)(*(_QWORD *)a1 + v17);
          **(_QWORD **)(*(_QWORD *)a1 + v17) = v16;
          v16 = v7;
LABEL_25:
          v7 = v16;
          v16 = (_QWORD *)*v16;
          if (!v16)
            return;
        }
        else
        {
          *(_QWORD *)(*(_QWORD *)a1 + 8 * v18) = v7;
          v7 = v16;
          v16 = (_QWORD *)*v16;
          v9 = v18;
          if (!v16)
            return;
        }
      }
    }
  }
}

void sub_1B032845C(uint64_t a1, uint64_t *a2)
{
  int v3;
  uint64_t *v4;
  uint64_t status_string;
  uint64_t *v6;
  int v7;
  uint64_t *v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  if (os_log_type_enabled(MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR))
  {
    v3 = *((char *)a2 + 23);
    v4 = (uint64_t *)*a2;
    status_string = espresso_get_status_string();
    if (v3 >= 0)
      v6 = a2;
    else
      v6 = v4;
    v7 = 136315394;
    v8 = v6;
    v9 = 2080;
    v10 = status_string;
    _os_log_error_impl(&dword_1B02D2000, MEMORY[0x1E0C81028], OS_LOG_TYPE_ERROR, "Encountered an error during: %s\n -> Espresso Error: %s", (uint8_t *)&v7, 0x16u);
  }
}

void sub_1B0328544(std::runtime_error *a1)
{
  std::runtime_error::~runtime_error(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0328568(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  __int128 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_1B03282B0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(__int128 **)(a2 + 16); i; i = *(__int128 **)i)
    sub_1B03286A8(a1, (uint64_t)(i + 1), i + 1);
  return a1;
}

void sub_1B0328680(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B0328C28(v1);
  _Unwind_Resume(a1);
}

void sub_1B0328694(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B0328C28(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B03286A8(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1B02D6D9C((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_1B0328AF8(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_1B03282B0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1B0328ACC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0328204((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B0328AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0328204((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0328AF8(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_1E60CCA78;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_1B02D7758();
    v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  v11 = *((_QWORD *)a2 + 9);
  __dst[8] = *((_QWORD *)a2 + 8);
  __dst[9] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  __dst[3] = &unk_1E60CC938;
  return __dst;
}

void sub_1B0328BEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0328C28(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  void *v8;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    while (1)
    {
      v3 = (_QWORD *)*v2;
      v2[5] = &unk_1E60CCA78;
      v4 = (std::__shared_weak_count *)v2[11];
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldaxr(p_shared_owners);
        while (__stlxr(v6 - 1, p_shared_owners));
        if (!v6)
          break;
      }
      v7 = (void *)v2[7];
      if (v7)
        goto LABEL_9;
LABEL_10:
      if (*((char *)v2 + 39) < 0)
        operator delete((void *)v2[2]);
      operator delete(v2);
      v2 = v3;
      if (!v3)
        goto LABEL_14;
    }
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
    v7 = (void *)v2[7];
    if (!v7)
      goto LABEL_10;
LABEL_9:
    v2[8] = v7;
    operator delete(v7);
    goto LABEL_10;
  }
LABEL_14:
  v8 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v8)
    operator delete(v8);
  return a1;
}

uint64_t *sub_1B0328D00(_QWORD *a1, uint64_t a2)
{
  _BYTE *v2;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t *result;
  uint64_t **v12;
  uint64_t *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;

  v2 = (_BYTE *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v5 = v4;
  }
  v6 = sub_1B02D6D9C((uint64_t)&v25, (uint64_t *)a2, v5);
  v7 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v7)
    return 0;
  v8 = v6;
  v9 = (uint8x8_t)vcnt_s8(v7);
  v9.i16[0] = vaddlv_u8(v9);
  if (v9.u32[0] > 1uLL)
  {
    v10 = v6;
    if (v6 >= *(_QWORD *)&v7)
      v10 = v6 % *(_QWORD *)&v7;
  }
  else
  {
    v10 = (*(_QWORD *)&v7 - 1) & v6;
  }
  v12 = *(uint64_t ***)(*a1 + 8 * v10);
  if (v12)
  {
    v13 = *v12;
    if (*v12)
    {
      v14 = v2[23];
      if (v14 >= 0)
        v15 = v2[23];
      else
        v15 = *((_QWORD *)v2 + 1);
      if (v14 < 0)
        v2 = *(_BYTE **)v2;
      if (v9.u32[0] < 2uLL)
      {
        v16 = *(_QWORD *)&v7 - 1;
        while (1)
        {
          v21 = v13[1];
          if (v21 == v8)
          {
            v22 = *((unsigned __int8 *)v13 + 39);
            if ((v22 & 0x80u) == 0)
              v23 = *((unsigned __int8 *)v13 + 39);
            else
              v23 = v13[3];
            if (v23 == v15)
            {
              if ((v22 & 0x80) != 0)
              {
                if (!memcmp((const void *)v13[2], v2, v13[3]))
                  return v13;
              }
              else
              {
                if (!*((_BYTE *)v13 + 39))
                  return v13;
                v24 = 0;
                while (*((unsigned __int8 *)v13 + v24 + 16) == v2[v24])
                {
                  if (v22 == ++v24)
                    return v13;
                }
              }
            }
          }
          else if ((v21 & v16) != v10)
          {
            return 0;
          }
          result = 0;
          v13 = (uint64_t *)*v13;
          if (!v13)
            return result;
        }
      }
      while (1)
      {
        v17 = v13[1];
        if (v17 == v8)
        {
          v18 = *((unsigned __int8 *)v13 + 39);
          if ((v18 & 0x80u) == 0)
            v19 = *((unsigned __int8 *)v13 + 39);
          else
            v19 = v13[3];
          if (v19 == v15)
          {
            if ((v18 & 0x80) != 0)
            {
              if (!memcmp((const void *)v13[2], v2, v13[3]))
                return v13;
            }
            else
            {
              if (!*((_BYTE *)v13 + 39))
                return v13;
              v20 = 0;
              while (*((unsigned __int8 *)v13 + v20 + 16) == v2[v20])
              {
                if (v18 == ++v20)
                  return v13;
              }
            }
          }
        }
        else
        {
          if (v17 >= *(_QWORD *)&v7)
            v17 %= *(_QWORD *)&v7;
          if (v17 != v10)
            return 0;
        }
        result = 0;
        v13 = (uint64_t *)*v13;
        if (!v13)
          return result;
      }
    }
  }
  return 0;
}

uint64_t sub_1B0328F2C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E60CCFA8;
  sub_1B03291F4(*(_QWORD **)(a1 + 16));
  return a1;
}

uint64_t sub_1B0328F60(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 40))
  {
    v2 = *(_QWORD *)(a1 + 16);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 24);
      v4 = *(void **)(a1 + 16);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_1B0328FD8(uint64_t result, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;

  v2 = *(_QWORD **)(result + 8);
  if (v2 != (_QWORD *)(result + 16))
  {
    v3 = *a2;
    do
    {
      *(_DWORD *)(v3 + 4 * *((unsigned int *)v2 + 7)) = -8388609;
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != (_QWORD *)(result + 16));
  }
  return result;
}

void sub_1B032903C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E60CCFA8;
  sub_1B03291F4(*(_QWORD **)(a1 + 16));
  JUMPOUT(0x1B5E07CD8);
}

uint64_t *sub_1B0329080(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  BOOL v11;
  unsigned int v12;
  uint64_t **v13;
  uint64_t **v14;
  unsigned int v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  _QWORD *v20;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = result;
    v6 = result + 1;
    do
    {
      v7 = (uint64_t *)v5[1];
      v8 = v6;
      if ((uint64_t *)*v5 == v6)
        goto LABEL_10;
      v9 = v5[1];
      v10 = v6;
      if (v7)
      {
        do
        {
          v8 = (uint64_t *)v9;
          v9 = *(_QWORD *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          v8 = (uint64_t *)v10[2];
          v11 = *v8 == (_QWORD)v10;
          v10 = v8;
        }
        while (v11);
      }
      v12 = *((_DWORD *)v4 + 7);
      if (*((_DWORD *)v8 + 7) < v12)
      {
LABEL_10:
        if (v7)
          v13 = (uint64_t **)v8;
        else
          v13 = (uint64_t **)v6;
        if (v7)
          v14 = (uint64_t **)(v8 + 1);
        else
          v14 = (uint64_t **)v6;
        if (*v14)
          goto LABEL_29;
      }
      else
      {
        v14 = (uint64_t **)v6;
        v13 = (uint64_t **)v6;
        if (v7)
        {
          while (1)
          {
            while (1)
            {
              v13 = (uint64_t **)v7;
              v15 = *((_DWORD *)v7 + 7);
              if (v15 <= v12)
                break;
              v7 = *v13;
              v14 = v13;
              if (!*v13)
                goto LABEL_25;
            }
            if (v15 >= v12)
              goto LABEL_29;
            v7 = v13[1];
            if (!v7)
            {
              v14 = v13 + 1;
              break;
            }
          }
        }
      }
LABEL_25:
      v16 = operator new(0x20uLL);
      v16[7] = *((_DWORD *)v4 + 7);
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = v13;
      *v14 = (uint64_t *)v16;
      v17 = *(_QWORD *)*v5;
      if (v17)
      {
        *v5 = v17;
        v18 = *v14;
      }
      else
      {
        v18 = (uint64_t *)v16;
      }
      result = sub_1B02D8180((uint64_t *)v5[1], v18);
      ++v5[2];
LABEL_29:
      v19 = (_QWORD *)v4[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = (_QWORD *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (_QWORD *)v4[2];
          v11 = *v20 == (_QWORD)v4;
          v4 = v20;
        }
        while (!v11);
      }
      v4 = v20;
    }
    while (v20 != a3);
  }
  return result;
}

void sub_1B03291F4(_QWORD *a1)
{
  if (a1)
  {
    sub_1B03291F4(*a1);
    sub_1B03291F4(a1[1]);
    operator delete(a1);
  }
}

uint64_t sub_1B032922C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(std::__shared_weak_count **)(a1 + 88);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)(a1 + 48) = off_1E60CCFA8;
  sub_1B03291F4(*(_QWORD **)(a1 + 64));
  if (*(_BYTE *)(a1 + 40))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 24);
      v7 = *(void **)(a1 + 16);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0)
            operator delete(*(void **)(v6 - 24));
          v6 -= 24;
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v5;
      operator delete(v7);
    }
  }
  return a1;
}

uint64_t sub_1B03292F0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)(a1 + 64) = off_1E60CCFA8;
  sub_1B03291F4(*(_QWORD **)(a1 + 80));
  if (*(_BYTE *)(a1 + 40))
  {
    v5 = *(_QWORD *)(a1 + 16);
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 24);
      v7 = *(void **)(a1 + 16);
      if (v6 != v5)
      {
        do
        {
          if (*(char *)(v6 - 1) < 0)
            operator delete(*(void **)(v6 - 24));
          v6 -= 24;
        }
        while (v6 != v5);
        v7 = *(void **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 24) = v5;
      operator delete(v7);
    }
  }
  return a1;
}

void **sub_1B03293B4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          *((_QWORD *)v3 - 2) = v5;
          operator delete(v5);
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B0329424(uint64_t a1)
{
  void **v2;
  void *v3;
  void **v5;

  v2 = *(void ***)(a1 + 16);
  if (v2)
  {
    do
    {
      v5 = (void **)*v2;
      if (*((char *)v2 + 39) < 0)
        operator delete(v2[2]);
      operator delete(v2);
      v2 = v5;
    }
    while (v5);
  }
  v3 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v3)
    operator delete(v3);
  return a1;
}

uint64_t *sub_1B032948C(uint64_t a1, uint64_t a2, __int128 *a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  float v26;
  float v27;
  _QWORD *v28;
  _QWORD *v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD v41[2];
  char v42;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1B02D6D9C((uint64_t)v41, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = operator new(0x60uLL);
  v41[0] = v25;
  v41[1] = a1 + 16;
  v42 = 0;
  *v25 = 0;
  v25[1] = v10;
  sub_1B03298DC(v25 + 2, a3);
  v42 = 1;
  v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v27 = *(float *)(a1 + 32);
  if (!v11 || (float)(v27 * (float)v11) < v26)
  {
    v30 = 1;
    if (v11 >= 3)
      v30 = (v11 & (v11 - 1)) != 0;
    v31 = v30 | (2 * v11);
    v32 = vcvtps_u32_f32(v26 / v27);
    if (v31 <= v32)
      prime = v32;
    else
      prime = v31;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v34 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v34)
      goto LABEL_65;
    if (prime < *(_QWORD *)&v34)
    {
      v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
      {
        v35 = std::__next_prime(v35);
      }
      else
      {
        v37 = 1 << -(char)__clz(v35 - 1);
        if (v35 >= 2)
          v35 = v37;
      }
      if (prime <= v35)
        prime = v35;
      if (prime < *(_QWORD *)&v34)
LABEL_65:
        sub_1B03282B0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v38 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
      else
      {
        v3 = v10;
        v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v29 = (_QWORD *)v41[0];
        if (v28)
          goto LABEL_54;
      }
    }
    else
    {
      v3 = v38 & v10;
      v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
      v29 = (_QWORD *)v41[0];
      if (v28)
        goto LABEL_54;
    }
LABEL_78:
    *v29 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v41[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v41[0])
    {
      v39 = *(_QWORD *)(*(_QWORD *)v41[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v39 >= v11)
          v39 %= v11;
      }
      else
      {
        v39 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v39) = v41[0];
    }
    goto LABEL_89;
  }
  v28 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v29 = (_QWORD *)v41[0];
  if (!v28)
    goto LABEL_78;
LABEL_54:
  *v29 = *v28;
  *v28 = v41[0];
LABEL_89:
  v14 = (uint64_t *)v41[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1B03298B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0328204((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B03298C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0328204((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B03298DC(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  v5 = *((_DWORD *)a2 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_1E60CCA78;
  *((_DWORD *)__dst + 8) = v5;
  __dst[6] = 0;
  __dst[7] = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 5);
  v6 = (_BYTE *)*((_QWORD *)a2 + 6);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_1B02D7758();
    v9 = (char *)operator new(v6 - v7);
    __dst[5] = v9;
    __dst[6] = v9;
    v10 = &v9[8 * (v8 >> 3)];
    __dst[7] = v10;
    memcpy(v9, v7, v8);
    __dst[6] = v10;
  }
  v11 = *((_QWORD *)a2 + 9);
  __dst[8] = *((_QWORD *)a2 + 8);
  __dst[9] = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  return __dst;
}

void sub_1B03299C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B03299FC(uint64_t *a1, int a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  char v45;
  char *v46;
  char *v47;
  char *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  void **v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  char *v60;
  char *v61;
  uint64_t *v62;
  unsigned __int8 v63;
  _QWORD *v64;
  void *__p;
  char *v66;
  char *v67;

  v3 = a1;
  __p = 0;
  v66 = 0;
  v67 = 0;
  if (a2 == 1)
  {
    sub_1B032A004((uint64_t)&__p, *(_QWORD *)(*a1 + 16));
    v7 = *v3 + 8;
    v8 = *(char **)*v3;
    if (v8 != (char *)v7)
    {
      v9 = v66;
      do
      {
        if (v9 >= v67)
        {
          v9 = sub_1B032A150(&__p, v8 + 56);
        }
        else
        {
          *v9 = v8[56];
          *((_QWORD *)v9 + 1) = *((_QWORD *)v8 + 8);
          v8[56] = 0;
          *((_QWORD *)v8 + 8) = 0;
          v9 += 16;
        }
        v66 = v9;
        v10 = (char *)*((_QWORD *)v8 + 1);
        if (v10)
        {
          do
          {
            v11 = v10;
            v10 = *(char **)v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            v11 = (char *)*((_QWORD *)v8 + 2);
            v12 = *(_QWORD *)v11 == (_QWORD)v8;
            v8 = v11;
          }
          while (!v12);
        }
        v8 = v11;
      }
      while (v11 != (char *)v7);
    }
  }
  else if (a2 == 2)
  {
    sub_1B032A004((uint64_t)&__p, (uint64_t)(*(_QWORD *)(*a1 + 8) - *(_QWORD *)*a1) >> 4);
    v4 = *(_QWORD *)*v3;
    v5 = *(_QWORD *)(*v3 + 8);
    if (v4 != v5)
    {
      v6 = v66;
      do
      {
        if (v6 < v67)
        {
          *v6 = *(_BYTE *)v4;
          *((_QWORD *)v6 + 1) = *(_QWORD *)(v4 + 8);
          *(_BYTE *)v4 = 0;
          *(_QWORD *)(v4 + 8) = 0;
          v6 += 16;
        }
        else
        {
          v6 = sub_1B032A150(&__p, (char *)v4);
        }
        v66 = v6;
        v4 += 16;
      }
      while (v4 != v5);
    }
  }
  v14 = (char *)__p;
  v13 = v66;
  if (__p != v66)
  {
    v62 = v3;
    while (1)
    {
      v63 = *(v13 - 16);
      v64 = (_QWORD *)*((_QWORD *)v13 - 1);
      *(v13 - 16) = 0;
      *((_QWORD *)v13 - 1) = 0;
      v15 = v66 - 16;
      sub_1B03299FC(v66 - 8, *(v66 - 16));
      v66 = v15;
      if (v63 == 1)
        break;
      if (v63 == 2)
      {
        v16 = (_QWORD *)*v64;
        v17 = v64 + 1;
        v18 = (_QWORD *)v64[1];
        if ((_QWORD *)*v64 != v18)
        {
          do
          {
            if (v15 < v67)
            {
              *v15 = *(_BYTE *)v16;
              *((_QWORD *)v15 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v15 += 16;
            }
            else
            {
              v19 = (char *)__p;
              v20 = (v15 - (_BYTE *)__p) >> 4;
              v21 = v20 + 1;
              if ((unint64_t)(v20 + 1) >> 60)
                goto LABEL_105;
              v22 = v67 - (_BYTE *)__p;
              if ((v67 - (_BYTE *)__p) >> 3 > v21)
                v21 = v22 >> 3;
              if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
                v23 = 0xFFFFFFFFFFFFFFFLL;
              else
                v23 = v21;
              if (v23 >> 60)
                goto LABEL_106;
              v24 = (char *)operator new(16 * v23);
              v25 = &v24[16 * v20];
              *v25 = *(_BYTE *)v16;
              *((_QWORD *)v25 + 1) = v16[1];
              *(_BYTE *)v16 = 0;
              v16[1] = 0;
              v26 = v66;
              v27 = v25;
              if (v66 != v19)
              {
                do
                {
                  v28 = *(v26 - 16);
                  v26 -= 16;
                  *(v27 - 16) = v28;
                  v27 -= 16;
                  *((_QWORD *)v27 + 1) = *((_QWORD *)v26 + 1);
                  *v26 = 0;
                  *((_QWORD *)v26 + 1) = 0;
                }
                while (v26 != v19);
                v19 = v66;
              }
              v29 = &v24[16 * v23];
              v30 = (char *)__p;
              v15 = v25 + 16;
              __p = v27;
              v66 = v25 + 16;
              v67 = v29;
              if (v19 != v30)
              {
                v31 = v19 - 8;
                do
                {
                  v32 = v31 - 8;
                  sub_1B03299FC(v31, *(v31 - 8));
                  v31 -= 16;
                }
                while (v32 != v30);
              }
              if (v30)
                operator delete(v30);
            }
            v66 = v15;
            v16 += 2;
          }
          while (v16 != v18);
          v16 = (_QWORD *)*v64;
          v17 = v64 + 1;
          v50 = v64[1];
          if (v50 == *v64)
          {
            *v17 = v50;
            goto LABEL_24;
          }
          v51 = v50 - 8;
          do
          {
            v52 = (_QWORD *)(v51 - 8);
            sub_1B03299FC(v51, *(unsigned __int8 *)(v51 - 8));
            v51 -= 16;
          }
          while (v52 != v16);
        }
        *v17 = v16;
      }
LABEL_24:
      sub_1B03299FC(&v64, v63);
      v14 = (char *)__p;
      v13 = v66;
      if (__p == v66)
      {
        v3 = v62;
        goto LABEL_83;
      }
    }
    v33 = (uint64_t)v64;
    v34 = v64 + 1;
    v35 = (_QWORD *)*v64;
    if ((_QWORD *)*v64 == v64 + 1)
    {
LABEL_80:
      sub_1B032A278(v33, *(char **)(v33 + 8));
      *(_QWORD *)v33 = v33 + 8;
      *(_QWORD *)(v33 + 16) = 0;
      *(_QWORD *)(v33 + 8) = 0;
      goto LABEL_24;
    }
    while (1)
    {
      if (v15 < v67)
      {
        *v15 = *((_BYTE *)v35 + 56);
        *((_QWORD *)v15 + 1) = v35[8];
        *((_BYTE *)v35 + 56) = 0;
        v35[8] = 0;
        v15 += 16;
        v66 = v15;
        v36 = (_QWORD *)v35[1];
        if (v36)
          goto LABEL_70;
        goto LABEL_72;
      }
      v37 = (char *)__p;
      v38 = (v15 - (_BYTE *)__p) >> 4;
      v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 60)
LABEL_105:
        sub_1B032A0E8();
      v40 = v67 - (_BYTE *)__p;
      if ((v67 - (_BYTE *)__p) >> 3 > v39)
        v39 = v40 >> 3;
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
        v41 = 0xFFFFFFFFFFFFFFFLL;
      else
        v41 = v39;
      if (v41 >> 60)
LABEL_106:
        sub_1B02D72AC();
      v42 = (char *)operator new(16 * v41);
      v43 = &v42[16 * v38];
      *v43 = *((_BYTE *)v35 + 56);
      *((_QWORD *)v43 + 1) = v35[8];
      *((_BYTE *)v35 + 56) = 0;
      v35[8] = 0;
      v44 = v43 + 16;
      if (v15 == v37)
      {
        __p = v43;
        v66 = v43 + 16;
        v67 = &v42[16 * v41];
      }
      else
      {
        do
        {
          v45 = *(v15 - 16);
          v15 -= 16;
          *(v43 - 16) = v45;
          v43 -= 16;
          *((_QWORD *)v43 + 1) = *((_QWORD *)v15 + 1);
          *v15 = 0;
          *((_QWORD *)v15 + 1) = 0;
        }
        while (v15 != v37);
        v15 = (char *)__p;
        v46 = v66;
        __p = v43;
        v66 = v44;
        v67 = &v42[16 * v41];
        if (v46 != v15)
        {
          v47 = v46 - 8;
          do
          {
            v48 = v47 - 8;
            sub_1B03299FC(v47, *(v47 - 8));
            v47 -= 16;
          }
          while (v48 != v15);
        }
        if (!v15)
        {
          v15 = v44;
          v66 = v44;
          v36 = (_QWORD *)v35[1];
          if (v36)
            goto LABEL_70;
          goto LABEL_72;
        }
      }
      operator delete(v15);
      v15 = v44;
      v66 = v44;
      v36 = (_QWORD *)v35[1];
      if (v36)
      {
        do
        {
LABEL_70:
          v49 = v36;
          v36 = (_QWORD *)*v36;
        }
        while (v36);
        goto LABEL_49;
      }
      do
      {
LABEL_72:
        v49 = (_QWORD *)v35[2];
        v12 = *v49 == (_QWORD)v35;
        v35 = v49;
      }
      while (!v12);
LABEL_49:
      v35 = v49;
      if (v49 == v34)
      {
        v33 = (uint64_t)v64;
        goto LABEL_80;
      }
    }
  }
LABEL_83:
  switch(a2)
  {
    case 3:
      v53 = (void **)*v3;
      if (*(char *)(*v3 + 23) < 0)
      {
        v56 = *v53;
LABEL_95:
        operator delete(v56);
LABEL_96:
        v53 = (void **)*v3;
      }
      break;
    case 2:
      v53 = (void **)*v3;
      v54 = *(void **)*v3;
      if (v54)
      {
        v55 = v53[1];
        v56 = *(void **)*v3;
        if (v55 != v54)
        {
          v57 = (uint64_t)v55 - 8;
          do
          {
            v58 = (void *)(v57 - 8);
            sub_1B03299FC(v57, *(unsigned __int8 *)(v57 - 8));
            v57 -= 16;
          }
          while (v58 != v54);
          v56 = *v53;
        }
        v53[1] = v54;
        goto LABEL_95;
      }
      break;
    case 1:
      sub_1B032A278(*v3, *(char **)(*v3 + 8));
      goto LABEL_96;
    default:
      goto LABEL_98;
  }
  operator delete(v53);
  v14 = (char *)__p;
LABEL_98:
  if (v14)
  {
    v59 = v14;
    if (v66 != v14)
    {
      v60 = v66 - 8;
      do
      {
        v61 = v60 - 8;
        sub_1B03299FC(v60, *(v60 - 8));
        v60 -= 16;
      }
      while (v61 != v14);
      v59 = __p;
    }
    v66 = v14;
    operator delete(v59);
  }
}

void sub_1B032A004(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char v10;
  char *v11;
  char *v12;
  char *v13;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
  {
    if (a2 >> 60)
      sub_1B032A0E8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 16 * a2;
    v6 = (char *)operator new(16 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *(_QWORD *)a1 = v8;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v2)
LABEL_10:
        operator delete(v2);
    }
    else
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *(v4 - 16);
        v4 -= 16;
        *(v9 - 16) = v10;
        v9 -= 16;
        *((_QWORD *)v9 + 1) = *((_QWORD *)v4 + 1);
        *v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      if (v11 != v2)
      {
        v12 = v11 - 8;
        do
        {
          v13 = v12 - 8;
          sub_1B03299FC(v12, *(v12 - 8));
          v12 -= 16;
        }
        while (v13 != v2);
      }
      if (v2)
        goto LABEL_10;
    }
  }
}

void sub_1B032A0E8()
{
  sub_1B02D7554("vector");
}

uint64_t sub_1B032A0FC(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  uint64_t v4;
  int v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v5 = *(unsigned __int8 *)(i - 16);
    v4 = i - 16;
    *(_QWORD *)(a1 + 16) = v4;
    sub_1B03299FC((uint64_t *)(v4 + 8), v5);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *sub_1B032A150(void **a1, char *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60)
    sub_1B032A0E8();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 3 > v4)
    v4 = v5 >> 3;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFF0;
  v7 = 0xFFFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 60)
    sub_1B02D72AC();
  v9 = 16 * v7;
  v10 = (char *)operator new(16 * v7);
  v11 = &v10[16 * v3];
  v12 = &v10[v9];
  *v11 = *a2;
  *((_QWORD *)v11 + 1) = *((_QWORD *)a2 + 1);
  *a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v13 = v11 + 16;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v11;
    a1[1] = v13;
    a1[2] = v12;
    if (!v15)
      return v13;
    goto LABEL_13;
  }
  do
  {
    v16 = *(v15 - 16);
    v15 -= 16;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = *((_QWORD *)v15 + 1);
    *v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
  }
  while (v15 != v14);
  v15 = (char *)*a1;
  v17 = (char *)a1[1];
  *a1 = v11;
  a1[1] = v13;
  a1[2] = v12;
  if (v17 != v15)
  {
    v18 = v17 - 8;
    do
    {
      v19 = v18 - 8;
      sub_1B03299FC(v18, *(v18 - 8));
      v18 -= 16;
    }
    while (v19 != v15);
  }
  if (v15)
LABEL_13:
    operator delete(v15);
  return v13;
}

void sub_1B032A278(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B032A278(a1, *(_QWORD *)a2);
    sub_1B032A278(a1, *((_QWORD *)a2 + 1));
    sub_1B03299FC(a2 + 64, a2[56]);
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1B032A2E4(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  void *v8[2];
  uint64_t v9;
  void *__p[2];
  uint64_t v11;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v11 = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v4 = (char *)HIBYTE(v11);
  if (v11 >= 0)
    v5 = (char *)__p;
  else
    v5 = (char *)__p[0];
  if (v11 < 0)
    v4 = (char *)__p[1];
  sub_1B02ECD44((std::string *)(a1 + 8), v5, &v4[(_QWORD)v5]);
  *(_QWORD *)a1 = &unk_1E60CCEF8;
  if (SHIBYTE(v11) < 0)
  {
    operator delete(__p[0]);
    *(_QWORD *)a1 = &unk_1E60CCEC0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_11;
  }
  else
  {
    *(_QWORD *)a1 = &unk_1E60CCEC0;
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
    {
LABEL_11:
      *(_OWORD *)v8 = *(_OWORD *)a2;
      v9 = *(_QWORD *)(a2 + 16);
      goto LABEL_14;
    }
  }
  sub_1B02EB0A8(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_14:
  v6 = operator new();
  sub_1B032A4B4(v6);
  *(_QWORD *)(a1 + 32) = v6;
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  return a1;
}

void sub_1B032A43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  void **v22;

  if (*(char *)(v21 + 31) < 0)
    operator delete(*v22);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B032A4B4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = off_1E60CD368;
  v2 = a1 + 24;
  *(_QWORD *)(a1 + 432) = &unk_1E60CAB08;
  *(_QWORD *)a1 = &unk_1E60CAAE0;
  *(_QWORD *)(a1 + 8) = 0;
  std::ios_base::init((std::ios_base *)(a1 + 432), (void *)(a1 + 24));
  *(_QWORD *)(a1 + 568) = 0;
  *(_DWORD *)(a1 + 576) = -1;
  *(_QWORD *)a1 = &off_1E60CD340;
  *(_QWORD *)(a1 + 432) = off_1E60CD390;
  *(_QWORD *)(a1 + 16) = off_1E60CD368;
  MEMORY[0x1B5E07A80](v2);
  if (!std::filebuf::open())
    std::ios_base::clear((std::ios_base *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24)), *(_DWORD *)(a1 + *(_QWORD *)(*(_QWORD *)a1 - 24) + 32) | 4);
  return a1;
}

void sub_1B032A590(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B032A5DC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E60CD340;
  v2 = a1 + 54;
  a1[54] = off_1E60CD390;
  a1[2] = off_1E60CD368;
  MEMORY[0x1B5E07A8C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](v2);
  return a1;
}

void sub_1B032A644(_QWORD *a1)
{
  _QWORD *v1;

  *a1 = &off_1E60CD340;
  v1 = a1 + 54;
  a1[54] = off_1E60CD390;
  a1[2] = off_1E60CD368;
  MEMORY[0x1B5E07A8C](a1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](v1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B032A6BC(_QWORD *a1)
{
  a1[52] = off_1E60CD390;
  *a1 = off_1E60CD368;
  *(a1 - 2) = &off_1E60CD340;
  MEMORY[0x1B5E07A8C](a1 + 1);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1B5E07C60);
}

void sub_1B032A718(_QWORD *a1)
{
  _QWORD *v1;

  v1 = a1 + 52;
  a1[52] = off_1E60CD390;
  *a1 = off_1E60CD368;
  *(a1 - 2) = &off_1E60CD340;
  MEMORY[0x1B5E07A8C](a1 + 1);
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](v1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B032A78C(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &off_1E60CD340;
  v1[54] = off_1E60CD390;
  v1[2] = off_1E60CD368;
  MEMORY[0x1B5E07A8C](v1 + 3);
  std::iostream::~basic_iostream();
  JUMPOUT(0x1B5E07C60);
}

void sub_1B032A7F4(_QWORD *a1)
{
  _QWORD *v1;

  v1 = (_QWORD *)((char *)a1 + *(_QWORD *)(*a1 - 24));
  *v1 = &off_1E60CD340;
  v1[54] = off_1E60CD390;
  v1[2] = off_1E60CD368;
  MEMORY[0x1B5E07A8C](v1 + 3);
  std::iostream::~basic_iostream();
  MEMORY[0x1B5E07C60](v1 + 54);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B032A874(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B032A8A8(int a1@<W1>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *p_p;
  std::string::size_type size;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::operator+<char>();
  v4 = std::string::append(&v12, ".");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, a1);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v8 = std::string::append(&v13, (const std::string::value_type *)p_p, size);
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = std::string::append(&v14, "] ");
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void sub_1B032A9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 41) < 0)
  {
    operator delete(*(void **)(v26 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

void sub_1B032AA8C(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

const char *sub_1B032AAD4(const std::runtime_error *a1)
{
  return std::runtime_error::what(a1 + 1);
}

void sub_1B032AADC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B032AB10(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B032AB58(uint64_t a1, int a2, unsigned __int8 *a3)
{
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *i;
  unsigned int v12;
  _QWORD *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  unsigned __int8 *j;
  unsigned int v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  void *v33[2];
  char v34;
  void *__p[2];
  char v36;
  __int128 v37;
  uint64_t v38;
  std::string v39;
  char __str[8];
  char v41;
  std::runtime_error v42;
  _BYTE v43[24];
  _BYTE *v44;
  unsigned __int8 *v45;
  __int128 v46;
  __int128 v47;
  char v48;
  char v49;
  void *v50;
  char v51;
  _BYTE v52[24];
  _BYTE *v53;
  unsigned __int8 v54;
  uint64_t v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a1 + 24);
  if (!v6)
  {
    v7 = *(_BYTE *)(a1 + 176);
    v45 = a3;
    v46 = 0u;
    v47 = 0u;
    v48 = 0;
    v49 = v7;
    sub_1B032E788(a1, (uint64_t)&v45);
    if (a2)
    {
      v8 = sub_1B032B644(a1 + 40);
      *(_DWORD *)(a1 + 32) = v8;
      if (v8 != 15)
      {
        v9 = *(_QWORD *)(a1 + 64);
        memset(&v39, 0, sizeof(v39));
        v10 = *(unsigned __int8 **)(a1 + 88);
        for (i = *(unsigned __int8 **)(a1 + 96); v10 != i; ++v10)
        {
          v12 = *v10;
          if (v12 > 0x1F)
          {
            std::string::push_back(&v39, v12);
          }
          else
          {
            v41 = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v12);
            std::string::append(&v39, __str);
          }
        }
        v37 = *(_OWORD *)(a1 + 64);
        v38 = *(_QWORD *)(a1 + 80);
        v34 = 5;
        strcpy((char *)v33, "value");
        sub_1B032DFC4(a1, 0xFu, (uint64_t)v33, (uint64_t)__p);
        sub_1B032DC78(101, (uint64_t *)&v37, (uint64_t)__p, (uint64_t)__str);
        sub_1B032F2AC((uint64_t)&v45, v9, (uint64_t)&v39, (uint64_t)__str);
        *(_QWORD *)__str = &unk_1E60CD110;
        std::runtime_error::~runtime_error(&v42);
        std::exception::~exception((std::exception *)__str);
        if (v36 < 0)
        {
          operator delete(__p[0]);
          if ((v34 & 0x80000000) == 0)
          {
LABEL_33:
            if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_34;
LABEL_56:
            operator delete(v39.__r_.__value_.__l.__data_);
            if (!v48)
              goto LABEL_51;
LABEL_35:
            v23 = *a3;
            *a3 = 8;
            v24 = *((_QWORD *)a3 + 1);
            *((_QWORD *)a3 + 1) = 0;
            v28 = v24;
            sub_1B03299FC(&v28, v23);
            goto LABEL_51;
          }
        }
        else if ((v34 & 0x80000000) == 0)
        {
          goto LABEL_33;
        }
        operator delete(v33[0]);
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          goto LABEL_56;
      }
    }
LABEL_34:
    if (!v48)
      goto LABEL_51;
    goto LABEL_35;
  }
  if (v6 == a1)
  {
    v44 = v43;
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 24))(a1, v43);
  }
  else
  {
    v44 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  }
  sub_1B032F3EC((uint64_t)&v45, (uint64_t)a3, (uint64_t)v43, *(_BYTE *)(a1 + 176));
  v13 = v44;
  if (v44 == v43)
  {
    v14 = 4;
    v13 = v43;
    goto LABEL_17;
  }
  if (v44)
  {
    v14 = 5;
LABEL_17:
    (*(void (**)(void))(*v13 + 8 * v14))();
  }
  sub_1B032CF3C(a1, &v45);
  if (a2)
  {
    v15 = sub_1B032B644(a1 + 40);
    *(_DWORD *)(a1 + 32) = v15;
    if (v15 != 15)
    {
      v16 = *(_QWORD *)(a1 + 64);
      memset(&v39, 0, sizeof(v39));
      v17 = *(unsigned __int8 **)(a1 + 88);
      for (j = *(unsigned __int8 **)(a1 + 96); v17 != j; ++v17)
      {
        v19 = *v17;
        if (v19 > 0x1F)
        {
          std::string::push_back(&v39, v19);
        }
        else
        {
          v41 = 0;
          *(_QWORD *)__str = 0;
          snprintf(__str, 9uLL, "<U+%.4X>", v19);
          std::string::append(&v39, __str);
        }
      }
      v37 = *(_OWORD *)(a1 + 64);
      v38 = *(_QWORD *)(a1 + 80);
      v34 = 5;
      strcpy((char *)v33, "value");
      sub_1B032DFC4(a1, 0xFu, (uint64_t)v33, (uint64_t)__p);
      sub_1B032DC78(101, (uint64_t *)&v37, (uint64_t)__p, (uint64_t)__str);
      sub_1B032DA54((uint64_t)&v45, v16, (uint64_t)&v39, (uint64_t)__str);
      *(_QWORD *)__str = &unk_1E60CD110;
      std::runtime_error::~runtime_error(&v42);
      std::exception::~exception((std::exception *)__str);
      if (v36 < 0)
      {
        operator delete(__p[0]);
        if ((v34 & 0x80000000) == 0)
        {
LABEL_28:
          if ((SHIBYTE(v39.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_29;
LABEL_38:
          operator delete(v39.__r_.__value_.__l.__data_);
          if (v51)
            goto LABEL_30;
          goto LABEL_39;
        }
      }
      else if ((v34 & 0x80000000) == 0)
      {
        goto LABEL_28;
      }
      operator delete(v33[0]);
      if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_38;
    }
  }
LABEL_29:
  if (v51)
  {
LABEL_30:
    v20 = &v32;
    v21 = *a3;
    *a3 = 8;
    v31 = v21;
    v22 = *((_QWORD *)a3 + 1);
    *((_QWORD *)a3 + 1) = 0;
    v32 = v22;
    goto LABEL_41;
  }
LABEL_39:
  if (*a3 != 8)
    goto LABEL_42;
  v20 = &v30;
  *a3 = 0;
  v29 = 8;
  v25 = *((_QWORD *)a3 + 1);
  *((_QWORD *)a3 + 1) = 0;
  v30 = v25;
  v21 = 8;
LABEL_41:
  sub_1B03299FC(v20, v21);
LABEL_42:
  sub_1B03299FC(v55, v54);
  v26 = v53;
  if (v53 == v52)
  {
    v27 = 4;
    v26 = v52;
    goto LABEL_46;
  }
  if (v53)
  {
    v27 = 5;
LABEL_46:
    (*(void (**)(void))(*v26 + 8 * v27))();
  }
  if (v50)
    operator delete(v50);
  if (*((_QWORD *)&v47 + 1))
    operator delete(*((void **)&v47 + 1));
LABEL_51:
  if ((_QWORD)v46)
  {
    *((_QWORD *)&v46 + 1) = v46;
    operator delete((void *)v46);
  }
}

void sub_1B032B050(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,std::exception a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47)
{
  std::runtime_error *v47;
  uint64_t v48;
  void *v50;

  a39.__vftable = (std::exception_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(v47 + 1);
  std::exception::~exception(&a39);
  if (a28 < 0)
  {
    operator delete(__p);
    if ((a22 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a38 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a22 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a17);
  if ((a38 & 0x80000000) == 0)
  {
LABEL_4:
    v50 = *(void **)(v48 - 216);
    if (v50)
    {
LABEL_10:
      *(_QWORD *)(v48 - 208) = v50;
      operator delete(v50);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  operator delete(a33);
  v50 = *(void **)(v48 - 216);
  if (v50)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_1B032B210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
  {
    operator delete(a27);
    sub_1B032E704(v32 - 224);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x1B032B118);
}

void sub_1B032B220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    JUMPOUT(0x1B032B22CLL);
  JUMPOUT(0x1B032B118);
}

uint64_t sub_1B032B244(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  if (*(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    v2 = *(void **)(a1 + 88);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 88);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 96) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
    goto LABEL_8;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
  {
LABEL_8:
    v6 = *(_QWORD **)(a1 + 24);
    if (v6 != (_QWORD *)a1)
      goto LABEL_9;
LABEL_14:
    v7 = 4;
    v6 = (_QWORD *)a1;
    goto LABEL_15;
  }
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  v6 = *(_QWORD **)(a1 + 24);
  if (v6 == (_QWORD *)a1)
    goto LABEL_14;
LABEL_9:
  if (v6)
  {
    v7 = 5;
LABEL_15:
    (*(void (**)(void))(*v6 + 8 * v7))();
  }
  return a1;
}

void sub_1B032B300(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD7A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B032B314(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD7A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B032B348(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

uint64_t sub_1B032B358(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t result;
  std::ios_base *v5;

  v2 = *(_QWORD **)(a1 + 16);
  v3 = (unsigned __int8 *)v2[3];
  if (v3 == (unsigned __int8 *)v2[4])
  {
    result = (*(uint64_t (**)(_QWORD *))(*v2 + 80))(v2);
    if ((_DWORD)result == -1)
    {
      v5 = (std::ios_base *)(*(_QWORD *)(a1 + 8) + *(_QWORD *)(**(_QWORD **)(a1 + 8) - 24));
      std::ios_base::clear(v5, v5->__rdstate_ | 2);
      return 0xFFFFFFFFLL;
    }
  }
  else
  {
    v2[3] = v3 + 1;
    return *v3;
  }
  return result;
}

_QWORD *sub_1B032B3D0(_QWORD *a1)
{
  std::ios_base *v2;

  *a1 = &unk_1E60CD0E8;
  v2 = (std::ios_base *)(a1[1] + *(_QWORD *)(*(_QWORD *)a1[1] - 24));
  std::ios_base::clear(v2, v2->__rdstate_ & 2);
  return a1;
}

void sub_1B032B420(_QWORD *a1)
{
  std::ios_base *v1;

  *a1 = &unk_1E60CD0E8;
  v1 = (std::ios_base *)(a1[1] + *(_QWORD *)(*(_QWORD *)a1[1] - 24));
  std::ios_base::clear(v1, v1->__rdstate_ & 2);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B032B480(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  lconv *v8;
  char v9;

  v7 = *(_QWORD *)(a3 + 24);
  if (v7)
  {
    if (v7 == a3)
    {
      *(_QWORD *)(a1 + 24) = a1;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), a1);
    }
    else
    {
      *(_QWORD *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 24) = 0;
  }
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 32) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_BYTE *)(a1 + 60) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = "";
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  v8 = localeconv();
  if (v8->decimal_point)
    v9 = *v8->decimal_point;
  else
    v9 = 46;
  *(_BYTE *)(a1 + 168) = v9;
  *(_BYTE *)(a1 + 176) = a4;
  *(_DWORD *)(a1 + 32) = sub_1B032B644(a1 + 40);
  return a1;
}

void sub_1B032B568(_Unwind_Exception *a1)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  sub_1B032B5B0(v2);
  v4 = (_QWORD *)v1[3];
  if (v4 == v1)
  {
    v5 = 4;
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
    v1 = (_QWORD *)v1[3];
  }
  (*(void (**)(_QWORD *))(*v1 + 8 * v5))(v1);
LABEL_6:
  _Unwind_Resume(a1);
}

uint64_t sub_1B032B5B0(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  if (*(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    v2 = *(void **)(a1 + 48);
    if (!v2)
      goto LABEL_4;
    goto LABEL_3;
  }
  v2 = *(void **)(a1 + 48);
  if (v2)
  {
LABEL_3:
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
LABEL_4:
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v3)
    return a1;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return a1;
  ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
  std::__shared_weak_count::__release_weak(v3);
  return a1;
}

uint64_t sub_1B032B644(uint64_t a1)
{
  uint64_t result;
  _QWORD *v3;
  uint64_t v4;

  if (!*(_QWORD *)(a1 + 24))
  {
    if (sub_1B032B8A0(a1) == 239)
    {
      if (sub_1B032B8A0(a1) != 187 || sub_1B032B8A0(a1) != 191)
      {
        *(_QWORD *)(a1 + 96) = "invalid BOM; must be 0xEF 0xBB 0xBF if given";
        return 14;
      }
    }
    else
    {
      v3 = (_QWORD *)(a1 + 32);
      v4 = *(_QWORD *)(a1 + 32);
      *(_BYTE *)(a1 + 20) = 1;
      --*(_QWORD *)(a1 + 24);
      if (v4 || (v3 = (_QWORD *)(a1 + 40), (v4 = *(_QWORD *)(a1 + 40)) != 0))
        *v3 = v4 - 1;
      if (*(_DWORD *)(a1 + 16) != -1)
        --*(_QWORD *)(a1 + 56);
    }
  }
  while (2)
  {
    sub_1B032B8A0(a1);
    switch(*(_DWORD *)(a1 + 16))
    {
      case 0xFFFFFFFF:
      case 0:
        return 15;
      case 9:
      case 0xA:
      case 0xD:
      case 0x20:
        continue;
      case 0x22:
        return sub_1B032BADC((_QWORD *)a1);
      case 0x2C:
        return 13;
      case 0x2D:
      case 0x30:
      case 0x31:
      case 0x32:
      case 0x33:
      case 0x34:
      case 0x35:
      case 0x36:
      case 0x37:
      case 0x38:
      case 0x39:
        return sub_1B032C7C4(a1);
      case 0x3A:
        return 12;
      case 0x5B:
        return 8;
      case 0x5D:
        return 10;
      case 0x66:
        if (sub_1B032B8A0(a1) != 97
          || sub_1B032B8A0(a1) != 108
          || sub_1B032B8A0(a1) != 115
          || sub_1B032B8A0(a1) != 101)
        {
          goto LABEL_34;
        }
        result = 2;
        break;
      case 0x6E:
        if (sub_1B032B8A0(a1) != 117
          || sub_1B032B8A0(a1) != 108
          || sub_1B032B8A0(a1) != 108)
        {
          goto LABEL_34;
        }
        result = 3;
        break;
      case 0x74:
        if (sub_1B032B8A0(a1) != 114
          || sub_1B032B8A0(a1) != 117
          || sub_1B032B8A0(a1) != 101)
        {
          goto LABEL_34;
        }
        result = 1;
        break;
      case 0x7B:
        return 9;
      case 0x7D:
        return 11;
      default:
LABEL_34:
        *(_QWORD *)(a1 + 96) = "invalid literal";
        result = 14;
        break;
    }
    return result;
  }
}

uint64_t sub_1B032B8A0(uint64_t a1)
{
  int v2;
  unint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  size_t v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  unint64_t v14;
  int v15;
  uint64_t result;
  __int128 *v17;
  _OWORD *v18;
  unint64_t v19;
  __int128 v20;
  char *v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;

  *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), vdupq_n_s64(1uLL));
  if (*(_BYTE *)(a1 + 20))
  {
    *(_BYTE *)(a1 + 20) = 0;
    v2 = *(_DWORD *)(a1 + 16);
    if (v2 != -1)
      goto LABEL_3;
    return 0xFFFFFFFFLL;
  }
  v15 = (***(uint64_t (****)(void))a1)();
  LOBYTE(v2) = v15;
  *(_DWORD *)(a1 + 16) = v15;
  if (v15 == -1)
    return 0xFFFFFFFFLL;
LABEL_3:
  v4 = *(_BYTE **)(a1 + 56);
  v3 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v4 < v3)
  {
    *v4 = v2;
    v5 = (uint64_t)(v4 + 1);
    goto LABEL_35;
  }
  v6 = *(_BYTE **)(a1 + 48);
  v7 = v4 - v6;
  v8 = v4 - v6 + 1;
  if (v8 < 0)
    sub_1B032A0E8();
  v9 = v3 - (_QWORD)v6;
  if (2 * v9 > v8)
    v8 = 2 * v9;
  if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
    v10 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v10 = v8;
  if (v10)
  {
    v11 = operator new(v10);
    v12 = &v11[v7];
    v13 = &v11[v10];
    v11[v7] = v2;
    v5 = (uint64_t)&v11[v7 + 1];
    if (v4 != v6)
    {
LABEL_13:
      if (v7 < 8 || (unint64_t)(v6 - v11) < 0x20)
        goto LABEL_31;
      if (v7 >= 0x20)
      {
        v14 = v7 & 0xFFFFFFFFFFFFFFE0;
        v17 = (__int128 *)(v4 - 16);
        v18 = &v11[v4 - 16 - v6];
        v19 = v7 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v20 = *v17;
          *(v18 - 1) = *(v17 - 1);
          *v18 = v20;
          v18 -= 2;
          v17 -= 2;
          v19 -= 32;
        }
        while (v19);
        if (v7 == v14)
        {
LABEL_33:
          v4 = *(_BYTE **)(a1 + 48);
          *(_QWORD *)(a1 + 48) = v11;
          *(_QWORD *)(a1 + 56) = v5;
          *(_QWORD *)(a1 + 64) = v13;
          if (!v4)
            goto LABEL_35;
          goto LABEL_34;
        }
        if ((v7 & 0x18) == 0)
        {
          v12 -= v14;
          v4 -= v14;
          goto LABEL_31;
        }
      }
      else
      {
        v14 = 0;
      }
      v12 -= v7 & 0xFFFFFFFFFFFFFFF8;
      v21 = &v4[-v14 - 8];
      v22 = &v11[v21 - v6];
      v23 = v14 - (v7 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v24 = *(_QWORD *)v21;
        v21 -= 8;
        *v22-- = v24;
        v23 += 8;
      }
      while (v23);
      v4 -= v7 & 0xFFFFFFFFFFFFFFF8;
      if (v7 == (v7 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_33;
LABEL_31:
      v25 = v12 - 1;
      do
      {
        v26 = *--v4;
        *v25-- = v26;
      }
      while (v4 != v6);
      goto LABEL_33;
    }
  }
  else
  {
    v11 = 0;
    v12 = (char *)(v4 - v6);
    v13 = 0;
    *(_BYTE *)v7 = v2;
    v5 = v7 + 1;
    if (v4 != v6)
      goto LABEL_13;
  }
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 64) = v13;
  if (v4)
LABEL_34:
    operator delete(v4);
LABEL_35:
  *(_QWORD *)(a1 + 56) = v5;
  result = *(unsigned int *)(a1 + 16);
  if ((_DWORD)result == 10)
  {
    v27 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v27;
  }
  return result;
}

uint64_t sub_1B032BADC(_QWORD *a1)
{
  _QWORD *v2;
  _BYTE *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  unint64_t v25;
  char *v26;
  __int128 *v27;
  unint64_t v28;
  __int128 v29;
  char *v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  char v35;
  const char *v36;
  int v37;
  int v38;
  int v39;
  unint64_t v40;
  _BYTE *v41;
  _BYTE *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  size_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  int v50;
  unint64_t v51;
  _BYTE *v52;
  uint64_t v53;
  _BYTE *v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  size_t v58;
  char *v59;
  char *v60;
  int v61;
  unint64_t v62;
  char *v63;
  __int128 *v64;
  unint64_t v65;
  __int128 v66;
  char *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  char *v73;
  __int128 *v74;
  unint64_t v75;
  __int128 v76;
  char *v77;
  uint64_t *v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  char v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  char *v86;
  char v87;
  int v88;
  int v89;
  int v90;
  unint64_t v91;
  _BYTE *v92;
  uint64_t v93;
  _BYTE *v94;
  unint64_t v95;
  unint64_t v96;
  unint64_t v97;
  size_t v98;
  char *v99;
  char *v100;
  unint64_t v101;
  char *v102;
  __int128 *v103;
  unint64_t v104;
  __int128 v105;
  char *v106;
  uint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  char *v110;
  char v111;
  uint64_t v112;
  uint64_t v113;
  int64x2_t v115;

  if (*((char *)a1 + 95) < 0)
  {
    *(_BYTE *)a1[9] = 0;
    a1[10] = 0;
  }
  else
  {
    *((_BYTE *)a1 + 72) = 0;
    *((_BYTE *)a1 + 95) = 0;
  }
  v2 = a1 + 6;
  v3 = (_BYTE *)a1[6];
  a1[7] = v3;
  v4 = *((_DWORD *)a1 + 4);
  v5 = a1[8];
  if ((unint64_t)v3 >= v5)
  {
    v7 = v5 - (_QWORD)v3;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    a1[6] = v10;
    a1[7] = v10 + 1;
    a1[8] = &v10[v9];
    if (v3)
      operator delete(v3);
  }
  else
  {
    *v3 = v4;
    v6 = v3 + 1;
  }
  a1[7] = v6;
  v115 = vdupq_n_s64(1uLL);
  while (2)
  {
    *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), v115);
    if (*((_BYTE *)a1 + 20))
    {
      *((_BYTE *)a1 + 20) = 0;
      v13 = *((_DWORD *)a1 + 4);
      if (v13 == -1)
        goto LABEL_200;
    }
    else
    {
      v14 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
      LOBYTE(v13) = v14;
      *((_DWORD *)a1 + 4) = v14;
      if (v14 == -1)
      {
LABEL_200:
        v36 = "invalid string: missing closing quote";
        goto LABEL_198;
      }
    }
    v16 = (_BYTE *)a1[7];
    v15 = a1[8];
    if ((unint64_t)v16 >= v15)
    {
      v18 = (_BYTE *)*v2;
      v19 = (unint64_t)&v16[-*v2];
      v20 = v19 + 1;
      if ((uint64_t)(v19 + 1) < 0)
        goto LABEL_233;
      v21 = v15 - (_QWORD)v18;
      if (2 * v21 > v20)
        v20 = 2 * v21;
      if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
        v22 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v22 = v20;
      if (v22)
      {
        v23 = (char *)operator new(v22);
        v24 = &v23[v19];
        v23[v19] = v13;
        v17 = (uint64_t)&v23[v19 + 1];
        if (v16 == v18)
        {
LABEL_50:
          a1[6] = v24;
          a1[7] = v17;
          a1[8] = &v23[v22];
          if (v16)
            operator delete(v16);
          goto LABEL_52;
        }
      }
      else
      {
        v23 = 0;
        v24 = &v16[-*v2];
        *(_BYTE *)v19 = v13;
        v17 = v19 + 1;
        if (v16 == v18)
          goto LABEL_50;
      }
      if (v19 >= 8 && (unint64_t)(v18 - v23) >= 0x20)
      {
        if (v19 < 0x20)
        {
          v25 = 0;
          goto LABEL_42;
        }
        v25 = v19 & 0xFFFFFFFFFFFFFFE0;
        v26 = &v23[v19 - 16];
        v27 = (__int128 *)(v16 - 16);
        v28 = v19 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v29 = *v27;
          *((_OWORD *)v26 - 1) = *(v27 - 1);
          *(_OWORD *)v26 = v29;
          v26 -= 32;
          v27 -= 2;
          v28 -= 32;
        }
        while (v28);
        if (v19 == v25)
          goto LABEL_49;
        if ((v19 & 0x18) != 0)
        {
LABEL_42:
          v24 -= v19 & 0xFFFFFFFFFFFFFFF8;
          v30 = &v23[&v16[-v25] - v18 - 8];
          v31 = (uint64_t *)&v16[-v25 - 8];
          v32 = v25 - (v19 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v33 = *v31--;
            *(_QWORD *)v30 = v33;
            v30 -= 8;
            v32 += 8;
          }
          while (v32);
          v16 -= v19 & 0xFFFFFFFFFFFFFFF8;
          if (v19 == (v19 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_49;
          goto LABEL_47;
        }
        v24 -= v25;
        v16 -= v25;
      }
LABEL_47:
      v34 = v24 - 1;
      do
      {
        v35 = *--v16;
        *v34-- = v35;
      }
      while (v16 != v18);
LABEL_49:
      v16 = (_BYTE *)*v2;
      v24 = v23;
      goto LABEL_50;
    }
    *v16 = v13;
    v17 = (uint64_t)(v16 + 1);
LABEL_52:
    a1[7] = v17;
    v12 = *((_DWORD *)a1 + 4);
    if (v12 == 10)
    {
      v112 = a1[5] + 1;
      a1[4] = 0;
      a1[5] = v112;
      v36 = "invalid string: control character U+000A (LF) must be escaped to \\u000A or \\n";
      goto LABEL_198;
    }
    v36 = "invalid string: missing closing quote";
    switch(v12)
    {
      case -1:
        goto LABEL_198;
      case 0:
        v36 = "invalid string: control character U+0000 (NUL) must be escaped to \\u0000";
        goto LABEL_198;
      case 1:
        v36 = "invalid string: control character U+0001 (SOH) must be escaped to \\u0001";
        goto LABEL_198;
      case 2:
        v36 = "invalid string: control character U+0002 (STX) must be escaped to \\u0002";
        goto LABEL_198;
      case 3:
        v36 = "invalid string: control character U+0003 (ETX) must be escaped to \\u0003";
        goto LABEL_198;
      case 4:
        v36 = "invalid string: control character U+0004 (EOT) must be escaped to \\u0004";
        goto LABEL_198;
      case 5:
        v36 = "invalid string: control character U+0005 (ENQ) must be escaped to \\u0005";
        goto LABEL_198;
      case 6:
        v36 = "invalid string: control character U+0006 (ACK) must be escaped to \\u0006";
        goto LABEL_198;
      case 7:
        v36 = "invalid string: control character U+0007 (BEL) must be escaped to \\u0007";
        goto LABEL_198;
      case 8:
        v36 = "invalid string: control character U+0008 (BS) must be escaped to \\u0008 or \\b";
        goto LABEL_198;
      case 9:
        v36 = "invalid string: control character U+0009 (HT) must be escaped to \\u0009 or \\t";
        goto LABEL_198;
      case 11:
        v36 = "invalid string: control character U+000B (VT) must be escaped to \\u000B";
        goto LABEL_198;
      case 12:
        v36 = "invalid string: control character U+000C (FF) must be escaped to \\u000C or \\f";
        goto LABEL_198;
      case 13:
        v36 = "invalid string: control character U+000D (CR) must be escaped to \\u000D or \\r";
        goto LABEL_198;
      case 14:
        v36 = "invalid string: control character U+000E (SO) must be escaped to \\u000E";
        goto LABEL_198;
      case 15:
        v36 = "invalid string: control character U+000F (SI) must be escaped to \\u000F";
        goto LABEL_198;
      case 16:
        v36 = "invalid string: control character U+0010 (DLE) must be escaped to \\u0010";
        goto LABEL_198;
      case 17:
        v36 = "invalid string: control character U+0011 (DC1) must be escaped to \\u0011";
        goto LABEL_198;
      case 18:
        v36 = "invalid string: control character U+0012 (DC2) must be escaped to \\u0012";
        goto LABEL_198;
      case 19:
        v36 = "invalid string: control character U+0013 (DC3) must be escaped to \\u0013";
        goto LABEL_198;
      case 20:
        v36 = "invalid string: control character U+0014 (DC4) must be escaped to \\u0014";
        goto LABEL_198;
      case 21:
        v36 = "invalid string: control character U+0015 (NAK) must be escaped to \\u0015";
        goto LABEL_198;
      case 22:
        v36 = "invalid string: control character U+0016 (SYN) must be escaped to \\u0016";
        goto LABEL_198;
      case 23:
        v36 = "invalid string: control character U+0017 (ETB) must be escaped to \\u0017";
        goto LABEL_198;
      case 24:
        v36 = "invalid string: control character U+0018 (CAN) must be escaped to \\u0018";
        goto LABEL_198;
      case 25:
        v36 = "invalid string: control character U+0019 (EM) must be escaped to \\u0019";
        goto LABEL_198;
      case 26:
        v36 = "invalid string: control character U+001A (SUB) must be escaped to \\u001A";
        goto LABEL_198;
      case 27:
        v36 = "invalid string: control character U+001B (ESC) must be escaped to \\u001B";
        goto LABEL_198;
      case 28:
        v36 = "invalid string: control character U+001C (FS) must be escaped to \\u001C";
        goto LABEL_198;
      case 29:
        v36 = "invalid string: control character U+001D (GS) must be escaped to \\u001D";
        goto LABEL_198;
      case 30:
        v36 = "invalid string: control character U+001E (RS) must be escaped to \\u001E";
        goto LABEL_198;
      case 31:
        v36 = "invalid string: control character U+001F (US) must be escaped to \\u001F";
        goto LABEL_198;
      case 32:
      case 33:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 102:
      case 103:
      case 104:
      case 105:
      case 106:
      case 107:
      case 108:
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 115:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
        goto LABEL_17;
      case 34:
        return 4;
      case 92:
        v72 = sub_1B032B8A0((uint64_t)a1);
        v36 = "invalid string: forbidden character after backslash";
        LOBYTE(v12) = 34;
        switch(v72)
        {
          case '"':
            goto LABEL_17;
          case '/':
            LOBYTE(v12) = 47;
            goto LABEL_17;
          case '\\':
            LOBYTE(v12) = 92;
            goto LABEL_17;
          case 'b':
            LOBYTE(v12) = 8;
            goto LABEL_17;
          case 'f':
            LOBYTE(v12) = 12;
            goto LABEL_17;
          case 'n':
            LOBYTE(v12) = 10;
            goto LABEL_17;
          case 'r':
            LOBYTE(v12) = 13;
            goto LABEL_17;
          case 't':
            LOBYTE(v12) = 9;
            goto LABEL_17;
          case 'u':
            v83 = sub_1B032CD90((uint64_t)a1);
            if (v83 == -1)
              goto LABEL_234;
            v84 = v83;
            if ((v83 & 0xFFFFFC00) == 0xD800)
            {
              if (sub_1B032B8A0((uint64_t)a1) != 92 || sub_1B032B8A0((uint64_t)a1) != 117)
              {
LABEL_235:
                v36 = "invalid string: surrogate U+DC00..U+DFFF must be followed by U+DC00..U+DFFF";
                goto LABEL_198;
              }
              v85 = sub_1B032CD90((uint64_t)a1);
              if (v85 == -1)
              {
LABEL_234:
                v36 = "invalid string: '\\u' must be followed by 4 hex digits";
                goto LABEL_198;
              }
              if (v85 >> 10 != 55)
                goto LABEL_235;
              v84 = v85 + (v84 << 10) - 56613888;
              goto LABEL_141;
            }
            if ((v83 & 0xFFFFFC00) == 0xDC00)
            {
              v36 = "invalid string: surrogate U+DC00..U+DFFF must follow U+D800..U+DBFF";
              goto LABEL_198;
            }
            if ((int)v83 > 127)
            {
              if (v83 > 0x7FF)
              {
                if (!HIWORD(v83))
                {
                  std::string::push_back((std::string *)a1 + 3, (v83 >> 12) | 0xE0);
                  goto LABEL_142;
                }
LABEL_141:
                std::string::push_back((std::string *)a1 + 3, (v84 >> 18) | 0xF0);
                std::string::push_back((std::string *)a1 + 3, (v84 >> 12) & 0x3F | 0x80);
LABEL_142:
                std::string::push_back((std::string *)a1 + 3, (v84 >> 6) & 0x3F | 0x80);
                LOBYTE(v12) = v84 & 0x3F | 0x80;
                goto LABEL_17;
              }
              std::string::push_back((std::string *)a1 + 3, (v83 >> 6) | 0xC0);
              LOBYTE(v12) = v84 & 0x3F | 0x80;
            }
            else
            {
              LOBYTE(v12) = v83;
            }
            break;
          default:
            goto LABEL_198;
        }
        goto LABEL_17;
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 209:
      case 210:
      case 211:
      case 212:
      case 213:
      case 214:
      case 215:
      case 216:
      case 217:
      case 218:
      case 219:
      case 220:
      case 221:
      case 222:
      case 223:
        std::string::push_back((std::string *)a1 + 3, v12);
        *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
        if (*((_BYTE *)a1 + 20))
        {
          *((_BYTE *)a1 + 20) = 0;
          v37 = *((_DWORD *)a1 + 4);
          if (v37 == -1)
            goto LABEL_197;
        }
        else
        {
          v39 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
          LOBYTE(v37) = v39;
          *((_DWORD *)a1 + 4) = v39;
          if (v39 == -1)
            goto LABEL_197;
        }
        v41 = (_BYTE *)a1[7];
        v40 = a1[8];
        if ((unint64_t)v41 < v40)
        {
          *v41 = v37;
          v11 = (uint64_t)(v41 + 1);
          goto LABEL_15;
        }
        v42 = (_BYTE *)*v2;
        v43 = (unint64_t)&v41[-*v2];
        v44 = v43 + 1;
        if ((uint64_t)(v43 + 1) < 0)
          goto LABEL_233;
        v45 = v40 - (_QWORD)v42;
        if (2 * v45 > v44)
          v44 = 2 * v45;
        if (v45 >= 0x3FFFFFFFFFFFFFFFLL)
          v46 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v46 = v44;
        if (v46)
        {
          v47 = (char *)operator new(v46);
          v48 = &v47[v43];
          v47[v43] = v37;
          v11 = (uint64_t)&v47[v43 + 1];
          if (v41 == v42)
            goto LABEL_127;
        }
        else
        {
          v47 = 0;
          v48 = &v41[-*v2];
          *(_BYTE *)v43 = v37;
          v11 = v43 + 1;
          if (v41 == v42)
            goto LABEL_127;
        }
        if (v43 < 8 || (unint64_t)(v42 - v47) < 0x20)
          goto LABEL_124;
        if (v43 >= 0x20)
        {
          v49 = v43 & 0xFFFFFFFFFFFFFFE0;
          v63 = &v47[v43 - 16];
          v64 = (__int128 *)(v41 - 16);
          v65 = v43 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v66 = *v64;
            *((_OWORD *)v63 - 1) = *(v64 - 1);
            *(_OWORD *)v63 = v66;
            v63 -= 32;
            v64 -= 2;
            v65 -= 32;
          }
          while (v65);
          if (v43 == v49)
            goto LABEL_126;
          if ((v43 & 0x18) == 0)
          {
            v48 -= v49;
            v41 -= v49;
LABEL_124:
            v81 = v48 - 1;
            do
            {
              v82 = *--v41;
              *v81-- = v82;
            }
            while (v41 != v42);
            goto LABEL_126;
          }
        }
        else
        {
          v49 = 0;
        }
        v48 -= v43 & 0xFFFFFFFFFFFFFFF8;
        v67 = &v47[&v41[-v49] - v42 - 8];
        v68 = (uint64_t *)&v41[-v49 - 8];
        v69 = v49 - (v43 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v70 = *v68--;
          *(_QWORD *)v67 = v70;
          v67 -= 8;
          v69 += 8;
        }
        while (v69);
        v41 -= v43 & 0xFFFFFFFFFFFFFFF8;
        if (v43 != (v43 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_124;
LABEL_126:
        v41 = (_BYTE *)*v2;
        v48 = v47;
LABEL_127:
        a1[6] = v48;
        a1[7] = v11;
        a1[8] = &v47[v46];
        if (v41)
          operator delete(v41);
LABEL_15:
        a1[7] = v11;
        v12 = *((_DWORD *)a1 + 4);
        if (v12 == 10)
          goto LABEL_196;
        goto LABEL_16;
      case 224:
        std::string::push_back((std::string *)a1 + 3, -32);
        sub_1B032B8A0((uint64_t)a1);
        v71 = *((_DWORD *)a1 + 4);
        if ((v71 - 192) < 0xFFFFFFE0)
          goto LABEL_197;
        goto LABEL_107;
      case 225:
      case 226:
      case 227:
      case 228:
      case 229:
      case 230:
      case 231:
      case 232:
      case 233:
      case 234:
      case 235:
      case 236:
      case 238:
      case 239:
        std::string::push_back((std::string *)a1 + 3, v12);
        *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
        if (*((_BYTE *)a1 + 20))
        {
          *((_BYTE *)a1 + 20) = 0;
          v38 = *((_DWORD *)a1 + 4);
          if (v38 == -1)
            goto LABEL_197;
        }
        else
        {
          v50 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
          LOBYTE(v38) = v50;
          *((_DWORD *)a1 + 4) = v50;
          if (v50 == -1)
            goto LABEL_197;
        }
        v52 = (_BYTE *)a1[7];
        v51 = a1[8];
        if ((unint64_t)v52 < v51)
        {
          *v52 = v38;
          v53 = (uint64_t)(v52 + 1);
          goto LABEL_150;
        }
        v54 = (_BYTE *)*v2;
        v55 = (unint64_t)&v52[-*v2];
        v56 = v55 + 1;
        if ((uint64_t)(v55 + 1) < 0)
          goto LABEL_233;
        v57 = v51 - (_QWORD)v54;
        if (2 * v57 > v56)
          v56 = 2 * v57;
        if (v57 >= 0x3FFFFFFFFFFFFFFFLL)
          v58 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v58 = v56;
        if (v58)
        {
          v59 = (char *)operator new(v58);
          v60 = &v59[v55];
          v59[v55] = v38;
          v53 = (uint64_t)&v59[v55 + 1];
          if (v52 == v54)
            goto LABEL_148;
        }
        else
        {
          v59 = 0;
          v60 = &v52[-*v2];
          *(_BYTE *)v55 = v38;
          v53 = v55 + 1;
          if (v52 == v54)
            goto LABEL_148;
        }
        if (v55 < 8 || (unint64_t)(v54 - v59) < 0x20)
          goto LABEL_145;
        if (v55 >= 0x20)
        {
          v62 = v55 & 0xFFFFFFFFFFFFFFE0;
          v73 = &v59[v55 - 16];
          v74 = (__int128 *)(v52 - 16);
          v75 = v55 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v76 = *v74;
            *((_OWORD *)v73 - 1) = *(v74 - 1);
            *(_OWORD *)v73 = v76;
            v73 -= 32;
            v74 -= 2;
            v75 -= 32;
          }
          while (v75);
          if (v55 == v62)
            goto LABEL_147;
          if ((v55 & 0x18) == 0)
          {
            v60 -= v62;
            v52 -= v62;
LABEL_145:
            v86 = v60 - 1;
            do
            {
              v87 = *--v52;
              *v86-- = v87;
            }
            while (v52 != v54);
            goto LABEL_147;
          }
        }
        else
        {
          v62 = 0;
        }
        v60 -= v55 & 0xFFFFFFFFFFFFFFF8;
        v77 = &v59[&v52[-v62] - v54 - 8];
        v78 = (uint64_t *)&v52[-v62 - 8];
        v79 = v62 - (v55 & 0xFFFFFFFFFFFFFFF8);
        do
        {
          v80 = *v78--;
          *(_QWORD *)v77 = v80;
          v77 -= 8;
          v79 += 8;
        }
        while (v79);
        v52 -= v55 & 0xFFFFFFFFFFFFFFF8;
        if (v55 != (v55 & 0xFFFFFFFFFFFFFFF8))
          goto LABEL_145;
LABEL_147:
        v52 = (_BYTE *)*v2;
        v60 = v59;
LABEL_148:
        a1[6] = v60;
        a1[7] = v53;
        a1[8] = &v59[v58];
        if (v52)
          operator delete(v52);
LABEL_150:
        a1[7] = v53;
        v88 = *((_DWORD *)a1 + 4);
        if (v88 != 10)
        {
          if ((v88 - 192) < 0xFFFFFFC0)
            goto LABEL_197;
          std::string::push_back((std::string *)a1 + 3, v88);
          *(int64x2_t *)(a1 + 3) = vaddq_s64(*(int64x2_t *)(a1 + 3), vdupq_n_s64(1uLL));
          if (*((_BYTE *)a1 + 20))
          {
            *((_BYTE *)a1 + 20) = 0;
            v89 = *((_DWORD *)a1 + 4);
            if (v89 == -1)
              goto LABEL_197;
          }
          else
          {
            v90 = (**(uint64_t (***)(_QWORD))*a1)(*a1);
            LOBYTE(v89) = v90;
            *((_DWORD *)a1 + 4) = v90;
            if (v90 == -1)
              goto LABEL_197;
          }
          v92 = (_BYTE *)a1[7];
          v91 = a1[8];
          if ((unint64_t)v92 >= v91)
          {
            v94 = (_BYTE *)*v2;
            v95 = (unint64_t)&v92[-*v2];
            v96 = v95 + 1;
            if ((uint64_t)(v95 + 1) < 0)
LABEL_233:
              sub_1B032A0E8();
            v97 = v91 - (_QWORD)v94;
            if (2 * v97 > v96)
              v96 = 2 * v97;
            if (v97 >= 0x3FFFFFFFFFFFFFFFLL)
              v98 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v98 = v96;
            if (v98)
            {
              v99 = (char *)operator new(v98);
              v100 = &v99[v95];
              v99[v95] = v89;
              v93 = (uint64_t)&v99[v95 + 1];
              if (v92 == v94)
              {
LABEL_184:
                a1[6] = v100;
                a1[7] = v93;
                a1[8] = &v99[v98];
                if (v92)
                  operator delete(v92);
                goto LABEL_186;
              }
            }
            else
            {
              v99 = 0;
              v100 = &v92[-*v2];
              *(_BYTE *)v95 = v89;
              v93 = v95 + 1;
              if (v92 == v94)
                goto LABEL_184;
            }
            if (v95 >= 8 && (unint64_t)(v94 - v99) >= 0x20)
            {
              if (v95 < 0x20)
              {
                v101 = 0;
                goto LABEL_176;
              }
              v101 = v95 & 0xFFFFFFFFFFFFFFE0;
              v102 = &v99[v95 - 16];
              v103 = (__int128 *)(v92 - 16);
              v104 = v95 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v105 = *v103;
                *((_OWORD *)v102 - 1) = *(v103 - 1);
                *(_OWORD *)v102 = v105;
                v102 -= 32;
                v103 -= 2;
                v104 -= 32;
              }
              while (v104);
              if (v95 == v101)
                goto LABEL_183;
              if ((v95 & 0x18) != 0)
              {
LABEL_176:
                v100 -= v95 & 0xFFFFFFFFFFFFFFF8;
                v106 = &v99[&v92[-v101] - v94 - 8];
                v107 = (uint64_t *)&v92[-v101 - 8];
                v108 = v101 - (v95 & 0xFFFFFFFFFFFFFFF8);
                do
                {
                  v109 = *v107--;
                  *(_QWORD *)v106 = v109;
                  v106 -= 8;
                  v108 += 8;
                }
                while (v108);
                v92 -= v95 & 0xFFFFFFFFFFFFFFF8;
                if (v95 == (v95 & 0xFFFFFFFFFFFFFFF8))
                  goto LABEL_183;
                goto LABEL_181;
              }
              v100 -= v101;
              v92 -= v101;
            }
LABEL_181:
            v110 = v100 - 1;
            do
            {
              v111 = *--v92;
              *v110-- = v111;
            }
            while (v92 != v94);
LABEL_183:
            v92 = (_BYTE *)*v2;
            v100 = v99;
            goto LABEL_184;
          }
          *v92 = v89;
          v93 = (uint64_t)(v92 + 1);
LABEL_186:
          a1[7] = v93;
          v12 = *((_DWORD *)a1 + 4);
          if (v12 == 10)
            goto LABEL_196;
LABEL_16:
          if ((v12 - 192) < 0xFFFFFFC0)
            goto LABEL_197;
LABEL_17:
          std::string::push_back((std::string *)a1 + 3, v12);
          continue;
        }
LABEL_196:
        v113 = a1[5] + 1;
        a1[4] = 0;
        a1[5] = v113;
LABEL_197:
        v36 = "invalid string: ill-formed UTF-8 byte";
LABEL_198:
        a1[12] = v36;
        return 14;
      case 237:
        std::string::push_back((std::string *)a1 + 3, -19);
        sub_1B032B8A0((uint64_t)a1);
        v71 = *((_DWORD *)a1 + 4);
        if ((v71 - 160) < 0xFFFFFFE0)
          goto LABEL_197;
        goto LABEL_107;
      case 240:
        std::string::push_back((std::string *)a1 + 3, -16);
        sub_1B032B8A0((uint64_t)a1);
        v61 = *((_DWORD *)a1 + 4);
        if ((v61 - 192) < 0xFFFFFFD0)
          goto LABEL_197;
        goto LABEL_106;
      case 241:
      case 242:
      case 243:
        std::string::push_back((std::string *)a1 + 3, v12);
        sub_1B032B8A0((uint64_t)a1);
        v61 = *((_DWORD *)a1 + 4);
        if ((v61 - 192) < 0xFFFFFFC0)
          goto LABEL_197;
        goto LABEL_106;
      case 244:
        std::string::push_back((std::string *)a1 + 3, -12);
        sub_1B032B8A0((uint64_t)a1);
        v61 = *((_DWORD *)a1 + 4);
        if ((v61 - 144) < 0xFFFFFFF0)
          goto LABEL_197;
LABEL_106:
        std::string::push_back((std::string *)a1 + 3, v61);
        sub_1B032B8A0((uint64_t)a1);
        v71 = *((_DWORD *)a1 + 4);
        if ((v71 - 192) < 0xFFFFFFC0)
          goto LABEL_197;
LABEL_107:
        std::string::push_back((std::string *)a1 + 3, v71);
        sub_1B032B8A0((uint64_t)a1);
        v12 = *((_DWORD *)a1 + 4);
        if ((v12 - 192) < 0xFFFFFFC0)
          goto LABEL_197;
        goto LABEL_17;
      default:
        goto LABEL_197;
    }
  }
}

uint64_t sub_1B032C7C4(uint64_t a1)
{
  _BYTE *v2;
  _QWORD *v3;
  int v4;
  unint64_t v5;
  _BYTE *v6;
  unint64_t v7;
  uint64_t v8;
  size_t v9;
  _BYTE *v10;
  const char *v11;
  int v12;
  int v13;
  int v14;
  int v15;
  int v16;
  unint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  size_t v24;
  char *v25;
  char *v26;
  unint64_t v27;
  char *v28;
  __int128 *v29;
  unint64_t v30;
  __int128 v31;
  char *v32;
  uint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  char v37;
  int v38;
  int v39;
  int v40;
  uint64_t v41;
  const char *v42;
  int v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  const char *v47;
  unint64_t v48;
  const char *v50;
  uint64_t v51;
  int v52;
  int64x2_t v53;
  char *__endptr;

  if (*(char *)(a1 + 95) < 0)
  {
    **(_BYTE **)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 95) = 0;
  }
  v3 = (_QWORD *)(a1 + 48);
  v2 = *(_BYTE **)(a1 + 48);
  *(_QWORD *)(a1 + 56) = v2;
  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD *)(a1 + 64);
  if ((unint64_t)v2 >= v5)
  {
    v7 = v5 - (_QWORD)v2;
    v8 = 2 * v7;
    if (2 * v7 <= 1)
      v8 = 1;
    if (v7 >= 0x3FFFFFFFFFFFFFFFLL)
      v9 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = operator new(v9);
    *v10 = v4;
    v6 = v10 + 1;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v10 + 1;
    *(_QWORD *)(a1 + 64) = &v10[v9];
    if (v2)
      operator delete(v2);
  }
  else
  {
    *v2 = v4;
    v6 = v2 + 1;
  }
  v11 = (const char *)(a1 + 72);
  *(_QWORD *)(a1 + 56) = v6;
  v12 = *(_DWORD *)(a1 + 16);
  v13 = 5;
  if ((v12 - 49) < 9)
  {
    v14 = 5;
    goto LABEL_15;
  }
  if (v12 == 48)
  {
LABEL_72:
    std::string::push_back((std::string *)(a1 + 72), v12);
    v43 = sub_1B032B8A0(a1);
    if (v43 == 46)
    {
LABEL_55:
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 128));
      if (sub_1B032B8A0(a1) - 48 > 9)
      {
        v42 = "invalid number; expected digit after '.'";
        goto LABEL_104;
      }
      do
      {
        std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
        v39 = sub_1B032B8A0(a1);
      }
      while ((v39 - 48) < 0xA);
      if (v39 != 101 && v39 != 69)
        goto LABEL_78;
    }
    else if (v43 != 69 && v43 != 101)
    {
      goto LABEL_79;
    }
    v38 = *(_DWORD *)(a1 + 16);
LABEL_76:
    std::string::push_back((std::string *)(a1 + 72), v38);
    v44 = sub_1B032B8A0(a1);
    if ((v44 - 48) < 0xA)
      goto LABEL_77;
    if (v44 == 43 || v44 == 45)
    {
      std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
      if (sub_1B032B8A0(a1) - 48 < 0xA)
      {
        do
LABEL_77:
          std::string::push_back((std::string *)(a1 + 72), *(_BYTE *)(a1 + 16));
        while (sub_1B032B8A0(a1) - 48 < 0xA);
LABEL_78:
        v13 = 7;
        goto LABEL_79;
      }
      v42 = "invalid number; expected digit after exponent sign";
    }
    else
    {
      v42 = "invalid number; expected '+', '-', or digit after exponent";
    }
LABEL_104:
    *(_QWORD *)(a1 + 96) = v42;
    return 14;
  }
  if (v12 == 45)
    std::string::push_back((std::string *)(a1 + 72), 45);
  v40 = sub_1B032B8A0(a1);
  if ((v40 - 49) >= 9)
  {
    if (v40 != 48)
    {
      v42 = "invalid number; expected digit after '-'";
      goto LABEL_104;
    }
    v12 = *(_DWORD *)(a1 + 16);
    v13 = 6;
    goto LABEL_72;
  }
  v12 = *(_DWORD *)(a1 + 16);
  v14 = 6;
LABEL_15:
  v52 = v14;
  std::string::push_back((std::string *)(a1 + 72), v12);
  v53 = vdupq_n_s64(1uLL);
  *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), v53);
  if (!*(_BYTE *)(a1 + 20))
    goto LABEL_18;
LABEL_16:
  *(_BYTE *)(a1 + 20) = 0;
  v15 = *(_DWORD *)(a1 + 16);
  if (v15 == -1)
  {
LABEL_102:
    v13 = v52;
    goto LABEL_79;
  }
  while (1)
  {
    v18 = *(_BYTE **)(a1 + 56);
    v17 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v18 < v17)
    {
      *v18 = v15;
      v19 = (uint64_t)(v18 + 1);
      goto LABEL_49;
    }
    v20 = (_BYTE *)*v3;
    v21 = (unint64_t)&v18[-*v3];
    v22 = v21 + 1;
    if ((uint64_t)(v21 + 1) < 0)
      sub_1B032A0E8();
    v23 = v17 - (_QWORD)v20;
    if (2 * v23 > v22)
      v22 = 2 * v23;
    if (v23 >= 0x3FFFFFFFFFFFFFFFLL)
      v24 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v24 = v22;
    if (!v24)
    {
      v25 = 0;
      v26 = &v18[-*v3];
      *(_BYTE *)v21 = v15;
      v19 = v21 + 1;
      if (v18 == v20)
        goto LABEL_47;
LABEL_31:
      if (v21 >= 8 && (unint64_t)(v20 - v25) >= 0x20)
      {
        if (v21 < 0x20)
        {
          v27 = 0;
          goto LABEL_39;
        }
        v27 = v21 & 0xFFFFFFFFFFFFFFE0;
        v28 = &v25[v21 - 16];
        v29 = (__int128 *)(v18 - 16);
        v30 = v21 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v31 = *v29;
          *((_OWORD *)v28 - 1) = *(v29 - 1);
          *(_OWORD *)v28 = v31;
          v28 -= 32;
          v29 -= 2;
          v30 -= 32;
        }
        while (v30);
        if (v21 == v27)
          goto LABEL_46;
        if ((v21 & 0x18) != 0)
        {
LABEL_39:
          v26 -= v21 & 0xFFFFFFFFFFFFFFF8;
          v32 = &v25[&v18[-v27] - v20 - 8];
          v33 = (uint64_t *)&v18[-v27 - 8];
          v34 = v27 - (v21 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v35 = *v33--;
            *(_QWORD *)v32 = v35;
            v32 -= 8;
            v34 += 8;
          }
          while (v34);
          v18 -= v21 & 0xFFFFFFFFFFFFFFF8;
          if (v21 == (v21 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_46;
          goto LABEL_44;
        }
        v26 -= v27;
        v18 -= v27;
      }
LABEL_44:
      v36 = v26 - 1;
      do
      {
        v37 = *--v18;
        *v36-- = v37;
      }
      while (v18 != v20);
LABEL_46:
      v18 = (_BYTE *)*v3;
      v26 = v25;
      goto LABEL_47;
    }
    v25 = (char *)operator new(v24);
    v26 = &v25[v21];
    v25[v21] = v15;
    v19 = (uint64_t)&v25[v21 + 1];
    if (v18 != v20)
      goto LABEL_31;
LABEL_47:
    *(_QWORD *)(a1 + 48) = v26;
    *(_QWORD *)(a1 + 56) = v19;
    *(_QWORD *)(a1 + 64) = &v25[v24];
    if (v18)
      operator delete(v18);
LABEL_49:
    *(_QWORD *)(a1 + 56) = v19;
    v38 = *(_DWORD *)(a1 + 16);
    if ((v38 - 48) >= 0xA)
      break;
    std::string::push_back((std::string *)(a1 + 72), v38);
    *(int64x2_t *)(a1 + 24) = vaddq_s64(*(int64x2_t *)(a1 + 24), v53);
    if (*(_BYTE *)(a1 + 20))
      goto LABEL_16;
LABEL_18:
    v16 = (***(uint64_t (****)(_QWORD))a1)(*(_QWORD *)a1);
    LOBYTE(v15) = v16;
    *(_DWORD *)(a1 + 16) = v16;
    if (v16 == -1)
      goto LABEL_102;
  }
  if (v38 > 68)
  {
    v13 = v52;
    if (v38 != 69 && v38 != 101)
      goto LABEL_79;
    goto LABEL_76;
  }
  v13 = v52;
  if (v38 == 10)
  {
    v41 = *(_QWORD *)(a1 + 40) + 1;
    *(_QWORD *)(a1 + 32) = 0;
    *(_QWORD *)(a1 + 40) = v41;
  }
  else if (v38 == 46)
  {
    goto LABEL_55;
  }
LABEL_79:
  v45 = (_QWORD *)(a1 + 32);
  v46 = *(_QWORD *)(a1 + 32);
  *(_BYTE *)(a1 + 20) = 1;
  --*(_QWORD *)(a1 + 24);
  if (v46 || (v45 = (_QWORD *)(a1 + 40), (v46 = *(_QWORD *)(a1 + 40)) != 0))
    *v45 = v46 - 1;
  if (*(_DWORD *)(a1 + 16) != -1)
    --*(_QWORD *)(a1 + 56);
  __endptr = 0;
  *__error() = 0;
  if (v13 == 6)
  {
    v50 = (const char *)(a1 + 72);
    if (*(char *)(a1 + 95) < 0)
      v50 = *(const char **)v11;
    v51 = strtoll(v50, &__endptr, 10);
    if (*__error())
      goto LABEL_93;
    *(_QWORD *)(a1 + 104) = v51;
    return 6;
  }
  else
  {
    if (v13 == 5)
    {
      v47 = (const char *)(a1 + 72);
      if (*(char *)(a1 + 95) < 0)
        v47 = *(const char **)v11;
      v48 = strtoull(v47, &__endptr, 10);
      if (!*__error())
      {
        *(_QWORD *)(a1 + 112) = v48;
        return 5;
      }
    }
LABEL_93:
    if (*(char *)(a1 + 95) < 0)
      v11 = *(const char **)v11;
    *(double *)(a1 + 120) = strtod(v11, &__endptr);
    return 7;
  }
}

uint64_t sub_1B032CD90(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;

  sub_1B032B8A0(a1);
  v2 = *(_DWORD *)(a1 + 16);
  v3 = v2 - 48;
  if ((v2 - 48) < 0xA)
  {
LABEL_4:
    sub_1B032B8A0(a1);
    v4 = *(_DWORD *)(a1 + 16);
    v5 = v4 - 48;
    if ((v4 - 48) < 0xA)
      goto LABEL_5;
    goto LABEL_10;
  }
  if ((v2 - 65) <= 5)
  {
    v3 = v2 - 55;
    goto LABEL_4;
  }
  if ((v2 - 97) > 5)
    return 0xFFFFFFFFLL;
  v3 = v2 - 87;
  sub_1B032B8A0(a1);
  v4 = *(_DWORD *)(a1 + 16);
  v5 = v4 - 48;
  if ((v4 - 48) < 0xA)
  {
LABEL_5:
    sub_1B032B8A0(a1);
    v6 = *(_DWORD *)(a1 + 16);
    v7 = v6 - 48;
    if ((v6 - 48) < 0xA)
      goto LABEL_6;
LABEL_12:
    if ((v6 - 65) < 6)
    {
      v7 = v6 - 55;
      sub_1B032B8A0(a1);
      v8 = *(_DWORD *)(a1 + 16);
      v9 = v8 - 48;
      if ((v8 - 48) < 0xA)
        return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
      goto LABEL_20;
    }
    if ((v6 - 97) > 5)
      return 0xFFFFFFFFLL;
    v7 = v6 - 87;
    sub_1B032B8A0(a1);
    v8 = *(_DWORD *)(a1 + 16);
    v9 = v8 - 48;
    if ((v8 - 48) >= 0xA)
      goto LABEL_20;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
LABEL_10:
  if ((v4 - 65) >= 6)
  {
    if ((v4 - 97) > 5)
      return 0xFFFFFFFFLL;
    v5 = v4 - 87;
    sub_1B032B8A0(a1);
    v6 = *(_DWORD *)(a1 + 16);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
  else
  {
    v5 = v4 - 55;
    sub_1B032B8A0(a1);
    v6 = *(_DWORD *)(a1 + 16);
    v7 = v6 - 48;
    if ((v6 - 48) >= 0xA)
      goto LABEL_12;
  }
LABEL_6:
  sub_1B032B8A0(a1);
  v8 = *(_DWORD *)(a1 + 16);
  v9 = v8 - 48;
  if ((v8 - 48) < 0xA)
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
LABEL_20:
  if ((v8 - 65) < 6)
  {
    v9 = v8 - 55;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  if ((v8 - 97) <= 5)
  {
    v9 = v8 - 87;
    return ((v3 << 12) + (v5 << 8) + 16 * v7 + v9);
  }
  return 0xFFFFFFFFLL;
}

uint64_t sub_1B032CF3C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  char v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *i;
  unsigned int v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *j;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  char v36;
  void *v37[2];
  char v38;
  __int128 v39;
  uint64_t v40;
  std::string v41;
  void *__p;
  unint64_t v43;
  uint64_t v44;
  char __str[8];
  char v46;
  std::runtime_error v47;
  uint64_t v48;

  v48 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v43 = 0;
  v44 = 0;
  v4 = a1 + 112;
  v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        __str[0] = 1;
        sub_1B033157C(a2, (unsigned __int8 *)__str, 0);
        goto LABEL_18;
      case 2:
        __str[0] = 0;
        sub_1B033157C(a2, (unsigned __int8 *)__str, 0);
        goto LABEL_18;
      case 3:
        *(_QWORD *)__str = 0;
        sub_1B0331780(a2, (uint64_t)__str, 0);
        goto LABEL_18;
      case 4:
        sub_1B0331B7C(a2, v4, 0);
        goto LABEL_18;
      case 5:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 152);
        sub_1B0331DCC(a2, (uint64_t *)__str, 0);
        goto LABEL_18;
      case 6:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 144);
        sub_1B033197C(a2, (uint64_t *)__str, 0);
        goto LABEL_18;
      case 7:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 160);
        sub_1B0331378(a2, (uint64_t *)__str, 0);
        goto LABEL_18;
      case 8:
        if (!sub_1B032FEA0((uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL))
          goto LABEL_80;
        v6 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
        {
          v7 = sub_1B0330214((uint64_t)a2);
          goto LABEL_13;
        }
        v14 = v43;
        if (v43 == v44 << 6)
        {
          if ((uint64_t)(v43 + 1) < 0)
            sub_1B02D7758();
          v15 = v44 << 7;
          if (v44 << 7 <= (v43 & 0xFFFFFFFFFFFFFFC0) + 64)
            v15 = (v43 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v43 <= 0x3FFFFFFFFFFFFFFELL)
            v16 = v15;
          else
            v16 = 0x7FFFFFFFFFFFFFFFLL;
          sub_1B032F5B4((uint64_t)&__p, v16);
          v14 = v43;
        }
        v43 = v14 + 1;
        *(_QWORD *)((char *)__p + ((v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v14;
        continue;
      case 9:
        if ((sub_1B032F6B4((uint64_t)a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
          goto LABEL_80;
        v8 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v8;
        if (v8 != 11)
        {
          if (v8 != 4)
            goto LABEL_83;
          if (!sub_1B032FC84((uint64_t)a2, v4))
            goto LABEL_80;
          v17 = sub_1B032B644(v5);
          *(_DWORD *)(a1 + 32) = v17;
          if (v17 != 12)
            goto LABEL_84;
          v18 = v43;
          if (v43 == v44 << 6)
          {
            if ((uint64_t)(v43 + 1) < 0)
              sub_1B02D7758();
            if (v43 > 0x3FFFFFFFFFFFFFFELL)
            {
              v19 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v44 << 7 <= (v43 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              v19 = (v43 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              v19 = v44 << 7;
            }
            sub_1B032F5B4((uint64_t)&__p, v19);
            v18 = v43;
          }
          v43 = v18 + 1;
          *(_QWORD *)((char *)__p + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v18);
          *(_DWORD *)(a1 + 32) = sub_1B032B644(v5);
          continue;
        }
        v7 = sub_1B032FA24((uint64_t)a2);
LABEL_13:
        if ((v7 & 1) == 0)
        {
LABEL_80:
          v20 = 0;
          goto LABEL_56;
        }
LABEL_18:
        v9 = v43;
        if (!v43)
        {
LABEL_55:
          v20 = 1;
          goto LABEL_56;
        }
        while (2)
        {
          if (((*(_QWORD *)((char *)__p + (((v9 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v9 - 1)) & 1) != 0)
          {
            v10 = sub_1B032B644(v5);
            *(_DWORD *)(a1 + 32) = v10;
            if (v10 == 13)
              goto LABEL_33;
            if (v10 != 10)
            {
              v31 = *(_QWORD *)(a1 + 64);
              sub_1B032DB94(v5, &v41);
              v39 = *(_OWORD *)(a1 + 64);
              v40 = *(_QWORD *)(a1 + 80);
              sub_1B02DCBB8(v35, "array");
              sub_1B032DFC4(a1, 0xAu, (uint64_t)v35, (uint64_t)v37);
              sub_1B032DC78(101, (uint64_t *)&v39, (uint64_t)v37, (uint64_t)__str);
              v30 = sub_1B032DA54((uint64_t)a2, v31, (uint64_t)&v41, (uint64_t)__str);
              goto LABEL_73;
            }
            if ((sub_1B0330214((uint64_t)a2) & 1) == 0)
              goto LABEL_80;
LABEL_27:
            v9 = --v43;
            if (!v43)
              goto LABEL_55;
            continue;
          }
          break;
        }
        v11 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v11;
        if (v11 != 13)
        {
          if (v11 != 11)
          {
            v32 = *(_QWORD *)(a1 + 64);
            sub_1B032DB94(v5, &v41);
            v39 = *(_OWORD *)(a1 + 64);
            v40 = *(_QWORD *)(a1 + 80);
            sub_1B02DCBB8(v35, "object");
            sub_1B032DFC4(a1, 0xBu, (uint64_t)v35, (uint64_t)v37);
            sub_1B032DC78(101, (uint64_t *)&v39, (uint64_t)v37, (uint64_t)__str);
            v30 = sub_1B032DA54((uint64_t)a2, v32, (uint64_t)&v41, (uint64_t)__str);
            goto LABEL_73;
          }
          if ((sub_1B032FA24((uint64_t)a2) & 1) == 0)
            goto LABEL_80;
          goto LABEL_27;
        }
        v12 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v12;
        if (v12 != 4)
        {
LABEL_83:
          v33 = *(_QWORD *)(a1 + 64);
          sub_1B032DB94(v5, &v41);
          v39 = *(_OWORD *)(a1 + 64);
          v40 = *(_QWORD *)(a1 + 80);
          sub_1B02DCBB8(v35, "object key");
          sub_1B032DFC4(a1, 4u, (uint64_t)v35, (uint64_t)v37);
          sub_1B032DC78(101, (uint64_t *)&v39, (uint64_t)v37, (uint64_t)__str);
          v30 = sub_1B032DA54((uint64_t)a2, v33, (uint64_t)&v41, (uint64_t)__str);
          goto LABEL_73;
        }
        if (!sub_1B032FC84((uint64_t)a2, v4))
          goto LABEL_80;
        v13 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 == 12)
        {
LABEL_33:
          *(_DWORD *)(a1 + 32) = sub_1B032B644(v5);
          continue;
        }
LABEL_84:
        v34 = *(_QWORD *)(a1 + 64);
        sub_1B032DB94(v5, &v41);
        v39 = *(_OWORD *)(a1 + 64);
        v40 = *(_QWORD *)(a1 + 80);
        sub_1B02DCBB8(v35, "object separator");
        sub_1B032DFC4(a1, 0xCu, (uint64_t)v35, (uint64_t)v37);
        sub_1B032DC78(101, (uint64_t *)&v39, (uint64_t)v37, (uint64_t)__str);
        v30 = sub_1B032DA54((uint64_t)a2, v34, (uint64_t)&v41, (uint64_t)__str);
LABEL_73:
        v20 = v30;
        *(_QWORD *)__str = &unk_1E60CD110;
        std::runtime_error::~runtime_error(&v47);
        std::exception::~exception((std::exception *)__str);
        if (v38 < 0)
        {
          operator delete(v37[0]);
          if (v36 < 0)
            goto LABEL_78;
LABEL_75:
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
LABEL_79:
            operator delete(v41.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((v36 & 0x80000000) == 0)
            goto LABEL_75;
LABEL_78:
          operator delete(v35[0]);
          if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_79;
        }
LABEL_56:
        if (__p)
          operator delete(__p);
        return v20;
      case 0xE:
        v22 = *(_QWORD *)(a1 + 64);
        memset(&v41, 0, sizeof(v41));
        v23 = *(unsigned __int8 **)(a1 + 88);
        for (i = *(unsigned __int8 **)(a1 + 96); v23 != i; ++v23)
        {
          v25 = *v23;
          if (v25 > 0x1F)
          {
            std::string::push_back(&v41, v25);
          }
          else
          {
            v46 = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v25);
            std::string::append(&v41, __str);
          }
        }
        v39 = *(_OWORD *)(a1 + 64);
        v40 = *(_QWORD *)(a1 + 80);
        v36 = 5;
        strcpy((char *)v35, "value");
        sub_1B032DFC4(a1, 0, (uint64_t)v35, (uint64_t)v37);
        sub_1B032DC78(101, (uint64_t *)&v39, (uint64_t)v37, (uint64_t)__str);
        v30 = sub_1B032DA54((uint64_t)a2, v22, (uint64_t)&v41, (uint64_t)__str);
        goto LABEL_73;
      default:
        v26 = *(_QWORD *)(a1 + 64);
        memset(&v41, 0, sizeof(v41));
        v27 = *(unsigned __int8 **)(a1 + 88);
        for (j = *(unsigned __int8 **)(a1 + 96); v27 != j; ++v27)
        {
          v29 = *v27;
          if (v29 > 0x1F)
          {
            std::string::push_back(&v41, v29);
          }
          else
          {
            v46 = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v29);
            std::string::append(&v41, __str);
          }
        }
        v39 = *(_OWORD *)(a1 + 64);
        v40 = *(_QWORD *)(a1 + 80);
        v36 = 5;
        strcpy((char *)v35, "value");
        sub_1B032DFC4(a1, 0x10u, (uint64_t)v35, (uint64_t)v37);
        sub_1B032DC78(101, (uint64_t *)&v39, (uint64_t)v37, (uint64_t)__str);
        v30 = sub_1B032DA54((uint64_t)a2, v26, (uint64_t)&v41, (uint64_t)__str);
        goto LABEL_73;
    }
  }
}

void sub_1B032D82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33)
{
  std::runtime_error *v33;
  uint64_t v34;
  void *v36;

  *(_QWORD *)(v34 - 128) = &unk_1E60CD110;
  std::runtime_error::~runtime_error(v33 + 1);
  std::exception::~exception((std::exception *)(v34 - 128));
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a16 & 0x80000000) == 0)
  {
LABEL_3:
    if (a32 < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete(a11);
  if (a32 < 0)
  {
LABEL_4:
    operator delete(a27);
    v36 = a33;
    if (a33)
    {
LABEL_10:
      operator delete(v36);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  v36 = a33;
  if (a33)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_1B032DA54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  *(_BYTE *)(a1 + 88) = 1;
  if (*(_BYTE *)(a1 + 128))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        v6 = (void *)sub_1B0331FD0((uint64_t)exception, a4);
        __cxa_throw(v6, (struct type_info *)&unk_1E60CB448, (void (*)(void *))sub_1B032E6D0);
      case 1:
        v7 = __cxa_allocate_exception(0x20uLL);
        v8 = (void *)sub_1B0332084((uint64_t)v7, a4);
        __cxa_throw(v8, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
      case 2:
        v9 = __cxa_allocate_exception(0x20uLL);
        v10 = (void *)sub_1B03320D8((uint64_t)v9, a4);
        __cxa_throw(v10, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
      case 3:
        v11 = __cxa_allocate_exception(0x20uLL);
        v12 = (void *)sub_1B0332030((uint64_t)v11, a4);
        __cxa_throw(v12, (struct type_info *)&unk_1E60CB460, (void (*)(void *))sub_1B03304CC);
      case 4:
        v13 = __cxa_allocate_exception(0x20uLL);
        v14 = (void *)sub_1B033212C((uint64_t)v13, a4);
        __cxa_throw(v14, (struct type_info *)&unk_1E60CB430, (void (*)(void *))sub_1B032A874);
      default:
        return 0;
    }
  }
  return 0;
}

void sub_1B032DB94(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  unsigned __int8 *i;
  unsigned int v5;
  char __str[8];
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(unsigned __int8 **)(a1 + 48);
  for (i = *(unsigned __int8 **)(a1 + 56); v3 != i; ++v3)
  {
    v5 = *v3;
    if (v5 > 0x1F)
    {
      std::string::push_back(a2, v5);
    }
    else
    {
      v7 = 0;
      *(_QWORD *)__str = 0;
      snprintf(__str, 9uLL, "<U+%.4X>", v5);
      std::string::append(a2, __str);
    }
  }
}

void sub_1B032DC58(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B032DC78(int a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  std::string *v8;
  __int128 v9;
  std::string *p_p;
  std::string::size_type size;
  std::string *v12;
  __int128 v13;
  std::string *v14;
  __int128 v15;
  int v16;
  const std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  uint64_t v21;
  const char *v22;
  std::string __p;
  void *v24[2];
  char v25;
  std::string v26;
  std::string v27;
  std::string v28;
  std::string v29;
  __int128 v30;
  int64_t v31;

  v25 = 11;
  strcpy((char *)v24, "parse_error");
  sub_1B032A8A8(a1, &v26);
  v8 = std::string::append(&v26, "parse error");
  v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  sub_1B03321C8((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v12 = std::string::append(&v27, (const std::string::value_type *)p_p, size);
  v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v28, ": ");
  v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v16 = *(char *)(a3 + 23);
  if (v16 >= 0)
    v17 = (const std::string::value_type *)a3;
  else
    v17 = *(const std::string::value_type **)a3;
  if (v16 >= 0)
    v18 = *(unsigned __int8 *)(a3 + 23);
  else
    v18 = *(_QWORD *)(a3 + 8);
  v19 = std::string::append(&v29, v17, v18);
  v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
  v31 = v19->__r_.__value_.__r.__words[2];
  v30 = v20;
  v19->__r_.__value_.__l.__size_ = 0;
  v19->__r_.__value_.__r.__words[2] = 0;
  v19->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_15:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_16;
      goto LABEL_26;
    }
  }
  else if ((SHIBYTE(v28.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_15;
  }
  operator delete(v28.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_16:
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_27;
  }
LABEL_26:
  operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_17:
    if ((SHIBYTE(v26.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_18;
LABEL_28:
    operator delete(v26.__r_.__value_.__l.__data_);
    if ((v25 & 0x80000000) == 0)
      goto LABEL_19;
    goto LABEL_29;
  }
LABEL_27:
  operator delete(v27.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_28;
LABEL_18:
  if ((v25 & 0x80000000) == 0)
    goto LABEL_19;
LABEL_29:
  operator delete(v24[0]);
LABEL_19:
  v21 = *a2;
  if (v31 >= 0)
    v22 = (const char *)&v30;
  else
    v22 = (const char *)v30;
  *(_QWORD *)a4 = &unk_1E60CD110;
  *(_DWORD *)(a4 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a4 + 16), v22);
  *(_QWORD *)a4 = &unk_1E60CD070;
  *(_QWORD *)(a4 + 32) = v21;
  if (SHIBYTE(v31) < 0)
    operator delete((void *)v30);
}

void sub_1B032DEC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::exception *v40;
  uint64_t v41;

  std::exception::~exception(v40);
  if (*(char *)(v41 - 57) < 0)
    operator delete(*(void **)(v41 - 80));
  _Unwind_Resume(a1);
}

void sub_1B032DFC4(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  std::string *v8;
  __int128 v9;
  void **v10;
  std::string::size_type v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  std::string::size_type v15;
  std::string *p_dst;
  const char *v17;
  size_t v18;
  std::string::size_type v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *v23;
  __int128 v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned int v27;
  unsigned int v28;
  std::string::size_type size;
  std::string::size_type v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  __int128 v34;
  void **v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type v38;
  std::string *v39;
  __int128 v40;
  std::string *v41;
  __int128 v42;
  void **v43;
  std::string::size_type v44;
  void *v45;
  const char *v46;
  size_t v47;
  std::string::size_type v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  std::string *v52;
  __int128 v53;
  void **v54;
  std::string::size_type v55;
  std::string v56;
  std::string __dst;
  std::string v58;
  std::string v59;
  void *__p[2];
  int64_t v61;
  char __str[8];
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a4 + 23) = 13;
  strcpy((char *)a4, "syntax error ");
  v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    std::operator+<char>();
    v8 = std::string::append(&v59, " ");
    v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v61 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0)
      v10 = __p;
    else
      v10 = (void **)__p[0];
    if (v61 >= 0)
      v11 = HIBYTE(v61);
    else
      v11 = (std::string::size_type)__p[1];
    std::string::append((std::string *)a4, (const std::string::value_type *)v10, v11);
    if (SHIBYTE(v61) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_12;
    }
    else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v59.__r_.__value_.__l.__data_);
  }
LABEL_12:
  std::string::append((std::string *)a4, "- ");
  v12 = *(int *)(a1 + 32);
  if ((_DWORD)v12 != 14)
  {
    if (v12 > 0x10)
      v17 = "unknown token";
    else
      v17 = off_1E60CDD40[v12];
    v18 = strlen(v17);
    if (v18 > 0x7FFFFFFFFFFFFFF7)
      sub_1B02D78C4();
    v19 = v18;
    if (v18 >= 0x17)
    {
      v31 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v18 | 7) != 0x17)
        v31 = v18 | 7;
      v32 = v31 + 1;
      v20 = operator new(v31 + 1);
      v59.__r_.__value_.__l.__size_ = v19;
      v59.__r_.__value_.__r.__words[2] = v32 | 0x8000000000000000;
      v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v20;
    }
    else
    {
      *((_BYTE *)&v59.__r_.__value_.__s + 23) = v18;
      v20 = &v59;
      if (!v18)
        goto LABEL_39;
    }
    memcpy(v20, v17, v19);
LABEL_39:
    *((_BYTE *)v20 + v19) = 0;
    v33 = std::string::insert(&v59, 0, "unexpected ");
    v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v61 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (v61 >= 0)
      v35 = __p;
    else
      v35 = (void **)__p[0];
    if (v61 >= 0)
      v36 = HIBYTE(v61);
    else
      v36 = (std::string::size_type)__p[1];
    std::string::append((std::string *)a4, (const std::string::value_type *)v35, v36);
    if (SHIBYTE(v61) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_77;
    }
    else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      goto LABEL_77;
    }
    v45 = (void *)v59.__r_.__value_.__r.__words[0];
    goto LABEL_76;
  }
  v13 = *(const char **)(a1 + 136);
  v14 = strlen(v13);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_1B02D78C4();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v21 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v21 = v14 | 7;
    v22 = v21 + 1;
    p_dst = (std::string *)operator new(v21 + 1);
    __dst.__r_.__value_.__l.__size_ = v15;
    __dst.__r_.__value_.__r.__words[2] = v22 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_27;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v14;
  p_dst = &__dst;
  if (v14)
LABEL_27:
    memmove(p_dst, v13, v15);
  p_dst->__r_.__value_.__s.__data_[v15] = 0;
  v23 = std::string::append(&__dst, "; last read: '");
  v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v58.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v58.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  memset(&v56, 0, sizeof(v56));
  v25 = *(unsigned __int8 **)(a1 + 88);
  v26 = *(unsigned __int8 **)(a1 + 96);
  if (v25 == v26)
  {
    size = 0;
    v30 = 0;
    v28 = 0;
  }
  else
  {
    do
    {
      v27 = *v25;
      if (v27 > 0x1F)
      {
        std::string::push_back(&v56, v27);
      }
      else
      {
        v63 = 0;
        *(_QWORD *)__str = 0;
        snprintf(__str, 9uLL, "<U+%.4X>", v27);
        std::string::append(&v56, __str);
      }
      ++v25;
    }
    while (v25 != v26);
    v28 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    size = v56.__r_.__value_.__l.__size_;
    v30 = v56.__r_.__value_.__r.__words[0];
  }
  if ((v28 & 0x80u) == 0)
    v37 = &v56;
  else
    v37 = (std::string *)v30;
  if ((v28 & 0x80u) == 0)
    v38 = v28;
  else
    v38 = size;
  v39 = std::string::append(&v58, (const std::string::value_type *)v37, v38);
  v40 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
  v59.__r_.__value_.__r.__words[2] = v39->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v59.__r_.__value_.__l.__data_ = v40;
  v39->__r_.__value_.__l.__size_ = 0;
  v39->__r_.__value_.__r.__words[2] = 0;
  v39->__r_.__value_.__r.__words[0] = 0;
  v41 = std::string::append(&v59, "'");
  v42 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
  v61 = v41->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v42;
  v41->__r_.__value_.__l.__size_ = 0;
  v41->__r_.__value_.__r.__words[2] = 0;
  v41->__r_.__value_.__r.__words[0] = 0;
  if (v61 >= 0)
    v43 = __p;
  else
    v43 = (void **)__p[0];
  if (v61 >= 0)
    v44 = HIBYTE(v61);
  else
    v44 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a4, (const std::string::value_type *)v43, v44);
  if (SHIBYTE(v61) < 0)
  {
    operator delete(__p[0]);
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_65:
      if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_66;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_65;
  }
  operator delete(v59.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v56.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_66:
    if ((SHIBYTE(v58.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_67;
LABEL_74:
    operator delete(v58.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_77;
    goto LABEL_75;
  }
LABEL_73:
  operator delete(v56.__r_.__value_.__l.__data_);
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_74;
LABEL_67:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_77;
LABEL_75:
  v45 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_76:
  operator delete(v45);
LABEL_77:
  if (!a2)
    return;
  if (a2 > 0x10)
    v46 = "unknown token";
  else
    v46 = off_1E60CDDC8[a2 - 1];
  v47 = strlen(v46);
  if (v47 > 0x7FFFFFFFFFFFFFF7)
    sub_1B02D78C4();
  v48 = v47;
  if (v47 >= 0x17)
  {
    v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v47 | 7) != 0x17)
      v50 = v47 | 7;
    v51 = v50 + 1;
    v49 = operator new(v50 + 1);
    v59.__r_.__value_.__l.__size_ = v48;
    v59.__r_.__value_.__r.__words[2] = v51 | 0x8000000000000000;
    v59.__r_.__value_.__r.__words[0] = (std::string::size_type)v49;
    goto LABEL_88;
  }
  *((_BYTE *)&v59.__r_.__value_.__s + 23) = v47;
  v49 = &v59;
  if (v47)
LABEL_88:
    memcpy(v49, v46, v48);
  *((_BYTE *)v49 + v48) = 0;
  v52 = std::string::insert(&v59, 0, "; expected ");
  v53 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
  v61 = v52->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v53;
  v52->__r_.__value_.__l.__size_ = 0;
  v52->__r_.__value_.__r.__words[2] = 0;
  v52->__r_.__value_.__r.__words[0] = 0;
  if (v61 >= 0)
    v54 = __p;
  else
    v54 = (void **)__p[0];
  if (v61 >= 0)
    v55 = HIBYTE(v61);
  else
    v55 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a4, (const std::string::value_type *)v54, v55);
  if ((SHIBYTE(v61) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v59.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_99:
    operator delete(v59.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_99;
}

void sub_1B032E59C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  uint64_t v42;

  if (a42 < 0)
  {
    operator delete(__p);
    if (a35 < 0)
    {
LABEL_5:
      operator delete(a30);
      if (a16 < 0)
      {
LABEL_8:
        operator delete(a11);
        if ((a28 & 0x80000000) == 0)
          goto LABEL_9;
        goto LABEL_12;
      }
LABEL_11:
      if ((a28 & 0x80000000) == 0)
      {
LABEL_9:
        if ((a22 & 0x80000000) == 0)
        {
LABEL_14:
          if (*(char *)(v42 + 23) < 0)
            operator delete(*(void **)v42);
          _Unwind_Resume(a1);
        }
LABEL_13:
        operator delete(a17);
        goto LABEL_14;
      }
LABEL_12:
      operator delete(a23);
      if ((a22 & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_13;
    }
  }
  else if (a35 < 0)
  {
    goto LABEL_5;
  }
  if (a16 < 0)
    goto LABEL_8;
  goto LABEL_11;
}

void sub_1B032E6D0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_1B032E704(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;

  sub_1B03299FC((uint64_t *)(a1 + 144), *(unsigned __int8 *)(a1 + 136));
  v2 = *(_QWORD **)(a1 + 120);
  if (v2 == (_QWORD *)(a1 + 96))
  {
    v3 = 4;
    v2 = (_QWORD *)(a1 + 96);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  v4 = *(void **)(a1 + 56);
  if (v4)
    operator delete(v4);
  v5 = *(void **)(a1 + 32);
  if (v5)
    operator delete(v5);
  v6 = *(void **)(a1 + 8);
  if (v6)
  {
    *(_QWORD *)(a1 + 16) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t sub_1B032E788(uint64_t a1, uint64_t a2)
{
  const void **v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  int v12;
  int v13;
  int v14;
  uint64_t **v15;
  int v16;
  uint64_t **v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v23;
  unsigned __int8 *v24;
  unsigned __int8 *i;
  unsigned int v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *j;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  void *v38[2];
  char v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  void *__p;
  unint64_t v44;
  uint64_t v45;
  char __str[8];
  char v47;
  std::runtime_error v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v44 = 0;
  v45 = 0;
  v4 = (const void **)(a1 + 112);
  v5 = a1 + 40;
  while (2)
  {
    switch(*(_DWORD *)(a1 + 32))
    {
      case 1:
        __str[0] = 1;
        sub_1B0332FA0((unsigned __int8 **)a2, (unsigned __int8 *)__str);
        goto LABEL_24;
      case 2:
        __str[0] = 0;
        sub_1B0332FA0((unsigned __int8 **)a2, (unsigned __int8 *)__str);
        goto LABEL_24;
      case 3:
        *(_QWORD *)__str = 0;
        sub_1B03331D8((unsigned __int8 **)a2);
        goto LABEL_24;
      case 4:
        sub_1B0333620((unsigned __int8 **)a2, (uint64_t)v4);
        goto LABEL_24;
      case 5:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 152);
        sub_1B0333A10((unsigned __int8 **)a2, (uint64_t *)__str);
        goto LABEL_24;
      case 6:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 144);
        sub_1B03333E8((unsigned __int8 **)a2, (uint64_t *)__str);
        goto LABEL_24;
      case 7:
        *(_QWORD *)__str = *(_QWORD *)(a1 + 160);
        sub_1B0332D68((unsigned __int8 **)a2, (uint64_t *)__str);
        goto LABEL_24;
      case 8:
        if (!sub_1B033264C(a2, 0xFFFFFFFFFFFFFFFFLL))
          goto LABEL_76;
        v6 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v6;
        if (v6 == 10)
          goto LABEL_20;
        v7 = v44;
        if (v44 == v45 << 6)
        {
          if ((uint64_t)(v44 + 1) < 0)
            sub_1B02D7758();
          v8 = v45 << 7;
          if (v45 << 7 <= (v44 & 0xFFFFFFFFFFFFFFC0) + 64)
            v8 = (v44 & 0xFFFFFFFFFFFFFFC0) + 64;
          if (v44 <= 0x3FFFFFFFFFFFFFFELL)
            v9 = v8;
          else
            v9 = 0x7FFFFFFFFFFFFFFFLL;
          sub_1B032F5B4((uint64_t)&__p, v9);
          v7 = v44;
        }
        v44 = v7 + 1;
        *(_QWORD *)((char *)__p + ((v7 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v7;
        continue;
      case 9:
        if ((sub_1B03323A0(a2, 0xFFFFFFFFFFFFFFFFLL) & 1) == 0)
        {
LABEL_76:
          v21 = 0;
          goto LABEL_49;
        }
        v10 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v10;
        if (v10 != 11)
        {
          if (v10 != 4)
            goto LABEL_74;
          v17 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8);
          *(_QWORD *)__str = v4;
          *(_QWORD *)(a2 + 32) = sub_1B0331138(v17, v4, (uint64_t)&unk_1B03B0E24, (__int128 **)__str) + 7;
          v18 = sub_1B032B644(v5);
          *(_DWORD *)(a1 + 32) = v18;
          if (v18 != 12)
            goto LABEL_75;
          v19 = v44;
          if (v44 == v45 << 6)
          {
            if ((uint64_t)(v44 + 1) < 0)
              sub_1B02D7758();
            if (v44 > 0x3FFFFFFFFFFFFFFELL)
            {
              v20 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else if (v45 << 7 <= (v44 & 0xFFFFFFFFFFFFFFC0) + 64)
            {
              v20 = (v44 & 0xFFFFFFFFFFFFFFC0) + 64;
            }
            else
            {
              v20 = v45 << 7;
            }
            sub_1B032F5B4((uint64_t)&__p, v20);
            v19 = v44;
          }
          v44 = v19 + 1;
          *(_QWORD *)((char *)__p + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << v19);
          *(_DWORD *)(a1 + 32) = sub_1B032B644(v5);
          continue;
        }
LABEL_20:
        *(_QWORD *)(a2 + 16) -= 8;
LABEL_24:
        v11 = v44;
        if (!v44)
        {
LABEL_48:
          v21 = 1;
          goto LABEL_49;
        }
        while (2)
        {
          if (((*(_QWORD *)((char *)__p + (((v11 - 1) >> 3) & 0x1FFFFFFFFFFFFFF8)) >> (v11 - 1)) & 1) != 0)
          {
            v12 = sub_1B032B644(v5);
            *(_DWORD *)(a1 + 32) = v12;
            if (v12 == 13)
              goto LABEL_36;
            if (v12 != 10)
            {
              v31 = *(_QWORD *)(a1 + 64);
              sub_1B032DB94(v5, &v42);
              v40 = *(_OWORD *)(a1 + 64);
              v41 = *(_QWORD *)(a1 + 80);
              sub_1B02DCBB8(v36, "array");
              sub_1B032DFC4(a1, 0xAu, (uint64_t)v36, (uint64_t)v38);
              sub_1B032DC78(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)__str);
              v32 = sub_1B032F2AC(a2, v31, (uint64_t)&v42, (uint64_t)__str);
              goto LABEL_66;
            }
LABEL_31:
            *(_QWORD *)(a2 + 16) -= 8;
            v11 = --v44;
            if (!v44)
              goto LABEL_48;
            continue;
          }
          break;
        }
        v13 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v13;
        if (v13 != 13)
        {
          if (v13 != 11)
          {
            v33 = *(_QWORD *)(a1 + 64);
            sub_1B032DB94(v5, &v42);
            v40 = *(_OWORD *)(a1 + 64);
            v41 = *(_QWORD *)(a1 + 80);
            sub_1B02DCBB8(v36, "object");
            sub_1B032DFC4(a1, 0xBu, (uint64_t)v36, (uint64_t)v38);
            sub_1B032DC78(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)__str);
            v32 = sub_1B032F2AC(a2, v33, (uint64_t)&v42, (uint64_t)__str);
            goto LABEL_66;
          }
          goto LABEL_31;
        }
        v14 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v14;
        if (v14 != 4)
        {
LABEL_74:
          v34 = *(_QWORD *)(a1 + 64);
          sub_1B032DB94(v5, &v42);
          v40 = *(_OWORD *)(a1 + 64);
          v41 = *(_QWORD *)(a1 + 80);
          sub_1B02DCBB8(v36, "object key");
          sub_1B032DFC4(a1, 4u, (uint64_t)v36, (uint64_t)v38);
          sub_1B032DC78(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)__str);
          v32 = sub_1B032F2AC(a2, v34, (uint64_t)&v42, (uint64_t)__str);
          goto LABEL_66;
        }
        v15 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8);
        *(_QWORD *)__str = v4;
        *(_QWORD *)(a2 + 32) = sub_1B0331138(v15, v4, (uint64_t)&unk_1B03B0E24, (__int128 **)__str) + 7;
        v16 = sub_1B032B644(v5);
        *(_DWORD *)(a1 + 32) = v16;
        if (v16 == 12)
        {
LABEL_36:
          *(_DWORD *)(a1 + 32) = sub_1B032B644(v5);
          continue;
        }
LABEL_75:
        v35 = *(_QWORD *)(a1 + 64);
        sub_1B032DB94(v5, &v42);
        v40 = *(_OWORD *)(a1 + 64);
        v41 = *(_QWORD *)(a1 + 80);
        sub_1B02DCBB8(v36, "object separator");
        sub_1B032DFC4(a1, 0xCu, (uint64_t)v36, (uint64_t)v38);
        sub_1B032DC78(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)__str);
        v32 = sub_1B032F2AC(a2, v35, (uint64_t)&v42, (uint64_t)__str);
LABEL_66:
        v21 = v32;
        *(_QWORD *)__str = &unk_1E60CD110;
        std::runtime_error::~runtime_error(&v48);
        std::exception::~exception((std::exception *)__str);
        if (v39 < 0)
        {
          operator delete(v38[0]);
          if (v37 < 0)
            goto LABEL_71;
LABEL_68:
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
LABEL_72:
            operator delete(v42.__r_.__value_.__l.__data_);
        }
        else
        {
          if ((v37 & 0x80000000) == 0)
            goto LABEL_68;
LABEL_71:
          operator delete(v36[0]);
          if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
            goto LABEL_72;
        }
LABEL_49:
        if (__p)
          operator delete(__p);
        return v21;
      case 0xE:
        v23 = *(_QWORD *)(a1 + 64);
        memset(&v42, 0, sizeof(v42));
        v24 = *(unsigned __int8 **)(a1 + 88);
        for (i = *(unsigned __int8 **)(a1 + 96); v24 != i; ++v24)
        {
          v26 = *v24;
          if (v26 > 0x1F)
          {
            std::string::push_back(&v42, v26);
          }
          else
          {
            v47 = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v26);
            std::string::append(&v42, __str);
          }
        }
        v40 = *(_OWORD *)(a1 + 64);
        v41 = *(_QWORD *)(a1 + 80);
        v37 = 5;
        strcpy((char *)v36, "value");
        sub_1B032DFC4(a1, 0, (uint64_t)v36, (uint64_t)v38);
        sub_1B032DC78(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)__str);
        v32 = sub_1B032F2AC(a2, v23, (uint64_t)&v42, (uint64_t)__str);
        goto LABEL_66;
      default:
        v27 = *(_QWORD *)(a1 + 64);
        memset(&v42, 0, sizeof(v42));
        v28 = *(unsigned __int8 **)(a1 + 88);
        for (j = *(unsigned __int8 **)(a1 + 96); v28 != j; ++v28)
        {
          v30 = *v28;
          if (v30 > 0x1F)
          {
            std::string::push_back(&v42, v30);
          }
          else
          {
            v47 = 0;
            *(_QWORD *)__str = 0;
            snprintf(__str, 9uLL, "<U+%.4X>", v30);
            std::string::append(&v42, __str);
          }
        }
        v40 = *(_OWORD *)(a1 + 64);
        v41 = *(_QWORD *)(a1 + 80);
        v37 = 5;
        strcpy((char *)v36, "value");
        sub_1B032DFC4(a1, 0x10u, (uint64_t)v36, (uint64_t)v38);
        sub_1B032DC78(101, (uint64_t *)&v40, (uint64_t)v38, (uint64_t)__str);
        v32 = sub_1B032F2AC(a2, v27, (uint64_t)&v42, (uint64_t)__str);
        goto LABEL_66;
    }
  }
}

void sub_1B032F084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33)
{
  std::runtime_error *v33;
  uint64_t v34;
  void *v36;

  *(_QWORD *)(v34 - 128) = &unk_1E60CD110;
  std::runtime_error::~runtime_error(v33 + 1);
  std::exception::~exception((std::exception *)(v34 - 128));
  if (a22 < 0)
  {
    operator delete(__p);
    if ((a16 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a16 & 0x80000000) == 0)
  {
LABEL_3:
    if (a32 < 0)
      goto LABEL_4;
    goto LABEL_8;
  }
  operator delete(a11);
  if (a32 < 0)
  {
LABEL_4:
    operator delete(a27);
    v36 = a33;
    if (a33)
    {
LABEL_10:
      operator delete(v36);
      _Unwind_Resume(a1);
    }
LABEL_9:
    _Unwind_Resume(a1);
  }
LABEL_8:
  v36 = a33;
  if (a33)
    goto LABEL_10;
  goto LABEL_9;
}

uint64_t sub_1B032F2AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void *exception;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  *(_BYTE *)(a1 + 40) = 1;
  if (*(_BYTE *)(a1 + 41))
  {
    switch(~(100 * (*(_DWORD *)(a4 + 8) / 100 / 100)) + *(_DWORD *)(a4 + 8) / 100)
    {
      case 0:
        exception = __cxa_allocate_exception(0x28uLL);
        v6 = (void *)sub_1B0331FD0((uint64_t)exception, a4);
        __cxa_throw(v6, (struct type_info *)&unk_1E60CB448, (void (*)(void *))sub_1B032E6D0);
      case 1:
        v7 = __cxa_allocate_exception(0x20uLL);
        v8 = (void *)sub_1B0332084((uint64_t)v7, a4);
        __cxa_throw(v8, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
      case 2:
        v9 = __cxa_allocate_exception(0x20uLL);
        v10 = (void *)sub_1B03320D8((uint64_t)v9, a4);
        __cxa_throw(v10, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
      case 3:
        v11 = __cxa_allocate_exception(0x20uLL);
        v12 = (void *)sub_1B0332030((uint64_t)v11, a4);
        __cxa_throw(v12, (struct type_info *)&unk_1E60CB460, (void (*)(void *))sub_1B03304CC);
      case 4:
        v13 = __cxa_allocate_exception(0x20uLL);
        v14 = (void *)sub_1B033212C((uint64_t)v13, a4);
        __cxa_throw(v14, (struct type_info *)&unk_1E60CB430, (void (*)(void *))sub_1B032A874);
      default:
        return 0;
    }
  }
  return 0;
}

uint64_t sub_1B032F3EC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  *(_QWORD *)a1 = a2;
  *(_OWORD *)(a1 + 8) = 0u;
  v6 = a1 + 32;
  v7 = a1 + 96;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_BYTE *)(a1 + 88) = 0;
  v8 = *(_QWORD *)(a3 + 24);
  if (!v8)
    goto LABEL_4;
  if (v8 != a3)
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
LABEL_4:
    *(_QWORD *)(a1 + 120) = v8;
    goto LABEL_6;
  }
  *(_QWORD *)(a1 + 120) = v7;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24), v7);
LABEL_6:
  *(_QWORD *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 128) = a4;
  *(_BYTE *)(a1 + 136) = 8;
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  if (v9 == v10 << 6)
  {
    if ((uint64_t)(v9 + 1) < 0)
      sub_1B02D7758();
    v11 = v10 << 7;
    if (v11 <= (v9 & 0xFFFFFFFFFFFFFFC0) + 64)
      v11 = (v9 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v9 <= 0x3FFFFFFFFFFFFFFELL)
      v12 = v11;
    else
      v12 = 0x7FFFFFFFFFFFFFFFLL;
    sub_1B032F5B4(v6, v12);
    v9 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v9 + 1;
  *(_QWORD *)(*(_QWORD *)(a1 + 32) + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v9;
  return a1;
}

void sub_1B032F514(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;
  void *v7;

  v5 = *(void **)(v1 + 56);
  if (v5)
  {
    operator delete(v5);
    v6 = *v2;
    if (!*v2)
    {
LABEL_3:
      v7 = *v3;
      if (!*v3)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else
  {
    v6 = *v2;
    if (!*v2)
      goto LABEL_3;
  }
  operator delete(v6);
  v7 = *v3;
  if (!*v3)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  *(_QWORD *)(v1 + 16) = v7;
  operator delete(v7);
  _Unwind_Resume(exception_object);
}

void sub_1B032F5B4(uint64_t a1, unint64_t a2)
{
  unint64_t v3;
  uint64_t *v4;
  _QWORD *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  int v10;
  _QWORD *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 > *(_QWORD *)(a1 + 16) << 6)
  {
    if ((a2 & 0x8000000000000000) != 0)
      sub_1B02D7758();
    v3 = ((a2 - 1) >> 6) + 1;
    v4 = (uint64_t *)operator new(8 * v3);
    v5 = *(_QWORD **)a1;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = v6 & 0x3F;
    v8 = (v6 - 1) >> 6;
    if (v6 < 0x41)
      v8 = 0;
    v4[v8] = 0;
    if (v6 > 0x3F || (v6 & 0x3F) != 0)
    {
      v9 = 0;
      v10 = 0;
      v11 = &v5[v6 >> 6];
      v12 = v4;
      v13 = v5;
      do
      {
        v14 = 1 << v9;
        if (((*v13 >> v10) & 1) != 0)
          v15 = *v12 | v14;
        else
          v15 = *v12 & ~v14;
        *v12 = v15;
        v13 += v10 == 63;
        if (v10 == 63)
          v10 = 0;
        else
          ++v10;
        v12 += v9 == 63;
        if (v9 == 63)
          v9 = 0;
        else
          ++v9;
      }
      while (v10 != v7 || v13 != v11);
    }
    *(_QWORD *)a1 = v4;
    *(_QWORD *)(a1 + 16) = v3;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1B032F6B4(uint64_t a1, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  void *exception;
  std::string *v44;
  __int128 v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;

  v3 = (char **)(a1 + 8);
  LODWORD(v47) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v46.__r_.__value_.__s.__data_[0] = 0;
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    sub_1B03029C8();
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v47, &v46, a1 + 136);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0)
      sub_1B02D7758();
    v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64)
      v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    sub_1B032F5B4(a1 + 32, v10);
    v7 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v7 + 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v7 >> 6;
  v13 = 1 << v7;
  if (v6)
    v14 = *(_QWORD *)(v11 + 8 * v12) | v13;
  else
    v14 = *(_QWORD *)(v11 + 8 * v12) & ~v13;
  *(_QWORD *)(v11 + 8 * v12) = v14;
  LOBYTE(v47) = 1;
  sub_1B0330500((unsigned __int8 **)a1, (char *)&v47, 1);
  v16 = v15;
  v18 = *(char **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(_QWORD *)v18 = v15;
    v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  v20 = *v3;
  v21 = v18 - *v3;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    sub_1B032A0E8();
  v24 = v17 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      sub_1B02D72AC();
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v16;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v18 - v20);
    if (v18 == v20)
      goto LABEL_33;
    goto LABEL_26;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_49;
    if ((unint64_t)(v18 - v26 - v21) < 0x20)
      goto LABEL_49;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v18[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v18 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v38 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v27 = v38;
      }
      while (v18 != v20);
    }
    v18 = *v3;
  }
LABEL_33:
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v28;
  if (v18)
    operator delete(v18);
LABEL_35:
  *(_QWORD *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    v39 = *(char **)(v19 - 8);
    if (v39)
    {
      v40 = *v39;
      if (v40 > 2)
        v41 = 1;
      else
        v41 = qword_1B03B0E28[v40];
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v46, a2);
        v44 = std::string::insert(&v46, 0, "excessive object size: ");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v48 = v44->__r_.__value_.__r.__words[2];
        v47 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        sub_1B0330348(408, (uint64_t)&v47, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_1E60CB460, (void (*)(void *))sub_1B03304CC);
      }
    }
  }
  return 1;
}

void sub_1B032F9C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B032FA24(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  unsigned __int8 *v18;
  unsigned __int8 *v20;
  __int128 v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned __int8 *v27;
  _BYTE v28[24];
  _BYTE v29[8];
  uint64_t v30;

  v2 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v2 - 8))
  {
    LODWORD(v27) = ((unint64_t)(v2 - *(_QWORD *)(a1 + 8)) >> 3) - 1;
    LOBYTE(v23) = 1;
    v3 = *(_QWORD *)(a1 + 120);
    if (!v3)
      sub_1B03029C8();
    if (((*(uint64_t (**)(uint64_t, unsigned __int8 **, unsigned __int8 **))(*(_QWORD *)v3 + 48))(v3, &v27, &v23) & 1) == 0)
    {
      sub_1B0333E08((uint64_t)v29, (unsigned __int8 *)(a1 + 136));
      v4 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
      v5 = *v4;
      *v4 = v29[0];
      v29[0] = v5;
      v6 = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = v30;
      v30 = v6;
      sub_1B03299FC(&v30, v5);
    }
  }
  v8 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v9 = v7 - 8;
  *(_QWORD *)(a1 + 16) = v7 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v8 != v7 - 8)
  {
    v10 = *(_QWORD *)(v7 - 16);
    if (v10)
    {
      if (*(_BYTE *)v10 == 1)
      {
        v27 = (unsigned __int8 *)v10;
        *(_OWORD *)&v28[8] = xmmword_1B03AFE30;
        *(_QWORD *)v28 = **(_QWORD **)(v10 + 8);
        while (1)
        {
          v11 = *(unsigned __int8 **)(v9 - 8);
          v24 = 0;
          v25 = 0;
          v23 = v11;
          v26 = 0x8000000000000000;
          v12 = *v11;
          if (v12 == 2)
          {
            v25 = *(_QWORD *)(*((_QWORD *)v11 + 1) + 8);
            if (sub_1B0330C48(&v27, &v23))
              return 1;
          }
          else if (v12 == 1)
          {
            v24 = *((_QWORD *)v11 + 1) + 8;
            if (sub_1B0330C48(&v27, &v23))
              return 1;
          }
          else
          {
            v26 = 1;
            if (sub_1B0330C48(&v27, &v23))
              return 1;
          }
          if (*sub_1B033077C(&v27) == 8)
            break;
          v13 = *v27;
          if (v13 == 2)
          {
            *(_QWORD *)&v28[8] += 16;
            v9 = *(_QWORD *)(a1 + 16);
          }
          else if (v13 == 1)
          {
            v14 = *(_QWORD **)v28;
            v15 = *(_QWORD **)(*(_QWORD *)v28 + 8);
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = (_QWORD *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v14[2];
                v17 = *v16 == (_QWORD)v14;
                v14 = v16;
              }
              while (!v17);
            }
            *(_QWORD *)v28 = v16;
            v9 = *(_QWORD *)(a1 + 16);
          }
          else
          {
            ++*(_QWORD *)&v28[16];
            v9 = *(_QWORD *)(a1 + 16);
          }
        }
        v18 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
        v20 = v27;
        v21 = *(_OWORD *)v28;
        v22 = *(_QWORD *)&v28[16];
        sub_1B0330874(v18, &v20, &v23);
      }
    }
  }
  return 1;
}

uint64_t sub_1B032FC84(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t **v16;
  uint64_t **v17;
  int v18;
  uint64_t v19;
  _BYTE v21[8];
  uint64_t *v22;
  unsigned __int8 v23[8];
  uint64_t v24;
  char v25;
  __int128 *v26;

  v23[0] = 3;
  v4 = operator new(0x18uLL);
  v5 = (uint64_t)v4;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(v4, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v4 = *(_OWORD *)a2;
    v4[2] = *(_QWORD *)(a2 + 16);
  }
  v24 = v5;
  LODWORD(v26) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v25 = 4;
  v6 = *(_QWORD *)(a1 + 120);
  if (!v6)
    sub_1B03029C8();
  v7 = (*(uint64_t (**)(uint64_t, __int128 **, char *, unsigned __int8 *))(*(_QWORD *)v6 + 48))(v6, &v26, &v25, v23);
  v8 = *(_QWORD *)(a1 + 64);
  v9 = *(_QWORD *)(a1 + 72);
  if (v8 == v9 << 6)
  {
    if ((uint64_t)(v8 + 1) < 0)
      sub_1B02D7758();
    v10 = v9 << 7;
    if (v10 <= (v8 & 0xFFFFFFFFFFFFFFC0) + 64)
      v10 = (v8 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v8 <= 0x3FFFFFFFFFFFFFFELL)
      v11 = v10;
    else
      v11 = 0x7FFFFFFFFFFFFFFFLL;
    sub_1B032F5B4(a1 + 56, v11);
    v8 = *(_QWORD *)(a1 + 64);
  }
  *(_QWORD *)(a1 + 64) = v8 + 1;
  v12 = *(_QWORD *)(a1 + 56);
  v13 = v8 >> 6;
  v14 = 1 << v8;
  v15 = 8 * v13;
  if ((v7 & 1) != 0)
  {
    *(_QWORD *)(v12 + v15) |= v14;
    if (*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8))
    {
      sub_1B0333E08((uint64_t)v21, (unsigned __int8 *)(a1 + 136));
      v16 = *(uint64_t ***)(*(_QWORD *)(*(_QWORD *)(a1 + 16) - 8) + 8);
      v26 = (__int128 *)a2;
      v17 = sub_1B0331138(v16, (const void **)a2, (uint64_t)&unk_1B03B0E24, &v26);
      v18 = *((unsigned __int8 *)v17 + 56);
      v17 += 7;
      *(_BYTE *)v17 = v21[0];
      v21[0] = v18;
      v19 = (uint64_t)v17[1];
      v17[1] = v22;
      v22 = (uint64_t *)v19;
      *(_QWORD *)(a1 + 80) = v17;
      sub_1B03299FC((uint64_t *)&v22, v18);
    }
  }
  else
  {
    *(_QWORD *)(v12 + v15) &= ~v14;
  }
  sub_1B03299FC(&v24, v23[0]);
  return 1;
}

void sub_1B032FE4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t *v11;

  sub_1B03299FC(&a10, a9);
  sub_1B03299FC(v11, a11);
  _Unwind_Resume(a1);
}

void sub_1B032FE74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B032FE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11)
{
  uint64_t *v11;

  sub_1B03299FC(v11, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1B032FEA0(uint64_t a1, unint64_t a2)
{
  char **v3;
  uint64_t v4;
  int v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  _BYTE *v26;
  _QWORD *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char *v39;
  unint64_t v40;
  unint64_t v41;
  void *exception;
  std::string *v44;
  __int128 v45;
  std::string v46;
  __int128 v47;
  std::string::size_type v48;

  v3 = (char **)(a1 + 8);
  LODWORD(v47) = (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3;
  v46.__r_.__value_.__s.__data_[0] = 2;
  v4 = *(_QWORD *)(a1 + 120);
  if (!v4)
    sub_1B03029C8();
  v6 = (*(uint64_t (**)(uint64_t, __int128 *, std::string *, uint64_t))(*(_QWORD *)v4 + 48))(v4, &v47, &v46, a1 + 136);
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(_QWORD *)(a1 + 48);
  if (v7 == v8 << 6)
  {
    if ((uint64_t)(v7 + 1) < 0)
      sub_1B02D7758();
    v9 = v8 << 7;
    if (v9 <= (v7 & 0xFFFFFFFFFFFFFFC0) + 64)
      v9 = (v7 & 0xFFFFFFFFFFFFFFC0) + 64;
    if (v7 <= 0x3FFFFFFFFFFFFFFELL)
      v10 = v9;
    else
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    sub_1B032F5B4(a1 + 32, v10);
    v7 = *(_QWORD *)(a1 + 40);
  }
  *(_QWORD *)(a1 + 40) = v7 + 1;
  v11 = *(_QWORD *)(a1 + 32);
  v12 = v7 >> 6;
  v13 = 1 << v7;
  if (v6)
    v14 = *(_QWORD *)(v11 + 8 * v12) | v13;
  else
    v14 = *(_QWORD *)(v11 + 8 * v12) & ~v13;
  *(_QWORD *)(v11 + 8 * v12) = v14;
  LOBYTE(v47) = 2;
  sub_1B0330500((unsigned __int8 **)a1, (char *)&v47, 1);
  v16 = v15;
  v18 = *(char **)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  if ((unint64_t)v18 < v17)
  {
    *(_QWORD *)v18 = v15;
    v19 = (uint64_t)(v18 + 8);
    goto LABEL_35;
  }
  v20 = *v3;
  v21 = v18 - *v3;
  v22 = v21 >> 3;
  v23 = (v21 >> 3) + 1;
  if (v23 >> 61)
    sub_1B032A0E8();
  v24 = v17 - (_QWORD)v20;
  if (v24 >> 2 > v23)
    v23 = v24 >> 2;
  if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
    v25 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v25 = v23;
  if (v25)
  {
    if (v25 >> 61)
      sub_1B02D72AC();
    v26 = operator new(8 * v25);
    v27 = &v26[8 * v22];
    v28 = &v26[8 * v25];
    *v27 = v16;
    v19 = (uint64_t)(v27 + 1);
    v29 = (char *)(v18 - v20);
    if (v18 == v20)
      goto LABEL_33;
    goto LABEL_26;
  }
  v26 = 0;
  v27 = (_QWORD *)(8 * v22);
  v28 = 0;
  *(_QWORD *)(8 * v22) = v15;
  v19 = 8 * v22 + 8;
  v29 = (char *)(v18 - v20);
  if (v18 != v20)
  {
LABEL_26:
    v30 = (unint64_t)(v29 - 8);
    if (v30 < 0x58)
      goto LABEL_49;
    if ((unint64_t)(v18 - v26 - v21) < 0x20)
      goto LABEL_49;
    v31 = (v30 >> 3) + 1;
    v32 = 8 * (v31 & 0x3FFFFFFFFFFFFFFCLL);
    v33 = &v18[-v32];
    v27 = (_QWORD *)((char *)v27 - v32);
    v34 = &v26[8 * v22 - 16];
    v35 = v18 - 16;
    v36 = v31 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v37 = *(_OWORD *)v35;
      *(v34 - 1) = *((_OWORD *)v35 - 1);
      *v34 = v37;
      v34 -= 2;
      v35 -= 32;
      v36 -= 4;
    }
    while (v36);
    v18 = v33;
    if (v31 != (v31 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_49:
      do
      {
        v38 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *--v27 = v38;
      }
      while (v18 != v20);
    }
    v18 = *v3;
  }
LABEL_33:
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v19;
  *(_QWORD *)(a1 + 24) = v28;
  if (v18)
    operator delete(v18);
LABEL_35:
  *(_QWORD *)(a1 + 16) = v19;
  if (a2 != -1)
  {
    v39 = *(char **)(v19 - 8);
    if (v39)
    {
      v40 = *v39;
      if (v40 > 2)
        v41 = 1;
      else
        v41 = qword_1B03B0E28[v40];
      if (v41 < a2)
      {
        exception = __cxa_allocate_exception(0x20uLL);
        std::to_string(&v46, a2);
        v44 = std::string::insert(&v46, 0, "excessive array size: ");
        v45 = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
        v48 = v44->__r_.__value_.__r.__words[2];
        v47 = v45;
        v44->__r_.__value_.__l.__size_ = 0;
        v44->__r_.__value_.__r.__words[2] = 0;
        v44->__r_.__value_.__r.__words[0] = 0;
        sub_1B0330348(408, (uint64_t)&v47, (uint64_t)exception);
        __cxa_throw(exception, (struct type_info *)&unk_1E60CB460, (void (*)(void *))sub_1B03304CC);
      }
    }
  }
  return 1;
}

void sub_1B03301B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B0330214(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE v16[8];
  uint64_t v17;
  char v18;
  int v19;

  v2 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v2 - 8);
  v3 = v2 - 8;
  if (!v4)
  {
    *(_QWORD *)(a1 + 16) = v3;
    goto LABEL_6;
  }
  v19 = ((*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8)) >> 3) - 1;
  v18 = 3;
  v5 = *(_QWORD *)(a1 + 120);
  if (!v5)
    sub_1B03029C8();
  if (((*(uint64_t (**)(uint64_t, int *, char *))(*(_QWORD *)v5 + 48))(v5, &v19, &v18) & 1) != 0)
  {
    *(_QWORD *)(a1 + 16) -= 8;
LABEL_6:
    --*(_QWORD *)(a1 + 40);
    return 1;
  }
  sub_1B0333E08((uint64_t)v16, (unsigned __int8 *)(a1 + 136));
  v7 = *(unsigned __int8 **)(*(_QWORD *)(a1 + 16) - 8);
  v8 = *v7;
  *v7 = v16[0];
  v16[0] = v8;
  v9 = *((_QWORD *)v7 + 1);
  *((_QWORD *)v7 + 1) = v17;
  v17 = v9;
  sub_1B03299FC(&v17, v8);
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v10 - 8;
  --*(_QWORD *)(a1 + 40);
  if (v11 == v10 - 8)
    return 1;
  v12 = *(_QWORD *)(v10 - 16);
  if (*(_BYTE *)v12 != 2)
    return 1;
  v13 = *(_QWORD *)(v12 + 8);
  v14 = *(_QWORD *)(v13 + 8);
  v15 = *(unsigned __int8 *)(v14 - 16);
  v14 -= 16;
  sub_1B03299FC((uint64_t *)(v14 + 8), v15);
  *(_QWORD *)(v13 + 8) = v14;
  return 1;
}

void sub_1B0330348(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 12;
  strcpy((char *)__p, "out_of_range");
  sub_1B032A8A8(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &unk_1E60CD110;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &unk_1E60CD098;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1B033047C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B03304CC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

uint64_t sub_1B0330500(unsigned __int8 **a1, char *a2, char a3)
{
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  _QWORD *v25;
  _BYTE *v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31[8];
  _QWORD *v32;
  char v33;
  int v34;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v31[0] = *a2;
    switch(v31[0])
    {
      case 1:
        v24 = operator new(0x18uLL);
        v24[2] = 0;
        v24[1] = 0;
        *v24 = v24 + 1;
        v32 = v24;
        break;
      case 2:
        v25 = operator new(0x18uLL);
        v25[1] = 0;
        v25[2] = 0;
        *v25 = 0;
        v32 = v25;
        break;
      case 3:
        v26 = operator new(0x18uLL);
        v26[23] = 0;
        *v26 = 0;
        v32 = v26;
        break;
      case 4:
        LOBYTE(v32) = 0;
        break;
      default:
        v32 = 0;
        break;
    }
    if ((a3 & 1) != 0)
      goto LABEL_7;
    v34 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v33 = 5;
    v5 = a1[15];
    if (!v5)
      sub_1B03029C8();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v34, &v33, v31) & 1) != 0)
    {
LABEL_7:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v31[0];
        v13 = (uint64_t)v32;
        v31[0] = 0;
        v32 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v29 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v30 = v16;
        sub_1B03299FC(&v30, v15);
LABEL_23:
        v11 = 1;
        goto LABEL_24;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_1B032A150((void **)v8, v31);
          }
          else
          {
            *(_BYTE *)v9 = v31[0];
            *(_QWORD *)(v9 + 8) = v32;
            v31[0] = 0;
            v32 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_23;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v31[0];
          v20 = (uint64_t)v32;
          v31[0] = 0;
          v32 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v28 = v23;
          sub_1B03299FC(&v28, v22);
          goto LABEL_23;
        }
      }
    }
    v11 = 0;
LABEL_24:
    sub_1B03299FC((uint64_t *)&v32, v31[0]);
    return v11;
  }
  return 0;
}

void sub_1B0330764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_1B03299FC(v14, a14);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B033077C(unsigned __int8 **a1)
{
  unsigned __int8 *result;
  int v3;
  void *exception;
  _QWORD v5[3];

  result = *a1;
  v3 = *result;
  if (v3 == 2)
    return a1[2];
  if (v3 == 1)
    return a1[1] + 56;
  if (a1[3])
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B02DCBB8(v5, "cannot get value");
    sub_1B0330D48(214, (uint64_t)v5, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
  }
  return result;
}

void sub_1B0330838(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_1B0330874(unsigned __int8 *a1@<X0>, unsigned __int8 **a2@<X1>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 **v5;
  int v6;
  unsigned __int8 **v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  unsigned __int8 v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned __int8 *v21;
  BOOL v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  void *exception;
  void *v27;
  void *v28;
  unint64_t v29;
  char *v30;
  std::string *v31;
  __int128 v32;
  std::string v33;
  __int128 v34;
  std::string::size_type v35;

  if (*a2 != a1)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B02DCBB8(&v34, "iterator does not fit current value");
    sub_1B0330D48(202, (uint64_t)&v34, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
  }
  a3[1] = 0;
  v5 = a3 + 1;
  *a3 = a1;
  a3[2] = 0;
  a3[3] = (unsigned __int8 *)0x8000000000000000;
  v6 = *a1;
  if (v6 == 2)
  {
    v11 = *((_QWORD *)a1 + 1);
    v12 = *(unsigned __int8 **)(v11 + 8);
    a3[2] = v12;
    v13 = a2[2];
    v14 = v13 + 16;
    if (v13 + 16 == v12)
    {
      v19 = (uint64_t *)a2[2];
      if (v12 == v13)
      {
LABEL_29:
        *(_QWORD *)(v11 + 8) = v19;
        a3[2] = v13;
        return;
      }
    }
    else
    {
      do
      {
        v15 = *v14;
        v16 = *((_QWORD *)v14 + 1);
        *v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        v17 = *(v14 - 16);
        *(v14 - 16) = v15;
        LOBYTE(v34) = v17;
        v18 = *((_QWORD *)v14 - 1);
        *((_QWORD *)v14 - 1) = v16;
        *((_QWORD *)&v34 + 1) = v18;
        sub_1B03299FC((uint64_t *)&v34 + 1, v17);
        v14 += 16;
      }
      while (v14 != v12);
      v12 = *(unsigned __int8 **)(v11 + 8);
      v19 = (uint64_t *)(v14 - 16);
      if (v12 == (unsigned __int8 *)v19)
        goto LABEL_29;
    }
    v24 = (uint64_t *)(v12 - 8);
    do
    {
      v25 = v24 - 1;
      sub_1B03299FC(v24, *((unsigned __int8 *)v24 - 8));
      v24 -= 2;
    }
    while (v25 != v19);
    goto LABEL_29;
  }
  if (v6 == 1)
  {
    v7 = (unsigned __int8 **)*((_QWORD *)a1 + 1);
    *v5 = (unsigned __int8 *)(v7 + 1);
    v8 = a2[1];
    v9 = (unsigned __int8 *)*((_QWORD *)v8 + 1);
    if (v9)
    {
      do
      {
        v10 = v9;
        v9 = *(unsigned __int8 **)v9;
      }
      while (v9);
    }
    else
    {
      v21 = a2[1];
      do
      {
        v10 = (unsigned __int8 *)*((_QWORD *)v21 + 2);
        v22 = *(_QWORD *)v10 == (_QWORD)v21;
        v21 = v10;
      }
      while (!v22);
    }
    if (*v7 == v8)
      *v7 = v10;
    v23 = (uint64_t *)v7[1];
    --v7[2];
    sub_1B030FB54(v23, (uint64_t *)v8);
    sub_1B03299FC((uint64_t *)v8 + 8, v8[56]);
    if ((char)v8[55] < 0)
      operator delete(*((void **)v8 + 4));
    operator delete(v8);
    *v5 = v10;
  }
  else
  {
    a3[3] = (unsigned __int8 *)1;
    if ((v6 - 3) > 4)
    {
      v28 = __cxa_allocate_exception(0x20uLL);
      v29 = (char)*a1;
      if (v29 > 8)
        v30 = "number";
      else
        v30 = off_1E60CDE48[v29];
      sub_1B02DCBB8(&v33, v30);
      v31 = std::string::insert(&v33, 0, "cannot use erase() with ");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v35 = v31->__r_.__value_.__r.__words[2];
      v34 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      sub_1B0330F3C(307, (uint64_t)&v34, (uint64_t)v28);
      __cxa_throw(v28, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
    }
    if (a2[3])
    {
      v27 = __cxa_allocate_exception(0x20uLL);
      sub_1B02DCBB8(&v34, "iterator out of range");
      sub_1B0330D48(205, (uint64_t)&v34, (uint64_t)v27);
      __cxa_throw(v27, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
    }
    if (v6 == 3)
    {
      v20 = *((_QWORD *)a1 + 1);
      if (*(char *)(v20 + 23) < 0)
      {
        operator delete(*(void **)v20);
        v20 = *((_QWORD *)a1 + 1);
      }
      operator delete((void *)v20);
      *((_QWORD *)a1 + 1) = 0;
    }
    *a1 = 0;
  }
}

void sub_1B0330BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  char v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  if ((v22 & 1) != 0)
    __cxa_free_exception(v21);
  _Unwind_Resume(exception_object);
}

BOOL sub_1B0330C48(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B02DCBB8(v7, "cannot compare iterators of different containers");
    sub_1B0330D48(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1B0330D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

void sub_1B0330D48(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  char __p[17];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 16;
  strcpy(__p, "invalid_iterator");
  sub_1B032A8A8(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(*(void **)__p);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &unk_1E60CD110;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &unk_1E60CD0C0;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1B0330E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B0330EC0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B0330EF4(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0330F3C(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  const std::string::value_type *v7;
  std::string::size_type v8;
  std::string *v9;
  __int128 v10;
  void **v11;
  void *__p[2];
  char v13;
  std::string v14;
  void *v15[2];
  int64_t v16;

  v13 = 10;
  strcpy((char *)__p, "type_error");
  sub_1B032A8A8(a1, &v14);
  v6 = *(char *)(a2 + 23);
  if (v6 >= 0)
    v7 = (const std::string::value_type *)a2;
  else
    v7 = *(const std::string::value_type **)a2;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a2 + 23);
  else
    v8 = *(_QWORD *)(a2 + 8);
  v9 = std::string::append(&v14, v7, v8);
  v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v16 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)v15 = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v14.__r_.__value_.__l.__data_);
    if ((v13 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_9:
  if (v16 >= 0)
    v11 = v15;
  else
    v11 = (void **)v15[0];
  *(_QWORD *)a3 = &unk_1E60CD110;
  *(_DWORD *)(a3 + 8) = a1;
  std::runtime_error::runtime_error((std::runtime_error *)(a3 + 16), (const char *)v11);
  *(_QWORD *)a3 = &unk_1E60CD020;
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_1B033106C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::exception *v26;

  std::exception::~exception(v26);
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B03310BC(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
}

void sub_1B03310F0(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t **sub_1B0331138(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  char *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (char *)operator new(0x48uLL);
    v24 = v23 + 32;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1B02EB0A8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      *((_QWORD *)v23 + 6) = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    v23[56] = 0;
    *((_QWORD *)v23 + 8) = 0;
    *(_QWORD *)v23 = 0;
    *((_QWORD *)v23 + 1) = 0;
    *((_QWORD *)v23 + 2) = v11;
    *v7 = (uint64_t *)v23;
    v27 = (uint64_t *)**a1;
    v28 = (uint64_t *)v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_1B02D8180(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1B03312C4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B03312D8(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      sub_1B03299FC((uint64_t *)(v2 + 64), *(unsigned __int8 *)(v2 + 56));
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1B0331330(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0331378(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 7;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_1B03029C8();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_1B03299FC(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_1B032A150((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_1B03299FC(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_1B03299FC(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B0331564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_1B03299FC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B033157C(unsigned __int8 **a1, unsigned __int8 *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 4;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_1B03029C8();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_1B03299FC(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_1B032A150((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_1B03299FC(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_1B03299FC(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B0331768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_1B03299FC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0331780(unsigned __int8 **a1, uint64_t a2, char a3)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unsigned __int8 v18;
  uint64_t v19;
  unsigned __int8 *v20;
  int v21;
  uint64_t v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  char v27[8];
  uint64_t v28;
  char v29;
  int v30;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v27[0] = 0;
    v28 = 0;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v30 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v29 = 5;
    v4 = a1[15];
    if (!v4)
      sub_1B03029C8();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v4 + 48))(v4, &v30, &v29, v27) & 1) != 0)
    {
LABEL_5:
      v5 = a1[2];
      if (a1[1] == v5)
      {
        v11 = v27[0];
        v12 = v28;
        v27[0] = 0;
        v28 = 0;
        v13 = (uint64_t)*a1;
        v14 = **a1;
        *(_BYTE *)v13 = v11;
        v25 = v14;
        v15 = *(_QWORD *)(v13 + 8);
        *(_QWORD *)(v13 + 8) = v12;
        v26 = v15;
        sub_1B03299FC(&v26, v14);
LABEL_17:
        v10 = 1;
        goto LABEL_18;
      }
      v6 = *((_QWORD *)v5 - 1);
      if (v6)
      {
        if (*(_BYTE *)v6 == 2)
        {
          v7 = *(_QWORD *)(v6 + 8);
          v8 = *(_QWORD *)(v7 + 8);
          if (v8 >= *(_QWORD *)(v7 + 16))
          {
            v9 = sub_1B032A150((void **)v7, v27);
          }
          else
          {
            *(_BYTE *)v8 = v27[0];
            *(_QWORD *)(v8 + 8) = v28;
            v27[0] = 0;
            v28 = 0;
            v9 = (char *)(v8 + 16);
          }
          *(_QWORD *)(v7 + 8) = v9;
          goto LABEL_17;
        }
        v16 = (unint64_t)(a1[8] - 1);
        v17 = *(_QWORD *)&a1[7][(v16 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v16;
        if (((v17 >> v16) & 1) != 0)
        {
          v18 = v27[0];
          v19 = v28;
          v27[0] = 0;
          v28 = 0;
          v20 = a1[10];
          v21 = *v20;
          *v20 = v18;
          v22 = *((_QWORD *)v20 + 1);
          *((_QWORD *)v20 + 1) = v19;
          v24 = v22;
          sub_1B03299FC(&v24, v21);
          goto LABEL_17;
        }
      }
    }
    v10 = 0;
LABEL_18:
    sub_1B03299FC(&v28, v27[0]);
    return v10;
  }
  return 0;
}

void sub_1B0331964(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_1B03299FC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B033197C(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 5;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_1B03029C8();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_1B03299FC(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_1B032A150((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_1B03299FC(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_1B03299FC(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B0331B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_1B03299FC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0331B7C(unsigned __int8 **a1, uint64_t a2, char a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  unsigned __int8 v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unsigned __int8 v22;
  uint64_t v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t v26;
  uint64_t v28;
  char v29;
  uint64_t v30;
  char v31[8];
  uint64_t v32;
  char v33;
  int v34;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v31[0] = 3;
    v6 = operator new(0x18uLL);
    v7 = (uint64_t)v6;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1B02EB0A8(v6, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v6 = *(_OWORD *)a2;
      v6[2] = *(_QWORD *)(a2 + 16);
    }
    v32 = v7;
    if ((a3 & 1) != 0)
      goto LABEL_9;
    v34 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v33 = 5;
    v9 = a1[15];
    if (!v9)
      sub_1B03029C8();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v9 + 48))(v9, &v34, &v33, v31) & 1) != 0)
    {
LABEL_9:
      v10 = a1[2];
      if (a1[1] == v10)
      {
        v15 = v31[0];
        v16 = v32;
        v31[0] = 0;
        v32 = 0;
        v17 = (uint64_t)*a1;
        v18 = **a1;
        *(_BYTE *)v17 = v15;
        v29 = v18;
        v19 = *(_QWORD *)(v17 + 8);
        *(_QWORD *)(v17 + 8) = v16;
        v30 = v19;
        sub_1B03299FC(&v30, v18);
LABEL_20:
        v8 = 1;
        goto LABEL_21;
      }
      v11 = *((_QWORD *)v10 - 1);
      if (v11)
      {
        if (*(_BYTE *)v11 == 2)
        {
          v12 = *(_QWORD *)(v11 + 8);
          v13 = *(_QWORD *)(v12 + 8);
          if (v13 >= *(_QWORD *)(v12 + 16))
          {
            v14 = sub_1B032A150((void **)v12, v31);
          }
          else
          {
            *(_BYTE *)v13 = v31[0];
            *(_QWORD *)(v13 + 8) = v32;
            v31[0] = 0;
            v32 = 0;
            v14 = (char *)(v13 + 16);
          }
          *(_QWORD *)(v12 + 8) = v14;
          goto LABEL_20;
        }
        v20 = (unint64_t)(a1[8] - 1);
        v21 = *(_QWORD *)&a1[7][(v20 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v20;
        if (((v21 >> v20) & 1) != 0)
        {
          v22 = v31[0];
          v23 = v32;
          v31[0] = 0;
          v32 = 0;
          v24 = a1[10];
          v25 = *v24;
          *v24 = v22;
          v26 = *((_QWORD *)v24 + 1);
          *((_QWORD *)v24 + 1) = v23;
          v28 = v26;
          sub_1B03299FC(&v28, v25);
          goto LABEL_20;
        }
      }
    }
    v8 = 0;
LABEL_21:
    sub_1B03299FC(&v32, v31[0]);
    return v8;
  }
  return 0;
}

void sub_1B0331DA0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B0331DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_1B03299FC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0331DCC(unsigned __int8 **a1, uint64_t *a2, char a3)
{
  uint64_t v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  char v26;
  uint64_t v27;
  char v28[8];
  uint64_t v29;
  char v30;
  int v31;

  if (((*(_QWORD *)&a1[4][((unint64_t)(a1[5] - 1) >> 3) & 0x1FFFFFFFFFFFFFF8] >> (*((_BYTE *)a1 + 40) - 1)) & 1) != 0)
  {
    v4 = *a2;
    v28[0] = 6;
    v29 = v4;
    if ((a3 & 1) != 0)
      goto LABEL_5;
    v31 = (unint64_t)(a1[2] - a1[1]) >> 3;
    v30 = 5;
    v5 = a1[15];
    if (!v5)
      sub_1B03029C8();
    if (((*(uint64_t (**)(unsigned __int8 *, int *, char *, char *))(*(_QWORD *)v5 + 48))(v5, &v31, &v30, v28) & 1) != 0)
    {
LABEL_5:
      v6 = a1[2];
      if (a1[1] == v6)
      {
        v12 = v28[0];
        v13 = v29;
        v28[0] = 0;
        v29 = 0;
        v14 = (uint64_t)*a1;
        v15 = **a1;
        *(_BYTE *)v14 = v12;
        v26 = v15;
        v16 = *(_QWORD *)(v14 + 8);
        *(_QWORD *)(v14 + 8) = v13;
        v27 = v16;
        sub_1B03299FC(&v27, v15);
LABEL_17:
        v11 = 1;
        goto LABEL_18;
      }
      v7 = *((_QWORD *)v6 - 1);
      if (v7)
      {
        if (*(_BYTE *)v7 == 2)
        {
          v8 = *(_QWORD *)(v7 + 8);
          v9 = *(_QWORD *)(v8 + 8);
          if (v9 >= *(_QWORD *)(v8 + 16))
          {
            v10 = sub_1B032A150((void **)v8, v28);
          }
          else
          {
            *(_BYTE *)v9 = v28[0];
            *(_QWORD *)(v9 + 8) = v29;
            v28[0] = 0;
            v29 = 0;
            v10 = (char *)(v9 + 16);
          }
          *(_QWORD *)(v8 + 8) = v10;
          goto LABEL_17;
        }
        v17 = (unint64_t)(a1[8] - 1);
        v18 = *(_QWORD *)&a1[7][(v17 >> 3) & 0x1FFFFFFFFFFFFFF8];
        a1[8] = (unsigned __int8 *)v17;
        if (((v18 >> v17) & 1) != 0)
        {
          v19 = v28[0];
          v20 = v29;
          v28[0] = 0;
          v29 = 0;
          v21 = a1[10];
          v22 = *v21;
          *v21 = v19;
          v23 = *((_QWORD *)v21 + 1);
          *((_QWORD *)v21 + 1) = v20;
          v25 = v23;
          sub_1B03299FC(&v25, v22);
          goto LABEL_17;
        }
      }
    }
    v11 = 0;
LABEL_18:
    sub_1B03299FC(&v29, v28[0]);
    return v11;
  }
  return 0;
}

void sub_1B0331FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unsigned __int8 a14)
{
  uint64_t *v14;

  sub_1B03299FC(v14, a14);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0331FD0(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E60CD110;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1B5E07960](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1E60CD070;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t sub_1B0332030(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E60CD110;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1B5E07960](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1E60CD098;
  return a1;
}

uint64_t sub_1B0332084(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E60CD110;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1B5E07960](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1E60CD0C0;
  return a1;
}

uint64_t sub_1B03320D8(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E60CD110;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1B5E07960](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1E60CD020;
  return a1;
}

uint64_t sub_1B033212C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = &unk_1E60CD110;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  MEMORY[0x1B5E07960](a1 + 16, a2 + 16);
  *(_QWORD *)a1 = &unk_1E60CD048;
  return a1;
}

void sub_1B0332180(std::runtime_error *a1)
{
  a1->__vftable = (std::runtime_error_vtbl *)&unk_1E60CD110;
  std::runtime_error::~runtime_error(a1 + 1);
  std::exception::~exception(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B03321C8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *p_p;
  std::string::size_type size;
  std::string *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  std::to_string(&v12, *(_QWORD *)(a1 + 16) + 1);
  v4 = std::string::insert(&v12, 0, " at line ");
  v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  v6 = std::string::append(&v13, ", column ");
  v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::to_string(&__p, *(_QWORD *)(a1 + 8));
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  v10 = std::string::append(&v14, (const std::string::value_type *)p_p, size);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_9:
      if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_14;
    }
  }
  else if ((SHIBYTE(v14.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v14.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v13.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_10:
    if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v12.__r_.__value_.__l.__data_);
    return;
  }
LABEL_14:
  operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_15;
}

void sub_1B0332304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v26 - 25) & 0x80000000) == 0)
    {
LABEL_3:
      if ((a26 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v26 - 25) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(v26 - 48));
  if ((a26 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a20 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_9;
  }
LABEL_8:
  operator delete(a21);
  if ((a20 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_9:
  operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03323A0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *exception;
  std::string *v31;
  __int128 v32;
  std::string v33;
  __int128 v34;
  std::string::size_type v35;

  LOBYTE(v34) = 1;
  v4 = sub_1B03328F8((unsigned __int8 **)a1, (unsigned __int8 *)&v34);
  v5 = v4;
  v7 = *(uint64_t **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *v7 = v4;
    v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  v10 = *(char **)(a1 + 8);
  v11 = ((char *)v7 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_1B032A0E8();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_1B02D72AC();
    v15 = (char *)operator new(8 * v14);
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v5;
    v9 = (uint64_t)(v16 + 1);
    v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (uint64_t *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v5;
  v9 = 8 * v11 + 8;
  v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_34;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    v16 = (uint64_t *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v7 - 2;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v26 = *--v8;
        *--v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v17;
  if (v8)
    operator delete(v8);
LABEL_23:
  *(_QWORD *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    v27 = **(char **)(v9 - 8);
    if (v27 > 2)
      v28 = 1;
    else
      v28 = qword_1B03B0E28[v27];
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v33, a2);
      v31 = std::string::insert(&v33, 0, "excessive object size: ");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v35 = v31->__r_.__value_.__r.__words[2];
      v34 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      sub_1B0330348(408, (uint64_t)&v34, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1E60CB460, (void (*)(void *))sub_1B03304CC);
    }
  }
  return 1;
}

void sub_1B03325EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B033264C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void *exception;
  std::string *v31;
  __int128 v32;
  std::string v33;
  __int128 v34;
  std::string::size_type v35;

  LOBYTE(v34) = 2;
  v4 = sub_1B03328F8((unsigned __int8 **)a1, (unsigned __int8 *)&v34);
  v5 = v4;
  v7 = *(uint64_t **)(a1 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v8 = v7;
  if ((unint64_t)v7 < v6)
  {
    *v7 = v4;
    v9 = (uint64_t)(v7 + 1);
    goto LABEL_23;
  }
  v10 = *(char **)(a1 + 8);
  v11 = ((char *)v7 - v10) >> 3;
  v12 = v11 + 1;
  if ((unint64_t)(v11 + 1) >> 61)
    sub_1B032A0E8();
  v13 = v6 - (_QWORD)v10;
  if (v13 >> 2 > v12)
    v12 = v13 >> 2;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
    v14 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 61)
      sub_1B02D72AC();
    v15 = (char *)operator new(8 * v14);
    v16 = (uint64_t *)&v15[8 * v11];
    v17 = &v15[8 * v14];
    *v16 = v5;
    v9 = (uint64_t)(v16 + 1);
    v18 = (char *)((char *)v7 - v10);
    if (v7 == (uint64_t *)v10)
      goto LABEL_21;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (uint64_t *)(8 * v11);
  v17 = 0;
  *(_QWORD *)(8 * v11) = v5;
  v9 = 8 * v11 + 8;
  v18 = (char *)((char *)v7 - v10);
  if (v7 != (uint64_t *)v10)
  {
LABEL_14:
    v19 = (unint64_t)(v18 - 8);
    if (v19 < 0x58)
      goto LABEL_34;
    if ((unint64_t)(v10 - v15) < 0x20)
      goto LABEL_34;
    v20 = (v19 >> 3) + 1;
    v21 = 8 * (v20 & 0x3FFFFFFFFFFFFFFCLL);
    v8 = &v7[v21 / 0xFFFFFFFFFFFFFFF8];
    v16 = (uint64_t *)((char *)v16 - v21);
    v22 = &v15[8 * v11 - 16];
    v23 = v7 - 2;
    v24 = v20 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v25 = *(_OWORD *)v23;
      *((_OWORD *)v22 - 1) = *((_OWORD *)v23 - 1);
      *(_OWORD *)v22 = v25;
      v22 -= 32;
      v23 -= 4;
      v24 -= 4;
    }
    while (v24);
    if (v20 != (v20 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_34:
      do
      {
        v26 = *--v8;
        *--v16 = v26;
      }
      while (v8 != (uint64_t *)v10);
    }
    v8 = *(uint64_t **)(a1 + 8);
  }
LABEL_21:
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v9;
  *(_QWORD *)(a1 + 24) = v17;
  if (v8)
    operator delete(v8);
LABEL_23:
  *(_QWORD *)(a1 + 16) = v9;
  if (a2 != -1)
  {
    v27 = **(char **)(v9 - 8);
    if (v27 > 2)
      v28 = 1;
    else
      v28 = qword_1B03B0E28[v27];
    if (v28 < a2)
    {
      exception = __cxa_allocate_exception(0x20uLL);
      std::to_string(&v33, a2);
      v31 = std::string::insert(&v33, 0, "excessive array size: ");
      v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
      v35 = v31->__r_.__value_.__r.__words[2];
      v34 = v32;
      v31->__r_.__value_.__l.__size_ = 0;
      v31->__r_.__value_.__r.__words[2] = 0;
      v31->__r_.__value_.__r.__words[0] = 0;
      sub_1B0330348(408, (uint64_t)&v34, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1E60CB460, (void (*)(void *))sub_1B03304CC);
    }
  }
  return 1;
}

void sub_1B0332898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B03328F8(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  int v7;
  char *v8;
  unsigned __int8 v9;
  _QWORD *v10;
  unsigned __int8 v11;
  _QWORD *v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  _BYTE *v22;
  _QWORD *v23;
  char v24;
  _QWORD *v25;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    switch(*a2)
    {
      case 1u:
        v10 = operator new(0x18uLL);
        v10[2] = 0;
        v10[1] = 0;
        *v10 = v10 + 1;
        break;
      case 2u:
        v10 = operator new(0x18uLL);
        v10[1] = 0;
        v10[2] = 0;
        *v10 = 0;
        break;
      case 3u:
        v10 = operator new(0x18uLL);
        *((_BYTE *)v10 + 23) = 0;
        *(_BYTE *)v10 = 0;
        break;
      case 4u:
        LOBYTE(v25) = 0;
        v10 = v25;
        break;
      default:
        v10 = 0;
        break;
    }
    v14 = (uint64_t)*a1;
    v15 = **a1;
    *(_BYTE *)v14 = v9;
    v24 = v15;
    v16 = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v14 + 8) = v10;
    v25 = (_QWORD *)v16;
    sub_1B03299FC((uint64_t *)&v25, v15);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_1B0332B8C((char **)v5, a2);
      }
      else
      {
        v7 = *a2;
        *(_BYTE *)v6 = v7;
        switch(v7)
        {
          case 1:
            v20 = operator new(0x18uLL);
            v20[2] = 0;
            v20[1] = 0;
            *v20 = v20 + 1;
            *(_QWORD *)(v6 + 8) = v20;
            v8 = (char *)(v6 + 16);
            break;
          case 2:
            v21 = operator new(0x18uLL);
            v21[1] = 0;
            v21[2] = 0;
            *v21 = 0;
            *(_QWORD *)(v6 + 8) = v21;
            v8 = (char *)(v6 + 16);
            break;
          case 3:
            v22 = operator new(0x18uLL);
            v22[23] = 0;
            *v22 = 0;
            *(_QWORD *)(v6 + 8) = v22;
            v8 = (char *)(v6 + 16);
            break;
          case 4:
            *(_BYTE *)(v6 + 8) = 0;
            v8 = (char *)(v6 + 16);
            break;
          default:
            *(_QWORD *)(v6 + 8) = 0;
            v8 = (char *)(v6 + 16);
            break;
        }
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v11 = *a2;
      switch(*a2)
      {
        case 1u:
          v12 = operator new(0x18uLL);
          v12[2] = 0;
          v12[1] = 0;
          *v12 = v12 + 1;
          break;
        case 2u:
          v12 = operator new(0x18uLL);
          v12[1] = 0;
          v12[2] = 0;
          *v12 = 0;
          break;
        case 3u:
          v12 = operator new(0x18uLL);
          *((_BYTE *)v12 + 23) = 0;
          *(_BYTE *)v12 = 0;
          break;
        case 4u:
          LOBYTE(v23) = 0;
          v12 = v23;
          break;
        default:
          v12 = 0;
          break;
      }
      v17 = a1[4];
      v18 = *v17;
      *v17 = v11;
      v19 = *((_QWORD *)v17 + 1);
      *((_QWORD *)v17 + 1) = v12;
      v23 = (_QWORD *)v19;
      sub_1B03299FC((uint64_t *)&v23, v18);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B0332B8C(char **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  int v13;
  _QWORD *v14;
  char *v15;
  char v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  _QWORD *v21;
  _QWORD *v22;
  _BYTE *v23;
  __int128 v24;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - *a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1B032A0E8();
  v8 = a1[2] - (char *)v4;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_1B02D72AC();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v5];
  v12 = &v10[16 * v9];
  *((_QWORD *)&v24 + 1) = v12;
  v13 = *a2;
  *v11 = v13;
  v14 = v11 + 8;
  switch(v13)
  {
    case 1:
      v21 = operator new(0x18uLL);
      v21[2] = 0;
      v21[1] = 0;
      *v21 = v21 + 1;
      *v14 = v21;
      break;
    case 2:
      v22 = operator new(0x18uLL);
      *v22 = 0;
      v22[1] = 0;
      v22[2] = 0;
      *v14 = v22;
      break;
    case 3:
      v23 = operator new(0x18uLL);
      v23[23] = 0;
      *v23 = 0;
      *v14 = v23;
      break;
    case 4:
      *(_BYTE *)v14 = 0;
      break;
    default:
      *v14 = 0;
      break;
  }
  v15 = v11 + 16;
  *(_QWORD *)&v24 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    if (!v3)
      return v15;
    goto LABEL_19;
  }
  do
  {
    v16 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v16;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v17 = (uint64_t *)a1[1];
  *a1 = v11;
  *(_OWORD *)(a1 + 1) = v24;
  v15 = (char *)v24;
  if (v17 != v3)
  {
    v18 = v17 - 1;
    do
    {
      v19 = v18 - 1;
      sub_1B03299FC(v18, *((unsigned __int8 *)v18 - 8));
      v18 -= 2;
    }
    while (v19 != v3);
  }
  if (v3)
LABEL_19:
    operator delete(v3);
  return v15;
}

void sub_1B0332D54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B032A0FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0332D68(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 7;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_1B03299FC(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_1B0332E7C((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 7;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 7;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_1B03299FC(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B0332E7C(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1B032A0E8();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_1B02D72AC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 7;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_1B03299FC(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

uint64_t sub_1B0332FA0(unsigned __int8 **a1, unsigned __int8 *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 4;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_1B03299FC(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_1B03330B4((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 4;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 4;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_1B03299FC(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B03330B4(void **a1, unsigned __int8 *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1B032A0E8();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_1B02D72AC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 4;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_1B03299FC(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

uint64_t sub_1B03331D8(unsigned __int8 **a1)
{
  unsigned __int8 *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;

  v2 = a1[2];
  if (a1[1] == v2)
  {
    v7 = (uint64_t)*a1;
    v8 = **a1;
    *(_BYTE *)v7 = 0;
    v15 = v8;
    v9 = *(_QWORD *)(v7 + 8);
    *(_QWORD *)(v7 + 8) = 0;
    v16 = v9;
    sub_1B03299FC(&v16, v8);
    return (uint64_t)*a1;
  }
  else
  {
    v3 = *((_QWORD *)v2 - 1);
    if (*(_BYTE *)v3 == 2)
    {
      v4 = *(_QWORD *)(v3 + 8);
      v5 = *(_QWORD *)(v4 + 8);
      if (v5 >= *(_QWORD *)(v4 + 16))
      {
        v6 = sub_1B03332D0((void **)v4);
      }
      else
      {
        *(_BYTE *)v5 = 0;
        *(_QWORD *)(v5 + 8) = 0;
        v6 = (char *)(v5 + 16);
      }
      *(_QWORD *)(v4 + 8) = v6;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v11 = a1[4];
      v12 = *v11;
      *v11 = 0;
      v13 = *((_QWORD *)v11 + 1);
      *((_QWORD *)v11 + 1) = 0;
      v14 = v13;
      sub_1B03299FC(&v14, v12);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B03332D0(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;

  v3 = (uint64_t *)*a1;
  v2 = (uint64_t *)a1[1];
  v4 = ((char *)v2 - (_BYTE *)*a1) >> 4;
  v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) >> 60)
    sub_1B032A0E8();
  v6 = (_BYTE *)a1[2] - (_BYTE *)v3;
  if (v6 >> 3 > v5)
    v5 = v6 >> 3;
  if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF0)
    v5 = 0xFFFFFFFFFFFFFFFLL;
  if (v5 >> 60)
    sub_1B02D72AC();
  v7 = 16 * v5;
  v8 = (char *)operator new(16 * v5);
  v9 = &v8[16 * v4];
  v10 = &v8[v7];
  *v9 = 0;
  *((_QWORD *)v9 + 1) = 0;
  v11 = v9 + 16;
  if (v2 == v3)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (!v2)
      return v11;
    goto LABEL_13;
  }
  do
  {
    v12 = *((_BYTE *)v2 - 16);
    v2 -= 2;
    *(v9 - 16) = v12;
    v9 -= 16;
    *((_QWORD *)v9 + 1) = v2[1];
    *(_BYTE *)v2 = 0;
    v2[1] = 0;
  }
  while (v2 != v3);
  v2 = (uint64_t *)*a1;
  v13 = (uint64_t *)a1[1];
  *a1 = v9;
  a1[1] = v11;
  a1[2] = v10;
  if (v13 != v2)
  {
    v14 = v13 - 1;
    do
    {
      v15 = v14 - 1;
      sub_1B03299FC(v14, *((unsigned __int8 *)v14 - 8));
      v14 -= 2;
    }
    while (v15 != v2);
  }
  if (v2)
LABEL_13:
    operator delete(v2);
  return v11;
}

uint64_t sub_1B03333E8(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 5;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_1B03299FC(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_1B03334FC((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 5;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 5;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_1B03299FC(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B03334FC(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1B032A0E8();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_1B02D72AC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 5;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_1B03299FC(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

uint64_t sub_1B0333620(unsigned __int8 **a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;

  v4 = a1[2];
  if (a1[1] == v4)
  {
    v10 = operator new(0x18uLL);
    v11 = v10;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_1B02EB0A8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)v10 = *(_OWORD *)a2;
      v10[2] = *(_QWORD *)(a2 + 16);
    }
    v15 = (uint64_t)*a1;
    v16 = **a1;
    *(_BYTE *)v15 = 3;
    v23 = v16;
    v17 = *(_QWORD *)(v15 + 8);
    *(_QWORD *)(v15 + 8) = v11;
    v24 = v17;
    sub_1B03299FC(&v24, v16);
    return (uint64_t)*a1;
  }
  else
  {
    v5 = *((_QWORD *)v4 - 1);
    if (*(_BYTE *)v5 == 2)
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v6 + 8);
      if (v7 >= *(_QWORD *)(v6 + 16))
      {
        v14 = sub_1B0333838(v6, a2);
      }
      else
      {
        *(_QWORD *)(v7 + 8) = 0;
        *(_BYTE *)v7 = 3;
        v8 = operator new(0x18uLL);
        v9 = v8;
        if (*(char *)(a2 + 23) < 0)
        {
          sub_1B02EB0A8(v8, *(void **)a2, *(_QWORD *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)v8 = *(_OWORD *)a2;
          v8[2] = *(_QWORD *)(a2 + 16);
        }
        *(_QWORD *)(v7 + 8) = v9;
        v14 = (char *)(v7 + 16);
        *(_QWORD *)(v6 + 8) = v7 + 16;
      }
      *(_QWORD *)(v6 + 8) = v14;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v12 = operator new(0x18uLL);
      v13 = v12;
      if (*(char *)(a2 + 23) < 0)
      {
        sub_1B02EB0A8(v12, *(void **)a2, *(_QWORD *)(a2 + 8));
      }
      else
      {
        *(_OWORD *)v12 = *(_OWORD *)a2;
        v12[2] = *(_QWORD *)(a2 + 16);
      }
      v19 = a1[4];
      v20 = *v19;
      *v19 = 3;
      v21 = *((_QWORD *)v19 + 1);
      *((_QWORD *)v19 + 1) = v13;
      v22 = v21;
      sub_1B03299FC(&v22, v20);
      return (uint64_t)a1[4];
    }
  }
}

void sub_1B03337F0(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;

  operator delete(v2);
  *(_QWORD *)(v1 + 8) = v3;
  _Unwind_Resume(a1);
}

void sub_1B0333808(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B033381C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B0333830(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_1B0333838(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  char *v16;
  char v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  __int128 v22;

  v3 = *(uint64_t **)a1;
  v4 = *(uint64_t **)(a1 + 8);
  v5 = ((uint64_t)v4 - *(_QWORD *)a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1B032A0E8();
  v8 = *(_QWORD *)(a1 + 16) - (_QWORD)v3;
  if (v8 >> 3 > v6)
    v6 = v8 >> 3;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v9 = 0xFFFFFFFFFFFFFFFLL;
  else
    v9 = v6;
  if (v9)
  {
    if (v9 >> 60)
      sub_1B02D72AC();
    v10 = (char *)operator new(16 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[16 * v5];
  v12 = &v10[16 * v9];
  *((_QWORD *)&v22 + 1) = v12;
  *((_QWORD *)v11 + 1) = 0;
  v13 = v11 + 8;
  *v11 = 3;
  v14 = operator new(0x18uLL);
  v15 = v14;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(v14, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *(uint64_t **)a1;
    v4 = *(uint64_t **)(a1 + 8);
    *v13 = v15;
    v16 = v11 + 16;
    *(_QWORD *)&v22 = v11 + 16;
    if (v4 == v3)
      goto LABEL_22;
  }
  else
  {
    *(_OWORD *)v14 = *(_OWORD *)a2;
    v14[2] = *(_QWORD *)(a2 + 16);
    *v13 = v14;
    v16 = v11 + 16;
    *(_QWORD *)&v22 = v11 + 16;
    if (v4 == v3)
    {
LABEL_22:
      *(_QWORD *)a1 = v11;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v12;
      if (!v3)
        return v16;
      goto LABEL_20;
    }
  }
  do
  {
    v17 = *((_BYTE *)v4 - 16);
    v4 -= 2;
    *(v11 - 16) = v17;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v4[1];
    *(_BYTE *)v4 = 0;
    v4[1] = 0;
  }
  while (v4 != v3);
  v3 = *(uint64_t **)a1;
  v18 = *(uint64_t **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v22;
  v16 = (char *)v22;
  if (v18 != v3)
  {
    v19 = v18 - 1;
    do
    {
      v20 = v19 - 1;
      sub_1B03299FC(v19, *((unsigned __int8 *)v19 - 8));
      v19 -= 2;
    }
    while (v20 != v3);
  }
  if (v3)
LABEL_20:
    operator delete(v3);
  return v16;
}

void sub_1B03339E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  void *v10;

  operator delete(v10);
  sub_1B032A0FC((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_1B03339FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B032A0FC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0333A10(unsigned __int8 **a1, uint64_t *a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;

  v3 = a1[2];
  if (a1[1] == v3)
  {
    v9 = *a2;
    v10 = (uint64_t)*a1;
    v11 = **a1;
    *(_BYTE *)v10 = 6;
    v19 = v11;
    v12 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)(v10 + 8) = v9;
    v20 = v12;
    sub_1B03299FC(&v20, v11);
    return (uint64_t)*a1;
  }
  else
  {
    v4 = *((_QWORD *)v3 - 1);
    if (*(_BYTE *)v4 == 2)
    {
      v5 = *(_QWORD *)(v4 + 8);
      v6 = *(_QWORD *)(v5 + 8);
      if (v6 >= *(_QWORD *)(v5 + 16))
      {
        v8 = sub_1B0333B24((void **)v5, a2);
      }
      else
      {
        *(_QWORD *)(v6 + 8) = 0;
        v7 = *a2;
        *(_BYTE *)v6 = 6;
        *(_QWORD *)(v6 + 8) = v7;
        v8 = (char *)(v6 + 16);
      }
      *(_QWORD *)(v5 + 8) = v8;
      return *(_QWORD *)(*(_QWORD *)(*((_QWORD *)a1[2] - 1) + 8) + 8) - 16;
    }
    else
    {
      v14 = *a2;
      v15 = a1[4];
      v16 = *v15;
      *v15 = 6;
      v17 = *((_QWORD *)v15 + 1);
      *((_QWORD *)v15 + 1) = v14;
      v18 = v17;
      sub_1B03299FC(&v18, v16);
      return (uint64_t)a1[4];
    }
  }
}

char *sub_1B0333B24(void **a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;

  v4 = (uint64_t *)*a1;
  v3 = (uint64_t *)a1[1];
  v5 = ((char *)v3 - (_BYTE *)*a1) >> 4;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 60)
    sub_1B032A0E8();
  v7 = (_BYTE *)a1[2] - (_BYTE *)v4;
  if (v7 >> 3 > v6)
    v6 = v7 >> 3;
  if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF0)
    v6 = 0xFFFFFFFFFFFFFFFLL;
  if (v6 >> 60)
    sub_1B02D72AC();
  v9 = 16 * v6;
  v10 = (char *)operator new(16 * v6);
  v11 = &v10[16 * v5];
  v12 = &v10[v9];
  v13 = *a2;
  *v11 = 6;
  *((_QWORD *)v11 + 1) = v13;
  v14 = v11 + 16;
  if (v3 == v4)
  {
    *a1 = v11;
    a1[1] = v14;
    a1[2] = v12;
    if (!v3)
      return v14;
    goto LABEL_13;
  }
  do
  {
    v15 = *((_BYTE *)v3 - 16);
    v3 -= 2;
    *(v11 - 16) = v15;
    v11 -= 16;
    *((_QWORD *)v11 + 1) = v3[1];
    *(_BYTE *)v3 = 0;
    v3[1] = 0;
  }
  while (v3 != v4);
  v3 = (uint64_t *)*a1;
  v16 = (uint64_t *)a1[1];
  *a1 = v11;
  a1[1] = v14;
  a1[2] = v12;
  if (v16 != v3)
  {
    v17 = v16 - 1;
    do
    {
      v18 = v17 - 1;
      sub_1B03299FC(v17, *((unsigned __int8 *)v17 - 8));
      v17 -= 2;
    }
    while (v18 != v3);
  }
  if (v3)
LABEL_13:
    operator delete(v3);
  return v14;
}

void sub_1B0333C48(std::runtime_error *a1)
{
  uint64_t v2;

  std::runtime_error::~runtime_error(a1);
  if (*(char *)(v2 + 39) < 0)
    operator delete(a1[1].__vftable);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t **sub_1B0333C8C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  uint64_t *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t *v27;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        break;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = (uint64_t *)v11;
    v11 = (uint64_t **)operator new(0x48uLL);
    v24 = *a4;
    v25 = (uint64_t *)*((_QWORD *)*a4 + 2);
    *((_OWORD *)v11 + 2) = **a4;
    v11[6] = v25;
    *v24 = 0;
    v24[1] = 0;
    v24[2] = 0;
    *((_BYTE *)v11 + 56) = 0;
    v11[8] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = v23;
    *v7 = (uint64_t *)v11;
    v26 = (uint64_t *)**a1;
    v27 = (uint64_t *)v11;
    if (v26)
    {
      *a1 = v26;
      v27 = *v7;
    }
    sub_1B02D8180(a1[1], v27);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v11;
}

uint64_t sub_1B0333E08(uint64_t a1, unsigned __int8 *a2)
{
  int v3;
  _QWORD *v4;
  const void ***v5;
  const void ***v6;
  const void **v7;
  const void **v8;
  const void **v9;
  const void ***v10;
  BOOL v11;
  uint64_t *v12;
  __int128 *v13;
  _OWORD *v14;
  __int128 v15;

  v3 = *a2;
  *(_BYTE *)a1 = v3;
  *(_QWORD *)(a1 + 8) = 0;
  switch(v3)
  {
    case 1:
      v5 = (const void ***)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = v4 + 1;
      v8 = *v5;
      v6 = v5 + 1;
      v7 = v8;
      if (v8 != (const void **)v6)
      {
        do
        {
          sub_1B0333FA8((uint64_t **)v4, v4 + 1, v7 + 4, (uint64_t)(v7 + 4));
          v9 = (const void **)v7[1];
          if (v9)
          {
            do
            {
              v10 = (const void ***)v9;
              v9 = (const void **)*v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              v10 = (const void ***)v7[2];
              v11 = *v10 == v7;
              v7 = (const void **)v10;
            }
            while (!v11);
          }
          v7 = (const void **)v10;
        }
        while (v10 != v6);
      }
      goto LABEL_17;
    case 2:
      v12 = (uint64_t *)*((_QWORD *)a2 + 1);
      v4 = operator new(0x18uLL);
      v4[1] = 0;
      v4[2] = 0;
      *v4 = 0;
      sub_1B03344C8(v4, *v12, v12[1], (v12[1] - *v12) >> 4);
      goto LABEL_17;
    case 3:
      v13 = (__int128 *)*((_QWORD *)a2 + 1);
      v14 = operator new(0x18uLL);
      v4 = v14;
      if (*((char *)v13 + 23) < 0)
      {
        sub_1B02EB0A8(v14, *(void **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v15 = *v13;
        *((_QWORD *)v14 + 2) = *((_QWORD *)v13 + 2);
        *v14 = v15;
      }
      goto LABEL_17;
    case 4:
      v4 = (_QWORD *)a2[8];
      goto LABEL_17;
    case 5:
    case 6:
    case 7:
      v4 = (_QWORD *)*((_QWORD *)a2 + 1);
LABEL_17:
      *(_QWORD *)(a1 + 8) = v4;
      break;
    default:
      return a1;
  }
  return a1;
}

void sub_1B0333F60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B0333F74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B0333F88(_Unwind_Exception *a1)
{
  char **v1;

  sub_1B032A278((uint64_t)v1, v1[1]);
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0333FA8(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v14;
  uint64_t *v15;

  v6 = sub_1B03340D0(a1, a2, &v15, &v14, a3);
  v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    v8 = v6;
    v9 = (uint64_t *)operator new(0x48uLL);
    v7 = v9;
    if (*(char *)(a4 + 23) < 0)
    {
      sub_1B02EB0A8((_BYTE *)v9 + 32, *(void **)a4, *(_QWORD *)(a4 + 8));
    }
    else
    {
      *((_OWORD *)v9 + 2) = *(_OWORD *)a4;
      v9[6] = *(_QWORD *)(a4 + 16);
    }
    sub_1B0333E08(v7 + 7, a4 + 24);
    v10 = v15;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = (uint64_t)v10;
    *v8 = (uint64_t)v7;
    v11 = (uint64_t *)**a1;
    v12 = v7;
    if (v11)
    {
      *a1 = v11;
      v12 = (uint64_t *)*v8;
    }
    sub_1B02D8180(a1[1], v12);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1B0334098(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B03312D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B03340AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  sub_1B03312D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B03340D0(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, const void **a5)
{
  uint64_t **v8;
  int v10;
  int v11;
  size_t v12;
  const void *v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  _BOOL4 v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  int v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  int v28;
  int v29;
  size_t v30;
  const void *v31;
  size_t v32;
  const void *v33;
  size_t v34;
  int v35;
  _BOOL4 v36;
  uint64_t *v37;
  uint64_t **v38;
  _QWORD *v39;
  const void *v40;
  const void *v41;
  int v42;
  size_t v43;
  const void *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  int v48;
  _BOOL4 v49;
  uint64_t *v50;
  int v51;
  size_t v52;
  uint64_t *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  uint64_t *v57;
  uint64_t **v58;
  uint64_t **v59;
  _QWORD *v60;
  const void *v61;
  const void *v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  _BOOL4 v68;
  int v69;
  _BOOL4 v70;

  v8 = a1 + 1;
  if (a1 + 1 == (uint64_t **)a2)
    goto LABEL_20;
  v10 = *((char *)a2 + 55);
  v11 = *((char *)a5 + 23);
  if (v11 >= 0)
    v12 = *((unsigned __int8 *)a5 + 23);
  else
    v12 = (size_t)a5[1];
  if (v11 >= 0)
    v13 = a5;
  else
    v13 = *a5;
  if (v10 >= 0)
    v14 = *((unsigned __int8 *)a2 + 55);
  else
    v14 = a2[5];
  if (v10 >= 0)
    v15 = a2 + 4;
  else
    v15 = (const void *)a2[4];
  if (v14 >= v12)
    v16 = v12;
  else
    v16 = v14;
  v17 = memcmp(v13, v15, v16);
  v18 = v12 < v14;
  if (v17)
    v18 = v17 < 0;
  if (v18)
  {
LABEL_20:
    v19 = (uint64_t *)*a2;
    if (*a1 == a2)
    {
      v21 = a2;
LABEL_53:
      if (v19)
      {
        *a3 = v21;
        return v21 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v19)
    {
      v20 = (uint64_t *)*a2;
      do
      {
        v21 = v20;
        v20 = (uint64_t *)v20[1];
      }
      while (v20);
    }
    else
    {
      v26 = a2;
      do
      {
        v21 = (uint64_t *)v26[2];
        v27 = *v21 == (_QWORD)v26;
        v26 = v21;
      }
      while (v27);
    }
    v28 = *((char *)a5 + 23);
    v29 = *((char *)v21 + 55);
    if (v29 >= 0)
      v30 = *((unsigned __int8 *)v21 + 55);
    else
      v30 = v21[5];
    if (v29 >= 0)
      v31 = v21 + 4;
    else
      v31 = (const void *)v21[4];
    if (v28 >= 0)
      v32 = *((unsigned __int8 *)a5 + 23);
    else
      v32 = (size_t)a5[1];
    if (v28 >= 0)
      v33 = a5;
    else
      v33 = *a5;
    if (v32 >= v30)
      v34 = v30;
    else
      v34 = v32;
    v35 = memcmp(v31, v33, v34);
    v36 = v30 < v32;
    if (v35)
      v36 = v35 < 0;
    if (v36)
      goto LABEL_53;
    v37 = *v8;
    if (*v8)
    {
      do
      {
        while (1)
        {
          v38 = (uint64_t **)v37;
          v41 = (const void *)v37[4];
          v39 = v37 + 4;
          v40 = v41;
          v42 = *((char *)v39 + 23);
          if (v42 >= 0)
            v43 = *((unsigned __int8 *)v39 + 23);
          else
            v43 = v39[1];
          if (v42 >= 0)
            v44 = v39;
          else
            v44 = v40;
          if (v43 >= v32)
            v45 = v32;
          else
            v45 = v43;
          v46 = memcmp(v33, v44, v45);
          v47 = v32 < v43;
          if (v46)
            v47 = v46 < 0;
          if (!v47)
            break;
          v37 = *v38;
          v8 = v38;
          if (!*v38)
            goto LABEL_74;
        }
        v48 = memcmp(v44, v33, v45);
        v49 = v43 < v32;
        if (v48)
          v49 = v48 < 0;
        if (!v49)
          break;
        v8 = v38 + 1;
        v37 = v38[1];
      }
      while (v37);
    }
    else
    {
      v38 = v8;
    }
LABEL_74:
    *a3 = (uint64_t *)v38;
    return (uint64_t *)v8;
  }
  v22 = memcmp(v15, v13, v16);
  v23 = v14 < v12;
  if (v22)
    v23 = v22 < 0;
  if (!v23)
  {
    *a3 = a2;
    *a4 = a2;
    return (uint64_t *)a4;
  }
  v24 = a2[1];
  if (v24)
  {
    v25 = (uint64_t *)a2[1];
    do
    {
      a4 = (uint64_t **)v25;
      v25 = (uint64_t *)*v25;
    }
    while (v25);
  }
  else
  {
    v50 = a2;
    do
    {
      a4 = (uint64_t **)v50[2];
      v27 = *a4 == v50;
      v50 = (uint64_t *)a4;
    }
    while (!v27);
  }
  if (a4 != v8)
  {
    v51 = *((char *)a4 + 55);
    if (v51 >= 0)
      v52 = *((unsigned __int8 *)a4 + 55);
    else
      v52 = (size_t)a4[5];
    if (v51 >= 0)
      v53 = (uint64_t *)(a4 + 4);
    else
      v53 = a4[4];
    if (v52 >= v12)
      v54 = v12;
    else
      v54 = v52;
    v55 = memcmp(v13, v53, v54);
    v56 = v12 < v52;
    if (v55)
      v56 = v55 < 0;
    if (!v56)
    {
      v57 = *v8;
      if (*v8)
      {
        v58 = a3;
        do
        {
          while (1)
          {
            v59 = (uint64_t **)v57;
            v62 = (const void *)v57[4];
            v60 = v57 + 4;
            v61 = v62;
            v63 = *((char *)v60 + 23);
            if (v63 >= 0)
              v64 = *((unsigned __int8 *)v60 + 23);
            else
              v64 = v60[1];
            if (v63 >= 0)
              v65 = v60;
            else
              v65 = v61;
            if (v64 >= v12)
              v66 = v12;
            else
              v66 = v64;
            v67 = memcmp(v13, v65, v66);
            v68 = v12 < v64;
            if (v67)
              v68 = v67 < 0;
            if (!v68)
              break;
            v57 = *v59;
            v8 = v59;
            if (!*v59)
              goto LABEL_119;
          }
          v69 = memcmp(v65, v13, v66);
          v70 = v64 < v12;
          if (v69)
            v70 = v69 < 0;
          if (!v70)
            break;
          v8 = v59 + 1;
          v57 = v59[1];
        }
        while (v57);
      }
      else
      {
        v59 = v8;
        v58 = a3;
      }
LABEL_119:
      *v58 = (uint64_t *)v59;
      return (uint64_t *)v8;
    }
  }
  if (v24)
  {
    *a3 = (uint64_t *)a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return (uint64_t *)a4;
}

_QWORD *sub_1B03344C8(_QWORD *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _QWORD *i;

  if (a4)
  {
    v5 = result;
    if (a4 >> 60)
      sub_1B032A0E8();
    result = operator new(16 * a4);
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[2 * a4];
    for (i = result; a2 != a3; i += 2)
    {
      sub_1B0333E08(result, a2);
      a2 += 16;
      result = i + 2;
    }
    v5[1] = result;
  }
  return result;
}

void sub_1B0334594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1B03345C8(&a9);
  _Unwind_Resume(a1);
}

void sub_1B03345A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, char a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_1B0334664((uint64_t)&a11);
  *(_QWORD *)(v11 + 8) = v12;
  sub_1B03345C8(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B03345C8(void ***result)
{
  void ***v1;
  void **v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (uint64_t *)**result;
    if (v3)
    {
      v4 = (uint64_t *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        v6 = v4 - 1;
        do
        {
          v7 = v6 - 1;
          sub_1B03299FC(v6, *((unsigned __int8 *)v6 - 8));
          v6 -= 2;
        }
        while (v7 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

uint64_t sub_1B0334664(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v2 = **(uint64_t ***)(a1 + 16);
    v3 = **(uint64_t ***)(a1 + 8);
    if (v2 != v3)
    {
      v4 = v2 - 1;
      do
      {
        v5 = v4 - 1;
        sub_1B03299FC(v4, *((unsigned __int8 *)v4 - 8));
        v4 -= 2;
      }
      while (v5 != v3);
    }
  }
  return a1;
}

std::string *sub_1B03346C8(const std::string **a1, std::string *this)
{
  void *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  if (*(_BYTE *)a1 != 3)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = *(char *)a1;
    if (v5 > 8)
      v6 = "number";
    else
      v6 = off_1E60CDE48[v5];
    sub_1B02DCBB8(&v9, v6);
    v7 = std::string::insert(&v9, 0, "type must be string, but is ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11 = v7->__r_.__value_.__r.__words[2];
    v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_1B0330F3C(302, (uint64_t)&v10, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
  }
  return std::string::operator=(this, a1[1]);
}

void sub_1B03347A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double sub_1B0334804(char *a1, _DWORD *a2)
{
  double result;
  void *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  switch(*a1)
  {
    case 4:
      *a2 = a1[8];
      break;
    case 5:
    case 6:
      *a2 = *((_DWORD *)a1 + 2);
      break;
    case 7:
      result = *((double *)a1 + 1);
      *a2 = (int)result;
      break;
    default:
      exception = __cxa_allocate_exception(0x20uLL);
      v5 = *a1;
      if (v5 > 8)
        v6 = "number";
      else
        v6 = off_1E60CDE48[v5];
      sub_1B02DCBB8(&v9, v6);
      v7 = std::string::insert(&v9, 0, "type must be number, but is ");
      v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v11 = v7->__r_.__value_.__r.__words[2];
      v10 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_1B0330F3C(302, (uint64_t)&v10, (uint64_t)exception);
      __cxa_throw(exception, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
  }
  return result;
}

void sub_1B0334934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) != 0)
    {
LABEL_8:
      __cxa_free_exception(v21);
      _Unwind_Resume(a1);
    }
  }
  else if (v22)
  {
    goto LABEL_8;
  }
  _Unwind_Resume(a1);
}

double sub_1B03349A4(unsigned __int8 *a1, void **a2)
{
  void *exception;
  unint64_t v5;
  char *v6;
  std::string *v7;
  __int128 v8;
  std::string v9;
  __int128 v10;
  std::string::size_type v11;

  if (*a1 != 2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v5 = (char)*a1;
    if (v5 > 8)
      v6 = "number";
    else
      v6 = off_1E60CDE48[v5];
    sub_1B02DCBB8(&v9, v6);
    v7 = std::string::insert(&v9, 0, "type must be array, but is ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v11 = v7->__r_.__value_.__r.__words[2];
    v10 = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    sub_1B0330F3C(302, (uint64_t)&v10, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
  }
  return sub_1B0334AD8(a1, a2);
}

void sub_1B0334A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

double sub_1B0334AD8(unsigned __int8 *a1, void **a2)
{
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t *v7;
  void **v8;
  void **v9;
  void *v10;
  double result;
  unsigned __int8 *v12;
  _QWORD *v13;
  __int128 v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  __int128 v19;
  void *v20;

  v19 = 0uLL;
  v20 = 0;
  v4 = *a1;
  if (*a1)
  {
    if ((_DWORD)v4 == 1)
    {
      v4 = *(_QWORD *)(*((_QWORD *)a1 + 1) + 16);
    }
    else if ((_DWORD)v4 == 2)
    {
      v4 = (uint64_t)(*(_QWORD *)(*((_QWORD *)a1 + 1) + 8) - **((_QWORD **)a1 + 1)) >> 4;
    }
    else
    {
      v4 = 1;
    }
  }
  sub_1B02E1E8C((uint64_t *)&v19, v4);
  v15 = a1;
  v16 = 0;
  v17 = 0;
  v18 = 0x8000000000000000;
  v5 = *a1;
  if (*a1)
  {
    if (v5 == 2)
    {
      v7 = (uint64_t *)*((_QWORD *)a1 + 1);
      v17 = *v7;
      v12 = a1;
      v13 = 0;
      *((_QWORD *)&v14 + 1) = 0x8000000000000000;
      *(_QWORD *)&v14 = v7[1];
      goto LABEL_15;
    }
    if (v5 == 1)
    {
      v6 = (uint64_t *)*((_QWORD *)a1 + 1);
      v16 = *v6;
      v14 = xmmword_1B03AFE30;
      v12 = a1;
      v13 = v6 + 1;
      goto LABEL_15;
    }
    v18 = 0;
  }
  else
  {
    v18 = 1;
  }
  v12 = a1;
  v13 = 0;
  *(_QWORD *)&v14 = 0;
  *((_QWORD *)&v14 + 1) = 1;
LABEL_15:
  sub_1B0334C60(&v15, &v12, (void ***)&v19, *((uint64_t *)&v19 + 1));
  v8 = (void **)*a2;
  if (*a2)
  {
    v9 = (void **)a2[1];
    v10 = *a2;
    if (v9 != v8)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = *a2;
    }
    a2[1] = v8;
    operator delete(v10);
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  result = *(double *)&v19;
  *(_OWORD *)a2 = v19;
  a2[2] = v20;
  return result;
}

void sub_1B0334C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void ***sub_1B0334C60(unsigned __int8 **a1, unsigned __int8 **a2, void ***a3, uint64_t a4)
{
  unsigned __int8 **v6;
  unsigned __int8 **v7;
  const std::string **v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  BOOL v14;
  std::string __p;

  v6 = a2;
  v7 = a1;
  while (!sub_1B0334EF8(a1, a2))
  {
    v8 = (const std::string **)sub_1B0334D90((uint64_t)v7);
    memset(&__p, 0, sizeof(__p));
    sub_1B03346C8(v8, &__p);
    v9 = sub_1B0334FF8(a3, a4, (__n128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      v10 = **v7;
      if (v10 == 2)
      {
LABEL_15:
        v7[2] += 16;
        goto LABEL_3;
      }
    }
    else
    {
      v10 = **v7;
      if (v10 == 2)
        goto LABEL_15;
    }
    if (v10 == 1)
    {
      v11 = v7[1];
      v12 = (unsigned __int8 *)*((_QWORD *)v11 + 1);
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (unsigned __int8 *)*((_QWORD *)v11 + 2);
          v14 = *(_QWORD *)v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v14);
      }
      v7[1] = v13;
    }
    else
    {
      ++v7[3];
    }
LABEL_3:
    a4 = v9 + 24;
    a1 = v7;
    a2 = v6;
  }
  return a3;
}

void sub_1B0334D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1B0334D90(uint64_t a1)
{
  _BYTE *result;
  int v3;
  void *v4;
  void *exception;
  _QWORD v6[3];

  result = *(_BYTE **)a1;
  v3 = *result;
  if (v3 == 1)
    return (_BYTE *)(*(_QWORD *)(a1 + 8) + 56);
  if (v3 == 2)
    return *(_BYTE **)(a1 + 16);
  if (!*result)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B02DCBB8(v6, "cannot get value");
    sub_1B0330D48(214, (uint64_t)v6, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v4 = __cxa_allocate_exception(0x20uLL);
    sub_1B02DCBB8(v6, "cannot get value");
    sub_1B0330D48(214, (uint64_t)v6, (uint64_t)v4);
    __cxa_throw(v4, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
  }
  return result;
}

void sub_1B0334EB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  char v16;

  if (a15 < 0)
    operator delete(__p);
  if ((v16 & 1) != 0)
    __cxa_free_exception(v15);
  _Unwind_Resume(exception_object);
}

BOOL sub_1B0334EF8(unsigned __int8 **a1, unsigned __int8 **a2)
{
  int v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  void *exception;
  _QWORD v7[3];

  if (*a1 != *a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B02DCBB8(v7, "cannot compare iterators of different containers");
    sub_1B0330D48(212, (uint64_t)v7, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB478, (void (*)(void *))sub_1B0330EC0);
  }
  v2 = **a1;
  if (v2 == 2)
  {
    v3 = a1[2];
    v4 = a2[2];
  }
  else if (v2 == 1)
  {
    v3 = a1[1];
    v4 = a2[1];
  }
  else
  {
    v3 = a1[3];
    v4 = a2[3];
  }
  return v3 == v4;
}

void sub_1B0334FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (v16)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B0334FF8(void ***a1, uint64_t a2, __n128 *a3)
{
  unint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  __int128 v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void **v18;
  __n128 v19;
  void **v20;
  void **v21;
  void **v22;
  void **v23;
  uint64_t v24;
  __int128 v25;
  void **v26;
  void **v27;
  __int128 v28;
  void **v29;
  char *v30;
  void **v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  __n128 v35;
  void **v37;
  void **v38;
  void **v39;
  char *v40;
  _QWORD *v41;

  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = (a2 - (uint64_t)*a1) / 24;
  v8 = (uint64_t)&(*a1)[3 * v7];
  v9 = (unint64_t)a1[2];
  if (v5 >= v9)
  {
    v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v15 > 0xAAAAAAAAAAAAAAALL)
      sub_1B02D7758();
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - (_QWORD)v6) >> 3);
    if (2 * v16 > v15)
      v15 = 2 * v16;
    if (v16 >= 0x555555555555555)
      v17 = 0xAAAAAAAAAAAAAAALL;
    else
      v17 = v15;
    v41 = a1 + 2;
    if (v17)
    {
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        sub_1B02D72AC();
      v18 = (void **)operator new(24 * v17);
    }
    else
    {
      v18 = 0;
    }
    v37 = v18;
    v38 = &v18[3 * v7];
    v39 = v38;
    v40 = (char *)&v18[3 * v17];
    sub_1B0335320((uint64_t)&v37, a3);
    v20 = v38;
    v21 = *a1;
    v22 = v38;
    if (*a1 != (void **)v8)
    {
      v23 = v38;
      v24 = v8;
      do
      {
        v22 = v23 - 3;
        v25 = *(_OWORD *)(v24 - 24);
        *(v23 - 1) = *(void **)(v24 - 8);
        *(_OWORD *)(v23 - 3) = v25;
        *(_QWORD *)(v24 - 16) = 0;
        *(_QWORD *)(v24 - 8) = 0;
        *(_QWORD *)(v24 - 24) = 0;
        v23 -= 3;
        v24 -= 24;
      }
      while ((void **)v24 != v21);
    }
    v38 = v22;
    v26 = a1[1];
    v27 = v39;
    if (v26 != (void **)v8)
    {
      do
      {
        v28 = *(_OWORD *)v8;
        v27[2] = *(void **)(v8 + 16);
        *(_OWORD *)v27 = v28;
        v27 += 3;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        v8 += 24;
      }
      while ((void **)v8 != v26);
      v22 = v38;
      v8 = (uint64_t)a1[1];
    }
    v29 = *a1;
    *a1 = v22;
    a1[1] = v27;
    v30 = (char *)a1[2];
    a1[2] = (void **)v40;
    v39 = (void **)v8;
    v40 = v30;
    v37 = v29;
    v38 = v29;
    if ((void **)v8 == v29)
    {
      if (!v8)
        return (uint64_t)v20;
    }
    else
    {
      do
      {
        v31 = (void **)(v8 - 24);
        v39 = (void **)(v8 - 24);
        if (*(char *)(v8 - 1) < 0)
        {
          operator delete(*v31);
          v31 = v39;
        }
        v8 = (uint64_t)v31;
      }
      while (v31 != v29);
      v8 = (uint64_t)v37;
      if (!v37)
        return (uint64_t)v20;
    }
    operator delete((void *)v8);
    return (uint64_t)v20;
  }
  if (v8 == v5)
  {
    v19 = *a3;
    *(_QWORD *)(v8 + 16) = a3[1].n128_u64[0];
    *(__n128 *)v8 = v19;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    a1[1] = (void **)(v8 + 24);
    return v8;
  }
  v10 = v8 + 24;
  v11 = v5 - 24;
  if (v5 >= 0x18)
  {
    v12 = v5 - 24;
    v13 = a1[1];
    do
    {
      v14 = *(_OWORD *)v12;
      v13[2] = *(void **)(v12 + 16);
      *(_OWORD *)v13 = v14;
      v13 += 3;
      *(_QWORD *)(v12 + 8) = 0;
      *(_QWORD *)(v12 + 16) = 0;
      *(_QWORD *)v12 = 0;
      v12 += 24;
    }
    while (v12 < v5);
    a1[1] = v13;
    if (v5 == v10)
      goto LABEL_39;
LABEL_35:
    v32 = 8 * ((uint64_t)(v5 - v10) >> 3);
    do
    {
      if (*(char *)(v11 + 23) < 0)
        operator delete(*(void **)v11);
      v33 = (__int128 *)(v8 + v32 - 24);
      v34 = *v33;
      *(_QWORD *)(v11 + 16) = *(_QWORD *)(v8 + v32 - 8);
      *(_OWORD *)v11 = v34;
      v11 -= 24;
      *(_BYTE *)(v8 + v32 - 1) = 0;
      *(_BYTE *)v33 = 0;
      v32 -= 24;
    }
    while (v32);
    goto LABEL_39;
  }
  a1[1] = (void **)v5;
  if (v5 != v10)
    goto LABEL_35;
LABEL_39:
  if (*(char *)(v8 + 23) < 0)
    operator delete(*(void **)v8);
  v35 = *a3;
  *(_QWORD *)(v8 + 16) = a3[1].n128_u64[0];
  *(__n128 *)v8 = v35;
  a3[1].n128_u8[7] = 0;
  a3->n128_u8[0] = 0;
  return v8;
}

void sub_1B033530C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0317B88((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_1B0335320(uint64_t a1, __n128 *a2)
{
  __n128 *v4;
  __n128 *v5;
  __n128 *v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __n128 v12;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  __n128 v25;
  uint64_t v26;
  uint64_t v27;
  __n128 *v28;
  __n128 result;

  v4 = *(__n128 **)(a1 + 16);
  if (v4 == *(__n128 **)(a1 + 24))
  {
    v5 = *(__n128 **)a1;
    v6 = *(__n128 **)(a1 + 8);
    if ((unint64_t)v6 <= *(_QWORD *)a1)
    {
      v14 = 0x5555555555555556 * (((char *)v4 - (char *)v5) >> 3);
      if (v4 == v5)
        v14 = 1;
      if (v14 >= 0xAAAAAAAAAAAAAABLL)
        sub_1B02D72AC();
      v15 = v14 >> 2;
      v16 = 24 * v14;
      v17 = (char *)operator new(24 * v14);
      v18 = &v17[24 * v15];
      v19 = &v17[v16];
      if (v4 == v6)
      {
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v18;
        *(_QWORD *)(a1 + 24) = v19;
      }
      else
      {
        v20 = ((char *)v4 - (char *)v6) / 24;
        v21 = &v18[24 * v20];
        v22 = 24 * v20;
        v23 = 24 * v15;
        do
        {
          v24 = &v17[v23];
          v25 = *v6;
          *((_QWORD *)v24 + 2) = v6[1].n128_u64[0];
          *(__n128 *)v24 = v25;
          v6->n128_u64[1] = 0;
          v6[1].n128_u64[0] = 0;
          v6->n128_u64[0] = 0;
          v6 = (__n128 *)((char *)v6 + 24);
          v23 += 24;
          v22 -= 24;
        }
        while (v22);
        v5 = *(__n128 **)a1;
        v26 = *(_QWORD *)(a1 + 8);
        v27 = *(_QWORD *)(a1 + 16);
        *(_QWORD *)a1 = v17;
        *(_QWORD *)(a1 + 8) = v18;
        *(_QWORD *)(a1 + 16) = v21;
        *(_QWORD *)(a1 + 24) = v19;
        while (v27 != v26)
        {
          if (*(char *)(v27 - 1) < 0)
            operator delete(*(void **)(v27 - 24));
          v27 -= 24;
        }
      }
      if (v5)
        operator delete(v5);
      v4 = *(__n128 **)(a1 + 16);
    }
    else
    {
      v7 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - *(_QWORD *)a1) >> 3);
      if (v7 >= -1)
        v8 = v7 + 1;
      else
        v8 = v7 + 2;
      v9 = v8 >> 1;
      v10 = -v9;
      if (v6 == v4)
      {
        v28 = (__n128 *)((char *)v6 - 24 * v9);
      }
      else
      {
        v11 = -24 * v9;
        do
        {
          v13 = (char *)v6 + v11;
          if (v6[1].n128_i8[v11 + 7] < 0)
            operator delete(*(void **)v13);
          v12 = *v6;
          *((_QWORD *)v13 + 2) = v6[1].n128_u64[0];
          *(__n128 *)v13 = v12;
          v6[1].n128_u8[7] = 0;
          v6->n128_u8[0] = 0;
          v6 = (__n128 *)((char *)v6 + 24);
        }
        while (v6 != v4);
        v4 = *(__n128 **)(a1 + 8);
        v28 = (__n128 *)((char *)v6 + 24 * v10);
      }
      *(_QWORD *)(a1 + 8) = (char *)v4 + 24 * v10;
      *(_QWORD *)(a1 + 16) = v28;
      v4 = v28;
    }
  }
  result = *a2;
  v4[1].n128_u64[0] = a2[1].n128_u64[0];
  *v4 = result;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  a2->n128_u64[0] = 0;
  *(_QWORD *)(a1 + 16) += 24;
  return result;
}

char *sub_1B033552C(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  void **v14;
  char *v16;
  char *v17;
  char *v18;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D7758();
  if (0x5555555555555556 * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x5555555555555556 * ((a1[2] - v3) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3) >= 0x555555555555555)
    v8 = 0xAAAAAAAAAAAAAAALL;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      sub_1B02D72AC();
    v9 = (char *)operator new(24 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[24 * v5];
  v16 = v10;
  v17 = v10;
  v18 = &v9[24 * v8];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(v10, *(void **)a2, *(_QWORD *)(a2 + 8));
    v3 = *a1;
    v4 = a1[1];
    v10 = v16;
    v11 = v17 + 24;
    if (v4 == *a1)
    {
LABEL_17:
      v13 = v3;
      goto LABEL_18;
    }
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)a2;
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
    v11 = v10 + 24;
    if (v4 == v3)
      goto LABEL_17;
  }
  do
  {
    v12 = *(_OWORD *)(v4 - 24);
    *((_QWORD *)v10 - 1) = *((_QWORD *)v4 - 1);
    *(_OWORD *)(v10 - 24) = v12;
    v10 -= 24;
    *((_QWORD *)v4 - 2) = 0;
    *((_QWORD *)v4 - 1) = 0;
    *((_QWORD *)v4 - 3) = 0;
    v4 -= 24;
  }
  while (v4 != v3);
  v13 = *a1;
  v3 = a1[1];
LABEL_18:
  *a1 = v10;
  a1[1] = v11;
  a1[2] = v18;
  if (v3 != v13)
  {
    v14 = (void **)(v3 - 24);
    do
    {
      if (*((char *)v14 + 23) < 0)
        operator delete(*v14);
      v14 -= 3;
    }
    while (v14 + 3 != (void **)v13);
    v3 = v13;
  }
  if (v3)
    operator delete(v3);
  return v11;
}

void sub_1B03356EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0317B88((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0335700(uint64_t *a1, float a2)
{
  uint64_t v4;
  unint64_t v5;
  float *v6;
  float *v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  float *v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  float *v23;
  uint64_t v24;
  __int128 v25;
  int v26;

  v4 = *a1;
  v6 = *(float **)(*a1 + 8);
  v5 = *(_QWORD *)(*a1 + 16);
  v7 = v6;
  if ((unint64_t)v6 < v5)
  {
    *v6 = a2;
    v8 = (uint64_t)(v6 + 1);
    goto LABEL_22;
  }
  v9 = *(float **)v4;
  v10 = (uint64_t)v6 - *(_QWORD *)v4;
  v11 = v10 >> 2;
  v12 = (v10 >> 2) + 1;
  if (v12 >> 62)
    sub_1B02D7758();
  v13 = v5 - (_QWORD)v9;
  if (v13 >> 1 > v12)
    v12 = v13 >> 1;
  if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL)
    v14 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 >> 62)
      sub_1B02D72AC();
    v15 = operator new(4 * v14);
    v16 = (float *)&v15[4 * v11];
    v17 = &v15[4 * v14];
    *v16 = a2;
    v8 = (uint64_t)(v16 + 1);
    v18 = (char *)v6 - (char *)v9;
    if (v6 == v9)
      goto LABEL_20;
    goto LABEL_14;
  }
  v15 = 0;
  v16 = (float *)(4 * v11);
  v17 = 0;
  *(float *)(4 * v11) = a2;
  v8 = 4 * v11 + 4;
  v18 = (char *)v6 - (char *)v9;
  if (v6 != v9)
  {
LABEL_14:
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_27;
    if ((unint64_t)((char *)v6 - v15 - v10) < 0x20)
      goto LABEL_27;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v7 = &v6[v21 / 0xFFFFFFFFFFFFFFFCLL];
    v16 = (float *)((char *)v16 - v21);
    v22 = &v15[4 * v11 - 16];
    v23 = v6 - 4;
    v24 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v25 = *(_OWORD *)v23;
      *(v22 - 1) = *((_OWORD *)v23 - 1);
      *v22 = v25;
      v22 -= 2;
      v23 -= 8;
      v24 -= 8;
    }
    while (v24);
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_27:
      do
      {
        v26 = *((_DWORD *)v7-- - 1);
        *((_DWORD *)v16-- - 1) = v26;
      }
      while (v7 != v9);
    }
  }
LABEL_20:
  *(_QWORD *)v4 = v16;
  *(_QWORD *)(v4 + 8) = v8;
  *(_QWORD *)(v4 + 16) = v17;
  if (v9)
    operator delete(v9);
LABEL_22:
  *(_QWORD *)(v4 + 8) = v8;
  return a1;
}

