void sub_1B0335880(std::exception *a1)
{
  uint64_t v2;

  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0)
    operator delete(a1[1].__vftable);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B03358C4(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_1B03358E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18[8];
  void *__p[2];
  __int128 v20;
  int v21;
  uint64_t v22[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v22[0] = MEMORY[0x1E0DE4FE0] + 64;
  v17 = v6;
  *(uint64_t *)((char *)&v18[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24));
  std::ios_base::init(v8, v18);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v17 = v3 + 24;
  v22[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v18[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  v21 = 16;
  sub_1B02D7994(&v17, (uint64_t)"[FileNotFoundError] ", 20);
  sub_1B02D7994(&v17, (uint64_t)"Filename specified by brdige_model_spec.json for video captioning espresso bridge network not found: ", 101);
  v12 = *(_BYTE **)(a2 + 8);
  v11 = a2 + 8;
  v10 = v12;
  v13 = *(char *)(v11 + 23);
  if (v13 >= 0)
    v14 = (_BYTE *)v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = *(_QWORD *)(v11 + 8);
  sub_1B02ECBE8(&v17, v14, &v14[v15], 0x22u, 0x5Cu);
  std::stringbuf::str();
  v17 = *v5;
  *(uint64_t *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24)) = v5[3];
  v18[0] = v9 + 16;
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v22);
}

void sub_1B0335A64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0335A78(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0335AC0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &unk_1E60CC918;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_1B0335B38(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &unk_1E60CC918;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0335BB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B0335BC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_1E60CD658;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0335BF8(uint64_t a1)
{
  return sub_1B0336AF8(a1 + 24);
}

uint64_t sub_1B0335C04(uint64_t a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v6;
  __int128 v7;
  uint64_t context;
  uint64_t plan;
  int v10;
  std::string::size_type v11;
  int v12;
  size_t v13;
  unint64_t v14;
  std::string *p_dst;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  const std::string::value_type *v19;
  std::string *v20;
  void *v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *i;
  std::runtime_error *exception;
  int v28;
  std::string __dst;
  void *__p[4];
  __int128 v31;
  int v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = (uint64_t *)(a1 + 16);
  *(_QWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8((_BYTE *)(a1 + 32), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v7 = *a2;
    *(_QWORD *)(a1 + 48) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v7;
  }
  sub_1B0336358(a1 + 56, a3);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 1065353216;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_DWORD *)(a1 + 264) = 1065353216;
  if (!*(_BYTE *)(a3 + 28) && qword_1ED5378E0 != -1)
    dispatch_once(&qword_1ED5378E0, &unk_1E60CDA68);
  context = espresso_create_context();
  *v6 = context;
  if (!context)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso context.");
    goto LABEL_63;
  }
  plan = espresso_create_plan();
  *(_QWORD *)(a1 + 24) = plan;
  if (!plan)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to create espresso plan.");
LABEL_63:
    exception->__vftable = (std::runtime_error_vtbl *)&unk_1E60CC958;
    __cxa_throw(exception, (struct type_info *)&unk_1E60CAEA8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  if (*(_BYTE *)(a3 + 52)
    && (LODWORD(__dst.__r_.__value_.__l.__data_) = espresso_plan_set_priority(),
        HIBYTE(__p[2]) = 20,
        strcpy((char *)__p, "Setting plan priorty"),
        sub_1B03270F4((int *)&__dst, (uint64_t *)__p),
        SHIBYTE(__p[2]) < 0))
  {
    operator delete(__p[0]);
    if ((*((char *)a2 + 23) & 0x80000000) == 0)
      goto LABEL_12;
  }
  else if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
LABEL_12:
    *(_OWORD *)__p = *a2;
    __p[2] = *((void **)a2 + 2);
    goto LABEL_15;
  }
  sub_1B02EB0A8(__p, *(void **)a2, *((_QWORD *)a2 + 1));
LABEL_15:
  v10 = *(char *)(a3 + 135);
  if (v10 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 135);
  else
    v11 = *(_QWORD *)(a3 + 120);
  if (!v11)
    goto LABEL_40;
  v12 = SHIBYTE(__p[2]);
  if (SHIBYTE(__p[2]) >= 0)
    v13 = HIBYTE(__p[2]);
  else
    v13 = (size_t)__p[1];
  v14 = v13 + 1;
  if (v13 + 1 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v14 >= 0x17)
  {
    v16 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v16 = v14 | 7;
    v17 = v16 + 1;
    p_dst = (std::string *)operator new(v16 + 1);
    __dst.__r_.__value_.__l.__size_ = v13 + 1;
    __dst.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_29;
  }
  memset(&__dst, 0, sizeof(__dst));
  p_dst = &__dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v13 + 1;
  if (v13)
  {
LABEL_29:
    if (v12 >= 0)
      v18 = __p;
    else
      v18 = (void **)__p[0];
    memmove(p_dst, v18, v13);
  }
  *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v13) = 58;
  if (v10 >= 0)
    v19 = (const std::string::value_type *)(a3 + 112);
  else
    v19 = *(const std::string::value_type **)(a3 + 112);
  v20 = std::string::append(&__dst, v19, v11);
  v21 = (void *)v20->__r_.__value_.__r.__words[0];
  *(_QWORD *)&v31 = v20->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)&v31 + 7) = *(std::string::size_type *)((char *)&v20->__r_.__value_.__r.__words[1] + 7);
  v22 = HIBYTE(v20->__r_.__value_.__r.__words[2]);
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  __p[0] = v21;
  __p[1] = (void *)v31;
  *(void **)((char *)&__p[1] + 7) = *(void **)((char *)&v31 + 7);
  HIBYTE(__p[2]) = v22;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_40:
  LODWORD(v31) = espresso_plan_add_network();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B03AFE40;
  strcpy(__dst.__r_.__value_.__l.__data_, "Loading espresso Network");
  sub_1B03270F4((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (!*(_BYTE *)(a3 + 64))
      goto LABEL_45;
  }
  else if (!*(_BYTE *)(a3 + 64))
  {
    goto LABEL_45;
  }
  LODWORD(v31) = espresso_plan_share_intermediate_buffer();
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B03AFE50;
  strcpy(__dst.__r_.__value_.__l.__data_, "Sharing intermediate buffer");
  sub_1B03270F4((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v24 = *(_QWORD *)a3;
    v23 = *(_QWORD *)(a3 + 8);
    if (*(_QWORD *)a3 == v23)
      goto LABEL_51;
    goto LABEL_48;
  }
LABEL_45:
  v24 = *(_QWORD *)a3;
  v23 = *(_QWORD *)(a3 + 8);
  if (*(_QWORD *)a3 == v23)
    goto LABEL_51;
  do
  {
LABEL_48:
    LODWORD(v31) = espresso_network_declare_output();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B03AFE40;
    strcpy(__dst.__r_.__value_.__l.__data_, "Declaring network output");
    sub_1B03270F4((int *)&v31, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v24 += 24;
  }
  while (v24 != v23);
LABEL_51:
  for (i = *(uint64_t **)(a3 + 88); i; i = (uint64_t *)*i)
  {
    v31 = *(_OWORD *)(i + 5);
    v32 = *((_DWORD *)i + 14);
    v28 = espresso_set_image_preprocessing_params();
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
    *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = xmmword_1B03AFE60;
    strcpy(__dst.__r_.__value_.__l.__data_, "Setting preprocessing params");
    sub_1B03270F4(&v28, (uint64_t *)&__dst);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
  }
  LODWORD(v31) = espresso_plan_build();
  strcpy((char *)&__dst, "Building espresso plan");
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 22;
  sub_1B03270F4((int *)&v31, (uint64_t *)&__dst);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
      return a1;
LABEL_60:
    operator delete(__p[0]);
    return a1;
  }
  if (SHIBYTE(__p[2]) < 0)
    goto LABEL_60;
  return a1;
}

void sub_1B0336248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  sub_1B0328C28(a10);
  sub_1B0328C28(a11);
  sub_1B0326B84(a12);
  if (*(char *)(v29 + 55) < 0)
    operator delete(*a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0336358(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  __int128 v7;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  sub_1B02EB2B0((char *)a1, *(__int128 **)a2, *(__int128 **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3));
  v4 = *(_OWORD *)(a2 + 24);
  v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  sub_1B03364D0(a1 + 72, a2 + 72);
  v6 = (_BYTE *)(a1 + 112);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_1B02EB0A8(v6, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 112);
    *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
    *(_OWORD *)v6 = v7;
  }
  return a1;
}

void sub_1B033641C(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;
  void **v7;
  void **v8;
  void *v9;

  v4 = (void **)v1[11];
  if (v4)
  {
    do
    {
      v7 = (void **)*v4;
      if (*((char *)v4 + 39) < 0)
        operator delete(v4[2]);
      operator delete(v4);
      v4 = v7;
    }
    while (v7);
  }
  v5 = *v2;
  *v2 = 0;
  if (v5)
  {
    operator delete(v5);
    v6 = (void **)*v1;
    if (!*v1)
LABEL_4:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v6 = (void **)*v1;
    if (!*v1)
      goto LABEL_4;
  }
  v8 = (void **)v1[1];
  v9 = v6;
  if (v8 != v6)
  {
    do
    {
      if (*((char *)v8 - 1) < 0)
        operator delete(*(v8 - 3));
      v8 -= 3;
    }
    while (v8 != v6);
    v9 = *v1;
  }
  v1[1] = v6;
  operator delete(v9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03364D0(uint64_t a1, uint64_t a2)
{
  size_t prime;
  int8x8_t v5;
  BOOL v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t v9;
  _QWORD *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  prime = *(_QWORD *)(a2 + 8);
  if (prime == 1)
  {
    prime = 2;
LABEL_17:
    sub_1B03282B0(a1, prime);
    goto LABEL_18;
  }
  if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(*(_QWORD *)(a2 + 8));
    v5 = *(int8x8_t *)(a1 + 8);
    v6 = prime >= *(_QWORD *)&v5;
    if (prime > *(_QWORD *)&v5)
      goto LABEL_17;
  }
  else
  {
    v5 = 0;
    v6 = 1;
    if (prime)
      goto LABEL_17;
  }
  if (!v6)
  {
    v7 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v5 < 3uLL || (v8 = (uint8x8_t)vcnt_s8(v5), v8.i16[0] = vaddlv_u8(v8), v8.u32[0] > 1uLL))
    {
      v7 = std::__next_prime(v7);
    }
    else
    {
      v9 = 1 << -(char)__clz(v7 - 1);
      if (v7 >= 2)
        v7 = v9;
    }
    if (prime <= v7)
      prime = v7;
    if (prime < *(_QWORD *)&v5)
      goto LABEL_17;
  }
LABEL_18:
  for (i = *(_QWORD **)(a2 + 16); i; i = (_QWORD *)*i)
    sub_1B0336610(a1, (uint64_t)(i + 2), (uint64_t)(i + 2));
  return a1;
}

void sub_1B03365E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B0329424(v1);
  _Unwind_Resume(a1);
}

void sub_1B03365FC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B0329424(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0336610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t **v13;
  uint64_t *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  _BYTE *v26;
  float v27;
  float v28;
  _QWORD *v29;
  _QWORD *v30;
  _BOOL8 v31;
  unint64_t v32;
  unint64_t v33;
  size_t prime;
  int8x8_t v35;
  unint64_t v36;
  uint8x8_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD v42[2];
  char v43;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1B02D6D9C((uint64_t)v42, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = *v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = v14[1];
            if (v21 == v10)
            {
              v22 = *((unsigned __int8 *)v14 + 39);
              if ((v22 & 0x80u) == 0)
                v23 = *((unsigned __int8 *)v14 + 39);
              else
                v23 = v14[3];
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp((const void *)v14[2], v5, v14[3]))
                    return v14;
                }
                else
                {
                  if (!*((_BYTE *)v14 + 39))
                    return v14;
                  v24 = 0;
                  while (*((unsigned __int8 *)v14 + v24 + 16) == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = (uint64_t *)*v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = v14[1];
          if (v17 == v10)
          {
            v18 = *((unsigned __int8 *)v14 + 39);
            if ((v18 & 0x80u) == 0)
              v19 = *((unsigned __int8 *)v14 + 39);
            else
              v19 = v14[3];
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp((const void *)v14[2], v5, v14[3]))
                  return v14;
              }
              else
              {
                if (!*((_BYTE *)v14 + 39))
                  return v14;
                v20 = 0;
                while (*((unsigned __int8 *)v14 + v20 + 16) == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (char *)operator new(0x40uLL);
  v42[0] = v25;
  v42[1] = a1 + 16;
  v43 = 0;
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = v10;
  v26 = v25 + 16;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_1B02EB0A8(v26, *(void **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)v26 = *(_OWORD *)a3;
    *((_QWORD *)v25 + 4) = *(_QWORD *)(a3 + 16);
  }
  *(_OWORD *)(v25 + 40) = *(_OWORD *)(a3 + 24);
  *((_DWORD *)v25 + 14) = *(_DWORD *)(a3 + 40);
  v43 = 1;
  v27 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v28 = *(float *)(a1 + 32);
  if (!v11 || (float)(v28 * (float)v11) < v27)
  {
    v31 = 1;
    if (v11 >= 3)
      v31 = (v11 & (v11 - 1)) != 0;
    v32 = v31 | (2 * v11);
    v33 = vcvtps_u32_f32(v27 / v28);
    if (v32 <= v33)
      prime = v33;
    else
      prime = v32;
    if (prime == 1)
    {
      prime = 2;
    }
    else if ((prime & (prime - 1)) != 0)
    {
      prime = std::__next_prime(prime);
    }
    v35 = *(int8x8_t *)(a1 + 8);
    if (prime > *(_QWORD *)&v35)
      goto LABEL_68;
    if (prime < *(_QWORD *)&v35)
    {
      v36 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (*(_QWORD *)&v35 < 3uLL || (v37 = (uint8x8_t)vcnt_s8(v35), v37.i16[0] = vaddlv_u8(v37), v37.u32[0] > 1uLL))
      {
        v36 = std::__next_prime(v36);
      }
      else
      {
        v38 = 1 << -(char)__clz(v36 - 1);
        if (v36 >= 2)
          v36 = v38;
      }
      if (prime <= v36)
        prime = v36;
      if (prime < *(_QWORD *)&v35)
LABEL_68:
        sub_1B03282B0(a1, prime);
    }
    v11 = *(_QWORD *)(a1 + 8);
    v39 = v11 - 1;
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v10 >= v11)
      {
        v3 = v10 % v11;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
      else
      {
        v3 = v10;
        v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
        v30 = (_QWORD *)v42[0];
        if (v29)
          goto LABEL_57;
      }
    }
    else
    {
      v3 = v39 & v10;
      v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v39 & v10));
      v30 = (_QWORD *)v42[0];
      if (v29)
        goto LABEL_57;
    }
LABEL_81:
    *v30 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v42[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v3) = a1 + 16;
    if (*(_QWORD *)v42[0])
    {
      v40 = *(_QWORD *)(*(_QWORD *)v42[0] + 8);
      if ((v11 & (v11 - 1)) != 0)
      {
        if (v40 >= v11)
          v40 %= v11;
      }
      else
      {
        v40 &= v11 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v40) = v42[0];
    }
    goto LABEL_92;
  }
  v29 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  v30 = (_QWORD *)v42[0];
  if (!v29)
    goto LABEL_81;
LABEL_57:
  *v30 = *v29;
  *v29 = v42[0];
LABEL_92:
  v14 = (uint64_t *)v42[0];
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1B0336A5C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0336A88((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B0336A70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0336A88((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0336A88(uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16) && *(char *)(v2 + 39) < 0)
      operator delete(*(void **)(v2 + 16));
    operator delete((void *)v2);
  }
  return a1;
}

uint64_t sub_1B0336AD4()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_1ED5378D8 = result;
  return result;
}

uint64_t sub_1B0336AF8(uint64_t a1)
{
  if (*(_QWORD *)(a1 + 24))
    espresso_plan_destroy();
  if (*(_QWORD *)(a1 + 16))
    espresso_context_destroy();
  sub_1B0328C28(a1 + 232);
  sub_1B0328C28(a1 + 192);
  sub_1B0326B84(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_1B0336B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18[8];
  void *__p[2];
  __int128 v20;
  int v21;
  uint64_t v22[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v22[0] = MEMORY[0x1E0DE4FE0] + 64;
  v17 = v6;
  *(uint64_t *)((char *)&v18[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24));
  std::ios_base::init(v8, v18);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v17 = v3 + 24;
  v22[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v18[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v20 = 0u;
  v21 = 16;
  sub_1B02D7994(&v17, (uint64_t)"[FileNotFoundError] ", 20);
  sub_1B02D7994(&v17, (uint64_t)"Filename specified by model_spec.json for video captioning espresso decoder network not found: ", 95);
  v12 = *(_BYTE **)(a2 + 8);
  v11 = a2 + 8;
  v10 = v12;
  v13 = *(char *)(v11 + 23);
  if (v13 >= 0)
    v14 = (_BYTE *)v11;
  else
    v14 = v10;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v11 + 23);
  else
    v15 = *(_QWORD *)(v11 + 8);
  sub_1B02ECBE8(&v17, v14, &v14[v15], 0x22u, 0x5Cu);
  std::stringbuf::str();
  v17 = *v5;
  *(uint64_t *)((char *)&v18[-1] + *(_QWORD *)(v17 - 24)) = v5[3];
  v18[0] = v9 + 16;
  if (SBYTE7(v20) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v22);
}

void sub_1B0336CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0336D04(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

void sub_1B0336D4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD700;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B0336D5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD700;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0336D8C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_1B0336DA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0336DC4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    if (*(_BYTE *)(v1 + 40))
    {
      v2 = *(_QWORD *)(v1 + 16);
      if (v2)
      {
        v3 = *(_QWORD *)(v1 + 24);
        v4 = *(void **)(v1 + 16);
        if (v3 != v2)
        {
          do
          {
            if (*(char *)(v3 - 1) < 0)
              operator delete(*(void **)(v3 - 24));
            v3 -= 24;
          }
          while (v3 != v2);
          v4 = *(void **)(v1 + 16);
        }
        *(_QWORD *)(v1 + 24) = v2;
        operator delete(v4);
      }
    }
    JUMPOUT(0x1B5E07CD8);
  }
  return result;
}

uint64_t sub_1B0336E60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B03B0961)
    return a1 + 24;
  if (((v3 & 0x80000001B03B0961 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B03B0961))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B03B0961 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_1B0336EE0(uint64_t a1, std::string *__str, std::string *a3, size_t __sz)
{
  const std::string *v6;
  uint64_t v8;
  std::string *v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  uint64_t v16;
  __int128 v17;
  std::string *v18;
  char *v19;
  std::string *v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  const std::string *v28;

  v6 = __str;
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(_QWORD *)a1) >> 3) >= __sz)
  {
    v12 = *(std::string **)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v12 - (char *)v9) >> 3) >= __sz)
    {
      if (__str == a3)
      {
        v20 = *(std::string **)a1;
      }
      else
      {
        v20 = *(std::string **)a1;
        do
        {
          std::string::operator=(v9++, v6++);
          ++v20;
        }
        while (v6 != a3);
        v12 = *(std::string **)(a1 + 8);
      }
      while (v12 != v20)
      {
        if (SHIBYTE(v12[-1].__r_.__value_.__r.__words[2]) < 0)
          operator delete(v12[-1].__r_.__value_.__l.__data_);
        --v12;
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      v13 = (std::string *)((char *)__str + 8 * (((char *)v12 - (char *)v9) >> 3));
      if (v12 != v9)
      {
        v14 = 8 * (((char *)v12 - (char *)v9) >> 3);
        do
        {
          std::string::operator=(v9++, v6++);
          v14 -= 24;
        }
        while (v14);
        v9 = *(std::string **)(a1 + 8);
      }
      v15 = v9;
      if (v13 != a3)
      {
        v16 = 0;
        do
        {
          v18 = &v9[v16];
          v19 = (char *)&v13[v16];
          if (SHIBYTE(v13[v16].__r_.__value_.__r.__words[2]) < 0)
          {
            sub_1B02EB0A8(v18, *(void **)v19, *((_QWORD *)v19 + 1));
          }
          else
          {
            v17 = *(_OWORD *)v19;
            v18->__r_.__value_.__r.__words[2] = *((_QWORD *)v19 + 2);
            *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v17;
          }
          ++v16;
        }
        while (&v13[v16] != a3);
        v15 = &v9[v16];
      }
      *(_QWORD *)(a1 + 8) = v15;
    }
  }
  else
  {
    if (v9)
    {
      v10 = *(std::string **)(a1 + 8);
      v11 = *(std::string **)a1;
      if (v10 != v9)
      {
        do
        {
          if (SHIBYTE(v10[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v10[-1].__r_.__value_.__l.__data_);
          --v10;
        }
        while (v10 != v9);
        v11 = *(std::string **)a1;
      }
      *(_QWORD *)(a1 + 8) = v9;
      operator delete(v11);
      v8 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_48;
    v21 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= __sz)
      v22 = __sz;
    v23 = v21 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v22;
    if (v23 > 0xAAAAAAAAAAAAAAALL)
LABEL_48:
      sub_1B02D7758();
    v24 = 24 * v23;
    v25 = (char *)operator new(24 * v23);
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = v25;
    *(_QWORD *)(a1 + 16) = &v25[v24];
    if (v6 != a3)
    {
      v26 = 0;
      do
      {
        v27 = &v25[v26 * 24];
        v28 = &v6[v26];
        if (SHIBYTE(v6[v26].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1B02EB0A8(v27, v28->__r_.__value_.__l.__data_, v28->__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)v27 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
          *((_QWORD *)v27 + 2) = *((_QWORD *)&v28->__r_.__value_.__l + 2);
        }
        ++v26;
      }
      while (&v6[v26] != a3);
      v25 += v26 * 24;
    }
    *(_QWORD *)(a1 + 8) = v25;
  }
}

unint64_t sub_1B03371E4(uint64_t a1, unsigned int **a2, uint64_t a3)
{
  _QWORD *v4;
  _DWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  int64_t v9;
  float *v10;
  float *v11;
  float *v12;
  float v13;
  uint64_t v14;
  float *v15;
  float v16;
  BOOL v17;
  char *v18;
  unsigned int *v19;
  unsigned int *v20;
  char *v21;
  int v22;
  char *v23;
  int64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  unsigned int *v30;
  uint64_t v31;
  int64_t v32;
  unint64_t v33;
  char *v34;
  unsigned int v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  char *v40;
  uint64_t v41;
  __int128 v42;
  __int128 *v43;
  __int128 *v44;
  int v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  int64_t v50;
  void **v51;
  uint64_t v52;
  int v53;
  int v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  char v58;
  _BYTE *v59;
  uint64_t v60;
  int64_t v61;
  float *v62;
  float *v63;
  float *v64;
  float v65;
  uint64_t v66;
  float *v67;
  float v68;
  uint64_t v70;
  unint64_t v72;
  void *v73;
  uint64_t v74;
  char *v75;
  float *v76;
  float *v77;
  float *v78;
  void *v79;
  _BYTE *v80;
  std::locale v81;
  const std::locale::facet *v82;
  const std::locale::facet *v83;
  __int128 v84;
  __int128 v85;
  uint64_t v86;
  void *__dst[2];
  uint64_t v88;
  void *v89[2];
  unsigned __int8 v90;
  void *__p[2];
  _BYTE v92[25];
  uint64_t v93;
  uint64_t v94;
  char v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  char v99;
  uint64_t v100;
  _OWORD v101[3];
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  char v108;
  uint64_t v109;

  sub_1B0324360(&v79, a3, a2);
  v4 = *(_QWORD **)(a1 + 56);
  v5 = v79;
  if (v4 != (_QWORD *)(a1 + 64))
  {
    do
    {
      v5[*((unsigned int *)v4 + 7)] = -8388609;
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != (_QWORD *)(a1 + 64));
  }
  v76 = 0;
  v77 = 0;
  v78 = 0;
  v9 = v80 - (_BYTE *)v5;
  v70 = a1;
  if (v80 == (_BYTE *)v5)
  {
    v72 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_1B02D7758();
    v10 = (float *)operator new(v80 - (_BYTE *)v5);
    v76 = v10;
    v78 = &v10[v9 >> 2];
    memcpy(v10, v5, v9);
    v11 = v10;
    if (v9 != 4)
    {
      v12 = v10 + 1;
      v13 = *v10;
      v14 = 4 * (v9 >> 2) - 4;
      v11 = v10;
      v15 = v10 + 1;
      do
      {
        v16 = *v15++;
        v17 = v13 < v16;
        v13 = fmaxf(v13, v16);
        if (v17)
          v11 = v12;
        v12 = v15;
        v14 -= 4;
      }
      while (v14);
    }
    v72 = (char *)v11 - (char *)v10;
    v77 = v10;
    operator delete(v10);
  }
  while (1)
  {
    v18 = (char *)operator new(4uLL);
    *(_DWORD *)v18 = v72 >> 2;
    v74 = 0;
    v75 = 0;
    v73 = 0;
    v19 = *a2;
    v20 = a2[1];
    if (*a2 != v20)
    {
      v21 = 0;
      while (1)
      {
        while (v21 < v75)
        {
          v22 = *v19++;
          *(_DWORD *)v21 = v22;
          v21 += 4;
          v74 = (uint64_t)v21;
          if (v19 == v20)
            goto LABEL_53;
        }
        v23 = (char *)v73;
        v24 = v21 - (_BYTE *)v73;
        v25 = (v21 - (_BYTE *)v73) >> 2;
        v26 = v25 + 1;
        if ((unint64_t)(v25 + 1) >> 62)
          sub_1B02D7758();
        v27 = v75 - (_BYTE *)v73;
        if ((v75 - (_BYTE *)v73) >> 1 > v26)
          v26 = v27 >> 1;
        if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL)
          v28 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
        {
          if (v28 >> 62)
            sub_1B02D72AC();
          v29 = operator new(4 * v28);
          v30 = (unsigned int *)&v29[4 * v25];
          *v30 = *v19;
          v31 = (uint64_t)(v30 + 1);
          v32 = v21 - v23;
          if (v21 == v23)
            goto LABEL_38;
        }
        else
        {
          v29 = 0;
          v30 = (unsigned int *)(4 * v25);
          *(_DWORD *)(4 * v25) = *v19;
          v31 = 4 * v25 + 4;
          v32 = v21 - v23;
          if (v21 == v23)
            goto LABEL_38;
        }
        v33 = v32 - 4;
        if (v33 >= 0xBC)
        {
          v36 = (v21 - 4 - v23) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v29[v24 - 4 - v36] > &v29[v24 - 4])
          {
            v34 = v21;
          }
          else if (&v21[-v36 - 4] > v21 - 4)
          {
            v34 = v21;
          }
          else if ((unint64_t)(v21 - v29 - v24) >= 0x20)
          {
            v37 = (v33 >> 2) + 1;
            v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
            v34 = &v21[-v38];
            v30 = (unsigned int *)((char *)v30 - v38);
            v39 = &v29[4 * v25 - 16];
            v40 = v21 - 16;
            v41 = v37 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v42 = *(_OWORD *)v40;
              *(v39 - 1) = *((_OWORD *)v40 - 1);
              *v39 = v42;
              v39 -= 2;
              v40 -= 32;
              v41 -= 8;
            }
            while (v41);
            if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_38;
          }
          else
          {
            v34 = v21;
          }
        }
        else
        {
          v34 = v21;
        }
        do
        {
          v35 = *((_DWORD *)v34 - 1);
          v34 -= 4;
          *--v30 = v35;
        }
        while (v34 != v23);
LABEL_38:
        v73 = v30;
        v74 = v31;
        v75 = &v29[4 * v28];
        if (v23)
          operator delete(v23);
        v21 = (char *)v31;
        v74 = v31;
        if (++v19 == v20)
          goto LABEL_53;
      }
    }
    v21 = 0;
LABEL_53:
    sub_1B034370C((unint64_t *)&v73, v21, v18, v18 + 4);
    if (*(_BYTE *)(v70 + 40))
    {
      (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(v70 + 80) + 32))(v89, *(_QWORD *)(v70 + 80), &v73);
      v44 = *(__int128 **)(v70 + 16);
      v43 = *(__int128 **)(v70 + 24);
      if (v44 == v43)
      {
        v45 = 0;
      }
      else
      {
        do
        {
          while (1)
          {
            if (*((char *)v44 + 23) < 0)
            {
              sub_1B02EB0A8(__dst, *(void **)v44, *((_QWORD *)v44 + 1));
            }
            else
            {
              v47 = *v44;
              v88 = *((_QWORD *)v44 + 2);
              *(_OWORD *)__dst = v47;
            }
            sub_1B03379F8((uint64_t)v101, (uint64_t)__dst);
            MEMORY[0x1B5E07C24](&v81);
            v82 = std::locale::use_facet(&v81, MEMORY[0x1E0DE4A90]);
            v83 = std::locale::use_facet(&v81, MEMORY[0x1E0DE4C08]);
            v84 = 0u;
            v85 = 0u;
            v86 = 0;
            v48 = BYTE7(v101[1]);
            if ((SBYTE7(v101[1]) & 0x80u) == 0)
              v49 = (char *)v101;
            else
              v49 = *(char **)&v101[0];
            if (SBYTE7(v101[1]) < 0)
              v48 = *((_QWORD *)&v101[0] + 1);
            if (&v49[v48] != sub_1B0337C30((uint64_t)&v81, v49, &v49[v48]))
              sub_1B03381A0();
            if (SBYTE7(v101[1]) < 0)
              operator delete(*(void **)&v101[0]);
            v50 = v90;
            if ((v90 & 0x80u) == 0)
              v51 = v89;
            else
              v51 = (void **)v89[0];
            if ((v90 & 0x80u) != 0)
              v50 = (int64_t)v89[1];
            v52 = (uint64_t)v51 + v50;
            v93 = 0;
            v94 = 0;
            v95 = 0;
            v96 = 0;
            v97 = 0;
            v98 = 0;
            v99 = 0;
            v100 = 0;
            *(_OWORD *)__p = 0u;
            memset(v92, 0, sizeof(v92));
            v102 = 0;
            v103 = 0;
            v104 = 0;
            v105 = 0;
            v106 = 0;
            v107 = 0;
            v108 = 0;
            v109 = 0;
            memset(v101, 0, 41);
            v53 = sub_1B0341264((uint64_t)&v81, (uint64_t)v51, (uint64_t)v51 + v50, (uint64_t)v101);
            sub_1B0342E88((uint64_t)__p, (uint64_t)v51, v52, (uint64_t *)v101);
            if (*(_QWORD *)&v101[0])
              operator delete(*(void **)&v101[0]);
            if (v98)
              v54 = v53 ^ 1;
            else
              v54 = 1;
            if (__p[0])
              operator delete(__p[0]);
            v55 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
            if (*((_QWORD *)&v85 + 1))
            {
              v56 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
              do
                v57 = __ldaxr(v56);
              while (__stlxr(v57 - 1, v56));
              if (!v57)
              {
                ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
                std::__shared_weak_count::__release_weak(v55);
              }
            }
            std::locale::~locale(&v81);
            if (SHIBYTE(v88) < 0)
              break;
            v45 = v53 & v54;
            v44 = (__int128 *)((char *)v44 + 24);
            if (v44 == v43)
              v46 = 1;
            else
              v46 = v45;
            if ((v46 & 1) != 0)
              goto LABEL_93;
          }
          operator delete(__dst[0]);
          v45 = v53 & v54;
          v44 = (__int128 *)((char *)v44 + 24);
          if (v44 == v43)
            v58 = 1;
          else
            v58 = v45;
        }
        while ((v58 & 1) == 0);
      }
LABEL_93:
      if ((char)v90 < 0)
        operator delete(v89[0]);
    }
    else
    {
      v45 = 0;
    }
    if (v73)
    {
      v74 = (uint64_t)v73;
      operator delete(v73);
    }
    operator delete(v18);
    v59 = v79;
    if (!v45)
      break;
    v60 = v72 & 0x3FFFFFFFCLL;
    v72 = 0;
    *(_DWORD *)((char *)v79 + v60) = -8388609;
    v61 = v80 - v59;
    if (v80 != v59)
    {
      if (v61 < 0)
        sub_1B02D7758();
      v62 = (float *)operator new(v80 - v59);
      memcpy(v62, v59, v61);
      v63 = v62;
      if (v61 != 4)
      {
        v64 = v62 + 1;
        v65 = *v62;
        v66 = 4 * (v61 >> 2) - 4;
        v63 = v62;
        v67 = v62 + 1;
        do
        {
          v68 = *v67++;
          v17 = v65 < v68;
          v65 = fmaxf(v65, v68);
          if (v17)
            v63 = v64;
          v64 = v67;
          v66 -= 4;
        }
        while (v66);
      }
      v72 = (char *)v63 - (char *)v62;
      operator delete(v62);
    }
  }
  if (v79)
  {
    v80 = v79;
    operator delete(v79);
  }
  return v72 >> 2;
}

void sub_1B03378B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,std::locale a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51)
{
  if (__p)
    operator delete(__p);
  if (a28)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03379F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15[8];
  void *__p[2];
  __int128 v17;
  int v18;
  uint64_t v19[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v19[0] = MEMORY[0x1E0DE4FE0] + 64;
  v14 = v6;
  *(uint64_t *)((char *)&v15[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24));
  std::ios_base::init(v8, v15);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v14 = v3 + 24;
  v19[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v15[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v17 = 0u;
  v18 = 16;
  sub_1B02D7994(&v14, (uint64_t)"\b", 1);
  v10 = *(char *)(a2 + 23);
  if (v10 >= 0)
    v11 = a2;
  else
    v11 = *(_QWORD *)a2;
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a2 + 23);
  else
    v12 = *(_QWORD *)(a2 + 8);
  sub_1B02D7994(&v14, v11, v12);
  sub_1B02D7994(&v14, (uint64_t)"\b", 1);
  std::stringbuf::str();
  v14 = *v5;
  *(uint64_t *)((char *)&v15[-1] + *(_QWORD *)(v14 - 24)) = v5[3];
  v15[0] = v9 + 16;
  if (SBYTE7(v17) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v19);
}

void sub_1B0337B6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0337B80(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

void sub_1B0337BC8(std::locale *this)
{
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v4;

  locale = (std::__shared_weak_count *)this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&locale->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
    std::__shared_weak_count::__release_weak(locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

char *sub_1B0337C30(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  char *v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  char *v20;
  char *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  char *v47;
  char *v48;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E60CD248;
  v7 = (_QWORD *)operator new();
  *v7 = &off_1E60CD308;
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E60CD818;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (!v9)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
  {
LABEL_5:
    v12 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 56) = v12;
    v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
    if (v13 <= 0x3F)
      goto LABEL_6;
LABEL_11:
    switch(v13)
    {
      case 0x40u:
        return sub_1B0338604(a1, a2, a3);
      case 0x80u:
        v20 = (char *)memchr(a2, 10, a3 - a2);
        if (v20)
          v21 = v20;
        else
          v21 = a3;
        if (v21 == a2)
        {
          v22 = (_QWORD *)operator new();
          v23 = *(_QWORD *)(a1 + 56);
          v24 = *(_QWORD *)(v23 + 8);
          *v22 = &off_1E60CD308;
          v22[1] = v24;
          *(_QWORD *)(v23 + 8) = v22;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          if (v21 != a3)
            ++v21;
          if (v21 == a3)
            return a3;
        }
        else
        {
          sub_1B0338474(a1, (unsigned __int8 *)a2, v21);
          if (v21 != a3)
            ++v21;
          if (v21 == a3)
            return a3;
        }
        v37 = *(_QWORD *)(a1 + 56);
        do
        {
          v47 = (char *)memchr(v21, 10, a3 - v21);
          if (v47)
            v48 = v47;
          else
            v48 = a3;
          if (v48 == v21)
          {
            v38 = (_QWORD *)operator new();
            v39 = *(_QWORD *)(a1 + 56);
            v40 = *(_QWORD *)(v39 + 8);
            *v38 = &off_1E60CD308;
            v38[1] = v40;
            *(_QWORD *)(v39 + 8) = v38;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_1B0338474(a1, (unsigned __int8 *)v21, v48);
          }
          v41 = (_QWORD *)operator new();
          v42 = *(_QWORD *)(v37 + 8);
          v41[1] = *(_QWORD *)(v12 + 8);
          v41[2] = v42;
          *v41 = &off_1E60CD218;
          *(_QWORD *)(v12 + 8) = v41;
          *(_QWORD *)(v37 + 8) = 0;
          v43 = (_QWORD *)operator new();
          v44 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *v43 = &off_1E60CD308;
          v43[1] = v44;
          *(_QWORD *)(v37 + 8) = v43;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
          v45 = (_QWORD *)operator new();
          v46 = *(_QWORD *)(v37 + 8);
          *v45 = &off_1E60CD888;
          v45[1] = v46;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v45;
          v37 = *(_QWORD *)(v37 + 8);
          *(_QWORD *)(a1 + 56) = v37;
          if (v48 == a3)
            v21 = v48;
          else
            v21 = v48 + 1;
        }
        while (v21 != a3);
        break;
      case 0x100u:
        v14 = (char *)memchr(a2, 10, a3 - a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v16 = (_QWORD *)operator new();
          v17 = *(_QWORD *)(a1 + 56);
          v18 = *(_QWORD *)(v17 + 8);
          *v16 = &off_1E60CD308;
          v16[1] = v18;
          *(_QWORD *)(v17 + 8) = v16;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          if (v15 != a3)
            ++v15;
          if (v15 == a3)
            return a3;
        }
        else
        {
          sub_1B0338604(a1, a2, v15);
          if (v15 != a3)
            ++v15;
          if (v15 == a3)
            return a3;
        }
        v25 = *(_QWORD *)(a1 + 56);
        do
        {
          v35 = (char *)memchr(v15, 10, a3 - v15);
          if (v35)
            v36 = v35;
          else
            v36 = a3;
          if (v36 == v15)
          {
            v26 = (_QWORD *)operator new();
            v27 = *(_QWORD *)(a1 + 56);
            v28 = *(_QWORD *)(v27 + 8);
            *v26 = &off_1E60CD308;
            v26[1] = v28;
            *(_QWORD *)(v27 + 8) = v26;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            sub_1B0338604(a1, v15, v36);
          }
          v29 = (_QWORD *)operator new();
          v30 = *(_QWORD *)(v25 + 8);
          v29[1] = *(_QWORD *)(v12 + 8);
          v29[2] = v30;
          *v29 = &off_1E60CD218;
          *(_QWORD *)(v12 + 8) = v29;
          *(_QWORD *)(v25 + 8) = 0;
          v31 = (_QWORD *)operator new();
          v32 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *v31 = &off_1E60CD308;
          v31[1] = v32;
          *(_QWORD *)(v25 + 8) = v31;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
          v33 = (_QWORD *)operator new();
          v34 = *(_QWORD *)(v25 + 8);
          *v33 = &off_1E60CD888;
          v33[1] = v34;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v33;
          v25 = *(_QWORD *)(v25 + 8);
          *(_QWORD *)(a1 + 56) = v25;
          if (v36 == a3)
            v15 = v36;
          else
            v15 = v36 + 1;
        }
        while (v15 != a3);
        break;
      default:
        goto LABEL_62;
    }
    return a3;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  v12 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
    goto LABEL_11;
LABEL_6:
  if (!v13)
    return sub_1B03381EC(a1, a2, a3);
  if (v13 != 16)
  {
    if (v13 != 32)
LABEL_62:
      sub_1B0338790();
    return sub_1B0338604(a1, a2, a3);
  }
  return sub_1B0338474(a1, (unsigned __int8 *)a2, a3);
}

void sub_1B0338158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B0338184(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B03381A0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B03381D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1B03381EC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  int v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  int v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = a2;
  while (1)
  {
    v8 = v7;
    v7 = sub_1B03389FC(a1, v7, a3);
    if (v8 == v7)
      break;
LABEL_2:
    if (v7 == v8)
      goto LABEL_6;
  }
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(_DWORD *)(a1 + 28);
  v11 = sub_1B0338D54(a1, v8, a3);
  if (v8 != v11)
  {
    v7 = sub_1B033931C(a1, v11, a3, v9, v10 + 1, *(_DWORD *)(a1 + 28) + 1);
    goto LABEL_2;
  }
LABEL_6:
  if (v8 != a2)
  {
    if (v8 != a3)
      goto LABEL_14;
    return a3;
  }
  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 8);
  *v12 = &off_1E60CD308;
  v12[1] = v14;
  *(_QWORD *)(v13 + 8) = v12;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  if (v8 != a3)
  {
LABEL_14:
    if (*v8 != 124)
      return v8;
    v21 = *(_QWORD *)(a1 + 56);
    v22 = v8 + 1;
    v23 = v8 + 1;
    while (1)
    {
      v8 = v23;
      v23 = sub_1B03389FC(a1, v23, a3);
      if (v8 == v23)
      {
        v24 = *(_QWORD *)(a1 + 56);
        v25 = *(_DWORD *)(a1 + 28);
        v26 = sub_1B0338D54(a1, v8, a3);
        if (v8 == v26)
        {
LABEL_11:
          if (v8 == v22)
          {
            v27 = (_QWORD *)operator new();
            v28 = *(_QWORD *)(a1 + 56);
            v29 = *(_QWORD *)(v28 + 8);
            *v27 = &off_1E60CD308;
            v27[1] = v29;
            *(_QWORD *)(v28 + 8) = v27;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          v15 = (_QWORD *)operator new();
          v16 = *(_QWORD *)(v21 + 8);
          v15[1] = *(_QWORD *)(v6 + 8);
          v15[2] = v16;
          *v15 = &off_1E60CD218;
          *(_QWORD *)(v6 + 8) = v15;
          *(_QWORD *)(v21 + 8) = 0;
          v17 = (_QWORD *)operator new();
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *v17 = &off_1E60CD308;
          v17[1] = v18;
          *(_QWORD *)(v21 + 8) = v17;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
          v19 = (_QWORD *)operator new();
          v20 = *(_QWORD *)(v21 + 8);
          *v19 = &off_1E60CD888;
          v19[1] = v20;
          *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(v21 + 8);
          if (v8 == a3)
            return a3;
          goto LABEL_14;
        }
        v23 = sub_1B033931C(a1, v26, a3, v24, v25 + 1, *(_DWORD *)(a1 + 28) + 1);
      }
      if (v23 == v8)
        goto LABEL_11;
    }
  }
  return a3;
}

char *sub_1B0338474(uint64_t a1, unsigned __int8 *a2, char *a3)
{
  unsigned __int8 *v3;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;

  v3 = a2;
  if (a2 == (unsigned __int8 *)a3)
    return (char *)a2;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E60CD558;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != (unsigned __int8 *)a3)
  {
    while (v3 != (unsigned __int8 *)a3)
    {
      v10 = (char *)v3;
      v11 = *(_QWORD *)(a1 + 56);
      v12 = *(_DWORD *)(a1 + 28);
      v13 = (unsigned __int8 *)sub_1B0340520(a1, v10, a3);
      if (v10 != (char *)v13)
      {
        v3 = sub_1B0340818(a1, v13, (unsigned __int8 *)a3, v11, v12 + 1, *(_DWORD *)(a1 + 28) + 1);
        if (v10 != (char *)v3)
          continue;
      }
      if (v10 + 1 != a3 || *v10 != 36)
        sub_1B03404D4();
      v14 = operator new();
      v15 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v16 = *(_QWORD *)(a1 + 56);
      v17 = *(_QWORD *)(v16 + 8);
      *(_QWORD *)v14 = &off_1E60CD5B8;
      *(_QWORD *)(v14 + 8) = v17;
      *(_BYTE *)(v14 + 16) = v15;
      *(_QWORD *)(v16 + 8) = v14;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return a3;
    }
  }
  return a3;
}

char *sub_1B0338604(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = sub_1B0340EDC(a1, a2, a3);
  if (v7 == a2)
    goto LABEL_12;
  do
  {
    v8 = v7;
    v7 = sub_1B0340EDC(a1, v7, a3);
  }
  while (v8 != v7);
  if (v8 == a2)
LABEL_12:
    sub_1B03404D4();
  if (v8 == a3)
    return a3;
  while (*v8 == 124)
  {
    v9 = *(_QWORD *)(a1 + 56);
    v10 = v8 + 1;
    v11 = sub_1B0340EDC(a1, v8 + 1, a3);
    if (v8 + 1 == v11)
      goto LABEL_12;
    do
    {
      v8 = v11;
      v11 = sub_1B0340EDC(a1, v11, a3);
    }
    while (v8 != v11);
    if (v8 == v10)
      goto LABEL_12;
    v12 = (_QWORD *)operator new();
    v13 = *(_QWORD *)(v9 + 8);
    v12[1] = *(_QWORD *)(v6 + 8);
    v12[2] = v13;
    *v12 = &off_1E60CD218;
    *(_QWORD *)(v6 + 8) = v12;
    *(_QWORD *)(v9 + 8) = 0;
    v14 = (_QWORD *)operator new();
    v15 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *v14 = &off_1E60CD308;
    v14[1] = v15;
    *(_QWORD *)(v9 + 8) = v14;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = 0;
    v16 = (_QWORD *)operator new();
    v17 = *(_QWORD *)(v9 + 8);
    *v16 = &off_1E60CD888;
    v16[1] = v17;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v9 + 8);
    if (v8 == a3)
      return a3;
  }
  return v8;
}

void sub_1B0338790()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B03387C8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B03387E0()
{
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B03387F4(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_1B033880C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0338830(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1B0338848(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B03B0A4FLL)
    return a1 + 24;
  if (((v3 & 0x80000001B03B0A4FLL & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B03B0A4FLL))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B03B0A4FLL & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *sub_1B03388C8(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B0338908(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0338958(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1B033896C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B03389AC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

char *sub_1B03389FC(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v6;
  int v7;
  char *v8;
  int v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (**v14)();
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  std::locale v21[3];
  int v22;
  int v23;

  v3 = a2;
  if (a2 == a3)
    return v3;
  v6 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 != a3)
      {
        v16 = a2[1];
        if (v16 == 66)
        {
          v17 = operator new();
          v19 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v17 = &off_1E60CD3B0;
          *(_QWORD *)(v17 + 8) = v19;
          std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v17 + 40) = 1;
        }
        else
        {
          if (v16 != 98)
            return v3;
          v17 = operator new();
          v18 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          *(_QWORD *)v17 = &off_1E60CD3B0;
          *(_QWORD *)(v17 + 8) = v18;
          std::locale::locale((std::locale *)(v17 + 16), (const std::locale *)a1);
          *(_OWORD *)(v17 + 24) = *(_OWORD *)(a1 + 8);
          *(_BYTE *)(v17 + 40) = 0;
        }
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        return v3 + 2;
      }
      return v3;
    }
    if (v6 != 94)
      return v3;
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = &off_1E60CD558;
LABEL_17:
    *(_QWORD *)v10 = v14;
    *(_QWORD *)(v10 + 8) = v13;
    *(_BYTE *)(v10 + 16) = v11;
    *(_QWORD *)(v12 + 8) = v10;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    return ++v3;
  }
  if (v6 == 36)
  {
    v10 = operator new();
    v11 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v12 = *(_QWORD *)(a1 + 56);
    v13 = *(_QWORD *)(v12 + 8);
    v14 = &off_1E60CD5B8;
    goto LABEL_17;
  }
  if (v6 != 40 || a2 + 1 == a3 || a2[1] != 63 || a2 + 2 == a3)
    return v3;
  v7 = a2[2];
  if (v7 == 33)
  {
    sub_1B0339CB0((uint64_t)v21);
    v22 = *(_DWORD *)(a1 + 24);
    v8 = (char *)sub_1B0337C30(v21, v3 + 3, a3);
    v20 = v23;
    sub_1B0339D1C(a1, (uint64_t)v21, 1, *(_DWORD *)(a1 + 28));
    *(_DWORD *)(a1 + 28) += v20;
    if (v8 == a3 || *v8 != 41)
      sub_1B0339DE0();
    goto LABEL_27;
  }
  if (v7 != 61)
    return v3;
  sub_1B0339CB0((uint64_t)v21);
  v22 = *(_DWORD *)(a1 + 24);
  v8 = (char *)sub_1B0337C30(v21, v3 + 3, a3);
  v9 = v23;
  sub_1B0339D1C(a1, (uint64_t)v21, 0, *(_DWORD *)(a1 + 28));
  *(_DWORD *)(a1 + 28) += v9;
  if (v8 == a3 || *v8 != 41)
    sub_1B0339DE0();
LABEL_27:
  sub_1B0337BC8(v21);
  return v8 + 1;
}

void sub_1B0338D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1B0337BC8(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0338D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1B0337BC8(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0338D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1B0337BC8(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0338D40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  sub_1B0337BC8(&a9);
  _Unwind_Resume(a1);
}

char *sub_1B0338D54(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  int v5;
  char *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unsigned __int8 *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  int v28;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v5 = *a2;
  v7 = a2;
  switch(*a2)
  {
    case '$':
    case ')':
    case ']':
    case '^':
    case '|':
    case '}':
      return v7;
    case '(':
      if (a2 + 1 == a3)
        goto LABEL_57;
      if (a2 + 2 != a3 && a2[1] == 63 && a2[2] == 58)
      {
        ++*(_DWORD *)(a1 + 36);
        v12 = (char *)sub_1B03381EC(a1, a2 + 3, a3);
        if (v12 != a3 && *v12 == 41)
        {
          --*(_DWORD *)(a1 + 36);
          return v12 + 1;
        }
LABEL_57:
        sub_1B0339DE0();
      }
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v17 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v16 = operator new();
        v17 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v17;
        v18 = *(_QWORD *)(a1 + 56);
        v19 = *(_QWORD *)(v18 + 8);
        *(_QWORD *)v16 = &off_1E60CD918;
        *(_QWORD *)(v16 + 8) = v19;
        *(_DWORD *)(v16 + 16) = v17;
        *(_QWORD *)(v18 + 8) = v16;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v20 = (char *)sub_1B03381EC(a1, v3 + 1, a3);
      if (v20 == a3)
        goto LABEL_57;
      v3 = v20;
      if (*v20 != 41)
        goto LABEL_57;
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v21 = operator new();
        v22 = *(_QWORD *)(a1 + 56);
        v23 = *(_QWORD *)(v22 + 8);
        *(_QWORD *)v21 = &off_1E60CD8E8;
        *(_QWORD *)(v21 + 8) = v23;
        *(_DWORD *)(v21 + 16) = v17;
        *(_QWORD *)(v22 + 8) = v21;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      return v3 + 1;
    case '*':
    case '+':
    case '?':
    case '{':
      sub_1B033C2DC();
    case '.':
      v9 = (_QWORD *)operator new();
      v10 = *(_QWORD *)(a1 + 56);
      v11 = *(_QWORD *)(v10 + 8);
      *v9 = &off_1E60CD8B8;
      v9[1] = v11;
      *(_QWORD *)(v10 + 8) = v9;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      return v3 + 1;
    case '[':
      return sub_1B033B1FC(a1, a2, a3);
    case '\\':
      v7 = a2;
      if (v5 != 92)
        return v7;
      v13 = (unsigned __int8 *)(a2 + 1);
      if (a2 + 1 == a3)
        sub_1B033C3B8();
      v14 = *v13;
      v15 = (v14 - 48);
      if (v14 != 48)
      {
        if ((v14 - 49) <= 8)
        {
          v7 = v3 + 2;
          if (v3 + 2 == a3)
          {
            v7 = a3;
          }
          else
          {
            while (1)
            {
              v24 = *v7;
              if ((v24 - 48) > 9)
                break;
              if (v15 >= 0x19999999)
                goto LABEL_58;
              ++v7;
              LODWORD(v15) = v24 + 10 * v15 - 48;
              if (v7 == a3)
              {
                v7 = a3;
                break;
              }
            }
            if (!(_DWORD)v15)
LABEL_58:
              sub_1B033C934();
          }
          if (v15 > *(_DWORD *)(a1 + 28))
            goto LABEL_58;
          sub_1B033C980(a1, v15);
          if (v7 != (char *)v13)
            return v7;
          LOBYTE(v14) = *v13;
        }
        switch((char)v14)
        {
          case 'D':
            v25 = operator new();
            sub_1B033D634(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_49;
          case 'S':
            v25 = operator new();
            sub_1B033D634(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_53;
          case 'W':
            v27 = operator new();
            sub_1B033D634(v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 1, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
            goto LABEL_51;
          case 'd':
            v25 = operator new();
            sub_1B033D634(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_49:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v25;
            *(_QWORD *)(a1 + 56) = v25;
            v28 = *(_DWORD *)(v25 + 160) | 0x400;
            goto LABEL_54;
          case 's':
            v25 = operator new();
            sub_1B033D634(v25, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_53:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v25;
            *(_QWORD *)(a1 + 56) = v25;
            v28 = *(_DWORD *)(v25 + 160) | 0x4000;
LABEL_54:
            *(_DWORD *)(v25 + 160) = v28;
            break;
          case 'w':
            v27 = operator new();
            sub_1B033D634(v27, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), 0, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
LABEL_51:
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v27;
            *(_QWORD *)(a1 + 56) = v27;
            *(_DWORD *)(v27 + 160) |= 0x500u;
            sub_1B033D1BC(v27, 95);
            break;
          default:
            v26 = sub_1B033C404(a1, (unsigned __int8 *)v3 + 1, (unsigned __int8 *)a3, 0);
            if (v13 == v26)
              return v3;
            else
              return (char *)v26;
        }
        return v3 + 2;
      }
      sub_1B033C7C0(a1, v15);
      return v3 + 2;
    default:
      sub_1B033C7C0(a1, (char)v5);
      return v3 + 1;
  }
}

void sub_1B03392E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1B5E07CD8](v1, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

char *sub_1B033931C(uint64_t a1, char *a2, char *a3, uint64_t a4, int a5, int a6)
{
  char *v6;
  int v11;
  int v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  _QWORD *v19;
  char *v20;
  int v21;
  int v22;
  char *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  BOOL v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  BOOL v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  char *v52;
  int v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  char *v60;
  int v61;
  _QWORD *v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint64_t v71;

  v6 = a2;
  if (a2 == a3)
    return v6;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = *a2;
  if (v12 <= 62)
  {
    if (v12 == 42)
    {
      v13 = a2 + 1;
      if (v11)
        v28 = 1;
      else
        v28 = v13 == a3;
      if (!v28 && *v13 == 63)
      {
        v29 = (_QWORD *)operator new();
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *v29 = &off_1E60CD308;
        v29[1] = v31;
        *(_QWORD *)(v30 + 8) = 0;
        v17 = operator new();
        v32 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v17 + 16) = v29;
        *(_QWORD *)v17 = &off_1E60CD948;
        *(_OWORD *)(v17 + 24) = xmmword_1B03AF6D0;
        *(_DWORD *)(v17 + 40) = v32;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 0;
        *(_QWORD *)(a4 + 8) = 0;
        v19 = (_QWORD *)operator new();
        goto LABEL_40;
      }
      v44 = (_QWORD *)operator new();
      v45 = *(_QWORD *)(a1 + 56);
      v46 = *(_QWORD *)(v45 + 8);
      *v44 = &off_1E60CD308;
      v44[1] = v46;
      *(_QWORD *)(v45 + 8) = 0;
      v41 = operator new();
      v47 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v41 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v41 + 16) = v44;
      *(_QWORD *)v41 = &off_1E60CD948;
      *(_OWORD *)(v41 + 24) = xmmword_1B03AF6D0;
      *(_DWORD *)(v41 + 40) = v47;
      *(_DWORD *)(v41 + 44) = a5;
      *(_DWORD *)(v41 + 48) = a6;
      *(_BYTE *)(v41 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v43 = (_QWORD *)operator new();
      goto LABEL_44;
    }
    if (v12 == 43)
    {
      v13 = a2 + 1;
      if (!v11 && v13 != a3 && *v13 == 63)
      {
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(v15 + 8);
        *v14 = &off_1E60CD308;
        v14[1] = v16;
        *(_QWORD *)(v15 + 8) = 0;
        v17 = operator new();
        v18 = *(_DWORD *)(a1 + 32);
        *(_QWORD *)(v17 + 8) = *(_QWORD *)(a4 + 8);
        *(_QWORD *)(v17 + 16) = v14;
        *(_QWORD *)v17 = &off_1E60CD948;
        *(_OWORD *)(v17 + 24) = xmmword_1B03AFDE0;
        *(_DWORD *)(v17 + 40) = v18;
        *(_DWORD *)(v17 + 44) = a5;
        *(_DWORD *)(v17 + 48) = a6;
        *(_BYTE *)(v17 + 52) = 0;
        *(_QWORD *)(a4 + 8) = 0;
        v19 = (_QWORD *)operator new();
LABEL_40:
        v6 += 2;
LABEL_71:
        *v19 = &off_1E60CD470;
        v19[1] = v17;
        *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v19;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
        *(_QWORD *)(a4 + 8) = v17;
        ++*(_DWORD *)(a1 + 32);
        return v6;
      }
      v38 = (_QWORD *)operator new();
      v39 = *(_QWORD *)(a1 + 56);
      v40 = *(_QWORD *)(v39 + 8);
      *v38 = &off_1E60CD308;
      v38[1] = v40;
      *(_QWORD *)(v39 + 8) = 0;
      v41 = operator new();
      v42 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v41 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v41 + 16) = v38;
      *(_QWORD *)v41 = &off_1E60CD948;
      *(_OWORD *)(v41 + 24) = xmmword_1B03AFDE0;
      *(_DWORD *)(v41 + 40) = v42;
      *(_DWORD *)(v41 + 44) = a5;
      *(_DWORD *)(v41 + 48) = a6;
      *(_BYTE *)(v41 + 52) = 1;
      *(_QWORD *)(a4 + 8) = 0;
      v43 = (_QWORD *)operator new();
      goto LABEL_44;
    }
    return v6;
  }
  if (v12 == 63)
  {
    v13 = a2 + 1;
    if (v11)
      v33 = 1;
    else
      v33 = v13 == a3;
    if (!v33 && *v13 == 63)
    {
      v34 = (_QWORD *)operator new();
      v35 = *(_QWORD *)(a1 + 56);
      v36 = *(_QWORD *)(v35 + 8);
      *v34 = &off_1E60CD308;
      v34[1] = v36;
      *(_QWORD *)(v35 + 8) = 0;
      v17 = operator new();
      v37 = *(_DWORD *)(a1 + 32);
      *(_QWORD *)(v17 + 8) = *(_QWORD *)(a4 + 8);
      *(_QWORD *)(v17 + 16) = v34;
      *(_QWORD *)v17 = &off_1E60CD948;
      *(_OWORD *)(v17 + 24) = xmmword_1B03AFE70;
      *(_DWORD *)(v17 + 40) = v37;
      *(_DWORD *)(v17 + 44) = a5;
      *(_DWORD *)(v17 + 48) = a6;
      *(_BYTE *)(v17 + 52) = 0;
      *(_QWORD *)(a4 + 8) = 0;
      v19 = (_QWORD *)operator new();
      goto LABEL_40;
    }
    v48 = (_QWORD *)operator new();
    v49 = *(_QWORD *)(a1 + 56);
    v50 = *(_QWORD *)(v49 + 8);
    *v48 = &off_1E60CD308;
    v48[1] = v50;
    *(_QWORD *)(v49 + 8) = 0;
    v41 = operator new();
    v51 = *(_DWORD *)(a1 + 32);
    *(_QWORD *)(v41 + 8) = *(_QWORD *)(a4 + 8);
    *(_QWORD *)(v41 + 16) = v48;
    *(_QWORD *)v41 = &off_1E60CD948;
    *(_OWORD *)(v41 + 24) = xmmword_1B03AFE70;
    *(_DWORD *)(v41 + 40) = v51;
    *(_DWORD *)(v41 + 44) = a5;
    *(_DWORD *)(v41 + 48) = a6;
    *(_BYTE *)(v41 + 52) = 1;
    *(_QWORD *)(a4 + 8) = 0;
    v43 = (_QWORD *)operator new();
LABEL_44:
    *v43 = &off_1E60CD470;
    v43[1] = v41;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v43;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(v41 + 16);
    *(_QWORD *)(a4 + 8) = v41;
    ++*(_DWORD *)(a1 + 32);
    return v13;
  }
  if (v12 == 123)
  {
    v20 = a2 + 1;
    if (a2 + 1 == a3)
      goto LABEL_73;
    v21 = *v20;
    if ((v21 & 0xF8) != 0x30 && (v21 & 0xFE) != 0x38)
      goto LABEL_73;
    v22 = v21 - 48;
    v23 = a2 + 2;
    if (a2 + 2 == a3)
    {
LABEL_19:
      v23 = a3;
    }
    else
    {
      while (1)
      {
        v24 = *v23;
        if ((v24 & 0xF8) != 0x30 && (v24 & 0xFE) != 0x38)
          break;
        if (v22 >= 214748364)
          goto LABEL_73;
        v22 = v24 + 10 * v22 - 48;
        if (++v23 == a3)
          goto LABEL_19;
      }
    }
    if (v23 == v20)
      goto LABEL_73;
    if (v23 != a3)
    {
      v25 = *v23;
      if (v25 != 44)
      {
        if (v25 == 125)
        {
          v6 = v23 + 1;
          if (v11 || v6 == a3 || *v6 != 63)
          {
            v54 = (_QWORD *)operator new();
            v55 = *(_QWORD *)(a1 + 56);
            v56 = *(_QWORD *)(v55 + 8);
            *v54 = &off_1E60CD308;
            v54[1] = v56;
            *(_QWORD *)(v55 + 8) = 0;
            v17 = operator new();
            v57 = *(_DWORD *)(a1 + 32);
            v58 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v17 = &off_1E60CD948;
            *(_QWORD *)(v17 + 8) = v58;
            *(_QWORD *)(v17 + 16) = v54;
            *(_QWORD *)(v17 + 24) = v22;
            *(_QWORD *)(v17 + 32) = v22;
            *(_DWORD *)(v17 + 40) = v57;
            *(_DWORD *)(v17 + 44) = a5;
            *(_DWORD *)(v17 + 48) = a6;
            *(_BYTE *)(v17 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v19 = (_QWORD *)operator new();
            goto LABEL_71;
          }
          v26 = v22;
          v6 = v23 + 2;
          v27 = v22;
          goto LABEL_68;
        }
        goto LABEL_73;
      }
      v52 = v23 + 1;
      if (v23 + 1 == a3)
        goto LABEL_73;
      v53 = *v52;
      if (v53 == 125)
      {
        v6 = v23 + 2;
        if (v11 || v6 == a3 || *v6 != 63)
        {
          v62 = (_QWORD *)operator new();
          v63 = *(_QWORD *)(a1 + 56);
          v64 = *(_QWORD *)(v63 + 8);
          *v62 = &off_1E60CD308;
          v62[1] = v64;
          *(_QWORD *)(v63 + 8) = 0;
          v17 = operator new();
          v65 = *(_DWORD *)(a1 + 32);
          v66 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v17 = &off_1E60CD948;
          *(_QWORD *)(v17 + 8) = v66;
          *(_QWORD *)(v17 + 16) = v62;
          *(_QWORD *)(v17 + 24) = v22;
          *(_QWORD *)(v17 + 32) = -1;
          *(_DWORD *)(v17 + 40) = v65;
          *(_DWORD *)(v17 + 44) = a5;
          *(_DWORD *)(v17 + 48) = a6;
          *(_BYTE *)(v17 + 52) = 1;
          *(_QWORD *)(a4 + 8) = 0;
          v19 = (_QWORD *)operator new();
          goto LABEL_71;
        }
        v6 = v23 + 3;
        sub_1B033FC10(a1, v22, a4, a5, a6);
        return v6;
      }
      if ((v53 & 0xF8) == 0x30 || (v53 & 0xFE) == 0x38)
      {
        v59 = v53 - 48;
        v60 = v23 + 2;
        if (v60 == a3)
        {
LABEL_59:
          v60 = a3;
        }
        else
        {
          while (1)
          {
            v61 = *v60;
            if ((v61 & 0xF8) != 0x30 && (v61 & 0xFE) != 0x38)
              break;
            if (v59 >= 214748364)
              goto LABEL_73;
            v59 = v61 + 10 * v59 - 48;
            if (++v60 == a3)
              goto LABEL_59;
          }
        }
        if (v60 != v52 && v60 != a3 && *v60 == 125)
        {
          if (v59 >= v22)
          {
            v6 = v60 + 1;
            if (v11 || v6 == a3 || *v6 != 63)
            {
              v67 = (_QWORD *)operator new();
              v68 = *(_QWORD *)(a1 + 56);
              v69 = *(_QWORD *)(v68 + 8);
              *v67 = &off_1E60CD308;
              v67[1] = v69;
              *(_QWORD *)(v68 + 8) = 0;
              v17 = operator new();
              v70 = *(_DWORD *)(a1 + 32);
              v71 = *(_QWORD *)(a4 + 8);
              *(_QWORD *)v17 = &off_1E60CD948;
              *(_QWORD *)(v17 + 8) = v71;
              *(_QWORD *)(v17 + 16) = v67;
              *(_QWORD *)(v17 + 24) = v22;
              *(_QWORD *)(v17 + 32) = v59;
              *(_DWORD *)(v17 + 40) = v70;
              *(_DWORD *)(v17 + 44) = a5;
              *(_DWORD *)(v17 + 48) = a6;
              *(_BYTE *)(v17 + 52) = 1;
              *(_QWORD *)(a4 + 8) = 0;
              v19 = (_QWORD *)operator new();
              goto LABEL_71;
            }
            v26 = v22;
            v27 = v59;
            v6 = v60 + 2;
LABEL_68:
            sub_1B033FD54(a1, v26, v27, a4, a5, a6);
            return v6;
          }
LABEL_73:
          sub_1B033FE98();
        }
      }
    }
    sub_1B033FEE4();
  }
  return v6;
}

void sub_1B0339C18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0339CB0(uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1B5E07C24]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x1E0DE4C08]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1B0339D08(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *sub_1B0339D1C(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &off_1E60CD278;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_1B0339DE0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B0339E18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0339E2C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B0339E6C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0339EBC(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

_QWORD *sub_1B0339F1C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B0339F5C(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0339FAC(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *sub_1B0339FFC(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD3B0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1B033A04C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD3B0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033A0AC(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *sub_1B033A200(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD278;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_1B033A298(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD278;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B033A340(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_1B033A91C((uint64_t)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_1B033A4D0(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (uint64_t)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  operator delete(v10);
}

void sub_1B033A4B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B033A4D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *i;
  void *v31;
  void *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _BYTE *v38;
  unsigned int v39;
  uint64_t v40;
  char v41;
  _BYTE v43[56];
  void *__p[2];
  _QWORD v45[3];
  __int128 v46;
  char v47;
  char *v48;
  char *v49;
  unint64_t v50;

  v48 = 0;
  v49 = 0;
  v50 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v46 = a3;
    *((_QWORD *)&v46 + 1) = a3;
    v47 = 0;
    *(_DWORD *)v43 = 0;
    memset(&v43[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v45, 0, 21);
    v13 = sub_1B033AC00((void **)&v48, (uint64_t)v43);
    v49 = v13;
    if (__p[0])
      operator delete(__p[0]);
    if (*(_QWORD *)&v43[32])
      operator delete(*(void **)&v43[32]);
    v14 = *((_QWORD *)v13 - 8);
    *((_DWORD *)v13 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      sub_1B033ADCC((void **)v13 - 8, v15 - v16, &v46);
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      sub_1B033AF68((char **)v13 - 5, v18 - v19);
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        sub_1B033AAE8();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = *((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v34 = *a4;
          *(_QWORD *)v34 = a2;
          *(_QWORD *)(v34 + 8) = v23;
          *(_BYTE *)(v34 + 16) = 1;
          v35 = *((_QWORD *)v13 - 8);
          v36 = *((_QWORD *)v13 - 7) - v35;
          if (v36)
          {
            v37 = 0xAAAAAAAAAAAAAAABLL * (v36 >> 3);
            v38 = (_BYTE *)(v35 + 16);
            v39 = 1;
            do
            {
              v40 = v34 + 24 * v39;
              *(_OWORD *)v40 = *((_OWORD *)v38 - 1);
              v41 = *v38;
              v38 += 24;
              *(_BYTE *)(v40 + 16) = v41;
            }
            while (v37 > v39++);
          }
          v6 = 1;
          v21 = v48;
          if (!v48)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v49;
          v25 = (void *)*((_QWORD *)v49 - 5);
          if (v25)
          {
            *((_QWORD *)v49 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v49 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          sub_1B033B08C((uint64_t)v43, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v45[1] + 24))(v45[1], 0, v43);
          v27 = v49;
          if ((unint64_t)v49 >= v50)
          {
            v49 = sub_1B033AC00((void **)&v48, (uint64_t)v43);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v28 = *(_OWORD *)&v43[16];
            *(_OWORD *)v49 = *(_OWORD *)v43;
            *((_OWORD *)v27 + 1) = v28;
            *((_QWORD *)v27 + 4) = 0;
            *((_QWORD *)v27 + 5) = 0;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v43[32];
            *((_QWORD *)v27 + 6) = *(_QWORD *)&v43[48];
            memset(&v43[32], 0, 24);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v27 + 9) = v45[0];
            __p[0] = 0;
            __p[1] = 0;
            v45[0] = 0;
            v29 = v45[1];
            *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v45[1] + 5);
            *((_QWORD *)v27 + 10) = v29;
            v49 = v27 + 96;
          }
          if (*(_QWORD *)&v43[32])
          {
            *(_QWORD *)&v43[40] = *(_QWORD *)&v43[32];
            operator delete(*(void **)&v43[32]);
          }
LABEL_16:
          v21 = v48;
          v13 = v49;
          ++v20;
          if (v48 != v49)
            continue;
          v6 = 0;
          if (v48)
          {
LABEL_37:
            for (i = v49; i != v21; i -= 96)
            {
              v31 = (void *)*((_QWORD *)i - 5);
              if (v31)
              {
                *((_QWORD *)i - 4) = v31;
                operator delete(v31);
              }
              v32 = (void *)*((_QWORD *)i - 8);
              if (v32)
              {
                *((_QWORD *)i - 7) = v32;
                operator delete(v32);
              }
            }
            operator delete(v21);
          }
          break;
        default:
          sub_1B033AB34();
      }
      break;
    }
  }
  return v6;
}

void sub_1B033A898(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B033AB80((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B033A8AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_1B033AAA8((uint64_t *)va);
  sub_1B033AB80((void **)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_1B033A8F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B033AB80((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_1B033A908(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B033AB80((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_1B033A91C(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
      sub_1B032A0E8();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_24;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v13 = &result[3 * a2];
LABEL_24:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

_QWORD *sub_1B033AAA8(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1B033AAE8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033AB20(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B033AB34()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033AB6C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **sub_1B033AB80(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_1B033AC00(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_1B032A0E8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_1B02D72AC();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_1B033ADCC(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_1B032A0E8();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_1B02D72AC();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_1B033AF68(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_1B032A0E8();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1B02D72AC();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_1B033B08C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  _BYTE *v11;
  _BYTE *v12;
  uint64_t v13;
  char *v14;
  size_t v15;
  uint64_t v16;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_1B032A0E8();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (_BYTE *)*((_QWORD *)a2 + 7);
  v11 = (_BYTE *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_1B032A0E8();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    v15 = v13 & 0xFFFFFFFFFFFFFFF0;
    memcpy(v14, v12, v15);
    *(_QWORD *)(a1 + 64) = &v14[v15];
  }
  v16 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v16;
  return a1;
}

void sub_1B033B1C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1B033B1FC(uint64_t a1, char *a2, char *a3)
{
  int v5;
  char v6;
  std::string *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  std::string *v10;
  int v11;
  std::string *v12;
  int v13;
  uint64_t v14;
  std::string *v15;
  char *v16;
  std::string::value_type *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string *v20;
  std::string *v21;
  int64_t v22;
  int v23;
  int v24;
  int v25;
  std::string *p_p;
  std::string::value_type *v27;
  char *v28;
  std::string::value_type *v29;
  char *v30;
  char *v31;
  int v32;
  std::string::size_type v33;
  std::string::value_type *v34;
  int64_t v35;
  uint64_t v36;
  std::string::size_type v37;
  std::string::value_type *v38;
  std::string *v39;
  std::string::value_type *v40;
  std::string::value_type *v41;
  int v42;
  std::string::size_type size;
  uint64_t v44;
  int v45;
  std::string *v46;
  std::string *v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  __int128 *v51;
  std::string::size_type *v52;
  unint64_t v53;
  __int128 v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  std::string *v58;
  std::string *v59;
  std::string::size_type *v60;
  std::string::size_type *v61;
  unint64_t v62;
  __int128 v63;
  std::string::value_type v64;
  std::string::size_type v65;
  std::string *v66;
  std::string::size_type v67;
  std::string *p_src;
  std::string::size_type v69;
  int v70;
  std::string::size_type v71;
  std::string::size_type v72;
  std::string *v73;
  std::string::size_type v74;
  unint64_t v75;
  __int128 v76;
  std::string::value_type v77;
  std::string::size_type v78;
  std::string *v79;
  std::string *v80;
  std::regex_traits<char>::char_class_type classname;
  std::string *v82;
  BOOL v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::value_type v87;
  std::string *v88;
  std::string::size_type v89;
  BOOL v90;
  std::string::size_type v91;
  std::string::size_type v92;
  std::string *v93;
  std::string::value_type v94;
  std::string *v95;
  std::string::size_type v96;
  std::string::size_type v97;
  std::string *v98;
  std::string::size_type v99;
  std::string *v100;
  unint64_t v101;
  __int128 v102;
  std::string::size_type v103;
  std::string::size_type v104;
  std::string::size_type v105;
  std::string *v106;
  std::string::value_type v107;
  std::string *v108;
  std::string *v109;
  std::string::value_type v110;
  std::string *v111;
  unint64_t v112;
  __int128 v113;
  std::string::size_type v114;
  char *v115;
  int v116;
  void *v117;
  char *v118;
  int v119;
  void **v121;
  uint64_t v122;
  uint64_t v123;
  std::string v124;
  std::string v125;
  std::string v126;
  std::string __p;
  std::string __src;
  std::string v129;
  std::string v130;
  std::string v131;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_291;
    v5 = a2[1];
    v6 = v5 == 94;
    v7 = (std::string *)(v5 == 94 ? a2 + 2 : a2 + 1);
    v8 = operator new();
    sub_1B033D634(v8, a1, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8), v6, *(_DWORD *)(a1 + 24) & 1, (*(_DWORD *)(a1 + 24) & 8) != 0);
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    *(_QWORD *)(a1 + 56) = v8;
    if (v7 == (std::string *)a3)
      goto LABEL_291;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && v7->__r_.__value_.__s.__data_[0] == 93)
    {
      sub_1B033D1BC(v8, 93);
      v7 = (std::string *)((char *)v7 + 1);
    }
    if (v7 == (std::string *)a3)
      goto LABEL_291;
    v122 = v8 + 16;
    v121 = (void **)(v8 + 88);
    v123 = 4 - (_QWORD)a3;
    v9 = (unsigned __int8 *)(a3 - 5);
    while (1)
    {
      v10 = v7;
      if (v7 == (std::string *)a3)
      {
        v7 = (std::string *)a3;
        goto LABEL_15;
      }
      v11 = v7->__r_.__value_.__s.__data_[0];
      v12 = v7;
      if (v11 == 93)
        goto LABEL_14;
      v12 = (std::string *)((char *)&v7->__r_.__value_.__l.__data_ + 1);
      memset(&__p, 0, sizeof(__p));
      if ((char *)&v7->__r_.__value_.__l.__data_ + 1 != a3 && v11 == 91)
      {
        v13 = v12->__r_.__value_.__s.__data_[0];
        switch(v13)
        {
          case '.':
            v38 = &v7->__r_.__value_.__s.__data_[2];
            if (a3 - &v7->__r_.__value_.__s.__data_[2] < 2)
              goto LABEL_290;
            v39 = v7;
            v40 = &v7->__r_.__value_.__s.__data_[2];
            v41 = &v7->__r_.__value_.__s.__data_[3];
            if (*v38 == 46)
              goto LABEL_82;
            while (1)
            {
              do
              {
                if (a3 - 4 == (char *)v39)
                  goto LABEL_290;
                v39 = (std::string *)((char *)v39 + 1);
                v40 = v41;
                v42 = *v41++;
              }
              while (v42 != 46);
LABEL_82:
              if (*v41 == 93)
              {
                if (v40 == a3)
LABEL_290:
                  sub_1B033E7A4();
                sub_1B033F42C((uint64_t)&v130, a1, (uint64_t)v38, &v39->__r_.__value_.__s.__data_[2]);
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                __p = v130;
                size = HIBYTE(v130.__r_.__value_.__r.__words[2]);
                if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  size = __p.__r_.__value_.__l.__size_;
                if (size - 1 >= 2)
                  sub_1B033F3E0();
                v12 = (std::string *)(v40 + 2);
                v23 = *(_DWORD *)(a1 + 24) & 0x1F0;
                if (v12 == (std::string *)a3)
                  goto LABEL_43;
                goto LABEL_42;
              }
            }
          case ':':
            v34 = &v7->__r_.__value_.__s.__data_[2];
            if (a3 - &v7->__r_.__value_.__s.__data_[2] < 2)
              goto LABEL_289;
            v35 = (char *)v7 - a3;
            v36 = 2;
            while (1)
            {
              v37 = v36 - 2;
              while (v7->__r_.__value_.__s.__data_[v37 + 2] != 58)
              {
                ++v37;
                if (v35 + v37 == -3)
                  goto LABEL_289;
              }
              if (v7->__r_.__value_.__s.__data_[v37 + 3] == 93)
                break;
              v36 = v37 + 3;
              if (v35 + v37 == -4)
                goto LABEL_289;
            }
            v44 = (uint64_t)v7->__r_.__value_.__r.__words + v37 + 2;
            if ((char *)v44 == a3)
              goto LABEL_289;
            if (v37 > 0x7FFFFFFFFFFFFFF7)
              sub_1B02D78C4();
            v45 = *(_DWORD *)(a1 + 24);
            if (v37 >= 0x17)
            {
              v49 = (v37 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v37 | 7) != 0x17)
                v49 = v37 | 7;
              v50 = v49 + 1;
              v46 = (std::string *)operator new(v49 + 1);
              v130.__r_.__value_.__l.__size_ = v37;
              v130.__r_.__value_.__r.__words[2] = v50 | 0x8000000000000000;
              v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
            }
            else
            {
              *((_BYTE *)&v130.__r_.__value_.__s + 23) = v37;
              v46 = &v130;
              if (!v37)
              {
                v47 = &v130;
                goto LABEL_165;
              }
            }
            if (v37 < 0x20)
            {
              v47 = v46;
            }
            else if ((unint64_t)((char *)v46 - v34) < 0x20)
            {
              v47 = v46;
            }
            else
            {
              v47 = (std::string *)((char *)v46 + (v37 & 0xFFFFFFFFFFFFFFE0));
              v34 += v37 & 0xFFFFFFFFFFFFFFE0;
              v51 = (__int128 *)((char *)&v10->__r_.__value_.__r.__words[2] + 2);
              v52 = &v46->__r_.__value_.__r.__words[2];
              v53 = v37 & 0xFFFFFFFFFFFFFFE0;
              do
              {
                v54 = *v51;
                *((_OWORD *)v52 - 1) = *(v51 - 1);
                *(_OWORD *)v52 = v54;
                v51 += 2;
                v52 += 4;
                v53 -= 32;
              }
              while (v53);
              if (v37 == (v37 & 0x7FFFFFFFFFFFFFE0))
                goto LABEL_165;
            }
            do
            {
              v77 = *v34++;
              v47->__r_.__value_.__s.__data_[0] = v77;
              v47 = (std::string *)((char *)v47 + 1);
            }
            while (v34 != (std::string::value_type *)v44);
LABEL_165:
            v47->__r_.__value_.__s.__data_[0] = 0;
            v78 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v79 = &v130;
            else
              v79 = (std::string *)v130.__r_.__value_.__r.__words[0];
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v78 = v130.__r_.__value_.__l.__size_;
            (*(void (**)(_QWORD, std::string *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v79, (char *)v79 + v78);
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v80 = &v130;
            else
              v80 = (std::string *)v130.__r_.__value_.__r.__words[0];
            classname = std::__get_classname((const char *)v80, v45 & 1);
            v9 = (unsigned __int8 *)(a3 - 5);
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v130.__r_.__value_.__l.__data_);
            if (!classname)
              sub_1B033F6C8();
            v48 = 0;
            *(_DWORD *)(v8 + 160) |= classname;
            v7 = (std::string *)((char *)v10->__r_.__value_.__r.__words + v37 + 4);
            v28 = (char *)v10;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
LABEL_99:
              v12 = (std::string *)v28;
              if ((v48 & 1) == 0)
                goto LABEL_15;
              goto LABEL_14;
            }
            goto LABEL_184;
          case '=':
            if (a3 - &v7->__r_.__value_.__s.__data_[2] < 2)
              goto LABEL_289;
            v14 = 0;
            v15 = v7;
            v16 = (char *)v7 + v123;
            if (v7->__r_.__value_.__s.__data_[2] == 61)
              goto LABEL_27;
            do
            {
              do
              {
                if (!v16)
LABEL_289:
                  sub_1B033E7A4();
                ++v14;
                v15 = (std::string *)((char *)v7 + v14);
                v16 = (char *)v7 + v123 + v14;
              }
              while (v7->__r_.__value_.__s.__data_[v14 + 2] != 61);
LABEL_27:
              ;
            }
            while (v15->__r_.__value_.__s.__data_[3] != 93);
            v17 = &v7->__r_.__value_.__s.__data_[v14 + 2];
            if (v17 == a3)
              goto LABEL_289;
            sub_1B033F42C((uint64_t)&v129, a1, (uint64_t)v7->__r_.__value_.__r.__words + 2, v17);
            if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              v18 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
              if (!*((_BYTE *)&v129.__r_.__value_.__s + 23))
                goto LABEL_293;
              v19 = &v129;
              v20 = (std::string *)((char *)&v129 + HIBYTE(v129.__r_.__value_.__r.__words[2]));
              if (HIBYTE(v129.__r_.__value_.__r.__words[2]) <= 0x16uLL)
                goto LABEL_32;
LABEL_119:
              v56 = (v18 & 0x7FFFFFFFFFFFFFF8) + 8;
              if ((v18 | 7) != 0x17)
                v56 = v18 | 7;
              v57 = v56 + 1;
              v21 = (std::string *)operator new(v56 + 1);
              v130.__r_.__value_.__l.__size_ = v18;
              v130.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
              v130.__r_.__value_.__r.__words[0] = (std::string::size_type)v21;
              v22 = (char *)v20 - (char *)v19;
              v9 = (unsigned __int8 *)(a3 - 5);
              if ((unint64_t)((char *)v20 - (char *)v19) >= 0x20)
                goto LABEL_122;
LABEL_127:
              v58 = v21;
              v59 = v19;
              goto LABEL_128;
            }
            v18 = v129.__r_.__value_.__l.__size_;
            if (!v129.__r_.__value_.__l.__size_)
LABEL_293:
              sub_1B033F3E0();
            if (v129.__r_.__value_.__l.__size_ > 0x7FFFFFFFFFFFFFF7)
              sub_1B02D78C4();
            v19 = (std::string *)v129.__r_.__value_.__r.__words[0];
            v20 = (std::string *)(v129.__r_.__value_.__r.__words[0] + v129.__r_.__value_.__l.__size_);
            if (v129.__r_.__value_.__l.__size_ > 0x16)
              goto LABEL_119;
LABEL_32:
            *((_BYTE *)&v130.__r_.__value_.__s + 23) = v18;
            v21 = &v130;
            v22 = (char *)v20 - (char *)v19;
            v9 = (unsigned __int8 *)(a3 - 5);
            if ((unint64_t)((char *)v20 - (char *)v19) < 0x20)
              goto LABEL_127;
LABEL_122:
            if ((unint64_t)((char *)v21 - (char *)v19) < 0x20)
              goto LABEL_127;
            v58 = (std::string *)((char *)v21 + (v22 & 0xFFFFFFFFFFFFFFE0));
            v59 = (std::string *)((char *)v19 + (v22 & 0xFFFFFFFFFFFFFFE0));
            v60 = &v19->__r_.__value_.__r.__words[2];
            v61 = &v21->__r_.__value_.__r.__words[2];
            v62 = v22 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v63 = *(_OWORD *)v60;
              *((_OWORD *)v61 - 1) = *((_OWORD *)v60 - 1);
              *(_OWORD *)v61 = v63;
              v60 += 4;
              v61 += 4;
              v62 -= 32;
            }
            while (v62);
            if (v22 != (v22 & 0xFFFFFFFFFFFFFFE0))
            {
              do
              {
LABEL_128:
                v64 = v59->__r_.__value_.__s.__data_[0];
                v59 = (std::string *)((char *)v59 + 1);
                v58->__r_.__value_.__s.__data_[0] = v64;
                v58 = (std::string *)((char *)v58 + 1);
              }
              while (v59 != v20);
            }
            v58->__r_.__value_.__s.__data_[0] = 0;
            v65 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v66 = &v130;
            else
              v66 = (std::string *)v130.__r_.__value_.__r.__words[0];
            if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v65 = v130.__r_.__value_.__l.__size_;
            (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 16)
                                                                                             + 32))(&__src, *(_QWORD *)(a1 + 16), v66, (char *)v66 + v65);
            v67 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
            if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v67 = __src.__r_.__value_.__l.__size_;
            if (v67 != 1)
            {
              if (v67 == 12)
              {
                p_src = &__src;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
                p_src->__r_.__value_.__s.__data_[11] = p_src->__r_.__value_.__s.__data_[3];
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                {
LABEL_141:
                  operator delete(v130.__r_.__value_.__l.__data_);
                  v69 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                  v70 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
                  v71 = __src.__r_.__value_.__l.__size_;
                  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v69 = __src.__r_.__value_.__l.__size_;
                  if (!v69)
                    goto LABEL_144;
LABEL_157:
                  v75 = *(_QWORD *)(v8 + 144);
                  if (v75 >= *(_QWORD *)(v8 + 152))
                  {
                    *(_QWORD *)(v8 + 144) = sub_1B033552C((char **)(v8 + 136), (uint64_t)&__src);
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_192;
                  }
                  else
                  {
                    if (v70 < 0)
                    {
                      sub_1B02EB0A8(*(_BYTE **)(v8 + 144), __src.__r_.__value_.__l.__data_, v71);
                    }
                    else
                    {
                      v76 = *(_OWORD *)&__src.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v75 + 16) = *((_QWORD *)&__src.__r_.__value_.__l + 2);
                      *(_OWORD *)v75 = v76;
                    }
                    *(_QWORD *)(v8 + 144) = v75 + 24;
                    *(_QWORD *)(v8 + 144) = v75 + 24;
                    if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
                      goto LABEL_192;
                  }
LABEL_182:
                  if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_183;
                  goto LABEL_193;
                }
LABEL_154:
                v74 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
                v70 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
                v71 = __src.__r_.__value_.__l.__size_;
                if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v74 = __src.__r_.__value_.__l.__size_;
                if (v74)
                  goto LABEL_157;
LABEL_144:
                v72 = HIBYTE(v129.__r_.__value_.__r.__words[2]);
                if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v72 = v129.__r_.__value_.__l.__size_;
                if (v72 == 2)
                {
                  v82 = &v129;
                  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v82 = (std::string *)v129.__r_.__value_.__r.__words[0];
                  sub_1B033F024(v8, v82->__r_.__value_.__s.__data_[0], v82->__r_.__value_.__s.__data_[1]);
                }
                else
                {
                  if (v72 != 1)
                    sub_1B033F3E0();
                  v73 = &v129;
                  if ((v129.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v73 = (std::string *)v129.__r_.__value_.__r.__words[0];
                  sub_1B033D1BC(v8, v73->__r_.__value_.__s.__data_[0]);
                }
                if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_182;
LABEL_192:
                operator delete(__src.__r_.__value_.__l.__data_);
                if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                {
LABEL_183:
                  v48 = 0;
                  v7 = (std::string *)((char *)v10->__r_.__value_.__r.__words + v14 + 4);
                  v28 = (char *)v10;
                  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_99;
                  goto LABEL_184;
                }
LABEL_193:
                operator delete(v129.__r_.__value_.__l.__data_);
                goto LABEL_183;
              }
              if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              {
                *__src.__r_.__value_.__l.__data_ = 0;
                __src.__r_.__value_.__l.__size_ = 0;
                if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_141;
                goto LABEL_154;
              }
              __src.__r_.__value_.__s.__data_[0] = 0;
              *((_BYTE *)&__src.__r_.__value_.__s + 23) = 0;
            }
            if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_141;
            goto LABEL_154;
        }
      }
      v23 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
      {
        v24 = v7->__r_.__value_.__s.__data_[0];
        if (v24 == 92)
        {
          if (v23)
          {
            v12 = (std::string *)sub_1B033ED38(a1, &v7->__r_.__value_.__s.__data_[1], a3, &__p);
            if (v12 == (std::string *)a3)
              goto LABEL_43;
          }
          else
          {
            v12 = (std::string *)sub_1B033E7F0(a1, (unsigned __int8 *)&v7->__r_.__value_.__s.__data_[1], (unsigned __int8 *)a3, &__p, v8);
            v23 = 0;
            if (v12 == (std::string *)a3)
              goto LABEL_43;
          }
          goto LABEL_42;
        }
      }
      else
      {
        LOBYTE(v24) = v7->__r_.__value_.__s.__data_[0];
      }
      std::string::operator=(&__p, v24);
      if (v12 == (std::string *)a3)
        goto LABEL_43;
LABEL_42:
      v25 = v12->__r_.__value_.__s.__data_[0];
      if (v25 != 93)
      {
        v27 = &v12->__r_.__value_.__s.__data_[1];
        if ((char *)&v12->__r_.__value_.__l.__data_ + 1 != a3 && v25 == 45 && *v27 != 93)
        {
          memset(&v126, 0, sizeof(v126));
          v28 = &v12->__r_.__value_.__s.__data_[2];
          if (&v12->__r_.__value_.__s.__data_[2] == a3 || *v27 != 91 || *v28 != 46)
          {
            if ((v23 | 0x40) == 0x40)
            {
              LODWORD(v27) = *v27;
              v7 = &v131;
              if ((_DWORD)v27 == 92)
              {
                if (v23)
                  v55 = sub_1B033ED38(a1, v28, a3, &v126);
                else
                  v55 = (char *)sub_1B033E7F0(a1, (unsigned __int8 *)v28, (unsigned __int8 *)a3, &v126, v8);
                v28 = v55;
                goto LABEL_196;
              }
            }
            else
            {
              LOBYTE(v27) = *v27;
              v7 = &v131;
            }
            std::string::operator=(&v126, (std::string::value_type)v27);
            goto LABEL_196;
          }
          v29 = &v12->__r_.__value_.__s.__data_[3];
          if (a3 - ((char *)v12->__r_.__value_.__r.__words + 3) < 2)
            goto LABEL_292;
          v30 = &v12->__r_.__value_.__s.__data_[3];
          v31 = &v12->__r_.__value_.__s.__data_[4];
          if (*v29 == 46)
            goto LABEL_61;
          do
          {
            do
            {
              if (v9 == (unsigned __int8 *)v12)
                goto LABEL_292;
              v12 = (std::string *)((char *)v12 + 1);
              v30 = v31;
              v32 = *v31++;
            }
            while (v32 != 46);
LABEL_61:
            ;
          }
          while (*v31 != 93);
          if (v30 == a3)
LABEL_292:
            sub_1B033E7A4();
          sub_1B033F42C((uint64_t)&v130, a1, (uint64_t)v29, &v12->__r_.__value_.__s.__data_[3]);
          v7 = &v131;
          if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v126.__r_.__value_.__l.__data_);
          v126 = v130;
          v33 = HIBYTE(v130.__r_.__value_.__r.__words[2]);
          if ((v130.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v33 = v126.__r_.__value_.__l.__size_;
          if (v33 - 1 >= 2)
            sub_1B033F3E0();
          v28 = v30 + 2;
LABEL_196:
          v125 = __p;
          memset(&__p, 0, sizeof(__p));
          v124 = v126;
          memset(&v126, 0, sizeof(v126));
          if (*(_BYTE *)(v8 + 170))
          {
            if (*(_BYTE *)(v8 + 169))
            {
              v83 = (v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
              v84 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
              if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v84 = v125.__r_.__value_.__l.__size_;
              if (v84)
              {
                v85 = 0;
                do
                {
                  if (v83)
                    v86 = (std::string *)v125.__r_.__value_.__r.__words[0];
                  else
                    v86 = &v125;
                  v87 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v86->__r_.__value_.__s.__data_[v85]);
                  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v88 = &v125;
                  else
                    v88 = (std::string *)v125.__r_.__value_.__r.__words[0];
                  v88->__r_.__value_.__s.__data_[v85++] = v87;
                  v83 = (v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                  v89 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
                  if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v89 = v125.__r_.__value_.__l.__size_;
                }
                while (v85 < v89);
              }
              v90 = (v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
              v91 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
              if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v91 = v124.__r_.__value_.__l.__size_;
              v7 = &v124;
              if (v91)
              {
                v92 = 0;
                do
                {
                  if (v90)
                    v93 = (std::string *)v124.__r_.__value_.__r.__words[0];
                  else
                    v93 = &v124;
                  v94 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v93->__r_.__value_.__s.__data_[v92]);
                  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v95 = &v124;
                  else
                    v95 = (std::string *)v124.__r_.__value_.__r.__words[0];
                  v95->__r_.__value_.__s.__data_[v92++] = v94;
                  v90 = (v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0;
                  v96 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
                  if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v96 = v124.__r_.__value_.__l.__size_;
                }
                while (v92 < v96);
              }
            }
            v97 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
            if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v98 = &v125;
            else
              v98 = (std::string *)v125.__r_.__value_.__r.__words[0];
            if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v97 = v125.__r_.__value_.__l.__size_;
            sub_1B033F714((uint64_t)&v129, v122, (uint64_t)v98, (char *)v98 + v97);
            v99 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v100 = &v124;
            else
              v100 = (std::string *)v124.__r_.__value_.__r.__words[0];
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v99 = v124.__r_.__value_.__l.__size_;
            sub_1B033F714((uint64_t)&__src, v122, (uint64_t)v100, (char *)v100 + v99);
            v130 = v129;
            memset(&v129, 0, sizeof(v129));
            v131 = __src;
            memset(&__src, 0, sizeof(__src));
            v101 = *(_QWORD *)(v8 + 96);
            if (v101 < *(_QWORD *)(v8 + 104))
            {
              v102 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
              *(_QWORD *)(v101 + 16) = *((_QWORD *)&v130.__r_.__value_.__l + 2);
              *(_OWORD *)v101 = v102;
              memset(&v130, 0, sizeof(v130));
              v103 = v131.__r_.__value_.__r.__words[2];
              *(_OWORD *)(v101 + 24) = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
              *(_QWORD *)(v101 + 40) = v103;
              *(_QWORD *)(v8 + 96) = v101 + 48;
              if (SHIBYTE(v130.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_236;
LABEL_263:
              if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_264;
LABEL_237:
              operator delete(__src.__r_.__value_.__l.__data_);
              if (SHIBYTE(v129.__r_.__value_.__r.__words[2]) < 0)
                goto LABEL_265;
LABEL_271:
              if (SHIBYTE(v124.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v124.__r_.__value_.__l.__data_);
                if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_277;
LABEL_273:
                if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_274;
LABEL_278:
                operator delete(v126.__r_.__value_.__l.__data_);
                v48 = 1;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_99;
              }
              else
              {
                if ((SHIBYTE(v125.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_273;
LABEL_277:
                operator delete(v125.__r_.__value_.__l.__data_);
                if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_278;
LABEL_274:
                v48 = 1;
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                  goto LABEL_99;
              }
LABEL_184:
              operator delete(__p.__r_.__value_.__l.__data_);
              v12 = (std::string *)v28;
              if ((v48 & 1) == 0)
                goto LABEL_15;
              goto LABEL_14;
            }
            v115 = sub_1B033F8F0(v121, (uint64_t)&v130);
            v116 = SHIBYTE(v131.__r_.__value_.__r.__words[2]);
            *(_QWORD *)(v8 + 96) = v115;
            if (v116 < 0)
            {
              operator delete(v131.__r_.__value_.__l.__data_);
              if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_263;
            }
            else if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            {
              goto LABEL_263;
            }
LABEL_236:
            operator delete(v130.__r_.__value_.__l.__data_);
            if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
              goto LABEL_237;
LABEL_264:
            if ((SHIBYTE(v129.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_271;
LABEL_265:
            v117 = (void *)v129.__r_.__value_.__r.__words[0];
          }
          else
          {
            v104 = HIBYTE(v125.__r_.__value_.__r.__words[2]);
            if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v104 = v125.__r_.__value_.__l.__size_;
            if (v104 != 1)
              goto LABEL_298;
            v105 = HIBYTE(v124.__r_.__value_.__r.__words[2]);
            if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v105 = v124.__r_.__value_.__l.__size_;
            if (v105 != 1)
LABEL_298:
              sub_1B033F8A4();
            if (*(_BYTE *)(v8 + 169))
            {
              if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v106 = &v125;
              else
                v106 = (std::string *)v125.__r_.__value_.__r.__words[0];
              v107 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v106->__r_.__value_.__s.__data_[0]);
              if ((v125.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v108 = &v125;
              else
                v108 = (std::string *)v125.__r_.__value_.__r.__words[0];
              v108->__r_.__value_.__s.__data_[0] = v107;
              if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v109 = &v124;
              else
                v109 = (std::string *)v124.__r_.__value_.__r.__words[0];
              v110 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v8 + 24) + 40))(*(_QWORD *)(v8 + 24), v109->__r_.__value_.__s.__data_[0]);
              if ((v124.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v111 = &v124;
              else
                v111 = (std::string *)v124.__r_.__value_.__r.__words[0];
              v111->__r_.__value_.__s.__data_[0] = v110;
            }
            v130 = v125;
            memset(&v125, 0, sizeof(v125));
            v131 = v124;
            memset(&v124, 0, sizeof(v124));
            v112 = *(_QWORD *)(v8 + 96);
            if (v112 >= *(_QWORD *)(v8 + 104))
            {
              v118 = sub_1B033F8F0(v121, (uint64_t)&v130);
              v119 = SHIBYTE(v131.__r_.__value_.__r.__words[2]);
              *(_QWORD *)(v8 + 96) = v118;
              if (v119 < 0)
                operator delete(v131.__r_.__value_.__l.__data_);
            }
            else
            {
              v113 = *(_OWORD *)&v130.__r_.__value_.__l.__data_;
              *(_QWORD *)(v112 + 16) = *((_QWORD *)&v130.__r_.__value_.__l + 2);
              *(_OWORD *)v112 = v113;
              memset(&v130, 0, sizeof(v130));
              v114 = v131.__r_.__value_.__r.__words[2];
              *(_OWORD *)(v112 + 24) = *(_OWORD *)&v131.__r_.__value_.__l.__data_;
              *(_QWORD *)(v112 + 40) = v114;
              *(_QWORD *)(v8 + 96) = v112 + 48;
            }
            if ((SHIBYTE(v130.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_271;
            v117 = (void *)v130.__r_.__value_.__r.__words[0];
          }
          operator delete(v117);
          goto LABEL_271;
        }
      }
LABEL_43:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_)
        {
          if (__p.__r_.__value_.__l.__size_ == 1)
          {
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_50:
            sub_1B033D1BC(v8, p_p->__r_.__value_.__s.__data_[0]);
LABEL_98:
            v48 = 1;
            v28 = (char *)v12;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_99;
            goto LABEL_184;
          }
          p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
LABEL_97:
          sub_1B033F024(v8, p_p->__r_.__value_.__s.__data_[0], p_p->__r_.__value_.__s.__data_[1]);
          goto LABEL_98;
        }
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      {
        p_p = &__p;
        if (HIBYTE(__p.__r_.__value_.__r.__words[2]) == 1)
          goto LABEL_50;
        goto LABEL_97;
      }
LABEL_14:
      v7 = v12;
LABEL_15:
      if (v10 == v7)
      {
        if (v10 != (std::string *)a3)
        {
          if (v10->__r_.__value_.__s.__data_[0] == 45)
          {
            sub_1B033D1BC(v8, 45);
            v10 = (std::string *)((char *)v10 + 1);
          }
          if (v10 != (std::string *)a3 && v10->__r_.__value_.__s.__data_[0] == 93)
            return &v10->__r_.__value_.__s.__data_[1];
        }
LABEL_291:
        sub_1B033E7A4();
      }
    }
  }
  return a2;
}

void sub_1B033C0F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a36 < 0)
    operator delete(__p);
  if (a43 < 0)
    operator delete(a38);
  _Unwind_Resume(exception_object);
}

void sub_1B033C2DC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033C314(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B033C328(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B033C368(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B033C3B8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033C3F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B033C404(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *this)
{
  unsigned __int8 *v4;
  unsigned __int8 *result;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  int v10;
  int v11;
  unsigned __int8 v12;
  char v13;
  unsigned __int8 v14;
  char v15;

  v4 = a2;
  if (a2 == a3)
    return v4;
  switch(*a2)
  {
    case '0':
      if (this)
      {
        std::string::operator=(this, 0);
        return v4 + 1;
      }
      else
      {
        v7 = 0;
LABEL_57:
        sub_1B033C7C0(a1, v7);
        return v4 + 1;
      }
    case 'c':
      if (a2 + 1 == a3 || (char)a2[1] < 65)
        goto LABEL_64;
      v8 = a2[1];
      if (v8 >= 0x5B && (v8 - 97) > 0x19u)
        goto LABEL_64;
      if (this)
      {
        std::string::operator=(this, v8 & 0x1F);
        v4 += 2;
        return v4;
      }
      sub_1B033C7C0(a1, v8 & 0x1F);
      result = v4 + 2;
      break;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        sub_1B033C7C0(a1, 12);
      return v4 + 1;
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        sub_1B033C7C0(a1, 10);
      return v4 + 1;
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        sub_1B033C7C0(a1, 13);
      return v4 + 1;
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        sub_1B033C7C0(a1, 9);
      return v4 + 1;
    case 'u':
      if (a2 + 1 != a3)
      {
        v10 = a2[1];
        if ((v10 & 0xF8) == 0x30 || (v10 & 0xFE) == 0x38 || (v10 | 0x20u) - 97 < 6)
        {
          v4 = a2 + 2;
          if (a2 + 2 != a3)
          {
            v11 = *v4;
            if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38 || (v11 | 0x20u) - 97 < 6)
              goto LABEL_39;
          }
        }
      }
      goto LABEL_64;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        sub_1B033C7C0(a1, 11);
      return v4 + 1;
    case 'x':
LABEL_39:
      if (v4 + 1 == a3)
        goto LABEL_64;
      v12 = v4[1];
      v13 = -48;
      if ((v12 & 0xF8) == 0x30 || (v12 & 0xFE) == 0x38)
        goto LABEL_44;
      v12 |= 0x20u;
      if ((v12 - 97) >= 6u)
        goto LABEL_64;
      v13 = -87;
LABEL_44:
      if (v4 + 2 == a3)
        goto LABEL_64;
      v14 = v4[2];
      v15 = -48;
      if ((v14 & 0xF8) != 0x30 && (v14 & 0xFE) != 0x38)
      {
        v14 |= 0x20u;
        if ((v14 - 97) >= 6u)
LABEL_64:
          sub_1B033C3B8();
        v15 = -87;
      }
      if (this)
        std::string::operator=(this, v14 + 16 * (v12 + v13) + v15);
      else
        sub_1B033C7C0(a1, (char)(v14 + 16 * (v12 + v13) + v15));
      return v4 + 3;
    default:
      v6 = *a2;
      if ((_DWORD)v6 == 95
        || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 16) + 4 * v6) & 0x500) != 0)
      {
        goto LABEL_64;
      }
      v7 = (char)v6;
      if (!this)
        goto LABEL_57;
      std::string::operator=(this, v6);
      return v4 + 1;
  }
  return result;
}

uint64_t sub_1B033C7C0(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_1E60CD4F8;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &off_1E60CD588;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_1E60CD2D8;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_1B033C8E8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = &off_1E60CD410;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x1B5E07CD8](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_1B033C934()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033C96C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B033C980(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  uint64_t (**v11)();

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_1E60CD3E0;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = &off_1E60CD4C8;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &off_1E60CD138;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_1B033CA74(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD4F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1B033CAC4(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD4F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033CB24(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *sub_1B033CBA8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD588;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1B033CBF8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD588;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033CC58(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

_QWORD *sub_1B033CCA0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B033CCE0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033CD30(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_1B033CD78(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD3E0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1B033CDC8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD3E0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033CE28(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *sub_1B033CF20(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD4C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_1B033CF70(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD4C8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033CFD0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1B033D060(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B033D0A0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

unsigned int *sub_1B033D0F0(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_1B033C934();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void sub_1B033D1BC(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_1B032A0E8();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t sub_1B033D634(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  BOOL v13;
  std::locale v15;
  std::string v16;

  *(_QWORD *)a1 = &off_1E60CD528;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v15, v11);
  std::locale::name(&v16, &v15);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
  {
    v13 = v16.__r_.__value_.__l.__size_ != 1 || *v16.__r_.__value_.__l.__data_ != 67;
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = SHIBYTE(v16.__r_.__value_.__r.__words[2]) != 1 || v16.__r_.__value_.__s.__data_[0] != 67;
  }
  std::locale::~locale(&v15);
  *(_BYTE *)(a1 + 171) = v13;
  return a1;
}

void sub_1B033D740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  sub_1B031724C((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    sub_1B033D7DC(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_1B033D7DC(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    *(_QWORD *)v9 = &off_1E60CD410;
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **sub_1B033D7DC(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_1B033D86C(std::locale *a1)
{
  sub_1B033E4D8(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B033D890(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  char v6;
  char v7;
  std::string::size_type size;
  int v9;
  uint64_t v10;
  int v11;
  std::string::size_type v12;
  std::string *p_s;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  BOOL v28;
  int v29;
  size_t v30;
  char *v31;
  size_t v32;
  int v33;
  _BOOL4 v34;
  int v35;
  size_t v36;
  char *v37;
  size_t v38;
  int v39;
  BOOL v40;
  int v41;
  std::string::size_type v42;
  unsigned __int8 v43;
  unsigned __int8 *v44;
  unint64_t v45;
  int v46;
  unsigned int v47;
  char v48;
  int v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  std::string::size_type v59;
  std::string *v60;
  uint64_t v61;
  unsigned __int8 *v62;
  BOOL v63;
  int v64;
  size_t v65;
  char *v66;
  size_t v67;
  int v68;
  _BOOL4 v69;
  int v70;
  size_t v71;
  char *v72;
  size_t v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  const void *v81;
  std::string::size_type v82;
  std::string::size_type v83;
  uint64_t v84;
  BOOL i;
  unsigned __int8 **v86;
  unsigned __int8 *v87;
  int v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  const void *v92;
  std::string::size_type v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  std::string::size_type v97;
  std::string::size_type v98;
  uint64_t v99;
  uint64_t v100;
  BOOL v101;
  unsigned __int8 *v102;
  uint64_t v103;
  int v104;
  std::string *v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  int v109;
  int v110;
  int v111;
  uint64_t v112;
  const void *v113;
  uint64_t v114;
  uint64_t v115;
  int v116;
  const void *v117;
  uint64_t v118;
  unsigned int v119;
  int v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  char v136;
  int v137;
  int v138;
  int v139;
  std::string __p;
  __int16 __src;
  std::string v142;
  std::string __s;

  v2 = a2;
  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    v10 = 0;
    v11 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_264;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_68;
  v6 = *v4;
  LOBYTE(__src) = *v4;
  v7 = v4[1];
  HIBYTE(__src) = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    LOBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    HIBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  std::__get_collation_name(&v142, (const char *)&__s);
  __p = v142;
  size = HIBYTE(v142.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v142.__r_.__value_.__r.__words[2]);
  if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v142.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a1 + 32) + 32))(&v142, *(_QWORD *)(a1 + 32), p_s, (char *)p_s + v12);
  if (v9 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v142;
  if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v142.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v142.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_177;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_177:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_17;
LABEL_68:
    v11 = 0;
    v10 = 1;
    v43 = **(_BYTE **)(v2 + 16);
    __p.__r_.__value_.__s.__data_[0] = v43;
    if (!*(_BYTE *)(a1 + 169))
      goto LABEL_70;
    goto LABEL_69;
  }
  v42 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v42)
    goto LABEL_68;
LABEL_17:
  v14 = *(_QWORD *)(a1 + 112);
  v15 = *(_QWORD *)(a1 + 120) - v14;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    v17 = (unsigned __int8 *)(v14 + 1);
    do
    {
      v18 = __src == *(v17 - 1) && HIBYTE(__src) == *v17;
      if (v18)
        goto LABEL_229;
      v17 += 2;
    }
    while (--v16);
  }
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v11 = 0;
    goto LABEL_184;
  }
  *((_BYTE *)&__s.__r_.__value_.__s + 23) = 2;
  LOWORD(__s.__r_.__value_.__l.__data_) = __src;
  __s.__r_.__value_.__s.__data_[2] = 0;
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v142, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[2]);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v19 = *(_QWORD *)(a1 + 88);
  v20 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
  v21 = *(_QWORD *)(a1 + 96) - v19;
  if (v21)
  {
    v22 = 0;
    v23 = v21 / 48;
    v136 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
    if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v24 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
    else
      v24 = v142.__r_.__value_.__l.__size_;
    if ((v142.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &v142;
    else
      v25 = (std::string *)v142.__r_.__value_.__r.__words[0];
    if (v23 <= 1)
      v26 = 1;
    else
      v26 = v21 / 48;
    v27 = (unsigned __int8 *)(v19 + 47);
    v28 = 1;
    do
    {
      v29 = (char)*(v27 - 24);
      if (v29 >= 0)
        v30 = *(v27 - 24);
      else
        v30 = *(_QWORD *)(v27 - 39);
      if (v29 >= 0)
        v31 = (char *)(v27 - 47);
      else
        v31 = *(char **)(v27 - 47);
      if (v30 >= v24)
        v32 = v24;
      else
        v32 = v30;
      v33 = memcmp(v25, v31, v32);
      v34 = v24 >= v30;
      if (v33)
        v34 = v33 >= 0;
      if (v34)
      {
        v35 = (char)*v27;
        if (v35 >= 0)
          v36 = *v27;
        else
          v36 = *(_QWORD *)(v27 - 15);
        if (v35 >= 0)
          v37 = (char *)(v27 - 23);
        else
          v37 = *(char **)(v27 - 23);
        if (v24 >= v36)
          v38 = v36;
        else
          v38 = v24;
        v39 = memcmp(v37, v25, v38);
        v40 = v36 >= v24;
        if (v39)
          v40 = v39 >= 0;
        if (v40)
        {
          v11 = 1;
          v41 = 5;
          goto LABEL_179;
        }
      }
      v28 = ++v22 < v23;
      v27 += 48;
    }
    while (v26 != v22);
    v41 = 0;
    v11 = 0;
LABEL_179:
    v20 = v136;
  }
  else
  {
    v28 = 0;
    v41 = 0;
    v11 = 0;
  }
  if (v20 < 0)
    operator delete(v142.__r_.__value_.__l.__data_);
  if (!v28)
  {
LABEL_184:
    if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
      goto LABEL_211;
    v139 = v11;
    sub_1B033E610((uint64_t)&__s, a1 + 16, &__src, &v142);
    v94 = *(_QWORD *)(a1 + 136);
    v95 = *(_QWORD *)(a1 + 144) - v94;
    if (v95)
    {
      v96 = v95 / 24;
      v97 = __s.__r_.__value_.__l.__size_;
      if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v98 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
      else
        v98 = __s.__r_.__value_.__l.__size_;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      {
        v135 = SHIBYTE(__s.__r_.__value_.__r.__words[2]);
        v112 = 0;
        v113 = (const void *)__s.__r_.__value_.__r.__words[0];
        if (v96 <= 1)
          v114 = 1;
        else
          v114 = v95 / 24;
        v101 = 1;
        do
        {
          v115 = *(unsigned __int8 *)(v94 + 23);
          v116 = (char)v115;
          if ((v115 & 0x80u) != 0)
            v115 = *(_QWORD *)(v94 + 8);
          if (v98 == v115)
          {
            v117 = v116 >= 0 ? (const void *)v94 : *(const void **)v94;
            if (!memcmp(v113, v117, v97))
            {
              v11 = 1;
              v41 = 5;
              if ((v135 & 0x80000000) == 0)
                goto LABEL_208;
              goto LABEL_207;
            }
          }
          v101 = ++v112 < v96;
          v94 += 24;
        }
        while (v114 != v112);
        v41 = 0;
        v11 = v139;
        if ((v135 & 0x80000000) == 0)
          goto LABEL_208;
LABEL_207:
        operator delete(__s.__r_.__value_.__l.__data_);
        goto LABEL_208;
      }
      if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      {
        v118 = *(unsigned __int8 *)(v94 + 23);
        if ((v118 & 0x80u) != 0)
          v118 = *(_QWORD *)(v94 + 8);
        if (v118 == HIBYTE(__s.__r_.__value_.__r.__words[2]))
        {
          v11 = 1;
          goto LABEL_210;
        }
        v123 = 0;
        if (v96 <= 1)
          v124 = 1;
        else
          v124 = v96;
        v125 = v124 - 1;
        v126 = (uint64_t *)(v94 + 32);
        v11 = v139;
        while (v125 != v123)
        {
          ++v123;
          v127 = *((unsigned __int8 *)v126 + 15);
          v129 = *v126;
          v126 += 3;
          v128 = v129;
          if ((v127 & 0x80u) != 0)
            v127 = v128;
          if (v98 == v127)
          {
            v101 = v123 < v96;
            v11 = 1;
            v41 = 5;
            goto LABEL_208;
          }
        }
        v101 = 0;
        v41 = 0;
LABEL_208:
        if (v101)
          goto LABEL_209;
LABEL_211:
        if ((char)__src < 0)
        {
          v110 = *(_DWORD *)(a1 + 164);
        }
        else
        {
          v107 = *(_DWORD *)(a1 + 160);
          v108 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
          v109 = *(_DWORD *)(v108 + 4 * __src);
          if (((v109 & v107) != 0 || __src == 95 && (v107 & 0x80) != 0)
            && (SHIBYTE(__src) & 0x80000000) == 0
            && ((*(_DWORD *)(v108 + 4 * HIBYTE(__src)) & v107) != 0 || (v107 & 0x80) != 0 && HIBYTE(__src) == 95))
          {
            goto LABEL_229;
          }
          v110 = *(_DWORD *)(a1 + 164);
          if ((v110 & v109) != 0 || __src == 95 && (v110 & 0x80) != 0)
          {
LABEL_228:
            v111 = v11;
LABEL_230:
            v11 = v111;
            v10 = 2;
            goto LABEL_264;
          }
        }
        if ((SHIBYTE(__src) & 0x80000000) == 0)
        {
          if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * HIBYTE(__src)) & v110) == 0)
          {
            v111 = 1;
            if (HIBYTE(__src) != 95 || (v110 & 0x80) == 0)
              goto LABEL_230;
          }
          goto LABEL_228;
        }
LABEL_229:
        v111 = 1;
        goto LABEL_230;
      }
      v99 = 0;
      if (v96 <= 1)
        v100 = 1;
      else
        v100 = v95 / 24;
      v101 = 1;
      do
      {
        v102 = (unsigned __int8 *)(v94 + 24 * v99);
        v103 = v102[23];
        v104 = (char)v103;
        if ((v103 & 0x80u) != 0)
          v103 = *((_QWORD *)v102 + 1);
        if (v98 == v103)
        {
          if (v104 < 0)
            v102 = *(unsigned __int8 **)v102;
          v105 = &__s;
          v106 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          while (v105->__r_.__value_.__s.__data_[0] == *v102)
          {
            v105 = (std::string *)((char *)v105 + 1);
            ++v102;
            if (!--v106)
            {
              v11 = 1;
              v41 = 5;
              if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_208;
              goto LABEL_207;
            }
          }
        }
        v101 = ++v99 < v96;
      }
      while (v99 != v100);
    }
    v101 = 0;
    v41 = 0;
    v11 = v139;
    if ((SHIBYTE(__s.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_208;
    goto LABEL_207;
  }
LABEL_209:
  if (v41)
  {
LABEL_210:
    v10 = 2;
    goto LABEL_264;
  }
  v10 = 2;
  v43 = **(_BYTE **)(v2 + 16);
  __p.__r_.__value_.__s.__data_[0] = v43;
  if (*(_BYTE *)(a1 + 169))
  {
LABEL_69:
    v43 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v43);
    __p.__r_.__value_.__s.__data_[0] = v43;
  }
LABEL_70:
  v44 = *(unsigned __int8 **)(a1 + 40);
  v45 = *(_QWORD *)(a1 + 48) - (_QWORD)v44;
  if (v45)
  {
    if (v45 <= 1)
      v45 = 1;
    while (1)
    {
      v46 = *v44++;
      if (v46 == v43)
        break;
      if (!--v45)
        goto LABEL_75;
    }
LABEL_263:
    v11 = 1;
    goto LABEL_264;
  }
LABEL_75:
  v47 = *(_DWORD *)(a1 + 164);
  if (v47 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v43 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v43) & v47) == 0)
    {
      v49 = (v47 >> 7) & 1;
      v48 = v43 == 95 ? v49 : 0;
    }
    else
    {
      v48 = 1;
    }
    v50 = *(void **)(a1 + 72);
    v51 = memchr(*(void **)(a1 + 64), (char)v43, (size_t)v50 - *(_QWORD *)(a1 + 64));
    v52 = v51 ? v51 : v50;
    if ((v48 & 1) == 0 && v52 == v50)
      goto LABEL_263;
  }
  v53 = *(_QWORD *)(a1 + 88);
  v54 = *(_QWORD *)(a1 + 96);
  if (v53 != v54)
  {
    v137 = v11;
    if (*(_BYTE *)(a1 + 170))
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v43;
      (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, std::string::value_type *))(**(_QWORD **)(a1 + 32) + 32))(&v142, *(_QWORD *)(a1 + 32), &__s, &__s.__r_.__value_.__s.__data_[1]);
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__s.__r_.__value_.__l.__data_);
      v53 = *(_QWORD *)(a1 + 88);
      v55 = HIBYTE(v142.__r_.__value_.__r.__words[2]);
      v56 = *(_QWORD *)(a1 + 96) - v53;
      if (v56)
      {
LABEL_93:
        v132 = v2;
        v134 = v10;
        v57 = 0;
        v58 = v56 / 48;
        v130 = v55;
        if ((v55 & 0x80u) == 0)
          v59 = v55;
        else
          v59 = v142.__r_.__value_.__l.__size_;
        if ((v55 & 0x80u) == 0)
          v60 = &v142;
        else
          v60 = (std::string *)v142.__r_.__value_.__r.__words[0];
        if (v58 <= 1)
          v61 = 1;
        else
          v61 = v56 / 48;
        v62 = (unsigned __int8 *)(v53 + 47);
        v63 = 1;
        do
        {
          v64 = (char)*(v62 - 24);
          if (v64 >= 0)
            v65 = *(v62 - 24);
          else
            v65 = *(_QWORD *)(v62 - 39);
          if (v64 >= 0)
            v66 = (char *)(v62 - 47);
          else
            v66 = *(char **)(v62 - 47);
          if (v65 >= v59)
            v67 = v59;
          else
            v67 = v65;
          v68 = memcmp(v60, v66, v67);
          v69 = v59 >= v65;
          if (v68)
            v69 = v68 >= 0;
          if (v69)
          {
            v70 = (char)*v62;
            if (v70 >= 0)
              v71 = *v62;
            else
              v71 = *(_QWORD *)(v62 - 15);
            if (v70 >= 0)
              v72 = (char *)(v62 - 23);
            else
              v72 = *(char **)(v62 - 23);
            if (v59 >= v71)
              v73 = v71;
            else
              v73 = v59;
            v74 = memcmp(v72, v60, v73);
            v75 = v71 >= v59;
            if (v74)
              v75 = v74 >= 0;
            if (v75)
            {
              v11 = 1;
              v2 = v132;
              v10 = v134;
              if ((v130 & 0x80) == 0)
                goto LABEL_133;
              goto LABEL_132;
            }
          }
          v63 = ++v57 < v58;
          v62 += 48;
        }
        while (v61 != v57);
        v2 = v132;
        v10 = v134;
        v11 = v137;
        if ((v130 & 0x80) == 0)
          goto LABEL_133;
        goto LABEL_132;
      }
    }
    else
    {
      v55 = 1;
      *((_BYTE *)&v142.__r_.__value_.__s + 23) = 1;
      LOWORD(v142.__r_.__value_.__l.__data_) = v43;
      v56 = v54 - v53;
      if (v56)
        goto LABEL_93;
    }
    v63 = 0;
    if ((v55 & 0x80) == 0)
    {
LABEL_133:
      if (v63)
        goto LABEL_264;
      goto LABEL_134;
    }
LABEL_132:
    operator delete(v142.__r_.__value_.__l.__data_);
    goto LABEL_133;
  }
LABEL_134:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_258;
  sub_1B033E610((uint64_t)&__s, a1 + 16, &__p, &__p.__r_.__value_.__s.__data_[1]);
  v76 = *(_QWORD *)(a1 + 136);
  v77 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v78 = *(_QWORD *)(a1 + 144) - v76;
  if (!v78)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
LABEL_257:
    v43 = __p.__r_.__value_.__s.__data_[0];
LABEL_258:
    if ((v43 & 0x80) != 0)
      goto LABEL_264;
    v119 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v43) & v119) == 0)
    {
      v120 = (v119 >> 7) & 1;
      if (v43 != 95)
        v120 = 0;
      if (v120 != 1)
        goto LABEL_264;
    }
    goto LABEL_263;
  }
  v138 = v11;
  v79 = 0;
  v80 = v78 / 24;
  v82 = __s.__r_.__value_.__l.__size_;
  v81 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v83 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v83 = __s.__r_.__value_.__l.__size_;
  if (v80 <= 1)
    v84 = 1;
  else
    v84 = v78 / 24;
  for (i = 1; ; i = v79 < v80)
  {
    v86 = (unsigned __int8 **)(v76 + 24 * v79);
    v87 = (unsigned __int8 *)*((unsigned __int8 *)v86 + 23);
    v88 = (char)v87;
    if ((char)v87 < 0)
      v87 = v86[1];
    if ((unsigned __int8 *)v83 == v87)
      break;
LABEL_155:
    if (++v79 == v84)
    {
      if ((v77 & 0x80) != 0)
LABEL_255:
        operator delete(__s.__r_.__value_.__l.__data_);
      v11 = v138;
      goto LABEL_257;
    }
LABEL_159:
    ;
  }
  if (v88 >= 0)
    v89 = (unsigned __int8 *)(v76 + 24 * v79);
  else
    v89 = *v86;
  if ((v77 & 0x80) == 0)
  {
    if (!(_DWORD)v77)
    {
LABEL_163:
      v11 = 1;
      if (!i)
        goto LABEL_257;
      goto LABEL_264;
    }
    v90 = 0;
    while (__s.__r_.__value_.__s.__data_[v90] == v89[v90])
    {
      if (v77 == ++v90)
        goto LABEL_163;
    }
    goto LABEL_155;
  }
  v133 = v2;
  v91 = v84;
  v131 = i;
  v92 = v81;
  v93 = v82;
  if (memcmp(v81, v89, v82))
  {
    ++v79;
    v84 = v91;
    v18 = v79 == v91;
    v82 = v93;
    v81 = v92;
    v2 = v133;
    if (v18)
      goto LABEL_255;
    goto LABEL_159;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  v11 = 1;
  v2 = v133;
  if (!v131)
    goto LABEL_257;
LABEL_264:
  if (v11 == *(unsigned __int8 *)(a1 + 168))
  {
    v121 = 0;
    v122 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v10;
    v121 = *(_QWORD *)(a1 + 8);
    v122 = -995;
  }
  *(_DWORD *)v2 = v122;
  *(_QWORD *)(v2 + 80) = v121;
}

void sub_1B033E40C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
  {
    operator delete(__p);
    if (a28 < 0)
    {
LABEL_5:
      operator delete(a23);
      _Unwind_Resume(a1);
    }
  }
  else if (a28 < 0)
  {
    goto LABEL_5;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B033E480(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *sub_1B033E4D8(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  a1->__locale_ = (std::locale::__imp *)&off_1E60CD528;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&off_1E60CD410;
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_1B033E610(uint64_t a1, uint64_t a2, _BYTE *__src, _BYTE *a4)
{
  size_t v4;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v4 = a4 - __src;
  if ((unint64_t)(a4 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v4 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a4 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a4)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v4);
    p_dst = (void **)((char *)p_dst + v4);
    goto LABEL_9;
  }
  v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v10 = v4 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v4;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a4)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = *(unsigned __int8 *)(a1 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a1 + 8);
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = (_BYTE *)a1;
    else
      v16 = *(_BYTE **)a1;
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a1 = 0;
    *(_BYTE *)(a1 + 23) = 0;
    goto LABEL_25;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  if (SHIBYTE(v19) < 0)
LABEL_26:
    operator delete(__dst);
}

void sub_1B033E788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B033E7A4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033E7DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_1B033E7F0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::string *a4, uint64_t a5)
{
  int v7;
  std::string::value_type v8;
  std::string *v9;
  char v11;
  char v12;
  unint64_t v13;
  _BYTE *v14;
  int v15;
  _QWORD *v16;
  unint64_t v17;
  _BYTE *v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  _BYTE *v24;
  _BYTE *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  size_t v40;
  char *v41;
  char *v42;
  unint64_t v43;
  unint64_t v44;
  __int128 *v45;
  _OWORD *v46;
  unint64_t v47;
  __int128 v48;
  char *v49;
  _QWORD *v50;
  unint64_t v51;
  uint64_t v52;
  __int128 *v53;
  _OWORD *v54;
  unint64_t v55;
  __int128 v56;
  char *v57;
  _QWORD *v58;
  unint64_t v59;
  uint64_t v60;
  __int128 *v61;
  _OWORD *v62;
  unint64_t v63;
  __int128 v64;
  char *v65;
  _QWORD *v66;
  unint64_t v67;
  uint64_t v68;
  char *v69;
  char v70;
  char *v71;
  char v72;
  char *v73;
  char v74;

  if (a2 == a3)
    sub_1B033C3B8();
  switch(*a2)
  {
    case 'D':
      v7 = *(_DWORD *)(a5 + 164) | 0x400;
      goto LABEL_9;
    case 'E':
    case 'F':
    case 'G':
    case 'H':
    case 'I':
    case 'J':
    case 'K':
    case 'L':
    case 'M':
    case 'N':
    case 'O':
    case 'P':
    case 'Q':
    case 'R':
    case 'T':
    case 'U':
    case 'V':
    case 'X':
    case 'Y':
    case 'Z':
    case '[':
    case '\\':
    case ']':
    case '^':
    case '_':
    case 'a':
    case 'c':
    case 'e':
    case 'f':
    case 'g':
    case 'h':
    case 'i':
    case 'j':
    case 'k':
    case 'l':
    case 'm':
    case 'n':
    case 'o':
    case 'p':
    case 'q':
    case 'r':
    case 't':
    case 'u':
    case 'v':
      return sub_1B033C404(a1, a2, a3, a4);
    case 'S':
      v7 = *(_DWORD *)(a5 + 164) | 0x4000;
LABEL_9:
      *(_DWORD *)(a5 + 164) = v7;
      return a2 + 1;
    case 'W':
      *(_DWORD *)(a5 + 164) |= 0x500u;
      if (!*(_BYTE *)(a5 + 169))
      {
        v16 = (_QWORD *)(a5 + 64);
        v18 = *(_BYTE **)(a5 + 72);
        v17 = *(_QWORD *)(a5 + 80);
        if (*(_BYTE *)(a5 + 170))
        {
          if ((unint64_t)v18 >= v17)
          {
            v19 = (_BYTE *)*v16;
            v20 = (unint64_t)&v18[-*v16];
            v21 = v20 + 1;
            if ((uint64_t)(v20 + 1) < 0)
              goto LABEL_110;
            v22 = v17 - (_QWORD)v19;
            if (2 * v22 > v21)
              v21 = 2 * v22;
            if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
              v23 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v23 = v21;
            if (v23)
              v24 = operator new(v23);
            else
              v24 = 0;
            v41 = &v24[v20];
            v42 = &v24[v23];
            v24[v20] = 95;
            v31 = (uint64_t)&v24[v20 + 1];
            if (v18 != v19)
            {
              if (v20 >= 8 && (unint64_t)(v19 - v24) >= 0x20)
              {
                if (v20 < 0x20)
                {
                  v43 = 0;
                  goto LABEL_79;
                }
                v43 = v20 & 0xFFFFFFFFFFFFFFE0;
                v53 = (__int128 *)(v18 - 16);
                v54 = &v24[v18 - 16 - v19];
                v55 = v20 & 0xFFFFFFFFFFFFFFE0;
                do
                {
                  v56 = *v53;
                  *(v54 - 1) = *(v53 - 1);
                  *v54 = v56;
                  v54 -= 2;
                  v53 -= 2;
                  v55 -= 32;
                }
                while (v55);
                if (v20 == v43)
                  goto LABEL_105;
                if ((v20 & 0x18) != 0)
                {
LABEL_79:
                  v41 -= v20 & 0xFFFFFFFFFFFFFFF8;
                  v57 = &v18[-v43 - 8];
                  v58 = &v24[v57 - v19];
                  v59 = v43 - (v20 & 0xFFFFFFFFFFFFFFF8);
                  do
                  {
                    v60 = *(_QWORD *)v57;
                    v57 -= 8;
                    *v58-- = v60;
                    v59 += 8;
                  }
                  while (v59);
                  v18 -= v20 & 0xFFFFFFFFFFFFFFF8;
                  if (v20 == (v20 & 0xFFFFFFFFFFFFFFF8))
                    goto LABEL_105;
                  goto LABEL_99;
                }
                v41 -= v43;
                v18 -= v43;
              }
LABEL_99:
              v71 = v41 - 1;
              do
              {
                v72 = *--v18;
                *v71-- = v72;
              }
              while (v18 != v19);
LABEL_105:
              v18 = (_BYTE *)*v16;
LABEL_106:
              *(_QWORD *)(a5 + 64) = v24;
              *(_QWORD *)(a5 + 72) = v31;
              *(_QWORD *)(a5 + 80) = v42;
              if (v18)
                operator delete(v18);
              goto LABEL_108;
            }
LABEL_66:
            v24 = v41;
            goto LABEL_106;
          }
LABEL_38:
          *v18 = 95;
          v31 = (uint64_t)(v18 + 1);
LABEL_108:
          *(_QWORD *)(a5 + 72) = v31;
          return a2 + 1;
        }
        if ((unint64_t)v18 < v17)
          goto LABEL_38;
        v36 = (_BYTE *)*v16;
        v37 = (unint64_t)&v18[-*v16];
        v38 = v37 + 1;
        if ((uint64_t)(v37 + 1) < 0)
          goto LABEL_110;
        v39 = v17 - (_QWORD)v36;
        if (2 * v39 > v38)
          v38 = 2 * v39;
        if (v39 >= 0x3FFFFFFFFFFFFFFFLL)
          v40 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v40 = v38;
        if (v40)
          v24 = operator new(v40);
        else
          v24 = 0;
        v41 = &v24[v37];
        v42 = &v24[v40];
        v24[v37] = 95;
        v31 = (uint64_t)&v24[v37 + 1];
        if (v18 == v36)
          goto LABEL_66;
        if (v37 >= 8 && (unint64_t)(v36 - v24) >= 0x20)
        {
          if (v37 < 0x20)
          {
            v44 = 0;
            goto LABEL_87;
          }
          v44 = v37 & 0xFFFFFFFFFFFFFFE0;
          v61 = (__int128 *)(v18 - 16);
          v62 = &v24[v18 - 16 - v36];
          v63 = v37 & 0xFFFFFFFFFFFFFFE0;
          do
          {
            v64 = *v61;
            *(v62 - 1) = *(v61 - 1);
            *v62 = v64;
            v62 -= 2;
            v61 -= 2;
            v63 -= 32;
          }
          while (v63);
          if (v37 == v44)
            goto LABEL_105;
          if ((v37 & 0x18) != 0)
          {
LABEL_87:
            v41 -= v37 & 0xFFFFFFFFFFFFFFF8;
            v65 = &v18[-v44 - 8];
            v66 = &v24[v65 - v36];
            v67 = v44 - (v37 & 0xFFFFFFFFFFFFFFF8);
            do
            {
              v68 = *(_QWORD *)v65;
              v65 -= 8;
              *v66-- = v68;
              v67 += 8;
            }
            while (v67);
            v18 -= v37 & 0xFFFFFFFFFFFFFFF8;
            if (v37 == (v37 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_105;
            goto LABEL_103;
          }
          v41 -= v44;
          v18 -= v44;
        }
LABEL_103:
        v73 = v41 - 1;
        do
        {
          v74 = *--v18;
          *v73-- = v74;
        }
        while (v18 != v36);
        goto LABEL_105;
      }
      v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v12 = v11;
      v14 = *(_BYTE **)(a5 + 72);
      v13 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v14 >= v13)
      {
        v25 = *(_BYTE **)(a5 + 64);
        v26 = v14 - v25;
        v27 = v14 - v25 + 1;
        if (v27 >= 0)
        {
          v28 = v13 - (_QWORD)v25;
          if (2 * v28 > v27)
            v27 = 2 * v28;
          if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
            v29 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
            v30 = operator new(v29);
          else
            v30 = 0;
          v32 = &v30[v26];
          v33 = &v30[v29];
          v30[v26] = v12;
          v34 = (uint64_t)&v30[v26 + 1];
          if (v14 == v25)
          {
            v30 += v26;
LABEL_95:
            *(_QWORD *)(a5 + 64) = v30;
            *(_QWORD *)(a5 + 72) = v34;
            *(_QWORD *)(a5 + 80) = v33;
            if (v14)
              operator delete(v14);
            *(_QWORD *)(a5 + 72) = v34;
            return a2 + 1;
          }
          if (v26 >= 8 && (unint64_t)(v25 - v30) >= 0x20)
          {
            if (v26 < 0x20)
            {
              v35 = 0;
              goto LABEL_71;
            }
            v35 = v26 & 0xFFFFFFFFFFFFFFE0;
            v45 = (__int128 *)(v14 - 16);
            v46 = &v30[v14 - 16 - v25];
            v47 = v26 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v48 = *v45;
              *(v46 - 1) = *(v45 - 1);
              *v46 = v48;
              v46 -= 2;
              v45 -= 2;
              v47 -= 32;
            }
            while (v47);
            if (v26 == v35)
              goto LABEL_94;
            if ((v26 & 0x18) != 0)
            {
LABEL_71:
              v32 -= v26 & 0xFFFFFFFFFFFFFFF8;
              v49 = &v14[-v35 - 8];
              v50 = &v30[v49 - v25];
              v51 = v35 - (v26 & 0xFFFFFFFFFFFFFFF8);
              do
              {
                v52 = *(_QWORD *)v49;
                v49 -= 8;
                *v50-- = v52;
                v51 += 8;
              }
              while (v51);
              v14 -= v26 & 0xFFFFFFFFFFFFFFF8;
              if (v26 == (v26 & 0xFFFFFFFFFFFFFFF8))
                goto LABEL_94;
              goto LABEL_92;
            }
            v32 -= v35;
            v14 -= v35;
          }
LABEL_92:
          v69 = v32 - 1;
          do
          {
            v70 = *--v14;
            *v69-- = v70;
          }
          while (v14 != v25);
LABEL_94:
          v14 = *(_BYTE **)(a5 + 64);
          goto LABEL_95;
        }
LABEL_110:
        sub_1B032A0E8();
      }
      *v14 = v11;
      *(_QWORD *)(a5 + 72) = v14 + 1;
      return a2 + 1;
    case 'b':
      v9 = a4;
      v8 = 8;
      goto LABEL_14;
    case 'd':
      v15 = *(_DWORD *)(a5 + 160) | 0x400;
      goto LABEL_17;
    case 's':
      v15 = *(_DWORD *)(a5 + 160) | 0x4000;
LABEL_17:
      *(_DWORD *)(a5 + 160) = v15;
      return a2 + 1;
    case 'w':
      *(_DWORD *)(a5 + 160) |= 0x500u;
      sub_1B033D1BC(a5, 95);
      return a2 + 1;
    default:
      if (*a2)
        return sub_1B033C404(a1, a2, a3, a4);
      v8 = 0;
      v9 = a4;
LABEL_14:
      std::string::operator=(v9, v8);
      return a2 + 1;
  }
}

char *sub_1B033ED38(uint64_t a1, char *a2, char *a3, std::string *this)
{
  uint64_t v5;
  char v7;
  char *v8;
  char v9;
  char v10;
  int v11;
  char v12;
  uint64_t v13;

  if (a2 == a3)
LABEL_51:
    sub_1B033C3B8();
  v5 = *a2;
  switch((int)v5)
  {
    case '"':
    case '/':
    case '\\':
      if (this)
        std::string::operator=(this, v5);
      else
        sub_1B033C7C0(a1, v5);
      return a2 + 1;
    case 'a':
      if (this)
        std::string::operator=(this, 7);
      else
        sub_1B033C7C0(a1, 7);
      return a2 + 1;
    case 'b':
      if (this)
        std::string::operator=(this, 8);
      else
        sub_1B033C7C0(a1, 8);
      return a2 + 1;
    case 'f':
      if (this)
        std::string::operator=(this, 12);
      else
        sub_1B033C7C0(a1, 12);
      return a2 + 1;
    case 'n':
      if (this)
        std::string::operator=(this, 10);
      else
        sub_1B033C7C0(a1, 10);
      return a2 + 1;
    case 'r':
      if (this)
        std::string::operator=(this, 13);
      else
        sub_1B033C7C0(a1, 13);
      return a2 + 1;
    case 't':
      if (this)
        std::string::operator=(this, 9);
      else
        sub_1B033C7C0(a1, 9);
      return a2 + 1;
    case 'v':
      if (this)
        std::string::operator=(this, 11);
      else
        sub_1B033C7C0(a1, 11);
      return a2 + 1;
    default:
      if ((v5 & 0xFFFFFFF8) != 0x30)
        goto LABEL_51;
      v7 = v5 - 48;
      v8 = a2 + 1;
      if (a2 + 1 == a3)
      {
        v8 = a3;
LABEL_40:
        v13 = v7;
        if (this)
          goto LABEL_41;
        goto LABEL_50;
      }
      if ((*v8 & 0xF8) != 0x30)
        goto LABEL_40;
      v9 = *v8 + 8 * v7 - 48;
      if (a2 + 2 != a3)
      {
        v10 = a2[2];
        v11 = v10 & 0xF8;
        v12 = v10 + 8 * v9 - 48;
        if (v11 == 48)
          v8 = a2 + 3;
        else
          v8 = a2 + 2;
        if (v11 == 48)
          v9 = v12;
        v13 = v9;
        if (!this)
          goto LABEL_50;
LABEL_41:
        std::string::operator=(this, v13);
        return v8;
      }
      v8 = a3;
      v13 = v9;
      if (this)
        goto LABEL_41;
LABEL_50:
      sub_1B033C7C0(a1, v13);
      return v8;
  }
}

void sub_1B033F024(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _WORD *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  _OWORD *v33;
  char *v34;
  unint64_t v35;
  __int128 v36;
  __int16 v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  _OWORD *v50;
  char *v51;
  unint64_t v52;
  __int128 v53;
  __int16 v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v58;
  _OWORD *v59;
  char *v60;
  unint64_t v61;
  __int128 v62;
  __int16 v63;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = *(char **)(a1 + 112);
      v10 = v8 - v9;
      if (v8 - v9 > -3)
      {
        v11 = v10 >> 1;
        v12 = v7 - (_QWORD)v9;
        if (v12 <= (v10 >> 1) + 1)
          v13 = v11 + 1;
        else
          v13 = v12;
        if (v12 >= 0x7FFFFFFFFFFFFFFELL)
          v14 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v14 = v13;
        if (!v14)
        {
          v15 = 0;
          v16 = (_WORD *)(2 * v11);
          v17 = 0;
          *(_WORD *)(2 * v11) = v6;
          v18 = 2 * v11 + 2;
          v19 = (char *)(v8 - v9);
          if (v8 == v9)
            goto LABEL_64;
LABEL_30:
          v29 = (unint64_t)(v19 - 2);
          if (v29 < 0x1E)
            goto LABEL_71;
          if (v8 - v15 - (v10 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
            goto LABEL_71;
          v30 = (v29 >> 1) + 1;
          v31 = 2 * (v30 & 0xFFFFFFFFFFFFFFF0);
          v32 = &v8[-v31];
          v16 = (_WORD *)((char *)v16 - v31);
          v33 = &v15[2 * v11 - 16];
          v34 = v8 - 16;
          v35 = v30 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v36 = *(_OWORD *)v34;
            *(v33 - 1) = *((_OWORD *)v34 - 1);
            *v33 = v36;
            v33 -= 2;
            v34 -= 32;
            v35 -= 16;
          }
          while (v35);
          v8 = v32;
          if (v30 != (v30 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v37 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v16 = v37;
            }
            while (v8 != v9);
          }
LABEL_63:
          v8 = *(char **)(a1 + 112);
          goto LABEL_64;
        }
        if ((v14 & 0x8000000000000000) == 0)
        {
          v15 = operator new(2 * v14);
          v16 = &v15[2 * v11];
          v17 = &v15[2 * v14];
          *v16 = v6;
          v18 = (uint64_t)(v16 + 1);
          v19 = (char *)(v8 - v9);
          if (v8 == v9)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        sub_1B02D72AC();
      }
LABEL_67:
      sub_1B032A0E8();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v18 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v20 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v20)
      goto LABEL_28;
    v21 = *(char **)(a1 + 112);
    v22 = v8 - v21;
    if (v8 - v21 <= -3)
      goto LABEL_67;
    v23 = v22 >> 1;
    v24 = v20 - (_QWORD)v21;
    if (v24 <= (v22 >> 1) + 1)
      v25 = v23 + 1;
    else
      v25 = v24;
    if (v24 >= 0x7FFFFFFFFFFFFFFELL)
      v26 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v26 = v25;
    if (v26)
    {
      if (v26 < 0)
        goto LABEL_68;
      v27 = operator new(2 * v26);
      v16 = &v27[2 * v23];
      v17 = &v27[2 * v26];
      *v16 = v6;
      v18 = (uint64_t)(v16 + 1);
      v28 = (char *)(v8 - v21);
      if (v8 == v21)
        goto LABEL_64;
    }
    else
    {
      v27 = 0;
      v16 = (_WORD *)(2 * v23);
      v17 = 0;
      *(_WORD *)(2 * v23) = v6;
      v18 = 2 * v23 + 2;
      v28 = (char *)(v8 - v21);
      if (v8 == v21)
        goto LABEL_64;
    }
    v46 = (unint64_t)(v28 - 2);
    if (v46 < 0x1E)
      goto LABEL_72;
    if (v8 - v27 - (v22 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_72;
    v47 = (v46 >> 1) + 1;
    v48 = 2 * (v47 & 0xFFFFFFFFFFFFFFF0);
    v49 = &v8[-v48];
    v16 = (_WORD *)((char *)v16 - v48);
    v50 = &v27[2 * v23 - 16];
    v51 = v8 - 16;
    v52 = v47 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v53 = *(_OWORD *)v51;
      *(v50 - 1) = *((_OWORD *)v51 - 1);
      *v50 = v53;
      v50 -= 2;
      v51 -= 32;
      v52 -= 16;
    }
    while (v52);
    v8 = v49;
    if (v47 != (v47 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v54 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v16 = v54;
      }
      while (v8 != v21);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v20)
    goto LABEL_28;
  v38 = *(char **)(a1 + 112);
  v39 = v8 - v38;
  if (v8 - v38 <= -3)
    goto LABEL_67;
  v40 = v39 >> 1;
  v41 = v20 - (_QWORD)v38;
  if (v41 <= (v39 >> 1) + 1)
    v42 = v40 + 1;
  else
    v42 = v41;
  if (v41 >= 0x7FFFFFFFFFFFFFFELL)
    v43 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v43 = v42;
  if (!v43)
  {
    v44 = 0;
    v16 = (_WORD *)(2 * v40);
    v17 = 0;
    *(_WORD *)(2 * v40) = v6;
    v18 = 2 * v40 + 2;
    v45 = (char *)(v8 - v38);
    if (v8 == v38)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v43 < 0)
    goto LABEL_68;
  v44 = operator new(2 * v43);
  v16 = &v44[2 * v40];
  v17 = &v44[2 * v43];
  *v16 = v6;
  v18 = (uint64_t)(v16 + 1);
  v45 = (char *)(v8 - v38);
  if (v8 != v38)
  {
LABEL_57:
    v55 = (unint64_t)(v45 - 2);
    if (v55 < 0x1E)
      goto LABEL_73;
    if (v8 - v44 - (v39 & 0xFFFFFFFFFFFFFFFELL) < 0x20)
      goto LABEL_73;
    v56 = (v55 >> 1) + 1;
    v57 = 2 * (v56 & 0xFFFFFFFFFFFFFFF0);
    v58 = &v8[-v57];
    v16 = (_WORD *)((char *)v16 - v57);
    v59 = &v44[2 * v40 - 16];
    v60 = v8 - 16;
    v61 = v56 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v62 = *(_OWORD *)v60;
      *(v59 - 1) = *((_OWORD *)v60 - 1);
      *v59 = v62;
      v59 -= 2;
      v60 -= 32;
      v61 -= 16;
    }
    while (v61);
    v8 = v58;
    if (v56 != (v56 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v63 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v16 = v63;
      }
      while (v8 != v38);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v16;
  *(_QWORD *)(a1 + 120) = v18;
  *(_QWORD *)(a1 + 128) = v17;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v18;
}

void sub_1B033F3E0()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033F418(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B033F42C(uint64_t a1, uint64_t a2, uint64_t a3, std::string::value_type *a4)
{
  std::string::size_type v4;
  std::string *p_s;
  std::string *v10;
  std::string::value_type *v11;
  __int128 *v12;
  std::string::size_type *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  std::string::value_type v18;
  std::string *v19;
  unint64_t v20;
  unint64_t v21;
  std::string::size_type size;
  std::string *v23;
  int v24;
  uint64_t v25;
  std::string v26;
  std::string __s;

  v4 = (std::string::size_type)&a4[-a3];
  if ((unint64_t)&a4[-a3] >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v4 <= 0x16)
  {
    *((_BYTE *)&__s.__r_.__value_.__s + 23) = (_BYTE)a4 - a3;
    p_s = &__s;
    if ((std::string::value_type *)a3 != a4)
      goto LABEL_4;
LABEL_13:
    v10 = p_s;
    goto LABEL_16;
  }
  v16 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v4 | 7) != 0x17)
    v16 = v4 | 7;
  v17 = v16 + 1;
  p_s = (std::string *)operator new(v16 + 1);
  __s.__r_.__value_.__l.__size_ = v4;
  __s.__r_.__value_.__r.__words[2] = v17 | 0x8000000000000000;
  __s.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s;
  if ((std::string::value_type *)a3 == a4)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)p_s - a3 < 0x20)
  {
    v10 = p_s;
    v11 = (std::string::value_type *)a3;
    do
    {
LABEL_15:
      v18 = *v11++;
      v10->__r_.__value_.__s.__data_[0] = v18;
      v10 = (std::string *)((char *)v10 + 1);
    }
    while (v11 != a4);
    goto LABEL_16;
  }
  v10 = (std::string *)((char *)p_s + (v4 & 0xFFFFFFFFFFFFFFE0));
  v11 = (std::string::value_type *)(a3 + (v4 & 0xFFFFFFFFFFFFFFE0));
  v12 = (__int128 *)(a3 + 16);
  v13 = &p_s->__r_.__value_.__r.__words[2];
  v14 = v4 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v15 = *v12;
    *((_OWORD *)v13 - 1) = *(v12 - 1);
    *(_OWORD *)v13 = v15;
    v12 += 2;
    v13 += 4;
    v14 -= 32;
  }
  while (v14);
  if (v4 != (v4 & 0xFFFFFFFFFFFFFFE0))
    goto LABEL_15;
LABEL_16:
  v10->__r_.__value_.__s.__data_[0] = 0;
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_24;
    v19 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    v19 = &__s;
  }
  std::__get_collation_name(&v26, (const char *)v19);
  *(_OWORD *)a1 = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
  v20 = v26.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  v21 = HIBYTE(v20);
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a1 + 8);
  if (v21)
    goto LABEL_24;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_24;
    v23 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v23 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v26, *(_QWORD *)(a2 + 16), v23, (char *)v23 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v26;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v24 = *(unsigned __int8 *)(a1 + 23);
    if (v24 != 12 && v24 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_24;
    }
    goto LABEL_40;
  }
  v25 = *(_QWORD *)(a1 + 8);
  if (v25 == 1 || v25 == 12)
  {
LABEL_40:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_24;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_24:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1B033F684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B033F6C8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033F700(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B033F714(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  unint64_t v4;
  _OWORD *p_p;
  _BYTE *v9;
  char *v10;
  __int128 *v11;
  _OWORD *v12;
  unint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  char *v19;
  void *__p;
  unint64_t v21;
  int64_t v22;

  v4 = (unint64_t)&a4[-a3];
  if ((unint64_t)&a4[-a3] >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v4 > 0x16)
  {
    v15 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v15 = v4 | 7;
    v16 = v15 + 1;
    p_p = operator new(v15 + 1);
    v21 = v4;
    v22 = v16 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a3 != a4)
      goto LABEL_4;
LABEL_13:
    v9 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v22) = (_BYTE)a4 - a3;
  p_p = &__p;
  if ((char *)a3 == a4)
    goto LABEL_13;
LABEL_4:
  if (v4 < 0x20 || (unint64_t)p_p - a3 < 0x20)
  {
    v9 = p_p;
    v10 = (char *)a3;
  }
  else
  {
    v9 = (char *)p_p + (v4 & 0xFFFFFFFFFFFFFFE0);
    v10 = (char *)(a3 + (v4 & 0xFFFFFFFFFFFFFFE0));
    v11 = (__int128 *)(a3 + 16);
    v12 = p_p + 1;
    v13 = v4 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v14 = *v11;
      *(v12 - 1) = *(v11 - 1);
      *v12 = v14;
      v11 += 2;
      v12 += 2;
      v13 -= 32;
    }
    while (v13);
    if (v4 == (v4 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v17 = *v10++;
    *v9++ = v17;
  }
  while (v10 != a4);
LABEL_16:
  *v9 = 0;
  v18 = HIBYTE(v22);
  if (v22 >= 0)
    v19 = (char *)&__p;
  else
    v19 = (char *)__p;
  if (v22 < 0)
    v18 = v21;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v19, &v19[v18]);
  if (SHIBYTE(v22) < 0)
    operator delete(__p);
}

void sub_1B033F888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B033F8A4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033F8DC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1B033F8F0(void **a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v2 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    sub_1B032A0E8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v3)
    v3 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_1B02D72AC();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v2];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_1B033FA88(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B033FAC8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033FB18(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1B033FB48(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B033FB88(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B033FBD8(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1B033FC10(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  *v10 = &off_1E60CD308;
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &off_1E60CD948;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_1E60CD470;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_1B033FD18(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B033FD34(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B033FD54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6)
{
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  _QWORD *result;

  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 8);
  *v12 = &off_1E60CD308;
  v12[1] = v14;
  *(_QWORD *)(v13 + 8) = 0;
  v15 = operator new();
  v16 = *(_DWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v15 = &off_1E60CD948;
  *(_QWORD *)(v15 + 8) = v17;
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)(v15 + 24) = a2;
  *(_QWORD *)(v15 + 32) = a3;
  *(_DWORD *)(v15 + 40) = v16;
  *(_DWORD *)(v15 + 44) = a5;
  *(_DWORD *)(v15 + 48) = a6;
  *(_BYTE *)(v15 + 52) = 0;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &off_1E60CD470;
  result[1] = v15;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(a4 + 8) = v15;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_1B033FE5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B033FE78(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_1B033FE98()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033FED0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B033FEE4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B033FF1C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B033FF30(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E60CD440;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E60CD410;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1B033FF90(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E60CD440;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E60CD410;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0340000(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t sub_1B03401E4(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

_QWORD *sub_1B03402AC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E60CD440;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E60CD410;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1B034030C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E60CD440;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E60CD410;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0340380()
{
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0340394(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_1B03403A8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E60CD440;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E60CD410;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_1B0340408(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &off_1E60CD440;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &off_1E60CD410;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0340478(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_1B0340484(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_1B03404AC()
{
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B03404C0(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_1B03404D4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1B5E079B4](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1B034050C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_1B0340520(uint64_t a1, char *a2, char *a3)
{
  int v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v20;
  uint64_t v21;
  int v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  if (a2 == a3)
    goto LABEL_4;
  v7 = a2 + 1;
  v6 = *a2;
  if (a2 + 1 == a3 && v6 == 36)
    goto LABEL_4;
  if ((v6 - 46) > 0x2E || ((1 << (v6 - 46)) & 0x600000000001) == 0)
  {
    sub_1B033C7C0(a1, (char)v6);
  }
  else
  {
    if (v7 != a3 && v6 == 92)
    {
      v15 = *v7;
      if ((v15 - 36) <= 0x3A && ((1 << (v15 - 36)) & 0x580000000000441) != 0)
      {
        sub_1B033C7C0(a1, (char)v15);
        v7 = a2 + 2;
        goto LABEL_5;
      }
LABEL_4:
      v7 = sub_1B033B1FC(a1, a2, a3);
      goto LABEL_5;
    }
    if (v6 != 46)
      goto LABEL_4;
    v16 = (_QWORD *)operator new();
    v17 = *(_QWORD *)(a1 + 56);
    v18 = *(_QWORD *)(v17 + 8);
    *v16 = &off_1E60CD2A8;
    v16[1] = v18;
    *(_QWORD *)(v17 + 8) = v16;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  }
LABEL_5:
  if (a2 == a3 || a2 != v7 || a2 + 1 == a3 || *a2 != 92)
    return v7;
  v8 = a2[1];
  if (v8 == 40)
  {
    v9 = (unsigned __int8 *)(a2 + 2);
    if ((*(_BYTE *)(a1 + 24) & 2) != 0)
    {
      v11 = *(_DWORD *)(a1 + 28);
    }
    else
    {
      v10 = operator new();
      v11 = *(_DWORD *)(a1 + 28) + 1;
      *(_DWORD *)(a1 + 28) = v11;
      v12 = *(_QWORD *)(a1 + 56);
      v13 = *(_QWORD *)(v12 + 8);
      *(_QWORD *)v10 = &off_1E60CD918;
      *(_QWORD *)(v10 + 8) = v13;
      *(_DWORD *)(v10 + 16) = v11;
      *(_QWORD *)(v12 + 8) = v10;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    do
    {
      if (v9 == (unsigned __int8 *)a3)
        goto LABEL_39;
      v20 = v9;
      v21 = *(_QWORD *)(a1 + 56);
      v22 = *(_DWORD *)(a1 + 28);
      v23 = (unsigned __int8 *)sub_1B0340520(a1, v20, a3);
      if (v20 == v23)
        break;
      v9 = sub_1B0340818(a1, v23, (unsigned __int8 *)a3, v21, v22 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    while (v20 != v9);
    if (v20 + 1 == (unsigned __int8 *)a3 || *v20 != 92 || v20[1] != 41)
LABEL_39:
      sub_1B0339DE0();
    v7 = (char *)&v20[2 * (v20[1] == 41)];
    if ((*(_BYTE *)(a1 + 24) & 2) == 0)
    {
      v24 = operator new();
      v25 = *(_QWORD *)(a1 + 56);
      v26 = *(_QWORD *)(v25 + 8);
      *(_QWORD *)v24 = &off_1E60CD8E8;
      *(_QWORD *)(v24 + 8) = v26;
      *(_DWORD *)(v24 + 16) = v11;
      *(_QWORD *)(v25 + 8) = v24;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
    return v7;
  }
  if ((v8 & 0xF8) != 0x30 && (v8 & 0xFE) != 0x38 || (v8 - 49) > 8)
    return v7;
  if ((v8 - 48) > *(_DWORD *)(a1 + 28))
    sub_1B033C934();
  sub_1B033C980(a1, v8 - 48);
  return a2 + 2;
}

unsigned __int8 *sub_1B0340818(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, int a5, int a6)
{
  int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  unsigned __int8 *v18;
  unsigned __int8 *v19;
  int v20;
  int v21;
  unsigned __int8 *v22;
  int v23;
  unsigned __int8 *v24;
  int v25;
  int v26;
  int v27;
  int v29;
  _BOOL4 v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  unsigned __int8 *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;

  if (a2 == a3)
    return a2;
  v11 = *a2;
  if (v11 != 42)
  {
    v18 = a3;
    if (a2 + 1 != a3 && v11 == 92 && a2[1] == 123)
    {
      v19 = &a2[2 * (a2[1] == 123)];
      if (v19 == a3)
        goto LABEL_47;
      v20 = *v19;
      if ((v20 & 0xF8) != 0x30 && (v20 & 0xFE) != 0x38)
        goto LABEL_47;
      v21 = v20 - 48;
      v22 = v19 + 1;
      if (v19 + 1 == a3)
      {
LABEL_15:
        v22 = a3;
      }
      else
      {
        while (1)
        {
          v23 = *v22;
          if ((v23 & 0xF8) != 0x30 && (v23 & 0xFE) != 0x38)
            break;
          if (v21 >= 214748364)
            goto LABEL_47;
          v21 = v23 + 10 * v21 - 48;
          if (++v22 == a3)
            goto LABEL_15;
        }
      }
      if (v22 == v19)
        goto LABEL_47;
      if (v22 == a3)
LABEL_48:
        sub_1B033FEE4();
      v24 = v22 + 1;
      v25 = *v22;
      if (v25 != 44)
      {
        if (v24 != a3 && v25 == 92)
        {
          v29 = v22[1];
          v30 = v29 == 125;
          if (v29 == 125)
          {
            v31 = (_QWORD *)operator new();
            v32 = *(_QWORD *)(a1 + 56);
            v33 = *(_QWORD *)(v32 + 8);
            *v31 = &off_1E60CD308;
            v31[1] = v33;
            *(_QWORD *)(v32 + 8) = 0;
            v34 = operator new();
            v35 = *(_DWORD *)(a1 + 32);
            v36 = *(_QWORD *)(a4 + 8);
            *(_QWORD *)v34 = &off_1E60CD948;
            *(_QWORD *)(v34 + 8) = v36;
            *(_QWORD *)(v34 + 16) = v31;
            *(_QWORD *)(v34 + 24) = v21;
            *(_QWORD *)(v34 + 32) = v21;
            *(_DWORD *)(v34 + 40) = v35;
            *(_DWORD *)(v34 + 44) = a5;
            *(_DWORD *)(v34 + 48) = a6;
            *(_BYTE *)(v34 + 52) = 1;
            *(_QWORD *)(a4 + 8) = 0;
            v37 = (_QWORD *)operator new();
            v18 = &v22[2 * v30];
LABEL_46:
            *v37 = &off_1E60CD470;
            v37[1] = v34;
            *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v37;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(v34 + 16);
            *(_QWORD *)(a4 + 8) = v34;
            ++*(_DWORD *)(a1 + 32);
            return v18;
          }
        }
        goto LABEL_48;
      }
      if (v24 == a3)
        goto LABEL_48;
      v26 = *v24;
      if ((v26 & 0xF8) == 0x30 || (v26 & 0xFE) == 0x38)
      {
        v27 = v26 - 48;
        v24 = v22 + 2;
        if (v22 + 2 == a3)
        {
LABEL_38:
          v24 = a3;
          goto LABEL_41;
        }
        while (1)
        {
          v26 = *v24;
          if ((v26 & 0xF8) != 0x30 && (v26 & 0xFE) != 0x38)
            break;
          if (v27 >= 214748364)
            goto LABEL_47;
          v27 = v26 + 10 * v27 - 48;
          if (++v24 == a3)
            goto LABEL_38;
        }
      }
      else
      {
        v27 = -1;
      }
      if (v24 == a3)
      {
        v38 = v24;
        v24 = a3;
        v18 = v38;
      }
      else if (v24 + 1 == a3 || v26 != 92)
      {
        v18 = v24;
      }
      else
      {
        v18 = &v24[2 * (v24[1] == 125)];
      }
LABEL_41:
      if (v24 != v18)
      {
        if (v27 == -1)
        {
          v44 = (_QWORD *)operator new();
          v45 = *(_QWORD *)(a1 + 56);
          v46 = *(_QWORD *)(v45 + 8);
          *v44 = &off_1E60CD308;
          v44[1] = v46;
          *(_QWORD *)(v45 + 8) = 0;
          v34 = operator new();
          v47 = *(_DWORD *)(a1 + 32);
          v48 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v34 = &off_1E60CD948;
          *(_QWORD *)(v34 + 8) = v48;
          *(_QWORD *)(v34 + 16) = v44;
          *(_QWORD *)(v34 + 24) = v21;
          *(_QWORD *)(v34 + 32) = -1;
          *(_DWORD *)(v34 + 40) = v47;
          *(_DWORD *)(v34 + 44) = a5;
          *(_DWORD *)(v34 + 48) = a6;
          *(_BYTE *)(v34 + 52) = 1;
          *(_QWORD *)(a4 + 8) = 0;
          v37 = (_QWORD *)operator new();
          goto LABEL_46;
        }
        if (v27 >= v21)
        {
          v39 = (_QWORD *)operator new();
          v40 = *(_QWORD *)(a1 + 56);
          v41 = *(_QWORD *)(v40 + 8);
          *v39 = &off_1E60CD308;
          v39[1] = v41;
          *(_QWORD *)(v40 + 8) = 0;
          v34 = operator new();
          v42 = *(_DWORD *)(a1 + 32);
          v43 = *(_QWORD *)(a4 + 8);
          *(_QWORD *)v34 = &off_1E60CD948;
          *(_QWORD *)(v34 + 8) = v43;
          *(_QWORD *)(v34 + 16) = v39;
          *(_QWORD *)(v34 + 24) = v21;
          *(_QWORD *)(v34 + 32) = v27;
          *(_DWORD *)(v34 + 40) = v42;
          *(_DWORD *)(v34 + 44) = a5;
          *(_DWORD *)(v34 + 48) = a6;
          *(_BYTE *)(v34 + 52) = 1;
          *(_QWORD *)(a4 + 8) = 0;
          v37 = (_QWORD *)operator new();
          goto LABEL_46;
        }
LABEL_47:
        sub_1B033FE98();
      }
      goto LABEL_48;
    }
    return a2;
  }
  v12 = (_QWORD *)operator new();
  v13 = *(_QWORD *)(a1 + 56);
  v14 = *(_QWORD *)(v13 + 8);
  *v12 = &off_1E60CD308;
  v12[1] = v14;
  *(_QWORD *)(v13 + 8) = 0;
  v15 = operator new();
  v16 = *(_DWORD *)(a1 + 32);
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(a4 + 8);
  *(_QWORD *)(v15 + 16) = v12;
  *(_QWORD *)v15 = &off_1E60CD948;
  *(_OWORD *)(v15 + 24) = xmmword_1B03AF6D0;
  *(_DWORD *)(v15 + 40) = v16;
  *(_DWORD *)(v15 + 44) = a5;
  *(_DWORD *)(v15 + 48) = a6;
  *(_BYTE *)(v15 + 52) = 1;
  *(_QWORD *)(a4 + 8) = 0;
  v17 = (_QWORD *)operator new();
  *v17 = &off_1E60CD470;
  v17[1] = v15;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v17;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v15 + 16);
  *(_QWORD *)(a4 + 8) = v15;
  ++*(_DWORD *)(a1 + 32);
  return a2 + 1;
}

void sub_1B0340D3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0340DAC(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_1E60CD410;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1B0340DEC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_1E60CD410;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0340E3C(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_1B0340E7C(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
    sub_1B033C934();
  sub_1B033C980(a1, a2 - 48);
  return 1;
}

char *sub_1B0340EDC(uint64_t a1, char *a2, char *a3)
{
  uint64_t v6;
  int v7;
  int v8;
  char *v9;
  signed __int8 v10;
  char *v11;
  int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t (**v22)();
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_DWORD *)(a1 + 28);
  if (a2 != a3)
  {
    v8 = *a2;
    switch(*a2)
    {
      case '$':
      case '(':
      case '*':
      case '+':
      case '.':
      case '?':
      case '[':
      case '\\':
      case '^':
      case '{':
      case '|':
        goto LABEL_3;
      case ')':
        if (!*(_DWORD *)(a1 + 36))
          goto LABEL_8;
LABEL_3:
        v9 = a2 + 1;
        if (a2 + 1 != a3 && v8 == 92)
        {
          v10 = *v9;
          switch(*v9)
          {
            case '$':
            case '(':
            case ')':
            case '*':
            case '+':
            case '.':
            case '?':
            case '[':
            case '\\':
            case '^':
            case '{':
            case '|':
            case '}':
              sub_1B033C7C0(a1, v10);
              v9 = a2 + 2;
              return sub_1B033931C(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
            default:
              if ((*(_DWORD *)(a1 + 24) & 0x1F0) == 0x40)
              {
                v11 = sub_1B033ED38(a1, a2 + 1, a3, 0);
              }
              else
              {
                v12 = sub_1B0340E7C(a1, v10);
                v13 = 2;
                if (!v12)
                  v13 = 0;
                v11 = &a2[v13];
              }
              if (v11 != a2)
                goto LABEL_19;
              v8 = *a2;
              break;
          }
        }
        if (v8 != 46)
          goto LABEL_18;
        v14 = (_QWORD *)operator new();
        v15 = *(_QWORD *)(a1 + 56);
        v16 = *(_QWORD *)(v15 + 8);
        *v14 = &off_1E60CD2A8;
        v14[1] = v16;
        *(_QWORD *)(v15 + 8) = v14;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        break;
      default:
LABEL_8:
        sub_1B033C7C0(a1, (char)v8);
        v9 = a2 + 1;
        return sub_1B033931C(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    }
    return sub_1B033931C(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
LABEL_18:
  v11 = sub_1B033B1FC(a1, a2, a3);
LABEL_19:
  if (v11 != a2 || v11 == a3)
  {
LABEL_35:
    v9 = v11;
    if (v11 != a2)
      return sub_1B033931C(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
    return a2;
  }
  v17 = *a2;
  switch(v17)
  {
    case '$':
      v18 = operator new();
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      v22 = &off_1E60CD5B8;
      goto LABEL_26;
    case '(':
      if ((*(_BYTE *)(a1 + 24) & 2) != 0)
      {
        v24 = *(_DWORD *)(a1 + 28);
      }
      else
      {
        v23 = operator new();
        v24 = *(_DWORD *)(a1 + 28) + 1;
        *(_DWORD *)(a1 + 28) = v24;
        v25 = *(_QWORD *)(a1 + 56);
        v26 = *(_QWORD *)(v25 + 8);
        *(_QWORD *)v23 = &off_1E60CD918;
        *(_QWORD *)(v23 + 8) = v26;
        *(_DWORD *)(v23 + 16) = v24;
        *(_QWORD *)(v25 + 8) = v23;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      ++*(_DWORD *)(a1 + 36);
      v27 = (char *)sub_1B0338604(a1, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        sub_1B0339DE0();
      if ((*(_BYTE *)(a1 + 24) & 2) == 0)
      {
        v29 = operator new();
        v30 = *(_QWORD *)(a1 + 56);
        v31 = *(_QWORD *)(v30 + 8);
        *(_QWORD *)v29 = &off_1E60CD8E8;
        *(_QWORD *)(v29 + 8) = v31;
        *(_DWORD *)(v29 + 16) = v24;
        *(_QWORD *)(v30 + 8) = v29;
        *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      }
      --*(_DWORD *)(a1 + 36);
      v11 = v28 + 1;
      goto LABEL_35;
    case '^':
      v18 = operator new();
      v19 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v20 = *(_QWORD *)(a1 + 56);
      v21 = *(_QWORD *)(v20 + 8);
      v22 = &off_1E60CD558;
LABEL_26:
      *(_QWORD *)v18 = v22;
      *(_QWORD *)(v18 + 8) = v21;
      *(_BYTE *)(v18 + 16) = v19;
      *(_QWORD *)(v20 + 8) = v18;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
      v9 = a2 + 1;
      return sub_1B033931C(a1, v9, a3, v6, v7 + 1, *(_DWORD *)(a1 + 28) + 1);
  }
  return a2;
}

uint64_t sub_1B0341264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  uint64_t v40;
  char v41;
  unsigned int v42;
  void *v43;
  BOOL v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  void *v48;
  char *v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _BYTE *v59;
  char *v60;
  char *v61;
  char *v62;
  int64_t v63;
  char *v64;
  char *v65;
  _BYTE *v66;
  _BYTE *v67;
  __int128 v68;
  char *v69;
  char *v70;
  char *v71;
  char *v72;
  int64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  char *v78;
  char *v79;
  char *v80;
  _BYTE *v81;
  int64_t v82;
  unint64_t v83;
  char *v84;
  unint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  __int128 v89;
  unint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  char *v94;
  void *v95;
  void *v96;
  void *v97;
  void *v98;
  unint64_t v99;
  unint64_t v100;
  unint64_t v101;
  BOOL v103;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  const double *v108;
  double *v109;
  uint64_t v110;
  const double *v111;
  double *v112;
  BOOL v113;
  char v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  const double *v119;
  double *v120;
  uint64_t v121;
  const double *v122;
  double *v123;
  void *v124;
  uint64_t v125;
  char *v126;
  _BYTE *v127;
  unsigned int v128;
  uint64_t v129;
  char v130;
  unsigned int v131;
  unint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v137;
  char *v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t v141;
  uint64_t v142;
  unint64_t v143;
  void *v144;
  unint64_t v145;
  void *v146;
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  __int128 v152;
  uint64_t v153;
  unint64_t v154;
  char *v155;
  char *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  void **v164;
  uint64_t v165;
  _QWORD *v166;
  _QWORD *v167;
  unint64_t v168;
  void *v169;
  void *v170;
  _QWORD *v171;
  char *v172;
  _BYTE *v173;
  void *v174;
  unint64_t v175;
  uint64_t v176;
  unint64_t v177;
  void *v178;
  void *v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  char *v183;
  void *v184;
  void *v185;
  char *v186;
  char *v187;
  char *v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  void *v195;
  unint64_t v196;
  _BYTE *v197;
  unint64_t v198;
  char *v199;
  BOOL v200;
  char *v201;
  char *v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  __int128 *v206;
  _OWORD *v207;
  uint64_t v208;
  __int128 v209;
  uint64_t v210;
  char *v211;
  char *v212;
  unint64_t v213;
  char *v214;
  unint64_t v215;
  char *v216;
  int64_t v217;
  unint64_t v218;
  char *v219;
  char *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  __int128 *v224;
  char *v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  char *v229;
  char *v230;
  void *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  char *v239;
  char *v240;
  unint64_t v241;
  char *v242;
  char *v243;
  unint64_t v244;
  int64_t v245;
  unint64_t v246;
  uint64_t v247;
  char *v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  __int128 *v253;
  char *v254;
  uint64_t v255;
  __int128 v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  char *v260;
  unint64_t v261;
  char *v262;
  unint64_t v263;
  char *v264;
  int64_t v265;
  unint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  __int128 *v272;
  char *v273;
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  __int128 v280;
  char *v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void *v288;
  uint64_t v289;
  __int128 v290;
  uint64_t v291;
  void **v292;
  void **v293;
  unint64_t v294;
  unint64_t v295;
  uint64_t v296;
  void *v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  char v302;
  _QWORD *v303;
  _QWORD *v304;
  char *v305;
  char *v306;
  char *v307;
  uint64_t v308;
  uint64_t *v309;
  uint64_t v310;
  char *v311;
  unint64_t v312;
  _BYTE *__dst;
  _QWORD *__dsta;
  uint64_t v315;
  void *v316[2];
  __int128 v317;
  __int128 v318;
  _BYTE v319[56];
  void *__p[2];
  _QWORD v321[3];
  __int128 v322;
  char v323;
  float64x2x2_t v324;
  float64x2x2_t v325;
  float64x2x2_t v326;
  float64x2x2_t v327;

  v4 = (_QWORD *)a4;
  v8 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)(a4 + 24) = a3;
  v9 = (uint64_t *)(a4 + 24);
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)(a4 + 40) = 0;
  sub_1B033A91C(a4, (v8 + 1), (__int128 *)(a4 + 24));
  v4[6] = a2;
  v4[7] = a2;
  *((_BYTE *)v4 + 64) = 0;
  *(_OWORD *)(v4 + 9) = *(_OWORD *)v9;
  *((_BYTE *)v4 + 88) = *((_BYTE *)v4 + 40);
  v4[13] = a2;
  *((_BYTE *)v4 + 96) = 1;
  v309 = v9;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((sub_1B033A4D0(a1, a2, a3, v4, 4160, 1) & 1) == 0)
      goto LABEL_160;
    goto LABEL_11;
  }
  v308 = a2;
  v310 = a3;
  v315 = a3 - a2;
  if (!*(_DWORD *)(a1 + 28))
  {
    v317 = 0u;
    v318 = 0u;
    *(_OWORD *)v316 = 0u;
    v19 = *(_QWORD *)(a1 + 40);
    v304 = v4;
    if (!v19)
      goto LABEL_344;
    memset(&v319[4], 0, 24);
    sub_1B034316C((uint64_t)v316);
    v20 = *((_QWORD *)v316[1] + ((_QWORD)v318 + *((_QWORD *)&v318 + 1)) / 0x2AuLL)
        + 96 * (((_QWORD)v318 + *((_QWORD *)&v318 + 1)) % 0x2AuLL);
    *(_DWORD *)v20 = 0;
    *(_OWORD *)(v20 + 4) = *(_OWORD *)v319;
    v21 = *(_OWORD *)&v319[12];
    *(_OWORD *)(v20 + 48) = 0u;
    *(_OWORD *)(v20 + 64) = 0u;
    *(_OWORD *)(v20 + 16) = v21;
    *(_OWORD *)(v20 + 32) = 0u;
    *(_OWORD *)(v20 + 77) = 0u;
    v23 = *((_QWORD *)&v318 + 1);
    v22 = v318;
    v24 = ++*((_QWORD *)&v318 + 1);
    v25 = (char *)v316[1];
    v26 = *(unsigned int *)(a1 + 32);
    v27 = v318 + v23;
    v28 = 8 * (v27 / 0x2A);
    v29 = 96 * (v27 % 0x2A);
    v30 = *(_QWORD *)((char *)v316[1] + v28) + v29;
    *(_DWORD *)v30 = 0;
    *(_QWORD *)(v30 + 8) = a2;
    *(_QWORD *)(*(_QWORD *)&v25[v28] + v29 + 16) = a2;
    *(_QWORD *)(*(_QWORD *)&v25[v28] + v29 + 24) = a3;
    v31 = *(_QWORD *)&v25[v28] + v29;
    v34 = *(_QWORD *)(v31 + 56);
    v32 = v31 + 56;
    v33 = v34;
    v35 = (*(_QWORD *)(v32 + 8) - v34) >> 4;
    if (v26 <= v35)
    {
      if (v26 < v35)
        *(_QWORD *)(v32 + 8) = v33 + 16 * v26;
    }
    else
    {
      sub_1B033AF68((char **)v32, v26 - v35);
      v24 = *((_QWORD *)&v318 + 1);
      v22 = v318;
      v25 = (char *)v316[1];
    }
    v302 = 0;
    v131 = 0;
    v300 = 0;
    v132 = v22 + v24 - 1;
    v133 = 8 * (v132 / 0x2A);
    v134 = 96 * (v132 % 0x2A);
    *(_QWORD *)(*(_QWORD *)&v25[v133] + v134 + 80) = v19;
    v135 = *(_QWORD *)&v25[v133] + v134;
    *(_DWORD *)(v135 + 88) = 4160;
    *(_BYTE *)(v135 + 92) = 1;
    while (2)
    {
      if ((++v131 & 0xFFF) == 0 && (int)(v131 >> 12) >= (int)v315)
        sub_1B033AAE8();
      v137 = v24 + v318 - 1;
      v312 = v137 % 0x2A;
      __dsta = (_QWORD *)*((_QWORD *)v316[1] + v137 / 0x2A);
      v138 = (char *)&__dsta[12 * (v137 % 0x2A)];
      v140 = v138 + 80;
      v139 = *((_QWORD *)v138 + 10);
      if (v139)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v139 + 16))(v139, v138);
      switch(*(_DWORD *)v138)
      {
        case 0xFFFFFC18:
          if (__dsta[12 * v312 + 2] == v310)
          {
            v163 = v300;
            if ((v302 & (v300 >= v310 - __dsta[12 * v312 + 1])) == 0)
              v163 = v310 - __dsta[12 * v312 + 1];
            if (v163 != v315)
            {
              v175 = *((_QWORD *)&v318 + 1) + v318 - 1;
              v176 = *((_QWORD *)v316[1] + v175 / 0x2A);
              v177 = v175 % 0x2A;
              v178 = *(void **)(v176 + 96 * (v175 % 0x2A) + 56);
              if (v178)
              {
                *(_QWORD *)(v176 + 96 * v177 + 64) = v178;
                operator delete(v178);
              }
              v300 = v163;
              v179 = *(void **)(v176 + 96 * v177 + 32);
              if (v179)
              {
                *(_QWORD *)(v176 + 96 * v177 + 40) = v179;
                operator delete(v179);
              }
              v180 = 42 * ((uint64_t)(v317 - (unint64_t)v316[1]) >> 3) - 1;
              v181 = v318;
              --*((_QWORD *)&v318 + 1);
              if ((void *)v317 == v316[1])
                v180 = 0;
              if ((unint64_t)(v180 - (*((_QWORD *)&v181 + 1) + v181) + 1) >= 0x54)
              {
                operator delete(*(void **)(v317 - 8));
                *(_QWORD *)&v317 = v317 - 8;
              }
              v302 = 1;
              goto LABEL_165;
            }
            v164 = (void **)v316[1];
            v165 = v317;
            if ((void *)v317 == v316[1])
            {
              *((_QWORD *)&v318 + 1) = 0;
              v189 = 0;
            }
            else
            {
              v166 = (char *)v316[1] + 8 * ((unint64_t)v318 / 0x2A);
              v167 = (_QWORD *)(*v166 + 96 * ((unint64_t)v318 % 0x2A));
              v168 = *((_QWORD *)v316[1] + (*((_QWORD *)&v318 + 1) + (_QWORD)v318) / 0x2AuLL)
                   + 96 * ((*((_QWORD *)&v318 + 1) + (_QWORD)v318) % 0x2AuLL);
              if (v167 != (_QWORD *)v168)
              {
                do
                {
                  v169 = (void *)v167[7];
                  if (v169)
                  {
                    v167[8] = v169;
                    operator delete(v169);
                  }
                  v170 = (void *)v167[4];
                  if (v170)
                  {
                    v167[5] = v170;
                    operator delete(v170);
                  }
                  v167 += 12;
                  if ((_QWORD *)((char *)v167 - *v166) == (_QWORD *)4032)
                  {
                    v171 = (_QWORD *)v166[1];
                    ++v166;
                    v167 = v171;
                  }
                }
                while (v167 != (_QWORD *)v168);
                v164 = (void **)v316[1];
                v165 = v317;
              }
              *((_QWORD *)&v318 + 1) = 0;
              v189 = v165 - (_QWORD)v164;
              if (v189 >= 0x11)
              {
                do
                {
                  operator delete(*v164);
                  v164 = (void **)((char *)v316[1] + 8);
                  v316[1] = v164;
                  v189 = v317 - (_QWORD)v164;
                }
                while ((_QWORD)v317 - (_QWORD)v164 > 0x10uLL);
              }
            }
            if (v189 >> 3 == 1)
            {
              v190 = 21;
LABEL_242:
              *(_QWORD *)&v318 = v190;
            }
            else if (v189 >> 3 == 2)
            {
              v190 = 42;
              goto LABEL_242;
            }
            v302 = 1;
            v300 = v315;
            goto LABEL_165;
          }
          v141 = *((_QWORD *)&v318 + 1) + v318 - 1;
          v142 = *((_QWORD *)v316[1] + v141 / 0x2A);
          v143 = v141 % 0x2A;
          v144 = *(void **)(v142 + 96 * (v141 % 0x2A) + 56);
          if (v144)
          {
LABEL_178:
            *(_QWORD *)(v142 + 96 * v143 + 64) = v144;
            operator delete(v144);
          }
LABEL_179:
          v146 = *(void **)(v142 + 96 * v143 + 32);
          if (v146)
          {
            v147 = v142 + 96 * v143;
            goto LABEL_337;
          }
LABEL_338:
          v289 = 42 * ((uint64_t)(v317 - (unint64_t)v316[1]) >> 3) - 1;
          v290 = v318;
          --*((_QWORD *)&v318 + 1);
          if ((void *)v317 == v316[1])
            v289 = 0;
          if ((unint64_t)(v289 - (*((_QWORD *)&v290 + 1) + v290) + 1) >= 0x54)
          {
            operator delete(*(void **)(v317 - 8));
            *(_QWORD *)&v317 = v317 - 8;
          }
LABEL_165:
          v24 = *((_QWORD *)&v318 + 1);
          if (!*((_QWORD *)&v318 + 1))
          {
            if ((v302 & 1) == 0)
            {
              LOBYTE(v19) = 0;
              v292 = (void **)v316[1];
              v293 = (void **)v317;
              *((_QWORD *)&v318 + 1) = 0;
              v294 = v317 - (unint64_t)v316[1];
              if ((unint64_t)v317 - (unint64_t)v316[1] < 0x11)
                goto LABEL_346;
              goto LABEL_345;
            }
            v291 = *v304;
            *(_QWORD *)v291 = v308;
            *(_QWORD *)(v291 + 8) = v308 + v300;
            LOBYTE(v19) = 1;
            *(_BYTE *)(v291 + 16) = 1;
LABEL_344:
            v292 = (void **)v316[1];
            v293 = (void **)v317;
            *((_QWORD *)&v318 + 1) = 0;
            v294 = v317 - (unint64_t)v316[1];
            if ((unint64_t)v317 - (unint64_t)v316[1] < 0x11)
              goto LABEL_346;
            do
            {
LABEL_345:
              operator delete(*v292);
              v293 = (void **)v317;
              v292 = (void **)((char *)v316[1] + 8);
              v316[1] = v292;
              v294 = v317 - (_QWORD)v292;
            }
            while ((_QWORD)v317 - (_QWORD)v292 > 0x10uLL);
LABEL_346:
            v295 = v294 >> 3;
            if (v295 == 1)
            {
              v296 = 21;
            }
            else
            {
              if (v295 != 2)
                goto LABEL_351;
              v296 = 42;
            }
            *(_QWORD *)&v318 = v296;
LABEL_351:
            if (v292 != v293)
            {
              do
              {
                v297 = *v292++;
                operator delete(v297);
              }
              while (v292 != v293);
              if ((void *)v317 != v316[1])
                *(_QWORD *)&v317 = v317 + (((unint64_t)v316[1] - v317 + 7) & 0xFFFFFFFFFFFFFFF8);
            }
            if (v316[0])
              operator delete(v316[0]);
            v4 = v304;
            if ((v19 & 1) != 0)
              goto LABEL_11;
LABEL_160:
            result = 0;
            v4[1] = *v4;
            return result;
          }
          continue;
        case 0xFFFFFC19:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_165;
        case 0xFFFFFC1D:
          v154 = v318;
          v156 = (char *)v316[1];
          v155 = (char *)v317;
          if ((_QWORD)v318)
            goto LABEL_329;
          v157 = v317 - (unint64_t)v316[1];
          v158 = (uint64_t)(v317 - (unint64_t)v316[1]) >> 3;
          v159 = 42 * v158 - 1;
          if ((void *)v317 == v316[1])
            v159 = 0;
          if ((unint64_t)(v159 - *((_QWORD *)&v318 + 1)) >= 0x2A)
          {
            *(_QWORD *)&v318 = 42;
            v160 = (char *)(v317 - 8);
            v161 = *(_QWORD *)(v317 - 8);
            *(_QWORD *)&v317 = v317 - 8;
            if (v316[1] != v316[0])
            {
              v162 = (char *)v316[1];
LABEL_273:
              *((_QWORD *)v162 - 1) = v161;
              v156 = (char *)v316[1] - 8;
              v316[1] = (char *)v316[1] - 8;
LABEL_328:
              v154 = v318;
              v155 = (char *)v317;
LABEL_329:
              v278 = &v156[8 * (v154 / 0x2A)];
              v279 = *(_QWORD *)v278 + 96 * (v154 % 0x2A);
              if (v155 == v156)
                v279 = 0;
              if (v279 == *(_QWORD *)v278)
                v279 = *((_QWORD *)v278 - 1) + 4032;
              v280 = *((_OWORD *)v138 + 1);
              *(_OWORD *)(v279 - 96) = *(_OWORD *)v138;
              *(_OWORD *)(v279 - 80) = v280;
              v281 = (char *)&__dsta[12 * v312];
              *(_QWORD *)(v279 - 56) = 0;
              *(_QWORD *)(v279 - 48) = 0;
              *(_QWORD *)(v279 - 64) = 0;
              *(_OWORD *)(v279 - 64) = *((_OWORD *)v281 + 2);
              *(_QWORD *)(v279 - 48) = *((_QWORD *)v281 + 6);
              *((_QWORD *)v281 + 4) = 0;
              *((_QWORD *)v281 + 5) = 0;
              *((_QWORD *)v281 + 6) = 0;
              *(_QWORD *)(v279 - 40) = 0;
              *(_QWORD *)(v279 - 32) = 0;
              *(_QWORD *)(v279 - 24) = 0;
              *(_OWORD *)(v279 - 40) = *(_OWORD *)(v281 + 56);
              *(_QWORD *)(v279 - 24) = *((_QWORD *)v281 + 9);
              *((_QWORD *)v281 + 7) = 0;
              *((_QWORD *)v281 + 8) = 0;
              *((_QWORD *)v281 + 9) = 0;
              v282 = *v140;
              *(_QWORD *)(v279 - 11) = *(_QWORD *)(v138 + 85);
              *(_QWORD *)(v279 - 16) = v282;
              v283 = *((_QWORD *)&v318 + 1);
              *(_QWORD *)&v318 = v318 - 1;
              ++*((_QWORD *)&v318 + 1);
              v284 = v283 + v318;
              v285 = (v283 + (uint64_t)v318) / 0x2AuLL;
              v286 = *((_QWORD *)v316[1] + v285);
              v287 = v284 - 42 * v285;
              v288 = *(void **)(v286 + 96 * v287 + 56);
              if (v288)
              {
                *(_QWORD *)(v286 + 96 * v287 + 64) = v288;
                operator delete(v288);
              }
              v146 = *(void **)(v286 + 96 * v287 + 32);
              if (v146)
              {
                v147 = v286 + 96 * v287;
LABEL_337:
                *(_QWORD *)(v147 + 40) = v146;
                operator delete(v146);
              }
              goto LABEL_338;
            }
            if ((unint64_t)v160 < *((_QWORD *)&v317 + 1))
            {
              v191 = (uint64_t)(*((_QWORD *)&v317 + 1) - (_QWORD)v160) >> 3;
              if (v191 >= -1)
                v192 = v191 + 1;
              else
                v192 = v191 + 2;
              v193 = v192 >> 1;
              v194 = &v160[8 * (v192 >> 1)];
              v162 = &v194[-(v160 - (char *)v316[1])];
              if (v160 != v316[1])
              {
                memmove(&v194[-(v160 - (char *)v316[1])], v316[1], v160 - (char *)v316[1]);
                v156 = (char *)v317;
              }
              v316[1] = v162;
              *(_QWORD *)&v317 = &v156[8 * v193];
              goto LABEL_273;
            }
            if (*((void **)&v317 + 1) == v316[1])
              v213 = 1;
            else
              v213 = (uint64_t)(*((_QWORD *)&v317 + 1) - (unint64_t)v316[1]) >> 2;
            if (!(v213 >> 61))
            {
              v214 = (char *)operator new(8 * v213);
              v215 = (v213 + 3) >> 2;
              v162 = &v214[8 * v215];
              v216 = v162;
              v217 = v160 - v156;
              if (v160 != v156)
              {
                v216 = &v162[v217 & 0xFFFFFFFFFFFFFFF8];
                v218 = v217 - 8;
                v219 = &v214[8 * v215];
                v220 = v156;
                if (v218 < 0x38)
                  goto LABEL_370;
                v221 = 8 * v215;
                v219 = &v214[8 * v215];
                v220 = v156;
                if ((unint64_t)(v219 - v156) < 0x20)
                  goto LABEL_370;
                v222 = (v218 >> 3) + 1;
                v223 = 8 * (v222 & 0x3FFFFFFFFFFFFFFCLL);
                v219 = &v162[v223];
                v220 = &v156[v223];
                v224 = (__int128 *)(v156 + 16);
                v225 = &v214[v221 + 16];
                v226 = v222 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v227 = *v224;
                  *((_OWORD *)v225 - 1) = *(v224 - 1);
                  *(_OWORD *)v225 = v227;
                  v224 += 2;
                  v225 += 32;
                  v226 -= 4;
                }
                while (v226);
                if (v222 != (v222 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_370:
                  do
                  {
                    v228 = *(_QWORD *)v220;
                    v220 += 8;
                    *(_QWORD *)v219 = v228;
                    v219 += 8;
                  }
                  while (v219 != v216);
                }
              }
              v316[0] = v214;
              v316[1] = v162;
              *(_QWORD *)&v317 = v216;
              *((_QWORD *)&v317 + 1) = &v214[8 * v213];
              if (v156)
              {
                operator delete(v156);
                v162 = (char *)v316[1];
              }
              goto LABEL_273;
            }
LABEL_366:
            sub_1B02D72AC();
          }
          v172 = (char *)*((_QWORD *)&v317 + 1);
          v173 = v316[0];
          if (v158 < (uint64_t)(*((_QWORD *)&v317 + 1) - (unint64_t)v316[0]) >> 3)
          {
            if (v316[1] != v316[0])
            {
              v174 = operator new(0xFC0uLL);
LABEL_325:
              *((_QWORD *)v156 - 1) = v174;
              v156 = (char *)v316[1] - 8;
              v277 = 21;
              if ((_QWORD)v317 - ((unint64_t)v316[1] - 8) != 8)
                v277 = v318 + 42;
              v316[1] = (char *)v316[1] - 8;
              *(_QWORD *)&v318 = v277;
              goto LABEL_328;
            }
            v195 = operator new(0xFC0uLL);
            if (v155 == v172)
            {
              if (v155 == v156)
                v196 = 1;
              else
                v196 = (v155 - v173) >> 2;
              if (v196 >> 61)
                goto LABEL_367;
              v197 = operator new(8 * v196);
              v198 = v196 >> 2;
              v199 = &v197[8 * (v196 >> 2)];
              v200 = v155 == v156;
              v155 = v199;
              if (!v200)
              {
                v155 = &v199[8 * v158];
                v201 = &v197[8 * (v196 >> 2)];
                v202 = v156;
                if ((unint64_t)(v157 - 8) < 0x38)
                  goto LABEL_371;
                v203 = 8 * v198;
                v201 = &v197[8 * (v196 >> 2)];
                v202 = v156;
                if ((unint64_t)(&v197[8 * v198] - v156) < 0x20)
                  goto LABEL_371;
                v204 = ((unint64_t)(v157 - 8) >> 3) + 1;
                v205 = 8 * (v204 & 0x3FFFFFFFFFFFFFFCLL);
                v201 = &v199[v205];
                v202 = &v156[v205];
                v206 = (__int128 *)(v156 + 16);
                v207 = &v197[v203 + 16];
                v208 = v204 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v209 = *v206;
                  *(v207 - 1) = *(v206 - 1);
                  *v207 = v209;
                  v206 += 2;
                  v207 += 2;
                  v208 -= 4;
                }
                while (v208);
                if (v204 != (v204 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_371:
                  do
                  {
                    v210 = *(_QWORD *)v202;
                    v202 += 8;
                    *(_QWORD *)v201 = v210;
                    v201 += 8;
                  }
                  while (v201 != v155);
                }
              }
              v316[0] = v197;
              v316[1] = &v197[8 * (v196 >> 2)];
              *(_QWORD *)&v317 = v155;
              *((_QWORD *)&v317 + 1) = &v197[8 * v196];
              if (v156)
              {
                operator delete(v156);
                v155 = (char *)v317;
              }
            }
            *(_QWORD *)v155 = v195;
            v212 = (char *)v316[1];
            v211 = (char *)v317;
            *(_QWORD *)&v317 = v317 + 8;
            v174 = *(void **)v211;
            *(_QWORD *)&v317 = v211;
            if (v316[1] != v316[0])
            {
              v156 = (char *)v316[1];
              goto LABEL_325;
            }
            if ((unint64_t)v211 < *((_QWORD *)&v317 + 1))
            {
              v257 = (uint64_t)(*((_QWORD *)&v317 + 1) - (_QWORD)v211) >> 3;
              if (v257 >= -1)
                v258 = v257 + 1;
              else
                v258 = v257 + 2;
              v259 = v258 >> 1;
              v260 = &v211[8 * (v258 >> 1)];
              v156 = &v260[-(v211 - (char *)v316[1])];
              if (v211 != v316[1])
              {
                memmove(&v260[-(v211 - (char *)v316[1])], v316[1], v211 - (char *)v316[1]);
                v211 = (char *)v317;
              }
              v316[1] = v156;
              *(_QWORD *)&v317 = &v211[8 * v259];
              goto LABEL_325;
            }
            if (*((void **)&v317 + 1) == v316[1])
              v261 = 1;
            else
              v261 = (uint64_t)(*((_QWORD *)&v317 + 1) - (unint64_t)v316[1]) >> 2;
            if (!(v261 >> 61))
            {
              v262 = (char *)operator new(8 * v261);
              v263 = (v261 + 3) >> 2;
              v156 = &v262[8 * v263];
              v264 = v156;
              v265 = v211 - v212;
              if (v211 != v212)
              {
                v264 = &v156[v265 & 0xFFFFFFFFFFFFFFF8];
                v266 = v265 - 8;
                v267 = &v262[8 * v263];
                v268 = v212;
                if (v266 < 0x38)
                  goto LABEL_372;
                v269 = 8 * v263;
                v267 = &v262[8 * v263];
                v268 = v212;
                if ((unint64_t)(v267 - v212) < 0x20)
                  goto LABEL_372;
                v270 = (v266 >> 3) + 1;
                v271 = 8 * (v270 & 0x3FFFFFFFFFFFFFFCLL);
                v267 = &v156[v271];
                v268 = &v212[v271];
                v272 = (__int128 *)(v212 + 16);
                v273 = &v262[v269 + 16];
                v274 = v270 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v275 = *v272;
                  *((_OWORD *)v273 - 1) = *(v272 - 1);
                  *(_OWORD *)v273 = v275;
                  v272 += 2;
                  v273 += 32;
                  v274 -= 4;
                }
                while (v274);
                if (v270 != (v270 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_372:
                  do
                  {
                    v276 = *(_QWORD *)v268;
                    v268 += 8;
                    *(_QWORD *)v267 = v276;
                    v267 += 8;
                  }
                  while (v267 != v264);
                }
              }
              v316[0] = v262;
              v316[1] = v156;
              *(_QWORD *)&v317 = v264;
              *((_QWORD *)&v317 + 1) = &v262[8 * v261];
              if (v212)
              {
                operator delete(v212);
                v156 = (char *)v316[1];
              }
              goto LABEL_325;
            }
LABEL_367:
            sub_1B02D72AC();
          }
          if (*((void **)&v317 + 1) == v316[0])
            v182 = 1;
          else
            v182 = (uint64_t)(*((_QWORD *)&v317 + 1) - (unint64_t)v316[0]) >> 2;
          if (v182 >> 61)
            goto LABEL_366;
          v183 = (char *)operator new(8 * v182);
          v184 = operator new(0xFC0uLL);
          v185 = v184;
          if (v182)
          {
            v186 = &v183[8 * v182];
            *(_QWORD *)v183 = v184;
            v187 = v183 + 8;
            v306 = v183;
            v188 = v183;
            if (v156 != v155)
              goto LABEL_281;
            goto LABEL_275;
          }
          v307 = v183;
          v229 = (char *)operator new(8uLL);
          v186 = v229 + 8;
          operator delete(v307);
          v156 = (char *)v316[1];
          v230 = (char *)v317;
          *(_QWORD *)v229 = v185;
          v187 = v229 + 8;
          v306 = v229;
          v188 = v229;
          if (v156 == v230)
          {
LABEL_275:
            v231 = v316[0];
            v316[0] = v306;
            v316[1] = v188;
            *(_QWORD *)&v317 = v187;
            *((_QWORD *)&v317 + 1) = v186;
            v232 = v318 + 42;
            if (v187 - v188 == 8)
              v232 = 21;
            *(_QWORD *)&v318 = v232;
            v156 = v188;
            if (v231)
            {
              operator delete(v231);
              v156 = (char *)v316[1];
            }
            goto LABEL_328;
          }
          break;
        case 0xFFFFFC1F:
          v145 = *((_QWORD *)&v318 + 1) + v318 - 1;
          v142 = *((_QWORD *)v316[1] + v145 / 0x2A);
          v143 = v145 % 0x2A;
          v144 = *(void **)(v142 + 96 * (v145 % 0x2A) + 56);
          if (v144)
            goto LABEL_178;
          goto LABEL_179;
        case 0xFFFFFC20:
          sub_1B033B08C((uint64_t)v319, (__int128 *)v138);
          (*(void (**)(_QWORD, uint64_t, char *))(*(_QWORD *)*v140 + 24))(*v140, 1, v138);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v321[1] + 24))(v321[1], 0, v319);
          v148 = v316[1];
          if ((void *)v317 == v316[1])
            v149 = 0;
          else
            v149 = 42 * ((uint64_t)(v317 - (unint64_t)v316[1]) >> 3) - 1;
          v150 = *((_QWORD *)&v318 + 1) + v318;
          if (v149 == *((_QWORD *)&v318 + 1) + (_QWORD)v318)
          {
            sub_1B034316C((uint64_t)v316);
            v148 = v316[1];
            v150 = *((_QWORD *)&v318 + 1) + v318;
          }
          v151 = v148[v150 / 0x2A] + 96 * (v150 % 0x2A);
          v152 = *(_OWORD *)&v319[16];
          *(_OWORD *)v151 = *(_OWORD *)v319;
          *(_OWORD *)(v151 + 16) = v152;
          *(_QWORD *)(v151 + 40) = 0;
          *(_QWORD *)(v151 + 48) = 0;
          *(_QWORD *)(v151 + 32) = 0;
          *(_OWORD *)(v151 + 32) = *(_OWORD *)&v319[32];
          *(_QWORD *)(v151 + 48) = *(_QWORD *)&v319[48];
          memset(&v319[32], 0, 24);
          *(_QWORD *)(v151 + 56) = 0;
          *(_QWORD *)(v151 + 64) = 0;
          *(_QWORD *)(v151 + 72) = 0;
          *(_OWORD *)(v151 + 56) = *(_OWORD *)__p;
          *(_QWORD *)(v151 + 72) = v321[0];
          __p[0] = 0;
          __p[1] = 0;
          v321[0] = 0;
          v153 = v321[1];
          *(_QWORD *)(v151 + 85) = *(_QWORD *)((char *)&v321[1] + 5);
          *(_QWORD *)(v151 + 80) = v153;
          ++*((_QWORD *)&v318 + 1);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
          if (*(_QWORD *)&v319[32])
          {
            *(_QWORD *)&v319[40] = *(_QWORD *)&v319[32];
            operator delete(*(void **)&v319[32]);
          }
          goto LABEL_165;
        default:
          sub_1B033AB34();
      }
      break;
    }
    while (1)
    {
LABEL_281:
      if (v187 == v186)
      {
        if (v188 <= v306)
        {
          if (v187 == v306)
            v241 = 1;
          else
            v241 = (v187 - v306) >> 2;
          if (v241 >> 61)
            sub_1B02D72AC();
          v242 = (char *)operator new(8 * v241);
          v243 = v242;
          v244 = v241 >> 2;
          v233 = &v242[8 * (v241 >> 2)];
          v234 = v233;
          v245 = v187 - v188;
          if (v187 != v188)
          {
            v234 = &v233[v245 & 0xFFFFFFFFFFFFFFF8];
            v246 = v245 - 8;
            if (v246 < 0x38 || (v247 = 8 * v244, (unint64_t)(&v242[8 * v244] - v188) < 0x20))
            {
              v248 = &v242[8 * (v241 >> 2)];
              v249 = v188;
              goto LABEL_297;
            }
            v251 = (v246 >> 3) + 1;
            v252 = 8 * (v251 & 0x3FFFFFFFFFFFFFFCLL);
            v248 = &v233[v252];
            v249 = &v188[v252];
            v253 = (__int128 *)(v188 + 16);
            v254 = &v242[v247 + 16];
            v255 = v251 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v256 = *v253;
              *((_OWORD *)v254 - 1) = *(v253 - 1);
              *(_OWORD *)v254 = v256;
              v253 += 2;
              v254 += 32;
              v255 -= 4;
            }
            while (v255);
            if (v251 != (v251 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_297:
                v250 = *(_QWORD *)v249;
                v249 += 8;
                *(_QWORD *)v248 = v250;
                v248 += 8;
              }
              while (v248 != v234);
            }
          }
          v187 = &v242[8 * v241];
          if (v306)
            operator delete(v306);
          v306 = v243;
          goto LABEL_280;
        }
        v236 = (v188 - v306) >> 3;
        if (v236 >= -1)
          v237 = v236 + 1;
        else
          v237 = v236 + 2;
        v238 = v237 >> 1;
        v239 = &v188[-8 * (v237 >> 1)];
        v240 = v187;
        if (v187 != v188)
        {
          memmove(v239, v188, v187 - v188);
          v240 = v188;
        }
        v234 = &v239[v187 - v188];
        v233 = &v240[-8 * v238];
      }
      else
      {
        v233 = v188;
        v234 = v187;
        v187 = v186;
      }
LABEL_280:
      v235 = *(_QWORD *)v156;
      v156 += 8;
      *(_QWORD *)v234 = v235;
      v188 = v233;
      v186 = v187;
      v187 = v234 + 8;
      if (v156 == (char *)v317)
        goto LABEL_275;
    }
  }
  v316[0] = 0;
  v316[1] = 0;
  *(_QWORD *)&v317 = 0;
  v10 = *(_QWORD *)(a1 + 40);
  if (!v10)
    goto LABEL_160;
  *(_QWORD *)&v322 = a3;
  *((_QWORD *)&v322 + 1) = a3;
  v323 = 0;
  *(_DWORD *)v319 = 0;
  memset(&v319[8], 0, 48);
  *(_OWORD *)__p = 0u;
  memset(v321, 0, 21);
  v11 = sub_1B033AC00(v316, (uint64_t)v319);
  v316[1] = v11;
  if (__p[0])
    operator delete(__p[0]);
  if (*(_QWORD *)&v319[32])
    operator delete(*(void **)&v319[32]);
  v12 = *((_QWORD *)v11 - 8);
  *((_DWORD *)v11 - 24) = 0;
  *((_QWORD *)v11 - 11) = a2;
  *((_QWORD *)v11 - 10) = a2;
  *((_QWORD *)v11 - 9) = a3;
  v13 = *(unsigned int *)(a1 + 28);
  v14 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v11 - 7) - v12) >> 3);
  v303 = v4;
  if (v13 <= v14)
  {
    if (v13 < v14)
      *((_QWORD *)v11 - 7) = v12 + 24 * v13;
  }
  else
  {
    sub_1B033ADCC((void **)v11 - 8, v13 - v14, &v322);
  }
  v36 = *((_QWORD *)v11 - 5);
  v37 = *(unsigned int *)(a1 + 32);
  v38 = (*((_QWORD *)v11 - 4) - v36) >> 4;
  if (v37 <= v38)
  {
    if (v37 < v38)
      *((_QWORD *)v11 - 4) = v36 + 16 * v37;
  }
  else
  {
    sub_1B033AF68((char **)v11 - 5, v37 - v38);
  }
  v311 = 0;
  __dst = 0;
  v299 = 0;
  v301 = 0;
  v39 = 0;
  v305 = 0;
  v40 = 0;
  v41 = 0;
  v42 = 0;
  *((_QWORD *)v11 - 2) = v10;
  *((_DWORD *)v11 - 2) = 4160;
  *(v11 - 4) = 1;
  while (2)
  {
    v44 = (++v42 & 0xFFF) != 0 || (int)(v42 >> 12) < (int)v315;
    if (!v44)
      sub_1B033AAE8();
    v45 = *((_QWORD *)v11 - 2);
    if (v45)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v45 + 16))(v45, v11 - 96);
    switch(*((_DWORD *)v11 - 24))
    {
      case 0xFFFFFC18:
        if (*((_QWORD *)v11 - 10) != a3)
          goto LABEL_35;
        v52 = a3 - *((_QWORD *)v11 - 11);
        if ((v41 & (v40 >= v52)) != 0)
          goto LABEL_101;
        v54 = (char *)*((_QWORD *)v11 - 8);
        v53 = (char *)*((_QWORD *)v11 - 7);
        v55 = v53 - v54;
        v56 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v54) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v301 - (uint64_t)v305) >> 3) >= v56)
        {
          if (0xAAAAAAAAAAAAAAABLL * ((__dst - v305) >> 3) >= v56)
          {
            v69 = v305;
            if (v54 != v53)
            {
              v70 = v305;
              do
              {
                *(_OWORD *)v70 = *(_OWORD *)v54;
                v70[16] = v54[16];
                v69 += 24;
                v54 += 24;
                v70 += 24;
              }
              while (v54 != v53);
            }
            v63 = v69 - v305;
            __dst = v305;
          }
          else
          {
            v64 = &v54[8 * ((__dst - v305) >> 3)];
            if (__dst != v305)
            {
              v65 = v305;
              do
              {
                *(_OWORD *)v65 = *(_OWORD *)v54;
                v65[16] = v54[16];
                v54 += 24;
                v65 += 24;
              }
              while (v54 != v64);
            }
            v66 = __dst;
            if (v64 != v53)
            {
              v67 = __dst;
              do
              {
                v68 = *(_OWORD *)v64;
                *((_QWORD *)v67 + 2) = *((_QWORD *)v64 + 2);
                *(_OWORD *)v67 = v68;
                v67 += 24;
                v64 += 24;
                v66 += 24;
              }
              while (v64 != v53);
            }
            v63 = v66 - __dst;
          }
        }
        else
        {
          v298 = a3 - *((_QWORD *)v11 - 11);
          if (v305)
          {
            operator delete(v305);
            v301 = 0;
          }
          if (v56 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_364;
          v57 = 0x5555555555555556 * (v301 >> 3);
          if (v57 <= v56)
            v57 = 0xAAAAAAAAAAAAAAABLL * ((v53 - v54) >> 3);
          v58 = 0xAAAAAAAAAAAAAAABLL * (v301 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v57;
          if (v58 > 0xAAAAAAAAAAAAAAALL)
LABEL_364:
            sub_1B032A0E8();
          v59 = operator new(24 * v58);
          __dst = v59;
          v60 = v39;
          v61 = v59;
          v62 = v59;
          if (v54 != v53)
          {
            memcpy(v59, v54, 24 * ((v55 - 24) / 0x18uLL) + 24);
            v62 = &v61[24 * ((v55 - 24) / 0x18uLL) + 24];
          }
          v301 = (uint64_t)&v61[24 * v58];
          v63 = v62 - v61;
          v305 = v61;
          v52 = v298;
          v39 = v60;
        }
        v72 = (char *)*((_QWORD *)v11 - 5);
        v71 = (char *)*((_QWORD *)v11 - 4);
        v73 = v71 - v72;
        v74 = (v71 - v72) >> 4;
        if (v74 <= (v299 - (uint64_t)v311) >> 4)
        {
          v82 = v39 - v311;
          v83 = (v39 - v311) >> 4;
          if (v83 < v74)
          {
            v84 = &v72[16 * v83];
            v81 = __dst;
            if (v39 != v311)
            {
              v85 = v82 - 16;
              if ((unint64_t)(v82 - 16) >= 0xD0)
              {
                v99 = v82 & 0xFFFFFFFFFFFFFFF0;
                v100 = (unint64_t)&v311[v99 - 8];
                v101 = (unint64_t)&v72[v99 - 8];
                v103 = v311 + 8 < &v72[v99] && v72 + 8 < &v311[v99];
                v86 = v311;
                if (((unint64_t)v72 >= v100 || (unint64_t)v311 >= v101) && !v103)
                {
                  v105 = (v85 >> 4) + 1;
                  v106 = 16 * (v105 & 0x1FFFFFFFFFFFFFFCLL);
                  v86 = &v311[v106];
                  v107 = &v72[v106];
                  v108 = (const double *)(v72 + 32);
                  v109 = (double *)(v311 + 32);
                  v110 = v105 & 0x1FFFFFFFFFFFFFFCLL;
                  do
                  {
                    v111 = v108 - 4;
                    v324 = vld2q_f64(v111);
                    v326 = vld2q_f64(v108);
                    v112 = v109 - 4;
                    vst2q_f64(v112, v324);
                    vst2q_f64(v109, v326);
                    v108 += 8;
                    v109 += 8;
                    v110 -= 4;
                  }
                  while (v110);
                  v72 = v107;
                  if (v105 == (v105 & 0x1FFFFFFFFFFFFFFCLL))
                    goto LABEL_89;
                }
              }
              else
              {
                v86 = v311;
              }
              do
              {
                *(_QWORD *)v86 = *(_QWORD *)v72;
                *((_QWORD *)v86 + 1) = *((_QWORD *)v72 + 1);
                v72 += 16;
                v86 += 16;
              }
              while (v72 != v84);
            }
LABEL_89:
            v87 = v39;
            if (v84 != v71)
            {
              v88 = v39;
              do
              {
                v89 = *(_OWORD *)v84;
                v84 += 16;
                *(_OWORD *)v88 = v89;
                v88 += 16;
                v87 += 16;
              }
              while (v84 != v71);
            }
            v80 = (char *)(v87 - v39);
            goto LABEL_100;
          }
          if (v72 == v71)
          {
            v91 = v311;
            v81 = __dst;
            v92 = v311;
          }
          else
          {
            v90 = v73 - 16;
            v91 = v311;
            if ((unint64_t)(v73 - 16) >= 0xD0
              && (v311 + 8 < &v72[(v90 & 0xFFFFFFFFFFFFFFF0) + 16]
                ? (v113 = v72 + 8 >= &v311[(v90 & 0xFFFFFFFFFFFFFFF0) + 16])
                : (v113 = 1),
                  v113 ? (v114 = 0) : (v114 = 1),
                  v72 < &v311[(v90 & 0xFFFFFFFFFFFFFFF0) + 8]
                ? (v115 = v311 >= &v72[(v90 & 0xFFFFFFFFFFFFFFF0) + 8])
                : (v115 = 1),
                  v115))
            {
              v92 = v311;
              v81 = __dst;
              if ((v114 & 1) == 0)
              {
                v116 = (v90 >> 4) + 1;
                v117 = 16 * (v116 & 0x1FFFFFFFFFFFFFFCLL);
                v92 = &v311[v117];
                v118 = &v72[v117];
                v119 = (const double *)(v72 + 32);
                v120 = (double *)(v311 + 32);
                v121 = v116 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v122 = v119 - 4;
                  v325 = vld2q_f64(v122);
                  v327 = vld2q_f64(v119);
                  v123 = v120 - 4;
                  vst2q_f64(v123, v325);
                  vst2q_f64(v120, v327);
                  v119 += 8;
                  v120 += 8;
                  v121 -= 4;
                }
                while (v121);
                v72 = v118;
                if (v116 == (v116 & 0x1FFFFFFFFFFFFFFCLL))
                  goto LABEL_99;
              }
            }
            else
            {
              v92 = v311;
              v81 = __dst;
            }
            do
            {
              *(_QWORD *)v92 = *(_QWORD *)v72;
              *((_QWORD *)v92 + 1) = *((_QWORD *)v72 + 1);
              v92 += 16;
              v72 += 16;
            }
            while (v72 != v71);
          }
LABEL_99:
          v80 = (char *)(v92 - v91);
          v39 = v91;
          goto LABEL_100;
        }
        v75 = v52;
        if (v311)
        {
          operator delete(v311);
          v299 = 0;
        }
        if (v73 < 0)
          goto LABEL_363;
        v76 = v299 >> 3;
        if (v299 >> 3 <= v74)
          v76 = (v71 - v72) >> 4;
        v77 = (unint64_t)v299 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v76;
        if (v77 >> 60)
LABEL_363:
          sub_1B032A0E8();
        v78 = (char *)operator new(16 * v77);
        v39 = v78;
        v79 = v78;
        if (v72 != v71)
        {
          memcpy(v78, v72, v73 & 0xFFFFFFFFFFFFFFF0);
          v79 = &v39[v73 & 0xFFFFFFFFFFFFFFF0];
        }
        v299 = (uint64_t)&v39[16 * v77];
        v80 = (char *)(v79 - v39);
        v311 = v39;
        v52 = v75;
        v81 = __dst;
LABEL_100:
        __dst = &v81[v63];
        v39 = &v80[(_QWORD)v39];
        v40 = v52;
LABEL_101:
        v93 = (char *)v316[1];
        if (v40 == v315)
        {
          v94 = (char *)v316[0];
          while (v93 != v94)
          {
            v95 = (void *)*((_QWORD *)v93 - 5);
            if (v95)
            {
              *((_QWORD *)v93 - 4) = v95;
              operator delete(v95);
            }
            v96 = (void *)*((_QWORD *)v93 - 8);
            if (v96)
            {
              *((_QWORD *)v93 - 7) = v96;
              operator delete(v96);
            }
            v93 -= 96;
          }
          v316[1] = v94;
          v41 = 1;
          v40 = v315;
        }
        else
        {
          v97 = (void *)*((_QWORD *)v316[1] - 5);
          if (v97)
          {
            *((_QWORD *)v316[1] - 4) = v97;
            operator delete(v97);
          }
          v98 = (void *)*((_QWORD *)v93 - 8);
          if (v98)
          {
            *((_QWORD *)v93 - 7) = v98;
            operator delete(v98);
          }
          v316[1] = v93 - 96;
          v41 = 1;
        }
LABEL_25:
        v43 = v316[0];
        v11 = (char *)v316[1];
        if (v316[0] != v316[1])
          continue;
        if ((v41 & 1) != 0)
        {
          v4 = v303;
          v124 = v305;
          v125 = *v303;
          *(_QWORD *)v125 = v308;
          *(_QWORD *)(v125 + 8) = v308 + v40;
          *(_BYTE *)(v125 + 16) = 1;
          v126 = v311;
          if (__dst != v305)
          {
            v127 = v305 + 16;
            v128 = 1;
            do
            {
              v129 = v125 + 24 * v128;
              *(_OWORD *)v129 = *((_OWORD *)v127 - 1);
              v130 = *v127;
              v127 += 24;
              *(_BYTE *)(v129 + 16) = v130;
              v44 = 0xAAAAAAAAAAAAAAABLL * ((__dst - v305) >> 3) > v128++;
            }
            while (v44);
          }
        }
        else
        {
          v4 = v303;
          v124 = v305;
          v126 = v311;
        }
        if (v126)
          operator delete(v126);
        if (v124)
          operator delete(v124);
        if (v43)
          operator delete(v43);
        if ((v41 & 1) == 0)
          goto LABEL_160;
LABEL_11:
        v15 = v309;
        if (v4[1] != *v4)
          v15 = (uint64_t *)*v4;
        v16 = *v15;
        v4[7] = *v15;
        *((_BYTE *)v4 + 64) = v4[6] != v16;
        v17 = v15[1];
        v4[9] = v17;
        *((_BYTE *)v4 + 88) = v17 != v4[10];
        return 1;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_25;
      case 0xFFFFFC1F:
LABEL_35:
        v46 = v316[1];
        v47 = (void *)*((_QWORD *)v316[1] - 5);
        if (v47)
        {
          *((_QWORD *)v316[1] - 4) = v47;
          operator delete(v47);
        }
        v48 = (void *)*(v46 - 8);
        if (v48)
        {
          *(v46 - 7) = v48;
          operator delete(v48);
        }
        v316[1] = v46 - 12;
        goto LABEL_25;
      case 0xFFFFFC20:
        sub_1B033B08C((uint64_t)v319, (__int128 *)v11 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v11 - 2) + 24))(*((_QWORD *)v11 - 2), 1, v11 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v321[1] + 24))(v321[1], 0, v319);
        v49 = (char *)v316[1];
        if (v316[1] >= (void *)v317)
        {
          v316[1] = sub_1B033AC00(v316, (uint64_t)v319);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v50 = *(_OWORD *)&v319[16];
          *(_OWORD *)v316[1] = *(_OWORD *)v319;
          *((_OWORD *)v49 + 1) = v50;
          *((_QWORD *)v49 + 4) = 0;
          *((_QWORD *)v49 + 5) = 0;
          *((_QWORD *)v49 + 6) = 0;
          *((_QWORD *)v49 + 7) = 0;
          *((_OWORD *)v49 + 2) = *(_OWORD *)&v319[32];
          *((_QWORD *)v49 + 6) = *(_QWORD *)&v319[48];
          memset(&v319[32], 0, 24);
          *((_QWORD *)v49 + 8) = 0;
          *((_QWORD *)v49 + 9) = 0;
          *(_OWORD *)(v49 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v49 + 9) = v321[0];
          __p[0] = 0;
          __p[1] = 0;
          v321[0] = 0;
          v51 = v321[1];
          *(_QWORD *)(v49 + 85) = *(_QWORD *)((char *)&v321[1] + 5);
          *((_QWORD *)v49 + 10) = v51;
          v316[1] = v49 + 96;
        }
        if (*(_QWORD *)&v319[32])
        {
          *(_QWORD *)&v319[40] = *(_QWORD *)&v319[32];
          operator delete(*(void **)&v319[32]);
        }
        goto LABEL_25;
      default:
        sub_1B033AB34();
    }
  }
}

void sub_1B0342BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *__p,void **a24,void **a25,uint64_t a26,unint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38)
{
  void **v39;
  uint64_t v40;
  void **v41;
  char *v42;
  unint64_t v43;
  void *v44;
  void *v45;
  char *v46;
  void *v47;

  v39 = a24;
  v40 = (uint64_t)a25;
  if (a25 == a24)
  {
    v40 = (uint64_t)a24;
  }
  else
  {
    v41 = &a24[a27 / 0x2A];
    v42 = (char *)*v41 + 96 * (a27 % 0x2A);
    v43 = (unint64_t)a24[(a28 + a27) / 0x2A] + 96 * ((a28 + a27) % 0x2A);
    if (v42 != (char *)v43)
    {
      do
      {
        v44 = (void *)*((_QWORD *)v42 + 7);
        if (v44)
        {
          *((_QWORD *)v42 + 8) = v44;
          operator delete(v44);
        }
        v45 = (void *)*((_QWORD *)v42 + 4);
        if (v45)
        {
          *((_QWORD *)v42 + 5) = v45;
          operator delete(v45);
        }
        v42 += 96;
        if (v42 - (_BYTE *)*v41 == 4032)
        {
          v46 = (char *)v41[1];
          ++v41;
          v42 = v46;
        }
      }
      while (v42 != (char *)v43);
      v39 = a24;
      v40 = (uint64_t)a25;
    }
  }
  if ((unint64_t)(v40 - (_QWORD)v39) >= 0x11)
  {
    do
    {
      operator delete(*v39);
      v40 = (uint64_t)a25;
      v39 = a24 + 1;
      a24 = v39;
    }
    while ((unint64_t)((char *)a25 - (char *)v39) > 0x10);
  }
  while (v39 != (void **)v40)
  {
    v47 = *v39++;
    operator delete(v47);
  }
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B0342E88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;

  v8 = a4[6];
  v9 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
  v11 = *(char **)a1;
  v10 = *(char **)(a1 + 8);
  v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v10[-*(_QWORD *)a1] >> 3);
  v13 = v9 - v12;
  if (v9 <= v12)
  {
    if (v9 < v12)
    {
      v10 = &v11[8 * ((a4[1] - *a4) >> 3)];
      *(_QWORD *)(a1 + 8) = v10;
    }
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 16);
    if (0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v10) >> 3) >= v13)
    {
      v20 = &v10[24 * v13];
      v24 = 8 * ((a4[1] - *a4) >> 3) - 8 * ((uint64_t)&v10[-*(_QWORD *)a1] >> 3);
      do
      {
        *(_QWORD *)v10 = 0;
        *((_QWORD *)v10 + 1) = 0;
        v10[16] = 0;
        v10 += 24;
        v24 -= 24;
      }
      while (v24);
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      if (v9 > 0xAAAAAAAAAAAAAAALL)
        sub_1B032A0E8();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - (uint64_t)v11) >> 3);
      v16 = 0x5555555555555556 * ((v14 - (uint64_t)v11) >> 3);
      if (v16 <= v9)
        v16 = 0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3);
      if (v15 >= 0x555555555555555)
        v17 = 0xAAAAAAAAAAAAAAALL;
      else
        v17 = v16;
      if (v17 > 0xAAAAAAAAAAAAAAALL)
        sub_1B02D72AC();
      v18 = (char *)operator new(24 * v17);
      v19 = &v18[24 * v12];
      v20 = &v18[24 * v9];
      v21 = 24 * v9 - 24 * v12;
      v22 = v19;
      do
      {
        *(_QWORD *)v22 = 0;
        *((_QWORD *)v22 + 1) = 0;
        v22[16] = 0;
        v22 += 24;
        v21 -= 24;
      }
      while (v21);
      if (v10 != v11)
      {
        do
        {
          v23 = *(_OWORD *)(v10 - 24);
          *((_QWORD *)v19 - 1) = *((_QWORD *)v10 - 1);
          *(_OWORD *)(v19 - 24) = v23;
          v19 -= 24;
          v10 -= 24;
        }
        while (v10 != v11);
        v10 = v11;
      }
      *(_QWORD *)a1 = v19;
      *(_QWORD *)(a1 + 8) = v20;
      *(_QWORD *)(a1 + 16) = &v18[24 * v17];
      if (v10)
      {
        operator delete(v10);
        v20 = *(char **)(a1 + 8);
      }
    }
    v11 = *(char **)a1;
    v10 = v20;
  }
  if (v10 != v11)
  {
    v25 = 0;
    v26 = 0;
    v28 = *a4;
    v27 = a4[1];
    do
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v28) >> 3);
      v30 = (_QWORD *)(v28 + v25);
      if (v29 <= v26)
        v31 = a4 + 3;
      else
        v31 = v30;
      *(_QWORD *)&v11[v25] = a2 + *v31 - v8;
      if (0xAAAAAAAAAAAAAAABLL * ((a4[1] - *a4) >> 3) <= v26)
        v32 = a4 + 3;
      else
        v32 = (uint64_t *)(*a4 + v25);
      *(_QWORD *)(*(_QWORD *)a1 + v25 + 8) = a2 + v32[1] - v8;
      v28 = *a4;
      v27 = a4[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v27 - *a4) >> 3) <= v26)
        v33 = a4 + 3;
      else
        v33 = (uint64_t *)(*a4 + v25);
      v11 = *(char **)a1;
      v34 = *(_QWORD *)(a1 + 8);
      *(_BYTE *)(*(_QWORD *)a1 + v25 + 16) = *((_BYTE *)v33 + 16);
      ++v26;
      v25 += 24;
    }
    while (v26 < 0xAAAAAAAAAAAAAAABLL * ((v34 - (uint64_t)v11) >> 3));
  }
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a3;
  *(_BYTE *)(a1 + 40) = 0;
  v35 = a2 + a4[6] - v8;
  *(_QWORD *)(a1 + 48) = v35;
  *(_QWORD *)(a1 + 56) = a2 + a4[7] - v8;
  *(_BYTE *)(a1 + 64) = *((_BYTE *)a4 + 64);
  *(_QWORD *)(a1 + 72) = a2 + a4[9] - v8;
  *(_QWORD *)(a1 + 80) = a2 + a4[10] - v8;
  *(_BYTE *)(a1 + 88) = *((_BYTE *)a4 + 88);
  *(_QWORD *)(a1 + 104) = v35;
  *(_BYTE *)(a1 + 96) = *((_BYTE *)a4 + 96);
}

void sub_1B034316C(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_1B02D72AC();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      sub_1B031B9B0((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    sub_1B031BB3C((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_1B02D72AC();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_1B02D72AC();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_1B03436AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B03436C8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B03436DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B03436F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B034370C(unint64_t *a1, void *a2, char *__src, char *a4)
{
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  unint64_t v15;
  _BYTE *v16;
  _DWORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  int *v25;
  _DWORD *v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _OWORD *v34;
  __int128 *v35;
  uint64_t v36;
  __int128 v37;
  int v38;
  char *v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  _OWORD *v43;
  __int128 *v44;
  uint64_t v45;
  __int128 v46;
  int v47;

  v7 = *a1;
  v6 = a1[1];
  v8 = (uint64_t)a2 - *a1;
  v9 = v8 >> 2;
  v10 = (char *)(*a1 + (v8 & 0xFFFFFFFFFFFFFFFCLL));
  v11 = a1[2];
  if ((uint64_t)(v11 - v6) < 4)
  {
    v12 = ((uint64_t)(v6 - v7) >> 2) + 1;
    if (v12 >> 62)
      sub_1B02D7758();
    v14 = v11 - v7;
    if (v14 >> 1 > v12)
      v12 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v12;
    if (v15)
    {
      if (v15 >> 62)
        sub_1B02D72AC();
      v16 = operator new(4 * v15);
      v17 = &v16[4 * v9];
      *v17 = *(_DWORD *)__src;
      v18 = (char *)(v17 + 1);
      if ((void *)v7 == a2)
        goto LABEL_31;
    }
    else
    {
      v16 = 0;
      v17 = (_DWORD *)(4 * v9);
      *(_DWORD *)(4 * v9) = *(_DWORD *)__src;
      v18 = (char *)(4 * v9 + 4);
      if ((void *)v7 == a2)
        goto LABEL_31;
    }
    if ((unint64_t)(v8 - 4) >= 0x3C)
    {
      v30 = v10;
      if ((v8 & 0xFFFFFFFFFFFFFFFCLL) + v7 - (unint64_t)&v16[v8 & 0xFFFFFFFFFFFFFFFCLL] >= 0x20)
      {
        v31 = ((unint64_t)(v8 - 4) >> 2) + 1;
        v32 = 4 * (v31 & 0x7FFFFFFFFFFFFFF8);
        v30 = &v10[-v32];
        v17 = (_DWORD *)((char *)v17 - v32);
        v33 = 4 * v9 - 16;
        v34 = &v16[v33];
        v35 = (__int128 *)(v7 + v33);
        v36 = v31 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v37 = *v35;
          *(v34 - 1) = *(v35 - 1);
          *v34 = v37;
          v34 -= 2;
          v35 -= 2;
          v36 -= 8;
        }
        while (v36);
        if (v31 == (v31 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_31;
      }
    }
    else
    {
      v30 = v10;
    }
    do
    {
      v38 = *((_DWORD *)v30 - 1);
      v30 -= 4;
      *--v17 = v38;
    }
    while (v30 != (char *)v7);
LABEL_31:
    v39 = &v16[4 * v15];
    v40 = v6 - (_QWORD)v10;
    if (v40)
      memmove(v18, v10, v40);
    *a1 = (unint64_t)v17;
    a1[1] = (unint64_t)&v18[v40];
    a1[2] = (unint64_t)v39;
    if (v7)
      operator delete((void *)v7);
    return;
  }
  v19 = v6 - (_QWORD)v10;
  if ((uint64_t)(v6 - (_QWORD)v10) > 3)
  {
    v20 = __src + 4;
    v22 = a1[1];
    goto LABEL_18;
  }
  v20 = &__src[v19];
  v21 = a4 - &__src[v19];
  if (a4 != &__src[v19])
    memmove((void *)a1[1], &__src[v19], a4 - &__src[v19]);
  v22 = v6 + v21;
  a1[1] = v6 + v21;
  if (v19 >= 1)
  {
LABEL_18:
    v23 = v22 - (_QWORD)(v10 + 4);
    v24 = v23 >> 2;
    v25 = (int *)(v22 - 4);
    v26 = (_DWORD *)v22;
    if (v22 - 4 < v6)
    {
      v27 = (v8 & 0xFFFFFFFFFFFFFFFCLL) + v23;
      v28 = v27 + v7 + 4;
      if (v6 > v28)
        v28 = v6;
      v29 = v28 + ~v7 - v27;
      if (v29 >= 0x2C)
      {
        v26 = (_DWORD *)v22;
        if ((unint64_t)&v10[-(v8 & 0xFFFFFFFFFFFFFFFCLL) + 4 - v7] >= 0x20)
        {
          v41 = (v29 >> 2) + 1;
          v42 = 4 * (v41 & 0x7FFFFFFFFFFFFFF8);
          v25 = (int *)((char *)v25 + v42);
          v26 = (_DWORD *)(v22 + v42);
          v43 = (_OWORD *)(v22 + 16);
          v44 = (__int128 *)(4 * v24 + 4 * v9 + v7 + 16);
          v45 = v41 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v46 = *v44;
            *(v43 - 1) = *(v44 - 1);
            *v43 = v46;
            v43 += 2;
            v44 += 2;
            v45 -= 8;
          }
          while (v45);
          if (v41 == (v41 & 0x7FFFFFFFFFFFFFF8))
            goto LABEL_40;
        }
      }
      else
      {
        v26 = (_DWORD *)v22;
      }
      do
      {
        v47 = *v25++;
        *v26++ = v47;
      }
      while ((unint64_t)v25 < v6);
    }
LABEL_40:
    a1[1] = (unint64_t)v26;
    if ((char *)v22 != v10 + 4)
      memmove((void *)(v22 - 4 * v24), v10, v23);
    if (v20 != __src)
      memmove(v10, __src, v20 - __src);
  }
}

_QWORD *sub_1B0343A28(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  const void *v9;
  int64_t v10;
  char *v11;

  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      v9 = *(const void **)v6;
      v8 = *(_QWORD *)(v6 + 8);
      v10 = v8 - *(_QWORD *)v6;
      if (v8 != *(_QWORD *)v6)
      {
        if (v10 < 0)
          sub_1B02D7758();
        v11 = (char *)operator new(v8 - *(_QWORD *)v6);
        *a4 = v11;
        a4[1] = v11;
        v7 = &v11[4 * (v10 >> 2)];
        a4[2] = v7;
        memcpy(v11, v9, v10);
        a4[1] = v7;
      }
      a4 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  return a4;
}

void sub_1B0343AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B0343B28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B0343B04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  void *v11;

  v11 = *(void **)v9;
  if (*(_QWORD *)v9)
  {
    *(_QWORD *)(v9 + 8) = v11;
    operator delete(v11);
  }
  sub_1B0343B28((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0343B28(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    if (v3 != v4)
    {
      v5 = **(_QWORD **)(a1 + 16);
      do
      {
        v7 = *(void **)(v5 - 24);
        v5 -= 24;
        v6 = v7;
        if (v7)
        {
          *(_QWORD *)(v3 - 16) = v6;
          operator delete(v6);
        }
        v3 = v5;
      }
      while (v5 != v4);
    }
  }
  return a1;
}

void sub_1B0343B94(int *a1, uint64_t a2, float a3)
{
  _BYTE *v6;
  _BYTE *v7;
  float v8;
  uint64_t v9;
  float v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  _BYTE *v16;
  _BYTE *v17;

  v7 = *(_BYTE **)a2;
  v6 = *(_BYTE **)(a2 + 8);
  v8 = powf((float)(unint64_t)((uint64_t)&v6[-*(_QWORD *)a2] >> 2), -*((float *)a1 + 1));
  v9 = *((_QWORD *)a1 + 1);
  v10 = v8 * a3;
  v11 = *((_QWORD *)a1 + 2);
  v12 = (uint64_t)(v11 - v9) >> 5;
  if (v12 >= *a1)
  {
    if (v10 > *(float *)(v9 + 4))
    {
      sub_1B0344728(v9, *((_QWORD *)a1 + 2), v12);
      v14 = *((_QWORD *)a1 + 2);
      v15 = *(void **)(v14 - 24);
      if (v15)
      {
        *(_QWORD *)(v14 - 16) = v15;
        operator delete(v15);
      }
      *((_QWORD *)a1 + 2) = v14 - 32;
      v16 = *(_BYTE **)a2;
      v17 = *(_BYTE **)(a2 + 8);
      if ((unint64_t)(v14 - 32) >= *((_QWORD *)a1 + 3))
      {
        v14 = sub_1B0343F44((uint64_t *)a1 + 1, v16, v17, a3, v10);
      }
      else
      {
        sub_1B03440E0(v14 - 32, v16, v17, a3, v10);
        *((_QWORD *)a1 + 2) = v14;
      }
      *((_QWORD *)a1 + 2) = v14;
      sub_1B03442A4(*((_QWORD *)a1 + 1), v14, (v14 - *((_QWORD *)a1 + 1)) >> 5);
    }
  }
  else
  {
    if (v11 >= *((_QWORD *)a1 + 3))
    {
      v13 = sub_1B0343F44((uint64_t *)a1 + 1, v7, v6, a3, v10);
    }
    else
    {
      sub_1B03440E0(*((_QWORD *)a1 + 2), v7, v6, a3, v10);
      v13 = v11 + 32;
      *((_QWORD *)a1 + 2) = v11 + 32;
    }
    *((_QWORD *)a1 + 2) = v13;
    sub_1B03442A4(*((_QWORD *)a1 + 1), v13, (v13 - *((_QWORD *)a1 + 1)) >> 5);
  }
}

void sub_1B0343D1C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_1B0343D24(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(a1);
}

void sub_1B0343D2C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  int64_t v4;
  uint64_t v7;
  char **v8;
  unint64_t v9;
  uint64_t v10;
  char **v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char **v20;
  void *v21;
  uint64_t v22;
  size_t __sz;
  char **v24;
  char **v25;

  v4 = a3 - a2;
  if (a3 == a2)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  else
  {
    if (v4 < 0)
      sub_1B032A0E8();
    v7 = v4 >> 5;
    __sz = a3 - a2;
    v8 = (char **)operator new(v4);
    v9 = 0;
    v24 = v8;
    v22 = v7;
    do
    {
      v10 = a2 + v9;
      v11 = &v8[v9 / 8];
      *v11 = *(char **)(a2 + v9);
      v11[2] = 0;
      v11[3] = 0;
      v11[1] = 0;
      v13 = *(_BYTE **)(a2 + v9 + 8);
      v12 = *(_BYTE **)(a2 + v9 + 16);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          sub_1B02D7758();
        v15 = (char *)operator new(v12 - v13);
        v11[1] = v15;
        v11[2] = v15;
        v16 = &v15[4 * (v14 >> 2)];
        v11[3] = v16;
        memcpy(v15, v13, v14);
        v11[2] = v16;
      }
      v9 += 32;
    }
    while (v10 + 32 != a3);
    v17 = (uint64_t)&v8[v9 / 8];
    v25 = &v8[v9 / 8];
    a1[1] = 0;
    a1[2] = 0;
    *a1 = 0;
    v18 = (char *)operator new(__sz);
    *a1 = v18;
    a1[2] = &v18[32 * v22];
    bzero(v18, __sz);
    a1[1] = &v18[__sz];
    if (v9)
    {
      do
      {
        v19 = (v17 - (uint64_t)v8) >> 5;
        v20 = (char **)&v18[32 * v19 - 32];
        *v20 = *v8;
        if (v20 != v8)
        {
          sub_1B03445E4(v20 + 1, v8[1], v8[2], (v8[2] - v8[1]) >> 2);
          v8 = v24;
          v17 = (uint64_t)v25;
          v19 = ((char *)v25 - (char *)v24) >> 5;
        }
        sub_1B0344728((uint64_t)v8, v17, v19);
        v21 = *(void **)(v17 - 24);
        if (v21)
        {
          *(_QWORD *)(v17 - 16) = v21;
          operator delete(v21);
        }
        v17 -= 32;
        v25 = (char **)v17;
      }
      while (v8 != (char **)v17);
    }
    operator delete(v8);
  }
}

void sub_1B0343F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_1B03293B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0343F20(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;

  v4 = *(void **)(v1 + v2 + 8);
  if (v4)
  {
    *(_QWORD *)(v1 + v2 + 16) = v4;
    operator delete(v4);
  }
  sub_1B0303828(a1);
}

uint64_t sub_1B0343F44(uint64_t *a1, _BYTE *a2, _BYTE *a3, float a4, float a5)
{
  uint64_t v5;
  unint64_t v6;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  uint64_t v24;
  char *v25;

  v5 = (a1[1] - *a1) >> 5;
  v6 = v5 + 1;
  if ((unint64_t)(v5 + 1) >> 59)
    sub_1B032A0E8();
  v12 = a1[2] - *a1;
  if (v12 >> 4 > v6)
    v6 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v6;
  if (v13)
  {
    if (v13 >> 59)
      sub_1B02D72AC();
    v14 = (char *)operator new(32 * v13);
  }
  else
  {
    v14 = 0;
  }
  v24 = (uint64_t)&v14[32 * v5];
  v25 = &v14[32 * v13];
  sub_1B03440E0(v24, a2, a3, a4, a5);
  v15 = v24 + 32;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 == (char *)*a1)
  {
    *a1 = v24;
    a1[1] = v15;
    a1[2] = (uint64_t)v25;
  }
  else
  {
    v18 = 0;
    do
    {
      v19 = v24 + v18;
      v20 = &v17[v18];
      *(_QWORD *)(v19 - 32) = *(_QWORD *)&v17[v18 - 32];
      *(_QWORD *)(v19 - 16) = 0;
      *(_QWORD *)(v19 - 8) = 0;
      *(_QWORD *)(v19 - 24) = 0;
      *(_OWORD *)(v19 - 24) = *(_OWORD *)&v17[v18 - 24];
      *(_QWORD *)(v19 - 8) = *(_QWORD *)&v17[v18 - 8];
      *((_QWORD *)v20 - 3) = 0;
      *((_QWORD *)v20 - 2) = 0;
      *((_QWORD *)v20 - 1) = 0;
      v18 -= 32;
    }
    while (&v17[v18] != v16);
    v17 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = v24 + v18;
    a1[1] = v15;
    a1[2] = (uint64_t)v25;
    while (v21 != v17)
    {
      v22 = (void *)*((_QWORD *)v21 - 3);
      if (v22)
      {
        *((_QWORD *)v21 - 2) = v22;
        operator delete(v22);
      }
      v21 -= 32;
    }
  }
  if (v17)
    operator delete(v17);
  return v24 + 32;
}

void sub_1B03440CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0344238((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03440E0(uint64_t a1, _BYTE *a2, _BYTE *a3, float a4, float a5)
{
  int64_t v8;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v8 = a3 - a2;
  if (a3 == a2)
  {
    v10 = 0;
    *(float *)a1 = a4;
    *(float *)(a1 + 4) = a5;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
  }
  else
  {
    if (v8 < 0)
      sub_1B02D7758();
    v10 = (char *)operator new(a3 - a2);
    v11 = &v10[4 * (v8 >> 2)];
    memcpy(v10, a2, v8);
    *(float *)a1 = a4;
    *(float *)(a1 + 4) = a5;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v12 = 4 * (v8 >> 2);
    if (v11 != v10)
    {
      if (v12 < 0)
        sub_1B02D7758();
      v13 = (char *)operator new(v11 - v10);
      *(_QWORD *)(a1 + 8) = v13;
      v14 = &v13[4 * (v12 >> 2)];
      *(_QWORD *)(a1 + 24) = v14;
      memcpy(v13, v10, v11 - v10);
      *(_QWORD *)(a1 + 16) = v14;
      if (v10)
        goto LABEL_5;
      return;
    }
  }
  if (v10)
LABEL_5:
    operator delete(v10);
}

void sub_1B0344200(void *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  sub_1B0303828(a1);
}

void sub_1B034421C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0344238(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      while (1)
      {
        v4 = v2 - 32;
        *(_QWORD *)(a1 + 16) = v2 - 32;
        v5 = *(void **)(v2 - 24);
        if (!v5)
          break;
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
        v2 = *(_QWORD *)(a1 + 16);
        if (v2 == v3)
          goto LABEL_6;
      }
      v2 -= 32;
    }
    while (v4 != v3);
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B03442A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  float v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  void *v11;
  _QWORD *v12;
  float v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  float v17;
  char *v18;
  char *v19;
  size_t v20;
  uint64_t v21;
  float v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  void *v26;
  uint64_t __sz;
  char *v28;
  void *v30;
  void *v31;

  v3 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = v3 >> 1;
    v6 = a1 + 32 * (v3 >> 1);
    v7 = *(float *)(v6 + 4);
    v9 = *(_BYTE **)(v6 + 8);
    v8 = *(_BYTE **)(v6 + 16);
    v10 = v8 - v9;
    if (v8 == v9)
    {
      v11 = 0;
    }
    else
    {
      if ((v10 & 0x8000000000000000) != 0)
        sub_1B02D7758();
      v11 = operator new(v8 - v9);
      memcpy(v11, v9, v10);
    }
    v12 = (_QWORD *)(a2 - 32);
    v13 = *(float *)(a2 - 28);
    v14 = *(_QWORD *)(a2 - 24);
    v15 = *(_QWORD *)(a2 - 16);
    if (v15 != v14)
    {
      if (v15 - v14 < 0)
        sub_1B02D7758();
      v31 = operator new(v15 - v14);
      operator delete(v31);
    }
    if (v11)
      operator delete(v11);
    if (v7 > v13)
    {
      v16 = *(_DWORD *)(a2 - 32);
      v17 = *(float *)(a2 - 28);
      v19 = *(char **)(a2 - 24);
      v18 = *(char **)(a2 - 16);
      *(_QWORD *)(a2 - 24) = 0;
      *(_QWORD *)(a2 - 16) = 0;
      *(_QWORD *)(a2 - 8) = 0;
      v28 = v18;
      v20 = v18 - v19;
      __sz = (v18 - v19) >> 2;
      while (1)
      {
        v21 = v6;
        *v12 = *(_QWORD *)v6;
        if (v12 != (_QWORD *)v6)
          sub_1B03445E4(v12 + 1, *(char **)(v6 + 8), *(char **)(v6 + 16), (uint64_t)(*(_QWORD *)(v6 + 16) - *(_QWORD *)(v6 + 8)) >> 2);
        if (!v5)
        {
LABEL_26:
          *(_DWORD *)v21 = v16;
          *(float *)(v21 + 4) = v17;
          sub_1B03445E4((_QWORD *)(v21 + 8), v19, v28, __sz);
          if (v19)
            operator delete(v19);
          return;
        }
        v5 = (v5 - 1) >> 1;
        v6 = a1 + 32 * v5;
        v22 = *(float *)(v6 + 4);
        v24 = *(_BYTE **)(v6 + 8);
        v23 = *(_BYTE **)(v6 + 16);
        v25 = v23 - v24;
        if (v23 != v24)
          break;
        v26 = 0;
        if (v28 != v19)
          goto LABEL_22;
LABEL_24:
        if (v26)
          operator delete(v26);
        v12 = (_QWORD *)v21;
        if (v22 <= v17)
          goto LABEL_26;
      }
      if ((v25 & 0x8000000000000000) != 0)
        sub_1B02D7758();
      v26 = operator new(v23 - v24);
      memcpy(v26, v24, v25);
      if (v28 == v19)
        goto LABEL_24;
LABEL_22:
      if ((v20 & 0x8000000000000000) != 0)
        sub_1B02D7758();
      v30 = operator new(v20);
      operator delete(v30);
      goto LABEL_24;
    }
  }
}

void sub_1B0344580(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (__p)
    operator delete(__p);
  sub_1B0303828(a1);
}

_QWORD *sub_1B03445E4(_QWORD *result, char *__src, char *a3, size_t __sz)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  size_t v14;
  void **v15;
  _BYTE *v16;
  unint64_t v17;
  char *v18;
  void *v19;

  v6 = __src;
  v7 = result;
  v8 = result[2];
  v9 = (char *)*result;
  if (__sz > (v8 - *result) >> 2)
  {
    if (v9)
    {
      result[1] = v9;
      operator delete(v9);
      v8 = 0;
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (__sz >> 62)
      goto LABEL_22;
    v10 = v8 >> 1;
    if (v8 >> 1 <= __sz)
      v10 = __sz;
    v11 = (unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v10;
    if (v12 >> 62)
LABEL_22:
      sub_1B02D7758();
    v13 = 4 * v12;
    result = operator new(4 * v12);
    v9 = (char *)result;
    *v7 = result;
    v7[1] = result;
    v7[2] = (char *)result + v13;
    v14 = a3 - v6;
    if (v14)
      result = memcpy(result, v6, v14);
    v15 = (void **)(v7 + 1);
    goto LABEL_21;
  }
  v15 = (void **)(result + 1);
  v16 = (_BYTE *)result[1];
  v17 = (v16 - v9) >> 2;
  if (v17 >= __sz)
  {
    v14 = a3 - __src;
    if (a3 == __src)
      goto LABEL_21;
    v19 = (void *)*result;
LABEL_20:
    result = memmove(v19, __src, v14);
    goto LABEL_21;
  }
  v18 = &__src[4 * v17];
  if (v16 != v9)
  {
    result = memmove((void *)*result, __src, v16 - v9);
    v9 = (char *)*v15;
  }
  v14 = a3 - v18;
  if (v14)
  {
    v19 = v9;
    __src = v18;
    goto LABEL_20;
  }
LABEL_21:
  *v15 = &v9[v14];
  return result;
}

void sub_1B0344728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int v6;
  int64_t v7;
  float *v8;
  float *v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  void *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v23;
  char *__src;
  void *v26;

  if (a3 >= 2)
  {
    v4 = 0;
    v6 = *(_DWORD *)a1;
    v5 = *(_DWORD *)(a1 + 4);
    __src = *(char **)(a1 + 8);
    v23 = *(char **)(a1 + 16);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v7 = (unint64_t)(a3 - 2) >> 1;
    v8 = (float *)a1;
    *(_QWORD *)(a1 + 8) = 0;
    do
    {
      v9 = &v8[8 * v4 + 8];
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v10 + 2 < a3)
      {
        v12 = v9[1];
        v14 = (_BYTE *)*((_QWORD *)v9 + 1);
        v13 = (_BYTE *)*((_QWORD *)v9 + 2);
        v15 = v13 - v14;
        if (v13 == v14)
        {
          v16 = 0;
        }
        else
        {
          if ((v15 & 0x8000000000000000) != 0)
            sub_1B02D7758();
          v16 = operator new(v13 - v14);
          memcpy(v16, v14, v15);
        }
        v17 = v9[9];
        v18 = *((_QWORD *)v9 + 5);
        v19 = *((_QWORD *)v9 + 6);
        if (v19 != v18)
        {
          if (v19 - v18 < 0)
            sub_1B02D7758();
          v26 = operator new(v19 - v18);
          operator delete(v26);
        }
        if (v16)
          operator delete(v16);
        if (v12 > v17)
        {
          v9 += 8;
          v4 = v11;
        }
      }
      *(_QWORD *)v8 = *(_QWORD *)v9;
      if (v8 != v9)
        sub_1B03445E4((_QWORD *)v8 + 1, *((char **)v9 + 1), *((char **)v9 + 2), (uint64_t)(*((_QWORD *)v9 + 2) - *((_QWORD *)v9 + 1)) >> 2);
      v8 = v9;
    }
    while (v4 <= v7);
    if ((float *)(a2 - 32) == v9)
    {
      *(_DWORD *)v9 = v6;
      *((_DWORD *)v9 + 1) = v5;
      v21 = __src;
      sub_1B03445E4((_QWORD *)v9 + 1, __src, v23, (v23 - __src) >> 2);
    }
    else
    {
      v20 = *(char **)(a2 - 24);
      *(_QWORD *)v9 = *(_QWORD *)(a2 - 32);
      sub_1B03445E4((_QWORD *)v9 + 1, v20, *(char **)(a2 - 16), (uint64_t)(*(_QWORD *)(a2 - 16) - (_QWORD)v20) >> 2);
      v21 = __src;
      *(_DWORD *)(a2 - 32) = v6;
      *(_DWORD *)(a2 - 28) = v5;
      sub_1B03445E4((_QWORD *)(a2 - 24), __src, v23, (v23 - __src) >> 2);
      sub_1B03442A4(a1, (uint64_t)(v9 + 8), ((uint64_t)v9 - a1 + 32) >> 5);
    }
    if (v21)
      operator delete(v21);
  }
}

void sub_1B03449C8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (__p)
    operator delete(__p);
  sub_1B0303828(a1);
}

void sub_1B0344A04(uint64_t *a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  size_t v6;
  char *v7;
  char *v8;
  char *v9;
  void *__p;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v12 = 0;
  v13 = 0;
  v14 = 0;
  if (a2)
  {
    if (a2 < 0)
      sub_1B032A0E8();
    v5 = a2;
    v6 = 8 * a2;
    v7 = (char *)operator new(v6);
    v8 = &v7[8 * v5];
    bzero(v7, v6);
    v9 = &v7[v6];
  }
  else
  {
    v8 = 0;
    v9 = 0;
    v7 = 0;
  }
  sub_1B0344B10(a1, (char **)&__p);
  sub_1B0344D34(__p, v11, v7, v9);
  *a3 = v7;
  a3[1] = v9;
  a3[2] = v8;
  if (__p)
  {
    v11 = __p;
    operator delete(__p);
  }
}

void sub_1B0344ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  void *v14;

  if (__p)
    operator delete(__p);
  if (v14)
    operator delete(v14);
  _Unwind_Resume(exception_object);
}

void sub_1B0344B10(uint64_t *a1@<X0>, char **a2@<X8>)
{
  uint64_t v3;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _BYTE *v14;
  char *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  char *v24;
  uint64_t v25;
  __int128 v26;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = a1[1] - *a1;
  if (v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    v9 = v3 >> 2;
    while (1)
    {
      while (1)
      {
        v10 = *a1;
        if (v7 >= v6)
          break;
        *(_DWORD *)v7 = *(_DWORD *)(v10 + 4 * v8);
        *((_DWORD *)v7 + 1) = v8;
        v7 += 8;
        a2[1] = v7;
        if (++v8 == v9)
          return;
      }
      v11 = (v7 - v5) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_1B032A0E8();
      if ((v6 - v5) >> 2 > v12)
        v12 = (v6 - v5) >> 2;
      if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8)
        v13 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v13 = v12;
      if (v13 >> 61)
        sub_1B02D72AC();
      v14 = operator new(8 * v13);
      v15 = &v14[8 * v11];
      *(_DWORD *)v15 = *(_DWORD *)(v10 + 4 * v8);
      *((_DWORD *)v15 + 1) = v8;
      if (v7 == v5)
      {
        v18 = &v14[8 * v11];
        v6 = &v14[8 * v13];
        v7 = v15 + 8;
        *a2 = v15;
        a2[1] = v15 + 8;
        a2[2] = v6;
        if (!v5)
          goto LABEL_18;
LABEL_17:
        operator delete(v5);
        goto LABEL_18;
      }
      v16 = v7 - v5 - 8;
      if (v16 < 0x168)
        break;
      v20 = (v7 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
      if (&v14[v7 - v5 - 8 - v20] > &v14[v7 - v5 - 8] || &v7[-v20 - 8] > v7 - 8 || (unint64_t)(v5 - v14) < 0x20)
        break;
      v21 = (v16 >> 3) + 1;
      v22 = 8 * (v21 & 0x3FFFFFFFFFFFFFFCLL);
      v17 = &v7[-v22];
      v18 = &v15[-v22];
      v23 = &v14[8 * v11 - 16];
      v24 = v7 - 16;
      v25 = v21 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v26 = *(_OWORD *)v24;
        *(v23 - 1) = *((_OWORD *)v24 - 1);
        *v23 = v26;
        v23 -= 2;
        v24 -= 32;
        v25 -= 4;
      }
      while (v25);
      if (v21 != (v21 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_15;
LABEL_16:
      v6 = &v14[8 * v13];
      v7 = v15 + 8;
      *a2 = v18;
      a2[1] = v15 + 8;
      a2[2] = v6;
      if (v5)
        goto LABEL_17;
LABEL_18:
      v5 = v18;
      a2[1] = v7;
      if (++v8 == v9)
        return;
    }
    v17 = v7;
    v18 = &v14[8 * v11];
    do
    {
LABEL_15:
      v19 = *((_QWORD *)v17 - 1);
      v17 -= 8;
      *((_QWORD *)v18 - 1) = v19;
      v18 -= 8;
    }
    while (v17 != v5);
    goto LABEL_16;
  }
}

void sub_1B0344D14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B0344D34(_QWORD *a1, _QWORD *a2, char *a3, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  float *v11;
  uint64_t v12;
  float v13;
  float v14;
  float v15;
  int v16;
  float *v17;
  float *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  BOOL v23;
  uint64_t v24;
  float v25;
  int v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  float v35;
  float v36;
  float v37;
  int v38;
  char *v39;
  int64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  float *v45;
  float *v46;
  float v47;
  float v48;
  float v49;
  int v50;
  float *v51;
  uint64_t v52;
  uint64_t v53;

  if (a3 != a4)
  {
    v5 = a3;
    if (a1 == a2)
    {
      a1 = a2;
      v7 = 0;
      v8 = 0;
    }
    else
    {
      do
      {
        *(_DWORD *)v5 = *(_DWORD *)a1;
        *((_DWORD *)v5 + 1) = *((_DWORD *)a1++ + 1);
        v5 += 8;
      }
      while (a1 != a2 && v5 != a4);
      v7 = v5 - a3;
      v8 = (v5 - a3) >> 3;
      if (v5 - a3 >= 9 && (unint64_t)v7 >= 0x10)
      {
        v41 = (unint64_t)(v8 - 2) >> 1;
        v42 = v41;
        do
        {
          v43 = 8 * v42;
          if (v41 >= (8 * v42) >> 3)
          {
            v44 = (v43 >> 2) | 1;
            v45 = (float *)&a3[8 * v44];
            if ((v43 >> 2) + 2 < v8 && *v45 > v45[2])
            {
              v45 += 2;
              v44 = (v43 >> 2) + 2;
            }
            v46 = (float *)&a3[v43];
            v47 = *v46;
            v48 = *v45;
            v49 = *v46;
            if (*v45 <= *v46)
            {
              v50 = *((_DWORD *)v46 + 1);
              do
              {
                v51 = v46;
                v46 = v45;
                *v51 = v48;
                v51[1] = v45[1];
                if (v41 < v44)
                  break;
                v52 = 2 * v44;
                v44 = (2 * v44) | 1;
                v45 = (float *)&a3[8 * v44];
                v53 = v52 + 2;
                if (v53 < v8 && *v45 > v45[2])
                {
                  v45 += 2;
                  v44 = v53;
                }
                v48 = *v45;
              }
              while (*v45 <= v49);
              *v46 = v47;
              *((_DWORD *)v46 + 1) = v50;
            }
          }
          v23 = v42-- <= 0;
        }
        while (!v23);
      }
    }
    if (a1 != a2)
    {
      if (v7 >= 16)
      {
        v9 = (float *)(a3 + 8);
        v10 = (float *)(a3 + 16);
        while (1)
        {
          if (COERCE_FLOAT(*a1) > *(float *)a3)
          {
            *(_QWORD *)a3 = *a1;
            if (v7 == 16 || *v9 <= *v10)
            {
              v11 = (float *)(a3 + 8);
              v12 = 1;
              v13 = *(float *)a3;
              v14 = *v9;
              v15 = *(float *)a3;
              if (*v9 <= *(float *)a3)
              {
LABEL_27:
                v16 = *((_DWORD *)a3 + 1);
                v17 = (float *)a3;
                do
                {
                  v18 = v17;
                  v17 = v11;
                  *v18 = v14;
                  v18[1] = v11[1];
                  if ((uint64_t)((unint64_t)(v8 - 2) >> 1) < v12)
                    break;
                  v19 = 2 * v12;
                  v12 = (2 * v12) | 1;
                  v11 = (float *)&a3[8 * v12];
                  v20 = v19 + 2;
                  if (v20 < v8 && *v11 > v11[2])
                  {
                    v11 += 2;
                    v12 = v20;
                  }
                  v14 = *v11;
                }
                while (*v11 <= v15);
                *v17 = v13;
                *((_DWORD *)v17 + 1) = v16;
              }
            }
            else
            {
              v11 = (float *)(a3 + 16);
              v12 = 2;
              v13 = *(float *)a3;
              v14 = *v10;
              v15 = *(float *)a3;
              if (*v10 <= *(float *)a3)
                goto LABEL_27;
            }
          }
          if (++a1 == a2)
            goto LABEL_33;
        }
      }
      do
      {
        if (COERCE_FLOAT(*a1) > *(float *)a3)
          *(_QWORD *)a3 = *a1;
        ++a1;
      }
      while (a1 != a2);
    }
LABEL_33:
    if (v7 >= 9)
    {
      v21 = (unint64_t)v7 >> 3;
      v22 = v5;
      do
      {
        v24 = 0;
        v25 = *(float *)a3;
        v26 = *((_DWORD *)a3 + 1);
        v27 = a3;
        do
        {
          v28 = v27;
          v27 += 8 * v24 + 8;
          v29 = 2 * v24;
          v24 = (2 * v24) | 1;
          v30 = v29 + 2;
          if (v30 < v21 && *(float *)v27 > *((float *)v27 + 2))
          {
            v27 += 8;
            v24 = v30;
          }
          *(_DWORD *)v28 = *(_DWORD *)v27;
          *((_DWORD *)v28 + 1) = *((_DWORD *)v27 + 1);
        }
        while (v24 <= (uint64_t)((unint64_t)(v21 - 2) >> 1));
        v31 = v22 - 8;
        if (v27 == v22 - 8)
        {
          *(float *)v27 = v25;
          *((_DWORD *)v27 + 1) = v26;
        }
        else
        {
          *(_DWORD *)v27 = *((_DWORD *)v22 - 2);
          *((_DWORD *)v27 + 1) = *((_DWORD *)v22 - 1);
          *((float *)v22 - 2) = v25;
          *((_DWORD *)v22 - 1) = v26;
          v32 = v27 - a3 + 8;
          if (v32 >= 9)
          {
            v33 = (((unint64_t)v32 >> 3) - 2) >> 1;
            v34 = &a3[8 * v33];
            v35 = *(float *)v27;
            v36 = COERCE_FLOAT(*(_QWORD *)v34);
            v37 = *(float *)v27;
            if (v36 > *(float *)v27)
            {
              v38 = *((_DWORD *)v27 + 1);
              do
              {
                v39 = v27;
                v27 = v34;
                *(float *)v39 = v36;
                *((_DWORD *)v39 + 1) = *((_DWORD *)v34 + 1);
                if (!v33)
                  break;
                v33 = (v33 - 1) >> 1;
                v34 = &a3[8 * v33];
                v36 = COERCE_FLOAT(*(_QWORD *)v34);
              }
              while (v36 > v37);
              *(float *)v27 = v35;
              *((_DWORD *)v27 + 1) = v38;
            }
          }
        }
        v22 = v31;
        v23 = v21-- <= 2;
      }
      while (!v23);
    }
  }
  return a2;
}

char *sub_1B0345128(char **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  __int128 v14;
  char *v15;
  char *v16;
  void *v17;
  void *v18;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_1B032A0E8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 3) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 3) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v4;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1B02D72AC();
  v7 = 24 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v3];
  v10 = &v8[v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v11 = v9 + 24;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 24);
      v13 -= 24;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = *((_QWORD *)v13 + 2);
      *(_QWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = v9;
    a1[1] = v11;
    a1[2] = v10;
    if (v15 != v13)
    {
      v16 = v15;
      do
      {
        v18 = (void *)*((_QWORD *)v16 - 3);
        v16 -= 24;
        v17 = v18;
        if (v18)
        {
          *((_QWORD *)v15 - 2) = v17;
          operator delete(v17);
        }
        v15 = v16;
      }
      while (v16 != v13);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

void sub_1B03454CC(CGImage *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  void *v6;
  vImagePixelCount Width;
  vImagePixelCount Height;
  void *v9;
  CGColorSpace *DeviceRGB;
  CGContext *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  void *v15;
  vImage_Error v16;
  const char *v17;
  vImage_Buffer src;
  CGRect v19;

  v6 = (void *)MEMORY[0x1B5E08128]();
  Width = CGImageGetWidth(a1);
  Height = CGImageGetHeight(a1);
  v9 = (void *)operator new[]();
  src.data = v9;
  src.height = Height;
  src.width = Width;
  src.rowBytes = 4 * Width;
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v11 = CGBitmapContextCreate(v9, Width, Height, 8uLL, 4 * Width, DeviceRGB, 0x4005u);
  v19.size.width = (double)Width;
  v19.size.height = (double)Height;
  v19.origin.x = 0.0;
  v19.origin.y = 0.0;
  CGContextDrawImage(v11, v19, a1);
  CGContextRelease(v11);
  CGColorSpaceRelease(DeviceRGB);
  v12 = *a2;
  v13 = a2[1];
  if (Width == *a2 && Height == v13)
  {
    v14 = *(_OWORD *)&src.width;
    *(_OWORD *)a3 = *(_OWORD *)&src.data;
    *(_OWORD *)(a3 + 16) = v14;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    v15 = (void *)operator new[]();
    bzero(v15, v13 * 4 * v12);
    *(_QWORD *)a3 = v15;
    *(_QWORD *)(a3 + 8) = v13;
    *(_QWORD *)(a3 + 16) = v12;
    *(_QWORD *)(a3 + 24) = 4 * v12;
    v16 = vImageScale_ARGB8888(&src, (const vImage_Buffer *)a3, 0, 0x20u);
    if (v16)
      objc_msgSend_raise_format_(MEMORY[0x1E0C99DA0], v17, (uint64_t)CFSTR("Error during scaling."), (uint64_t)CFSTR("Error code %zd"), v16);
    MEMORY[0x1B5E07CB4](v9, 0x1000C8077774924);
  }
  objc_autoreleasePoolPop(v6);
}

__CVBuffer *sub_1B034566C(__CVBuffer *a1, size_t *a2)
{
  __CVBuffer *v3;
  const __CFAllocator *v4;
  const char *v5;
  const __CFDictionary *v6;
  CVPixelBufferRef pixelBufferOut;
  VTPixelTransferSessionRef pixelTransferSessionOut;
  uint64_t v10;
  _QWORD v11[2];

  v3 = a1;
  v11[1] = *MEMORY[0x1E0C80C00];
  if (CVPixelBufferGetPixelFormatType(a1) != 1111970369
    || CVPixelBufferGetWidth(v3) != *a2
    || CVPixelBufferGetHeight(v3) != a2[1])
  {
    pixelTransferSessionOut = 0;
    v4 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
    if (VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], &pixelTransferSessionOut))
    {
      return 0;
    }
    else
    {
      pixelBufferOut = 0;
      v10 = *MEMORY[0x1E0CA8FF0];
      v11[0] = MEMORY[0x1E0C9AA70];
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v5, (uint64_t)v11, (uint64_t)&v10, 1);
      v6 = (const __CFDictionary *)objc_claimAutoreleasedReturnValue();
      if (CVPixelBufferCreate(v4, *a2, a2[1], 0x42475241u, v6, &pixelBufferOut)
        || VTPixelTransferSessionTransferImage(pixelTransferSessionOut, v3, pixelBufferOut))
      {
        CVPixelBufferRelease(pixelBufferOut);
        CFRelease(pixelTransferSessionOut);
        v3 = 0;
      }
      else
      {
        CFRelease(pixelTransferSessionOut);
        v3 = pixelBufferOut;
      }

    }
  }
  return v3;
}

void sub_1B03457C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t CVNLPBeamSearchCreate(void *a1, _QWORD *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  void *v6;
  const char *v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  void *v26;
  id v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  int v37;
  __CFString *v38;
  void *v39;
  uint64_t Instance;
  uint64_t *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  float v45;
  float v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  void *v60;
  void *v61;
  void *v62;
  void *v63;
  void *v64;
  void *v65;

  v3 = a1;
  objc_msgSend_objectForKeyedSubscript_(v3, v4, (uint64_t)CVNLPBeamSearchSize, v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v7, (uint64_t)CVNLPBeamSearchLengthNormalizationFactor, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v10, (uint64_t)CVNLPBeamSearchOutputVocabSize, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v13, (uint64_t)CVNLPBeamEndToken, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v16, (uint64_t)CVNLPBeamSearchOutputVocabPath, v17);
  v65 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v18, (uint64_t)CVNLPBeamSearchOutputVocabMap, v19);
  v64 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v20, (uint64_t)CVNLPBeamSearchOutputVocabFilterList, v21);
  v63 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v3, v22, (uint64_t)CVNLPBeamSearchBlacklistRules, v23);
  v26 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6 && v15)
  {
    v61 = v9;
    v62 = v6;
    v60 = v12;
    objc_msgSend_objectForKeyedSubscript_(v3, v24, (uint64_t)CVNLPBeamSearchIncludeLanguageModel, v25);
    v27 = (id)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_BOOLValue(v27, v28, v29, v30))
    {
      objc_msgSend_defaultManager(MEMORY[0x1E0CB3620], v31, v32, v33);
      v34 = (void *)objc_claimAutoreleasedReturnValue();
      v37 = objc_msgSend_fileExistsAtPath_(v34, v35, (uint64_t)CFSTR("/System/Library/PrivateFrameworks/CVNLP.framework/lm_vocabulary.plist"), v36);

      if (v37)
        v38 = CFSTR("/System/Library/PrivateFrameworks/CVNLP.framework/lm_vocabulary.plist");
      else
        v38 = CFSTR("/tmp/lm_vocabulary.plist");
    }
    else
    {
      v38 = 0;
    }
    v41 = (uint64_t *)objc_msgSend_unsignedIntegerValue(v6, v31, v32, v33);
    objc_msgSend_floatValue(v9, v42, v43, v44);
    v46 = v45;
    v50 = (uint64_t *)objc_msgSend_unsignedIntegerValue(v60, v47, v48, v49);
    v54 = (uint64_t *)objc_msgSend_unsignedIntegerValue(v15, v51, v52, v53);
    objc_msgSend_path(v65, v55, v56, v57);
    v58 = (void *)objc_claimAutoreleasedReturnValue();
    if (qword_1ED5378E8 != -1)
      dispatch_once(&qword_1ED5378E8, &unk_1E60CDA88);
    Instance = _CFRuntimeCreateInstance();
    sub_1B035892C((uint64_t **)(Instance + 16), v41, v50, v54, v58, v64, v63, v26, v46, v38);

    v9 = v61;
    v6 = v62;
    v12 = v60;
  }
  else
  {
    objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v24, (uint64_t)CVNLPErrorDomain, 1, 0);
    v39 = (void *)objc_claimAutoreleasedReturnValue();
    v27 = v39;
    if (a2)
    {
      v27 = v39;
      Instance = 0;
      *a2 = v27;
    }
    else
    {
      Instance = 0;
    }
  }

  return Instance;
}

void sub_1B0345ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B0345B54()
{
  JUMPOUT(0x1B0345B14);
}

void sub_1B0345B64()
{
  JUMPOUT(0x1B0345B1CLL);
}

void sub_1B0345B74()
{
  JUMPOUT(0x1B0345B24);
}

void sub_1B0345B84()
{
  JUMPOUT(0x1B0345B2CLL);
}

void sub_1B0345B94()
{
  JUMPOUT(0x1B0345B30);
}

void sub_1B0345BA4()
{
  JUMPOUT(0x1B0345B38);
}

void sub_1B0345BB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0345BCC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

__CFArray *CVNLPBeamSearchOneStep(uint64_t a1, CFArrayRef theArray)
{
  CFIndex v2;
  void *v3;
  const __CFDictionary *ValueAtIndex;
  const void *Value;
  const __CFDictionary *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  char *v33;
  char *v34;
  char *v35;
  unint64_t v36;
  uint64_t *v37;
  char *v38;
  const void *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  CFTypeRef v46;
  char *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  void *v53;
  const void *v54;
  char *v55;
  uint64_t *v56;
  void *v57;
  const char *v58;
  uint64_t v59;
  void *v60;
  const char *v61;
  const char *v62;
  uint64_t v63;
  void *v64;
  const char *v65;
  _BYTE *v66;
  _BYTE *v67;
  int64_t v68;
  uint64_t *v69;
  CFArrayRef v70;
  uint64_t *v71;
  uint64_t *v72;
  const void *v73;
  void *v74;
  char *v75;
  char *v76;
  void *v77;
  const void *v78;
  void *v81;
  CFIndex Count;
  void *v84;
  CFMutableArrayRef v85;
  __CFArray *Mutable;
  void **p_p;
  uint64_t *v88;
  uint64_t *v89;
  void *__p;
  char *v91;
  char *v92;
  void *v93;
  __int128 v94;
  uint64_t *v95;
  uint64_t *v96;
  __int128 v97;
  char *v98;

  v93 = 0;
  v94 = 0uLL;
  Count = CFArrayGetCount(theArray);
  if (Count)
  {
    v2 = 0;
    while (1)
    {
      ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(theArray, v2);
      Value = CFDictionaryGetValue(ValueAtIndex, CVNLPBeamSearchNextTokenMetaData);
      v6 = ValueAtIndex;
      objc_msgSend_objectForKeyedSubscript_(v6, v7, (uint64_t)CVNLPBeamSearchBeamID, v8);
      v3 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v6, v9, (uint64_t)CVNLPBeamSearchNextTokenID, v10);
      v11 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_objectForKeyedSubscript_(v6, v12, (uint64_t)CVNLPBeamSearchNextTokenSoftmaxValues, v13);
      v85 = (CFMutableArrayRef)objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
      v17 = objc_msgSend_bytes(v85, v14, v15, v16);
      v84 = v11;
      v21 = objc_msgSend_unsignedIntegerValue(v11, v18, v19, v20);
      v25 = objc_msgSend_unsignedIntegerValue(v3, v22, v23, v24);
      v26 = (_QWORD *)v94;
      if ((unint64_t)v94 < *((_QWORD *)&v94 + 1))
      {
        *(_QWORD *)v94 = v21;
        v26[1] = CFRetain(Value);
        v26[2] = v17;
        v27 = v26 + 4;
        v26[3] = v25;
        goto LABEL_5;
      }
      v28 = (uint64_t)(v94 - (_QWORD)v93) >> 5;
      if ((unint64_t)(v28 + 1) >> 59)
        sub_1B02D7758();
      v29 = (uint64_t)(*((_QWORD *)&v94 + 1) - (_QWORD)v93) >> 4;
      if (v29 <= v28 + 1)
        v29 = v28 + 1;
      v30 = *((_QWORD *)&v94 + 1) - (_QWORD)v93 >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v29;
      v98 = (char *)&v94 + 8;
      v81 = v3;
      if (v30)
      {
        if (v30 >> 59)
          sub_1B02D72AC();
        v31 = (char *)operator new(32 * v30);
      }
      else
      {
        v31 = 0;
      }
      v32 = (uint64_t *)&v31[32 * v28];
      v95 = (uint64_t *)v31;
      v96 = v32;
      v33 = &v31[32 * v30];
      *(_QWORD *)&v97 = v32;
      *((_QWORD *)&v97 + 1) = v33;
      *v32 = v21;
      v32[1] = (uint64_t)CFRetain(Value);
      v32[2] = v17;
      v32[3] = v25;
      v27 = v32 + 4;
      *(_QWORD *)&v97 = v32 + 4;
      v34 = (char *)v93;
      v35 = (char *)v94;
      if ((void *)v94 == v93)
        break;
      v36 = 0;
      do
      {
        v37 = &v32[v36 / 8];
        v32[v36 / 8 - 4] = *(_QWORD *)&v35[v36 - 32];
        *(v37 - 3) = (uint64_t)CFRetain(*(CFTypeRef *)&v35[v36 - 24]);
        *(v37 - 2) = *(_QWORD *)&v35[v36 - 16];
        *(v37 - 1) = *(_QWORD *)&v35[v36 - 8];
        v36 -= 32;
      }
      while (&v35[v36] != v34);
      v35 = (char *)v93;
      v38 = (char *)v94;
      v93 = &v32[v36 / 8];
      v94 = v97;
      v27 = (_QWORD *)v97;
      if (v38 != v35)
      {
        v3 = v81;
        do
        {
          v39 = (const void *)*((_QWORD *)v38 - 3);
          if (v39)
          {
            CFRelease(v39);
            *((_QWORD *)v38 - 3) = 0;
          }
          v38 -= 32;
        }
        while (v38 != v35);
LABEL_27:
        if (!v35)
          goto LABEL_5;
LABEL_4:
        operator delete(v35);
        goto LABEL_5;
      }
      v3 = v81;
      if (v35)
        goto LABEL_4;
LABEL_5:
      *(_QWORD *)&v94 = v27;

      if (++v2 == Count)
        goto LABEL_29;
    }
    v93 = &v31[32 * v28];
    *(_QWORD *)&v94 = v32 + 4;
    *((_QWORD *)&v94 + 1) = v33;
    v3 = v81;
    goto LABEL_27;
  }
LABEL_29:
  Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E0C9B378]);
  v91 = 0;
  v92 = 0;
  __p = 0;
  v40 = (char *)v93;
  v41 = (char *)v94;
  p_p = &__p;
  LOBYTE(v88) = 0;
  v42 = v94 - (_QWORD)v93;
  if ((void *)v94 != v93)
  {
    if (v42 < 0)
      sub_1B02D7758();
    v43 = (char *)operator new(v94 - (_QWORD)v93);
    v44 = 0;
    __p = v43;
    v91 = v43;
    v92 = &v43[32 * (v42 >> 5)];
    do
    {
      v45 = &v40[v44];
      *(_QWORD *)&v43[v44] = *(_QWORD *)&v40[v44];
      v46 = CFRetain(*(CFTypeRef *)&v40[v44 + 8]);
      v47 = &v43[v44];
      *((_QWORD *)v47 + 1) = v46;
      *((_QWORD *)v47 + 2) = *(_QWORD *)&v40[v44 + 16];
      *((_QWORD *)v47 + 3) = *(_QWORD *)&v40[v44 + 24];
      v44 += 32;
    }
    while (v45 + 32 != v41);
    v91 = &v43[v44];
  }
  sub_1B0359D1C((_QWORD *)(a1 + 16), &__p, (void **)&v95);
  v51 = (char *)__p;
  if (__p)
  {
    v52 = v91;
    v53 = __p;
    if (v91 != __p)
    {
      do
      {
        v54 = (const void *)*((_QWORD *)v52 - 3);
        if (v54)
        {
          CFRelease(v54);
          *((_QWORD *)v52 - 3) = 0;
        }
        v52 -= 32;
      }
      while (v52 != v51);
      v53 = __p;
    }
    v91 = v51;
    operator delete(v53);
  }
  v55 = (char *)v95;
  v56 = v96;
  if (v95 != v96)
  {
    do
    {
      objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v48, v49, v50);
      v57 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v58, *((_QWORD *)v55 + 2), v59);
      v60 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v57, v61, (uint64_t)v60, (uint64_t)CVNLPBeamSearchBeamID);

      objc_msgSend_numberWithUnsignedLong_(MEMORY[0x1E0CB37E8], v62, *(_QWORD *)v55, v63);
      v64 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_setObject_forKeyedSubscript_(v57, v65, (uint64_t)v64, (uint64_t)CVNLPBeamSearchNextTokenID);

      CFDictionarySetValue((CFMutableDictionaryRef)v57, CVNLPBeamSearchNextTokenMetaData, *((const void **)v55 + 1));
      p_p = 0;
      v88 = 0;
      v89 = 0;
      v67 = (_BYTE *)*((_QWORD *)v55 + 3);
      v66 = (_BYTE *)*((_QWORD *)v55 + 4);
      v68 = v66 - v67;
      if (v66 == v67)
      {
        v69 = 0;
      }
      else
      {
        if (v68 < 0)
          sub_1B02D7758();
        v69 = (uint64_t *)operator new(v66 - v67);
        p_p = (void **)v69;
        v89 = &v69[v68 >> 3];
        memcpy(v69, v67, v68);
        v88 = &v69[v68 >> 3];
      }
      v70 = sub_1B03469D8((uint64_t **)&p_p);
      CFDictionarySetValue((CFMutableDictionaryRef)v57, CVNLPBeamTokens, v70);
      CFArrayAppendValue(Mutable, v57);
      if (v70)
        CFRelease(v70);
      if (v69)
        operator delete(v69);

      v55 += 48;
    }
    while (v55 != (char *)v56);
    v55 = (char *)v95;
  }
  if (v55)
  {
    v71 = v96;
    v72 = (uint64_t *)v55;
    if (v96 != (uint64_t *)v55)
    {
      do
      {
        v73 = (const void *)*(v71 - 5);
        if (v73)
        {
          CFRelease(v73);
          *(v71 - 5) = 0;
        }
        v74 = (void *)*(v71 - 3);
        if (v74)
        {
          *(v71 - 2) = (uint64_t)v74;
          operator delete(v74);
        }
        v71 -= 6;
      }
      while (v71 != (uint64_t *)v55);
      v72 = v95;
    }
    v96 = (uint64_t *)v55;
    operator delete(v72);
  }
  v75 = (char *)v93;
  if (v93)
  {
    v76 = (char *)v94;
    v77 = v93;
    if ((void *)v94 != v93)
    {
      do
      {
        v78 = (const void *)*((_QWORD *)v76 - 3);
        if (v78)
        {
          CFRelease(v78);
          *((_QWORD *)v76 - 3) = 0;
        }
        v76 -= 32;
      }
      while (v76 != v75);
      v77 = v93;
    }
    *(_QWORD *)&v94 = v75;
    operator delete(v77);
  }
  return Mutable;
}

void sub_1B03461A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v14;
  va_list va;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a13);
  va_start(va, a13);
  v14 = va_arg(va1, void *);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_1B03463D4((void **)va);
  sub_1B03463D4((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B03461BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_1B03463D4((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B03461D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void **v11;
  va_list va;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;

  va_start(va1, a10);
  va_start(va, a10);
  v11 = va_arg(va1, void **);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  v17 = va_arg(va1, _QWORD);
  sub_1B0346940((void ***)va);
  sub_1B03463D4((void **)va1);
  _Unwind_Resume(a1);
}

void sub_1B03461F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, void *a16, char a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25)
{
  void *v25;
  uint64_t v26;

  sub_1B03468C8(v26 - 128);

  sub_1B03463D4(&a24);
  _Unwind_Resume(a1);
}

void **sub_1B03463D4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (const void *)*((_QWORD *)v3 - 3);
        if (v5)
        {
          CFRelease(v5);
          *((_QWORD *)v3 - 3) = 0;
        }
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

const void **sub_1B0346448(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void **sub_1B0346478(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (const void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          CFRelease(v5);
          *((_QWORD *)v3 - 5) = 0;
        }
        v6 = (void *)*((_QWORD *)v3 - 3);
        if (v6)
        {
          *((_QWORD *)v3 - 2) = v6;
          operator delete(v6);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t CVNLPBeamSearchCopyTopBeams(uint64_t a1)
{
  const char *v1;
  uint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  char *v8;
  char *v9;
  const __CFArray *v10;
  double v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  void *v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  CFArrayRef v29;
  void *__p[3];
  void *v31;
  char *v32;
  uint64_t v33;
  _QWORD v34[2];
  _QWORD v35[3];

  v35[2] = *MEMORY[0x1E0C80C00];
  v31 = 0;
  v32 = 0;
  v33 = 0;
  sub_1B035C854((uint64_t)&v31, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 80) - *(_QWORD *)(a1 + 72)) >> 4));
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v1, v2, v3);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = (char *)v31;
  v9 = v32;
  if (v31 != v32)
  {
    do
    {
      sub_1B0380A9C((uint64_t)v8, (char **)__p);
      v29 = sub_1B03469D8((uint64_t **)__p);
      v34[0] = CVNLPBeamTokens;
      v10 = v29;
      v34[1] = CVNLPBeamScore;
      v35[0] = v10;
      LODWORD(v11) = *((_DWORD *)v8 + 1);
      objc_msgSend_numberWithFloat_(MEMORY[0x1E0CB37E8], v12, v13, v14, v11, v29);
      v15 = (void *)objc_claimAutoreleasedReturnValue();
      v35[1] = v15;
      objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v16, (uint64_t)v35, (uint64_t)v34, 2);
      v17 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v7, v18, (uint64_t)v17, v19);

      if (v10)
        CFRelease(v10);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      v8 += 48;
    }
    while (v8 != v9);
  }
  v20 = objc_msgSend_copy(v7, v4, v5, v6);

  v21 = (char *)v31;
  if (v31)
  {
    v22 = v32;
    v23 = v31;
    if (v32 != v31)
    {
      do
      {
        v25 = (const void *)*((_QWORD *)v22 - 2);
        if (v25)
        {
          CFRelease(v25);
          *((_QWORD *)v22 - 2) = 0;
        }
        v26 = *((_QWORD *)v22 - 5);
        if (v26)
        {
          v27 = *((_QWORD *)v22 - 4);
          v24 = (void *)*((_QWORD *)v22 - 5);
          if (v27 != v26)
          {
            do
            {
              if (*(char *)(v27 - 1) < 0)
                operator delete(*(void **)(v27 - 24));
              v27 -= 40;
            }
            while (v27 != v26);
            v24 = (void *)*((_QWORD *)v22 - 5);
          }
          *((_QWORD *)v22 - 4) = v26;
          operator delete(v24);
        }
        v22 -= 48;
      }
      while (v22 != v21);
      v23 = v31;
    }
    v32 = v21;
    operator delete(v23);
  }
  return v20;
}

void sub_1B0346714(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13)
{
  void *v13;

  sub_1B03467A8(&a13);
  _Unwind_Resume(a1);
}

void **sub_1B03467A8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
        {
          CFRelease(v6);
          *((_QWORD *)v3 - 2) = 0;
        }
        v7 = *((_QWORD *)v3 - 5);
        if (v7)
        {
          v8 = *((_QWORD *)v3 - 4);
          v5 = (void *)*((_QWORD *)v3 - 5);
          if (v8 != v7)
          {
            do
            {
              if (*(char *)(v8 - 1) < 0)
                operator delete(*(void **)(v8 - 24));
              v8 -= 40;
            }
            while (v8 != v7);
            v5 = (void *)*((_QWORD *)v3 - 5);
          }
          *((_QWORD *)v3 - 4) = v7;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void CVNLPBeamSearchReset(uint64_t a1)
{
  sub_1B035BD2C((_QWORD *)(a1 + 16));
}

uint64_t sub_1B0346870()
{
  uint64_t result;

  qword_1ED5378F8 = 0;
  qword_1ED537900 = (uint64_t)"CVNLPBeamSearch";
  unk_1ED537908 = 0;
  qword_1ED537910 = 0;
  unk_1ED537918 = sub_1B03468C0;
  xmmword_1ED537920 = 0u;
  unk_1ED537930 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED5378F0 = result;
  return result;
}

uint64_t sub_1B03468C0(uint64_t a1)
{
  return sub_1B0359BAC(a1 + 16);
}

uint64_t sub_1B03468C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  const void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    while (1)
    {
      v4 = i - 32;
      *(_QWORD *)(a1 + 16) = i - 32;
      v5 = *(const void **)(i - 24);
      if (v5)
        break;
      i -= 32;
      if (v4 == v2)
        goto LABEL_6;
    }
    CFRelease(v5);
    *(_QWORD *)(i - 24) = 0;
  }
LABEL_6:
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void ***sub_1B0346940(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  const void *v6;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v6 = (const void *)*((_QWORD *)v4 - 3);
          if (v6)
          {
            CFRelease(v6);
            *((_QWORD *)v4 - 3) = 0;
          }
          v4 -= 32;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

CFArrayRef sub_1B03469D8(uint64_t **a1)
{
  unint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  CFNumberRef *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  CFNumberRef *v11;
  CFNumberRef *v12;
  CFNumberRef *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  CFNumberRef *v20;
  CFNumberRef *v21;
  uint64_t v22;
  __int128 v23;
  const __CFNumber *v24;
  CFNumberRef *v25;
  const void *v26;
  const void *v27;
  CFArrayRef v28;
  CFNumberRef *v29;
  CFNumberRef *v30;
  void *v31;
  const void *v32;
  const void *v33;
  void *__p;
  CFNumberRef *v36;
  _QWORD v37[2];
  CFNumberRef *v38;
  CFNumberRef *v39;
  char *v40;
  _QWORD *v41;

  v2 = a1[1] - *a1;
  __p = 0;
  v36 = 0;
  v37[0] = 0;
  sub_1B0346CC4((uint64_t)&__p, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = v36;
    do
    {
      v6 = *v3;
      if ((unint64_t)v5 < v37[0])
      {
        sub_1B0347074(v5++, *v3);
      }
      else
      {
        v7 = ((char *)v5 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v7 + 1) >> 61)
          sub_1B02D7758();
        v8 = (uint64_t)(v37[0] - (_QWORD)__p) >> 2;
        if (v8 <= v7 + 1)
          v8 = v7 + 1;
        if (v37[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF8uLL)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v8;
        v41 = v37;
        if (v9)
        {
          if (v9 >> 61)
            sub_1B02D72AC();
          v10 = (char *)operator new(8 * v9);
        }
        else
        {
          v10 = 0;
        }
        v37[1] = v10;
        v38 = (CFNumberRef *)&v10[8 * v7];
        v39 = v38;
        v40 = &v10[8 * v9];
        sub_1B0347074(v38, v6);
        v11 = v38;
        v5 = v39 + 1;
        v12 = (CFNumberRef *)__p;
        v13 = v36;
        if (v36 == __p)
        {
          __p = v38;
          v36 = v39 + 1;
          v37[0] = v40;
        }
        else
        {
          v14 = (char *)v36 - (_BYTE *)__p - 8;
          if (v14 < 0x48)
            goto LABEL_23;
          v15 = ((char *)(v36 - 1) - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF8;
          if ((CFNumberRef *)((char *)v38 - v15 - 8) < v36 && (CFNumberRef *)((char *)v36 - v15 - 8) < v38)
            goto LABEL_23;
          v16 = (v14 >> 3) + 1;
          v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
          v18 = &v38[v17 / 0xFFFFFFFFFFFFFFF8];
          v19 = &v36[v17 / 0xFFFFFFFFFFFFFFF8];
          v20 = v36 - 2;
          v21 = v38 - 2;
          v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v23 = *(_OWORD *)v20;
            *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
            *(_OWORD *)v21 = v23;
            *((_OWORD *)v20 - 1) = 0uLL;
            *(_OWORD *)v20 = 0uLL;
            v20 -= 4;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          v11 = v18;
          v13 = v19;
          if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_23:
            v18 = v11;
            do
            {
              v24 = *--v13;
              *--v18 = v24;
              *v13 = 0;
            }
            while (v13 != v12);
          }
          v13 = (CFNumberRef *)__p;
          v25 = v36;
          __p = v18;
          v36 = v5;
          v37[0] = v40;
          while (v25 != v13)
          {
            v27 = *--v25;
            v26 = v27;
            if (v27)
              CFRelease(v26);
          }
        }
        if (v13)
          operator delete(v13);
      }
      v36 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v28 = sub_1B0346E24((char **)&__p);
  v29 = (CFNumberRef *)__p;
  if (__p)
  {
    v30 = v36;
    v31 = __p;
    if (v36 != __p)
    {
      do
      {
        v33 = *--v30;
        v32 = v33;
        if (v33)
          CFRelease(v32);
      }
      while (v30 != v29);
      v31 = __p;
    }
    v36 = v29;
    operator delete(v31);
  }
  return v28;
}

void sub_1B0346C4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0346C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0346C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_1B0347020((uint64_t)&a12);
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0346C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0346CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0346CC4(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char *v22;
  const void *v23;
  const void *v24;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3)
    return;
  if (a2 >> 61)
    sub_1B02D7758();
  v4 = *(char **)(a1 + 8);
  v5 = 8 * a2;
  v6 = (char *)operator new(8 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  if (v4 == v2)
  {
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  v10 = v8 - 8;
  if ((unint64_t)(v8 - 8) >= 0x78)
  {
    v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF8) - (v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v4
       || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF8) - 8] >= v9;
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
    if (v12)
    {
      v13 = v8 >> 3;
      v14 = (v10 >> 3) + 1;
      v15 = 8 * (v14 & 0x3FFFFFFFFFFFFFFCLL);
      v11 = (char *)(v9 - v15);
      v16 = &v4[-v15];
      v17 = v4 - 16;
      v18 = &v6[8 * v13 - 16];
      v19 = v14 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v20 = *(_OWORD *)v17;
        *((_OWORD *)v18 - 1) = *((_OWORD *)v17 - 1);
        *(_OWORD *)v18 = v20;
        *((_OWORD *)v17 - 1) = 0uLL;
        *(_OWORD *)v17 = 0uLL;
        v17 -= 32;
        v18 -= 32;
        v19 -= 4;
      }
      while (v19);
      v4 = v16;
      if (v14 == (v14 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_19;
    }
  }
  else
  {
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF8];
  }
  do
  {
    v21 = *((_QWORD *)v4 - 1);
    v4 -= 8;
    *((_QWORD *)v11 - 1) = v21;
    v11 -= 8;
    *(_QWORD *)v4 = 0;
  }
  while (v4 != v2);
LABEL_19:
  v2 = *(char **)a1;
  v22 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  while (v22 != v2)
  {
    v24 = (const void *)*((_QWORD *)v22 - 1);
    v22 -= 8;
    v23 = v24;
    if (v24)
      CFRelease(v23);
  }
LABEL_7:
  if (v2)
    operator delete(v2);
}

CFArrayRef sub_1B0346E24(char **a1)
{
  char *v1;
  char *v2;
  unint64_t v3;
  _OWORD *v4;
  char *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  CFArrayRef v15;
  std::runtime_error *exception;

  v2 = *a1;
  v1 = a1[1];
  v3 = v1 - *a1;
  if (v1 == *a1)
  {
    v4 = 0;
    v5 = 0;
    goto LABEL_12;
  }
  if ((v3 & 0x8000000000000000) != 0)
    sub_1B02D7758();
  v4 = operator new(v1 - v2);
  bzero(v4, v1 - v2);
  v5 = (char *)v4 + v3;
  if (v3 - 8 < 0x18)
  {
    v6 = v4;
    do
    {
LABEL_11:
      v14 = *(_QWORD *)v2;
      v2 += 8;
      *v6++ = v14;
    }
    while (v2 != v1);
    goto LABEL_12;
  }
  v6 = v4;
  if ((unint64_t)((char *)v4 - v2) < 0x20)
    goto LABEL_11;
  v7 = ((v3 - 8) >> 3) + 1;
  v8 = 8 * (v7 & 0x3FFFFFFFFFFFFFFCLL);
  v6 = (_QWORD *)((char *)v4 + v8);
  v9 = &v2[v8];
  v10 = (__int128 *)(v2 + 16);
  v11 = v4 + 1;
  v12 = v7 & 0x3FFFFFFFFFFFFFFCLL;
  do
  {
    v13 = *v10;
    *(v11 - 1) = *(v10 - 1);
    *v11 = v13;
    v10 += 2;
    v11 += 2;
    v12 -= 4;
  }
  while (v12);
  v2 = v9;
  if (v7 != (v7 & 0x3FFFFFFFFFFFFFFCLL))
    goto LABEL_11;
LABEL_12:
  v15 = CFArrayCreate(0, (const void **)v4, (v5 - (char *)v4) >> 3, MEMORY[0x1E0C9B378]);
  if (!v15)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v4)
    operator delete(v4);
  return v15;
}

void sub_1B0346F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  void *v11;
  void *v12;

  __cxa_free_exception(v12);
  if (v11)
    operator delete(v11);
  _Unwind_Resume(a1);
}

void **sub_1B0346FB4(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B0347020(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(const void **)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      CFRelease(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CFNumberRef sub_1B0347074(CFNumberRef *a1, uint64_t a2)
{
  CFNumberRef result;
  std::runtime_error *exception;
  uint64_t valuePtr;

  valuePtr = a2;
  result = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  *a1 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B03470F0(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

void sub_1B0347228(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B0347258(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B034731C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0347334(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0347400(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0347544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0347A4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  va_list va;

  va_start(va, a2);
  sub_1B031724C((void **)va);

  _Unwind_Resume(a1);
}

void sub_1B0347B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionEncoderLSTM;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B0347CA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0347F68(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0347F7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0347F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 136);
  if (!v33)
    _Unwind_Resume(exception_object);
  *(_QWORD *)(v31 - 128) = v33;
  operator delete(v33);
  _Unwind_Resume(exception_object);
}

void sub_1B034805C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03487F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  _QWORD *v52;
  uint64_t v53;
  void *v56;
  void *v57;
  void *v58;
  NSObject *v59;

  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v53 - 129) < 0)
    operator delete(*(void **)(v53 - 152));
  if (a2 == 4)
  {
    v56 = __cxa_begin_catch(a1);
    if (v52)
    {
      sub_1B0349860((uint64_t)v56);
      *v52 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    v57 = __cxa_begin_catch(a1);
    if (v52)
    {
      sub_1B03497FC((uint64_t)v57);
      *v52 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v58 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      sub_1B0317CEC(4);
      v59 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)(v53 - 160) = 0;
        _os_log_impl(&dword_1B02D2000, v59, OS_LOG_TYPE_ERROR, "Unknown error encountered during initWithOptions.", (uint8_t *)(v53 - 160), 2u);
      }

      __cxa_end_catch();
LABEL_20:
      JUMPOUT(0x1B0348768);
    }
    if (v52)
    {
      sub_1B0349798((uint64_t)v58);
      *v52 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_20;
}

void sub_1B0348B54(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B0348B9C(const __CFURL **a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFURL *v2;
  CFStringRef v4;
  std::runtime_error *exception;
  std::runtime_error *v6;
  CFTypeRef cf;
  CFTypeRef *p_cf;

  v2 = *a1;
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034AC20(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v4 = CFURLCopyFileSystemPath(v2, kCFURLPOSIXPathStyle);
  sub_1B034AC30(&cf, v4);
  if (!cf)
  {
    v6 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v6, "Could not construct");
    __cxa_throw(v6, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  p_cf = &cf;
  sub_1B034AB60((const __CFString ***)&p_cf, a2);
  if (cf)
    CFRelease(cf);
}

void sub_1B0348C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_1B034ABF0(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0348C80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0348C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  sub_1B034ABF0(&a9);
  _Unwind_Resume(a1);
}

const void **sub_1B0348CAC(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

void sub_1B0348CDC(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  void **p_src;
  size_t v17;
  void *p_dst;
  const UInt8 *v19;
  CFIndex v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  CFStringRef v24;
  void *v25;
  const char *v26;
  __CFString *v27;
  __CFString *v28;
  uint64_t v29;
  uint64_t v30;
  std::runtime_error *exception;
  void *__dst;
  size_t v33;
  int64_t v34;
  CFStringRef v35;
  void **__src;
  unint64_t v37;
  unsigned __int8 v38;
  uint64_t v39;
  uint64_t v40[8];
  __int128 __p;
  __int128 v42;
  int v43;
  uint64_t v44[20];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v44[0] = MEMORY[0x1E0DE4FE0] + 64;
  v39 = v7;
  *(uint64_t *)((char *)&v40[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24));
  std::ios_base::init(v9, v40);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v39 = v4 + 24;
  v44[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v40[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v42 = 0u;
  v43 = 16;
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  v14 = sub_1B02D7994(&v39, v12, v13);
  sub_1B02D7994(v14, (uint64_t)"/", 1);
  v15 = sub_1B02D7994(&v39, (uint64_t)"CLIP", 4);
  sub_1B02D7994(v15, (uint64_t)"/", 1);
  std::stringbuf::str();
  if (((char)v38 & 0x80000000) == 0)
  {
    p_src = (void **)&__src;
    if (v38 >= (unint64_t)v38 - 1)
      v17 = v38 - 1;
    else
      v17 = v38;
    if (v17 < 0x7FFFFFFFFFFFFFF8)
      goto LABEL_12;
LABEL_38:
    sub_1B02D78C4();
  }
  p_src = __src;
  if (v37 >= v37 - 1)
    v17 = v37 - 1;
  else
    v17 = v37;
  if (v17 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_38;
LABEL_12:
  if (v17 >= 0x17)
  {
    v29 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v29 = v17 | 7;
    v30 = v29 + 1;
    p_dst = operator new(v29 + 1);
    v33 = v17;
    v34 = v30 | 0x8000000000000000;
    __dst = p_dst;
LABEL_32:
    memmove(p_dst, p_src, v17);
    *((_BYTE *)p_dst + v17) = 0;
    if (((char)v38 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_33;
  }
  HIBYTE(v34) = v17;
  p_dst = &__dst;
  if (v17)
    goto LABEL_32;
  LOBYTE(__dst) = 0;
  if (((char)v38 & 0x80000000) == 0)
    goto LABEL_15;
LABEL_33:
  operator delete(__src);
LABEL_15:
  v39 = *v6;
  *(uint64_t *)((char *)&v40[-1] + *(_QWORD *)(v39 - 24)) = v6[3];
  v40[0] = v10 + 16;
  if (SBYTE7(v42) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v44);
  if (v34 >= 0)
    v19 = (const UInt8 *)&__dst;
  else
    v19 = (const UInt8 *)__dst;
  if (v34 >= 0)
    v20 = HIBYTE(v34);
  else
    v20 = v33;
  v24 = CFStringCreateWithBytes(0, v19, v20, 0x8000100u, 0);
  v35 = v24;
  if (!v24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v34) < 0)
    operator delete(__dst);
  objc_msgSend_createBundle(*(void **)(a2 + 24), v21, v22, v23);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathForResource_ofType_(v25, v26, (uint64_t)v24, 0);
  v27 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v28 = v27;
  if (!v27)
    v27 = &stru_1E60CE768;
  sub_1B0349558(v27, a1);

  CFRelease(v24);
}

void sub_1B0348FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B034909C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_1B02E983C((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_1B02E983C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03490D4(uint64_t a1)
{

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B034911C(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  char *v6;
  _BYTE *v7;
  int v8;
  std::string v9;
  std::__fs::filesystem::path v10;
  std::__fs::filesystem::path __p;

  memset(&v9, 0, sizeof(v9));
  v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) == 0)
    v6 = (char *)a3;
  else
    v6 = *(char **)a3;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a3 + 8);
  sub_1B02ECD44(&v9, v6, &v6[v5]);
  sub_1B032692C((std::__fs::filesystem::path *)&v9, a2 + 8, &v10);
  if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&__p, v10.__pn_.__r_.__value_.__l.__data_, v10.__pn_.__r_.__value_.__l.__size_);
  else
    __p = v10;
  v7 = a1 + 1;
  if (SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1B02EB0A8(v7, __p.__pn_.__r_.__value_.__l.__data_, __p.__pn_.__r_.__value_.__l.__size_);
    v8 = SHIBYTE(__p.__pn_.__r_.__value_.__r.__words[2]);
    *a1 = &unk_1E60CCEF8;
    if (v8 < 0)
    {
      operator delete(__p.__pn_.__r_.__value_.__l.__data_);
      *a1 = &unk_1E60CCF80;
      if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_17;
    }
    else
    {
      *a1 = &unk_1E60CCF80;
      if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_17;
    }
  }
  else
  {
    *(_OWORD *)v7 = *(_OWORD *)&__p.__pn_.__r_.__value_.__l.__data_;
    a1[3] = *((_QWORD *)&__p.__pn_.__r_.__value_.__l + 2);
    *a1 = &unk_1E60CCEF8;
    *a1 = &unk_1E60CCF80;
    if (SHIBYTE(v10.__pn_.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_17:
      operator delete(v10.__pn_.__r_.__value_.__l.__data_);
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_18;
      return;
    }
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
LABEL_18:
    operator delete(v9.__r_.__value_.__l.__data_);
}

void sub_1B0349278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
  {
    operator delete(a21);
    if ((a20 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a14 & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else if ((a20 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a15);
  if ((a14 & 0x80000000) == 0)
LABEL_5:
    _Unwind_Resume(exception_object);
LABEL_4:
  operator delete(__p);
  goto LABEL_5;
}

void sub_1B03492D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((a14 & 0x80000000) == 0)
    JUMPOUT(0x1B034929CLL);
  JUMPOUT(0x1B0349294);
}

uint64_t sub_1B03492EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  const char *v17;
  uint64_t v19;
  uint64_t v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v7;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v9, v20);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v19 = v4 + 24;
  v24[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  sub_1B02D7994(&v19, (uint64_t)"[InvalidArgument] ", 18);
  sub_1B02D7994(&v19, (uint64_t)"Invalid model directory: ", 25);
  v13 = *(_BYTE **)(a2 + 8);
  v12 = a2 + 8;
  v11 = v13;
  v14 = *(char *)(v12 + 23);
  if (v14 >= 0)
    v15 = (_BYTE *)v12;
  else
    v15 = v11;
  if (v14 >= 0)
    v16 = *(unsigned __int8 *)(v12 + 23);
  else
    v16 = *(_QWORD *)(v12 + 8);
  sub_1B02ECBE8(&v19, v15, &v15[v16], 0x22u, 0x5Cu);
  std::stringbuf::str();
  v19 = *v6;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v6[3];
  v20[0] = v10 + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v24);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  v17 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v17 = *(const char **)(a1 + 16);
  std::logic_error::logic_error((std::logic_error *)a1, v17);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  return a1;
}

void sub_1B03494A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B0349500(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0349514(uint64_t a1)
{
  if (*(char *)(MEMORY[0x1B5E0799C]() + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_1B0349558(void *a1@<X0>, _QWORD *a2@<X8>)
{
  id v3;
  void *v4;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef *p_cf;

  v3 = a1;
  v4 = v3;
  if (v3)
    CFRetain(v3);
  sub_1B034AC30(&cf, v4);

  if (!cf)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  p_cf = &cf;
  sub_1B034AB60((const __CFString ***)&p_cf, a2);
  if (cf)
    CFRelease(cf);

}

void sub_1B034960C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  void *v9;
  void *v10;

  __cxa_free_exception(v10);
  sub_1B034ABF0(&a9);

  _Unwind_Resume(a1);
}

void sub_1B0349634(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0349648(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  void *v9;

  sub_1B034ABF0(&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1B0349660(uint64_t a1)
{
  int v1;
  BOOL v3;
  unsigned __int16 *v4;
  int v5;
  int v6;
  void *exception;

  v1 = *(char *)(a1 + 23);
  if (v1 < 0)
  {
    if (*(_QWORD *)(a1 + 8) != 3)
      goto LABEL_29;
    v4 = *(unsigned __int16 **)a1;
    if (**(_WORD **)a1 != 20547 || *(_BYTE *)(*(_QWORD *)a1 + 2) != 85)
    {
      if (*v4 != 20551 || *((_BYTE *)v4 + 2) != 85)
        goto LABEL_11;
      return 0x100000005;
    }
    return 0x100000000;
  }
  if (v1 != 3)
    goto LABEL_29;
  if (*(_WORD *)a1 == 20547 && *(_BYTE *)(a1 + 2) == 85)
    return 0x100000000;
  v3 = *(_WORD *)a1 == 20551 && *(_BYTE *)(a1 + 2) == 85;
  v4 = (unsigned __int16 *)a1;
  if (v3)
    return 0x100000005;
LABEL_11:
  v5 = *v4;
  v6 = *((unsigned __int8 *)v4 + 2);
  if (v5 != 20033 || v6 != 69)
  {
LABEL_29:
    exception = __cxa_allocate_exception(0x28uLL);
    sub_1B034AF74((uint64_t)exception, "Unrecognized value for engine=", a1);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB170, (void (*)(void *))sub_1B0349514);
  }
  return 0x100002717;
}

void sub_1B0349784(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

id sub_1B0349798(uint64_t a1)
{
  void *v1;
  const char *v2;
  void *v3;

  sub_1B034BA24(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v2, (uint64_t)off_1EEEB1C78, 5, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B03497EC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1B03497FC(uint64_t a1)
{
  void *v1;
  const char *v2;
  void *v3;

  sub_1B034BA24(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v2, (uint64_t)off_1EEEB1C78, 3, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B0349850(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1B0349860(uint64_t a1)
{
  void *v1;
  const char *v2;
  void *v3;

  sub_1B034BA24(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v2, (uint64_t)off_1EEEB1C78, 4, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B03498B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0349D3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, __int16 buf, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  _QWORD *v22;
  void *v23;
  void *v26;
  void *v27;
  void *v28;
  NSObject *v29;

  if (!a2)
    _Unwind_Resume(exception_object);
  _Block_object_dispose(&buf, 8);

  if (a2 == 4)
  {
    v26 = __cxa_begin_catch(exception_object);
    if (v22)
    {
      sub_1B0349860((uint64_t)v26);
      *v22 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    v27 = __cxa_begin_catch(exception_object);
    if (v22)
    {
      sub_1B03497FC((uint64_t)v27);
      *v22 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v28 = __cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      sub_1B0317CEC(4);
      v29 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
      {
        buf = 0;
        _os_log_impl(&dword_1B02D2000, v29, OS_LOG_TYPE_ERROR, "Unknown error encountered during encodeImage.", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
LABEL_17:
      if (*MEMORY[0x1E0C80C00] != a22)
        JUMPOUT(0x1B0349A90);
      JUMPOUT(0x1B0349CC8);
    }
    if (v22)
    {
      sub_1B0349798((uint64_t)v28);
      *v22 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_17;
}

void sub_1B034A220(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t buf)
{
  _QWORD *v18;
  void *v19;
  void *v22;
  void *v23;
  void *v24;
  NSObject *v25;

  __cxa_free_exception(v19);
  sub_1B0325B14(&buf);
  if (a2 == 4)
  {
    v22 = __cxa_begin_catch(a1);
    if (v18)
    {
      sub_1B0349860((uint64_t)v22);
      *v18 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    v23 = __cxa_begin_catch(a1);
    if (v18)
    {
      sub_1B03497FC((uint64_t)v23);
      *v18 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v24 = __cxa_begin_catch(a1);
    if (a2 != 2)
    {
      sub_1B0317CEC(4);
      v25 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B02D2000, v25, OS_LOG_TYPE_ERROR, "Unknown Error encountered during encodeText.", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
LABEL_16:
      JUMPOUT(0x1B034A1BCLL);
    }
    if (v18)
    {
      sub_1B0349798((uint64_t)v24);
      *v18 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_16;
}

void sub_1B034A368(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B034A864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _QWORD *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t buf, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32)
{
  void *v32;
  void *v35;
  void *v36;
  void *v37;
  NSObject *v38;

  if (!a2)
    _Unwind_Resume(exception_object);
  __cxa_free_exception(v32);
  sub_1B0325B14(&a32);
  sub_1B031724C(&a14);
  if (a2 == 4)
  {
    v35 = __cxa_begin_catch(exception_object);
    if (a9)
    {
      sub_1B0349860((uint64_t)v35);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else if (a2 == 3)
  {
    v36 = __cxa_begin_catch(exception_object);
    if (a9)
    {
      sub_1B03497FC((uint64_t)v36);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  else
  {
    v37 = __cxa_begin_catch(exception_object);
    if (a2 != 2)
    {
      sub_1B0317CEC(4);
      v38 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        _os_log_impl(&dword_1B02D2000, v38, OS_LOG_TYPE_ERROR, "Unknown Error encountered during encodeText.", (uint8_t *)&buf, 2u);
      }

      __cxa_end_catch();
LABEL_18:
      JUMPOUT(0x1B034A7C8);
    }
    if (a9)
    {
      sub_1B0349798((uint64_t)v37);
      *a9 = (id)objc_claimAutoreleasedReturnValue();
    }
  }
  __cxa_end_catch();
  goto LABEL_18;
}

unint64_t sub_1B034AB60@<X0>(const __CFString ***a1@<X0>, _QWORD *a2@<X8>)
{
  const __CFString *v3;
  CFTypeID TypeID;
  std::runtime_error *exception;

  v3 = **a1;
  if (!v3 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v3)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_1B034ACEC(v3, a2);
}

void sub_1B034ABDC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

const void **sub_1B034ABF0(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

std::runtime_error *sub_1B034AC20@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not construct");
}

_QWORD *sub_1B034AC30(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFStringGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_1B034ACAC(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1B034ACDC@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not convert");
}

unint64_t sub_1B034ACEC@<X0>(const __CFString *a1@<X0>, _QWORD *a2@<X8>)
{
  const char *CStringPtr;
  const char *v5;
  unint64_t result;
  size_t v7;
  CFIndex Length;
  size_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  CFIndex v14;
  CFIndex v15;
  UInt8 *v16;
  CFIndex maxBufLen;
  CFRange v18;
  CFRange v19;

  CStringPtr = CFStringGetCStringPtr(a1, 0x8000100u);
  if (CStringPtr)
  {
    v5 = CStringPtr;
    result = strlen(CStringPtr);
    if (result <= 0x7FFFFFFFFFFFFFF7)
    {
      v7 = result;
      if (result >= 0x17)
      {
        v11 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((result | 7) != 0x17)
          v11 = result | 7;
        v12 = v11 + 1;
        v13 = operator new(v11 + 1);
        a2[1] = v7;
        a2[2] = v12 | 0x8000000000000000;
        *a2 = v13;
        a2 = v13;
      }
      else
      {
        *((_BYTE *)a2 + 23) = result;
        if (!result)
          goto LABEL_14;
      }
      result = (unint64_t)memmove(a2, v5, v7);
LABEL_14:
      *((_BYTE *)a2 + v7) = 0;
      return result;
    }
LABEL_23:
    sub_1B02D78C4();
  }
  Length = CFStringGetLength(a1);
  maxBufLen = 0;
  v18.location = 0;
  v18.length = Length;
  CFStringGetBytes(a1, v18, 0x8000100u, 0, 0, 0, 0, &maxBufLen);
  v9 = maxBufLen;
  if ((unint64_t)maxBufLen > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_23;
  if ((unint64_t)maxBufLen >= 0x17)
  {
    v14 = (maxBufLen & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((maxBufLen | 7) != 0x17)
      v14 = maxBufLen | 7;
    v15 = v14 + 1;
    v10 = operator new(v14 + 1);
    a2[1] = v9;
    a2[2] = v15 | 0x8000000000000000;
    *a2 = v10;
  }
  else
  {
    *((_BYTE *)a2 + 23) = maxBufLen;
    v10 = a2;
    if (!v9)
      goto LABEL_19;
  }
  bzero(v10, v9);
LABEL_19:
  *((_BYTE *)v10 + v9) = 0;
  if (*((char *)a2 + 23) >= 0)
    v16 = (UInt8 *)a2;
  else
    v16 = (UInt8 *)*a2;
  v19.location = 0;
  v19.length = Length;
  return CFStringGetBytes(a1, v19, 0x8000100u, 0, 0, v16, maxBufLen, &maxBufLen);
}

void sub_1B034AEAC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B034AEC8(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFURLGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_1B034AF44(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B034AF74(uint64_t a1, const char *a2, uint64_t a3)
{
  const char **v4;
  const char *v5;

  v4 = (const char **)(a1 + 16);
  sub_1B034B040("[InvalidArgument] ", a2, a3);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  v5 = (const char *)v4;
  if (*(char *)(a1 + 39) < 0)
    v5 = *v4;
  std::logic_error::logic_error((std::logic_error *)a1, v5);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  return a1;
}

void sub_1B034AFE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void sub_1B034AFFC(uint64_t a1)
{
  if (*(char *)(MEMORY[0x1B5E0799C]() + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B034B040(const char *a1, const char *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  size_t v13;
  size_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20[8];
  void *__p[2];
  __int128 v22;
  int v23;
  uint64_t v24[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v24[0] = MEMORY[0x1E0DE4FE0] + 64;
  v19 = v9;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24));
  std::ios_base::init(v11, v20);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v19 = v6 + 24;
  v24[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v20[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v23 = 16;
  v13 = strlen(a1);
  sub_1B02D7994(&v19, (uint64_t)a1, v13);
  v14 = strlen(a2);
  sub_1B02D7994(&v19, (uint64_t)a2, v14);
  v15 = *(char *)(a3 + 23);
  if (v15 >= 0)
    v16 = a3;
  else
    v16 = *(_QWORD *)a3;
  if (v15 >= 0)
    v17 = *(unsigned __int8 *)(a3 + 23);
  else
    v17 = *(_QWORD *)(a3 + 8);
  sub_1B02D7994(&v19, v16, v17);
  std::stringbuf::str();
  v19 = *v8;
  *(uint64_t *)((char *)&v20[-1] + *(_QWORD *)(v19 - 24)) = v8[3];
  v20[0] = v12 + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v24);
}

void sub_1B034B1C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02E983C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B034B1DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B034B224()
{
  uint64_t result;

  result = MGGetBoolAnswer();
  byte_1ED537958 = result;
  return result;
}

Class sub_1B034B248(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ED537970)
  {
    qword_1ED537970 = _sl_dlopen();
    if (!qword_1ED537970)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VNCreateSceneprintRequest");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ED537968 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1B034B34C(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ED537970)
  {
    qword_1ED537970 = _sl_dlopen();
    if (!qword_1ED537970)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VNImageRequestHandler");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ED537978 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B034B450(uint64_t a1, uint64_t a2)
{
  char *v3;
  char *v4;
  void *__p[2];
  uint64_t v7;

  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    v7 = *(_QWORD *)(a2 + 16);
  }
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v3 = (char *)HIBYTE(v7);
  if (v7 >= 0)
    v4 = (char *)__p;
  else
    v4 = (char *)__p[0];
  if (v7 < 0)
    v3 = (char *)__p[1];
  sub_1B02ECD44((std::string *)(a1 + 8), v4, &v3[(_QWORD)v4]);
  *(_QWORD *)a1 = &unk_1E60CCEF8;
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  *(_QWORD *)a1 = &unk_1E60CCF80;
  return a1;
}

void sub_1B034B510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;

  if (*(char *)(v14 + 31) < 0)
  {
    operator delete(*v15);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B034B54C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD738;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B034B55C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD738;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t **sub_1B034B58C(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  sub_1B034B69C(a1 + 120);
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 63) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_9:
      operator delete(*(void **)(a1 + 40));
      v2 = *(uint64_t **)(a1 + 32);
      *(_QWORD *)(a1 + 32) = 0;
      if (!v2)
        return sub_1B034B8C0((uint64_t **)(a1 + 24), 0);
      goto LABEL_10;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    goto LABEL_9;
LABEL_4:
  v2 = *(uint64_t **)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0;
  if (!v2)
    return sub_1B034B8C0((uint64_t **)(a1 + 24), 0);
LABEL_10:
  sub_1B034B69C((uint64_t)(v2 + 3));
  v3 = (uint64_t *)v2[2];
  v2[2] = 0;
  if (v3)
  {
    v4 = sub_1B034B7C0(v3);
    MEMORY[0x1B5E07CD8](v4, 0x10B0C4005063E60);
  }
  v5 = v2[1];
  v2[1] = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *v2;
  *v2 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  MEMORY[0x1B5E07CD8](v2, 0x1032C4086C30B0ALL);
  return sub_1B034B8C0((uint64_t **)(a1 + 24), 0);
}

uint64_t sub_1B034B69C(uint64_t a1)
{
  void **v2;
  void **v4;
  void *v5;

  if (*(char *)(a1 + 167) < 0)
  {
    operator delete(*(void **)(a1 + 144));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = *(void ***)(a1 + 48);
    if (!v2)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  v2 = *(void ***)(a1 + 48);
  if (!v2)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_20:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_21;
  }
LABEL_13:
  v4 = *(void ***)(a1 + 56);
  if (v4 == v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
    if (*(char *)(a1 + 47) < 0)
      goto LABEL_20;
  }
  else
  {
    do
    {
      if (*((char *)v4 - 1) < 0)
        operator delete(*(v4 - 3));
      v4 -= 3;
    }
    while (v4 != v2);
    v5 = *(void **)(a1 + 48);
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v5);
    if (*(char *)(a1 + 47) < 0)
      goto LABEL_20;
  }
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_21:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t *sub_1B034B7C0(uint64_t *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;

  a1[9] = (uint64_t)&unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[15];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[11];
      if (!v5)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[11];
  if (v5)
  {
LABEL_6:
    a1[12] = (uint64_t)v5;
    operator delete(v5);
  }
LABEL_7:
  a1[2] = (uint64_t)&unk_1E60CCA78;
  v6 = (std::__shared_weak_count *)a1[8];
  if (!v6)
    goto LABEL_11;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
  {
LABEL_11:
    v9 = (void *)a1[4];
    if (!v9)
      goto LABEL_13;
    goto LABEL_12;
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  v9 = (void *)a1[4];
  if (v9)
  {
LABEL_12:
    a1[5] = (uint64_t)v9;
    operator delete(v9);
  }
LABEL_13:
  v10 = *a1;
  *a1 = 0;
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return a1;
}

uint64_t **sub_1B034B8C0(uint64_t **result, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    if (*((char *)v2 + 63) < 0)
    {
      operator delete((void *)v2[5]);
      if ((*((char *)v2 + 39) & 0x80000000) == 0)
      {
LABEL_4:
        v3 = v2[1];
        v2[1] = 0;
        if (!v3)
          goto LABEL_6;
        goto LABEL_5;
      }
    }
    else if ((*((char *)v2 + 39) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete((void *)v2[2]);
    v3 = v2[1];
    v2[1] = 0;
    if (!v3)
    {
LABEL_6:
      v5 = *v2;
      *v2 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      JUMPOUT(0x1B5E07CD8);
    }
LABEL_5:
    v4 = sub_1B034B978(v3);
    MEMORY[0x1B5E07CD8](v4, 0x10B0C409CF98BECLL);
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_1B034B978(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;
  CFTypeRef *v6;

  *(_QWORD *)(a1 + 8) = &unk_1E60CCA78;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(_QWORD *)(a1 + 32) = v5;
    operator delete(v5);
  }
  v6 = *(CFTypeRef **)a1;
  *(_QWORD *)a1 = 0;
  if (v6)
  {
    if (*v6)
      CFRelease(*v6);
    MEMORY[0x1B5E07CD8](v6, 0x20C4093837F09);
  }
  return a1;
}

const __CFDictionary *sub_1B034BA24(uint64_t a1)
{
  char *v1;
  const void *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  const __CFDictionary *v5;
  const __CFDictionary *v6;
  _QWORD v8[2];
  CFTypeRef cf;
  CFTypeRef v10;
  CFTypeRef v11;
  CFTypeRef v12;
  uint64_t v13;

  v13 = *MEMORY[0x1E0C80C00];
  v1 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_1B034BBA0((CFStringRef *)&v10, v1);
  v2 = (const void *)*MEMORY[0x1E0C9AFE0];
  if (*MEMORY[0x1E0C9AFE0])
    CFRetain((CFTypeRef)*MEMORY[0x1E0C9AFE0]);
  sub_1B034AC30(&cf, v2);
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v11 = v3;
  v4 = v10;
  if (v10)
    CFRetain(v10);
  v12 = v4;
  v8[0] = &v11;
  v8[1] = 1;
  v5 = sub_1B034BD58((uint64_t)v8);
  v6 = v5;
  if (v5)
    CFRelease(v5);
  if (v12)
    CFRelease(v12);
  if (v11)
    CFRelease(v11);
  if (cf)
    CFRelease(cf);
  if (v10)
    CFRelease(v10);
  return v6;
}

void sub_1B034BB30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

CFStringRef *sub_1B034BBA0(CFStringRef *a1, char *__s)
{
  size_t v4;
  size_t v5;
  void **p_dst;
  uint64_t v7;
  uint64_t v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  std::runtime_error *exception;
  void **__dst;
  size_t v15;
  int64_t v16;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    p_dst = (void **)operator new(v7 + 1);
    v15 = v5;
    v16 = v8 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v16) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_8:
    memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (v16 >= 0)
    v9 = (const UInt8 *)&__dst;
  else
    v9 = (const UInt8 *)__dst;
  if (v16 >= 0)
    v10 = HIBYTE(v16);
  else
    v10 = v15;
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  *a1 = v11;
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v16) < 0)
    operator delete(__dst);
  return a1;
}

void sub_1B034BCD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  CFTypeRef *v15;

  if (*v15)
    CFRelease(*v15);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B034BD18(uint64_t a1)
{
  const void *v2;

  v2 = *(const void **)(a1 + 8);
  if (v2)
    CFRelease(v2);
  if (*(_QWORD *)a1)
    CFRelease(*(CFTypeRef *)a1);
  return a1;
}

CFDictionaryRef sub_1B034BD58(uint64_t a1)
{
  unint64_t v1;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  int64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _BYTE *v22;
  char *v23;
  int64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  _OWORD *v29;
  char *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  _OWORD *v38;
  __int128 *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  const void **v43;
  const void **v44;
  CFDictionaryRef v45;
  std::runtime_error *exception;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *__p;
  char *v53;
  char *v54;

  v1 = *(_QWORD *)(a1 + 8);
  __p = 0;
  if (v1)
  {
    if (v1 >> 61)
      sub_1B02D7758();
    __p = (char *)operator new(8 * v1);
    v53 = __p;
    v54 = &__p[8 * v1];
    v49 = (char *)operator new(8 * v1);
    v50 = v49;
    v51 = &v49[8 * v1];
    v3 = *(uint64_t **)a1;
    v48 = v1;
    v4 = *(_QWORD *)a1 + 16 * v1;
    while (1)
    {
      v6 = *v3;
      v7 = v53;
      if (v53 < v54)
      {
        *(_QWORD *)v53 = v6;
        v8 = (uint64_t)(v53 + 8);
        goto LABEL_19;
      }
      v9 = (v53 - __p) >> 3;
      v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 61)
        sub_1B02D7758();
      v11 = v54 - __p;
      if ((v54 - __p) >> 2 > v10)
        v10 = v11 >> 2;
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
        v12 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v12 = v10;
      if (v12)
      {
        if (v12 >> 61)
          sub_1B02D72AC();
        v13 = operator new(8 * v12);
        v14 = &v13[8 * v9];
        *(_QWORD *)v14 = v6;
        v8 = (uint64_t)(v14 + 8);
        v15 = v53 - __p;
        if (v53 == __p)
        {
LABEL_17:
          __p = v14;
          v54 = &v13[8 * v12];
          if (!v53)
            goto LABEL_19;
LABEL_18:
          operator delete(v7);
          goto LABEL_19;
        }
      }
      else
      {
        v13 = 0;
        v14 = (char *)(8 * v9);
        *(_QWORD *)(8 * v9) = v6;
        v8 = 8 * v9 + 8;
        v15 = v53 - __p;
        if (v53 == __p)
          goto LABEL_17;
      }
      v25 = v15 - 8;
      if (v25 < 0x58)
        goto LABEL_65;
      if ((unint64_t)(__p - v13) < 0x20)
        goto LABEL_65;
      v26 = (v25 >> 3) + 1;
      v27 = 8 * (v26 & 0x3FFFFFFFFFFFFFFCLL);
      v28 = &v53[-v27];
      v14 -= v27;
      v29 = &v13[8 * v9 - 16];
      v30 = v53 - 16;
      v31 = v26 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v32 = *(_OWORD *)v30;
        *(v29 - 1) = *((_OWORD *)v30 - 1);
        *v29 = v32;
        v29 -= 2;
        v30 -= 32;
        v31 -= 4;
      }
      while (v31);
      v7 = v28;
      if (v26 != (v26 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_65:
        do
        {
          v33 = *((_QWORD *)v7 - 1);
          v7 -= 8;
          *((_QWORD *)v14 - 1) = v33;
          v14 -= 8;
        }
        while (v7 != __p);
      }
      v7 = __p;
      __p = v14;
      v54 = &v13[8 * v12];
      if (v7)
        goto LABEL_18;
LABEL_19:
      v53 = (char *)v8;
      v16 = v3[1];
      v17 = v50;
      if (v50 >= v51)
      {
        v18 = (v50 - v49) >> 3;
        v19 = v18 + 1;
        if ((unint64_t)(v18 + 1) >> 61)
          sub_1B02D7758();
        v20 = v51 - v49;
        if ((v51 - v49) >> 2 > v19)
          v19 = v20 >> 2;
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v21 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          if (v21 >> 61)
            sub_1B02D72AC();
          v22 = operator new(8 * v21);
          v23 = &v22[8 * v18];
          *(_QWORD *)v23 = v16;
          v5 = (uint64_t)(v23 + 8);
          v24 = v50 - v49;
          if (v50 == v49)
            goto LABEL_29;
LABEL_41:
          v34 = v24 - 8;
          if (v34 < 0x58)
            goto LABEL_66;
          if ((unint64_t)(v49 - v22) < 0x20)
            goto LABEL_66;
          v35 = (v34 >> 3) + 1;
          v36 = 8 * (v35 & 0x3FFFFFFFFFFFFFFCLL);
          v37 = &v50[-v36];
          v23 -= v36;
          v38 = &v22[8 * v18 - 16];
          v39 = (__int128 *)(v50 - 16);
          v40 = v35 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v41 = *v39;
            *(v38 - 1) = *(v39 - 1);
            *v38 = v41;
            v38 -= 2;
            v39 -= 2;
            v40 -= 4;
          }
          while (v40);
          v17 = v37;
          if (v35 != (v35 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_66:
            do
            {
              v42 = *((_QWORD *)v17 - 1);
              v17 -= 8;
              *((_QWORD *)v23 - 1) = v42;
              v23 -= 8;
            }
            while (v17 != v49);
          }
          v17 = v49;
          v49 = v23;
          v51 = &v22[8 * v21];
          if (!v17)
            goto LABEL_5;
        }
        else
        {
          v22 = 0;
          v23 = (char *)(8 * v18);
          *(_QWORD *)(8 * v18) = v16;
          v5 = 8 * v18 + 8;
          v24 = v50 - v49;
          if (v50 != v49)
            goto LABEL_41;
LABEL_29:
          v49 = v23;
          v51 = &v22[8 * v21];
          if (!v50)
            goto LABEL_5;
        }
        operator delete(v17);
        goto LABEL_5;
      }
      *(_QWORD *)v50 = v16;
      v5 = (uint64_t)(v50 + 8);
LABEL_5:
      v50 = (char *)v5;
      v3 += 2;
      if (v3 == (uint64_t *)v4)
      {
        v43 = (const void **)__p;
        v1 = v48;
        v44 = (const void **)v49;
        goto LABEL_51;
      }
    }
  }
  v44 = 0;
  v43 = 0;
LABEL_51:
  v45 = CFDictionaryCreate(0, v43, v44, v1, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v45)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v44)
    operator delete(v44);
  if (__p)
    operator delete(__p);
  return v45;
}

void sub_1B034C140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v17;

  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    v17 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v17 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void sub_1B034C244(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B034C258(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B034C2F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B034C304(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B034C39C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B034C3B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B034C4A8(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  const void **v10;
  uint64_t v11;
  const void **v12;
  char *v13;
  _BYTE *v14;
  _BYTE *v15;
  int64_t v16;
  char *v17;
  char *v18;
  const void **v19;
  _BYTE *v20;
  const void *v21;
  int64_t v22;
  char *v23;
  unint64_t v24;
  __int128 v25;
  void *v26;
  char *v27;
  int v28;
  const void **v29;
  const void **v30;
  const void **v31;
  void *v32;
  void *v33;
  char *v34;
  void *v35;
  char *v36;
  void *v37;
  char *v38;
  void *v39;
  void *v40;
  _QWORD *v41;
  const void **v42;
  const void **v43;
  const void **v44;
  void *v45;
  char *v46;
  void *v47[3];
  void *__p;
  void *v49;
  char *v50;
  void *v51[2];
  void **p_p;
  char v53;
  const void **v54;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1[1] + 104) + 24))(v47);
  (*(void (**)(void **__return_ptr, _QWORD *, void **, uint64_t))(*a1 + 16))(&v45, a1, v47, a2);
  v44 = 0;
  v6 = (char *)v45;
  v7 = v46;
  v8 = v46 - (_BYTE *)v45;
  if (v46 == v45)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    goto LABEL_29;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
  if (v9 >= 0xAAAAAAAAAAAAAABLL)
    sub_1B032A0E8();
  v41 = a1;
  v10 = (const void **)operator new(v8);
  v11 = 0;
  v42 = v10;
  v44 = &v10[3 * v9];
  __p = v10;
  v54 = v10;
  v51[0] = &v44;
  v51[1] = &v54;
  p_p = &__p;
  v53 = 0;
  do
  {
    v12 = &v10[v11];
    v13 = &v6[v11 * 8];
    *v12 = 0;
    v12[1] = 0;
    v12[2] = 0;
    v15 = *(_BYTE **)&v6[v11 * 8];
    v14 = *(_BYTE **)&v6[v11 * 8 + 8];
    v16 = v14 - v15;
    if (v14 != v15)
    {
      if (v16 < 0)
        sub_1B02D7758();
      v17 = (char *)operator new(v14 - v15);
      *v12 = v17;
      v12[1] = v17;
      v18 = &v17[4 * (v16 >> 2)];
      v12[2] = v18;
      memcpy(v17, v15, v16);
      v12[1] = v18;
    }
    __p = v12 + 3;
    v11 += 3;
  }
  while (v13 + 24 != v7);
  v19 = &v10[v11];
  v43 = &v10[v11];
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  if (!(v11 * 8))
  {
LABEL_23:
    v29 = v43;
    v30 = v19;
    if (v43 != v19)
    {
      v31 = v43;
      do
      {
        v33 = (void *)*(v31 - 3);
        v31 -= 3;
        v32 = v33;
        if (v33)
        {
          *(v29 - 2) = v32;
          operator delete(v32);
        }
        v29 = v31;
      }
      while (v31 != v19);
      v30 = v42;
    }
    operator delete(v30);
    v34 = (char *)v45;
    if (!v45)
      goto LABEL_30;
    goto LABEL_35;
  }
  do
  {
    v49 = 0;
    v50 = 0;
    __p = 0;
    v21 = *v10;
    v20 = v10[1];
    v22 = v20 - (_BYTE *)*v10;
    if (v20 != *v10)
    {
      if (v22 < 0)
        sub_1B02D7758();
      __p = operator new(v20 - (_BYTE *)*v10);
      v49 = __p;
      v23 = (char *)__p + 4 * (v22 >> 2);
      v50 = v23;
      memcpy(__p, v21, v22);
      v49 = v23;
    }
    (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(v41[1] + 104) + 32))(v51, *(_QWORD *)(v41[1] + 104), &__p);
    v24 = *(_QWORD *)(a3 + 8);
    if (v24 >= *(_QWORD *)(a3 + 16))
    {
      v27 = sub_1B0318CBC((void **)a3, (uint64_t)v51);
      v28 = SHIBYTE(p_p);
      *(_QWORD *)(a3 + 8) = v27;
      if ((v28 & 0x80000000) == 0)
      {
        v26 = __p;
        if (!__p)
          goto LABEL_10;
LABEL_19:
        v49 = v26;
        operator delete(v26);
        goto LABEL_10;
      }
      operator delete(v51[0]);
      v26 = __p;
      if (__p)
        goto LABEL_19;
    }
    else
    {
      v25 = *(_OWORD *)v51;
      *(_QWORD *)(v24 + 16) = p_p;
      *(_OWORD *)v24 = v25;
      v51[1] = 0;
      p_p = 0;
      v51[0] = 0;
      *(_QWORD *)(a3 + 8) = v24 + 24;
      v26 = __p;
      if (__p)
        goto LABEL_19;
    }
LABEL_10:
    v10 += 3;
  }
  while (v10 != v19);
  v19 = v42;
  if (v42)
    goto LABEL_23;
LABEL_29:
  v34 = (char *)v45;
  if (!v45)
  {
LABEL_30:
    v35 = v47[0];
    if (v47[0])
      goto LABEL_31;
    return;
  }
LABEL_35:
  v36 = v46;
  v37 = v34;
  if (v46 != v34)
  {
    v38 = v46;
    do
    {
      v40 = (void *)*((_QWORD *)v38 - 3);
      v38 -= 24;
      v39 = v40;
      if (v40)
      {
        *((_QWORD *)v36 - 2) = v39;
        operator delete(v39);
      }
      v36 = v38;
    }
    while (v38 != v34);
    v37 = v45;
  }
  v46 = v34;
  operator delete(v37);
  v35 = v47[0];
  if (v47[0])
  {
LABEL_31:
    v47[1] = v35;
    operator delete(v35);
  }
}

void sub_1B034C80C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B034C8FC(uint64_t a1@<X0>, const void **a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _BYTE *v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  int v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  int v23;
  char *v24;
  char *v25;
  int64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  int64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  uint64_t v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  const void *v46;
  int v47;
  int v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  _BYTE *v52;
  char *v53;
  uint64_t v54;
  int64_t v55;
  unint64_t v56;
  char *v57;
  int v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  size_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  CFTypeRef v72;
  char v73;
  CFTypeRef cf;
  char v75;
  char *v76;
  char *v77;
  char *v78;
  void *__p;
  char *v80;
  char *v81;
  void *v82;
  void *v83;
  char *v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  __p = 0;
  v80 = 0;
  v81 = 0;
  v8 = *a2;
  v7 = a2[1];
  v9 = v7 - (_BYTE *)*a2;
  if (v7 != *a2)
  {
    if (v9 < 0)
      sub_1B02D7758();
    v10 = (char *)operator new(v7 - (_BYTE *)*a2);
    v11 = &v10[4 * (v9 >> 2)];
    __p = v10;
    v81 = v11;
    memcpy(v10, v8, v9);
    v80 = v11;
  }
  v12 = *(_QWORD *)(a1 + 8);
  LOBYTE(cf) = 0;
  v75 = 0;
  v13 = sub_1B034D020(v12, a2, (uint64_t)&cf);
  v14 = (char *)operator new(4uLL);
  *(_DWORD *)v14 = v13;
  v15 = v14 + 4;
  v77 = v14 + 4;
  v78 = v14 + 4;
  v76 = v14;
  if (v75 && cf)
    CFRelease(cf);
  if (a3 <= 1)
  {
    v82 = 0;
    v83 = 0;
    v66 = 1;
    v67 = 4;
    v84 = 0;
    goto LABEL_73;
  }
  v70 = a4;
  v16 = 2;
  v17 = v14 + 4;
  do
  {
    v19 = v15;
    v20 = a1;
    if (sub_1B03501F4((uint64_t *)(*(_QWORD *)(a1 + 8) + 8), "position"))
    {
      v21 = v80;
      if (v80 < v81)
      {
        *(_DWORD *)v80 = *((_DWORD *)v17 - 1);
        v22 = (uint64_t)(v21 + 4);
        v15 = v19;
LABEL_36:
        v80 = (char *)v22;
        goto LABEL_37;
      }
      v25 = (char *)__p;
      v26 = v80 - (_BYTE *)__p;
      v27 = (v80 - (_BYTE *)__p) >> 2;
      v28 = v27 + 1;
      if ((unint64_t)(v27 + 1) >> 62)
        sub_1B02D7758();
      v29 = v81 - (_BYTE *)__p;
      if ((v81 - (_BYTE *)__p) >> 1 > v28)
        v28 = v29 >> 1;
      if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL)
        v30 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v30 = v28;
      if (v30)
      {
        if (v30 >> 62)
          sub_1B02D72AC();
        v31 = v30;
        v32 = (char *)operator new(4 * v30);
        v30 = v31;
        v33 = &v32[4 * v27];
        *(_DWORD *)v33 = *((_DWORD *)v17 - 1);
        v22 = (uint64_t)(v33 + 4);
        v34 = v21 - v25;
        if (v21 != v25)
        {
LABEL_25:
          v35 = v34 - 4;
          if (v35 >= 0x2C)
          {
            v36 = v21 - &v32[v26];
            a1 = v20;
            v15 = v19;
            if (v36 >= 0x20)
            {
              v37 = (v35 >> 2) + 1;
              v38 = 4 * (v37 & 0x7FFFFFFFFFFFFFF8);
              v39 = &v21[-v38];
              v33 -= v38;
              v40 = &v32[4 * v27 - 16];
              v41 = v21 - 16;
              v42 = v37 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v43 = *(_OWORD *)v41;
                *((_OWORD *)v40 - 1) = *((_OWORD *)v41 - 1);
                *(_OWORD *)v40 = v43;
                v40 -= 32;
                v41 -= 32;
                v42 -= 8;
              }
              while (v42);
              v21 = v39;
              if (v37 == (v37 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_34:
                __p = v33;
                v80 = (char *)v22;
                v81 = &v32[4 * v30];
                if (v25)
                  operator delete(v25);
                goto LABEL_36;
              }
            }
          }
          else
          {
            a1 = v20;
            v15 = v19;
          }
          do
          {
            v44 = *((_DWORD *)v21 - 1);
            v21 -= 4;
            *((_DWORD *)v33 - 1) = v44;
            v33 -= 4;
          }
          while (v21 != v25);
          goto LABEL_34;
        }
      }
      else
      {
        v32 = 0;
        v33 = (char *)(4 * v27);
        *(_DWORD *)(4 * v27) = *((_DWORD *)v17 - 1);
        v22 = 4 * v27 + 4;
        v34 = v21 - v25;
        if (v21 != v25)
          goto LABEL_25;
      }
      a1 = v20;
      v15 = v19;
      goto LABEL_34;
    }
    v23 = *((_DWORD *)v17 - 1);
    v24 = (char *)operator new(4uLL);
    *(_DWORD *)v24 = v23;
    if (__p)
    {
      v80 = (char *)__p;
      operator delete(__p);
    }
    __p = v24;
    v80 = v24 + 4;
    v81 = v24 + 4;
    a1 = v20;
    v15 = v19;
LABEL_37:
    v45 = *(_QWORD *)(a1 + 8);
    v46 = (const void *)MRLNeuralNetworkCopyStates();
    sub_1B035BE48(&v82, v46);
    v72 = v82;
    v73 = 1;
    v47 = sub_1B034D020(v45, &__p, (uint64_t)&v72);
    v48 = v47;
    if (v17 < v15)
    {
      *(_DWORD *)v17 = v47;
      v17 += 4;
      v77 = v17;
      if (!v73)
        continue;
LABEL_57:
      if (v72)
        CFRelease(v72);
      continue;
    }
    v49 = (v17 - v14) >> 2;
    v50 = v49 + 1;
    if ((unint64_t)(v49 + 1) >> 62)
      sub_1B02D7758();
    if ((v15 - v14) >> 1 > v50)
      v50 = (v15 - v14) >> 1;
    if ((unint64_t)(v15 - v14) >= 0x7FFFFFFFFFFFFFFCLL)
      v51 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v51 = v50;
    if (v51)
    {
      if (v51 >> 62)
        sub_1B02D72AC();
      v52 = operator new(4 * v51);
      v53 = &v52[4 * v49];
      *(_DWORD *)v53 = v48;
      v54 = (uint64_t)(v53 + 4);
      v55 = v17 - v14;
      if (v17 == v14)
        goto LABEL_54;
    }
    else
    {
      v52 = 0;
      v53 = (char *)(4 * v49);
      *(_DWORD *)(4 * v49) = v48;
      v54 = 4 * v49 + 4;
      v55 = v17 - v14;
      if (v17 == v14)
        goto LABEL_54;
    }
    v56 = v55 - 4;
    if (v56 < 0xBC)
    {
      v57 = v17;
      goto LABEL_53;
    }
    v59 = (v17 - 4 - v14) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v52[v17 - v14 - 4 - v59] > &v52[v17 - v14 - 4])
    {
      v57 = v17;
      do
      {
LABEL_53:
        v58 = *((_DWORD *)v57 - 1);
        v57 -= 4;
        *((_DWORD *)v53 - 1) = v58;
        v53 -= 4;
      }
      while (v57 != v14);
      goto LABEL_54;
    }
    if (&v17[-v59 - 4] > v17 - 4)
    {
      v57 = v17;
      goto LABEL_53;
    }
    if ((unint64_t)(v14 - v52) < 0x20)
    {
      v57 = v17;
      goto LABEL_53;
    }
    v60 = (v56 >> 2) + 1;
    v61 = 4 * (v60 & 0x7FFFFFFFFFFFFFF8);
    v57 = &v17[-v61];
    v53 -= v61;
    v62 = &v52[4 * v49 - 16];
    v63 = v17 - 16;
    v64 = v60 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v65 = *(_OWORD *)v63;
      *(v62 - 1) = *((_OWORD *)v63 - 1);
      *v62 = v65;
      v62 -= 2;
      v63 -= 32;
      v64 -= 8;
    }
    while (v64);
    if (v60 != (v60 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_53;
LABEL_54:
    v15 = &v52[4 * v51];
    v76 = v53;
    v78 = v15;
    if (v14)
      operator delete(v14);
    v14 = v53;
    v17 = (char *)v54;
    v77 = (char *)v54;
    if (v73)
      goto LABEL_57;
  }
  while (v16++ != a3);
  v14 = v76;
  v82 = 0;
  v83 = 0;
  v84 = 0;
  v67 = v17 - v76;
  a4 = v70;
  if (v17 != v76)
  {
    if (v17 - v76 < 0)
      sub_1B02D7758();
    v66 = v67 >> 2;
LABEL_73:
    v82 = operator new(v67);
    v83 = v82;
    v68 = (char *)v82 + 4 * v66;
    v84 = v68;
    memcpy(v82, v14, v67);
    v83 = v68;
    v17 = v14;
  }
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v69 = operator new(0x18uLL);
  *a4 = v69;
  a4[1] = v69;
  a4[2] = v69 + 3;
  a4[1] = sub_1B0343A28((uint64_t)(a4 + 2), (uint64_t)&v82, (uint64_t)&v85, v69);
  if (v82)
  {
    v83 = v82;
    operator delete(v82);
  }
  if (v17)
  {
    v77 = v17;
    operator delete(v17);
  }
  if (__p)
  {
    v80 = (char *)__p;
    operator delete(__p);
  }
}

void sub_1B034CEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B034D020(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  CFTypeRef v5;
  uint64_t OutputDimension;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  float v13;
  BOOL v14;
  uint64_t v16;
  float *v17;
  float v18;
  CFTypeRef cf;
  char v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  LOBYTE(cf) = 0;
  v20 = 0;
  if (*(_BYTE *)(a3 + 8))
  {
    v5 = *(CFTypeRef *)a3;
    if (*(_QWORD *)a3)
      CFRetain(*(CFTypeRef *)a3);
    cf = v5;
    v20 = 1;
  }
  sub_1B0350D64(a1, (uint64_t)a2, (uint64_t)&cf, 1, (uint64_t)&v21);
  if (v20 && cf)
    CFRelease(cf);
  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  if (!OutputDimension)
    return 0;
  v7 = (uint64_t)(a2[1] - *a2) >> 2;
  LODWORD(v8) = v21;
  if (v21)
    v9 = v22;
  else
    v9 = v23;
  if (v21)
  {
    LODWORD(v8) = 0;
    v10 = 0;
    v11 = v24 + 4 * v22 * (v7 - 1);
    v12 = 0.0;
    do
    {
      v13 = *(float *)(v11 + 4 * v10);
      v14 = v12 < v13;
      v12 = fmaxf(v12, v13);
      if (v14)
        v8 = v10;
      else
        v8 = v8;
      ++v10;
    }
    while (OutputDimension != v10);
  }
  else
  {
    v16 = 0;
    v17 = (float *)(v24 + 4 * v7 - 4);
    v18 = 0.0;
    do
    {
      v14 = v18 < *v17;
      v18 = fmaxf(v18, *v17);
      if (v14)
        v8 = v16;
      else
        v8 = v8;
      ++v16;
      v17 += v9;
    }
    while (OutputDimension != v16);
  }
  return v8;
}

void sub_1B034D170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B034D184(uint64_t a1)
{
  const void *v2;

  if (*(_BYTE *)(a1 + 8))
  {
    v2 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v2);
  }
  return a1;
}

void sub_1B034D1BC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  float v6;
  uint64_t v7;
  const void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *v12;
  void *v13;
  void *v14;
  void *v15;
  float *v16;
  float *v17;
  uint64_t v18;
  size_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  _DWORD *v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _OWORD *v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  char *v46;
  float v47;
  float v48;
  int v49;
  char *v50;
  int *v51;
  int *v52;
  char *v53;
  int v54;
  char *v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  int *v62;
  uint64_t v63;
  int64_t v64;
  unint64_t v65;
  char *v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _OWORD *v71;
  char *v72;
  uint64_t v73;
  __int128 v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  _BYTE *v84;
  uint64_t v85;
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  char *v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _OWORD *v95;
  __int128 *v96;
  uint64_t v97;
  __int128 v98;
  int v99;
  size_t v100;
  int v101;
  char *v102;
  char *v103;
  void *v104;
  void *v105;
  const void **v106;
  const void **v107;
  _BYTE *v108;
  const void *v109;
  int64_t v110;
  char *v111;
  std::ios_base *v112;
  void **v113;
  uint64_t v114;
  void *v115;
  const void **v116;
  void *v117;
  const void **v118;
  void *v119;
  void *v120;
  char *v121;
  char *v122;
  void *v123;
  void *v124;
  char *v125;
  char *v126;
  void *v127;
  char *v128;
  char *v129;
  void *v130;
  void *v131;
  char *v132;
  char *v133;
  void *v134;
  void *v135;
  char *v136;
  char *v137;
  void *v138;
  void *v139;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  float *v149;
  uint64_t v150;
  char *v151;
  float *v152;
  char *v153;
  char *__src;
  void *v155;
  char *v156;
  void *v157;
  char *v158;
  char *v159;
  void *v160[2];
  uint64_t v161;
  uint64_t *v162;
  char *v163;
  char *v164;
  char *v165;
  uint64_t v166;
  void *__p;
  char *v168;
  uint64_t v169;
  void *v170[2];
  unsigned __int8 v171;
  void *v172;
  char v173;
  void *v174;
  void *v175;
  char *v176;
  void *v177;
  char *v178;
  void *v179;
  const void **v180;
  char *v181;
  __int128 v182;
  uint64_t v183;
  __int128 v184;
  __int128 v185;
  int v186;
  uint64_t v187[20];

  v5 = a1;
  LODWORD(v166) = *(_DWORD *)(a1 + 20);
  v168 = 0;
  v169 = 0;
  __p = 0;
  v6 = sub_1B034E204(*(_QWORD *)(a1 + 8), a2);
  v163 = 0;
  v164 = 0;
  v165 = 0;
  v8 = (const void *)*a2;
  v7 = a2[1];
  v9 = v7 - *a2;
  if (v7 == *a2)
  {
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_1B02D7758();
    v10 = (char *)operator new(v7 - *a2);
    v163 = v10;
    v165 = &v10[4 * (v9 >> 2)];
    memcpy(v10, v8, v9);
    v164 = v165;
  }
  sub_1B034E428(&v166, (uint64_t)&v163, v6);
  if (v10)
  {
    v164 = v10;
    operator delete(v10);
  }
  v162 = a2;
  sub_1B034E638((char **)v160, (uint64_t)&v166);
  v11 = (char *)__p;
  if (__p)
  {
    v12 = v168;
    v13 = __p;
    if (v168 != __p)
    {
      do
      {
        v14 = (void *)*((_QWORD *)v12 - 3);
        if (v14)
        {
          *((_QWORD *)v12 - 2) = v14;
          operator delete(v14);
        }
        v12 -= 32;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v168 = v11;
    operator delete(v13);
  }
  __p = 0;
  v168 = 0;
  v169 = 0;
  if (a3)
  {
    v150 = 0;
    v148 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v144 = *MEMORY[0x1E0DE4F60];
    v147 = MEMORY[0x1E0DE4FE0] + 64;
    v145 = MEMORY[0x1E0DE4FB8] + 16;
    v146 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v142 = v5;
    v143 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
LABEL_20:
    v17 = (float *)v160[0];
    v16 = (float *)v160[1];
    v149 = (float *)v160[1];
    while (v17 != v16)
    {
      sub_1B034E988((__n128 **)&v177, *(_QWORD *)(v5 + 8), (uint64_t)(v17 + 2));
      v18 = *(int *)(v5 + 16);
      v182 = 0uLL;
      v183 = 0;
      if ((_DWORD)v18)
      {
        if ((v18 & 0x80000000) != 0)
          sub_1B032A0E8();
        v19 = 8 * v18;
        v20 = (char *)operator new(8 * v18);
        bzero(v20, v19);
        v151 = v20;
        v152 = v17;
        v153 = &v20[v19];
        v179 = 0;
        v180 = 0;
        v181 = 0;
        v21 = v178 - (_BYTE *)v177;
        if (v178 != v177)
        {
LABEL_26:
          v22 = 0;
          v23 = 0;
          v24 = 0;
          v25 = 0;
          v26 = 0;
          v27 = 0;
          v28 = v21 >> 2;
          while (1)
          {
            while (1)
            {
              v29 = v177;
              if (v23 >= v26)
                break;
              *(_DWORD *)v23 = *((_DWORD *)v177 + v27);
              *((_DWORD *)v23 + 1) = v27;
              v23 += 8;
              if (++v27 == v28)
                goto LABEL_53;
            }
            v30 = (v23 - v25) >> 3;
            v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 61)
            {
              v179 = v24;
              v180 = (const void **)v23;
              v181 = v22;
              sub_1B032A0E8();
            }
            v32 = v26 - v25;
            if (v32 >> 2 > v31)
              v31 = v32 >> 2;
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
              v33 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v33 = v31;
            if (v33 >> 61)
            {
              v179 = v24;
              v181 = v22;
              sub_1B02D72AC();
            }
            v34 = operator new(8 * v33);
            v35 = &v34[8 * v30];
            *v35 = v29[v27];
            v35[1] = v27;
            if (v23 == v25)
            {
              v24 = &v34[8 * v30];
              v22 = &v34[8 * v33];
              v23 = (char *)(v35 + 2);
              if (!v25)
                goto LABEL_42;
LABEL_41:
              operator delete(v25);
              goto LABEL_42;
            }
            v36 = v23 - v25 - 8;
            if (v36 < 0x168)
              break;
            v39 = (v23 - 8 - v25) & 0xFFFFFFFFFFFFFFF8;
            if (&v34[v23 - v25 - 8 - v39] > &v34[v23 - v25 - 8]
              || &v23[-v39 - 8] > v23 - 8
              || (unint64_t)(v25 - v34) < 0x20)
            {
              break;
            }
            v40 = (v36 >> 3) + 1;
            v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
            v37 = &v23[-v41];
            v24 = (char *)&v35[v41 / 0xFFFFFFFFFFFFFFFCLL];
            v42 = &v34[8 * v30 - 16];
            v43 = v23 - 16;
            v44 = v40 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v45 = *(_OWORD *)v43;
              *(v42 - 1) = *((_OWORD *)v43 - 1);
              *v42 = v45;
              v42 -= 2;
              v43 -= 32;
              v44 -= 4;
            }
            while (v44);
            if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
              goto LABEL_39;
LABEL_40:
            v22 = &v34[8 * v33];
            v23 = (char *)(v35 + 2);
            if (v25)
              goto LABEL_41;
LABEL_42:
            v25 = v24;
            v26 = v22;
            if (++v27 == v28)
            {
LABEL_53:
              v179 = v24;
              v181 = v22;
              v17 = v152;
              goto LABEL_56;
            }
          }
          v37 = v23;
          v24 = &v34[8 * v30];
          do
          {
LABEL_39:
            v38 = *((_QWORD *)v37 - 1);
            v37 -= 8;
            *((_QWORD *)v24 - 1) = v38;
            v24 -= 8;
          }
          while (v37 != v25);
          goto LABEL_40;
        }
      }
      else
      {
        v152 = v17;
        v153 = 0;
        v151 = 0;
        v179 = 0;
        v180 = 0;
        v181 = 0;
        v21 = v178 - (_BYTE *)v177;
        if (v178 != v177)
          goto LABEL_26;
      }
      v23 = 0;
      v24 = 0;
LABEL_56:
      sub_1B0344D34(v24, v23, v151, v153);
      if (v24)
      {
        v180 = (const void **)v24;
        operator delete(v24);
      }
      v46 = v151;
      if (v151 != v153)
      {
        while (1)
        {
          v47 = *v17;
          v48 = logf(*(float *)v46);
          v49 = *((_DWORD *)v46 + 1);
          __src = (char *)operator new(4uLL);
          *(_DWORD *)__src = v49;
          v50 = __src + 4;
          v158 = 0;
          v159 = 0;
          v157 = 0;
          v51 = (int *)*((_QWORD *)v17 + 1);
          v52 = (int *)*((_QWORD *)v17 + 2);
          if (v51 != v52)
          {
            v53 = 0;
            while (1)
            {
              while (v53 < v159)
              {
                v54 = *v51++;
                *(_DWORD *)v53 = v54;
                v53 += 4;
                v158 = v53;
                if (v51 == v52)
                  goto LABEL_96;
              }
              v55 = (char *)v157;
              v56 = v53 - (_BYTE *)v157;
              v57 = (v53 - (_BYTE *)v157) >> 2;
              v58 = v57 + 1;
              if ((unint64_t)(v57 + 1) >> 62)
                sub_1B02D7758();
              v59 = v159 - (_BYTE *)v157;
              if ((v159 - (_BYTE *)v157) >> 1 > v58)
                v58 = v59 >> 1;
              if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
                v60 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v60 = v58;
              if (v60)
              {
                if (v60 >> 62)
                  sub_1B02D72AC();
                v61 = operator new(4 * v60);
                v62 = (int *)&v61[4 * v57];
                *v62 = *v51;
                v63 = (uint64_t)(v62 + 1);
                v64 = v53 - v55;
                if (v53 == v55)
                  goto LABEL_82;
              }
              else
              {
                v61 = 0;
                v62 = (int *)(4 * v57);
                *(_DWORD *)(4 * v57) = *v51;
                v63 = 4 * v57 + 4;
                v64 = v53 - v55;
                if (v53 == v55)
                  goto LABEL_82;
              }
              v65 = v64 - 4;
              if (v65 >= 0xBC)
              {
                v68 = (v53 - 4 - v55) & 0xFFFFFFFFFFFFFFFCLL;
                if (&v61[v56 - 4 - v68] > &v61[v56 - 4])
                {
                  v66 = v53;
                }
                else if (&v53[-v68 - 4] > v53 - 4)
                {
                  v66 = v53;
                }
                else if ((unint64_t)(v53 - v61 - v56) >= 0x20)
                {
                  v69 = (v65 >> 2) + 1;
                  v70 = 4 * (v69 & 0x7FFFFFFFFFFFFFF8);
                  v66 = &v53[-v70];
                  v62 = (int *)((char *)v62 - v70);
                  v71 = &v61[4 * v57 - 16];
                  v72 = v53 - 16;
                  v73 = v69 & 0x7FFFFFFFFFFFFFF8;
                  do
                  {
                    v74 = *(_OWORD *)v72;
                    *(v71 - 1) = *((_OWORD *)v72 - 1);
                    *v71 = v74;
                    v71 -= 2;
                    v72 -= 32;
                    v73 -= 8;
                  }
                  while (v73);
                  if (v69 == (v69 & 0x7FFFFFFFFFFFFFF8))
                    goto LABEL_82;
                }
                else
                {
                  v66 = v53;
                }
              }
              else
              {
                v66 = v53;
              }
              do
              {
                v67 = *((_DWORD *)v66 - 1);
                v66 -= 4;
                *--v62 = v67;
              }
              while (v66 != v55);
LABEL_82:
              v157 = v62;
              v158 = (char *)v63;
              v159 = &v61[4 * v60];
              if (v55)
                operator delete(v55);
              v53 = (char *)v63;
              v158 = (char *)v63;
              if (++v51 == v52)
              {
LABEL_96:
                v75 = v157;
                v76 = v159;
                v77 = v53;
                goto LABEL_98;
              }
            }
          }
          v53 = 0;
          v76 = 0;
          v75 = 0;
          v77 = 0;
LABEL_98:
          v78 = v77 - v75;
          v79 = &v75[(v77 - v75) & 0xFFFFFFFFFFFFFFFCLL];
          v80 = __src;
          if (v76 - v53 < 4)
            break;
          v85 = v53 - v79;
          if (v53 - v79 > 3)
          {
            v86 = v53;
LABEL_112:
            v87 = v86 - 4;
            v88 = v86;
            if (v86 - 4 < v53)
            {
              v88 = v86;
              do
              {
                v101 = *(_DWORD *)v87;
                v87 += 4;
                *(_DWORD *)v88 = v101;
                v88 += 4;
              }
              while (v87 < v53);
            }
            v158 = v88;
            if (v86 != v79 + 4)
              memmove(&v86[-4 * ((v86 - (v79 + 4)) >> 2)], &v75[(v77 - v75) & 0xFFFFFFFFFFFFFFFCLL], v86 - (v79 + 4));
            if (v50 != v80)
              memmove(&v75[(v77 - v75) & 0xFFFFFFFFFFFFFFFCLL], v80, v50 - v80);
            goto LABEL_132;
          }
          v50 = &__src[v85];
          memmove(v53, &__src[v85], 4 - v85);
          v86 = v79 + 4;
          v80 = __src;
          v158 = v79 + 4;
          if (v85 >= 1)
            goto LABEL_112;
LABEL_132:
          sub_1B034E428(&v166, (uint64_t)&v157, v48 + v47);
          if (v157)
          {
            v158 = (char *)v157;
            operator delete(v157);
          }
          operator delete(v80);
          v46 += 8;
          v17 = v152;
          if (v46 == v153)
            goto LABEL_59;
        }
        v81 = ((v53 - v75) >> 2) + 1;
        if (v81 >> 62)
          sub_1B02D7758();
        v82 = v76 - v75;
        if (v82 >> 1 > v81)
          v81 = v82 >> 1;
        if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL)
          v83 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v83 = v81;
        if (v83)
        {
          if (v83 >> 62)
            sub_1B02D72AC();
          v84 = operator new(4 * v83);
        }
        else
        {
          v84 = 0;
        }
        v89 = &v84[4 * ((v77 - v75) >> 2)];
        *(_DWORD *)v89 = *(_DWORD *)__src;
        v90 = v89 + 4;
        if (v77 != v75)
        {
          if ((unint64_t)(v78 - 4) < 0x3C)
          {
            v91 = &v75[(v77 - v75) & 0xFFFFFFFFFFFFFFFCLL];
            goto LABEL_122;
          }
          v91 = &v75[(v77 - v75) & 0xFFFFFFFFFFFFFFFCLL];
          if ((unint64_t)(&v75[v78 & 0xFFFFFFFFFFFFFFFCLL] - &v84[v78 & 0xFFFFFFFFFFFFFFFCLL]) < 0x20)
            goto LABEL_222;
          v92 = ((unint64_t)(v78 - 4) >> 2) + 1;
          v93 = 4 * (v92 & 0x7FFFFFFFFFFFFFF8);
          v91 = &v79[-v93];
          v89 -= v93;
          v94 = 4 * ((v77 - v75) >> 2);
          v95 = &v84[v94 - 16];
          v96 = (__int128 *)&v75[v94 - 16];
          v97 = v92 & 0x7FFFFFFFFFFFFFF8;
          do
          {
            v98 = *v96;
            *(v95 - 1) = *(v96 - 1);
            *v95 = v98;
            v95 -= 2;
            v96 -= 2;
            v97 -= 8;
          }
          while (v97);
          if (v92 != (v92 & 0x7FFFFFFFFFFFFFF8))
          {
LABEL_222:
            do
            {
LABEL_122:
              v99 = *((_DWORD *)v91 - 1);
              v91 -= 4;
              *((_DWORD *)v89 - 1) = v99;
              v89 -= 4;
            }
            while (v91 != v75);
          }
        }
        v100 = v53 - v79;
        if (v100)
          memmove(v90, &v75[(v77 - v75) & 0xFFFFFFFFFFFFFFFCLL], v100);
        v157 = v89;
        v158 = &v90[v100];
        v159 = &v84[4 * v83];
        v80 = __src;
        if (v75)
          operator delete(v75);
        goto LABEL_132;
      }
LABEL_59:
      if (v151)
        operator delete(v151);
      v5 = v142;
      if (v177)
      {
        v178 = (char *)v177;
        operator delete(v177);
      }
      v17 += 8;
      v16 = v149;
    }
    sub_1B034E638((char **)&v177, (uint64_t)&v166);
    sub_1B034EBEC((uint64_t)&v179, &v162, (uint64_t *)&v177);
    v102 = (char *)v177;
    if (v177)
    {
      v103 = v178;
      v104 = v177;
      if (v178 != v177)
      {
        do
        {
          v105 = (void *)*((_QWORD *)v103 - 3);
          if (v105)
          {
            *((_QWORD *)v103 - 2) = v105;
            operator delete(v105);
          }
          v103 -= 32;
        }
        while (v103 != v102);
        v104 = v177;
      }
      v178 = v102;
      operator delete(v104);
    }
    v106 = (const void **)v179;
    v107 = v180;
    if (v179 == v180)
    {
      if (v179)
        goto LABEL_165;
      goto LABEL_172;
    }
    while (1)
    {
      v174 = 0;
      v175 = 0;
      v176 = 0;
      v109 = *v106;
      v108 = v106[1];
      v110 = v108 - (_BYTE *)*v106;
      if (v108 != *v106)
      {
        if (v110 < 0)
          sub_1B02D7758();
        v174 = operator new(v108 - (_BYTE *)*v106);
        v175 = v174;
        v111 = (char *)v174 + 4 * (v110 >> 2);
        v176 = v111;
        memcpy(v174, v109, v110);
        v175 = v111;
      }
      (*(void (**)(void **__return_ptr, _QWORD, void **))(**(_QWORD **)(*(_QWORD *)(v5 + 8) + 104) + 32))(v170, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 104), &v174);
      v187[0] = v147;
      *(_QWORD *)&v182 = v148;
      *(_QWORD *)((char *)&v182 + *(_QWORD *)(v148 - 24)) = v146;
      v112 = (std::ios_base *)((char *)&v182 + *(_QWORD *)(v182 - 24));
      std::ios_base::init(v112, (char *)&v182 + 8);
      v112[1].__vftable = 0;
      v112[1].__fmtflags_ = -1;
      *(_QWORD *)&v182 = MEMORY[0x1E0DE4FE0] + 24;
      v187[0] = MEMORY[0x1E0DE4FE0] + 64;
      std::streambuf::basic_streambuf();
      *((_QWORD *)&v182 + 1) = v145;
      v184 = 0u;
      v185 = 0u;
      v186 = 16;
      sub_1B02D7994(&v182, (uint64_t)"[t=", 3);
      std::ostream::operator<<();
      sub_1B02D7994(&v182, (uint64_t)"] sampleText: ", 14);
      if ((v171 & 0x80u) == 0)
        v113 = v170;
      else
        v113 = (void **)v170[0];
      if ((v171 & 0x80u) == 0)
        v114 = v171;
      else
        v114 = (uint64_t)v170[1];
      sub_1B02D7994(&v182, (uint64_t)v113, v114);
      std::stringbuf::str();
      *(_QWORD *)&v182 = v144;
      *(_QWORD *)((char *)&v182 + *(_QWORD *)(v144 - 24)) = v143;
      *((_QWORD *)&v182 + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SBYTE7(v185) < 0)
        operator delete((void *)v184);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B5E07C60](v187);
      if ((char)v171 < 0)
      {
        operator delete(v170[0]);
        if ((v173 & 0x80000000) == 0)
        {
LABEL_159:
          v115 = v174;
          if (!v174)
            goto LABEL_145;
LABEL_163:
          v175 = v115;
          operator delete(v115);
          goto LABEL_145;
        }
      }
      else if ((v173 & 0x80000000) == 0)
      {
        goto LABEL_159;
      }
      operator delete(v172);
      v115 = v174;
      if (v174)
        goto LABEL_163;
LABEL_145:
      v106 += 3;
      if (v106 == v107)
      {
        v106 = (const void **)v179;
        if (v179)
        {
LABEL_165:
          v116 = v180;
          v117 = v106;
          if (v180 != v106)
          {
            v118 = v180;
            do
            {
              v120 = (void *)*(v118 - 3);
              v118 -= 3;
              v119 = v120;
              if (v120)
              {
                *(v116 - 2) = v119;
                operator delete(v119);
              }
              v116 = v118;
            }
            while (v118 != v106);
            v117 = v179;
          }
          v180 = v106;
          operator delete(v117);
        }
LABEL_172:
        sub_1B034E638((char **)&v182, (uint64_t)&v166);
        v121 = (char *)v160[0];
        if (v160[0])
        {
          v122 = (char *)v160[1];
          v123 = v160[0];
          if (v160[1] != v160[0])
          {
            do
            {
              v124 = (void *)*((_QWORD *)v122 - 3);
              if (v124)
              {
                *((_QWORD *)v122 - 2) = v124;
                operator delete(v124);
              }
              v122 -= 32;
            }
            while (v122 != v121);
            v123 = v160[0];
          }
          v160[1] = v121;
          operator delete(v123);
        }
        *(_OWORD *)v160 = v182;
        v161 = v183;
        v125 = (char *)__p;
        if (__p)
        {
          v126 = v168;
          v15 = __p;
          if (v168 != __p)
          {
            do
            {
              v127 = (void *)*((_QWORD *)v126 - 3);
              if (v127)
              {
                *((_QWORD *)v126 - 2) = v127;
                operator delete(v127);
              }
              v126 -= 32;
            }
            while (v126 != v125);
            v15 = __p;
          }
          v168 = v125;
          operator delete(v15);
        }
        __p = 0;
        v168 = 0;
        v169 = 0;
        if (++v150 == a3)
          break;
        goto LABEL_20;
      }
    }
  }
  sub_1B03532E4(&v155, (uint64_t *)v160);
  sub_1B034EBEC(a4, &v162, (uint64_t *)&v155);
  v128 = (char *)v155;
  if (v155)
  {
    v129 = v156;
    v130 = v155;
    if (v156 != v155)
    {
      do
      {
        v131 = (void *)*((_QWORD *)v129 - 3);
        if (v131)
        {
          *((_QWORD *)v129 - 2) = v131;
          operator delete(v131);
        }
        v129 -= 32;
      }
      while (v129 != v128);
      v130 = v155;
    }
    v156 = v128;
    operator delete(v130);
  }
  v132 = (char *)v160[0];
  if (v160[0])
  {
    v133 = (char *)v160[1];
    v134 = v160[0];
    if (v160[1] != v160[0])
    {
      do
      {
        v135 = (void *)*((_QWORD *)v133 - 3);
        if (v135)
        {
          *((_QWORD *)v133 - 2) = v135;
          operator delete(v135);
        }
        v133 -= 32;
      }
      while (v133 != v132);
      v134 = v160[0];
    }
    v160[1] = v132;
    operator delete(v134);
  }
  v136 = (char *)__p;
  if (__p)
  {
    v137 = v168;
    v138 = __p;
    if (v168 != __p)
    {
      do
      {
        v139 = (void *)*((_QWORD *)v137 - 3);
        if (v139)
        {
          *((_QWORD *)v137 - 2) = v139;
          operator delete(v139);
        }
        v137 -= 32;
      }
      while (v137 != v136);
      v138 = __p;
    }
    v168 = v136;
    operator delete(v138);
  }
}

void sub_1B034DFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45)
{
  void *v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;

  sub_1B03293B4(&a29);
  v46 = __p;
  if (__p)
  {
    v47 = a36;
    v48 = __p;
    if ((void *)a36 != __p)
    {
      do
      {
        v49 = *(void **)(v47 - 24);
        if (v49)
        {
          *(_QWORD *)(v47 - 16) = v49;
          operator delete(v49);
        }
        v47 -= 32;
      }
      while ((void *)v47 != v46);
      v48 = __p;
    }
    a36 = (uint64_t)v46;
    operator delete(v48);
  }
  v50 = a44;
  if (a44)
  {
    v51 = a45;
    v52 = a44;
    if ((void *)a45 != a44)
    {
      do
      {
        v53 = *(void **)(v51 - 24);
        if (v53)
        {
          *(_QWORD *)(v51 - 16) = v53;
          operator delete(v53);
        }
        v51 -= 32;
      }
      while ((void *)v51 != v50);
      v52 = a44;
    }
    a45 = (uint64_t)v50;
    operator delete(v52);
  }
  _Unwind_Resume(a1);
}

float sub_1B034E204(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  float v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int *v12;
  float v13;
  unint64_t v14;
  float v15;
  float v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  float v23;
  float v24;
  uint64_t v25;
  float v26;
  uint64_t v27;
  CFTypeRef cf;
  char v30;
  int v31;
  uint64_t v32;
  _QWORD v33[2];

  LOBYTE(cf) = 0;
  v30 = 0;
  sub_1B0350D64(a1, (uint64_t)a2, (uint64_t)&cf, 1, (uint64_t)&v31);
  if (v30 && cf)
    CFRelease(cf);
  v3 = *a2;
  v4 = (a2[1] - *a2) >> 2;
  v5 = v4 - 1;
  if (v4 == 1)
    return 0.0;
  v6 = v33[1];
  v7 = v33;
  if (v31)
    v7 = &v32;
  v8 = *v7;
  if (!v31)
  {
    if (v4 == 2)
    {
      v22 = 0;
      v9 = 0.0;
    }
    else
    {
      v21 = 0;
      v22 = v5 & 0xFFFFFFFFFFFFFFFELL;
      v23 = 0.0;
      v24 = 0.0;
      do
      {
        v25 = v3 + 4 * v21;
        v26 = *(float *)(v6 + 4 * (v21 + v8 * *(unsigned int *)(v25 + 8)) + 4);
        v23 = logf(*(float *)(v6 + 4 * (v21 + v8 * *(unsigned int *)(v25 + 4)))) + v23;
        v24 = logf(v26) + v24;
        v21 += 2;
      }
      while (v22 != v21);
      v9 = v24 + v23;
      if (v5 == v22)
        return v9;
    }
    v27 = v3 + 4;
    do
    {
      v9 = logf(*(float *)(v6 + 4 * (v22 + v8 * *(unsigned int *)(v27 + 4 * v22)))) + v9;
      ++v22;
    }
    while (v5 != v22);
    return v9;
  }
  if (v4 == 2)
  {
    v11 = 0;
    v9 = 0.0;
LABEL_17:
    v17 = v8 * v11;
    v18 = ~v11 + v4;
    v19 = (unsigned int *)(v3 + 4 * v11 + 4);
    do
    {
      v20 = *v19++;
      v9 = logf(*(float *)(v6 + 4 * (v17 + v20))) + v9;
      v17 += v8;
      --v18;
    }
    while (v18);
    return v9;
  }
  v10 = 0;
  v11 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v12 = (unsigned int *)(v3 + 8);
  v13 = 0.0;
  v14 = v5 & 0xFFFFFFFFFFFFFFFELL;
  v15 = 0.0;
  do
  {
    v16 = *(float *)(v6 + 4 * (v8 + v10 + *v12));
    v13 = logf(*(float *)(v6 + 4 * (v10 + *(v12 - 1)))) + v13;
    v15 = logf(v16) + v15;
    v12 += 2;
    v10 += 2 * v8;
    v14 -= 2;
  }
  while (v14);
  v9 = v15 + v13;
  if (v5 != v11)
    goto LABEL_17;
  return v9;
}

void sub_1B034E414(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B034E428(uint64_t *a1, uint64_t a2, float a3)
{
  float *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  int64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  void *v16;
  const void *v17;
  int64_t v18;
  char *v19;
  char *v20;

  v7 = a1 + 1;
  v6 = (float *)a1[1];
  v8 = a1[2];
  v9 = (uint64_t)(v8 - (_QWORD)v6) >> 5;
  if (v9 >= *(int *)a1)
  {
    if (*v6 < a3)
    {
      sub_1B0352FE4((uint64_t)v6, a1[2], v9);
      v15 = (char *)a1[2];
      v16 = (void *)*((_QWORD *)v15 - 3);
      if (v16)
      {
        *((_QWORD *)v15 - 2) = v16;
        operator delete(v16);
      }
      a1[2] = (uint64_t)(v15 - 32);
      if ((unint64_t)(v15 - 32) >= a1[3])
      {
        v15 = sub_1B0352A88(v7, *(const void **)a2, *(_QWORD *)(a2 + 8), a3);
      }
      else
      {
        *((float *)v15 - 8) = a3;
        *((_QWORD *)v15 - 2) = 0;
        *((_QWORD *)v15 - 1) = 0;
        *((_QWORD *)v15 - 3) = 0;
        v17 = *(const void **)a2;
        v18 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
        if (v18)
        {
          if (v18 < 0)
            sub_1B02D7758();
          v19 = (char *)operator new(v18);
          *((_QWORD *)v15 - 3) = v19;
          *((_QWORD *)v15 - 2) = v19;
          v20 = &v19[4 * (v18 >> 2)];
          *((_QWORD *)v15 - 1) = v20;
          memcpy(v19, v17, v18);
          *((_QWORD *)v15 - 2) = v20;
        }
        a1[2] = (uint64_t)v15;
      }
      a1[2] = (uint64_t)v15;
      sub_1B0352C78(a1[1], (uint64_t)v15, (uint64_t)&v15[-a1[1]] >> 5);
    }
  }
  else
  {
    if (v8 >= a1[3])
    {
      v14 = sub_1B0352A88(v7, *(const void **)a2, *(_QWORD *)(a2 + 8), a3);
    }
    else
    {
      *(_QWORD *)(v8 + 8) = 0;
      *(float *)v8 = a3;
      *(_QWORD *)(v8 + 16) = 0;
      *(_QWORD *)(v8 + 24) = 0;
      v10 = *(const void **)a2;
      v11 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
      if (v11)
      {
        if (v11 < 0)
          sub_1B02D7758();
        v12 = (char *)operator new(v11);
        *(_QWORD *)(v8 + 8) = v12;
        *(_QWORD *)(v8 + 16) = v12;
        v13 = &v12[4 * (v11 >> 2)];
        *(_QWORD *)(v8 + 24) = v13;
        memcpy(v12, v10, v11);
        *(_QWORD *)(v8 + 16) = v13;
      }
      v14 = (char *)(v8 + 32);
      a1[2] = v8 + 32;
    }
    a1[2] = (uint64_t)v14;
    sub_1B0352C78(a1[1], (uint64_t)v14, (uint64_t)&v14[-a1[1]] >> 5);
  }
}

void sub_1B034E604(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;

  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 - 16) = v6;
    operator delete(v6);
  }
  *(_QWORD *)(v1 + 16) = v2;
  _Unwind_Resume(exception_object);
}

void sub_1B034E638(char **a1, uint64_t a2)
{
  _QWORD *v3;
  unint64_t v4;
  char *v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char **v21;
  _BYTE *v22;
  _BYTE *v23;
  int64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  _QWORD *v35;
  _BYTE *v36;
  char *v37;
  char *v38;
  __int128 v39;
  _QWORD *v40;

  sub_1B03532E4(&v35, (uint64_t *)(a2 + 8));
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = v35;
  if (v35 == (_QWORD *)v36)
  {
    if (!v35)
      return;
  }
  else
  {
    do
    {
      v5 = a1[1];
      v4 = (unint64_t)a1[2];
      if ((unint64_t)v5 >= v4)
      {
        v13 = *a1;
        v14 = (v5 - *a1) >> 5;
        v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 59)
          sub_1B02D7758();
        v16 = v4 - (_QWORD)v13;
        if (v16 >> 4 > v15)
          v15 = v16 >> 4;
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0)
          v17 = 0x7FFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        v40 = a1 + 2;
        if (v17)
        {
          if (v17 >> 59)
            sub_1B02D72AC();
          v18 = (char *)operator new(32 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[32 * v14];
        v37 = v18;
        v38 = v19;
        v20 = &v18[32 * v17];
        *(_QWORD *)&v39 = v19;
        *((_QWORD *)&v39 + 1) = v20;
        *(_DWORD *)v19 = *(_DWORD *)v3;
        *((_QWORD *)v19 + 1) = 0;
        *((_QWORD *)v19 + 2) = 0;
        v21 = (char **)(v19 + 16);
        *((_QWORD *)v19 + 3) = 0;
        v23 = (_BYTE *)v3[1];
        v22 = (_BYTE *)v3[2];
        v24 = v22 - v23;
        if (v22 != v23)
        {
          if (v24 < 0)
            sub_1B02D7758();
          v25 = (char *)operator new(v22 - v23);
          *((_QWORD *)v19 + 1) = v25;
          *v21 = v25;
          v26 = &v25[4 * (v24 >> 2)];
          *((_QWORD *)v19 + 3) = v26;
          memcpy(v25, v23, v24);
          *v21 = v26;
        }
        v12 = v19 + 32;
        *(_QWORD *)&v39 = v19 + 32;
        if (v5 == v13)
        {
          *a1 = v19;
          a1[1] = v12;
          a1[2] = v20;
        }
        else
        {
          v27 = 0;
          do
          {
            v28 = &v19[v27];
            v29 = &v5[v27];
            *((_DWORD *)v28 - 8) = *(_DWORD *)&v5[v27 - 32];
            *((_QWORD *)v28 - 2) = 0;
            *((_QWORD *)v28 - 1) = 0;
            *(_OWORD *)(v28 - 24) = *(_OWORD *)&v5[v27 - 24];
            *((_QWORD *)v28 - 1) = *(_QWORD *)&v5[v27 - 8];
            *((_QWORD *)v29 - 3) = 0;
            *((_QWORD *)v29 - 2) = 0;
            *((_QWORD *)v29 - 1) = 0;
            v27 -= 32;
          }
          while (&v5[v27] != v13);
          v5 = *a1;
          v30 = a1[1];
          *a1 = &v19[v27];
          v31 = (char *)v39;
          *(_OWORD *)(a1 + 1) = v39;
          v12 = v31;
          while (v30 != v5)
          {
            v32 = (void *)*((_QWORD *)v30 - 3);
            if (v32)
            {
              *((_QWORD *)v30 - 2) = v32;
              operator delete(v32);
            }
            v30 -= 32;
          }
        }
        if (v5)
          operator delete(v5);
        v3 = v35;
      }
      else
      {
        v6 = *(_DWORD *)v3;
        *((_QWORD *)v5 + 1) = 0;
        *(_DWORD *)v5 = v6;
        *((_QWORD *)v5 + 2) = 0;
        *((_QWORD *)v5 + 3) = 0;
        v8 = (_BYTE *)v3[1];
        v7 = (_BYTE *)v3[2];
        v9 = v7 - v8;
        if (v7 != v8)
        {
          if (v9 < 0)
            sub_1B02D7758();
          v10 = (char *)operator new(v7 - v8);
          *((_QWORD *)v5 + 1) = v10;
          *((_QWORD *)v5 + 2) = v10;
          v11 = &v10[4 * (v9 >> 2)];
          *((_QWORD *)v5 + 3) = v11;
          memcpy(v10, v8, v9);
          *((_QWORD *)v5 + 2) = v11;
        }
        v12 = v5 + 32;
        a1[1] = v5 + 32;
      }
      a1[1] = v12;
      sub_1B0352FE4((uint64_t)v3, (uint64_t)v36, (v36 - (_BYTE *)v3) >> 5);
      v33 = (uint64_t)v36;
      v34 = (void *)*((_QWORD *)v36 - 3);
      if (v34)
      {
        *((_QWORD *)v36 - 2) = v34;
        operator delete(v34);
      }
      v36 = (_BYTE *)(v33 - 32);
      v3 = v35;
    }
    while (v35 != (_QWORD *)(v33 - 32));
    v3 = (_QWORD *)(v33 - 32);
  }
  v36 = v3;
  operator delete(v3);
}

void sub_1B034E8FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  void *v6;
  void *v7;
  va_list va;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v7 = va_arg(va1, void *);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v6 = *v3;
  if (*v3)
  {
    *v4 = v6;
    operator delete(v6);
  }
  sub_1B0344238((uint64_t)va1);
  sub_1B03293B4(v2);
  sub_1B03293B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B034E934(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;
  void *v6;
  va_list va;

  va_start(va, a2);
  v6 = *v4;
  if (*v4)
  {
    *(_QWORD *)(v3 + 16) = v6;
    operator delete(v6);
  }
  *(_QWORD *)(v2 + 8) = v3;
  sub_1B03293B4((void **)v2);
  sub_1B03293B4((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B034E968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  va_list va;

  va_start(va, a2);
  sub_1B03293B4(v2);
  sub_1B03293B4((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1B034E988(__n128 **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __n128 *v9;
  unint64_t v10;
  __n128 result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned __int32 *v19;
  unsigned __int32 *v20;
  unsigned __int32 v21;
  uint64_t v22;
  BOOL v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int32 *v26;
  unsigned __int32 *v27;
  uint64_t v28;
  __n128 *v29;
  __n128 *v30;
  unint64_t v31;
  __n128 v32;
  __n128 *v33;
  __n128 *v34;
  unint64_t v35;
  __n128 v36;
  CFTypeRef cf;
  char v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  LOBYTE(cf) = 0;
  v38 = 0;
  sub_1B0350D64(a2, a3, (uint64_t)&cf, 1, (uint64_t)&v39);
  if (v38 && cf)
    CFRelease(cf);
  v5 = v41;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 104) + 88))(*(_QWORD *)(a2 + 104));
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  if (v6)
  {
    v7 = v6;
    if (v6 >> 62)
      sub_1B02D7758();
    v8 = 4 * v6;
    v9 = (__n128 *)operator new(4 * v6);
    *a1 = v9;
    a1[2] = (__n128 *)((char *)v9 + 4 * v7);
    bzero(v9, 4 * v7);
    a1[1] = (__n128 *)((char *)v9 + v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 104) + 88))(*(_QWORD *)(a2 + 104));
  if (v10)
  {
    v12 = v42;
    if (!v39)
    {
      v22 = v41;
      v23 = v10 >= 0xC && v41 == 1;
      if (v23 && (unint64_t)v9->n128_u64 + -v42 + -4 * v5 + 4 >= 0x20)
      {
        v24 = v10 & 0xFFFFFFFFFFFFFFF8;
        v33 = (__n128 *)(4 * v5 + v42 + 12);
        v34 = v9 + 1;
        v35 = v10 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          result = v33[-1];
          v36 = *v33;
          v34[-1] = result;
          *v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 8;
        }
        while (v35);
        if (v10 == v24)
          return result;
      }
      else
      {
        v24 = 0;
      }
      v25 = v10 - v24;
      v26 = (unsigned __int32 *)v9 + v24;
      v27 = (unsigned __int32 *)(v12 + 4 * (v5 + v24 * v22) - 4);
      v28 = 4 * v22;
      do
      {
        result.n128_u32[0] = *v27;
        *v26++ = *v27;
        v27 = (unsigned __int32 *)((char *)v27 + v28);
        --v25;
      }
      while (v25);
      return result;
    }
    v13 = v5 - 1;
    v14 = v40;
    if (v10 < 8 || (v15 = 4 * v40 * v13, (unint64_t)v9->n128_u64 - v42 - v15 < 0x20))
    {
      v16 = 0;
LABEL_13:
      v17 = v10 - v16;
      v18 = 4 * v16;
      v19 = (unsigned __int32 *)v9 + v16;
      v20 = (unsigned __int32 *)(v12 + v18 + 4 * v14 * v13);
      do
      {
        v21 = *v20++;
        result.n128_u32[0] = v21;
        *v19++ = v21;
        --v17;
      }
      while (v17);
      return result;
    }
    v16 = v10 & 0xFFFFFFFFFFFFFFF8;
    v29 = (__n128 *)(v15 + v42 + 16);
    v30 = v9 + 1;
    v31 = v10 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      result = v29[-1];
      v32 = *v29;
      v30[-1] = result;
      *v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v10 != v16)
      goto LABEL_13;
  }
  return result;
}

void sub_1B034EBA8(_Unwind_Exception *exception_object)
{
  void *v1;
  uint64_t v2;

  if (v1)
  {
    *(_QWORD *)(v2 + 8) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B034EBEC(uint64_t a1, _QWORD **a2, uint64_t *a3)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  int64_t v15;
  char *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  void *v20;
  _QWORD *v21;
  void *v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  void *__p[2];
  char *v31;

  sub_1B03532E4(&v24, a3);
  v5 = *a2;
  v6 = v24;
  v7 = v25;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = 0;
  if (v6 != v7)
  {
    do
    {
      v26 = *(_DWORD *)v6;
      v28 = 0;
      v29 = 0;
      v27 = 0;
      v9 = (_BYTE *)v6[1];
      v8 = (_BYTE *)v6[2];
      v10 = v8 - v9;
      if (v8 == v9)
      {
        v12 = 0;
        v11 = 0;
      }
      else
      {
        if (v10 < 0)
          sub_1B02D7758();
        v11 = (char *)operator new(v8 - v9);
        v12 = &v11[4 * (v10 >> 2)];
        v27 = v11;
        v29 = v12;
        memcpy(v11, v9, v10);
        v28 = v12;
      }
      v13 = v5[1] - *v5;
      __p[0] = 0;
      __p[1] = 0;
      v31 = 0;
      if ((v12 - v11) >> 2 != v13 >> 2)
      {
        v14 = &v11[v13];
        v15 = v12 - &v11[v13];
        if (v15 < 0)
          sub_1B02D7758();
        v16 = (char *)operator new(v12 - &v11[v13]);
        v17 = &v16[4 * (v15 >> 2)];
        __p[0] = v16;
        v31 = v17;
        memcpy(v16, v14, v15);
        __p[1] = v17;
      }
      v18 = *(_QWORD **)(a1 + 8);
      if ((unint64_t)v18 >= *(_QWORD *)(a1 + 16))
      {
        v19 = sub_1B0345128((char **)a1, (uint64_t)__p);
        v20 = __p[0];
        *(_QWORD *)(a1 + 8) = v19;
        if (v20)
        {
          __p[1] = v20;
          operator delete(v20);
        }
      }
      else
      {
        *v18 = 0;
        v18[1] = 0;
        v18[2] = 0;
        *(_OWORD *)v18 = *(_OWORD *)__p;
        v18[2] = v31;
        __p[0] = 0;
        __p[1] = 0;
        v31 = 0;
        *(_QWORD *)(a1 + 8) = v18 + 3;
      }
      if (v11)
      {
        v28 = v11;
        operator delete(v11);
      }
      v6 += 4;
    }
    while (v6 != v7);
    v6 = v24;
  }
  if (v6)
  {
    v21 = v25;
    v22 = v6;
    if (v25 != v6)
    {
      do
      {
        v23 = (void *)*(v21 - 3);
        if (v23)
        {
          *(v21 - 2) = v23;
          operator delete(v23);
        }
        v21 -= 4;
      }
      while (v21 != v6);
      v22 = v24;
    }
    v25 = v6;
    operator delete(v22);
  }
}

void sub_1B034EDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18)
{
  void **v18;
  void *v19;

  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  if (v19)
  {
    operator delete(v19);
    sub_1B03242EC(v18);
    sub_1B03293B4(&a10);
    _Unwind_Resume(a1);
  }
  sub_1B03242EC(v18);
  sub_1B03293B4(&a10);
  _Unwind_Resume(a1);
}

void sub_1B034EE60(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  int64_t v10;
  char *v11;
  char *v12;
  int v13;
  _DWORD *v14;
  _BYTE *v15;
  char *v16;
  _DWORD *v17;
  uint64_t v18;
  BOOL v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  char *v29;
  int64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  _OWORD *v35;
  char *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  _DWORD *v46;
  void *v47;
  int64_t v48;
  unint64_t v49;
  _DWORD *v50;
  int v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _OWORD *v55;
  __int128 *v56;
  uint64_t v57;
  __int128 v58;
  char *v59;
  char *v60;
  void *v61;
  char **v62;
  uint64_t v63;
  uint64_t v66;
  void *__p[2];
  char *v68;
  uint64_t v69[3];
  std::random_device v70;
  char *v71;
  char *v72;
  char *v73;

  v5 = *(int *)(a1 + 20);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v63 = v5;
  if ((_DWORD)v5)
  {
    v7 = 0;
    v62 = a4;
    while (1)
    {
      v9 = *(_BYTE **)a2;
      v8 = *(_BYTE **)(a2 + 8);
      v71 = 0;
      v72 = 0;
      v73 = 0;
      v10 = v8 - v9;
      if (v8 != v9)
      {
        if (v10 < 0)
          sub_1B02D7758();
        v11 = (char *)operator new(v8 - v9);
        v12 = &v11[4 * (v10 >> 2)];
        v71 = v11;
        v73 = v12;
        memcpy(v11, v9, v10);
        v72 = v12;
      }
      sub_1B0350374((uint64_t)&v70);
      v69[0] = a1;
      v69[1] = (uint64_t)&v71;
      v69[2] = (uint64_t)&v70;
      v13 = sub_1B034F440(v69);
      v66 = v7;
      __p[0] = 0;
      __p[1] = 0;
      v68 = 0;
      v14 = operator new(4uLL);
      v15 = v14;
      *v14 = v13;
      v16 = (char *)(v14 + 1);
      __p[1] = v14 + 1;
      v68 = (char *)(v14 + 1);
      __p[0] = v14;
      if (a3 >= 2)
        break;
LABEL_63:
      std::random_device::~random_device(&v70);
      if (v71)
      {
        v72 = v71;
        operator delete(v71);
      }
      v59 = v62[1];
      if (v59 < v62[2])
      {
        *(_QWORD *)v59 = 0;
        *((_QWORD *)v59 + 1) = 0;
        *((_QWORD *)v59 + 2) = 0;
        *(_OWORD *)v59 = *(_OWORD *)__p;
        *((_QWORD *)v59 + 2) = v68;
        v62[1] = v59 + 24;
      }
      else
      {
        v60 = sub_1B0345128(v62, (uint64_t)__p);
        v61 = __p[0];
        v62[1] = v60;
        if (v61)
        {
          __p[1] = v61;
          operator delete(v61);
        }
      }
      v7 = v66 + 1;
      if (v66 + 1 == v63)
        return;
    }
    v17 = v14 + 1;
    v18 = 2;
    while (1)
    {
      v20 = v72;
      if (v72 >= v73)
        break;
      *(_DWORD *)v72 = *(v17 - 1);
      v21 = (uint64_t)(v20 + 4);
LABEL_33:
      v72 = (char *)v21;
      v40 = sub_1B034F440(v69);
      v41 = v40;
      if (v17 < (_DWORD *)v16)
      {
        *v17++ = v40;
        __p[1] = v17;
        v19 = v18++ == a3;
        if (v19)
          goto LABEL_63;
      }
      else
      {
        v42 = ((char *)v17 - v15) >> 2;
        v43 = v42 + 1;
        if ((unint64_t)(v42 + 1) >> 62)
          sub_1B02D7758();
        if ((v16 - v15) >> 1 > v43)
          v43 = (v16 - v15) >> 1;
        if ((unint64_t)(v16 - v15) >= 0x7FFFFFFFFFFFFFFCLL)
          v44 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v44 = v43;
        if (v44)
        {
          if (v44 >> 62)
            sub_1B02D72AC();
          v45 = operator new(4 * v44);
          v46 = &v45[4 * v42];
          *v46 = v41;
          v47 = v46 + 1;
          v48 = (char *)v17 - v15;
          if (v17 == (_DWORD *)v15)
            goto LABEL_48;
        }
        else
        {
          v45 = 0;
          v46 = (_DWORD *)(4 * v42);
          *(_DWORD *)(4 * v42) = v41;
          v47 = (void *)(4 * v42 + 4);
          v48 = (char *)v17 - v15;
          if (v17 == (_DWORD *)v15)
            goto LABEL_48;
        }
        v49 = v48 - 4;
        if (v49 >= 0xBC)
        {
          v52 = ((char *)(v17 - 1) - v15) & 0xFFFFFFFFFFFFFFFCLL;
          if (&v45[(char *)v17 - v15 - 4 - v52] > &v45[(char *)v17 - v15 - 4])
          {
            v50 = v17;
          }
          else if ((_DWORD *)((char *)v17 - v52 - 4) > v17 - 1)
          {
            v50 = v17;
          }
          else if ((unint64_t)(v15 - v45) >= 0x20)
          {
            v53 = (v49 >> 2) + 1;
            v54 = 4 * (v53 & 0x7FFFFFFFFFFFFFF8);
            v50 = &v17[v54 / 0xFFFFFFFFFFFFFFFCLL];
            v46 = (_DWORD *)((char *)v46 - v54);
            v55 = &v45[4 * v42 - 16];
            v56 = (__int128 *)(v17 - 4);
            v57 = v53 & 0x7FFFFFFFFFFFFFF8;
            do
            {
              v58 = *v56;
              *(v55 - 1) = *(v56 - 1);
              *v55 = v58;
              v55 -= 2;
              v56 -= 2;
              v57 -= 8;
            }
            while (v57);
            if (v53 == (v53 & 0x7FFFFFFFFFFFFFF8))
              goto LABEL_48;
          }
          else
          {
            v50 = v17;
          }
        }
        else
        {
          v50 = v17;
        }
        do
        {
          v51 = *--v50;
          *--v46 = v51;
        }
        while (v50 != (_DWORD *)v15);
LABEL_48:
        v16 = &v45[4 * v44];
        __p[0] = v46;
        v68 = v16;
        if (v15)
          operator delete(v15);
        v15 = v46;
        __p[1] = v47;
        v17 = v47;
        v19 = v18++ == a3;
        if (v19)
          goto LABEL_63;
      }
    }
    v22 = v71;
    v23 = (v72 - v71) >> 2;
    v24 = v23 + 1;
    if ((unint64_t)(v23 + 1) >> 62)
      sub_1B02D7758();
    v25 = v73 - v71;
    if ((v73 - v71) >> 1 > v24)
      v24 = v25 >> 1;
    if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL)
      v26 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v26 = v24;
    if (v26)
    {
      if (v26 >> 62)
        sub_1B02D72AC();
      v27 = v26;
      v28 = operator new(4 * v26);
      v26 = v27;
      v29 = &v28[4 * v23];
      *(_DWORD *)v29 = *(v17 - 1);
      v21 = (uint64_t)(v29 + 4);
      v30 = v20 - v22;
      if (v20 == v22)
        goto LABEL_31;
    }
    else
    {
      v28 = 0;
      v29 = (char *)(4 * v23);
      *(_DWORD *)(4 * v23) = *(v17 - 1);
      v21 = 4 * v23 + 4;
      v30 = v20 - v22;
      if (v20 == v22)
      {
LABEL_31:
        v71 = v29;
        v72 = (char *)v21;
        v73 = &v28[4 * v26];
        if (v22)
          operator delete(v22);
        goto LABEL_33;
      }
    }
    v31 = v30 - 4;
    if (v31 < 0x2C)
      goto LABEL_76;
    if ((unint64_t)(v22 - v28) < 0x20)
      goto LABEL_76;
    v32 = (v31 >> 2) + 1;
    v33 = 4 * (v32 & 0x7FFFFFFFFFFFFFF8);
    v34 = &v20[-v33];
    v29 -= v33;
    v35 = &v28[4 * v23 - 16];
    v36 = v20 - 16;
    v37 = v32 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v38 = *(_OWORD *)v36;
      *(v35 - 1) = *((_OWORD *)v36 - 1);
      *v35 = v38;
      v35 -= 2;
      v36 -= 32;
      v37 -= 8;
    }
    while (v37);
    v20 = v34;
    if (v32 != (v32 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_76:
      do
      {
        v39 = *((_DWORD *)v20 - 1);
        v20 -= 4;
        *((_DWORD *)v29 - 1) = v39;
        v29 -= 4;
      }
      while (v20 != v22);
    }
    goto LABEL_31;
  }
}

void sub_1B034F338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::random_device a21)
{
  char *v22;
  char *v23;
  void *v24;
  char *v25;
  void *v26;
  void *v27;

  if (__p)
    operator delete(__p);
  v22 = (char *)*a10;
  if (!*a10)
    _Unwind_Resume(exception_object);
  v23 = (char *)a10[1];
  v24 = *a10;
  if (v23 != v22)
  {
    v25 = (char *)a10[1];
    do
    {
      v27 = (void *)*((_QWORD *)v25 - 3);
      v25 -= 24;
      v26 = v27;
      if (v27)
      {
        *((_QWORD *)v23 - 2) = v26;
        operator delete(v26);
      }
      v23 = v25;
    }
    while (v25 != v22);
    v24 = *a10;
  }
  a10[1] = v22;
  operator delete(v24);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B034F440(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char *v6;
  size_t v7;
  unint64_t v8;
  char *v10;
  char *v11;
  char *v12;
  void *__p;
  _BYTE *v14;
  void *v15[3];

  v2 = *a1;
  sub_1B034E988((__n128 **)v15, *(_QWORD *)(*a1 + 8), a1[1]);
  sub_1B0344A04((uint64_t *)v15, *(_DWORD *)(v2 + 16), &__p);
  v3 = a1[2];
  v11 = 0;
  v12 = 0;
  v10 = 0;
  v4 = __p;
  v5 = v14 - (_BYTE *)__p;
  if (v14 == __p)
  {
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      sub_1B032A0E8();
    v6 = (char *)operator new(v14 - (_BYTE *)__p);
    v10 = v6;
    v12 = &v6[8 * (v5 >> 3)];
    v7 = v5 & 0xFFFFFFFFFFFFFFF8;
    memcpy(v6, v4, v7);
    v11 = &v6[v7];
  }
  v8 = sub_1B0350454(v3, &v10);
  if (v6)
    operator delete(v6);
  if (__p)
  {
    v14 = __p;
    operator delete(__p);
  }
  if (v15[0])
  {
    v15[1] = v15[0];
    operator delete(v15[0]);
  }
  return v8;
}

void sub_1B034F530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  void *v17;
  void *v19;

  if (v17)
    operator delete(v17);
  if (__p)
  {
    operator delete(__p);
    v19 = a16;
    if (!a16)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v19 = a16;
    if (!a16)
      goto LABEL_5;
  }
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_1B034F59C(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char **a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  int64_t v11;
  char *v12;
  char *v13;
  int v14;
  _DWORD *v15;
  _BYTE *v16;
  char *v17;
  _DWORD *v18;
  uint64_t v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _BYTE *v29;
  char *v30;
  int64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  _OWORD *v36;
  char *v37;
  uint64_t v38;
  __int128 v39;
  int v40;
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _DWORD *v47;
  void *v48;
  int64_t v49;
  unint64_t v50;
  _DWORD *v51;
  int v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _OWORD *v56;
  __int128 *v57;
  uint64_t v58;
  __int128 v59;
  char *v60;
  char *v61;
  void *v62;
  int v63;
  uint64_t v64;
  double v65;
  double v66;
  int v67;
  uint64_t v68;
  double v69;
  double v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  uint64_t v75;
  uint64_t v76;
  std::ios_base *v77;
  uint64_t v78;
  void *v79;
  uint64_t v80;
  void **v81;
  uint64_t v82;
  uint64_t v84;
  char **v85;
  uint64_t v87;
  void *__p[2];
  char *v89;
  double v90;
  int v91;
  void *v92;
  void **v93;
  std::random_device *v94;
  std::random_device v95[2];
  uint64_t v96[8];
  __int128 v97;
  __int128 v98;
  int v99;
  uint64_t v100[300];
  char *v101;
  char *v102;
  char *v103;

  v4 = a1;
  *(_DWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  v6 = *(int *)(a1 + 20);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  v85 = a4;
  v84 = v6;
  if (!(_DWORD)v6)
  {
    LODWORD(v90) = 3;
    goto LABEL_72;
  }
  v8 = 0;
  do
  {
    v10 = *(_BYTE **)a2;
    v9 = *(_BYTE **)(a2 + 8);
    v101 = 0;
    v102 = 0;
    v103 = 0;
    v11 = v9 - v10;
    if (v9 != v10)
    {
      if (v11 < 0)
        sub_1B02D7758();
      v12 = (char *)operator new(v9 - v10);
      v13 = &v12[4 * (v11 >> 2)];
      v101 = v12;
      v103 = v13;
      memcpy(v12, v10, v11);
      v102 = v13;
    }
    sub_1B0350374((uint64_t)v95);
    v92 = (void *)v4;
    v93 = (void **)&v101;
    v94 = v95;
    v14 = sub_1B034FEDC((uint64_t *)&v92);
    v87 = v8;
    __p[0] = 0;
    __p[1] = 0;
    v89 = 0;
    v15 = operator new(4uLL);
    v16 = v15;
    *v15 = v14;
    v17 = (char *)(v15 + 1);
    __p[1] = v15 + 1;
    v89 = (char *)(v15 + 1);
    __p[0] = v15;
    if (a3 >= 2)
    {
      v18 = v15 + 1;
      v19 = 2;
      while (1)
      {
        v21 = v102;
        if (v102 >= v103)
          break;
        *(_DWORD *)v102 = *(v18 - 1);
        v22 = (uint64_t)(v21 + 4);
LABEL_33:
        v102 = (char *)v22;
        v41 = sub_1B034FEDC((uint64_t *)&v92);
        v42 = v41;
        if (v18 < (_DWORD *)v17)
        {
          *v18++ = v41;
          __p[1] = v18;
          v20 = v19++ == a3;
          if (v20)
            goto LABEL_63;
        }
        else
        {
          v43 = ((char *)v18 - v16) >> 2;
          v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62)
            sub_1B02D7758();
          if ((v17 - v16) >> 1 > v44)
            v44 = (v17 - v16) >> 1;
          if ((unint64_t)(v17 - v16) >= 0x7FFFFFFFFFFFFFFCLL)
            v45 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v45 = v44;
          if (v45)
          {
            if (v45 >> 62)
              sub_1B02D72AC();
            v46 = operator new(4 * v45);
            v47 = &v46[4 * v43];
            *v47 = v42;
            v48 = v47 + 1;
            v49 = (char *)v18 - v16;
            if (v18 == (_DWORD *)v16)
              goto LABEL_48;
          }
          else
          {
            v46 = 0;
            v47 = (_DWORD *)(4 * v43);
            *(_DWORD *)(4 * v43) = v42;
            v48 = (void *)(4 * v43 + 4);
            v49 = (char *)v18 - v16;
            if (v18 == (_DWORD *)v16)
              goto LABEL_48;
          }
          v50 = v49 - 4;
          if (v50 >= 0xBC)
          {
            v53 = ((char *)(v18 - 1) - v16) & 0xFFFFFFFFFFFFFFFCLL;
            if (&v46[(char *)v18 - v16 - 4 - v53] > &v46[(char *)v18 - v16 - 4])
            {
              v51 = v18;
            }
            else if ((_DWORD *)((char *)v18 - v53 - 4) > v18 - 1)
            {
              v51 = v18;
            }
            else if ((unint64_t)(v16 - v46) >= 0x20)
            {
              v54 = (v50 >> 2) + 1;
              v55 = 4 * (v54 & 0x7FFFFFFFFFFFFFF8);
              v51 = &v18[v55 / 0xFFFFFFFFFFFFFFFCLL];
              v47 = (_DWORD *)((char *)v47 - v55);
              v56 = &v46[4 * v43 - 16];
              v57 = (__int128 *)(v18 - 4);
              v58 = v54 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v59 = *v57;
                *(v56 - 1) = *(v57 - 1);
                *v56 = v59;
                v56 -= 2;
                v57 -= 2;
                v58 -= 8;
              }
              while (v58);
              if (v54 == (v54 & 0x7FFFFFFFFFFFFFF8))
                goto LABEL_48;
            }
            else
            {
              v51 = v18;
            }
          }
          else
          {
            v51 = v18;
          }
          do
          {
            v52 = *--v51;
            *--v47 = v52;
          }
          while (v51 != (_DWORD *)v16);
LABEL_48:
          v17 = &v46[4 * v45];
          __p[0] = v47;
          v89 = v17;
          if (v16)
            operator delete(v16);
          v16 = v47;
          __p[1] = v48;
          v18 = v48;
          v20 = v19++ == a3;
          if (v20)
            goto LABEL_63;
        }
      }
      v23 = v101;
      v24 = (v102 - v101) >> 2;
      v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) >> 62)
        sub_1B02D7758();
      v26 = v103 - v101;
      if ((v103 - v101) >> 1 > v25)
        v25 = v26 >> 1;
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL)
        v27 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v27 = v25;
      if (v27)
      {
        if (v27 >> 62)
          sub_1B02D72AC();
        v28 = v27;
        v29 = operator new(4 * v27);
        v27 = v28;
        v30 = &v29[4 * v24];
        *(_DWORD *)v30 = *(v18 - 1);
        v22 = (uint64_t)(v30 + 4);
        v31 = v21 - v23;
        if (v21 == v23)
          goto LABEL_31;
      }
      else
      {
        v29 = 0;
        v30 = (char *)(4 * v24);
        *(_DWORD *)(4 * v24) = *(v18 - 1);
        v22 = 4 * v24 + 4;
        v31 = v21 - v23;
        if (v21 == v23)
        {
LABEL_31:
          v101 = v30;
          v102 = (char *)v22;
          v103 = &v29[4 * v27];
          if (v23)
            operator delete(v23);
          goto LABEL_33;
        }
      }
      v32 = v31 - 4;
      if (v32 < 0x2C)
        goto LABEL_106;
      if ((unint64_t)(v23 - v29) < 0x20)
        goto LABEL_106;
      v33 = (v32 >> 2) + 1;
      v34 = 4 * (v33 & 0x7FFFFFFFFFFFFFF8);
      v35 = &v21[-v34];
      v30 -= v34;
      v36 = &v29[4 * v24 - 16];
      v37 = v21 - 16;
      v38 = v33 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v39 = *(_OWORD *)v37;
        *(v36 - 1) = *((_OWORD *)v37 - 1);
        *v36 = v39;
        v36 -= 2;
        v37 -= 32;
        v38 -= 8;
      }
      while (v38);
      v21 = v35;
      if (v33 != (v33 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_106:
        do
        {
          v40 = *((_DWORD *)v21 - 1);
          v21 -= 4;
          *((_DWORD *)v30 - 1) = v40;
          v30 -= 4;
        }
        while (v21 != v23);
      }
      goto LABEL_31;
    }
LABEL_63:
    std::random_device::~random_device(v95);
    if (v101)
    {
      v102 = v101;
      operator delete(v101);
    }
    v60 = v85[1];
    v4 = a1;
    if (v60 < v85[2])
    {
      *(_QWORD *)v60 = 0;
      *((_QWORD *)v60 + 1) = 0;
      *((_QWORD *)v60 + 2) = 0;
      *(_OWORD *)v60 = *(_OWORD *)__p;
      *((_QWORD *)v60 + 2) = v89;
      v85[1] = v60 + 24;
    }
    else
    {
      v61 = sub_1B0345128(v85, (uint64_t)__p);
      v62 = __p[0];
      v85[1] = v61;
      if (v62)
      {
        __p[1] = v62;
        operator delete(v62);
      }
    }
    v8 = v87 + 1;
  }
  while (v87 + 1 != v84);
  v63 = *(_DWORD *)(a1 + 24);
  v64 = *(_QWORD *)(a1 + 40);
  v65 = *(double *)(a1 + 56);
  LODWORD(v90) = 3;
  if (v63 <= 0)
  {
LABEL_72:
    *(_QWORD *)&v95[0].__padding_ = 0;
    v66 = 0.0;
    goto LABEL_74;
  }
  *(_QWORD *)&v95[0].__padding_ = v64;
  if (v63 == 1)
    v66 = 0.0;
  else
    v66 = v65 / (double)(v63 - 1);
LABEL_74:
  __p[0] = COERCE_VOID_(sqrt(v66));
  sub_1B0350854((uint64_t)&v92, (int *)&v90);
  v67 = *(_DWORD *)(v4 + 64);
  v68 = *(_QWORD *)(v4 + 80);
  v69 = *(double *)(v4 + 96);
  v91 = 3;
  if (v67 <= 0)
  {
    *(_QWORD *)&v95[0].__padding_ = 0;
    v70 = 0.0;
  }
  else
  {
    *(_QWORD *)&v95[0].__padding_ = v68;
    v70 = 0.0;
    v71 = v67 - 1;
    if (v71)
      v70 = v69 / (double)v71;
  }
  v90 = sqrt(v70);
  sub_1B0350854((uint64_t)__p, &v91);
  v72 = MEMORY[0x1E0DE4FE0];
  v73 = MEMORY[0x1E0DE4FE0] + 64;
  v74 = (_QWORD *)MEMORY[0x1E0DE4F60];
  v75 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v76 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v100[0] = MEMORY[0x1E0DE4FE0] + 64;
  *(_QWORD *)&v95[0].__padding_ = v75;
  *(_QWORD *)((char *)&v95[0].__padding_ + *(_QWORD *)(v75 - 24)) = v76;
  v77 = (std::ios_base *)((char *)v95 + *(_QWORD *)(*(_QWORD *)&v95[0].__padding_ - 24));
  std::ios_base::init(v77, v96);
  v77[1].__vftable = 0;
  v77[1].__fmtflags_ = -1;
  *(_QWORD *)&v95[0].__padding_ = v72 + 24;
  v100[0] = v73;
  std::streambuf::basic_streambuf();
  v78 = MEMORY[0x1E0DE4FB8];
  v96[0] = MEMORY[0x1E0DE4FB8] + 16;
  v97 = 0u;
  v98 = 0u;
  v99 = 16;
  sub_1B02D7994(v95, (uint64_t)"[p=", 3);
  std::ostream::operator<<();
  sub_1B02D7994(v95, (uint64_t)"] Avg vocab subset size over ", 29);
  std::ostream::operator<<();
  sub_1B02D7994(v95, (uint64_t)" samples: ", 10);
  if (SHIBYTE(v94) >= 0)
    v79 = &v92;
  else
    v79 = v92;
  if (SHIBYTE(v94) >= 0)
    v80 = HIBYTE(v94);
  else
    v80 = (uint64_t)v93;
  sub_1B02D7994(v95, (uint64_t)v79, v80);
  sub_1B02D7994(v95, (uint64_t)"; numRetries: ", 14);
  if (SHIBYTE(v89) >= 0)
    v81 = __p;
  else
    v81 = (void **)__p[0];
  if (SHIBYTE(v89) >= 0)
    v82 = HIBYTE(v89);
  else
    v82 = (uint64_t)__p[1];
  sub_1B02D7994(v95, (uint64_t)v81, v82);
  std::stringbuf::str();
  *(_QWORD *)&v95[0].__padding_ = *v74;
  *(_QWORD *)((char *)&v95[0].__padding_ + *(_QWORD *)(*(_QWORD *)&v95[0].__padding_ - 24)) = v74[3];
  v96[0] = v78 + 16;
  if (SBYTE7(v98) < 0)
    operator delete((void *)v97);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v100);
  if (SHIBYTE(v89) < 0)
  {
    operator delete(__p[0]);
    if (SHIBYTE(v94) < 0)
      goto LABEL_97;
LABEL_94:
    if (SHIBYTE(v103) < 0)
LABEL_98:
      operator delete(v101);
  }
  else
  {
    if ((SHIBYTE(v94) & 0x80000000) == 0)
      goto LABEL_94;
LABEL_97:
    operator delete(v92);
    if (SHIBYTE(v103) < 0)
      goto LABEL_98;
  }
}

void sub_1B034FD30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  sub_1B02E983C((uint64_t)&a30);
  if (a20 < 0)
  {
    operator delete(__p);
    if ((a29 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a29 & 0x80000000) == 0)
  {
LABEL_3:
    sub_1B03242EC(a12);
    _Unwind_Resume(a1);
  }
  operator delete(a24);
  sub_1B03242EC(a12);
  _Unwind_Resume(a1);
}

void sub_1B034FDD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::random_device a24)
{
  char *v25;
  char *v26;
  void *v27;
  char *v28;
  void *v29;
  void *v30;

  if (__p)
    operator delete(__p);
  v25 = (char *)*a12;
  if (!*a12)
    _Unwind_Resume(exception_object);
  v26 = (char *)a12[1];
  v27 = *a12;
  if (v26 != v25)
  {
    v28 = (char *)a12[1];
    do
    {
      v30 = (void *)*((_QWORD *)v28 - 3);
      v28 -= 24;
      v29 = v30;
      if (v30)
      {
        *((_QWORD *)v26 - 2) = v29;
        operator delete(v29);
      }
      v26 = v28;
    }
    while (v28 != v25);
    v27 = *a12;
  }
  a12[1] = v25;
  operator delete(v27);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B034FEDC(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  _BYTE *v4;
  _BYTE *v5;
  double v6;
  int v7;
  int v8;
  float v9;
  int v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  int64_t v16;
  uint64_t v17;
  double v18;
  int v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  uint64_t v25;
  char *v26;
  size_t v27;
  unint64_t v28;
  char *v30;
  char *v31;
  char *v32;
  float v33;
  _BYTE *v34;
  _BYTE *v35;
  void *__p;
  _BYTE *v37;

  v2 = *a1;
  sub_1B034E988((__n128 **)&__p, *(_QWORD *)(*a1 + 8), a1[1]);
  v3 = (int)((double)(unint64_t)((v37 - (_BYTE *)__p) >> 2) * 0.1);
  sub_1B0350A2C((uint64_t)&v33, (uint64_t *)&__p, v2, v3);
  v5 = v34;
  v4 = v35;
  v6 = 0.0;
  if (v33 < *(float *)(v2 + 16) && v3 < (unint64_t)((v37 - (_BYTE *)__p) >> 2))
  {
    v7 = 1;
    do
    {
      v8 = v7;
      v3 *= 2;
      sub_1B0350A2C((uint64_t)&v33, (uint64_t *)&__p, v2, v3);
      v9 = v33;
      if (v5)
        operator delete(v5);
      v5 = v34;
      v4 = v35;
      if (v9 >= *(float *)(v2 + 16))
        break;
      v7 = v8 + 1;
    }
    while (v3 < (unint64_t)((v37 - (_BYTE *)__p) >> 2));
    v6 = (double)v8;
  }
  v10 = *(_DWORD *)(v2 + 64);
  *(_DWORD *)(v2 + 64) = v10 + 1;
  if (v10)
  {
    v11 = *(double *)(v2 + 72);
    v12 = v6 - v11;
    v13 = (v6 - v11) / (double)(v10 + 1) + v11;
    v14 = *(double *)(v2 + 88);
    *(double *)(v2 + 72) = v13;
    *(double *)(v2 + 80) = v13;
    v15 = v14 + (v6 - v13) * v12;
    *(double *)(v2 + 88) = v15;
    *(double *)(v2 + 96) = v15;
  }
  else
  {
    *(double *)(v2 + 72) = v6;
    *(double *)(v2 + 80) = v6;
    *(_QWORD *)(v2 + 88) = 0;
  }
  v16 = v4 - v5;
  v17 = (v4 - v5) >> 3;
  v18 = (double)(unint64_t)v17;
  v19 = *(_DWORD *)(v2 + 24);
  *(_DWORD *)(v2 + 24) = v19 + 1;
  if (!v19)
  {
    *(double *)(v2 + 32) = v18;
    *(double *)(v2 + 40) = v18;
    *(_QWORD *)(v2 + 48) = 0;
    v25 = a1[2];
    v31 = 0;
    v32 = 0;
    v30 = 0;
    if (v4 != v5)
      goto LABEL_14;
LABEL_17:
    v26 = 0;
    goto LABEL_18;
  }
  v20 = *(double *)(v2 + 32);
  v21 = v18 - v20;
  v22 = (v18 - v20) / (double)(v19 + 1) + v20;
  v23 = *(double *)(v2 + 48);
  *(double *)(v2 + 32) = v22;
  *(double *)(v2 + 40) = v22;
  v24 = v23 + (v18 - v22) * v21;
  *(double *)(v2 + 48) = v24;
  *(double *)(v2 + 56) = v24;
  v25 = a1[2];
  v31 = 0;
  v32 = 0;
  v30 = 0;
  if (v4 == v5)
    goto LABEL_17;
LABEL_14:
  if (v16 < 0)
    sub_1B032A0E8();
  v26 = (char *)operator new(v4 - v5);
  v30 = v26;
  v32 = &v26[8 * v17];
  v27 = v16 & 0xFFFFFFFFFFFFFFF8;
  memcpy(v26, v5, v27);
  v31 = &v26[v27];
LABEL_18:
  v28 = sub_1B0350454(v25, &v30);
  if (v26)
    operator delete(v26);
  if (v5)
    operator delete(v5);
  if (__p)
  {
    v37 = __p;
    operator delete(__p);
  }
  return v28;
}

void sub_1B0350120(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  void *v17;
  void *v18;
  void *v20;

  if (v18)
    operator delete(v18);
  if (v17)
  {
    operator delete(v17);
    v20 = __p;
    if (!__p)
LABEL_5:
      _Unwind_Resume(exception_object);
  }
  else
  {
    v20 = __p;
    if (!__p)
      goto LABEL_5;
  }
  operator delete(v20);
  _Unwind_Resume(exception_object);
}

void sub_1B0350198()
{
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B03501B0()
{
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B03501C8()
{
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B03501E0()
{
  JUMPOUT(0x1B5E07CD8);
}

BOOL sub_1B03501F4(uint64_t *a1, char *__s)
{
  uint64_t v4;
  uint64_t v5;
  size_t v6;
  size_t v7;
  void **v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **__dst;
  size_t v20;
  unint64_t v21;

  v4 = *a1;
  v5 = a1[1];
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v10 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v10 = v6 | 7;
    v11 = v10 + 1;
    v8 = (void **)operator new(v10 + 1);
    v20 = v7;
    v21 = v11 | 0x8000000000000000;
    __dst = v8;
LABEL_9:
    memcpy(v8, __s, v7);
    *((_BYTE *)v8 + v7) = 0;
    v9 = HIBYTE(v21);
    if (v4 == v5)
      goto LABEL_27;
LABEL_10:
    if ((v9 & 0x80u) == 0)
      v12 = v9;
    else
      v12 = v20;
    if ((v9 & 0x80u) == 0)
      p_dst = (void **)&__dst;
    else
      p_dst = __dst;
    do
    {
      v14 = *(unsigned __int8 *)(v4 + 23);
      if ((v14 & 0x80u) == 0)
        v15 = *(unsigned __int8 *)(v4 + 23);
      else
        v15 = *(_QWORD *)(v4 + 8);
      if (v15 == v12)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v4, p_dst, *(_QWORD *)(v4 + 8)))
            goto LABEL_27;
        }
        else
        {
          if (!*(_BYTE *)(v4 + 23))
            goto LABEL_27;
          v16 = 0;
          while (*(unsigned __int8 *)(v4 + v16) == *((unsigned __int8 *)p_dst + v16))
          {
            if (v14 == ++v16)
              goto LABEL_27;
          }
        }
      }
      v4 += 24;
    }
    while (v4 != v5);
    v4 = v5;
    v17 = a1[1];
    if ((v9 & 0x80) != 0)
      goto LABEL_28;
    return v4 != v17;
  }
  HIBYTE(v21) = v6;
  v8 = (void **)&__dst;
  if (v6)
    goto LABEL_9;
  LOBYTE(__dst) = 0;
  v9 = HIBYTE(v21);
  if (v4 != v5)
    goto LABEL_10;
LABEL_27:
  v17 = a1[1];
  if ((v9 & 0x80) != 0)
LABEL_28:
    operator delete(__dst);
  return v4 != v17;
}

uint64_t sub_1B0350374(uint64_t a1)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t i;
  int v5;
  std::string __token;

  *((_BYTE *)&__token.__r_.__value_.__s + 23) = 12;
  strcpy((char *)&__token, "/dev/urandom");
  std::random_device::random_device((std::random_device *)a1, &__token);
  if (SHIBYTE(__token.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__token.__r_.__value_.__l.__data_);
  v2 = MEMORY[0x1B5E07B7C](a1);
  *(_DWORD *)(a1 + 8) = v2;
  v3 = 1;
  for (i = 3; i != 626; ++i)
  {
    v5 = 1812433253 * (v2 ^ (v2 >> 30));
    v2 = v5 + v3;
    *(_DWORD *)(a1 + 4 * i) = i + v5 - 2;
    ++v3;
  }
  *(_QWORD *)(a1 + 2504) = 0;
  return a1;
}

void sub_1B0350424(_Unwind_Exception *a1)
{
  std::random_device *v1;

  std::random_device::~random_device(v1);
  _Unwind_Resume(a1);
}

void sub_1B0350438(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B0350454(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v4;
  const void *v5;
  float *v6;
  char *v7;
  unint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _BYTE *v19;
  char *v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  int64_t v32;
  char *v33;
  int v34;
  unint64_t v35;
  uint64_t v37;
  _QWORD *v38;
  void *__p;
  char *v40;
  void *v41[3];

  v2 = a2;
  v5 = (const void *)*a2;
  v4 = a2[1];
  v6 = (float *)(v4 - *a2);
  if (v4 == *a2)
  {
    v10 = 0;
    v33 = 0;
    goto LABEL_41;
  }
  if (((unint64_t)v6 & 0x8000000000000000) != 0)
    sub_1B032A0E8();
  v7 = (char *)operator new(v4 - *a2);
  v8 = (unint64_t)v6 & 0xFFFFFFFFFFFFFFF8;
  memcpy(v7, v5, (unint64_t)v6 & 0xFFFFFFFFFFFFFFF8);
  if (((unint64_t)v6 & 0xFFFFFFFFFFFFFFF8) == 0)
  {
    v10 = 0;
    operator delete(v7);
    goto LABEL_40;
  }
  v37 = a1;
  v38 = v2;
  v9 = 0;
  v10 = 0;
  v11 = 0;
  v12 = &v7[v8];
  __p = v7;
  v40 = &v7[v8];
  v13 = v7;
  do
  {
    while (1)
    {
      v15 = *(_DWORD *)v13;
      if (v9 >= v11)
        break;
      *(_DWORD *)v9 = v15;
      v9 += 4;
      v14 = (uint64_t)v9;
      v13 += 8;
      if (v13 == v12)
        goto LABEL_35;
    }
    v16 = (v9 - v10) >> 2;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62)
      sub_1B02D7758();
    if ((v11 - v10) >> 1 > v17)
      v17 = (v11 - v10) >> 1;
    if ((unint64_t)(v11 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v17;
    if (v18)
    {
      if (v18 >> 62)
        sub_1B02D72AC();
      v19 = operator new(4 * v18);
      v20 = &v19[4 * v16];
      *(_DWORD *)v20 = v15;
      v14 = (uint64_t)(v20 + 4);
      v21 = v9 - v10;
      if (v9 == v10)
        goto LABEL_21;
    }
    else
    {
      v19 = 0;
      v20 = (char *)(4 * v16);
      *(_DWORD *)(4 * v16) = v15;
      v14 = 4 * v16 + 4;
      v21 = v9 - v10;
      if (v9 == v10)
        goto LABEL_21;
    }
    v22 = v21 - 4;
    if (v22 < 0xBC)
    {
      v23 = v9;
      goto LABEL_20;
    }
    v25 = (v9 - 4 - v10) & 0xFFFFFFFFFFFFFFFCLL;
    if (&v19[v9 - v10 - 4 - v25] > &v19[v9 - v10 - 4])
    {
      v23 = v9;
      do
      {
LABEL_20:
        v24 = *((_DWORD *)v23 - 1);
        v23 -= 4;
        *((_DWORD *)v20 - 1) = v24;
        v20 -= 4;
      }
      while (v23 != v10);
      goto LABEL_21;
    }
    if (&v9[-v25 - 4] > v9 - 4)
    {
      v23 = v9;
      goto LABEL_20;
    }
    if ((unint64_t)(v10 - v19) < 0x20)
    {
      v23 = v9;
      goto LABEL_20;
    }
    v26 = (v22 >> 2) + 1;
    v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
    v23 = &v9[-v27];
    v20 -= v27;
    v28 = &v19[4 * v16 - 16];
    v29 = v9 - 16;
    v30 = v26 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 8;
    }
    while (v30);
    if (v26 != (v26 & 0x7FFFFFFFFFFFFFF8))
      goto LABEL_20;
LABEL_21:
    v11 = &v19[4 * v18];
    if (v10)
      operator delete(v10);
    v10 = v20;
    v12 = v40;
    v13 += 8;
    v9 = (char *)v14;
  }
  while (v13 != v40);
LABEL_35:
  a1 = v37;
  v2 = v38;
  operator delete(__p);
  v32 = v14 - (_QWORD)v10;
  if ((char *)v14 == v10)
  {
LABEL_40:
    v6 = 0;
    v33 = 0;
    goto LABEL_41;
  }
  if (v32 < 0)
    sub_1B02D7758();
  v33 = (char *)operator new(v32);
  v6 = (float *)&v33[4 * (v32 >> 2)];
  memcpy(v33, v10, v32);
LABEL_41:
  sub_1B02EC238((uint64_t)v41, (float *)v33, v6);
  v34 = sub_1B02EC564((uint64_t)v41, a1 + 8, (double **)v41);
  if (v41[0])
  {
    v41[1] = v41[0];
    operator delete(v41[0]);
  }
  if (v33)
    operator delete(v33);
  v35 = *(_QWORD *)(*v2 + 8 * v34);
  if (v10)
    operator delete(v10);
  return HIDWORD(v35);
}

void sub_1B03507B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  void *v23;

  if (__p)
  {
    operator delete(__p);
    v23 = a19;
  }
  if (v23)
    operator delete(v23);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0350854(uint64_t a1, int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v11;
  _QWORD v12[8];
  void *__p[2];
  __int128 v14;
  int v15;
  uint64_t v16[20];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16[0] = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v3 + 24;
  v16[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  v15 = 16;
  *(_QWORD *)((char *)&v12[1] + *(_QWORD *)(v11 - 24)) = *a2;
  std::ostream::operator<<();
  sub_1B02D7994(&v11, (uint64_t)" ± ", 4);
  std::ostream::operator<<();
  std::stringbuf::str();
  v11 = *v5;
  *(_QWORD *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = v5[3];
  v12[0] = v9 + 16;
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v16);
}

void sub_1B03509D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B02E983C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B03509E4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

void sub_1B0350A2C(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  float *v6;
  float *v7;
  float *v8;
  float *v9;
  float *v10;
  float v11;
  float v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  float *v19;
  float *v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _OWORD *v26;
  float *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  char *v31;
  float *v32;
  void *__p;
  float *v34;

  sub_1B0344A04(a2, a4, &__p);
  v32 = 0;
  v6 = (float *)__p;
  v7 = v34;
  if (__p == v34)
  {
    *(_DWORD *)a1 = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_QWORD *)(a1 + 8) = 0;
    goto LABEL_41;
  }
  v8 = 0;
  v9 = 0;
  v10 = 0;
  v11 = 0.0;
  while (v11 < *(float *)(a3 + 16) || v10 == v9)
  {
    v13 = *v6;
    if (v9 < v8)
    {
      *v9 = v13;
      v9[1] = v6[1];
      v9 += 2;
      v11 = v13 + v11;
      v6 += 2;
      if (v6 == v7)
        goto LABEL_35;
    }
    else
    {
      v14 = (char *)v9 - (char *)v10;
      v15 = ((char *)v9 - (char *)v10) >> 3;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 61)
        sub_1B032A0E8();
      if (v8 - v10 > v16)
        v16 = v8 - v10;
      if ((unint64_t)((char *)v8 - (char *)v10) >= 0x7FFFFFFFFFFFFFF8)
        v17 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      if (v17 >> 61)
        sub_1B02D72AC();
      v18 = operator new(8 * v17);
      v19 = (float *)&v18[8 * v15];
      *v19 = v13;
      v19[1] = v6[1];
      if (v10 == v9)
      {
        v21 = &v18[8 * v15];
        v8 = (float *)&v18[8 * v17];
        v9 = v19 + 2;
        v32 = (float *)v21;
        if (!v10)
          goto LABEL_23;
LABEL_22:
        operator delete(v10);
        goto LABEL_23;
      }
      if ((unint64_t)(v14 - 8) < 0x168
        || (v23 = ((char *)(v9 - 2) - (char *)v10) & 0xFFFFFFFFFFFFFFF8, &v18[v14 - 8 - v23] > &v18[v14 - 8])
        || (float *)((char *)v9 - v23 - 8) > v9 - 2
        || (unint64_t)((char *)v10 - v18) < 0x20)
      {
        v20 = v9;
        v21 = &v18[8 * v15];
        do
        {
LABEL_20:
          v22 = *((_QWORD *)v20 - 1);
          v20 -= 2;
          *((_QWORD *)v21 - 1) = v22;
          v21 -= 8;
        }
        while (v20 != v10);
        goto LABEL_21;
      }
      v24 = ((unint64_t)(v14 - 8) >> 3) + 1;
      v25 = 8 * (v24 & 0x3FFFFFFFFFFFFFFCLL);
      v20 = &v9[v25 / 0xFFFFFFFFFFFFFFFCLL];
      v21 = (char *)&v19[v25 / 0xFFFFFFFFFFFFFFFCLL];
      v26 = &v18[8 * v15 - 16];
      v27 = v9 - 4;
      v28 = v24 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v29 = *(_OWORD *)v27;
        *(v26 - 1) = *((_OWORD *)v27 - 1);
        *v26 = v29;
        v26 -= 2;
        v27 -= 8;
        v28 -= 4;
      }
      while (v28);
      if (v24 != (v24 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_20;
LABEL_21:
      v8 = (float *)&v18[8 * v17];
      v9 = v19 + 2;
      v32 = (float *)v21;
      if (v10)
        goto LABEL_22;
LABEL_23:
      v10 = (float *)v21;
      v11 = v13 + v11;
      v6 += 2;
      if (v6 == v7)
      {
LABEL_35:
        v10 = v32;
        break;
      }
    }
  }
  *(float *)a1 = v11;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v30 = (char *)v9 - (char *)v10;
  if (v9 != v10)
  {
    if (v30 < 0)
      sub_1B032A0E8();
    v31 = (char *)operator new((char *)v9 - (char *)v10);
    *(_QWORD *)(a1 + 8) = v31;
    *(_QWORD *)(a1 + 24) = &v31[8 * (v30 >> 3)];
    memcpy(v31, v10, v30 & 0xFFFFFFFFFFFFFFF8);
    *(_QWORD *)(a1 + 16) = &v31[v30 & 0xFFFFFFFFFFFFFFF8];
  }
  if (v10)
    operator delete(v10);
LABEL_41:
  if (__p)
  {
    v34 = (float *)__p;
    operator delete(__p);
  }
}

void sub_1B0350CF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  uint64_t v14;
  void **v15;
  void **v16;
  void *v18;
  void *v19;

  v16 = v15;
  v18 = *v16;
  if (*v16)
  {
    *(_QWORD *)(v14 + 16) = v18;
    operator delete(v18);
    if (!v13)
    {
LABEL_3:
      v19 = __p;
      if (!__p)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if (!v13)
  {
    goto LABEL_3;
  }
  operator delete(v13);
  v19 = __p;
  if (!__p)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(v19);
  _Unwind_Resume(exception_object);
}

void sub_1B0350D64(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  uint32x4_t *v8;
  uint64_t v9;
  int v10;
  CFTypeRef v11;
  unint64_t v12;
  uint64_t OutputDimension;
  uint64_t Output;
  uint64_t v15;
  uint64_t v16;
  CFTypeRef v17;
  CFTypeRef cf;
  char v19;

  v8 = *(uint32x4_t **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  LOBYTE(v17) = 0;
  v10 = *(unsigned __int8 *)(a3 + 8);
  if (*(_BYTE *)(a3 + 8))
  {
    v11 = *(CFTypeRef *)a3;
    if (*(_QWORD *)a3)
    {
      CFRetain(*(CFTypeRef *)a3);
      v17 = v11;
      v19 = 0;
      CFRetain(v11);
    }
    else
    {
      v17 = 0;
      v19 = 0;
    }
    cf = v11;
    v19 = 1;
  }
  else
  {
    LOBYTE(cf) = 0;
    v19 = 0;
  }
  v12 = (v9 - (uint64_t)v8) >> 2;
  sub_1B0350ED0(a1, v8, (uint64_t *)v12, (uint64_t)&cf);
  if (v19 && cf)
    CFRelease(cf);
  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  Output = MRLNeuralNetworkGetOutput();
  if (v12 <= 1)
    v15 = 1;
  else
    v15 = v12;
  if (a4 == 1)
    v16 = v15;
  else
    v16 = OutputDimension;
  *(_DWORD *)a5 = a4;
  if (a4 == 1)
    v15 = OutputDimension;
  *(_QWORD *)(a5 + 8) = v15;
  *(_QWORD *)(a5 + 16) = v16;
  *(_QWORD *)(a5 + 24) = Output;
  if (v10)
  {
    if (v17)
      CFRelease(v17);
  }
}

void sub_1B0350EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1B034D184((uint64_t)&a11);
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B0350EBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B0350ED0(uint64_t a1, uint32x4_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v7;
  unsigned int v8;
  char *v9;
  uint32x4_t *v10;
  unint64_t v11;
  char *v12;
  int32x4_t v13;
  int32x4_t *v14;
  int32x4_t v15;
  int32x4_t v16;
  unint64_t v17;
  int v18;
  _DWORD *v19;
  const void *v20;
  void *__p[2];
  char v22;

  v22 = 5;
  strcpy((char *)__p, "input");
  sub_1B03511C8(a1, a2, a3, (uint64_t)__p);
  if (v22 < 0)
  {
    operator delete(__p[0]);
    v7 = (uint64_t *)(a1 + 8);
    if (!sub_1B03501F4((uint64_t *)(a1 + 8), "position"))
      goto LABEL_17;
  }
  else
  {
    v7 = (uint64_t *)(a1 + 8);
    if (!sub_1B03501F4((uint64_t *)(a1 + 8), "position"))
      goto LABEL_17;
  }
  __p[0] = (void *)((_QWORD)a3 << 32);
  LODWORD(__p[1]) = 1;
  v8 = a3;
  if ((_DWORD)a3)
  {
    v9 = (char *)operator new(((4 * *(uint64_t *)((char *)__p + 4) + 0x3FFFFFFFCLL) & 0x3FFFFFFFCLL) + 4);
    v10 = (uint32x4_t *)v9;
    if (v8 >= 8uLL)
    {
      v11 = v8 - (unint64_t)(v8 & 7);
      v12 = &v9[4 * v11];
      v13 = (int32x4_t)xmmword_1B03B0EF0;
      v14 = (int32x4_t *)(v9 + 16);
      v15.i64[0] = 0x400000004;
      v15.i64[1] = 0x400000004;
      v16.i64[0] = 0x800000008;
      v16.i64[1] = 0x800000008;
      v17 = v11;
      do
      {
        v14[-1] = v13;
        *v14 = vaddq_s32(v13, v15);
        v13 = vaddq_s32(v13, v16);
        v14 += 2;
        v17 -= 8;
      }
      while (v17);
      if ((v8 & 7) == 0)
        goto LABEL_13;
    }
    else
    {
      LODWORD(v11) = 0;
      v12 = v9;
    }
    do
    {
      *(_DWORD *)v12 = v11;
      v12 += 4;
      LODWORD(v11) = v11 + 1;
    }
    while (v8 != (_DWORD)v11);
  }
  else
  {
    v12 = 0;
    v10 = 0;
  }
LABEL_13:
  v22 = 8;
  strcpy((char *)__p, "position");
  sub_1B03511C8(a1, v10, (uint64_t *)((v12 - (char *)v10) >> 2), (uint64_t)__p);
  if (v22 < 0)
    operator delete(__p[0]);
  if (v10)
    operator delete(v10);
LABEL_17:
  if (sub_1B03501F4(v7, "temperature"))
  {
    v18 = *(_DWORD *)(a1 + 120);
    v19 = operator new(4uLL);
    *v19 = v18;
    v22 = 11;
    strcpy((char *)__p, "temperature");
    sub_1B03527EC(a1, v19, (uint64_t *)1, (uint64_t)__p);
    if (v22 < 0)
      operator delete(__p[0]);
    operator delete(v19);
  }
  __p[0] = 0;
  if (*(_BYTE *)(a4 + 8) && (v20 = *(const void **)a4) != 0)
  {
    CFRetain(v20);
    MRLNeuralNetworkPredict();
  }
  else
  {
    MRLNeuralNetworkPredict();
    v20 = 0;
  }
  sub_1B0371078(a1);
  if (v20)
    CFRelease(v20);
}

void sub_1B0351150(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;

  if (a15 < 0)
    operator delete(__p);
  operator delete(v15);
  _Unwind_Resume(a1);
}

void sub_1B03511AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_1B0346448(&a9);
  sub_1B0346448(&a10);
  _Unwind_Resume(a1);
}

void sub_1B03511C8(uint64_t a1, uint32x4_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v7;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  CFStringRef v12;
  std::runtime_error *exception;
  __int128 *v14;

  sub_1B035136C(a1, a2, a3, (__int128 *)a4);
  v14 = (__int128 *)a4;
  sub_1B0351750((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14);
  v7 = (uint64_t *)sub_1B03514E4(a1, (uint64_t)a3);
  v14 = (__int128 *)a4;
  sub_1B0352650((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14)[7] = v7;
  v14 = (__int128 *)a4;
  sub_1B0352650((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14);
  MRLNeuralNetworkTensorAppendData();
  v8 = *(char *)(a4 + 23);
  if (v8 >= 0)
    v9 = (const UInt8 *)a4;
  else
    v9 = *(const UInt8 **)a4;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a4 + 23);
  else
    v10 = *(_QWORD *)(a4 + 8);
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = v11;
  v14 = (__int128 *)a4;
  sub_1B0352650((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14);
  MRLNeuralNetworkSetInputTensor();
  CFRelease(v12);
}

void sub_1B0351340(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0351358(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B034ABF0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B035136C(uint64_t a1, uint32x4_t *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t *v5;
  uint64_t v8;
  float32x4_t *v9;
  unint64_t v10;
  unsigned int *v11;
  float *v12;
  unint64_t v13;
  uint64_t v14;
  float32x4_t *v15;
  uint32x4_t *v16;
  uint64_t v17;
  float32x4_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t **v21;
  uint64_t *v22;
  __int128 *v23;

  v5 = a3;
  if (a3)
  {
    if ((unint64_t)a3 >> 62)
      sub_1B02D7758();
    v8 = 4 * (_QWORD)a3;
    v9 = (float32x4_t *)operator new(4 * (_QWORD)a3);
    bzero(v9, 4 * (_QWORD)v5);
    v10 = ((unint64_t)v5 - 1) & 0x3FFFFFFFFFFFFFFFLL;
    v11 = (unsigned int *)a2;
    v12 = (float *)v9;
    if (v10 < 7)
      goto LABEL_16;
    v13 = v10 + 1;
    v14 = v13 & 0x7FFFFFFFFFFFFFF8;
    v11 = &a2->u32[v14];
    v12 = &v9->f32[v14];
    v15 = v9 + 1;
    v16 = a2 + 1;
    v17 = v13 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v18 = vcvtq_f32_u32(*v16);
      v15[-1] = vcvtq_f32_u32(v16[-1]);
      *v15 = v18;
      v15 += 2;
      v16 += 2;
      v17 -= 8;
    }
    while (v17);
    if (v13 != (v13 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_16:
      do
      {
        v19 = *v11++;
        *v12++ = (float)v19;
      }
      while (v11 != (unsigned int *)((char *)a2 + 4 * (_QWORD)v5));
    }
    v5 = (uint64_t *)((char *)v9->i64 + 4 * (_QWORD)v5);
    v20 = (uint64_t *)((char *)v9 + v8);
  }
  else
  {
    v20 = 0;
    v9 = 0;
  }
  v23 = a4;
  v21 = sub_1B0351750((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v23);
  v22 = v21[7];
  if (v22)
  {
    v21[8] = v22;
    operator delete(v22);
    v21[7] = 0;
    v21[8] = 0;
    v21[9] = 0;
  }
  v21[7] = (uint64_t *)v9;
  v21[8] = v20;
  v21[9] = v5;
}

void sub_1B03514B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03514E4(uint64_t a1, uint64_t a2)
{
  CFNumberRef v2;
  CFTypeRef v3;
  CFDictionaryRef v4;
  uint64_t v5;
  std::runtime_error *exception;
  CFTypeRef cf;
  _QWORD v9[3];
  uint64_t v10;
  uint64_t valuePtr;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  CFTypeRef v15;
  uint64_t v16;

  v16 = *MEMORY[0x1E0C80C00];
  v10 = a2;
  sub_1B03518F0("InputDimension", &cf);
  valuePtr = 1;
  v2 = CFNumberCreate(0, kCFNumberLongLongType, &valuePtr);
  if (!v2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v12 = v3;
  CFRetain(v2);
  v13 = v2;
  sub_1B03518F0("SequenceLength", &valuePtr);
  sub_1B0352544(&v14, (CFTypeRef *)&valuePtr, &v10);
  v9[0] = &v12;
  v9[1] = 2;
  v4 = sub_1B034BD58((uint64_t)v9);
  v9[2] = v4;
  if (v15)
    CFRelease(v15);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (v12)
    CFRelease(v12);
  if (valuePtr)
    CFRelease((CFTypeRef)valuePtr);
  CFRelease(v2);
  if (cf)
    CFRelease(cf);
  v5 = MRLNeuralNetworkTensorCreate();
  if (v4)
    CFRelease(v4);
  return v5;
}

void sub_1B0351678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10)
{
  void *v10;

  __cxa_free_exception(v10);
  sub_1B034ABF0(&a10);
  _Unwind_Resume(a1);
}

void sub_1B0351694(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_1B0303828(exception_object);
}

void sub_1B035173C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B034ABF0((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_1B0351750(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x50uLL);
    v24 = v23 + 4;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1B02EB0A8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    v23[7] = 0;
    v23[8] = 0;
    v23[9] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_1B02D8180(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1B03518DC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B03518F0(const char *a1@<X0>, _QWORD *a2@<X8>)
{
  size_t v4;
  size_t v5;
  _BYTE *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  CFTypeRef v12;
  BOOL v26;
  BOOL v27;
  BOOL v28;
  uint64_t v44;
  uint64_t v45;
  CFTypeRef *v47;
  NSObject *v51;
  std::string *v52;
  std::logic_error *exception;
  std::string v54;
  _BYTE __dst[24];
  const char *v56;
  uint8_t buf[4];
  std::string *v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v56 = a1;
  v4 = strlen(a1);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v9 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v9 = v4 | 7;
    v10 = v9 + 1;
    v6 = operator new(v9 + 1);
    *(_QWORD *)&__dst[8] = v5;
    *(_QWORD *)&__dst[16] = v10 | 0x8000000000000000;
    *(_QWORD *)__dst = v6;
LABEL_11:
    memcpy(v6, a1, v5);
    v6[v5] = 0;
    v7 = __dst[23];
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
  __dst[23] = v4;
  v6 = __dst;
  if (v4)
    goto LABEL_11;
  __dst[0] = 0;
  v7 = __dst[23];
  if ((__dst[23] & 0x80000000) == 0)
  {
LABEL_5:
    v8 = (uint64_t *)__dst;
    switch(v7)
    {
      case 8:
        if (*(_QWORD *)__dst == 0x4C52556C65646F4DLL)
          goto LABEL_14;
        goto LABEL_174;
      case 9:
        if (*(_QWORD *)__dst == 0x7461446C65646F4DLL && __dst[8] == 97)
          goto LABEL_184;
        if (*(_QWORD *)__dst != 0x6D614E6C65646F4DLL || __dst[8] != 101)
          goto LABEL_174;
        goto LABEL_168;
      case 10:
        if (*(_QWORD *)__dst != 0x6D614E7475706E49 || *(unsigned __int16 *)&__dst[8] != 29541)
          goto LABEL_174;
        goto LABEL_98;
      case 11:
        if (*(_QWORD *)__dst != 0x614E74757074754FLL || *(_QWORD *)&__dst[3] != 0x73656D614E747570)
          goto LABEL_174;
        goto LABEL_186;
      case 12:
        if (*(_QWORD *)__dst != 0x7265566C65646F4DLL || *(_DWORD *)&__dst[8] != 1852795251)
          goto LABEL_174;
        goto LABEL_183;
      case 14:
        goto LABEL_153;
      case 18:
        if (*(_QWORD *)__dst != 0x617A69746E617551
          || *(_QWORD *)&__dst[8] != 0x617261506E6F6974
          || *(unsigned __int16 *)&__dst[16] != 29549)
        {
          goto LABEL_48;
        }
        goto LABEL_181;
      case 22:
        if (*(_QWORD *)__dst != 0x617A69746E617551
          || *(_QWORD *)&__dst[8] != 0x656863536E6F6974
          || *(_QWORD *)&__dst[14] != 0x656D614E656D6568)
        {
          goto LABEL_48;
        }
        goto LABEL_182;
      case 36:
        if (*(_QWORD *)__dst == 0x617A69746E617551
          && *(_QWORD *)&__dst[8] == 0x656863536E6F6974
          && *(_QWORD *)&__dst[16] == 0x7261656E694C656DLL
          && v56 == (const char *)0x676E615238746E49
          && *(_DWORD *)buf == 1852394853)
        {
          goto LABEL_188;
        }
        if (v7 == 14)
          goto LABEL_92;
        if (v7 != 36)
          goto LABEL_174;
        v26 = *(_QWORD *)__dst == 0x617A69746E617551 && *(_QWORD *)&__dst[8] == 0x656863536E6F6974;
        v27 = v26 && *(_QWORD *)&__dst[16] == 0x7261656E694C656DLL;
        v28 = v27 && v56 == (const char *)0x676E615238746E49;
        if (!v28 || *(_DWORD *)buf != 2019642725)
          goto LABEL_174;
        goto LABEL_189;
      default:
        goto LABEL_174;
    }
  }
LABEL_12:
  v11 = *(_QWORD *)&__dst[8];
  switch(*(_QWORD *)&__dst[8])
  {
    case 8:
      if (**(_QWORD **)__dst != 0x4C52556C65646F4DLL)
        goto LABEL_174;
LABEL_14:
      v12 = (CFTypeRef)*MEMORY[0x1E0D505B0];
      if (*MEMORY[0x1E0D505B0])
        CFRetain((CFTypeRef)*MEMORY[0x1E0D505B0]);
      goto LABEL_178;
    case 9:
      if (**(_QWORD **)__dst == 0x7461446C65646F4DLL && *(_BYTE *)(*(_QWORD *)__dst + 8) == 97)
      {
LABEL_184:
        v12 = (CFTypeRef)*MEMORY[0x1E0D50598];
        if (*MEMORY[0x1E0D50598])
          CFRetain((CFTypeRef)*MEMORY[0x1E0D50598]);
      }
      else
      {
        if (**(_QWORD **)__dst != 0x6D614E6C65646F4DLL || *(_BYTE *)(*(_QWORD *)__dst + 8) != 101)
          goto LABEL_174;
LABEL_168:
        v12 = (CFTypeRef)*MEMORY[0x1E0D505A0];
        if (*MEMORY[0x1E0D505A0])
          CFRetain((CFTypeRef)*MEMORY[0x1E0D505A0]);
      }
      goto LABEL_178;
    case 0xALL:
      if (**(_QWORD **)__dst != 0x6D614E7475706E49 || *(_WORD *)(*(_QWORD *)__dst + 8) != 29541)
        goto LABEL_174;
LABEL_98:
      v12 = (CFTypeRef)*MEMORY[0x1E0D50590];
      if (*MEMORY[0x1E0D50590])
        CFRetain((CFTypeRef)*MEMORY[0x1E0D50590]);
      goto LABEL_178;
    case 0xBLL:
      if (**(_QWORD **)__dst != 0x614E74757074754FLL || *(_QWORD *)(*(_QWORD *)__dst + 3) != 0x73656D614E747570)
        goto LABEL_174;
LABEL_186:
      v12 = (CFTypeRef)*MEMORY[0x1E0D505C0];
      if (*MEMORY[0x1E0D505C0])
        CFRetain((CFTypeRef)*MEMORY[0x1E0D505C0]);
      goto LABEL_178;
    case 0xCLL:
      if (**(_QWORD **)__dst == 0x7265566C65646F4DLL && *(_DWORD *)(*(_QWORD *)__dst + 8) == 1852795251)
      {
LABEL_183:
        v47 = (CFTypeRef *)MEMORY[0x1E0D505B8];
        goto LABEL_176;
      }
      if (*(_QWORD *)&__dst[8] != 18)
        goto LABEL_113;
      goto LABEL_105;
    case 0x12:
LABEL_105:
      if (**(_QWORD **)__dst == 0x617A69746E617551
        && *(_QWORD *)(*(_QWORD *)__dst + 8) == 0x617261506E6F6974
        && *(_WORD *)(*(_QWORD *)__dst + 16) == 29549)
      {
LABEL_181:
        v47 = (CFTypeRef *)MEMORY[0x1E0D505C8];
        goto LABEL_176;
      }
      v11 = *(_QWORD *)&__dst[8];
LABEL_113:
      if (v11 != 22)
        goto LABEL_122;
      if (**(_QWORD **)__dst == 0x617A69746E617551
        && *(_QWORD *)(*(_QWORD *)__dst + 8) == 0x656863536E6F6974
        && *(_QWORD *)(*(_QWORD *)__dst + 14) == 0x656D614E656D6568)
      {
LABEL_182:
        v47 = (CFTypeRef *)MEMORY[0x1E0D505E0];
        goto LABEL_176;
      }
      v11 = *(_QWORD *)&__dst[8];
LABEL_122:
      if (v11 != 36)
        goto LABEL_151;
      if (**(_QWORD **)__dst == 0x617A69746E617551
        && *(_QWORD *)(*(_QWORD *)__dst + 8) == 0x656863536E6F6974
        && *(_QWORD *)(*(_QWORD *)__dst + 16) == 0x7261656E694C656DLL
        && *(_QWORD *)(*(_QWORD *)__dst + 24) == 0x676E615238746E49
        && *(_DWORD *)(*(_QWORD *)__dst + 32) == 1852394853)
      {
LABEL_188:
        v47 = (CFTypeRef *)MEMORY[0x1E0D505D8];
        goto LABEL_176;
      }
      v11 = *(_QWORD *)&__dst[8];
      if (*(_QWORD *)&__dst[8] != 36)
        goto LABEL_151;
      if (**(_QWORD **)__dst == 0x617A69746E617551
        && *(_QWORD *)(*(_QWORD *)__dst + 8) == 0x656863536E6F6974
        && *(_QWORD *)(*(_QWORD *)__dst + 16) == 0x7261656E694C656DLL
        && *(_QWORD *)(*(_QWORD *)__dst + 24) == 0x676E615238746E49
        && *(_DWORD *)(*(_QWORD *)__dst + 32) == 2019642725)
      {
LABEL_189:
        v47 = (CFTypeRef *)MEMORY[0x1E0D505D0];
        goto LABEL_176;
      }
      if ((v7 & 0x80) != 0)
      {
LABEL_151:
        if (v11 != 14)
          goto LABEL_174;
        v8 = *(uint64_t **)__dst;
      }
      else
      {
LABEL_48:
        if (v7 != 14)
          goto LABEL_174;
LABEL_92:
        v8 = (uint64_t *)__dst;
      }
LABEL_153:
      v44 = *v8;
      v45 = *(uint64_t *)((char *)v8 + 6);
      if (v44 == 0x6D69447475706E49 && v45 == 0x6E6F69736E656D69)
      {
        v47 = (CFTypeRef *)MEMORY[0x1E0D505E8];
        goto LABEL_176;
      }
LABEL_174:
      if (!sub_1B03522A8(__dst, "SequenceLength"))
      {
        sub_1B0352370("Unexpected mrlkey: ", &v56);
        if (qword_1EEEB2D38 != -1)
          dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
        v51 = (id)qword_1EEEB2D30;
        if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
        {
          v52 = &v54;
          if ((v54.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v52 = (std::string *)v54.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315138;
          v58 = v52;
          _os_log_error_impl(&dword_1B02D2000, v51, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
        }

        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        std::logic_error::logic_error(exception, &v54);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
        __cxa_throw(exception, (struct type_info *)off_1E60CA338, MEMORY[0x1E0DE4360]);
      }
      v47 = (CFTypeRef *)MEMORY[0x1E0D505F0];
LABEL_176:
      v12 = *v47;
      if (*v47)
        CFRetain(*v47);
LABEL_178:
      sub_1B034AC30(a2, v12);
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      return;
    default:
      goto LABEL_113;
  }
}

void sub_1B0352130(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

const void **sub_1B0352248(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

const void **sub_1B0352278(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

BOOL sub_1B03522A8(_QWORD *a1, char *__s)
{
  size_t v4;

  v4 = strlen(__s);
  if ((*((char *)a1 + 23) & 0x80000000) == 0)
  {
    if (v4 != *((unsigned __int8 *)a1 + 23))
      return 0;
    return memcmp(a1, __s, v4) == 0;
  }
  if (v4 == a1[1])
  {
    if (v4 == -1)
      sub_1B0352530();
    a1 = (_QWORD *)*a1;
    return memcmp(a1, __s, v4) == 0;
  }
  return 0;
}

_QWORD *sub_1B0352338@<X0>(CFTypeRef cf@<X0>, _QWORD *a2@<X8>)
{
  if (cf)
    CFRetain(cf);
  return sub_1B034AC30(a2, cf);
}

uint64_t sub_1B0352370(const char *a1, const char **a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  size_t v11;
  const char *v12;
  size_t v13;
  uint64_t v15;
  uint64_t v16[8];
  void *__p[2];
  __int128 v18;
  int v19;
  uint64_t v20[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v20[0] = MEMORY[0x1E0DE4FE0] + 64;
  v15 = v7;
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24));
  std::ios_base::init(v9, v16);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v15 = v4 + 24;
  v20[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v16[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v18 = 0u;
  v19 = 16;
  v11 = strlen(a1);
  sub_1B02D7994(&v15, (uint64_t)a1, v11);
  v12 = *a2;
  v13 = strlen(v12);
  sub_1B02D7994(&v15, (uint64_t)v12, v13);
  std::stringbuf::str();
  v15 = *v6;
  *(uint64_t *)((char *)&v16[-1] + *(_QWORD *)(v15 - 24)) = v6[3];
  v16[0] = v10 + 16;
  if (SBYTE7(v18) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v20);
}

void sub_1B03524D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03524E8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

void sub_1B0352530()
{
  sub_1B02EA050("basic_string");
}

_QWORD *sub_1B0352544(_QWORD *a1, CFTypeRef *a2, uint64_t *a3)
{
  CFTypeRef v5;
  CFNumberRef v6;
  std::runtime_error *exception;
  uint64_t valuePtr;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  *a1 = v5;
  valuePtr = *a3;
  v6 = CFNumberCreate(0, kCFNumberLongType, &valuePtr);
  a1[1] = v6;
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B03525E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_1B0352620((const void **)v1);
  _Unwind_Resume(a1);
}

const void **sub_1B0352620(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

uint64_t **sub_1B0352650(uint64_t **a1, const void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t *v6;
  uint64_t **v7;
  int v8;
  size_t v9;
  const void *v10;
  uint64_t **v11;
  _QWORD *v12;
  const void *v13;
  const void *v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _QWORD *v23;
  _BYTE *v24;
  __int128 *v25;
  __int128 v26;
  uint64_t *v27;
  uint64_t *v28;

  v7 = a1 + 1;
  v6 = a1[1];
  if (v6)
  {
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = *((unsigned __int8 *)a2 + 23);
    else
      v9 = (size_t)a2[1];
    if (v8 >= 0)
      v10 = a2;
    else
      v10 = *a2;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v6;
        v14 = (const void *)v6[4];
        v12 = v6 + 4;
        v13 = v14;
        v15 = *((char *)v12 + 23);
        if (v15 >= 0)
          v16 = *((unsigned __int8 *)v12 + 23);
        else
          v16 = v12[1];
        if (v15 >= 0)
          v17 = v12;
        else
          v17 = v13;
        if (v16 >= v9)
          v18 = v9;
        else
          v18 = v16;
        v19 = memcmp(v10, v17, v18);
        v20 = v9 < v16;
        if (v19)
          v20 = v19 < 0;
        if (!v20)
          break;
        v6 = *v11;
        v7 = v11;
        if (!*v11)
          goto LABEL_27;
      }
      v21 = memcmp(v17, v10, v18);
      v22 = v16 < v9;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return v11;
      v6 = v11[1];
      if (!v6)
      {
        v7 = v11 + 1;
        goto LABEL_27;
      }
    }
  }
  else
  {
    v11 = a1 + 1;
LABEL_27:
    v23 = operator new(0x40uLL);
    v24 = v23 + 4;
    v25 = *a4;
    if (*((char *)*a4 + 23) < 0)
    {
      sub_1B02EB0A8(v24, *(void **)v25, *((_QWORD *)v25 + 1));
    }
    else
    {
      v26 = *v25;
      v23[6] = *((_QWORD *)v25 + 2);
      *(_OWORD *)v24 = v26;
    }
    v23[7] = 0;
    *v23 = 0;
    v23[1] = 0;
    v23[2] = v11;
    *v7 = v23;
    v27 = (uint64_t *)**a1;
    v28 = v23;
    if (v27)
    {
      *a1 = v27;
      v28 = *v7;
    }
    sub_1B02D8180(a1[1], v28);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return (uint64_t **)v23;
}

void sub_1B03527D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B03527EC(uint64_t a1, const void *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v7;
  int v8;
  const UInt8 *v9;
  CFIndex v10;
  CFStringRef v11;
  CFStringRef v12;
  std::runtime_error *exception;
  __int128 *v14;

  sub_1B0352990(a1, a2, a3, (__int128 *)a4);
  v14 = (__int128 *)a4;
  sub_1B0351750((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14);
  v7 = (uint64_t *)sub_1B03514E4(a1, (uint64_t)a3);
  v14 = (__int128 *)a4;
  sub_1B0352650((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14)[7] = v7;
  v14 = (__int128 *)a4;
  sub_1B0352650((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14);
  MRLNeuralNetworkTensorAppendData();
  v8 = *(char *)(a4 + 23);
  if (v8 >= 0)
    v9 = (const UInt8 *)a4;
  else
    v9 = *(const UInt8 **)a4;
  if (v8 >= 0)
    v10 = *(unsigned __int8 *)(a4 + 23);
  else
    v10 = *(_QWORD *)(a4 + 8);
  v11 = CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
  if (!v11)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v12 = v11;
  v14 = (__int128 *)a4;
  sub_1B0352650((uint64_t **)(a1 + 80), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v14);
  MRLNeuralNetworkSetInputTensor();
  CFRelease(v12);
}

void sub_1B0352964(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B035297C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B034ABF0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0352990(uint64_t a1, const void *a2, uint64_t *a3, __int128 *a4)
{
  uint64_t *v5;
  size_t v8;
  char *v9;
  uint64_t **v10;
  uint64_t *v11;
  __int128 *v12;

  v5 = a3;
  if (a3)
  {
    if (((unint64_t)a3 & 0x8000000000000000) != 0)
      sub_1B02D7758();
    v8 = 4 * (_QWORD)a3;
    v9 = (char *)operator new(4 * (_QWORD)a3);
    v5 = (uint64_t *)&v9[4 * (_QWORD)v5];
    memcpy(v9, a2, v8);
  }
  else
  {
    v9 = 0;
  }
  v12 = a4;
  v10 = sub_1B0351750((uint64_t **)(a1 + 56), (const void **)a4, (uint64_t)&unk_1B03B0E24, &v12);
  v11 = v10[7];
  if (v11)
  {
    v10[8] = v11;
    operator delete(v11);
    v10[7] = 0;
    v10[8] = 0;
    v10[9] = 0;
  }
  v10[7] = (uint64_t *)v9;
  v10[8] = v5;
  v10[9] = v5;
}

void sub_1B0352A5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

char *sub_1B0352A88(_QWORD *a1, const void *a2, uint64_t a3, float a4)
{
  char *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  int64x2_t *v15;
  char *v16;
  int64_t v17;
  void *v18;
  unint64_t v19;
  char *i8;
  unint64_t v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  __int128 v27;

  v5 = (char *)*a1;
  v4 = (char *)a1[1];
  v6 = (uint64_t)&v4[-*a1] >> 5;
  v7 = v6 + 1;
  if ((unint64_t)(v6 + 1) >> 59)
    sub_1B02D7758();
  v12 = a1[2] - (_QWORD)v5;
  if (v12 >> 4 > v7)
    v7 = v12 >> 4;
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
    v13 = 0x7FFFFFFFFFFFFFFLL;
  else
    v13 = v7;
  if (v13)
  {
    if (v13 >> 59)
      sub_1B02D72AC();
    v14 = (char *)operator new(32 * v13);
  }
  else
  {
    v14 = 0;
  }
  v16 = &v14[32 * v13];
  *((_QWORD *)&v27 + 1) = v16;
  v15 = (int64x2_t *)&v14[32 * v6];
  v15->i64[1] = 0;
  *(float *)v15->i32 = a4;
  v15[1].i64[0] = 0;
  v15[1].i64[1] = 0;
  v17 = a3 - (_QWORD)a2;
  if (v17)
  {
    if (v17 < 0)
      sub_1B02D7758();
    v18 = operator new(v17);
    v15->i64[1] = (uint64_t)v18;
    v19 = (unint64_t)v18 + 4 * (v17 >> 2);
    memcpy(v18, a2, v17);
    v15[1] = vdupq_n_s64(v19);
  }
  i8 = v15[2].i8;
  if (v4 == v5)
  {
    *a1 = v15;
    a1[1] = i8;
    a1[2] = v16;
  }
  else
  {
    v21 = 0;
    do
    {
      v22 = v15[v21 / 0x10].i8;
      v23 = &v4[v21];
      *((_DWORD *)v22 - 8) = *(_DWORD *)&v4[v21 - 32];
      *((_QWORD *)v22 - 2) = 0;
      *((_QWORD *)v22 - 1) = 0;
      *(_OWORD *)(v22 - 24) = *(_OWORD *)&v4[v21 - 24];
      *((_QWORD *)v22 - 1) = *(_QWORD *)&v4[v21 - 8];
      *((_QWORD *)v23 - 3) = 0;
      *((_QWORD *)v23 - 2) = 0;
      *((_QWORD *)v23 - 1) = 0;
      v21 -= 32;
    }
    while (&v4[v21] != v5);
    v4 = (char *)*a1;
    v24 = (char *)a1[1];
    *a1 = &v15[v21 / 0x10];
    *(_QWORD *)&v27 = v15 + 2;
    *(_OWORD *)(a1 + 1) = v27;
    i8 = v15[2].i8;
    while (v24 != v4)
    {
      v25 = (void *)*((_QWORD *)v24 - 3);
      if (v25)
      {
        *((_QWORD *)v24 - 2) = v25;
        operator delete(v25);
      }
      v24 -= 32;
    }
  }
  if (v4)
    operator delete(v4);
  return i8;
}

void sub_1B0352C54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void **v2;
  _QWORD *v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v2;
  if (*v2)
  {
    *v3 = v5;
    operator delete(v5);
  }
  sub_1B0344238((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0352C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v5;
  uint64_t v6;
  float v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t v10;
  uint64_t v11;
  float v12;
  uint64_t v13;
  uint64_t v14;
  float v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  float v21;
  _BYTE *v22;
  _BYTE *v23;
  size_t v24;
  void *v25;
  _QWORD *v26;
  void *v27;
  __int128 v28;
  size_t __sz;
  uint64_t v30;
  uint64_t v31;
  void *v33;
  void *v34;
  void *v35;

  v3 = a3 - 2;
  if (a3 < 2)
    return;
  v5 = v3 >> 1;
  v6 = a1 + 32 * (v3 >> 1);
  v7 = *(float *)v6;
  v9 = *(_BYTE **)(v6 + 8);
  v8 = *(_BYTE **)(v6 + 16);
  v10 = v8 - v9;
  if (v8 != v9)
  {
    if ((v10 & 0x8000000000000000) != 0)
      sub_1B02D7758();
    v35 = operator new(v8 - v9);
    memcpy(v35, v9, v10);
    v10 = (size_t)v35;
  }
  v11 = a2 - 32;
  v12 = *(float *)(a2 - 32);
  v13 = *(_QWORD *)(a2 - 24);
  v14 = *(_QWORD *)(a2 - 16);
  if (v14 != v13)
  {
    if (v14 - v13 < 0)
      sub_1B02D7758();
    v34 = operator new(v14 - v13);
    operator delete(v34);
  }
  if (v10)
    operator delete((void *)v10);
  if (v7 <= v12)
    return;
  v15 = *(float *)(a2 - 32);
  v16 = *(_QWORD *)(a2 - 24);
  v17 = *(_OWORD *)(a2 - 16);
  *(_QWORD *)(a2 - 24) = 0;
  *(_QWORD *)(a2 - 16) = 0;
  *(_QWORD *)(a2 - 8) = 0;
  v28 = v17;
  v30 = v16;
  v31 = v17;
  __sz = v17 - v16;
  do
  {
    v18 = v6;
    *(_DWORD *)v11 = *(_DWORD *)v6;
    v19 = *(void **)(v11 + 8);
    if (v19)
    {
      *(_QWORD *)(v11 + 16) = v19;
      operator delete(v19);
      *(_QWORD *)(v11 + 8) = 0;
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
    }
    v20 = (_QWORD *)(v6 + 8);
    *(_OWORD *)(v11 + 8) = *(_OWORD *)(v6 + 8);
    *(_QWORD *)(v11 + 24) = *(_QWORD *)(v6 + 24);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    if (!v5)
    {
      *(float *)v6 = v15;
      v26 = (_QWORD *)(v6 + 16);
      goto LABEL_28;
    }
    v5 = (v5 - 1) >> 1;
    v6 = a1 + 32 * v5;
    v21 = *(float *)v6;
    v23 = *(_BYTE **)(v6 + 8);
    v22 = *(_BYTE **)(v6 + 16);
    v24 = v22 - v23;
    if (v22 == v23)
    {
      v25 = 0;
      if (v31 == v16)
        goto LABEL_23;
LABEL_21:
      if ((__sz & 0x8000000000000000) != 0)
        sub_1B02D7758();
      v33 = operator new(__sz);
      operator delete(v33);
      goto LABEL_23;
    }
    if ((v24 & 0x8000000000000000) != 0)
      sub_1B02D7758();
    v25 = operator new(v22 - v23);
    memcpy(v25, v23, v24);
    v16 = v30;
    if (v31 != v30)
      goto LABEL_21;
LABEL_23:
    if (v25)
      operator delete(v25);
    v11 = v18;
  }
  while (v21 > v15);
  v26 = (_QWORD *)(v18 + 16);
  v27 = *(void **)(v18 + 8);
  *(float *)v18 = v15;
  if (v27)
  {
    *v26 = v27;
    operator delete(v27);
    *v20 = 0;
    *(_QWORD *)(v18 + 16) = 0;
    *(_QWORD *)(v18 + 24) = 0;
  }
LABEL_28:
  *v20 = v16;
  *(_OWORD *)v26 = v28;
}

void sub_1B0352F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26)
{
  void *v26;

  if (__p)
    operator delete(__p);
  if (v26)
    operator delete(v26);
  _Unwind_Resume(exception_object);
}

void sub_1B0352FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  int64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  float v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  void *v16;
  float v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void *v21;
  void *v22;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;

  if (a3 >= 2)
  {
    v4 = 0;
    v5 = *(_DWORD *)a1;
    v26 = *(_QWORD *)(a1 + 16);
    v27 = *(_QWORD *)(a1 + 8);
    v25 = *(_QWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    v6 = (unint64_t)(a3 - 2) >> 1;
    v7 = a1;
    *(_QWORD *)(a1 + 8) = 0;
    do
    {
      v9 = v7 + 32 * (v4 + 1);
      v10 = 2 * v4;
      v4 = (2 * v4) | 1;
      v11 = v10 + 2;
      if (v10 + 2 < a3)
      {
        v12 = *(float *)v9;
        v14 = *(_BYTE **)(v9 + 8);
        v13 = *(_BYTE **)(v9 + 16);
        v15 = v13 - v14;
        if (v13 == v14)
        {
          v16 = 0;
        }
        else
        {
          if ((v15 & 0x8000000000000000) != 0)
            sub_1B02D7758();
          v16 = operator new(v13 - v14);
          memcpy(v16, v14, v15);
        }
        v17 = *(float *)(v9 + 32);
        v18 = *(_QWORD *)(v9 + 40);
        v19 = *(_QWORD *)(v9 + 48);
        if (v19 != v18)
        {
          if (v19 - v18 < 0)
            sub_1B02D7758();
          v28 = operator new(v19 - v18);
          operator delete(v28);
        }
        if (v16)
          operator delete(v16);
        if (v12 > v17)
        {
          v9 += 32;
          v4 = v11;
        }
      }
      *(_DWORD *)v7 = *(_DWORD *)v9;
      v20 = *(void **)(v7 + 8);
      if (v20)
      {
        *(_QWORD *)(v7 + 16) = v20;
        operator delete(v20);
        *(_QWORD *)(v7 + 8) = 0;
        *(_QWORD *)(v7 + 16) = 0;
        *(_QWORD *)(v7 + 24) = 0;
      }
      v8 = (_QWORD *)(v9 + 8);
      *(_OWORD *)(v7 + 8) = *(_OWORD *)(v9 + 8);
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v9 + 24);
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)(v9 + 24) = 0;
      v7 = v9;
    }
    while (v4 <= v6);
    if (a2 - 32 == v9)
    {
      *(_DWORD *)v9 = v5;
      v22 = *(void **)(v9 + 8);
      if (v22)
      {
        *(_QWORD *)(v9 + 16) = v22;
        operator delete(v22);
        *v8 = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 24) = 0;
      }
      *(_QWORD *)(v9 + 8) = v27;
      *(_QWORD *)(v9 + 16) = v26;
      *(_QWORD *)(v9 + 24) = v25;
    }
    else
    {
      *(_DWORD *)v9 = *(_DWORD *)(a2 - 32);
      v21 = *(void **)(v9 + 8);
      if (v21)
      {
        *(_QWORD *)(v9 + 16) = v21;
        operator delete(v21);
        *v8 = 0;
        *(_QWORD *)(v9 + 16) = 0;
        *(_QWORD *)(v9 + 24) = 0;
      }
      *(_OWORD *)(v9 + 8) = *(_OWORD *)(a2 - 24);
      *(_QWORD *)(v9 + 24) = *(_QWORD *)(a2 - 8);
      *(_DWORD *)(a2 - 32) = v5;
      *(_QWORD *)(a2 - 24) = v27;
      *(_QWORD *)(a2 - 16) = v26;
      *(_QWORD *)(a2 - 8) = v25;
      sub_1B0352C78(a1, v9 + 32, (v9 + 32 - a1) >> 5);
    }
  }
}

void sub_1B0353284(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
  if (__p)
    operator delete(__p);
  if (a13)
    operator delete(a13);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B03532E4(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  int v11;
  _BYTE *v12;
  _BYTE *v13;
  int64_t v14;
  char *v15;

  a1[2] = 0;
  *a1 = 0;
  a1[1] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = v4 - *a2;
  if (v4 != *a2)
  {
    if (v5 < 0)
      sub_1B02D7758();
    v6 = (char *)operator new(v4 - *a2);
    v7 = 0;
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[32 * (v5 >> 5)];
    do
    {
      v9 = v3 + v7;
      v10 = &v6[v7];
      v11 = *(_DWORD *)(v3 + v7);
      *(_QWORD *)&v6[v7 + 8] = 0;
      *(_DWORD *)v10 = v11;
      *((_QWORD *)v10 + 2) = 0;
      *((_QWORD *)v10 + 3) = 0;
      v13 = *(_BYTE **)(v3 + v7 + 8);
      v12 = *(_BYTE **)(v3 + v7 + 16);
      v14 = v12 - v13;
      if (v12 != v13)
      {
        if (v14 < 0)
          sub_1B02D7758();
        v15 = (char *)operator new(v12 - v13);
        *(_QWORD *)&v6[v7 + 8] = v15;
        v8 = &v15[4 * (v14 >> 2)];
        *((_QWORD *)v10 + 2) = v15;
        *((_QWORD *)v10 + 3) = v8;
        memcpy(v15, v13, v14);
        *((_QWORD *)v10 + 2) = v8;
      }
      v7 += 32;
    }
    while (v9 + 32 != v4);
    a1[1] = &v6[v7];
  }
  return a1;
}

void sub_1B0353414(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  void *v6;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0353494(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = **(_QWORD **)(a1 + 16);
    v4 = **(_QWORD **)(a1 + 8);
    while (v3 != v4)
    {
      v5 = *(void **)(v3 - 24);
      if (v5)
      {
        *(_QWORD *)(v3 - 16) = v5;
        operator delete(v5);
      }
      v3 -= 32;
    }
  }
  return a1;
}

void sub_1B0353624(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0353900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B0353938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B0353974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B0353AA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0353B54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPActivationMatrix;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B0353EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1B0353FC8(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  float *v9;
  float *v10;
  BOOL v11;
  char v12;
  char *v13;
  char *v14;
  unint64_t v15;
  float v16;
  float v17;
  unint64_t v18;
  uint64_t v19;
  float v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  float *v40;
  float *v41;
  uint64_t v42;
  uint64_t v43;
  float *v44;
  uint64_t v45;
  unint64_t v46;
  float v47;
  int v48;
  float *v49;
  BOOL v51;

  if (!*(_BYTE *)(a1 + 32))
  {
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 40);
    v5 = *(const void **)a1;
    v4 = *(_QWORD *)(a1 + 8);
    v6 = v4 - *(_QWORD *)a1;
    if (v4 == *(_QWORD *)a1)
    {
      *(_BYTE *)(a1 + 32) = 1;
      return a1 + 40;
    }
    if (v6 < 0)
      sub_1B02D7758();
    v9 = (float *)operator new(v4 - *(_QWORD *)a1);
    v10 = &v9[2 * (v6 >> 3)];
    memcpy(v9, v5, v6);
    v11 = 1;
    v12 = 1;
    while (1)
    {
      v14 = *(char **)(a1 + 40);
      v13 = *(char **)(a1 + 48);
      v15 = (v13 - v14) >> 3;
      if (v15 >= *(unsigned int *)(a2 + 16) || !v11)
      {
LABEL_52:
        *(_BYTE *)(a1 + 32) = 1;
        operator delete(v9);
        return a1 + 40;
      }
      if (*(_QWORD *)a2)
      {
        if (*(_QWORD *)a2 == 1)
        {
          v16 = v9[1];
          v17 = *(float *)(a2 + 12);
          a3 = v16 + a3;
          v11 = a3 < (float)(1.0 - v17);
          if (v16 > v17)
            goto LABEL_12;
        }
        else
        {
          v11 = 1;
          if ((v12 & 1) != 0)
          {
LABEL_12:
            v18 = *(_QWORD *)(a1 + 56);
            if ((unint64_t)v13 >= v18)
              goto LABEL_17;
LABEL_13:
            *(_QWORD *)v13 = *(_QWORD *)v9;
            *(_QWORD *)(a1 + 48) = v13 + 8;
            v12 = 1;
            v19 = (char *)v10 - (char *)v9;
            if ((char *)v10 - (char *)v9 >= 9)
              goto LABEL_40;
            goto LABEL_6;
          }
        }
        v12 = 0;
        v19 = (char *)v10 - (char *)v9;
        if ((char *)v10 - (char *)v9 >= 9)
          goto LABEL_40;
      }
      else
      {
        v20 = *(float *)(a2 + 12);
        v11 = (float)(v9[1] + a3) < v20;
        if (a3 < v20)
        {
          a3 = v9[1] + a3;
          v18 = *(_QWORD *)(a1 + 56);
          if ((unint64_t)v13 >= v18)
          {
LABEL_17:
            v51 = v11;
            v21 = v18 - (_QWORD)v14;
            if (v21 >> 2 <= v15 + 1)
              v22 = v15 + 1;
            else
              v22 = v21 >> 2;
            if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
              v23 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v23 = v22;
            if (v23 >> 61)
              sub_1B02D72AC();
            v24 = (char *)operator new(8 * v23);
            v25 = &v24[8 * v15];
            *(_QWORD *)v25 = *(_QWORD *)v9;
            v26 = v25 + 8;
            if (v13 != v14)
            {
              v27 = v13 - v14 - 8;
              if (v27 < 0x58)
                goto LABEL_59;
              if ((unint64_t)(v14 - v24) < 0x20)
                goto LABEL_59;
              v28 = (v27 >> 3) + 1;
              v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
              v30 = &v13[-v29];
              v25 -= v29;
              v31 = &v24[8 * v15 - 16];
              v32 = v13 - 16;
              v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v34 = *(_OWORD *)v32;
                *((_OWORD *)v31 - 1) = *((_OWORD *)v32 - 1);
                *(_OWORD *)v31 = v34;
                v31 -= 32;
                v32 -= 32;
                v33 -= 4;
              }
              while (v33);
              v13 = v30;
              if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_59:
                do
                {
                  v35 = *((_QWORD *)v13 - 1);
                  v13 -= 8;
                  *((_QWORD *)v25 - 1) = v35;
                  v25 -= 8;
                }
                while (v13 != v14);
              }
              v13 = v14;
            }
            *(_QWORD *)(a1 + 40) = v25;
            *(_QWORD *)(a1 + 48) = v26;
            *(_QWORD *)(a1 + 56) = &v24[8 * v23];
            if (v13)
              operator delete(v13);
            v11 = v51;
            *(_QWORD *)(a1 + 48) = v26;
            v12 = 1;
            v19 = (char *)v10 - (char *)v9;
            if ((char *)v10 - (char *)v9 < 9)
              goto LABEL_6;
LABEL_40:
            v36 = 0;
            v37 = v19 >> 3;
            v38 = *(_QWORD *)v9;
            v39 = (unint64_t)((v19 >> 3) - 2) >> 1;
            v40 = v9;
            do
            {
              v41 = v40;
              v40 += 2 * v36 + 2;
              v42 = 2 * v36;
              v36 = (2 * v36) | 1;
              v43 = v42 + 2;
              if (v43 < v37 && v40[1] < v40[3])
              {
                v40 += 2;
                v36 = v43;
              }
              *(_QWORD *)v41 = *(_QWORD *)v40;
            }
            while (v36 <= v39);
            v44 = v10 - 2;
            if (v40 == v10 - 2)
            {
              *(_QWORD *)v40 = v38;
            }
            else
            {
              *(_QWORD *)v40 = *(_QWORD *)v44;
              *(_QWORD *)v44 = v38;
              v45 = (char *)v40 - (char *)v9 + 8;
              if (v45 >= 9)
              {
                v46 = (((unint64_t)v45 >> 3) - 2) >> 1;
                v47 = v40[1];
                if (v9[2 * v46 + 1] < v47)
                {
                  v48 = *(_DWORD *)v40;
                  do
                  {
                    v49 = v40;
                    v40 = &v9[2 * v46];
                    *(_QWORD *)v49 = *(_QWORD *)v40;
                    if (!v46)
                      break;
                    v46 = (v46 - 1) >> 1;
                  }
                  while (v9[2 * v46 + 1] < v47);
                  *(_DWORD *)v40 = v48;
                  v40[1] = v47;
                }
              }
            }
            goto LABEL_6;
          }
          goto LABEL_13;
        }
        v12 = 0;
        a3 = v9[1] + a3;
        v19 = (char *)v10 - (char *)v9;
        if ((char *)v10 - (char *)v9 >= 9)
          goto LABEL_40;
      }
LABEL_6:
      v10 -= 2;
      if (v9 == v10)
        goto LABEL_52;
    }
  }
  return a1 + 40;
}

void sub_1B0354374(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B0354388(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B035466C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B035467C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B035468C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B035469C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03546B0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0354E90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0354EA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0354F04(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0354F14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0355174()
{
  sub_1B02EA050("vector");
}

void sub_1B0355310(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0355394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03555AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B035563C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPLexiconCursors;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B0355A24(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, std::string *a10, __int128 a11, __int128 a12, int64_t a13)
{
  void *v13;
  void *v14;
  const std::string::value_type *v16;
  std::string *v17;
  __int128 v18;
  __int128 *v19;

  operator delete(v13);

  __cxa_begin_catch(a1);
  sub_1B02DCBB8(&a10, "Failed to load encoder network");
  espresso_plan_get_error_info();
  v17 = std::string::append((std::string *)&a10, v16);
  v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  a13 = v17->__r_.__value_.__r.__words[2];
  a12 = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(a11) < 0)
    operator delete(a10);
  if (a13 >= 0)
    v19 = &a12;
  else
    v19 = (__int128 *)a12;
  sub_1B036AFC8(2u, (uint64_t)v19);
}

void sub_1B0355B14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B03558A0);
}

void sub_1B0355B2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  void *v22;
  void *v23;

  if (a21 < 0)
    operator delete(__p);
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B0355BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionEncoderTransformer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B0355C94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0355CA4(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_computeCaptionForImageImpl_outputs_, a1[5], a1[6]);
}

void sub_1B0355E80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0355E94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0355EA8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0355F48(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0355F58(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_computeCaptionForPixelBufferImpl_outputs_, a1[5], a1[6]);
}

void sub_1B0356100(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0356114(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0356128(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03561C8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B03561D8(_QWORD *a1)
{
  return MEMORY[0x1E0DE7D20](a1[4], sel_computeCaptionForVideoPixelBufferImpl_outputs_, a1[5], a1[6]);
}

void sub_1B03563C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B03563D8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03563F0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0356544(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0356614(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0356718(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B0356C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B0357164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B0357674(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{

  _Unwind_Resume(a1);
}

void sub_1B0357880(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0357894(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B03578AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03578C0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0357C20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B0357EA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0358338(_Unwind_Exception *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  void *v12;
  va_list va;

  va_start(va, a12);

  sub_1B03583B4((void **)va);
  _Unwind_Resume(a1);
}

void **sub_1B03583B4(void **a1)
{
  id *v2;
  id *v3;
  void *v4;
  id *v5;

  v2 = (id *)*a1;
  if (*a1)
  {
    v3 = (id *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 2;

        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1B03584E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0358618(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B035862C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B035863C(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  int Script;

  v3 = a3;
  if (!sub_1B03606D4(v3))
  {
    v5 = v3;
    if ((unint64_t)objc_msgSend_length(v5, v6, v7, v8) < 2)
    {
      objc_msgSend_characterAtIndex_(v5, v9, 0, v10);
      Script = uscript_getScript();

      if (Script == 25)
      {
LABEL_7:
        v4 = 0;
        goto LABEL_9;
      }
    }
    else
    {

    }
    if (!sub_1B0360930(v5))
    {
      v4 = !sub_1B03609BC(v5);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  v4 = 2;
LABEL_9:

  return v4;
}

void sub_1B03586E8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03586FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0358710(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0358724(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0358740(uint64_t a1, uint64_t a2, void *a3)
{
  if (sub_1B03606D4(a3))
    return 2;
  else
    return 0;
}

uint64_t sub_1B0358770()
{
  return 1;
}

uint64_t **sub_1B035892C(uint64_t **a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, void *a5, void *a6, void *a7, void *a8, float a9, void *a10)
{
  id v15;
  id v16;
  const char *v17;
  uint64_t v18;
  _QWORD *v19;
  id v20;
  const __CFArray *v21;
  CFArrayRef v22;
  void *v23;
  void *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  void *v33;
  id v34;
  uint64_t v35;
  _OWORD *v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t *v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  int v45;
  size_t v46;
  const void *v47;
  _QWORD *v48;
  const void *v49;
  const void *v50;
  int v51;
  size_t v52;
  const void *v53;
  size_t v54;
  int v55;
  _BOOL4 v56;
  char *v57;
  char *v58;
  _QWORD *v59;
  _OWORD *v60;
  BOOL v61;
  char *v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  int v69;
  size_t v70;
  const void *v71;
  void *v72;
  void **v73;
  size_t v74;
  int v75;
  BOOL v76;
  _QWORD *v77;
  __int128 *v78;
  _QWORD *v79;
  int v80;
  size_t v81;
  const void *v82;
  size_t v83;
  int v84;
  _BOOL4 v85;
  int v86;
  _BOOL4 v87;
  _OWORD *v88;
  void *v89;
  char *i;
  void *v91;
  id v92;
  const char *v93;
  void *v94;
  id v95;
  char *v96;
  char *v97;
  _OWORD *v98;
  __int128 v99;
  char *v100;
  char **v101;
  char **v102;
  int v103;
  size_t v104;
  _QWORD *v105;
  const void *v106;
  const void *v107;
  int v108;
  size_t v109;
  const void *v110;
  size_t v111;
  int v112;
  _BOOL4 v113;
  char *v114;
  _QWORD *v115;
  _OWORD *v116;
  id v117;
  id v118;
  const char *v119;
  const char *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  void *v125;
  void *v126;
  id v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t **v137;
  uint64_t *v138;
  uint64_t **v139;
  unint64_t v140;
  uint64_t *v141;
  uint64_t *v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  _BYTE *v148;
  int v149;
  uint64_t v150;
  int v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t *v155;
  uint64_t v156;
  uint64_t v157;
  float v158;
  uint64_t *v159;
  char *v161;
  void *v162;
  void *v166;
  uint64_t *v167;
  CFIndex v168;
  id v169;
  id v170;
  void *v171;
  const __CFArray *v172;
  const __CFArray *v173;
  CFIndex Count;
  void *v175;
  char **v176;
  uint64_t **v177;
  uint64_t **v178;
  id v179;
  CFArrayRef theArray;
  id v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  void *__p[2];
  uint64_t *v187;
  uint64_t v188;

  v188 = *MEMORY[0x1E0C80C00];
  v15 = a5;
  v16 = a6;
  v170 = a7;
  v167 = a8;
  v169 = a10;
  a1[1] = 0;
  a1[2] = 0;
  a1[4] = 0;
  v19 = a1 + 4;
  v177 = a1 + 1;
  v178 = a1;
  *a1 = (uint64_t *)(a1 + 1);
  a1[3] = (uint64_t *)(a1 + 4);
  v176 = (char **)(a1 + 3);
  a1[5] = 0;
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  *((_OWORD *)a1 + 5) = 0u;
  a1[12] = 0;
  a1[17] = (uint64_t *)1;
  v162 = v15;
  v166 = v16;
  if (v16)
  {
    sub_1B0359790(v16);
    v171 = (void *)objc_claimAutoreleasedReturnValue();
    if (!v170)
      goto LABEL_142;
  }
  else if (v15)
  {
    objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v17, (uint64_t)v15, v18);
    v23 = (void *)objc_claimAutoreleasedReturnValue();
    v24 = (void *)MEMORY[0x1E0C99D50];
    objc_msgSend_path(v23, v25, v26, v27);
    v28 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_dataWithContentsOfFile_(v24, v29, (uint64_t)v28, v30);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

    v181 = 0;
    objc_msgSend_JSONObjectWithData_options_error_(MEMORY[0x1E0CB36D8], v32, (uint64_t)v31, 0, &v181);
    v33 = (void *)objc_claimAutoreleasedReturnValue();
    v34 = v181;
    sub_1B0359790(v33);
    v35 = objc_claimAutoreleasedReturnValue();

    v171 = (void *)v35;
    if (!v170)
      goto LABEL_142;
  }
  else
  {
    v171 = 0;
    if (!v170)
      goto LABEL_142;
  }
  v20 = v170;
  CFRetain(v20);
  sub_1B035BE48(&theArray, v20);

  v21 = theArray;
  if (theArray)
  {
    Count = CFArrayGetCount(theArray);
    v22 = theArray;
    if (theArray)
    {
      v168 = CFArrayGetCount(theArray);
      *((_QWORD *)&v182 + 1) = 0;
      *(_QWORD *)&v183 = 0;
      *(_QWORD *)&v182 = (char *)&v182 + 8;
      if (!Count)
        goto LABEL_11;
      goto LABEL_69;
    }
    v168 = 0;
    *((_QWORD *)&v182 + 1) = 0;
    *(_QWORD *)&v183 = 0;
    *(_QWORD *)&v182 = (char *)&v182 + 8;
    if (Count)
    {
LABEL_69:
      v63 = 0;
      v172 = v22;
      v173 = v21;
      while (1)
      {
        if (v21 == v22 && v63 == v168)
          goto LABEL_11;
        v64 = v19;
        sub_1B035BFB4(v21, v63, __p);
        v65 = *((_QWORD *)&v182 + 1);
        v66 = (char *)&v182 + 8;
        if ((__int128 *)v182 != (__int128 *)((char *)&v182 + 8))
        {
          v67 = (char *)*((_QWORD *)&v182 + 1);
          v68 = (char *)&v182 + 8;
          if (*((_QWORD *)&v182 + 1))
          {
            do
            {
              v66 = v67;
              v67 = (char *)*((_QWORD *)v67 + 1);
            }
            while (v67);
          }
          else
          {
            do
            {
              v66 = (char *)*((_QWORD *)v68 + 2);
              v61 = *(_QWORD *)v66 == (_QWORD)v68;
              v68 = v66;
            }
            while (v61);
          }
          v69 = v66[55];
          if (v69 >= 0)
            v70 = v66[55];
          else
            v70 = *((_QWORD *)v66 + 5);
          if (v69 >= 0)
            v71 = v66 + 32;
          else
            v71 = (const void *)*((_QWORD *)v66 + 4);
          if (SHIBYTE(v187) >= 0)
            v72 = (void *)HIBYTE(v187);
          else
            v72 = __p[1];
          if (SHIBYTE(v187) >= 0)
            v73 = __p;
          else
            v73 = (void **)__p[0];
          if ((unint64_t)v72 >= v70)
            v74 = v70;
          else
            v74 = (size_t)v72;
          v75 = memcmp(v71, v73, v74);
          v76 = v70 < (unint64_t)v72;
          if (v75)
            v76 = v75 < 0;
          if (!v76)
            break;
        }
        if (v65)
          v77 = v66;
        else
          v77 = (_QWORD *)&v182 + 1;
        v78 = &v182;
        if (v65)
        {
          v78 = (__int128 *)v66;
          v79 = v66 + 8;
        }
        else
        {
          v79 = (_QWORD *)&v182 + 1;
        }
        if (!*((_QWORD *)v78 + 1))
          goto LABEL_124;
LABEL_127:
        v21 = v173;
        if (SHIBYTE(v187) < 0)
          operator delete(__p[0]);
        ++v63;
        v19 = v64;
        v22 = v172;
        if (v63 == Count)
          goto LABEL_11;
      }
      v79 = (_QWORD *)&v182 + 1;
      v77 = (_QWORD *)&v182 + 1;
      if (v65)
      {
        while (1)
        {
          while (1)
          {
            v77 = (_QWORD *)v65;
            v80 = *(char *)(v65 + 55);
            if (v80 >= 0)
              v81 = *(unsigned __int8 *)(v65 + 55);
            else
              v81 = *(_QWORD *)(v65 + 40);
            if (v80 >= 0)
              v82 = (const void *)(v65 + 32);
            else
              v82 = *(const void **)(v65 + 32);
            if (v81 >= (unint64_t)v72)
              v83 = (size_t)v72;
            else
              v83 = v81;
            v84 = memcmp(v73, v82, v83);
            v85 = (unint64_t)v72 < v81;
            if (v84)
              v85 = v84 < 0;
            if (!v85)
              break;
            v65 = *v77;
            v79 = v77;
            if (!*v77)
              goto LABEL_124;
          }
          v86 = memcmp(v82, v73, v83);
          v87 = v81 < (unint64_t)v72;
          if (v86)
            v87 = v86 < 0;
          if (!v87)
            goto LABEL_127;
          v65 = v77[1];
          if (!v65)
          {
            v79 = v77 + 1;
            break;
          }
        }
      }
LABEL_124:
      v88 = operator new(0x38uLL);
      v88[2] = *(_OWORD *)__p;
      *((_QWORD *)v88 + 6) = v187;
      __p[1] = 0;
      v187 = 0;
      __p[0] = 0;
      *(_QWORD *)v88 = 0;
      *((_QWORD *)v88 + 1) = 0;
      *((_QWORD *)v88 + 2) = v77;
      *v79 = v88;
      if (*(_QWORD *)v182)
      {
        *(_QWORD *)&v182 = *(_QWORD *)v182;
        v88 = (_OWORD *)*v79;
      }
      sub_1B02D8180(*((uint64_t **)&v182 + 1), (uint64_t *)v88);
      *(_QWORD *)&v183 = v183 + 1;
      goto LABEL_127;
    }
  }
  else
  {
    *((_QWORD *)&v182 + 1) = 0;
    *(_QWORD *)&v183 = 0;
    *(_QWORD *)&v182 = (char *)&v182 + 8;
  }
LABEL_11:
  if (v176 != (char **)&v182)
  {
    v36 = (_OWORD *)v182;
    if (a1[5])
    {
      v37 = *v176;
      *v176 = (char *)v19;
      *(_QWORD *)(*v19 + 16) = 0;
      *v19 = 0;
      v19[1] = 0;
      if (*((_QWORD *)v37 + 1))
        v38 = (char *)*((_QWORD *)v37 + 1);
      else
        v38 = v37;
      __p[0] = a1 + 3;
      v187 = (uint64_t *)v38;
      if (!v38)
      {
        v60 = v36;
        goto LABEL_138;
      }
      v39 = (char *)*((_QWORD *)v38 + 2);
      if (v39)
      {
        v40 = *(char **)v39;
        if (*(char **)v39 == v38)
        {
          *(_QWORD *)v39 = 0;
          while (1)
          {
            v161 = (char *)*((_QWORD *)v39 + 1);
            if (!v161)
              break;
            do
            {
              v39 = v161;
              v161 = *(char **)v161;
            }
            while (v161);
          }
        }
        else
        {
          for (*((_QWORD *)v39 + 1) = 0; v40; v40 = (char *)*((_QWORD *)v39 + 1))
          {
            do
            {
              v39 = v40;
              v40 = *(char **)v40;
            }
            while (v40);
          }
        }
      }
      __p[1] = v39;
      if (v36 != (__int128 *)((char *)&v182 + 8))
      {
        while (1)
        {
          std::string::operator=((std::string *)(v38 + 32), (const std::string *)(v36 + 2));
          v41 = v187;
          v42 = (uint64_t *)*v19;
          v43 = (uint64_t **)v19;
          v44 = (uint64_t **)v19;
          if (*v19)
          {
            v45 = *((char *)v187 + 55);
            if (v45 >= 0)
              v46 = *((unsigned __int8 *)v187 + 55);
            else
              v46 = v187[5];
            if (v45 >= 0)
              v47 = v187 + 4;
            else
              v47 = (const void *)v187[4];
            do
            {
              while (1)
              {
                v43 = (uint64_t **)v42;
                v50 = (const void *)v42[4];
                v48 = v42 + 4;
                v49 = v50;
                v51 = *((char *)v48 + 23);
                if (v51 >= 0)
                  v52 = *((unsigned __int8 *)v48 + 23);
                else
                  v52 = v48[1];
                if (v51 >= 0)
                  v53 = v48;
                else
                  v53 = v49;
                if (v52 >= v46)
                  v54 = v46;
                else
                  v54 = v52;
                v55 = memcmp(v47, v53, v54);
                v56 = v46 < v52;
                if (v55)
                  v56 = v55 < 0;
                if (!v56)
                  break;
                v42 = *v43;
                v44 = v43;
                if (!*v43)
                  goto LABEL_46;
              }
              v42 = v43[1];
            }
            while (v42);
            v44 = v43 + 1;
          }
LABEL_46:
          *v41 = 0;
          v41[1] = 0;
          v41[2] = (uint64_t)v43;
          *v44 = v41;
          v57 = *(char **)*v176;
          if (v57)
          {
            *v176 = v57;
            v41 = *v44;
          }
          a1 = v178;
          sub_1B02D8180(v178[4], v41);
          v178[5] = (uint64_t *)((char *)v178[5] + 1);
          v38 = (char *)__p[1];
          v187 = (uint64_t *)__p[1];
          if (__p[1])
          {
            v39 = (char *)*((_QWORD *)__p[1] + 2);
            if (v39)
            {
              v58 = *(char **)v39;
              if (*(void **)v39 == __p[1])
              {
                *(_QWORD *)v39 = 0;
                while (1)
                {
                  v62 = (char *)*((_QWORD *)v39 + 1);
                  if (!v62)
                    break;
                  do
                  {
                    v39 = v62;
                    v62 = *(char **)v62;
                  }
                  while (v62);
                }
              }
              else
              {
                for (*((_QWORD *)v39 + 1) = 0; v58; v58 = (char *)*((_QWORD *)v39 + 1))
                {
                  do
                  {
                    v39 = v58;
                    v58 = *(char **)v58;
                  }
                  while (v58);
                }
              }
            }
            __p[1] = v39;
            v59 = (_QWORD *)*((_QWORD *)v36 + 1);
            if (v59)
            {
              do
              {
LABEL_57:
                v60 = v59;
                v59 = (_QWORD *)*v59;
              }
              while (v59);
              goto LABEL_61;
            }
          }
          else
          {
            v39 = 0;
            v59 = (_QWORD *)*((_QWORD *)v36 + 1);
            if (v59)
              goto LABEL_57;
          }
          do
          {
            v60 = (_OWORD *)*((_QWORD *)v36 + 2);
            v61 = *(_QWORD *)v60 == (_QWORD)v36;
            v36 = v60;
          }
          while (!v61);
LABEL_61:
          if (v38)
          {
            v36 = v60;
            if (v60 != (__int128 *)((char *)&v182 + 8))
              continue;
          }
          v89 = __p[0];
          sub_1B035BF54((uint64_t)__p[0], v38);
          if (!v39)
            goto LABEL_138;
          goto LABEL_135;
        }
      }
      v89 = a1 + 3;
      v60 = (__int128 *)((char *)&v182 + 8);
      sub_1B035BF54((uint64_t)v176, v38);
      if (!v39)
        goto LABEL_138;
LABEL_135:
      for (i = (char *)*((_QWORD *)v39 + 2); i; i = (char *)*((_QWORD *)i + 2))
        v39 = i;
      sub_1B035BF54((uint64_t)v89, v39);
LABEL_138:
      v36 = v60;
    }
    if (v36 != (__int128 *)((char *)&v182 + 8))
    {
      do
      {
        v96 = (char *)operator new(0x38uLL);
        v97 = v96;
        v98 = v96 + 32;
        if (*((char *)v36 + 55) < 0)
        {
          sub_1B02EB0A8(v96 + 32, *((void **)v36 + 4), *((_QWORD *)v36 + 5));
        }
        else
        {
          v99 = v36[2];
          *((_QWORD *)v96 + 6) = *((_QWORD *)v36 + 6);
          *v98 = v99;
        }
        v100 = (char *)*v19;
        v101 = (char **)v19;
        v102 = (char **)v19;
        if (*v19)
        {
          v103 = v97[55];
          if (v103 >= 0)
            v104 = v97[55];
          else
            v104 = *((_QWORD *)v97 + 5);
          if (v103 < 0)
            v98 = (_OWORD *)*((_QWORD *)v97 + 4);
          do
          {
            while (1)
            {
              v101 = (char **)v100;
              v107 = (const void *)*((_QWORD *)v100 + 4);
              v105 = v100 + 32;
              v106 = v107;
              v108 = *((char *)v105 + 23);
              if (v108 >= 0)
                v109 = *((unsigned __int8 *)v105 + 23);
              else
                v109 = v105[1];
              if (v108 >= 0)
                v110 = v105;
              else
                v110 = v106;
              if (v109 >= v104)
                v111 = v104;
              else
                v111 = v109;
              v112 = memcmp(v98, v110, v111);
              v113 = v104 < v109;
              if (v112)
                v113 = v112 < 0;
              if (!v113)
                break;
              v100 = *v101;
              v102 = v101;
              if (!*v101)
                goto LABEL_172;
            }
            v100 = v101[1];
          }
          while (v100);
          v102 = v101 + 1;
        }
LABEL_172:
        *(_QWORD *)v97 = 0;
        *((_QWORD *)v97 + 1) = 0;
        *((_QWORD *)v97 + 2) = v101;
        *v102 = v97;
        v114 = *(char **)*v176;
        if (v114)
        {
          *v176 = v114;
          v97 = *v102;
        }
        a1 = v178;
        sub_1B02D8180(v178[4], (uint64_t *)v97);
        v178[5] = (uint64_t *)((char *)v178[5] + 1);
        v115 = (_QWORD *)*((_QWORD *)v36 + 1);
        if (v115)
        {
          do
          {
            v116 = v115;
            v115 = (_QWORD *)*v115;
          }
          while (v115);
        }
        else
        {
          do
          {
            v116 = (_OWORD *)*((_QWORD *)v36 + 2);
            v61 = *(_QWORD *)v116 == (_QWORD)v36;
            v36 = v116;
          }
          while (!v61);
        }
        v36 = v116;
      }
      while (v116 != (__int128 *)((char *)&v182 + 8));
    }
  }
  sub_1B035BF54((uint64_t)&v182, *((char **)&v182 + 1));
  if (theArray)
    CFRelease(theArray);
LABEL_142:
  if (v169)
  {
    objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], v17, (uint64_t)v169, v18);
    v91 = (void *)objc_claimAutoreleasedReturnValue();
    v92 = objc_alloc(MEMORY[0x1E0C99D80]);
    v179 = 0;
    v94 = (void *)objc_msgSend_initWithContentsOfURL_error_(v92, v93, (uint64_t)v91, (uint64_t)&v179);
    v95 = v179;
    sub_1B0359790(v94);
    v175 = (void *)objc_claimAutoreleasedReturnValue();

    if (!v171)
      goto LABEL_228;
  }
  else
  {
    v175 = 0;
    if (!v171)
      goto LABEL_228;
  }
  v117 = v171;
  v182 = 0u;
  v183 = 0u;
  v184 = 0u;
  v185 = 0u;
  v118 = v117;
  v122 = objc_msgSend_countByEnumeratingWithState_objects_count_(v118, v119, (uint64_t)&v182, (uint64_t)__p, 16);
  if (v122)
  {
    v123 = *(_QWORD *)v183;
    do
    {
      v124 = 0;
      do
      {
        if (*(_QWORD *)v183 != v123)
          objc_enumerationMutation(v118);
        v125 = *(void **)(*((_QWORD *)&v182 + 1) + 8 * v124);
        objc_msgSend_objectForKeyedSubscript_(v118, v120, (uint64_t)v125, v121);
        v126 = (void *)objc_claimAutoreleasedReturnValue();
        v127 = objc_retainAutorelease(v125);
        v131 = objc_msgSend_UTF8String(v127, v128, v129, v130);
        v135 = objc_msgSend_unsignedIntegerValue(v126, v132, v133, v134);
        v136 = v135;
        v137 = v177;
        while (1)
        {
          v138 = *v137;
          v139 = v137;
          if (!*v137)
            break;
          while (1)
          {
            v137 = (uint64_t **)v138;
            v140 = v138[4];
            if (v135 < v140)
              break;
            if (v140 >= v135)
            {
              v141 = (uint64_t *)v137;
              goto LABEL_218;
            }
            v138 = v137[1];
            if (!v138)
            {
              v139 = v137 + 1;
              goto LABEL_192;
            }
          }
        }
LABEL_192:
        v141 = (uint64_t *)operator new(0x40uLL);
        v141[4] = v136;
        v141[5] = 0;
        v141[6] = 0;
        v141[7] = 0;
        *v141 = 0;
        v141[1] = 0;
        v141[2] = (uint64_t)v137;
        *v139 = v141;
        v142 = (uint64_t *)**v178;
        v143 = v141;
        if (v142)
        {
          *v178 = v142;
          v143 = *v139;
        }
        v144 = *v177;
        v61 = v143 == *v177;
        *((_BYTE *)v143 + 24) = v61;
        if (!v61)
        {
          do
          {
            v145 = v143[2];
            if (*(_BYTE *)(v145 + 24))
              break;
            v146 = *(uint64_t **)(v145 + 16);
            v147 = *v146;
            if (*v146 == v145)
            {
              v150 = v146[1];
              if (!v150 || (v151 = *(unsigned __int8 *)(v150 + 24), v148 = (_BYTE *)(v150 + 24), v151))
              {
                if (*(uint64_t **)v145 == v143)
                {
                  *(_BYTE *)(v145 + 24) = 1;
                  *((_BYTE *)v146 + 24) = 0;
                  v154 = *(_QWORD *)(v145 + 8);
                  *v146 = v154;
                  if (v154)
                    goto LABEL_209;
                }
                else
                {
                  v152 = *(uint64_t **)(v145 + 8);
                  v153 = *v152;
                  *(_QWORD *)(v145 + 8) = *v152;
                  if (v153)
                  {
                    *(_QWORD *)(v153 + 16) = v145;
                    v146 = *(uint64_t **)(v145 + 16);
                  }
                  v152[2] = (uint64_t)v146;
                  *(_QWORD *)(*(_QWORD *)(v145 + 16) + 8 * (**(_QWORD **)(v145 + 16) != v145)) = v152;
                  *v152 = v145;
                  *(_QWORD *)(v145 + 16) = v152;
                  v146 = (uint64_t *)v152[2];
                  v145 = *v146;
                  *((_BYTE *)v152 + 24) = 1;
                  *((_BYTE *)v146 + 24) = 0;
                  v154 = *(_QWORD *)(v145 + 8);
                  *v146 = v154;
                  if (v154)
LABEL_209:
                    *(_QWORD *)(v154 + 16) = v146;
                }
                *(_QWORD *)(v145 + 16) = v146[2];
                *(_QWORD *)(v146[2] + 8 * (*(_QWORD *)v146[2] != (_QWORD)v146)) = v145;
                *(_QWORD *)(v145 + 8) = v146;
LABEL_216:
                v146[2] = v145;
                break;
              }
            }
            else if (!v147 || (v149 = *(unsigned __int8 *)(v147 + 24), v148 = (_BYTE *)(v147 + 24), v149))
            {
              if (*(uint64_t **)v145 == v143)
              {
                v156 = v143[1];
                *(_QWORD *)v145 = v156;
                if (v156)
                {
                  *(_QWORD *)(v156 + 16) = v145;
                  v146 = *(uint64_t **)(v145 + 16);
                }
                v143[2] = (uint64_t)v146;
                *(_QWORD *)(*(_QWORD *)(v145 + 16) + 8 * (**(_QWORD **)(v145 + 16) != v145)) = v143;
                v143[1] = v145;
                *(_QWORD *)(v145 + 16) = v143;
                v146 = (uint64_t *)v143[2];
                *((_BYTE *)v143 + 24) = 1;
                *((_BYTE *)v146 + 24) = 0;
                v145 = v146[1];
                v155 = *(uint64_t **)v145;
                v146[1] = *(_QWORD *)v145;
                if (v155)
LABEL_214:
                  v155[2] = (uint64_t)v146;
              }
              else
              {
                *(_BYTE *)(v145 + 24) = 1;
                *((_BYTE *)v146 + 24) = 0;
                v145 = v146[1];
                v155 = *(uint64_t **)v145;
                v146[1] = *(_QWORD *)v145;
                if (v155)
                  goto LABEL_214;
              }
              *(_QWORD *)(v145 + 16) = v146[2];
              *(_QWORD *)(v146[2] + 8 * (*(_QWORD *)v146[2] != (_QWORD)v146)) = v145;
              *(_QWORD *)v145 = v146;
              goto LABEL_216;
            }
            *(_BYTE *)(v145 + 24) = 1;
            v143 = v146;
            *((_BYTE *)v146 + 24) = v146 == v144;
            *v148 = 1;
          }
          while (v146 != v144);
        }
        v178[2] = (uint64_t *)((char *)v178[2] + 1);
LABEL_218:
        MEMORY[0x1B5E079FC](v141 + 5, v131);

        a1 = v178;
        ++v124;
      }
      while (v124 != v122);
      v157 = objc_msgSend_countByEnumeratingWithState_objects_count_(v118, v120, (uint64_t)&v182, (uint64_t)__p, 16);
      v122 = v157;
    }
    while (v157);
  }

LABEL_228:
  a1[13] = a2;
  v158 = 1.0;
  if (a9 > 0.0)
    v158 = a9;
  *((float *)a1 + 28) = v158;
  a1[15] = a3;
  a1[16] = a4;
  v159 = a1[6];
  a1[6] = v167;

  return a1;
}

void sub_1B03595E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  void *v42;
  void *v43;

  sub_1B03467A8((void **)(a25 + 80));
  sub_1B03467A8((void **)(a25 + 56));

  sub_1B035BF54(a23, *(char **)(a25 + 32));
  sub_1B035BEF4(a25, *(char **)(a25 + 8));

  _Unwind_Resume(a1);
}

id sub_1B0359790(void *a1)
{
  const char *v1;
  id v2;
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  const char *v8;
  uint64_t v9;
  id v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  id v24;
  id v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  const char *v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  void *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const char *v44;
  uint64_t v45;
  char isKindOfClass;
  const char *v47;
  uint64_t v48;
  const char *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v55;
  void *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  _OWORD v61[4];
  _BYTE v62[128];
  _BYTE v63[128];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  memset(v61, 0, sizeof(v61));
  v55 = a1;
  if (objc_msgSend_countByEnumeratingWithState_objects_count_(v55, v1, (uint64_t)v61, (uint64_t)v63, 16))
  {
    v2 = **((id **)&v61[0] + 1);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend_integerValue(v2, v3, v4, v5) <= 0)
        v6 = 2;
      else
        v6 = 3;
    }
    else
    {
      objc_opt_class();
      v6 = (objc_opt_isKindOfClass() & 1) != 0;
    }

    objc_msgSend_objectForKeyedSubscript_(v55, v8, (uint64_t)v2, v9);
    v10 = (id)objc_claimAutoreleasedReturnValue();
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0)
    {
      if (objc_msgSend_integerValue(v10, v11, v12, v13) <= 0)
        v7 = 2;
      else
        v7 = 3;
    }
    else
    {
      objc_opt_class();
      v7 = (objc_opt_isKindOfClass() & 1) != 0;
    }

  }
  else
  {
    v7 = 0;
    v6 = 0;
  }

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v14, v15, v16);
  v56 = (void *)objc_claimAutoreleasedReturnValue();
  v59 = 0u;
  v60 = 0u;
  v57 = 0u;
  v58 = 0u;
  v17 = v55;
  v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v18, (uint64_t)&v57, (uint64_t)v62, 16);
  if (v19)
  {
    v20 = *(_QWORD *)v58;
    do
    {
      v21 = 0;
      do
      {
        if (*(_QWORD *)v58 != v20)
          objc_enumerationMutation(v17);
        v22 = *(id *)(*((_QWORD *)&v57 + 1) + 8 * v21);
        v23 = v22;
        if (v6 == 3)
        {
          v25 = v22;
          v26 = (void *)MEMORY[0x1E0CB37E8];
          v30 = objc_msgSend_integerValue(v25, v27, v28, v29);
          objc_msgSend_numberWithInteger_(v26, v31, v30, v32);
          v24 = (id)objc_claimAutoreleasedReturnValue();

        }
        else if (v6 == 2 || v6 == 1)
        {
          v24 = v22;
        }
        else
        {
          v24 = 0;
        }

        objc_msgSend_objectForKeyedSubscript_(v17, v33, (uint64_t)v23, v34);
        v35 = (id)objc_claimAutoreleasedReturnValue();
        v36 = v35;
        if (v7 == 3)
        {
          v38 = v35;
          v39 = (void *)MEMORY[0x1E0CB37E8];
          v43 = objc_msgSend_integerValue(v38, v40, v41, v42);
          objc_msgSend_numberWithInteger_(v39, v44, v43, v45);
          v37 = (id)objc_claimAutoreleasedReturnValue();

        }
        else if (v7 == 2 || v7 == 1)
        {
          v37 = v35;
        }
        else
        {
          v37 = 0;
        }

        objc_opt_class();
        isKindOfClass = objc_opt_isKindOfClass();
        if ((isKindOfClass & 1) != 0)
          v48 = (uint64_t)v37;
        else
          v48 = (uint64_t)v24;
        if ((isKindOfClass & 1) != 0)
          objc_msgSend_setObject_forKeyedSubscript_(v56, v47, v48, (uint64_t)v24);
        else
          objc_msgSend_setObject_forKeyedSubscript_(v56, v47, v48, (uint64_t)v37);

        ++v21;
      }
      while (v19 != v21);
      v19 = objc_msgSend_countByEnumeratingWithState_objects_count_(v17, v49, (uint64_t)&v57, (uint64_t)v62, 16);
    }
    while (v19);
  }

  v53 = (void *)objc_msgSend_copy(v56, v50, v51, v52);
  return v53;
}

void sub_1B0359AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0359BAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  void *v5;
  const void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  const void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)(a1 + 80);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 88);
    v4 = *(void **)(a1 + 80);
    if (v3 != v2)
    {
      do
      {
        v6 = *(const void **)(v3 - 16);
        if (v6)
        {
          CFRelease(v6);
          *(_QWORD *)(v3 - 16) = 0;
        }
        v7 = *(_QWORD *)(v3 - 40);
        if (v7)
        {
          v8 = *(_QWORD *)(v3 - 32);
          v5 = *(void **)(v3 - 40);
          if (v8 != v7)
          {
            do
            {
              if (*(char *)(v8 - 1) < 0)
                operator delete(*(void **)(v8 - 24));
              v8 -= 40;
            }
            while (v8 != v7);
            v5 = *(void **)(v3 - 40);
          }
          *(_QWORD *)(v3 - 32) = v7;
          operator delete(v5);
        }
        v3 -= 48;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 80);
    }
    *(_QWORD *)(a1 + 88) = v2;
    operator delete(v4);
  }
  v9 = *(_QWORD *)(a1 + 56);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 64);
    v11 = *(void **)(a1 + 56);
    if (v10 != v9)
    {
      do
      {
        v13 = *(const void **)(v10 - 16);
        if (v13)
        {
          CFRelease(v13);
          *(_QWORD *)(v10 - 16) = 0;
        }
        v14 = *(_QWORD *)(v10 - 40);
        if (v14)
        {
          v15 = *(_QWORD *)(v10 - 32);
          v12 = *(void **)(v10 - 40);
          if (v15 != v14)
          {
            do
            {
              if (*(char *)(v15 - 1) < 0)
                operator delete(*(void **)(v15 - 24));
              v15 -= 40;
            }
            while (v15 != v14);
            v12 = *(void **)(v10 - 40);
          }
          *(_QWORD *)(v10 - 32) = v14;
          operator delete(v12);
        }
        v10 -= 48;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 56);
    }
    *(_QWORD *)(a1 + 64) = v9;
    operator delete(v11);
  }

  sub_1B035BF54(a1 + 24, *(char **)(a1 + 32));
  sub_1B035BEF4(a1, *(char **)(a1 + 8));
  return a1;
}

void sub_1B0359D1C(_QWORD *a1@<X0>, _QWORD *a2@<X1>, void **a3@<X8>)
{
  uint64_t v3;
  _QWORD *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  float *v8;
  BOOL v9;
  char *v10;
  float v11;
  float *v12;
  float v13;
  BOOL v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  char **v18;
  char *v19;
  char **v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  int v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  std::string *v39;
  int data_low;
  int v41;
  uint64_t **v43;
  std::string::size_type size;
  std::string *v45;
  int v46;
  size_t v47;
  uint64_t *v48;
  size_t v49;
  int v50;
  BOOL v51;
  int v52;
  _BOOL4 v53;
  uint64_t v54;
  _BYTE *v55;
  std::string::size_type v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  _QWORD *v61;
  unint64_t *v62;
  _BYTE *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t *v66;
  unint64_t *v67;
  void **v68;
  char *v69;
  uint64_t v70;
  float *v71;
  float *v72;
  _QWORD *v73;
  float *v74;
  void *v75;
  char *v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  char *v83;
  unint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  int64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  _BYTE *v95;
  uint64_t v96;
  int64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  _OWORD *v104;
  char *v105;
  uint64_t v106;
  __int128 v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _BYTE *v112;
  __int128 v113;
  CFTypeRef v114;
  float v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  void **v120;
  void **v121;
  void *v122;
  uint64_t v123;
  float v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  void **v129;
  void **v130;
  uint64_t v131;
  void **v132;
  double v133;
  uint64_t v134;
  long double v135;
  long double v136;
  float v137;
  uint64_t v138;
  void **v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  void *v144;
  const void *v145;
  const void *v146;
  CFTypeRef v147;
  void **v148;
  void **v149;
  int64_t v150;
  void *v151;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  float v157;
  float v158;
  const void *v159;
  void **v160;
  const void *v161;
  const void *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  uint64_t v166;
  const void *v167;
  const void *v168;
  CFTypeRef v169;
  void **v170;
  void **v171;
  CFTypeRef v172;
  const void *v173;
  std::string *v174;
  std::string *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const void *v180;
  uint64_t v181;
  uint64_t v182;
  void **v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  void *v187;
  const void *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  unint64_t v197;
  unint64_t v198;
  unint64_t v199;
  unint64_t v200;
  char *v201;
  const void *v202;
  uint64_t v203;
  char *v204;
  char *v205;
  void *v206;
  char *v207;
  unint64_t v208;
  unint64_t v209;
  unint64_t v210;
  unint64_t v211;
  char *v212;
  char *v213;
  char *v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  CFTypeRef v219;
  char *v220;
  char *v221;
  unint64_t v222;
  void *v223;
  const void *v224;
  uint64_t v225;
  uint64_t v226;
  _QWORD *v227;
  void *v228;
  CFTypeRef *v229;
  CFTypeRef *v230;
  CFTypeRef *v231;
  uint64_t v232;
  CFTypeRef v233;
  uint64_t v234;
  char *v235;
  _BYTE *v236;
  _BYTE *v237;
  int64_t v238;
  char *v239;
  char *v240;
  CFTypeRef *v241;
  const void *v242;
  void *v243;
  _QWORD *v244;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  char **v249;
  _QWORD *v250;
  CFTypeRef v251;
  char *v253;
  char *v254;
  _QWORD *v255;
  uint64_t v256;
  uint64_t v257;
  void *v258;
  void *v259;
  std::string *v260;
  char v261;
  CFTypeRef v262;
  void *v263;
  void *__p[2];
  __int128 v265;
  CFTypeRef cf;
  uint64_t v267;
  std::string v268;
  char *v269;
  __int128 v270;
  __int128 v271;

  v3 = (uint64_t)a1;
  v4 = (_QWORD *)*a2;
  v244 = (_QWORD *)a2[1];
  if ((_QWORD *)*a2 != v244)
  {
    v249 = (char **)(a1 + 1);
    v250 = a1 + 10;
    do
    {
      v5 = (const void *)v4[2];
      v251 = (CFTypeRef)v4[1];
      v248 = v4[3];
      v6 = *(_QWORD *)(v3 + 120);
      v259 = 0;
      v260 = 0;
      v258 = 0;
      if (v6)
      {
        if (v6 < 0)
          sub_1B02D7758();
        v258 = operator new(4 * v6);
        v260 = (std::string *)((char *)v258 + 4 * v6);
        memcpy(v258, v5, 4 * v6);
        v259 = v260;
      }
      v246 = v4;
      v269 = 0;
      v270 = 0uLL;
      if ((*(_QWORD *)(v3 + 104) & 0x7FFFFFFFFFFFFFFFLL) != 0)
      {
        v7 = 0;
        do
        {
          v8 = (float *)((char *)v258 + 4);
          v9 = v258 == v259 || v8 == v259;
          v10 = (char *)v258;
          if (!v9)
          {
            v11 = *(float *)v258;
            v10 = (char *)v258;
            v12 = (float *)((char *)v258 + 4);
            do
            {
              v13 = *v12++;
              v14 = v11 < v13;
              v11 = fmaxf(v11, v13);
              if (v14)
                v10 = (char *)v8;
              v8 = v12;
            }
            while (v12 != v259);
          }
          v15 = (v10 - (_BYTE *)v258) >> 2;
          v16 = *(_DWORD *)v10;
          memset(&v268, 0, sizeof(v268));
          v17 = *(_QWORD *)(v3 + 16);
          v256 = v7;
          if (!v17)
          {
            v36 = 0;
            goto LABEL_91;
          }
          v18 = v249;
          while (1)
          {
            v19 = *v18;
            v20 = v18;
            if (!*v18)
              break;
            while (1)
            {
              v18 = (char **)v19;
              v21 = *((_QWORD *)v19 + 4);
              if (v15 < v21)
                break;
              if (v21 >= v15)
              {
                v22 = (char *)v18;
                goto LABEL_57;
              }
              v19 = v18[1];
              if (!v19)
              {
                v20 = v18 + 1;
                goto LABEL_26;
              }
            }
          }
LABEL_26:
          v22 = (char *)operator new(0x40uLL);
          *((_QWORD *)v22 + 4) = v15;
          *((_QWORD *)v22 + 5) = 0;
          *((_QWORD *)v22 + 6) = 0;
          *((_QWORD *)v22 + 7) = 0;
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 1) = 0;
          *((_QWORD *)v22 + 2) = v18;
          *v20 = v22;
          v23 = **(_QWORD **)v3;
          v24 = v22;
          if (v23)
          {
            *(_QWORD *)v3 = v23;
            v24 = *v20;
          }
          v25 = *v249;
          v9 = v24 == *v249;
          v24[24] = v9;
          if (!v9)
          {
            do
            {
              v26 = *((_QWORD *)v24 + 2);
              if (*(_BYTE *)(v26 + 24))
                break;
              v27 = *(char **)(v26 + 16);
              v28 = *(_QWORD *)v27;
              if (*(_QWORD *)v27 == v26)
              {
                v31 = *((_QWORD *)v27 + 1);
                if (!v31 || (v32 = *(unsigned __int8 *)(v31 + 24), v29 = (_BYTE *)(v31 + 24), v32))
                {
                  if (*(char **)v26 == v24)
                  {
                    *(_BYTE *)(v26 + 24) = 1;
                    v27[24] = 0;
                    v35 = *(_QWORD *)(v26 + 8);
                    *(_QWORD *)v27 = v35;
                    if (v35)
                      goto LABEL_43;
                  }
                  else
                  {
                    v33 = *(uint64_t **)(v26 + 8);
                    v34 = *v33;
                    *(_QWORD *)(v26 + 8) = *v33;
                    if (v34)
                    {
                      *(_QWORD *)(v34 + 16) = v26;
                      v27 = *(char **)(v26 + 16);
                    }
                    v33[2] = (uint64_t)v27;
                    *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v33;
                    *v33 = v26;
                    *(_QWORD *)(v26 + 16) = v33;
                    v27 = (char *)v33[2];
                    v26 = *(_QWORD *)v27;
                    *((_BYTE *)v33 + 24) = 1;
                    v27[24] = 0;
                    v35 = *(_QWORD *)(v26 + 8);
                    *(_QWORD *)v27 = v35;
                    if (v35)
LABEL_43:
                      *(_QWORD *)(v35 + 16) = v27;
                  }
                  *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
                  *(_QWORD *)(*((_QWORD *)v27 + 2) + 8 * (**((_QWORD **)v27 + 2) != (_QWORD)v27)) = v26;
                  *(_QWORD *)(v26 + 8) = v27;
LABEL_55:
                  *((_QWORD *)v27 + 2) = v26;
                  break;
                }
              }
              else if (!v28 || (v30 = *(unsigned __int8 *)(v28 + 24), v29 = (_BYTE *)(v28 + 24), v30))
              {
                if (*(char **)v26 == v24)
                {
                  v37 = *((_QWORD *)v24 + 1);
                  *(_QWORD *)v26 = v37;
                  if (v37)
                  {
                    *(_QWORD *)(v37 + 16) = v26;
                    v27 = *(char **)(v26 + 16);
                  }
                  *((_QWORD *)v24 + 2) = v27;
                  *(_QWORD *)(*(_QWORD *)(v26 + 16) + 8 * (**(_QWORD **)(v26 + 16) != v26)) = v24;
                  *((_QWORD *)v24 + 1) = v26;
                  *(_QWORD *)(v26 + 16) = v24;
                  v27 = (char *)*((_QWORD *)v24 + 2);
                }
                else
                {
                  v24 = (char *)*((_QWORD *)v24 + 2);
                }
                v24[24] = 1;
                v27[24] = 0;
                v26 = *((_QWORD *)v27 + 1);
                v38 = *(char **)v26;
                *((_QWORD *)v27 + 1) = *(_QWORD *)v26;
                if (v38)
                  *((_QWORD *)v38 + 2) = v27;
                *(_QWORD *)(v26 + 16) = *((_QWORD *)v27 + 2);
                *(_QWORD *)(*((_QWORD *)v27 + 2) + 8 * (**((_QWORD **)v27 + 2) != (_QWORD)v27)) = v26;
                *(_QWORD *)v26 = v27;
                goto LABEL_55;
              }
              *(_BYTE *)(v26 + 24) = 1;
              v24 = v27;
              v27[24] = v27 == v25;
              *v29 = 1;
            }
            while (v27 != v25);
          }
          *(_QWORD *)(v3 + 16) = v17 + 1;
LABEL_57:
          std::string::operator=(&v268, (const std::string *)(v22 + 40));
          v36 = SHIBYTE(v268.__r_.__value_.__r.__words[2]);
          if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
          {
            if (v268.__r_.__value_.__l.__size_ == 3)
            {
              v39 = (std::string *)v268.__r_.__value_.__r.__words[0];
LABEL_62:
              data_low = LOWORD(v39->__r_.__value_.__l.__data_);
              v41 = v39->__r_.__value_.__s.__data_[2];
              if (data_low == 20053 && v41 == 75)
              {
LABEL_9:
                *(_DWORD *)v10 = 0;
                if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
                  goto LABEL_123;
                goto LABEL_10;
              }
            }
          }
          else if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) == 3)
          {
            v39 = &v268;
            goto LABEL_62;
          }
          v43 = *(uint64_t ***)(v3 + 32);
          if (v43)
          {
            if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v268.__r_.__value_.__r.__words[2]);
            else
              size = v268.__r_.__value_.__l.__size_;
            if ((v268.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v45 = &v268;
            else
              v45 = (std::string *)v268.__r_.__value_.__r.__words[0];
            do
            {
              v46 = *((char *)v43 + 55);
              if (v46 >= 0)
                v47 = *((unsigned __int8 *)v43 + 55);
              else
                v47 = (size_t)v43[5];
              if (v46 >= 0)
                v48 = (uint64_t *)(v43 + 4);
              else
                v48 = v43[4];
              if (v47 >= size)
                v49 = size;
              else
                v49 = v47;
              v50 = memcmp(v45, v48, v49);
              v51 = size < v47;
              if (v50)
                v51 = v50 < 0;
              if (!v51)
              {
                v52 = memcmp(v48, v45, v49);
                v53 = v47 < size;
                if (v52)
                  v53 = v52 < 0;
                if (!v53)
                  goto LABEL_9;
                ++v43;
              }
              v43 = (uint64_t **)*v43;
            }
            while (v43);
          }
LABEL_91:
          v54 = v270;
          if ((unint64_t)v270 < *((_QWORD *)&v270 + 1))
          {
            *(_QWORD *)v270 = v15;
            *(_DWORD *)(v54 + 8) = 0;
            *(_DWORD *)(v54 + 12) = v16;
            v55 = (_BYTE *)(v54 + 16);
            if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
            {
              sub_1B02EB0A8(v55, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
            }
            else
            {
              v56 = v268.__r_.__value_.__r.__words[2];
              *(_OWORD *)v55 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
              *(_QWORD *)(v54 + 32) = v56;
            }
            v61 = (_QWORD *)(v54 + 40);
            goto LABEL_122;
          }
          v57 = v269;
          v58 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v270 - (_QWORD)v269) >> 3) + 1;
          if (v58 > 0x666666666666666)
            sub_1B035C268();
          if (0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v270 + 1) - (_QWORD)v269) >> 3) > v58)
            v58 = 0x999999999999999ALL * ((uint64_t)(*((_QWORD *)&v270 + 1) - (_QWORD)v269) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v270 + 1) - (_QWORD)v269) >> 3) >= 0x333333333333333)
            v59 = 0x666666666666666;
          else
            v59 = v58;
          cf = (char *)&v270 + 8;
          if (v59)
          {
            if (v59 > 0x666666666666666)
              sub_1B02D72AC();
            v60 = (char *)operator new(40 * v59);
          }
          else
          {
            v60 = 0;
          }
          v62 = (unint64_t *)&v60[8 * ((v54 - (uint64_t)v57) >> 3)];
          __p[0] = v60;
          __p[1] = v62;
          *(_QWORD *)&v265 = v62;
          *((_QWORD *)&v265 + 1) = &v60[40 * v59];
          *v62 = v15;
          *((_DWORD *)v62 + 2) = 0;
          *((_DWORD *)v62 + 3) = v16;
          v63 = v62 + 2;
          if (v36 < 0)
          {
            sub_1B02EB0A8(v63, v268.__r_.__value_.__l.__data_, v268.__r_.__value_.__l.__size_);
            v57 = v269;
            v54 = v270;
            v62 = (unint64_t *)__p[1];
            v61 = (_QWORD *)(v265 + 40);
            *(_QWORD *)&v265 = v265 + 40;
            if ((char *)v270 == v269)
            {
LABEL_119:
              v269 = (char *)v62;
              *(_QWORD *)&v270 = v61;
              *((_QWORD *)&v270 + 1) = *((_QWORD *)&v265 + 1);
              goto LABEL_120;
            }
          }
          else
          {
            *(_OWORD *)v63 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
            v62[4] = v268.__r_.__value_.__r.__words[2];
            v61 = v62 + 5;
            *(_QWORD *)&v265 = v62 + 5;
            if ((char *)v54 == v57)
              goto LABEL_119;
          }
          v64 = 0;
          do
          {
            v66 = &v62[v64 / 8];
            *(v66 - 5) = *(_QWORD *)(v54 + v64 - 40);
            *((_DWORD *)v66 - 8) = *(_DWORD *)(v54 + v64 - 32);
            *((_DWORD *)v66 - 7) = *(_DWORD *)(v54 + v64 - 28);
            v67 = &v62[v64 / 8 - 3];
            v68 = (void **)(v54 + v64 - 24);
            if (*(char *)(v54 + v64 - 1) < 0)
            {
              sub_1B02EB0A8(v67, *v68, *(_QWORD *)(v54 + v64 - 16));
            }
            else
            {
              v65 = *(_OWORD *)v68;
              v62[v64 / 8 - 1] = *(_QWORD *)(v54 + v64 - 8);
              *(_OWORD *)v67 = v65;
            }
            v64 -= 40;
          }
          while ((char *)(v54 + v64) != v57);
          v57 = v269;
          v69 = (char *)v270;
          v269 = (char *)&v62[v64 / 8];
          v270 = v265;
          v61 = (_QWORD *)v265;
          while (v69 != v57)
          {
            if (*(v69 - 1) < 0)
              operator delete(*((void **)v69 - 3));
            v69 -= 40;
          }
LABEL_120:
          if (v57)
            operator delete(v57);
LABEL_122:
          *(_QWORD *)&v270 = v61;
          *(_DWORD *)v10 = 0;
          if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0)
LABEL_123:
            operator delete(v268.__r_.__value_.__l.__data_);
LABEL_10:
          v7 = v256 + 1;
        }
        while (v256 + 1 < (unint64_t)(2 * *(_QWORD *)(v3 + 104)));
      }
      v70 = *(_QWORD *)(v3 + 56);
      v247 = *(_QWORD *)(v3 + 64);
      if (v247 != v70)
      {
        while (1)
        {
          if (*(_QWORD *)(v70 + 40) == v248)
          {
            v76 = v269;
            v253 = (char *)v270;
            if (v269 != (char *)v270)
              break;
          }
LABEL_132:
          v70 += 48;
          if (v70 == v247)
            goto LABEL_216;
        }
        v257 = v70;
        while (2)
        {
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v265 = 0;
          v79 = *(_QWORD *)(v70 + 8);
          v78 = *(_QWORD *)(v70 + 16);
          if (v78 == v79)
          {
            if (MEMORY[0xFFFFFFFFFFFFFFF8] != *(_QWORD *)v76)
              goto LABEL_174;
            goto LABEL_138;
          }
          v254 = v76;
          v80 = 0;
          v81 = 0;
          v82 = 0;
          v83 = 0;
          v84 = 0;
          v85 = 0;
LABEL_142:
          while (1)
          {
            v86 = (_QWORD *)(v79 + 40 * v85);
            if ((unint64_t)v81 >= v84)
              break;
            *(_QWORD *)v81 = *v86;
            v81 += 8;
            if (++v85 >= 0xCCCCCCCCCCCCCCCDLL * ((v78 - v79) >> 3))
              goto LABEL_169;
          }
          v87 = v81 - v83;
          v88 = (v81 - v83) >> 3;
          v89 = v88 + 1;
          if ((unint64_t)(v88 + 1) >> 61)
          {
            __p[0] = v82;
            __p[1] = v81;
            *(_QWORD *)&v265 = v80;
            sub_1B02D7758();
          }
          v90 = v84 - (_QWORD)v83;
          if (v90 >> 2 > v89)
            v89 = v90 >> 2;
          if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8)
            v91 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v91 = v89;
          if (v91)
          {
            if (v91 >> 61)
            {
              __p[0] = v82;
              *(_QWORD *)&v265 = v80;
              sub_1B02D72AC();
            }
            v92 = v79;
            v93 = v78;
            v94 = v91;
            v95 = operator new(8 * v91);
            v78 = v93;
            v79 = v92;
            v91 = v94;
            v82 = &v95[8 * v88];
            *v82 = *v86;
            v96 = (uint64_t)(v82 + 1);
            v97 = v81 - v83;
            if (v81 != v83)
            {
LABEL_152:
              v98 = v97 - 8;
              if (v98 < 0x168
                || (v101 = (v81 - 8 - v83) & 0xFFFFFFFFFFFFFFF8, &v95[v87 - 8 - v101] > &v95[v87 - 8])
                || &v81[-v101 - 8] > v81 - 8
                || (unint64_t)(v83 - v95) < 0x20)
              {
                v99 = v81;
              }
              else
              {
                v102 = (v98 >> 3) + 1;
                v103 = 8 * (v102 & 0x3FFFFFFFFFFFFFFCLL);
                v99 = &v81[-v103];
                v82 = (_QWORD *)((char *)v82 - v103);
                v104 = &v95[v87 - 16];
                v105 = v81 - 16;
                v106 = v102 & 0x3FFFFFFFFFFFFFFCLL;
                do
                {
                  v107 = *(_OWORD *)v105;
                  *(v104 - 1) = *((_OWORD *)v105 - 1);
                  *v104 = v107;
                  v104 -= 2;
                  v105 -= 32;
                  v106 -= 4;
                }
                while (v106);
                if (v102 == (v102 & 0x3FFFFFFFFFFFFFFCLL))
                {
LABEL_155:
                  v80 = &v95[8 * v91];
                  if (v83)
                    goto LABEL_156;
                  goto LABEL_157;
                }
              }
              do
              {
                v100 = *((_QWORD *)v99 - 1);
                v99 -= 8;
                *--v82 = v100;
              }
              while (v99 != v83);
              goto LABEL_155;
            }
          }
          else
          {
            v95 = 0;
            v82 = (_QWORD *)(8 * v88);
            *(_QWORD *)(8 * v88) = *v86;
            v96 = 8 * v88 + 8;
            v97 = v81 - v83;
            if (v81 != v83)
              goto LABEL_152;
          }
          v80 = &v95[8 * v91];
          if (v83)
          {
LABEL_156:
            operator delete(v83);
            v79 = *(_QWORD *)(v257 + 8);
            v78 = *(_QWORD *)(v257 + 16);
          }
LABEL_157:
          v83 = (char *)v82;
          v84 = (unint64_t)v80;
          v81 = (char *)v96;
          if (++v85 >= 0xCCCCCCCCCCCCCCCDLL * ((v78 - v79) >> 3))
          {
LABEL_169:
            __p[0] = v82;
            *(_QWORD *)&v265 = v80;
            v108 = *((_QWORD *)v81 - 1);
            v76 = v254;
            v109 = *(_QWORD *)v254;
            if (v82)
            {
              __p[1] = v82;
              operator delete(v82);
            }
            v3 = (uint64_t)a1;
            v70 = v257;
            if (v108 != v109)
            {
LABEL_174:
              v110 = *(_QWORD *)(v3 + 136);
              *(_QWORD *)(v3 + 136) = v110 + 1;
              __p[0] = *(void **)v70;
              v265 = 0uLL;
              __p[1] = 0;
              sub_1B0380ED0(&__p[1], *(_QWORD *)(v70 + 8), *(_QWORD *)(v70 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v70 + 16) - *(_QWORD *)(v70 + 8)) >> 3));
              cf = CFRetain(*(CFTypeRef *)(v70 + 32));
              v267 = v110;
              v111 = v265;
              if ((unint64_t)v265 >= *((_QWORD *)&v265 + 1))
              {
                *(_QWORD *)&v265 = sub_1B03813FC((char **)&__p[1], (uint64_t)v76);
                v114 = cf;
                if (!cf)
                  goto LABEL_180;
                goto LABEL_179;
              }
              *(_QWORD *)v265 = *(_QWORD *)v76;
              *(_DWORD *)(v111 + 8) = *((_DWORD *)v76 + 2);
              *(_DWORD *)(v111 + 12) = *((_DWORD *)v76 + 3);
              v112 = (_BYTE *)(v111 + 16);
              if ((v76[39] & 0x80000000) == 0)
              {
                v113 = *((_OWORD *)v76 + 1);
                *(_QWORD *)(v111 + 32) = *((_QWORD *)v76 + 4);
                *(_OWORD *)v112 = v113;
                *(_QWORD *)&v265 = v111 + 40;
                v114 = cf;
                if (!cf)
                  goto LABEL_180;
LABEL_179:
                CFRelease(v114);
                cf = 0;
                goto LABEL_180;
              }
              sub_1B02EB0A8(v112, *((void **)v76 + 2), *((_QWORD *)v76 + 3));
              *(_QWORD *)&v265 = v111 + 40;
              v114 = cf;
              if (cf)
                goto LABEL_179;
LABEL_180:
              cf = CFRetain(v251);
              v115 = logf(*((float *)v76 + 3));
              __p[0] = (void *)COERCE_UNSIGNED_INT(*(float *)__p + v115);
              if ((sub_1B035BB3C(v3, (const char *)__p, v116, v117) & 1) == 0)
              {
                v118 = *(_QWORD *)(v3 + 88);
                if (v118 >= *(_QWORD *)(v3 + 96))
                {
                  v119 = sub_1B035C408(v250, (uint64_t)__p);
                }
                else
                {
                  *(void **)v118 = __p[0];
                  *(_QWORD *)(v118 + 8) = 0;
                  *(_QWORD *)(v118 + 16) = 0;
                  *(_QWORD *)(v118 + 24) = 0;
                  sub_1B0380ED0((_BYTE *)(v118 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
                  *(_QWORD *)(v118 + 32) = CFRetain(cf);
                  *(_QWORD *)(v118 + 40) = v267;
                  v119 = v118 + 48;
                  *(_QWORD *)(v3 + 88) = v118 + 48;
                }
                *(_QWORD *)(v3 + 88) = v119;
              }
              if (cf)
              {
                CFRelease(cf);
                cf = 0;
              }
              v120 = (void **)__p[1];
              if (__p[1])
              {
                v121 = (void **)v265;
                v77 = __p[1];
                if ((void *)v265 != __p[1])
                {
                  do
                  {
                    if (*((char *)v121 - 1) < 0)
                      operator delete(*(v121 - 3));
                    v121 -= 5;
                  }
                  while (v121 != v120);
                  v77 = __p[1];
                }
                *(_QWORD *)&v265 = v120;
                operator delete(v77);
              }
            }
LABEL_138:
            v76 += 40;
            if (v76 == v253)
              goto LABEL_132;
            continue;
          }
          goto LABEL_142;
        }
      }
      v72 = (float *)v269;
      v71 = (float *)v270;
      if (v269 == (char *)v270)
      {
        v73 = v246;
        if (!v269)
          goto LABEL_217;
      }
      else
      {
        do
        {
          v123 = *(_QWORD *)(v3 + 136);
          *(_QWORD *)(v3 + 136) = v123 + 1;
          *(_OWORD *)__p = 0u;
          v265 = 0u;
          cf = 0;
          v267 = v123;
          *(_QWORD *)&v265 = sub_1B03813FC((char **)&__p[1], (uint64_t)v72);
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          cf = CFRetain(v251);
          v124 = logf(v72[3]);
          __p[0] = (void *)COERCE_UNSIGNED_INT(*(float *)__p + v124);
          if ((sub_1B035BB3C(v3, (const char *)__p, v125, v126) & 1) == 0)
          {
            v127 = *(_QWORD *)(v3 + 88);
            if (v127 >= *(_QWORD *)(v3 + 96))
            {
              v128 = sub_1B035C408(v250, (uint64_t)__p);
            }
            else
            {
              *(void **)v127 = __p[0];
              *(_QWORD *)(v127 + 8) = 0;
              *(_QWORD *)(v127 + 16) = 0;
              *(_QWORD *)(v127 + 24) = 0;
              sub_1B0380ED0((_BYTE *)(v127 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
              *(_QWORD *)(v127 + 32) = CFRetain(cf);
              *(_QWORD *)(v127 + 40) = v267;
              v128 = v127 + 48;
              *(_QWORD *)(v3 + 88) = v127 + 48;
            }
            *(_QWORD *)(v3 + 88) = v128;
          }
          if (cf)
          {
            CFRelease(cf);
            cf = 0;
          }
          v129 = (void **)__p[1];
          if (__p[1])
          {
            v130 = (void **)v265;
            v122 = __p[1];
            if ((void *)v265 != __p[1])
            {
              do
              {
                if (*((char *)v130 - 1) < 0)
                  operator delete(*(v130 - 3));
                v130 -= 5;
              }
              while (v130 != v129);
              v122 = __p[1];
            }
            *(_QWORD *)&v265 = v129;
            operator delete(v122);
          }
          v72 += 10;
        }
        while (v72 != v71);
LABEL_216:
        v72 = (float *)v269;
        v73 = v246;
        if (!v269)
        {
LABEL_217:
          v75 = v258;
          if (!v258)
            goto LABEL_3;
          goto LABEL_220;
        }
      }
      v74 = (float *)v270;
      if ((float *)v270 == v72)
      {
        *(_QWORD *)&v270 = v72;
        operator delete(v72);
        v75 = v258;
        if (!v258)
          goto LABEL_3;
      }
      else
      {
        do
        {
          if (*((char *)v74 - 1) < 0)
            operator delete(*((void **)v74 - 3));
          v74 -= 10;
        }
        while (v74 != v72);
        *(_QWORD *)&v270 = v72;
        operator delete(v269);
        v75 = v258;
        if (!v258)
          goto LABEL_3;
      }
LABEL_220:
      operator delete(v75);
LABEL_3:
      v4 = v73 + 4;
    }
    while (v4 != v244);
  }
  v131 = *(_QWORD *)(v3 + 80);
  v255 = (_QWORD *)(v3 + 80);
  v132 = *(void ***)(v3 + 88);
  if ((void **)v131 != v132)
  {
    v133 = -*(float *)(v3 + 112);
    v134 = *(_QWORD *)(v3 + 80);
    do
    {
      v135 = exp2(*(float *)v134 * 1.44269504);
      v136 = pow((double)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v134 + 16) - *(_QWORD *)(v134 + 8)) >> 3)), v133);
      v137 = pow(v135, v136);
      *(float *)(v134 + 4) = v137;
      v134 += 48;
    }
    while ((void **)v134 != v132);
  }
  if (0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 4) >= *(_QWORD *)(v3 + 104))
    v138 = *(_QWORD *)(v3 + 104);
  else
    v138 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v132 - v131) >> 4);
  if (v138)
  {
    v139 = (void **)(v131 + 48 * v138);
    if (v138 >= 2)
    {
      v140 = (unint64_t)(v138 - 2) >> 1;
      v141 = v140 + 1;
      v142 = v131 + 48 * v140;
      do
      {
        sub_1B035C5FC(v131, v138, v142);
        v142 -= 48;
        --v141;
      }
      while (v141);
    }
    if (v139 != v132)
    {
      v143 = v131 + 48 * v138;
      do
      {
        if (*(float *)(v143 + 4) > *(float *)(v131 + 4))
        {
          sub_1B0380948((uint64_t)__p, v143);
          if (v143 != v131)
            sub_1B03810B8((void **)(v143 + 8), *(_QWORD *)(v131 + 8), *(_QWORD *)(v131 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v131 + 16) - *(_QWORD *)(v131 + 8)) >> 3));
          v145 = *(const void **)(v143 + 32);
          if (v145)
          {
            CFRelease(v145);
            *(_QWORD *)(v143 + 32) = 0;
          }
          *(_QWORD *)(v143 + 32) = CFRetain(*(CFTypeRef *)(v131 + 32));
          *(_QWORD *)v143 = *(_QWORD *)v131;
          *(_QWORD *)(v143 + 40) = *(_QWORD *)(v131 + 40);
          if ((void **)v131 != __p)
            sub_1B03810B8((void **)(v131 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
          v146 = *(const void **)(v131 + 32);
          if (v146)
          {
            CFRelease(v146);
            *(_QWORD *)(v131 + 32) = 0;
          }
          *(_QWORD *)(v131 + 32) = CFRetain(cf);
          *(void **)v131 = __p[0];
          v147 = cf;
          *(_QWORD *)(v131 + 40) = v267;
          if (v147)
          {
            CFRelease(v147);
            cf = 0;
          }
          v148 = (void **)__p[1];
          if (__p[1])
          {
            v149 = (void **)v265;
            v144 = __p[1];
            if ((void *)v265 != __p[1])
            {
              do
              {
                if (*((char *)v149 - 1) < 0)
                  operator delete(*(v149 - 3));
                v149 -= 5;
              }
              while (v149 != v148);
              v144 = __p[1];
            }
            *(_QWORD *)&v265 = v148;
            operator delete(v144);
          }
          sub_1B035C5FC(v131, v138, v131);
        }
        v143 += 48;
      }
      while ((void **)v143 != v132);
    }
    if (v138 >= 2)
    {
      v150 = 48 * v138 / 0x30uLL;
      do
      {
        sub_1B0380948((uint64_t)&v258, v131);
        v153 = 0;
        v154 = v131;
        do
        {
          v155 = v154 + 48 * v153 + 48;
          v156 = 2 * v153;
          v153 = (2 * v153) | 1;
          if (v156 + 2 < v150)
          {
            v157 = *(float *)(v155 + 4);
            v158 = *(float *)(v155 + 52);
            v155 += 48 * (v157 > v158);
            if (v157 > v158)
              v153 = v156 + 2;
          }
          if (v154 != v155)
            sub_1B03810B8((void **)(v154 + 8), *(_QWORD *)(v155 + 8), *(_QWORD *)(v155 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v155 + 16) - *(_QWORD *)(v155 + 8)) >> 3));
          v159 = *(const void **)(v154 + 32);
          if (v159)
          {
            CFRelease(v159);
            *(_QWORD *)(v154 + 32) = 0;
          }
          *(_QWORD *)(v154 + 32) = CFRetain(*(CFTypeRef *)(v155 + 32));
          *(_QWORD *)v154 = *(_QWORD *)v155;
          *(_QWORD *)(v154 + 40) = *(_QWORD *)(v155 + 40);
          v154 = v155;
        }
        while (v153 <= (uint64_t)((unint64_t)(v150 - 2) >> 1));
        v160 = v139 - 6;
        if ((void **)v155 == v139 - 6)
        {
          if ((void **)v155 != &v258)
            sub_1B03810B8((void **)(v155 + 8), (uint64_t)v259, (uint64_t)v260, 0xCCCCCCCCCCCCCCCDLL * (((char *)v260 - (_BYTE *)v259) >> 3));
          v173 = *(const void **)(v155 + 32);
          if (v173)
          {
            CFRelease(v173);
            *(_QWORD *)(v155 + 32) = 0;
          }
          *(_QWORD *)(v155 + 32) = CFRetain(v262);
          *(_QWORD *)v155 = v258;
          *(_QWORD *)(v155 + 40) = v263;
        }
        else
        {
          sub_1B03810B8((void **)(v155 + 8), (uint64_t)*(v139 - 5), (uint64_t)*(v139 - 4), 0xCCCCCCCCCCCCCCCDLL * (((_BYTE *)*(v139 - 4) - (_BYTE *)*(v139 - 5)) >> 3));
          v161 = *(const void **)(v155 + 32);
          if (v161)
          {
            CFRelease(v161);
            *(_QWORD *)(v155 + 32) = 0;
          }
          *(_QWORD *)(v155 + 32) = CFRetain(*(v139 - 2));
          *(_QWORD *)v155 = *(v139 - 6);
          *(_QWORD *)(v155 + 40) = *(v139 - 1);
          if (v160 != &v258)
            sub_1B03810B8(v139 - 5, (uint64_t)v259, (uint64_t)v260, 0xCCCCCCCCCCCCCCCDLL * (((char *)v260 - (_BYTE *)v259) >> 3));
          v162 = *(v139 - 2);
          if (v162)
          {
            CFRelease(v162);
            *(v139 - 2) = 0;
          }
          *(v139 - 2) = (void *)CFRetain(v262);
          *(v139 - 6) = v258;
          *(v139 - 1) = v263;
          v163 = v155 - v131 + 48;
          if (v163 >= 49)
          {
            v164 = (v163 / 0x30uLL - 2) >> 1;
            v165 = v131 + 48 * v164;
            if (*(float *)(v165 + 4) > *(float *)(v155 + 4))
            {
              sub_1B0380948((uint64_t)__p, v155);
              do
              {
                v166 = v165;
                if (v155 != v165)
                  sub_1B03810B8((void **)(v155 + 8), *(_QWORD *)(v165 + 8), *(_QWORD *)(v165 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v165 + 16) - *(_QWORD *)(v165 + 8)) >> 3));
                v167 = *(const void **)(v155 + 32);
                if (v167)
                {
                  CFRelease(v167);
                  *(_QWORD *)(v155 + 32) = 0;
                }
                *(_QWORD *)(v155 + 32) = CFRetain(*(CFTypeRef *)(v165 + 32));
                *(_QWORD *)v155 = *(_QWORD *)v165;
                *(_QWORD *)(v155 + 40) = *(_QWORD *)(v165 + 40);
                if (!v164)
                  break;
                v164 = (v164 - 1) >> 1;
                v165 = v131 + 48 * v164;
                v155 = v166;
              }
              while (*(float *)(v165 + 4) > *((float *)__p + 1));
              if ((void **)v166 != __p)
                sub_1B03810B8((void **)(v166 + 8), (uint64_t)__p[1], v265, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v265 - (unint64_t)__p[1]) >> 3));
              v168 = *(const void **)(v166 + 32);
              if (v168)
              {
                CFRelease(v168);
                *(_QWORD *)(v166 + 32) = 0;
              }
              *(_QWORD *)(v166 + 32) = CFRetain(cf);
              *(void **)v166 = __p[0];
              v169 = cf;
              *(_QWORD *)(v166 + 40) = v267;
              if (v169)
              {
                CFRelease(v169);
                cf = 0;
              }
              v170 = (void **)__p[1];
              if (__p[1])
              {
                v171 = (void **)v265;
                if ((void *)v265 == __p[1])
                {
                  *(void **)&v265 = __p[1];
                  operator delete(__p[1]);
                  v172 = v262;
                  if (!v262)
                    goto LABEL_304;
                }
                else
                {
                  do
                  {
                    if (*((char *)v171 - 1) < 0)
                      operator delete(*(v171 - 3));
                    v171 -= 5;
                  }
                  while (v171 != v170);
                  *(_QWORD *)&v265 = v170;
                  operator delete(__p[1]);
                  v172 = v262;
                  if (!v262)
                    goto LABEL_304;
                }
LABEL_303:
                CFRelease(v172);
                v262 = 0;
                goto LABEL_304;
              }
            }
          }
        }
        v172 = v262;
        if (v262)
          goto LABEL_303;
LABEL_304:
        v174 = (std::string *)v259;
        if (v259)
        {
          v175 = v260;
          v151 = v259;
          if (v260 != v259)
          {
            do
            {
              if (SHIBYTE(v175[-1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(v175[-1].__r_.__value_.__l.__data_);
              v175 = (std::string *)((char *)v175 - 40);
            }
            while (v175 != v174);
            v151 = v259;
          }
          v260 = v174;
          operator delete(v151);
        }
        v139 = v160;
      }
      while (v150-- > 2);
    }
  }
  v176 = a1;
  v177 = a1[11];
  v178 = a1[10] + 48 * v138;
  if (v178 != v177)
  {
    while (v177 != v178)
    {
      v180 = *(const void **)(v177 - 16);
      if (v180)
      {
        CFRelease(v180);
        *(_QWORD *)(v177 - 16) = 0;
      }
      v181 = *(_QWORD *)(v177 - 40);
      if (v181)
      {
        v182 = *(_QWORD *)(v177 - 32);
        v179 = *(void **)(v177 - 40);
        if (v182 != v181)
        {
          do
          {
            if (*(char *)(v182 - 1) < 0)
              operator delete(*(void **)(v182 - 24));
            v182 -= 40;
          }
          while (v182 != v181);
          v179 = *(void **)(v177 - 40);
        }
        *(_QWORD *)(v177 - 32) = v181;
        operator delete(v179);
      }
      v177 -= 48;
    }
    a1[11] = v178;
  }
  v183 = (void **)(a1 + 7);
  v184 = a1[7];
  if (v184)
  {
    v185 = a1[8];
    v186 = (void *)a1[7];
    if (v185 != v184)
    {
      do
      {
        v188 = *(const void **)(v185 - 16);
        if (v188)
        {
          CFRelease(v188);
          *(_QWORD *)(v185 - 16) = 0;
        }
        v189 = *(_QWORD *)(v185 - 40);
        if (v189)
        {
          v190 = *(_QWORD *)(v185 - 32);
          v187 = *(void **)(v185 - 40);
          if (v190 != v189)
          {
            do
            {
              if (*(char *)(v190 - 1) < 0)
                operator delete(*(void **)(v190 - 24));
              v190 -= 40;
            }
            while (v190 != v189);
            v187 = *(void **)(v185 - 40);
          }
          *(_QWORD *)(v185 - 32) = v189;
          operator delete(v187);
        }
        v185 -= 48;
      }
      while (v185 != v184);
      v186 = *v183;
    }
    a1[8] = v184;
    operator delete(v186);
    *v183 = 0;
    a1[8] = 0;
    a1[9] = 0;
    v178 = a1[11];
  }
  v191 = a1[12];
  v192 = (_QWORD *)a1[10];
  a1[7] = v192;
  a1[8] = v178;
  a1[9] = v191;
  v255[1] = 0;
  v255[2] = 0;
  *v255 = 0;
  a3[1] = 0;
  a3[2] = 0;
  for (*a3 = 0; v192 != (_QWORD *)v178; v192 += 6)
  {
    while (1)
    {
      v194 = *(_QWORD *)(v192[2] - 40);
      if (v194 != v176[16])
        break;
      v196 = v176[11];
      v195 = v176[12];
      if (v196 < v195)
      {
        sub_1B0380948(v176[11], (uint64_t)v192);
        v193 = v196 + 48;
        v176[11] = v196 + 48;
LABEL_346:
        v176[11] = v193;
        v192 += 6;
        if (v192 == (_QWORD *)v178)
          return;
      }
      else
      {
        v197 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v196 - *v255) >> 4);
        v198 = v197 + 1;
        if (v197 + 1 > 0x555555555555555)
          sub_1B035C268();
        v199 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v195 - *v255) >> 4);
        if (2 * v199 > v198)
          v198 = 2 * v199;
        if (v199 >= 0x2AAAAAAAAAAAAAALL)
          v200 = 0x555555555555555;
        else
          v200 = v198;
        cf = a1 + 12;
        if (v200)
        {
          if (v200 > 0x555555555555555)
            sub_1B02D72AC();
          v201 = (char *)operator new(48 * v200);
        }
        else
        {
          v201 = 0;
        }
        __p[0] = v201;
        __p[1] = &v201[48 * v197];
        *(void **)&v265 = __p[1];
        *((_QWORD *)&v265 + 1) = &v201[48 * v200];
        sub_1B0380948((uint64_t)__p[1], (uint64_t)v192);
        v213 = (char *)__p[1];
        v193 = v265 + 48;
        *(_QWORD *)&v265 = v265 + 48;
        v214 = (char *)v176[10];
        v215 = (char *)v176[11];
        if (v215 == v214)
        {
          v176[10] = __p[1];
          v176[11] = v193;
          v176[12] = *((_QWORD *)&v265 + 1);
        }
        else
        {
          v216 = 0;
          do
          {
            v217 = *(_QWORD *)&v215[v216 - 48];
            *(_QWORD *)&v213[v216 - 40] = 0;
            v218 = (uint64_t)&v213[v216 - 40];
            *(_QWORD *)(v218 - 8) = v217;
            *(_QWORD *)(v218 + 8) = 0;
            *(_QWORD *)(v218 + 16) = 0;
            sub_1B0380ED0((_BYTE *)v218, *(_QWORD *)&v215[v216 - 40], *(_QWORD *)&v215[v216 - 32], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)&v215[v216 - 32] - *(_QWORD *)&v215[v216 - 40]) >> 3));
            v219 = CFRetain(*(CFTypeRef *)&v215[v216 - 16]);
            v220 = &v213[v216];
            *((_QWORD *)v220 - 2) = v219;
            *((_QWORD *)v220 - 1) = *(_QWORD *)&v215[v216 - 8];
            v216 -= 48;
          }
          while (&v215[v216] != v214);
          v215 = (char *)v176[10];
          v221 = (char *)v176[11];
          v176[10] = &v213[v216];
          v222 = v265;
          *(_OWORD *)(v176 + 11) = v265;
          v193 = v222;
          while (v221 != v215)
          {
            v224 = (const void *)*((_QWORD *)v221 - 2);
            if (v224)
            {
              CFRelease(v224);
              *((_QWORD *)v221 - 2) = 0;
            }
            v225 = *((_QWORD *)v221 - 5);
            if (v225)
            {
              v226 = *((_QWORD *)v221 - 4);
              v223 = (void *)*((_QWORD *)v221 - 5);
              if (v226 != v225)
              {
                do
                {
                  if (*(char *)(v226 - 1) < 0)
                    operator delete(*(void **)(v226 - 24));
                  v226 -= 40;
                }
                while (v226 != v225);
                v223 = (void *)*((_QWORD *)v221 - 5);
              }
              *((_QWORD *)v221 - 4) = v225;
              operator delete(v223);
            }
            v221 -= 48;
          }
        }
        if (!v215)
          goto LABEL_346;
        operator delete(v215);
        v176[11] = v193;
        v192 += 6;
        if (v192 == (_QWORD *)v178)
          return;
      }
    }
    v202 = (const void *)v192[4];
    v203 = v192[5];
    sub_1B0380A9C((uint64_t)v192, &v269);
    v205 = (char *)a3[1];
    v204 = (char *)a3[2];
    if (v205 >= v204)
    {
      v208 = 0xAAAAAAAAAAAAAAABLL * ((v205 - (_BYTE *)*a3) >> 4);
      v209 = v208 + 1;
      if (v208 + 1 > 0x555555555555555)
        sub_1B035C268();
      v210 = 0xAAAAAAAAAAAAAAABLL * ((v204 - (_BYTE *)*a3) >> 4);
      if (2 * v210 > v209)
        v209 = 2 * v210;
      if (v210 >= 0x2AAAAAAAAAAAAAALL)
        v211 = 0x555555555555555;
      else
        v211 = v209;
      cf = a3 + 2;
      if (v211)
      {
        if (v211 > 0x555555555555555)
          sub_1B02D72AC();
        v212 = (char *)operator new(48 * v211);
      }
      else
      {
        v212 = 0;
      }
      __p[0] = v212;
      __p[1] = &v212[48 * v208];
      *(void **)&v265 = __p[1];
      *((_QWORD *)&v265 + 1) = &v212[48 * v211];
      sub_1B035C0FC((_QWORD *)__p[1], v194, v202, v203, (uint64_t)&v269);
      v227 = __p[1];
      v228 = (void *)(v265 + 48);
      *(_QWORD *)&v265 = v265 + 48;
      v229 = (CFTypeRef *)*a3;
      v230 = (CFTypeRef *)a3[1];
      v268.__r_.__value_.__l.__data_ = (std::string::pointer)__p[1];
      v268.__r_.__value_.__l.__size_ = (std::string::size_type)__p[1];
      v271 = *(_OWORD *)&v268.__r_.__value_.__l.__data_;
      v258 = a3 + 2;
      v259 = &v271;
      v260 = &v268;
      v261 = 0;
      if (v230 == v229)
      {
        *a3 = __p[1];
        a3[1] = v228;
        a3[2] = (void *)*((_QWORD *)&v265 + 1);
      }
      else
      {
        v231 = v230;
        do
        {
          v232 = (uint64_t)*(v231 - 6);
          v231 -= 6;
          *(v227 - 6) = v232;
          v233 = CFRetain(v231[1]);
          v234 = (uint64_t)*(v230 - 4);
          *(v227 - 3) = 0;
          v235 = (char *)(v227 - 3);
          *(v227 - 5) = v233;
          *(v227 - 4) = v234;
          *((_QWORD *)v235 + 1) = 0;
          *((_QWORD *)v235 + 2) = 0;
          v237 = *(v230 - 3);
          v236 = *(v230 - 2);
          v238 = v236 - v237;
          if (v236 != v237)
          {
            if (v238 < 0)
              sub_1B02D7758();
            v239 = (char *)operator new(v236 - v237);
            *(v227 - 3) = v239;
            *(v227 - 2) = v239;
            v240 = &v239[8 * (v238 >> 3)];
            *(v227 - 1) = v240;
            memcpy(v239, v237, v238);
            *(v227 - 2) = v240;
          }
          v227 = (_QWORD *)(v268.__r_.__value_.__l.__size_ - 48);
          v268.__r_.__value_.__l.__size_ -= 48;
          v230 = v231;
        }
        while (v231 != v229);
        v230 = (CFTypeRef *)*a3;
        v241 = (CFTypeRef *)a3[1];
        *a3 = v227;
        a3[1] = v228;
        a3[2] = (void *)*((_QWORD *)&v265 + 1);
        while (v241 != v230)
        {
          v242 = *(v241 - 5);
          if (v242)
          {
            CFRelease(v242);
            *(v241 - 5) = 0;
          }
          v243 = (void *)*(v241 - 3);
          if (v243)
          {
            *(v241 - 2) = v243;
            operator delete(v243);
          }
          v241 -= 6;
        }
      }
      if (v230)
        operator delete(v230);
      v176 = a1;
      a3[1] = v228;
      v207 = v269;
      if (!v269)
        continue;
    }
    else
    {
      sub_1B035C0FC(a3[1], v194, v202, v203, (uint64_t)&v269);
      v206 = v205 + 48;
      a3[1] = v206;
      a3[1] = v206;
      v207 = v269;
      if (!v269)
        continue;
    }
    *(_QWORD *)&v270 = v207;
    operator delete(v207);
  }
}

void sub_1B035B71C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void **a11)
{
  sub_1B0346478(a11);
  _Unwind_Resume(a1);
}

void sub_1B035B734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void **a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 168);
  if (v33)
  {
    *(_QWORD *)(v31 - 160) = v33;
    operator delete(v33);
  }
  sub_1B0346478(a11);
  _Unwind_Resume(a1);
}

void sub_1B035B97C()
{
  JUMPOUT(0x1B035BA1CLL);
}

void sub_1B035B9F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_list va;

  va_start(va, a17);
  sub_1B0380A18((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B035BA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  for (; v32; v32 += 40)
  {
    if (*(char *)(v31 + v32 + 39) < 0)
      operator delete(*(void **)(v31 + v32 + 16));
  }
  sub_1B035C3A4((uint64_t)&a31);
  if (*(char *)(v33 - 169) < 0)
    JUMPOUT(0x1B035BADCLL);
  JUMPOUT(0x1B035BAE0);
}

void sub_1B035BA50()
{
  JUMPOUT(0x1B035BAE0);
}

void sub_1B035BA58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void **a32,void **a33)
{
  uint64_t v33;
  void **v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;

  if (a32)
  {
    v35 = a33;
    v36 = a32;
    if (a33 != a32)
    {
      do
      {
        if (*((char *)v35 - 1) < 0)
          operator delete(*(v35 - 3));
        v35 -= 5;
      }
      while (v35 != a32);
      v36 = a32;
    }
    operator delete(v36);
  }
  v37 = *(_QWORD *)(v33 - 168);
  if (v37)
  {
    v38 = *(_QWORD *)(v33 - 160);
    v39 = *(void **)(v33 - 168);
    if (v38 != v37)
    {
      do
      {
        if (*(char *)(v38 - 1) < 0)
          operator delete(*(void **)(v38 - 24));
        v38 -= 40;
      }
      while (v38 != v37);
      v39 = *(void **)(v33 - 168);
    }
    *(_QWORD *)(v33 - 160) = v37;
    operator delete(v39);
  }
  if (a25)
    operator delete(a25);
  _Unwind_Resume(a1);
}

void sub_1B035BAB4()
{
  uint64_t v0;

  if (v0)
    JUMPOUT(0x1B035BADCLL);
  JUMPOUT(0x1B035BAE0);
}

uint64_t sub_1B035BB3C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  std::string __p;
  _BYTE v27[128];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (!objc_msgSend_count(*(void **)(a1 + 48), a2, a3, a4))
    return 0;
  v6 = (void *)MEMORY[0x1E0CB3940];
  sub_1B0380D00((uint64_t)a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    objc_msgSend_stringWithUTF8String_(v6, v7, (uint64_t)&__p, v8);
  else
    objc_msgSend_stringWithUTF8String_(v6, v7, (uint64_t)__p.__r_.__value_.__l.__data_, v8);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = objc_msgSend_length(v12, v9, v10, v11);
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  v14 = *(id *)(a1 + 48);
  v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v15, (uint64_t)&v22, (uint64_t)v27, 16);
  if (v17)
  {
    v18 = *(_QWORD *)v23;
    while (2)
    {
      v19 = 0;
      do
      {
        if (*(_QWORD *)v23 != v18)
          objc_enumerationMutation(v14);
        if (objc_msgSend_rangeOfFirstMatchInString_options_range_(*(void **)(*((_QWORD *)&v22 + 1) + 8 * v19), v16, (uint64_t)v12, 0, 0, v13, (_QWORD)v22) != 0x7FFFFFFFFFFFFFFFLL)
        {
          v20 = 1;
          goto LABEL_17;
        }
        ++v19;
      }
      while (v17 != v19);
      v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(v14, v16, (uint64_t)&v22, (uint64_t)v27, 16);
      if (v17)
        continue;
      break;
    }
  }
  v20 = 0;
LABEL_17:

  return v20;
}

void sub_1B035BCE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  void *v22;
  void *v23;

  _Unwind_Resume(a1);
}

void sub_1B035BD2C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;

  v2 = a1[7];
  for (i = a1[8]; i != v2; i -= 48)
  {
    v5 = *(const void **)(i - 16);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(i - 16) = 0;
    }
    v6 = *(_QWORD *)(i - 40);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 32);
      v4 = *(void **)(i - 40);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)(v7 - 24));
          v7 -= 40;
        }
        while (v7 != v6);
        v4 = *(void **)(i - 40);
      }
      *(_QWORD *)(i - 32) = v6;
      operator delete(v4);
    }
  }
  a1[8] = v2;
  v8 = a1[10];
  for (j = a1[11]; j != v8; j -= 48)
  {
    v11 = *(const void **)(j - 16);
    if (v11)
    {
      CFRelease(v11);
      *(_QWORD *)(j - 16) = 0;
    }
    v12 = *(_QWORD *)(j - 40);
    if (v12)
    {
      v13 = *(_QWORD *)(j - 32);
      v10 = *(void **)(j - 40);
      if (v13 != v12)
      {
        do
        {
          if (*(char *)(v13 - 1) < 0)
            operator delete(*(void **)(v13 - 24));
          v13 -= 40;
        }
        while (v13 != v12);
        v10 = *(void **)(j - 40);
      }
      *(_QWORD *)(j - 32) = v12;
      operator delete(v10);
    }
  }
  a1[11] = v8;
  a1[17] = 1;
}

_QWORD *sub_1B035BE48(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFArrayGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_1B035BEC4(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

void sub_1B035BEF4(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B035BEF4(a1, *(_QWORD *)a2);
    sub_1B035BEF4(a1, *((_QWORD *)a2 + 1));
    if (a2[63] < 0)
      operator delete(*((void **)a2 + 5));
    operator delete(a2);
  }
}

void sub_1B035BF54(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_1B035BF54(a1, *(_QWORD *)a2);
    sub_1B035BF54(a1, *((_QWORD *)a2 + 1));
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

unint64_t sub_1B035BFB4@<X0>(const __CFArray *a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  const __CFString *ValueAtIndex;
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B035C098(exception);
    goto LABEL_8;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(ValueAtIndex))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_1B034ACEC(ValueAtIndex, a3);
}

void sub_1B035C068(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B035C084(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

std::runtime_error *sub_1B035C098@<X0>(std::runtime_error *a1@<X8>)
{
  return std::runtime_error::runtime_error(a1, "Could not find item");
}

uint64_t sub_1B035C0A8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1B035BF54(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1B035BF54(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

void sub_1B035C0FC(_QWORD *a1, uint64_t a2, CFTypeRef cf, uint64_t a4, uint64_t a5)
{
  _BYTE *v7;
  _BYTE *v8;
  CFTypeRef v9;
  uint64_t v10;
  char *v11;
  char *v12;

  v7 = *(_BYTE **)a5;
  v8 = *(_BYTE **)(a5 + 8);
  *(_QWORD *)(a5 + 8) = 0;
  *(_QWORD *)(a5 + 16) = 0;
  *(_QWORD *)a5 = 0;
  *a1 = a2;
  v9 = CFRetain(cf);
  a1[3] = 0;
  a1[1] = v9;
  a1[2] = a4;
  a1[4] = 0;
  a1[5] = 0;
  v10 = v8 - v7;
  if (v8 != v7)
  {
    if (v10 < 0)
      sub_1B02D7758();
    v11 = (char *)operator new(v8 - v7);
    a1[3] = v11;
    a1[4] = v11;
    v12 = &v11[8 * (v10 >> 3)];
    a1[5] = v12;
    memcpy(v11, v7, v8 - v7);
    a1[4] = v12;
  }
  if (v7)
    operator delete(v7);
}

void sub_1B035C1B0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (!v1)
    _Unwind_Resume(exception_object);
  operator delete(v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B035C1F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  const void *v4;
  void *v5;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v4 = *(const void **)(i - 40);
    if (v4)
    {
      CFRelease(v4);
      *(_QWORD *)(i - 40) = 0;
    }
    v5 = *(void **)(i - 24);
    if (v5)
    {
      *(_QWORD *)(i - 16) = v5;
      operator delete(v5);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void sub_1B035C268()
{
  sub_1B02D7554("vector");
}

uint64_t sub_1B035C27C(uint64_t a1)
{
  _QWORD *v3;
  _QWORD *v4;
  const void *v5;
  void *v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8);
    v4 = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 8);
    while (v3 != v4)
    {
      v5 = (const void *)v3[1];
      if (v5)
      {
        CFRelease(v5);
        v3[1] = 0;
      }
      v6 = (void *)v3[3];
      if (v6)
      {
        v3[4] = v6;
        operator delete(v6);
      }
      v3 += 6;
    }
  }
  return a1;
}

uint64_t sub_1B035C2F0(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 48;
    v5 = *(const void **)(i - 16);
    if (v5)
    {
      CFRelease(v5);
      *(_QWORD *)(i - 16) = 0;
    }
    v6 = *(_QWORD *)(i - 40);
    if (v6)
    {
      v7 = *(_QWORD *)(i - 32);
      v4 = *(void **)(i - 40);
      if (v7 != v6)
      {
        do
        {
          if (*(char *)(v7 - 1) < 0)
            operator delete(*(void **)(v7 - 24));
          v7 -= 40;
        }
        while (v7 != v6);
        v4 = *(void **)(i - 40);
      }
      *(_QWORD *)(i - 32) = v6;
      operator delete(v4);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1B035C3A4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      v5 = v2 - 40;
      *(_QWORD *)(a1 + 16) = v2 - 40;
      if (*(char *)(v2 - 1) < 0)
      {
        operator delete(*(void **)(v2 - 24));
        v5 = *(_QWORD *)(a1 + 16);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1B035C408(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *v14;
  const void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  __int128 v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_1B035C268();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_1B02D72AC();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v19 = (uint64_t)&v7[48 * v3];
  *((_QWORD *)&v20 + 1) = &v7[48 * v6];
  sub_1B0380948(v19, a2);
  v8 = 0;
  v10 = (char *)*a1;
  for (i = a1[1]; (char *)(i + v8) != v10; sub_1B0380948(v8 + v19, v8 + i))
    v8 -= 48;
  v11 = v19 + v8;
  v12 = (char *)*a1;
  v13 = (char *)a1[1];
  *a1 = v11;
  *(_QWORD *)&v20 = v19 + 48;
  *(_OWORD *)(a1 + 1) = v20;
  while (v13 != v12)
  {
    v15 = (const void *)*((_QWORD *)v13 - 2);
    if (v15)
    {
      CFRelease(v15);
      *((_QWORD *)v13 - 2) = 0;
    }
    v16 = *((_QWORD *)v13 - 5);
    if (v16)
    {
      v17 = *((_QWORD *)v13 - 4);
      v14 = (void *)*((_QWORD *)v13 - 5);
      if (v17 != v16)
      {
        do
        {
          if (*(char *)(v17 - 1) < 0)
            operator delete(*(void **)(v17 - 24));
          v17 -= 40;
        }
        while (v17 != v16);
        v14 = (void *)*((_QWORD *)v13 - 5);
      }
      *((_QWORD *)v13 - 4) = v16;
      operator delete(v14);
    }
    v13 -= 48;
  }
  if (v12)
    operator delete(v12);
  return v19 + 48;
}

void sub_1B035C5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_1B035C2F0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B035C5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  float v10;
  float v11;
  uint64_t v12;
  const void *v13;
  uint64_t v14;
  float v15;
  float v16;
  const void *v17;
  CFTypeRef v18;
  void **v19;
  void **v20;
  void *v21;
  uint64_t v22;
  void *__p;
  void **v24;
  CFTypeRef cf;
  uint64_t v26;

  v3 = a2 - 2;
  if (a2 >= 2)
  {
    v4 = a3;
    v6 = v3 >> 1;
    if ((uint64_t)(v3 >> 1) >= (uint64_t)(0xAAAAAAAAAAAAAAABLL * ((a3 - a1) >> 4)))
    {
      v8 = (0x5555555555555556 * ((a3 - a1) >> 4)) | 1;
      v9 = a1 + 48 * v8;
      if (0x5555555555555556 * ((a3 - a1) >> 4) + 2 < a2)
      {
        v10 = *(float *)(v9 + 4);
        v11 = *(float *)(v9 + 52);
        v9 += 48 * (v10 > v11);
        if (v10 > v11)
          v8 = 0x5555555555555556 * ((a3 - a1) >> 4) + 2;
      }
      if (*(float *)(v9 + 4) <= *(float *)(a3 + 4))
      {
        sub_1B0380948((uint64_t)&v22, a3);
        do
        {
          v12 = v9;
          if (v4 != v9)
            sub_1B03810B8((void **)(v4 + 8), *(_QWORD *)(v9 + 8), *(_QWORD *)(v9 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(v9 + 16) - *(_QWORD *)(v9 + 8)) >> 3));
          v13 = *(const void **)(v4 + 32);
          if (v13)
          {
            CFRelease(v13);
            *(_QWORD *)(v4 + 32) = 0;
          }
          *(_QWORD *)(v4 + 32) = CFRetain(*(CFTypeRef *)(v9 + 32));
          *(_QWORD *)v4 = *(_QWORD *)v9;
          *(_QWORD *)(v4 + 40) = *(_QWORD *)(v9 + 40);
          if (v6 < v8)
            break;
          v14 = (2 * v8) | 1;
          v9 = a1 + 48 * v14;
          if (2 * v8 + 2 < a2)
          {
            v15 = *(float *)(v9 + 4);
            v16 = *(float *)(v9 + 52);
            v9 += 48 * (v15 > v16);
            if (v15 > v16)
              v14 = 2 * v8 + 2;
          }
          v4 = v12;
          v8 = v14;
        }
        while (*(float *)(v9 + 4) <= *((float *)&v22 + 1));
        if ((uint64_t *)v12 != &v22)
          sub_1B03810B8((void **)(v12 + 8), (uint64_t)__p, (uint64_t)v24, 0xCCCCCCCCCCCCCCCDLL * (((char *)v24 - (_BYTE *)__p) >> 3));
        v17 = *(const void **)(v12 + 32);
        if (v17)
        {
          CFRelease(v17);
          *(_QWORD *)(v12 + 32) = 0;
        }
        *(_QWORD *)(v12 + 32) = CFRetain(cf);
        *(_QWORD *)v12 = v22;
        v18 = cf;
        *(_QWORD *)(v12 + 40) = v26;
        if (v18)
        {
          CFRelease(v18);
          cf = 0;
        }
        v19 = (void **)__p;
        if (__p)
        {
          v20 = v24;
          v21 = __p;
          if (v24 != __p)
          {
            do
            {
              if (*((char *)v20 - 1) < 0)
                operator delete(*(v20 - 3));
              v20 -= 5;
            }
            while (v20 != v19);
            v21 = __p;
          }
          v24 = v19;
          operator delete(v21);
        }
      }
    }
  }
}

void sub_1B035C82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B0380A18(&a9);
  _Unwind_Resume(a1);
}

void sub_1B035C840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B0380A18(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B035C854(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  uint64_t v8;
  uint64_t v9;

  if (a4)
  {
    v5 = (_QWORD *)result;
    if (a4 >= 0x555555555555556)
      sub_1B035C268();
    result = (uint64_t)operator new(48 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = result + 48 * a4;
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = sub_1B0380948(v8 + v9, a2 + v9);
        v9 += 48;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1B035C910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1B035C954(&a9);
  _Unwind_Resume(a1);
}

void sub_1B035C924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 48)
    sub_1B0380A18((_QWORD *)(v10 - 48 + v11));
  *(_QWORD *)(v9 + 8) = v10;
  sub_1B035C954(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B035C954(void ***result)
{
  void ***v1;
  void **v2;
  char *v3;
  char *v4;
  void *v5;
  void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (char *)**result;
    if (v3)
    {
      v4 = (char *)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          v7 = (const void *)*((_QWORD *)v4 - 2);
          if (v7)
          {
            CFRelease(v7);
            *((_QWORD *)v4 - 2) = 0;
          }
          v8 = *((_QWORD *)v4 - 5);
          if (v8)
          {
            v9 = *((_QWORD *)v4 - 4);
            v6 = (void *)*((_QWORD *)v4 - 5);
            if (v9 != v8)
            {
              do
              {
                if (*(char *)(v9 - 1) < 0)
                  operator delete(*(void **)(v9 - 24));
                v9 -= 40;
              }
              while (v9 != v8);
              v6 = (void *)*((_QWORD *)v4 - 5);
            }
            *((_QWORD *)v4 - 4) = v8;
            operator delete(v6);
          }
          v4 -= 48;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

os_log_t sub_1B035CA3C()
{
  os_log_t result;

  result = os_log_create("com.apple.CVNLP", "Default");
  qword_1EEEB2D30 = (uint64_t)result;
  return result;
}

void sub_1B035CB74(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B035D93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, uint64_t a20,uint64_t a21,void *a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52)
{
  void *v52;

  _Unwind_Resume(a1);
}

id sub_1B035DC70(void ***a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  void *v16;
  void *v17;
  id v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  void *v28;
  const char *v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  uint64_t v36;
  void *v37;
  const char *v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  void *v43;
  CVNLPCaptionRuntimeReplacements *v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  const char *v52;
  void *v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void *v58;
  id v60;
  void *v61;
  id obj;
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  _BYTE v67[128];
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v60 = a2;
  objc_msgSend_objectForKeyedSubscript_(**a1, v3, (uint64_t)v60, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {

    goto LABEL_32;
  }
  objc_msgSend_objectForKeyedSubscript_(**a1, v6, (uint64_t)v60, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  if (!v8)
  {
LABEL_32:
    obj = 0;
    v53 = 0;
    v57 = objc_msgSend_copy(0, v9, v10, v11);
    goto LABEL_33;
  }
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v9, v10, v11);
  v61 = (void *)objc_claimAutoreleasedReturnValue();
  v65 = 0u;
  v66 = 0u;
  v63 = 0u;
  v64 = 0u;
  obj = v8;
  v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v12, (uint64_t)&v63, (uint64_t)v67, 16);
  if (v13)
  {
    v14 = *(_QWORD *)v64;
    do
    {
      for (i = 0; i != v13; ++i)
      {
        if (*(_QWORD *)v64 != v14)
          objc_enumerationMutation(obj);
        v16 = *(void **)(*((_QWORD *)&v63 + 1) + 8 * i);
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) != 0)
          v17 = v16;
        else
          v17 = 0;
        v18 = v17;
        v21 = v18;
        if (v18)
        {
          objc_msgSend_objectForKeyedSubscript_(v18, v19, (uint64_t)CFSTR("replaceKey"), v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_objectForKeyedSubscript_(v21, v23, (uint64_t)CFSTR("replaceKey"), v24);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v25 = 0;
          }

          objc_msgSend_objectForKeyedSubscript_(v21, v26, (uint64_t)CFSTR("replaceWith"), v27);
          v28 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_objectForKeyedSubscript_(v21, v29, (uint64_t)CFSTR("replaceWith"), v30);
            v31 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v31 = 0;
          }

          objc_msgSend_objectForKeyedSubscript_(v21, v32, (uint64_t)CFSTR("replaceProb"), v33);
          v34 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_objectForKeyedSubscript_(v21, v35, (uint64_t)CFSTR("replaceProb"), v36);
            v37 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v37 = 0;
          }

          objc_msgSend_objectForKeyedSubscript_(v21, v38, (uint64_t)CFSTR("genderOption"), v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          objc_opt_class();
          if ((objc_opt_isKindOfClass() & 1) != 0)
          {
            objc_msgSend_objectForKeyedSubscript_(v21, v41, (uint64_t)CFSTR("genderOption"), v42);
            v43 = (void *)objc_claimAutoreleasedReturnValue();
          }
          else
          {
            v43 = 0;
          }

          if (v25 && v31)
          {
            v44 = [CVNLPCaptionRuntimeReplacements alloc];
            objc_msgSend_doubleValue(v37, v45, v46, v47);
            v49 = (void *)objc_msgSend_initWithKey_value_prob_genderOption_(v44, v48, (uint64_t)v25, (uint64_t)v31, v43);
            objc_msgSend_addObject_(v61, v50, (uint64_t)v49, v51);

          }
        }

      }
      v13 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v52, (uint64_t)&v63, (uint64_t)v67, 16);
    }
    while (v13);
  }

  v53 = v61;
  v57 = objc_msgSend_copy(v61, v54, v55, v56);
LABEL_33:
  v58 = (void *)v57;

  return v58;
}

void sub_1B035E000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1B035E210(uint64_t a1)
{
  uint64_t result;
  int8_t v3;
  int v4;

  if (u_isWhitespace(a1))
    return 95;
  result = 57344;
  if ((a1 - 188) >= 3
    && (a1 - 48) >= 0xA
    && (a1 - 1632) >= 0xA
    && (_DWORD)a1 != 8585
    && (a1 & 0xFFFFFFF0) != 0x2150)
  {
    if (u_charType(a1) == 20)
    {
      return 57345;
    }
    else if (u_charType(a1) == 21)
    {
      return 57346;
    }
    else
    {
      result = 57347;
      if ((a1 > 0x3F || ((1 << a1) & 0x8C00502200000000) == 0)
        && ((a1 - 1548) > 0x13 || ((1 << (a1 - 12)) & 0x88001) == 0)
        && (_DWORD)a1 != 1642)
      {
        v3 = u_charType(a1);
        result = 57348;
        if ((_DWORD)a1 != 63743 && ((1 << v3) & 0x3FF80000) == 0)
        {
          v4 = 1 << u_charType(a1);
          result = a1;
          if ((v4 & 0x3E) != 0)
            JUMPOUT(0x1B5E08500);
        }
      }
    }
  }
  return result;
}

void sub_1B035E708(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B035E7AC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B035E7C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B035E870(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B035E88C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B035E938(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B035E960(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B035EA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPDecodingLanguageModel;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B035EE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, id a20)
{
  void *v20;
  void *v21;
  void *v22;
  void *v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;

  v27 = v24;

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B035EF2C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B035EF3C(uint64_t a1)
{

}

void sub_1B035EF44(uint64_t a1, void *a2, int a3, void *a4, CFStringRef theString1, _BYTE *a6)
{
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  int isEqualToString;
  id v21;

  if (CFStringCompare(theString1, (CFStringRef)*MEMORY[0x1E0D43828], 0) == kCFCompareEqualTo)
  {
    v21 = a4;
    objc_msgSend_localeIdentifier(v21, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_localeIdentifier(v21, v14, v15, v16);
    v17 = (void *)objc_claimAutoreleasedReturnValue();
    isEqualToString = objc_msgSend_isEqualToString_(v13, v18, (uint64_t)v17, v19);

    if (isEqualToString)
    {
      objc_storeStrong((id *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40), a2);
      *a6 = 1;
    }

  }
}

void sub_1B035F018(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B035F034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B035F04C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B035F0F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B035F110(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B035F1BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B035F1D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B035F4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  void *v35;
  uint64_t v36;

  if ((*(char *)(v36 - 33) & 0x80000000) == 0)
  {

    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v36 - 56));

  _Unwind_Resume(a1);
}

void sub_1B035F610(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void **v5;
  CFIndex v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  CFStringRef v10;
  void *v11;
  const char *v12;
  __CFString *v13;
  __CFString *v14;
  std::runtime_error *exception;
  void *__p[2];
  unsigned __int8 v17;
  CFStringRef v18;

  sub_1B03603F8((uint64_t)"/", 1, a1, a2, __p);
  if ((v17 & 0x80u) == 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if ((v17 & 0x80u) == 0)
    v6 = v17;
  else
    v6 = (CFIndex)__p[1];
  v10 = CFStringCreateWithBytes(0, (const UInt8 *)v5, v6, 0x8000100u, 0);
  v18 = v10;
  if (!v10)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((char)v17 < 0)
    operator delete(__p[0]);
  objc_msgSend_createBundle(*(void **)(a1 + 24), v7, v8, v9);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathForResource_ofType_(v11, v12, (uint64_t)v10, 0);
  v13 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v14 = v13;
  if (!v13)
    v13 = &stru_1E60CE768;
  sub_1B0349558(v13, a3);

  CFRelease(v10);
}

void sub_1B035F728(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B035F9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;
  void *v14;

  if (v14)
    operator delete(v14);

  _Unwind_Resume(a1);
}

void sub_1B035FDC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40)
{
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  void *v45;

  _Block_object_dispose(&a32, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose((const void *)(v43 - 216), 8);

  _Block_object_dispose((const void *)(v43 - 176), 8);
  v45 = *(void **)(v43 - 128);
  if (v45)
  {
    *(_QWORD *)(v43 - 120) = v45;
    operator delete(v45);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1B035FEC8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B035FEEC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 sub_1B035FF04(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = a2[3];
  a1[3] = result;
  return result;
}

void sub_1B035FF14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8;
  const char *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  int v23;
  void *v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  void *v40;
  const char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  const char *v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  _BYTE *v61;
  _DWORD *v62;
  char *v63;
  int64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  _OWORD *v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  int v73;
  uint64_t v74;

  v8 = objc_alloc(MEMORY[0x1E0CB3940]);
  v10 = (void *)objc_msgSend_initWithBytes_length_encoding_(v8, v9, a2, a3, 4);
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v11, v12, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByTrimmingCharactersInSet_(v10, v15, (uint64_t)v14, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_length(v17, v18, v19, v20))
  {
    v74 = 0;
    v21 = (void *)objc_opt_class();
    v23 = objc_msgSend__normalizedLMTokenIDForWord_withTokenID_sourceLanguageModel_outScore_(v21, v22, (uint64_t)v17, a4, *(_QWORD *)(a1 + 32), &v74);
    v24 = *(void **)(a1 + 40);
    v25 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24);
    v29 = objc_msgSend_length(v24, v26, v27, v28);
    v31 = objc_msgSend_rangeOfString_options_range_(v24, v30, (uint64_t)v17, 0, v25, v29 - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24));
    v35 = v31;
    if (v31 != 0x7FFFFFFFFFFFFFFFLL)
    {
      v36 = (uint64_t)v32;
      v37 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
      if (v31 >= *(_QWORD *)(v37 + 48))
      {
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) += *(_QWORD *)(v37 + 56);
        v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
        if (v38 < objc_msgSend_count(*(void **)(a1 + 48), v32, v33, v34))
        {
          objc_msgSend_objectAtIndex_(*(void **)(a1 + 48), v32, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24), v39);
          v40 = (void *)objc_claimAutoreleasedReturnValue();
          v44 = objc_msgSend_rangeValue(v40, v41, v42, v43);
          v45 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
          *(_QWORD *)(v45 + 48) = v44;
          *(_QWORD *)(v45 + 56) = v46;

          ++*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 88) + 8) + 24);
        }
      }
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 24) = v35 + v36;
      v47 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 80) + 8) + 24) + v35;
      v48 = *(void **)(a1 + 56);
      objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v32, v47, v36);
      v49 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_addObject_(v48, v50, (uint64_t)v49, v51);

      v52 = *(_QWORD **)(*(_QWORD *)(a1 + 96) + 8);
      v54 = (char *)v52[7];
      v53 = v52[8];
      if ((unint64_t)v54 < v53)
      {
        *(_DWORD *)v54 = v23;
        v55 = (uint64_t)(v54 + 4);
LABEL_27:
        v52[7] = v55;
        goto LABEL_28;
      }
      v56 = (char *)v52[6];
      v57 = (v54 - v56) >> 2;
      v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 62)
        sub_1B02D7758();
      v59 = v53 - (_QWORD)v56;
      if (v59 >> 1 > v58)
        v58 = v59 >> 1;
      if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL)
        v60 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v60 = v58;
      if (v60)
      {
        if (v60 >> 62)
          sub_1B02D72AC();
        v61 = operator new(4 * v60);
        v62 = &v61[4 * v57];
        v63 = &v61[4 * v60];
        *v62 = v23;
        v55 = (uint64_t)(v62 + 1);
        v64 = v54 - v56;
        if (v54 == v56)
          goto LABEL_25;
      }
      else
      {
        v61 = 0;
        v62 = (_DWORD *)(4 * v57);
        v63 = 0;
        *(_DWORD *)(4 * v57) = v23;
        v55 = 4 * v57 + 4;
        v64 = v54 - v56;
        if (v54 == v56)
        {
LABEL_25:
          v52[6] = v62;
          v52[7] = v55;
          v52[8] = v63;
          if (v56)
            operator delete(v56);
          goto LABEL_27;
        }
      }
      v65 = v64 - 4;
      if (v65 < 0x2C)
        goto LABEL_33;
      if ((unint64_t)(v56 - v61) < 0x20)
        goto LABEL_33;
      v66 = (v65 >> 2) + 1;
      v67 = 4 * (v66 & 0x7FFFFFFFFFFFFFF8);
      v68 = &v54[-v67];
      v62 = (_DWORD *)((char *)v62 - v67);
      v69 = &v61[4 * v57 - 16];
      v70 = v54 - 16;
      v71 = v66 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v72 = *(_OWORD *)v70;
        *(v69 - 1) = *((_OWORD *)v70 - 1);
        *v69 = v72;
        v69 -= 2;
        v70 -= 32;
        v71 -= 8;
      }
      while (v71);
      v54 = v68;
      if (v66 != (v66 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_33:
        do
        {
          v73 = *((_DWORD *)v54 - 1);
          v54 -= 4;
          *--v62 = v73;
        }
        while (v54 != v56);
      }
      goto LABEL_25;
    }
  }
LABEL_28:

}

void sub_1B0360254(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0360268(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0360278(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036028C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03602A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03602B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03602C4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0360380(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0360394(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03603A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03603B4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B03603F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  std::ios_base *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  void **p_src;
  size_t v26;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  void **__src;
  unint64_t v32;
  unsigned __int8 v33;
  uint64_t v34;
  uint64_t v35[8];
  void *__p[2];
  __int128 v37;
  int v38;
  uint64_t v39[20];

  v10 = MEMORY[0x1E0DE4FE0];
  v11 = MEMORY[0x1E0DE4FE0] + 64;
  v12 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v13 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v14 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v39[0] = MEMORY[0x1E0DE4FE0] + 64;
  v34 = v13;
  *(uint64_t *)((char *)&v35[-1] + *(_QWORD *)(v13 - 24)) = v14;
  v15 = (std::ios_base *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24));
  std::ios_base::init(v15, v35);
  v15[1].__vftable = 0;
  v15[1].__fmtflags_ = -1;
  v34 = v10 + 24;
  v39[0] = v11;
  std::streambuf::basic_streambuf();
  v16 = MEMORY[0x1E0DE4FB8];
  v35[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v37 = 0u;
  v38 = 16;
  v17 = *(char *)(a3 + 23);
  if (v17 >= 0)
    v18 = a3;
  else
    v18 = *(_QWORD *)a3;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a3 + 23);
  else
    v19 = *(_QWORD *)(a3 + 8);
  v20 = sub_1B02D7994(&v34, v18, v19);
  sub_1B02D7994(v20, a1, a2);
  v21 = *(char *)(a4 + 23);
  if (v21 >= 0)
    v22 = a4;
  else
    v22 = *(_QWORD *)a4;
  if (v21 >= 0)
    v23 = *(unsigned __int8 *)(a4 + 23);
  else
    v23 = *(_QWORD *)(a4 + 8);
  v24 = sub_1B02D7994(&v34, v22, v23);
  sub_1B02D7994(v24, a1, a2);
  std::stringbuf::str();
  if (((char)v33 & 0x80000000) == 0)
  {
    p_src = (void **)&__src;
    if (v33 >= (unint64_t)v33 - 1)
      v26 = v33 - 1;
    else
      v26 = v33;
    if (v26 < 0x7FFFFFFFFFFFFFF8)
      goto LABEL_18;
LABEL_33:
    sub_1B02D78C4();
  }
  p_src = __src;
  if (v32 >= v32 - 1)
    v26 = v32 - 1;
  else
    v26 = v32;
  if (v26 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_33;
LABEL_18:
  if (v26 >= 0x17)
  {
    v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v28 = v26 | 7;
    v29 = v28 + 1;
    v30 = operator new(v28 + 1);
    a5[1] = v26;
    a5[2] = v29 | 0x8000000000000000;
    *a5 = v30;
    a5 = v30;
LABEL_27:
    memmove(a5, p_src, v26);
    *((_BYTE *)a5 + v26) = 0;
    if (((char)v33 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_28;
  }
  *((_BYTE *)a5 + 23) = v26;
  if (v26)
    goto LABEL_27;
  *(_BYTE *)a5 = 0;
  if (((char)v33 & 0x80000000) == 0)
    goto LABEL_21;
LABEL_28:
  operator delete(__src);
LABEL_21:
  v34 = *v12;
  *(uint64_t *)((char *)&v35[-1] + *(_QWORD *)(v34 - 24)) = v12[3];
  v35[0] = v16 + 16;
  if (SBYTE7(v37) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v39);
}

void sub_1B0360654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0360668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](a9);
  _Unwind_Resume(a1);
}

BOOL sub_1B03606D4(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BOOL8 v11;

  v1 = a1;
  objc_msgSend_whitespaceCharacterSet(MEMORY[0x1E0CB3500], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B036073C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036074C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL CVNLPIsWordSeparatorForLexicon_0(void *a1)
{
  const char *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _BOOL8 v7;

  v3 = a1;
  if (qword_1ED537980 != -1)
    dispatch_once(&qword_1ED537980, &unk_1E60CDB08);
  objc_msgSend_rangeOfCharacterFromSet_(v3, v1, qword_1ED537988, v2);
  v7 = v6 == (const char *)objc_msgSend_length(v3, v6, v4, v5);

  return v7;
}

void sub_1B03607D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03607E4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR(" -/"), a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ED537988;
  qword_1ED537988 = v4;

}

BOOL sub_1B0360818(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BOOL8 v11;

  v1 = a1;
  objc_msgSend_lowercaseLetterCharacterSet(MEMORY[0x1E0CB3500], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B0360880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0360890(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1B03608A4(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BOOL8 v11;

  v1 = a1;
  objc_msgSend_uppercaseLetterCharacterSet(MEMORY[0x1E0CB3500], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B036090C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036091C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1B0360930(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  _BOOL8 v11;

  v1 = a1;
  objc_msgSend_punctuationCharacterSet(MEMORY[0x1E0CB3500], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_rangeOfCharacterFromSet_(v1, v6, (uint64_t)v5, v7);
  v11 = v10 == (const char *)objc_msgSend_length(v1, v10, v8, v9);

  return v11;
}

void sub_1B0360998(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03609A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL sub_1B03609BC(void *a1)
{
  const char *v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  _BOOL8 v7;

  v3 = a1;
  if (qword_1ED537990 != -1)
    dispatch_once(&qword_1ED537990, &unk_1E60CDF88);
  objc_msgSend_rangeOfCharacterFromSet_(v3, v1, qword_1ED537998, v2);
  v7 = v6 == (const char *)objc_msgSend_length(v3, v6, v4, v5);

  return v7;
}

void sub_1B0360A30(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0360A40(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  void *v5;

  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], a2, (uint64_t)CFSTR("0123456789"), a4);
  v4 = objc_claimAutoreleasedReturnValue();
  v5 = (void *)qword_1ED537998;
  qword_1ED537998 = v4;

}

BOOL sub_1B0360A74(void *a1)
{
  id v1;
  unint64_t v2;
  uint64_t v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t i;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  int16x4_t v16;

  v1 = a1;
  v2 = 0;
  v3 = 0;
  for (i = objc_msgSend_length(v1, v4, v5, v6); ; i = objc_msgSend_length(v1, v13, v14, v15))
  {
    v11 = i;
    if (v2 >= i)
      break;
    v12 = objc_msgSend_characterAtIndex_(v1, v8, v2, v9);
    if ((v12 - 48) < 0xA)
    {
      v10 = v3;
    }
    else
    {
      v10 = 2;
      if (v12 != 32 && v12 != 45)
      {
        if ((v12 - 8208) >= 6)
        {
          v16.i16[0] = v12 & 0xFFDF;
          v16.i16[1] = v12;
          if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x158001F0017001ALL, (uint16x4_t)vadd_s16(vzip1_s16(v16, vdup_lane_s16(v16, 1)), (int16x4_t)0xFF08FF28FF40FFBFLL))) & 1) != 0)
          {
            if ((_DWORD)v3 == 4)
              break;
            v10 = 3;
          }
          else if ((v12 - 1024) >= 0x130)
          {
            if ((v12 - 880) >= 0x90)
            {
              v10 = 6;
              if ((unsigned __int16)((unsigned __int16)(v12 + 21504) >> 10) >= 0xBu
                && (v12 & 0xFFE0) != 0xA960
                && (v12 & 0xFF00) != 0x1100
                && (unsigned __int16)(v12 - 12592) >= 0x60u)
              {
                if ((v12 - 1632) >= 0xA)
                  v10 = 0;
                else
                  v10 = 7;
              }
            }
            else
            {
              v10 = 5;
            }
          }
          else
          {
            if ((_DWORD)v3 == 3)
              break;
            v10 = 4;
          }
        }
        else
        {
          v10 = 2;
        }
      }
    }
    ++v2;
    v3 = v10;
  }

  return v2 < v11;
}

void sub_1B0360C14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0360C24(uint64_t result, _BYTE *a2, int *a3, int16x4_t a4)
{
  int v4;
  int v5;

  if ((result - 48) >= 0xA)
  {
    v4 = 2;
    if ((_DWORD)result != 32 && (_DWORD)result != 45)
    {
      if ((result - 8208) >= 6)
      {
        a4.i16[0] = result & 0xFFDF;
        a4.i16[1] = result;
        if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x158001F0017001ALL, (uint16x4_t)vadd_s16(vzip1_s16(a4, vdup_lane_s16(a4, 1)), (int16x4_t)0xFF08FF28FF40FFBFLL))) & 1) != 0)
        {
          v4 = 3;
        }
        else if ((result - 1024) >= 0x130)
        {
          if ((result - 880) >= 0x90)
          {
            v4 = 6;
            if ((unsigned __int16)((unsigned __int16)(result + 21504) >> 10) >= 0xBu
              && (result & 0xFFE0) != 0xA960
              && (result & 0xFF00) != 0x1100
              && (unsigned __int16)(result - 12592) >= 0x60u)
            {
              if ((result - 1632) >= 0xA)
                v4 = 0;
              else
                v4 = 7;
            }
          }
          else
          {
            v4 = 5;
          }
        }
        else
        {
          v4 = 4;
        }
      }
      else
      {
        v4 = 2;
      }
    }
    if (!*a2)
    {
      if ((v5 = *a3, v4 == 4) && v5 == 3 || v4 == 3 && v5 == 4)
        *a2 = 1;
    }
  }
  else
  {
    if (!*a2)
      return result;
    v4 = 1;
  }
  *a3 = v4;
  return result;
}

uint64_t sub_1B0360D6C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_isEqualToString_(a1, a2, (uint64_t)CFSTR(""), a4);
}

id sub_1B0360D78(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  const char *v11;
  _QWORD v13[4];
  id v14;

  v1 = a1;
  objc_msgSend_string(MEMORY[0x1E0CB37A0], v2, v3, v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v9 = objc_msgSend_length(v1, v6, v7, v8);
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 3221225472;
  v13[2] = sub_1B0360E5C;
  v13[3] = &unk_1E60CDFB0;
  v10 = v5;
  v14 = v10;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v1, v11, 0, v9, 2, v13);

  return v10;
}

void sub_1B0360E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;
  void *v15;

  _Unwind_Resume(a1);
}

void sub_1B0360E4C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0360E5C(uint64_t a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int isEqualToString;
  void *v8;
  id v9;

  v9 = a2;
  isEqualToString = objc_msgSend_isEqualToString_(v9, v3, (uint64_t)CFSTR(""), v4);
  v8 = *(void **)(a1 + 32);
  if (isEqualToString)
    objc_msgSend_appendString_(v8, v5, (uint64_t)CFSTR("<PS>"), v6);
  else
    objc_msgSend_appendString_(v8, v5, (uint64_t)v9, v6);

}

void sub_1B0360EBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1B0360ED0(void *a1, _QWORD *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  id v12;
  _QWORD v14[7];
  _QWORD v15[4];
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t);
  void (*v20)(uint64_t);
  id v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  void (*v26)(uint64_t);
  __CFString *v27;

  v3 = a1;
  v22 = 0;
  v23 = &v22;
  v24 = 0x3032000000;
  v25 = sub_1B036107C;
  v26 = sub_1B036108C;
  v27 = &stru_1E60CE768;
  v16 = 0;
  v17 = &v16;
  v18 = 0x3032000000;
  v19 = sub_1B036107C;
  v20 = sub_1B036108C;
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v4, v5, v6);
  v21 = (id)objc_claimAutoreleasedReturnValue();
  v15[0] = 0;
  v15[1] = v15;
  v15[2] = 0x2020000000;
  v15[3] = 0;
  v10 = objc_msgSend_length(v3, v7, v8, v9);
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 3221225472;
  v14[2] = sub_1B0361094;
  v14[3] = &unk_1E60CDFD8;
  v14[4] = &v22;
  v14[5] = v15;
  v14[6] = &v16;
  objc_msgSend_enumerateSubstringsInRange_options_usingBlock_(v3, v11, 0, v10, 2, v14);
  if (a2)
    *a2 = objc_retainAutorelease((id)v17[5]);
  v12 = (id)v23[5];
  _Block_object_dispose(v15, 8);
  _Block_object_dispose(&v16, 8);

  _Block_object_dispose(&v22, 8);
  return v12;
}

void sub_1B0361030(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  _Block_object_dispose((const void *)(v2 - 80), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1B036107C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B036108C(uint64_t a1)
{

}

void sub_1B0361094(_QWORD *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  __CFString *v15;
  unsigned int v16;
  id v17;
  const char *v18;
  void *v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  const char *v40;
  void *v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  unsigned int v47;

  v46 = a2;
  objc_msgSend_dataUsingEncoding_(v46, v3, 2617245952, v4);
  v5 = objc_retainAutorelease((id)objc_claimAutoreleasedReturnValue());
  v12 = objc_msgSend_bytes(v5, v6, v7, v8);
  v13 = 0;
  v14 = 0;
  v15 = &stru_1E60CE768;
  while (v14 < (unint64_t)objc_msgSend_length(v5, v9, v10, v11) >> 2)
  {
    v16 = *(_DWORD *)(v12 + 4 * v14);
    v47 = v16;
    if (v16 >> 4 == 4064)
    {
      v13 = 1;
      ++v14;
    }
    else
    {
      if (v16 - 917760 < 0xF0)
      {
        v13 = 1;
      }
      else
      {
        v17 = objc_alloc(MEMORY[0x1E0CB3940]);
        v19 = (void *)objc_msgSend_initWithBytes_length_encoding_(v17, v18, (uint64_t)&v47, 4, 2617245952);
        objc_msgSend_stringByAppendingString_(v15, v20, (uint64_t)v19, v21);
        v22 = objc_claimAutoreleasedReturnValue();

        v15 = (__CFString *)v22;
      }
      ++v14;
    }
  }
  v23 = *(void **)(*(_QWORD *)(a1[4] + 8) + 40);
  if ((v13 & 1) != 0)
  {
    objc_msgSend_stringByAppendingString_(v23, v9, (uint64_t)v15, v11);
    v24 = objc_claimAutoreleasedReturnValue();
    v25 = *(_QWORD *)(a1[4] + 8);
    v26 = *(void **)(v25 + 40);
    *(_QWORD *)(v25 + 40) = v24;

    v30 = objc_msgSend_length(v46, v27, v28, v29);
    *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24) = v30 - objc_msgSend_length(v15, v31, v32, v33);
    v37 = objc_msgSend_length(*(void **)(*(_QWORD *)(a1[4] + 8) + 40), v34, v35, v36);
    v38 = *(_QWORD *)(*(_QWORD *)(a1[5] + 8) + 24);
    v39 = *(void **)(*(_QWORD *)(a1[6] + 8) + 40);
    objc_msgSend_valueWithRange_(MEMORY[0x1E0CB3B18], v40, v37, v38);
    v41 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObject_(v39, v42, (uint64_t)v41, v43);
  }
  else
  {
    objc_msgSend_stringByAppendingString_(v23, v9, (uint64_t)v46, v11);
    v44 = objc_claimAutoreleasedReturnValue();
    v45 = *(_QWORD *)(a1[4] + 8);
    v41 = *(void **)(v45 + 40);
    *(_QWORD *)(v45 + 40) = v44;
  }

}

void sub_1B0361284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B03612A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  void *v9;
  void *v10;

  _Unwind_Resume(a1);
}

id sub_1B0361318(void *a1, uint64_t a2, uint64_t *a3)
{
  id v5;
  const char *v6;
  uint64_t v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  __int16 v15;
  void *v16;
  __int16 v18;
  __int16 v19;

  v5 = a1;
  v8 = objc_msgSend_characterAtIndex_(v5, v6, a2, v7);
  v18 = v8;
  if ((v8 & 0xFC00) == 0xD800)
  {
    if (a2 + 1 >= (unint64_t)objc_msgSend_length(v5, v9, v10, v11))
    {
      v14 = 1;
      if (!a3)
        goto LABEL_17;
    }
    else
    {
      v13 = objc_msgSend_characterAtIndex_(v5, v9, a2 + 1, v12);
      v19 = v13;
      if (v13 >> 10 == 55)
        v14 = 2;
      else
        v14 = 1;
      if (!a3)
        goto LABEL_17;
    }
LABEL_16:
    *a3 = a2;
    a3[1] = v14;
    goto LABEL_17;
  }
  v14 = 1;
  if (a2 >= 1 && (v8 & 0xFC00) == 0xDC00)
  {
    v19 = v8;
    v15 = objc_msgSend_characterAtIndex_(v5, v9, a2 - 1, 1);
    v18 = v15;
    v14 = (v15 & 0xFC00) == 0xD800 ? 2 : 1;
    if ((v15 & 0xFC00) == 0xD800)
      --a2;
  }
  if (a3)
    goto LABEL_16;
LABEL_17:
  objc_msgSend_stringWithCharacters_length_(MEMORY[0x1E0CB3940], v9, (uint64_t)&v18, v14);
  v16 = (void *)objc_claimAutoreleasedReturnValue();

  return v16;
}

void sub_1B036141C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B036142C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 56);
  if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v3 = (v2 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v3 = 0;
  sub_1B036694C(v3);
  operator delete(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1B0361470(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E60CCC48;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

uint64_t sub_1B03614EC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  _QWORD *v9;
  void *v10;
  int v11;
  _QWORD *v12;
  __int128 *v13;
  unsigned int v14;
  __int128 v15;
  unint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  BOOL v36;
  _QWORD *v37;
  unint64_t v38;
  size_t v39;
  _BYTE *v40;
  unint64_t *v41;
  size_t v42;
  size_t v43;
  unint64_t *v44;
  size_t v45;
  int v46;
  _BOOL4 v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  int v51;
  unint64_t *v52;
  size_t v53;
  _BYTE *v54;
  size_t v55;
  char v56;
  unint64_t *v57;
  int v58;
  size_t v59;
  unint64_t *v60;
  size_t v61;
  _BYTE *v62;
  size_t v63;
  int v64;
  _BOOL4 v65;
  _QWORD *v66;
  _QWORD *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t *v71;
  uint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t *v77;
  unint64_t *v78;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  _QWORD *v82;
  __n128 *v83;
  uint64_t v84;
  _QWORD *v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  int v95;
  __n128 v96;
  _QWORD *v97;
  unint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  _QWORD *v104;
  unint64_t *v105;
  __n128 *v106;
  unint64_t v107;
  unint64_t v108;
  __n128 *v109;
  __n128 *v110;
  unint64_t v111;
  uint64_t v112;
  _QWORD *v113;
  unint64_t *v114;
  __n128 *v115;
  unint64_t v116;
  unint64_t v117;
  __n128 *v118;
  __n128 *v119;
  unint64_t v120;
  uint64_t v121;
  _QWORD *v122;
  unint64_t *v123;
  __n128 *v124;
  unint64_t v125;
  unint64_t v126;
  __n128 *v127;
  __n128 *v128;
  unint64_t v129;
  __n128 *v130;
  unint64_t v131;
  __n128 *v132;
  _QWORD *v133;
  unint64_t v134;
  _QWORD *v135;
  uint64_t *v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t *v139;
  __n128 *v140;
  unint64_t v141;
  unint64_t v142;
  unint64_t *n128_u64;
  __n128 *v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  unint64_t *v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  _QWORD *v152;
  unint64_t v153;
  unint64_t *v154;
  __n128 *v155;
  unint64_t v156;
  unint64_t v157;
  __n128 *v158;
  __n128 *v159;
  unint64_t v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t *v163;
  __n128 *v164;
  unint64_t v165;
  unint64_t v166;
  __n128 *v167;
  __n128 *v168;
  unint64_t v169;
  uint64_t v170;
  _QWORD *v171;
  unint64_t *v172;
  __n128 *v173;
  unint64_t v174;
  unint64_t v175;
  __n128 *v176;
  __n128 *v177;
  unint64_t v178;
  __n128 *v179;
  __n128 *v180;
  _QWORD *v181;
  unint64_t v182;
  _QWORD *v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t *v187;
  __n128 *v188;
  unint64_t v189;
  unint64_t v190;
  unint64_t *v191;
  __n128 *v192;
  unint64_t v193;
  unint64_t v194;
  unint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  void *v203;
  uint64_t v204;
  uint64_t v205;
  std::string::value_type *v206;
  uint64_t v207;
  _BOOL4 v208;
  std::runtime_error *exception;
  std::string::value_type *v210;
  uint64_t v211;
  std::string::value_type *v212;
  uint64_t v213;
  void *v214;
  int v215;
  uint64_t v216;
  uint64_t v217;
  void *v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  std::string::value_type *v222;
  std::string::value_type *v223;
  uint64_t v224;
  const std::string *v225;
  uint64_t **v226;
  uint64_t *v227;
  uint64_t **v228;
  int v229;
  size_t v230;
  const void *v231;
  _QWORD *v232;
  const void *v233;
  const void *v234;
  int v235;
  size_t v236;
  const void *v237;
  size_t v238;
  int v239;
  _BOOL4 v240;
  int v241;
  _BOOL4 v242;
  char *v243;
  _BYTE *v244;
  __int128 v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  void *v251;
  __n128 *v252;
  std::string::value_type *v253;
  uint64_t v254;
  unint64_t v255;
  uint64_t v256;
  std::runtime_error *v258;
  uint64_t v259;
  uint64_t v260;
  __int128 *v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t **v264;
  char v265;
  size_t v266;
  _BYTE *v267;
  size_t v268;
  __int128 *v270;
  __int128 *v271;
  uint64_t v272;
  int v273;
  uint64_t v274;
  int v275;
  _BYTE v276[24];
  void *__p;
  uint64_t v278;
  unint64_t v279;
  uint64_t *v280;
  uint64_t *v281;
  _DWORD v282[2];
  _QWORD v283[3];
  char v284;
  uint64_t v285;
  __int128 v286;
  void *v287;
  unint64_t *v288;
  _BYTE __dst[24];
  unint64_t v290;
  __n128 *v291;
  uint64_t v292;
  _QWORD *v293;
  _QWORD *v294;
  char v295;

  *(_DWORD *)(a1 + 8) = 4092732;
  v260 = a1 + 8;
  *(_BYTE *)(a1 + 31) = 3;
  *(_DWORD *)(a1 + 32) = 1047736124;
  v259 = a1 + 32;
  *(_BYTE *)(a1 + 55) = 4;
  *(_BYTE *)(a1 + 36) = 0;
  *(_BYTE *)(a1 + 79) = 5;
  *(_QWORD *)a1 = &off_1E60CCCE8;
  strcpy((char *)(a1 + 56), "<unk>");
  v261 = (__int128 *)(a1 + 56);
  v8 = a1 + 112;
  *(_QWORD *)(a1 + 88) = a1 + 112;
  v9 = operator new(0x50uLL);
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 104) = v9;
  v9[4] = 0;
  v272 = a1 + 80;
  v9[5] = v9 + 4;
  v9[6] = v9 + 4;
  v9[7] = 0;
  v9[8] = v9 + 7;
  v9[9] = v9 + 7;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 136) = v8;
  *(_QWORD *)(a1 + 144) = a1 + 152;
  v264 = (uint64_t **)(a1 + 152);
  *(_QWORD *)(a1 + 176) = 0;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(a2 + 8);
    *(_QWORD *)&__dst[16] = *(_QWORD *)(a2 + 24);
  }
  v10 = *(void **)__dst;
  v282[0] = *(_DWORD *)&__dst[16];
  *(_DWORD *)((char *)v282 + 3) = *(_DWORD *)&__dst[19];
  v11 = __dst[23];
  if ((__dst[23] & 0x80000000) != 0)
  {
    sub_1B02EB0A8(v276, *(void **)__dst, *(unint64_t *)&__dst[8]);
  }
  else
  {
    *(_QWORD *)v276 = *(_QWORD *)__dst;
    *(_QWORD *)&v276[8] = *(_QWORD *)&__dst[8];
    *(_DWORD *)&v276[16] = v282[0];
    *(_DWORD *)&v276[19] = *(_DWORD *)((char *)v282 + 3);
    v276[23] = __dst[23];
  }
  *(_OWORD *)&__dst[8] = *(_OWORD *)v276;
  v290 = *(_QWORD *)&v276[16];
  *(_QWORD *)__dst = &unk_1E60CCEF8;
  sub_1B03688F8((uint64_t)v283, (uint64_t)__dst);
  if (SHIBYTE(v290) < 0)
  {
    operator delete(*(void **)&__dst[8]);
    v283[0] = &unk_1E60CCF20;
    if ((v11 & 0x80000000) == 0)
      goto LABEL_9;
  }
  else
  {
    v283[0] = &unk_1E60CCF20;
    if ((v11 & 0x80000000) == 0)
      goto LABEL_9;
  }
  operator delete(v10);
LABEL_9:
  sub_1B03170D0((uint64_t)v283, (uint64_t)&v286);
  v262 = a3;
  v263 = a4;
  *(_QWORD *)&v276[8] = &v278;
  v12 = operator new(0x50uLL);
  v12[4] = 0;
  v12[5] = v12 + 4;
  v12[6] = v12 + 4;
  v12[7] = 0;
  v12[8] = v12 + 7;
  v12[9] = v12 + 7;
  __p = v12;
  v279 = 0;
  v280 = &v278;
  v281 = &v278;
  v271 = (__int128 *)*((_QWORD *)&v286 + 1);
  v13 = (__int128 *)v286;
  if ((_QWORD)v286 != *((_QWORD *)&v286 + 1))
  {
    v14 = 0;
    while (1)
    {
      if (*((char *)v13 + 23) < 0)
      {
        sub_1B02EB0A8(__dst, *(void **)v13, *((_QWORD *)v13 + 1));
      }
      else
      {
        v15 = *v13;
        *(_QWORD *)&__dst[16] = *((_QWORD *)v13 + 2);
        *(_OWORD *)__dst = v15;
      }
      LODWORD(v290) = v14;
      v274 = *(_QWORD *)&v276[8];
      v16 = *(unint64_t **)(*(_QWORD *)&v276[8] - 8);
      v17 = v16;
      v18 = v16[7] & 0xFFFFFFFFFFFFFFFELL;
      if (!v18)
        break;
      do
      {
        v17 = (unint64_t *)(v18 - 56);
        v19 = *(_DWORD *)(v18 - 32);
        if (v19 <= v14)
          v20 = 9;
        else
          v20 = 8;
        v18 = v17[v20];
      }
      while (v18);
      if (v19 > v14)
        break;
      v273 = 1;
      if (*((_DWORD *)v17 + 6) < v14)
        goto LABEL_55;
LABEL_124:
      if ((__dst[23] & 0x80000000) != 0)
        operator delete(*(void **)__dst);
      ++v14;
      v13 = (__int128 *)((char *)v13 + 24);
      if (v13 == v271)
        goto LABEL_126;
    }
    v21 = v16[8];
    if (v21)
      v22 = (unint64_t *)(v21 - 56);
    else
      v22 = 0;
    if (v17 == v22)
    {
      v273 = 0;
      v27 = *(unint64_t **)(*(_QWORD *)&v276[8] - 8);
      v28 = v16[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v28)
      {
LABEL_56:
        v270 = v13;
        v265 = __dst[23];
        v267 = *(_BYTE **)__dst;
        v268 = __dst[23];
        v266 = *(_QWORD *)&__dst[8];
        if (__dst[23] >= 0)
          v39 = __dst[23];
        else
          v39 = *(_QWORD *)&__dst[8];
        if (__dst[23] >= 0)
          v40 = __dst;
        else
          v40 = *(_BYTE **)__dst;
        do
        {
          v27 = (unint64_t *)(v28 - 32);
          v41 = *(unint64_t **)(v28 - 32);
          v42 = *(unsigned __int8 *)(v28 - 9);
          if ((v42 & 0x80u) == 0)
            v43 = v42;
          else
            v43 = v27[1];
          if ((v42 & 0x80u) == 0)
            v44 = v27;
          else
            v44 = v41;
          if (v43 >= v39)
            v45 = v39;
          else
            v45 = v43;
          v46 = memcmp(v40, v44, v45);
          v47 = v46 < 0;
          if (!v46)
            v47 = v39 < v43;
          if (v47)
            v48 = 5;
          else
            v48 = 6;
          v28 = v27[v48];
        }
        while (v28);
        if (!v47)
        {
          v51 = 1;
          v52 = v27;
          v13 = v270;
          v54 = v267;
          v53 = v268;
          v55 = v266;
          v56 = v265;
          goto LABEL_86;
        }
        v13 = v270;
        v49 = v16[5];
        if (v49)
          v50 = (unint64_t *)(v49 - 32);
        else
          v50 = 0;
        if (v27 == v50)
        {
LABEL_82:
          v51 = 0;
          goto LABEL_104;
        }
LABEL_37:
        v32 = v27 + 4;
        v31 = v27[4];
        if ((v31 & 1) == 0 && v32 == (_QWORD *)(*(_QWORD *)(v31 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL))
        {
          v34 = v27[6];
        }
        else
        {
          v33 = v27[5];
          if (v33)
          {
            do
            {
              v34 = v33;
              v33 = *(_QWORD *)(v33 + 16);
            }
            while (v33);
          }
          else
          {
            v34 = v31 & 0xFFFFFFFFFFFFFFFELL;
            if (v32 == *(_QWORD **)(v34 + 8))
            {
              v37 = (_QWORD *)v34;
              do
              {
                v34 = *v37 & 0xFFFFFFFFFFFFFFFELL;
                v36 = v37 == *(_QWORD **)(v34 + 8);
                v37 = (_QWORD *)v34;
              }
              while (v36);
            }
          }
        }
        v51 = 0;
        v57 = *(unint64_t **)(v34 - 32);
        v52 = (unint64_t *)(v34 - 32);
        v41 = v57;
        v53 = __dst[23];
        v54 = *(_BYTE **)__dst;
        v55 = *(_QWORD *)&__dst[8];
        v56 = __dst[23];
LABEL_86:
        v58 = *((char *)v52 + 23);
        if (v58 >= 0)
          v59 = *((unsigned __int8 *)v52 + 23);
        else
          v59 = v52[1];
        if (v58 >= 0)
          v60 = v52;
        else
          v60 = v41;
        if (v56 >= 0)
          v61 = v53;
        else
          v61 = v55;
        if (v56 >= 0)
          v62 = __dst;
        else
          v62 = v54;
        if (v61 >= v59)
          v63 = v59;
        else
          v63 = v61;
        v64 = memcmp(v60, v62, v63);
        v65 = v59 < v61;
        if (v64)
          v65 = v64 < 0;
        if (!v65)
          goto LABEL_124;
LABEL_104:
        v66 = operator new(0x50uLL);
        v67 = v66;
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_1B02EB0A8(v66, *(void **)__dst, *(unint64_t *)&__dst[8]);
        }
        else
        {
          *(_OWORD *)v66 = *(_OWORD *)__dst;
          v66[2] = *(_QWORD *)&__dst[16];
        }
        v68 = (unint64_t)(v27 + 4);
        *((_DWORD *)v67 + 6) = v14;
        v69 = (unint64_t)(v67 + 4);
        v70 = *(unint64_t **)(v274 - 8);
        if (v51)
        {
          v27[6] = v69;
          v71 = v70 + 6;
          v72 = v274;
          v73 = v273;
          if (v70[6] != v68)
            goto LABEL_115;
        }
        else
        {
          v27[5] = v69;
          if (v27 == v70)
          {
            v27[4] = v27[4] & 1 | v69;
            v71 = v27 + 6;
            v72 = v274;
            v73 = v273;
          }
          else
          {
            v71 = v70 + 5;
            v72 = v274;
            v73 = v273;
            if (v70[5] != v68)
              goto LABEL_115;
          }
        }
        *v71 = v69;
LABEL_115:
        v74 = (unint64_t)(v17 + 7);
        v75 = v67[4] & 1;
        v67[5] = 0;
        v67[6] = 0;
        v67[4] = v75 | v68;
        v288 = v70 + 4;
        sub_1B03669BC(v69, &v288);
        v76 = (unint64_t)(v67 + 7);
        v77 = *(unint64_t **)(v72 - 8);
        if (v73)
        {
          v17[9] = v76;
          v78 = v77 + 9;
          if (v77[9] == v74)
            goto LABEL_122;
        }
        else
        {
          v17[8] = v76;
          if (v17 == v77)
          {
            v17[7] = v17[7] & 1 | v76;
            v78 = v17 + 9;
LABEL_122:
            *v78 = v76;
            goto LABEL_123;
          }
          v78 = v77 + 8;
          if (v77[8] == v74)
            goto LABEL_122;
        }
LABEL_123:
        v79 = v67[7] & 1 | v74;
        v67[8] = 0;
        v67[9] = 0;
        v67[7] = v79;
        v288 = v77 + 7;
        sub_1B03669BC(v76, &v288);
        ++*(_QWORD *)(v72 + 8);
        goto LABEL_124;
      }
    }
    else
    {
      v24 = v17 + 7;
      v23 = v17[7];
      if ((v23 & 1) == 0 && v24 == (_QWORD *)(*(_QWORD *)(v23 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL))
      {
        v26 = v17[9];
      }
      else
      {
        v25 = v17[8];
        if (v25)
        {
          do
          {
            v26 = v25;
            v25 = *(_QWORD *)(v25 + 16);
          }
          while (v25);
        }
        else
        {
          v26 = v23 & 0xFFFFFFFFFFFFFFFELL;
          if (v24 == *(_QWORD **)(v26 + 8))
          {
            v35 = (_QWORD *)v26;
            do
            {
              v26 = *v35 & 0xFFFFFFFFFFFFFFFELL;
              v36 = v35 == *(_QWORD **)(v26 + 8);
              v35 = (_QWORD *)v26;
            }
            while (v36);
          }
        }
      }
      v273 = 0;
      if (v26)
        v38 = v26 - 56;
      else
        v38 = 0;
      if (*(_DWORD *)(v38 + 24) >= v14)
        goto LABEL_124;
LABEL_55:
      v27 = *(unint64_t **)(*(_QWORD *)&v276[8] - 8);
      v28 = v16[4] & 0xFFFFFFFFFFFFFFFELL;
      if (v28)
        goto LABEL_56;
    }
    v29 = v16[5];
    if (v29)
      v30 = (unint64_t *)(v29 - 32);
    else
      v30 = 0;
    if (v27 == v30)
      goto LABEL_82;
    goto LABEL_37;
  }
LABEL_126:
  v80 = operator new(0x50uLL);
  v81 = v279;
  v82 = __p;
  *(_QWORD *)&__dst[8] = v279;
  v290 = v279;
  if (v279)
  {
    if (v279 >> 60)
      sub_1B02D72AC();
    v83 = (__n128 *)operator new(16 * v279);
  }
  else
  {
    v83 = 0;
  }
  v291 = v83;
  v292 = 0;
  v293 = v82;
  v294 = v80;
  v295 = 0;
  v84 = v82[8];
  if (v84)
    v85 = (_QWORD *)(v84 - 56);
  else
    v85 = 0;
  if (v85 == v82)
  {
    v86 = 0;
  }
  else
  {
    v86 = 0;
    v87 = 126 - 2 * __clz(v81);
    if (v81)
      v88 = v87;
    else
      v88 = 0;
    do
    {
      v83[v86].n128_u64[0] = (unint64_t)v85;
      v93 = operator new(0x50uLL);
      v94 = v93;
      v83[v86].n128_u64[1] = (unint64_t)v93;
      v95 = *((_DWORD *)v85 + 6);
      if (*((char *)v85 + 23) < 0)
      {
        sub_1B02EB0A8(v93, (void *)*v85, v85[1]);
      }
      else
      {
        v96 = *(__n128 *)v85;
        v93[2] = v85[2];
        *(__n128 *)v93 = v96;
      }
      *((_DWORD *)v94 + 6) = v95;
      v292 = ++v86;
      if (v86 == v81)
        sub_1B0366E1C(v83, &v83[v81], v88, 1, v96);
      v97 = (_QWORD *)v85[9];
      if (v97)
      {
        do
        {
          v91 = v97;
          v97 = (_QWORD *)v97[1];
        }
        while (v97);
      }
      else
      {
        v90 = v85[7];
        v89 = v85 + 7;
        v91 = (_QWORD *)(v90 & 0xFFFFFFFFFFFFFFFELL);
        if (v89 == *(_QWORD **)((v90 & 0xFFFFFFFFFFFFFFFELL) + 16))
        {
          do
          {
            v89 = v91;
            v91 = (_QWORD *)(*v91 & 0xFFFFFFFFFFFFFFFELL);
          }
          while (v89 == (_QWORD *)v91[2]);
          v92 = (_QWORD *)v89[2];
        }
        else
        {
          v92 = 0;
        }
        if (v92 == v91)
          v91 = v89;
      }
      v85 = v91 - 7;
    }
    while (v91 - 7 != v82);
    v82 = __p;
  }
  v98 = v82[7];
  v99 = v80 + 7;
  v100 = a1;
  if (v98 <= 1)
  {
    v80[7] = 0;
    v80[8] = v99;
    v80[9] = v99;
    goto LABEL_220;
  }
  *v99 = *v99 & 0xFFFFFFFFFFFFFFFELL | v82[7] & 1;
  v101 = v82[7];
  v102 = (v101 & 0xFFFFFFFFFFFFFFFELL) - 56;
  v36 = (v101 & 0xFFFFFFFFFFFFFFFELL) == 0;
  v103 = v98 & 1;
  if (v36)
    v102 = 0;
  v104 = v293;
  v105 = (unint64_t *)&v294;
  if (v293 != (_QWORD *)v102)
  {
    if (v86)
    {
      v106 = v83;
      v107 = v86;
      do
      {
        v108 = v107 >> 1;
        v109 = &v106[v107 >> 1];
        v111 = v109->n128_u64[0];
        v110 = v109 + 1;
        v107 += ~(v107 >> 1);
        if (v111 < v102)
          v106 = v110;
        else
          v107 = v108;
      }
      while (v107);
    }
    else
    {
      v106 = v83;
    }
    v105 = &v106->n128_u64[1];
  }
  *v99 = v103 | (*v105 + 56);
  v112 = v82[8];
  if (v112)
    v113 = (_QWORD *)(v112 - 56);
  else
    v113 = 0;
  v114 = (unint64_t *)&v294;
  if (v104 != v113)
  {
    if (v86)
    {
      v115 = v83;
      v116 = v86;
      do
      {
        v117 = v116 >> 1;
        v118 = &v115[v116 >> 1];
        v120 = v118->n128_u64[0];
        v119 = v118 + 1;
        v116 += ~(v116 >> 1);
        if (v120 < (unint64_t)v113)
          v115 = v119;
        else
          v116 = v117;
      }
      while (v116);
    }
    else
    {
      v115 = v83;
    }
    v114 = &v115->n128_u64[1];
  }
  v80[8] = *v114 + 56;
  v121 = v82[9];
  if (v121)
    v122 = (_QWORD *)(v121 - 56);
  else
    v122 = 0;
  v123 = (unint64_t *)&v294;
  if (v104 != v122)
  {
    if (v86)
    {
      v124 = v83;
      v125 = v86;
      do
      {
        v126 = v125 >> 1;
        v127 = &v124[v125 >> 1];
        v129 = v127->n128_u64[0];
        v128 = v127 + 1;
        v125 += ~(v125 >> 1);
        if (v129 < (unint64_t)v122)
          v124 = v128;
        else
          v125 = v126;
      }
      while (v125);
    }
    else
    {
      v124 = v83;
    }
    v123 = &v124->n128_u64[1];
  }
  v80[9] = *v123 + 56;
  if (v86)
  {
    v130 = &v83[v86];
    v131 = v292;
    v132 = v83;
    while (1)
    {
      v134 = v132->n128_u64[0];
      v133 = (_QWORD *)v132->n128_u64[1];
      v135 = (_QWORD *)(v132->n128_u64[0] + 56);
      v136 = v133 + 7;
      v137 = *v135 & 1;
      v133[7] = v133[7] & 0xFFFFFFFFFFFFFFFELL | v137;
      v138 = *v135 & 0xFFFFFFFFFFFFFFFELL;
      if (!v138)
        break;
      v139 = (unint64_t *)&v294;
      if (v104 != (_QWORD *)(v138 - 56))
      {
        v140 = &v83[v131];
        if (v131)
        {
          v140 = v83;
          v141 = v131;
          do
          {
            v142 = v141 >> 1;
            n128_u64 = v140[v141 >> 1].n128_u64;
            v145 = *n128_u64;
            v144 = (__n128 *)(n128_u64 + 2);
            v141 += ~(v141 >> 1);
            if (v145 < v138 - 56)
              v140 = v144;
            else
              v141 = v142;
          }
          while (v141);
        }
        v139 = &v140->n128_u64[1];
      }
      v146 = *v139;
      *v136 = v137 | (*v139 + 56);
      if (*(_QWORD **)(v138 + 8) == v135)
      {
        *(_QWORD *)(v146 + 64) = v136;
        if (*(_QWORD *)(v134 + 64))
          goto LABEL_218;
LABEL_198:
        v133[8] = 0;
        if (!*(_QWORD *)(v134 + 72))
          goto LABEL_219;
LABEL_199:
        if (++v132 == v130)
          goto LABEL_220;
      }
      else
      {
        if (*(_QWORD **)(v138 + 16) == v135)
        {
          *(_QWORD *)(v146 + 72) = v136;
          if (!*(_QWORD *)(v134 + 64))
            goto LABEL_198;
        }
        else if (!*(_QWORD *)(v134 + 64))
        {
          goto LABEL_198;
        }
LABEL_218:
        if (*(_QWORD *)(v134 + 72))
          goto LABEL_199;
LABEL_219:
        v133[9] = 0;
        if (++v132 == v130)
          goto LABEL_220;
      }
    }
    *v136 = v137;
    if (*(_QWORD *)(v134 + 64))
      goto LABEL_218;
    goto LABEL_198;
  }
LABEL_220:
  v147 = v82[4];
  v148 = v80 + 4;
  if (v147 <= 1)
  {
    v80[4] = 0;
    v80[5] = v148;
    v80[6] = v148;
    goto LABEL_283;
  }
  *v148 = *v148 & 0xFFFFFFFFFFFFFFFELL | v82[4] & 1;
  v149 = v82[4];
  v150 = (v149 & 0xFFFFFFFFFFFFFFFELL) - 32;
  v151 = v147 & 1;
  if ((v149 & 0xFFFFFFFFFFFFFFFELL) == 0)
    v150 = 0;
  v153 = v292;
  v152 = v293;
  v154 = (unint64_t *)&v294;
  if (v293 != (_QWORD *)v150)
  {
    if (v292)
    {
      v155 = v83;
      v156 = v292;
      do
      {
        v157 = v156 >> 1;
        v158 = &v155[v156 >> 1];
        v160 = v158->n128_u64[0];
        v159 = v158 + 1;
        v156 += ~(v156 >> 1);
        if (v160 < v150)
          v155 = v159;
        else
          v156 = v157;
      }
      while (v156);
    }
    else
    {
      v155 = v83;
    }
    v154 = &v155->n128_u64[1];
  }
  *v148 = v151 | (*v154 + 32);
  v161 = v82[5];
  if (v161)
    v162 = (_QWORD *)(v161 - 32);
  else
    v162 = 0;
  v163 = (unint64_t *)&v294;
  if (v152 != v162)
  {
    if (v153)
    {
      v164 = v83;
      v165 = v153;
      do
      {
        v166 = v165 >> 1;
        v167 = &v164[v165 >> 1];
        v169 = v167->n128_u64[0];
        v168 = v167 + 1;
        v165 += ~(v165 >> 1);
        if (v169 < (unint64_t)v162)
          v164 = v168;
        else
          v165 = v166;
      }
      while (v165);
    }
    else
    {
      v164 = v83;
    }
    v163 = &v164->n128_u64[1];
  }
  v80[5] = *v163 + 32;
  v170 = v82[6];
  if (v170)
    v171 = (_QWORD *)(v170 - 32);
  else
    v171 = 0;
  v172 = (unint64_t *)&v294;
  if (v152 != v171)
  {
    if (v153)
    {
      v173 = v83;
      v174 = v153;
      do
      {
        v175 = v174 >> 1;
        v176 = &v173[v174 >> 1];
        v178 = v176->n128_u64[0];
        v177 = v176 + 1;
        v174 += ~(v174 >> 1);
        if (v178 < (unint64_t)v171)
          v173 = v177;
        else
          v174 = v175;
      }
      while (v174);
    }
    else
    {
      v173 = v83;
    }
    v172 = &v173->n128_u64[1];
  }
  v80[6] = *v172 + 32;
  if (v153)
  {
    v179 = &v83[v153];
    v180 = v83;
    while (1)
    {
      v182 = v180->n128_u64[0];
      v181 = (_QWORD *)v180->n128_u64[1];
      v183 = (_QWORD *)(v180->n128_u64[0] + 32);
      v184 = v181 + 4;
      v185 = *v183 & 1;
      v181[4] = v181[4] & 0xFFFFFFFFFFFFFFFELL | v185;
      v186 = *v183 & 0xFFFFFFFFFFFFFFFELL;
      if (!v186)
        break;
      v187 = (unint64_t *)&v294;
      if (v152 != (_QWORD *)(v186 - 32))
      {
        v188 = v83;
        v189 = v153;
        do
        {
          v190 = v189 >> 1;
          v191 = v188[v189 >> 1].n128_u64;
          v193 = *v191;
          v192 = (__n128 *)(v191 + 2);
          v189 += ~(v189 >> 1);
          if (v193 < v186 - 32)
            v188 = v192;
          else
            v189 = v190;
        }
        while (v189);
        v187 = &v188->n128_u64[1];
      }
      v194 = *v187;
      *v184 = v185 | (*v187 + 32);
      if (*(_QWORD **)(v186 + 8) == v183)
      {
        *(_QWORD *)(v194 + 40) = v184;
        if (*(_QWORD *)(v182 + 40))
          goto LABEL_281;
LABEL_262:
        v181[5] = 0;
        if (!*(_QWORD *)(v182 + 48))
          goto LABEL_282;
LABEL_263:
        if (++v180 == v179)
          goto LABEL_283;
      }
      else
      {
        if (*(_QWORD **)(v186 + 16) == v183)
        {
          *(_QWORD *)(v194 + 48) = v184;
          if (!*(_QWORD *)(v182 + 40))
            goto LABEL_262;
        }
        else if (!*(_QWORD *)(v182 + 40))
        {
          goto LABEL_262;
        }
LABEL_281:
        if (*(_QWORD *)(v182 + 48))
          goto LABEL_263;
LABEL_282:
        v181[6] = 0;
        if (++v180 == v179)
          goto LABEL_283;
      }
    }
    *v184 = v185;
    if (*(_QWORD *)(v182 + 40))
      goto LABEL_281;
    goto LABEL_262;
  }
LABEL_283:
  v195 = v279;
  if (v290)
    operator delete(v83);
  v196 = *(_QWORD **)(a1 + 104);
  *(_QWORD *)(a1 + 120) = v195;
  v197 = v196[7];
  *(_QWORD *)(a1 + 104) = v80;
  if ((v197 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v198 = (v197 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v198 = 0;
  sub_1B036694C(v198);
  operator delete(v196);
  v199 = *((_QWORD *)__p + 7);
  if ((v199 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v200 = (v199 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v200 = 0;
  sub_1B036694C(v200);
  operator delete(__p);
  v201 = v286;
  if ((_QWORD)v286)
  {
    v202 = *((_QWORD *)&v286 + 1);
    v203 = (void *)v286;
    if (*((_QWORD *)&v286 + 1) != (_QWORD)v286)
    {
      do
      {
        if (*(char *)(v202 - 1) < 0)
          operator delete(*(void **)(v202 - 24));
        v202 -= 24;
      }
      while (v202 != v201);
      v203 = (void *)v286;
    }
    *((_QWORD *)&v286 + 1) = v201;
    operator delete(v203);
    v100 = a1;
  }
  v204 = *v262;
  *v262 = 0;
  v205 = *(_QWORD *)(v100 + 176);
  *(_QWORD *)(v100 + 176) = v204;
  if (v205)
    (*(void (**)(uint64_t))(*(_QWORD *)v205 + 8))(v205);
  if (*(char *)(v100 + 31) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)(v100 + 8), *(_QWORD *)(v100 + 16));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v260;
    *(_QWORD *)&__dst[16] = *(_QWORD *)(v260 + 16);
  }
  if (__dst[23] >= 0)
    v206 = __dst;
  else
    v206 = *(std::string::value_type **)__dst;
  if (__dst[23] >= 0)
    v207 = __dst[23];
  else
    v207 = *(_QWORD *)&__dst[8];
  if (!sub_1B0362C8C(v272, v206, v207))
  {
    v208 = 1;
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_339;
    goto LABEL_314;
  }
  if (*(char *)(v100 + 55) < 0)
  {
    sub_1B02EB0A8(v276, *(void **)(v100 + 32), *(_QWORD *)(v100 + 40));
  }
  else
  {
    *(_OWORD *)v276 = *(_OWORD *)v259;
    *(_QWORD *)&v276[16] = *(_QWORD *)(v259 + 16);
  }
  if (v276[23] >= 0)
    v210 = v276;
  else
    v210 = *(std::string::value_type **)v276;
  if (v276[23] >= 0)
    v211 = v276[23];
  else
    v211 = *(_QWORD *)&v276[8];
  if (!sub_1B0362C8C(v272, v210, v211))
  {
    v208 = 1;
    if ((v276[23] & 0x80000000) == 0)
      goto LABEL_338;
    goto LABEL_327;
  }
  if (*(char *)(v100 + 79) < 0)
  {
    sub_1B02EB0A8(&v286, *(void **)(v100 + 56), *(_QWORD *)(v100 + 64));
  }
  else
  {
    v286 = *v261;
    v287 = (void *)*((_QWORD *)v261 + 2);
  }
  if (SHIBYTE(v287) >= 0)
    v212 = (std::string::value_type *)&v286;
  else
    v212 = (std::string::value_type *)v286;
  if (SHIBYTE(v287) >= 0)
    v213 = HIBYTE(v287);
  else
    v213 = *((_QWORD *)&v286 + 1);
  v208 = !sub_1B0362C8C(v272, v212, v213);
  if ((SHIBYTE(v287) & 0x80000000) == 0)
  {
    if ((v276[23] & 0x80000000) == 0)
      goto LABEL_338;
    goto LABEL_327;
  }
  operator delete((void *)v286);
  if ((v276[23] & 0x80000000) != 0)
  {
LABEL_327:
    operator delete(*(void **)v276);
    if ((__dst[23] & 0x80000000) == 0)
      goto LABEL_339;
LABEL_314:
    operator delete(*(void **)__dst);
    if (!v208)
      goto LABEL_340;
LABEL_315:
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Missing or incorrect bos or eos or unk token in vocabulary file");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
LABEL_338:
  if ((__dst[23] & 0x80000000) != 0)
    goto LABEL_314;
LABEL_339:
  if (v208)
    goto LABEL_315;
LABEL_340:
  if (!sub_1B0317690(v263))
    goto LABEL_416;
  if (*(char *)(v263 + 31) < 0)
  {
    sub_1B02EB0A8(v276, *(void **)(v263 + 8), *(_QWORD *)(v263 + 16));
  }
  else
  {
    *(_OWORD *)v276 = *(_OWORD *)(v263 + 8);
    *(_QWORD *)&v276[16] = *(_QWORD *)(v263 + 24);
  }
  v214 = *(void **)v276;
  v275 = *(_DWORD *)&v276[16];
  HIBYTE(v275) = v276[19];
  v215 = v276[23];
  if ((v276[23] & 0x80000000) != 0)
  {
    sub_1B02EB0A8(&v286, *(void **)v276, *(unint64_t *)&v276[8]);
  }
  else
  {
    v286 = *(_OWORD *)v276;
    LODWORD(v287) = v275;
    *(_DWORD *)((char *)&v287 + 3) = *(_DWORD *)&v276[19];
    HIBYTE(v287) = v276[23];
  }
  *(_OWORD *)&v276[8] = v286;
  __p = v287;
  *(_QWORD *)v276 = &unk_1E60CCEF8;
  sub_1B03688F8((uint64_t)__dst, (uint64_t)v276);
  if (SHIBYTE(__p) < 0)
  {
    operator delete(*(void **)&v276[8]);
    *(_QWORD *)__dst = &unk_1E60CCF20;
    if ((v215 & 0x80000000) == 0)
      goto LABEL_349;
  }
  else
  {
    *(_QWORD *)__dst = &unk_1E60CCF20;
    if ((v215 & 0x80000000) == 0)
      goto LABEL_349;
  }
  operator delete(v214);
LABEL_349:
  sub_1B03170D0((uint64_t)__dst, (uint64_t)v276);
  v216 = *(_QWORD *)v276;
  v217 = *(_QWORD *)&v276[8];
  if (*(_QWORD *)v276 == *(_QWORD *)&v276[8])
    goto LABEL_405;
  do
  {
    if (*(char *)(v216 + 23) < 0)
    {
      v220 = *(_QWORD *)v216;
      v219 = *(_QWORD *)(v216 + 8);
    }
    else
    {
      v219 = *(unsigned __int8 *)(v216 + 23);
      v220 = v216;
    }
    sub_1B03188A8(v220, v219, "\t", 1, (uint64_t)&v286);
    if (*((_QWORD *)&v286 + 1) - (_QWORD)v286 != 48)
    {
      v258 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v258, "Unexpected format in Special Map file");
LABEL_440:
      __cxa_throw(v258, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    if (*(char *)(v286 + 23) < 0)
    {
      v222 = *(std::string::value_type **)v286;
      v221 = *(_QWORD *)(v286 + 8);
    }
    else
    {
      v221 = *(unsigned __int8 *)(v286 + 23);
      v222 = (std::string::value_type *)v286;
    }
    if (sub_1B0362C8C(v272, v222, v221))
    {
      v258 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v258, "Special token shall not appear in vocabulary file");
      goto LABEL_440;
    }
    if (*(char *)(v286 + 47) < 0)
    {
      v223 = *(std::string::value_type **)(v286 + 24);
      v224 = *(_QWORD *)(v286 + 32);
    }
    else
    {
      v223 = (std::string::value_type *)(v286 + 24);
      v224 = *(unsigned __int8 *)(v286 + 47);
    }
    if (!sub_1B0362C8C(v272, v223, v224))
    {
      v258 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v258, "Missing special token class in vocabulary file");
      goto LABEL_440;
    }
    v225 = (const std::string *)v286;
    v226 = v264;
    v227 = *v264;
    v228 = v264;
    if (*v264)
    {
      v229 = *(char *)(v286 + 23);
      if (v229 >= 0)
        v230 = *(unsigned __int8 *)(v286 + 23);
      else
        v230 = *(_QWORD *)(v286 + 8);
      if (v229 >= 0)
        v231 = (const void *)v286;
      else
        v231 = *(const void **)v286;
      while (1)
      {
        while (1)
        {
          v226 = (uint64_t **)v227;
          v234 = (const void *)v227[4];
          v232 = v227 + 4;
          v233 = v234;
          v235 = *((char *)v232 + 23);
          if (v235 >= 0)
            v236 = *((unsigned __int8 *)v232 + 23);
          else
            v236 = v232[1];
          if (v235 >= 0)
            v237 = v232;
          else
            v237 = v233;
          if (v236 >= v230)
            v238 = v230;
          else
            v238 = v236;
          v239 = memcmp(v231, v237, v238);
          v240 = v230 < v236;
          if (v239)
            v240 = v239 < 0;
          if (!v240)
            break;
          v227 = *v226;
          v228 = v226;
          if (!*v226)
            goto LABEL_391;
        }
        v241 = memcmp(v237, v231, v238);
        v242 = v236 < v230;
        if (v241)
          v242 = v241 < 0;
        if (!v242)
          break;
        v227 = v226[1];
        if (!v227)
        {
          v228 = v226 + 1;
          goto LABEL_391;
        }
      }
      v243 = (char *)v226;
    }
    else
    {
LABEL_391:
      v243 = (char *)operator new(0x50uLL);
      v244 = v243 + 32;
      if (SHIBYTE(v225->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1B02EB0A8(v244, v225->__r_.__value_.__l.__data_, v225->__r_.__value_.__l.__size_);
      }
      else
      {
        v245 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
        *((_QWORD *)v243 + 6) = *((_QWORD *)&v225->__r_.__value_.__l + 2);
        *(_OWORD *)v244 = v245;
      }
      *((_QWORD *)v243 + 7) = 0;
      *((_QWORD *)v243 + 8) = 0;
      *((_QWORD *)v243 + 9) = 0;
      *(_QWORD *)v243 = 0;
      *((_QWORD *)v243 + 1) = 0;
      *((_QWORD *)v243 + 2) = v226;
      *v228 = (uint64_t *)v243;
      v246 = **(_QWORD **)(a1 + 144);
      v247 = (uint64_t *)v243;
      if (v246)
      {
        *(_QWORD *)(a1 + 144) = v246;
        v247 = *v228;
      }
      sub_1B02D8180(*(uint64_t **)(a1 + 152), v247);
      ++*(_QWORD *)(a1 + 160);
    }
    std::string::operator=((std::string *)(v243 + 56), v225 + 1);
    v248 = v286;
    if ((_QWORD)v286)
    {
      v249 = *((_QWORD *)&v286 + 1);
      v218 = (void *)v286;
      if (*((_QWORD *)&v286 + 1) != (_QWORD)v286)
      {
        do
        {
          if (*(char *)(v249 - 1) < 0)
            operator delete(*(void **)(v249 - 24));
          v249 -= 24;
        }
        while (v249 != v248);
        v218 = (void *)v286;
      }
      *((_QWORD *)&v286 + 1) = v248;
      operator delete(v218);
    }
    v216 += 24;
  }
  while (v216 != v217);
  v216 = *(_QWORD *)v276;
LABEL_405:
  if (v216)
  {
    v250 = *(_QWORD *)&v276[8];
    v251 = (void *)v216;
    if (*(_QWORD *)&v276[8] != v216)
    {
      do
      {
        if (*(char *)(v250 - 1) < 0)
          operator delete(*(void **)(v250 - 24));
        v250 -= 24;
      }
      while (v250 != v216);
      v251 = *(void **)v276;
    }
    *(_QWORD *)&v276[8] = v216;
    operator delete(v251);
  }
  v252 = v291;
  *(_QWORD *)__dst = &unk_1E60CCEC0;
  v291 = 0;
  if (v252)
    (*(void (**)(__n128 *))(v252->n128_u64[0] + 8))(v252);
  v100 = a1;
  if (SHIBYTE(v290) < 0)
  {
    operator delete(*(void **)&__dst[8]);
    if (*(char *)(a1 + 79) < 0)
      goto LABEL_421;
LABEL_417:
    *(_OWORD *)__dst = *v261;
    *(_QWORD *)&__dst[16] = *((_QWORD *)v261 + 2);
  }
  else
  {
LABEL_416:
    if ((*(char *)(v100 + 79) & 0x80000000) == 0)
      goto LABEL_417;
LABEL_421:
    sub_1B02EB0A8(__dst, *(void **)(v100 + 56), *(_QWORD *)(v100 + 64));
  }
  if (__dst[23] >= 0)
    v253 = __dst;
  else
    v253 = *(std::string::value_type **)__dst;
  if (__dst[23] >= 0)
    v254 = __dst[23];
  else
    v254 = *(_QWORD *)&__dst[8];
  v255 = sub_1B0362D9C(v272, v253, v254);
  if ((__dst[23] & 0x80000000) != 0)
    operator delete(*(void **)__dst);
  *(_BYTE *)(a1 + 172) = v255 & 1;
  *(_DWORD *)(a1 + 168) = HIDWORD(v255);
  v256 = v285;
  v283[0] = &unk_1E60CCEC0;
  v285 = 0;
  if (v256)
    (*(void (**)(uint64_t))(*(_QWORD *)v256 + 8))(v256);
  if (v284 < 0)
    operator delete((void *)v283[1]);
  return a1;
}

void sub_1B03629BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,void *a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49)
{
  uint64_t v49;
  uint64_t v51;

  if (a32 < 0)
  {
    operator delete(__p);
    if ((*(char *)(v49 - 153) & 0x80000000) == 0)
    {
LABEL_6:
      if (a49)
        (*(void (**)(uint64_t))(*(_QWORD *)a49 + 8))(a49);
      if (a48 < 0)
        operator delete(a43);
      v51 = *(_QWORD *)(a20 + 176);
      *(_QWORD *)(a20 + 176) = 0;
      if (v51)
        (*(void (**)(uint64_t))(*(_QWORD *)v51 + 8))(v51);
      sub_1B0368888(*a15);
      sub_1B036142C(a23);
      sub_1B0361470(a20);
      _Unwind_Resume(a1);
    }
  }
  else if ((*(char *)(v49 - 153) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v49 - 176));
  goto LABEL_6;
}

void sub_1B0362AA0()
{
  uint64_t v0;

  sub_1B031724C((void **)(v0 - 208));
  JUMPOUT(0x1B0362C14);
}

void sub_1B0362AAC()
{
  int v0;
  uint64_t v1;

  if (*(char *)(v1 - 145) < 0)
    operator delete(*(void **)(v1 - 168));
  if (v0 < 0)
    JUMPOUT(0x1B0362AC4);
  JUMPOUT(0x1B0362C4CLL);
}

void sub_1B0362ACC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  sub_1B0361470(a20);
  _Unwind_Resume(a1);
}

void sub_1B0362AE0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  void *v25;

  operator delete(v25);
  sub_1B0303828(a1);
}

void sub_1B0362AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43)
{
  uint64_t v44;

  if (a43)
    (*(void (**)(uint64_t))(*(_QWORD *)a43 + 8))(a43);
  if (a42 < 0)
    operator delete(__p);
  v44 = *(_QWORD *)(a20 + 176);
  *(_QWORD *)(a20 + 176) = 0;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  sub_1B0368888(*a15);
  sub_1B036142C(a23);
  sub_1B0361470(a20);
  _Unwind_Resume(a1);
}

void sub_1B0362B00(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  uint64_t v28;

  operator delete(v27);
  sub_1B031724C((void **)(v28 - 208));
  sub_1B031724C(&a27);
  JUMPOUT(0x1B0362BDCLL);
}

void sub_1B0362B10(void *a1)
{
  void *v1;

  __cxa_begin_catch(a1);
  operator delete(v1);
  __cxa_rethrow();
}

void sub_1B0362B24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  __cxa_end_catch();
  if (*(char *)(v27 - 153) < 0)
    operator delete(*(void **)(v27 - 176));
  sub_1B036142C((uint64_t)&a27);
  JUMPOUT(0x1B0362B94);
}

void sub_1B0362B34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27)
{
  void *v27;
  uint64_t v28;

  __cxa_free_exception(v27);
  sub_1B031724C((void **)(v28 - 208));
  sub_1B031724C(&a27);
  JUMPOUT(0x1B0362BDCLL);
}

void sub_1B0362B4C(void *a1)
{
  void **v1;

  __cxa_begin_catch(a1);
  operator delete(*v1);
  __cxa_rethrow();
}

void sub_1B0362B60(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p)
{
  uint64_t v25;

  __cxa_end_catch();
  sub_1B0366D8C(v25 - 176);
  operator delete(__p);
  sub_1B0303828(a1);
}

void sub_1B0362B70()
{
  JUMPOUT(0x1B0362B8CLL);
}

void sub_1B0362BA0()
{
  JUMPOUT(0x1B0362BD4);
}

BOOL sub_1B0362C8C(uint64_t a1, std::string::value_type *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  const void **v7;
  const void **v8;
  std::string v10;
  std::string __p;

  memset(&v10, 0, sizeof(v10));
  if (a3)
  {
    v4 = a3;
    do
    {
      std::string::push_back(&v10, *a2++);
      --v4;
    }
    while (v4);
    v6 = *(_QWORD *)(a1 + 48);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1B02EB0A8(&__p, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
      v7 = sub_1B0367EAC(*(_QWORD *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(__p.__r_.__value_.__l.__data_);
      v8 = *(const void ***)(*(_QWORD *)(a1 + 48) - 8);
      if ((SHIBYTE(v10.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return v8 != v7;
LABEL_11:
      operator delete(v10.__r_.__value_.__l.__data_);
      return v8 != v7;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
  }
  __p = v10;
  v7 = sub_1B0367EAC(*(_QWORD *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_10;
LABEL_6:
  v8 = *(const void ***)(*(_QWORD *)(a1 + 48) - 8);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_11;
  return v8 != v7;
}

void sub_1B0362D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B0362D9C(uint64_t a1, std::string::value_type *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  const void **v7;
  std::string v9;
  std::string __p;

  memset(&v9, 0, sizeof(v9));
  if (a3)
  {
    v4 = a3;
    do
    {
      std::string::push_back(&v9, *a2++);
      --v4;
    }
    while (v4);
    v6 = *(_QWORD *)(a1 + 48);
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1B02EB0A8(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
      v7 = sub_1B0367EAC(*(_QWORD *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_11;
    }
  }
  else
  {
    v6 = *(_QWORD *)(a1 + 48);
  }
  __p = v9;
  v7 = sub_1B0367EAC(*(_QWORD *)(v6 - 8), (const void **)&__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_6:
    if ((SHIBYTE(v9.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_12:
    operator delete(v9.__r_.__value_.__l.__data_);
    if (*(const void ***)(*(_QWORD *)(a1 + 48) - 8) != v7)
      return ((unint64_t)*((unsigned int *)v7 + 6) << 32) | 1;
    return 0;
  }
LABEL_11:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_12;
LABEL_7:
  if (*(const void ***)(*(_QWORD *)(a1 + 48) - 8) != v7)
    return ((unint64_t)*((unsigned int *)v7 + 6) << 32) | 1;
  return 0;
}

void sub_1B0362EB8(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  sub_1B0303828(a1);
}

_QWORD *sub_1B0362ED4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _QWORD *a3@<X8>)
{
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  std::ios_base *v12;
  uint64_t v13;
  NSObject *v14;
  _QWORD *v15;
  _QWORD *exception;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD v21[2];
  unsigned __int8 v22;
  _OWORD buf[4];
  void *__p[2];
  __int128 v25;
  int v26;
  _QWORD v27[20];

  v27[19] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 136) - 8);
  v5 = *(_QWORD *)(v4 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v5)
    goto LABEL_9;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 136) - 8);
  do
  {
    while (*(_DWORD *)(v5 - 32) < a2)
    {
      v5 = *(_QWORD *)(v5 + 16);
      if (!v5)
        goto LABEL_7;
    }
    v6 = v5 - 56;
    v5 = *(_QWORD *)(v5 + 8);
  }
  while (v5);
LABEL_7:
  if (v6 == v4 || *(_DWORD *)(v6 + 24) > a2)
  {
LABEL_9:
    v7 = MEMORY[0x1E0DE4FE0];
    v8 = MEMORY[0x1E0DE4FE0] + 64;
    v9 = (_QWORD *)MEMORY[0x1E0DE4F60];
    v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v11 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v27[0] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)&buf[0] = v10;
    *(_QWORD *)((char *)buf + *(_QWORD *)(v10 - 24)) = v11;
    v12 = (std::ios_base *)((char *)buf + *(_QWORD *)(*(_QWORD *)&buf[0] - 24));
    std::ios_base::init(v12, (char *)buf + 8);
    v12[1].__vftable = 0;
    v12[1].__fmtflags_ = -1;
    *(_QWORD *)&buf[0] = v7 + 24;
    v27[0] = v8;
    std::streambuf::basic_streambuf();
    v13 = MEMORY[0x1E0DE4FB8];
    *((_QWORD *)&buf[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
    *(_OWORD *)__p = 0u;
    v25 = 0u;
    v26 = 16;
    sub_1B02D7994(buf, (uint64_t)"Unknown TokenID: ", 17);
    std::ostream::operator<<();
    std::stringbuf::str();
    *(_QWORD *)&buf[0] = *v9;
    *(_QWORD *)((char *)buf + *(_QWORD *)(*(_QWORD *)&buf[0] - 24)) = v9[3];
    *((_QWORD *)&buf[0] + 1) = v13 + 16;
    if (SBYTE7(v25) < 0)
      operator delete(__p[0]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](v27);
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v14 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      v15 = v21;
      if ((v22 & 0x80u) != 0)
        v15 = (_QWORD *)v21[0];
      LODWORD(buf[0]) = 136315138;
      *(_QWORD *)((char *)buf + 4) = v15;
      _os_log_error_impl(&dword_1B02D2000, v14, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)buf, 0xCu);
    }

    exception = __cxa_allocate_exception(0x20uLL);
    v17 = exception;
    v18 = v22;
    v19 = v21;
    if ((v22 & 0x80u) != 0)
    {
      v19 = (_QWORD *)v21[0];
      v18 = v21[1];
    }
    *(_QWORD *)&buf[0] = v19;
    *((_QWORD *)&buf[0] + 1) = v18;
    *exception = off_1E60CCD88;
    sub_1B0367FC0((uint64_t)(exception + 1), (uint64_t *)buf);
    __cxa_throw(v17, (struct type_info *)&unk_1E60CB0B8, (void (*)(void *))sub_1B0363274);
  }
  return sub_1B03632C0(a3, v4, a2);
}

void sub_1B0363188(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B03631C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03631D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03631EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0363220(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5[2];

  v5[0] = a2;
  v5[1] = a3;
  *a1 = off_1E60CCD88;
  sub_1B0367FC0((uint64_t)(a1 + 1), v5);
  return a1;
}

void sub_1B0363260(_Unwind_Exception *a1)
{
  std::exception *v1;

  std::exception::~exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0363274(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_1E60CCD88;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

_QWORD *sub_1B03632C0(_QWORD *result, unint64_t a2, unsigned int a3)
{
  unint64_t v3;
  unint64_t v4;
  __int128 v5;
  std::logic_error v6;

  v3 = *(_QWORD *)(a2 + 56) & 0xFFFFFFFFFFFFFFFELL;
  if (!v3)
    goto LABEL_12;
  v4 = a2;
  do
  {
    while (*(_DWORD *)(v3 - 32) < a3)
    {
      v3 = *(_QWORD *)(v3 + 16);
      if (!v3)
        goto LABEL_7;
    }
    v4 = v3 - 56;
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3);
LABEL_7:
  if (v4 == a2 || *(_DWORD *)(v4 + 24) > a3)
  {
LABEL_12:
    std::logic_error::logic_error(&v6, "bimap<>: invalid key");
    v6.__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5028] + 16);
    sub_1B03681D4(&v6);
  }
  if (*(char *)(v4 + 23) < 0)
    return sub_1B02EB0A8(result, *(void **)v4, *(_QWORD *)(v4 + 8));
  v5 = *(_OWORD *)v4;
  result[2] = *(_QWORD *)(v4 + 16);
  *(_OWORD *)result = v5;
  return result;
}

unint64_t sub_1B0363394(uint64_t a1, char *__s, uint64_t a3)
{
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  __int128 *v15;
  uint64_t v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  _BOOL4 v22;
  BOOL v23;
  uint64_t *v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  _BOOL4 v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  std::ios_base *v37;
  uint64_t v38;
  NSObject *v39;
  void **v40;
  _QWORD *exception;
  void *v42;
  void *v43;
  void **v44;
  void **v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  std::ios_base *v53;
  uint64_t v54;
  void **v55;
  uint64_t v56;
  NSObject *v57;
  _QWORD *v58;
  _QWORD *v59;
  void *v60;
  uint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  _QWORD v65[2];
  unsigned __int8 v66;
  void *v67[2];
  uint64_t v68;
  __int128 __dst;
  unint64_t v70;
  __int128 __p;
  __int128 v72;
  int v73;
  _QWORD v74[22];

  v74[19] = *MEMORY[0x1E0C80C00];
  if (!*(_QWORD *)(a1 + 160))
  {
LABEL_55:
    v31 = sub_1B0362D9C(a1 + 80, __s, a3);
    if ((_BYTE)v31)
      return HIDWORD(v31);
    if (!*(_BYTE *)(a1 + 172))
    {
      v32 = MEMORY[0x1E0DE4FE0];
      v33 = MEMORY[0x1E0DE4FE0] + 64;
      v34 = (_QWORD *)MEMORY[0x1E0DE4F60];
      v35 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
      v36 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
      v74[0] = MEMORY[0x1E0DE4FE0] + 64;
      *(_QWORD *)&__dst = v35;
      *(_QWORD *)((char *)&__dst + *(_QWORD *)(v35 - 24)) = v36;
      v37 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24));
      std::ios_base::init(v37, (char *)&__dst + 8);
      v37[1].__vftable = 0;
      v37[1].__fmtflags_ = -1;
      *(_QWORD *)&__dst = v32 + 24;
      v74[0] = v33;
      std::streambuf::basic_streambuf();
      v38 = MEMORY[0x1E0DE4FB8];
      *((_QWORD *)&__dst + 1) = MEMORY[0x1E0DE4FB8] + 16;
      __p = 0u;
      v72 = 0u;
      v73 = 16;
      sub_1B02D7994(&__dst, (uint64_t)"Unknown Token: ", 15);
      sub_1B02D7994(&__dst, (uint64_t)__s, a3);
      std::stringbuf::str();
      *(_QWORD *)&__dst = *v34;
      *(_QWORD *)((char *)&__dst + *(_QWORD *)(__dst - 24)) = v34[3];
      *((_QWORD *)&__dst + 1) = v38 + 16;
      if (SBYTE7(v72) < 0)
        operator delete((void *)__p);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1B5E07C60](v74);
      if (qword_1EEEB2D38 != -1)
        dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
      v39 = (id)qword_1EEEB2D30;
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
      {
        v40 = v67;
        if (v68 < 0)
          v40 = (void **)v67[0];
        LODWORD(__dst) = 136315138;
        *(_QWORD *)((char *)&__dst + 4) = v40;
        _os_log_error_impl(&dword_1B02D2000, v39, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__dst, 0xCu);
      }

      exception = __cxa_allocate_exception(0x20uLL);
      v42 = exception;
      v43 = (void *)HIBYTE(v68);
      v44 = v67;
      if (v68 < 0)
      {
        v44 = (void **)v67[0];
        v43 = v67[1];
      }
      *(_QWORD *)&__dst = v44;
      *((_QWORD *)&__dst + 1) = v43;
      *exception = off_1E60CCD88;
      sub_1B0367FC0((uint64_t)(exception + 1), (uint64_t *)&__dst);
      __cxa_throw(v42, (struct type_info *)&unk_1E60CB0B8, (void (*)(void *))sub_1B0363274);
    }
    return *(unsigned int *)(a1 + 168);
  }
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v12 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v12 = v6 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    v70 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v70) = v6;
    p_dst = &__dst;
    if (!v6)
    {
      LOBYTE(__dst) = 0;
      v9 = a1 + 152;
      v10 = *(_QWORD *)(a1 + 152);
      v11 = HIBYTE(v70);
      if (!v10)
        goto LABEL_53;
      goto LABEL_11;
    }
  }
  memmove(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v9 = a1 + 152;
  v10 = *(_QWORD *)(a1 + 152);
  v11 = HIBYTE(v70);
  if (!v10)
    goto LABEL_53;
LABEL_11:
  if ((v11 & 0x80u) == 0)
    v14 = v11;
  else
    v14 = *((_QWORD *)&__dst + 1);
  if ((v11 & 0x80u) == 0)
    v15 = &__dst;
  else
    v15 = (__int128 *)__dst;
  v16 = v9;
  do
  {
    v17 = *(char *)(v10 + 55);
    if (v17 >= 0)
      v18 = *(unsigned __int8 *)(v10 + 55);
    else
      v18 = *(_QWORD *)(v10 + 40);
    if (v17 >= 0)
      v19 = (const void *)(v10 + 32);
    else
      v19 = *(const void **)(v10 + 32);
    if (v14 >= v18)
      v20 = v18;
    else
      v20 = v14;
    v21 = memcmp(v19, v15, v20);
    v22 = v18 < v14;
    if (v21)
      v22 = v21 < 0;
    v23 = !v22;
    if (v22)
      v24 = (uint64_t *)(v10 + 8);
    else
      v24 = (uint64_t *)v10;
    if (v23)
      v16 = v10;
    v10 = *v24;
  }
  while (*v24);
  if (v16 != v9)
  {
    v25 = *(char *)(v16 + 55);
    if (v25 >= 0)
      v26 = *(unsigned __int8 *)(v16 + 55);
    else
      v26 = *(_QWORD *)(v16 + 40);
    if (v25 >= 0)
      v27 = (const void *)(v16 + 32);
    else
      v27 = *(const void **)(v16 + 32);
    if (v26 >= v14)
      v28 = v14;
    else
      v28 = v26;
    v29 = memcmp(v15, v27, v28);
    v30 = v14 < v26;
    if (v29)
      v30 = v29 < 0;
    if (!v30)
    {
      if ((v11 & 0x80) != 0)
        goto LABEL_54;
LABEL_50:
      if (v16 == v9)
        goto LABEL_55;
      goto LABEL_51;
    }
  }
LABEL_53:
  v16 = v9;
  if ((v11 & 0x80) == 0)
    goto LABEL_50;
LABEL_54:
  operator delete((void *)__dst);
  if (v16 == v9)
    goto LABEL_55;
LABEL_51:
  if (*(char *)(v16 + 79) < 0)
  {
    sub_1B02EB0A8(v67, *(void **)(v16 + 56), *(_QWORD *)(v16 + 64));
  }
  else
  {
    *(_OWORD *)v67 = *(_OWORD *)(v16 + 56);
    v68 = *(_QWORD *)(v16 + 72);
  }
  if (v68 >= 0)
    v45 = v67;
  else
    v45 = (void **)v67[0];
  if (v68 >= 0)
    v46 = HIBYTE(v68);
  else
    v46 = (uint64_t)v67[1];
  v47 = sub_1B0362D9C(a1 + 80, (std::string::value_type *)v45, v46);
  if ((v47 & 1) == 0)
  {
    v48 = MEMORY[0x1E0DE4FE0];
    v49 = MEMORY[0x1E0DE4FE0] + 64;
    v50 = (_QWORD *)MEMORY[0x1E0DE4F60];
    v51 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
    v52 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
    v74[0] = MEMORY[0x1E0DE4FE0] + 64;
    *(_QWORD *)&__dst = v51;
    *(_QWORD *)((char *)&__dst + *(_QWORD *)(v51 - 24)) = v52;
    v53 = (std::ios_base *)((char *)&__dst + *(_QWORD *)(__dst - 24));
    std::ios_base::init(v53, (char *)&__dst + 8);
    v53[1].__vftable = 0;
    v53[1].__fmtflags_ = -1;
    *(_QWORD *)&__dst = v48 + 24;
    v74[0] = v49;
    std::streambuf::basic_streambuf();
    v54 = MEMORY[0x1E0DE4FB8];
    *((_QWORD *)&__dst + 1) = MEMORY[0x1E0DE4FB8] + 16;
    __p = 0u;
    v72 = 0u;
    v73 = 16;
    sub_1B02D7994(&__dst, (uint64_t)"Special token ", 14);
    if (v68 >= 0)
      v55 = v67;
    else
      v55 = (void **)v67[0];
    if (v68 >= 0)
      v56 = HIBYTE(v68);
    else
      v56 = (uint64_t)v67[1];
    sub_1B02D7994(&__dst, (uint64_t)v55, v56);
    sub_1B02D7994(&__dst, (uint64_t)" not found in vocab!", 20);
    std::stringbuf::str();
    *(_QWORD *)&__dst = *v50;
    *(_QWORD *)((char *)&__dst + *(_QWORD *)(__dst - 24)) = v50[3];
    *((_QWORD *)&__dst + 1) = v54 + 16;
    if (SBYTE7(v72) < 0)
      operator delete((void *)__p);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1B5E07C60](v74);
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v57 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v57, OS_LOG_TYPE_ERROR))
    {
      v58 = v65;
      if ((v66 & 0x80u) != 0)
        v58 = (_QWORD *)v65[0];
      LODWORD(__dst) = 136315138;
      *(_QWORD *)((char *)&__dst + 4) = v58;
      _os_log_error_impl(&dword_1B02D2000, v57, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&__dst, 0xCu);
    }

    v59 = __cxa_allocate_exception(0x20uLL);
    v60 = v59;
    v61 = v66;
    v62 = v65;
    if ((v66 & 0x80u) != 0)
    {
      v62 = (_QWORD *)v65[0];
      v61 = v65[1];
    }
    *(_QWORD *)&__dst = v62;
    *((_QWORD *)&__dst + 1) = v61;
    *v59 = off_1E60CCD88;
    sub_1B0367FC0((uint64_t)(v59 + 1), (uint64_t *)&__dst);
    __cxa_throw(v60, (struct type_info *)&unk_1E60CB0B8, (void (*)(void *))sub_1B0363274);
  }
  v63 = HIDWORD(v47);
  if (SHIBYTE(v68) < 0)
    operator delete(v67[0]);
  return v63;
}

void sub_1B0363A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a15 < 0)
  {
    operator delete(__p);
    if ((a21 & 0x80000000) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if ((a21 & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(a16);
  _Unwind_Resume(a1);
}

void sub_1B0363B2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0363B40(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

void sub_1B0363B8C(_QWORD *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v4;
  void *__p;
  void **v6;

  v1 = a1[22];
  (*(void (**)(void **__return_ptr))(*a1 + 72))(&__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v1 + 24))(v1, &__p);
  v2 = (void **)__p;
  if (__p)
  {
    v3 = v6;
    v4 = __p;
    if (v6 != __p)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*(v3 - 3));
        v3 -= 3;
      }
      while (v3 != v2);
      v4 = __p;
    }
    v6 = v2;
    operator delete(v4);
  }
}

void sub_1B0363C24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0363C38(uint64_t a1, char *__s, int64_t a3, int a4)
{
  std::string *v8;
  int64_t v9;
  char *v10;
  void **v11;
  void **v12;
  void *v13;
  char *v14;
  int v15;
  int64_t v16;
  char *v17;
  int64_t v18;
  char *v19;
  char *v20;
  std::logic_error *exception;
  void *__p;
  void **v23;

  v8 = (std::string *)(a1 + 8);
  if (*(char *)(a1 + 31) < 0)
  {
    v10 = *(char **)(a1 + 8);
    v9 = *(_QWORD *)(a1 + 16);
    if (!v9)
      goto LABEL_25;
  }
  else
  {
    v9 = *(unsigned __int8 *)(a1 + 31);
    v10 = (char *)(a1 + 8);
    if (!*(_BYTE *)(a1 + 31))
      goto LABEL_25;
  }
  if (a3 >= v9)
  {
    v14 = &__s[a3];
    v15 = *v10;
    v16 = a3;
    v17 = __s;
    while (1)
    {
      v18 = v16 - v9;
      if (v18 == -1)
        goto LABEL_6;
      v19 = (char *)memchr(v17, v15, v18 + 1);
      if (!v19)
        goto LABEL_6;
      v20 = v19;
      if (!memcmp(v19, v10, v9))
        break;
      v17 = v20 + 1;
      v16 = v14 - (v20 + 1);
      if (v16 < v9)
        goto LABEL_6;
    }
    if (v20 != v14 && __s == v20)
    {
LABEL_25:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1B0363E0C(exception);
      __cxa_throw(exception, (struct type_info *)off_1E60CA338, MEMORY[0x1E0DE4360]);
    }
  }
LABEL_6:
  (*(void (**)(void **__return_ptr, _QWORD, char *, int64_t))(**(_QWORD **)(a1 + 176) + 16))(&__p, *(_QWORD *)(a1 + 176), __s, a3);
  if (a4)
    sub_1B0363E38((std::string **)&__p, (uint64_t)__p, v8);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, &__p);
  v11 = (void **)__p;
  if (__p)
  {
    v12 = v23;
    v13 = __p;
    if (v23 != __p)
    {
      do
      {
        if (*((char *)v12 - 1) < 0)
          operator delete(*(v12 - 3));
        v12 -= 3;
      }
      while (v12 != v11);
      v13 = __p;
    }
    v23 = v11;
    operator delete(v13);
  }
}

void sub_1B0363DD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0363DE4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0363DF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

std::logic_error *sub_1B0363E0C(std::logic_error *a1)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, "Input text should not contain BOS token!");
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
  return result;
}

void sub_1B0363E38(std::string **a1, uint64_t a2, std::string *__str)
{
  std::string *v3;
  unint64_t v5;
  std::string *v6;
  uint64_t v7;
  uint64_t v8;
  std::string *v9;
  unint64_t v10;
  std::string *v11;
  unint64_t v12;
  unint64_t v13;
  std::string *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 *v24;
  __int128 v25;
  unint64_t v26;
  char *v27;
  char *v28;
  std::string *v29;
  std::string *v30;
  char *v31;
  __int128 v32;
  std::string *v33;
  std::string *v34;
  __int128 v35;
  char *v36;
  char *v37;
  char *v38;

  v3 = __str;
  v6 = *a1;
  v5 = (unint64_t)a1[1];
  v7 = a2 - (_QWORD)*a1;
  v8 = v7 / 24;
  v9 = &(*a1)[v7 / 24];
  v10 = (unint64_t)a1[2];
  if (v5 >= v10)
  {
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (_QWORD)v6) >> 3) + 1;
    if (v16 > 0xAAAAAAAAAAAAAAALL)
      sub_1B02D7758();
    v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v6) >> 3);
    if (2 * v17 > v16)
      v16 = 2 * v17;
    if (v17 >= 0x555555555555555)
      v18 = 0xAAAAAAAAAAAAAAALL;
    else
      v18 = v16;
    if (v18)
    {
      if (v18 > 0xAAAAAAAAAAAAAAALL)
        sub_1B02D72AC();
      v19 = (char *)operator new(24 * v18);
    }
    else
    {
      v19 = 0;
    }
    v21 = &v19[24 * v8];
    v36 = v21;
    v37 = v21;
    v38 = &v19[24 * v18];
    if (v8 == v18)
    {
      if (v7 < 24)
      {
        if ((unint64_t)(v7 + 23) < 0x2F)
          v26 = 1;
        else
          v26 = 2 * v8;
        if (v26 > 0xAAAAAAAAAAAAAAALL)
          sub_1B02D72AC();
        v27 = (char *)operator new(24 * v26);
        v21 = &v27[24 * (v26 >> 2)];
        v36 = v21;
        v37 = v21;
        v38 = &v27[24 * v26];
        if (v19)
          operator delete(v19);
      }
      else
      {
        v22 = v8 + 2;
        if (v8 >= -1)
          v22 = v8 + 1;
        v21 -= 24 * (v22 >> 1);
        v36 = v21;
        v37 = v21;
      }
    }
    if (SHIBYTE(v3->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_1B02EB0A8(v21, v3->__r_.__value_.__l.__data_, v3->__r_.__value_.__l.__size_);
      v21 = v36;
      v28 = v37 + 24;
      v29 = *a1;
      if (*a1 != v9)
        goto LABEL_41;
    }
    else
    {
      *(_OWORD *)v21 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      *((_QWORD *)v21 + 2) = *((_QWORD *)&v3->__r_.__value_.__l + 2);
      v28 = v21 + 24;
      v29 = *a1;
      if (*a1 != v9)
      {
LABEL_41:
        v30 = v9;
        do
        {
          v31 = v21 - 24;
          v32 = *(_OWORD *)&v30[-1].__r_.__value_.__l.__data_;
          *((_QWORD *)v21 - 1) = *((_QWORD *)&v30[-1].__r_.__value_.__l + 2);
          *(_OWORD *)(v21 - 24) = v32;
          v30[-1].__r_.__value_.__l.__size_ = 0;
          v30[-1].__r_.__value_.__r.__words[2] = 0;
          v30[-1].__r_.__value_.__r.__words[0] = 0;
          v21 -= 24;
          --v30;
        }
        while (v30 != v29);
        v33 = a1[1];
        if (v33 == v9)
        {
LABEL_44:
          v34 = *a1;
          *a1 = (std::string *)v31;
          a1[1] = (std::string *)v28;
          a1[2] = (std::string *)v38;
          if (v9 == v34)
            goto LABEL_45;
          goto LABEL_53;
        }
        do
        {
LABEL_49:
          v35 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
          *((_QWORD *)v28 + 2) = *((_QWORD *)&v9->__r_.__value_.__l + 2);
          *(_OWORD *)v28 = v35;
          v28 += 24;
          v9->__r_.__value_.__l.__size_ = 0;
          v9->__r_.__value_.__r.__words[2] = 0;
          v9->__r_.__value_.__r.__words[0] = 0;
          ++v9;
        }
        while (v9 != v33);
        v34 = *a1;
        v9 = a1[1];
        *a1 = (std::string *)v31;
        a1[1] = (std::string *)v28;
        a1[2] = (std::string *)v38;
        if (v9 == v34)
        {
LABEL_45:
          if (!v9)
            return;
          goto LABEL_56;
        }
        do
        {
LABEL_53:
          if (SHIBYTE(v9[-1].__r_.__value_.__r.__words[2]) < 0)
            operator delete(v9[-1].__r_.__value_.__l.__data_);
          --v9;
        }
        while (v9 != v34);
        v9 = v34;
        if (!v34)
          return;
LABEL_56:
        operator delete(v9);
        return;
      }
    }
    v31 = v21;
    v33 = a1[1];
    if (v33 == v9)
      goto LABEL_44;
    goto LABEL_49;
  }
  if (v9 != (std::string *)v5)
  {
    v11 = v9 + 1;
    v12 = v5 - 24;
    if (v5 < 0x18)
    {
      a1[1] = (std::string *)v5;
      if ((std::string *)v5 == v11)
        goto LABEL_30;
    }
    else
    {
      v13 = v5 - 24;
      v14 = a1[1];
      do
      {
        v15 = *(_OWORD *)v13;
        v14->__r_.__value_.__r.__words[2] = *(_QWORD *)(v13 + 16);
        *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
        ++v14;
        *(_QWORD *)(v13 + 8) = 0;
        *(_QWORD *)(v13 + 16) = 0;
        *(_QWORD *)v13 = 0;
        v13 += 24;
      }
      while (v13 < v5);
      a1[1] = v14;
      if ((std::string *)v5 == v11)
      {
LABEL_30:
        if (v9 <= v3)
          v3 += a1[1] > v3;
        std::string::operator=(v9, v3);
        return;
      }
    }
    v23 = 8 * ((uint64_t)(v5 - (_QWORD)v11) >> 3);
    do
    {
      if (*(char *)(v12 + 23) < 0)
        operator delete(*(void **)v12);
      v24 = (__int128 *)((char *)&v9[-1] + v23);
      v25 = *v24;
      *(_QWORD *)(v12 + 16) = *(_QWORD *)((char *)&v9->__r_.__value_.__l + v23 - 8);
      *(_OWORD *)v12 = v25;
      v12 -= 24;
      v9->__r_.__value_.__s.__data_[v23 - 1] = 0;
      *(_BYTE *)v24 = 0;
      v23 -= 24;
    }
    while (v23);
    goto LABEL_30;
  }
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_1B02EB0A8(&(*a1)[v7 / 24], __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else
  {
    v20 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
    v9->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v20;
  }
  a1[1] = v9 + 1;
}

void sub_1B0364230(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 8) = v1;
  _Unwind_Resume(a1);
}

void sub_1B0364238(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0317B88((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B036424C(char *__s@<X1>, uint64_t a2@<X0>, int64_t a3@<X2>, int a4@<W3>, std::string **a5@<X8>)
{
  std::string *v9;
  int64_t v10;
  char *v11;
  char *v12;
  int v13;
  int64_t v14;
  char *v15;
  int64_t v16;
  char *v17;
  char *v18;
  std::logic_error *exception;

  v9 = (std::string *)(a2 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    v11 = *(char **)(a2 + 8);
    v10 = *(_QWORD *)(a2 + 16);
    if (!v10)
      goto LABEL_17;
  }
  else
  {
    v10 = *(unsigned __int8 *)(a2 + 31);
    v11 = (char *)(a2 + 8);
    if (!*(_BYTE *)(a2 + 31))
      goto LABEL_17;
  }
  if (a3 >= v10)
  {
    v12 = &__s[a3];
    v13 = *v11;
    v14 = a3;
    v15 = __s;
    while (1)
    {
      v16 = v14 - v10;
      if (v16 == -1)
        goto LABEL_6;
      v17 = (char *)memchr(v15, v13, v16 + 1);
      if (!v17)
        goto LABEL_6;
      v18 = v17;
      if (!memcmp(v17, v11, v10))
        break;
      v15 = v18 + 1;
      v14 = v12 - (v18 + 1);
      if (v14 < v10)
        goto LABEL_6;
    }
    if (v18 != v12 && __s == v18)
    {
LABEL_17:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1B0363E0C(exception);
      __cxa_throw(exception, (struct type_info *)off_1E60CA338, MEMORY[0x1E0DE4360]);
    }
  }
LABEL_6:
  (*(void (**)(_QWORD, char *, int64_t))(**(_QWORD **)(a2 + 176) + 16))(*(_QWORD *)(a2 + 176), __s, a3);
  if (a4)
    sub_1B0363E38(a5, (uint64_t)*a5, v9);
}

void sub_1B0364388(_Unwind_Exception *a1)
{
  void **v1;

  sub_1B031724C(v1);
  _Unwind_Resume(a1);
}

void sub_1B036439C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03643B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  std::runtime_error *exception;
  std::string *v10;
  std::string v11;
  uint64_t v12;

  *(_BYTE *)(a1 + 31) = 3;
  *(_DWORD *)(a1 + 8) = 4092732;
  *(_BYTE *)(a1 + 55) = 4;
  *(_DWORD *)(a1 + 32) = 1047736124;
  *(_BYTE *)(a1 + 79) = 5;
  strcpy((char *)(a1 + 56), "<unk>");
  *(_QWORD *)a1 = off_1E60CCDD8;
  v4 = a1 + 80;
  *(_BYTE *)(a1 + 36) = 0;
  sub_1B02DD540(a1 + 80);
  v5 = *(char *)(a2 + 23);
  if (v5 >= 0)
    v6 = a2;
  else
    v6 = *(_QWORD *)a2;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(a2 + 23);
  else
    v7 = *(_QWORD *)(a2 + 8);
  sub_1B02DD8DC(v4, v6, v7, &v12);
  if (v12)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B0303444((uint64_t)&v12, &v11);
    if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v11;
    else
      v10 = (std::string *)v11.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)v10);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B0303130(&v12);
  return a1;
}

void sub_1B03644D8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  sub_1B02DD644(v2);
  sub_1B0361470(v1);
  _Unwind_Resume(a1);
}

void sub_1B03644F4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B0361470(v1);
  _Unwind_Resume(a1);
}

void sub_1B0364508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v18 & 1) == 0)
    {
LABEL_6:
      sub_1B0303130(&a15);
      sub_1B02DD644(v16);
      sub_1B0361470(v15);
      _Unwind_Resume(a1);
    }
  }
  else if (!v18)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v17);
  goto LABEL_6;
}

uint64_t sub_1B0364558(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E60CCDD8;
  sub_1B02DD644(a1 + 80);
  *(_QWORD *)a1 = off_1E60CCC48;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void *sub_1B03645E4@<X0>(_QWORD **a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *result;
  unint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *exception;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];
  unsigned __int8 v17;
  int v18;

  v18 = a2;
  if (((uint64_t (*)(_QWORD **))(*a1)[11])(a1) <= (unint64_t)a2)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    sub_1B0364760();
    if ((v17 & 0x80u) == 0)
      v14 = v16;
    else
      v14 = (_QWORD *)v16[0];
    if ((v17 & 0x80u) == 0)
      v15 = v17;
    else
      v15 = v16[1];
    sub_1B0363220(exception, (uint64_t)v14, v15);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB0B8, (void (*)(void *))sub_1B0363274);
  }
  result = (void *)sub_1B02E6270(a1 + 10, a2);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v8 = result;
  v9 = v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v12 = operator new(v10 + 1);
    a3[1] = v9;
    a3[2] = v11 | 0x8000000000000000;
    *a3 = v12;
    a3 = v12;
  }
  else
  {
    *((_BYTE *)a3 + 23) = v7;
    if (!v7)
    {
      *(_BYTE *)a3 = 0;
      return result;
    }
  }
  result = memmove(a3, v8, v9);
  *((_BYTE *)a3 + v9) = 0;
  return result;
}

void sub_1B0364724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) != 0)
    {
LABEL_6:
      __cxa_free_exception(v14);
      _Unwind_Resume(a1);
    }
  }
  else if (v15)
  {
    goto LABEL_6;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B0364760()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  std::ios_base *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[8];
  void *__p[2];
  __int128 v11;
  int v12;
  uint64_t v13[19];

  v0 = MEMORY[0x1E0DE4FE0];
  v1 = MEMORY[0x1E0DE4FE0] + 64;
  v2 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v3 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v4 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v13[0] = MEMORY[0x1E0DE4FE0] + 64;
  v8 = v3;
  *(uint64_t *)((char *)&v9[-1] + *(_QWORD *)(v3 - 24)) = v4;
  v5 = (std::ios_base *)((char *)&v9[-1] + *(_QWORD *)(v8 - 24));
  std::ios_base::init(v5, v9);
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  v8 = v0 + 24;
  v13[0] = v1;
  std::streambuf::basic_streambuf();
  v6 = MEMORY[0x1E0DE4FB8];
  v9[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v11 = 0u;
  v12 = 16;
  std::ostream::operator<<();
  std::stringbuf::str();
  v8 = *v2;
  *(uint64_t *)((char *)&v9[-1] + *(_QWORD *)(v8 - 24)) = v2[3];
  v9[0] = v6 + 16;
  if (SBYTE7(v11) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v13);
}

void sub_1B0364898(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03648AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B03648C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B03648F4(uint64_t a1, std::string::value_type *__s, uint64_t a3)
{
  uint64_t v6;
  std::string::value_type *v7;
  char *v8;
  size_t v9;
  std::string::value_type *v10;
  char *v11;
  std::string *v12;
  std::string::size_type size;
  uint64_t v14;
  _QWORD **v15;
  std::string *v16;
  std::string::size_type v17;
  unsigned int *v18;
  int64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  NSObject *v24;
  std::string *v26;
  _BYTE *v27;
  _BYTE *v28;
  void **v29;
  std::runtime_error *exception;
  std::string *p_buf;
  void *v32[2];
  char v33;
  void *v34[2];
  char v35;
  void *__p;
  _BYTE *v37;
  uint64_t v38;
  std::string v39;
  std::string buf;
  void **v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  memset(&v39, 0, sizeof(v39));
  if (a3)
  {
    v6 = a3;
    v7 = __s;
    do
    {
      std::string::push_back(&v39, *v7++);
      --v6;
    }
    while (v6);
  }
  v8 = &__s[a3];
  v9 = a3;
  if (a3 >= 1)
  {
    v10 = __s;
    do
    {
      v11 = (char *)memchr(v10, 60, v9);
      if (!v11)
        break;
      if (*v11 == 60)
      {
        if (v11 == v8 || __s != v11 || __s[a3 - 1] != 62)
          break;
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v12 = &v39;
        else
          v12 = (std::string *)v39.__r_.__value_.__r.__words[0];
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        else
          size = v39.__r_.__value_.__l.__size_;
        v14 = sub_1B02E60F4((_QWORD **)(a1 + 80), (uint64_t)v12, size);
        goto LABEL_41;
      }
      v10 = v11 + 1;
      v9 = v8 - v10;
    }
    while (v8 - v10 >= 1);
  }
  __p = 0;
  v37 = 0;
  v38 = 0;
  v15 = (_QWORD **)(a1 + 80);
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v16 = &v39;
  else
    v16 = (std::string *)v39.__r_.__value_.__r.__words[0];
  if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
  else
    v17 = v39.__r_.__value_.__l.__size_;
  sub_1B02E0648(a1 + 80, (uint64_t)v16, v17, (char **)&__p, (uint64_t *)v34);
  if (v34[0])
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B0303444((uint64_t)v34, &buf);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_buf = &buf;
    else
      p_buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)p_buf);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B0303130((uint64_t *)v34);
  v18 = (unsigned int *)__p;
  v19 = v37 - (_BYTE *)__p;
  if (v37 - (_BYTE *)__p == 8)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      v20 = *(_QWORD *)(a1 + 8);
      v21 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v20 = a1 + 8;
      v21 = *(unsigned __int8 *)(a1 + 31);
    }
    v22 = *(_DWORD *)__p;
    if (v22 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v20, v21))
    {
      v23 = __p;
      v18 = (unsigned int *)((char *)__p + 4);
LABEL_35:
      v14 = *v18;
LABEL_40:
      v37 = v23;
      operator delete(v23);
      goto LABEL_41;
    }
    v18 = (unsigned int *)__p;
    v19 = v37 - (_BYTE *)__p;
  }
  v23 = v18;
  if (v19 == 4)
    goto LABEL_35;
  if (qword_1EEEB2D38 != -1)
    dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
  v24 = (id)qword_1EEEB2D30;
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = &v39;
    else
      v26 = (std::string *)v39.__r_.__value_.__r.__words[0];
    v28 = __p;
    v27 = v37;
    sub_1B02DCBB8(v32, " ");
    sub_1B0364D0C(v34, (uint64_t *)&__p, (uint64_t)v32);
    if (v35 >= 0)
      v29 = v34;
    else
      v29 = (void **)v34[0];
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v26;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (v27 - v28) >> 2;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    v41 = v29;
    _os_log_error_impl(&dword_1B02D2000, v24, OS_LOG_TYPE_ERROR, "Expected token=%s to get converted into single TokenID, but got %zu tokenIDs: %s. Returning UNK TokenID as fallback.", (uint8_t *)&buf, 0x20u);
    if (v35 < 0)
      operator delete(v34[0]);
    if (v33 < 0)
      operator delete(v32[0]);
  }

  v14 = sub_1B02E60F4(v15, (uint64_t)"<unk>", 5);
  v23 = __p;
  if (__p)
    goto LABEL_40;
LABEL_41:
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  return v14;
}

void sub_1B0364C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a26 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0364D0C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  size_t v17;
  void **v18;
  size_t v19;
  uint64_t v20;
  size_t v21;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  void *v26[2];
  unsigned __int8 v27;
  uint64_t v28;
  uint64_t v29[8];
  void *__p[2];
  __int128 v31;
  int v32;
  uint64_t v33[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v33[0] = MEMORY[0x1E0DE4FE0] + 64;
  v28 = v9;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24));
  std::ios_base::init(v11, v29);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v28 = v6 + 24;
  v33[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v29[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v31 = 0u;
  v32 = 16;
  v13 = *a2;
  v14 = a2[1];
  v15 = (v14 - *a2) >> 2;
  if (v15 == 1)
  {
    std::ostream::operator<<();
    std::stringbuf::str();
    goto LABEL_24;
  }
  if (!v15)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    goto LABEL_24;
  }
  if (*(char *)(a3 + 23) >= 0)
    v16 = (const char *)a3;
  else
    v16 = *(const char **)a3;
  if (v13 != v14)
  {
    if (v16)
    {
      do
      {
        std::ostream::operator<<();
        v17 = strlen(v16);
        sub_1B02D7994(&v28, (uint64_t)v16, v17);
        v13 += 4;
      }
      while (v13 != v14);
    }
    else
    {
      do
      {
        std::ostream::operator<<();
        v13 += 4;
      }
      while (v13 != v14);
    }
  }
  v18 = v26;
  std::stringbuf::str();
  v19 = v27;
  v20 = *(unsigned __int8 *)(a3 + 23);
  if ((v20 & 0x80u) != 0)
    v20 = *(_QWORD *)(a3 + 8);
  if ((v27 & 0x80u) != 0)
  {
    v19 = (size_t)v26[1];
    v18 = (void **)v26[0];
  }
  if (v19 >= v19 - v20)
    v21 = v19 - v20;
  else
    v21 = v19;
  if (v21 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v21 >= 0x17)
  {
    v23 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v23 = v21 | 7;
    v24 = v23 + 1;
    v25 = operator new(v23 + 1);
    a1[1] = v21;
    a1[2] = v24 | 0x8000000000000000;
    *a1 = v25;
    a1 = v25;
LABEL_30:
    memmove(a1, v18, v21);
    *((_BYTE *)a1 + v21) = 0;
    if (((char)v27 & 0x80000000) == 0)
      goto LABEL_24;
    goto LABEL_31;
  }
  *((_BYTE *)a1 + 23) = v21;
  if (v21)
    goto LABEL_30;
  *(_BYTE *)a1 = 0;
  if (((char)v27 & 0x80000000) == 0)
    goto LABEL_24;
LABEL_31:
  operator delete(v26[0]);
LABEL_24:
  v28 = *v8;
  *(uint64_t *)((char *)&v29[-1] + *(_QWORD *)(v28 - 24)) = v8[3];
  v29[0] = v12 + 16;
  if (SBYTE7(v31) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v33);
}

void sub_1B0364FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1B02E983C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1B0365028(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t **v8;
  char v9;
  void *v10;
  void **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  size_t v16;
  uint64_t *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;
  int v21;
  _BOOL4 v22;
  _OWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  char v26;
  int v27;
  void *__p[2];
  uint64_t v30;
  uint64_t v31;
  int v32;

  a2[1] = 0;
  v3 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v31 = v4 << 32;
  v32 = 1;
  v27 = v4;
  if ((_DWORD)v4)
  {
    v5 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(__p, a1, v5);
      v6 = *v3;
      v7 = v3;
      v8 = v3;
      if (*v3)
      {
        v9 = HIBYTE(v30);
        if (v30 >= 0)
          v10 = (void *)HIBYTE(v30);
        else
          v10 = __p[1];
        if (v30 >= 0)
          v11 = __p;
        else
          v11 = (void **)__p[0];
        while (1)
        {
          while (1)
          {
            v8 = (uint64_t **)v6;
            v14 = (uint64_t *)v6[4];
            v12 = v6 + 4;
            v13 = v14;
            v15 = *((char *)v12 + 23);
            if (v15 >= 0)
              v16 = *((unsigned __int8 *)v12 + 23);
            else
              v16 = v12[1];
            if (v15 >= 0)
              v17 = v12;
            else
              v17 = v13;
            if (v16 >= (unint64_t)v10)
              v18 = (size_t)v10;
            else
              v18 = v16;
            v19 = memcmp(v11, v17, v18);
            v20 = (unint64_t)v10 < v16;
            if (v19)
              v20 = v19 < 0;
            if (!v20)
              break;
            v6 = *v8;
            v7 = v8;
            if (!*v8)
              goto LABEL_29;
          }
          v21 = memcmp(v17, v11, v18);
          v22 = v16 < (unint64_t)v10;
          if (v21)
            v22 = v21 < 0;
          if (!v22)
            break;
          v6 = v8[1];
          if (!v6)
          {
            v7 = v8 + 1;
            goto LABEL_29;
          }
        }
        *((_DWORD *)v8 + 14) = v5;
        if ((v9 & 0x80) == 0)
          goto LABEL_3;
      }
      else
      {
LABEL_29:
        v23 = operator new(0x40uLL);
        v23[2] = *(_OWORD *)__p;
        *((_QWORD *)v23 + 6) = v30;
        __p[1] = 0;
        v30 = 0;
        __p[0] = 0;
        *((_DWORD *)v23 + 14) = 0;
        *(_QWORD *)v23 = 0;
        *((_QWORD *)v23 + 1) = 0;
        *((_QWORD *)v23 + 2) = v8;
        *v7 = (uint64_t *)v23;
        v24 = (uint64_t *)**a2;
        v25 = (uint64_t *)v23;
        if (v24)
        {
          *a2 = v24;
          v25 = *v7;
        }
        sub_1B02D8180(a2[1], v25);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v26 = HIBYTE(v30);
        *((_DWORD *)v23 + 14) = v5;
        if ((v26 & 0x80) == 0)
          goto LABEL_3;
      }
      operator delete(__p[0]);
LABEL_3:
      v5 = (v5 + 1);
    }
    while ((_DWORD)v5 != v27);
  }
}

void sub_1B0365228(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B035BF54(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B0365240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
  {
    operator delete(__p);
    sub_1B035BF54(v17, *(char **)(v17 + 8));
    _Unwind_Resume(a1);
  }
  sub_1B035BF54(v17, *(char **)(v17 + 8));
  _Unwind_Resume(a1);
}

__n128 sub_1B0365280@<Q0>(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  uint64_t **v4;
  uint64_t v5;
  __n128 result;
  int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t **v10;
  _QWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  void **v16;
  _QWORD *v17;
  __n128 v18;
  void *v19;
  uint64_t v20;
  int v21;

  a2[1] = 0;
  v4 = a2 + 1;
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 88))(a1);
  v20 = v5 << 32;
  v21 = 1;
  v7 = v5;
  if ((_DWORD)v5)
  {
    v8 = 0;
    do
    {
      (*(void (**)(__n128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 48))(&v18, a1, v8);
      v9 = *v4;
      v10 = v4;
      v11 = v4;
      if (*v4)
      {
        while (1)
        {
          while (1)
          {
            v11 = v9;
            v12 = *((_DWORD *)v9 + 8);
            if (v8 >= v12)
              break;
            v9 = (uint64_t *)*v11;
            v10 = (uint64_t **)v11;
            if (!*v11)
              goto LABEL_11;
          }
          if (v12 >= v8)
            break;
          v9 = (uint64_t *)v11[1];
          if (!v9)
          {
            v10 = (uint64_t **)(v11 + 1);
            goto LABEL_11;
          }
        }
        v17 = v11;
        v16 = (void **)(v11 + 5);
        if ((*((char *)v17 + 63) & 0x80000000) == 0)
          goto LABEL_3;
      }
      else
      {
LABEL_11:
        v13 = operator new(0x40uLL);
        v13[8] = v8;
        *((_QWORD *)v13 + 6) = 0;
        *((_QWORD *)v13 + 7) = 0;
        *((_QWORD *)v13 + 5) = 0;
        *(_QWORD *)v13 = 0;
        *((_QWORD *)v13 + 1) = 0;
        *((_QWORD *)v13 + 2) = v11;
        *v10 = (uint64_t *)v13;
        v14 = (uint64_t *)**a2;
        v15 = (uint64_t *)v13;
        if (v14)
        {
          *a2 = v14;
          v15 = *v10;
        }
        sub_1B02D8180(a2[1], v15);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v16 = (void **)(v13 + 10);
        if ((*((char *)v13 + 63) & 0x80000000) == 0)
          goto LABEL_3;
      }
      operator delete(*v16);
LABEL_3:
      result = v18;
      *(__n128 *)v16 = v18;
      v16[2] = v19;
      v8 = (v8 + 1);
    }
    while ((_DWORD)v8 != v7);
  }
  return result;
}

void sub_1B03653F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B035BEF4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B0365408(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
  {
    operator delete(__p);
    sub_1B035BEF4(v15, *(char **)(v15 + 8));
    _Unwind_Resume(a1);
  }
  sub_1B035BEF4(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_1B0365448(std::string::value_type *__s@<X1>, uint64_t a2@<X0>, int64_t a3@<X2>, int a4@<W3>, _QWORD *a5@<X8>)
{
  int64_t v6;
  std::string::value_type *v7;
  char *v10;
  int64_t v11;
  unsigned int v12;
  std::string::size_type size;
  std::string::size_type v14;
  char *v15;
  int v16;
  char *v17;
  std::string::value_type *v18;
  char *v19;
  char *v20;
  char *v21;
  std::string *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  std::logic_error *exception;
  int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  int64_t v38;
  int *v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  char *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  char *v52;
  char *v53;
  int v54;
  size_t v55;
  char *v56;
  char *v57;
  char *v58;
  unint64_t v59;
  int v60;
  uint64_t v61;
  _DWORD *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  _DWORD *v66;
  __int128 *v67;
  _OWORD *v68;
  uint64_t v69;
  __int128 v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  std::runtime_error *v78;
  std::string *v79;
  uint64_t v80;
  std::string v81;
  uint64_t v82;
  void *__p;
  char *v84;
  unint64_t v85;

  v6 = a3;
  v7 = __s;
  v10 = (char *)(a2 + 8);
  v80 = a2 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    v10 = *(char **)(a2 + 8);
    v11 = *(_QWORD *)(a2 + 16);
    if (!v11)
      goto LABEL_31;
  }
  else
  {
    v11 = *(unsigned __int8 *)(a2 + 31);
    if (!*(_BYTE *)(a2 + 31))
      goto LABEL_31;
  }
  if (a3 >= v11)
  {
    v15 = &__s[a3];
    v16 = *v10;
    v17 = (char *)a3;
    v18 = __s;
    while (1)
    {
      v19 = &v17[-v11];
      if (v19 == (char *)-1)
        goto LABEL_6;
      v20 = (char *)memchr(v18, v16, (size_t)(v19 + 1));
      if (!v20)
        goto LABEL_6;
      v21 = v20;
      if (!memcmp(v20, v10, v11))
        break;
      v18 = v21 + 1;
      v17 = (char *)(v15 - (v21 + 1));
      if ((uint64_t)v17 < v11)
        goto LABEL_6;
    }
    if (v21 != v15 && v7 == v21)
    {
LABEL_31:
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_1B0363E0C(exception);
      __cxa_throw(exception, (struct type_info *)off_1E60CA338, MEMORY[0x1E0DE4360]);
    }
  }
LABEL_6:
  __p = 0;
  v84 = 0;
  v85 = 0;
  memset(&v81, 0, sizeof(v81));
  if (v6)
  {
    do
    {
      std::string::push_back(&v81, *v7++);
      --v6;
    }
    while (v6);
    v12 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
    size = v81.__r_.__value_.__l.__size_;
    v14 = v81.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = 0;
    v14 = 0;
    v12 = 0;
  }
  if ((v12 & 0x80u) == 0)
    v22 = &v81;
  else
    v22 = (std::string *)v14;
  if ((v12 & 0x80u) == 0)
    v23 = v12;
  else
    v23 = size;
  sub_1B02E0648(a2 + 80, (uint64_t)v22, v23, (char **)&__p, &v82);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (v82)
  {
    v78 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B0303444((uint64_t)&v82, &v81);
    if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v79 = &v81;
    else
      v79 = (std::string *)v81.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(v78, (const char *)v79);
    __cxa_throw(v78, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B0303130(&v82);
  if (!a4)
    goto LABEL_80;
  v24 = (char *)__p;
  if (__p != v84)
  {
    if (*(char *)(a2 + 31) < 0)
    {
      v26 = *(_QWORD *)(a2 + 8);
      v25 = *(_QWORD *)(a2 + 16);
    }
    else
    {
      v25 = *(unsigned __int8 *)(a2 + 31);
      v26 = v80;
    }
    v28 = *(_DWORD *)__p;
    if (v28 == (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v26, v25))
      goto LABEL_80;
    v24 = (char *)__p;
  }
  if (*(char *)(a2 + 31) < 0)
  {
    v30 = *(_QWORD *)(a2 + 8);
    v29 = *(_QWORD *)(a2 + 16);
  }
  else
  {
    v29 = *(unsigned __int8 *)(a2 + 31);
    v30 = v80;
  }
  v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v30, v29);
  v32 = v31;
  v34 = (char *)__p;
  v33 = v84;
  v35 = v24 - (_BYTE *)__p;
  v36 = (v24 - (_BYTE *)__p) >> 2;
  v37 = (char *)__p + ((v24 - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFFCLL);
  if ((unint64_t)v84 < v85)
  {
    if (v37 == v84)
    {
      *(_DWORD *)v37 = v31;
      v84 = v37 + 4;
    }
    else
    {
      v38 = v84 - (v37 + 4);
      v39 = (int *)(v84 - 4);
      if ((unint64_t)v84 < 4)
      {
        v40 = v84;
      }
      else
      {
        v40 = v84;
        do
        {
          v60 = *v39++;
          *(_DWORD *)v40 = v60;
          v40 += 4;
        }
        while (v39 < (int *)v33);
      }
      v84 = v40;
      if (v33 != v37 + 4)
        memmove(&v33[-4 * (v38 >> 2)], v37, v38);
      *(_DWORD *)v37 = v32;
    }
    goto LABEL_80;
  }
  v41 = ((v84 - (_BYTE *)__p) >> 2) + 1;
  if (v41 >> 62)
    sub_1B02D7758();
  v42 = v85 - (_QWORD)__p;
  if ((uint64_t)(v85 - (_QWORD)__p) >> 1 > v41)
    v41 = v42 >> 1;
  if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL)
    v43 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v43 = v41;
  if (v43)
  {
    if (v43 >> 62)
      sub_1B02D72AC();
    v44 = (char *)operator new(4 * v43);
    v45 = &v44[4 * v36];
    v46 = &v44[4 * v43];
    if (v36 != v43)
      goto LABEL_58;
  }
  else
  {
    v44 = 0;
    v45 = (char *)(4 * v36);
    v46 = 0;
    if (v36)
      goto LABEL_58;
  }
  if (v35 < 1)
  {
    if (v34 == v24)
      v59 = 1;
    else
      v59 = v35 >> 1;
    if (v59 >> 62)
      sub_1B02D72AC();
    v45 = (char *)operator new(4 * v59);
    v46 = &v45[4 * v59];
    if (v44)
    {
      operator delete(v44);
      v46 = &v45[4 * v59];
      v48 = (char *)__p;
      *(_DWORD *)v45 = v32;
      v49 = v45 + 4;
      if (v48 != v37)
        goto LABEL_59;
LABEL_74:
      v53 = v45;
      v55 = v84 - v37;
      if (v84 == v37)
        goto LABEL_65;
      goto LABEL_64;
    }
  }
  else
  {
    v47 = v36 + 2;
    if (v36 >= -1)
      v47 = v36 + 1;
    v45 -= 4 * (v47 >> 1);
  }
LABEL_58:
  v48 = v34;
  *(_DWORD *)v45 = v32;
  v49 = v45 + 4;
  if (v34 == v37)
    goto LABEL_74;
LABEL_59:
  v50 = &v34[v35 & 0xFFFFFFFFFFFFFFFCLL];
  v51 = v50 - v48 - 4;
  if (v51 < 0x2C || (unint64_t)(v50 - v45) < 0x20)
  {
    v52 = v37;
    v53 = v45;
    do
    {
LABEL_62:
      v54 = *((_DWORD *)v52 - 1);
      v52 -= 4;
      *((_DWORD *)v53 - 1) = v54;
      v53 -= 4;
    }
    while (v52 != v48);
    goto LABEL_63;
  }
  v72 = (v51 >> 2) + 1;
  v73 = 4 * (v72 & 0x7FFFFFFFFFFFFFF8);
  v52 = &v37[-v73];
  v53 = &v45[-v73];
  v74 = v45 - 16;
  v75 = &v34[4 * v36 - 16];
  v76 = v72 & 0x7FFFFFFFFFFFFFF8;
  do
  {
    v77 = *(_OWORD *)v75;
    *((_OWORD *)v74 - 1) = *((_OWORD *)v75 - 1);
    *(_OWORD *)v74 = v77;
    v74 -= 32;
    v75 -= 32;
    v76 -= 8;
  }
  while (v76);
  if (v72 != (v72 & 0x7FFFFFFFFFFFFFF8))
    goto LABEL_62;
LABEL_63:
  v55 = v84 - v37;
  if (v84 != v37)
  {
LABEL_64:
    v56 = v37;
    v57 = v46;
    memmove(v49, v56, v55);
    v46 = v57;
    v48 = (char *)__p;
  }
LABEL_65:
  v58 = &v49[v55];
  __p = v53;
  v84 = v58;
  v85 = (unint64_t)v46;
  if (!v48)
    goto LABEL_81;
  operator delete(v48);
LABEL_80:
  v53 = (char *)__p;
  v58 = v84;
LABEL_81:
  *a5 = 0;
  a5[1] = 0;
  a5[2] = 0;
  v61 = v58 - v53;
  if (v58 != v53)
  {
    if (v61 < 0)
      sub_1B02D7758();
    v62 = operator new(v58 - v53);
    *a5 = v62;
    a5[2] = &v62[v61 >> 2];
    bzero(v62, v58 - v53);
    a5[1] = (char *)v62 + v61;
    if ((unint64_t)(v61 - 4) < 0x1C)
    {
      v63 = v53;
    }
    else
    {
      v63 = v53;
      if ((unint64_t)((char *)v62 - v53) >= 0x20)
      {
        v64 = ((unint64_t)(v61 - 4) >> 2) + 1;
        v65 = v64 & 0x7FFFFFFFFFFFFFF8;
        v66 = &v62[v65];
        v63 = &v53[v65 * 4];
        v67 = (__int128 *)(v53 + 16);
        v68 = v62 + 4;
        v69 = v64 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v70 = *v67;
          *(v68 - 1) = *(v67 - 1);
          *v68 = v70;
          v67 += 2;
          v68 += 2;
          v69 -= 8;
        }
        while (v69);
        v62 = v66;
        if (v64 == (v64 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_91;
      }
    }
    do
    {
      v71 = *(_DWORD *)v63;
      v63 += 4;
      *v62++ = v71;
    }
    while (v63 != v58);
  }
LABEL_91:
  if (v53)
  {
    v84 = v53;
    operator delete(v53);
  }
}

void sub_1B0365A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *__p, uint64_t a18)
{
  void *v18;

  if (v18)
    operator delete(v18);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B0365B40@<X0>(uint64_t a1@<X0>, char **a2@<X1>, _QWORD *a3@<X8>)
{
  char *v5;
  char *v6;
  uint64_t v7;
  _DWORD *v8;
  unint64_t v9;
  uint64_t v10;
  _DWORD *v11;
  char *v12;
  __int128 *v13;
  _OWORD *v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  std::runtime_error *exception;
  std::string *p_p;
  std::string __p;
  uint64_t v22;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *a2;
  v5 = a2[1];
  memset(&__p, 0, sizeof(__p));
  v7 = v5 - v6;
  if (v5 != v6)
  {
    if (v7 < 0)
      sub_1B02D7758();
    v8 = operator new(v5 - v6);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    __p.__r_.__value_.__r.__words[2] = (std::string::size_type)&v8[v7 >> 2];
    bzero(v8, v5 - v6);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v8 + v7;
    if ((unint64_t)(v7 - 4) < 0x1C)
      goto LABEL_20;
    if ((unint64_t)((char *)v8 - v6) < 0x20)
      goto LABEL_20;
    v9 = ((unint64_t)(v7 - 4) >> 2) + 1;
    v10 = v9 & 0x7FFFFFFFFFFFFFF8;
    v11 = &v8[v10];
    v12 = &v6[v10 * 4];
    v13 = (__int128 *)(v6 + 16);
    v14 = v8 + 4;
    v15 = v9 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v16 = *v13;
      *(v14 - 1) = *(v13 - 1);
      *v14 = v16;
      v13 += 2;
      v14 += 2;
      v15 -= 8;
    }
    while (v15);
    v8 = v11;
    v6 = v12;
    if (v9 != (v9 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_20:
      do
      {
        v17 = *(_DWORD *)v6;
        v6 += 4;
        *v8++ = v17;
      }
      while (v6 != v5);
    }
  }
  sub_1B02E0BD4(a1 + 80, (uint64_t)&__p, (uint64_t)a3, &v22);
  if (__p.__r_.__value_.__r.__words[0])
  {
    __p.__r_.__value_.__l.__size_ = __p.__r_.__value_.__r.__words[0];
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v22)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B0303444((uint64_t)&v22, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)p_p);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_1B0303130(&v22);
}

void sub_1B0365CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  if (__p)
  {
    operator delete(__p);
    if ((*(char *)(v15 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v15 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B0365D54@<X0>(uint64_t a1@<X0>, std::string::value_type *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  unsigned int v8;
  std::string::size_type size;
  std::string::size_type v10;
  std::string *p_p;
  uint64_t v12;
  std::runtime_error *exception;
  std::string *v15;
  std::string __p;
  uint64_t v17;

  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  memset(&__p, 0, sizeof(__p));
  if (a3)
  {
    v6 = a3;
    do
    {
      std::string::push_back(&__p, *a2++);
      --v6;
    }
    while (v6);
    v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    size = __p.__r_.__value_.__l.__size_;
    v10 = __p.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = 0;
    v10 = 0;
    v8 = 0;
  }
  if ((v8 & 0x80u) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)v10;
  if ((v8 & 0x80u) == 0)
    v12 = v8;
  else
    v12 = size;
  sub_1B02E03F0(a1 + 80, (uint64_t)p_p, v12, a4, &v17);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v17)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B0303444((uint64_t)&v17, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v15 = &__p;
    else
      v15 = (std::string *)__p.__r_.__value_.__r.__words[0];
    std::runtime_error::runtime_error(exception, (const char *)v15);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_1B0303130(&v17);
}

void sub_1B0365E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  void **v15;

  if (a14 < 0)
  {
    operator delete(__p);
    sub_1B031724C(v15);
    _Unwind_Resume(a1);
  }
  sub_1B031724C(v15);
  _Unwind_Resume(a1);
}

void sub_1B0365EE4(uint64_t a1)
{
  sub_1B03687BC(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0365F08(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  __int128 v11;
  int v12;
  char **v13;
  char *v14;
  char **v15;
  char v16;
  void *v17;
  void **v18;
  _QWORD *v19;
  const void *v20;
  const void *v21;
  int v22;
  size_t v23;
  const void *v24;
  size_t v25;
  int v26;
  _BOOL4 v27;
  int v28;
  _BOOL4 v29;
  char *v30;
  _BYTE *v31;
  uint64_t *v32;
  _QWORD *v33;
  _QWORD *v34;
  char **v35;
  void *__p[2];
  uint64_t v37;
  int v38;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 128) - 8);
  a2[1] = 0;
  a2[2] = 0;
  v34 = v3;
  v35 = (char **)(a2 + 1);
  *a2 = (uint64_t *)(a2 + 1);
  v4 = v3[5];
  if (v4)
    v5 = (_QWORD *)(v4 - 32);
  else
    v5 = 0;
  if (v5 != v3)
  {
    do
    {
      if (*((char *)v5 + 23) < 0)
      {
        sub_1B02EB0A8(__p, (void *)*v5, v5[1]);
      }
      else
      {
        v11 = *(_OWORD *)v5;
        v37 = v5[2];
        *(_OWORD *)__p = v11;
      }
      v12 = *((_DWORD *)v5 + 6);
      v38 = v12;
      v13 = v35;
      v14 = *v35;
      v15 = v35;
      if (*v35)
      {
        v16 = HIBYTE(v37);
        if (v37 >= 0)
          v17 = (void *)HIBYTE(v37);
        else
          v17 = __p[1];
        if (v37 >= 0)
          v18 = __p;
        else
          v18 = (void **)__p[0];
        while (1)
        {
          while (1)
          {
            v13 = (char **)v14;
            v21 = (const void *)*((_QWORD *)v14 + 4);
            v19 = v14 + 32;
            v20 = v21;
            v22 = *((char *)v19 + 23);
            if (v22 >= 0)
              v23 = *((unsigned __int8 *)v19 + 23);
            else
              v23 = v19[1];
            if (v22 >= 0)
              v24 = v19;
            else
              v24 = v20;
            if (v23 >= (unint64_t)v17)
              v25 = (size_t)v17;
            else
              v25 = v23;
            v26 = memcmp(v18, v24, v25);
            v27 = (unint64_t)v17 < v23;
            if (v26)
              v27 = v26 < 0;
            if (!v27)
              break;
            v14 = *v13;
            v15 = v13;
            if (!*v13)
              goto LABEL_42;
          }
          v28 = memcmp(v24, v18, v25);
          v29 = v23 < (unint64_t)v17;
          if (v28)
            v29 = v28 < 0;
          if (!v29)
            break;
          v14 = v13[1];
          if (!v14)
          {
            v15 = v13 + 1;
            goto LABEL_42;
          }
        }
      }
      else
      {
LABEL_42:
        v30 = (char *)operator new(0x40uLL);
        v31 = v30 + 32;
        if (SHIBYTE(v37) < 0)
        {
          sub_1B02EB0A8(v31, __p[0], (unint64_t)__p[1]);
          v12 = v38;
        }
        else
        {
          *(_OWORD *)v31 = *(_OWORD *)__p;
          *((_QWORD *)v30 + 6) = v37;
        }
        *((_DWORD *)v30 + 14) = v12;
        *(_QWORD *)v30 = 0;
        *((_QWORD *)v30 + 1) = 0;
        *((_QWORD *)v30 + 2) = v13;
        *v15 = v30;
        v32 = (uint64_t *)**a2;
        if (v32)
        {
          *a2 = v32;
          v30 = *v15;
        }
        sub_1B02D8180(a2[1], (uint64_t *)v30);
        a2[2] = (uint64_t *)((char *)a2[2] + 1);
        v16 = HIBYTE(v37);
      }
      if (v16 < 0)
      {
        operator delete(__p[0]);
        v33 = (_QWORD *)v5[6];
        if (!v33)
        {
LABEL_6:
          v7 = v5[4];
          v6 = v5 + 4;
          v8 = (_QWORD *)(v7 & 0xFFFFFFFFFFFFFFFELL);
          if (v6 == *(_QWORD **)((v7 & 0xFFFFFFFFFFFFFFFELL) + 16))
          {
            do
            {
              v6 = v8;
              v8 = (_QWORD *)(*v8 & 0xFFFFFFFFFFFFFFFELL);
            }
            while (v6 == (_QWORD *)v8[2]);
            v9 = (_QWORD *)v6[2];
          }
          else
          {
            v9 = 0;
          }
          if (v9 == v8)
            v10 = v6;
          else
            v10 = v8;
          goto LABEL_11;
        }
      }
      else
      {
        v33 = (_QWORD *)v5[6];
        if (!v33)
          goto LABEL_6;
      }
      do
      {
        v10 = v33;
        v33 = (_QWORD *)v33[1];
      }
      while (v33);
LABEL_11:
      v5 = v10 - 4;
    }
    while (v10 - 4 != v34);
  }
}

void sub_1B0366170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;
  void *v17;

  operator delete(v17);
  if (a16 < 0)
    operator delete(__p);
  sub_1B035BF54(v16, *(char **)(v16 + 8));
  _Unwind_Resume(a1);
}

void sub_1B03661C0(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  _QWORD *v3;
  char **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  __int128 v12;
  unsigned int v13;
  char *v14;
  char **v15;
  char **v16;
  unsigned int v17;
  char *v18;
  _BYTE *v19;
  uint64_t *v20;
  _QWORD *v21;
  void *__p[2];
  uint64_t v23;
  unsigned int v24;

  v3 = *(_QWORD **)(*(_QWORD *)(a1 + 128) - 8);
  a2[1] = 0;
  v4 = (char **)(a2 + 1);
  a2[2] = 0;
  *a2 = (uint64_t *)(a2 + 1);
  v5 = v3[5];
  if (v5)
    v6 = (_QWORD *)(v5 - 32);
  else
    v6 = 0;
  while (v6 != v3)
  {
    if (*((char *)v6 + 23) < 0)
    {
      sub_1B02EB0A8(__p, (void *)*v6, v6[1]);
    }
    else
    {
      v12 = *(_OWORD *)v6;
      v23 = v6[2];
      *(_OWORD *)__p = v12;
    }
    v13 = *((_DWORD *)v6 + 6);
    v24 = v13;
    v14 = *v4;
    v15 = v4;
    v16 = v4;
    if (*v4)
    {
      while (1)
      {
        while (1)
        {
          v16 = (char **)v14;
          v17 = *((_DWORD *)v14 + 8);
          if (v17 <= v13)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_23;
        }
        if (v17 >= v13)
          break;
        v14 = v16[1];
        if (!v14)
        {
          v15 = v16 + 1;
          goto LABEL_23;
        }
      }
    }
    else
    {
LABEL_23:
      v18 = (char *)operator new(0x40uLL);
      *((_DWORD *)v18 + 8) = v13;
      v19 = v18 + 40;
      if (SHIBYTE(v23) < 0)
      {
        sub_1B02EB0A8(v19, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)v19 = *(_OWORD *)__p;
        *((_QWORD *)v18 + 7) = v23;
      }
      *(_QWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      *((_QWORD *)v18 + 2) = v16;
      *v15 = v18;
      v20 = (uint64_t *)**a2;
      if (v20)
      {
        *a2 = v20;
        v18 = *v15;
      }
      sub_1B02D8180(a2[1], (uint64_t *)v18);
      a2[2] = (uint64_t *)((char *)a2[2] + 1);
    }
    if (SHIBYTE(v23) < 0)
    {
      operator delete(__p[0]);
      v21 = (_QWORD *)v6[6];
      if (v21)
      {
        do
        {
LABEL_33:
          v11 = v21;
          v21 = (_QWORD *)v21[1];
        }
        while (v21);
        goto LABEL_9;
      }
    }
    else
    {
      v21 = (_QWORD *)v6[6];
      if (v21)
        goto LABEL_33;
    }
    v8 = v6[4];
    v7 = v6 + 4;
    v9 = (_QWORD *)(v8 & 0xFFFFFFFFFFFFFFFELL);
    if (v7 == *(_QWORD **)((v8 & 0xFFFFFFFFFFFFFFFELL) + 16))
    {
      do
      {
        v7 = v9;
        v9 = (_QWORD *)(*v9 & 0xFFFFFFFFFFFFFFFELL);
      }
      while (v7 == (_QWORD *)v9[2]);
      v10 = (_QWORD *)v7[2];
    }
    else
    {
      v10 = 0;
    }
    if (v10 == v9)
      v11 = v7;
    else
      v11 = v9;
LABEL_9:
    v6 = v11 - 4;
  }
}

void sub_1B0366388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void *v15;

  operator delete(v15);
  if (a14 < 0)
    operator delete(__p);
  sub_1B035BEF4(v14, *(char **)(v14 + 8));
  _Unwind_Resume(a1);
}

void sub_1B03663D8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const void *v5;
  int64_t v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  char *v13;
  int v14;
  void *__p[2];
  uint64_t v16;

  v5 = *(const void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v6 = v4 - *(_QWORD *)a2;
  if (v4 == *(_QWORD *)a2)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
  }
  else
  {
    if (v6 < 0)
      sub_1B02D7758();
    v8 = (char *)operator new(v4 - *(_QWORD *)a2);
    memcpy(v8, v5, v6);
    v9 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v10 = 4 * (v6 >> 2);
    *(_QWORD *)a3 = 0;
    do
    {
      (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 48))(__p, a1, *(unsigned int *)&v8[v9]);
      v12 = *(_QWORD *)(a3 + 8);
      if (v12 < *(_QWORD *)(a3 + 16))
      {
        v11 = *(_OWORD *)__p;
        *(_QWORD *)(v12 + 16) = v16;
        *(_OWORD *)v12 = v11;
        *(_QWORD *)(a3 + 8) = v12 + 24;
      }
      else
      {
        v13 = sub_1B0318CBC((void **)a3, (uint64_t)__p);
        v14 = SHIBYTE(v16);
        *(_QWORD *)(a3 + 8) = v13;
        if (v14 < 0)
          operator delete(__p[0]);
      }
      v9 += 4;
    }
    while (v10 != v9);
    operator delete(v8);
  }
}

void sub_1B03664F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B036653C(uint64_t a1@<X0>, __int128 **a2@<X1>, char **a3@<X8>)
{
  void **v5;
  void **v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  void **v11;
  void *v12;
  int v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _BYTE *v18;
  char *v19;
  uint64_t v20;
  int64_t v21;
  unint64_t v22;
  char *v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  void **v32;
  void *v33;
  void **v34;
  uint64_t v35;
  void *v36;
  void **v37;
  uint64_t v38;
  void *__p[2];
  void *v40;

  v36 = 0;
  v37 = 0;
  v38 = 0;
  sub_1B02EB2B0((char *)&v36, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v6 = (void **)v36;
  v5 = v37;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  if (v6 != v5)
  {
    v7 = 0;
    v8 = 0;
    v9 = 0;
    v34 = v5;
    v35 = a1;
    while (1)
    {
      if (*((char *)v6 + 23) < 0)
      {
        sub_1B02EB0A8(__p, *v6, (unint64_t)v6[1]);
      }
      else
      {
        v10 = *(_OWORD *)v6;
        v40 = v6[2];
        *(_OWORD *)__p = v10;
      }
      v11 = SHIBYTE(v40) >= 0 ? __p : (void **)__p[0];
      v12 = SHIBYTE(v40) >= 0 ? (void *)HIBYTE(v40) : __p[1];
      v13 = (*(uint64_t (**)(uint64_t, void **, void *))(*(_QWORD *)a1 + 40))(a1, v11, v12);
      v14 = v13;
      if (v9 >= v8)
        break;
      *(_DWORD *)v9 = v13;
      v9 += 4;
      a3[1] = v9;
      if (SHIBYTE(v40) < 0)
        goto LABEL_33;
LABEL_3:
      v6 += 3;
      if (v6 == v5)
      {
        v6 = (void **)v36;
        goto LABEL_45;
      }
    }
    v15 = (v9 - v7) >> 2;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62)
      sub_1B02D7758();
    if ((v8 - v7) >> 1 > v16)
      v16 = (v8 - v7) >> 1;
    if ((unint64_t)(v8 - v7) >= 0x7FFFFFFFFFFFFFFCLL)
      v17 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 >> 62)
        sub_1B02D72AC();
      v18 = operator new(4 * v17);
      v19 = &v18[4 * v15];
      *(_DWORD *)v19 = v14;
      v20 = (uint64_t)(v19 + 4);
      v21 = v9 - v7;
      if (v9 == v7)
      {
LABEL_30:
        v8 = &v18[4 * v17];
        *a3 = v19;
        a3[1] = (char *)v20;
        a3[2] = v8;
        if (v7)
          operator delete(v7);
        v7 = v19;
        v9 = (char *)v20;
        v5 = v34;
        a1 = v35;
        a3[1] = (char *)v20;
        if ((SHIBYTE(v40) & 0x80000000) == 0)
          goto LABEL_3;
LABEL_33:
        operator delete(__p[0]);
        goto LABEL_3;
      }
    }
    else
    {
      v18 = 0;
      v19 = (char *)(4 * v15);
      *(_DWORD *)(4 * v15) = v14;
      v20 = 4 * v15 + 4;
      v21 = v9 - v7;
      if (v9 == v7)
        goto LABEL_30;
    }
    v22 = v21 - 4;
    if (v22 >= 0xBC)
    {
      v25 = (v9 - 4 - v7) & 0xFFFFFFFFFFFFFFFCLL;
      if (&v18[v9 - v7 - 4 - v25] > &v18[v9 - v7 - 4])
      {
        v23 = v9;
      }
      else if (&v9[-v25 - 4] > v9 - 4)
      {
        v23 = v9;
      }
      else if ((unint64_t)(v7 - v18) >= 0x20)
      {
        v26 = (v22 >> 2) + 1;
        v27 = 4 * (v26 & 0x7FFFFFFFFFFFFFF8);
        v23 = &v9[-v27];
        v19 -= v27;
        v28 = &v18[4 * v15 - 16];
        v29 = v9 - 16;
        v30 = v26 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v31 = *(_OWORD *)v29;
          *(v28 - 1) = *((_OWORD *)v29 - 1);
          *v28 = v31;
          v28 -= 2;
          v29 -= 32;
          v30 -= 8;
        }
        while (v30);
        if (v26 == (v26 & 0x7FFFFFFFFFFFFFF8))
          goto LABEL_30;
      }
      else
      {
        v23 = v9;
      }
    }
    else
    {
      v23 = v9;
    }
    do
    {
      v24 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v19 - 1) = v24;
      v19 -= 4;
    }
    while (v23 != v7);
    goto LABEL_30;
  }
LABEL_45:
  if (v6)
  {
    v32 = v37;
    v33 = v6;
    if (v37 != v6)
    {
      do
      {
        if (*((char *)v32 - 1) < 0)
          operator delete(*(v32 - 3));
        v32 -= 3;
      }
      while (v32 != v6);
      v33 = v36;
    }
    v37 = v6;
    operator delete(v33);
  }
}

void sub_1B036682C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void *v22;

  v22 = *(void **)v20;
  if (!*(_QWORD *)v20)
  {
    sub_1B031724C(&a12);
    _Unwind_Resume(a1);
  }
  *(_QWORD *)(v20 + 8) = v22;
  operator delete(v22);
  sub_1B031724C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1B036688C(uint64_t a1)
{
  return *(_QWORD *)(*(_QWORD *)(a1 + 88) + 8);
}

void sub_1B0366898(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E60CCDD8;
  sub_1B02DD644(a1 + 80);
  *(_QWORD *)a1 = off_1E60CCC48;
  if (*(char *)(a1 + 79) < 0)
  {
    operator delete(*(void **)(a1 + 56));
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 31) & 0x80000000) == 0)
        goto LABEL_8;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 32));
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
LABEL_8:
    JUMPOUT(0x1B5E07CD8);
LABEL_7:
  operator delete(*(void **)(a1 + 8));
  goto LABEL_8;
}

uint64_t sub_1B0366928(uint64_t a1)
{
  return (int)sub_1B02E5F90((_QWORD **)(a1 + 80));
}

void sub_1B036694C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (a1)
  {
    v2 = *(_QWORD *)(a1 + 64);
    if (v2)
      v3 = v2 - 56;
    else
      v3 = 0;
    sub_1B036694C(v3);
    v4 = *(_QWORD *)(a1 + 72);
    if (v4)
      v5 = v4 - 56;
    else
      v5 = 0;
    sub_1B036694C(v5);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    operator delete((void *)a1);
  }
}

unint64_t sub_1B03669BC(unint64_t result, unint64_t **a2)
{
  unint64_t v2;
  unint64_t *v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _BYTE *v7;
  _QWORD *v8;
  unint64_t v9;
  _QWORD *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v2 = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)result = v2;
  v3 = *a2;
  if ((**a2 & 0xFFFFFFFFFFFFFFFELL) != result)
  {
    v4 = *(_QWORD *)v2;
    if ((*(_QWORD *)v2 & 1) == 0)
    {
      v5 = v2;
      while (1)
      {
        v6 = v4 & 0xFFFFFFFFFFFFFFFELL;
        v7 = *(_BYTE **)((v4 & 0xFFFFFFFFFFFFFFFELL) + 8);
        if (v7 == (_BYTE *)v5)
        {
          v7 = *(_BYTE **)(v6 + 16);
          if (!v7 || (*v7 & 1) != 0)
          {
            if (result == *(_QWORD *)(v5 + 16))
            {
              *(_QWORD *)(v5 + 16) = *(_QWORD *)(result + 8);
              v14 = *(unint64_t **)(result + 8);
              if (v14)
              {
                *v14 = *v14 & 1 | v5;
                v2 = *(_QWORD *)result;
                v6 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL;
              }
              *(_QWORD *)result = v2 & 1 | v6;
              if (v5 == (*v3 & 0xFFFFFFFFFFFFFFFELL))
              {
                *v3 = *v3 & 1 | result;
                v15 = *(_QWORD *)v5;
              }
              else
              {
                v15 = *(_QWORD *)v5;
                v16 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL;
                if (*(_QWORD *)(v16 + 8) == v5)
                  *(_QWORD *)(v16 + 8) = result;
                else
                  *(_QWORD *)(v16 + 16) = result;
              }
              *(_QWORD *)(result + 8) = v5;
              *(_QWORD *)v5 = v15 & 1 | result;
              v3 = *a2;
              v10 = (_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL);
              v4 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL);
            }
            else
            {
              v10 = (_QWORD *)v5;
              v5 = result;
            }
            *v10 = v4 | 1;
            *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
            v17 = *(_QWORD *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
            v18 = *(unint64_t **)(v17 + 8);
            *(_QWORD *)(v17 + 8) = v18[2];
            v22 = (unint64_t *)v18[2];
            if (v22)
              *v22 = *v22 & 1 | v17;
            *v18 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFELL | *v18 & 1;
            if ((*v3 & 0xFFFFFFFFFFFFFFFELL) == v17)
            {
              *v3 = *v3 & 1 | (unint64_t)v18;
              v20 = *(_QWORD *)v17;
              v18[2] = v17;
            }
            else
            {
              v20 = *(_QWORD *)v17;
              v23 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)(v23 + 16) == v17)
                *(_QWORD *)(v23 + 16) = v18;
              else
                *(_QWORD *)(v23 + 8) = v18;
              v18[2] = v17;
            }
LABEL_36:
            *(_QWORD *)v17 = v20 & 1 | (unint64_t)v18;
            result = v5;
            v3 = *a2;
            v9 = **a2 & 0xFFFFFFFFFFFFFFFELL;
            if (v5 == v9)
              goto LABEL_51;
            goto LABEL_37;
          }
        }
        else if (!v7 || (*v7 & 1) != 0)
        {
          if (result == *(_QWORD *)(v5 + 8))
          {
            *(_QWORD *)(v5 + 8) = *(_QWORD *)(result + 16);
            v11 = *(unint64_t **)(result + 16);
            if (v11)
            {
              *v11 = *v11 & 1 | v5;
              v2 = *(_QWORD *)result;
              v6 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL;
            }
            *(_QWORD *)result = v2 & 1 | v6;
            if (v5 == (*v3 & 0xFFFFFFFFFFFFFFFELL))
            {
              *v3 = *v3 & 1 | result;
              v12 = *(_QWORD *)v5;
            }
            else
            {
              v12 = *(_QWORD *)v5;
              v13 = *(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL;
              if (*(_QWORD *)(v13 + 16) == v5)
                *(_QWORD *)(v13 + 16) = result;
              else
                *(_QWORD *)(v13 + 8) = result;
            }
            *(_QWORD *)(result + 16) = v5;
            *(_QWORD *)v5 = v12 & 1 | result;
            v3 = *a2;
            v8 = (_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL);
            v4 = *(_QWORD *)(result & 0xFFFFFFFFFFFFFFFELL);
          }
          else
          {
            v8 = (_QWORD *)v5;
            v5 = result;
          }
          *v8 = v4 | 1;
          *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
          v17 = *(_QWORD *)(*(_QWORD *)v5 & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
          v18 = *(unint64_t **)(v17 + 16);
          *(_QWORD *)(v17 + 16) = v18[1];
          v19 = (unint64_t *)v18[1];
          if (v19)
            *v19 = *v19 & 1 | v17;
          *v18 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFELL | *v18 & 1;
          if ((*v3 & 0xFFFFFFFFFFFFFFFELL) == v17)
          {
            *v3 = *v3 & 1 | (unint64_t)v18;
            v20 = *(_QWORD *)v17;
          }
          else
          {
            v20 = *(_QWORD *)v17;
            v21 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFFELL;
            if (*(_QWORD *)(v21 + 8) == v17)
              *(_QWORD *)(v21 + 8) = v18;
            else
              *(_QWORD *)(v21 + 16) = v18;
          }
          v18[1] = v17;
          goto LABEL_36;
        }
        *(_QWORD *)v5 = v4 | 1;
        *(_QWORD *)v7 |= 1uLL;
        *(_QWORD *)(*(_QWORD *)(*(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL) &= ~1uLL;
        result = *(_QWORD *)(*(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL) & 0xFFFFFFFFFFFFFFFELL;
        v3 = *a2;
        v9 = **a2 & 0xFFFFFFFFFFFFFFFELL;
        if (result == v9)
          goto LABEL_51;
LABEL_37:
        v2 = *(_QWORD *)result;
        v5 = *(_QWORD *)result & 0xFFFFFFFFFFFFFFFELL;
        v4 = *(_QWORD *)v5;
        if ((*(_QWORD *)v5 & 1) != 0)
        {
          result = v9;
          goto LABEL_51;
        }
      }
    }
    result = **a2 & 0xFFFFFFFFFFFFFFFELL;
LABEL_51:
    v2 = *(_QWORD *)result;
  }
  *(_QWORD *)result = v2 | 1;
  return result;
}

uint64_t sub_1B0366D8C(uint64_t a1)
{
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if (!*(_BYTE *)(a1 + 64) && *(_QWORD *)(a1 + 40))
  {
    v3 = 0;
    v4 = 8;
    do
    {
      v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v4);
      if (*(char *)(v5 + 23) < 0)
      {
        operator delete(*(void **)v5);
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + v4);
      }
      operator delete((void *)v5);
      ++v3;
      v4 += 16;
    }
    while (v3 < *(_QWORD *)(a1 + 40));
  }
  if (*(_QWORD *)(a1 + 24))
    operator delete(*(void **)(a1 + 32));
  return a1;
}

__n128 sub_1B0366E1C(__n128 *a1, __n128 *a2, uint64_t a3, char a4, __n128 result)
{
  __n128 *v9;
  __n128 *v10;
  __n128 *v11;
  __n128 *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __n128 v27;
  __n128 v28;
  __n128 v29;
  __n128 *v30;
  __n128 *v31;
  __n128 *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  __n128 *v44;
  __n128 *v45;
  unint64_t v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t v49;
  unint64_t v50;
  __n128 *v51;
  BOOL v52;
  __n128 v53;
  unint64_t v54;
  unint64_t n128_u64;
  __n128 *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  __n128 *v61;
  __n128 *v62;
  unint64_t v63;
  __n128 *v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  __n128 *v69;
  unint64_t v70;
  __n128 *v71;
  BOOL v73;
  uint64_t v74;
  __n128 *v75;
  __n128 *v76;
  __n128 *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  int64_t v82;
  int64_t v83;
  BOOL v84;
  uint64_t v85;
  __n128 *v86;
  unint64_t v87;
  BOOL v88;
  __n128 *v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  __n128 *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  __n128 *v97;
  __n128 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  __n128 *v103;
  unint64_t v104;
  unint64_t v105;
  __n128 *v106;
  __n128 *v107;
  unint64_t v108;
  unint64_t v109;
  __n128 *v110;
  unint64_t v111;
  __n128 v112;
  __n128 v113;
  __n128 v114;
  __n128 v115;
  __n128 v116;
  __n128 v117;
  __n128 v118;
  __n128 v119;
  __n128 v120;
  __n128 v121;
  __n128 v122;
  __n128 v123;
  __n128 v124;
  __n128 v125;
  __n128 v126;
  __n128 v127;
  __n128 v128;
  __n128 v129;
  __n128 v130;
  __n128 v131;
  __n128 v132;
  __n128 v133;
  __n128 v134;
  __n128 v135;
  __n128 v136;
  __n128 v137;

LABEL_1:
  v9 = a2 - 1;
  v10 = a2 - 2;
  v11 = a2 - 3;
  v12 = a1;
  while (2)
  {
    a1 = v12;
    v13 = (char *)a2 - (char *)v12;
    v14 = a2 - v12;
    switch(v14)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v63 = a2[-1].n128_u64[0];
        v62 = a2 - 1;
        if (v63 < v12->n128_u64[0])
          goto LABEL_101;
        return result;
      case 3:
        v64 = v12 + 1;
        v65 = v12[1].n128_u64[0];
        v67 = a2[-1].n128_u64[0];
        v62 = a2 - 1;
        v66 = v67;
        if (v65 >= v12->n128_u64[0])
        {
          if (v66 < v65)
          {
            result = *v64;
            *v64 = *v62;
            *v62 = result;
            goto LABEL_182;
          }
        }
        else if (v66 >= v65)
        {
          v135 = *v12;
          *v12 = *v64;
          result = v135;
          *v64 = v135;
          if (v62->n128_u64[0] < v12[1].n128_u64[0])
          {
            result = *v64;
            *v64 = *v62;
            *v62 = result;
          }
        }
        else
        {
LABEL_101:
          v131 = *v12;
          *v12 = *v62;
          result = v131;
          *v62 = v131;
        }
        return result;
      case 4:
        v64 = v12 + 1;
        v68 = v12[1].n128_u64[0];
        v69 = v12 + 2;
        v70 = v12[2].n128_u64[0];
        if (v68 >= v12->n128_u64[0])
        {
          if (v70 < v68)
          {
            result = *v64;
            *v64 = *v69;
            *v69 = result;
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v134 = *v12;
              *v12 = *v64;
              result = v134;
              *v64 = v134;
            }
          }
        }
        else
        {
          if (v70 >= v68)
          {
            v136 = *v12;
            *v12 = *v64;
            result = v136;
            *v64 = v136;
            if (v70 >= v12[1].n128_u64[0])
              goto LABEL_179;
            result = *v64;
            *v64 = *v69;
          }
          else
          {
            v132 = *v12;
            *v12 = *v69;
            result = v132;
          }
          *v69 = result;
        }
LABEL_179:
        if (v9->n128_u64[0] < v69->n128_u64[0])
        {
          result = *v69;
          *v69 = *v9;
          *v9 = result;
          if (v69->n128_u64[0] < v64->n128_u64[0])
          {
            result = *v64;
            *v64 = *v69;
            *v69 = result;
LABEL_182:
            if (v12[1].n128_u64[0] < v12->n128_u64[0])
            {
              v137 = *v12;
              *v12 = *v64;
              result = v137;
              *v64 = v137;
            }
          }
        }
        return result;
      case 5:
        result.n128_u64[0] = sub_1B0367D28(v12, v12 + 1, v12[2].n128_u64, (__n128 *)v12[3].n128_u64, (__n128 *)a2[-1].n128_u64, result).n128_u64[0];
        return result;
      default:
        if (v13 > 383)
        {
          if (!a3)
          {
            if (v12 == a2)
              return result;
            v82 = (unint64_t)(v14 - 2) >> 1;
            v83 = v82;
            while (1)
            {
              if (v82 >= v83)
              {
                v85 = (2 * v83) | 1;
                v86 = &v12[v85];
                if (2 * v83 + 2 >= v14)
                {
                  v89 = &v12[v83];
                  v90 = v89->n128_u64[0];
                  if (v86->n128_u64[0] >= v89->n128_u64[0])
                    goto LABEL_137;
                }
                else
                {
                  v87 = v86[1].n128_u64[0];
                  v88 = v86->n128_u64[0] >= v87;
                  if (v86->n128_u64[0] < v87)
                    ++v86;
                  else
                    v87 = v86->n128_u64[0];
                  if (!v88)
                    v85 = 2 * v83 + 2;
                  v89 = &v12[v83];
                  v90 = v89->n128_u64[0];
                  if (v87 >= v89->n128_u64[0])
                  {
LABEL_137:
                    v91 = v89->n128_i64[1];
                    while (1)
                    {
                      v93 = v89;
                      v89 = v86;
                      *v93 = *v86;
                      if (v82 < v85)
                        break;
                      v94 = (2 * v85) | 1;
                      v86 = &v12[v94];
                      v85 = 2 * v85 + 2;
                      if (v85 < v14)
                      {
                        v92 = v86->n128_u64[0];
                        if (v86->n128_u64[0] >= v86[1].n128_u64[0])
                        {
                          v85 = v94;
                        }
                        else
                        {
                          v92 = v86[1].n128_u64[0];
                          ++v86;
                        }
                        if (v92 < v90)
                          break;
                      }
                      else
                      {
                        v85 = v94;
                        if (v86->n128_u64[0] < v90)
                          break;
                      }
                    }
                    v89->n128_u64[0] = v90;
                    v89->n128_u64[1] = v91;
                  }
                }
              }
              v84 = v83-- <= 0;
              if (v84)
              {
                v95 = (unint64_t)v13 >> 4;
                do
                {
                  v96 = 0;
                  v133 = *v12;
                  v97 = v12;
                  do
                  {
                    v98 = &v97[v96 + 1];
                    v99 = (2 * v96) | 1;
                    v100 = 2 * v96 + 2;
                    if (v100 < v95 && v98->n128_u64[0] < v98[1].n128_u64[0])
                    {
                      ++v98;
                      v99 = v100;
                    }
                    *v97 = *v98;
                    v97 = v98;
                    v96 = v99;
                  }
                  while (v99 <= (uint64_t)((unint64_t)(v95 - 2) >> 1));
                  if (v98 == --a2)
                  {
                    result = v133;
                    *v98 = v133;
                  }
                  else
                  {
                    *v98 = *a2;
                    result = v133;
                    *a2 = v133;
                    v101 = (char *)v98 - (char *)v12 + 16;
                    if (v101 >= 17)
                    {
                      v102 = (((unint64_t)v101 >> 4) - 2) >> 1;
                      v103 = &v12[v102];
                      v104 = v98->n128_u64[0];
                      if (v103->n128_u64[0] < v98->n128_u64[0])
                      {
                        v105 = v98->n128_u64[1];
                        do
                        {
                          v106 = v98;
                          v98 = v103;
                          result = *v103;
                          *v106 = *v103;
                          if (!v102)
                            break;
                          v102 = (v102 - 1) >> 1;
                          v103 = &v12[v102];
                        }
                        while (v103->n128_u64[0] < v104);
                        v98->n128_u64[0] = v104;
                        v98->n128_u64[1] = v105;
                      }
                    }
                  }
                  v84 = v95-- <= 2;
                }
                while (!v84);
                return result;
              }
            }
          }
          v15 = (unint64_t)v14 >> 1;
          v16 = &v12[(unint64_t)v14 >> 1];
          v17 = v9->n128_u64[0];
          if ((unint64_t)v13 < 0x801)
          {
            v19 = v12->n128_u64[0];
            if (v12->n128_u64[0] >= v16->n128_u64[0])
            {
              if (v17 < v19)
              {
                v116 = *v12;
                *v12 = *v9;
                result = v116;
                *v9 = v116;
                if (v12->n128_u64[0] < v16->n128_u64[0])
                {
                  v117 = *v16;
                  *v16 = *v12;
                  result = v117;
                  *v12 = v117;
                  --a3;
                  v20 = v12->n128_u64[0];
                  if ((a4 & 1) != 0)
                    goto LABEL_56;
                  goto LABEL_55;
                }
              }
              goto LABEL_31;
            }
            if (v17 >= v19)
            {
              v120 = *v16;
              *v16 = *v12;
              result = v120;
              *v12 = v120;
              if (v9->n128_u64[0] >= v12->n128_u64[0])
                goto LABEL_31;
              v113 = *v12;
              *v12 = *v9;
            }
            else
            {
              v113 = *v16;
              *v16 = *v9;
            }
            result = v113;
            *v9 = v113;
LABEL_31:
            --a3;
            v20 = v12->n128_u64[0];
            if ((a4 & 1) != 0)
              goto LABEL_56;
            goto LABEL_55;
          }
          v18 = v16->n128_u64[0];
          if (v16->n128_u64[0] >= v12->n128_u64[0])
          {
            if (v17 < v18)
            {
              v114 = *v16;
              *v16 = *v9;
              *v9 = v114;
              if (v16->n128_u64[0] < v12->n128_u64[0])
              {
                v115 = *v12;
                *v12 = *v16;
                *v16 = v115;
              }
            }
          }
          else
          {
            if (v17 >= v18)
            {
              v118 = *v12;
              *v12 = *v16;
              *v16 = v118;
              if (v9->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_22;
              v112 = *v16;
              *v16 = *v9;
            }
            else
            {
              v112 = *v12;
              *v12 = *v9;
            }
            *v9 = v112;
          }
LABEL_22:
          v21 = v12 + 1;
          v22 = &v12[v15];
          v25 = v22[-1].n128_u64[0];
          v23 = v22 - 1;
          v24 = v25;
          v26 = v10->n128_u64[0];
          if (v25 >= v12[1].n128_u64[0])
          {
            if (v26 < v24)
            {
              v119 = *v23;
              *v23 = *v10;
              *v10 = v119;
              if (v23->n128_u64[0] < v21->n128_u64[0])
              {
                v28 = *v21;
                *v21 = *v23;
                *v23 = v28;
              }
            }
          }
          else
          {
            if (v26 >= v24)
            {
              v29 = *v21;
              *v21 = *v23;
              *v23 = v29;
              if (v10->n128_u64[0] >= v23->n128_u64[0])
                goto LABEL_36;
              v121 = *v23;
              *v23 = *v10;
              v27 = v121;
            }
            else
            {
              v27 = *v21;
              *v21 = *v10;
            }
            *v10 = v27;
          }
LABEL_36:
          v30 = v12 + 2;
          v31 = &v12[v15];
          v34 = v31[1].n128_u64[0];
          v32 = v31 + 1;
          v33 = v34;
          v35 = v11->n128_u64[0];
          if (v34 >= v12[2].n128_u64[0])
          {
            if (v35 < v33)
            {
              v122 = *v32;
              *v32 = *v11;
              *v11 = v122;
              if (v32->n128_u64[0] < v30->n128_u64[0])
              {
                v37 = *v30;
                *v30 = *v32;
                *v32 = v37;
              }
            }
          }
          else
          {
            if (v35 >= v33)
            {
              v38 = *v30;
              *v30 = *v32;
              *v32 = v38;
              if (v11->n128_u64[0] >= v32->n128_u64[0])
                goto LABEL_45;
              v123 = *v32;
              *v32 = *v11;
              v36 = v123;
            }
            else
            {
              v36 = *v30;
              *v30 = *v11;
            }
            *v11 = v36;
          }
LABEL_45:
          v39 = v16->n128_u64[0];
          v40 = v32->n128_u64[0];
          if (v16->n128_u64[0] >= v23->n128_u64[0])
          {
            if (v40 < v39)
            {
              v125 = *v16;
              *v16 = *v32;
              *v32 = v125;
              if (v16->n128_u64[0] < v23->n128_u64[0])
              {
                v126 = *v23;
                *v23 = *v16;
                *v16 = v126;
              }
            }
          }
          else
          {
            if (v40 >= v39)
            {
              v127 = *v23;
              *v23 = *v16;
              *v16 = v127;
              if (v32->n128_u64[0] >= v16->n128_u64[0])
                goto LABEL_54;
              v124 = *v16;
              *v16 = *v32;
            }
            else
            {
              v124 = *v23;
              *v23 = *v32;
            }
            *v32 = v124;
          }
LABEL_54:
          v128 = *v12;
          *v12 = *v16;
          result = v128;
          *v16 = v128;
          --a3;
          v20 = v12->n128_u64[0];
          if ((a4 & 1) != 0)
            goto LABEL_56;
LABEL_55:
          if (v12[-1].n128_u64[0] >= v20)
          {
            if (v20 >= v9->n128_u64[0])
            {
              n128_u64 = (unint64_t)v12[1].n128_u64;
              do
              {
                v12 = (__n128 *)n128_u64;
                if (n128_u64 >= (unint64_t)a2)
                  break;
                n128_u64 += 16;
              }
              while (v20 >= v12->n128_u64[0]);
            }
            else
            {
              do
              {
                v54 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v20 >= v54);
            }
            v56 = a2;
            if (v12 < a2)
            {
              v56 = a2;
              do
              {
                v57 = v56[-1].n128_u64[0];
                --v56;
              }
              while (v20 < v57);
            }
            v58 = a1->n128_u64[1];
            while (v12 < v56)
            {
              v130 = *v12;
              *v12 = *v56;
              result = v130;
              *v56 = v130;
              do
              {
                v59 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v20 >= v59);
              do
              {
                v60 = v56[-1].n128_u64[0];
                --v56;
              }
              while (v20 < v60);
            }
            v61 = v12 - 1;
            if (&v12[-1] != a1)
            {
              result = *v61;
              *a1 = *v61;
            }
            a4 = 0;
            v12[-1].n128_u64[0] = v20;
            v12[-1].n128_u64[1] = v58;
            continue;
          }
LABEL_56:
          v41 = 0;
          v42 = v12->n128_u64[1];
          do
            v43 = v12[++v41].n128_u64[0];
          while (v43 < v20);
          v44 = &v12[v41];
          v45 = a2;
          if (v41 == 1)
          {
            v45 = a2;
            do
            {
              if (v44 >= v45)
                break;
              v47 = v45[-1].n128_u64[0];
              --v45;
            }
            while (v47 >= v20);
          }
          else
          {
            do
            {
              v46 = v45[-1].n128_u64[0];
              --v45;
            }
            while (v46 >= v20);
          }
          v12 = (__n128 *)((char *)v12 + v41 * 16);
          if (v44 < v45)
          {
            v48 = v45;
            do
            {
              v129 = *v12;
              *v12 = *v48;
              result = v129;
              *v48 = v129;
              do
              {
                v49 = v12[1].n128_u64[0];
                ++v12;
              }
              while (v49 < v20);
              do
              {
                v50 = v48[-1].n128_u64[0];
                --v48;
              }
              while (v50 >= v20);
            }
            while (v12 < v48);
          }
          v51 = v12 - 1;
          if (&v12[-1] != a1)
          {
            result = *v51;
            *a1 = *v51;
          }
          v12[-1].n128_u64[0] = v20;
          v12[-1].n128_u64[1] = v42;
          if (v44 < v45)
            goto LABEL_75;
          v52 = sub_1B0367978(a1, v12 - 1, result);
          if (!sub_1B0367978(v12, a2, v53))
          {
            if (v52)
              continue;
LABEL_75:
            sub_1B0366E1C(a1, &v12[-1], a3, a4 & 1);
            a4 = 0;
            continue;
          }
          a2 = v12 - 1;
          if (v52)
            return result;
          goto LABEL_1;
        }
        v71 = v12 + 1;
        v73 = v12 == a2 || v71 == a2;
        if ((a4 & 1) != 0)
        {
          if (v73)
            return result;
          v74 = 0;
          v75 = v12;
          while (1)
          {
            v77 = v71;
            v78 = v75[1].n128_u64[0];
            if (v78 < v75->n128_u64[0])
            {
              v79 = v75[1].n128_i64[1];
              v80 = v74;
              do
              {
                result = *(__n128 *)((char *)v12 + v80);
                *(__n128 *)((char *)v12 + v80 + 16) = result;
                if (!v80)
                {
                  v76 = v12;
                  goto LABEL_116;
                }
                v81 = *(unint64_t *)((char *)v12[-1].n128_u64 + v80);
                v80 -= 16;
              }
              while (v78 < v81);
              v76 = (__n128 *)((char *)v12 + v80 + 16);
LABEL_116:
              v76->n128_u64[0] = v78;
              v76->n128_u64[1] = v79;
            }
            v71 = v77 + 1;
            v74 += 16;
            v75 = v77;
            if (&v77[1] == a2)
              return result;
          }
        }
        if (!v73)
        {
          do
          {
            v107 = v71;
            v108 = a1[1].n128_u64[0];
            if (v108 < a1->n128_u64[0])
            {
              v109 = a1[1].n128_u64[1];
              v110 = v107;
              do
              {
                result = v110[-1];
                *v110 = result;
                v111 = v110[-2].n128_u64[0];
                --v110;
              }
              while (v108 < v111);
              v110->n128_u64[0] = v108;
              v110->n128_u64[1] = v109;
            }
            v71 = v107 + 1;
            a1 = v107;
          }
          while (&v107[1] != a2);
        }
        return result;
    }
  }
}

BOOL sub_1B0367978(__n128 *a1, __n128 *a2, __n128 a3)
{
  __n128 *v4;
  unint64_t v5;
  __n128 *v6;
  unint64_t v7;
  unint64_t v8;
  __n128 v9;
  __n128 *v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __n128 v16;
  unint64_t v17;
  __int128 *v18;
  unint64_t v19;
  __n128 *v20;
  unint64_t v21;
  __int128 v22;
  __n128 v23;
  __n128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __n128 v28;
  __n128 *v29;
  uint64_t v30;
  int v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __n128 v39;
  __int128 v40;
  __int128 v41;

  switch(a2 - a1)
  {
    case 0:
    case 1:
      return 1;
    case 2:
      v11 = a2[-1].n128_u64[0];
      v10 = a2 - 1;
      if (v11 < a1->n128_u64[0])
        goto LABEL_10;
      return 1;
    case 3:
      v12 = (__int128 *)&a1[1];
      v13 = a1[1].n128_u64[0];
      v15 = a2[-1].n128_u64[0];
      v10 = a2 - 1;
      v14 = v15;
      if (v13 >= a1->n128_u64[0])
      {
        if (v14 < v13)
        {
          v25 = *v12;
          *v12 = (__int128)*v10;
          *v10 = (__n128)v25;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
          {
LABEL_46:
            v41 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v41;
            return 1;
          }
        }
      }
      else
      {
        if (v14 < v13)
        {
LABEL_10:
          v16 = *a1;
          *a1 = *v10;
LABEL_11:
          *v10 = v16;
          return 1;
        }
        v37 = (__int128)*a1;
        *a1 = (__n128)*v12;
        *v12 = v37;
        if (v10->n128_u64[0] < a1[1].n128_u64[0])
        {
          v16 = (__n128)*v12;
          *v12 = (__int128)*v10;
          goto LABEL_11;
        }
      }
      return 1;
    case 4:
      v12 = (__int128 *)&a1[1];
      v17 = a1[1].n128_u64[0];
      v18 = (__int128 *)&a1[2];
      v19 = a1[2].n128_u64[0];
      v20 = a2 - 1;
      v21 = a1->n128_u64[0];
      if (v17 >= a1->n128_u64[0])
      {
        if (v19 < v17)
        {
          v26 = *v12;
          *v12 = *v18;
          *v18 = v26;
          if (*(_QWORD *)v12 < v21)
          {
            v27 = (__int128)*a1;
            *a1 = (__n128)*v12;
            *v12 = v27;
          }
        }
      }
      else
      {
        if (v19 >= v17)
        {
          v38 = (__int128)*a1;
          *a1 = (__n128)*v12;
          *v12 = v38;
          if (v19 >= a1[1].n128_u64[0])
            goto LABEL_43;
          v22 = *v12;
          *v12 = *v18;
        }
        else
        {
          v22 = (__int128)*a1;
          *a1 = (__n128)*v18;
        }
        *v18 = v22;
      }
LABEL_43:
      if (v20->n128_u64[0] < *(_QWORD *)v18)
      {
        v39 = (__n128)*v18;
        *v18 = (__int128)*v20;
        *v20 = v39;
        if (*(_QWORD *)v18 < *(_QWORD *)v12)
        {
          v40 = *v12;
          *v12 = *v18;
          *v18 = v40;
          if (a1[1].n128_u64[0] < a1->n128_u64[0])
            goto LABEL_46;
        }
      }
      return 1;
    case 5:
      sub_1B0367D28(a1, a1 + 1, a1[2].n128_u64, (__n128 *)a1[3].n128_u64, (__n128 *)a2[-1].n128_u64, a3);
      return 1;
    default:
      v4 = a1 + 2;
      v5 = a1[2].n128_u64[0];
      v6 = a1 + 1;
      v7 = a1[1].n128_u64[0];
      v8 = a1->n128_u64[0];
      if (v7 >= a1->n128_u64[0])
      {
        if (v5 < v7)
        {
          v23 = *v6;
          *v6 = *v4;
          *v4 = v23;
          if (v6->n128_u64[0] < v8)
          {
            v24 = *a1;
            *a1 = *v6;
            *v6 = v24;
          }
        }
      }
      else
      {
        if (v5 >= v7)
        {
          v28 = *a1;
          *a1 = *v6;
          *v6 = v28;
          if (v5 >= a1[1].n128_u64[0])
            goto LABEL_28;
          v9 = *v6;
          *v6 = *v4;
        }
        else
        {
          v9 = *a1;
          *a1 = *v4;
        }
        *v4 = v9;
      }
LABEL_28:
      v29 = a1 + 3;
      if (&a1[3] == a2)
        return 1;
      v30 = 0;
      v31 = 0;
      while (1)
      {
        v32 = v29->n128_u64[0];
        if (v29->n128_u64[0] < v4->n128_u64[0])
          break;
LABEL_31:
        v4 = v29;
        v30 += 16;
        if (++v29 == a2)
          return 1;
      }
      v33 = v29->n128_i64[1];
      v34 = v30;
      do
      {
        *(__n128 *)((char *)a1 + v34 + 48) = *(__n128 *)((char *)a1 + v34 + 32);
        if (v34 == -32)
        {
          a1->n128_u64[0] = v32;
          a1->n128_u64[1] = v33;
          if (++v31 != 8)
            goto LABEL_31;
          return &v29[1] == a2;
        }
        v35 = *(unint64_t *)((char *)a1[1].n128_u64 + v34);
        v34 -= 16;
      }
      while (v32 < v35);
      v36 = (uint64_t)a1 + v34;
      *(_QWORD *)(v36 + 48) = v32;
      *(_QWORD *)(v36 + 56) = v33;
      if (++v31 != 8)
        goto LABEL_31;
      return &v29[1] == a2;
  }
}

__n128 sub_1B0367D28(__n128 *a1, __n128 *a2, unint64_t *a3, _OWORD *a4, _OWORD *a5, __n128 result)
{
  unint64_t v6;
  unint64_t v7;

  v6 = a2->n128_u64[0];
  v7 = *a3;
  if (a2->n128_u64[0] >= a1->n128_u64[0])
  {
    if (v7 < v6)
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  else
  {
    if (v7 < v6)
    {
      result = *a1;
      *a1 = *(__n128 *)a3;
LABEL_9:
      *(__n128 *)a3 = result;
      goto LABEL_10;
    }
    result = *a1;
    *a1 = *a2;
    *a2 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      goto LABEL_9;
    }
  }
LABEL_10:
  if (*(_QWORD *)a4 < *a3)
  {
    result = *(__n128 *)a3;
    *(_OWORD *)a3 = *a4;
    *a4 = result;
    if (*a3 < a2->n128_u64[0])
    {
      result = *a2;
      *a2 = *(__n128 *)a3;
      *(__n128 *)a3 = result;
      if (a2->n128_u64[0] < a1->n128_u64[0])
      {
        result = *a1;
        *a1 = *a2;
        *a2 = result;
      }
    }
  }
  if (*(_QWORD *)a5 < *(_QWORD *)a4)
  {
    result = *(__n128 *)a4;
    *a4 = *a5;
    *a5 = result;
    if (*(_QWORD *)a4 < *a3)
    {
      result = *(__n128 *)a3;
      *(_OWORD *)a3 = *a4;
      *a4 = result;
      if (*a3 < a2->n128_u64[0])
      {
        result = *a2;
        *a2 = *(__n128 *)a3;
        *(__n128 *)a3 = result;
        if (a2->n128_u64[0] < a1->n128_u64[0])
        {
          result = *a1;
          *a1 = *a2;
          *a2 = result;
        }
      }
    }
  }
  return result;
}

const void **sub_1B0367EAC(uint64_t a1, const void **a2)
{
  const void **v2;
  unint64_t v3;
  int v4;
  size_t v5;
  const void *v6;
  const void **v7;
  const void **v8;
  int v9;
  size_t v10;
  const void *v11;
  size_t v12;
  int v13;
  BOOL v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  _BOOL4 v20;

  v2 = (const void **)a1;
  v3 = *(_QWORD *)(a1 + 32) & 0xFFFFFFFFFFFFFFFELL;
  if (v3)
  {
    v4 = *((char *)a2 + 23);
    if (v4 >= 0)
      v5 = *((unsigned __int8 *)a2 + 23);
    else
      v5 = (size_t)a2[1];
    if (v4 >= 0)
      v6 = a2;
    else
      v6 = *a2;
    v7 = (const void **)a1;
    do
    {
      while (1)
      {
        v8 = (const void **)(v3 - 32);
        v9 = *(char *)(v3 - 9);
        if (v9 >= 0)
          v10 = *(unsigned __int8 *)(v3 - 9);
        else
          v10 = *(_QWORD *)(v3 - 24);
        if (v9 >= 0)
          v11 = (const void *)(v3 - 32);
        else
          v11 = *(const void **)(v3 - 32);
        if (v5 >= v10)
          v12 = v10;
        else
          v12 = v5;
        v13 = memcmp(v11, v6, v12);
        v14 = v10 < v5;
        if (v13)
          v14 = v13 < 0;
        if (v14)
          break;
        v3 = *(_QWORD *)(v3 + 8);
        v7 = v8;
        if (!v3)
          goto LABEL_24;
      }
      v3 = *(_QWORD *)(v3 + 16);
    }
    while (v3);
    v8 = v7;
LABEL_24:
    if (v8 != v2)
    {
      v15 = *((char *)v8 + 23);
      if (v15 >= 0)
        v16 = *((unsigned __int8 *)v8 + 23);
      else
        v16 = (size_t)v8[1];
      if (v15 >= 0)
        v17 = v8;
      else
        v17 = *v8;
      if (v16 >= v5)
        v18 = v5;
      else
        v18 = v16;
      v19 = memcmp(v6, v17, v18);
      v20 = v5 < v16;
      if (v19)
        v20 = v19 < 0;
      if (!v20)
        return v8;
    }
  }
  return v2;
}

uint64_t sub_1B0367FC0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12[8];
  void *__p[2];
  __int128 v14;
  int v15;
  uint64_t v16[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16[0] = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v6;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v8, v12);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v11 = v3 + 24;
  v16[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  v15 = 16;
  sub_1B02D7994(&v11, (uint64_t)"OutOfVocabularyError: ", 22);
  sub_1B02D7994(&v11, *a2, a2[1]);
  std::stringbuf::str();
  v11 = *v5;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = v5[3];
  v12[0] = v9 + 16;
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v16);
}

void sub_1B036810C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0368120(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

void sub_1B0368168(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E60CCD88;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B03681B8(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_1B03681D4(const std::logic_error *a1)
{
  void *exception;
  void *v3;

  exception = __cxa_allocate_exception(0x40uLL);
  v3 = (void *)sub_1B0368208((uint64_t)exception, a1);
  __cxa_throw(v3, (struct type_info *)&unk_1E60CAF78, (void (*)(void *))sub_1B036825C);
}

uint64_t sub_1B0368208(uint64_t a1, const std::logic_error *a2)
{
  *(_QWORD *)a1 = &unk_1E60CCB58;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), a2);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = -1;
  *(_QWORD *)a1 = &off_1E60CCAE0;
  *(_QWORD *)(a1 + 8) = &unk_1E60CCB10;
  *(_QWORD *)(a1 + 24) = &unk_1E60CCB38;
  *(_QWORD *)(a1 + 32) = 0;
  return a1;
}

uint64_t sub_1B036825C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E60CCB88;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x1B5E0793C](a1 + 8);
  return a1;
}

uint64_t sub_1B03682B0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;

  v2 = operator new();
  *(_QWORD *)v2 = &unk_1E60CCB58;
  std::logic_error::logic_error((std::logic_error *)(v2 + 8), (const std::logic_error *)(a1 + 8));
  *(_QWORD *)(v2 + 8) = MEMORY[0x1E0DE5028] + 16;
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(v2 + 24) = &unk_1E60CCB88;
  *(_QWORD *)(v2 + 32) = v3;
  if (!v3)
  {
    v5 = 0;
    *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
    *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
    *(_QWORD *)v2 = &off_1E60CCAE0;
    *(_QWORD *)(v2 + 8) = &unk_1E60CCB10;
    *(_QWORD *)(v2 + 24) = &unk_1E60CCB38;
    goto LABEL_7;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v3 + 24))(v3);
  v4 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  *(_QWORD *)v2 = &off_1E60CCAE0;
  *(_QWORD *)(v2 + 8) = &unk_1E60CCB10;
  *(_QWORD *)(v2 + 24) = &unk_1E60CCB38;
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 40))(&v10);
    v5 = v10;
    if (v10)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
      if (v10)
        (*(void (**)(uint64_t))(*(_QWORD *)v10 + 32))(v10);
    }
LABEL_7:
    *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
    v6 = *(_QWORD *)(a1 + 48);
    *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(v2 + 48) = v6;
    v7 = *(_QWORD *)(v2 + 32);
    if (!v7)
      goto LABEL_9;
    goto LABEL_8;
  }
  v5 = 0;
  *(_DWORD *)(v2 + 56) = *(_DWORD *)(a1 + 56);
  v9 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(v2 + 40) = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 48) = v9;
  v7 = *(_QWORD *)(v2 + 32);
  if (v7)
LABEL_8:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 32))(v7);
LABEL_9:
  *(_QWORD *)(v2 + 32) = v5;
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 32))(v5);
  }
  return v2;
}

void sub_1B0368454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  uint64_t v11;

  if (a10)
    (*(void (**)(uint64_t))(*(_QWORD *)a10 + 32))(a10);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 32))(v11);
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
  _Unwind_Resume(a1);
}

void sub_1B03684E4(uint64_t a1)
{
  void *exception;

  exception = __cxa_allocate_exception(0x40uLL);
  sub_1B0368708((uint64_t)exception, a1);
  __cxa_throw(exception, (struct type_info *)&unk_1E60CAF78, (void (*)(void *))sub_1B036825C);
}

void sub_1B0368520(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0368534(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 24) = &unk_1E60CCB88;
  v2 = *(_QWORD *)(a1 + 32);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 32) = 0;
  MEMORY[0x1B5E0793C](a1 + 8);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0368598(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_1E60CCB88;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      *(_QWORD *)(a1 + 24) = 0;
  }
  JUMPOUT(0x1B5E0793CLL);
}

void sub_1B03685E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)(a1 + 16) = &unk_1E60CCB88;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    *(_QWORD *)(a1 + 24) = 0;
  MEMORY[0x1B5E0793C](a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B036864C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E60CCB88;
  v2 = a1[1];
  if (v2)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
      a1[1] = 0;
  }
  JUMPOUT(0x1B5E0793CLL);
}

void sub_1B0368698(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_1E60CCB88;
  v2 = a1[1];
  if (v2 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2))
    a1[1] = 0;
  MEMORY[0x1B5E0793C](a1 - 2);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0368708(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 v5;

  *(_QWORD *)a1 = &unk_1E60CCB58;
  std::logic_error::logic_error((std::logic_error *)(a1 + 8), (const std::logic_error *)(a2 + 8));
  *(_QWORD *)(a1 + 8) = MEMORY[0x1E0DE5028] + 16;
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = &unk_1E60CCB88;
  *(_QWORD *)(a1 + 32) = v4;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  v5 = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_QWORD *)a1 = &off_1E60CCAE0;
  *(_QWORD *)(a1 + 8) = &unk_1E60CCB10;
  *(_QWORD *)(a1 + 24) = &unk_1E60CCB38;
  return a1;
}

uint64_t sub_1B03687BC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)a1 = &off_1E60CCCE8;
  v2 = *(_QWORD *)(a1 + 176);
  *(_QWORD *)(a1 + 176) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_1B0368888(*(_QWORD *)(a1 + 152));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 104) + 56);
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0)
    v4 = (v3 & 0xFFFFFFFFFFFFFFFELL) - 56;
  else
    v4 = 0;
  sub_1B036694C(v4);
  operator delete(*(void **)(a1 + 104));
  *(_QWORD *)a1 = off_1E60CCC48;
  if ((*(char *)(a1 + 79) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_11:
    operator delete(*(void **)(a1 + 32));
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      return a1;
    goto LABEL_12;
  }
  operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_11;
LABEL_8:
  if ((*(char *)(a1 + 31) & 0x80000000) == 0)
    return a1;
LABEL_12:
  operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1B0368888(uint64_t a1)
{
  if (a1)
  {
    sub_1B0368888(*(_QWORD *)a1);
    sub_1B0368888(*(_QWORD *)(a1 + 8));
    if (*(char *)(a1 + 79) < 0)
    {
      operator delete(*(void **)(a1 + 56));
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
    }
    else if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_4:
      operator delete((void *)a1);
      return;
    }
    operator delete(*(void **)(a1 + 32));
    operator delete((void *)a1);
  }
}

uint64_t sub_1B03688F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  uint64_t v8;

  v4 = a2 + 8;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B02EB0A8(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)a1 = &unk_1E60CCEC0;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B02EB0A8(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v8 = *(_QWORD *)(v4 + 16);
  }
  v5 = operator new();
  sub_1B032A4B4(v5);
  *(_QWORD *)(a1 + 32) = v5;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_1B03689F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if ((*(char *)(v14 + 31) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)(v14 + 8));
  _Unwind_Resume(exception_object);
}

void sub_1B0368A6C()
{
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0368A80(std::string::value_type *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (a2)
  {
    v4 = a2;
    do
    {
      std::string::push_back(&v6, *a1++);
      --v4;
    }
    while (v4);
  }
  sub_1B0368B98((uint64_t)&v6, a3);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1B0368B08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B0368B28(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  void *__p;
  char v3;

  v3 = 0;
  LOBYTE(__p) = 0;
  sub_1B0368EE8(a1, (uint64_t)&__p, a2);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1B0368B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B0368B98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  const UInt8 *v4;
  CFIndex v5;
  __CFString *v6;
  __CFString *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  id v12;
  void *v13;
  char *v14;
  __int128 v15;
  CFTypeRef v16;
  __int128 *v17;
  char *v18;
  void *v19;
  std::runtime_error *v20;
  std::runtime_error *exception;
  CFTypeRef cf;
  CFTypeRef *p_cf;
  void *__p[2];
  uint64_t v25;
  __int128 v26;
  void *v27;
  char *v28;
  unint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v3 = *(char *)(a1 + 23);
  if (v3 >= 0)
    v4 = (const UInt8 *)a1;
  else
    v4 = *(const UInt8 **)a1;
  if (v3 >= 0)
    v5 = *(unsigned __int8 *)(a1 + 23);
  else
    v5 = *(_QWORD *)(a1 + 8);
  v6 = (__CFString *)CFStringCreateWithBytes(0, v4, v5, 0x8000100u, 0);
  if (!v6)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v7 = v6;
  CFRelease(v7);
  v11 = 0;
  v26 = xmmword_1B03AFE70;
  while (v11 < objc_msgSend_length(v7, v8, v9, v10))
  {
    sub_1B0361318(v7, v11, (uint64_t *)&v26);
    v12 = (id)objc_claimAutoreleasedReturnValue();
    v13 = v12;
    if (v12)
      CFRetain(v12);
    sub_1B034AC30(&cf, v13);

    if (!cf)
    {
      v20 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v20, "Could not construct");
      __cxa_throw(v20, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
    p_cf = &cf;
    sub_1B034AB60((const __CFString ***)&p_cf, __p);
    v14 = v28;
    if ((unint64_t)v28 >= v29)
    {
      v28 = sub_1B0318CBC(&v27, (uint64_t)__p);
      if ((SHIBYTE(v25) & 0x80000000) == 0)
      {
        v16 = cf;
        if (!cf)
          goto LABEL_9;
LABEL_19:
        CFRelease(v16);
        goto LABEL_9;
      }
      operator delete(__p[0]);
      v16 = cf;
      if (cf)
        goto LABEL_19;
    }
    else
    {
      v15 = *(_OWORD *)__p;
      *((_QWORD *)v28 + 2) = v25;
      *(_OWORD *)v14 = v15;
      __p[1] = 0;
      v25 = 0;
      __p[0] = 0;
      v28 = v14 + 24;
      v16 = cf;
      if (cf)
        goto LABEL_19;
    }
LABEL_9:

    v11 += *((_QWORD *)&v26 + 1);
  }
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  sub_1B02EB2B0((char *)a2, (__int128 *)v27, (__int128 *)v28, 0xAAAAAAAAAAAAAAABLL * ((v28 - (_BYTE *)v27) >> 3));

  v17 = (__int128 *)v27;
  if (v27)
  {
    v18 = v28;
    v19 = v27;
    if (v28 != v27)
    {
      do
      {
        if (*(v18 - 1) < 0)
          operator delete(*((void **)v18 - 3));
        v18 -= 24;
      }
      while (v18 != (char *)v17);
      v19 = v27;
    }
    v28 = (char *)v17;
    operator delete(v19);
  }
}

void sub_1B0368DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0368DF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  void *v18;

  __cxa_free_exception(v18);
  sub_1B031724C(&a18);
  _Unwind_Resume(a1);
}

void sub_1B0368E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0368E2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0368E40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  void *v21;
  void *v22;

  if (a17 < 0)
    operator delete(__p);
  sub_1B034ABF0(&a10);

  sub_1B031724C(&a21);
  _Unwind_Resume(a1);
}

void sub_1B0368EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0368ED0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  void *v10;
  va_list va;

  va_start(va, a10);

  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0368EE8@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  size_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  void **v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  void *v35[2];
  unsigned __int8 v36;
  uint64_t v37;
  uint64_t v38[8];
  void *__p[2];
  __int128 v40;
  int v41;
  uint64_t v42[19];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v42[0] = MEMORY[0x1E0DE4FE0] + 64;
  v37 = v9;
  *(uint64_t *)((char *)&v38[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24));
  std::ios_base::init(v11, v38);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v37 = v6 + 24;
  v42[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v38[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v40 = 0u;
  v41 = 16;
  v13 = *a1;
  v14 = a1[1];
  v15 = 0xAAAAAAAAAAAAAAABLL * ((v14 - *a1) >> 3);
  if (v15 == 1)
  {
    v16 = *(char *)(v13 + 23);
    if (v16 >= 0)
      v17 = *a1;
    else
      v17 = *(_QWORD *)v13;
    if (v16 >= 0)
      v18 = *(unsigned __int8 *)(v13 + 23);
    else
      v18 = *(_QWORD *)(v13 + 8);
    sub_1B02D7994(&v37, v17, v18);
    std::stringbuf::str();
    goto LABEL_42;
  }
  if (!v15)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    goto LABEL_42;
  }
  if (*(char *)(a2 + 23) >= 0)
    v19 = (const char *)a2;
  else
    v19 = *(const char **)a2;
  if (v13 != v14)
  {
    if (v19)
    {
      do
      {
        v20 = *(char *)(v13 + 23);
        if (v20 >= 0)
          v21 = v13;
        else
          v21 = *(_QWORD *)v13;
        if (v20 >= 0)
          v22 = *(unsigned __int8 *)(v13 + 23);
        else
          v22 = *(_QWORD *)(v13 + 8);
        sub_1B02D7994(&v37, v21, v22);
        v23 = strlen(v19);
        sub_1B02D7994(&v37, (uint64_t)v19, v23);
        v13 += 24;
      }
      while (v13 != v14);
    }
    else
    {
      do
      {
        v24 = *(char *)(v13 + 23);
        if (v24 >= 0)
          v25 = v13;
        else
          v25 = *(_QWORD *)v13;
        if (v24 >= 0)
          v26 = *(unsigned __int8 *)(v13 + 23);
        else
          v26 = *(_QWORD *)(v13 + 8);
        sub_1B02D7994(&v37, v25, v26);
        v13 += 24;
      }
      while (v13 != v14);
    }
  }
  v27 = v35;
  std::stringbuf::str();
  v28 = v36;
  v29 = *(unsigned __int8 *)(a2 + 23);
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(a2 + 8);
  if ((v36 & 0x80u) != 0)
  {
    v28 = (size_t)v35[1];
    v27 = (void **)v35[0];
  }
  if (v28 >= v28 - v29)
    v30 = v28 - v29;
  else
    v30 = v28;
  if (v30 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  if (v30 >= 0x17)
  {
    v32 = (v30 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v30 | 7) != 0x17)
      v32 = v30 | 7;
    v33 = v32 + 1;
    v34 = operator new(v32 + 1);
    a3[1] = v30;
    a3[2] = v33 | 0x8000000000000000;
    *a3 = v34;
    a3 = v34;
LABEL_48:
    memmove(a3, v27, v30);
    *((_BYTE *)a3 + v30) = 0;
    if (((char)v36 & 0x80000000) == 0)
      goto LABEL_42;
    goto LABEL_49;
  }
  *((_BYTE *)a3 + 23) = v30;
  if (v30)
    goto LABEL_48;
  *(_BYTE *)a3 = 0;
  if (((char)v36 & 0x80000000) == 0)
    goto LABEL_42;
LABEL_49:
  operator delete(v35[0]);
LABEL_42:
  v37 = *v8;
  *(uint64_t *)((char *)&v38[-1] + *(_QWORD *)(v37 - 24)) = v8[3];
  v38[0] = v12 + 16;
  if (SBYTE7(v40) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v42);
}

void sub_1B03691D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_1B02E983C((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void sub_1B0369250()
{
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B0369264(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  std::string::value_type **v4;
  std::string::value_type **v5;
  __int128 *v6;
  __int128 v7;
  int v8;
  std::string::value_type *v9;
  std::string::value_type *v10;
  unint64_t v11;
  char *v12;
  int v13;
  void **v14;
  __int128 *v15;
  void *v16;
  void *__p;
  std::string::value_type **v18;
  uint64_t v19;
  void *v20;
  __int128 *v21;
  std::string v22;

  sub_1B03188A8(a1, a2, " ", 1, (uint64_t)&v20);
  __p = 0;
  v18 = 0;
  v19 = 0;
  sub_1B02EB2B0((char *)&__p, (__int128 *)v20, v21, 0xAAAAAAAAAAAAAAABLL * (((char *)v21 - (_BYTE *)v20) >> 3));
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v4 = (std::string::value_type **)__p;
  v5 = v18;
  if (__p == v18)
  {
    if (__p)
      goto LABEL_16;
LABEL_3:
    v6 = (__int128 *)v20;
    if (!v20)
      return;
    goto LABEL_23;
  }
  do
  {
    v8 = *((char *)v4 + 23);
    if (v8 < 0)
    {
      v10 = *v4;
      v9 = v4[1];
      memset(&v22, 0, sizeof(v22));
      if (!v9)
        goto LABEL_10;
    }
    else
    {
      v9 = (std::string::value_type *)*((unsigned __int8 *)v4 + 23);
      v10 = (std::string::value_type *)v4;
      memset(&v22, 0, sizeof(v22));
      if (!(_BYTE)v8)
        goto LABEL_10;
    }
    do
    {
      std::string::push_back(&v22, *v10++);
      --v9;
    }
    while (v9);
LABEL_10:
    v11 = *(_QWORD *)(a3 + 8);
    if (v11 < *(_QWORD *)(a3 + 16))
    {
      v7 = *(_OWORD *)&v22.__r_.__value_.__l.__data_;
      *(_QWORD *)(v11 + 16) = *((_QWORD *)&v22.__r_.__value_.__l + 2);
      *(_OWORD *)v11 = v7;
      *(_QWORD *)(a3 + 8) = v11 + 24;
    }
    else
    {
      v12 = sub_1B0318CBC((void **)a3, (uint64_t)&v22);
      v13 = SHIBYTE(v22.__r_.__value_.__r.__words[2]);
      *(_QWORD *)(a3 + 8) = v12;
      if (v13 < 0)
        operator delete(v22.__r_.__value_.__l.__data_);
    }
    v4 += 3;
  }
  while (v4 != v5);
  v4 = (std::string::value_type **)__p;
  if (!__p)
    goto LABEL_3;
LABEL_16:
  v14 = (void **)v18;
  if (v18 == v4)
  {
    v18 = v4;
    operator delete(v4);
    v6 = (__int128 *)v20;
    if (!v20)
      return;
LABEL_23:
    v15 = v21;
    v16 = v6;
    if (v21 != v6)
    {
      do
      {
        if (*((char *)v15 - 1) < 0)
          operator delete(*((void **)v15 - 3));
        v15 = (__int128 *)((char *)v15 - 24);
      }
      while (v15 != v6);
      v16 = v20;
    }
    v21 = v6;
    operator delete(v16);
  }
  else
  {
    do
    {
      if (*((char *)v14 - 1) < 0)
        operator delete(*(v14 - 3));
      v14 -= 3;
    }
    while (v14 != (void **)v4);
    v18 = v4;
    operator delete(__p);
    v6 = (__int128 *)v20;
    if (v20)
      goto LABEL_23;
  }
}

void sub_1B0369450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0369464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void **v21;

  if (a21 < 0)
    operator delete(__p);
  sub_1B031724C(v21);
  sub_1B031724C(&a10);
  sub_1B031724C(&a13);
  _Unwind_Resume(a1);
}

void sub_1B036949C(uint64_t *a1@<X1>, _QWORD *a2@<X8>)
{
  void *__p;
  char v3;

  v3 = 1;
  LOWORD(__p) = 32;
  sub_1B0368EE8(a1, (uint64_t)&__p, a2);
  if (v3 < 0)
    operator delete(__p);
}

void sub_1B03694F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B03697F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  void *v30;
  void *v31;
  uint64_t v32;
  void *v34;
  NSObject *v35;
  uint64_t v36;

  if (a2 == 1)
  {
    v34 = __cxa_begin_catch(a1);
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v35 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v34 + 16))(v34);
      *(_DWORD *)(v32 - 80) = 136315138;
      *(_QWORD *)(v32 - 76) = v36;
      _os_log_error_impl(&dword_1B02D2000, v35, OS_LOG_TYPE_ERROR, "[CVNLPTokenIDConverter] Failed to load token id resources: %s", (uint8_t *)(v32 - 80), 0xCu);
    }

    __cxa_end_catch();
    if (a22 < 0)
      operator delete(__p);
    JUMPOUT(0x1B03697B8);
  }
  if (a22 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1B0369B0C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0369C0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0369C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;
  void *v12;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1B036A058(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B036A07C(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_1B036A094(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x80000001B03B11D8)
    return a1 + 24;
  if (((v3 & 0x80000001B03B11D8 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x80000001B03B11D8))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x80000001B03B11D8 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

void sub_1B036A1B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036A43C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A44C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A538(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A548(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A558(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A5A0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A5F0(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  int v25;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  v6 = v5;
  if (a2 <= (v4 - (uint64_t)v5) >> 2)
  {
    if (a2)
    {
      bzero(v5, 4 * a2);
      v6 = &v5[4 * a2];
    }
    *(_QWORD *)(a1 + 8) = v6;
  }
  else
  {
    v7 = *(char **)a1;
    v8 = (uint64_t)&v5[-*(_QWORD *)a1];
    v9 = v8 >> 2;
    v10 = (v8 >> 2) + a2;
    if (v10 >> 62)
      sub_1B02D7758();
    v11 = v4 - (_QWORD)v7;
    if (v11 >> 1 > v10)
      v10 = v11 >> 1;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL)
      v12 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 62)
        sub_1B02D72AC();
      v13 = operator new(4 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[4 * v9];
    v15 = 4 * a2;
    v16 = &v13[4 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 4;
      if (v18 < 0x2C)
        goto LABEL_29;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_29;
      v19 = (v18 >> 2) + 1;
      v20 = 4 * (v19 & 0x7FFFFFFFFFFFFFF8);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[4 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 8;
      }
      while (v23);
      if (v19 != (v19 & 0x7FFFFFFFFFFFFFF8))
      {
LABEL_29:
        do
        {
          v25 = *((_DWORD *)v6 - 1);
          v6 -= 4;
          *((_DWORD *)v14 - 1) = v25;
          v14 -= 4;
        }
        while (v6 != v7);
      }
    }
    *(_QWORD *)a1 = v14;
    *(_QWORD *)(a1 + 8) = v17;
    *(_QWORD *)(a1 + 16) = v16;
    if (v7)
      operator delete(v7);
  }
}

void sub_1B036A7FC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A884(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036A9E4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B036AAE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036AAFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B036AB14(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036AEA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B036AF08(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B036AFC8(unsigned int a1, uint64_t a2)
{
  NSObject *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  void *v12;
  const char *v13;
  id v14;
  __CFString *v15;
  uint64_t v16;
  uint8_t buf[4];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  if (qword_1EEEB2D38 != -1)
    dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
  v4 = (id)qword_1EEEB2D30;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136315138;
    v18 = a2;
    _os_log_error_impl(&dword_1B02D2000, v4, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
  }

  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v5, (uint64_t)CVNLPCationErrorDomain, a1, 0);
  v6 = objc_claimAutoreleasedReturnValue();
  v7 = (void *)MEMORY[0x1E0C99DA0];
  objc_msgSend_stringWithUTF8String_(MEMORY[0x1E0CB3940], v8, a2, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  v15 = off_1EEEB1C88;
  v16 = v6;
  objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E0C99D80], v11, (uint64_t)&v16, (uint64_t)&v15, 1);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_exceptionWithName_reason_userInfo_(v7, v13, *MEMORY[0x1E0C99768], (uint64_t)v10, v12);
  v14 = (id)objc_claimAutoreleasedReturnValue();

  objc_exception_throw(v14);
}

void sub_1B036B120(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

uint64_t sub_1B036B14C(uint64_t a1, void *a2)
{
  id v4;
  void *v5;
  CVNLPPerformance *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  CVNLPCaptionRuntimeParameters *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  CVNLPCaptionPostProcessingHandler *v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  NSObject *v20;
  dispatch_queue_t v21;
  void *v22;
  NSObject *v23;
  dispatch_queue_t v24;
  void *v25;
  void *v26;
  const char *v27;
  _QWORD v29[5];

  v4 = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = (void *)MEMORY[0x1B5E08128]();
  objc_storeStrong((id *)(a1 + 32), a2);
  v6 = [CVNLPPerformance alloc];
  v9 = objc_msgSend_initWithOptions_(v6, v7, (uint64_t)v4, v8);
  v10 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v9;

  v11 = [CVNLPCaptionRuntimeParameters alloc];
  v14 = objc_msgSend_initWithOptions_(v11, v12, *(_QWORD *)(a1 + 32), v13);
  v15 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = v14;

  v16 = [CVNLPCaptionPostProcessingHandler alloc];
  v18 = objc_msgSend_initWithOptions_runtimeParameters_(v16, v17, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48));
  v19 = *(void **)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v18;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  v20 = objc_claimAutoreleasedReturnValue();
  v21 = dispatch_queue_create("caption_queue", v20);
  v22 = *(void **)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v21;

  dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INTERACTIVE, 0);
  v23 = objc_claimAutoreleasedReturnValue();
  v24 = dispatch_queue_create("classify_queue", v23);
  v25 = *(void **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v24;

  v26 = *(void **)(a1 + 40);
  v29[0] = MEMORY[0x1E0C809B0];
  v29[1] = 3221225472;
  v29[2] = sub_1B036B33C;
  v29[3] = &unk_1E60CDFF8;
  v29[4] = a1;
  objc_msgSend_run_block_(v26, v27, (uint64_t)CFSTR("Create"), (uint64_t)v29);
  objc_autoreleasePoolPop(v5);

  return a1;
}

void sub_1B036B2DC(_Unwind_Exception *a1)
{
  void *v1;
  id *v2;

  _Unwind_Resume(a1);
}

void sub_1B036B33C(uint64_t a1)
{
  uint64_t v1;
  CVNLPVisionRequestHandler *v2;
  const char *v3;
  uint64_t v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  CVNLPCaptionEncoderLSTM *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  CVNLPCaptionDecoderLSTM *v14;
  const char *v15;
  uint64_t v16;
  CVNLPCaptionEncoderTransformer *v17;
  const char *v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;

  v1 = *(_QWORD *)(a1 + 32);
  v2 = [CVNLPVisionRequestHandler alloc];
  v4 = objc_msgSend_initWithOptions_runTimeParams_(v2, v3, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48));
  v5 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v4;

  objc_msgSend_objectForKeyedSubscript_(*(void **)(v1 + 32), v6, (uint64_t)CVNLPCaptionModelType, v7);
  v22 = (id)objc_claimAutoreleasedReturnValue();
  if (objc_msgSend_isEqualToString_(v22, v8, (uint64_t)CVNLPCaptionModelLSTM, v9))
  {
    v10 = [CVNLPCaptionEncoderLSTM alloc];
    v12 = objc_msgSend_initWithOptions_runTimeParams_(v10, v11, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48));
    v13 = *(void **)v1;
    *(_QWORD *)v1 = v12;

    v14 = [CVNLPCaptionDecoderLSTM alloc];
  }
  else
  {
    v17 = [CVNLPCaptionEncoderTransformer alloc];
    v19 = objc_msgSend_initWithOptions_runTimeParams_(v17, v18, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48));
    v20 = *(void **)v1;
    *(_QWORD *)v1 = v19;

    v14 = [CVNLPCaptionDecoderTransformer alloc];
  }
  v16 = objc_msgSend_initWithOptions_runTimeParams_(v14, v15, *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 48));
  v21 = *(void **)(v1 + 8);
  *(_QWORD *)(v1 + 8) = v16;

}

void sub_1B036B440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1B036B458(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  id v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_1B036B538;
  v11 = sub_1B036B548;
  v12 = 0;
  v3 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1B036B550;
  v6[3] = &unk_1E60CE020;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  objc_msgSend_run_block_(v3, a2, (uint64_t)CFSTR("Total"), (uint64_t)v6);
  v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1B036B518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1B036B538(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B036B548(uint64_t a1)
{

}

void sub_1B036B550(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  __int128 v5;
  uint64_t v6;
  void *v7;
  void *v8;
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  __int128 v15;
  _QWORD v16[4];
  id v17;
  uint64_t *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  __n128 (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)();
  void *v25;

  v5 = *(_OWORD *)(a1 + 40);
  v20 = 0;
  v21 = &v20;
  v22 = 0x5012000000;
  v23 = sub_1B036B6D8;
  v24 = nullsub_20;
  v25 = &unk_1B03B5E12;
  v15 = v5;
  v6 = v5;
  objc_msgSend_objectForKeyedSubscript_(*(void **)(v5 + 32), a2, (uint64_t)CVNLPCaptionScaleMethod, a4);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = *(void **)(v6 + 40);
  v16[0] = MEMORY[0x1E0C809B0];
  v16[1] = 3221225472;
  v16[2] = sub_1B036B6E8;
  v16[3] = &unk_1E60CE048;
  v9 = v7;
  v17 = v9;
  v18 = &v20;
  v19 = v15;
  objc_msgSend_run_block_(v8, v10, (uint64_t)CFSTR("Scale"), (uint64_t)v16);
  sub_1B036B8FC(v6, (uint64_t)(v21 + 6), 0);
  v11 = objc_claimAutoreleasedReturnValue();
  v12 = v21[6];
  if (v12)
    MEMORY[0x1B5E07CB4](v12, 0x1000C8077774924);

  _Block_object_dispose(&v20, 8);
  v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v14 = *(void **)(v13 + 40);
  *(_QWORD *)(v13 + 40) = v11;

}

void sub_1B036B698(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  void *v11;
  va_list va;

  va_start(va, a11);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B036B6C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__n128 sub_1B036B6D8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)(a2 + 48);
  v3 = *(_OWORD *)(a2 + 64);
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v3;
  return result;
}

void sub_1B036B6E8(uint64_t a1)
{
  uint64_t v2;
  __CFString *v3;
  BOOL v4;
  uint64_t v5;
  __int128 v6;
  const char *v7;
  uint64_t v8;
  char isEqualToString;
  const char *v10;
  uint64_t v11;
  CGInterpolationQuality v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  CGImage *v17;
  size_t v18;
  size_t v19;
  CGColorSpace *DeviceRGB;
  CGContext *v21;
  CGImage *Image;
  uint64_t v23;
  __int128 v24;
  __CFString *v25;
  __int128 v26;
  __int128 v27;
  CGRect v28;

  v2 = *(_QWORD *)(a1 + 48);
  v3 = *(__CFString **)(a1 + 32);
  if (v3)
    v4 = v3 == CVNLPCaptionScaleMethodvImage;
  else
    v4 = 1;
  if (v4)
  {
    sub_1B03454CC(*(CGImage **)(a1 + 56), (uint64_t *)(*(_QWORD *)v2 + 32), (uint64_t)&v26);
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
    v6 = v27;
    *(_OWORD *)(v5 + 48) = v26;
    *(_OWORD *)(v5 + 64) = v6;
    return;
  }
  v25 = v3;
  isEqualToString = objc_msgSend_isEqualToString_(v25, v7, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationNone, v8);
  if ((isEqualToString & 1) != 0)
  {
    v12 = kCGInterpolationNone;
  }
  else if ((objc_msgSend_isEqualToString_(v25, v10, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationLow, v11) & 1) != 0)
  {
    v12 = kCGInterpolationLow;
  }
  else if ((objc_msgSend_isEqualToString_(v25, v13, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationMedium, v14) & 1) != 0)
  {
    v12 = kCGInterpolationMedium;
  }
  else
  {
    if ((objc_msgSend_isEqualToString_(v25, v15, (uint64_t)CVNLPCaptionScaleMethodCGInterpolationHigh, v16) & 1) == 0)
    {

      return;
    }
    v12 = kCGInterpolationHigh;
  }

  v17 = *(CGImage **)(a1 + 56);
  v18 = *(_QWORD *)(*(_QWORD *)v2 + 32);
  v19 = *(_QWORD *)(*(_QWORD *)v2 + 40);
  DeviceRGB = CGColorSpaceCreateDeviceRGB();
  v21 = CGBitmapContextCreate(0, v18, v19, 8uLL, 4 * v18, DeviceRGB, 0x4005u);
  CGContextSetInterpolationQuality(v21, v12);
  v28.size.width = (double)v18;
  v28.size.height = (double)v19;
  v28.origin.x = 0.0;
  v28.origin.y = 0.0;
  CGContextDrawImage(v21, v28, v17);
  Image = CGBitmapContextCreateImage(v21);
  CGContextRelease(v21);
  CGColorSpaceRelease(DeviceRGB);
  sub_1B03454CC(Image, (uint64_t *)(*(_QWORD *)v2 + 32), (uint64_t)&v26);
  v23 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v24 = v27;
  *(_OWORD *)(v23 + 48) = v26;
  *(_OWORD *)(v23 + 64) = v24;
  CFRelease(Image);
}

void sub_1B036B8E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

id sub_1B036B8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v3;
  void *v4;
  NSObject *v8;
  uint64_t v9;
  NSObject *v10;
  const char *v11;
  _QWORD v13[8];
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t);
  void (*v18)(uint64_t);
  id v19;
  _QWORD block[8];
  uint8_t buf[8];
  uint8_t *v22;
  uint64_t v23;
  uint64_t (*v24)(uint64_t, uint64_t);
  void (*v25)(uint64_t);
  id v26;

  if (a2 | a3)
  {
    v3 = dispatch_group_create();
    *(_QWORD *)buf = 0;
    v22 = buf;
    v23 = 0x3032000000;
    v24 = sub_1B036B538;
    v25 = sub_1B036B548;
    v26 = 0;
    v8 = *(NSObject **)(a1 + 64);
    v9 = MEMORY[0x1E0C809B0];
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 3221225472;
    block[2] = sub_1B036BE88;
    block[3] = &unk_1E60CE020;
    block[4] = buf;
    block[5] = a1;
    block[6] = a3;
    block[7] = a2;
    dispatch_group_async(v3, v8, block);
    v14 = 0;
    v15 = &v14;
    v16 = 0x3032000000;
    v17 = sub_1B036B538;
    v18 = sub_1B036B548;
    v19 = 0;
    v10 = *(NSObject **)(a1 + 72);
    v13[0] = v9;
    v13[1] = 3221225472;
    v13[2] = sub_1B036C08C;
    v13[3] = &unk_1E60CE020;
    v13[6] = a3;
    v13[7] = a2;
    v13[4] = &v14;
    v13[5] = a1;
    dispatch_group_async(v3, v10, v13);
    dispatch_group_wait(v3, 0xFFFFFFFFFFFFFFFFLL);
    objc_storeStrong((id *)(a1 + 56), (id)v15[5]);
    objc_msgSend_postProcessCaptions_visionObservations_(*(void **)(a1 + 24), v11, *((_QWORD *)v22 + 5), v15[5]);
    v4 = (void *)objc_claimAutoreleasedReturnValue();
    _Block_object_dispose(&v14, 8);

    _Block_object_dispose(buf, 8);
  }
  else
  {
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v3 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B02D2000, v3, OS_LOG_TYPE_ERROR, "Input buffer and pixel buffer are both nil", buf, 2u);
    }
    v4 = 0;
  }

  return v4;
}

void sub_1B036BAF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  uint64_t v23;

  _Block_object_dispose(&a17, 8);

  _Block_object_dispose((const void *)(v23 - 144), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B036BB28(uint64_t a1, const char *a2)
{
  void *v2;
  uint64_t v3;
  _QWORD v5[7];
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;

  v6 = 0;
  v7 = &v6;
  v8 = 0x2020000000;
  v9 = 0;
  v2 = *(void **)(a1 + 40);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 3221225472;
  v5[2] = sub_1B036BBDC;
  v5[3] = &unk_1E60CE070;
  v5[4] = &v6;
  v5[5] = a1;
  v5[6] = a2;
  objc_msgSend_run_block_(v2, a2, (uint64_t)CFSTR("ScalePx"), (uint64_t)v5);
  v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1B036BBC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

__CVBuffer *sub_1B036BBDC(uint64_t a1)
{
  __CVBuffer *result;

  result = sub_1B034566C(*(__CVBuffer **)(a1 + 48), (size_t *)(**(_QWORD **)(a1 + 40) + 32));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

id sub_1B036BC20(uint64_t a1, const char *a2, uint64_t a3)
{
  void *v3;
  id v4;
  _QWORD v6[8];
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t, uint64_t);
  void (*v11)(uint64_t);
  id v12;

  v7 = 0;
  v8 = &v7;
  v9 = 0x3032000000;
  v10 = sub_1B036B538;
  v11 = sub_1B036B548;
  v12 = 0;
  v3 = *(void **)(a1 + 40);
  v6[0] = MEMORY[0x1E0C809B0];
  v6[1] = 3221225472;
  v6[2] = sub_1B036BD00;
  v6[3] = &unk_1E60CE020;
  v6[4] = &v7;
  v6[5] = a1;
  v6[6] = a2;
  v6[7] = a3;
  objc_msgSend_run_block_(v3, a2, (uint64_t)CFSTR("TotalPx"), (uint64_t)v6);
  v4 = (id)v8[5];
  _Block_object_dispose(&v7, 8);

  return v4;
}

void sub_1B036BCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  _Block_object_dispose(&a17, 8);

  _Unwind_Resume(a1);
}

void sub_1B036BD00(_QWORD *a1, const char *a2)
{
  uint64_t v3;
  __CVBuffer *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  __CVBuffer *v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[7];
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;

  v3 = a1[5];
  v4 = (__CVBuffer *)a1[6];
  v12 = 0;
  v13 = &v12;
  v14 = 0x2020000000;
  v15 = 0;
  v5 = *(void **)(v3 + 40);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 3221225472;
  v11[2] = sub_1B036BE44;
  v11[3] = &unk_1E60CE070;
  v11[4] = &v12;
  v11[5] = v3;
  v11[6] = v4;
  objc_msgSend_run_block_(v5, a2, (uint64_t)CFSTR("ScalePx"), (uint64_t)v11);
  v6 = v13[3];
  if (v6)
  {
    sub_1B036B8FC(v3, 0, v6);
    v7 = objc_claimAutoreleasedReturnValue();
    v8 = (__CVBuffer *)v13[3];
    if (v8 != v4)
    {
      CVPixelBufferUnlockBaseAddress(v8, 0);
      CFRelease((CFTypeRef)v13[3]);
    }
  }
  else
  {
    v7 = 0;
  }
  _Block_object_dispose(&v12, 8);
  v9 = *(_QWORD *)(a1[4] + 8);
  v10 = *(void **)(v9 + 40);
  *(_QWORD *)(v9 + 40) = v7;

}

void sub_1B036BDF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B036BE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  void *v9;
  va_list va;

  va_start(va, a9);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B036BE2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

__CVBuffer *sub_1B036BE44(uint64_t a1)
{
  __CVBuffer *result;

  result = sub_1B034566C(*(__CVBuffer **)(a1 + 48), (size_t *)(**(_QWORD **)(a1 + 40) + 32));
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_1B036BE88(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  const char *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  void *v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  id v39;
  uint64_t v40;
  void *v41;
  id v42;
  id v43;
  id v44;
  id v45;

  v5 = a1[5];
  v9 = objc_msgSend_genderOption(*(void **)(v5 + 48), a2, a3, a4);
  if (!(_DWORD)v9)
  {
    v9 = objc_msgSend_excludeGenderStrategy(*(void **)(v5 + 48), v6, v7, v8) == 2;
    v10 = a1[6];
    v11 = *(void **)v5;
    if (v10)
      goto LABEL_3;
LABEL_5:
    v15 = a1[7];
    v44 = 0;
    objc_msgSend_computeCaptionForImage_outputs_(v11, v6, v15, (uint64_t)&v44);
    v12 = v44;
    objc_msgSend_computeCaptionForImageWithInputs_genderOption_(*(void **)(v5 + 8), v16, (uint64_t)v12, v9);
    v14 = objc_claimAutoreleasedReturnValue();
    goto LABEL_6;
  }
  v10 = a1[6];
  v11 = *(void **)v5;
  if (!v10)
    goto LABEL_5;
LABEL_3:
  v45 = 0;
  objc_msgSend_computeCaptionForPixelBuffer_outputs_(v11, v6, v10, (uint64_t)&v45);
  v12 = v45;
  objc_msgSend_computeCaptionForImageWithInputs_genderOption_(*(void **)(v5 + 8), v13, (uint64_t)v12, v9);
  v14 = objc_claimAutoreleasedReturnValue();
LABEL_6:
  v17 = *(_QWORD *)(a1[4] + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v14;

  v19 = *(void **)(v5 + 24);
  v20 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
  v43 = 0;
  objc_msgSend_postProcessCaptions_genderOption_error_(v19, v21, v20, v9, &v43);
  v22 = objc_claimAutoreleasedReturnValue();
  v23 = v43;
  v24 = *(_QWORD *)(a1[4] + 8);
  v25 = *(void **)(v24 + 40);
  *(_QWORD *)(v24 + 40) = v22;

  if (objc_msgSend_code(v23, v26, v27, v28) == 1001 || objc_msgSend_code(v23, v29, v30, v31) == 1002)
  {
    objc_msgSend_computeCaptionForImageWithInputs_genderOption_(*(void **)(v5 + 8), v29, (uint64_t)v12, 0);
    v32 = objc_claimAutoreleasedReturnValue();
    v33 = *(_QWORD *)(a1[4] + 8);
    v34 = *(void **)(v33 + 40);
    *(_QWORD *)(v33 + 40) = v32;

    v35 = *(void **)(v5 + 24);
    v36 = *(_QWORD *)(*(_QWORD *)(a1[4] + 8) + 40);
    v42 = v23;
    objc_msgSend_postProcessCaptions_genderOption_error_(v35, v37, v36, 0, &v42);
    v38 = objc_claimAutoreleasedReturnValue();
    v39 = v42;

    v40 = *(_QWORD *)(a1[4] + 8);
    v41 = *(void **)(v40 + 40);
    *(_QWORD *)(v40 + 40) = v38;

    v23 = v39;
  }

}

void sub_1B036C068(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036C078(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036C08C(_QWORD *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  CVPixelBufferRef v7;
  void *v8;
  uint64_t v9;
  size_t v10;
  size_t v11;
  uint64_t v12;
  vImage_Error v13;
  const char *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint8_t permuteMap[4];
  vImage_Buffer dest;
  CVPixelBufferRef pixelBuffer;

  pixelBuffer = 0;
  v6 = a1[5];
  v5 = a1[6];
  if (v5)
  {
    v7 = 0;
    v8 = 0;
  }
  else
  {
    v9 = a1[7];
    v11 = *(_QWORD *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
    v8 = (void *)operator new[]();
    bzero(v8, v11 * 4 * v10);
    dest.data = v8;
    v12 = a1[7];
    *(_OWORD *)&dest.height = *(_OWORD *)(v12 + 8);
    dest.rowBytes = *(_QWORD *)(v12 + 24);
    *(_DWORD *)permuteMap = 50331906;
    v13 = vImagePermuteChannels_ARGB8888((const vImage_Buffer *)v12, &dest, permuteMap, 0);
    if (v13)
      objc_msgSend_raise_format_(MEMORY[0x1E0C99DA0], v14, (uint64_t)CFSTR("Error during scaling."), (uint64_t)CFSTR("Error code %zd"), v13);
    CVPixelBufferCreateWithBytes(0, v10, v11, 0x42475241u, dest.data, 4 * v10, 0, 0, 0, &pixelBuffer);
    v5 = a1[6];
    v7 = pixelBuffer;
  }
  v15 = *(void **)(v6 + 16);
  if (v5)
    objc_msgSend_classifyImage_(v15, a2, v5, a4);
  else
    objc_msgSend_classifyImage_(v15, a2, (uint64_t)v7, a4);
  v16 = objc_claimAutoreleasedReturnValue();
  v17 = *(_QWORD *)(a1[4] + 8);
  v18 = *(void **)(v17 + 40);
  *(_QWORD *)(v17 + 40) = v16;

  if (pixelBuffer)
  {
    CVPixelBufferUnlockBaseAddress(pixelBuffer, 0);
    CFRelease(pixelBuffer);
  }
  if (v8)
    MEMORY[0x1B5E07CB4](v8, 0x1000C8077774924);
}

id sub_1B036C204(void **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  void *v15;
  void *v16;
  const char *v17;
  NSObject *v18;
  id v19;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  id v30;
  void *v31;
  id v33;
  id v34;
  id v35;
  uint8_t buf[16];

  if (*(_QWORD *)(a2 + 8) == *(_QWORD *)a2)
  {
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v18 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B02D2000, v18, OS_LOG_TYPE_ERROR, "Video Pixel Buffers are empty", buf, 2u);
    }
    v31 = 0;
  }
  else
  {
    v9 = objc_msgSend_genderOption(a1[6], (const char *)a2, a3, a4);
    if (!(_DWORD)v9)
      v9 = objc_msgSend_excludeGenderStrategy(a1[6], v6, v7, v8) == 2;
    v10 = *a1;
    v35 = 0;
    objc_msgSend_computeCaptionForVideoPixelBuffer_outputs_(v10, v6, a2, (uint64_t)&v35);
    v12 = v35;
    v13 = *(_QWORD *)a2;
    if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
    {
      v14 = 0;
      do
      {
        CFRelease(*(CFTypeRef *)(v13 + 8 * v14++));
        v13 = *(_QWORD *)a2;
      }
      while (v14 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 3);
    }
    objc_msgSend_computeCaptionForImageWithInputs_genderOption_(a1[1], v11, (uint64_t)v12, v9);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = a1[3];
    v34 = 0;
    objc_msgSend_postProcessCaptions_genderOption_error_(v16, v17, (uint64_t)v15, v9, &v34);
    v18 = objc_claimAutoreleasedReturnValue();
    v19 = v34;

    if (objc_msgSend_code(v19, v20, v21, v22) == 1001 || objc_msgSend_code(v19, v23, v24, v25) == 1002)
    {
      objc_msgSend_computeCaptionForImageWithInputs_genderOption_(a1[1], v23, (uint64_t)v12, 0);
      v26 = (void *)objc_claimAutoreleasedReturnValue();

      v27 = a1[3];
      v33 = v19;
      objc_msgSend_postProcessCaptions_genderOption_error_(v27, v28, (uint64_t)v26, 0, &v33);
      v29 = objc_claimAutoreleasedReturnValue();
      v30 = v33;

      v18 = v29;
      v19 = v30;
    }
    objc_msgSend_postProcessCaptions_visionObservations_(a1[3], v23, (uint64_t)v18, 0);
    v31 = (void *)objc_claimAutoreleasedReturnValue();

  }
  return v31;
}

void sub_1B036C434(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B036C460(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1B036C470(void **a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  const char *v32;
  uint64_t v33;
  const char *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;

  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], a2, a3, a4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_results(a1[5], v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v5, v10, (uint64_t)v9, v11);

  objc_msgSend_performanceResults(*a1, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v5, v16, (uint64_t)v15, v17);

  objc_msgSend_performanceResults(a1[1], v18, v19, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v5, v22, (uint64_t)v21, v23);

  objc_msgSend_perfResults(a1[2], v24, v25, v26);
  v27 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_results(v27, v28, v29, v30);
  v31 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_addEntriesFromDictionary_(v5, v32, (uint64_t)v31, v33);

  v37 = (void *)objc_msgSend_copy(v5, v34, v35, v36);
  return v37;
}

void sub_1B036C54C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v2;

  _Unwind_Resume(a1);
}

void sub_1B036C568(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036C57C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036C590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036C5A4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036C5B8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036C764(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B036C7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCTCTextDecodingPath;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B036CB94(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036D498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B036D880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{

  _Unwind_Resume(a1);
}

void sub_1B036D9D0(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036D9E0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036DADC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036DD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B036DD44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B036DD5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B036DD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B036E124(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B036E13C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036E150(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B036E164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  if (__p)
    operator delete(__p);
  if (a14)
    operator delete(a14);
  _Unwind_Resume(exception_object);
}

void sub_1B036E19C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B036E840(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  void *v21;
  void *v22;

  _Unwind_Resume(a1);
}

void sub_1B036EA9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B036EAF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B036EB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B036EEDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,uint64_t a26,char a27)
{
  void *v27;
  void *v28;
  void *v29;
  void *v30;
  uint64_t v31;

  _Block_object_dispose(&a18, 8);
  if (__p)
  {
    a25 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a27, 8);
  _Block_object_dispose((const void *)(v31 - 128), 8);

  _Unwind_Resume(a1);
}

void sub_1B036EFE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

__n128 sub_1B036EFFC(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B036F020(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1B036F038(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  double v29;
  double v30;
  double v31;
  double v32;
  long double v33;

  v2 = LXCursorCreateByAdvancing();
  if (!v2)
    return;
  v3 = v2;
  v4 = *(_QWORD **)(*(_QWORD *)(a1 + 40) + 8);
  v6 = (uint64_t *)v4[7];
  v5 = v4[8];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)v4[6];
    v9 = ((char *)v6 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      sub_1B02D7758();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1B02D72AC();
      v13 = (char *)operator new(8 * v12);
      v14 = (uint64_t *)&v13[8 * v9];
      v15 = &v13[8 * v12];
      *v14 = v3;
      v7 = (uint64_t)(v14 + 1);
      v16 = (char *)((char *)v6 - v8);
      if (v6 == (uint64_t *)v8)
        goto LABEL_22;
    }
    else
    {
      v13 = 0;
      v14 = (uint64_t *)(8 * v9);
      v15 = 0;
      *(_QWORD *)(8 * v9) = v3;
      v7 = 8 * v9 + 8;
      v16 = (char *)((char *)v6 - v8);
      if (v6 == (uint64_t *)v8)
      {
LABEL_22:
        v4[6] = v14;
        v4[7] = v7;
        v4[8] = v15;
        if (v6)
          operator delete(v6);
        goto LABEL_24;
      }
    }
    v17 = (unint64_t)(v16 - 8);
    if (v17 < 0x58)
      goto LABEL_33;
    if ((unint64_t)(v8 - v13) < 0x20)
      goto LABEL_33;
    v18 = (v17 >> 3) + 1;
    v19 = 8 * (v18 & 0x3FFFFFFFFFFFFFFCLL);
    v20 = &v6[v19 / 0xFFFFFFFFFFFFFFF8];
    v14 = (uint64_t *)((char *)v14 - v19);
    v21 = &v13[8 * v9 - 16];
    v22 = v6 - 2;
    v23 = v18 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v24 = *(_OWORD *)v22;
      *((_OWORD *)v21 - 1) = *((_OWORD *)v22 - 1);
      *(_OWORD *)v21 = v24;
      v21 -= 32;
      v22 -= 4;
      v23 -= 4;
    }
    while (v23);
    v6 = v20;
    if (v18 != (v18 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_33:
      do
      {
        v25 = *--v6;
        *--v14 = v25;
      }
      while (v6 != (uint64_t *)v8);
    }
    v6 = (uint64_t *)v4[6];
    goto LABEL_22;
  }
  *v6 = v2;
  v7 = (uint64_t)(v6 + 1);
LABEL_24:
  v4[7] = v7;
  LXCursorConditionalProbability();
  v27 = v26 * 2.30258509;
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = 1;
  if (v27 < 0.0)
  {
    v28 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    v29 = *(double *)(v28 + 24);
    v30 = v27 - *(double *)(a1 + 64);
    v31 = fmax(v29, v30);
    v32 = fmin(v29, v30);
    if (v32 >= -1021.0)
    {
      v33 = exp(v32 - v31);
      v31 = log1p(v33) + v31;
    }
    *(double *)(v28 + 24) = v31;
  }
}

void sub_1B036F7FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, void *a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,void *a35)
{
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;

  operator delete(v35);
  operator delete(__p);

  _Block_object_dispose((const void *)(v38 - 184), 8);
  _Block_object_dispose((const void *)(v38 - 152), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1B036F93C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  objc_msgSend_languageModel(*(void **)(a1 + 32), a2, a3, a4);
  result = LMLanguageModelGetTokenIDForString();
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + 24) = result;
  return result;
}

void sub_1B036FE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B036FE54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B036FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void *v29;
  void *v30;
  uint64_t v31;
  void *v33;

  v33 = *(void **)(v31 - 176);
  if (v33)
  {
    *(_QWORD *)(v31 - 168) = v33;
    operator delete(v33);
  }

  _Unwind_Resume(a1);
}

void sub_1B036FF74()
{
  uint64_t v0;

  if (!*(_QWORD *)(v0 - 176))
    JUMPOUT(0x1B036FF5CLL);
  JUMPOUT(0x1B036FF54);
}

void sub_1B036FF84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;

  objc_msgSend_letterCharacterSet(MEMORY[0x1E0CB3500], a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_mutableCopy(v4, v5, v6, v7);
  v9 = (void *)qword_1EEEB28F8;
  qword_1EEEB28F8 = v8;

  v10 = (void *)qword_1EEEB28F8;
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v11, (uint64_t)CFSTR("'.-/"), v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_formUnionWithCharacterSet_(v10, v14, (uint64_t)v13, v15);

  objc_msgSend_invertedSet((void *)qword_1EEEB28F8, v16, v17, v18);
  v19 = objc_claimAutoreleasedReturnValue();
  v20 = (void *)qword_1EEEB28F0;
  qword_1EEEB28F0 = v19;

}

void sub_1B0370018(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0370028(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0370038(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;

  objc_msgSend_wordLanguageModel(*(void **)(*(_QWORD *)(a1 + 32) + 352), a2, a3, a4);
  v9 = (id)objc_claimAutoreleasedReturnValue();
  objc_msgSend_languageModel(v9, v5, v6, v7);
  LMLanguageModelConditionalProbability();
  *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 24) = v8;

}

void sub_1B03700A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

_QWORD *sub_1B03700B4(_QWORD *result, uint64_t a2)
{
  _BYTE *v2;
  _BYTE *v3;
  int64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;

  result[6] = 0;
  result[7] = 0;
  result[8] = 0;
  v3 = *(_BYTE **)(a2 + 48);
  v2 = *(_BYTE **)(a2 + 56);
  v4 = v2 - v3;
  if (v2 != v3)
  {
    v5 = result;
    if (v4 < 0)
      sub_1B02D7758();
    v6 = (char *)operator new(v2 - v3);
    v5[6] = v6;
    v5[7] = v6;
    v7 = &v6[4 * (v4 >> 2)];
    v5[8] = v7;
    result = memcpy(v6, v3, v4);
    v5[7] = v7;
  }
  return result;
}

void sub_1B0370128(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 56) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B0370144(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1B03701A8()
{
  dispatch_queue_t v0;
  void *v1;

  v0 = dispatch_queue_create("com.apple.cvnlp.languagemodeling", 0);
  v1 = (void *)qword_1EEEB2910;
  qword_1EEEB2910 = (uint64_t)v0;

}

void sub_1B03704FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0370514(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0370528(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

double sub_1B03707EC(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  double v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  double v22;
  double v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  double v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  double v39;
  double v40;
  double v41;
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  double v49;
  double v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  double v61;
  double v62;
  double v63;

  v3 = a2;
  v7 = v3;
  if (*(_BYTE *)(a1 + 40) && (objc_msgSend_hasProblematicMixedScriptWords(v3, v4, v5, v6) & 1) != 0)
  {
    v8 = -1000.0;
  }
  else
  {
    v9 = objc_msgSend_characterCount(v7, v4, v5, v6) + 1;
    objc_msgSend_lexiconScore(v7, v10, v11, v12);
    v14 = v13;
    objc_msgSend_lexicons(*(void **)(a1 + 32), v15, v16, v17);
    v18 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_decodingWeightValue(v18, v19, v20, v21);
    v23 = v22 * v14 / (double)v9;

    objc_msgSend_characterLanguageModelLogProbability(v7, v24, v25, v26);
    v28 = v27;
    objc_msgSend_characterLanguageModel(*(void **)(a1 + 32), v29, v30, v31);
    v32 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_decodingWeightValue(v32, v33, v34, v35);
    v40 = v39 * v28 / (double)(v9 - objc_msgSend_pseudoSpaceCount(v7, v36, v37, v38));

    v41 = v40 + v23;
    objc_msgSend_wordLanguageModel(*(void **)(a1 + 32), v42, v43, v44);
    v45 = (void *)objc_claimAutoreleasedReturnValue();

    if (v45)
    {
      objc_msgSend_wordLanguageModelLogProbability(v7, v46, v47, v48);
      v50 = v49;
      objc_msgSend_wordLanguageModel(*(void **)(a1 + 32), v51, v52, v53);
      v54 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_decodingWeightValue(v54, v55, v56, v57);
      v62 = v61 * v50 / (double)(objc_msgSend_tokenCount(v7, v58, v59, v60) + 1);

      v41 = v62 + v41;
    }
    objc_msgSend_modelLogProbability(v7, v46, v47, v48);
    v8 = v63 / (double)v9 + v41;
  }

  return v8;
}

double sub_1B03709C4(uint64_t a1, void *a2)
{
  id v3;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  double v13;
  double v14;

  v3 = a2;
  v7 = v3;
  if (*(_BYTE *)(a1 + 32) && (objc_msgSend_hasProblematicMixedScriptWords(v3, v4, v5, v6) & 1) != 0)
  {

    return -1000.0;
  }
  else
  {
    v9 = objc_msgSend_characterCount(v7, v4, v5, v6) + 1;
    objc_msgSend_modelLogProbability(v7, v10, v11, v12);
    v14 = v13 / (double)v9;

    return v14;
  }
}

uint64_t sub_1B0370AA0(uint64_t a1, uint64_t a2)
{
  void **v3;
  void **v4;
  const void *v5;
  CFTypeRef v6;
  _OWORD *v7;
  __int128 v8;
  void *v9;
  void **v10;
  void **v11;
  void *v12;
  const void *v13;
  CFTypeRef v14;
  _OWORD *v15;
  __int128 v16;
  void *v17;
  void **v18;
  void **v19;
  void *v20;
  std::runtime_error *exception;
  __int128 v23;
  unint64_t v24;
  void *v25[2];
  uint64_t v26;
  void *__p;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  void *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  _BYTE *v38;
  void *v39;
  void *v40;
  CFTypeRef v41;

  *(_OWORD *)(a1 + 8) = 0u;
  v3 = (void **)(a1 + 8);
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = a1 + 64;
  v4 = (void **)(a1 + 32);
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)a1 = a2;
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "MRLNeuralNetworkCreate returned nullptr");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v23 = 0uLL;
  v24 = 0;
  v5 = (const void *)MRLNeuralNetworkCopyInputNamesAndDimensions();
  sub_1B03712E4(&v41, v5);
  v6 = v41;
  if (v41)
  {
    CFRetain(v41);
    CFRelease(v6);
  }
  sub_1B0371390((uint64_t)&v35, (CFDictionaryRef)v6);
  sub_1B0371390((uint64_t)&v29, (CFDictionaryRef)v6);
  v30 = (v32 - (_BYTE *)v31) >> 3;
  while (1)
  {
    if (v35 && v36 != (v38 - (_BYTE *)v37) >> 3)
    {
      if (v35 != v29)
        goto LABEL_14;
      goto LABEL_13;
    }
    if (!v29 || v30 == (v32 - (_BYTE *)v31) >> 3)
      break;
    if (v35 != v29)
      goto LABEL_14;
LABEL_13:
    if (v36 == v30)
      break;
LABEL_14:
    sub_1B03715F0((uint64_t)v25, &v35);
    v7 = (_OWORD *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1) >= v24)
    {
      *((_QWORD *)&v23 + 1) = sub_1B03179B4((char **)&v23, (uint64_t)v25);
      v9 = __p;
      if (!__p)
        goto LABEL_20;
LABEL_19:
      v28 = v9;
      operator delete(v9);
      goto LABEL_20;
    }
    if (SHIBYTE(v26) < 0)
    {
      sub_1B02EB0A8(*((_BYTE **)&v23 + 1), v25[0], (unint64_t)v25[1]);
      *((_QWORD *)&v23 + 1) = (char *)v7 + 24;
      v9 = __p;
      if (__p)
        goto LABEL_19;
    }
    else
    {
      v8 = *(_OWORD *)v25;
      *(_QWORD *)(*((_QWORD *)&v23 + 1) + 16) = v26;
      *v7 = v8;
      *((_QWORD *)&v23 + 1) = (char *)v7 + 24;
      v9 = __p;
      if (__p)
        goto LABEL_19;
    }
LABEL_20:
    if (SHIBYTE(v26) < 0)
      operator delete(v25[0]);
    ++v36;
  }
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v41)
    CFRelease(v41);
  v10 = (void **)*v3;
  if (*v3)
  {
    v11 = *(void ***)(a1 + 16);
    v12 = *v3;
    if (v11 != v10)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = *v3;
    }
    *(_QWORD *)(a1 + 16) = v10;
    operator delete(v12);
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  *(_OWORD *)(a1 + 8) = v23;
  *(_QWORD *)(a1 + 24) = v24;
  v24 = 0;
  v23 = 0uLL;
  v13 = (const void *)MRLNeuralNetworkCopyOutputNamesAndDimensions();
  sub_1B03712E4(&v41, v13);
  v14 = v41;
  if (v41)
  {
    CFRetain(v41);
    CFRelease(v14);
  }
  sub_1B0371390((uint64_t)&v35, (CFDictionaryRef)v14);
  sub_1B0371390((uint64_t)&v29, (CFDictionaryRef)v14);
  v30 = (v32 - (_BYTE *)v31) >> 3;
  while (2)
  {
    if (v35 && v36 != (v38 - (_BYTE *)v37) >> 3)
    {
      if (v35 == v29)
      {
LABEL_53:
        if (v36 == v30)
          goto LABEL_64;
      }
LABEL_54:
      sub_1B03715F0((uint64_t)v25, &v35);
      v15 = (_OWORD *)*((_QWORD *)&v23 + 1);
      if (*((_QWORD *)&v23 + 1) >= v24)
      {
        *((_QWORD *)&v23 + 1) = sub_1B03179B4((char **)&v23, (uint64_t)v25);
        v17 = __p;
        if (!__p)
        {
LABEL_60:
          if (SHIBYTE(v26) < 0)
            operator delete(v25[0]);
          ++v36;
          continue;
        }
      }
      else if (SHIBYTE(v26) < 0)
      {
        sub_1B02EB0A8(*((_BYTE **)&v23 + 1), v25[0], (unint64_t)v25[1]);
        *((_QWORD *)&v23 + 1) = (char *)v15 + 24;
        v17 = __p;
        if (!__p)
          goto LABEL_60;
      }
      else
      {
        v16 = *(_OWORD *)v25;
        *(_QWORD *)(*((_QWORD *)&v23 + 1) + 16) = v26;
        *v15 = v16;
        *((_QWORD *)&v23 + 1) = (char *)v15 + 24;
        v17 = __p;
        if (!__p)
          goto LABEL_60;
      }
      v28 = v17;
      operator delete(v17);
      goto LABEL_60;
    }
    break;
  }
  if (v29 && v30 != (v32 - (_BYTE *)v31) >> 3)
  {
    if (v35 == v29)
      goto LABEL_53;
    goto LABEL_54;
  }
LABEL_64:
  if (v33)
  {
    v34 = v33;
    operator delete(v33);
  }
  if (v31)
  {
    v32 = v31;
    operator delete(v31);
  }
  if (v39)
  {
    v40 = v39;
    operator delete(v39);
  }
  if (v37)
  {
    v38 = v37;
    operator delete(v37);
  }
  if (v41)
    CFRelease(v41);
  v18 = (void **)*v4;
  if (*v4)
  {
    v19 = *(void ***)(a1 + 40);
    v20 = *v4;
    if (v19 != v18)
    {
      do
      {
        if (*((char *)v19 - 1) < 0)
          operator delete(*(v19 - 3));
        v19 -= 3;
      }
      while (v19 != v18);
      v20 = *v4;
    }
    *(_QWORD *)(a1 + 40) = v18;
    operator delete(v20);
    *v4 = 0;
    v4[1] = 0;
    v4[2] = 0;
  }
  *(_OWORD *)(a1 + 32) = v23;
  *(_QWORD *)(a1 + 48) = v24;
  return a1;
}

void sub_1B0370F7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;

  sub_1B035BF54(v5, *(char **)(v1 + 88));
  sub_1B03711E4(v4, *(char **)(v1 + 64));
  sub_1B031724C(v2);
  sub_1B031724C(v3);
  sub_1B0371044((const void **)v1);
  _Unwind_Resume(a1);
}

const void **sub_1B0371044(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  *a1 = 0;
  return a1;
}

void sub_1B0371078(uint64_t a1)
{
  __int128 *v1;
  __int128 *v2;
  uint64_t **v3;
  uint64_t **v4;
  __int128 v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t **v8;
  void *__p[2];
  uint64_t v10;
  void **v11;

  v1 = *(__int128 **)(a1 + 8);
  v2 = *(__int128 **)(a1 + 16);
  if (v1 != v2)
  {
    v3 = (uint64_t **)(a1 + 80);
    v4 = (uint64_t **)(a1 + 56);
    do
    {
      if (*((char *)v1 + 23) < 0)
      {
        sub_1B02EB0A8(__p, *(void **)v1, *((_QWORD *)v1 + 1));
      }
      else
      {
        v5 = *v1;
        v10 = *((_QWORD *)v1 + 2);
        *(_OWORD *)__p = v5;
      }
      v11 = __p;
      if (sub_1B0352650(v3, (const void **)__p, (uint64_t)&unk_1B03B0E24, (__int128 **)&v11)[7])
      {
        v11 = __p;
        v6 = sub_1B0352650(v3, (const void **)__p, (uint64_t)&unk_1B03B0E24, (__int128 **)&v11);
        CFRelease(v6[7]);
        v11 = __p;
        sub_1B0352650(v3, (const void **)__p, (uint64_t)&unk_1B03B0E24, (__int128 **)&v11)[7] = 0;
      }
      v11 = __p;
      v7 = sub_1B0351750(v4, (const void **)__p, (uint64_t)&unk_1B03B0E24, (__int128 **)&v11);
      if (v7[7] != v7[8])
      {
        v11 = __p;
        v8 = sub_1B0351750(v4, (const void **)__p, (uint64_t)&unk_1B03B0E24, (__int128 **)&v11);
        v8[8] = v8[7];
      }
      if (SHIBYTE(v10) < 0)
        operator delete(__p[0]);
      v1 = (__int128 *)((char *)v1 + 24);
    }
    while (v1 != v2);
  }
}

void sub_1B03711C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B03711E4(uint64_t a1, char *a2)
{
  void *v4;

  if (a2)
  {
    sub_1B03711E4(a1, *(_QWORD *)a2);
    sub_1B03711E4(a1, *((_QWORD *)a2 + 1));
    v4 = (void *)*((_QWORD *)a2 + 7);
    if (v4)
    {
      *((_QWORD *)a2 + 8) = v4;
      operator delete(v4);
    }
    if (a2[55] < 0)
      operator delete(*((void **)a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1B0371254(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *sub_1B03712A4(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[5];
  if (v2)
  {
    a1[6] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[2];
  if (v3)
  {
    a1[3] = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *sub_1B03712E4(_QWORD *a1, CFTypeRef cf)
{
  CFTypeID v3;
  std::runtime_error *exception;

  *a1 = cf;
  if (cf)
  {
    v3 = CFGetTypeID(cf);
    if (v3 != CFDictionaryGetTypeID())
    {
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not construct");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  return a1;
}

void sub_1B0371360(_Unwind_Exception *a1)
{
  CFTypeRef *v1;
  void *v2;

  __cxa_free_exception(v2);
  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0371390(uint64_t a1, CFDictionaryRef theDict)
{
  void **v3;
  unint64_t Count;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void **v8;
  unint64_t v9;

  *(_QWORD *)a1 = theDict;
  *(_OWORD *)(a1 + 40) = 0u;
  v3 = (void **)(a1 + 40);
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  if (theDict)
  {
    Count = CFDictionaryGetCount(theDict);
    v5 = Count;
    v6 = *(_QWORD *)(a1 + 16);
    v7 = (*(_QWORD *)(a1 + 24) - v6) >> 3;
    if (Count <= v7)
    {
      if (Count < v7)
        *(_QWORD *)(a1 + 24) = v6 + 8 * Count;
    }
    else
    {
      sub_1B0371450((void **)(a1 + 16), Count - v7);
    }
    v8 = *(const void ***)(a1 + 40);
    v9 = (uint64_t)(*(_QWORD *)(a1 + 48) - (_QWORD)v8) >> 3;
    if (v5 <= v9)
    {
      if (v5 < v9)
        *(_QWORD *)(a1 + 48) = &v8[v5];
    }
    else
    {
      sub_1B0371450(v3, v5 - v9);
      v8 = (const void **)*v3;
    }
    CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)a1, *(const void ***)(a1 + 16), v8);
  }
  return a1;
}

void sub_1B0371450(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _BYTE *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  char *v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;

  v5 = (char *)a1[1];
  v4 = a1[2];
  v6 = v5;
  if (a2 <= (v4 - v5) >> 3)
  {
    if (a2)
    {
      bzero(v5, 8 * a2);
      v6 = &v5[8 * a2];
    }
    a1[1] = v6;
  }
  else
  {
    v7 = (char *)*a1;
    v8 = v5 - (_BYTE *)*a1;
    v9 = v8 >> 3;
    v10 = (v8 >> 3) + a2;
    if (v10 >> 61)
      sub_1B02D7758();
    v11 = v4 - v7;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1B02D72AC();
      v13 = operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    v15 = 8 * a2;
    v16 = &v13[8 * v12];
    bzero(v14, v15);
    v17 = &v14[v15];
    if (v5 != v7)
    {
      v18 = v5 - v7 - 8;
      if (v18 < 0x58)
        goto LABEL_30;
      if ((unint64_t)(v5 - v13 - v8) < 0x20)
        goto LABEL_30;
      v19 = (v18 >> 3) + 1;
      v20 = 8 * (v19 & 0x3FFFFFFFFFFFFFFCLL);
      v6 = &v5[-v20];
      v14 -= v20;
      v21 = &v13[8 * v9 - 16];
      v22 = v5 - 16;
      v23 = v19 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v24 = *(_OWORD *)v22;
        *(v21 - 1) = *((_OWORD *)v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 32;
        v23 -= 4;
      }
      while (v23);
      if (v19 != (v19 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_30:
        do
        {
          v25 = *((_QWORD *)v6 - 1);
          v6 -= 8;
          *((_QWORD *)v14 - 1) = v25;
          v14 -= 8;
        }
        while (v6 != v7);
      }
      v6 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v16;
    if (v6)
      operator delete(v6);
  }
}

double sub_1B03715F0(uint64_t a1, _QWORD *a2)
{
  unint64_t v2;
  uint64_t v4;
  const __CFString *v5;
  CFTypeID TypeID;
  const void *v8;
  CFTypeID v9;
  double result;
  std::logic_error *exception;
  std::runtime_error *v12;
  std::runtime_error *v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;

  v2 = a2[1];
  if ((v2 & 0x8000000000000000) != 0 || (v4 = a2[2], v2 >= (a2[3] - v4) >> 3))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B02EA0A0(exception, "DictionaryRef_iterator iterator out of range.");
    __cxa_throw(exception, (struct type_info *)off_1E60CA328, (void (*)(void *))MEMORY[0x1E0DE42E0]);
  }
  v5 = *(const __CFString **)(v4 + 8 * v2);
  if (!v5 || (TypeID = CFStringGetTypeID(), TypeID != CFGetTypeID(v5)))
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(v12);
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B034ACEC(v5, &v16);
  v8 = *(const void **)(a2[5] + 8 * a2[1]);
  if (!v8 || (v9 = CFArrayGetTypeID(), v9 != CFGetTypeID(v8)))
  {
    v13 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v13, "Could not convert");
    __cxa_throw(v13, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B037179C((const __CFArray *)v8, (char **)&v14);
  *(_OWORD *)a1 = v16;
  *(_QWORD *)(a1 + 16) = v17;
  result = *(double *)&v14;
  *(_OWORD *)(a1 + 24) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  return result;
}

void sub_1B0371748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  void *v17;

  __cxa_free_exception(v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_1B037179C(const __CFArray *a1@<X0>, char **a2@<X8>)
{
  CFIndex Count;
  int v4;
  char *v5;
  CFIndex v6;
  uint64_t v7;
  uint64_t v8;
  const void *ValueAtIndex;
  uint64_t v10;
  int v11;
  unint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  char *v21;
  int64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  _OWORD *v27;
  char *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  std::runtime_error *exception;

  Count = CFArrayGetCount(a1);
  v4 = Count;
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  if (Count << 32)
  {
    if (Count << 32 < 0)
      sub_1B02D7758();
    v5 = (char *)operator new((4 * Count) & 0x3FFFFFFFFLL);
    *a2 = v5;
    a2[1] = v5;
    a2[2] = &v5[4 * v4];
  }
  if (v4 >= 1)
  {
    v6 = 0;
    v7 = v4;
    while (1)
    {
      ValueAtIndex = CFArrayGetValueAtIndex(a1, v6);
      v10 = sub_1B0371A04((uint64_t)ValueAtIndex);
      if ((v10 & 0xFF00000000) == 0)
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not convert");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v11 = v10;
      v13 = a2[1];
      v12 = (unint64_t)a2[2];
      if ((unint64_t)v13 >= v12)
        break;
      *(_DWORD *)v13 = v10;
      v8 = (uint64_t)(v13 + 4);
LABEL_7:
      a2[1] = (char *)v8;
      if (++v6 == v7)
        return;
    }
    v14 = *a2;
    v15 = v13 - *a2;
    v16 = v15 >> 2;
    v17 = (v15 >> 2) + 1;
    if (v17 >> 62)
      sub_1B02D7758();
    v18 = v12 - (_QWORD)v14;
    if (v18 >> 1 > v17)
      v17 = v18 >> 1;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
      v19 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 62)
        sub_1B02D72AC();
      v20 = operator new(4 * v19);
      v21 = &v20[4 * v16];
      *(_DWORD *)v21 = v11;
      v8 = (uint64_t)(v21 + 4);
      v22 = v13 - v14;
      if (v13 == v14)
        goto LABEL_27;
    }
    else
    {
      v20 = 0;
      v21 = (char *)(4 * v16);
      *(_DWORD *)(4 * v16) = v11;
      v8 = 4 * v16 + 4;
      v22 = v13 - v14;
      if (v13 == v14)
      {
LABEL_27:
        *a2 = v21;
        a2[1] = (char *)v8;
        a2[2] = &v20[4 * v19];
        if (v14)
          operator delete(v14);
        goto LABEL_7;
      }
    }
    v23 = v22 - 4;
    if (v23 < 0x2C)
      goto LABEL_36;
    if ((unint64_t)(v13 - v20 - v15) < 0x20)
      goto LABEL_36;
    v24 = (v23 >> 2) + 1;
    v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
    v26 = &v13[-v25];
    v21 -= v25;
    v27 = &v20[4 * v16 - 16];
    v28 = v13 - 16;
    v29 = v24 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v30 = *(_OWORD *)v28;
      *(v27 - 1) = *((_OWORD *)v28 - 1);
      *v27 = v30;
      v27 -= 2;
      v28 -= 32;
      v29 -= 8;
    }
    while (v29);
    v13 = v26;
    if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        v31 = *((_DWORD *)v13 - 1);
        v13 -= 4;
        *((_DWORD *)v21 - 1) = v31;
        v21 -= 4;
      }
      while (v13 != v14);
    }
    goto LABEL_27;
  }
}

void sub_1B03719D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0371A04(uint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  CFTypeID v3;

  if (result)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_1B0371A9C(v1);
    }
    else
    {
      v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1))
        return CFBooleanGetValue(v1) | 0x100000000;
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_1B0371A9C(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  int Value;
  uint64_t v16;
  unsigned __int8 v17;
  int v18;
  int v19;
  uint64_t v20;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_17;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_28;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberSInt64Type;
      goto LABEL_28;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloat32Type;
      goto LABEL_24;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberFloat64Type;
      goto LABEL_30;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v16 = Value != 0;
      if (Value)
        v17 = LOBYTE(valuePtr);
      else
        v17 = 0;
      v18 = -256;
      if ((v16 & (SLOBYTE(valuePtr) < 0)) == 0)
        v18 = 0;
      v5 = v16 << 32;
      LODWORD(v6) = v18 & 0xFFFFFF00 | v17;
      v4 = v6 & 0xFFFFFF00;
      return v5 | v4 & 0xFFFFFF00 | v6;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_17:
      if (CFNumberGetValue(v7, v8, &valuePtr))
        v6 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
      else
        v6 = 0;
      goto LABEL_33;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
      goto LABEL_28;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongType;
      goto LABEL_28;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberLongLongType;
      goto LABEL_28;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v11 = a1;
      v12 = kCFNumberFloatType;
LABEL_24:
      v19 = CFNumberGetValue(v11, v12, &valuePtr);
      v20 = *(float *)&valuePtr;
      goto LABEL_31;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberDoubleType;
      goto LABEL_30;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberCFIndexType;
      goto LABEL_28;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v9 = a1;
      v10 = kCFNumberNSIntegerType;
LABEL_28:
      v19 = CFNumberGetValue(v9, v10, &valuePtr);
      v20 = LODWORD(valuePtr);
      goto LABEL_31;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v13 = a1;
      v14 = kCFNumberCGFloatType;
LABEL_30:
      v19 = CFNumberGetValue(v13, v14, &valuePtr);
      v20 = valuePtr;
LABEL_31:
      v6 = v20 | 0x100000000;
      if (!v19)
        v6 = 0;
LABEL_33:
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

void sub_1B0371E50(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0371E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0371E7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B0371F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionDecoderBlock;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B0372C04(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,__int128 a27,int64_t a28)
{
  void *v28;
  const std::string::value_type *v30;
  std::string *v31;
  __int128 v32;
  __int128 *v33;

  if (a26 < 0)
  {
    operator delete(__p);
    if ((SHIBYTE(a28) & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((SHIBYTE(a28) & 0x80000000) == 0)
  {
    goto LABEL_7;
  }
  operator delete((void *)a27);
LABEL_7:

  __cxa_begin_catch(a1);
  sub_1B02DCBB8(&__p, "Failed to load decoder network");
  espresso_plan_get_error_info();
  v31 = std::string::append((std::string *)&__p, v30);
  v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
  a28 = v31->__r_.__value_.__r.__words[2];
  a27 = v32;
  v31->__r_.__value_.__l.__size_ = 0;
  v31->__r_.__value_.__r.__words[2] = 0;
  v31->__r_.__value_.__r.__words[0] = 0;
  if (a26 < 0)
    operator delete(__p);
  if (a28 >= 0)
    v33 = &a27;
  else
    v33 = (__int128 *)a27;
  sub_1B036AFC8(3u, (uint64_t)v33);
}

void sub_1B0372E38(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0)
    operator delete(__p);
  __cxa_end_catch();
  JUMPOUT(0x1B03722BCLL);
}

void sub_1B0372E58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

void sub_1B0372E6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

void sub_1B03759C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  void *a66;
  void *a69;
  uint64_t a70;
  void *a72;
  uint64_t a73;
  void *v73;
  uint64_t v74;
  void *v76;
  void *v77;
  void *v78;
  void *v79;
  void *v80;
  void *v81;

  if (a58 < 0)
  {
    operator delete(__p);
    v76 = *(void **)(v74 - 152);
    if (v76)
      goto LABEL_3;
  }
  else
  {
    v76 = *(void **)(v74 - 152);
    if (v76)
    {
LABEL_3:
      *(_QWORD *)(v74 - 144) = v76;
      operator delete(v76);
      v77 = a12;
      if (a12)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  v77 = a12;
  if (a12)
  {
LABEL_4:
    operator delete(v77);
    v78 = *(void **)(v74 - 128);
    if (!v78)
    {
LABEL_10:
      if (a60)
      {
        operator delete(a60);
        v79 = a63;
        if (!a63)
        {
LABEL_12:
          sub_1B031724C(&a66);
          v80 = a69;
          if (!a69)
            goto LABEL_13;
          goto LABEL_18;
        }
      }
      else
      {
        v79 = a63;
        if (!a63)
          goto LABEL_12;
      }
      operator delete(v79);
      sub_1B031724C(&a66);
      v80 = a69;
      if (!a69)
      {
LABEL_13:
        v81 = a72;
        if (!a72)
          goto LABEL_15;
        goto LABEL_14;
      }
LABEL_18:
      a70 = (uint64_t)v80;
      operator delete(v80);
      v81 = a72;
      if (!a72)
      {
LABEL_15:

        _Unwind_Resume(a1);
      }
LABEL_14:
      a73 = (uint64_t)v81;
      operator delete(v81);
      goto LABEL_15;
    }
LABEL_9:
    operator delete(v78);
    goto LABEL_10;
  }
LABEL_8:
  v78 = *(void **)(v74 - 128);
  if (!v78)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_1B0377188(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{

  _Unwind_Resume(a1);
}

void sub_1B0377CD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  if ((*(char *)(v29 - 89) & 0x80000000) == 0)
  {

    _Unwind_Resume(a1);
  }
  operator delete(*(void **)(v29 - 112));

  _Unwind_Resume(a1);
}

void sub_1B0377EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  void *v20;
  void *v21;

  _Unwind_Resume(a1);
}

void sub_1B0377EFC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0377F10(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t sub_1B0377F1C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend__runBlockWithCopyOutputBlock_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), a4);
}

void sub_1B0377FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0377FD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[10];
  uint64_t v13;

  v5 = *(void **)(a1 + 32);
  v6 = *(_QWORD *)(a1 + 48);
  if (!v5)
  {
    v13 = 0;
    memset(v12, 0, sizeof(v12));
    objc_msgSend__copy_data_to_blob_to_(0, a2, v6, (uint64_t)v12);
    v10 = *(_QWORD *)(a1 + 48);
    if (!v10)
      return objc_msgSend__runBlockWithCopyOutputBlock_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 40), v9);
    goto LABEL_3;
  }
  objc_msgSend_blockInput(*(void **)(a1 + 32), a2, a3, a4);
  objc_msgSend__copy_data_to_blob_to_(v5, v7, v6, (uint64_t)v12);
  v10 = *(_QWORD *)(a1 + 48);
  if (v10)
LABEL_3:
    MEMORY[0x1B5E07CB4](v10, 0x1000C8052888210);
  return objc_msgSend__runBlockWithCopyOutputBlock_(*(void **)(a1 + 32), v8, *(_QWORD *)(a1 + 40), v9);
}

void sub_1B03781D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03781E8(void *a1)
{
  void *v1;
  void *v2;
  void *v3;
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const std::string::value_type *v9;
  std::string *v10;
  __int128 v11;
  uint64_t v12;

  __cxa_begin_catch(a1);
  sub_1B02DCBB8((_QWORD *)(v4 - 136), "Failed to execute decoder network");
  objc_msgSend_decoderPlan(v1, v6, v7, v8);
  espresso_plan_get_error_info();
  v10 = std::string::append((std::string *)(v4 - 136), v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  *(_QWORD *)(v4 - 96) = *((_QWORD *)&v10->__r_.__value_.__l + 2);
  *(_OWORD *)(v4 - 112) = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(v4 - 113) < 0)
    operator delete(*(void **)(v4 - 136));
  if (*(char *)(v4 - 89) >= 0)
    v12 = v4 - 112;
  else
    v12 = *(_QWORD *)(v4 - 112);
  sub_1B036AFC8(5u, v12);
}

void sub_1B0378274()
{
  uint64_t v0;

  if (*(char *)(v0 - 89) < 0)
    operator delete(*(void **)(v0 - 112));
  __cxa_end_catch();
  JUMPOUT(0x1B0378114);
}

void sub_1B037828C(_Unwind_Exception *a1)
{
  void *v1;
  uint64_t v2;

  if (*(char *)(v2 - 89) < 0)
    operator delete(*(void **)(v2 - 112));
  __cxa_end_catch();

  _Unwind_Resume(a1);
}

uint64_t sub_1B03782E0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  std::runtime_error *exception;
  const char *v6;

  objc_msgSend_decoderPlan(*(void **)(a1 + 32), a2, a3, a4);
  result = espresso_plan_execute_sync();
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    espresso_plan_get_error_info();
    std::runtime_error::runtime_error(exception, v6);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B0378350(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B03787B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B03711E4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B037888C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_1B03711E4(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1B0378B4C(_Unwind_Exception *a1)
{
  char **v1;
  void *v2;

  operator delete(v2);
  sub_1B0379E60(*v1);
  _Unwind_Resume(a1);
}

void sub_1B0378B6C(_Unwind_Exception *a1)
{
  char *v1;

  sub_1B0379E60(v1);
  _Unwind_Resume(a1);
}

void sub_1B0378F90(_Unwind_Exception *a1)
{
  uint64_t v1;
  char *v2;
  uint64_t i;

  sub_1B0379E60(v2);
  if (v1)
  {
    for (i = *(_QWORD *)(v1 + 16); i; i = *(_QWORD *)(i + 16))
      v1 = i;
    sub_1B0379E60((char *)v1);
  }
  _Unwind_Resume(a1);
}

void sub_1B0378FC4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B0379220(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if (v7 < 0)
    sub_1B02D7758();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[4 * (v7 >> 2)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_1B03792EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1B0379328(uint64_t *result, uint64_t a2, const void **a3, __int128 *a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  int v9;
  int v10;
  size_t v11;
  const void *v12;
  size_t v13;
  const void *v14;
  size_t v15;
  _BOOL4 v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t **v19;
  _BOOL4 v20;
  uint64_t *v21;
  uint64_t **v22;
  uint64_t **v23;
  uint64_t **v24;
  BOOL v25;
  int v26;
  int v27;
  size_t v28;
  uint64_t *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  BOOL v33;
  uint64_t **v34;
  uint64_t *v35;
  _QWORD *v36;
  const void *v37;
  const void *v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  _BOOL4 v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  int v50;
  size_t v51;
  uint64_t *v52;
  size_t v53;
  int v54;
  BOOL v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  _QWORD *v59;
  const void *v60;
  const void *v61;
  int v62;
  size_t v63;
  const void *v64;
  size_t v65;
  int v66;
  _BOOL4 v67;
  _BOOL4 v68;

  v6 = (uint64_t **)a2;
  v7 = result;
  v8 = (uint64_t **)(result + 1);
  if (result + 1 != (uint64_t *)a2)
  {
    v9 = *(char *)(a2 + 55);
    v10 = *((char *)a3 + 23);
    if (v10 >= 0)
      v11 = *((unsigned __int8 *)a3 + 23);
    else
      v11 = (size_t)a3[1];
    if (v10 >= 0)
      v12 = a3;
    else
      v12 = *a3;
    if (v9 >= 0)
      v13 = *(unsigned __int8 *)(a2 + 55);
    else
      v13 = *(_QWORD *)(a2 + 40);
    if (v9 >= 0)
      v14 = (const void *)(a2 + 32);
    else
      v14 = *(const void **)(a2 + 32);
    if (v13 >= v11)
      v15 = v11;
    else
      v15 = v13;
    result = (uint64_t *)memcmp(v12, v14, v15);
    v16 = v11 < v13;
    if ((_DWORD)result)
      v16 = (int)result < 0;
    if (!v16)
    {
      result = (uint64_t *)memcmp(v14, v12, v15);
      v20 = v13 < v11;
      if ((_DWORD)result)
        v20 = (int)result < 0;
      if (v20)
      {
        v22 = v6 + 1;
        v21 = v6[1];
        if (v21)
        {
          do
          {
            v22 = (uint64_t **)v21;
            v21 = (uint64_t *)*v21;
            v6 = v22;
            v23 = v22;
          }
          while (v21);
        }
        else
        {
          v23 = v6;
          do
          {
            v46 = (uint64_t *)v23;
            v23 = (uint64_t **)v23[2];
          }
          while (*v23 != v46);
        }
        if (v23 == v8)
          goto LABEL_96;
        v49 = v23[4];
        v47 = (uint64_t *)(v23 + 4);
        v48 = v49;
        v50 = *((char *)v47 + 23);
        if (v50 >= 0)
          v51 = *((unsigned __int8 *)v47 + 23);
        else
          v51 = v47[1];
        if (v50 >= 0)
          v52 = v47;
        else
          v52 = v48;
        if (v51 >= v11)
          v53 = v11;
        else
          v53 = v51;
        v54 = memcmp(v12, v52, v53);
        v55 = v11 < v51;
        if (v54)
          v55 = v54 < 0;
        if (v55)
          goto LABEL_96;
        v56 = *v8;
        v22 = v8;
        v6 = v8;
        if (!*v8)
          goto LABEL_96;
        while (1)
        {
          while (1)
          {
            v6 = (uint64_t **)v56;
            v61 = (const void *)v56[4];
            v59 = v56 + 4;
            v60 = v61;
            v62 = *((char *)v59 + 23);
            if (v62 >= 0)
              v63 = *((unsigned __int8 *)v59 + 23);
            else
              v63 = v59[1];
            if (v62 >= 0)
              v64 = v59;
            else
              v64 = v60;
            if (v63 >= v11)
              v65 = v11;
            else
              v65 = v63;
            v66 = memcmp(v12, v64, v65);
            v67 = v11 < v63;
            if (v66)
              v67 = v66 < 0;
            if (!v67)
              break;
            v56 = *v6;
            v22 = v6;
            if (!*v6)
              goto LABEL_96;
          }
          result = (uint64_t *)memcmp(v64, v12, v65);
          v68 = v63 < v11;
          if ((_DWORD)result)
            v68 = (int)result < 0;
          if (!v68)
            break;
          v56 = v6[1];
          if (!v56)
          {
LABEL_79:
            v22 = v6 + 1;
            goto LABEL_96;
          }
        }
      }
      return result;
    }
  }
  v17 = *v6;
  if ((uint64_t **)*v7 == v6)
  {
    v19 = v6;
  }
  else
  {
    if (v17)
    {
      v18 = *v6;
      do
      {
        v19 = (uint64_t **)v18;
        v18 = (uint64_t *)v18[1];
      }
      while (v18);
    }
    else
    {
      v24 = v6;
      do
      {
        v19 = (uint64_t **)v24[2];
        v25 = *v19 == (uint64_t *)v24;
        v24 = v19;
      }
      while (v25);
    }
    v26 = *((char *)a3 + 23);
    v27 = *((char *)v19 + 55);
    if (v27 >= 0)
      v28 = *((unsigned __int8 *)v19 + 55);
    else
      v28 = (size_t)v19[5];
    if (v27 >= 0)
      v29 = (uint64_t *)(v19 + 4);
    else
      v29 = v19[4];
    if (v26 >= 0)
      v30 = *((unsigned __int8 *)a3 + 23);
    else
      v30 = (size_t)a3[1];
    if (v26 >= 0)
      v31 = a3;
    else
      v31 = *a3;
    if (v30 >= v28)
      v32 = v28;
    else
      v32 = v30;
    result = (uint64_t *)memcmp(v29, v31, v32);
    v33 = v28 < v30;
    if ((_DWORD)result)
      v33 = (int)result < 0;
    if (!v33)
    {
      v35 = *v8;
      v22 = v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_96;
      while (1)
      {
        while (1)
        {
          v6 = (uint64_t **)v35;
          v38 = (const void *)v35[4];
          v36 = v35 + 4;
          v37 = v38;
          v39 = *((char *)v36 + 23);
          if (v39 >= 0)
            v40 = *((unsigned __int8 *)v36 + 23);
          else
            v40 = v36[1];
          if (v39 >= 0)
            v41 = v36;
          else
            v41 = v37;
          if (v40 >= v30)
            v42 = v30;
          else
            v42 = v40;
          v43 = memcmp(v31, v41, v42);
          v44 = v30 < v40;
          if (v43)
            v44 = v43 < 0;
          if (!v44)
            break;
          v35 = *v6;
          v22 = v6;
          if (!*v6)
            goto LABEL_96;
        }
        result = (uint64_t *)memcmp(v41, v31, v42);
        v45 = v40 < v30;
        if ((_DWORD)result)
          v45 = (int)result < 0;
        if (!v45)
          return result;
        v35 = v6[1];
        if (!v35)
          goto LABEL_79;
      }
    }
  }
  if (v17)
    v34 = v19;
  else
    v34 = v6;
  if (v17)
    v22 = v19 + 1;
  else
    v22 = v6;
  if (!*v22)
  {
    v6 = v34;
LABEL_96:
    v57 = (uint64_t *)operator new(0x50uLL);
    sub_1B0379220(v57 + 4, a4);
    *v57 = 0;
    v57[1] = 0;
    v57[2] = (uint64_t)v6;
    *v22 = v57;
    v58 = *(_QWORD *)*v7;
    if (v58)
    {
      *v7 = v58;
      v57 = *v22;
    }
    result = sub_1B02D8180((uint64_t *)v7[1], v57);
    ++v7[2];
  }
  return result;
}

void sub_1B037970C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0379720(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*((_BYTE *)a1 + 16))
    {
      v3 = *(void **)(v2 + 56);
      if (v3)
      {
        *(_QWORD *)(v2 + 64) = v3;
        operator delete(v3);
      }
      if (*(char *)(v2 + 55) < 0)
        operator delete(*(void **)(v2 + 32));
    }
    operator delete((void *)v2);
  }
  return a1;
}

void sub_1B037977C(uint64_t a1, __int128 *a2, __int128 *a3)
{
  __int128 *v3;
  __int128 *v4;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  __int128 *v11;
  __int128 *v12;
  char *v13;
  char *v14;
  _BYTE *v15;
  size_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char **v22;
  char *v23;
  char *v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  void *v28;
  uint64_t *v29;
  uint64_t **v30;
  uint64_t *v31;
  uint64_t **v32;
  int v33;
  size_t v34;
  const void *v35;
  _QWORD *v36;
  const void *v37;
  const void *v38;
  int v39;
  size_t v40;
  const void *v41;
  size_t v42;
  int v43;
  _BOOL4 v44;
  uint64_t v45;
  char *v46;
  __int128 *v47;
  BOOL v48;
  char *v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t *v54;
  uint64_t **v55;
  uint64_t **v56;
  int v57;
  size_t v58;
  const void *v59;
  _QWORD *v60;
  const void *v61;
  const void *v62;
  int v63;
  size_t v64;
  const void *v65;
  size_t v66;
  int v67;
  _BOOL4 v68;
  uint64_t v69;
  __int128 *v70;
  __int128 *v71;
  char *i;
  char *v73;
  uint64_t **v74;
  char *v76;
  uint64_t *v77;

  v3 = a3;
  v4 = a2;
  if (!*(_QWORD *)(a1 + 16))
    goto LABEL_81;
  v6 = *(uint64_t **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = a1 + 8;
  *(_QWORD *)(v7 + 16) = 0;
  v74 = (uint64_t **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v8 = v6[1] ? (char *)v6[1] : (char *)v6;
  v77 = (uint64_t *)v8;
  if (!v8)
    goto LABEL_81;
  v9 = (char *)*((_QWORD *)v8 + 2);
  if (v9)
  {
    v10 = *(char **)v9;
    if (*(char **)v9 == v8)
    {
      *(_QWORD *)v9 = 0;
      while (1)
      {
        v73 = (char *)*((_QWORD *)v9 + 1);
        if (!v73)
          break;
        do
        {
          v9 = v73;
          v73 = *(char **)v73;
        }
        while (v73);
      }
    }
    else
    {
      for (*((_QWORD *)v9 + 1) = 0; v10; v10 = (char *)*((_QWORD *)v9 + 1))
      {
        do
        {
          v9 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
    }
  }
  v76 = v9;
  if (a2 == a3)
  {
    v50 = a1;
    sub_1B03711E4(a1, v8);
    if (v9)
      goto LABEL_116;
LABEL_81:
    if (v4 == v3)
      return;
    goto LABEL_82;
  }
  v11 = a2;
  do
  {
    v12 = v3;
    std::string::operator=((std::string *)(v8 + 32), (const std::string *)(v11 + 2));
    if (v8 == (char *)v11)
      goto LABEL_35;
    v13 = (char *)*((_QWORD *)v8 + 7);
    v14 = (char *)*((_QWORD *)v11 + 7);
    v15 = (_BYTE *)*((_QWORD *)v11 + 8);
    v16 = v15 - v14;
    v17 = (v15 - v14) >> 2;
    v18 = *((_QWORD *)v8 + 9);
    if (v17 > (v18 - (uint64_t)v13) >> 2)
    {
      if (v13)
      {
        *((_QWORD *)v8 + 8) = v13;
        operator delete(v13);
        v18 = 0;
        *((_QWORD *)v8 + 7) = 0;
        *((_QWORD *)v8 + 8) = 0;
        *((_QWORD *)v8 + 9) = 0;
      }
      if ((v16 & 0x8000000000000000) != 0)
        goto LABEL_124;
      v19 = v18 >> 1;
      if (v18 >> 1 <= v17)
        v19 = (v15 - v14) >> 2;
      v20 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL ? 0x3FFFFFFFFFFFFFFFLL : v19;
      if (v20 >> 62)
LABEL_124:
        sub_1B02D7758();
      v21 = (char *)operator new(4 * v20);
      v13 = v21;
      *((_QWORD *)v8 + 8) = v21;
      v22 = (char **)(v8 + 64);
      *(v22 - 1) = v21;
      v22[1] = &v21[4 * v20];
      if (v15 != v14)
        memcpy(v21, v14, v15 - v14);
      goto LABEL_34;
    }
    v24 = (char *)*((_QWORD *)v8 + 8);
    v22 = (char **)(v8 + 64);
    v23 = v24;
    v25 = v24 - v13;
    v26 = (v24 - v13) >> 2;
    if (v26 < v17)
    {
      if (v23 != v13)
      {
        memmove(v13, *((const void **)v11 + 7), v25);
        v13 = *v22;
      }
      v27 = &v14[4 * v26];
      v16 = v15 - v27;
      if (v15 == v27)
        goto LABEL_34;
      v28 = v13;
      goto LABEL_33;
    }
    if (v15 != v14)
    {
      v28 = v13;
      v27 = (char *)*((_QWORD *)v11 + 7);
LABEL_33:
      memmove(v28, v27, v16);
    }
LABEL_34:
    *v22 = &v13[v16];
LABEL_35:
    v29 = v77;
    v30 = v74;
    v31 = *v74;
    v32 = v74;
    if (!*v74)
    {
LABEL_56:
      *v77 = 0;
      v77[1] = 0;
      v77[2] = (uint64_t)v32;
      *v30 = v77;
      v45 = **(_QWORD **)a1;
      if (!v45)
        goto LABEL_58;
LABEL_57:
      *(_QWORD *)a1 = v45;
      v29 = *v30;
      goto LABEL_58;
    }
    v33 = *((char *)v77 + 55);
    if (v33 >= 0)
      v34 = *((unsigned __int8 *)v77 + 55);
    else
      v34 = v77[5];
    if (v33 >= 0)
      v35 = v77 + 4;
    else
      v35 = (const void *)v77[4];
    do
    {
      while (1)
      {
        v32 = (uint64_t **)v31;
        v38 = (const void *)v31[4];
        v36 = v31 + 4;
        v37 = v38;
        v39 = *((char *)v36 + 23);
        if (v39 >= 0)
          v40 = *((unsigned __int8 *)v36 + 23);
        else
          v40 = v36[1];
        if (v39 >= 0)
          v41 = v36;
        else
          v41 = v37;
        if (v40 >= v34)
          v42 = v34;
        else
          v42 = v40;
        v43 = memcmp(v35, v41, v42);
        v44 = v34 < v40;
        if (v43)
          v44 = v43 < 0;
        if (!v44)
          break;
        v31 = *v32;
        v30 = v32;
        if (!*v32)
          goto LABEL_56;
      }
      v31 = v32[1];
    }
    while (v31);
    v30 = v32 + 1;
    *v77 = 0;
    v77[1] = 0;
    v77[2] = (uint64_t)v32;
    v32[1] = v77;
    v45 = **(_QWORD **)a1;
    if (v45)
      goto LABEL_57;
LABEL_58:
    sub_1B02D8180(*(uint64_t **)(a1 + 8), v29);
    ++*(_QWORD *)(a1 + 16);
    v8 = v76;
    v77 = (uint64_t *)v76;
    v3 = v12;
    if (v76)
    {
      v9 = (char *)*((_QWORD *)v76 + 2);
      if (v9)
      {
        v46 = *(char **)v9;
        if (*(char **)v9 == v76)
        {
          *(_QWORD *)v9 = 0;
          while (1)
          {
            v49 = (char *)*((_QWORD *)v9 + 1);
            if (!v49)
              break;
            do
            {
              v9 = v49;
              v49 = *(char **)v49;
            }
            while (v49);
          }
        }
        else
        {
          for (*((_QWORD *)v9 + 1) = 0; v46; v46 = (char *)*((_QWORD *)v9 + 1))
          {
            do
            {
              v9 = v46;
              v46 = *(char **)v46;
            }
            while (v46);
          }
        }
      }
      v76 = v9;
      v47 = (__int128 *)*((_QWORD *)v11 + 1);
      if (!v47)
      {
        do
        {
LABEL_69:
          v4 = (__int128 *)*((_QWORD *)v11 + 2);
          v48 = *(_QWORD *)v4 == (_QWORD)v11;
          v11 = v4;
        }
        while (!v48);
        goto LABEL_71;
      }
    }
    else
    {
      v9 = 0;
      v47 = (__int128 *)*((_QWORD *)v11 + 1);
      if (!v47)
        goto LABEL_69;
    }
    do
    {
      v4 = v47;
      v47 = *(__int128 **)v47;
    }
    while (v47);
LABEL_71:
    if (!v8)
      break;
    v11 = v4;
  }
  while (v4 != v12);
  v50 = a1;
  sub_1B03711E4(a1, v8);
  if (!v9)
    goto LABEL_81;
LABEL_116:
  for (i = (char *)*((_QWORD *)v9 + 2); i; i = (char *)*((_QWORD *)i + 2))
    v9 = i;
  sub_1B03711E4(v50, v9);
  if (v4 != v3)
  {
LABEL_82:
    v51 = (uint64_t **)(a1 + 8);
    while (1)
    {
      v52 = (uint64_t *)operator new(0x50uLL);
      v53 = sub_1B0379220(v52 + 4, v4 + 2);
      v54 = *v51;
      v55 = (uint64_t **)(a1 + 8);
      v56 = (uint64_t **)(a1 + 8);
      if (*v51)
        break;
LABEL_105:
      *v52 = 0;
      v52[1] = 0;
      v52[2] = (uint64_t)v55;
      *v56 = v52;
      v69 = **(_QWORD **)a1;
      if (v69)
        goto LABEL_106;
LABEL_107:
      sub_1B02D8180(*(uint64_t **)(a1 + 8), v52);
      ++*(_QWORD *)(a1 + 16);
      v70 = (__int128 *)*((_QWORD *)v4 + 1);
      if (v70)
      {
        do
        {
          v71 = v70;
          v70 = *(__int128 **)v70;
        }
        while (v70);
      }
      else
      {
        do
        {
          v71 = (__int128 *)*((_QWORD *)v4 + 2);
          v48 = *(_QWORD *)v71 == (_QWORD)v4;
          v4 = v71;
        }
        while (!v48);
      }
      v4 = v71;
      if (v71 == v3)
        return;
    }
    v57 = *((char *)v52 + 55);
    if (v57 >= 0)
      v58 = *((unsigned __int8 *)v52 + 55);
    else
      v58 = v52[5];
    if (v57 >= 0)
      v59 = v53;
    else
      v59 = (const void *)v52[4];
    do
    {
      while (1)
      {
        v55 = (uint64_t **)v54;
        v62 = (const void *)v54[4];
        v60 = v54 + 4;
        v61 = v62;
        v63 = *((char *)v60 + 23);
        if (v63 >= 0)
          v64 = *((unsigned __int8 *)v60 + 23);
        else
          v64 = v60[1];
        if (v63 >= 0)
          v65 = v60;
        else
          v65 = v61;
        if (v64 >= v58)
          v66 = v58;
        else
          v66 = v64;
        v67 = memcmp(v59, v65, v66);
        v68 = v58 < v64;
        if (v67)
          v68 = v67 < 0;
        if (!v68)
          break;
        v54 = *v55;
        v56 = v55;
        if (!*v55)
          goto LABEL_105;
      }
      v54 = v55[1];
    }
    while (v54);
    v56 = v55 + 1;
    *v52 = 0;
    v52[1] = 0;
    v52[2] = (uint64_t)v55;
    v55[1] = v52;
    v69 = **(_QWORD **)a1;
    if (!v69)
      goto LABEL_107;
LABEL_106:
    *(_QWORD *)a1 = v69;
    v52 = *v56;
    goto LABEL_107;
  }
}

void sub_1B0379CC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0379D04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0379CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0379D04((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0379CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0379720((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0379D04(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  sub_1B03711E4(*(_QWORD *)a1, *(char **)(a1 + 16));
  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 16);
    if (v3)
    {
      do
      {
        v2 = v3;
        v3 = *(_QWORD *)(v3 + 16);
      }
      while (v3);
      *(_QWORD *)(a1 + 8) = v2;
    }
    sub_1B03711E4(*(_QWORD *)a1, (char *)v2);
  }
  return a1;
}

_QWORD *sub_1B0379D58(_QWORD *__dst, __int128 *a2)
{
  __int128 v4;
  _BYTE *v5;
  _BYTE *v6;
  int64_t v7;
  _BYTE *v9;
  char *v10;
  char *v11;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v9 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v9 - v6;
    if (v9 == v6)
      return __dst;
  }
  else
  {
    v4 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    __dst[3] = 0;
    __dst[4] = 0;
    __dst[5] = 0;
    v6 = (_BYTE *)*((_QWORD *)a2 + 3);
    v5 = (_BYTE *)*((_QWORD *)a2 + 4);
    v7 = v5 - v6;
    if (v5 == v6)
      return __dst;
  }
  if (v7 < 0)
    sub_1B02D7758();
  v10 = (char *)operator new(v7);
  __dst[3] = v10;
  __dst[4] = v10;
  v11 = &v10[8 * (v7 >> 3)];
  __dst[5] = v11;
  memcpy(v10, v6, v7);
  __dst[4] = v11;
  return __dst;
}

void sub_1B0379E24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 32) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_1B0379E60(char *a1)
{
  void *v2;

  if (a1)
  {
    sub_1B0379E60(*(_QWORD *)a1);
    sub_1B0379E60(*((_QWORD *)a1 + 1));
    v2 = (void *)*((_QWORD *)a1 + 7);
    if (v2)
    {
      *((_QWORD *)a1 + 8) = v2;
      operator delete(v2);
    }
    if (a1[55] < 0)
      operator delete(*((void **)a1 + 4));
    operator delete(a1);
  }
}

uint64_t *sub_1B0379EC8(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  size_t v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  const void *v12;
  const void *v13;
  int v14;
  size_t v15;
  const void *v16;
  size_t v17;
  int v18;
  _BOOL4 v19;
  int v20;
  _BOOL4 v21;
  uint64_t *v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    v7 = *((char *)a2 + 23);
    if (v7 >= 0)
      v8 = *((unsigned __int8 *)a2 + 23);
    else
      v8 = (size_t)a2[1];
    if (v7 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    do
    {
      while (1)
      {
        v10 = (uint64_t **)v5;
        v13 = (const void *)v5[4];
        v11 = v5 + 4;
        v12 = v13;
        v14 = *((char *)v11 + 23);
        if (v14 >= 0)
          v15 = *((unsigned __int8 *)v11 + 23);
        else
          v15 = v11[1];
        if (v14 >= 0)
          v16 = v11;
        else
          v16 = v12;
        if (v15 >= v8)
          v17 = v8;
        else
          v17 = v15;
        v18 = memcmp(v9, v16, v17);
        v19 = v8 < v15;
        if (v18)
          v19 = v18 < 0;
        if (!v19)
          break;
        v5 = *v10;
        v6 = v10;
        if (!*v10)
          goto LABEL_26;
      }
      v20 = memcmp(v16, v9, v17);
      v21 = v15 < v8;
      if (v20)
        v21 = v20 < 0;
      if (!v21)
        return (uint64_t *)v10;
      v5 = v10[1];
    }
    while (v5);
    v6 = v10 + 1;
LABEL_26:
    v22 = (uint64_t *)operator new(0x50uLL);
    v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
      goto LABEL_29;
  }
  else
  {
    v10 = a1 + 1;
    v22 = (uint64_t *)operator new(0x50uLL);
    v23 = v22 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
LABEL_29:
      sub_1B02EB0A8(v23, *(void **)a3, *(_QWORD *)(a3 + 8));
      goto LABEL_30;
    }
  }
  *(_OWORD *)v23 = *(_OWORD *)a3;
  v23[2] = *(_QWORD *)(a3 + 16);
LABEL_30:
  v22[7] = 0;
  v22[8] = 0;
  v22[9] = 0;
  *v22 = 0;
  v22[1] = 0;
  v22[2] = (uint64_t)v10;
  *v6 = v22;
  v24 = (uint64_t *)**a1;
  v25 = v22;
  if (v24)
  {
    *a1 = v24;
    v25 = *v6;
  }
  sub_1B02D8180(a1[1], v25);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v22;
}

void sub_1B037A05C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B037A070(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  _BOOL4 v6;
  _BOOL4 v7;
  _BOOL4 v8;
  _BOOL4 v9;
  std::runtime_error *exception;
  _QWORD *v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  std::string::size_type size;
  std::string *v17;
  std::string::size_type v18;
  std::string *v19;
  uint64_t v20;
  std::string v21;
  std::string __dst;
  std::string v23;
  std::string __p;
  uint64_t v25;
  _QWORD *v26;
  std::string v27;
  void *v28;
  std::string v29;

  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "vocab.txt");
  sub_1B0320384(a1, (char *)&__p, &v28);
  v6 = sub_1B0317690((uint64_t)&v28);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_3:
      if (v6)
        goto LABEL_4;
LABEL_9:
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 19;
      strcpy((char *)&__p, "sentencepiece.model");
      sub_1B0320384(a1, (char *)&__p, &v28);
      v7 = sub_1B0317690((uint64_t)&v28);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v29.__r_.__value_.__l.__data_);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_11:
          if (v7)
            goto LABEL_12;
          goto LABEL_25;
        }
      }
      else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
        goto LABEL_11;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v7)
      {
LABEL_12:
        *((_BYTE *)&v27.__r_.__value_.__s + 23) = 19;
        strcpy((char *)&v27, "sentencepiece.model");
        sub_1B0320384(a1, (char *)&v27, &v28);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1B02EB0A8(&__p, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
          if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v29.__r_.__value_.__l.__data_);
            if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_32;
          }
          else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
            goto LABEL_32;
          }
        }
        else
        {
          __p = v29;
          if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          {
LABEL_32:
            v13 = operator new();
            sub_1B03643B0(v13, (uint64_t)&__p);
            *a3 = v13;
            if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              return;
            v14 = (void *)__p.__r_.__value_.__r.__words[0];
            goto LABEL_74;
          }
        }
        operator delete(v27.__r_.__value_.__l.__data_);
        goto LABEL_32;
      }
LABEL_25:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Unable to find vocab file.");
      __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  else if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v6)
    goto LABEL_9;
LABEL_4:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 9;
  strcpy((char *)&__p, "vocab.txt");
  sub_1B0320384(a1, (char *)&__p, &v28);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    __dst = v29;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
    goto LABEL_6;
  }
  sub_1B02EB0A8(&__dst, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_17;
LABEL_6:
    operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_17;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_6;
LABEL_17:
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "special_map.txt");
  sub_1B0320384(a1, (char *)&__p, &v28);
  v8 = sub_1B0317690((uint64_t)&v28);
  v9 = v8;
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (v8)
      goto LABEL_19;
LABEL_27:
    *((_BYTE *)&v21.__r_.__value_.__s + 23) = 0;
    v21.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_28;
    goto LABEL_37;
  }
  operator delete(v29.__r_.__value_.__l.__data_);
  if (!v9)
    goto LABEL_27;
LABEL_19:
  *((_BYTE *)&v27.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&v27, "special_map.txt");
  sub_1B0320384(a1, (char *)&v27, &v28);
  if ((SHIBYTE(v29.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v21 = v29;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_21;
    goto LABEL_36;
  }
  sub_1B02EB0A8(&v21, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_36:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        goto LABEL_28;
LABEL_37:
      if (a2 == 2)
        goto LABEL_29;
      goto LABEL_38;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_36;
  }
LABEL_21:
  operator delete(v27.__r_.__value_.__l.__data_);
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_37;
LABEL_28:
  operator delete(__p.__r_.__value_.__l.__data_);
  if (a2 == 2)
  {
LABEL_29:
    v11 = (_QWORD *)operator new();
    v12 = (char *)&unk_1E60CCD48;
LABEL_40:
    *v11 = v12 + 16;
    goto LABEL_42;
  }
LABEL_38:
  if (a2 == 1)
  {
    v11 = (_QWORD *)operator new();
    v12 = (char *)&unk_1E60CCCA8;
    goto LABEL_40;
  }
  v11 = 0;
LABEL_42:
  v15 = operator new();
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&v27, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    v27 = __dst;
  memset(&v29, 0, sizeof(v29));
  size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v17 = &v27;
  else
    v17 = (std::string *)v27.__r_.__value_.__r.__words[0];
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v27.__r_.__value_.__l.__size_;
  sub_1B02ECD44(&v29, (char *)v17, (char *)v17 + size);
  v28 = &unk_1E60CCEF8;
  v26 = v11;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&v23, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    v23 = v21;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v25 = 0;
  v18 = HIBYTE(v23.__r_.__value_.__r.__words[2]);
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v19 = &v23;
  else
    v19 = (std::string *)v23.__r_.__value_.__r.__words[0];
  if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v18 = v23.__r_.__value_.__l.__size_;
  sub_1B02ECD44((std::string *)&__p.__r_.__value_.__r.__words[1], (char *)v19, (char *)v19 + v18);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E60CCEF8;
  sub_1B03614EC(v15, (uint64_t)&v28, (uint64_t *)&v26, (uint64_t)&__p);
  if (SHIBYTE(v25) < 0)
  {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
    if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_60:
      v20 = (uint64_t)v26;
      if (!v26)
        goto LABEL_62;
      goto LABEL_61;
    }
  }
  else if ((SHIBYTE(v23.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_60;
  }
  operator delete(v23.__r_.__value_.__l.__data_);
  v20 = (uint64_t)v26;
  if (v26)
LABEL_61:
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
LABEL_62:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v29.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_64:
      *a3 = v15;
      if ((SHIBYTE(v21.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_65;
LABEL_72:
      operator delete(v21.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v27.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_64;
  }
  operator delete(v27.__r_.__value_.__l.__data_);
  *a3 = v15;
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_72;
LABEL_65:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
LABEL_73:
  v14 = (void *)__dst.__r_.__value_.__r.__words[0];
LABEL_74:
  operator delete(v14);
}

void sub_1B037A64C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,void *a33,int a34,__int16 a35,char a36,char a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  if (*(char *)(v41 - 65) < 0)
    operator delete(*(void **)(v41 - 88));
  if (*(char *)(v41 - 105) < 0)
    operator delete(*(void **)(v41 - 128));
  if (a37 < 0)
    operator delete(__p);
  if (a23 < 0)
  {
    operator delete(a18);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_1B037A84C(double a1, double a2)
{
  double v2;
  double v3;
  long double v4;

  v2 = fmax(a1, a2);
  v3 = fmin(a1, a2);
  if (v3 >= -1021.0)
  {
    v4 = exp(v3 - v2);
    return log1p(v4) + v2;
  }
  return v2;
}

double sub_1B037A894(double a1, double a2)
{
  return fmax(a1, a2);
}

void sub_1B037A904(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B037A9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B037A9E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B037A9F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B037AA90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B037AAA8(uint64_t a1, void *a2, void *a3)
{
  id v5;
  void *v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  id v17;

  v17 = a2;
  v5 = a3;
  v6 = *(void **)(a1 + 32);
  v7 = (void *)MEMORY[0x1E0CB3940];
  objc_msgSend_normalizedTotalLogProbability(v5, v8, v9, v10);
  objc_msgSend_stringWithFormat_(v7, v11, (uint64_t)CFSTR("\t%@ : %.2f\n"), v12, v17, v13);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_appendString_(v6, v15, (uint64_t)v14, v16);

}

void sub_1B037AB34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B037AB50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B037AC14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{

  _Unwind_Resume(a1);
}

uint64_t sub_1B037AC30(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

void sub_1B037B2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;
  void *v31;

  _Block_object_dispose(&a23, 8);
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

__n128 sub_1B037B328(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B037B34C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1B037B364(uint64_t a1, void *a2, void *a3)
{
  id v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  _BYTE *v20;
  _QWORD *v21;
  char *v22;
  int64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _OWORD *v28;
  char *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  id v33;

  v33 = a2;
  v5 = a3;
  v6 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  objc_msgSend_normalizedTotalLogProbability(v5, v7, v8, v9);
  v11 = v10;
  v13 = (char *)v6[7];
  v12 = v6[8];
  if ((unint64_t)v13 < v12)
  {
    *(_QWORD *)v13 = v10;
    v14 = (uint64_t)(v13 + 8);
    goto LABEL_22;
  }
  v15 = (char *)v6[6];
  v16 = (v13 - v15) >> 3;
  v17 = v16 + 1;
  if ((unint64_t)(v16 + 1) >> 61)
    sub_1B02D7758();
  v18 = v12 - (_QWORD)v15;
  if (v18 >> 2 > v17)
    v17 = v18 >> 2;
  if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
    v19 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v19 = v17;
  if (v19)
  {
    if (v19 >> 61)
      sub_1B02D72AC();
    v20 = operator new(8 * v19);
    v21 = &v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v11;
    v14 = (uint64_t)(v21 + 1);
    v23 = v13 - v15;
    if (v13 == v15)
      goto LABEL_20;
    goto LABEL_14;
  }
  v20 = 0;
  v21 = (_QWORD *)(8 * v16);
  v22 = 0;
  *(_QWORD *)(8 * v16) = v10;
  v14 = 8 * v16 + 8;
  v23 = v13 - v15;
  if (v13 != v15)
  {
LABEL_14:
    v24 = v23 - 8;
    if (v24 < 0x58)
      goto LABEL_27;
    if ((unint64_t)(v15 - v20) < 0x20)
      goto LABEL_27;
    v25 = (v24 >> 3) + 1;
    v26 = 8 * (v25 & 0x3FFFFFFFFFFFFFFCLL);
    v27 = &v13[-v26];
    v21 = (_QWORD *)((char *)v21 - v26);
    v28 = &v20[8 * v16 - 16];
    v29 = v13 - 16;
    v30 = v25 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v31 = *(_OWORD *)v29;
      *(v28 - 1) = *((_OWORD *)v29 - 1);
      *v28 = v31;
      v28 -= 2;
      v29 -= 32;
      v30 -= 4;
    }
    while (v30);
    v13 = v27;
    if (v25 != (v25 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_27:
      do
      {
        v32 = *((_QWORD *)v13 - 1);
        v13 -= 8;
        *--v21 = v32;
      }
      while (v13 != v15);
    }
  }
LABEL_20:
  v6[6] = v21;
  v6[7] = v14;
  v6[8] = v22;
  if (v15)
    operator delete(v15);
LABEL_22:
  v6[7] = v14;

}

void sub_1B037B514(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B037B52C(uint64_t a1, uint64_t a2, void *a3)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  double v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  const void *Copy;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  const char *v26;
  uint64_t v27;
  id v28;

  v28 = a3;
  objc_msgSend_normalizedTotalLogProbability(v28, v4, v5, v6);
  if (v9 >= *(double *)(a1 + 48))
  {
    objc_msgSend_addPath_(*(void **)(a1 + 32), v7, (uint64_t)v28, v8);
    if (*(_BYTE *)(a1 + 56))
    {
      v16 = objc_msgSend_characterLMState(v28, v10, v11, v12);
      if (v16)
      {
        if (objc_msgSend_hasExpanded(v28, v13, v14, v15))
        {
          objc_msgSend_latestExpandedSymbol(v28, v17, v18, v19);
          v20 = (void *)objc_claimAutoreleasedReturnValue();

          if (v20)
          {
            Copy = (const void *)CVNLPLanguageModelWithStateCreateCopy(v16);
            objc_msgSend_latestExpandedSymbol(v28, v22, v23, v24);
            v25 = (void *)objc_claimAutoreleasedReturnValue();
            CVNLPLanguageModelWithStateUpdateWithContext((uint64_t)Copy, v25);

            objc_msgSend_setCharacterLMState_(v28, v26, (uint64_t)Copy, v27);
            CFRelease(Copy);
          }
        }
      }
    }
  }
  else
  {
    objc_msgSend_addPath_(*(void **)(a1 + 40), v7, (uint64_t)v28, v8);
  }

}

void sub_1B037B604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B037B61C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B037B630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B037B644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B037B658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B037B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B037BA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

uint64_t CVNLPCaptionHandlerCreate(void *a1)
{
  id v1;
  uint64_t Instance;

  v1 = a1;
  if (qword_1ED5379B0 != -1)
    dispatch_once(&qword_1ED5379B0, &unk_1E60CDB68);
  Instance = _CFRuntimeCreateInstance();
  sub_1B036B454(Instance + 16, v1);

  return Instance;
}

uint64_t sub_1B037BB88(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = objc_begin_catch(a1);
  objc_msgSend_userInfo(v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1EEEB1C88, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    *v2 = v13;

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCreateForImage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1B036B458(a1 + 16, a2, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CVNLPCaptions, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_copy(v7, v8, v9, v10);

  return v11;
}

uint64_t sub_1B037BC8C(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v6;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;

  v6 = v4;

  if (a2 != 1)
    _Unwind_Resume(a1);
  v8 = objc_begin_catch(a1);
  objc_msgSend_userInfo(v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)off_1EEEB1C88, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    *v2 = v15;

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyForImage(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1B036B458(a1 + 16, a2, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_copy(v4, v5, v6, v7);

  return v8;
}

uint64_t sub_1B037BD94(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = objc_begin_catch(a1);
  objc_msgSend_userInfo(v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1EEEB1C88, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    *v2 = v13;

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyForVideo(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  id v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  float v19;
  float v20;
  double v21;
  id v22;
  const char *v23;
  uint64_t v24;
  void *v25;
  __int128 *v26;
  const char *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  double v36;
  double v37;
  uint64_t *v38;
  double v39;
  double v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  CGImage *v44;
  id v45;
  size_t Width;
  size_t Height;
  void *v48;
  objc_class *v49;
  id v50;
  const char *v51;
  void *v52;
  const char *v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t *v57;
  int64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  _BYTE *v63;
  char **v64;
  uint64_t v65;
  int64_t v66;
  unint64_t v67;
  uint64_t *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _OWORD *v73;
  uint64_t *v74;
  uint64_t v75;
  __int128 v76;
  void *v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  int timescale;
  void **v88;
  void *context;
  void *v90;
  id v91;
  CMTime v92;
  char v93[24];
  CMTime v94;
  void *__p;
  uint64_t v96;
  uint64_t *v97;
  CMTime time;
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  _QWORD v103[5];
  uint64_t v104;
  uint64_t *v105;
  uint64_t v106;
  uint64_t v107;

  objc_msgSend_fileURLWithPath_(MEMORY[0x1E0C99E98], a2, (uint64_t)a2, a4);
  v5 = objc_claimAutoreleasedReturnValue();
  v6 = objc_alloc(MEMORY[0x1E0C8B3C0]);
  v8 = (void *)objc_msgSend_initWithURL_options_(v6, v7, v5, 0);
  objc_msgSend_tracksWithMediaType_(v8, v9, *MEMORY[0x1E0C8A808], v10);
  v11 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_firstObject(v11, v12, v13, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  objc_msgSend_nominalFrameRate(v15, v16, v17, v18);
  v20 = v19;
  v21 = v19;
  NSLog(CFSTR("FPS is : %f "), v19);
  v22 = objc_alloc(MEMORY[0x1E0C8AFC8]);
  v25 = (void *)objc_msgSend_initWithAsset_(v22, v23, (uint64_t)v8, v24);
  v26 = (__int128 *)MEMORY[0x1E0CA2E68];
  v101 = *MEMORY[0x1E0CA2E68];
  v102 = *(_QWORD *)(MEMORY[0x1E0CA2E68] + 16);
  objc_msgSend_setRequestedTimeToleranceAfter_(v25, v27, (uint64_t)&v101, v28);
  v99 = *v26;
  v100 = *((_QWORD *)v26 + 2);
  objc_msgSend_setRequestedTimeToleranceBefore_(v25, v29, (uint64_t)&v99, v30);
  v83 = v8;
  v84 = (void *)v5;
  if (v8)
    objc_msgSend_duration(v8, v31, v32, v33);
  else
    memset(&time, 0, sizeof(time));
  v88 = (void **)(a1 + 16);
  v36 = CMTimeGetSeconds(&time) * v21;
  __p = 0;
  v96 = 0;
  v97 = 0;
  v37 = v36 + -1.0;
  if (v36 + -1.0 > 0.0)
  {
    v38 = 0;
    timescale = (int)v20;
    v39 = v36 * 0.0666666667;
    v40 = 0.0;
    v41 = MEMORY[0x1E0C9AA70];
    v85 = v15;
    v86 = v25;
    while (1)
    {
      v42 = MEMORY[0x1B5E08128]();
      memset(&v94, 0, sizeof(v94));
      CMTimeMake(&v94, (uint64_t)v40, timescale);
      v92 = v94;
      v91 = 0;
      v44 = (CGImage *)objc_msgSend_copyCGImageAtTime_actualTime_error_(v25, v43, (uint64_t)&v92, (uint64_t)v93, &v91);
      v45 = v91;
      Width = CGImageGetWidth(v44);
      Height = CGImageGetHeight(v44);
      v104 = 0;
      v105 = &v104;
      v106 = 0x2050000000;
      v48 = (void *)qword_1ED5379A0;
      v107 = qword_1ED5379A0;
      if (!qword_1ED5379A0)
      {
        v103[0] = MEMORY[0x1E0C809B0];
        v103[1] = 3221225472;
        v103[2] = sub_1B037ED04;
        v103[3] = &unk_1E60CDE98;
        v103[4] = &v104;
        sub_1B037ED04((uint64_t)v103);
        v48 = (void *)v105[3];
      }
      context = (void *)v42;
      v90 = v45;
      v49 = objc_retainAutorelease(v48);
      _Block_object_dispose(&v104, 8);
      v50 = [v49 alloc];
      v52 = (void *)objc_msgSend_initWithCGImage_orientation_options_(v50, v51, (uint64_t)v44, 1, v41);
      v54 = (char *)objc_msgSend_bufferWithWidth_height_format_options_error_(v52, v53, Width, Height, 1111970369, v41, 0);
      v55 = sub_1B036BB28((uint64_t)v88, v54);
      v56 = (char *)v55;
      if (v38 < v97)
      {
        *v38++ = v55;
        v96 = (uint64_t)v38;
        if (v54 == (char *)v55)
          goto LABEL_30;
LABEL_29:
        CVPixelBufferUnlockBaseAddress((CVPixelBufferRef)v54, 0);
        CFRelease(v54);
        goto LABEL_30;
      }
      v57 = (uint64_t *)__p;
      v58 = (char *)v38 - (_BYTE *)__p;
      v59 = ((char *)v38 - (_BYTE *)__p) >> 3;
      v60 = v59 + 1;
      if ((unint64_t)(v59 + 1) >> 61)
        sub_1B02D7758();
      v61 = (char *)v97 - (_BYTE *)__p;
      if (((char *)v97 - (_BYTE *)__p) >> 2 > v60)
        v60 = v61 >> 2;
      if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
        v62 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v62 = v60;
      if (v62)
      {
        if (v62 >> 61)
          sub_1B02D72AC();
        v63 = operator new(8 * v62);
        v64 = (char **)&v63[8 * v59];
        *v64 = v56;
        v65 = (uint64_t)(v64 + 1);
        v66 = (char *)v38 - (char *)v57;
        if (v38 == v57)
        {
LABEL_26:
          __p = v64;
          v96 = v65;
          v97 = (uint64_t *)&v63[8 * v62];
          if (!v38)
            goto LABEL_28;
LABEL_27:
          operator delete(v38);
          goto LABEL_28;
        }
      }
      else
      {
        v63 = 0;
        v64 = (char **)(8 * v59);
        *(_QWORD *)(8 * v59) = v56;
        v65 = 8 * v59 + 8;
        v66 = (char *)v38 - (char *)v57;
        if (v38 == v57)
          goto LABEL_26;
      }
      v67 = v66 - 8;
      if (v67 < 0x168)
      {
        v68 = v38;
        goto LABEL_22;
      }
      v70 = ((char *)(v38 - 1) - (char *)v57) & 0xFFFFFFFFFFFFFFF8;
      if (&v63[v58 - 8 - v70] > &v63[v58 - 8])
        break;
      if ((uint64_t *)((char *)v38 - v70 - 8) > v38 - 1)
      {
        v68 = v38;
        goto LABEL_22;
      }
      if ((unint64_t)((char *)v38 - v63 - v58) < 0x20)
      {
        v68 = v38;
        goto LABEL_22;
      }
      v71 = (v67 >> 3) + 1;
      v72 = 8 * (v71 & 0x3FFFFFFFFFFFFFFCLL);
      v68 = &v38[v72 / 0xFFFFFFFFFFFFFFF8];
      v64 = (char **)((char *)v64 - v72);
      v73 = &v63[8 * v59 - 16];
      v74 = v38 - 2;
      v75 = v71 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v76 = *(_OWORD *)v74;
        *(v73 - 1) = *((_OWORD *)v74 - 1);
        *v73 = v76;
        v73 -= 2;
        v74 -= 4;
        v75 -= 4;
      }
      while (v75);
      if (v71 != (v71 & 0x3FFFFFFFFFFFFFFCLL))
        goto LABEL_22;
LABEL_23:
      v38 = (uint64_t *)__p;
      __p = v64;
      v96 = v65;
      v97 = (uint64_t *)&v63[8 * v62];
      if (v38)
        goto LABEL_27;
LABEL_28:
      v38 = (uint64_t *)v65;
      v15 = v85;
      v96 = (uint64_t)v38;
      if (v54 != v56)
        goto LABEL_29;
LABEL_30:
      CGImageRelease(v44);

      objc_autoreleasePoolPop(context);
      v40 = v40 + v39;
      v25 = v86;
      v41 = MEMORY[0x1E0C9AA70];
      if (v40 >= v37)
        goto LABEL_42;
    }
    v68 = v38;
    do
    {
LABEL_22:
      v69 = (char *)*--v68;
      *--v64 = v69;
    }
    while (v68 != v57);
    goto LABEL_23;
  }
LABEL_42:
  sub_1B036C204(v88, (uint64_t)&__p, v34, v35);
  v77 = (void *)objc_claimAutoreleasedReturnValue();
  v81 = objc_msgSend_copy(v77, v78, v79, v80);

  if (__p)
  {
    v96 = (uint64_t)__p;
    operator delete(__p);
  }

  return v81;
}

void sub_1B037C36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30)
{
  void *v30;
  void *v31;
  void *v32;
  void *v33;
  void *v34;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

uint64_t CVNLPCaptionCreateForCVPixelBuffer(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  sub_1B036BC20(a1 + 16, a2, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v4, v5, (uint64_t)CVNLPCaptions, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = objc_msgSend_copy(v7, v8, v9, v10);

  return v11;
}

uint64_t sub_1B037C51C(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  void *v4;
  void *v6;
  id v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  void *v15;

  v6 = v4;

  if (a2 != 1)
    _Unwind_Resume(a1);
  v8 = objc_begin_catch(a1);
  objc_msgSend_userInfo(v8, v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v12, v13, (uint64_t)off_1EEEB1C88, v14);
  v15 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    *v2 = v15;

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyForCVPixelBuffer(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1B036BC20(a1 + 16, a2, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_copy(v4, v5, v6, v7);

  return v8;
}

uint64_t sub_1B037C624(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = objc_begin_catch(a1);
  objc_msgSend_userInfo(v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1EEEB1C88, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    *v2 = v13;

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyClassificationResults(uint64_t a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(id *)(a1 + 72);
  v5 = objc_msgSend_copy(v1, v2, v3, v4);

  return v5;
}

uint64_t sub_1B037C710(_Unwind_Exception *a1, int a2)
{
  _QWORD *v2;
  void *v3;
  id v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  const char *v11;
  uint64_t v12;
  void *v13;

  if (a2 != 1)
    _Unwind_Resume(a1);
  v6 = objc_begin_catch(a1);
  objc_msgSend_userInfo(v6, v7, v8, v9);
  v10 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v10, v11, (uint64_t)off_1EEEB1C88, v12);
  v13 = (void *)objc_claimAutoreleasedReturnValue();

  if (v2)
    *v2 = v13;

  objc_end_catch();
  return 0;
}

uint64_t CVNLPCaptionCopyPerformanceMetrics(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  sub_1B036C470((void **)(a1 + 16), a2, a3, a4);
  v4 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = objc_msgSend_copy(v4, v5, v6, v7);

  return v8;
}

void sub_1B037C7E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B037CDE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, void *a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,__int128 buf,uint64_t a29,int a30,__int16 a31,char a32,char a33,__int128 a34,int a35,__int16 a36,char a37,char a38)
{
  _QWORD *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  void *v45;
  void *v46;
  NSObject *v47;
  uint64_t v48;
  void *v49;
  void *v50;
  uint64_t v51;
  void *v52;
  void *v53;
  uint64_t v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  uint64_t v60;
  NSObject *v61;
  NSObject *v62;
  char *v63;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a23 < 0)
    operator delete(__p);

  sub_1B0320680((uint64_t)&a9);
  if (a33 < 0)
    operator delete(*((void **)&buf + 1));
  if (a38 < 0)
    operator delete((void *)a34);

  switch(a2)
  {
    case 6:
      v45 = __cxa_begin_catch(exception_object);
      v46 = v45;
      if (v38)
      {
        sub_1B037DFC8((uint64_t)v45);
        *v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v48 = (*(uint64_t (**)(void *))(*(_QWORD *)v46 + 16))(v46);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v48;
        _os_log_impl(&dword_1B02D2000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 5:
      v49 = __cxa_begin_catch(exception_object);
      v50 = v49;
      if (v38)
      {
        sub_1B037DF64((uint64_t)v49);
        *v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v51 = (*(uint64_t (**)(void *))(*(_QWORD *)v50 + 16))(v50);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v51;
        _os_log_impl(&dword_1B02D2000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 4:
      v52 = __cxa_begin_catch(exception_object);
      v53 = v52;
      if (v38)
      {
        sub_1B037DDA8((uint64_t)v52);
        *v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v54 = (*(uint64_t (**)(void *))(*(_QWORD *)v53 + 16))(v53);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v54;
        _os_log_impl(&dword_1B02D2000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 3:
      v55 = __cxa_begin_catch(exception_object);
      v56 = v55;
      if (v38)
      {
        sub_1B037DBEC((uint64_t)v55);
        *v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v57 = (*(uint64_t (**)(void *))(*(_QWORD *)v56 + 16))(v56);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v57;
        _os_log_impl(&dword_1B02D2000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    default:
      v58 = __cxa_begin_catch(exception_object);
      if (a2 != 2)
      {
        sub_1B0317CEC(5);
        v61 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR))
        {
          LOWORD(buf) = 0;
          _os_log_impl(&dword_1B02D2000, v61, OS_LOG_TYPE_ERROR, "Unknown error encountered during initWithOptions. See NSError object for more details.", (uint8_t *)&buf, 2u);
        }

        sub_1B037F4C8((uint64_t)&buf + 8, "Unknown error encountered during initWithOptions.");
        *(_QWORD *)&buf = off_1E60CCE48;
        if (v38)
        {
          sub_1B037D96C((uint64_t)&buf);
          *v38 = (id)objc_claimAutoreleasedReturnValue();
        }
        sub_1B0317CEC(5);
        v62 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v62, OS_LOG_TYPE_ERROR))
        {
          if (a33 >= 0)
            v63 = (char *)&buf + 8;
          else
            v63 = (char *)*((_QWORD *)&buf + 1);
          LODWORD(a34) = 136315138;
          *(_QWORD *)((char *)&a34 + 4) = v63;
          _os_log_impl(&dword_1B02D2000, v62, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&a34, 0xCu);
        }

        sub_1B037DB44((std::exception *)&buf);
        __cxa_end_catch();
LABEL_49:
        JUMPOUT(0x1B037CCACLL);
      }
      v59 = v58;
      if (v38)
      {
        sub_1B037DB88((uint64_t)v58);
        *v38 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v47 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        v60 = (*(uint64_t (**)(void *))(*(_QWORD *)v59 + 16))(v59);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v60;
        _os_log_impl(&dword_1B02D2000, v47, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
  }

  __cxa_end_catch();
  goto LABEL_49;
}

uint64_t sub_1B037D53C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  uint64_t v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v21[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16 = v7;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
  std::ios_base::init(v9, v17);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16 = v4 + 24;
  v21[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v17[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 16;
  sub_1B02D7994(&v16, (uint64_t)"[InvalidArgument] ", 18);
  sub_1B02D7994(&v16, (uint64_t)"Invalid model URL: ", 19);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  sub_1B02D7994(&v16, v12, v13);
  std::stringbuf::str();
  v16 = *v6;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
  v17[0] = v10 + 16;
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v21);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  v14 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v14 = *(const char **)(a1 + 16);
  std::logic_error::logic_error((std::logic_error *)a1, v14);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  return a1;
}

void sub_1B037D6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B037D740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B037D754(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v11;
  uint64_t v12[8];
  void *__p[2];
  __int128 v14;
  int v15;
  uint64_t v16[19];

  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v16[0] = MEMORY[0x1E0DE4FE0] + 64;
  v11 = v5;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24));
  std::ios_base::init(v7, v12);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v11 = v2 + 24;
  v16[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8];
  v12[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v14 = 0u;
  v15 = 16;
  sub_1B02D7994(&v11, (uint64_t)"[InvalidArgument] ", 18);
  sub_1B02D7994(&v11, (uint64_t)"Received lengthPenalty=", 23);
  std::ostream::operator<<();
  sub_1B02D7994(&v11, (uint64_t)", which is outside the allowed range of [0.0, 10.0]. Please set to a floating point number between 0 and 10.", 108);
  std::stringbuf::str();
  v11 = *v4;
  *(uint64_t *)((char *)&v12[-1] + *(_QWORD *)(v11 - 24)) = v4[3];
  v12[0] = v8 + 16;
  if (SBYTE7(v14) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v16);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  v9 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v9 = *(const char **)(a1 + 16);
  std::logic_error::logic_error((std::logic_error *)a1, v9);
  *(_QWORD *)a1 = &unk_1E60CCE70;
  return a1;
}

void sub_1B037D900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B037D958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1B037D96C(uint64_t a1)
{
  char *v1;
  const void *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  const __CFDictionary *v5;
  const char *v6;
  const __CFDictionary *v7;
  void *v8;
  _QWORD v10[2];
  CFTypeRef cf;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_1B034BBA0((CFStringRef *)&v12, v1);
  v2 = (const void *)*MEMORY[0x1E0C9AFE0];
  if (*MEMORY[0x1E0C9AFE0])
    CFRetain((CFTypeRef)*MEMORY[0x1E0C9AFE0]);
  sub_1B034AC30(&cf, v2);
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v13 = v3;
  v4 = v12;
  if (v12)
    CFRetain(v12);
  v14 = v4;
  v10[0] = &v13;
  v10[1] = 1;
  v5 = sub_1B034BD58((uint64_t)v10);
  v7 = v5;
  if (v5)
    CFRelease(v5);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 7, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1B037DAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B037DB28(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

std::exception *sub_1B037DB44(std::exception *a1)
{
  uint64_t v2;

  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0)
    operator delete(a1[1].__vftable);
  return a1;
}

id sub_1B037DB88(uint64_t a1)
{
  void *v1;
  const char *v2;
  void *v3;

  sub_1B034BA24(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v2, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 7, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B037DBDC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1B037DBEC(uint64_t a1)
{
  char *v1;
  const void *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  const __CFDictionary *v5;
  const char *v6;
  const __CFDictionary *v7;
  void *v8;
  _QWORD v10[2];
  CFTypeRef cf;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_1B034BBA0((CFStringRef *)&v12, v1);
  v2 = (const void *)*MEMORY[0x1E0C9AFE0];
  if (*MEMORY[0x1E0C9AFE0])
    CFRetain((CFTypeRef)*MEMORY[0x1E0C9AFE0]);
  sub_1B034AC30(&cf, v2);
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v13 = v3;
  v4 = v12;
  if (v12)
    CFRetain(v12);
  v14 = v4;
  v10[0] = &v13;
  v10[1] = 1;
  v5 = sub_1B034BD58((uint64_t)v10);
  v7 = v5;
  if (v5)
    CFRelease(v5);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 6, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1B037DD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

id sub_1B037DDA8(uint64_t a1)
{
  char *v1;
  const void *v2;
  CFTypeRef v3;
  CFTypeRef v4;
  const __CFDictionary *v5;
  const char *v6;
  const __CFDictionary *v7;
  void *v8;
  _QWORD v10[2];
  CFTypeRef cf;
  CFTypeRef v12;
  CFTypeRef v13;
  CFTypeRef v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v1 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
  sub_1B034BBA0((CFStringRef *)&v12, v1);
  v2 = (const void *)*MEMORY[0x1E0C9AFE0];
  if (*MEMORY[0x1E0C9AFE0])
    CFRetain((CFTypeRef)*MEMORY[0x1E0C9AFE0]);
  sub_1B034AC30(&cf, v2);
  v3 = cf;
  if (cf)
    CFRetain(cf);
  v13 = v3;
  v4 = v12;
  if (v12)
    CFRetain(v12);
  v14 = v4;
  v10[0] = &v13;
  v10[1] = 1;
  v5 = sub_1B034BD58((uint64_t)v10);
  v7 = v5;
  if (v5)
    CFRelease(v5);
  if (v14)
    CFRelease(v14);
  if (v13)
    CFRelease(v13);
  if (cf)
    CFRelease(cf);
  if (v12)
    CFRelease(v12);
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v6, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 5, v7);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  return v8;
}

void sub_1B037DEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

id sub_1B037DF64(uint64_t a1)
{
  void *v1;
  const char *v2;
  void *v3;

  sub_1B034BA24(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v2, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 3, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B037DFB8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id sub_1B037DFC8(uint64_t a1)
{
  void *v1;
  const char *v2;
  void *v3;

  sub_1B034BA24(a1);
  v1 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_errorWithDomain_code_userInfo_(MEMORY[0x1E0CB35C8], v2, (uint64_t)CVNLPVideoCaptioningModelErrorDomain, 4, v1);
  v3 = (void *)objc_claimAutoreleasedReturnValue();

  return v3;
}

void sub_1B037E01C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B037E6CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,__int128 a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,__int128 buf,int a41,__int16 a42,char a43,char a44,int a45,__int16 a46,char a47,char a48)
{
  void *v50;
  void *v51;
  NSObject *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  void *v57;
  void *v58;
  uint64_t v59;
  void *v60;
  void *v61;
  uint64_t v62;
  void *v63;
  void *v64;
  uint64_t v65;
  NSObject *v66;
  char *v67;

  if (!a2)
    _Unwind_Resume(exception_object);
  if (a33 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete((void *)a23);
  sub_1B0320680((uint64_t)&buf);
  switch(a2)
  {
    case 6:
      v50 = __cxa_begin_catch(exception_object);
      v51 = v50;
      if (a10)
      {
        sub_1B037DFC8((uint64_t)v50);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v53 = (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 16))(v51);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v53;
        _os_log_impl(&dword_1B02D2000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 5:
      v54 = __cxa_begin_catch(exception_object);
      v55 = v54;
      if (a10)
      {
        sub_1B037DF64((uint64_t)v54);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v56 = (*(uint64_t (**)(void *))(*(_QWORD *)v55 + 16))(v55);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v56;
        _os_log_impl(&dword_1B02D2000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 4:
      v57 = __cxa_begin_catch(exception_object);
      v58 = v57;
      if (a10)
      {
        sub_1B037DDA8((uint64_t)v57);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v59 = (*(uint64_t (**)(void *))(*(_QWORD *)v58 + 16))(v58);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v59;
        _os_log_impl(&dword_1B02D2000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    case 3:
      v60 = __cxa_begin_catch(exception_object);
      v61 = v60;
      if (a10)
      {
        sub_1B037DBEC((uint64_t)v60);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v62 = (*(uint64_t (**)(void *))(*(_QWORD *)v61 + 16))(v61);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v62;
        _os_log_impl(&dword_1B02D2000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
    default:
      v63 = __cxa_begin_catch(exception_object);
      if (a2 != 2)
      {
        sub_1B037F4C8((uint64_t)&buf + 8, "Unknown error encountered during generateCaption.");
        *(_QWORD *)&buf = off_1E60CCE48;
        if (a10)
        {
          sub_1B037D96C((uint64_t)&buf);
          *a10 = (id)objc_claimAutoreleasedReturnValue();
        }
        sub_1B0317CEC(5);
        v66 = objc_claimAutoreleasedReturnValue();
        if (os_log_type_enabled(v66, OS_LOG_TYPE_ERROR))
        {
          if (a48 >= 0)
            v67 = (char *)&buf + 8;
          else
            v67 = (char *)*((_QWORD *)&buf + 1);
          LODWORD(a23) = 136315138;
          *(_QWORD *)((char *)&a23 + 4) = v67;
          _os_log_impl(&dword_1B02D2000, v66, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&a23, 0xCu);
        }

        sub_1B037DB44((std::exception *)&buf);
        __cxa_end_catch();
LABEL_45:
        JUMPOUT(0x1B037E674);
      }
      v64 = v63;
      if (a10)
      {
        sub_1B037DB88((uint64_t)v63);
        *a10 = (id)objc_claimAutoreleasedReturnValue();
      }
      sub_1B0317CEC(5);
      v52 = objc_claimAutoreleasedReturnValue();
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR))
      {
        v65 = (*(uint64_t (**)(void *))(*(_QWORD *)v64 + 16))(v64);
        LODWORD(buf) = 136315138;
        *(_QWORD *)((char *)&buf + 4) = v65;
        _os_log_impl(&dword_1B02D2000, v52, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      }
      break;
  }

  __cxa_end_catch();
  goto LABEL_45;
}

void sub_1B037EC44(uint64_t a1, int a2)
{
  if (a2)
    JUMPOUT(0x1B037EC54);
  JUMPOUT(0x1B037EC3CLL);
}

Class sub_1B037ED04(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1ED5379A8)
  {
    qword_1ED5379A8 = _sl_dlopen();
    if (!qword_1ED5379A8)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VNImageBuffer");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1ED5379A0 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B037EE08(void *a1, void *a2)
{
  id v3;
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  id v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *exception;
  _QWORD v20[3];

  v3 = a1;
  v4 = a2;
  objc_msgSend_objectForKey_(v3, v5, (uint64_t)v4, v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v11 = v7;
  if (!v7)
  {
    v14 = objc_retainAutorelease(v4);
    v18 = (char *)objc_msgSend_UTF8String(v14, v15, v16, v17);
    sub_1B02DCBB8(v20, v18);
    exception = __cxa_allocate_exception(0x28uLL);
    sub_1B037EF20((uint64_t)exception, (uint64_t)v20);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB248, (void (*)(void *))sub_1B031C354);
  }
  v12 = objc_msgSend_intValue(v7, v8, v9, v10);

  return v12;
}

void sub_1B037EEC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  void *v16;
  void *v17;

  if (a15 < 0)
    operator delete(__p);

  _Unwind_Resume(a1);
}

void sub_1B037EF0C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t sub_1B037EF20(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::ios_base *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v16;
  uint64_t v17[8];
  void *__p[2];
  __int128 v19;
  int v20;
  uint64_t v21[19];

  v4 = MEMORY[0x1E0DE4FE0];
  v5 = MEMORY[0x1E0DE4FE0] + 64;
  v6 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v8 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v21[0] = MEMORY[0x1E0DE4FE0] + 64;
  v16 = v7;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v7 - 24)) = v8;
  v9 = (std::ios_base *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24));
  std::ios_base::init(v9, v17);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  v16 = v4 + 24;
  v21[0] = v5;
  std::streambuf::basic_streambuf();
  v10 = MEMORY[0x1E0DE4FB8];
  v17[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v19 = 0u;
  v20 = 16;
  sub_1B02D7994(&v16, (uint64_t)"[KeyError] ", 11);
  sub_1B02D7994(&v16, (uint64_t)"Key not found in dictionary: ", 29);
  v11 = *(char *)(a2 + 23);
  if (v11 >= 0)
    v12 = a2;
  else
    v12 = *(_QWORD *)a2;
  if (v11 >= 0)
    v13 = *(unsigned __int8 *)(a2 + 23);
  else
    v13 = *(_QWORD *)(a2 + 8);
  sub_1B02D7994(&v16, v12, v13);
  std::stringbuf::str();
  v16 = *v6;
  *(uint64_t *)((char *)&v17[-1] + *(_QWORD *)(v16 - 24)) = v6[3];
  v17[0] = v10 + 16;
  if (SBYTE7(v19) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v21);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  v14 = (const char *)(a1 + 16);
  if (*(char *)(a1 + 39) < 0)
    v14 = *(const char **)(a1 + 16);
  std::runtime_error::runtime_error((std::runtime_error *)a1, v14);
  *(_QWORD *)a1 = &unk_1E60CCF58;
  return a1;
}

void sub_1B037F0CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v10;
  void **v11;

  if (*(char *)(v10 + 39) < 0)
  {
    operator delete(*v11);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B037F124(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B037F138()
{
  uint64_t result;

  qword_1ED5379C0 = 0;
  qword_1ED5379C8 = (uint64_t)"CVNLPCaption";
  unk_1ED5379D0 = 0;
  qword_1ED5379D8 = 0;
  unk_1ED5379E0 = sub_1B037F188;
  xmmword_1ED5379E8 = 0u;
  unk_1ED5379F8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED5379B8 = result;
  return result;
}

void sub_1B037F188(id *a1)
{

}

void sub_1B037F1F0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD770;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B037F200(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD770;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B037F230(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void *v16;

  v2 = *(std::__shared_weak_count **)(a1 + 608);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = *(std::__shared_weak_count **)(a1 + 592);
    if (!v5)
      goto LABEL_11;
  }
  else
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 592);
    if (!v5)
      goto LABEL_11;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_11:
  v8 = *(_QWORD *)(a1 + 576);
  *(_QWORD *)(a1 + 576) = 0;
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  v9 = *(_QWORD *)(a1 + 568);
  *(_QWORD *)(a1 + 568) = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (*(_BYTE *)(a1 + 560))
  {
    v10 = *(_QWORD *)(a1 + 536);
    if (v10)
    {
      v11 = *(_QWORD *)(a1 + 544);
      v12 = *(void **)(a1 + 536);
      if (v11 != v10)
      {
        do
        {
          if (*(char *)(v11 - 1) < 0)
            operator delete(*(void **)(v11 - 24));
          v11 -= 24;
        }
        while (v11 != v10);
        v12 = *(void **)(a1 + 536);
      }
      *(_QWORD *)(a1 + 544) = v10;
      operator delete(v12);
    }
  }
  sub_1B03269E4((_QWORD *)(a1 + 304));
  *(_QWORD *)(a1 + 248) = &unk_1E60CCA78;
  v13 = *(std::__shared_weak_count **)(a1 + 296);
  if (!v13)
    goto LABEL_28;
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (v15)
  {
LABEL_28:
    v16 = *(void **)(a1 + 264);
    if (!v16)
      goto LABEL_30;
    goto LABEL_29;
  }
  ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
  std::__shared_weak_count::__release_weak(v13);
  v16 = *(void **)(a1 + 264);
  if (v16)
  {
LABEL_29:
    *(_QWORD *)(a1 + 272) = v16;
    operator delete(v16);
  }
LABEL_30:
  if (*(char *)(a1 + 231) < 0)
  {
    operator delete(*(void **)(a1 + 208));
    if ((*(char *)(a1 + 207) & 0x80000000) == 0)
    {
LABEL_32:
      if ((*(char *)(a1 + 183) & 0x80000000) == 0)
        goto LABEL_33;
      goto LABEL_41;
    }
  }
  else if ((*(char *)(a1 + 207) & 0x80000000) == 0)
  {
    goto LABEL_32;
  }
  operator delete(*(void **)(a1 + 184));
  if ((*(char *)(a1 + 183) & 0x80000000) == 0)
  {
LABEL_33:
    if ((*(char *)(a1 + 159) & 0x80000000) == 0)
      goto LABEL_34;
    goto LABEL_42;
  }
LABEL_41:
  operator delete(*(void **)(a1 + 160));
  if ((*(char *)(a1 + 159) & 0x80000000) == 0)
  {
LABEL_34:
    if ((*(char *)(a1 + 135) & 0x80000000) == 0)
      goto LABEL_35;
    goto LABEL_43;
  }
LABEL_42:
  operator delete(*(void **)(a1 + 136));
  if ((*(char *)(a1 + 135) & 0x80000000) == 0)
  {
LABEL_35:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_44;
  }
LABEL_43:
  operator delete(*(void **)(a1 + 112));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_36:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_37;
    goto LABEL_45;
  }
LABEL_44:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_37:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      return;
LABEL_46:
    operator delete(*(void **)(a1 + 24));
    return;
  }
LABEL_45:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_46;
}

void sub_1B037F484(std::exception *a1)
{
  uint64_t v2;

  std::exception::~exception(a1);
  if (*(char *)(v2 + 31) < 0)
    operator delete(a1[1].__vftable);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B037F4C8(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  size_t v10;
  uint64_t v12;
  uint64_t v13[8];
  void *__p[2];
  __int128 v15;
  int v16;
  uint64_t v17[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v17[0] = MEMORY[0x1E0DE4FE0] + 64;
  v12 = v6;
  *(uint64_t *)((char *)&v13[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24));
  std::ios_base::init(v8, v13);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v12 = v3 + 24;
  v17[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v13[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v15 = 0u;
  v16 = 16;
  sub_1B02D7994(&v12, (uint64_t)"[UnknownError] ", 15);
  v10 = strlen(a2);
  sub_1B02D7994(&v12, (uint64_t)a2, v10);
  std::stringbuf::str();
  v12 = *v5;
  *(uint64_t *)((char *)&v13[-1] + *(_QWORD *)(v12 - 24)) = v5[3];
  v13[0] = v9 + 16;
  if (SBYTE7(v15) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v17);
}

void sub_1B037F620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B037F634(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B037F67C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_stringWithFormat_(MEMORY[0x1E0CB3940], a2, (uint64_t)CFSTR(" %@ "), a4, a1);
}

void sub_1B037F77C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B037F794(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1B037FA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  va_list va;

  va_start(va, a13);
  _Block_object_dispose(va, 8);

  _Unwind_Resume(a1);
}

id sub_1B037FB04(uint64_t a1, void *a2)
{
  id v3;
  objc_class *v4;
  void *v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  const char *v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  id v18;
  id v20;

  v3 = a2;
  v4 = (objc_class *)objc_opt_class();
  NSStringFromClass(v4);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_classifierRevisions(*(void **)(a1 + 32), v6, v7, v8);
  v9 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v9, v10, (uint64_t)v5, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();

  if (v12)
  {
    v16 = objc_msgSend_unsignedIntegerValue(v12, v13, v14, v15);
    v20 = 0;
    objc_msgSend_setRevision_error_(v3, v17, v16 + 3737841664, (uint64_t)&v20);
    v18 = v20;
  }
  else
  {
    v18 = 0;
  }

  return v18;
}

void sub_1B037FBB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B037FBE8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B037FD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,id a28)
{
  void *v28;
  uint64_t v29;

  _Block_object_dispose(&a23, 8);
  _Block_object_dispose((const void *)(v29 - 112), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1B037FDA0(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B037FDB0(uint64_t a1)
{

}

void sub_1B037FDB8(uint64_t a1)
{
  void *v2;
  objc_class *v3;
  id v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[5];
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v10 = 0;
  v11 = &v10;
  v12 = 0x2050000000;
  v2 = (void *)qword_1EEEB2930;
  v13 = qword_1EEEB2930;
  if (!qword_1EEEB2930)
  {
    v9[0] = MEMORY[0x1E0C809B0];
    v9[1] = 3221225472;
    v9[2] = sub_1B0380264;
    v9[3] = &unk_1E60CDE98;
    v9[4] = &v10;
    sub_1B0380264((uint64_t)v9);
    v2 = (void *)v11[3];
  }
  v3 = objc_retainAutorelease(v2);
  _Block_object_dispose(&v10, 8);
  v4 = [v3 alloc];
  v6 = objc_msgSend_initWithCVPixelBuffer_options_(v4, v5, *(_QWORD *)(a1 + 40), MEMORY[0x1E0C9AA70]);
  v7 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  v8 = *(void **)(v7 + 40);
  *(_QWORD *)(v7 + 40) = v6;

}

void sub_1B037FE84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1B037FE9C(_QWORD *a1, const char *a2)
{
  uint64_t v3;
  void *v4;
  void *v5;
  const char *v6;
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const char *v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  uint64_t v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  id v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x1E0C80C00];
  v3 = a1[4];
  v4 = *(void **)(*(_QWORD *)(a1[5] + 8) + 40);
  v31[0] = *(_QWORD *)(v3 + 40);
  v31[1] = *(_QWORD *)(v3 + 32);
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], a2, (uint64_t)v31, 2);
  v5 = (void *)objc_claimAutoreleasedReturnValue();
  v30 = 0;
  objc_msgSend_performRequests_error_(v4, v6, (uint64_t)v5, (uint64_t)&v30);
  v7 = v30;

  if (!v7)
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v8, v9, v10);
    v11 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_results(*(void **)(a1[4] + 40), v12, v13, v14);
    v15 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v11, v16, (uint64_t)v15, v17);

    objc_msgSend_results(*(void **)(a1[4] + 32), v18, v19, v20);
    v21 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_addObjectsFromArray_(v11, v22, (uint64_t)v21, v23);

    v27 = objc_msgSend_copy(v11, v24, v25, v26);
    v28 = *(_QWORD *)(a1[6] + 8);
    v29 = *(void **)(v28 + 40);
    *(_QWORD *)(v28 + 40) = v27;

  }
}

void sub_1B037FFE8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

Class sub_1B038005C(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EEEB2920)
  {
    qword_1EEEB2920 = _sl_dlopen();
    if (!qword_1EEEB2920)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VN6Mb1ME89lyW3HpahkEygIG");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EEEB2918 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1B0380160(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EEEB2920)
  {
    qword_1EEEB2920 = _sl_dlopen();
    if (!qword_1EEEB2920)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VNVYvzEtX1JlUdu8xx5qhDI");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EEEB2928 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

Class sub_1B0380264(uint64_t a1)
{
  Class result;
  void *v3;

  if (!qword_1EEEB2920)
  {
    qword_1EEEB2920 = _sl_dlopen();
    if (!qword_1EEEB2920)
    {
      abort_report_np();
      goto LABEL_6;
    }
  }
  while (1)
  {
    result = objc_getClass("VNImageRequestHandler");
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24) = result;
    if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24))
      break;
LABEL_6:
    v3 = (void *)abort_report_np();
    free(v3);
  }
  qword_1EEEB2930 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1B0380368(uint64_t a1, CFTypeRef *a2, uint64_t a3)
{
  CFTypeRef v5;
  uint64_t v6;

  v5 = *a2;
  if (*a2)
    CFRetain(*a2);
  v6 = MRLNeuralNetworkCreate();
  sub_1B0370AA0(a1, v6);
  if (v5)
    CFRelease(v5);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a1 + 120) = 1065353216;
  return a1;
}

void sub_1B03803F0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0352278((const void **)va);
  _Unwind_Resume(a1);
}

float sub_1B0380404(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v9;
  float v10;
  void *__p[3];

  (*(void (**)(void **__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 24))(__p, *(_QWORD *)(a1 + 104), a4, a5, a6);
  v9 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), a2, a3);
  v10 = sub_1B0380798(a1, v9, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return v10;
}

void sub_1B03804A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

float sub_1B03804BC@<S0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  float result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _BYTE v21[16];
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v21[0] = 0;
  v21[8] = 0;
  sub_1B0380648(a1, (uint64_t)v21, 1, (uint64_t)&v22);
  v8 = *a2;
  v7 = a2[1];
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  v9 = v7 - v8;
  if (v9)
  {
    v10 = v9 / 24;
    if ((unint64_t)(v9 / 24) >> 62)
      sub_1B02D7758();
    v11 = (char *)operator new(4 * v10);
    *a3 = v11;
    a3[2] = &v11[4 * v10];
    bzero(v11, 4 * v10);
    v12 = 0;
    v13 = 0;
    a3[1] = &v11[4 * v10];
    do
    {
      v14 = (uint64_t *)(*a2 + v12);
      if (*((char *)v14 + 23) < 0)
      {
        v16 = *v14;
        v15 = v14[1];
      }
      else
      {
        v15 = *((unsigned __int8 *)v14 + 23);
        v16 = *a2 + v12;
      }
      v17 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 104) + 40))(*(_QWORD *)(a1 + 104), v16, v15);
      v18 = v17;
      v19 = v24;
      if (v22)
        v20 = v24 - 1;
      else
        v20 = v17;
      if (v22)
        v19 = v23;
      else
        v18 = v24 - 1;
      result = *(float *)(v25 + 4 * (v18 + v19 * v20));
      *(float *)&v11[4 * v13++] = result;
      v12 += 24;
    }
    while (v10 != v13);
  }
  return result;
}

void sub_1B0380608(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B038061C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B0380648(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W4>, uint64_t a4@<X8>)
{
  int v8;
  CFTypeRef v9;
  uint32x4_t *v10;
  _BYTE *v11;
  uint64_t v12;
  CFTypeRef v13;
  void *__p;
  _BYTE *v15;
  CFTypeRef cf;
  char v17;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 104) + 24))(&__p);
  LOBYTE(v13) = 0;
  v8 = *(unsigned __int8 *)(a2 + 8);
  if (*(_BYTE *)(a2 + 8))
  {
    v9 = *(CFTypeRef *)a2;
    if (*(_QWORD *)a2)
      CFRetain(*(CFTypeRef *)a2);
    v13 = v9;
    v10 = (uint32x4_t *)__p;
    v11 = v15;
    LOBYTE(cf) = 0;
    v17 = 0;
    if (v9)
      CFRetain(v9);
    v12 = v11 - (_BYTE *)v10;
    cf = v9;
    v17 = 1;
  }
  else
  {
    v10 = (uint32x4_t *)__p;
    v12 = v15 - (_BYTE *)__p;
    LOBYTE(cf) = 0;
    v17 = 0;
  }
  sub_1B0380858(a1, v10, v12 >> 2, (uint64_t)&cf, a3, a4);
  if (v17 && cf)
    CFRelease(cf);
  if (v8 && v13)
    CFRelease(v13);
  if (__p)
  {
    v15 = __p;
    operator delete(__p);
  }
}

void sub_1B038076C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, uint64_t a14, char a15)
{
  sub_1B034D184((uint64_t)&a15);
  sub_1B034D184((uint64_t)&a10);
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

float sub_1B0380798(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint32x4_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  CFTypeRef cf;
  char v11;
  int v12;
  uint64_t v13;
  _QWORD v14[2];

  v4 = *(uint32x4_t **)a3;
  v5 = (uint64_t)(*(_QWORD *)(a3 + 8) - *(_QWORD *)a3) >> 2;
  LOBYTE(cf) = 0;
  v11 = 0;
  sub_1B0380858(a1, v4, v5, (uint64_t)&cf, 1, (uint64_t)&v12);
  if (v11 && cf)
    CFRelease(cf);
  v6 = a2;
  if (v12)
    v7 = v5 - 1;
  else
    v7 = a2;
  if (v12)
  {
    v8 = &v13;
  }
  else
  {
    v6 = v5 - 1;
    v8 = v14;
  }
  return *(float *)(v14[1] + 4 * (v6 + *v8 * v7));
}

void sub_1B0380834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, CFTypeRef cf, char a10)
{
  if (a10)
  {
    if (cf)
      CFRelease(cf);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B0380858@<X0>(uint64_t a1@<X0>, uint32x4_t *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  CFTypeRef v11;
  uint64_t OutputDimension;
  unint64_t v13;
  uint64_t result;
  CFTypeRef cf;
  char v16;

  LOBYTE(cf) = 0;
  v16 = 0;
  if (*(_BYTE *)(a4 + 8))
  {
    v11 = *(CFTypeRef *)a4;
    if (*(_QWORD *)a4)
      CFRetain(*(CFTypeRef *)a4);
    cf = v11;
    v16 = 1;
  }
  sub_1B0350ED0(a1, a2, (uint64_t *)a3, (uint64_t)&cf);
  if (v16 && cf)
    CFRelease(cf);
  if (a3 <= 1)
    a3 = 1;
  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  if (a5 == 1)
    v13 = OutputDimension;
  else
    v13 = a3;
  if (a5 != 1)
    a3 = OutputDimension;
  result = MRLNeuralNetworkGetOutput();
  *(_DWORD *)a6 = a5;
  *(_QWORD *)(a6 + 8) = v13;
  *(_QWORD *)(a6 + 16) = a3;
  *(_QWORD *)(a6 + 24) = result;
  return result;
}

void sub_1B0380934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0380948(uint64_t a1, uint64_t a2)
{
  CFTypeRef v4;
  uint64_t v5;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  sub_1B0380ED0((_BYTE *)(a1 + 8), *(_QWORD *)(a2 + 8), *(_QWORD *)(a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a2 + 16) - *(_QWORD *)(a2 + 8)) >> 3));
  v4 = CFRetain(*(CFTypeRef *)(a2 + 32));
  v5 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v4;
  *(_QWORD *)(a1 + 40) = v5;
  return a1;
}

void sub_1B03809C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v4;
  void **v5;
  void *v6;

  v4 = (void **)*v2;
  if (*v2)
  {
    v5 = *(void ***)(v1 + 16);
    v6 = *v2;
    if (v5 != v4)
    {
      do
      {
        if (*((char *)v5 - 1) < 0)
          operator delete(*(v5 - 3));
        v5 -= 5;
      }
      while (v5 != v4);
      v6 = *v2;
    }
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B0380A18(_QWORD *a1)
{
  const void *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;

  v2 = (const void *)a1[4];
  if (v2)
  {
    CFRelease(v2);
    a1[4] = 0;
  }
  v3 = a1[1];
  if (v3)
  {
    v4 = a1[2];
    v5 = (void *)a1[1];
    if (v4 != v3)
    {
      do
      {
        if (*(char *)(v4 - 1) < 0)
          operator delete(*(void **)(v4 - 24));
        v4 -= 40;
      }
      while (v4 != v3);
      v5 = (void *)a1[1];
    }
    a1[2] = v3;
    operator delete(v5);
  }
  return a1;
}

void sub_1B0380A9C(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v5;
  char *v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  char *v16;
  int64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  char *v25;
  uint64_t v26;
  __int128 v27;

  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != v3)
  {
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = 0;
    while (1)
    {
      v10 = (_QWORD *)(v3 + 40 * v8);
      if (v7 >= v6)
        break;
      *(_QWORD *)v7 = *v10;
      v9 = (uint64_t)(v7 + 8);
LABEL_4:
      a2[1] = (char *)v9;
      ++v8;
      v7 = (char *)v9;
      if (v8 >= 0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 3))
        return;
    }
    v11 = (v7 - v5) >> 3;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      sub_1B02D7758();
    if ((v6 - v5) >> 2 > v12)
      v12 = (v6 - v5) >> 2;
    if ((unint64_t)(v6 - v5) >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v12;
    if (v13)
    {
      if (v13 >> 61)
        sub_1B02D72AC();
      v14 = v2;
      v15 = operator new(8 * v13);
      v2 = v14;
      v16 = &v15[8 * v11];
      *(_QWORD *)v16 = *v10;
      v9 = (uint64_t)(v16 + 8);
      v17 = v7 - v5;
      if (v7 == v5)
        goto LABEL_20;
    }
    else
    {
      v15 = 0;
      v16 = (char *)(8 * v11);
      *(_QWORD *)(8 * v11) = *v10;
      v9 = 8 * v11 + 8;
      v17 = v7 - v5;
      if (v7 == v5)
        goto LABEL_20;
    }
    v18 = v17 - 8;
    if (v18 >= 0x168)
    {
      v21 = (v7 - 8 - v5) & 0xFFFFFFFFFFFFFFF8;
      if (&v15[v7 - v5 - 8 - v21] > &v15[v7 - v5 - 8])
      {
        v19 = v7;
      }
      else if (&v7[-v21 - 8] > v7 - 8)
      {
        v19 = v7;
      }
      else if ((unint64_t)(v5 - v15) >= 0x20)
      {
        v22 = (v18 >> 3) + 1;
        v23 = 8 * (v22 & 0x3FFFFFFFFFFFFFFCLL);
        v19 = &v7[-v23];
        v16 -= v23;
        v24 = &v15[8 * v11 - 16];
        v25 = v7 - 16;
        v26 = v22 & 0x3FFFFFFFFFFFFFFCLL;
        do
        {
          v27 = *(_OWORD *)v25;
          *(v24 - 1) = *((_OWORD *)v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 32;
          v26 -= 4;
        }
        while (v26);
        if (v22 == (v22 & 0x3FFFFFFFFFFFFFFCLL))
        {
LABEL_20:
          v6 = &v15[8 * v13];
          *a2 = v16;
          a2[1] = (char *)v9;
          a2[2] = v6;
          if (v5)
          {
            operator delete(v5);
            v3 = *(_QWORD *)(a1 + 8);
            v2 = *(_QWORD *)(a1 + 16);
          }
          v5 = v16;
          goto LABEL_4;
        }
      }
      else
      {
        v19 = v7;
      }
    }
    else
    {
      v19 = v7;
    }
    do
    {
      v20 = *((_QWORD *)v19 - 1);
      v19 -= 8;
      *((_QWORD *)v16 - 1) = v20;
      v16 -= 8;
    }
    while (v19 != v5);
    goto LABEL_20;
  }
}

void sub_1B0380CE0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B0380D00(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  size_t v8;
  int v9;
  size_t v10;
  unint64_t v11;
  void **p_dst;
  uint64_t v13;
  uint64_t v14;
  const void *v15;
  const std::string::value_type *v16;
  std::string::size_type v17;
  void **__dst;
  std::string::size_type v19;
  int64_t v20;

  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  v3 = *(_QWORD *)(a1 + 8);
  if (*(_QWORD *)(a1 + 16) != v3)
  {
    v5 = 0;
    v6 = 0;
    while (1)
    {
      v7 = v3 + v5;
      v8 = *(unsigned __int8 *)(v3 + v5 + 39);
      v9 = (char)v8;
      if ((v8 & 0x80u) == 0)
        v10 = v8;
      else
        v10 = *(_QWORD *)(v7 + 24);
      v11 = v10 + 1;
      if (v10 + 1 >= 0x7FFFFFFFFFFFFFF8)
        sub_1B02D78C4();
      if (v11 >= 0x17)
        break;
      v19 = 0;
      v20 = 0;
      __dst = 0;
      p_dst = (void **)&__dst;
      HIBYTE(v20) = v10 + 1;
      if (v10)
        goto LABEL_14;
LABEL_18:
      *(_WORD *)((char *)p_dst + v10) = 32;
      if (v20 >= 0)
        v16 = (const std::string::value_type *)&__dst;
      else
        v16 = (const std::string::value_type *)__dst;
      if (v20 >= 0)
        v17 = HIBYTE(v20);
      else
        v17 = v19;
      std::string::append(a2, v16, v17);
      if (SHIBYTE(v20) < 0)
        operator delete(__dst);
      ++v6;
      v3 = *(_QWORD *)(a1 + 8);
      v5 += 40;
      if (v6 >= 0xCCCCCCCCCCCCCCCDLL * ((*(_QWORD *)(a1 + 16) - v3) >> 3))
        return;
    }
    v13 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v13 = v11 | 7;
    v14 = v13 + 1;
    p_dst = (void **)operator new(v13 + 1);
    v19 = v10 + 1;
    v20 = v14 | 0x8000000000000000;
    __dst = p_dst;
LABEL_14:
    if (v9 >= 0)
      v15 = (const void *)(v7 + 16);
    else
      v15 = *(const void **)(v7 + 16);
    memmove(p_dst, v15, v10);
    goto LABEL_18;
  }
}

void sub_1B0380E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if ((*(char *)(v15 + 23) & 0x80000000) == 0)
    _Unwind_Resume(exception_object);
  operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_1B0380ED0(_BYTE *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  void **v12;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0x666666666666667)
      sub_1B035C268();
    result = operator new(40 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[40 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        v10 = &v8[v9];
        v11 = a2 + v9;
        *(_QWORD *)v10 = *(_QWORD *)(a2 + v9);
        *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + v9 + 8);
        *((_DWORD *)v10 + 3) = *(_DWORD *)(a2 + v9 + 12);
        result = &v8[v9 + 16];
        v12 = (void **)(a2 + v9 + 16);
        if (*(char *)(a2 + v9 + 39) < 0)
        {
          result = sub_1B02EB0A8(result, *v12, *(_QWORD *)(v11 + 24));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v12;
          *(_QWORD *)&v8[v9 + 32] = *(_QWORD *)(a2 + v9 + 32);
        }
        v9 += 40;
      }
      while (v11 + 40 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_1B0380FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_1B0381024(&a9);
  _Unwind_Resume(a1);
}

void sub_1B0380FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 40)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_1B0381024(&a9);
  _Unwind_Resume(a1);
}

void ***sub_1B0381024(void ***result)
{
  void ***v1;
  void **v2;
  void **v3;
  void **v4;
  void *v5;

  v1 = result;
  if (!*((_BYTE *)result + 8))
  {
    v2 = *result;
    v3 = (void **)**result;
    if (v3)
    {
      v4 = (void **)v2[1];
      v5 = **result;
      if (v4 != v3)
      {
        do
        {
          if (*((char *)v4 - 1) < 0)
            operator delete(*(v4 - 3));
          v4 -= 5;
        }
        while (v4 != v3);
        v5 = **v1;
      }
      v2[1] = v3;
      operator delete(v5);
      return v1;
    }
  }
  return result;
}

void sub_1B03810B8(void **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v8;
  char *v9;
  char *v10;
  void *v11;
  void **v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  char *v17;
  uint64_t v18;
  char *v19;
  void **v20;
  void **v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  void **v30;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  v9 = (char *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)*a1) >> 3) < a4)
  {
    if (v9)
    {
      v10 = (char *)a1[1];
      v11 = *a1;
      if (v10 != v9)
      {
        do
        {
          if (*(v10 - 1) < 0)
            operator delete(*((void **)v10 - 3));
          v10 -= 40;
        }
        while (v10 != v9);
        v11 = *a1;
      }
      a1[1] = v9;
      operator delete(v11);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x666666666666666)
      goto LABEL_46;
    v22 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 3);
    v23 = 2 * v22;
    if (2 * v22 <= a4)
      v23 = a4;
    v24 = v22 >= 0x333333333333333 ? 0x666666666666666 : v23;
    if (v24 > 0x666666666666666)
LABEL_46:
      sub_1B035C268();
    v25 = 5 * v24;
    v21 = (void **)operator new(40 * v24);
    *a1 = v21;
    a1[1] = v21;
    a1[2] = &v21[v25];
    if (v6 != a3)
    {
      v26 = 0;
      do
      {
        v27 = (char *)&v21[v26 / 8];
        v28 = v6 + v26;
        *(_QWORD *)v27 = *(_QWORD *)(v6 + v26);
        *((_DWORD *)v27 + 2) = *(_DWORD *)(v6 + v26 + 8);
        *((_DWORD *)v27 + 3) = *(_DWORD *)(v6 + v26 + 12);
        v29 = (char *)&v21[v26 / 8 + 2];
        v30 = (void **)(v6 + v26 + 16);
        if (*(char *)(v6 + v26 + 39) < 0)
        {
          sub_1B02EB0A8(v29, *v30, *(_QWORD *)(v28 + 24));
        }
        else
        {
          *(_OWORD *)v29 = *(_OWORD *)v30;
          v21[v26 / 8 + 4] = *(void **)(v6 + v26 + 32);
        }
        v26 += 40;
      }
      while (v28 + 40 != a3);
      v21 = (void **)((char *)v21 + v26);
    }
LABEL_38:
    a1[1] = v21;
    return;
  }
  v12 = (void **)a1[1];
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)v12 - v9) >> 3) >= a4)
  {
    if (a2 == a3)
    {
      v21 = (void **)*a1;
    }
    else
    {
      v21 = (void **)*a1;
      do
      {
        *(_OWORD *)v9 = *(_OWORD *)v6;
        std::string::operator=((std::string *)(v9 + 16), (const std::string *)(v6 + 16));
        v21 += 5;
        v6 += 40;
        v9 += 40;
      }
      while (v6 != a3);
      v12 = (void **)a1[1];
    }
    while (v12 != v21)
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v12 -= 5;
    }
    goto LABEL_38;
  }
  v13 = a2 + 8 * (((char *)v12 - v9) >> 3);
  if (v12 != (void **)v9)
  {
    do
    {
      *(_OWORD *)v9 = *(_OWORD *)v6;
      std::string::operator=((std::string *)(v9 + 16), (const std::string *)(v6 + 16));
      v6 += 40;
      v9 += 40;
    }
    while (v6 != v13);
    v9 = (char *)a1[1];
  }
  v14 = v9;
  if (v13 != a3)
  {
    v15 = 0;
    do
    {
      v17 = &v9[v15];
      v18 = v13 + v15;
      *(_QWORD *)v17 = *(_QWORD *)(v13 + v15);
      *((_DWORD *)v17 + 2) = *(_DWORD *)(v13 + v15 + 8);
      *((_DWORD *)v17 + 3) = *(_DWORD *)(v13 + v15 + 12);
      v19 = &v9[v15 + 16];
      v20 = (void **)(v13 + v15 + 16);
      if (*(char *)(v13 + v15 + 39) < 0)
      {
        sub_1B02EB0A8(v19, *v20, *(_QWORD *)(v18 + 24));
      }
      else
      {
        v16 = *(_OWORD *)v20;
        *(_QWORD *)&v9[v15 + 32] = *(_QWORD *)(v13 + v15 + 32);
        *(_OWORD *)v19 = v16;
      }
      v15 += 40;
    }
    while (v18 + 40 != a3);
    v14 = &v9[v15];
  }
  a1[1] = v14;
}

void sub_1B03813C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  for (; v3; v3 -= 40)
  {
    if (*(char *)(v2 + v3 - 1) < 0)
      operator delete(*(void **)(v2 + v3 - 24));
  }
  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

char *sub_1B03813FC(char **a1, uint64_t a2)
{
  char *v3;
  char *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;
  char *v9;
  char *v10;
  _BYTE *v11;
  char *v12;
  uint64_t v13;
  __int128 v14;
  char *v15;
  char *v16;
  void **v17;
  char *v18;
  char *v20;
  char *v21;
  char *v22;

  v3 = *a1;
  v4 = a1[1];
  v5 = 0xCCCCCCCCCCCCCCCDLL * ((v4 - *a1) >> 3);
  v6 = v5 + 1;
  if (v5 + 1 > 0x666666666666666)
    sub_1B035C268();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v6)
    v6 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v8 = 0x666666666666666;
  else
    v8 = v6;
  if (v8)
  {
    if (v8 > 0x666666666666666)
      sub_1B02D72AC();
    v9 = (char *)operator new(40 * v8);
  }
  else
  {
    v9 = 0;
  }
  v10 = &v9[40 * v5];
  v22 = &v9[40 * v8];
  *(_QWORD *)v10 = *(_QWORD *)a2;
  *((_DWORD *)v10 + 2) = *(_DWORD *)(a2 + 8);
  *((_DWORD *)v10 + 3) = *(_DWORD *)(a2 + 12);
  v11 = v10 + 16;
  if ((*(char *)(a2 + 39) & 0x80000000) == 0)
  {
    *(_OWORD *)v11 = *(_OWORD *)(a2 + 16);
    *((_QWORD *)v10 + 4) = *(_QWORD *)(a2 + 32);
    v12 = v10 + 40;
    v21 = v10 + 40;
    if (v4 != v3)
      goto LABEL_13;
LABEL_20:
    v18 = v3;
    goto LABEL_21;
  }
  sub_1B02EB0A8(v11, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  v3 = *a1;
  v4 = a1[1];
  v12 = v10 + 40;
  v21 = v10 + 40;
  if (v4 == *a1)
    goto LABEL_20;
LABEL_13:
  v13 = 0;
  do
  {
    v15 = &v10[v13];
    *((_QWORD *)v15 - 5) = *(_QWORD *)&v4[v13 - 40];
    *((_DWORD *)v15 - 8) = *(_DWORD *)&v4[v13 - 32];
    *((_DWORD *)v15 - 7) = *(_DWORD *)&v4[v13 - 28];
    v16 = &v10[v13 - 24];
    v17 = (void **)&v4[v13 - 24];
    if (v4[v13 - 1] < 0)
    {
      sub_1B02EB0A8(v16, *v17, *(_QWORD *)&v4[v13 - 16]);
    }
    else
    {
      v14 = *(_OWORD *)v17;
      *(_QWORD *)&v10[v13 - 8] = *(_QWORD *)&v4[v13 - 8];
      *(_OWORD *)v16 = v14;
    }
    v13 -= 40;
  }
  while (&v4[v13] != v3);
  v18 = *a1;
  v3 = a1[1];
  v10 += v13;
  v12 = v21;
LABEL_21:
  *a1 = v10;
  a1[1] = v12;
  a1[2] = v22;
  if (v3 == v18)
  {
    if (v3)
LABEL_23:
      operator delete(v3);
  }
  else
  {
    do
    {
      v20 = v3 - 40;
      if (*(v3 - 1) < 0)
        operator delete(*((void **)v3 - 3));
      v3 -= 40;
    }
    while (v20 != v18);
    v3 = v18;
    if (v18)
      goto LABEL_23;
  }
  return v12;
}

void sub_1B0381620(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B035C3A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0381634(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  for (; v2; v2 += 40)
  {
    if (*(char *)(v3 + v2 + 39) < 0)
      operator delete(*(void **)(v3 + v2 + 16));
  }
  sub_1B035C3A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t CVNLPLanguageModelCreate(CFTypeRef cf)
{
  const __CFDictionary *v2;
  const void **v3;
  const __CFArray *v4;
  CFIndex Count;
  CFIndex v6;
  CFIndex v7;
  unint64_t v8;
  uint8_t *v9;
  CFIndex v10;
  std::locale::__imp *v11;
  int v12;
  char v13;
  const void *v14;
  const void *v15;
  CFTypeRef v16;
  NSObject *v17;
  uint64_t Instance;
  const __CFDictionary *v19;
  const void *Value;
  const void *v21;
  CFTypeID v22;
  _QWORD *v23;
  uint8_t *v24;
  uint64_t v25;
  _QWORD *v26;
  const std::locale::facet *v27;
  NSObject *v28;
  CFTypeID v29;
  const void *v30;
  const void *v31;
  NSObject *v32;
  std::string::size_type size;
  std::string *v34;
  std::string *v35;
  int v36;
  NSObject *v37;
  int v38;
  std::locale::__imp *locale;
  __int128 v40;
  std::locale::__imp *v41;
  std::locale::__imp *v42;
  char v43;
  void **v44;
  int v46;
  size_t v47;
  unint64_t v48;
  void **p_dst;
  uint64_t v50;
  uint64_t v51;
  _OWORD *v52;
  std::string::size_type v53;
  NSObject *v54;
  const __CFDictionary *v55;
  unsigned __int16 *v56;
  int v57;
  int v58;
  NSObject *v60;
  std::string *v61;
  std::string::size_type v62;
  CFURLRef v63;
  uint64_t v64;
  CFDictionaryRef v65;
  const __CFNumber *v66;
  unint64_t v67;
  int v68;
  std::locale::__imp *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  const void *v74;
  uint64_t v75;
  std::locale::__imp *v77;
  void *v78;
  std::runtime_error *v79;
  std::runtime_error *exception;
  std::runtime_error *v81;
  std::runtime_error *v82;
  std::runtime_error *v83;
  std::runtime_error *v84;
  std::runtime_error *v85;
  std::runtime_error *v86;
  std::runtime_error *v87;
  std::runtime_error *v88;
  std::runtime_error *v89;
  char v90[8];
  void *v91;
  char v92;
  const __CFDictionary *v93;
  CFTypeRef cfa;
  void *__p[2];
  char v96;
  void **__dst;
  size_t v98;
  unint64_t v99;
  void *v100[2];
  char v101;
  void *v102[2];
  char v103;
  void *v104[2];
  char v105;
  void *v106;
  char v107;
  std::string v108;
  _OWORD v109[2];
  std::string v110;
  uint8_t buf[8];
  std::string v112;
  const __CFDictionary *v113;
  const __CFDictionary *v114;
  __int128 v115;
  char v116;
  BundleHelper *v117;
  std::locale v118[6];

  v118[5] = *(std::locale *)MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  sub_1B03712E4(&v114, cf);
  v2 = v114;
  if (v114)
    CFRetain(v114);
  v113 = v2;
  v3 = (const void **)operator new(8uLL);
  *v3 = CFSTR("CVNLPTokenTypeKey");
  v4 = CFArrayCreate(0, v3, 1, MEMORY[0x1E0C9B378]);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  operator delete(v3);
  *(_QWORD *)&v115 = v4;
  Count = CFArrayGetCount(v4);
  v6 = CFArrayGetCount(v4);
  if (Count)
  {
    v7 = v6;
    if (v2)
    {
      v8 = 0;
      while (v7 != v8)
      {
        sub_1B035BFB4(v4, v8, buf);
        if (v112.__r_.__value_.__s.__data_[15] >= 0)
          v9 = buf;
        else
          v9 = *(uint8_t **)buf;
        if (v112.__r_.__value_.__s.__data_[15] >= 0)
          v10 = v112.__r_.__value_.__s.__data_[15];
        else
          v10 = v112.__r_.__value_.__r.__words[0];
        v11 = (std::locale::__imp *)CFStringCreateWithBytes(0, v9, v10, 0x8000100u, 0);
        v118[0].__locale_ = v11;
        if (!v11)
        {
          v79 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v79, "Could not construct");
          __cxa_throw(v79, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v12 = CFDictionaryContainsKey(v2, v11);
        CFRelease(v11);
        if (!v12)
        {
          v23 = sub_1B02D7994(MEMORY[0x1E0DE4A60], (uint64_t)"Missing required key:", 21);
          if (v112.__r_.__value_.__s.__data_[15] >= 0)
            v24 = buf;
          else
            v24 = *(uint8_t **)buf;
          if (v112.__r_.__value_.__s.__data_[15] >= 0)
            v25 = v112.__r_.__value_.__s.__data_[15];
          else
            v25 = v112.__r_.__value_.__r.__words[0];
          v26 = sub_1B02D7994(v23, (uint64_t)v24, v25);
          std::ios_base::getloc((const std::ios_base *)((char *)v26 + *(_QWORD *)(*v26 - 24)));
          v27 = std::locale::use_facet(v118, MEMORY[0x1E0DE4A90]);
          ((void (*)(const std::locale::facet *, uint64_t))v27->__vftable[2].~facet_0)(v27, 10);
          std::locale::~locale(v118);
          std::ostream::put();
          std::ostream::flush();
          if (v112.__r_.__value_.__s.__data_[15] < 0)
            operator delete(*(void **)buf);
          v13 = 0;
          goto LABEL_23;
        }
        if (v112.__r_.__value_.__s.__data_[15] < 0)
          operator delete(*(void **)buf);
        if (Count == ++v8)
          break;
      }
    }
    else if (v6)
    {
      sub_1B035BFB4(v4, 0, buf);
      v83 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(v83, "Could not construct");
      __cxa_throw(v83, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
    }
  }
  v13 = 1;
LABEL_23:
  CFRelease(v4);
  if (v2)
    CFRelease(v2);
  if ((v13 & 1) == 0)
  {
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v17 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl(&dword_1B02D2000, v17, OS_LOG_TYPE_ERROR, "Creation options does not contain all required keys.", buf, 2u);
    }

    Instance = 0;
    v19 = v114;
    if (v114)
      goto LABEL_241;
    return Instance;
  }
  *(_QWORD *)buf = &unk_1E60CCF80;
  memset(&v112, 0, sizeof(v112));
  if (!v114)
  {
    v81 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v81, "Could not construct");
    __cxa_throw(v81, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (!CFDictionaryContainsKey(v114, CFSTR("CVNLPModelURLKey")))
  {
    Value = CFDictionaryGetValue((CFDictionaryRef)cf, CFSTR("CVNLPLocaleKey"));
    v21 = Value;
    if (Value)
    {
      v22 = CFGetTypeID(Value);
      if (v22 == CFStringGetTypeID())
      {
        sub_1B0387CDC(&v110, (CFDictionaryRef)cf, CFSTR("CVNLPLocaleKey"));
        goto LABEL_73;
      }
      v29 = CFGetTypeID(v21);
      if (v29 == CFLocaleGetTypeID())
      {
        v30 = (const void *)MEMORY[0x1B5E07528](v21);
        v31 = v30;
        if (v30)
          CFRetain(v30);
        sub_1B034AC30(&v115, v31);
        if (!(_QWORD)v115)
        {
          v89 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v89, "Could not construct");
          __cxa_throw(v89, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        v118[0].__locale_ = (std::locale::__imp *)&v115;
        sub_1B034AB60((const __CFString ***)v118, &v110);
        if ((_QWORD)v115)
          CFRelease((CFTypeRef)v115);
        CFRelease(v31);
LABEL_73:
        size = HIBYTE(v110.__r_.__value_.__r.__words[2]);
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v110.__r_.__value_.__l.__size_;
        if (!size)
        {
          if (qword_1EEEB2D38 != -1)
            dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
          v37 = (id)qword_1EEEB2D30;
          if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
          {
            LODWORD(v118[0].__locale_) = 138412290;
            *(std::locale::__imp **)((char *)&v118[0].__locale_ + 4) = (std::locale::__imp *)cf;
            _os_log_error_impl(&dword_1B02D2000, v37, OS_LOG_TYPE_ERROR, "Unable to determine model locale from options=%@", (uint8_t *)v118, 0xCu);
          }

          v38 = 1;
          goto LABEL_163;
        }
        v116 = 1;
        strcpy((char *)&v115, "-");
        BYTE7(v109[1]) = 1;
        strcpy((char *)v109, "_");
        if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v34 = &v110;
        else
          v34 = (std::string *)v110.__r_.__value_.__r.__words[0];
        v35 = v34;
        while (1)
        {
          v36 = v35->__r_.__value_.__s.__data_[0];
          v35 = (std::string *)((char *)v35 + 1);
          if (v36 == 45)
            break;
          v34 = (std::string *)((char *)v34 + 1);
          if (!--size)
            goto LABEL_90;
        }
        v118[0].__locale_ = (std::locale::__imp *)&v115;
        v118[1].__locale_ = (std::locale::__imp *)((char *)&v115 + 1);
        sub_1B0319080(&v110, (uint64_t *)v118, (char *)v109, (char *)v109 + 1, v34, &v34->__r_.__value_.__s.__data_[1], (char *)v109, (char *)v109 + 1);
        if (SBYTE7(v109[1]) < 0)
          operator delete(*(void **)&v109[0]);
LABEL_90:
        if (v116 < 0)
          operator delete((void *)v115);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          sub_1B02EB0A8(&v108, v110.__r_.__value_.__l.__data_, v110.__r_.__value_.__l.__size_);
        else
          v108 = v110;
        v107 = 1;
        LOWORD(v106) = 95;
        sub_1B0318A34((uint64_t)&v108, (char *)&v106, (uint64_t)v118);
        locale = v118[0].__locale_;
        if (*((char *)v118[0].__locale_ + 23) < 0)
        {
          sub_1B02EB0A8(v109, *(void **)v118[0].__locale_, *((_QWORD *)v118[0].__locale_ + 1));
          locale = v118[0].__locale_;
          if (!v118[0].__locale_)
            goto LABEL_105;
        }
        else
        {
          v40 = *(_OWORD *)v118[0].__locale_;
          *(_QWORD *)&v109[1] = *((_QWORD *)v118[0].__locale_ + 2);
          v109[0] = v40;
        }
        v41 = v118[1].__locale_;
        v42 = locale;
        if (v118[1].__locale_ != locale)
        {
          do
          {
            if (*((char *)v41 - 1) < 0)
              operator delete(*((void **)v41 - 3));
            v41 = (std::locale::__imp *)((char *)v41 - 24);
          }
          while (v41 != locale);
          v42 = v118[0].__locale_;
        }
        v118[1].__locale_ = locale;
        operator delete(v42);
LABEL_105:
        if (v107 < 0)
          operator delete(v106);
        if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v108.__r_.__value_.__l.__data_);
        *(_QWORD *)&v115 = 0x736C65646F4DLL;
        v116 = 6;
        v117 = objc_alloc_init(BundleHelper);
        sub_1B035F610((uint64_t)&v115, (uint64_t)v109, v104);
        sub_1B034B450((uint64_t)v118, (uint64_t)v104);
        std::string::operator=(&v112, (const std::string *)&v118[1]);
        if (SHIBYTE(v118[3].__locale_) < 0)
          operator delete(v118[1].__locale_);
        if (v105 < 0)
          operator delete(v104[0]);

        if (v116 < 0)
          operator delete((void *)v115);
        if (!v114)
        {
          v87 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v87, "Could not construct");
          __cxa_throw(v87, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        if (!CFDictionaryContainsKey(v114, CFSTR("CVNLPLanguageModelArchitectureKey")))
          goto LABEL_152;
        if (!v114)
        {
          v88 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v88, "Could not construct");
          __cxa_throw(v88, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        sub_1B0387CDC(v102, v114, CFSTR("CVNLPLanguageModelArchitectureKey"));
        v43 = v103;
        if (v103 < 0)
        {
          v44 = (void **)v102[0];
          if (v102[1] != (void *)3)
          {
LABEL_151:
            operator delete(v44);
            goto LABEL_152;
          }
        }
        else
        {
          if (v103 != 3)
            goto LABEL_152;
          v44 = v102;
        }
        if (*(_WORD *)v44 != 20551 || *((_BYTE *)v44 + 2) != 84)
        {
LABEL_149:
          if (v43 < 0)
          {
            v44 = (void **)v102[0];
            goto LABEL_151;
          }
LABEL_152:
          v53 = HIBYTE(v112.__r_.__value_.__r.__words[2]);
          if ((v112.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v53 = v112.__r_.__value_.__l.__size_;
          if (v53 && sub_1B03177C0((uint64_t)buf))
          {
            v38 = 0;
            if ((SBYTE7(v109[1]) & 0x80000000) == 0)
              goto LABEL_163;
            goto LABEL_162;
          }
          if (qword_1EEEB2D38 != -1)
            dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
          v54 = (id)qword_1EEEB2D30;
          if (os_log_type_enabled(v54, OS_LOG_TYPE_ERROR))
          {
            v77 = (std::locale::__imp *)v109;
            if (SBYTE7(v109[1]) < 0)
              v77 = *(std::locale::__imp **)&v109[0];
            LODWORD(v118[0].__locale_) = 136315138;
            *(std::locale::__imp **)((char *)&v118[0].__locale_ + 4) = v77;
            _os_log_error_impl(&dword_1B02D2000, v54, OS_LOG_TYPE_ERROR, "Locale not supported: %s", (uint8_t *)v118, 0xCu);
          }

          v38 = 1;
          if (SBYTE7(v109[1]) < 0)
LABEL_162:
            operator delete(*(void **)&v109[0]);
LABEL_163:
          if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          {
            operator delete(v110.__r_.__value_.__l.__data_);
            if (!v38)
              goto LABEL_167;
          }
          else if (!v38)
          {
            goto LABEL_167;
          }
LABEL_165:
          Instance = 0;
          goto LABEL_239;
        }
        *(_QWORD *)&v115 = 0x736C65646F4DLL;
        v116 = 6;
        v117 = objc_alloc_init(BundleHelper);
        v46 = SBYTE7(v109[1]);
        if ((SBYTE7(v109[1]) & 0x80u) == 0)
          v47 = BYTE7(v109[1]);
        else
          v47 = *((_QWORD *)&v109[0] + 1);
        v48 = v47 + 4;
        if (v47 + 4 >= 0x7FFFFFFFFFFFFFF8)
          sub_1B02D78C4();
        if (v48 >= 0x17)
        {
          v50 = (v48 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v48 | 7) != 0x17)
            v50 = v48 | 7;
          v51 = v50 + 1;
          p_dst = (void **)operator new(v50 + 1);
          v98 = v47 + 4;
          v99 = v51 | 0x8000000000000000;
          __dst = p_dst;
        }
        else
        {
          v98 = 0;
          v99 = 0;
          __dst = 0;
          p_dst = (void **)&__dst;
          HIBYTE(v99) = v47 + 4;
          if (!v47)
            goto LABEL_143;
        }
        if (v46 >= 0)
          v52 = v109;
        else
          v52 = *(_OWORD **)&v109[0];
        memmove(p_dst, v52, v47);
LABEL_143:
        strcpy((char *)p_dst + v47, "_gpt");
        sub_1B0382DE4(v100, (uint64_t)&v115, (uint64_t)&__dst);
        sub_1B034B450((uint64_t)v118, (uint64_t)v100);
        std::string::operator=(&v112, (const std::string *)&v118[1]);
        if (SHIBYTE(v118[3].__locale_) < 0)
        {
          operator delete(v118[1].__locale_);
          if ((v101 & 0x80000000) == 0)
          {
LABEL_145:
            if ((SHIBYTE(v99) & 0x80000000) == 0)
            {
LABEL_146:

              if (v116 < 0)
                operator delete((void *)v115);
              v43 = v103;
              goto LABEL_149;
            }
LABEL_251:
            operator delete(__dst);
            goto LABEL_146;
          }
        }
        else if ((v101 & 0x80000000) == 0)
        {
          goto LABEL_145;
        }
        operator delete(v100[0]);
        if ((SHIBYTE(v99) & 0x80000000) == 0)
          goto LABEL_146;
        goto LABEL_251;
      }
      if (qword_1EEEB2D38 != -1)
        dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
      v32 = (id)qword_1EEEB2D30;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v118[0].__locale_) = 0;
        _os_log_error_impl(&dword_1B02D2000, v32, OS_LOG_TYPE_ERROR, "Received unsupported CFType for locale.", (uint8_t *)v118, 2u);
      }

    }
    memset(&v110, 0, sizeof(v110));
    goto LABEL_73;
  }
  if (!v114)
  {
    v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "Could not construct");
    goto LABEL_265;
  }
  v14 = CFDictionaryGetValue(v114, CFSTR("CVNLPModelURLKey"));
  v15 = v14;
  if (!v14)
  {
    v82 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v82, "Could not find item");
LABEL_265:
    __cxa_throw(v82, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v14);
  sub_1B034AEC8(&cfa, v15);
  sub_1B0348B9C((const __CFURL **)&cfa, __p);
  sub_1B034B450((uint64_t)v118, (uint64_t)__p);
  std::string::operator=(&v112, (const std::string *)&v118[1]);
  if ((SHIBYTE(v118[3].__locale_) & 0x80000000) == 0)
  {
    if ((v96 & 0x80000000) == 0)
      goto LABEL_32;
LABEL_53:
    operator delete(__p[0]);
    v16 = cfa;
    if (!cfa)
      goto LABEL_55;
    goto LABEL_54;
  }
  operator delete(v118[1].__locale_);
  if (v96 < 0)
    goto LABEL_53;
LABEL_32:
  v16 = cfa;
  if (cfa)
LABEL_54:
    CFRelease(v16);
LABEL_55:
  if (!sub_1B03177C0((uint64_t)buf))
  {
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v28 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
    {
      if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
        sub_1B02EB0A8(v118, v112.__r_.__value_.__l.__data_, v112.__r_.__value_.__l.__size_);
      else
        *(std::string *)&v118[0].__locale_ = v112;
      v78 = v118;
      if (SHIBYTE(v118[2].__locale_) < 0)
        v78 = v118[0].__locale_;
      LODWORD(v115) = 136315138;
      *(_QWORD *)((char *)&v115 + 4) = v78;
      _os_log_error_impl(&dword_1B02D2000, v28, OS_LOG_TYPE_ERROR, "Model directory does not exist: %s", (uint8_t *)&v115, 0xCu);
      if (SHIBYTE(v118[2].__locale_) < 0)
        operator delete(v118[0].__locale_);
    }

    goto LABEL_165;
  }
LABEL_167:
  v55 = v114;
  if (!v114)
  {
    v93 = 0;
    v84 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v84, "Could not construct");
    __cxa_throw(v84, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CFRetain(v114);
  v93 = v55;
  if (!CFDictionaryContainsKey(v55, CFSTR("CVNLPLanguageModelArchitectureKey")))
  {
    BYTE7(v109[1]) = 9;
    strcpy((char *)v109, "model.dat");
    goto LABEL_192;
  }
  sub_1B0387CDC(&v115, v55, CFSTR("CVNLPLanguageModelArchitectureKey"));
  if (v116 < 0)
  {
    if (*((_QWORD *)&v115 + 1) != 3)
    {
      if (*((_QWORD *)&v115 + 1) == 4 && *(_DWORD *)v115 == 1297371980)
      {
LABEL_178:
        BYTE7(v109[1]) = 9;
        strcpy((char *)v109, "model.dat");
        if ((v116 & 0x80) == 0)
          goto LABEL_192;
        goto LABEL_191;
      }
LABEL_186:
      if (qword_1EEEB2D38 != -1)
        dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
      v60 = (id)qword_1EEEB2D30;
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__dst) = 0;
        _os_log_error_impl(&dword_1B02D2000, v60, OS_LOG_TYPE_ERROR, "Received unsupported model format. Could be either Montreal or Espresso", (uint8_t *)&__dst, 2u);
      }

      memset(v109, 0, 24);
      if (v116 < 0)
        goto LABEL_191;
      goto LABEL_192;
    }
    v56 = (unsigned __int16 *)v115;
  }
  else
  {
    if (v116 != 3)
    {
      if (v116 == 4 && (_DWORD)v115 == 1297371980)
        goto LABEL_178;
      goto LABEL_186;
    }
    v56 = (unsigned __int16 *)&v115;
  }
  v57 = *v56;
  v58 = *((unsigned __int8 *)v56 + 2);
  if (v57 != 20551 || v58 != 84)
    goto LABEL_186;
  BYTE7(v109[1]) = 18;
  strcpy((char *)v109, "model.espresso.bin");
  if (v116 < 0)
LABEL_191:
    operator delete((void *)v115);
LABEL_192:
  sub_1B0320384((uint64_t)buf, (char *)v109, v118);
  if (SHIBYTE(v118[3].__locale_) < 0)
    sub_1B02EB0A8(&v110, v118[1].__locale_, (unint64_t)v118[2].__locale_);
  else
    v110 = *(std::string *)&v118[1].__locale_;
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v61 = &v110;
  else
    v61 = (std::string *)v110.__r_.__value_.__r.__words[0];
  if ((v110.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v62 = HIBYTE(v110.__r_.__value_.__r.__words[2]);
  else
    v62 = v110.__r_.__value_.__l.__size_;
  v63 = CFURLCreateWithBytes(0, (const UInt8 *)v61, v62, 0, 0);
  v102[0] = v63;
  if (!v63)
  {
    v85 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v85, "Could not construct");
    __cxa_throw(v85, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if ((SHIBYTE(v110.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v118[3].__locale_) & 0x80000000) == 0)
      goto LABEL_204;
LABEL_225:
    operator delete(v118[1].__locale_);
    if ((SBYTE7(v109[1]) & 0x80000000) == 0)
      goto LABEL_205;
    goto LABEL_226;
  }
  operator delete(v110.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118[3].__locale_) < 0)
    goto LABEL_225;
LABEL_204:
  if ((SBYTE7(v109[1]) & 0x80000000) == 0)
    goto LABEL_205;
LABEL_226:
  operator delete(*(void **)&v109[0]);
LABEL_205:
  CFRelease(v55);
  sub_1B03518F0("ModelURL", v109);
  v64 = *(_QWORD *)&v109[0];
  if (*(_QWORD *)&v109[0])
    CFRetain(*(CFTypeRef *)&v109[0]);
  *(_QWORD *)&v115 = v64;
  CFRetain(v63);
  *((_QWORD *)&v115 + 1) = v63;
  v118[0].__locale_ = (std::locale::__imp *)&v115;
  v118[1].__locale_ = (std::locale::__imp *)1;
  v65 = sub_1B034BD58((uint64_t)v118);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v65;
  if (*((_QWORD *)&v115 + 1))
    CFRelease(*((CFTypeRef *)&v115 + 1));
  if ((_QWORD)v115)
    CFRelease((CFTypeRef)v115);
  if (*(_QWORD *)&v109[0])
    CFRelease(*(CFTypeRef *)&v109[0]);
  if (!v114)
  {
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "Could not construct");
    goto LABEL_272;
  }
  v66 = (const __CFNumber *)CFDictionaryGetValue(v114, CFSTR("CVNLPTokenTypeKey"));
  if (!v66)
  {
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "Could not find item");
    goto LABEL_272;
  }
  v67 = sub_1B038801C(v66);
  if (!HIDWORD(v67))
  {
    v86 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v86, "Could not convert");
LABEL_272:
    __cxa_throw(v86, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v68 = v67;
  sub_1B0317BEC((uint64_t)v90, (uint64_t)buf);
  sub_1B037A070((uint64_t)v90, v68, (uint64_t *)v109);
  if (v92 < 0)
    operator delete(v91);
  if (qword_1ED537A20 != -1)
    dispatch_once(&qword_1ED537A20, &unk_1E60CDB88);
  Instance = _CFRuntimeCreateInstance();
  if (v65)
    CFRetain(v65);
  *(_QWORD *)&v115 = v65;
  v118[0] = *(std::locale *)&v109[0];
  if (*(_QWORD *)&v109[0])
  {
    v69 = (std::locale::__imp *)operator new();
    v70 = *(_QWORD *)&v109[0];
    *(_QWORD *)v69 = &unk_1E60CAAA0;
    *((_QWORD *)v69 + 1) = 0;
    *((_QWORD *)v69 + 2) = 0;
    *((_QWORD *)v69 + 3) = v70;
  }
  else
  {
    v69 = 0;
  }
  v118[1].__locale_ = v69;
  *(_QWORD *)&v109[0] = 0;
  sub_1B0380368(Instance + 16, (CFTypeRef *)&v115, (uint64_t)v118);
  v71 = (std::__shared_weak_count *)v118[1].__locale_;
  if (v118[1].__locale_)
  {
    v72 = (unint64_t *)((char *)v118[1].__locale_ + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
      v74 = (const void *)v115;
      if (!(_QWORD)v115)
        goto LABEL_234;
      goto LABEL_233;
    }
  }
  v74 = (const void *)v115;
  if ((_QWORD)v115)
LABEL_233:
    CFRelease(v74);
LABEL_234:
  v75 = *(_QWORD *)&v109[0];
  *(_QWORD *)&v109[0] = 0;
  if (v75)
    (*(void (**)(uint64_t))(*(_QWORD *)v75 + 8))(v75);
  if (v110.__r_.__value_.__r.__words[0])
    CFRelease(v110.__r_.__value_.__l.__data_);
  CFRelease(v63);
LABEL_239:
  if (SHIBYTE(v112.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v112.__r_.__value_.__l.__data_);
    v19 = v114;
    if (!v114)
      return Instance;
    goto LABEL_241;
  }
  v19 = v114;
  if (v114)
LABEL_241:
    CFRelease(v19);
  return Instance;
}

void sub_1B0382904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (*(char *)(v53 - 97) < 0)
  {
    operator delete(*(void **)(v53 - 120));
    if (a31 < 0)
    {
LABEL_5:
      operator delete(__p);
      if ((a24 & 0x80000000) == 0)
      {
LABEL_9:
        sub_1B03490D4(v53 - 160);
        if (a37 < 0)
          operator delete(a32);
        if (a53 < 0)
          operator delete(a48);
        if (*(char *)(v53 - 217) < 0)
          operator delete(*(void **)(v53 - 240));
        if (*(char *)(v53 - 177) < 0)
        {
          operator delete(*(void **)(v53 - 200));
          sub_1B0352278((const void **)(v53 - 168));
          _Unwind_Resume(a1);
        }
        sub_1B0352278((const void **)(v53 - 168));
        _Unwind_Resume(a1);
      }
LABEL_8:
      operator delete(a19);
      goto LABEL_9;
    }
  }
  else if (a31 < 0)
  {
    goto LABEL_5;
  }
  if ((a24 & 0x80000000) == 0)
    goto LABEL_9;
  goto LABEL_8;
}

void sub_1B0382DE4(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  std::ios_base *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  void **p_src;
  size_t v22;
  void *p_dst;
  const UInt8 *v24;
  CFIndex v25;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  CFStringRef v29;
  void *v30;
  const char *v31;
  __CFString *v32;
  __CFString *v33;
  uint64_t v34;
  uint64_t v35;
  std::runtime_error *exception;
  void *__dst;
  size_t v38;
  int64_t v39;
  CFStringRef v40;
  void **__src;
  unint64_t v42;
  unsigned __int8 v43;
  uint64_t v44;
  uint64_t v45[8];
  __int128 __p;
  __int128 v47;
  int v48;
  uint64_t v49[20];

  v6 = MEMORY[0x1E0DE4FE0];
  v7 = MEMORY[0x1E0DE4FE0] + 64;
  v8 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v9 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v10 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v49[0] = MEMORY[0x1E0DE4FE0] + 64;
  v44 = v9;
  *(uint64_t *)((char *)&v45[-1] + *(_QWORD *)(v9 - 24)) = v10;
  v11 = (std::ios_base *)((char *)&v45[-1] + *(_QWORD *)(v44 - 24));
  std::ios_base::init(v11, v45);
  v11[1].__vftable = 0;
  v11[1].__fmtflags_ = -1;
  v44 = v6 + 24;
  v49[0] = v7;
  std::streambuf::basic_streambuf();
  v12 = MEMORY[0x1E0DE4FB8];
  v45[0] = MEMORY[0x1E0DE4FB8] + 16;
  __p = 0u;
  v47 = 0u;
  v48 = 16;
  v13 = *(char *)(a2 + 23);
  if (v13 >= 0)
    v14 = a2;
  else
    v14 = *(_QWORD *)a2;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  v16 = sub_1B02D7994(&v44, v14, v15);
  sub_1B02D7994(v16, (uint64_t)"/", 1);
  v17 = *(char *)(a3 + 23);
  if (v17 >= 0)
    v18 = a3;
  else
    v18 = *(_QWORD *)a3;
  if (v17 >= 0)
    v19 = *(unsigned __int8 *)(a3 + 23);
  else
    v19 = *(_QWORD *)(a3 + 8);
  v20 = sub_1B02D7994(&v44, v18, v19);
  sub_1B02D7994(v20, (uint64_t)"/", 1);
  std::stringbuf::str();
  if (((char)v43 & 0x80000000) == 0)
  {
    p_src = (void **)&__src;
    if (v43 >= (unint64_t)v43 - 1)
      v22 = v43 - 1;
    else
      v22 = v43;
    if (v22 < 0x7FFFFFFFFFFFFFF8)
      goto LABEL_18;
LABEL_44:
    sub_1B02D78C4();
  }
  p_src = __src;
  if (v42 >= v42 - 1)
    v22 = v42 - 1;
  else
    v22 = v42;
  if (v22 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_44;
LABEL_18:
  if (v22 >= 0x17)
  {
    v34 = (v22 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v22 | 7) != 0x17)
      v34 = v22 | 7;
    v35 = v34 + 1;
    p_dst = operator new(v34 + 1);
    v38 = v22;
    v39 = v35 | 0x8000000000000000;
    __dst = p_dst;
LABEL_38:
    memmove(p_dst, p_src, v22);
    *((_BYTE *)p_dst + v22) = 0;
    if (((char)v43 & 0x80000000) == 0)
      goto LABEL_21;
    goto LABEL_39;
  }
  HIBYTE(v39) = v22;
  p_dst = &__dst;
  if (v22)
    goto LABEL_38;
  LOBYTE(__dst) = 0;
  if (((char)v43 & 0x80000000) == 0)
    goto LABEL_21;
LABEL_39:
  operator delete(__src);
LABEL_21:
  v44 = *v8;
  *(uint64_t *)((char *)&v45[-1] + *(_QWORD *)(v44 - 24)) = v8[3];
  v45[0] = v12 + 16;
  if (SBYTE7(v47) < 0)
    operator delete((void *)__p);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v49);
  if (v39 >= 0)
    v24 = (const UInt8 *)&__dst;
  else
    v24 = (const UInt8 *)__dst;
  if (v39 >= 0)
    v25 = HIBYTE(v39);
  else
    v25 = v38;
  v29 = CFStringCreateWithBytes(0, v24, v25, 0x8000100u, 0);
  v40 = v29;
  if (!v29)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (SHIBYTE(v39) < 0)
    operator delete(__dst);
  objc_msgSend_createBundle(*(void **)(a2 + 24), v26, v27, v28);
  v30 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_pathForResource_ofType_(v30, v31, (uint64_t)v29, 0);
  v32 = (__CFString *)objc_claimAutoreleasedReturnValue();
  v33 = v32;
  if (!v32)
    v32 = &stru_1E60CE768;
  sub_1B0349558(v32, a1);

  CFRelease(v29);
}

void sub_1B038310C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B03831B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_1B02E983C((uint64_t)&a20);
    _Unwind_Resume(a1);
  }
  sub_1B02E983C((uint64_t)&a20);
  _Unwind_Resume(a1);
}

CFDictionaryRef CVNLPLanguageModelCopyTokenIDMap(uint64_t a1)
{
  char **v1;
  CFStringRef *v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  char *v6;
  CFStringRef *v7;
  CFStringRef *v8;
  CFStringRef *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  CFStringRef *v14;
  CFStringRef *v15;
  double *v16;
  const double *v17;
  uint64_t v18;
  const __CFString *v19;
  CFStringRef *v20;
  const void *v21;
  const void *v22;
  char *v23;
  char **v24;
  BOOL v25;
  const __CFDictionary *v26;
  CFStringRef *v27;
  CFStringRef *v28;
  void *v29;
  const void *v30;
  const void *v31;
  CFDictionaryRef Copy;
  char **v34;
  char *v35[2];
  void *__p;
  CFStringRef *v37;
  _QWORD v38[2];
  CFStringRef *v39;
  CFStringRef *v40;
  char *v41;
  _QWORD *v42;
  float64x2x2_t v43;

  (*(void (**)(char ***__return_ptr))(**(_QWORD **)(a1 + 120) + 56))(&v34);
  __p = 0;
  v37 = 0;
  v38[0] = 0;
  sub_1B0388468((uint64_t)&__p, (unint64_t)v35[1]);
  v1 = v34;
  if (v34 == v35)
  {
    v2 = v37;
  }
  else
  {
    v2 = v37;
    do
    {
      if ((unint64_t)v2 >= v38[0])
      {
        v3 = ((char *)v2 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v3 + 1) >> 60)
          sub_1B02D7758();
        v4 = (uint64_t)(v38[0] - (_QWORD)__p) >> 3;
        if (v4 <= v3 + 1)
          v4 = v3 + 1;
        if (v38[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
          v5 = 0xFFFFFFFFFFFFFFFLL;
        else
          v5 = v4;
        v42 = v38;
        if (v5)
        {
          if (v5 >> 60)
            sub_1B02D72AC();
          v6 = (char *)operator new(16 * v5);
        }
        else
        {
          v6 = 0;
        }
        v38[1] = v6;
        v39 = (CFStringRef *)&v6[16 * v3];
        v40 = v39;
        v41 = &v6[16 * v5];
        sub_1B0388B74(v39, (const UInt8 *)v1 + 32, (int *)v1 + 14);
        v7 = v39;
        v2 = v40 + 2;
        v8 = (CFStringRef *)__p;
        v9 = v37;
        if (v37 == __p)
        {
          __p = v39;
          v37 = v40 + 2;
          v38[0] = v41;
        }
        else
        {
          v10 = (char *)v37 - (_BYTE *)__p - 16;
          if (v10 < 0x50)
            goto LABEL_23;
          v11 = ((char *)(v37 - 2) - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF0;
          if ((CFStringRef *)((char *)v39 - v11 - 16) < v37 && (CFStringRef *)((char *)v37 - v11 - 16) < v39)
            goto LABEL_23;
          v12 = (v10 >> 4) + 1;
          v13 = 16 * (v12 & 0x1FFFFFFFFFFFFFFELL);
          v14 = &v39[v13 / 0xFFFFFFFFFFFFFFF8];
          v15 = &v37[v13 / 0xFFFFFFFFFFFFFFF8];
          v16 = (double *)(v39 - 4);
          v17 = (const double *)(v37 - 4);
          v18 = v12 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v43 = vld2q_f64(v17);
            vst2q_f64(v16, v43);
            *(_OWORD *)v17 = 0uLL;
            *((_OWORD *)v17 + 1) = 0uLL;
            v17 -= 4;
            v16 -= 4;
            v18 -= 2;
          }
          while (v18);
          v7 = v14;
          v9 = v15;
          if (v12 != (v12 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_23:
            v14 = v7;
            do
            {
              v19 = *(v9 - 2);
              v9 -= 2;
              *(v14 - 2) = v19;
              v14 -= 2;
              *v9 = 0;
              v14[1] = v9[1];
              v9[1] = 0;
            }
            while (v9 != v8);
          }
          v9 = (CFStringRef *)__p;
          v20 = v37;
          __p = v14;
          v37 = v2;
          v38[0] = v41;
          while (v20 != v9)
          {
            v21 = *(v20 - 1);
            if (v21)
              CFRelease(v21);
            v22 = *(v20 - 2);
            if (v22)
              CFRelease(v22);
            v20 -= 2;
          }
        }
        if (v9)
          operator delete(v9);
      }
      else
      {
        sub_1B0388B74(v2, (const UInt8 *)v1 + 32, (int *)v1 + 14);
        v2 += 2;
      }
      v37 = v2;
      v23 = v1[1];
      if (v23)
      {
        do
        {
          v24 = (char **)v23;
          v23 = *(char **)v23;
        }
        while (v23);
      }
      else
      {
        do
        {
          v24 = (char **)v1[2];
          v25 = *v24 == (char *)v1;
          v1 = v24;
        }
        while (!v25);
      }
      v1 = v24;
    }
    while (v24 != v35);
  }
  v26 = sub_1B03885DC((char *)__p, (char *)v2);
  v27 = (CFStringRef *)__p;
  if (__p)
  {
    v28 = v37;
    v29 = __p;
    if (v37 != __p)
    {
      do
      {
        v30 = *(v28 - 1);
        if (v30)
          CFRelease(v30);
        v31 = *(v28 - 2);
        if (v31)
          CFRelease(v31);
        v28 -= 2;
      }
      while (v28 != v27);
      v29 = __p;
    }
    v37 = v27;
    operator delete(v29);
  }
  Copy = CFDictionaryCreateCopy(0, v26);
  CFRelease(v26);
  sub_1B035BF54((uint64_t)&v34, v35[0]);
  return Copy;
}

void sub_1B0383510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10, char *a11)
{
  sub_1B0352278(&a9);
  sub_1B035BF54((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1B0383530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  sub_1B0388A80((void **)va1);
  sub_1B035BF54((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

CFDictionaryRef CVNLPLanguageModelCopyIDTokenMap(uint64_t a1)
{
  char **v1;
  CFNumberRef *v2;
  int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char *v7;
  CFNumberRef *v8;
  CFNumberRef *v9;
  CFNumberRef *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  CFNumberRef *v15;
  CFNumberRef *v16;
  double *v17;
  const double *v18;
  uint64_t v19;
  const __CFNumber *v20;
  CFNumberRef *v21;
  const void *v22;
  const void *v23;
  char *v24;
  char **v25;
  BOOL v26;
  const __CFDictionary *v27;
  CFNumberRef *v28;
  CFNumberRef *v29;
  void *v30;
  const void *v31;
  const void *v32;
  CFDictionaryRef Copy;
  char **v35;
  char *v36[2];
  void *__p;
  CFNumberRef *v38;
  _QWORD v39[2];
  CFNumberRef *v40;
  CFNumberRef *v41;
  char *v42;
  _QWORD *v43;
  float64x2x2_t v44;

  (*(void (**)(char ***__return_ptr))(**(_QWORD **)(a1 + 120) + 64))(&v35);
  __p = 0;
  v38 = 0;
  v39[0] = 0;
  sub_1B0388468((uint64_t)&__p, (unint64_t)v36[1]);
  v1 = v35;
  if (v35 == v36)
  {
    v2 = v38;
  }
  else
  {
    v2 = v38;
    do
    {
      v3 = *((_DWORD *)v1 + 8);
      if ((unint64_t)v2 >= v39[0])
      {
        v4 = ((char *)v2 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v4 + 1) >> 60)
          sub_1B02D7758();
        v5 = (uint64_t)(v39[0] - (_QWORD)__p) >> 3;
        if (v5 <= v4 + 1)
          v5 = v4 + 1;
        if (v39[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF0uLL)
          v6 = 0xFFFFFFFFFFFFFFFLL;
        else
          v6 = v5;
        v43 = v39;
        if (v6)
        {
          if (v6 >> 60)
            sub_1B02D72AC();
          v7 = (char *)operator new(16 * v6);
        }
        else
        {
          v7 = 0;
        }
        v39[1] = v7;
        v40 = (CFNumberRef *)&v7[16 * v4];
        v41 = v40;
        v42 = &v7[16 * v6];
        sub_1B0388CCC(v40, v3, (uint64_t)(v1 + 5));
        v8 = v40;
        v2 = v41 + 2;
        v9 = (CFNumberRef *)__p;
        v10 = v38;
        if (v38 == __p)
        {
          __p = v40;
          v38 = v41 + 2;
          v39[0] = v42;
        }
        else
        {
          v11 = (char *)v38 - (_BYTE *)__p - 16;
          if (v11 < 0x50)
            goto LABEL_23;
          v12 = ((char *)(v38 - 2) - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF0;
          if ((CFNumberRef *)((char *)v40 - v12 - 16) < v38 && (CFNumberRef *)((char *)v38 - v12 - 16) < v40)
            goto LABEL_23;
          v13 = (v11 >> 4) + 1;
          v14 = 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
          v15 = &v40[v14 / 0xFFFFFFFFFFFFFFF8];
          v16 = &v38[v14 / 0xFFFFFFFFFFFFFFF8];
          v17 = (double *)(v40 - 4);
          v18 = (const double *)(v38 - 4);
          v19 = v13 & 0x1FFFFFFFFFFFFFFELL;
          do
          {
            v44 = vld2q_f64(v18);
            vst2q_f64(v17, v44);
            *(_OWORD *)v18 = 0uLL;
            *((_OWORD *)v18 + 1) = 0uLL;
            v18 -= 4;
            v17 -= 4;
            v19 -= 2;
          }
          while (v19);
          v8 = v15;
          v10 = v16;
          if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
          {
LABEL_23:
            v15 = v8;
            do
            {
              v20 = *(v10 - 2);
              v10 -= 2;
              *(v15 - 2) = v20;
              v15 -= 2;
              *v10 = 0;
              v15[1] = v10[1];
              v10[1] = 0;
            }
            while (v10 != v9);
          }
          v10 = (CFNumberRef *)__p;
          v21 = v38;
          __p = v15;
          v38 = v2;
          v39[0] = v42;
          while (v21 != v10)
          {
            v22 = *(v21 - 1);
            if (v22)
              CFRelease(v22);
            v23 = *(v21 - 2);
            if (v23)
              CFRelease(v23);
            v21 -= 2;
          }
        }
        if (v10)
          operator delete(v10);
      }
      else
      {
        sub_1B0388CCC(v2, *((_DWORD *)v1 + 8), (uint64_t)(v1 + 5));
        v2 += 2;
      }
      v38 = v2;
      v24 = v1[1];
      if (v24)
      {
        do
        {
          v25 = (char **)v24;
          v24 = *(char **)v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          v25 = (char **)v1[2];
          v26 = *v25 == (char *)v1;
          v1 = v25;
        }
        while (!v26);
      }
      v1 = v25;
    }
    while (v25 != v36);
  }
  v27 = sub_1B03885DC((char *)__p, (char *)v2);
  v28 = (CFNumberRef *)__p;
  if (__p)
  {
    v29 = v38;
    v30 = __p;
    if (v38 != __p)
    {
      do
      {
        v31 = *(v29 - 1);
        if (v31)
          CFRelease(v31);
        v32 = *(v29 - 2);
        if (v32)
          CFRelease(v32);
        v29 -= 2;
      }
      while (v29 != v28);
      v30 = __p;
    }
    v38 = v28;
    operator delete(v30);
  }
  Copy = CFDictionaryCreateCopy(0, v27);
  CFRelease(v27);
  sub_1B035BEF4((uint64_t)&v35, v36[0]);
  return Copy;
}

void sub_1B03838A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, char a10, char *a11)
{
  sub_1B0352278(&a9);
  sub_1B035BEF4((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1B03838C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  char *v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, char *);
  v6 = va_arg(va1, _QWORD);
  sub_1B0388A80((void **)va1);
  sub_1B035BEF4((uint64_t)va, v5);
  _Unwind_Resume(a1);
}

float CVNLPLanguageModelConditionalProbability(uint64_t a1, const __CFString *a2, const void *a3)
{
  return CVNLPLanguageModelConditionalProbabilityForTokenString_0(a1, a2, a3, 1);
}

float CVNLPLanguageModelConditionalProbabilityForTokenString_0(uint64_t a1, const __CFString *a2, const void *a3, uint64_t a4)
{
  NSObject *v4;
  float v5;
  uint64_t v10;
  NSObject *v11;
  unint64_t v12;
  void *v13;
  uint8_t *v14;
  __int128 *p_buf;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  const void *v19;
  const __CFString **v20;
  uint8_t v21[16];
  void *v22;
  __int128 buf;
  unsigned __int8 v24;
  void *__p[4];

  __p[3] = *(void **)MEMORY[0x1E0C80C00];
  if (a2)
  {
    sub_1B0385B58(&buf, a2);
    v10 = v24;
    if ((v24 & 0x80u) != 0)
      v10 = *((_QWORD *)&buf + 1);
    if (v10)
    {
      sub_1B0352338(a3, &v19);
      memset(v21, 0, sizeof(v21));
      v22 = 0;
      if (v19)
      {
        v20 = (const __CFString **)&v19;
        sub_1B034AB60(&v20, __p);
        v22 = __p[2];
        *(_OWORD *)v21 = *(_OWORD *)__p;
        v12 = (unint64_t)__p[2] >> 56;
        v13 = __p[1];
        v14 = (uint8_t *)__p[0];
      }
      else
      {
        v13 = 0;
        v14 = 0;
        LODWORD(v12) = 0;
      }
      sub_1B034ABF0(&v19);
      if ((v24 & 0x80u) == 0)
        p_buf = &buf;
      else
        p_buf = (__int128 *)buf;
      if ((v24 & 0x80u) == 0)
        v16 = v24;
      else
        v16 = *((_QWORD *)&buf + 1);
      if ((v12 & 0x80u) == 0)
        v17 = v21;
      else
        v17 = v14;
      if ((v12 & 0x80u) == 0)
        v18 = v12;
      else
        v18 = (uint64_t)v13;
      v5 = sub_1B0380404(a1 + 16, (uint64_t)p_buf, v16, (uint64_t)v17, v18, a4);
      if (SHIBYTE(v22) < 0)
        operator delete(*(void **)v21);
    }
    else
    {
      if (qword_1EEEB2D38 != -1)
        dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
      v11 = (id)qword_1EEEB2D30;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        HIBYTE(__p[2]) = 21;
        strcpy((char *)__p, "Received empty token.");
        *(_DWORD *)v21 = 136315138;
        *(_QWORD *)&v21[4] = __p;
        _os_log_error_impl(&dword_1B02D2000, v11, OS_LOG_TYPE_ERROR, "%s", v21, 0xCu);
        if (SHIBYTE(__p[2]) < 0)
          operator delete(__p[0]);
      }

      v5 = 0.0;
    }
    if ((char)v24 < 0)
      operator delete((void *)buf);
  }
  else
  {
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v4 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      HIBYTE(__p[2]) = 20;
      strcpy((char *)__p, "Received null token.");
      LODWORD(buf) = 136315138;
      *(_QWORD *)((char *)&buf + 4) = __p;
      _os_log_error_impl(&dword_1B02D2000, v4, OS_LOG_TYPE_ERROR, "%s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }

    return 0.0;
  }
  return v5;
}

void sub_1B0383C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_1B034ABF0(&a9);
  if (a20 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

CFArrayRef CVNLPLanguageModelCopyConditionalProbabilities(uint64_t a1, const void *a2, CFTypeRef cf)
{
  CFTypeID TypeID;
  int Count;
  CFIndex v8;
  uint64_t v9;
  __int128 v10;
  const __CFString *ValueAtIndex;
  CFTypeID v12;
  _OWORD *v13;
  char *v14;
  char *v15;
  void *v16;
  CFArrayRef v17;
  std::runtime_error *v19;
  std::runtime_error *exception;
  void *__p;
  char *v22;
  unint64_t v23;
  void *v24[3];
  CFTypeRef cfa;
  void *v26[2];
  uint64_t v27;
  __int128 v28;
  uint64_t v29;

  if (cf)
    CFRetain(cf);
  sub_1B034AC30(&cfa, cf);
  v26[0] = 0;
  v26[1] = 0;
  v27 = 0;
  if (cfa)
  {
    v24[0] = &cfa;
    sub_1B034AB60((const __CFString ***)v24, &v28);
    *(_OWORD *)v26 = v28;
    v27 = v29;
    if (cfa)
      CFRelease(cfa);
  }
  if (!a2 || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not convert");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  Count = CFArrayGetCount((CFArrayRef)a2);
  __p = 0;
  v22 = 0;
  v23 = 0;
  sub_1B02E1E8C((uint64_t *)&__p, Count);
  if (Count >= 1)
  {
    v8 = 0;
    v9 = Count;
    do
    {
      ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex((CFArrayRef)a2, v8);
      if (!ValueAtIndex || (v12 = CFStringGetTypeID(), v12 != CFGetTypeID(ValueAtIndex)))
      {
        v19 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v19, "Could not convert");
        __cxa_throw(v19, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      sub_1B034ACEC(ValueAtIndex, &v28);
      v13 = v22;
      if ((unint64_t)v22 < v23)
      {
        v10 = v28;
        *((_QWORD *)v22 + 2) = v29;
        *v13 = v10;
        v22 = (char *)v13 + 24;
      }
      else
      {
        v22 = sub_1B0318CBC(&__p, (uint64_t)&v28);
        if (SHIBYTE(v29) < 0)
          operator delete((void *)v28);
      }
      ++v8;
    }
    while (v9 != v8);
  }
  sub_1B03804BC(a1 + 16, (uint64_t *)&__p, v24);
  v14 = (char *)__p;
  if (__p)
  {
    v15 = v22;
    v16 = __p;
    if (v22 != __p)
    {
      do
      {
        if (*(v15 - 1) < 0)
          operator delete(*((void **)v15 - 3));
        v15 -= 24;
      }
      while (v15 != v14);
      v16 = __p;
    }
    v22 = v14;
    operator delete(v16);
  }
  v17 = sub_1B0388E20((float **)v24);
  if (v24[0])
  {
    v24[1] = v24[0];
    operator delete(v24[0]);
  }
  if (SHIBYTE(v27) < 0)
    operator delete(v26[0]);
  return v17;
}

void sub_1B0383FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_1B034ABF0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0383FC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a13)
  {
    operator delete(a13);
    if (a22 < 0)
    {
LABEL_3:
      operator delete(__p);
      _Unwind_Resume(exception_object);
    }
  }
  else if (a22 < 0)
  {
    goto LABEL_3;
  }
  _Unwind_Resume(exception_object);
}

CFArrayRef CVNLPLanguageModelCopyNextTokenConditionalProbabilitiesOverVocabulary(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  float *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  float *v17;
  int *v18;
  int v19;
  uint64_t v20;
  BOOL v21;
  unint64_t v22;
  unint64_t v23;
  float *v24;
  float *v25;
  uint64_t v26;
  CFArrayRef v27;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 *v33;
  _OWORD *v34;
  unint64_t v35;
  __int128 v36;
  CFTypeRef *p_cfa;
  float *v38;
  float *v39;
  CFTypeRef v40;
  char v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  CFTypeRef cfa;
  void *__p[2];
  uint64_t v47;

  if (cf)
    CFRetain(cf);
  sub_1B034AC30(&cfa, cf);
  __p[0] = 0;
  __p[1] = 0;
  v47 = 0;
  if (cfa)
  {
    p_cfa = &cfa;
    sub_1B034AB60((const __CFString ***)&p_cfa, &v42);
    *(_OWORD *)__p = v42;
    v47 = v43;
    if (cfa)
      CFRelease(cfa);
  }
  LOBYTE(v40) = 0;
  v41 = 0;
  sub_1B0380648(a1 + 16, (uint64_t)&v40, 1, (uint64_t)&v42);
  if (v41 && v40)
    CFRelease(v40);
  v4 = v43;
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 88))(*(_QWORD *)(a1 + 120));
  v6 = v5;
  p_cfa = 0;
  v38 = 0;
  v39 = 0;
  if (v5)
  {
    if (v5 >> 62)
      sub_1B02D7758();
    v7 = v5;
    v8 = (float *)operator new(4 * v5);
    p_cfa = (CFTypeRef *)v8;
    v39 = &v8[v6];
    bzero(v8, 4 * v6);
    v38 = &v8[v7];
  }
  else
  {
    v8 = 0;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 88))(*(_QWORD *)(a1 + 120));
  if (v9)
  {
    v10 = v44;
    if (!(_DWORD)v42)
    {
      v20 = v43;
      v21 = v9 >= 0xC && v43 == 1;
      if (v21 && (unint64_t)v8 + -v44 + -4 * v4 + 4 >= 0x20)
      {
        v22 = v9 & 0xFFFFFFFFFFFFFFF8;
        v33 = (__int128 *)(4 * v4 + v44 + 12);
        v34 = v8 + 4;
        v35 = v9 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v36 = *v33;
          *(v34 - 1) = *(v33 - 1);
          *v34 = v36;
          v33 += 2;
          v34 += 2;
          v35 -= 8;
        }
        while (v35);
        if (v9 == v22)
          goto LABEL_30;
      }
      else
      {
        v22 = 0;
      }
      v23 = v9 - v22;
      v24 = &v8[v22];
      v25 = (float *)(v10 + 4 * (v4 + v22 * v20) - 4);
      v26 = 4 * v20;
      do
      {
        *v24++ = *v25;
        v25 = (float *)((char *)v25 + v26);
        --v23;
      }
      while (v23);
      goto LABEL_30;
    }
    v11 = v4 - 1;
    v12 = *((_QWORD *)&v42 + 1);
    if (v9 < 8 || (v13 = 4 * *((_QWORD *)&v42 + 1) * v11, (unint64_t)v8 - v44 - v13 < 0x20))
    {
      v14 = 0;
LABEL_18:
      v15 = v9 - v14;
      v16 = 4 * v14;
      v17 = &v8[v14];
      v18 = (int *)(v10 + v16 + 4 * v12 * v11);
      do
      {
        v19 = *v18++;
        *(_DWORD *)v17++ = v19;
        --v15;
      }
      while (v15);
      goto LABEL_30;
    }
    v14 = v9 & 0xFFFFFFFFFFFFFFF8;
    v29 = (__int128 *)(v13 + v44 + 16);
    v30 = v8 + 4;
    v31 = v9 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v32 = *v29;
      *(v30 - 1) = *(v29 - 1);
      *v30 = v32;
      v29 += 2;
      v30 += 2;
      v31 -= 8;
    }
    while (v31);
    if (v9 != v14)
      goto LABEL_18;
  }
LABEL_30:
  v27 = sub_1B0388E20((float **)&p_cfa);
  if (v8)
    operator delete(v8);
  if (SHIBYTE(v47) < 0)
    operator delete(__p[0]);
  return v27;
}

void sub_1B038432C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_1B034ABF0((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1B0384344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  void *v24;

  if (v24)
    operator delete(v24);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

CFArrayRef CVNLPLanguageModelCopyConditionalProbabilitiesForTokenIDs(uint64_t a1, const void *a2, const void *a3)
{
  CFTypeID TypeID;
  CFTypeID v7;
  void *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t OutputDimension;
  uint64_t Output;
  float *v16;
  float *v17;
  _BYTE *v18;
  CFArrayRef v19;
  int64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::runtime_error *exception;
  std::runtime_error *v25;
  void *__p;
  _BYTE *v27;
  void *v28;
  _BYTE *v29;
  float *v30;
  float *v31;
  float *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  char v37;
  CFTypeRef v38;
  char v39;

  if (!a2 || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B037179C((const __CFArray *)a2, (char **)&v28);
  if (!a3 || (v7 = CFArrayGetTypeID(), v7 != CFGetTypeID(a3)))
  {
    v25 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v25, "Could not convert");
    __cxa_throw(v25, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B037179C((const __CFArray *)a3, (char **)&__p);
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v8 = v28;
  v9 = v29 - (_BYTE *)v28;
  if (v29 == v28)
  {
    v11 = 0;
    v10 = 0;
  }
  else
  {
    if (v9 < 0)
      sub_1B02D7758();
    v10 = (char *)operator new(v29 - (_BYTE *)v28);
    v11 = &v10[4 * (v9 >> 2)];
    memcpy(v10, v8, v9);
  }
  v12 = a1 + 16;
  v13 = (v27 - (_BYTE *)__p) >> 2;
  v36 = 0;
  v37 = 0;
  LOBYTE(v38) = 0;
  v39 = 0;
  sub_1B0350ED0(v12, (uint32x4_t *)__p, (uint64_t *)v13, (uint64_t)&v38);
  if (v39 && v38)
    CFRelease(v38);
  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  Output = MRLNeuralNetworkGetOutput();
  v31 = 0;
  v32 = 0;
  v30 = 0;
  if (v11 == v10)
  {
    v16 = 0;
    v17 = 0;
    if (!v10)
    {
      v18 = __p;
      if (!__p)
        goto LABEL_16;
      goto LABEL_15;
    }
  }
  else
  {
    v21 = v11 - v10;
    if (v11 - v10 < 0)
      sub_1B02D7758();
    v22 = Output;
    v16 = (float *)operator new(v11 - v10);
    v30 = v16;
    v32 = &v16[v21 >> 2];
    bzero(v16, v21);
    v23 = 0;
    v31 = (float *)((char *)v16 + v21);
    do
    {
      v16[v23] = *(float *)(v22 + 4 * (OutputDimension * (v13 - 1) + *(unsigned int *)&v10[4 * v23]));
      ++v23;
    }
    while (v21 >> 2 != v23);
  }
  operator delete(v10);
  v17 = v16;
  v18 = __p;
  if (__p)
  {
LABEL_15:
    v27 = v18;
    operator delete(v18);
  }
LABEL_16:
  if (v28)
  {
    v29 = v28;
    operator delete(v28);
  }
  v19 = sub_1B0388E20(&v30);
  if (v17)
  {
    v31 = v17;
    operator delete(v17);
  }
  return v19;
}

void sub_1B038462C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  void *v21;
  void *v22;

  v22 = v21;
  if (v22)
    operator delete(v22);
  _Unwind_Resume(exception_object);
}

CFArrayRef CVNLPLanguageModelCopyNextTokenIDConditionalProbabilitiesOverVocabulary(uint64_t a1, const void *a2)
{
  CFTypeID TypeID;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _OWORD *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  int *v19;
  int v20;
  uint64_t v21;
  BOOL v22;
  unint64_t v23;
  unint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  uint64_t v27;
  CFArrayRef v28;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  std::runtime_error *exception;
  CFTypeRef cf;
  char v40;
  void *__p;
  char *v42;
  char *v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;

  if (!a2 || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B037179C((const __CFArray *)a2, (char **)&__p);
  LOBYTE(cf) = 0;
  v40 = 0;
  sub_1B0350D64(a1 + 16, (uint64_t)&__p, (uint64_t)&cf, 1, (uint64_t)&v44);
  if (v40 && cf)
    CFRelease(cf);
  if (__p)
  {
    v42 = (char *)__p;
    operator delete(__p);
  }
  v5 = v46;
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 88))(*(_QWORD *)(a1 + 120));
  v42 = 0;
  v43 = 0;
  __p = 0;
  if (v6)
  {
    v7 = v6;
    if (v6 >> 62)
      sub_1B02D7758();
    v8 = 4 * v6;
    v9 = operator new(4 * v6);
    __p = v9;
    v43 = (char *)v9 + 4 * v7;
    bzero(v9, 4 * v7);
    v42 = (char *)v9 + v8;
  }
  else
  {
    v9 = 0;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 120) + 88))(*(_QWORD *)(a1 + 120));
  if (v10)
  {
    v11 = v47;
    if (!v44)
    {
      v21 = v46;
      v22 = v10 >= 0xC && v46 == 1;
      if (v22 && (unint64_t)v9 + -v47 + -4 * v5 + 4 >= 0x20)
      {
        v23 = v10 & 0xFFFFFFFFFFFFFFF8;
        v34 = (__int128 *)(4 * v5 + v47 + 12);
        v35 = v9 + 1;
        v36 = v10 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v37 = *v34;
          *(v35 - 1) = *(v34 - 1);
          *v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 8;
        }
        while (v36);
        if (v10 == v23)
          goto LABEL_29;
      }
      else
      {
        v23 = 0;
      }
      v24 = v10 - v23;
      v25 = (_DWORD *)v9 + v23;
      v26 = (_DWORD *)(v11 + 4 * (v5 + v23 * v21) - 4);
      v27 = 4 * v21;
      do
      {
        *v25++ = *v26;
        v26 = (_DWORD *)((char *)v26 + v27);
        --v24;
      }
      while (v24);
      goto LABEL_29;
    }
    v12 = v5 - 1;
    v13 = v45;
    if (v10 < 8 || (v14 = 4 * v45 * v12, (unint64_t)v9 - v47 - v14 < 0x20))
    {
      v15 = 0;
LABEL_17:
      v16 = v10 - v15;
      v17 = 4 * v15;
      v18 = (_DWORD *)v9 + v15;
      v19 = (int *)(v11 + v17 + 4 * v13 * v12);
      do
      {
        v20 = *v19++;
        *v18++ = v20;
        --v16;
      }
      while (v16);
      goto LABEL_29;
    }
    v15 = v10 & 0xFFFFFFFFFFFFFFF8;
    v30 = (__int128 *)(v14 + v47 + 16);
    v31 = v9 + 1;
    v32 = v10 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      v33 = *v30;
      *(v31 - 1) = *(v30 - 1);
      *v31 = v33;
      v30 += 2;
      v31 += 2;
      v32 -= 8;
    }
    while (v32);
    if (v10 != v15)
      goto LABEL_17;
  }
LABEL_29:
  v28 = sub_1B0388E20((float **)&__p);
  if (v9)
    operator delete(v9);
  return v28;
}

void sub_1B0384990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13)
{
  void *v13;

  if (v13)
    operator delete(v13);
  _Unwind_Resume(exception_object);
}

float CVNLPLanguageModelConditionalProbabilityForTokenID(uint64_t a1, unsigned int a2, uint32x4_t *a3, uint64_t *a4)
{
  return sub_1B03849EC(a1 + 16, a2, a3, a4);
}

float sub_1B03849EC(uint64_t a1, unsigned int a2, uint32x4_t *a3, uint64_t *a4)
{
  uint64_t OutputDimension;
  CFTypeRef cf;
  char v9;

  LOBYTE(cf) = 0;
  v9 = 0;
  sub_1B0350ED0(a1, a3, a4, (uint64_t)&cf);
  if (v9 && cf)
    CFRelease(cf);
  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  return *(float *)(MRLNeuralNetworkGetOutput() + 4 * (OutputDimension * ((_QWORD)a4 - 1) + a2));
}

void sub_1B0384A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_1B034D184((uint64_t)&a11);
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1B0384AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1B034D184((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void CVNLPLanguageModelLogConditionalProbability(uint64_t a1, const __CFString *a2, const void *a3)
{
  float v3;

  v3 = CVNLPLanguageModelConditionalProbabilityForTokenString_0(a1, a2, a3, 1);
  logf(v3);
}

void CVNLPLanguageModelLogConditionalProbabilityForTokenString(uint64_t a1, const __CFString *a2, const void *a3, uint64_t a4)
{
  float v4;

  v4 = CVNLPLanguageModelConditionalProbabilityForTokenString_0(a1, a2, a3, a4);
  logf(v4);
}

float CVNLPLanguageModelLogConditionalProbabilityForTokenID(uint64_t a1, unsigned int a2, uint32x4_t *a3, uint64_t *a4)
{
  float v4;

  v4 = sub_1B03849EC(a1 + 16, a2, a3, a4);
  return logf(v4);
}

float CVNLPLanguageModelLogJointProbability(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  float v10;
  char **v11;
  char *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  float v22;
  void **v23;
  void **v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v30;
  void *__p;
  void **v32;
  CFTypeRef v33;
  char v34;
  CFTypeRef *p_cfa;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  CFTypeRef cfa;
  void *v40[2];
  uint64_t v41;
  _BYTE buf[24];
  uint64_t v43;
  __int16 v44;
  uint64_t v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 120);
  if (cf)
    CFRetain(cf);
  sub_1B034AC30(&cfa, cf);
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  if (cfa)
  {
    p_cfa = &cfa;
    sub_1B034AB60((const __CFString ***)&p_cfa, buf);
    *(_OWORD *)v40 = *(_OWORD *)buf;
    v41 = *(_QWORD *)&buf[16];
    if (cfa)
      CFRelease(cfa);
  }
  LOBYTE(v33) = 0;
  v34 = 0;
  sub_1B0380648(a1 + 16, (uint64_t)&v33, 1, (uint64_t)&p_cfa);
  if (v34 && v33)
    CFRelease(v33);
  sub_1B0368B98((uint64_t)v40, (uint64_t)&__p);
  v6 = v36;
  v5 = v37;
  if (v37 == 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (_BYTE *)__p) >> 3) + 1
    && v6 == (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4))
  {
    v7 = v5 - 1;
    if (v5 == 1)
    {
      v10 = 0.0;
      v18 = *(char *)(v4 + 55);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_25:
        v19 = v4 + 32;
        v20 = v18;
        goto LABEL_41;
      }
    }
    else
    {
      v8 = 0;
      v9 = 0;
      v10 = 0.0;
      do
      {
        v11 = (char **)((char *)__p + v8);
        if (*((char *)__p + v8 + 23) < 0)
        {
          v13 = *v11;
          v12 = v11[1];
        }
        else
        {
          v12 = (char *)*((unsigned __int8 *)__p + v8 + 23);
          v13 = (char *)__p + v8;
        }
        v14 = (*(uint64_t (**)(uint64_t, char *, char *))(*(_QWORD *)v4 + 40))(v4, v13, v12);
        v15 = v14;
        if ((_DWORD)p_cfa)
          v16 = v9;
        else
          v16 = v14;
        if (!(_DWORD)p_cfa)
          v15 = v9;
        v17 = &v37;
        if ((_DWORD)p_cfa)
          v17 = &v36;
        v10 = logf(*(float *)(v38 + 4 * (v15 + *v17 * v16))) + v10;
        ++v9;
        v8 += 24;
      }
      while (v7 != v9);
      v18 = *(char *)(v4 + 55);
      if ((v18 & 0x80000000) == 0)
        goto LABEL_25;
    }
    v19 = *(_QWORD *)(v4 + 32);
    v20 = *(_QWORD *)(v4 + 40);
LABEL_41:
    v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, v19, v20);
    v26 = v25;
    if ((_DWORD)p_cfa)
      v27 = v7;
    else
      v27 = v25;
    if (!(_DWORD)p_cfa)
      v26 = v7;
    v28 = &v36;
    if (!(_DWORD)p_cfa)
      v28 = &v37;
    v22 = logf(*(float *)(v38 + 4 * (v26 + *v28 * v27))) + v10;
    v23 = (void **)__p;
    if (!__p)
      goto LABEL_49;
    goto LABEL_31;
  }
  if (qword_1EEEB2D38 != -1)
    dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
  v21 = (id)qword_1EEEB2D30;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
  {
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 88))(v4);
    *(_DWORD *)buf = 134218752;
    *(_QWORD *)&buf[4] = v30;
    *(_WORD *)&buf[12] = 2048;
    *(_QWORD *)&buf[14] = 1 - 0x5555555555555555 * (((char *)v32 - (_BYTE *)__p) >> 3);
    *(_WORD *)&buf[22] = 2048;
    v43 = v6;
    v44 = 2048;
    v45 = v5;
    _os_log_error_impl(&dword_1B02D2000, v21, OS_LOG_TYPE_ERROR, "Expected output sequence to have dimensions (vocab=%ld, time=%ld), but got (vocab=%ld, time=%ld)", buf, 0x2Au);
  }

  v22 = -INFINITY;
  v23 = (void **)__p;
  if (!__p)
  {
LABEL_49:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      return v22;
    goto LABEL_33;
  }
LABEL_31:
  v24 = v32;
  if (v32 == v23)
  {
    v32 = v23;
    operator delete(v23);
    if (SHIBYTE(v41) < 0)
LABEL_33:
      operator delete(v40[0]);
  }
  else
  {
    do
    {
      if (*((char *)v24 - 1) < 0)
        operator delete(*(v24 - 3));
      v24 -= 3;
    }
    while (v24 != v23);
    v32 = v23;
    operator delete(__p);
    if (SHIBYTE(v41) < 0)
      goto LABEL_33;
  }
  return v22;
}

void sub_1B0384F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_1B031724C((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t CVNLPLanguageModelWithStateCreate(const void *a1)
{
  uint64_t Instance;
  _QWORD **v3;
  void *v5;
  char v6;
  void *__p[3];

  if (qword_1ED537A30 != -1)
    dispatch_once(&qword_1ED537A30, &unk_1E60CE3E0);
  Instance = _CFRuntimeCreateInstance();
  *(_BYTE *)(Instance + 16) = 0;
  *(_BYTE *)(Instance + 24) = 0;
  *(_QWORD *)(Instance + 32) = 0;
  *(_QWORD *)(Instance + 40) = 0;
  *(_QWORD *)(Instance + 48) = 0;
  v3 = (_QWORD **)CFRetain(a1);
  *(_QWORD *)(Instance + 56) = v3;
  v6 = 0;
  LOBYTE(v5) = 0;
  (*(void (**)(void **__return_ptr, _QWORD *, void **, _QWORD, uint64_t))(*v3[15] + 24))(__p, v3[15], &v5, 0, 1);
  sub_1B0385444(Instance + 16, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v6 < 0)
    operator delete(v5);
  return Instance;
}

void sub_1B03850A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *v20;

  if (__p)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      v20 = *v18;
      if (!*v18)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  v20 = *v18;
  if (!*v18)
  {
LABEL_4:
    sub_1B034D184(v17);
    _Unwind_Resume(a1);
  }
LABEL_7:
  *(_QWORD *)(v16 + 40) = v20;
  operator delete(v20);
  sub_1B034D184(v17);
  _Unwind_Resume(a1);
}

uint64_t CVNLPLanguageModelWithStateUpdateWithContext(uint64_t a1, CFTypeRef cf)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  uint64_t v8;
  void *v9[3];
  CFTypeRef cfa;
  void *v11[2];
  uint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (cf)
    CFRetain(cf);
  sub_1B034AC30(&cfa, cf);
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  if (cfa)
  {
    v9[0] = &cfa;
    sub_1B034AB60((const __CFString ***)v9, __p);
    *(_OWORD *)v11 = *(_OWORD *)__p;
    v12 = v14;
    if (cfa)
      CFRelease(cfa);
  }
  if (SHIBYTE(v12) < 0)
  {
    v6 = v11[0];
    if (!v11[1])
    {
      v8 = 0;
      goto LABEL_21;
    }
    v4 = a1 + 56;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 120);
  }
  else
  {
    if (!HIBYTE(v12))
      return 0;
    v4 = a1 + 56;
    v5 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 120);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v5 + 24))(v9);
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(*(_QWORD *)v4 + 120) + 24))(__p);
  sub_1B0385444(a1 + 16, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v9[0])
  {
    v9[1] = v9[0];
    operator delete(v9[0]);
  }
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return 1;
  v8 = 1;
  v6 = v11[0];
LABEL_21:
  operator delete(v6);
  return v8;
}

void sub_1B03852CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, char a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20)
{
  void *v21;

  if (__p)
  {
    operator delete(__p);
    v21 = a9;
    if (!a9)
    {
LABEL_3:
      if ((a18 & 0x80000000) == 0)
LABEL_8:
        _Unwind_Resume(exception_object);
LABEL_7:
      operator delete(a13);
      _Unwind_Resume(exception_object);
    }
  }
  else
  {
    v21 = a9;
    if (!a9)
      goto LABEL_3;
  }
  operator delete(v21);
  if ((a18 & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

BOOL CVNLPLanguageModelWithStateUpdateWithContextIDs(uint64_t a1, const void *a2)
{
  CFTypeID TypeID;
  void *v5;
  void *v6;
  void *v7;
  std::runtime_error *exception;
  void *__p;
  void *v11;

  if (!a2 || (TypeID = CFArrayGetTypeID(), TypeID != CFGetTypeID(a2)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B037179C((const __CFArray *)a2, (char **)&__p);
  v6 = __p;
  v5 = v11;
  if (v11 == __p)
  {
    v7 = v11;
    if (!v11)
      return v5 != v6;
    goto LABEL_5;
  }
  sub_1B0385444(a1 + 16, (uint64_t)&__p);
  v7 = __p;
  if (__p)
  {
LABEL_5:
    v11 = v7;
    operator delete(v7);
  }
  return v5 != v6;
}

void sub_1B0385414(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_1B0385430(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_1B0385444(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  __int32 v5;
  uint32x4_t *v6;
  int v7;
  CFTypeRef v8;
  char v9;
  const void *v10;
  CFTypeRef v11;
  __int32 *v12;
  unint64_t v13;
  __int32 v14;
  uint32x4_t *v15;
  int v16;
  CFTypeRef v17;
  char v18;
  const void *v19;
  CFTypeRef v20;
  unint64_t OutputDimension;
  const void *Output;
  _QWORD *v23;
  char *v24;
  char *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  void *result;
  uint64_t v30;
  int v31;
  uint64_t v32;
  unint64_t v33;
  const void *v34;
  CFTypeRef v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  CFTypeRef cf;
  _QWORD v41[3];
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 40) + 16;
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)a2)
  {
    v5 = **(_DWORD **)a2;
    v6 = (uint32x4_t *)operator new(4uLL);
    v6->i32[0] = v5;
    LOBYTE(v35) = 0;
    v36 = 0;
    v7 = *(unsigned __int8 *)(a1 + 8);
    if (*(_BYTE *)(a1 + 8))
    {
      v8 = *(CFTypeRef *)a1;
      if (*(_QWORD *)a1)
      {
        CFRetain(*(CFTypeRef *)a1);
        v35 = v8;
        v36 = 1;
        LOBYTE(cf) = 0;
        LOBYTE(v41[0]) = 0;
        CFRetain(v8);
      }
      else
      {
        v35 = 0;
        v36 = 1;
      }
      cf = v8;
      v9 = 1;
    }
    else
    {
      v9 = 0;
      LOBYTE(cf) = 0;
    }
    LOBYTE(v41[0]) = v9;
    sub_1B0350ED0(v3, v6, (uint64_t *)1, (uint64_t)&cf);
    if (LOBYTE(v41[0]) && cf)
      CFRelease(cf);
    if (v7 && v35)
      CFRelease(v35);
    v10 = (const void *)MRLNeuralNetworkCopyStates();
    sub_1B035BE48(&cf, v10);
    v11 = cf;
    sub_1B0387DAC(a1, cf, 1u);
    if (v11)
      CFRelease(v11);
    operator delete(v6);
    v12 = *(__int32 **)a2;
    if (*(_QWORD *)(a2 + 8) - *(_QWORD *)a2 >= 5uLL)
    {
      v13 = 1;
      do
      {
        v14 = v12[v13];
        v15 = (uint32x4_t *)operator new(4uLL);
        v15->i32[0] = v14;
        LOBYTE(v35) = 0;
        v36 = 0;
        v16 = *(unsigned __int8 *)(a1 + 8);
        if (*(_BYTE *)(a1 + 8))
        {
          v17 = *(CFTypeRef *)a1;
          if (*(_QWORD *)a1)
          {
            CFRetain(*(CFTypeRef *)a1);
            v35 = v17;
            v36 = 1;
            LOBYTE(cf) = 0;
            LOBYTE(v41[0]) = 0;
            CFRetain(v17);
          }
          else
          {
            v35 = 0;
            v36 = 1;
          }
          cf = v17;
          v18 = 1;
        }
        else
        {
          v18 = 0;
          LOBYTE(cf) = 0;
        }
        LOBYTE(v41[0]) = v18;
        sub_1B0350ED0(v3, v15, (uint64_t *)1, (uint64_t)&cf);
        if (LOBYTE(v41[0]) && cf)
          CFRelease(cf);
        if (v16 && v35)
          CFRelease(v35);
        v19 = (const void *)MRLNeuralNetworkCopyStates();
        sub_1B035BE48(&cf, v19);
        v20 = cf;
        sub_1B0387DAC(a1, cf, 1u);
        if (v20)
          CFRelease(v20);
        operator delete(v15);
        ++v13;
        v12 = *(__int32 **)a2;
      }
      while (v13 < (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
    }
  }
  OutputDimension = MRLNeuralNetworkGetOutputDimension();
  Output = (const void *)MRLNeuralNetworkGetOutput();
  v31 = 0;
  v32 = 1;
  v33 = OutputDimension;
  v34 = Output;
  v23 = v41;
  cf = Output;
  v41[0] = &off_1E60CD168;
  v42 = v41;
  v43 = 0;
  v41[1] = &v31;
  v44 = OutputDimension;
  v37 = 0;
  v38 = 0;
  v39 = 0;
  if (OutputDimension)
  {
    if (OutputDimension >> 62)
      sub_1B02D7758();
    v24 = (char *)operator new(4 * OutputDimension);
    v25 = &v24[4 * OutputDimension];
    bzero(v24, 4 * OutputDimension);
    v27 = (_QWORD *)(a1 + 16);
    v26 = *(void **)(a1 + 16);
    v28 = v41;
    if (v26)
      goto LABEL_36;
  }
  else
  {
    v25 = 0;
    v24 = 0;
    v27 = (_QWORD *)(a1 + 16);
    v26 = *(void **)(a1 + 16);
    v28 = v41;
    if (v26)
    {
LABEL_36:
      *(_QWORD *)(a1 + 24) = v26;
      operator delete(v26);
      *v27 = 0;
      v27[1] = 0;
      v27[2] = 0;
      OutputDimension = v44;
      Output = cf;
      v28 = v42;
    }
  }
  *(_QWORD *)(a1 + 16) = v24;
  *(_QWORD *)(a1 + 24) = v25;
  *(_QWORD *)(a1 + 32) = v25;
  result = memmove(v24, Output, 4 * OutputDimension);
  if (v28 == v41)
  {
    v30 = 4;
  }
  else
  {
    if (!v28)
      return result;
    v30 = 5;
    v23 = v28;
  }
  return (void *)(*(uint64_t (**)(_QWORD *))(*v23 + 8 * v30))(v23);
}

void sub_1B03857F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_1B03858CC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

float CVNLPLanguageModelWithStateConditionalProbabilityForTokenID(uint64_t a1, unsigned int a2)
{
  return *(float *)(*(_QWORD *)(a1 + 32) + 4 * a2);
}

float CVNLPLanguageModelWithStateConditionalProbability(uint64_t a1, const __CFString *a2)
{
  NSObject *v2;
  float v3;
  char *v6;
  NSObject *v7;
  char __p[21];
  char v9;
  uint8_t buf[23];
  char v11;
  uint8_t v12[4];
  uint8_t *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  if (!a2)
  {
    if (qword_1EEEB2D38 != -1)
      dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
    v2 = (id)qword_1EEEB2D30;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      v9 = 20;
      strcpy(__p, "Received null token.");
      *(_DWORD *)buf = 136315138;
      *(_QWORD *)&buf[4] = __p;
      _os_log_error_impl(&dword_1B02D2000, v2, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
      if (v9 < 0)
        operator delete(*(void **)__p);
    }

    return 0.0;
  }
  sub_1B0385B58(__p, a2);
  if (v9 < 0)
  {
    if (*(_QWORD *)&__p[8])
    {
      v6 = *(char **)__p;
LABEL_21:
      v3 = *(float *)(*(_QWORD *)(a1 + 32)
                    + 4
                    * (*(unsigned int (**)(_QWORD, char *))(**(_QWORD **)(*(_QWORD *)(a1 + 56) + 120) + 40))(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 120), v6));
      if ((v9 & 0x80000000) == 0)
        return v3;
      goto LABEL_17;
    }
  }
  else if (v9)
  {
    v6 = __p;
    goto LABEL_21;
  }
  if (qword_1EEEB2D38 != -1)
    dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
  v7 = (id)qword_1EEEB2D30;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    v11 = 21;
    strcpy((char *)buf, "Received empty token.");
    *(_DWORD *)v12 = 136315138;
    v13 = buf;
    _os_log_error_impl(&dword_1B02D2000, v7, OS_LOG_TYPE_ERROR, "%s", v12, 0xCu);
    if (v11 < 0)
      operator delete(*(void **)buf);
  }

  v3 = 0.0;
  if (v9 < 0)
LABEL_17:
    operator delete(*(void **)__p);
  return v3;
}

void sub_1B0385B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_1B0385B58(_QWORD *a1, const __CFString *a2)
{
  CFTypeID TypeID;
  std::runtime_error *exception;

  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(a2))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_1B034ACEC(a2, a1);
}

void sub_1B0385BCC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

CFArrayRef CVNLPLanguageModelWithStateCopyConditionalProbabilitiesOverVocabulary(uint64_t a1)
{
  _BYTE *v1;
  _BYTE *v2;
  int64_t v3;
  float *v4;
  CFArrayRef v5;
  float *v7;
  float *v8;
  float *v9;

  v7 = 0;
  v8 = 0;
  v9 = 0;
  v2 = *(_BYTE **)(a1 + 32);
  v1 = *(_BYTE **)(a1 + 40);
  v3 = v1 - v2;
  if (v1 == v2)
  {
    v4 = 0;
  }
  else
  {
    if (v3 < 0)
      sub_1B02D7758();
    v4 = (float *)operator new(v1 - v2);
    v7 = v4;
    v9 = &v4[v3 >> 2];
    memcpy(v4, v2, v3);
    v8 = v9;
  }
  v5 = sub_1B0388E20(&v7);
  if (v4)
    operator delete(v4);
  return v5;
}

void sub_1B0385C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  void *v11;

  if (v11)
    operator delete(v11);
  _Unwind_Resume(exception_object);
}

uint64_t CVNLPLanguageModelWithStateReset(uint64_t a1)
{
  CFTypeRef *v2;
  void *v4;
  char v5;
  void *__p[3];

  v2 = (CFTypeRef *)(a1 + 16);
  if (*(_BYTE *)(a1 + 24))
  {
    if (*v2)
      CFRelease(*v2);
    *(_BYTE *)(a1 + 24) = 0;
  }
  v5 = 0;
  LOBYTE(v4) = 0;
  (*(void (**)(void **__return_ptr, _QWORD, void **, _QWORD, uint64_t))(**(_QWORD **)(*(_QWORD *)(a1 + 56)
                                                                                              + 120)
                                                                                + 24))(__p, *(_QWORD *)(*(_QWORD *)(a1 + 56) + 120), &v4, 0, 1);
  sub_1B0385444((uint64_t)v2, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v5 < 0)
    operator delete(v4);
  return 1;
}

void sub_1B0385D5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16)
{
  if (__p)
  {
    operator delete(__p);
    if ((a14 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t CVNLPLanguageModelWithStateCreateCopy(uint64_t a1)
{
  uint64_t Instance;
  _BYTE *v3;
  _BYTE *v4;
  int64_t v5;
  char *v6;
  char *v7;
  int v8;
  const void *v9;
  int v10;
  const void *v11;
  const void *v12;

  if (qword_1ED537A30 != -1)
    dispatch_once(&qword_1ED537A30, &unk_1E60CE3E0);
  Instance = _CFRuntimeCreateInstance();
  *(_BYTE *)(Instance + 16) = 0;
  *(_BYTE *)(Instance + 24) = 0;
  v4 = *(_BYTE **)(a1 + 32);
  v3 = *(_BYTE **)(a1 + 40);
  v5 = v3 - v4;
  if (v3 == v4)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    if (v5 < 0)
      sub_1B02D7758();
    v6 = (char *)operator new(v3 - v4);
    v7 = &v6[4 * (v5 >> 2)];
    memcpy(v6, v4, v5);
  }
  *(_QWORD *)(Instance + 32) = v6;
  *(_QWORD *)(Instance + 40) = v7;
  *(_QWORD *)(Instance + 48) = v7;
  *(_QWORD *)(Instance + 56) = CFRetain(*(CFTypeRef *)(a1 + 56));
  v8 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    v9 = *(const void **)(a1 + 16);
    if (v9)
      CFRetain(v9);
    v10 = *(unsigned __int8 *)(Instance + 24);
    if (v10 == 1)
    {
LABEL_11:
      if (v10)
      {
        v11 = *(const void **)(Instance + 16);
        *(_QWORD *)(Instance + 16) = v9;
        v9 = v11;
      }
      if (!v8)
        return Instance;
LABEL_20:
      if (v9)
        CFRelease(v9);
      return Instance;
    }
  }
  else
  {
    v9 = 0;
    v10 = *(unsigned __int8 *)(Instance + 24);
    if (!*(_BYTE *)(Instance + 24))
      goto LABEL_11;
  }
  if (!v10)
  {
    *(_QWORD *)(Instance + 16) = v9;
    *(_BYTE *)(Instance + 24) = 1;
    return Instance;
  }
  v12 = *(const void **)(Instance + 16);
  if (v12)
    CFRelease(v12);
  *(_BYTE *)(Instance + 24) = 0;
  if (v8)
    goto LABEL_20;
  return Instance;
}

void sub_1B0385F34(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (!__p)
    sub_1B0303828(a1);
  operator delete(__p);
  sub_1B0303828(a1);
}

CFArrayRef CVNLPLanguageModelCopyPredictions(uint64_t a1, const void *a2, CFTypeRef cf)
{
  const __CFString *Value;
  CFTypeID TypeID;
  void *v8;
  unsigned __int8 *p_valuePtr;
  uint64_t v10;
  void **v11;
  int v12;
  int v13;
  int v14;
  int v15;
  BOOL v16;
  char v17;
  BOOL v18;
  void *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  void **v22;
  int v23;
  int v24;
  int v25;
  int v26;
  char v27;
  void *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  void **v31;
  int v32;
  int v33;
  int v34;
  int v35;
  char v36;
  void *v37;
  unsigned __int8 *v38;
  uint64_t v39;
  void **v40;
  int v41;
  int v42;
  int v43;
  int v44;
  char v45;
  uint64_t v46;
  void **v47;
  NSObject *v48;
  CFArrayRef v49;
  int v50;
  int v51;
  uint64_t v52;
  char *v53;
  int v57;
  int v58;
  const void *v60;
  uint64_t v61;
  float v62;
  int v63;
  _QWORD *v64;
  std::runtime_error *v66;
  const __CFNumber *v67;
  CFTypeID v68;
  int v69;
  CFTypeID v70;
  uint64_t v71;
  const void *v72;
  void **v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  unsigned __int8 v79;
  uint64_t v81;
  char *v82;
  char *v83;
  unint64_t v84;
  __int128 v85;
  char *v86;
  void *v87;
  int64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  char *v92;
  _QWORD *v93;
  _QWORD *v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  __int128 *v101;
  _OWORD *v102;
  uint64_t v103;
  __int128 v104;
  uint64_t v105;
  _QWORD *v106;
  const void *v107;
  const void *v108;
  const void *v109;
  unint64_t v110;
  char *v111;
  void *v112;
  char *v113;
  size_t v114;
  char *v115;
  char *v116;
  void *v117;
  const void *v118;
  const void *v119;
  void **v120;
  void **v121;
  void *v122;
  CFDictionaryRef v123;
  std::runtime_error *v125;
  std::runtime_error *exception;
  std::runtime_error *v127;
  std::runtime_error *v128;
  std::runtime_error *v129;
  std::runtime_error *v130;
  std::runtime_error *v131;
  std::runtime_error *v132;
  std::runtime_error *v133;
  std::runtime_error *v134;
  std::runtime_error *v135;
  void *v136;
  void **v137;
  _DWORD v138[2];
  _DWORD v139[2];
  _DWORD v140[2];
  void *__dst[2];
  char *v142;
  void *v143[2];
  char *v144;
  CFTypeRef cfa;
  void *v146[2];
  uint64_t v147;
  CFDictionaryRef theDict;
  void *__p[2];
  char *v150;
  void *__s1[2];
  char *v152;
  __int128 valuePtr;
  uint64_t v154;
  char *v155;
  char **v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  if (cf)
    CFRetain(cf);
  sub_1B03712E4(&theDict, cf);
  if (a2)
    CFRetain(a2);
  sub_1B034AC30(&cfa, a2);
  v146[0] = 0;
  v146[1] = 0;
  v147 = 0;
  if (cfa)
  {
    __s1[0] = &cfa;
    sub_1B034AB60((const __CFString ***)__s1, &valuePtr);
    *(_OWORD *)v146 = valuePtr;
    v147 = v154;
    if (cfa)
      CFRelease(cfa);
  }
  if (!theDict)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B0387594(&valuePtr, "Method");
  if (!theDict
    || !(_QWORD)valuePtr
    || (Value = (const __CFString *)CFDictionaryGetValue(theDict, (const void *)valuePtr)) == 0)
  {
    v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v125, "Could not find item");
    goto LABEL_300;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(Value))
  {
    v125 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v125, "Could not convert");
LABEL_300:
    __cxa_throw(v125, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  sub_1B034ACEC(Value, v143);
  if ((_QWORD)valuePtr)
    CFRelease((CFTypeRef)valuePtr);
  if (SHIBYTE(v144) < 0)
  {
    sub_1B02EB0A8(__dst, v143[0], (unint64_t)v143[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v143;
    v142 = v144;
  }
  if (SHIBYTE(v142) < 0)
  {
    sub_1B02EB0A8(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)__dst;
    v150 = v142;
  }
  if (SHIBYTE(v150) < 0)
  {
    sub_1B02EB0A8(__s1, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)__s1 = *(_OWORD *)__p;
    v152 = v150;
  }
  *(_QWORD *)&valuePtr = 0x594445455247;
  LODWORD(v154) = (_DWORD)v136;
  *(_DWORD *)((char *)&v154 + 3) = *(_DWORD *)((char *)&v136 + 3);
  HIBYTE(v154) = 6;
  if (SHIBYTE(v152) >= 0)
    v8 = (void *)HIBYTE(v152);
  else
    v8 = __s1[1];
  if (v8 == (void *)6)
  {
    p_valuePtr = (unsigned __int8 *)&valuePtr;
    if ((HIBYTE(v152) & 0x80) != 0)
    {
      v18 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
    }
    else if (HIBYTE(v152))
    {
      v10 = HIBYTE(v152) - 1;
      v11 = __s1;
      do
      {
        v13 = *(unsigned __int8 *)v11;
        v11 = (void **)((char *)v11 + 1);
        v12 = v13;
        v15 = *p_valuePtr++;
        v14 = v15;
        v16 = v10-- != 0;
        v17 = v16;
        v18 = v12 == v14;
      }
      while (v12 == v14 && (v17 & 1) != 0);
    }
    else
    {
      v18 = 1;
    }
  }
  else
  {
    v18 = 0;
  }
  if (!v18)
  {
    *(_QWORD *)&valuePtr = 1296123202;
    LODWORD(v154) = v140[0];
    *(_DWORD *)((char *)&v154 + 3) = *(_DWORD *)((char *)v140 + 3);
    HIBYTE(v154) = 4;
    v19 = SHIBYTE(v152) >= 0 ? (void *)HIBYTE(v152) : __s1[1];
    if (v19 == (void *)4)
    {
      v20 = (unsigned __int8 *)&valuePtr;
      if ((HIBYTE(v152) & 0x80) != 0)
      {
        v18 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
      }
      else if (HIBYTE(v152))
      {
        v21 = HIBYTE(v152) - 1;
        v22 = __s1;
        do
        {
          v24 = *(unsigned __int8 *)v22;
          v22 = (void **)((char *)v22 + 1);
          v23 = v24;
          v26 = *v20++;
          v25 = v26;
          v16 = v21-- != 0;
          v27 = v16;
          v18 = v23 == v25;
        }
        while (v23 == v25 && (v27 & 1) != 0);
      }
      else
      {
        v18 = 1;
      }
    }
    else
    {
      v18 = 0;
    }
    if (!v18)
    {
      *(_QWORD *)&valuePtr = 0x4B5F504F54;
      LODWORD(v154) = v139[0];
      *(_DWORD *)((char *)&v154 + 3) = *(_DWORD *)((char *)v139 + 3);
      HIBYTE(v154) = 5;
      v28 = SHIBYTE(v152) >= 0 ? (void *)HIBYTE(v152) : __s1[1];
      if (v28 == (void *)5)
      {
        v29 = (unsigned __int8 *)&valuePtr;
        if ((HIBYTE(v152) & 0x80) != 0)
        {
          v18 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
        }
        else if (HIBYTE(v152))
        {
          v30 = HIBYTE(v152) - 1;
          v31 = __s1;
          do
          {
            v33 = *(unsigned __int8 *)v31;
            v31 = (void **)((char *)v31 + 1);
            v32 = v33;
            v35 = *v29++;
            v34 = v35;
            v16 = v30-- != 0;
            v36 = v16;
            v18 = v32 == v34;
          }
          while (v32 == v34 && (v36 & 1) != 0);
        }
        else
        {
          v18 = 1;
        }
      }
      else
      {
        v18 = 0;
      }
      if (!v18)
      {
        *(_QWORD *)&valuePtr = 0x5355454C43554ELL;
        LODWORD(v154) = v138[0];
        *(_DWORD *)((char *)&v154 + 3) = *(_DWORD *)((char *)v138 + 3);
        HIBYTE(v154) = 7;
        if (SHIBYTE(v152) >= 0)
          v37 = (void *)HIBYTE(v152);
        else
          v37 = __s1[1];
        if (v37 == (void *)7)
        {
          v38 = (unsigned __int8 *)&valuePtr;
          if ((HIBYTE(v152) & 0x80) != 0)
          {
            v18 = memcmp(__s1[0], &valuePtr, (size_t)__s1[1]) == 0;
          }
          else if (HIBYTE(v152))
          {
            v39 = HIBYTE(v152) - 1;
            v40 = __s1;
            do
            {
              v42 = *(unsigned __int8 *)v40;
              v40 = (void **)((char *)v40 + 1);
              v41 = v42;
              v44 = *v38++;
              v43 = v44;
              v16 = v39-- != 0;
              v45 = v16;
              v18 = v41 == v43;
            }
            while (v41 == v43 && (v45 & 1) != 0);
          }
          else
          {
            v18 = 1;
          }
        }
        else
        {
          v18 = 0;
        }
      }
    }
  }
  if (SHIBYTE(v152) < 0)
  {
    operator delete(__s1[0]);
    if ((SHIBYTE(v150) & 0x80000000) == 0)
    {
LABEL_93:
      if ((SHIBYTE(v142) & 0x80000000) == 0)
        goto LABEL_94;
      goto LABEL_101;
    }
  }
  else if ((SHIBYTE(v150) & 0x80000000) == 0)
  {
    goto LABEL_93;
  }
  operator delete(__p[0]);
  if ((SHIBYTE(v142) & 0x80000000) == 0)
  {
LABEL_94:
    if (v18)
      goto LABEL_95;
    goto LABEL_102;
  }
LABEL_101:
  operator delete(__dst[0]);
  if (v18)
  {
LABEL_95:
    v46 = a1 + 16;
    if ((SHIBYTE(v144) & 0x80000000) == 0)
    {
      v47 = v143;
      switch(HIBYTE(v144))
      {
        case 4:
          if (LODWORD(v143[0]) == 1296123202)
            goto LABEL_108;
          goto LABEL_157;
        case 5:
          if (LODWORD(v143[0]) != 1599098708 || BYTE4(v143[0]) != 75)
            goto LABEL_157;
          goto LABEL_159;
        case 6:
          if (LODWORD(v143[0]) != 1162170951 || WORD2(v143[0]) != 22852)
            goto LABEL_157;
          goto LABEL_132;
        case 7:
          goto LABEL_135;
        default:
          goto LABEL_157;
      }
    }
    switch((unint64_t)v143[1])
    {
      case 4uLL:
        if (*(_DWORD *)v143[0] != 1296123202)
          goto LABEL_157;
LABEL_108:
        if (!theDict)
        {
          v130 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v130, "Could not construct");
          __cxa_throw(v130, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        sub_1B0387594(&valuePtr, "TopK");
        v50 = sub_1B038925C(theDict, (const void *)valuePtr);
        if ((_QWORD)valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        if (!theDict)
        {
          v131 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v131, "Could not construct");
          __cxa_throw(v131, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        sub_1B0387594(&valuePtr, "Number");
        v51 = sub_1B038925C(theDict, (const void *)valuePtr);
        if ((_QWORD)valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        v52 = operator new();
        v53 = (char *)&unk_1E60CCB98;
        goto LABEL_166;
      case 5uLL:
        if (*(_DWORD *)v143[0] != 1599098708 || *((_BYTE *)v143[0] + 4) != 75)
          goto LABEL_157;
LABEL_159:
        if (!theDict)
        {
          v133 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v133, "Could not construct");
          __cxa_throw(v133, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        sub_1B0387594(&valuePtr, "TopK");
        v50 = sub_1B038925C(theDict, (const void *)valuePtr);
        if ((_QWORD)valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        if (!theDict)
        {
          v134 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v134, "Could not construct");
          __cxa_throw(v134, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        sub_1B0387594(&valuePtr, "Number");
        v51 = sub_1B038925C(theDict, (const void *)valuePtr);
        if ((_QWORD)valuePtr)
          CFRelease((CFTypeRef)valuePtr);
        v52 = operator new();
        v53 = (char *)&unk_1E60CCBC0;
LABEL_166:
        *(_QWORD *)v52 = v53 + 16;
        *(_QWORD *)(v52 + 8) = v46;
        *(_DWORD *)(v52 + 16) = v50;
        *(_DWORD *)(v52 + 20) = v51;
        goto LABEL_167;
      case 6uLL:
        if (*(_DWORD *)v143[0] != 1162170951 || *((_WORD *)v143[0] + 2) != 22852)
          goto LABEL_157;
LABEL_132:
        v52 = operator new();
        *(_QWORD *)v52 = &unk_1E60CCBF8;
        *(_QWORD *)(v52 + 8) = v46;
        if (!theDict)
          goto LABEL_158;
        goto LABEL_168;
      case 7uLL:
        v47 = (void **)v143[0];
LABEL_135:
        v57 = *(_DWORD *)v47;
        v58 = *(_DWORD *)((char *)v47 + 3);
        if (v57 != 1279481166 || v58 != 1398097228)
          goto LABEL_157;
        if (!theDict)
        {
          v132 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v132, "Could not construct");
          __cxa_throw(v132, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
        }
        sub_1B0387594(&valuePtr, "NucleusThreshold");
        if (theDict && (_QWORD)valuePtr && (v60 = CFDictionaryGetValue(theDict, (const void *)valuePtr)) != 0)
        {
          v61 = sub_1B0389300((uint64_t)v60);
          if ((v61 & 0xFF00000000) != 0)
          {
            v62 = *(float *)&v61;
            if ((_QWORD)valuePtr)
              CFRelease((CFTypeRef)valuePtr);
            if (!theDict)
            {
              v135 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v135, "Could not construct");
              __cxa_throw(v135, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
            sub_1B0387594(&valuePtr, "Number");
            v63 = sub_1B038925C(theDict, (const void *)valuePtr);
            if ((_QWORD)valuePtr)
              CFRelease((CFTypeRef)valuePtr);
            v52 = operator new();
            *(_QWORD *)v52 = &unk_1E60CCC20;
            *(_QWORD *)(v52 + 8) = v46;
            *(float *)(v52 + 16) = v62;
            *(_DWORD *)(v52 + 20) = v63;
            *(_DWORD *)(v52 + 24) = 0;
            *(_OWORD *)(v52 + 72) = 0u;
            *(_OWORD *)(v52 + 88) = 0u;
            *(_OWORD *)(v52 + 32) = 0u;
            *(_OWORD *)(v52 + 48) = 0u;
            *(_DWORD *)(v52 + 64) = 0;
            if (v62 < 0.0 || v62 > 1.0)
            {
              v64 = __cxa_allocate_exception(0x20uLL);
              sub_1B03895A0(v64);
              __cxa_throw(v64, (struct type_info *)&unk_1E60CB0D0, (void (*)(void *))sub_1B038976C);
            }
LABEL_167:
            if (!theDict)
            {
LABEL_158:
              v66 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v66, "Could not construct");
              __cxa_throw(v66, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
            }
LABEL_168:
            sub_1B0387594(__s1, "MaxLength");
            if (theDict && __s1[0] && (v67 = (const __CFNumber *)CFDictionaryGetValue(theDict, __s1[0])) != 0)
            {
              v68 = CFNumberGetTypeID();
              if (v68 == CFGetTypeID(v67))
              {
                switch(CFNumberGetType(v67))
                {
                  case kCFNumberSInt8Type:
                    LOBYTE(valuePtr) = 0;
                    v69 = CFNumberGetValue(v67, kCFNumberSInt8Type, &valuePtr);
                    goto LABEL_202;
                  case kCFNumberSInt16Type:
                    LOWORD(valuePtr) = 0;
                    v78 = CFNumberGetValue(v67, kCFNumberSInt16Type, &valuePtr);
                    goto LABEL_193;
                  case kCFNumberSInt32Type:
                    LODWORD(valuePtr) = 0;
                    v77 = CFNumberGetValue(v67, kCFNumberSInt32Type, &valuePtr);
                    goto LABEL_219;
                  case kCFNumberSInt64Type:
                    *(_QWORD *)&valuePtr = 0;
                    v74 = CFNumberGetValue(v67, kCFNumberSInt64Type, &valuePtr);
                    goto LABEL_215;
                  case kCFNumberFloat32Type:
                    LODWORD(valuePtr) = 0;
                    v75 = CFNumberGetValue(v67, kCFNumberFloat32Type, &valuePtr);
                    goto LABEL_183;
                  case kCFNumberFloat64Type:
                    *(_QWORD *)&valuePtr = 0;
                    v76 = CFNumberGetValue(v67, kCFNumberFloat64Type, &valuePtr);
                    goto LABEL_197;
                  case kCFNumberCharType:
                    LOBYTE(valuePtr) = 0;
                    v69 = CFNumberGetValue(v67, kCFNumberCharType, &valuePtr);
LABEL_202:
                    if (v69)
                      v79 = valuePtr;
                    else
                      v79 = 0;
                    if ((valuePtr & 0x80u) == 0 || v69 == 0)
                      v81 = 0;
                    else
                      v81 = -256;
                    if (!v69)
                      goto LABEL_302;
                    v71 = v81 & 0xFFFFFFFFFFFFFF00 | v79;
                    v72 = __s1[0];
                    if (!__s1[0])
                      goto LABEL_222;
                    goto LABEL_221;
                  case kCFNumberShortType:
                    LOWORD(valuePtr) = 0;
                    v78 = CFNumberGetValue(v67, kCFNumberShortType, &valuePtr);
LABEL_193:
                    if (!v78)
                      goto LABEL_302;
                    v71 = (__int16)valuePtr & 0xFFFFFFFFFFFFFF00 | valuePtr;
                    v72 = __s1[0];
                    if (!__s1[0])
                      goto LABEL_222;
                    goto LABEL_221;
                  case kCFNumberIntType:
                    LODWORD(valuePtr) = 0;
                    v77 = CFNumberGetValue(v67, kCFNumberIntType, &valuePtr);
LABEL_219:
                    if (!v77)
                      goto LABEL_302;
                    v71 = (int)valuePtr & 0xFFFFFFFFFFFFFF00 | valuePtr;
                    v72 = __s1[0];
                    if (__s1[0])
                      goto LABEL_221;
                    goto LABEL_222;
                  case kCFNumberLongType:
                    *(_QWORD *)&valuePtr = 0;
                    v74 = CFNumberGetValue(v67, kCFNumberLongType, &valuePtr);
                    goto LABEL_215;
                  case kCFNumberLongLongType:
                    *(_QWORD *)&valuePtr = 0;
                    v74 = CFNumberGetValue(v67, kCFNumberLongLongType, &valuePtr);
                    goto LABEL_215;
                  case kCFNumberFloatType:
                    LODWORD(valuePtr) = 0;
                    v75 = CFNumberGetValue(v67, kCFNumberFloatType, &valuePtr);
LABEL_183:
                    if (!v75)
                      goto LABEL_302;
                    v71 = (unint64_t)*(float *)&valuePtr;
                    v72 = __s1[0];
                    if (!__s1[0])
                      goto LABEL_222;
                    goto LABEL_221;
                  case kCFNumberDoubleType:
                    *(_QWORD *)&valuePtr = 0;
                    v76 = CFNumberGetValue(v67, kCFNumberDoubleType, &valuePtr);
                    goto LABEL_197;
                  case kCFNumberCFIndexType:
                    *(_QWORD *)&valuePtr = 0;
                    v74 = CFNumberGetValue(v67, kCFNumberCFIndexType, &valuePtr);
                    goto LABEL_215;
                  case kCFNumberNSIntegerType:
                    *(_QWORD *)&valuePtr = 0;
                    v74 = CFNumberGetValue(v67, kCFNumberNSIntegerType, &valuePtr);
LABEL_215:
                    if (!v74)
                      goto LABEL_302;
                    v71 = valuePtr;
                    v72 = __s1[0];
                    if (!__s1[0])
                      goto LABEL_222;
                    goto LABEL_221;
                  case kCFNumberCGFloatType:
                    *(_QWORD *)&valuePtr = 0;
                    v76 = CFNumberGetValue(v67, kCFNumberCGFloatType, &valuePtr);
LABEL_197:
                    if (!v76)
                      goto LABEL_302;
                    v71 = (unint64_t)*(double *)&valuePtr;
                    v72 = __s1[0];
                    if (!__s1[0])
                      goto LABEL_222;
                    goto LABEL_221;
                  default:
                    goto LABEL_302;
                }
              }
              v70 = CFBooleanGetTypeID();
              if (v70 == CFGetTypeID(v67))
              {
                v71 = CFBooleanGetValue(v67);
                v72 = __s1[0];
                if (__s1[0])
LABEL_221:
                  CFRelease(v72);
LABEL_222:
                sub_1B034C4A8((_QWORD *)v52, v71, (uint64_t)&v136);
                v83 = (char *)v136;
                v82 = (char *)v137;
                __s1[0] = 0;
                __s1[1] = 0;
                v152 = 0;
                if (v137 == v136)
                  goto LABEL_265;
                v84 = 0xAAAAAAAAAAAAAAABLL * (((char *)v137 - (_BYTE *)v136) >> 3);
                if (v84 >> 61)
                  sub_1B02D7758();
                __s1[0] = operator new(0x5555555555555558 * (((char *)v137 - (_BYTE *)v136) >> 3));
                __s1[1] = __s1[0];
                v152 = (char *)__s1[0] + 8 * v84;
                do
                {
                  if (v83[23] < 0)
                  {
                    sub_1B02EB0A8(__p, *(void **)v83, *((_QWORD *)v83 + 1));
                  }
                  else
                  {
                    v85 = *(_OWORD *)v83;
                    v150 = (char *)*((_QWORD *)v83 + 2);
                    *(_OWORD *)__p = v85;
                  }
                  v86 = (char *)__s1[1];
                  if (__s1[1] >= v152)
                  {
                    v88 = ((char *)__s1[1] - (char *)__s1[0]) >> 3;
                    if ((unint64_t)(v88 + 1) >> 61)
                      sub_1B02D7758();
                    v89 = (v152 - (char *)__s1[0]) >> 2;
                    if (v89 <= v88 + 1)
                      v89 = v88 + 1;
                    if ((unint64_t)(v152 - (char *)__s1[0]) >= 0x7FFFFFFFFFFFFFF8)
                      v90 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v90 = v89;
                    v156 = &v152;
                    if (v90)
                    {
                      if (v90 >> 61)
                        sub_1B02D72AC();
                      v91 = (char *)operator new(8 * v90);
                    }
                    else
                    {
                      v91 = 0;
                    }
                    *(_QWORD *)&valuePtr = v91;
                    *((_QWORD *)&valuePtr + 1) = &v91[8 * v88];
                    v154 = *((_QWORD *)&valuePtr + 1);
                    v155 = &v91[8 * v90];
                    sub_1B03898E4(*((CFStringRef **)&valuePtr + 1), (const UInt8 *)__p);
                    v92 = (char *)*((_QWORD *)&valuePtr + 1);
                    v87 = (void *)(v154 + 8);
                    v93 = __s1[0];
                    v94 = __s1[1];
                    if (__s1[1] == __s1[0])
                    {
                      __s1[0] = *((void **)&valuePtr + 1);
                      __s1[1] = (void *)(v154 + 8);
                      v152 = v155;
                    }
                    else
                    {
                      v95 = (char *)__s1[1] - (char *)__s1[0] - 8;
                      if (v95 < 0x48)
                        goto LABEL_248;
                      v96 = ((char *)__s1[1] - 8 - (char *)__s1[0]) & 0xFFFFFFFFFFFFFFF8;
                      if ((void *)(*((_QWORD *)&valuePtr + 1) - v96 - 8) < __s1[1]
                        && (char *)__s1[1] - v96 - 8 < (void *)*((_QWORD *)&valuePtr + 1))
                      {
                        goto LABEL_248;
                      }
                      v97 = (v95 >> 3) + 1;
                      v98 = 8 * (v97 & 0x3FFFFFFFFFFFFFFCLL);
                      v99 = (char *)(*((_QWORD *)&valuePtr + 1) - v98);
                      v100 = (char *)__s1[1] - v98;
                      v101 = (__int128 *)((char *)__s1[1] - 16);
                      v102 = (_OWORD *)(*((_QWORD *)&valuePtr + 1) - 16);
                      v103 = v97 & 0x3FFFFFFFFFFFFFFCLL;
                      do
                      {
                        v104 = *v101;
                        *(v102 - 1) = *(v101 - 1);
                        *v102 = v104;
                        *(v101 - 1) = 0uLL;
                        *v101 = 0uLL;
                        v101 -= 2;
                        v102 -= 2;
                        v103 -= 4;
                      }
                      while (v103);
                      v92 = v99;
                      v94 = v100;
                      if (v97 != (v97 & 0x3FFFFFFFFFFFFFFCLL))
                      {
LABEL_248:
                        v99 = v92;
                        do
                        {
                          v105 = *--v94;
                          *((_QWORD *)v99 - 1) = v105;
                          v99 -= 8;
                          *v94 = 0;
                        }
                        while (v94 != v93);
                      }
                      v94 = __s1[0];
                      v106 = __s1[1];
                      __s1[0] = v99;
                      __s1[1] = v87;
                      v152 = v155;
                      while (v106 != v94)
                      {
                        v108 = (const void *)*--v106;
                        v107 = v108;
                        if (v108)
                          CFRelease(v107);
                      }
                    }
                    if (v94)
                      operator delete(v94);
                  }
                  else
                  {
                    sub_1B03898E4((CFStringRef *)__s1[1], (const UInt8 *)__p);
                    v87 = v86 + 8;
                  }
                  __s1[1] = v87;
                  if (SHIBYTE(v150) < 0)
                    operator delete(__p[0]);
                  v83 += 24;
                }
                while (v83 != v82);
                v109 = __s1[0];
                valuePtr = 0uLL;
                v154 = 0;
                v110 = (char *)__s1[1] - (char *)__s1[0];
                if (__s1[1] == __s1[0])
                {
LABEL_265:
                  v112 = 0;
                  v113 = 0;
                }
                else
                {
                  if ((v110 & 0x8000000000000000) != 0)
                    sub_1B02D7758();
                  v111 = (char *)operator new((char *)__s1[1] - (char *)__s1[0]);
                  v112 = v111;
                  v113 = &v111[v110];
                  if (v110 >= (v110 & 0xFFFFFFFFFFFFFFF8))
                    v114 = v110 - (v110 & 0xFFFFFFFFFFFFFFF8);
                  else
                    v114 = 0;
                  bzero(&v111[v110 & 0xFFFFFFFFFFFFFFF8], v114);
                  memcpy(v112, v109, v110 & 0xFFFFFFFFFFFFFFF8);
                }
                v49 = CFArrayCreate(0, (const void **)v112, (v113 - (_BYTE *)v112) >> 3, MEMORY[0x1E0C9B378]);
                if (!v49)
                {
                  v128 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
                  std::runtime_error::runtime_error(v128, "Could not construct");
                  __cxa_throw(v128, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
                }
                if (v112)
                  operator delete(v112);
                v115 = (char *)__s1[0];
                if (__s1[0])
                {
                  v116 = (char *)__s1[1];
                  v117 = __s1[0];
                  if (__s1[1] != __s1[0])
                  {
                    do
                    {
                      v119 = (const void *)*((_QWORD *)v116 - 1);
                      v116 -= 8;
                      v118 = v119;
                      if (v119)
                        CFRelease(v118);
                    }
                    while (v116 != v115);
                    v117 = __s1[0];
                  }
                  __s1[1] = v115;
                  operator delete(v117);
                }
                v120 = (void **)v136;
                if (v136)
                {
                  v121 = v137;
                  v122 = v136;
                  if (v137 != v136)
                  {
                    do
                    {
                      if (*((char *)v121 - 1) < 0)
                        operator delete(*(v121 - 3));
                      v121 -= 3;
                    }
                    while (v121 != v120);
                    v122 = v136;
                  }
                  v137 = v120;
                  operator delete(v122);
                }
                if (v52)
                  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
                goto LABEL_287;
              }
LABEL_302:
              v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v127, "Could not convert");
            }
            else
            {
              v127 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
              std::runtime_error::runtime_error(v127, "Could not find item");
            }
            __cxa_throw(v127, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
          }
          v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v129, "Could not convert");
        }
        else
        {
          v129 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
          std::runtime_error::runtime_error(v129, "Could not find item");
        }
        __cxa_throw(v129, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      default:
LABEL_157:
        v52 = 0;
        if (!theDict)
          goto LABEL_158;
        goto LABEL_168;
    }
  }
LABEL_102:
  if (qword_1EEEB2D38 != -1)
    dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
  v48 = (id)qword_1EEEB2D30;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
  {
    v73 = v143;
    if (SHIBYTE(v144) < 0)
      v73 = (void **)v143[0];
    LODWORD(valuePtr) = 136315138;
    *(_QWORD *)((char *)&valuePtr + 4) = v73;
    _os_log_error_impl(&dword_1B02D2000, v48, OS_LOG_TYPE_ERROR, "Invalid sampling method: \"%s\"", (uint8_t *)&valuePtr, 0xCu);
  }

  v49 = 0;
LABEL_287:
  if (SHIBYTE(v144) < 0)
  {
    operator delete(v143[0]);
    if ((SHIBYTE(v147) & 0x80000000) == 0)
    {
LABEL_289:
      v123 = theDict;
      if (!theDict)
        return v49;
      goto LABEL_293;
    }
  }
  else if ((SHIBYTE(v147) & 0x80000000) == 0)
  {
    goto LABEL_289;
  }
  operator delete(v146[0]);
  v123 = theDict;
  if (theDict)
LABEL_293:
    CFRelease(v123);
  return v49;
}

void sub_1B0387214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,const void *a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44)
{
  uint64_t v44;

  MEMORY[0x1B5E07CD8](v44, 0x10A1C40A0D887F0);
  if (a27 < 0)
  {
    operator delete(__p);
    if ((a34 & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((a34 & 0x80000000) == 0)
  {
LABEL_3:
    sub_1B0352278(&a35);
    _Unwind_Resume(a1);
  }
  operator delete(a29);
  sub_1B0352278(&a35);
  _Unwind_Resume(a1);
}

void sub_1B0387594(_QWORD *a1, char *__s)
{
  size_t v4;
  size_t v5;
  _BYTE **p_dst;
  int v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  const __CFString *v14;
  NSObject *v29;
  std::string *v30;
  std::logic_error *exception;
  std::string v32;
  _BYTE *__dst;
  size_t v34;
  unint64_t v35;
  const char *v36;
  uint8_t buf[4];
  std::string *v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v36 = __s;
  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_1B02D78C4();
  v5 = v4;
  if (v4 >= 0x17)
  {
    v10 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v10 = v4 | 7;
    v11 = v10 + 1;
    p_dst = (_BYTE **)operator new(v10 + 1);
    v34 = v5;
    v35 = v11 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v35) = v4;
    p_dst = &__dst;
    if (!v4)
    {
      LOBYTE(__dst) = 0;
      v7 = HIBYTE(v35);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
        goto LABEL_5;
      goto LABEL_15;
    }
  }
  memcpy(p_dst, __s, v5);
  *((_BYTE *)p_dst + v5) = 0;
  v7 = HIBYTE(v35);
  if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
LABEL_5:
    v8 = &__dst;
    switch(v7)
    {
      case 3:
        if ((unsigned __int16)__dst != 21077 || BYTE2(__dst) != 76)
          goto LABEL_111;
        goto LABEL_21;
      case 4:
        goto LABEL_32;
      case 6:
        if ((_DWORD)__dst == 1633906508 && WORD2(__dst) == 25964)
          goto LABEL_103;
        if ((_DWORD)__dst == 1752458573 && WORD2(__dst) == 25711)
          goto LABEL_109;
        if ((_DWORD)__dst != 1651340622 || WORD2(__dst) != 29285)
          goto LABEL_111;
        goto LABEL_104;
      case 8:
        goto LABEL_92;
      case 9:
        if (__dst == (_BYTE *)0x7079546E656B6F54 && v34 == 101)
          goto LABEL_102;
        if (__dst == (_BYTE *)0x74676E654C78614DLL && v34 == 104)
          goto LABEL_105;
        if (v7 == 8)
        {
LABEL_58:
          v8 = &__dst;
          goto LABEL_92;
        }
        if (v7 != 4)
          goto LABEL_111;
LABEL_32:
        if ((_DWORD)__dst == 1265659732)
          goto LABEL_94;
        if ((v7 & 0x80) == 0)
        {
LABEL_111:
          sub_1B0387E64((uint64_t)&v32, &v36);
          if (qword_1EEEB2D38 != -1)
            dispatch_once(&qword_1EEEB2D38, &unk_1E60CDAE8);
          v29 = (id)qword_1EEEB2D30;
          if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
          {
            v30 = &v32;
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
              v30 = (std::string *)v32.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136315138;
            v38 = v30;
            _os_log_error_impl(&dword_1B02D2000, v29, OS_LOG_TYPE_ERROR, "%s", buf, 0xCu);
          }

          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          std::logic_error::logic_error(exception, &v32);
          exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x1E0DE5038] + 16);
          __cxa_throw(exception, (struct type_info *)off_1E60CA338, MEMORY[0x1E0DE4360]);
        }
        return;
      case 12:
        if (__dst != (_BYTE *)0x6365746968637241 || (_DWORD)v34 != 1701999988)
          goto LABEL_111;
        goto LABEL_100;
      case 16:
        if (__dst == (_BYTE *)0x547375656C63754ELL && v34 == 0x646C6F6873657268)
          goto LABEL_101;
        if (v7 == 8)
          goto LABEL_58;
        goto LABEL_111;
      default:
        goto LABEL_111;
    }
    goto LABEL_83;
  }
LABEL_15:
  v12 = v34;
  switch(v34)
  {
    case 3uLL:
      if (*(_WORD *)__dst != 21077 || __dst[2] != 76)
        goto LABEL_111;
LABEL_21:
      v14 = CFSTR("CVNLPModelURLKey");
      CFRetain(CFSTR("CVNLPModelURLKey"));
      goto LABEL_107;
    case 6uLL:
      if (*(_DWORD *)__dst == 1633906508 && *((_WORD *)__dst + 2) == 25964)
      {
LABEL_103:
        v14 = CFSTR("CVNLPLocaleKey");
        CFRetain(CFSTR("CVNLPLocaleKey"));
        goto LABEL_107;
      }
      if (*(_DWORD *)__dst == 1752458573 && *((_WORD *)__dst + 2) == 25711)
      {
LABEL_109:
        v14 = CFSTR("CVNLPSamplingMethodKey");
        CFRetain(CFSTR("CVNLPSamplingMethodKey"));
        goto LABEL_107;
      }
      if (*(_DWORD *)__dst == 1651340622 && *((_WORD *)__dst + 2) == 29285)
      {
LABEL_104:
        v14 = CFSTR("CVNLPSamplingNumberKey");
        goto LABEL_106;
      }
      if (v34 == 9)
      {
LABEL_63:
        if (*(_QWORD *)__dst == 0x74676E654C78614DLL && __dst[8] == 104)
        {
LABEL_105:
          v14 = CFSTR("CVNLPSamplingMaxLengthKey");
          goto LABEL_106;
        }
        v12 = v34;
      }
LABEL_81:
      if (v12 != 4)
        goto LABEL_84;
      if (*(_DWORD *)__dst == 1265659732)
      {
LABEL_94:
        v14 = CFSTR("CVNLPSamplingTopKKey");
        goto LABEL_106;
      }
      break;
    case 9uLL:
      if (*(_QWORD *)__dst != 0x7079546E656B6F54 || __dst[8] != 101)
        goto LABEL_63;
LABEL_102:
      v14 = CFSTR("CVNLPTokenTypeKey");
      CFRetain(CFSTR("CVNLPTokenTypeKey"));
      goto LABEL_107;
    case 0xCuLL:
      if (*(_QWORD *)__dst != 0x6365746968637241 || *((_DWORD *)__dst + 2) != 1701999988)
        goto LABEL_111;
LABEL_100:
      v14 = CFSTR("CVNLPLanguageModelArchitectureKey");
      CFRetain(CFSTR("CVNLPLanguageModelArchitectureKey"));
      goto LABEL_107;
    default:
      goto LABEL_81;
  }
LABEL_83:
  v12 = v34;
LABEL_84:
  if (v12 != 16)
    goto LABEL_90;
  if (*(_QWORD *)__dst != 0x547375656C63754ELL || *((_QWORD *)__dst + 1) != 0x646C6F6873657268)
  {
    v12 = v34;
LABEL_90:
    if (v12 != 8)
      goto LABEL_111;
    v8 = __dst;
LABEL_92:
    if (*v8 != 0x657A69536D616542)
      goto LABEL_111;
    v14 = CFSTR("CVNLPSamplingBeamSizeKey");
    goto LABEL_106;
  }
LABEL_101:
  v14 = CFSTR("CVNLPSamplingNucleusThresholdKey");
LABEL_106:
  CFRetain(v14);
LABEL_107:
  sub_1B034AC30(a1, v14);
  if ((v7 & 0x80) != 0)
    operator delete(__dst);
}

void sub_1B0387BC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16)
{
  if (a2)
    sub_1B0303828(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL CVNLPLanguageModelSetTemperature(uint64_t a1, float a2)
{
  _BOOL8 result;

  result = sub_1B03501F4((uint64_t *)(a1 + 24), "temperature");
  if (result)
    *(float *)(a1 + 136) = 1.0 / a2;
  return result;
}

unint64_t sub_1B0387CDC(_QWORD *a1, CFDictionaryRef theDict, void *key)
{
  const __CFString *Value;
  CFTypeID TypeID;
  std::runtime_error *exception;

  if (!theDict || !key || (Value = (const __CFString *)CFDictionaryGetValue(theDict, key)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B035C098(exception);
    goto LABEL_8;
  }
  TypeID = CFStringGetTypeID();
  if (TypeID != CFGetTypeID(Value))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return sub_1B034ACEC(Value, a1);
}

void sub_1B0387D80(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0387D94(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B0387DAC(uint64_t a1, CFTypeRef cf, unsigned __int8 a3)
{
  const void *v5;
  const void *v6;

  if (*(unsigned __int8 *)(a1 + 8) == a3)
  {
    if (*(_BYTE *)(a1 + 8))
    {
      v5 = *(const void **)a1;
      *(_QWORD *)a1 = cf;
      if (cf)
        CFRetain(cf);
      if (v5)
        CFRelease(v5);
    }
  }
  else if (*(_BYTE *)(a1 + 8))
  {
    v6 = *(const void **)a1;
    if (*(_QWORD *)a1)
      CFRelease(v6);
    *(_BYTE *)(a1 + 8) = 0;
  }
  else
  {
    if (cf)
      CFRetain(cf);
    *(_QWORD *)a1 = cf;
    *(_BYTE *)(a1 + 8) = 1;
  }
}

uint64_t sub_1B0387E64(uint64_t a1, const char **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  std::ios_base *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  uint64_t v13;
  uint64_t v14[8];
  void *__p[2];
  __int128 v16;
  int v17;
  uint64_t v18[19];

  v3 = MEMORY[0x1E0DE4FE0];
  v4 = MEMORY[0x1E0DE4FE0] + 64;
  v5 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v7 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v18[0] = MEMORY[0x1E0DE4FE0] + 64;
  v13 = v6;
  *(uint64_t *)((char *)&v14[-1] + *(_QWORD *)(v6 - 24)) = v7;
  v8 = (std::ios_base *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24));
  std::ios_base::init(v8, v14);
  v8[1].__vftable = 0;
  v8[1].__fmtflags_ = -1;
  v13 = v3 + 24;
  v18[0] = v4;
  std::streambuf::basic_streambuf();
  v9 = MEMORY[0x1E0DE4FB8];
  v14[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v16 = 0u;
  v17 = 16;
  sub_1B02D7994(&v13, (uint64_t)"Unexpected CVNLP key: ", 22);
  v10 = *a2;
  v11 = strlen(v10);
  sub_1B02D7994(&v13, (uint64_t)v10, v11);
  std::stringbuf::str();
  v13 = *v5;
  *(uint64_t *)((char *)&v14[-1] + *(_QWORD *)(v13 - 24)) = v5[3];
  v14[0] = v9 + 16;
  if (SBYTE7(v16) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1B5E07C60](v18);
}

void sub_1B0387FC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1B0387FD4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B038801C(const __CFNumber *a1)
{
  CFTypeID TypeID;
  int Value;
  CFTypeID v4;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  double valuePtr;

  TypeID = CFNumberGetTypeID();
  if (TypeID == CFGetTypeID(a1))
  {
    switch(CFNumberGetType(a1))
    {
      case kCFNumberSInt8Type:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberSInt8Type, &valuePtr);
        goto LABEL_14;
      case kCFNumberSInt16Type:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberSInt16Type, &valuePtr);
        goto LABEL_21;
      case kCFNumberSInt32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt32Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberSInt64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberSInt64Type, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloat32Type:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat32Type, &valuePtr);
        goto LABEL_28;
      case kCFNumberFloat64Type:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberFloat64Type, &valuePtr);
        goto LABEL_34;
      case kCFNumberCharType:
        LOBYTE(valuePtr) = 0;
        Value = CFNumberGetValue(a1, kCFNumberCharType, &valuePtr);
LABEL_14:
        v11 = Value != 0;
        if (Value)
          v12 = LOBYTE(valuePtr);
        else
          v12 = 0;
        v13 = -256;
        if ((v11 & (SLOBYTE(valuePtr) < 0)) == 0)
          v13 = 0;
        v7 = v11 << 32;
        LODWORD(v8) = v13 & 0xFFFFFF00 | v12;
        v6 = v8 & 0xFFFFFF00;
        return v7 | v6 & 0xFFFFFF00 | v8;
      case kCFNumberShortType:
        LOWORD(valuePtr) = 0;
        v9 = CFNumberGetValue(a1, kCFNumberShortType, &valuePtr);
LABEL_21:
        if (v9)
          v8 = SLOWORD(valuePtr) & 0xFFFFFFFFLL | 0x100000000;
        else
          v8 = 0;
        goto LABEL_37;
      case kCFNumberIntType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberIntType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberLongLongType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberLongLongType, &valuePtr);
        goto LABEL_32;
      case kCFNumberFloatType:
        LODWORD(valuePtr) = 0;
        v10 = CFNumberGetValue(a1, kCFNumberFloatType, &valuePtr);
LABEL_28:
        v14 = (int)*(float *)&valuePtr;
        goto LABEL_35;
      case kCFNumberDoubleType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberDoubleType, &valuePtr);
        goto LABEL_34;
      case kCFNumberCFIndexType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCFIndexType, &valuePtr);
        goto LABEL_32;
      case kCFNumberNSIntegerType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberNSIntegerType, &valuePtr);
LABEL_32:
        v14 = LODWORD(valuePtr);
        goto LABEL_35;
      case kCFNumberCGFloatType:
        valuePtr = 0.0;
        v10 = CFNumberGetValue(a1, kCFNumberCGFloatType, &valuePtr);
LABEL_34:
        v14 = (int)valuePtr;
LABEL_35:
        v8 = v14 | 0x100000000;
        if (!v10)
          v8 = 0;
LABEL_37:
        v6 = v8 & 0xFFFFFF00;
        v7 = v8 & 0x100000000;
        break;
      default:
        v6 = 0;
        v7 = 0;
        LOBYTE(v8) = 0;
        break;
    }
    return v7 | v6 & 0xFFFFFF00 | v8;
  }
  else
  {
    v4 = CFBooleanGetTypeID();
    if (v4 == CFGetTypeID(a1))
      return CFBooleanGetValue(a1) | 0x100000000;
    else
      return 0;
  }
}

uint64_t sub_1B03882F0()
{
  uint64_t result;

  qword_1ED537A40 = 0;
  qword_1ED537A48 = (uint64_t)"CVNLPLanguageModel";
  unk_1ED537A50 = 0;
  qword_1ED537A58 = 0;
  unk_1ED537A60 = sub_1B0388340;
  xmmword_1ED537A68 = 0u;
  unk_1ED537A78 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED537A28 = result;
  return result;
}

void sub_1B0388340(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  CFTypeRef *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *(std::__shared_weak_count **)(a1 + 128);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = (CFTypeRef *)(a1 + 16);
  sub_1B0371078(a1 + 16);
  sub_1B035BF54(a1 + 96, *(char **)(a1 + 104));
  sub_1B03711E4(a1 + 72, *(char **)(a1 + 80));
  v6 = *(_QWORD *)(a1 + 48);
  if (v6)
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(void **)(a1 + 48);
    if (v7 != v6)
    {
      do
      {
        if (*(char *)(v7 - 1) < 0)
          operator delete(*(void **)(v7 - 24));
        v7 -= 24;
      }
      while (v7 != v6);
      v8 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v6;
    operator delete(v8);
  }
  v9 = *(_QWORD *)(a1 + 24);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 32);
    v11 = *(void **)(a1 + 24);
    if (v10 != v9)
    {
      do
      {
        if (*(char *)(v10 - 1) < 0)
          operator delete(*(void **)(v10 - 24));
        v10 -= 24;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 24);
    }
    *(_QWORD *)(a1 + 32) = v9;
    operator delete(v11);
  }
  if (*v5)
    CFRelease(*v5);
  *v5 = 0;
}

void sub_1B0388468(uint64_t a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  int64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  double *v16;
  const double *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  const void *v21;
  const void *v22;
  float64x2x2_t v23;

  v2 = *(char **)a1;
  if (a2 <= (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 4)
    return;
  if (a2 >> 60)
    sub_1B02D7758();
  v4 = *(char **)(a1 + 8);
  v5 = 16 * a2;
  v6 = (char *)operator new(16 * a2);
  v7 = &v6[v5];
  v8 = v4 - v2;
  v9 = (unint64_t)&v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (v4 == v2)
  {
    *(_QWORD *)a1 = v9;
    *(_QWORD *)(a1 + 8) = v9;
    *(_QWORD *)(a1 + 16) = v7;
    goto LABEL_7;
  }
  v10 = v8 - 16;
  if ((unint64_t)(v8 - 16) < 0x90)
  {
    v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
    do
    {
LABEL_18:
      v19 = *((_QWORD *)v4 - 2);
      v4 -= 16;
      *((_QWORD *)v11 - 2) = v19;
      v11 -= 16;
      *(_QWORD *)v4 = 0;
      *((_QWORD *)v11 + 1) = *((_QWORD *)v4 + 1);
      *((_QWORD *)v4 + 1) = 0;
    }
    while (v4 != v2);
    goto LABEL_19;
  }
  v12 = &v6[(v8 & 0xFFFFFFFFFFFFFFF0) - (v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v4
     || (unint64_t)&v4[-(v10 & 0xFFFFFFFFFFFFFFF0) - 16] >= v9;
  v11 = &v6[(v4 - v2) & 0xFFFFFFFFFFFFFFF0];
  if (!v12)
    goto LABEL_18;
  v13 = (v10 >> 4) + 1;
  v14 = 16 * (v13 & 0x1FFFFFFFFFFFFFFELL);
  v11 = (char *)(v9 - v14);
  v15 = &v4[-v14];
  v16 = (double *)(v9 - 32);
  v17 = (const double *)(v4 - 32);
  v18 = v13 & 0x1FFFFFFFFFFFFFFELL;
  do
  {
    v23 = vld2q_f64(v17);
    vst2q_f64(v16, v23);
    *(_OWORD *)v17 = 0uLL;
    *((_OWORD *)v17 + 1) = 0uLL;
    v17 -= 4;
    v16 -= 4;
    v18 -= 2;
  }
  while (v18);
  v4 = v15;
  if (v13 != (v13 & 0x1FFFFFFFFFFFFFFELL))
    goto LABEL_18;
LABEL_19:
  v2 = *(char **)a1;
  v20 = *(char **)(a1 + 8);
  *(_QWORD *)a1 = v11;
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v7;
  while (v20 != v2)
  {
    v21 = (const void *)*((_QWORD *)v20 - 1);
    if (v21)
      CFRelease(v21);
    v22 = (const void *)*((_QWORD *)v20 - 2);
    if (v22)
      CFRelease(v22);
    v20 -= 16;
  }
LABEL_7:
  if (v2)
    operator delete(v2);
}

CFDictionaryRef sub_1B03885DC(char *a1, char *a2)
{
  unint64_t v2;
  CFIndex v3;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  char *v16;
  int64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char *v25;
  int64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  _OWORD *v40;
  __int128 *v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  const void **v45;
  const void **v46;
  CFDictionaryRef v47;
  std::runtime_error *exception;
  std::runtime_error *v50;
  CFIndex v51;
  char *v52;
  char *v53;
  char *v54;
  char *__p;
  char *v56;
  char *v57;

  __p = 0;
  v2 = a2 - a1;
  v3 = (a2 - a1) >> 4;
  if (a2 != a1)
  {
    if ((v2 & 0x8000000000000000) != 0)
      sub_1B02D7758();
    v5 = a1;
    v6 = v2 >> 1;
    __p = (char *)operator new(v2 >> 1);
    v56 = __p;
    v57 = &__p[8 * v3];
    v51 = v3;
    v52 = (char *)operator new(v6);
    v53 = v52;
    v54 = &v52[8 * v3];
    while (1)
    {
      v8 = *(_QWORD *)v5;
      if (!*(_QWORD *)v5 || !*((_QWORD *)v5 + 1))
      {
        exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(exception, "Could not construct");
        __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v9 = v56;
      if (v56 < v57)
      {
        *(_QWORD *)v56 = v8;
        v10 = (uint64_t)(v56 + 8);
        goto LABEL_21;
      }
      v11 = (v56 - __p) >> 3;
      v12 = v11 + 1;
      if ((unint64_t)(v11 + 1) >> 61)
        sub_1B02D7758();
      v13 = v57 - __p;
      if ((v57 - __p) >> 2 > v12)
        v12 = v13 >> 2;
      if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v12;
      if (v14)
      {
        if (v14 >> 61)
          sub_1B02D72AC();
        v15 = operator new(8 * v14);
        v16 = &v15[8 * v11];
        *(_QWORD *)v16 = v8;
        v10 = (uint64_t)(v16 + 8);
        v17 = v56 - __p;
        if (v56 == __p)
        {
LABEL_19:
          __p = v16;
          v57 = &v15[8 * v14];
          if (!v56)
            goto LABEL_21;
LABEL_20:
          operator delete(v9);
          goto LABEL_21;
        }
      }
      else
      {
        v15 = 0;
        v16 = (char *)(8 * v11);
        *(_QWORD *)(8 * v11) = v8;
        v10 = 8 * v11 + 8;
        v17 = v56 - __p;
        if (v56 == __p)
          goto LABEL_19;
      }
      v27 = v17 - 8;
      if (v27 < 0x58)
        goto LABEL_68;
      if ((unint64_t)(__p - v15) < 0x20)
        goto LABEL_68;
      v28 = (v27 >> 3) + 1;
      v29 = 8 * (v28 & 0x3FFFFFFFFFFFFFFCLL);
      v30 = &v56[-v29];
      v16 -= v29;
      v31 = &v15[8 * v11 - 16];
      v32 = v56 - 16;
      v33 = v28 & 0x3FFFFFFFFFFFFFFCLL;
      do
      {
        v34 = *(_OWORD *)v32;
        *(v31 - 1) = *((_OWORD *)v32 - 1);
        *v31 = v34;
        v31 -= 2;
        v32 -= 32;
        v33 -= 4;
      }
      while (v33);
      v9 = v30;
      if (v28 != (v28 & 0x3FFFFFFFFFFFFFFCLL))
      {
LABEL_68:
        do
        {
          v35 = *((_QWORD *)v9 - 1);
          v9 -= 8;
          *((_QWORD *)v16 - 1) = v35;
          v16 -= 8;
        }
        while (v9 != __p);
      }
      v9 = __p;
      __p = v16;
      v57 = &v15[8 * v14];
      if (v9)
        goto LABEL_20;
LABEL_21:
      v56 = (char *)v10;
      v18 = *((_QWORD *)v5 + 1);
      v19 = v53;
      if (v53 >= v54)
      {
        v20 = (v53 - v52) >> 3;
        v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) >> 61)
          sub_1B02D7758();
        v22 = v54 - v52;
        if ((v54 - v52) >> 2 > v21)
          v21 = v22 >> 2;
        if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
          v23 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
        {
          if (v23 >> 61)
            sub_1B02D72AC();
          v24 = operator new(8 * v23);
          v25 = &v24[8 * v20];
          *(_QWORD *)v25 = v18;
          v7 = (uint64_t)(v25 + 8);
          v26 = v53 - v52;
          if (v53 == v52)
            goto LABEL_31;
LABEL_43:
          v36 = v26 - 8;
          if (v36 < 0x58)
            goto LABEL_69;
          if ((unint64_t)(v52 - v24) < 0x20)
            goto LABEL_69;
          v37 = (v36 >> 3) + 1;
          v38 = 8 * (v37 & 0x3FFFFFFFFFFFFFFCLL);
          v39 = &v53[-v38];
          v25 -= v38;
          v40 = &v24[8 * v20 - 16];
          v41 = (__int128 *)(v53 - 16);
          v42 = v37 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v43 = *v41;
            *(v40 - 1) = *(v41 - 1);
            *v40 = v43;
            v40 -= 2;
            v41 -= 2;
            v42 -= 4;
          }
          while (v42);
          v19 = v39;
          if (v37 != (v37 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_69:
            do
            {
              v44 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              *((_QWORD *)v25 - 1) = v44;
              v25 -= 8;
            }
            while (v19 != v52);
          }
          v19 = v52;
          v52 = v25;
          v54 = &v24[8 * v23];
          if (!v19)
            goto LABEL_5;
        }
        else
        {
          v24 = 0;
          v25 = (char *)(8 * v20);
          *(_QWORD *)(8 * v20) = v18;
          v7 = 8 * v20 + 8;
          v26 = v53 - v52;
          if (v53 != v52)
            goto LABEL_43;
LABEL_31:
          v52 = v25;
          v54 = &v24[8 * v23];
          if (!v53)
            goto LABEL_5;
        }
        operator delete(v19);
        goto LABEL_5;
      }
      *(_QWORD *)v53 = v18;
      v7 = (uint64_t)(v53 + 8);
LABEL_5:
      v53 = (char *)v7;
      v5 += 16;
      if (v5 == a2)
      {
        v45 = (const void **)__p;
        v3 = v51;
        v46 = (const void **)v52;
        goto LABEL_53;
      }
    }
  }
  v46 = 0;
  v45 = 0;
LABEL_53:
  v47 = CFDictionaryCreate(0, v45, v46, v3, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  if (!v47)
  {
    v50 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v50, "Could not construct");
    __cxa_throw(v50, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (v46)
    operator delete(v46);
  if (__p)
    operator delete(__p);
  return v47;
}

void sub_1B03889FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, void *a14, uint64_t a15)
{
  void *v15;
  void *v17;

  __cxa_free_exception(v15);
  if (__p)
  {
    operator delete(__p);
    v17 = a14;
    if (!a14)
LABEL_3:
      _Unwind_Resume(a1);
  }
  else
  {
    v17 = a14;
    if (!a14)
      goto LABEL_3;
  }
  operator delete(v17);
  _Unwind_Resume(a1);
}

void **sub_1B0388A80(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (const void *)*((_QWORD *)v3 - 1);
        if (v5)
          CFRelease(v5);
        v6 = (const void *)*((_QWORD *)v3 - 2);
        if (v6)
          CFRelease(v6);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B0388B00(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  CFTypeRef *v4;
  const void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = (CFTypeRef *)(i - 16);
    *(_QWORD *)(a1 + 16) = i - 16;
    v5 = *(const void **)(i - 8);
    if (v5)
      CFRelease(v5);
    if (*v4)
      CFRelease(*v4);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CFStringRef *sub_1B0388B74(CFStringRef *a1, const UInt8 *a2, int *a3)
{
  CFIndex v5;
  CFIndex v6;
  CFStringRef v7;
  CFNumberRef v8;
  std::runtime_error *exception;
  std::runtime_error *v11;
  int valuePtr;

  v5 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v6 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v6 = v5;
  }
  v7 = CFStringCreateWithBytes(0, a2, v6, 0x8000100u, 0);
  *a1 = v7;
  if (!v7)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  valuePtr = *a3;
  v8 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  a1[1] = (CFStringRef)v8;
  if (!v8)
  {
    v11 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v11, "Could not construct");
    __cxa_throw(v11, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B0388C64(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_1B0352620((const void **)v1);
  _Unwind_Resume(a1);
}

CFNumberRef *sub_1B0388CCC(CFNumberRef *a1, int a2, uint64_t a3)
{
  CFNumberRef v5;
  int v6;
  const UInt8 *v7;
  CFIndex v8;
  CFStringRef v9;
  std::runtime_error *exception;
  std::runtime_error *v12;
  int valuePtr;

  valuePtr = a2;
  v5 = CFNumberCreate(0, kCFNumberIntType, &valuePtr);
  *a1 = v5;
  if (!v5)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v6 = *(char *)(a3 + 23);
  if (v6 >= 0)
    v7 = (const UInt8 *)a3;
  else
    v7 = *(const UInt8 **)a3;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(a3 + 23);
  else
    v8 = *(_QWORD *)(a3 + 8);
  v9 = CFStringCreateWithBytes(0, v7, v8, 0x8000100u, 0);
  a1[1] = (CFNumberRef)v9;
  if (!v9)
  {
    v12 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(v12, "Could not construct");
    __cxa_throw(v12, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B0388DB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  const void *v3;

  v3 = *(const void **)(v1 + 8);
  if (v3)
    CFRelease(v3);
  sub_1B0352620((const void **)v1);
  _Unwind_Resume(a1);
}

CFArrayRef sub_1B0388E20(float **a1)
{
  unint64_t v2;
  float *v3;
  float *v4;
  CFNumberRef *v5;
  float v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  CFNumberRef *v11;
  CFNumberRef *v12;
  CFNumberRef *v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  CFNumberRef *v18;
  CFNumberRef *v19;
  CFNumberRef *v20;
  CFNumberRef *v21;
  uint64_t v22;
  __int128 v23;
  const __CFNumber *v24;
  CFNumberRef *v25;
  const void *v26;
  const void *v27;
  CFArrayRef v28;
  CFNumberRef *v29;
  CFNumberRef *v30;
  void *v31;
  const void *v32;
  const void *v33;
  void *__p;
  CFNumberRef *v36;
  _QWORD v37[2];
  CFNumberRef *v38;
  CFNumberRef *v39;
  char *v40;
  _QWORD *v41;

  v2 = a1[1] - *a1;
  __p = 0;
  v36 = 0;
  v37[0] = 0;
  sub_1B0346CC4((uint64_t)&__p, v2);
  v3 = *a1;
  v4 = a1[1];
  if (*a1 != v4)
  {
    v5 = v36;
    do
    {
      v6 = *v3;
      if ((unint64_t)v5 < v37[0])
      {
        sub_1B0389114(v5++, *v3);
      }
      else
      {
        v7 = ((char *)v5 - (_BYTE *)__p) >> 3;
        if ((unint64_t)(v7 + 1) >> 61)
          sub_1B02D7758();
        v8 = (uint64_t)(v37[0] - (_QWORD)__p) >> 2;
        if (v8 <= v7 + 1)
          v8 = v7 + 1;
        if (v37[0] - (_QWORD)__p >= 0x7FFFFFFFFFFFFFF8uLL)
          v9 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v9 = v8;
        v41 = v37;
        if (v9)
        {
          if (v9 >> 61)
            sub_1B02D72AC();
          v10 = (char *)operator new(8 * v9);
        }
        else
        {
          v10 = 0;
        }
        v37[1] = v10;
        v38 = (CFNumberRef *)&v10[8 * v7];
        v39 = v38;
        v40 = &v10[8 * v9];
        sub_1B0389114(v38, v6);
        v11 = v38;
        v5 = v39 + 1;
        v12 = (CFNumberRef *)__p;
        v13 = v36;
        if (v36 == __p)
        {
          __p = v38;
          v36 = v39 + 1;
          v37[0] = v40;
        }
        else
        {
          v14 = (char *)v36 - (_BYTE *)__p - 8;
          if (v14 < 0x48)
            goto LABEL_23;
          v15 = ((char *)(v36 - 1) - (_BYTE *)__p) & 0xFFFFFFFFFFFFFFF8;
          if ((CFNumberRef *)((char *)v38 - v15 - 8) < v36 && (CFNumberRef *)((char *)v36 - v15 - 8) < v38)
            goto LABEL_23;
          v16 = (v14 >> 3) + 1;
          v17 = 8 * (v16 & 0x3FFFFFFFFFFFFFFCLL);
          v18 = &v38[v17 / 0xFFFFFFFFFFFFFFF8];
          v19 = &v36[v17 / 0xFFFFFFFFFFFFFFF8];
          v20 = v36 - 2;
          v21 = v38 - 2;
          v22 = v16 & 0x3FFFFFFFFFFFFFFCLL;
          do
          {
            v23 = *(_OWORD *)v20;
            *((_OWORD *)v21 - 1) = *((_OWORD *)v20 - 1);
            *(_OWORD *)v21 = v23;
            *((_OWORD *)v20 - 1) = 0uLL;
            *(_OWORD *)v20 = 0uLL;
            v20 -= 4;
            v21 -= 4;
            v22 -= 4;
          }
          while (v22);
          v11 = v18;
          v13 = v19;
          if (v16 != (v16 & 0x3FFFFFFFFFFFFFFCLL))
          {
LABEL_23:
            v18 = v11;
            do
            {
              v24 = *--v13;
              *--v18 = v24;
              *v13 = 0;
            }
            while (v13 != v12);
          }
          v13 = (CFNumberRef *)__p;
          v25 = v36;
          __p = v18;
          v36 = v5;
          v37[0] = v40;
          while (v25 != v13)
          {
            v27 = *--v25;
            v26 = v27;
            if (v27)
              CFRelease(v26);
          }
        }
        if (v13)
          operator delete(v13);
      }
      v36 = v5;
      ++v3;
    }
    while (v3 != v4);
  }
  v28 = sub_1B0346E24((char **)&__p);
  v29 = (CFNumberRef *)__p;
  if (__p)
  {
    v30 = v36;
    v31 = __p;
    if (v36 != __p)
    {
      do
      {
        v33 = *--v30;
        v32 = v33;
        if (v33)
          CFRelease(v32);
      }
      while (v30 != v29);
      v31 = __p;
    }
    v36 = v29;
    operator delete(v31);
  }
  return v28;
}

void sub_1B038909C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B03890B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B03890C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12)
{
  sub_1B0347020((uint64_t)&a12);
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B03890E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

void sub_1B03890FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_1B0346FB4(&a9);
  _Unwind_Resume(a1);
}

CFNumberRef sub_1B0389114(CFNumberRef *a1, float a2)
{
  CFNumberRef result;
  std::runtime_error *exception;
  float valuePtr;

  valuePtr = a2;
  result = CFNumberCreate(0, kCFNumberFloatType, &valuePtr);
  *a1 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B0389190(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B03891BC()
{
  uint64_t result;

  qword_1ED537AA0 = 0;
  qword_1ED537AA8 = (uint64_t)"CVNLPLanguageModelWithState";
  unk_1ED537AB0 = 0;
  qword_1ED537AB8 = 0;
  unk_1ED537AC0 = sub_1B038920C;
  xmmword_1ED537AC8 = 0u;
  unk_1ED537AD8 = 0u;
  result = _CFRuntimeRegisterClass();
  qword_1ED537A38 = result;
  return result;
}

void sub_1B038920C(uint64_t a1)
{
  void *v2;
  const void *v3;

  CFRelease(*(CFTypeRef *)(a1 + 56));
  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(_BYTE *)(a1 + 24))
  {
    v3 = *(const void **)(a1 + 16);
    if (v3)
      CFRelease(v3);
  }
}

unint64_t sub_1B038925C(const __CFDictionary *a1, const void *a2)
{
  const __CFNumber *Value;
  unint64_t result;
  std::runtime_error *exception;

  if (!a1 || !a2 || (Value = (const __CFNumber *)CFDictionaryGetValue(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B035C098(exception);
    goto LABEL_8;
  }
  result = sub_1B038801C(Value);
  if (!HIDWORD(result))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B03892D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B03892E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0389300(uint64_t result)
{
  const __CFNumber *v1;
  CFTypeID TypeID;
  CFTypeID v3;

  if (result)
  {
    v1 = (const __CFNumber *)result;
    TypeID = CFNumberGetTypeID();
    if (TypeID == CFGetTypeID(v1))
    {
      return sub_1B0389390(v1);
    }
    else
    {
      v3 = CFBooleanGetTypeID();
      if (v3 == CFGetTypeID(v1))
        return COERCE_UNSIGNED_INT((float)CFBooleanGetValue(v1)) | 0x100000000;
      else
        return 0;
    }
  }
  return result;
}

uint64_t sub_1B0389390(const __CFNumber *a1)
{
  const __CFNumber *v2;
  CFNumberType v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  const __CFNumber *v7;
  CFNumberType v8;
  const __CFNumber *v9;
  CFNumberType v10;
  const __CFNumber *v11;
  CFNumberType v12;
  const __CFNumber *v13;
  CFNumberType v14;
  const __CFNumber *v15;
  CFNumberType v16;
  int Value;
  int8x8_t v18;
  float v19;
  int16x4_t v20;
  uint64_t v21;
  double valuePtr;

  switch(CFNumberGetType(a1))
  {
    case kCFNumberSInt8Type:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberSInt8Type;
      goto LABEL_10;
    case kCFNumberSInt16Type:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberSInt16Type;
      goto LABEL_12;
    case kCFNumberSInt32Type:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberSInt32Type;
      goto LABEL_14;
    case kCFNumberSInt64Type:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberSInt64Type;
      goto LABEL_22;
    case kCFNumberFloat32Type:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloat32Type;
      goto LABEL_18;
    case kCFNumberFloat64Type:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberFloat64Type;
      goto LABEL_24;
    case kCFNumberCharType:
      LOBYTE(valuePtr) = 0;
      v2 = a1;
      v3 = kCFNumberCharType;
LABEL_10:
      Value = CFNumberGetValue(v2, v3, &valuePtr);
      v18.i8[0] = LOBYTE(valuePtr);
      v19 = (float)vmovl_s16((int16x4_t)*(_OWORD *)&vmovl_s8(v18)).i32[0];
      goto LABEL_25;
    case kCFNumberShortType:
      LOWORD(valuePtr) = 0;
      v7 = a1;
      v8 = kCFNumberShortType;
LABEL_12:
      Value = CFNumberGetValue(v7, v8, &valuePtr);
      v20.i16[0] = LOWORD(valuePtr);
      v19 = (float)vmovl_s16(v20).i32[0];
      goto LABEL_25;
    case kCFNumberIntType:
      LODWORD(valuePtr) = 0;
      v9 = a1;
      v10 = kCFNumberIntType;
LABEL_14:
      Value = CFNumberGetValue(v9, v10, &valuePtr);
      v19 = (float)SLODWORD(valuePtr);
      goto LABEL_25;
    case kCFNumberLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongType;
      goto LABEL_22;
    case kCFNumberLongLongType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberLongLongType;
      goto LABEL_22;
    case kCFNumberFloatType:
      LODWORD(valuePtr) = 0;
      v13 = a1;
      v14 = kCFNumberFloatType;
LABEL_18:
      Value = CFNumberGetValue(v13, v14, &valuePtr);
      v21 = LODWORD(valuePtr);
      goto LABEL_26;
    case kCFNumberDoubleType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberDoubleType;
      goto LABEL_24;
    case kCFNumberCFIndexType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberCFIndexType;
      goto LABEL_22;
    case kCFNumberNSIntegerType:
      valuePtr = 0.0;
      v11 = a1;
      v12 = kCFNumberNSIntegerType;
LABEL_22:
      Value = CFNumberGetValue(v11, v12, &valuePtr);
      v19 = (float)*(uint64_t *)&valuePtr;
      goto LABEL_25;
    case kCFNumberCGFloatType:
      valuePtr = 0.0;
      v15 = a1;
      v16 = kCFNumberCGFloatType;
LABEL_24:
      Value = CFNumberGetValue(v15, v16, &valuePtr);
      v19 = valuePtr;
LABEL_25:
      v21 = LODWORD(v19);
LABEL_26:
      v6 = v21 | 0x100000000;
      if (!Value)
        v6 = 0;
      v4 = v6 & 0xFFFFFF00;
      v5 = v6 & 0x100000000;
      break;
    default:
      v4 = 0;
      v5 = 0;
      LOBYTE(v6) = 0;
      break;
  }
  return v5 | v4 & 0xFFFFFF00 | v6;
}

_QWORD *sub_1B03895A0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  std::ios_base *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11[8];
  void *__p[2];
  __int128 v13;
  int v14;
  uint64_t v15[19];

  *a1 = off_1E60CCDB0;
  v2 = MEMORY[0x1E0DE4FE0];
  v3 = MEMORY[0x1E0DE4FE0] + 64;
  v4 = (uint64_t *)MEMORY[0x1E0DE4F60];
  v5 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 8);
  v6 = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 16);
  v15[0] = MEMORY[0x1E0DE4FE0] + 64;
  v10 = v5;
  *(uint64_t *)((char *)&v11[-1] + *(_QWORD *)(v5 - 24)) = v6;
  v7 = (std::ios_base *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24));
  std::ios_base::init(v7, v11);
  v7[1].__vftable = 0;
  v7[1].__fmtflags_ = -1;
  v10 = v2 + 24;
  v15[0] = v3;
  std::streambuf::basic_streambuf();
  v8 = MEMORY[0x1E0DE4FB8];
  v11[0] = MEMORY[0x1E0DE4FB8] + 16;
  *(_OWORD *)__p = 0u;
  v13 = 0u;
  v14 = 16;
  sub_1B02D7994(&v10, (uint64_t)"InvalidProbabilityError: expected ", 34);
  std::ostream::operator<<();
  sub_1B02D7994(&v10, (uint64_t)"to be in the interval [0, 1].", 29);
  std::stringbuf::str();
  v10 = *v4;
  *(uint64_t *)((char *)&v11[-1] + *(_QWORD *)(v10 - 24)) = v4[3];
  v11[0] = v8 + 16;
  if (SBYTE7(v13) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1B5E07C60](v15);
  return a1;
}

void sub_1B038971C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::exception *v2;
  va_list va;

  va_start(va, a2);
  sub_1B02E983C((uint64_t)va);
  std::exception::~exception(v2);
  _Unwind_Resume(a1);
}

void sub_1B038976C(std::exception *this)
{
  std::exception *v1;

  v1 = this;
  this->__vftable = (std::exception_vtbl *)off_1E60CCDB0;
  if (SHIBYTE(this[3].__vftable) < 0)
  {
    operator delete(this[1].__vftable);
    this = v1;
  }
  std::exception::~exception(this);
}

void sub_1B03897B8(std::exception *this)
{
  this->__vftable = (std::exception_vtbl *)off_1E60CCDB0;
  if (SHIBYTE(this[3].__vftable) < 0)
    operator delete(this[1].__vftable);
  std::exception::~exception(this);
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B0389808(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void **sub_1B0389824(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  const void *v5;
  const void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v6 = (const void *)*((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if (v6)
          CFRelease(v5);
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1B0389890(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  const void *v4;
  const void *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(const void **)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      CFRelease(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

CFStringRef sub_1B03898E4(CFStringRef *a1, const UInt8 *a2)
{
  CFIndex v3;
  CFIndex v4;
  CFStringRef result;
  std::runtime_error *exception;

  v3 = *((_QWORD *)a2 + 1);
  if (*((char *)a2 + 23) >= 0)
  {
    v4 = a2[23];
  }
  else
  {
    a2 = *(const UInt8 **)a2;
    v4 = v3;
  }
  result = CFStringCreateWithBytes(0, a2, v4, 0x8000100u, 0);
  *a1 = result;
  if (!result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Could not construct");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B0389970(_Unwind_Exception *exception_object)
{
  CFTypeRef *v1;

  if (*v1)
    CFRelease(*v1);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_1B038999C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = (void *)a1[2];
      if (!v5)
        return a1;
      goto LABEL_6;
    }
  }
  v5 = (void *)a1[2];
  if (v5)
  {
LABEL_6:
    a1[3] = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_1B0389A20(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  void *__p[2];
  uint64_t v9;

  v6 = (_QWORD *)operator new();
  if (*(char *)(a2 + 31) < 0)
  {
    sub_1B02EB0A8(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 24);
  }
  *v6 = &unk_1E60CC918;
  v7 = operator new(0x128uLL);
  v7[2] = 0;
  *v7 = &unk_1E60CD658;
  v7[1] = 0;
  v6[1] = sub_1B0335C04((uint64_t)(v7 + 3), (__int128 *)__p, a3);
  v6[2] = v7;
  *a1 = v6;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
}

void sub_1B0389B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  MEMORY[0x1B5E07CD8](v14, 0xA1C409BE6959DLL);
  _Unwind_Resume(a1);
}

uint64_t *sub_1B0389B54(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1B034B978(v2);
    MEMORY[0x1B5E07CD8](v3, 0x10B0C409CF98BECLL);
  }
  return a1;
}

uint64_t **sub_1B0389B98(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = sub_1B034B7C0(v2);
    MEMORY[0x1B5E07CD8](v3, 0x10B0C4005063E60);
  }
  return a1;
}

void sub_1B0389BDC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  void **v6;
  void **v7;
  uint64_t v8;
  int v9;
  char *v10;
  _BYTE *v11;
  _BYTE *v12;
  void **v13;
  uint64_t v14;
  _QWORD *v15;
  int32x2_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  void **v27;
  _BYTE *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  _QWORD *v32;
  void *v33;
  int32x2_t v34;
  std::__shared_weak_count *v35;
  void *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  float32x4_t *v48;
  _OWORD *v49;
  char *v50;
  __int128 v51;
  uint32x4_t *v52;
  uint64_t v53;
  size_t v54;
  uint32x4_t *v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  __int32 v63;
  NSObject *v64;
  void **v65;
  uint32x4_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint32x4_t *v70;
  _OWORD *v71;
  float32x4_t *v72;
  unint64_t v73;
  float32x4_t v74;
  unint64_t v75;
  _DWORD *v76;
  float *v77;
  unsigned int *v78;
  unsigned int v79;
  _BYTE *v80;
  _BYTE *v81;
  int64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  _BYTE *v87;
  _BYTE *v88;
  int64_t v89;
  char *v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  void **v100;
  void **v101;
  void *v102;
  uint64_t v103;
  unsigned __int8 *v104;
  _BYTE *v105;
  _BYTE *v106;
  int64_t v107;
  std::__shared_weak_count *v108;
  std::__shared_weak_count *v109;
  unint64_t *v110;
  unint64_t v111;
  unsigned __int8 *v112;
  _BYTE *v113;
  _BYTE *v114;
  int64_t v115;
  char *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t *v128;
  std::__shared_weak_count *v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  int v135;
  const void *v136;
  int64_t v137;
  char *v138;
  char *v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  std::__shared_weak_count *v143;
  unint64_t *v144;
  unint64_t v145;
  __int128 *v146;
  __int128 *v147;
  void *v148;
  std::runtime_error *exception;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  void *v159;
  __int128 *v160;
  void *v161[2];
  __int128 v162;
  int v163;
  void *__dst[2];
  void *v165[2];
  int v166;
  uint64_t v167;
  std::__shared_weak_count *v168;
  __int128 *v169[2];
  char v170;
  uint32x4_t *v171;
  uint32x4_t *v172;
  uint64_t v173;
  void *v174;
  void **v175;
  uint64_t v176;
  _BYTE v177[32];
  int v178;
  __int128 **v179;
  void *__p[3];
  char *v181;
  int v182;
  void *v183;
  std::__shared_weak_count *v184;
  std::__shared_weak_count *v185;
  uint64_t v186;
  std::__shared_weak_count *v187;
  __int128 v188;
  char v189;
  void *v190;
  int v191;
  void *v192;
  void *v193;
  char *v194;
  uint64_t v195;
  std::__shared_weak_count *v196;
  uint64_t v197;

  v197 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1B02EB0A8(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_1B0318B00(&v159, (uint64_t)__p, 1uLL);
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v5 = *(_QWORD *)(a1 + 16);
  v175 = 0;
  v176 = 0;
  v174 = 0;
  sub_1B02EB2B0((char *)&v174, (__int128 *)v159, v160, 0xAAAAAAAAAAAAAAABLL * (((char *)v160 - (_BYTE *)v159) >> 3));
  v6 = (void **)v174;
  if (*(_BYTE *)(v5 + 12))
  {
    v7 = v175;
    if (v174 != v175)
    {
      do
      {
        v8 = *((unsigned __int8 *)v6 + 23);
        v9 = (char)v8;
        v10 = (char *)v6 + v8;
        if (v9 >= 0)
          v11 = v10;
        else
          v11 = (char *)v6[1] + (_QWORD)*v6;
        if (v9 >= 0)
          v12 = v6;
        else
          v12 = *v6;
        for (; v12 != v11; ++v12)
          *v12 = __tolower((char)*v12);
        v6 += 3;
      }
      while (v6 != v7);
      v6 = (void **)v174;
    }
  }
  v13 = v175;
  v14 = *(int *)(v5 + 8);
  v15 = operator new(0x10uLL);
  *v15 = 0xAAAAAAAAAAAAAAABLL * (v13 - v6);
  v15[1] = v14;
  __dst[1] = v15 + 2;
  v165[0] = v15 + 2;
  __dst[0] = v15;
  v16.i32[0] = 0;
  sub_1B0325CC0((int32x4_t **)__dst, (uint64_t)__p, v16);
  *(_DWORD *)(v5 + 24) = __p[1];
  if ((void **)(v5 + 16) != __p)
    sub_1B03267E8((_QWORD *)(v5 + 32), (char *)__p[2], v181, (v181 - (char *)__p[2]) >> 3);
  v18 = v183;
  v17 = v184;
  if (v184)
  {
    p_shared_owners = (unint64_t *)&v184->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = *(std::__shared_weak_count **)(v5 + 64);
  *(_QWORD *)(v5 + 56) = v18;
  *(_QWORD *)(v5 + 64) = v17;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  __p[0] = &unk_1E60CCA78;
  v24 = v184;
  if (v184)
  {
    v25 = (unint64_t *)&v184->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (__p[2])
  {
    v181 = (char *)__p[2];
    operator delete(__p[2]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  v28 = v174;
  v27 = v175;
  v29 = *(int *)(v5 + 8);
  v30 = operator new(8uLL);
  v31 = 0xAAAAAAAAAAAAAAABLL * (((char *)v27 - v28) >> 3);
  *v30 = v31;
  __dst[0] = v30;
  v165[0] = v30 + 1;
  v32 = operator new(0x10uLL);
  *v32 = v31;
  v32[1] = v29;
  v33 = v32 + 2;
  __dst[0] = v32;
  __dst[1] = v32 + 2;
  v165[0] = v32 + 2;
  operator delete(v30);
  __dst[1] = v33;
  v34.i32[0] = 1.0;
  sub_1B0325CC0((int32x4_t **)__dst, (uint64_t)__p, v34);
  *(_DWORD *)(v5 + 80) = __p[1];
  if ((void **)(v5 + 72) != __p)
    sub_1B03267E8((_QWORD *)(v5 + 88), (char *)__p[2], v181, (v181 - (char *)__p[2]) >> 3);
  v36 = v183;
  v35 = v184;
  if (v184)
  {
    v37 = (unint64_t *)&v184->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  v39 = *(std::__shared_weak_count **)(v5 + 120);
  *(_QWORD *)(v5 + 112) = v36;
  *(_QWORD *)(v5 + 120) = v35;
  if (v39)
  {
    v40 = (unint64_t *)&v39->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  __p[0] = &unk_1E60CCA78;
  v42 = v184;
  if (v184)
  {
    v43 = (unint64_t *)&v184->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (__p[2])
  {
    v181 = (char *)__p[2];
    operator delete(__p[2]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  if (*(_DWORD *)(v5 + 24) != 1
    || (v156 = *(int *)(v5 + 8),
        v153 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 56) + 24))(*(_QWORD *)(v5 + 56)),
        *(_DWORD *)(v5 + 80) != 1))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v155 = *(int *)(v5 + 8);
  v152 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 112) + 24))(*(_QWORD *)(v5 + 112));
  v150 = a3;
  v151 = a1;
  if (v175 != v174)
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v154 = 0xAAAAAAAAAAAAAAABLL * (((char *)v175 - (_BYTE *)v174) >> 3);
    v157 = 4 * v156;
    v158 = 4 * v155;
    v48 = (float32x4_t *)(v153 + 16);
    v49 = (_OWORD *)(v152 + 16);
    do
    {
      v50 = (char *)v174 + 24 * v47;
      if (v50[23] < 0)
      {
        sub_1B02EB0A8(__dst, *(void **)v50, *((_QWORD *)v50 + 1));
      }
      else
      {
        v51 = *(_OWORD *)v50;
        v165[0] = *((void **)v50 + 2);
        *(_OWORD *)__dst = v51;
      }
      (*(void (**)(uint32x4_t **__return_ptr))(**(_QWORD **)v5 + 24))(&v171);
      v52 = v171;
      if (((char *)v172 - (char *)v171) >> 2 >= (unint64_t)*(int *)(v5 + 8))
        v53 = *(int *)(v5 + 8);
      else
        v53 = ((char *)v172 - (char *)v171) >> 2;
      memset(__p, 0, sizeof(__p));
      if (v53)
      {
        if (v53 < 0)
          sub_1B02D7758();
        v54 = 4 * v53;
        v55 = (uint32x4_t *)operator new(4 * v53);
        v53 = (uint64_t)v55->i64 + 4 * v53;
        memmove(v55, v52, v54);
        if (v52)
        {
LABEL_70:
          v172 = v52;
          operator delete(v52);
        }
      }
      else
      {
        v55 = 0;
        if (v171)
          goto LABEL_70;
      }
      v171 = v55;
      v172 = (uint32x4_t *)v53;
      v173 = v53;
      v57 = *(_QWORD **)v5;
      if (*(char *)(*(_QWORD *)v5 + 55) < 0)
      {
        v58 = (_QWORD *)v57[4];
        v59 = v57[5];
      }
      else
      {
        v58 = v57 + 4;
        v59 = *(unsigned __int8 *)(*(_QWORD *)v5 + 55);
      }
      v56 = *(_DWORD *)(v53 - 4);
      if (v56 != (*(unsigned int (**)(_QWORD *, _QWORD *, uint64_t))(*v57 + 40))(v57, v58, v59))
      {
        v60 = *(_QWORD **)v5;
        if (*(char *)(*(_QWORD *)v5 + 55) < 0)
        {
          v61 = (_QWORD *)v60[4];
          v62 = v60[5];
        }
        else
        {
          v61 = v60 + 4;
          v62 = *(unsigned __int8 *)(*(_QWORD *)v5 + 55);
        }
        v63 = (*(uint64_t (**)(_QWORD *, _QWORD *, uint64_t))(*v60 + 40))(v60, v61, v62);
        v172[-1].i32[3] = v63;
      }
      if (qword_1EEEB2D28 != -1)
        dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
      v64 = (id)qword_1EEEB2D18;
      if (os_log_type_enabled(v64, OS_LOG_TYPE_DEBUG))
      {
        v65 = __dst;
        if (SHIBYTE(v165[0]) < 0)
          v65 = (void **)__dst[0];
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v65;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = (void *)(((char *)v172 - (char *)v171) >> 2);
        _os_log_impl(&dword_1B02D2000, v64, OS_LOG_TYPE_DEBUG, "Tokenized query=%s into %zu tokens.", (uint8_t *)__p, 0x16u);
      }

      v66 = v171;
      v67 = (char *)v172 - (char *)v171;
      if (v172 != v171)
      {
        v68 = 0;
        v69 = v67 >> 2;
        if ((unint64_t)v67 < 0x20)
          goto LABEL_93;
        if ((unint64_t)(v152 + v158 * v47 - (v153 + v157 * v47)) < 0x20)
          goto LABEL_93;
        v68 = v69 & 0xFFFFFFFFFFFFFFF8;
        v70 = v171 + 1;
        v71 = v49;
        v72 = v48;
        v73 = v69 & 0xFFFFFFFFFFFFFFF8;
        do
        {
          v74 = vcvtq_f32_u32(*v70);
          v72[-1] = vcvtq_f32_u32(v70[-1]);
          *v72 = v74;
          *(v71 - 1) = 0uLL;
          *v71 = 0uLL;
          v70 += 2;
          v72 += 2;
          v71 += 2;
          v73 -= 8;
        }
        while (v73);
        if (v69 != v68)
        {
LABEL_93:
          v75 = v69 - v68;
          v76 = (_DWORD *)(v152 + 4 * (v68 + v46));
          v77 = (float *)(v153 + 4 * (v68 + v45));
          v78 = (unsigned int *)v66 + v68;
          do
          {
            v79 = *v78++;
            *v77++ = (float)v79;
            *v76++ = 0;
            --v75;
          }
          while (v75);
        }
LABEL_97:
        v172 = v66;
        operator delete(v66);
        goto LABEL_98;
      }
      if (v172)
        goto LABEL_97;
LABEL_98:
      if (SHIBYTE(v165[0]) < 0)
        operator delete(__dst[0]);
      ++v47;
      v48 = (float32x4_t *)((char *)v48 + v157);
      v49 = (_OWORD *)((char *)v49 + v158);
      v46 += v155;
      v45 += v156;
    }
    while (v47 != v154);
  }
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "text_ids");
  v181 = (char *)&unk_1E60CCA78;
  v182 = *(_DWORD *)(v5 + 24);
  v184 = 0;
  v185 = 0;
  v183 = 0;
  v81 = *(_BYTE **)(v5 + 32);
  v80 = *(_BYTE **)(v5 + 40);
  v82 = v80 - v81;
  if (v80 != v81)
  {
    if (v82 < 0)
      sub_1B02D7758();
    v183 = operator new(v80 - v81);
    v184 = (std::__shared_weak_count *)v183;
    v83 = (std::__shared_weak_count *)((char *)v183 + 8 * (v82 >> 3));
    v185 = v83;
    memcpy(v183, v81, v82);
    v184 = v83;
  }
  v186 = *(_QWORD *)(v5 + 56);
  v84 = *(std::__shared_weak_count **)(v5 + 64);
  v187 = v84;
  if (v84)
  {
    v85 = (unint64_t *)&v84->__shared_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
  }
  v189 = 13;
  strcpy((char *)&v188, "text_ids_mask");
  v190 = &unk_1E60CCA78;
  v191 = *(_DWORD *)(v5 + 80);
  v193 = 0;
  v194 = 0;
  v192 = 0;
  v88 = *(_BYTE **)(v5 + 88);
  v87 = *(_BYTE **)(v5 + 96);
  v89 = v87 - v88;
  if (v87 != v88)
  {
    if (v89 < 0)
      sub_1B02D7758();
    v192 = operator new(v87 - v88);
    v193 = v192;
    v90 = (char *)v192 + 8 * (v89 >> 3);
    v194 = v90;
    memcpy(v192, v88, v89);
    v193 = v90;
  }
  v195 = *(_QWORD *)(v5 + 112);
  v91 = *(std::__shared_weak_count **)(v5 + 120);
  v196 = v91;
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
  }
  memset(v177, 0, sizeof(v177));
  v178 = 1065353216;
  sub_1B032948C((uint64_t)v177, (uint64_t)__p, (__int128 *)__p);
  sub_1B032948C((uint64_t)v177, (uint64_t)&v188, &v188);
  v190 = &unk_1E60CCA78;
  v94 = v196;
  if (v196)
  {
    v95 = (unint64_t *)&v196->__shared_owners_;
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v189 < 0)
    operator delete((void *)v188);
  v181 = (char *)&unk_1E60CCA78;
  v97 = v187;
  if (v187)
  {
    v98 = (unint64_t *)&v187->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  if (v183)
  {
    v184 = (std::__shared_weak_count *)v183;
    operator delete(v183);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  v100 = (void **)v174;
  if (v174)
  {
    v101 = v175;
    v102 = v174;
    if (v175 != v174)
    {
      do
      {
        if (*((char *)v101 - 1) < 0)
          operator delete(*(v101 - 3));
        v101 -= 3;
      }
      while (v101 != v100);
      v102 = v174;
    }
    v175 = v100;
    operator delete(v102);
  }
  v103 = *(_QWORD *)v151;
  BYTE7(v162) = 8;
  strcpy((char *)v161, "text_ids");
  v169[0] = (__int128 *)v161;
  v104 = sub_1B038EE00((uint64_t)v177, (uint64_t)v161, v169);
  HIBYTE(__p[2]) = 8;
  strcpy((char *)__p, "text_ids");
  v181 = (char *)&unk_1E60CCA78;
  v182 = *((_DWORD *)v104 + 12);
  v184 = 0;
  v185 = 0;
  v183 = 0;
  v106 = (_BYTE *)*((_QWORD *)v104 + 7);
  v105 = (_BYTE *)*((_QWORD *)v104 + 8);
  v107 = v105 - v106;
  if (v105 != v106)
  {
    if (v107 < 0)
      sub_1B02D7758();
    v183 = operator new(v105 - v106);
    v184 = (std::__shared_weak_count *)v183;
    v108 = (std::__shared_weak_count *)((char *)v183 + 8 * (v107 >> 3));
    v185 = v108;
    memcpy(v183, v106, v107);
    v184 = v108;
  }
  v109 = (std::__shared_weak_count *)*((_QWORD *)v104 + 11);
  v186 = *((_QWORD *)v104 + 10);
  v187 = v109;
  if (v109)
  {
    v110 = (unint64_t *)&v109->__shared_owners_;
    do
      v111 = __ldxr(v110);
    while (__stxr(v111 + 1, v110));
  }
  v170 = 13;
  strcpy((char *)v169, "text_ids_mask");
  v179 = v169;
  v112 = sub_1B038EE00((uint64_t)v177, (uint64_t)v169, (__int128 **)&v179);
  v189 = 13;
  strcpy((char *)&v188, "text_ids_mask");
  v190 = &unk_1E60CCA78;
  v191 = *((_DWORD *)v112 + 12);
  v193 = 0;
  v194 = 0;
  v192 = 0;
  v114 = (_BYTE *)*((_QWORD *)v112 + 7);
  v113 = (_BYTE *)*((_QWORD *)v112 + 8);
  v115 = v113 - v114;
  if (v113 != v114)
  {
    if (v115 < 0)
      sub_1B02D7758();
    v192 = operator new(v113 - v114);
    v193 = v192;
    v116 = (char *)v192 + 8 * (v115 >> 3);
    v194 = v116;
    memcpy(v192, v114, v115);
    v193 = v116;
  }
  v195 = *((_QWORD *)v112 + 10);
  v117 = (std::__shared_weak_count *)*((_QWORD *)v112 + 11);
  v196 = v117;
  if (v117)
  {
    v118 = (unint64_t *)&v117->__shared_owners_;
    do
      v119 = __ldxr(v118);
    while (__stxr(v119 + 1, v118));
  }
  *(_OWORD *)__dst = 0u;
  *(_OWORD *)v165 = 0u;
  v166 = 1065353216;
  sub_1B032948C((uint64_t)__dst, (uint64_t)__p, (__int128 *)__p);
  sub_1B032948C((uint64_t)__dst, (uint64_t)&v188, &v188);
  sub_1B038AF54((uint64_t)&v171, v103, (uint64_t)__dst);
  sub_1B0328C28((uint64_t)__dst);
  v190 = &unk_1E60CCA78;
  v120 = v196;
  if (v196)
  {
    v121 = (unint64_t *)&v196->__shared_owners_;
    do
      v122 = __ldaxr(v121);
    while (__stlxr(v122 - 1, v121));
    if (!v122)
    {
      ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
      std::__shared_weak_count::__release_weak(v120);
    }
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v189 < 0)
    operator delete((void *)v188);
  v181 = (char *)&unk_1E60CCA78;
  v123 = v187;
  if (v187)
  {
    v124 = (unint64_t *)&v187->__shared_owners_;
    do
      v125 = __ldaxr(v124);
    while (__stlxr(v125 - 1, v124));
    if (!v125)
    {
      ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
      std::__shared_weak_count::__release_weak(v123);
    }
  }
  if (v183)
  {
    v184 = (std::__shared_weak_count *)v183;
    operator delete(v183);
  }
  if ((SHIBYTE(__p[2]) & 0x80000000) == 0)
  {
    if ((v170 & 0x80000000) == 0)
      goto LABEL_168;
LABEL_199:
    operator delete(v169[0]);
    if ((SBYTE7(v162) & 0x80000000) == 0)
      goto LABEL_169;
LABEL_200:
    operator delete(v161[0]);
    goto LABEL_169;
  }
  operator delete(__p[0]);
  if (v170 < 0)
    goto LABEL_199;
LABEL_168:
  if (SBYTE7(v162) < 0)
    goto LABEL_200;
LABEL_169:
  v126 = *(_QWORD *)(v151 + 8);
  v169[0] = (__int128 *)(v151 + 96);
  v127 = sub_1B0327D74((uint64_t)&v171, v151 + 96, (uint64_t)&unk_1B03B0E24, v169);
  sub_1B038ECDC(__p, (__int128 *)(v151 + 96), (uint64_t)(v127 + 5));
  v169[0] = (__int128 *)(v151 + 120);
  v128 = sub_1B0327D74((uint64_t)&v171, v151 + 120, (uint64_t)&unk_1B03B0E24, v169);
  sub_1B038ECDC(&v188, (__int128 *)(v151 + 120), (uint64_t)(v128 + 5));
  *(_OWORD *)v161 = 0u;
  v162 = 0u;
  v163 = 1065353216;
  sub_1B032948C((uint64_t)v161, (uint64_t)__p, (__int128 *)__p);
  sub_1B032948C((uint64_t)v161, (uint64_t)&v188, &v188);
  sub_1B038B350((uint64_t)__dst, v126, (uint64_t)v161);
  sub_1B0328C28((uint64_t)v161);
  v190 = &unk_1E60CCA78;
  v129 = v196;
  if (v196)
  {
    v130 = (unint64_t *)&v196->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v129->__on_zero_shared)(v129);
      std::__shared_weak_count::__release_weak(v129);
    }
  }
  if (v192)
  {
    v193 = v192;
    operator delete(v192);
  }
  if (v189 < 0)
    operator delete((void *)v188);
  v181 = (char *)&unk_1E60CCA78;
  v132 = v187;
  if (v187)
  {
    v133 = (unint64_t *)&v187->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  if (v183)
  {
    v184 = (std::__shared_weak_count *)v183;
    operator delete(v183);
  }
  if (SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  *(_QWORD *)v150 = &unk_1E60CCA78;
  v135 = (int)__dst[1];
  *(_QWORD *)(v150 + 16) = 0;
  *(_DWORD *)(v150 + 8) = v135;
  *(_QWORD *)(v150 + 24) = 0;
  *(_QWORD *)(v150 + 32) = 0;
  v136 = v165[0];
  v137 = (char *)v165[1] - (char *)v165[0];
  if (v165[1] != v165[0])
  {
    if (v137 < 0)
      sub_1B02D7758();
    v138 = (char *)operator new((char *)v165[1] - (char *)v165[0]);
    *(_QWORD *)(v150 + 16) = v138;
    v139 = &v138[8 * (v137 >> 3)];
    *(_QWORD *)(v150 + 32) = v139;
    memcpy(v138, v136, v137);
    *(_QWORD *)(v150 + 24) = v139;
  }
  v140 = v168;
  *(_QWORD *)(v150 + 40) = v167;
  *(_QWORD *)(v150 + 48) = v140;
  if (v140)
  {
    v141 = (unint64_t *)&v140->__shared_owners_;
    do
      v142 = __ldxr(v141);
    while (__stxr(v142 + 1, v141));
    v143 = v168;
    __dst[0] = &unk_1E60CCA78;
    if (v168)
    {
      v144 = (unint64_t *)&v168->__shared_owners_;
      do
        v145 = __ldaxr(v144);
      while (__stlxr(v145 - 1, v144));
      if (!v145)
      {
        ((void (*)(std::__shared_weak_count *))v143->__on_zero_shared)(v143);
        std::__shared_weak_count::__release_weak(v143);
      }
    }
  }
  else
  {
    __dst[0] = &unk_1E60CCA78;
  }
  if (v165[0])
  {
    v165[1] = v165[0];
    operator delete(v165[0]);
  }
  sub_1B0328C28((uint64_t)&v171);
  sub_1B0328C28((uint64_t)v177);
  v146 = (__int128 *)v159;
  if (v159)
  {
    v147 = v160;
    v148 = v159;
    if (v160 != v159)
    {
      do
      {
        if (*((char *)v147 - 1) < 0)
          operator delete(*((void **)v147 - 3));
        v147 = (__int128 *)((char *)v147 - 24);
      }
      while (v147 != v146);
      v148 = v159;
    }
    v160 = v146;
    operator delete(v148);
  }
}

void sub_1B038ABF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1B038AEEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if ((a34 & 0x80000000) == 0)
    JUMPOUT(0x1B038AF3CLL);
  JUMPOUT(0x1B038AF18);
}

void sub_1B038AF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 *v6;
  __int128 *v7;
  void **v8;
  void **v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void **v13;
  const char *output_blob_name;
  const char *v15;
  void **v16;
  size_t v17;
  size_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  size_t v25;
  size_t v26;
  char *v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  __int128 v33;
  void **v34;
  uint64_t v36;
  uint64_t v37;
  void *__p;
  void **v39;
  _QWORD v40[2];
  char *v41;
  char *v42;
  char *v43;
  _QWORD *v44;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(__int128 **)(v5 + 56);
  v7 = *(__int128 **)(v5 + 64);
  v36 = a2;
  v37 = a3;
  if (v6 == v7)
  {
    v11 = 0;
    __p = 0;
    v39 = 0;
    v40[0] = 0;
    while (1)
    {
      output_blob_name = (const char *)espresso_get_output_blob_name();
      v15 = output_blob_name;
      if (!output_blob_name)
        goto LABEL_3;
      v16 = v39;
      if ((unint64_t)v39 < v40[0])
      {
        v17 = strlen(output_blob_name);
        if (v17 > 0x7FFFFFFFFFFFFFF7)
          sub_1B02D78C4();
        v18 = v17;
        if (v17 < 0x17)
        {
          *((_BYTE *)v39 + 23) = v17;
          v12 = v16;
          if (v17)
            goto LABEL_14;
        }
        else
        {
          v19 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v17 | 7) != 0x17)
            v19 = v17 | 7;
          v20 = v19 + 1;
          v12 = operator new(v19 + 1);
          v39[1] = (void *)v18;
          v16[2] = (void *)(v20 | 0x8000000000000000);
          *v16 = v12;
LABEL_14:
          memmove(v12, v15, v18);
        }
        *((_BYTE *)v12 + v18) = 0;
        v13 = v16 + 3;
        goto LABEL_16;
      }
      v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v39 - (_BYTE *)__p) >> 3) + 1;
      if (v21 > 0xAAAAAAAAAAAAAAALL)
        sub_1B02D7758();
      if (0x5555555555555556 * ((uint64_t)(v40[0] - (_QWORD)__p) >> 3) > v21)
        v21 = 0x5555555555555556 * ((uint64_t)(v40[0] - (_QWORD)__p) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40[0] - (_QWORD)__p) >> 3) >= 0x555555555555555)
        v22 = 0xAAAAAAAAAAAAAAALL;
      else
        v22 = v21;
      v44 = v40;
      if (v22)
      {
        if (v22 > 0xAAAAAAAAAAAAAAALL)
          sub_1B02D72AC();
        v23 = (char *)operator new(24 * v22);
      }
      else
      {
        v23 = 0;
      }
      v24 = &v23[8 * (((char *)v39 - (_BYTE *)__p) >> 3)];
      v40[1] = v23;
      v41 = v24;
      v42 = v24;
      v43 = &v23[24 * v22];
      v25 = strlen(v15);
      if (v25 > 0x7FFFFFFFFFFFFFF7)
        sub_1B02D78C4();
      v26 = v25;
      if (v25 >= 0x17)
      {
        v30 = (v25 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v25 | 7) != 0x17)
          v30 = v25 | 7;
        v31 = v30 + 1;
        v32 = (char *)operator new(v30 + 1);
        *((_QWORD *)v24 + 1) = v26;
        *((_QWORD *)v24 + 2) = v31 | 0x8000000000000000;
        *(_QWORD *)v24 = v32;
        v24 = v32;
      }
      else
      {
        v24[23] = v25;
        if (!v25)
        {
          *v24 = 0;
          v27 = v41;
          v13 = (void **)(v42 + 24);
          v28 = (void **)__p;
          v29 = v39;
          if (v39 != __p)
            goto LABEL_43;
          goto LABEL_49;
        }
      }
      memmove(v24, v15, v26);
      v24[v26] = 0;
      v27 = v41;
      v13 = (void **)(v42 + 24);
      v28 = (void **)__p;
      v29 = v39;
      if (v39 != __p)
      {
        do
        {
LABEL_43:
          v33 = *(_OWORD *)(v29 - 3);
          *((_QWORD *)v27 - 1) = *(v29 - 1);
          *(_OWORD *)(v27 - 24) = v33;
          v27 -= 24;
          *(v29 - 2) = 0;
          *(v29 - 1) = 0;
          *(v29 - 3) = 0;
          v29 -= 3;
        }
        while (v29 != v28);
        v29 = (void **)__p;
        v34 = v39;
        __p = v27;
        v39 = v13;
        v40[0] = v43;
        while (v34 != v29)
        {
          if (*((char *)v34 - 1) < 0)
            operator delete(*(v34 - 3));
          v34 -= 3;
        }
        goto LABEL_50;
      }
LABEL_49:
      __p = v27;
      v39 = v13;
      v40[0] = v43;
LABEL_50:
      if (v29)
        operator delete(v29);
LABEL_16:
      v39 = v13;
      ++v11;
    }
  }
  __p = 0;
  v39 = 0;
  v40[0] = 0;
  sub_1B02EB2B0((char *)&__p, v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
LABEL_3:
  sub_1B0326C50(v36, v37, (__int128 **)&__p, a1);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v39;
    v10 = __p;
    if (v39 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v39 = v8;
    operator delete(v10);
  }
}

void sub_1B038B2C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_1B031724C((void **)va);
  _Unwind_Resume(a1);
}

void sub_1B038B2D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **__p, void **a14, uint64_t a15, char a16)
{
  void **v17;
  void **v18;

  sub_1B0317B88((uint64_t)&a16);
  if (__p)
  {
    v17 = a14;
    v18 = __p;
    if (a14 != __p)
    {
      do
      {
        if (*((char *)v17 - 1) < 0)
          operator delete(*(v17 - 3));
        v17 -= 3;
      }
      while (v17 != __p);
      v18 = __p;
    }
    operator delete(v18);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1B038B350(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  std::runtime_error *exception;
  _BYTE v16[16];
  uint64_t v17;

  if (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 64) - *(_QWORD *)(*(_QWORD *)(a2 + 8) + 56) != 24)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B038ECB0(exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CAEA8, (void (*)(void *))std::runtime_error::~runtime_error);
  }
  sub_1B038AF54((uint64_t)v16, a2, a3);
  v4 = v17;
  *(_QWORD *)a1 = &unk_1E60CCA78;
  v5 = *(_DWORD *)(v4 + 48);
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v7 = *(_BYTE **)(v4 + 56);
  v6 = *(_BYTE **)(v4 + 64);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (v8 < 0)
      sub_1B02D7758();
    v9 = (char *)operator new(v6 - v7);
    *(_QWORD *)(a1 + 16) = v9;
    v10 = &v9[8 * (v8 >> 3)];
    *(_QWORD *)(a1 + 32) = v10;
    memcpy(v9, v7, v8);
    *(_QWORD *)(a1 + 24) = v10;
  }
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(v4 + 80);
  v11 = *(_QWORD *)(v4 + 88);
  *(_QWORD *)(a1 + 48) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)a1 = &unk_1E60CC938;
  return sub_1B0328C28((uint64_t)v16);
}

void sub_1B038B474(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B038B488(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  void *v5;
  va_list va;

  va_start(va, a2);
  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v2 + 24) = v5;
    operator delete(v5);
  }
  sub_1B0328C28((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1B038B4AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void **v5;
  uint64_t *v6;
  uint64_t **v7;
  char *v8;
  unsigned int data;
  unsigned __int8 *v10;
  uint64_t **v11;
  uint64_t **v12;
  char *v13;
  unsigned __int8 *v14;
  uint64_t **v15;
  uint64_t **v16;
  unsigned __int8 *v17;
  uint64_t **v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t **v21;
  char *v22;
  uint64_t **v23;
  uint64_t **v24;
  _QWORD *v25;
  void **v26;
  void **v27;
  void **v28;
  void **v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  void **v33;
  void **v34;
  void **v35;
  void **v36;
  uint64_t v37;
  _BOOL4 v38;
  _BOOL4 v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t *v42;
  _OWORD *v43;
  NSObject *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  VTPixelTransferSessionRef *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void **v52;
  void *v53;
  std::string::size_type v54;
  std::string::size_type size;
  void *v56;
  void **v57;
  uint64_t v58;
  uint64_t **v59;
  _BOOL4 v61;
  int v62;
  NSObject *v63;
  _BOOL4 v64;
  int v65;
  const char *v66;
  uint64_t v67;
  NSObject *v68;
  _BOOL4 v69;
  const char *v70;
  void *exception;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t *v80;
  void **v81;
  void *v82;
  std::string::size_type v83;
  std::string::size_type v84;
  void *v85;
  void **v86;
  void **v87;
  void *v88;
  std::string::size_type v89;
  std::string::size_type v90;
  void *v91;
  void **v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  std::string *v99;
  __int128 v100;
  std::runtime_error *v101;
  uint64_t *v102;
  void **v103;
  std::string __dst;
  std::string __p;
  std::string v107;
  std::string v108;
  void *v109[4];
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  __int128 v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t v122;
  char v123;
  unsigned int v124;
  uint64_t v125;
  std::string v126;
  std::string v127;
  char v128;
  char v129[8];
  uint64_t v130;
  std::string v131;
  std::string v132;
  void *v133;
  char v134[8];
  uint64_t v135;
  char v136[8];
  uint64_t v137;
  _BYTE v138[32];
  std::string v139;
  std::string __src;
  std::string buf;
  std::string v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  void *v149;
  std::string v150;
  std::string v151;
  int v152;
  unsigned int v153;
  char v154;
  __int128 v155;
  uint64_t v156;
  char v157;
  _QWORD *v158;
  uint64_t v159;

  v159 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)(a1 + 16) = 0u;
  v103 = (void **)(a1 + 16);
  *(_OWORD *)(a1 + 96) = 0u;
  v5 = (void **)(a1 + 96);
  *(_QWORD *)(a1 + 256) = 0;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  v6 = (uint64_t *)(a1 + 8);
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 80) = 0;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 15;
  strcpy((char *)&__p, "model_spec.json");
  sub_1B0320384(a2, (char *)&__p, &v125);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else if ((SHIBYTE(v126.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_3:
    __dst = v126;
    goto LABEL_6;
  }
  sub_1B02EB0A8(&__dst, v126.__r_.__value_.__l.__data_, v126.__r_.__value_.__l.__size_);
LABEL_6:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&__src, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  else
    __src = __dst;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&buf, __src.__r_.__value_.__l.__data_, __src.__r_.__value_.__l.__size_);
  else
    buf = __src;
  sub_1B032A2E4((uint64_t)&v155, (uint64_t)&buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(buf.__r_.__value_.__l.__data_);
    *(_QWORD *)&v155 = &unk_1E60CCF20;
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
  }
  else
  {
    *(_QWORD *)&v155 = &unk_1E60CCF20;
    if ((SHIBYTE(__src.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_14;
  }
  operator delete(__src.__r_.__value_.__l.__data_);
LABEL_14:
  v136[0] = 0;
  v137 = 0;
  sub_1B031BD98(v158, (unsigned __int8 *)v136);
  v7 = sub_1B031C398(v136, "bolt_id");
  memset(&v139, 0, sizeof(v139));
  sub_1B03346C8((const std::string **)v7, &v139);
  v102 = v6;
  v8 = (char *)sub_1B031C398(v136, "output_dim");
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  sub_1B0334804(v8, &buf);
  data = buf.__r_.__value_.__l.__data_;
  v10 = (unsigned __int8 *)sub_1B031C398(v136, "image_encoder");
  sub_1B0333E08((uint64_t)v134, v10);
  v11 = sub_1B031C398(v134, "output_name");
  memset(&v131, 0, sizeof(v131));
  sub_1B03346C8((const std::string **)v11, &v131);
  v12 = sub_1B031C398(v134, "net_file");
  memset(&v132, 0, sizeof(v132));
  sub_1B03346C8((const std::string **)v12, &v132);
  v13 = (char *)sub_1B031C398(v134, "image_size");
  LODWORD(buf.__r_.__value_.__l.__data_) = 0;
  sub_1B0334804(v13, &buf);
  v133 = (void *)__PAIR64__(data, buf.__r_.__value_.__l.__data_);
  v14 = (unsigned __int8 *)sub_1B031C398(v136, "text_encoder");
  sub_1B0333E08((uint64_t)v129, v14);
  v15 = sub_1B031C398(v129, "embed_net_file");
  memset(&buf, 0, sizeof(buf));
  sub_1B03346C8((const std::string **)v15, &buf);
  v16 = sub_1B031C398(v129, "main_net_file");
  memset(&v142, 0, sizeof(v142));
  sub_1B03346C8((const std::string **)v16, &v142);
  v17 = (unsigned __int8 *)sub_1B031C398(v129, "embed_output_names");
  v143 = 0;
  v144 = 0;
  v145 = 0;
  sub_1B03349A4(v17, &v143);
  v18 = sub_1B031C398(v129, "main_input_ids_name");
  v146 = 0uLL;
  *(_QWORD *)&v147 = 0;
  sub_1B03346C8((const std::string **)v18, (std::string *)&v146);
  v19 = sub_1B031C398(v129, "main_input_ids_mask_name");
  *((_QWORD *)&v147 + 1) = 0;
  v148 = 0;
  v149 = 0;
  sub_1B03346C8((const std::string **)v19, (std::string *)((char *)&v147 + 8));
  v20 = sub_1B031C398(v129, "main_output_name");
  memset(&v150, 0, sizeof(v150));
  sub_1B03346C8((const std::string **)v20, &v150);
  v21 = sub_1B031C398(v129, "vocab_file");
  memset(&v151, 0, sizeof(v151));
  sub_1B03346C8((const std::string **)v21, &v151);
  v22 = (char *)sub_1B031C398(v129, "max_seq_len");
  *(_DWORD *)v138 = 0;
  sub_1B0334804(v22, v138);
  v152 = *(_DWORD *)v138;
  v153 = data;
  v23 = sub_1B031C398(v129, "lowercase");
  v24 = v23;
  if (*(_BYTE *)v23 != 4)
  {
    exception = __cxa_allocate_exception(0x20uLL);
    v72 = *(char *)v24;
    if (v72 > 8)
      v73 = "number";
    else
      v73 = off_1E60CE400[v72];
    sub_1B02DCBB8(&v127, v73);
    v99 = std::string::insert(&v127, 0, "type must be BOOLean, but is ");
    v100 = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
    *(_QWORD *)&v138[16] = *((_QWORD *)&v99->__r_.__value_.__l + 2);
    *(_OWORD *)v138 = v100;
    v99->__r_.__value_.__l.__size_ = 0;
    v99->__r_.__value_.__r.__words[2] = 0;
    v99->__r_.__value_.__r.__words[0] = 0;
    sub_1B0330F3C(302, (uint64_t)v138, (uint64_t)exception);
    __cxa_throw(exception, (struct type_info *)&unk_1E60CB418, (void (*)(void *))sub_1B03310BC);
  }
  v154 = *((_BYTE *)v23 + 8);
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&__p, v139.__r_.__value_.__l.__data_, v139.__r_.__value_.__l.__size_);
  else
    __p = v139;
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&v107, v131.__r_.__value_.__l.__data_, v131.__r_.__value_.__l.__size_);
  else
    v107 = v131;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    sub_1B02EB0A8(&v108, v132.__r_.__value_.__l.__data_, v132.__r_.__value_.__l.__size_);
  else
    v108 = v132;
  v109[0] = v133;
  sub_1B038DCB8((char *)&v109[1], (__int128 *)&buf);
  v124 = data;
  sub_1B034B69C((uint64_t)&buf);
  sub_1B03299FC(&v130, v129[0]);
  if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v131.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_66:
    operator delete(v131.__r_.__value_.__l.__data_);
    sub_1B03299FC(&v135, v134[0]);
    if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_29;
    goto LABEL_67;
  }
  operator delete(v132.__r_.__value_.__l.__data_);
  if (SHIBYTE(v131.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_66;
LABEL_28:
  sub_1B03299FC(&v135, v134[0]);
  if ((SHIBYTE(v139.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_29;
LABEL_67:
  operator delete(v139.__r_.__value_.__l.__data_);
LABEL_29:
  sub_1B03299FC(&v137, v136[0]);
  v25 = v158;
  *(_QWORD *)&v155 = &unk_1E60CCEC0;
  v158 = 0;
  if (v25)
    (*(void (**)(_QWORD *))(*v25 + 8))(v25);
  if (v157 < 0)
  {
    operator delete(*((void **)&v155 + 1));
    if ((*(char *)(a1 + 39) & 0x80000000) == 0)
      goto LABEL_33;
  }
  else if ((*(char *)(a1 + 39) & 0x80000000) == 0)
  {
    goto LABEL_33;
  }
  operator delete(*v103);
LABEL_33:
  *(std::string *)v103 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  v26 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
    operator delete(*v26);
  *(_OWORD *)v26 = *(_OWORD *)&v107.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 56) = *((_QWORD *)&v107.__r_.__value_.__l + 2);
  *((_BYTE *)&v107.__r_.__value_.__s + 23) = 0;
  v107.__r_.__value_.__s.__data_[0] = 0;
  v27 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = *(_OWORD *)&v108.__r_.__value_.__l.__data_;
  *(_QWORD *)(a1 + 80) = *((_QWORD *)&v108.__r_.__value_.__l + 2);
  *((_BYTE *)&v108.__r_.__value_.__s + 23) = 0;
  v108.__r_.__value_.__s.__data_[0] = 0;
  *(void **)(a1 + 88) = v109[0];
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = *(_OWORD *)&v109[1];
  v5[2] = v109[3];
  HIBYTE(v109[3]) = 0;
  LOBYTE(v109[1]) = 0;
  v28 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v28);
  *(_OWORD *)v28 = v110;
  *(_QWORD *)(a1 + 136) = v111;
  HIBYTE(v111) = 0;
  LOBYTE(v110) = 0;
  v29 = (void **)(a1 + 144);
  v30 = *(_QWORD *)(a1 + 144);
  if (v30)
  {
    v31 = *(_QWORD *)(a1 + 152);
    v32 = *(void **)(a1 + 144);
    if (v31 != v30)
    {
      do
      {
        if (*(char *)(v31 - 1) < 0)
          operator delete(*(void **)(v31 - 24));
        v31 -= 24;
      }
      while (v31 != v30);
      v32 = *v29;
    }
    *(_QWORD *)(a1 + 152) = v30;
    operator delete(v32);
    *v29 = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
  }
  *(_OWORD *)(a1 + 144) = v112;
  *(_QWORD *)(a1 + 160) = v113;
  v113 = 0;
  v112 = 0uLL;
  v33 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0)
    operator delete(*v33);
  *(_OWORD *)v33 = v114;
  *(_QWORD *)(a1 + 184) = v115;
  HIBYTE(v115) = 0;
  LOBYTE(v114) = 0;
  v34 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0)
    operator delete(*v34);
  *(_OWORD *)v34 = v116;
  *(_QWORD *)(a1 + 208) = v117;
  HIBYTE(v117) = 0;
  LOBYTE(v116) = 0;
  v35 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0)
    operator delete(*v35);
  *(_OWORD *)v35 = v118;
  *(_QWORD *)(a1 + 232) = v119;
  HIBYTE(v119) = 0;
  LOBYTE(v118) = 0;
  v36 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0)
    operator delete(*v36);
  *(_OWORD *)v36 = v120;
  v37 = v122;
  *(_QWORD *)(a1 + 256) = v121;
  HIBYTE(v121) = 0;
  LOBYTE(v120) = 0;
  *(_QWORD *)(a1 + 264) = v37;
  *(_BYTE *)(a1 + 272) = v123;
  *(_DWORD *)(a1 + 280) = v124;
  sub_1B034B69C((uint64_t)&v109[1]);
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v108.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_59:
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_60;
LABEL_72:
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        goto LABEL_61;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v107.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    goto LABEL_59;
  }
  operator delete(v107.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_72;
LABEL_60:
  if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    goto LABEL_61;
LABEL_73:
  operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_61:
  sub_1B0320384(a2, (char *)(a1 + 64), &__p);
  v38 = sub_1B0317690((uint64_t)&__p);
  v39 = v38;
  if (v107.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)__p.__r_.__value_.__l.__size_);
    v40 = &unk_1EEEB2000;
    if (v39)
    {
LABEL_63:
      v41 = operator new();
      sub_1B0317BEC((uint64_t)&v131, a2);
      *(_QWORD *)(v41 + 8) = 0;
      v42 = (uint64_t *)(v41 + 8);
      *(_QWORD *)v41 = 0;
      v43 = (_OWORD *)(v41 + 16);
      if (*(char *)(a1 + 63) < 0)
      {
        sub_1B02EB0A8((_BYTE *)(v41 + 16), *(void **)(a1 + 40), *(_QWORD *)(a1 + 48));
      }
      else
      {
        *v43 = *(_OWORD *)v26;
        *(_QWORD *)(v41 + 32) = *(_QWORD *)(a1 + 56);
      }
      if (*(char *)(a1 + 87) < 0)
      {
        sub_1B02EB0A8((_BYTE *)(v41 + 40), *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
      }
      else
      {
        *(_OWORD *)(v41 + 40) = *(_OWORD *)v27;
        *(_QWORD *)(v41 + 56) = *(_QWORD *)(a1 + 80);
      }
      *(_QWORD *)(v41 + 64) = *(_QWORD *)(a1 + 88);
      if (*(char *)(v41 + 39) < 0)
      {
        sub_1B02EB0A8(&buf, *(void **)(v41 + 16), *(_QWORD *)(v41 + 24));
      }
      else
      {
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *v43;
        buf.__r_.__value_.__r.__words[2] = *(_QWORD *)(v41 + 32);
      }
      sub_1B0318B00(&__p, (uint64_t)&buf, 1uLL);
      v107.__r_.__value_.__s.__data_[0] = 0;
      v107.__r_.__value_.__s.__data_[4] = 0;
      v107.__r_.__value_.__s.__data_[8] = 0;
      v107.__r_.__value_.__s.__data_[12] = 0;
      v107.__r_.__value_.__r.__words[2] = 0xFFFFFFFFLL;
      v108.__r_.__value_.__s.__data_[0] = 0;
      v108.__r_.__value_.__s.__data_[4] = 0;
      v108.__r_.__value_.__s.__data_[8] = 0;
      v108.__r_.__value_.__s.__data_[16] = 0;
      memset(v109, 0, sizeof(v109));
      LODWORD(v110) = 1065353216;
      BYTE7(v112) = 0;
      BYTE8(v110) = 0;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        operator delete(buf.__r_.__value_.__l.__data_);
      sub_1B0320384((uint64_t)&v131, (char *)(v41 + 40), &buf);
      sub_1B0389A20(&v155, (uint64_t)&buf, (uint64_t)&__p);
      v45 = *(_QWORD *)v41;
      *(_QWORD *)v41 = v155;
      if (v45)
        (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
      v46 = *(int *)(v41 + 64);
      v47 = operator new();
      v48 = (VTPixelTransferSessionRef *)operator new();
      *v48 = 0;
      v49 = VTPixelTransferSessionCreate((CFAllocatorRef)*MEMORY[0x1E0C9AE00], v48);
      sub_1B038DF14(v49, "Session Creation");
      if (!*v48)
      {
        v101 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v101, "PixelBufferTransfer internal inconsistency: null session.");
        __cxa_throw(v101, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      *(_DWORD *)(v47 + 16) = 1;
      *(_OWORD *)(v47 + 24) = 0u;
      *(_OWORD *)(v47 + 40) = 0u;
      *(_QWORD *)v47 = v48;
      *(_QWORD *)(v47 + 8) = &off_1E60CC980;
      *(_QWORD *)(v47 + 56) = 0;
      *(_QWORD *)(v47 + 64) = v46;
      *(_QWORD *)(v47 + 72) = v46;
      *(_DWORD *)(v47 + 80) = 0;
      *(_BYTE *)(v47 + 84) = 1;
      *(_BYTE *)(v47 + 88) = 0;
      *(_BYTE *)(v47 + 96) = 0;
      v50 = *v42;
      *v42 = v47;
      if (v50)
      {
        v51 = sub_1B034B978(v50);
        MEMORY[0x1B5E07CD8](v51, 0x10B0C409CF98BECLL);
      }
      if (v142.__r_.__value_.__s.__data_[7] < 0)
      {
        operator delete((void *)buf.__r_.__value_.__l.__size_);
        if ((SBYTE7(v112) & 0x80000000) == 0)
        {
LABEL_96:
          v52 = (void **)v109[2];
          if (!v109[2])
            goto LABEL_100;
          goto LABEL_106;
        }
      }
      else if ((SBYTE7(v112) & 0x80000000) == 0)
      {
        goto LABEL_96;
      }
      operator delete(*((void **)&v110 + 1));
      v52 = (void **)v109[2];
      if (!v109[2])
      {
LABEL_100:
        v53 = v109[0];
        v109[0] = 0;
        if (v53)
          operator delete(v53);
        v54 = __p.__r_.__value_.__r.__words[0];
        if (__p.__r_.__value_.__r.__words[0])
        {
          size = __p.__r_.__value_.__l.__size_;
          v56 = (void *)__p.__r_.__value_.__r.__words[0];
          if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
          {
            do
            {
              if (*(char *)(size - 1) < 0)
                operator delete(*(void **)(size - 24));
              size -= 24;
            }
            while (size != v54);
            v56 = (void *)__p.__r_.__value_.__r.__words[0];
          }
          __p.__r_.__value_.__l.__size_ = v54;
          operator delete(v56);
        }
        if (v132.__r_.__value_.__s.__data_[7] < 0)
          operator delete((void *)v131.__r_.__value_.__l.__size_);
        *(_QWORD *)v138 = 0;
        sub_1B034B8C0((uint64_t **)a1, (uint64_t *)v41);
        sub_1B034B8C0((uint64_t **)v138, 0);
        goto LABEL_116;
      }
      do
      {
LABEL_106:
        v57 = (void **)*v52;
        if (*((char *)v52 + 39) < 0)
          operator delete(v52[2]);
        operator delete(v52);
        v52 = v57;
      }
      while (v57);
      goto LABEL_100;
    }
  }
  else
  {
    v40 = (_QWORD *)&unk_1EEEB2000;
    if (v38)
      goto LABEL_63;
  }
  if (v40[421] != -1)
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
  v44 = (id)qword_1EEEB2D18;
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEBUG))
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl(&dword_1B02D2000, v44, OS_LOG_TYPE_DEBUG, "CLIP image encoder model file not found!", (uint8_t *)&__p, 2u);
  }

LABEL_116:
  v58 = operator new();
  sub_1B0317BEC((uint64_t)&v127, a2);
  *(_QWORD *)(v58 + 16) = 0;
  v59 = (uint64_t **)(v58 + 16);
  *(_QWORD *)v58 = 0;
  *(_QWORD *)(v58 + 8) = 0;
  sub_1B038DCB8((char *)(v58 + 24), (__int128 *)v5);
  memset(&__p, 0, sizeof(__p));
  sub_1B02EB2B0((char *)&__p, *(__int128 **)(v58 + 72), *(__int128 **)(v58 + 80), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v58 + 80) - *(_QWORD *)(v58 + 72)) >> 3));
  LODWORD(v107.__r_.__value_.__l.__data_) = a3;
  v107.__r_.__value_.__s.__data_[4] = BYTE4(a3);
  v61 = (a3 & 0xFF00000000) != 0 && (_DWORD)a3 == 0;
  if (qword_1EEEB2D28 != -1)
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
  v62 = 65552;
  v63 = (id)qword_1EEEB2CF8;
  v64 = os_log_type_enabled(v63, OS_LOG_TYPE_DEBUG);
  if (v61)
  {
    v65 = 65568;
    if (!v64)
      goto LABEL_130;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v66 = "Setting Espresso storage type to FLOAT32 since CPU runtime requested.";
  }
  else
  {
    v65 = 65552;
    if (!v64)
      goto LABEL_130;
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    v66 = "Setting Espresso storage type to FLOAT16.";
  }
  _os_log_impl(&dword_1B02D2000, v63, OS_LOG_TYPE_DEBUG, v66, (uint8_t *)&buf, 2u);
LABEL_130:

  LODWORD(v107.__r_.__value_.__r.__words[1]) = v65;
  v107.__r_.__value_.__s.__data_[12] = 1;
  v107.__r_.__value_.__r.__words[2] = 0xFFFFFFFFLL;
  v108.__r_.__value_.__s.__data_[0] = 0;
  v108.__r_.__value_.__s.__data_[4] = 0;
  v108.__r_.__value_.__s.__data_[8] = 0;
  v108.__r_.__value_.__s.__data_[16] = 0;
  memset(v109, 0, sizeof(v109));
  LODWORD(v110) = 1065353216;
  BYTE7(v112) = 0;
  BYTE8(v110) = 0;
  sub_1B0320384((uint64_t)&v127, (char *)(v58 + 24), &v131);
  sub_1B0389A20(&buf, (uint64_t)&v131, (uint64_t)&__p);
  v67 = *(_QWORD *)v58;
  *(_QWORD *)v58 = buf.__r_.__value_.__r.__words[0];
  if (v67)
    (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
  if (*(char *)(v58 + 167) < 0)
  {
    sub_1B02EB0A8(&v155, *(void **)(v58 + 144), *(_QWORD *)(v58 + 152));
  }
  else
  {
    v155 = *(_OWORD *)(v58 + 144);
    v156 = *(_QWORD *)(v58 + 160);
  }
  sub_1B0318B00(&buf, (uint64_t)&v155, 1uLL);
  LODWORD(v142.__r_.__value_.__l.__data_) = a3;
  v142.__r_.__value_.__s.__data_[4] = BYTE4(a3);
  if (qword_1EEEB2D28 == -1)
  {
    v68 = (id)qword_1EEEB2CF8;
    v69 = os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG);
    if (v61)
    {
LABEL_137:
      v62 = 65568;
      if (!v69)
        goto LABEL_145;
      *(_WORD *)v138 = 0;
      v70 = "Setting Espresso storage type to FLOAT32 since CPU runtime requested.";
      goto LABEL_144;
    }
  }
  else
  {
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
    v68 = (id)qword_1EEEB2CF8;
    v69 = os_log_type_enabled(v68, OS_LOG_TYPE_DEBUG);
    if (v61)
      goto LABEL_137;
  }
  if (!v69)
    goto LABEL_145;
  *(_WORD *)v138 = 0;
  v70 = "Setting Espresso storage type to FLOAT16.";
LABEL_144:
  _os_log_impl(&dword_1B02D2000, v68, OS_LOG_TYPE_DEBUG, v70, v138, 2u);
LABEL_145:

  LODWORD(v142.__r_.__value_.__r.__words[1]) = v62;
  v142.__r_.__value_.__s.__data_[12] = 1;
  v142.__r_.__value_.__r.__words[2] = 0xFFFFFFFFLL;
  LOBYTE(v143) = 0;
  BYTE4(v143) = 0;
  LOBYTE(v144) = 0;
  LOBYTE(v145) = 0;
  v146 = 0u;
  v147 = 0u;
  LODWORD(v148) = 1065353216;
  v150.__r_.__value_.__s.__data_[15] = 0;
  LOBYTE(v149) = 0;
  if (SHIBYTE(v156) < 0)
    operator delete((void *)v155);
  sub_1B0320384((uint64_t)&v127, (char *)(v58 + 48), &v155);
  sub_1B0389A20(v138, (uint64_t)&v155, (uint64_t)&buf);
  v74 = *(_QWORD *)(v58 + 8);
  *(_QWORD *)(v58 + 8) = *(_QWORD *)v138;
  if (v74)
    (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  sub_1B0320384((uint64_t)&v127, (char *)(v58 + 168), v138);
  v75 = operator new();
  if ((v138[31] & 0x80000000) != 0)
    sub_1B02EB0A8(&v139, *(void **)&v138[8], *(unint64_t *)&v138[16]);
  else
    v139 = *(std::string *)&v138[8];
  v76 = *(_DWORD *)(v58 + 192);
  v77 = *(_BYTE *)(v58 + 200);
  v78 = operator new();
  *((_BYTE *)&__src.__r_.__value_.__s + 23) = 7;
  strcpy((char *)&__src, "bos:eos");
  sub_1B03643B0(v78, (uint64_t)&v139);
  sub_1B02DECB4(v78 + 80, (uint64_t)&__src, 7uLL, (uint64_t *)&__dst);
  sub_1B0303130((uint64_t *)&__dst);
  *(_QWORD *)v75 = v78;
  if (SHIBYTE(__src.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__src.__r_.__value_.__l.__data_);
  *(_DWORD *)(v75 + 8) = v76;
  *(_BYTE *)(v75 + 12) = v77;
  *(_DWORD *)(v75 + 24) = 1;
  *(_OWORD *)(v75 + 32) = 0u;
  *(_OWORD *)(v75 + 48) = 0u;
  *(_QWORD *)(v75 + 16) = &unk_1E60CC938;
  *(_DWORD *)(v75 + 80) = 1;
  *(_OWORD *)(v75 + 88) = 0u;
  *(_OWORD *)(v75 + 104) = 0u;
  *(_QWORD *)(v75 + 120) = 0;
  *(_QWORD *)(v75 + 64) = 0;
  *(_QWORD *)(v75 + 72) = &unk_1E60CC938;
  if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v139.__r_.__value_.__l.__data_);
  v79 = *v59;
  *v59 = (uint64_t *)v75;
  if (v79)
  {
    v80 = sub_1B034B7C0(v79);
    MEMORY[0x1B5E07CD8](v80, 0x10B0C4005063E60);
  }
  if ((v138[31] & 0x80000000) != 0)
  {
    operator delete(*(void **)&v138[8]);
    if ((v157 & 0x80000000) == 0)
    {
LABEL_160:
      if ((v150.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
        goto LABEL_161;
      goto LABEL_165;
    }
  }
  else if ((v157 & 0x80000000) == 0)
  {
    goto LABEL_160;
  }
  operator delete(*((void **)&v155 + 1));
  if ((v150.__r_.__value_.__s.__data_[15] & 0x80000000) == 0)
  {
LABEL_161:
    v81 = (void **)v147;
    if (!(_QWORD)v147)
      goto LABEL_166;
    goto LABEL_172;
  }
LABEL_165:
  operator delete(v149);
  v81 = (void **)v147;
  if (!(_QWORD)v147)
    goto LABEL_166;
  do
  {
LABEL_172:
    v86 = (void **)*v81;
    if (*((char *)v81 + 39) < 0)
      operator delete(v81[2]);
    operator delete(v81);
    v81 = v86;
  }
  while (v86);
LABEL_166:
  v82 = (void *)v146;
  *(_QWORD *)&v146 = 0;
  if (v82)
    operator delete(v82);
  v83 = buf.__r_.__value_.__r.__words[0];
  if (buf.__r_.__value_.__r.__words[0])
  {
    v84 = buf.__r_.__value_.__l.__size_;
    v85 = (void *)buf.__r_.__value_.__r.__words[0];
    if (buf.__r_.__value_.__l.__size_ != buf.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v84 - 1) < 0)
          operator delete(*(void **)(v84 - 24));
        v84 -= 24;
      }
      while (v84 != v83);
      v85 = (void *)buf.__r_.__value_.__r.__words[0];
    }
    buf.__r_.__value_.__l.__size_ = v83;
    operator delete(v85);
  }
  if (v132.__r_.__value_.__s.__data_[7] < 0)
  {
    operator delete((void *)v131.__r_.__value_.__l.__size_);
    if ((SBYTE7(v112) & 0x80000000) == 0)
    {
LABEL_181:
      v87 = (void **)v109[2];
      if (!v109[2])
        goto LABEL_185;
      goto LABEL_191;
    }
  }
  else if ((SBYTE7(v112) & 0x80000000) == 0)
  {
    goto LABEL_181;
  }
  operator delete(*((void **)&v110 + 1));
  v87 = (void **)v109[2];
  if (!v109[2])
    goto LABEL_185;
  do
  {
LABEL_191:
    v92 = (void **)*v87;
    if (*((char *)v87 + 39) < 0)
      operator delete(v87[2]);
    operator delete(v87);
    v87 = v92;
  }
  while (v92);
LABEL_185:
  v88 = v109[0];
  v109[0] = 0;
  if (v88)
    operator delete(v88);
  v89 = __p.__r_.__value_.__r.__words[0];
  if (__p.__r_.__value_.__r.__words[0])
  {
    v90 = __p.__r_.__value_.__l.__size_;
    v91 = (void *)__p.__r_.__value_.__r.__words[0];
    if (__p.__r_.__value_.__l.__size_ != __p.__r_.__value_.__r.__words[0])
    {
      do
      {
        if (*(char *)(v90 - 1) < 0)
          operator delete(*(void **)(v90 - 24));
        v90 -= 24;
      }
      while (v90 != v89);
      v91 = (void *)__p.__r_.__value_.__r.__words[0];
    }
    __p.__r_.__value_.__l.__size_ = v89;
    operator delete(v91);
  }
  if (v128 < 0)
    operator delete((void *)v127.__r_.__value_.__l.__size_);
  v93 = (uint64_t *)*v102;
  *v102 = v58;
  if (v93)
  {
    sub_1B034B69C((uint64_t)(v93 + 3));
    v94 = (uint64_t *)v93[2];
    v93[2] = 0;
    if (v94)
    {
      v95 = sub_1B034B7C0(v94);
      MEMORY[0x1B5E07CD8](v95, 0x10B0C4005063E60);
    }
    v96 = v93[1];
    v93[1] = 0;
    if (v96)
      (*(void (**)(uint64_t))(*(_QWORD *)v96 + 8))(v96);
    v97 = *v93;
    *v93 = 0;
    if (v97)
      (*(void (**)(uint64_t))(*(_QWORD *)v97 + 8))(v97);
    MEMORY[0x1B5E07CD8](v93, 0x1032C4086C30B0ALL);
  }
  if (SHIBYTE(v126.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v126.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1B038C830(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a71;
  uint64_t **v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v76;

  sub_1B033E480(v74);
  sub_1B0389B54(v73);
  v76 = *v72;
  *v72 = 0;
  if (v76)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
    if ((a71 & 0x80000000) == 0)
      goto LABEL_7;
  }
  else if ((a71 & 0x80000000) == 0)
  {
LABEL_7:
    MEMORY[0x1B5E07CD8](v72, 0x1032C4025D38E4FLL);
    if (a58 < 0)
      operator delete(a53);
    sub_1B038CF8C(a11);
    sub_1B038D004(a10);
    sub_1B034B8C0(v71, 0);
    _Unwind_Resume(a1);
  }
  operator delete(__p);
  goto LABEL_7;
}

uint64_t sub_1B038CF8C(uint64_t a1)
{
  sub_1B034B69C(a1 + 80);
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_3;
LABEL_6:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_7;
  }
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_6;
LABEL_3:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_7:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t **sub_1B038D004(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1B034B69C((uint64_t)(v2 + 3));
    v3 = (uint64_t *)v2[2];
    v2[2] = 0;
    if (v3)
    {
      v4 = sub_1B034B7C0(v3);
      MEMORY[0x1B5E07CD8](v4, 0x10B0C4005063E60);
    }
    v5 = v2[1];
    v2[1] = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v6 = *v2;
    *v2 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    MEMORY[0x1B5E07CD8](v2, 0x1032C4086C30B0ALL);
  }
  return a1;
}

uint64_t sub_1B038D0A4@<X0>(uint64_t *a1@<X0>, __CVBuffer *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  const __CFAllocator *v7;
  __CFDictionary *Mutable;
  CFMutableDictionaryRef v9;
  const void *v10;
  CFNumberRef v11;
  CVReturn v12;
  __CVBuffer *v13;
  CVPixelBufferRef *v14;
  CVPixelBufferRef *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  _BYTE *v25;
  _BYTE *v26;
  int64_t v27;
  CVPixelBufferRef *v28;
  CVPixelBufferRef *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  int v39;
  void *v40;
  int64_t v41;
  char *v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::runtime_error *exception;
  std::runtime_error *v52;
  std::string *v53;
  __int128 v54;
  _OWORD v55[2];
  int v56;
  void *v57;
  int v58;
  void *v59;
  _BYTE *v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  void *v63;
  void *__p;
  void *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  std::string v68;
  std::string v69;
  __CFDictionary *v70;
  CVPixelBufferRef pixelBufferOut;
  __int128 v72;
  char *v73;
  char *v74;
  int v75;
  CVPixelBufferRef *v76;
  CVPixelBufferRef *v77;
  CVPixelBufferRef *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  v5 = *a1;
  v6 = a1[1];
  sub_1B038E1AC((uint64_t)&v63, a2);
  *(_DWORD *)(v6 + 80) = CVPixelBufferGetPixelFormatType(a2);
  if (!*(_QWORD *)(v6 + 64) || !*(_QWORD *)(v6 + 72))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Invalid dimensions requested for CVPixelBuffer creation.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  pixelBufferOut = 0;
  v7 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E0C9AE00], 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
  v70 = Mutable;
  if (*(_BYTE *)(v6 + 84))
  {
    v9 = CFDictionaryCreateMutable(v7, 0, MEMORY[0x1E0C9B390], MEMORY[0x1E0C9B3A0]);
    v10 = (const void *)*MEMORY[0x1E0CA8FF0];
    v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
    CFDictionarySetValue(Mutable, v10, v9);
    if (v9)
      CFRelease(v9);
  }
  if (*(_BYTE *)(v6 + 96))
  {
    v11 = CFNumberCreate(v7, kCFNumberSInt64Type, (const void *)(v6 + 88));
    CFDictionarySetValue(Mutable, (const void *)*MEMORY[0x1E0CA8F68], v11);
    CFRelease(v11);
  }
  v12 = CVPixelBufferCreate(v7, *(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72), *(_DWORD *)(v6 + 80), Mutable, &pixelBufferOut);
  if (v12)
  {
    v52 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v68, v12);
    v53 = std::string::insert(&v68, 0, "Failed to create CVPixelBuffer. Status = ");
    v54 = *(_OWORD *)&v53->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v53->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = v54;
    v53->__r_.__value_.__l.__size_ = 0;
    v53->__r_.__value_.__r.__words[2] = 0;
    v53->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(v52, &v69);
    __cxa_throw(v52, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v13 = pixelBufferOut;
  if (Mutable)
    CFRelease(Mutable);
  sub_1B038E1AC((uint64_t)&v72, v13);
  CVPixelBufferRelease(v76[1]);
  *(_DWORD *)(v6 + 16) = DWORD2(v72);
  if ((__int128 *)(v6 + 8) != &v72)
    sub_1B03267E8((_QWORD *)(v6 + 24), v73, v74, (v74 - v73) >> 3);
  v15 = v76;
  v14 = v77;
  if (v77)
  {
    v16 = (unint64_t *)(v77 + 1);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = *(std::__shared_weak_count **)(v6 + 56);
  *(_QWORD *)(v6 + 48) = v15;
  *(_QWORD *)(v6 + 56) = v14;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  *(_QWORD *)&v72 = &unk_1E60CCA78;
  v21 = (std::__shared_weak_count *)v77;
  if (v77)
  {
    v22 = (unint64_t *)(v77 + 1);
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
  v24 = VTPixelTransferSessionTransferImage(**(VTPixelTransferSessionRef **)v6, *(CVPixelBufferRef *)(v66 + 8), *(CVPixelBufferRef *)(*(_QWORD *)(v6 + 48) + 8));
  sub_1B038DF14(v24, "Image Transfer");
  HIBYTE(v73) = 5;
  strcpy((char *)&v72, "image");
  v74 = (char *)&unk_1E60CCA78;
  v75 = *(_DWORD *)(v6 + 16);
  v77 = 0;
  v78 = 0;
  v76 = 0;
  v26 = *(_BYTE **)(v6 + 24);
  v25 = *(_BYTE **)(v6 + 32);
  v27 = v25 - v26;
  if (v25 != v26)
  {
    if (v27 < 0)
      sub_1B02D7758();
    v28 = (CVPixelBufferRef *)operator new(v25 - v26);
    v29 = &v28[v27 >> 3];
    v76 = v28;
    v78 = v29;
    memcpy(v28, v26, v27);
    v77 = v29;
  }
  v79 = *(_QWORD *)(v6 + 48);
  v30 = *(std::__shared_weak_count **)(v6 + 56);
  v80 = v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  memset(v55, 0, sizeof(v55));
  v56 = 1065353216;
  sub_1B032948C((uint64_t)v55, (uint64_t)&v72, &v72);
  v74 = (char *)&unk_1E60CCA78;
  v33 = v80;
  if (v80)
  {
    v34 = (unint64_t *)&v80->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v76)
  {
    v77 = v76;
    operator delete(v76);
  }
  if (SHIBYTE(v73) < 0)
    operator delete((void *)v72);
  v63 = &unk_1E60CCA78;
  v36 = v67;
  if (v67)
  {
    v37 = (unint64_t *)&v67->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (__p)
  {
    v65 = __p;
    operator delete(__p);
  }
  sub_1B038B350((uint64_t)&v57, v5, (uint64_t)v55);
  *(_QWORD *)a3 = &unk_1E60CCA78;
  v39 = v58;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 8) = v39;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v40 = v59;
  v41 = v60 - (_BYTE *)v59;
  if (v60 != v59)
  {
    if (v41 < 0)
      sub_1B02D7758();
    v42 = (char *)operator new(v60 - (_BYTE *)v59);
    *(_QWORD *)(a3 + 16) = v42;
    v43 = &v42[8 * (v41 >> 3)];
    *(_QWORD *)(a3 + 32) = v43;
    memcpy(v42, v40, v41);
    *(_QWORD *)(a3 + 24) = v43;
  }
  v44 = v62;
  *(_QWORD *)(a3 + 40) = v61;
  *(_QWORD *)(a3 + 48) = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v47 = v62;
    v57 = &unk_1E60CCA78;
    if (v62)
    {
      v48 = (unint64_t *)&v62->__shared_owners_;
      do
        v49 = __ldaxr(v48);
      while (__stlxr(v49 - 1, v48));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
        std::__shared_weak_count::__release_weak(v47);
      }
    }
  }
  else
  {
    v57 = &unk_1E60CCA78;
  }
  if (v59)
  {
    v60 = v59;
    operator delete(v59);
  }
  return sub_1B0328C28((uint64_t)v55);
}

void sub_1B038D654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  void *v39;
  int v40;
  uint64_t v41;

  if (a39 < 0)
    operator delete(__p);
  if (a33 < 0)
  {
    operator delete(a28);
    if ((v40 & 1) == 0)
    {
LABEL_8:
      sub_1B038EC80((const void **)(v41 - 168));
      sub_1B038999C(&a21);
      _Unwind_Resume(a1);
    }
  }
  else if (!v40)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v39);
  sub_1B038EC80((const void **)(v41 - 168));
  sub_1B038999C(&a21);
  _Unwind_Resume(a1);
}

void sub_1B038D818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1B038999C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B038D82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_list va;

  va_start(va, a13);
  sub_1B038999C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B038D840(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  int32x2_t v8;
  uint64_t v9;
  float32x4_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  unint64_t v19;
  float32x4_t *v20;
  unint64_t v21;
  float32x4_t *v22;
  float32x4_t v23;
  uint64_t v24;
  uint64_t v25;
  float *v26;
  float *v27;
  float v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  void *v32;
  unint64_t v33;
  uint64_t v34;
  float32x4_t v40;
  float32x4_t *v41;
  uint64_t v42;
  float32x4_t v43;
  unint64_t v44;
  float *v45;
  float v46;
  int v47;
  void *v48;
  int64_t v49;
  char *v50;
  char *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::runtime_error *v58;
  std::runtime_error *exception;
  unint64_t v60;
  void *__p;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  void *v67;
  int v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  std::__shared_weak_count *v72;

  v6 = *(int *)(a1 + 280);
  v7 = operator new(8uLL);
  __p = v7;
  *v7 = v6;
  v62 = v7 + 1;
  v63 = v7 + 1;
  v8.i32[0] = 0;
  sub_1B0325CC0((int32x4_t **)&__p, (uint64_t)&v67, v8);
  if (__p)
  {
    v62 = __p;
    operator delete(__p);
  }
  if (v68 != 1)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Incorrect data type requested.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v71 + 24))(v71);
  v60 = v11;
  v12 = v9;
  v13 = a2[1] - *a2;
  if (v13)
  {
    v14 = 0;
    v15 = 0xAAAAAAAAAAAAAAABLL * (v13 >> 3);
    do
    {
      sub_1B0389BDC(*(_QWORD *)(a1 + 8), *a2 + 24 * v14, (uint64_t)&__p);
      if ((_DWORD)v62 != 1)
      {
        v58 = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
        std::runtime_error::runtime_error(v58, "Incorrect data type requested.");
        __cxa_throw(v58, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
      }
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 24))(v65);
      v17 = *(int *)(a1 + 280);
      if ((_DWORD)v17)
      {
        if (v17 < 8 || (v16 + 4 * v17 > v12 ? (v18 = v12 + 4 * v17 > v16) : (v18 = 0), v18))
        {
          v19 = 0;
LABEL_19:
          v24 = v17 - v19;
          v25 = 4 * v19;
          v26 = (float *)(v12 + 4 * v19);
          v27 = (float *)(v16 + v25);
          do
          {
            v28 = *v27++;
            *v26 = *v26 + v28;
            ++v26;
            --v24;
          }
          while (v24);
          goto LABEL_21;
        }
        v19 = v17 & 0xFFFFFFFFFFFFFFF8;
        v20 = (float32x4_t *)(v16 + 16);
        v21 = v17 & 0xFFFFFFFFFFFFFFF8;
        v22 = (float32x4_t *)(v12 + 16);
        do
        {
          v10 = vaddq_f32(v22[-1], v20[-1]);
          v23 = vaddq_f32(*v22, *v20);
          v22[-1] = v10;
          *v22 = v23;
          v20 += 2;
          v22 += 2;
          v21 -= 8;
        }
        while (v21);
        if (v19 != v17)
          goto LABEL_19;
      }
LABEL_21:
      __p = &unk_1E60CCA78;
      v29 = v66;
      if (v66)
      {
        p_shared_owners = (unint64_t *)&v66->__shared_owners_;
        do
          v31 = __ldaxr(p_shared_owners);
        while (__stlxr(v31 - 1, p_shared_owners));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
          v32 = v63;
          if (!v63)
            goto LABEL_6;
LABEL_26:
          v64 = v32;
          operator delete(v32);
          goto LABEL_6;
        }
      }
      v32 = v63;
      if (v63)
        goto LABEL_26;
LABEL_6:
      ++v14;
    }
    while (v14 != v15);
  }
  if (v60 >= 4)
  {
    v33 = v60 >> 2;
    v10.f32[0] = (float)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 3));
    if (v60 < 0x20)
    {
      v34 = 0;
LABEL_35:
      v44 = v33 - v34;
      v45 = (float *)(v12 + 4 * v34);
      v46 = 1.0 / v10.f32[0];
      do
      {
        *v45 = *v45 * v46;
        ++v45;
        --v44;
      }
      while (v44);
      goto LABEL_37;
    }
    v34 = v33 & 0x3FFFFFFFFFFFFFF8;
    __asm { FMOV            V2.4S, #1.0 }
    v40 = vdivq_f32(_Q2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
    v41 = (float32x4_t *)(v12 + 16);
    v42 = v33 & 0x3FFFFFFFFFFFFFF8;
    do
    {
      v43 = vmulq_f32(*v41, v40);
      v41[-1] = vmulq_f32(v41[-1], v40);
      *v41 = v43;
      v41 += 2;
      v42 -= 8;
    }
    while (v42);
    if (v33 != v34)
      goto LABEL_35;
  }
LABEL_37:
  *(_QWORD *)a3 = &unk_1E60CCA78;
  v47 = v68;
  *(_QWORD *)(a3 + 16) = 0;
  *(_DWORD *)(a3 + 8) = v47;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  v48 = v69;
  v49 = v70 - (_BYTE *)v69;
  if (v70 != v69)
  {
    if (v49 < 0)
      sub_1B02D7758();
    v50 = (char *)operator new(v70 - (_BYTE *)v69);
    *(_QWORD *)(a3 + 16) = v50;
    v51 = &v50[8 * (v49 >> 3)];
    *(_QWORD *)(a3 + 32) = v51;
    memcpy(v50, v48, v49);
    *(_QWORD *)(a3 + 24) = v51;
  }
  v52 = v72;
  *(_QWORD *)(a3 + 40) = v71;
  *(_QWORD *)(a3 + 48) = v52;
  if (v52)
  {
    v53 = (unint64_t *)&v52->__shared_owners_;
    do
      v54 = __ldxr(v53);
    while (__stxr(v54 + 1, v53));
    v55 = v72;
    v67 = &unk_1E60CCA78;
    if (v72)
    {
      v56 = (unint64_t *)&v72->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
  }
  else
  {
    v67 = &unk_1E60CCA78;
  }
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
}

void sub_1B038DC34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  void *v18;

  __cxa_free_exception(v18);
  sub_1B031CD9C(&a18);
  _Unwind_Resume(a1);
}

char *sub_1B038DCB8(char *__dst, __int128 *a2)
{
  __int128 v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _BYTE *v10;
  __int128 v11;
  uint64_t v12;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    v4 = *a2;
    *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
    v5 = __dst + 24;
    if ((*((char *)a2 + 47) & 0x80000000) == 0)
    {
LABEL_3:
      v6 = *(__int128 *)((char *)a2 + 24);
      *((_QWORD *)v5 + 2) = *((_QWORD *)a2 + 5);
      *(_OWORD *)v5 = v6;
      goto LABEL_6;
    }
  }
  sub_1B02EB0A8(v5, *((void **)a2 + 3), *((_QWORD *)a2 + 4));
LABEL_6:
  *((_QWORD *)__dst + 6) = 0;
  *((_QWORD *)__dst + 7) = 0;
  *((_QWORD *)__dst + 8) = 0;
  sub_1B02EB2B0(__dst + 48, *((__int128 **)a2 + 6), *((__int128 **)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 7) - *((_QWORD *)a2 + 6)) >> 3));
  if (*((char *)a2 + 95) < 0)
  {
    sub_1B02EB0A8(__dst + 72, *((void **)a2 + 9), *((_QWORD *)a2 + 10));
  }
  else
  {
    v7 = *(__int128 *)((char *)a2 + 72);
    *((_QWORD *)__dst + 11) = *((_QWORD *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_1B02EB0A8(__dst + 96, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
  }
  else
  {
    v8 = a2[6];
    *((_QWORD *)__dst + 14) = *((_QWORD *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_1B02EB0A8(__dst + 120, *((void **)a2 + 15), *((_QWORD *)a2 + 16));
  }
  else
  {
    v9 = *(__int128 *)((char *)a2 + 120);
    *((_QWORD *)__dst + 17) = *((_QWORD *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  v10 = __dst + 144;
  if (*((char *)a2 + 167) < 0)
  {
    sub_1B02EB0A8(v10, *((void **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v11 = a2[9];
    *((_QWORD *)__dst + 20) = *((_QWORD *)a2 + 20);
    *(_OWORD *)v10 = v11;
  }
  v12 = *((_QWORD *)a2 + 21);
  __dst[176] = *((_BYTE *)a2 + 176);
  *((_QWORD *)__dst + 21) = v12;
  return __dst;
}

void sub_1B038DE4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
      {
LABEL_8:
        sub_1B031724C(v3);
        if (*(char *)(v1 + 47) < 0)
        {
          operator delete(*v2);
          if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_10:
            _Unwind_Resume(a1);
        }
        else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        {
          goto LABEL_10;
        }
        operator delete(*(void **)v1);
        _Unwind_Resume(a1);
      }
LABEL_7:
      operator delete(*v4);
      goto LABEL_8;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
    goto LABEL_8;
  goto LABEL_7;
}

uint64_t sub_1B038DF14(uint64_t result, char *a2)
{
  int v2;
  std::runtime_error *exception;
  std::string *v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;
  std::string *v9;
  std::string::size_type size;
  std::string *v11;
  __int128 v12;
  std::string v13;
  std::string v14;
  std::string v15;
  std::string v16;
  std::string v17;

  if ((_DWORD)result)
  {
    v2 = result;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B02DCBB8(&v14, a2);
    v5 = std::string::insert(&v14, 0, "PixelBufferTransfer operation [");
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v15.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v15, "] failed. Status = ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v16.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v13, v2);
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v13;
    else
      v9 = (std::string *)v13.__r_.__value_.__r.__words[0];
    if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    else
      size = v13.__r_.__value_.__l.__size_;
    v11 = std::string::append(&v16, (const std::string::value_type *)v9, size);
    v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v12;
    v11->__r_.__value_.__l.__size_ = 0;
    v11->__r_.__value_.__r.__words[2] = 0;
    v11->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v17);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B038E02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  void *v33;
  int v34;
  uint64_t v35;

  if (*(char *)(v35 - 41) < 0)
  {
    operator delete(*(void **)(v35 - 64));
    if ((a14 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a33 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((a14 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a9);
  if ((a33 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a26 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a28);
  if ((a26 & 0x80000000) == 0)
  {
LABEL_5:
    if (a20 < 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(a21);
  if (a20 < 0)
  {
LABEL_6:
    operator delete(__p);
    if ((v34 & 1) == 0)
LABEL_14:
      _Unwind_Resume(a1);
LABEL_13:
    __cxa_free_exception(v33);
    goto LABEL_14;
  }
LABEL_12:
  if (!v34)
    goto LABEL_14;
  goto LABEL_13;
}

void sub_1B038E118(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  void *v5;

  *a1 = &unk_1E60CCA78;
  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  else
  {
LABEL_5:
    v5 = (void *)a1[2];
    if (!v5)
      goto LABEL_9;
  }
  a1[3] = v5;
  operator delete(v5);
LABEL_9:
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B038E1AC(uint64_t a1, __CVBuffer *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  int v6;
  size_t Height;
  size_t Width;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t v15;
  std::runtime_error *exception;
  int v18;

  v4 = (std::__shared_weak_count *)operator new(0x28uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD690;
  v4[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CC9D8;
  v4[1].__shared_owners_ = (uint64_t)a2;
  if (!a2)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Null CVPixelBuffer encountered.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  CVPixelBufferRetain(a2);
  v6 = sub_1B038E468(a2);
  Height = CVPixelBufferGetHeight(a2);
  Width = CVPixelBufferGetWidth(a2);
  v9 = sub_1B038E97C(a2);
  v18 = v6;
  v10 = operator new(8uLL);
  *v10 = Height;
  v11 = operator new(0x10uLL);
  *v11 = Height;
  v11[1] = Width;
  operator delete(v10);
  v12 = operator new(0x20uLL);
  v12[2] = v9;
  *(_OWORD *)v12 = *(_OWORD *)v11;
  operator delete(v11);
  *(_QWORD *)a1 = &unk_1E60CCA78;
  *(_DWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  v13 = operator new(0x18uLL);
  *(_OWORD *)v13 = *(_OWORD *)v12;
  v13[2] = v12[2];
  *(_QWORD *)(a1 + 16) = v13;
  *(_QWORD *)(a1 + 24) = v13 + 3;
  *(_QWORD *)(a1 + 32) = v13 + 3;
  *(_QWORD *)(a1 + 40) = v4 + 1;
  *(_QWORD *)(a1 + 48) = v4;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  operator delete(v12);
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  *(_QWORD *)a1 = &off_1E60CC980;
  return a1;
}

void sub_1B038E3CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v2;
  void *v4;

  __cxa_free_exception(v2);
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_1B038E3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  uint64_t v13;
  void *v14;
  void **v15;
  void *v17;

  v17 = *v15;
  if (*v15)
  {
    *(_QWORD *)(v13 + 24) = v17;
    operator delete(v17);
  }
  operator delete(v14);
  sub_1B0320680((uint64_t)&a13);
  sub_1B0320680((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_1B038E468(__CVBuffer *a1)
{
  signed int PixelFormatType;
  int v2;
  unsigned int v4;
  std::runtime_error *exception;
  std::string *v6;
  __int128 v7;
  std::string v8;
  std::string v9;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType != 32)
      {
        v2 = 1094862674;
        goto LABEL_10;
      }
      return 0;
    }
    if (PixelFormatType == 1111970369)
      return 0;
    v2 = 1278226488;
LABEL_10:
    if (PixelFormatType == v2)
      return 0;
LABEL_15:
    v4 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v8, v4);
    v6 = std::string::insert(&v8, 0, "Unsupported CVPixelBuffer type: ");
    v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v9);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType != 1717856627 && PixelFormatType != 1717855600)
      goto LABEL_15;
  }
  else if (PixelFormatType != 1278226534)
  {
    v2 = 1380401729;
    goto LABEL_10;
  }
  return 1;
}

void sub_1B038E5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

void sub_1B038E630(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD690;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1B038E640(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E60CD690;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B038E670(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 32));
}

uint64_t sub_1B038E690(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8));
  return a1;
}

void sub_1B038E6BC(uint64_t a1)
{
  CVPixelBufferRelease(*(CVPixelBufferRef *)(a1 + 8));
  JUMPOUT(0x1B5E07CD8);
}

uint64_t sub_1B038E6F8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 24))(a2, *(_QWORD *)(a1 + 8));
}

void *sub_1B038E710(uint64_t a1)
{
  void *BaseAddress;
  void *v3;
  std::runtime_error *exception;

  BaseAddress = CVPixelBufferGetBaseAddress(*(CVPixelBufferRef *)(a1 + 8));
  if (!BaseAddress)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to get CVPixelBuffer's data. Ensure the buffer was locked.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  v3 = BaseAddress;
  CVPixelBufferGetDataSize(*(CVPixelBufferRef *)(a1 + 8));
  return v3;
}

void sub_1B038E77C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_1B038E790@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  int v4;
  size_t BytesPerRow;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;

  v4 = sub_1B038E468(*(__CVBuffer **)(a1 + 8));
  BytesPerRow = CVPixelBufferGetBytesPerRow(*(CVPixelBufferRef *)(a1 + 8));
  v6 = sub_1B038E97C(*(__CVBuffer **)(a1 + 8));
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  result = operator new(0x18uLL);
  a2[1] = result + 3;
  a2[2] = result + 3;
  *result = BytesPerRow;
  result[1] = v6 << (2 * (v4 != 0));
  if (v4)
    v8 = 4;
  else
    v8 = 1;
  result[2] = v8;
  *a2 = result;
  return result;
}

uint64_t sub_1B038E818@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __CVBuffer *v4;
  const void *v5;
  size_t v6;
  size_t v7;
  uint64_t result;
  std::runtime_error *exception;
  void *__p[3];

  v4 = (__CVBuffer *)a1[1];
  if (CVPixelBufferLockBaseAddress(v4, 1uLL))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to lock pixel buffer.");
    goto LABEL_8;
  }
  v5 = (const void *)(*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
  v7 = v6;
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 32))(__p, a1);
  sub_1B03265EC(a2, v5, v7, (uint64_t)__p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  result = CVPixelBufferUnlockBaseAddress(v4, 1uLL);
  if ((_DWORD)result)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return result;
}

void sub_1B038E924(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B038E938(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B038E94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1B038EB44((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1B038E97C(__CVBuffer *a1)
{
  signed int PixelFormatType;
  int v2;
  int v4;
  unsigned int v5;
  std::runtime_error *exception;
  std::string *v7;
  __int128 v8;
  std::string v9;
  std::string v10;

  PixelFormatType = CVPixelBufferGetPixelFormatType(a1);
  if (PixelFormatType <= 1278226533)
  {
    if (PixelFormatType <= 1111970368)
    {
      if (PixelFormatType == 32)
        return 4;
      v2 = 1094862674;
      goto LABEL_8;
    }
    if (PixelFormatType == 1111970369)
      return 4;
    v4 = 1278226488;
LABEL_14:
    if (PixelFormatType != v4)
      goto LABEL_16;
    return 1;
  }
  if (PixelFormatType > 1717855599)
  {
    if (PixelFormatType == 1717856627)
      return 1;
    v4 = 1717855600;
    goto LABEL_14;
  }
  if (PixelFormatType != 1278226534)
  {
    v2 = 1380401729;
LABEL_8:
    if (PixelFormatType == v2)
      return 4;
LABEL_16:
    v5 = PixelFormatType;
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::to_string(&v9, v5);
    v7 = std::string::insert(&v9, 0, "Unsupported CVPixelBuffer type: ");
    v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    std::runtime_error::runtime_error(exception, &v10);
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return 1;
}

void sub_1B038EAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_1B038EB44(uint64_t a1)
{
  std::runtime_error *exception;

  *(_QWORD *)a1 = &off_1E60CCA58;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(_QWORD *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B038EBB0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B038EBC4(uint64_t a1)
{
  std::runtime_error *exception;

  *(_QWORD *)a1 = &off_1E60CCA58;
  if (CVPixelBufferUnlockBaseAddress(*(CVPixelBufferRef *)(a1 + 8), *(_QWORD *)(a1 + 16)))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "Failed to unlock pixel buffer.");
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  JUMPOUT(0x1B5E07CD8);
}

void sub_1B038EC4C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void *v2;

  __cxa_free_exception(v2);
  MEMORY[0x1B5E07CD8](v1, 0x10A1C40AFD1EA57);
  _Unwind_Resume(a1);
}

const void **sub_1B038EC80(const void **a1)
{
  const void *v2;

  v2 = *a1;
  if (v2)
    CFRelease(v2);
  return a1;
}

std::runtime_error *sub_1B038ECB0(std::runtime_error *a1)
{
  std::runtime_error *result;

  result = std::runtime_error::runtime_error(a1, "Model must have exactly one pre-declared output.");
  result->__vftable = (std::runtime_error_vtbl *)&unk_1E60CC958;
  return result;
}

_QWORD *sub_1B038ECDC(_QWORD *__dst, __int128 *a2, uint64_t a3)
{
  __int128 v5;
  int v6;
  _BYTE *v7;
  _BYTE *v8;
  int64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;

  if (*((char *)a2 + 23) < 0)
  {
    sub_1B02EB0A8(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    __dst[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = *(_DWORD *)(a3 + 8);
  __dst[5] = 0;
  __dst[3] = &unk_1E60CCA78;
  *((_DWORD *)__dst + 8) = v6;
  __dst[6] = 0;
  __dst[7] = 0;
  v8 = *(_BYTE **)(a3 + 16);
  v7 = *(_BYTE **)(a3 + 24);
  v9 = v7 - v8;
  if (v7 != v8)
  {
    if (v9 < 0)
      sub_1B02D7758();
    v10 = (char *)operator new(v7 - v8);
    __dst[5] = v10;
    __dst[6] = v10;
    v11 = &v10[8 * (v9 >> 3)];
    __dst[7] = v11;
    memcpy(v10, v8, v9);
    __dst[6] = v11;
  }
  v12 = *(_QWORD *)(a3 + 48);
  __dst[8] = *(_QWORD *)(a3 + 40);
  __dst[9] = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  return __dst;
}

void sub_1B038EDC4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 48) = v4;
    operator delete(v4);
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v1 + 23) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *sub_1B038EE00(uint64_t a1, uint64_t a2, __int128 **a3)
{
  unint64_t v3;
  _BYTE *v5;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint8x8_t v12;
  void **v13;
  unsigned __int8 *v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  __int128 *v26;
  __int128 v27;
  float v28;
  float v29;
  _BOOL8 v30;
  unint64_t v31;
  unint64_t v32;
  size_t prime;
  int8x8_t v34;
  unint64_t v35;
  uint8x8_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  _QWORD v43[2];
  char v44;

  v5 = (_BYTE *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0)
  {
    v8 = *(unsigned __int8 *)(a2 + 23);
  }
  else
  {
    a2 = *(_QWORD *)a2;
    v8 = v7;
  }
  v9 = sub_1B02D6D9C((uint64_t)v43, (uint64_t *)a2, v8);
  v10 = v9;
  v11 = *(_QWORD *)(a1 + 8);
  if (v11)
  {
    v12 = (uint8x8_t)vcnt_s8((int8x8_t)v11);
    v12.i16[0] = vaddlv_u8(v12);
    if (v12.u32[0] > 1uLL)
    {
      v3 = v9;
      if (v9 >= v11)
        v3 = v9 % v11;
    }
    else
    {
      v3 = (v11 - 1) & v9;
    }
    v13 = *(void ***)(*(_QWORD *)a1 + 8 * v3);
    if (v13)
    {
      v14 = (unsigned __int8 *)*v13;
      if (*v13)
      {
        v15 = v5[23];
        if (v15 >= 0)
          v16 = v5[23];
        else
          v16 = *((_QWORD *)v5 + 1);
        if (v15 < 0)
          v5 = *(_BYTE **)v5;
        if (v12.u32[0] < 2uLL)
        {
          while (1)
          {
            v21 = *((_QWORD *)v14 + 1);
            if (v21 == v10)
            {
              v22 = v14[39];
              if ((v22 & 0x80u) == 0)
                v23 = v14[39];
              else
                v23 = *((_QWORD *)v14 + 3);
              if (v23 == v16)
              {
                if ((v22 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                    return v14;
                }
                else
                {
                  if (!v14[39])
                    return v14;
                  v24 = 0;
                  while (v14[v24 + 16] == v5[v24])
                  {
                    if (v22 == ++v24)
                      return v14;
                  }
                }
              }
            }
            else if ((v21 & (v11 - 1)) != v3)
            {
              goto LABEL_51;
            }
            v14 = *(unsigned __int8 **)v14;
            if (!v14)
              goto LABEL_51;
          }
        }
        do
        {
          v17 = *((_QWORD *)v14 + 1);
          if (v17 == v10)
          {
            v18 = v14[39];
            if ((v18 & 0x80u) == 0)
              v19 = v14[39];
            else
              v19 = *((_QWORD *)v14 + 3);
            if (v19 == v16)
            {
              if ((v18 & 0x80) != 0)
              {
                if (!memcmp(*((const void **)v14 + 2), v5, *((_QWORD *)v14 + 3)))
                  return v14;
              }
              else
              {
                if (!v14[39])
                  return v14;
                v20 = 0;
                while (v14[v20 + 16] == v5[v20])
                {
                  if (v18 == ++v20)
                    return v14;
                }
              }
            }
          }
          else
          {
            if (v17 >= v11)
              v17 %= v11;
            if (v17 != v3)
              break;
          }
          v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
    }
  }
LABEL_51:
  v25 = (_QWORD *)(a1 + 16);
  v14 = (unsigned __int8 *)operator new(0x60uLL);
  v43[0] = v14;
  v43[1] = a1 + 16;
  *(_QWORD *)v14 = 0;
  *((_QWORD *)v14 + 1) = v10;
  v26 = *a3;
  v27 = **a3;
  *((_QWORD *)v14 + 4) = *((_QWORD *)*a3 + 2);
  *((_OWORD *)v14 + 1) = v27;
  *((_QWORD *)v26 + 1) = 0;
  *((_QWORD *)v26 + 2) = 0;
  *(_QWORD *)v26 = 0;
  *((_QWORD *)v14 + 5) = &unk_1E60CCA78;
  *((_DWORD *)v14 + 12) = 1;
  *((_QWORD *)v14 + 11) = 0;
  *(_OWORD *)(v14 + 72) = 0u;
  *(_OWORD *)(v14 + 56) = 0u;
  v44 = 1;
  v28 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v29 = *(float *)(a1 + 32);
  if (v11 && (float)(v29 * (float)v11) >= v28)
    goto LABEL_79;
  v30 = 1;
  if (v11 >= 3)
    v30 = (v11 & (v11 - 1)) != 0;
  v31 = v30 | (2 * v11);
  v32 = vcvtps_u32_f32(v28 / v29);
  if (v31 <= v32)
    prime = v32;
  else
    prime = v31;
  if (prime == 1)
  {
    prime = 2;
  }
  else if ((prime & (prime - 1)) != 0)
  {
    prime = std::__next_prime(prime);
  }
  v34 = *(int8x8_t *)(a1 + 8);
  if (prime > *(_QWORD *)&v34)
    goto LABEL_63;
  if (prime < *(_QWORD *)&v34)
  {
    v35 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v34 < 3uLL || (v36 = (uint8x8_t)vcnt_s8(v34), v36.i16[0] = vaddlv_u8(v36), v36.u32[0] > 1uLL))
    {
      v35 = std::__next_prime(v35);
    }
    else
    {
      v37 = 1 << -(char)__clz(v35 - 1);
      if (v35 >= 2)
        v35 = v37;
    }
    if (prime <= v35)
      prime = v35;
    if (prime < *(_QWORD *)&v34)
LABEL_63:
      sub_1B03282B0(a1, prime);
  }
  v11 = *(_QWORD *)(a1 + 8);
  v38 = v11 - 1;
  if ((v11 & (v11 - 1)) != 0)
  {
    if (v10 >= v11)
    {
      v3 = v10 % v11;
      v39 = *(_QWORD *)a1;
      v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v10 % v11));
      if (!v40)
        goto LABEL_82;
LABEL_80:
      *(_QWORD *)v14 = *v40;
LABEL_88:
      *v40 = v14;
      goto LABEL_89;
    }
    v3 = v10;
LABEL_79:
    v39 = *(_QWORD *)a1;
    v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
    if (!v40)
      goto LABEL_82;
    goto LABEL_80;
  }
  v3 = v38 & v10;
  v39 = *(_QWORD *)a1;
  v40 = *(_QWORD **)(*(_QWORD *)a1 + 8 * (v38 & v10));
  if (v40)
    goto LABEL_80;
LABEL_82:
  *(_QWORD *)v14 = *v25;
  *v25 = v14;
  *(_QWORD *)(v39 + 8 * v3) = v25;
  if (*(_QWORD *)v14)
  {
    v41 = *(_QWORD *)(*(_QWORD *)v14 + 8);
    if ((v11 & (v11 - 1)) != 0)
    {
      if (v41 >= v11)
        v41 %= v11;
    }
    else
    {
      v41 &= v11 - 1;
    }
    v40 = (_QWORD *)(*(_QWORD *)a1 + 8 * v41);
    goto LABEL_88;
  }
LABEL_89:
  ++*(_QWORD *)(a1 + 24);
  return v14;
}

void sub_1B038F218(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_1B0328204((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1B038F328(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B038F340(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B038F354(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B038F364(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B038F450(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B038F46C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B038F484(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B038F498(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B038F4A8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B038F5A0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B038F5BC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B038F5D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B038F5E8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B038F5F8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B038FF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, void *a14, uint64_t a15, void *a16, void *a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,void *a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  void *v63;
  void *v64;
  void *v65;

  if (__p)
    operator delete(__p);

  _Unwind_Resume(a1);
}

__n128 sub_1B03901D8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B03901FC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  void *v4;
  void *v5;

  v1 = *(_QWORD *)(a1 + 48);
  if (v1)
  {
    v3 = *(_QWORD *)(a1 + 56);
    v4 = *(void **)(a1 + 48);
    if (v3 != v1)
    {
      do
      {
        v5 = *(void **)(v3 - 16);
        v3 -= 16;

      }
      while (v3 != v1);
      v4 = *(void **)(a1 + 48);
    }
    *(_QWORD *)(a1 + 56) = v1;
    operator delete(v4);
  }
}

void **sub_1B0390260(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 2);
        v3 -= 16;

      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_1B03902BC(uint64_t a1, void *a2, long double a3)
{
  int v5;
  double v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  void *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  long double *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  BOOL v33;
  uint64_t v35;
  uint64_t v36;
  double *v37;
  const double *v38;
  uint64_t v39;
  id v40;
  float64x2x2_t v41;

  v40 = a2;
  v5 = *(unsigned __int8 *)(a1 + 40);
  v6 = log(a3);
  if (v5)
    a3 = v6;
  v7 = *(_QWORD **)(*(_QWORD *)(a1 + 32) + 8);
  v9 = v7[7];
  v8 = v7[8];
  if (v9 >= v8)
  {
    v12 = v7[6];
    v13 = v9 - v12;
    v14 = (uint64_t)(v9 - v12) >> 4;
    if ((unint64_t)(v14 + 1) >> 60)
      sub_1B02D7758();
    v15 = v8 - v12;
    v16 = v15 >> 3;
    if (v15 >> 3 <= (unint64_t)(v14 + 1))
      v16 = v14 + 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF0)
      v17 = 0xFFFFFFFFFFFFFFFLL;
    else
      v17 = v16;
    if (v17)
    {
      if (v17 >> 60)
        sub_1B02D72AC();
      v18 = (char *)operator new(16 * v17);
    }
    else
    {
      v18 = 0;
    }
    v19 = (long double *)&v18[16 * v14];
    v20 = &v18[16 * v17];
    *(_QWORD *)v19 = v40;
    v19[1] = a3;
    v11 = (char *)(v19 + 2);
    v22 = (char *)v7[6];
    v21 = (char *)v7[7];
    v23 = (char *)(v21 - v22);
    if (v21 == v22)
    {
      v7[6] = v19;
      v7[7] = v11;
      v7[8] = v20;
      if (!v21)
        goto LABEL_24;
      goto LABEL_23;
    }
    v24 = v23 - 16;
    if ((unint64_t)(v23 - 16) >= 0x110)
    {
      v29 = &v21[-((unint64_t)v24 & 0xFFFFFFFFFFFFFFF0)];
      v30 = (unint64_t)(v29 - 16);
      v31 = v29 - 8;
      v33 = &v18[v13 - 8 - ((unint64_t)v24 & 0xFFFFFFFFFFFFFFF0)] < v21 && v31 < (char *)v19;
      v25 = (char *)v7[7];
      if ((&v18[v13 - ((unint64_t)v24 & 0xFFFFFFFFFFFFFFF0) - 16] >= v21 - 8
         || v30 >= (unint64_t)&v18[v13 - 8])
        && !v33)
      {
        v35 = ((unint64_t)v24 >> 4) + 1;
        v36 = 16 * (v35 & 0x1FFFFFFFFFFFFFFELL);
        v26 = (char *)&v19[v36 / 0xFFFFFFFFFFFFFFF8];
        v25 = &v21[-v36];
        v37 = v19 - 4;
        v38 = (const double *)(v21 - 32);
        v39 = v35 & 0x1FFFFFFFFFFFFFFELL;
        do
        {
          v41 = vld2q_f64(v38);
          v38[2] = 0.0;
          *v38 = 0.0;
          v38 -= 4;
          vst2q_f64(v37, v41);
          v37 -= 4;
          v39 -= 2;
        }
        while (v39);
        v19 = (long double *)v26;
        if (v35 == (v35 & 0x1FFFFFFFFFFFFFFELL))
        {
LABEL_20:
          v7[6] = v26;
          v7[7] = v11;
          v7[8] = v20;
          do
          {
            v28 = (void *)*((_QWORD *)v21 - 2);
            v21 -= 16;

          }
          while (v21 != v22);
          v21 = v22;
          if (!v22)
            goto LABEL_24;
LABEL_23:
          operator delete(v21);
LABEL_24:
          v10 = v40;
          goto LABEL_25;
        }
      }
    }
    else
    {
      v25 = (char *)v7[7];
    }
    v26 = (char *)v19;
    do
    {
      v27 = *((_QWORD *)v25 - 2);
      v25 -= 16;
      *(_QWORD *)v25 = 0;
      *((_QWORD *)v26 - 2) = v27;
      v26 -= 16;
      *((_QWORD *)v26 + 1) = *((_QWORD *)v25 + 1);
    }
    while (v25 != v22);
    goto LABEL_20;
  }
  *(_QWORD *)v9 = v40;
  v10 = v40;
  *(long double *)(v9 + 8) = a3;
  v11 = (char *)(v9 + 16);
LABEL_25:
  v7[7] = v11;

}

void sub_1B03904F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B0390504(uint64_t a1, void *a2, void *a3)
{
  id v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  double v18;
  const char *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  const char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  double v41;
  void *v42;
  void *v43;
  uint64_t v44;
  uint64_t (**v45)(_QWORD, _QWORD, _QWORD);
  uint64_t v46;
  void *v47;
  const char *v48;
  uint64_t v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  uint64_t v56;
  double v57;
  double v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  double v62;
  double v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  double v70;
  double v71;
  double v72;
  double v73;
  long double v74;
  const char *v75;
  uint64_t v76;
  double v77;
  double v78;
  double v79;
  void *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  double v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  double v88;
  double v89;
  double v90;
  long double v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  const char *v95;
  uint64_t v96;
  uint64_t v97;
  double v98;
  double v99;
  double v100;
  long double v101;
  const char *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  const char *v106;
  uint64_t v107;
  uint64_t v108;
  int v109;
  const char *v110;
  uint64_t v111;
  uint64_t v112;
  double v113;
  uint64_t v114;
  const char *v115;
  uint64_t v116;
  void *v117;
  const char *v118;
  uint64_t v119;
  uint64_t v120;
  void *v121;
  double v122;
  double v123;
  float v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  uint64_t v130;
  double v131;
  double v132;
  double v133;
  double v134;
  long double v135;
  int shouldOptimizeAlignment;
  const char *v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  double v141;
  double v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  const char *v146;
  uint64_t v147;
  uint64_t v148;
  double v149;
  const char *v150;
  uint64_t v151;
  uint64_t v152;
  const char *v153;
  uint64_t v154;
  void *v155;
  id v156;

  v156 = a2;
  v5 = a3;
  v6 = *(_QWORD *)(a1 + 80);
  if (v6 == objc_msgSend_timestepCount(*(void **)(*(_QWORD *)(a1 + 32) + 16), v7, v8, v9) - 1)
  {
    objc_msgSend_string(v5, v10, v11, v12);
    v13 = (void *)objc_claimAutoreleasedReturnValue();
    v17 = objc_msgSend_length(v13, v14, v15, v16) != 0;

  }
  else
  {
    v17 = 1;
  }
  objc_msgSend_modelLogProbability(v5, v10, v11, v12);
  *(float *)&v18 = v18 + *(float *)(a1 + 88);
  objc_msgSend_childPathWithBlankLogProb_(v5, v19, v20, v21, *(float *)&v18);
  v25 = (void *)objc_claimAutoreleasedReturnValue();
  if (v17)
  {
    objc_msgSend_addPath_(*(void **)(a1 + 40), v22, (uint64_t)v25, v24);
    v26 = *(void **)(a1 + 40);
    objc_msgSend_string(v25, v27, v28, v29);
    v30 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pathForString_(v26, v31, (uint64_t)v30, v32);
    v33 = objc_claimAutoreleasedReturnValue();

    v25 = (void *)v33;
  }
  objc_msgSend_latestExpandedSymbolIncludingPseudospace(v5, v22, v23, v24);
  v155 = (void *)objc_claimAutoreleasedReturnValue();
  v34 = *(_QWORD *)(*(_QWORD *)(a1 + 72) + 8);
  v36 = *(_QWORD *)(v34 + 48);
  v35 = *(_QWORD *)(v34 + 56);
  while (v36 != v35)
  {
    v40 = *(id *)v36;
    v41 = *(double *)(v36 + 8);
    v42 = *(void **)(a1 + 48);
    if (v42
      && (objc_msgSend_commitActionBlock(v42, v37, v38, v39),
          v43 = (void *)objc_claimAutoreleasedReturnValue(),
          v43,
          v43))
    {
      objc_msgSend_commitActionBlock(*(void **)(a1 + 48), v37, v44, v39);
      v45 = (uint64_t (**)(_QWORD, _QWORD, _QWORD))objc_claimAutoreleasedReturnValue();
      v46 = ((uint64_t (**)(_QWORD, id, id))v45)[2](v45, v156, v40);

    }
    else
    {
      v46 = 0;
    }
    objc_msgSend_stringByAppendingString_(v156, v37, (uint64_t)v40, v39, v155);
    v47 = (void *)objc_claimAutoreleasedReturnValue();
    objc_msgSend_pathForString_(*(void **)(a1 + 40), v48, (uint64_t)v47, v49);
    v50 = (void *)objc_claimAutoreleasedReturnValue();
    if (objc_msgSend_length(v156, v51, v52, v53)
      && objc_msgSend_isEqualToString_(v40, v54, (uint64_t)v155, v56))
    {
      objc_msgSend_blankLogProbability(v5, v54, v55, v56);
      v58 = v57;
      objc_msgSend_nonBlankLogProbability(v25, v59, v60, v61);
      v63 = v62;
      objc_msgSend_nonBlankLogProbability(v5, v64, v65, v66);
      v71 = v70 + v41;
      v72 = fmax(v63, v71);
      v73 = fmin(v63, v71);
      if (v73 >= -1021.0)
      {
        v74 = exp(v73 - v72);
        v72 = log1p(v74) + v72;
      }
      objc_msgSend_setNonBlankLogProbability_(v25, v67, v68, v69, v72);
      v77 = v58 + v41;
    }
    else
    {
      objc_msgSend_modelLogProbability(v5, v54, v55, v56);
      v77 = v78 + v41;
    }
    v79 = fmax(v77, -1022.0);
    objc_msgSend_pathForString_(*(void **)(a1 + 56), v75, (uint64_t)v47, v76);
    v80 = (void *)objc_claimAutoreleasedReturnValue();

    if (v80)
    {
      v84 = -1022.0;
      if (!v50)
        goto LABEL_45;
    }
    else
    {
      objc_msgSend_pathForString_(*(void **)(a1 + 64), v81, (uint64_t)v47, v83);
      v117 = (void *)objc_claimAutoreleasedReturnValue();
      v121 = v117;
      if (v117)
      {
        objc_msgSend_modelLogProbability(v117, v118, v119, v120);
        v123 = v122;
        v124 = *(float *)(a1 + 88);
        objc_msgSend_nonBlankLogProbability(v121, v125, v126, v127);
        v132 = v131 + v41;
        v133 = fmax(v79, v132);
        v134 = fmin(v79, v132);
        if (v134 >= -1021.0)
        {
          v135 = exp(v134 - v133);
          v79 = log1p(v135) + v133;
        }
        else
        {
          v79 = v133;
        }
        shouldOptimizeAlignment = objc_msgSend_shouldOptimizeAlignment(*(void **)(a1 + 48), v128, v129, v130);
        v84 = fmax(v123 + v124, -1022.0);
        if (v50)
          v140 = shouldOptimizeAlignment;
        else
          v140 = 0;
        if (v140 == 1)
        {
          objc_msgSend_lastTokenBoundaryLogProbability(v50, v137, v138, v139);
          v142 = v141;
          objc_msgSend_lastTokenBoundaryLogProbability(v121, v143, v144, v145);
          if (v142 <= v149)
            objc_msgSend_lastTokenBoundaryLogProbability(v121, v146, v147, v148);
          else
            objc_msgSend_lastTokenBoundaryLogProbability(v50, v146, v147, v148);
          objc_msgSend_setLastTokenBoundaryLogProbability_(v50, v150, v151, v152);
        }
      }
      else
      {
        v84 = -1022.0;
      }

      if (!v50)
      {
LABEL_45:
        objc_msgSend_pathByExtendingWithString_extendedPathString_blankLogProb_nonBlankLogProb_timestep_commitAction_symbolLogProb_(v25, v81, (uint64_t)v40, (uint64_t)v47, *(_QWORD *)(a1 + 80), v46, v84, v79, v41);
        v50 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_addPath_(*(void **)(a1 + 40), v153, (uint64_t)v50, v154);
        goto LABEL_7;
      }
    }
    objc_msgSend_blankLogProbability(v50, v81, v82, v83);
    v89 = fmax(v88, v84);
    v90 = fmin(v88, v84);
    if (v90 >= -1021.0)
    {
      v91 = exp(v90 - v89);
      v89 = log1p(v91) + v89;
    }
    objc_msgSend_setBlankLogProbability_(v50, v85, v86, v87, v89);
    objc_msgSend_nonBlankLogProbability(v50, v92, v93, v94);
    v99 = fmax(v98, v79);
    v100 = fmin(v98, v79);
    if (v100 >= -1021.0)
    {
      v101 = exp(v100 - v99);
      v99 = log1p(v101) + v99;
    }
    objc_msgSend_setNonBlankLogProbability_(v50, v95, v96, v97, v99);
    v105 = objc_msgSend_shouldOptimizeAlignment(*(void **)(a1 + 48), v102, v103, v104);
    if (v46)
      v109 = v105;
    else
      v109 = 0;
    if (v109 == 1)
    {
      objc_msgSend_lastTokenBoundaryLogProbability(v50, v106, v107, v108);
      if (v41 > v113)
      {
        v114 = *(_QWORD *)(a1 + 80);
        objc_msgSend_modelLogProbability(v50, v110, v111, v112);
        objc_msgSend_updateLastTokenWithMaxActivation_totalLogProbability_tokenBoundaryLogProbability_(v50, v115, v114 + 1, v116);
      }
    }
LABEL_7:

    v36 += 16;
  }

}

void sub_1B03909A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;

  _Unwind_Resume(a1);
}

void sub_1B03909C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;

  _Unwind_Resume(a1);
}

void sub_1B03909E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B0390A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B0390A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B0390A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;

  _Unwind_Resume(a1);
}

void sub_1B0391058(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, void *a13, void *a14, void *a15)
{
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1B03912C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B0391454(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B039146C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0391480(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B0391590(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B03915B0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03915CC(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03915DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B039199C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B0391A1C()
{
  JUMPOUT(0x1B03919FCLL);
}

void sub_1B0391A2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0391A48(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  _Unwind_Resume(a1);
}

void sub_1B0391AAC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B0391D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;
  void *v11;
  void *v12;
  void *v13;

  _Unwind_Resume(a1);
}

void sub_1B0391DEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionDecoderTransformer;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B0391F24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,id a22)
{
  void *v22;
  void *v23;

  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B0391F5C(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void sub_1B0391F6C(uint64_t a1)
{

}

void sub_1B0391F74(uint64_t a1, const char *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;

  objc_msgSend_computeCaptionForImageWithInputsImpl_genderOption_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 40), *(unsigned int *)(a1 + 56));
  v3 = objc_claimAutoreleasedReturnValue();
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  v5 = *(void **)(v4 + 40);
  *(_QWORD *)(v4 + 40) = v3;

}

void sub_1B0392808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  void *v19;
  void *v20;

  _Unwind_Resume(a1);
}

void sub_1B0392AA0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  void *v5;
  void **v6;
  unint64_t v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  const char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  void *v36;
  NSObject *v37;
  uint64_t v38;
  NSObject *v39;
  void *v40;
  const char *v41;
  id obj;
  uint64_t v43;
  _QWORD v44[5];
  id v45;
  uint64_t v46;
  NSObject *v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[6];
  id v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  _QWORD v58[5];
  id v59;
  NSObject *v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  _QWORD v65[7];
  id v66;
  uint64_t v67;
  void *__p;
  void **v69;
  _BYTE v70[128];
  uint64_t v71;

  v71 = *MEMORY[0x1E0C80C00];
  v5 = *(void **)(a1 + 32);
  if (!v5)
    goto LABEL_13;
  objc_msgSend_decoderInputNames(v5, a2, a3, a4);
  v6 = v69;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v69 - (_BYTE *)__p) >> 3);
  if (!__p)
  {
    if (v7 < 5)
      goto LABEL_13;
LABEL_12:
    objc_msgSend_buildNetworkForSequenceLength_imageFeatures_(*(void **)(a1 + 32), a2, *(_QWORD *)(a1 + 72), *(_QWORD *)(a1 + 40));
    goto LABEL_13;
  }
  if (v69 == __p)
  {
    v69 = (void **)__p;
    operator delete(__p);
    if (v7 <= 4)
      goto LABEL_13;
    goto LABEL_12;
  }
  do
  {
    if (*((char *)v6 - 1) < 0)
      operator delete(*(v6 - 3));
    v6 -= 3;
  }
  while (v6 != __p);
  v69 = (void **)__p;
  operator delete(__p);
  if (v7 > 4)
    goto LABEL_12;
LABEL_13:
  if ((unint64_t)objc_msgSend_decoderBatchSize(*(void **)(a1 + 48), a2, a3, a4) >= 2
    && (v11 = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40), v8, v9, v10),
        v11 <= objc_msgSend_decoderBatchSize(*(void **)(a1 + 48), v12, v13, v14)))
  {
    v30 = MEMORY[0x1E0C809B0];
    v65[0] = MEMORY[0x1E0C809B0];
    v65[2] = sub_1B0392F30;
    v65[3] = &unk_1E60CD9E0;
    v31 = *(_QWORD *)(a1 + 64);
    v32 = *(_QWORD *)(a1 + 48);
    v65[1] = 3321888768;
    v65[4] = v32;
    v65[5] = v31;
    v33 = *(void **)(a1 + 88);
    v65[6] = *(_QWORD *)(a1 + 80);
    v34 = v33;
    v35 = *(_QWORD *)(a1 + 72);
    v66 = v34;
    v67 = v35;
    v36 = (void *)MEMORY[0x1B5E082B4](v65);
    v37 = dispatch_group_create();
    dispatch_group_enter(v37);
    v58[0] = v30;
    v58[1] = 3221225472;
    v58[2] = sub_1B03937B0;
    v58[3] = &unk_1E60CE4C8;
    v38 = *(_QWORD *)(a1 + 72);
    v61 = *(_QWORD *)(a1 + 64);
    v62 = v38;
    v58[4] = *(_QWORD *)(a1 + 48);
    v63 = *(_OWORD *)(a1 + 96);
    v64 = *(_QWORD *)(a1 + 112);
    v59 = *(id *)(a1 + 56);
    v39 = v37;
    v60 = v39;
    v40 = (void *)MEMORY[0x1B5E082B4](v58);
    objc_msgSend_runBlockWithCopyInputBlock_copyOutputBlock_(*(void **)(a1 + 32), v41, (uint64_t)v36, (uint64_t)v40);
    dispatch_group_wait(v39, 0xFFFFFFFFFFFFFFFFLL);

  }
  else
  {
    v15 = dispatch_group_create();
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    v57 = 0u;
    obj = *(id *)(*(_QWORD *)(*(_QWORD *)(a1 + 64) + 8) + 40);
    v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v16, (uint64_t)&v54, (uint64_t)v70, 16);
    if (v17)
    {
      v43 = *(_QWORD *)v55;
      v18 = MEMORY[0x1E0C809B0];
      do
      {
        for (i = 0; i != v17; ++i)
        {
          if (*(_QWORD *)v55 != v43)
            objc_enumerationMutation(obj);
          v20 = *(_QWORD *)(*((_QWORD *)&v54 + 1) + 8 * i);
          v51[0] = v18;
          v51[1] = 3321888768;
          v51[2] = sub_1B0393C04;
          v51[3] = &unk_1E60CD9A8;
          v21 = *(void **)(a1 + 88);
          v51[5] = *(_QWORD *)(a1 + 80);
          v22 = v21;
          v51[4] = v20;
          v23 = *(_QWORD *)(a1 + 72);
          v52 = v22;
          v53 = v23;
          v24 = (void *)MEMORY[0x1B5E082B4](v51);
          dispatch_group_enter(v15);
          v44[0] = v18;
          v44[1] = 3221225472;
          v44[2] = sub_1B0393C50;
          v44[3] = &unk_1E60CE4F0;
          v25 = *(_QWORD *)(a1 + 48);
          v26 = *(void **)(a1 + 56);
          v48 = *(_QWORD *)(a1 + 72);
          v44[4] = v25;
          v49 = *(_OWORD *)(a1 + 96);
          v50 = *(_QWORD *)(a1 + 112);
          v45 = v26;
          v46 = v20;
          v47 = v15;
          v27 = (void *)MEMORY[0x1B5E082B4](v44);
          objc_msgSend_runBlockWithCopyInputBlock_copyOutputBlock_(*(void **)(a1 + 32), v28, (uint64_t)v24, (uint64_t)v27);

        }
        v17 = objc_msgSend_countByEnumeratingWithState_objects_count_(obj, v29, (uint64_t)&v54, (uint64_t)v70, 16);
      }
      while (v17);
    }

    dispatch_group_wait(v15, 0xFFFFFFFFFFFFFFFFLL);
  }
}

void sub_1B0392EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,void *a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58)
{
  void *v58;
  void *v59;
  void *v60;

  _Unwind_Resume(a1);
}

unint64_t sub_1B0392F30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unint64_t result;
  const char *v6;
  uint64_t v7;
  unint64_t i;
  void *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;

  result = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), a2, a3, a4);
  if (result)
  {
    for (i = 0; i < result; ++i)
    {
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v6, i, v7);
      v9 = (void *)objc_claimAutoreleasedReturnValue();
      v13 = objc_msgSend_maxCaptionLen(*(void **)(a1 + 32), v10, v11, v12);
      sub_1B0392FD8(a1 + 48, v9, v13 * i, *(_QWORD *)(a1 + 64));

      result = objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 8) + 40), v14, v15, v16);
    }
  }
  return result;
}

void sub_1B0392FC8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0392FD8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  void *v11;
  void **v12;
  unint64_t v13;
  uint64_t v14;
  float *v15;
  float *v16;
  unint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  float *v22;
  float *v23;
  const char *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  id v29;
  id v30;
  CFArrayRef v31;
  CFIndex Count;
  const char *v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  char *v37;
  size_t v38;
  float *v39;
  const char *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  id v45;
  id v46;
  CFArrayRef v47;
  CFIndex v48;
  const char *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  const char *v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  char *v57;
  const char *v58;
  uint64_t v59;
  uint64_t v60;
  void **v61;
  unint64_t v62;
  void *v63;
  void **v64;
  unint64_t v65;
  void *v66;
  float *v67;
  const char *v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  unint64_t v72;
  uint64_t v73;
  float v74;
  float *v75;
  const char *v76;
  uint64_t v77;
  uint64_t v78;
  const char *v79;
  uint64_t v80;
  uint64_t v81;
  const char *v82;
  uint64_t v83;
  void *v84;
  const char *v85;
  uint64_t v86;
  uint64_t v87;
  void *v88;
  id v89;
  void *v90;
  const char *v91;
  uint64_t v92;
  CFArrayRef v93;
  CFArrayRef v94;
  CFArrayRef v95;
  _QWORD v96[2];
  CFIndex v97;
  void *__p;
  void **v99;
  CFArrayRef v100;
  CFArrayRef v101;
  CFArrayRef v102;
  _QWORD v103[2];
  CFIndex v104;
  float *v105;
  float *v106;
  CFArrayRef v107;
  float *v108;
  float *v109;
  float *v110;

  v10 = a2;
  v11 = *(void **)(a1 + 8);
  if (!v11)
    goto LABEL_12;
  objc_msgSend_decoderInputNames(v11, v7, v8, v9);
  v12 = v99;
  v13 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    if (v99 == __p)
    {
      v99 = (void **)__p;
      operator delete(__p);
      if (v13 > 4)
        goto LABEL_5;
LABEL_12:
      v17 = objc_msgSend_maxCaptionLen(**(void ***)a1, v7, v8, v9);
      v21 = v17;
      v108 = 0;
      v109 = 0;
      v110 = 0;
      if (v17)
      {
        if (v17 >> 62)
          sub_1B02D7758();
        v22 = (float *)operator new(4 * v17);
        v23 = &v22[v21];
        v108 = v22;
        v110 = v23;
        bzero(v22, 4 * v21);
        v109 = v23;
      }
      else
      {
        v23 = 0;
        v22 = 0;
      }
      *v22 = (float)(unint64_t)objc_msgSend_startID(**(void ***)a1, v18, v19, v20);
      objc_msgSend_objectForKeyedSubscript_(v10, v24, (uint64_t)CVNLPBeamTokens, v25);
      v26 = objc_claimAutoreleasedReturnValue();
      v27 = (void *)v26;
      v28 = (void *)MEMORY[0x1E0C9AA60];
      if (v26)
        v28 = (void *)v26;
      v29 = v28;

      v30 = v29;
      CFRetain(v30);
      sub_1B035BE48(&v107, v30);

      v31 = v107;
      v96[0] = v107;
      v96[1] = 0;
      if (v107)
      {
        Count = CFArrayGetCount(v107);
        v31 = v107;
        v97 = Count;
        v93 = v107;
        v94 = 0;
        if (v107)
          v31 = (CFArrayRef)CFArrayGetCount(v107);
      }
      else
      {
        v97 = 0;
        v93 = 0;
        v94 = 0;
      }
      v94 = v31;
      v95 = v31;
      sub_1B0394060(&v105, (uint64_t)v96, (uint64_t)&v93);
      if (a4)
        memmove(v22 + 1, v105, 4 * a4);
      v36 = *(void **)(a1 + 8);
      if (v36)
      {
        objc_msgSend_blockInput(v36, v33, v34, v35);
        v37 = (char *)__p;
        v38 = (char *)v23 - (char *)v22;
        if (v23 == v22)
        {
LABEL_27:
          if (v105)
          {
            v106 = v105;
            operator delete(v105);
          }
          if (v107)
            CFRelease(v107);

          v39 = v22;
          goto LABEL_62;
        }
      }
      else
      {
        v37 = 0;
        v38 = (char *)v23 - (char *)v22;
        if (v23 == v22)
          goto LABEL_27;
      }
      memmove(&v37[4 * a3], v22, v38);
      goto LABEL_27;
    }
    do
    {
      if (*((char *)v12 - 1) < 0)
        operator delete(*(v12 - 3));
      v12 -= 3;
    }
    while (v12 != __p);
    v99 = (void **)__p;
    operator delete(__p);
    if (v13 <= 4)
      goto LABEL_12;
  }
  else if (v13 < 5)
  {
    goto LABEL_12;
  }
LABEL_5:
  v14 = (a4 << 32) + 0x100000000;
  v108 = 0;
  v109 = 0;
  v110 = 0;
  if (a4 << 32 == 0xFFFFFFFF00000000)
  {
    v16 = 0;
    v15 = 0;
  }
  else
  {
    if (v14 < 0)
      sub_1B02D7758();
    v15 = (float *)operator new((unint64_t)v14 >> 30);
    v16 = &v15[v14 >> 32];
    v108 = v15;
    v110 = v16;
    bzero(v15, (unint64_t)v14 >> 30);
    v109 = v16;
  }
  *v15 = (float)(unint64_t)objc_msgSend_startID(**(void ***)a1, v7, v8, v9);
  objc_msgSend_objectForKeyedSubscript_(v10, v40, (uint64_t)CVNLPBeamTokens, v41);
  v42 = objc_claimAutoreleasedReturnValue();
  v43 = (void *)v42;
  v44 = (void *)MEMORY[0x1E0C9AA60];
  if (v42)
    v44 = (void *)v42;
  v45 = v44;

  v46 = v45;
  CFRetain(v46);
  sub_1B035BE48(&v107, v46);

  v47 = v107;
  v103[0] = v107;
  v103[1] = 0;
  if (v107)
  {
    v48 = CFArrayGetCount(v107);
    v47 = v107;
    v104 = v48;
    v100 = v107;
    v101 = 0;
    if (v107)
      v47 = (CFArrayRef)CFArrayGetCount(v107);
  }
  else
  {
    v104 = 0;
    v100 = 0;
    v101 = 0;
  }
  v101 = v47;
  v102 = v47;
  sub_1B0394060(&v105, (uint64_t)v103, (uint64_t)&v100);
  if (a4)
    memmove(v15 + 1, v105, 4 * a4);
  v52 = *(void **)(a1 + 8);
  if (!v52)
  {
    v57 = 0;
    goto LABEL_55;
  }
  objc_msgSend_blockInput(v52, v49, v50, v51);
  v56 = *(void **)(a1 + 8);
  v57 = (char *)__p;
  if (!v56)
    goto LABEL_55;
  objc_msgSend_decoderInputNames(v56, v53, v54, v55);
  v61 = v99;
  v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (_BYTE *)__p) >> 3);
  if (__p)
  {
    if (v99 == __p)
    {
      v99 = (void **)__p;
      operator delete(__p);
      if (v62 >= 5)
        goto LABEL_67;
    }
    else
    {
      do
      {
        if (*((char *)v61 - 1) < 0)
          operator delete(*(v61 - 3));
        v61 -= 3;
      }
      while (v61 != __p);
      v99 = (void **)__p;
      operator delete(__p);
      if (v62 >= 5)
        goto LABEL_67;
    }
LABEL_55:
    if (v16 != v15)
      memmove(&v57[4 * a3], v15, (char *)v16 - (char *)v15);
    goto LABEL_57;
  }
  if (v62 <= 4)
    goto LABEL_55;
LABEL_67:
  v63 = *(void **)(a1 + 8);
  if (!v63)
    goto LABEL_57;
  objc_msgSend_decoderInputNames(v63, v58, v59, v60);
  v64 = v99;
  v65 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (_BYTE *)__p) >> 3);
  if (!__p)
  {
    if (v65 < 5)
      goto LABEL_57;
    goto LABEL_78;
  }
  v66 = __p;
  if (v99 != __p)
  {
    do
    {
      if (*((char *)v64 - 1) < 0)
        operator delete(*(v64 - 3));
      v64 -= 3;
    }
    while (v64 != __p);
    v66 = __p;
  }
  v99 = (void **)__p;
  operator delete(v66);
  if (v65 > 4)
  {
LABEL_78:
    *((float *)__p + a3) = *(v16 - 1);
    v67 = (float *)operator new(4uLL);
    v71 = v67;
    v72 = (char *)v16 - (char *)v15;
    v73 = v16 - v15 - 1;
    v74 = v15[v73];
    if (v74 != 0.0)
      v74 = 1.0;
    *v67 = v74;
    objc_msgSend_maskInput(*(void **)(a1 + 8), v68, v69, v70);
    *(float *)__p = *v71;
    v75 = (float *)operator new(4uLL);
    *v75 = (float)(unint64_t)v73;
    objc_msgSend_positionInput(*(void **)(a1 + 8), v76, v77, v78);
    *(float *)__p = *v75;
    objc_msgSend_scaleInput(*(void **)(a1 + 8), v79, v80, v81);
    *(_DWORD *)__p = 1102382323;
    objc_msgSend_objectForKeyedSubscript_(v10, v82, (uint64_t)CVNLPBeamSearchNextTokenMetaData, v83);
    v84 = (void *)objc_claimAutoreleasedReturnValue();
    v88 = v84;
    if (v84)
    {
      v89 = v84;
    }
    else
    {
      objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v85, v86, v87);
      v89 = (id)objc_claimAutoreleasedReturnValue();
    }
    v90 = v89;

    if (v72 >= 5)
      objc_msgSend_copyInputState_(*(void **)(a1 + 8), v91, (uint64_t)v90, v92);

    operator delete(v75);
    operator delete(v71);
  }
LABEL_57:
  if (v105)
  {
    v106 = v105;
    operator delete(v105);
  }
  if (v107)
    CFRelease(v107);

  v39 = v108;
  if (v108)
LABEL_62:
    operator delete(v39);

}

void sub_1B03935C0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  void *v8;

  operator delete(v5);
  operator delete(v2);
  v8 = *(void **)(v6 - 144);
  if (v8)
  {
    *(_QWORD *)(v6 - 136) = v8;
    operator delete(v8);
  }
  sub_1B0346448((const void **)(v6 - 120));

  if (v3)
  {
    *(_QWORD *)(v6 - 104) = v3;
    operator delete(v3);

    _Unwind_Resume(a1);
  }

  _Unwind_Resume(a1);
}

id sub_1B039377C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;

  v3 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  result = v3;
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

void sub_1B03937A8(uint64_t a1)
{

}

void sub_1B03937B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  const char *v5;
  uint64_t v6;
  unint64_t v7;
  void *v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  uint64_t v24;

  if (objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), a2, a3, a4))
  {
    v7 = 0;
    do
    {
      objc_msgSend_objectAtIndexedSubscript_(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v5, v7, v6);
      v8 = (void *)objc_claimAutoreleasedReturnValue();
      v9 = *(_QWORD *)(a1 + 64);
      v13 = objc_msgSend_vocabSize(*(void **)(a1 + 32), v10, v11, v12);
      v17 = objc_msgSend_vocabSize(*(void **)(a1 + 32), v14, v15, v16);
      v21 = objc_msgSend_maxCaptionLen(*(void **)(a1 + 32), v18, v19, v20);
      sub_1B0393890(a1 + 72, *(void **)(a1 + 40), v8, v13 * v9 + v17 * v7 * v21);

      ++v7;
    }
    while (v7 < objc_msgSend_count(*(void **)(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) + 40), v22, v23, v24));
  }
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 48));
}

void sub_1B0393880(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0393890(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  id v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  void *v12;
  void **v13;
  void *v14;
  const char *v15;
  uint64_t v16;
  void *v17;
  const char *v18;
  const char *v19;
  uint64_t v20;
  void *v21;
  const char *v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void **v27;
  _BOOL4 v28;
  void **v29;
  void *v30;
  uint64_t v31;
  const char *v32;
  uint64_t v33;
  void *v34;
  const char *v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void **v45;
  unint64_t v46;
  const char *v47;
  uint64_t v48;
  void **__p;
  void **v50;

  v7 = a2;
  v11 = a3;
  v12 = **(void ***)(a1 + 8);
  if (v12)
  {
    objc_msgSend_blockOutput(v12, v8, v9, v10);
    v13 = __p;
  }
  else
  {
    v13 = 0;
  }
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v8, v9, v10);
  v14 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_objectForKeyedSubscript_(v11, v15, (uint64_t)CVNLPBeamSearchBeamID, v16);
  v17 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v14, v18, (uint64_t)v17, (uint64_t)CVNLPBeamSearchBeamID);

  objc_msgSend_objectForKeyedSubscript_(v11, v19, (uint64_t)CVNLPBeamSearchNextTokenID, v20);
  v21 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v14, v22, (uint64_t)v21, (uint64_t)CVNLPBeamSearchNextTokenID);

  v26 = **(void ***)(a1 + 16);
  if (v26)
  {
    objc_msgSend_decoderInputNames(v26, v23, v24, v25);
    v27 = v50;
    v28 = 0xAAAAAAAAAAAAAAABLL * (v50 - __p) > 5;
    if (__p)
    {
      v29 = __p;
      if (v50 != __p)
      {
        do
        {
          if (*((char *)v27 - 1) < 0)
            operator delete(*(v27 - 3));
          v27 -= 3;
        }
        while (v27 != __p);
        v29 = __p;
      }
      v50 = __p;
      operator delete(v29);
    }
  }
  else
  {
    v28 = 0;
  }
  v30 = (void *)MEMORY[0x1E0C99D50];
  v31 = objc_msgSend_vocabSize(**(void ***)a1, v23, v24, v25);
  if (v28)
    v33 = 0;
  else
    v33 = a4;
  objc_msgSend_dataWithBytes_length_(v30, v32, (uint64_t)v13 + 4 * v33, 4 * v31);
  v34 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_setObject_forKeyedSubscript_(v14, v35, (uint64_t)v34, (uint64_t)CVNLPBeamSearchNextTokenSoftmaxValues);
  objc_msgSend_dictionary(MEMORY[0x1E0C99E08], v36, v37, v38);
  v42 = (void *)objc_claimAutoreleasedReturnValue();
  v43 = **(void ***)(a1 + 8);
  if (!v43)
    goto LABEL_29;
  objc_msgSend_decoderInputNames(v43, v39, v40, v41);
  v45 = v50;
  v46 = 0xAAAAAAAAAAAAAAABLL * (v50 - __p);
  if (!__p)
  {
    if (v46 < 5)
      goto LABEL_29;
LABEL_28:
    objc_msgSend_copyOutputState_(**(void ***)(a1 + 8), v39, (uint64_t)v42, v44);
    goto LABEL_29;
  }
  if (v50 == __p)
  {
    operator delete(__p);
    if (v46 <= 4)
      goto LABEL_29;
    goto LABEL_28;
  }
  do
  {
    if (*((char *)v45 - 1) < 0)
      operator delete(*(v45 - 3));
    v45 -= 3;
  }
  while (v45 != __p);
  operator delete(__p);
  if (v46 > 4)
    goto LABEL_28;
LABEL_29:
  objc_msgSend_setObject_forKeyedSubscript_(v14, v39, (uint64_t)v42, (uint64_t)CVNLPBeamSearchNextTokenMetaData);
  objc_msgSend_addObject_(v7, v47, (uint64_t)v14, v48);

}

void sub_1B0393B30(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B0393C04(uint64_t a1)
{
  sub_1B0392FD8(a1 + 40, *(void **)(a1 + 32), 0, *(_QWORD *)(a1 + 56));
}

id sub_1B0393C1C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;

  v3 = *(void **)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  result = v3;
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void sub_1B0393C48(uint64_t a1)
{

}

void sub_1B0393C50(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = *(_QWORD *)(a1 + 64);
  v6 = objc_msgSend_vocabSize(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B0393890(a1 + 72, *(void **)(a1 + 40), *(void **)(a1 + 48), v6 * v5);
  dispatch_group_leave(*(dispatch_group_t *)(a1 + 56));
}

id sub_1B0393C8C(uint64_t a1, uint64_t a2)
{
  void *v3;
  id result;

  v3 = *(void **)(a2 + 88);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  result = v3;
  *(_QWORD *)(a1 + 88) = result;
  return result;
}

void sub_1B0393CB8(uint64_t a1)
{

}

void sub_1B0393CC0(uint64_t a1)
{
  __CFArray *v2;
  uint64_t v3;
  void *v4;

  v2 = CVNLPBeamSearchOneStep(*(_QWORD *)(a1 + 48), *(CFArrayRef *)(a1 + 32));
  v3 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8);
  v4 = *(void **)(v3 + 40);
  *(_QWORD *)(v3 + 40) = v2;

}

void sub_1B0393E68(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

float **sub_1B0394060(float **a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  const __CFArray *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  const __CFArray *v11;
  float *v12;
  float *v13;
  std::runtime_error *exception;
  float *i;
  const __CFNumber *ValueAtIndex;
  CFTypeID TypeID;
  uint64_t v19;
  CFTypeID v20;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(const __CFArray **)a3;
  v7 = *(_QWORD *)(a3 + 8);
  v8 = *(_QWORD *)a3 == 0 || v7 == *(_QWORD *)(a3 + 16);
  if (v8)
    v9 = *(_QWORD *)(a2 + 16);
  else
    v9 = *(_QWORD *)(a3 + 8);
  v10 = v9 - v4;
  if (v9 != v4)
  {
    if (v10 >> 62)
      sub_1B02D7758();
    v11 = *(const __CFArray **)a2;
    v12 = (float *)operator new(4 * v10);
    *a1 = v12;
    a1[1] = v12;
    a1[2] = &v12[v10];
    if (v11)
    {
      if (v8)
      {
        if (v4 != v5)
        {
          v13 = v12;
          if (v11 == v6)
          {
            do
            {
              if (v7 == v4)
                break;
              *v13++ = sub_1B0394330(v6, v4++);
            }
            while (v5 != v4);
          }
          else
          {
            do
              *v13++ = sub_1B0394330(v11, v4++);
            while (v5 != v4);
          }
          goto LABEL_22;
        }
        goto LABEL_21;
      }
      if (v11 == v6)
      {
        if (v4 != v7)
        {
          v13 = v12;
          do
            *v13++ = sub_1B0394330(v6, v4++);
          while (v7 != v4);
          goto LABEL_22;
        }
LABEL_21:
        v13 = v12;
LABEL_22:
        a1[1] = v13;
        return a1;
      }
      for (i = v12; ; ++i)
      {
        if (CFArrayGetCount(v11) <= v4)
          goto LABEL_18;
        ValueAtIndex = (const __CFNumber *)CFArrayGetValueAtIndex(v11, v4);
        if (!ValueAtIndex)
          goto LABEL_18;
        TypeID = CFNumberGetTypeID();
        if (TypeID == CFGetTypeID(ValueAtIndex))
        {
          v19 = sub_1B0389390(ValueAtIndex);
        }
        else
        {
          v20 = CFBooleanGetTypeID();
          if (v20 != CFGetTypeID(ValueAtIndex))
            break;
          v19 = COERCE_UNSIGNED_INT((float)CFBooleanGetValue(ValueAtIndex)) | 0x100000000;
        }
        if ((v19 & 0xFF00000000) == 0)
          break;
        *(_DWORD *)i = v19;
        ++v4;
      }
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not convert");
    }
    else
    {
      if (v8 || !v6 && v4 == v7)
        goto LABEL_21;
LABEL_18:
      exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
      std::runtime_error::runtime_error(exception, "Could not find item");
    }
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return a1;
}

void sub_1B03942D0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;
  void *v5;

  __cxa_free_exception(v3);
  *(_QWORD *)(v1 + 8) = v2;
  v5 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v5;
    operator delete(v5);
  }
  _Unwind_Resume(a1);
}

float sub_1B0394330(const __CFArray *a1, unint64_t a2)
{
  const void *ValueAtIndex;
  uint64_t v5;
  std::runtime_error *exception;

  if (!a1 || CFArrayGetCount(a1) <= a2 || (ValueAtIndex = CFArrayGetValueAtIndex(a1, a2)) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B035C098(exception);
    goto LABEL_8;
  }
  v5 = sub_1B0389300((uint64_t)ValueAtIndex);
  if ((v5 & 0xFF00000000) == 0)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    sub_1B034ACDC(exception);
LABEL_8:
    __cxa_throw(exception, MEMORY[0x1E0DE4E80], (void (*)(void *))MEMORY[0x1E0DE4338]);
  }
  return *(float *)&v5;
}

void sub_1B03943C4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B03943E0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_1B039446C(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03944DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPDecodingLexicon;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B03945C8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0394690(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03946A4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0394750(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0394764(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0394804(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B0394830(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B03948B8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B03948D4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B03949DC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B03949FC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

uint64_t sub_1B0394A1C(uint64_t a1, void *a2, void *a3)
{
  id v4;
  id v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a2;
  v5 = a3;
  v9 = objc_msgSend_priority(v4, v6, v7, v8);
  if (v9 < objc_msgSend_priority(v5, v10, v11, v12))
    v13 = -1;
  else
    v13 = 1;

  return v13;
}

void sub_1B0394A7C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0394BA8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0394C94(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1B0394CB0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0394CC4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0394CD4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0394DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  void *v23;

  _Block_object_dispose(&a16, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

__n128 sub_1B0394E3C(__n128 *a1, __n128 *a2)
{
  __n128 result;

  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_1B0394E60(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(_QWORD *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_1B0394E78(_QWORD *a1, void *a2)
{
  const char *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void (*v8)(void *);
  id v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  id v37;

  v37 = a2;
  v6 = (void *)a1[4];
  if (!v6 || !objc_msgSend_length(v6, v3, v4, v5))
  {
    objc_msgSend__rootCursor(v37, v3, v4, v5);
    v13 = LXCursorCreateByAdvancing();
    if (!v13)
      goto LABEL_23;
LABEL_9:
    v15 = *(_QWORD **)(a1[6] + 8);
    v17 = (uint64_t *)v15[7];
    v16 = v15[8];
    if ((unint64_t)v17 < v16)
    {
      *v17 = v13;
      v18 = (uint64_t)(v17 + 1);
LABEL_22:
      v15[7] = v18;
      goto LABEL_23;
    }
    v19 = (char *)v15[6];
    v20 = ((char *)v17 - v19) >> 3;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      sub_1B02D7758();
    v22 = v16 - (_QWORD)v19;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        sub_1B02D72AC();
      v24 = (char *)operator new(8 * v23);
      v25 = (uint64_t *)&v24[8 * v20];
      v26 = &v24[8 * v23];
      *v25 = v13;
      v18 = (uint64_t)(v25 + 1);
      v27 = (char *)((char *)v17 - v19);
      if (v17 == (uint64_t *)v19)
      {
LABEL_20:
        v15[6] = v25;
        v15[7] = v18;
        v15[8] = v26;
        if (!v17)
          goto LABEL_22;
LABEL_21:
        operator delete(v17);
        goto LABEL_22;
      }
    }
    else
    {
      v24 = 0;
      v25 = (uint64_t *)(8 * v20);
      v26 = 0;
      *(_QWORD *)(8 * v20) = v13;
      v18 = 8 * v20 + 8;
      v27 = (char *)((char *)v17 - v19);
      if (v17 == (uint64_t *)v19)
        goto LABEL_20;
    }
    v28 = (unint64_t)(v27 - 8);
    if (v28 < 0x58)
      goto LABEL_37;
    if ((unint64_t)(v19 - v24) < 0x20)
      goto LABEL_37;
    v29 = (v28 >> 3) + 1;
    v30 = 8 * (v29 & 0x3FFFFFFFFFFFFFFCLL);
    v31 = &v17[v30 / 0xFFFFFFFFFFFFFFF8];
    v25 = (uint64_t *)((char *)v25 - v30);
    v32 = &v24[8 * v20 - 16];
    v33 = v17 - 2;
    v34 = v29 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v35 = *(_OWORD *)v33;
      *((_OWORD *)v32 - 1) = *((_OWORD *)v33 - 1);
      *(_OWORD *)v32 = v35;
      v32 -= 32;
      v33 -= 4;
      v34 -= 4;
    }
    while (v34);
    v17 = v31;
    if (v29 != (v29 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_37:
      do
      {
        v36 = *--v17;
        *--v25 = v36;
      }
      while (v17 != (uint64_t *)v19);
    }
    v17 = (uint64_t *)v15[6];
    v15[6] = v25;
    v15[7] = v18;
    v15[8] = v26;
    if (!v17)
      goto LABEL_22;
    goto LABEL_21;
  }
  v7 = (void *)a1[4];
  v8 = *(void (**)(void *))(a1[5] + 48);
  if (v8)
  {
    v8(v7);
    v9 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    v9 = v7;
  }
  v14 = v9;
  objc_msgSend__rootCursor(v37, v10, v11, v12);
  v13 = LXCursorCreateByAdvancing();

  if (v13)
    goto LABEL_9;
LABEL_23:

}

void sub_1B0395090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B03950A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  void *v10;

  _Unwind_Resume(a1);
}

void sub_1B03950BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{

  _Unwind_Resume(a1);
}

void sub_1B03959F8(_Unwind_Exception *a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, void *a7, ...)
{
  void *v7;
  void *v8;
  void *v9;
  va_list va;

  va_start(va, a7);
  sub_1B031724C((void **)va);

  _Unwind_Resume(a1);
}

void sub_1B0395BDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)CVNLPCaptionDecoderLSTM;
  -[_Unwind_Exception dealloc](&a9, sel_dealloc);
  _Unwind_Resume(a1);
}

void sub_1B0395E2C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;
  void *v5;

  _Unwind_Resume(a1);
}

void sub_1B0395EA0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B0395EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0395ECC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;

  _Unwind_Resume(a1);
}

void sub_1B039609C(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;
  void *v3;
  void *v4;

  _Unwind_Resume(a1);
}

void sub_1B03960D4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03960E4(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B03968E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{

  _Unwind_Resume(a1);
}

uint64_t CVNLPNormalizeCodepointForCharLM(uint64_t a1)
{
  return sub_1B035E210(a1);
}

uint64_t CVNLPCodepointToScriptCode(__int16 a1, int16x4_t a2)
{
  uint64_t v3;

  if ((unsigned __int16)(a1 - 48) < 0xAu)
    return 1;
  v3 = 2;
  if (a1 == 32 || a1 == 45)
    return v3;
  if ((unsigned __int16)(a1 - 8208) < 6u)
    return 2;
  a2.i16[0] = a1 & 0xFFDF;
  a2.i16[1] = a1;
  if ((vmaxv_u16(vcgt_u16((uint16x4_t)0x158001F0017001ALL, (uint16x4_t)vadd_s16(vzip1_s16(a2, vdup_lane_s16(a2, 1)), (int16x4_t)0xFF08FF28FF40FFBFLL))) & 1) != 0)return 3;
  if ((unsigned __int16)(a1 - 1024) < 0x130u)
    return 4;
  if ((unsigned __int16)(a1 - 880) < 0x90u)
    return 5;
  v3 = 6;
  if ((unsigned __int16)((unsigned __int16)(a1 + 21504) >> 10) < 0xBu
    || (a1 & 0xFFE0) == 0xA960
    || (a1 & 0xFF00) == 0x1100
    || (unsigned __int16)(a1 - 12592) < 0x60u)
  {
    return v3;
  }
  if ((unsigned __int16)(a1 - 1632) >= 0xAu)
    return 0;
  else
    return 7;
}

BOOL CVNLPShouldIgnoreScriptForLatinCyrillic(int a1)
{
  return a1 == 1;
}

BOOL CVNLPIsLatinCyrillicMixedScript(int a1, int a2)
{
  if (a1 == 3 && a2 == 4)
    return 1;
  return a1 == 4 && a2 == 3;
}

BOOL CVNLPIsWhitespaceCharLMCodepoint(int a1)
{
  return a1 == 95;
}

BOOL CVNLPIsDigitCharLMCodepoint(int a1)
{
  return a1 == 57344;
}

void CVNLPWordTokenIDsForString(void *a1, uint64_t a2, void *a3)
{
  id v4;
  const char *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  id v18;
  uint64_t v19;

  v4 = a3;
  objc_msgSend_stringByAppendingString_(a1, v5, (uint64_t)CFSTR(" "), v6);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  sub_1B0360ED0(v7, 0);
  v8 = (void *)objc_claimAutoreleasedReturnValue();

  v11 = objc_msgSend_maximumLengthOfBytesUsingEncoding_(v8, v9, 4, v10);
  v15 = objc_msgSend_length(v8, v12, v13, v14);
  v16 = operator new[]();
  v19 = 0;
  objc_msgSend_getBytes_maxLength_usedLength_encoding_options_range_remainingRange_(v8, v17, v16, v11, &v19, 4, 0, 0, v15, 0);
  v18 = v4;
  LMStreamTokenizerPushBytes();
  MEMORY[0x1B5E07CB4](v16, 0x1000C8077774924);

}

void sub_1B0396D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void sub_1B0396D90(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0396DA4(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0396DB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0396DCC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0396DE0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0396DF8(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

void sub_1B0396E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  const char *v7;
  void *v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  id v18;

  v6 = objc_alloc(MEMORY[0x1E0CB3940]);
  v8 = (void *)objc_msgSend_initWithBytes_length_encoding_(v6, v7, a2, a3, 4);
  objc_msgSend_whitespaceAndNewlineCharacterSet(MEMORY[0x1E0CB3500], v9, v10, v11);
  v12 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_stringByTrimmingCharactersInSet_(v8, v13, (uint64_t)v12, v14);
  v18 = (id)objc_claimAutoreleasedReturnValue();

  if (objc_msgSend_length(v18, v15, v16, v17))
    (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();

}

void sub_1B0396EB8(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

void sub_1B0396ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{

  _Unwind_Resume(a1);
}

BOOL CVNLPShouldUseLexiconContextLogProb(void *a1)
{
  id v1;
  const char *v2;
  uint64_t v3;
  _BOOL8 v5;

  v1 = a1;
  if ((objc_msgSend_isEqualToString_(v1, v2, (uint64_t)CFSTR("'"), v3) & 1) != 0 || sub_1B0360818(v1))
  {

    return 0;
  }
  else
  {
    v5 = !sub_1B03608A4(v1);

    return v5;
  }
}

void sub_1B0396F64(_Unwind_Exception *a1)
{
  void *v1;

  _Unwind_Resume(a1);
}

id convertToCVNLPTextDecodingResult(double **a1, void *a2)
{
  void (**v3)(id, _QWORD);
  const char *v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  const char *v17;
  uint64_t v18;
  void *v19;
  _QWORD *v20;
  _QWORD *v21;
  void *v22;
  const char *v23;
  uint64_t v24;
  int hasPrefix;
  const char *v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  uint64_t v30;
  int hasSuffix;
  void *v32;
  const char *v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  __CFString *v38;
  const char *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  const char *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  const char *v47;
  uint64_t v48;
  int v49;
  void *v50;
  const char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  CVNLPTextDecodingToken *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69;
  const char *v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  const char *v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  const char *v78;
  void *v79;
  const char *v80;
  __CFString *v81;
  void *v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  const char *v87;
  uint64_t v88;
  char isEqualToString;
  void *v90;
  const char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  CVNLPTextDecodingToken *v95;
  const char *v96;
  uint64_t v97;
  uint64_t v98;
  void *v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  const char *v104;
  uint64_t v105;
  uint64_t v106;
  void *v107;
  const char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  const char *v112;
  void *v113;
  const char *v114;
  uint64_t v115;
  CVNLPTextDecodingToken *v116;
  void *v117;
  long double v118;
  const char *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  void *v123;
  long double v124;
  const char *v125;
  uint64_t v126;
  uint64_t v127;
  void *v128;
  const char *v129;
  const char *v130;
  uint64_t v131;
  const char *v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  const char *v136;
  uint64_t v137;
  uint64_t v138;
  void *v139;
  const char *v140;
  uint64_t v141;
  int v142;
  const char *v143;
  uint64_t v144;
  uint64_t v145;
  void *v146;
  const char *v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  const char *v151;
  uint64_t v152;
  int v153;
  const char *v154;
  uint64_t v155;
  uint64_t v156;
  void *v157;
  const char *v158;
  uint64_t v159;
  uint64_t v160;
  NSUInteger v161;
  NSUInteger v162;
  NSUInteger v163;
  const char *v164;
  uint64_t v165;
  uint64_t v166;
  const char *v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  const char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  CVNLPTextDecodingToken *v175;
  const char *v176;
  uint64_t v177;
  uint64_t v178;
  void *v179;
  const char *v180;
  uint64_t v181;
  uint64_t v182;
  void *v183;
  const char *v184;
  uint64_t v185;
  uint64_t v186;
  void *v187;
  const char *v188;
  uint64_t v189;
  uint64_t v190;
  NSRange v191;
  void *v192;
  const char *v193;
  const char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  CVNLPTextDecodingToken *v198;
  const char *v199;
  uint64_t v200;
  uint64_t v201;
  const char *v202;
  uint64_t v203;
  uint64_t v204;
  const char *v205;
  uint64_t v206;
  uint64_t v207;
  const char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  const char *v212;
  const char *v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  int v217;
  uint64_t v218;
  unint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int32x4_t v224;
  int32x4_t v225;
  int32x4_t v226;
  int32x4_t v227;
  CVNLPTextDecodingResultCandidate *v228;
  double v229;
  long double v230;
  const char *v231;
  uint64_t v232;
  void *v233;
  const char *v234;
  uint64_t v235;
  void *v236;
  const char *v237;
  void *v238;
  const char *v239;
  uint64_t v240;
  CVNLPTextDecodingResult *v241;
  const char *v242;
  uint64_t v243;
  void *v244;
  uint64_t *v246;
  void *v247;
  void *v248;
  uint64_t v249;
  void *v250;
  double *v251;
  void *v252;
  uint64_t v253;
  void *v254;
  _QWORD v255[2];
  NSRange v256;
  NSRange v257;

  v255[1] = *MEMORY[0x1E0C80C00];
  v3 = a2;
  objc_msgSend_characterSetWithCharactersInString_(MEMORY[0x1E0CB3500], v4, (uint64_t)CFSTR(" "), v5);
  v252 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_array(MEMORY[0x1E0C99DE8], v6, v7, v8);
  v247 = (void *)objc_claimAutoreleasedReturnValue();
  v251 = *a1;
  v246 = (uint64_t *)a1[1];
  if (*a1 == (double *)v246)
    goto LABEL_44;
  do
  {
    objc_msgSend_array(MEMORY[0x1E0C99DE8], v9, v10, v11);
    v254 = (void *)objc_claimAutoreleasedReturnValue();
    v16 = *(_QWORD *)v251;
    v15 = *((_QWORD *)v251 + 1);
    v253 = v15;
    while (v16 != v15)
    {
      objc_msgSend_string(MEMORY[0x1E0CB37A0], v12, v13, v14);
      v19 = (void *)objc_claimAutoreleasedReturnValue();
      v20 = *(_QWORD **)v16;
      v21 = *(_QWORD **)(v16 + 8);
      if (*(_QWORD **)v16 != v21)
      {
        do
        {
          v3[2](v3, *v20);
          v22 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_appendString_(v19, v23, (uint64_t)v22, v24);

          ++v20;
        }
        while (v20 != v21);
      }
      hasPrefix = objc_msgSend_hasPrefix_(v19, v17, (uint64_t)CFSTR(" "), v18);
      hasSuffix = objc_msgSend_hasSuffix_(v19, v26, (uint64_t)CFSTR(" "), v27);
      if ((hasSuffix | hasPrefix) == 1)
      {
        objc_msgSend_stringByTrimmingCharactersInSet_(v19, v28, (uint64_t)v252, v30);
        v32 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_setString_(v19, v33, (uint64_t)v32, v34);

      }
      if ((hasPrefix & hasSuffix) != 1)
      {
        v81 = CFSTR(" ");
        if (!hasSuffix)
          v81 = &stru_1E60CE768;
        v38 = v81;
        if ((hasPrefix & 1) != 0)
        {
LABEL_18:
          if (objc_msgSend_count(v254, v35, v36, v37))
          {
            objc_msgSend_lastObject(v254, v35, v36, v37);
            v82 = (void *)objc_claimAutoreleasedReturnValue();
            objc_msgSend_terminatingCharacter(v82, v83, v84, v85);
            v86 = (void *)objc_claimAutoreleasedReturnValue();
            isEqualToString = objc_msgSend_isEqualToString_(v86, v87, (uint64_t)CFSTR(" "), v88);

            if ((isEqualToString & 1) == 0)
            {
              objc_msgSend_lastObject(v254, v35, v36, v37);
              v90 = (void *)objc_claimAutoreleasedReturnValue();
              v94 = objc_msgSend_count(v254, v91, v92, v93);
              v95 = [CVNLPTextDecodingToken alloc];
              objc_msgSend_string(v90, v96, v97, v98);
              v99 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_score(v90, v100, v101, v102);
              v103 = (void *)objc_claimAutoreleasedReturnValue();
              objc_msgSend_alignmentScore(v90, v104, v105, v106);
              v107 = (void *)objc_claimAutoreleasedReturnValue();
              v111 = objc_msgSend_activationRange(v90, v108, v109, v110);
              v113 = (void *)objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v95, v112, (uint64_t)v99, (uint64_t)v103, v107, v111, v112, CFSTR(" "));
              objc_msgSend_replaceObjectAtIndex_withObject_(v254, v114, v94 - 1, (uint64_t)v113);

            }
          }
        }
        goto LABEL_21;
      }
      v38 = CFSTR(" ");
      if (objc_msgSend_length(v19, v28, v29, v30))
        goto LABEL_18;
      if (objc_msgSend_count(v254, v35, v36, v37))
      {
        objc_msgSend_lastObject(v254, v39, v40, v41);
        v42 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_fullString(v42, v43, v44, v45);
        v46 = (void *)objc_claimAutoreleasedReturnValue();
        v49 = objc_msgSend_isEqualToString_(v46, v47, (uint64_t)CFSTR(" "), v48);

        if (v49)
        {
          objc_msgSend_lastObject(v254, v35, v36, v37);
          v50 = (void *)objc_claimAutoreleasedReturnValue();
          v249 = objc_msgSend_activationRange(v50, v51, v52, v53);
          v54 = *(_QWORD *)(v16 + 48);
          v58 = objc_msgSend_activationRange(v50, v55, v56, v57);
          v62 = objc_msgSend_count(v254, v59, v60, v61);
          v63 = [CVNLPTextDecodingToken alloc];
          objc_msgSend_string(v50, v64, v65, v66);
          v250 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_score(v50, v67, v68, v69);
          v248 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_alignmentScore(v50, v70, v71, v72);
          v73 = (void *)objc_claimAutoreleasedReturnValue();
          objc_msgSend_terminatingCharacter(v50, v74, v75, v76);
          v77 = (void *)objc_claimAutoreleasedReturnValue();
          v79 = (void *)objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v63, v78, (uint64_t)v250, (uint64_t)v248, v73, v249, v54 - v58, v77);
          objc_msgSend_replaceObjectAtIndex_withObject_(v254, v80, v62 - 1, (uint64_t)v79);

          v38 = CFSTR(" ");
LABEL_3:

          goto LABEL_4;
        }
LABEL_21:
        if (objc_msgSend_count(v254, v35, v36, v37))
          v115 = *(_QWORD *)(v16 + 40);
        else
          v115 = 0;
        v116 = [CVNLPTextDecodingToken alloc];
        v117 = (void *)MEMORY[0x1E0CB37E8];
        v118 = exp(*(double *)(v16 + 24) / (double)(unint64_t)(*(_QWORD *)(v16 + 56) + 1));
        objc_msgSend_numberWithDouble_(v117, v119, v120, v121, (double)v118);
        v122 = (void *)objc_claimAutoreleasedReturnValue();
        v123 = (void *)MEMORY[0x1E0CB37E8];
        v124 = exp(*(long double *)(v16 + 32));
        objc_msgSend_numberWithDouble_(v123, v125, v126, v127, (double)v124);
        v128 = (void *)objc_claimAutoreleasedReturnValue();
        v50 = (void *)objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v116, v129, (uint64_t)v19, (uint64_t)v122, v128, v115, *(_QWORD *)(v16 + 48) - v115, v38);

        objc_msgSend_addObject_(v254, v130, (uint64_t)v50, v131);
        goto LABEL_3;
      }
LABEL_4:

      v16 += 64;
      v15 = v253;
    }
    while (objc_msgSend_count(v254, v12, v13, v14))
    {
      objc_msgSend_lastObject(v254, v132, v133, v134);
      v135 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_terminatingCharacter(v135, v136, v137, v138);
      v139 = (void *)objc_claimAutoreleasedReturnValue();
      v142 = objc_msgSend_isEqualToString_(v139, v140, (uint64_t)CFSTR(" "), v141);

      if (!v142)
        break;
      objc_msgSend_lastObject(v254, v143, v144, v145);
      v146 = (void *)objc_claimAutoreleasedReturnValue();
      objc_msgSend_fullString(v146, v147, v148, v149);
      v150 = (void *)objc_claimAutoreleasedReturnValue();
      v153 = objc_msgSend_isEqualToString_(v150, v151, (uint64_t)CFSTR(" "), v152);

      if (!v153)
      {
        objc_msgSend_lastObject(v254, v154, v155, v156);
        v170 = (void *)objc_claimAutoreleasedReturnValue();
        v197 = objc_msgSend_count(v254, v194, v195, v196);
        v198 = [CVNLPTextDecodingToken alloc];
        objc_msgSend_string(v170, v199, v200, v201);
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_score(v170, v202, v203, v204);
        v183 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_alignmentScore(v170, v205, v206, v207);
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        v211 = objc_msgSend_activationRange(v170, v208, v209, v210);
        v192 = (void *)objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v198, v212, (uint64_t)v179, (uint64_t)v183, v187, v211, v212, &stru_1E60CE768);
        objc_msgSend_replaceObjectAtIndex_withObject_(v254, v213, v197 - 1, (uint64_t)v192);
        goto LABEL_25;
      }
      objc_msgSend_lastObject(v254, v154, v155, v156);
      v157 = (void *)objc_claimAutoreleasedReturnValue();
      v161 = objc_msgSend_activationRange(v157, v158, v159, v160);
      v163 = v162;

      objc_msgSend_removeLastObject(v254, v164, v165, v166);
      if (objc_msgSend_count(v254, v167, v168, v169))
      {
        objc_msgSend_lastObject(v254, v12, v13, v14);
        v170 = (void *)objc_claimAutoreleasedReturnValue();
        v174 = objc_msgSend_count(v254, v171, v172, v173);
        v175 = [CVNLPTextDecodingToken alloc];
        objc_msgSend_string(v170, v176, v177, v178);
        v179 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_score(v170, v180, v181, v182);
        v183 = (void *)objc_claimAutoreleasedReturnValue();
        objc_msgSend_alignmentScore(v170, v184, v185, v186);
        v187 = (void *)objc_claimAutoreleasedReturnValue();
        v256.location = objc_msgSend_activationRange(v170, v188, v189, v190);
        v257.location = v161;
        v257.length = v163;
        v191 = NSUnionRange(v256, v257);
        v192 = (void *)objc_msgSend_initWithString_score_alignmentScore_activationRange_terminatingCharacter_(v175, (const char *)v191.length, (uint64_t)v179, (uint64_t)v183, v187, v191.location, v191.length, &stru_1E60CE768);
        objc_msgSend_replaceObjectAtIndex_withObject_(v254, v193, v174 - 1, (uint64_t)v192);
LABEL_25:

        continue;
      }
    }
    v215 = *(_QWORD *)v251;
    v214 = *((_QWORD *)v251 + 1);
    if (*(_QWORD *)v251 == v214)
    {
      v219 = 0;
    }
    else
    {
      v216 = v214 - v215 - 64;
      if (v216 >= 0x200)
      {
        v220 = (v216 >> 6) + 1;
        v221 = v220 & 7;
        if ((v220 & 7) == 0)
          v221 = 8;
        v222 = v220 - v221;
        v218 = v215 + (v222 << 6);
        v223 = v215 + 312;
        v224 = 0uLL;
        v225 = 0uLL;
        do
        {
          v226.i64[0] = vzip1q_s32(*(int32x4_t *)(v223 - 256), *(int32x4_t *)(v223 - 192)).u64[0];
          v226.i64[1] = vextq_s8(*(int8x16_t *)(v223 - 128), (int8x16_t)vzip1q_s32(*(int32x4_t *)(v223 - 128), *(int32x4_t *)(v223 - 64)), 8uLL).i64[1];
          v227.i64[0] = vzip1q_s32(*(int32x4_t *)v223, *(int32x4_t *)(v223 + 64)).u64[0];
          v227.i64[1] = vextq_s8(*(int8x16_t *)(v223 + 128), (int8x16_t)vzip1q_s32(*(int32x4_t *)(v223 + 128), *(int32x4_t *)(v223 + 192)), 8uLL).i64[1];
          v224 = vaddq_s32(v224, v226);
          v225 = vaddq_s32(v225, v227);
          v223 += 512;
          v222 -= 8;
        }
        while (v222);
        v217 = vaddvq_s32(vaddq_s32(v225, v224));
      }
      else
      {
        v217 = 0;
        v218 = *(_QWORD *)v251;
      }
      do
      {
        v217 += *(_DWORD *)(v218 + 56);
        v218 += 64;
      }
      while (v218 != v214);
      v219 = v217;
    }
    v228 = [CVNLPTextDecodingResultCandidate alloc];
    v229 = exp(v251[3] / (double)v219);
    v230 = exp(v251[4] / (double)v219);
    v233 = (void *)objc_msgSend_initWithTokens_score_activationScore_(v228, v231, (uint64_t)v254, v232, v229, (double)v230);
    objc_msgSend_addObject_(v247, v234, (uint64_t)v233, v235);

    v251 += 5;
  }
  while (v251 != (double *)v246);
LABEL_44:
  objc_msgSend_sortDescriptorWithKey_ascending_(MEMORY[0x1E0CB3928], v9, (uint64_t)CFSTR("score"), 0);
  v236 = (void *)objc_claimAutoreleasedReturnValue();
  v255[0] = v236;
  objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E0C99D20], v237, (uint64_t)v255, 1);
  v238 = (void *)objc_claimAutoreleasedReturnValue();
  objc_msgSend_sortUsingDescriptors_(v247, v239, (uint64_t)v238, v240);

  v241 = [CVNLPTextDecodingResult alloc];
  v244 = (void *)objc_msgSend_initWithCandidates_(v241, v242, (uint64_t)v247, v243);

  return v244;
}

void sub_1B0397814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16)
{
  void *v16;
  void *v17;
  void *v18;

  _Unwind_Resume(a1);
}

void CVNLPLogGeneralFault(void *a1)
{
  id v1;
  NSObject *v2;
  int v3;
  id v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v1 = a1;
  if (qword_1EEEB2D28 != -1)
    dispatch_once(&qword_1EEEB2D28, &unk_1E60CDA48);
  v2 = (id)qword_1EEEB2CF8[0];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
  {
    v3 = 138412290;
    v4 = v1;
    _os_log_impl(&dword_1B02D2000, v2, OS_LOG_TYPE_FAULT, "%@", (uint8_t *)&v3, 0xCu);
  }

}

void CFArrayAppendValue(CFMutableArrayRef theArray, const void *value)
{
  MEMORY[0x1E0C97CF8](theArray, value);
}

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void **values, CFIndex numValues, const CFArrayCallBacks *callBacks)
{
  return (CFArrayRef)MEMORY[0x1E0C97D20](allocator, values, numValues, callBacks);
}

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks *callBacks)
{
  return (CFMutableArrayRef)MEMORY[0x1E0C97D38](allocator, capacity, callBacks);
}

CFIndex CFArrayGetCount(CFArrayRef theArray)
{
  return MEMORY[0x1E0C97D60](theArray);
}

CFTypeID CFArrayGetTypeID(void)
{
  return MEMORY[0x1E0C97D90]();
}

const void *__cdecl CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx)
{
  return (const void *)MEMORY[0x1E0C97D98](theArray, idx);
}

CFTypeID CFBooleanGetTypeID(void)
{
  return MEMORY[0x1E0C97FC8]();
}

Boolean CFBooleanGetValue(CFBooleanRef BOOLean)
{
  return MEMORY[0x1E0C97FE0](BOOLean);
}

Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void *key)
{
  return MEMORY[0x1E0C98518](theDict, key);
}

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void **keys, const void **values, CFIndex numValues, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98530](allocator, keys, values, numValues, keyCallBacks, valueCallBacks);
}

CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict)
{
  return (CFDictionaryRef)MEMORY[0x1E0C98538](allocator, theDict);
}

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks *keyCallBacks, const CFDictionaryValueCallBacks *valueCallBacks)
{
  return (CFMutableDictionaryRef)MEMORY[0x1E0C98550](allocator, capacity, keyCallBacks, valueCallBacks);
}

CFIndex CFDictionaryGetCount(CFDictionaryRef theDict)
{
  return MEMORY[0x1E0C98570](theDict);
}

void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void **keys, const void **values)
{
  MEMORY[0x1E0C985A0](theDict, keys, values);
}

CFTypeID CFDictionaryGetTypeID(void)
{
  return MEMORY[0x1E0C985A8]();
}

const void *__cdecl CFDictionaryGetValue(CFDictionaryRef theDict, const void *key)
{
  return (const void *)MEMORY[0x1E0C985B8](theDict, key);
}

void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void *key, const void *value)
{
  MEMORY[0x1E0C98610](theDict, key, value);
}

CFTypeID CFGetTypeID(CFTypeRef cf)
{
  return MEMORY[0x1E0C98738](cf);
}

CFLocaleIdentifier CFLocaleGetIdentifier(CFLocaleRef locale)
{
  return (CFLocaleIdentifier)MEMORY[0x1E0C987D8](locale);
}

CFTypeID CFLocaleGetTypeID(void)
{
  return MEMORY[0x1E0C987F8]();
}

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void *valuePtr)
{
  return (CFNumberRef)MEMORY[0x1E0C98928](allocator, theType, valuePtr);
}

CFNumberType CFNumberGetType(CFNumberRef number)
{
  return MEMORY[0x1E0C989A8](number);
}

CFTypeID CFNumberGetTypeID(void)
{
  return MEMORY[0x1E0C989B8]();
}

Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void *valuePtr)
{
  return MEMORY[0x1E0C989C0](number, theType, valuePtr);
}

void CFRelease(CFTypeRef cf)
{
  MEMORY[0x1E0C98BC0](cf);
}

CFTypeRef CFRetain(CFTypeRef cf)
{
  return (CFTypeRef)MEMORY[0x1E0C98BD0](cf);
}

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions)
{
  return MEMORY[0x1E0C98F10](theString1, theString2, compareOptions);
}

CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8 *bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation)
{
  return (CFStringRef)MEMORY[0x1E0C98FB8](alloc, bytes, numBytes, *(_QWORD *)&encoding, isExternalRepresentation);
}

CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8 *buffer, CFIndex maxBufLen, CFIndex *usedBufLen)
{
  return MEMORY[0x1E0C99080](theString, range.location, range.length, *(_QWORD *)&encoding, lossByte, isExternalRepresentation, buffer, maxBufLen);
}

const char *__cdecl CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding)
{
  return (const char *)MEMORY[0x1E0C990A0](theString, *(_QWORD *)&encoding);
}

CFIndex CFStringGetLength(CFStringRef theString)
{
  return MEMORY[0x1E0C99100](theString);
}

CFTypeID CFStringGetTypeID(void)
{
  return MEMORY[0x1E0C99170]();
}

CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle)
{
  return (CFStringRef)MEMORY[0x1E0C992D8](anURL, pathStyle);
}

CFURLRef CFURLCreateWithBytes(CFAllocatorRef allocator, const UInt8 *URLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL)
{
  return (CFURLRef)MEMORY[0x1E0C99418](allocator, URLBytes, length, *(_QWORD *)&encoding, baseURL);
}

CFTypeID CFURLGetTypeID(void)
{
  return MEMORY[0x1E0C994B8]();
}

CGContextRef CGBitmapContextCreate(void *data, size_t width, size_t height, size_t bitsPerComponent, size_t bytesPerRow, CGColorSpaceRef space, uint32_t bitmapInfo)
{
  return (CGContextRef)MEMORY[0x1E0C9BB10](data, width, height, bitsPerComponent, bytesPerRow, space, *(_QWORD *)&bitmapInfo);
}

CGImageRef CGBitmapContextCreateImage(CGContextRef context)
{
  return (CGImageRef)MEMORY[0x1E0C9BB20](context);
}

CGColorSpaceRef CGColorSpaceCreateDeviceRGB(void)
{
  return (CGColorSpaceRef)MEMORY[0x1E0C9BDF0]();
}

void CGColorSpaceRelease(CGColorSpaceRef space)
{
  MEMORY[0x1E0C9BF30](space);
}

void CGContextDrawImage(CGContextRef c, CGRect rect, CGImageRef image)
{
  MEMORY[0x1E0C9C170](c, image, (__n128)rect.origin, *(__n128 *)&rect.origin.y, (__n128)rect.size, *(__n128 *)&rect.size.height);
}

void CGContextRelease(CGContextRef c)
{
  MEMORY[0x1E0C9C340](c);
}

void CGContextSetInterpolationQuality(CGContextRef c, CGInterpolationQuality quality)
{
  MEMORY[0x1E0C9C458](c, *(_QWORD *)&quality);
}

size_t CGImageGetHeight(CGImageRef image)
{
  return MEMORY[0x1E0C9CC60](image);
}

size_t CGImageGetWidth(CGImageRef image)
{
  return MEMORY[0x1E0C9CCD0](image);
}

void CGImageRelease(CGImageRef image)
{
  MEMORY[0x1E0C9CDA0](image);
}

Float64 CMTimeGetSeconds(CMTime *time)
{
  Float64 result;

  MEMORY[0x1E0C9F310](time);
  return result;
}

CMTime *__cdecl CMTimeMake(CMTime *__return_ptr retstr, int64_t value, int32_t timescale)
{
  return (CMTime *)MEMORY[0x1E0C9F318](retstr, value, *(_QWORD *)&timescale);
}

CVReturn CVPixelBufferCreate(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8A98](allocator, width, height, *(_QWORD *)&pixelFormatType, pixelBufferAttributes, pixelBufferOut);
}

CVReturn CVPixelBufferCreateWithBytes(CFAllocatorRef allocator, size_t width, size_t height, OSType pixelFormatType, void *baseAddress, size_t bytesPerRow, CVPixelBufferReleaseBytesCallback releaseCallback, void *releaseRefCon, CFDictionaryRef pixelBufferAttributes, CVPixelBufferRef *pixelBufferOut)
{
  return MEMORY[0x1E0CA8AB8](allocator, width, height, *(_QWORD *)&pixelFormatType, baseAddress, bytesPerRow, releaseCallback, releaseRefCon);
}

void *__cdecl CVPixelBufferGetBaseAddress(CVPixelBufferRef pixelBuffer)
{
  return (void *)MEMORY[0x1E0CA8AE0](pixelBuffer);
}

size_t CVPixelBufferGetBytesPerRow(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8AF8](pixelBuffer);
}

size_t CVPixelBufferGetDataSize(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B08](pixelBuffer);
}

size_t CVPixelBufferGetHeight(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B20](pixelBuffer);
}

OSType CVPixelBufferGetPixelFormatType(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B38](pixelBuffer);
}

size_t CVPixelBufferGetWidth(CVPixelBufferRef pixelBuffer)
{
  return MEMORY[0x1E0CA8B50](pixelBuffer);
}

CVReturn CVPixelBufferLockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags lockFlags)
{
  return MEMORY[0x1E0CA8B70](pixelBuffer, lockFlags);
}

void CVPixelBufferRelease(CVPixelBufferRef texture)
{
  MEMORY[0x1E0CA8BF0](texture);
}

CVPixelBufferRef CVPixelBufferRetain(CVPixelBufferRef texture)
{
  return (CVPixelBufferRef)MEMORY[0x1E0CA8BF8](texture);
}

CVReturn CVPixelBufferUnlockBaseAddress(CVPixelBufferRef pixelBuffer, CVPixelBufferLockFlags unlockFlags)
{
  return MEMORY[0x1E0CA8C00](pixelBuffer, unlockFlags);
}

uint64_t LDEnumerateAssetDataItems()
{
  return MEMORY[0x1E0D43820]();
}

uint64_t LMLanguageModelConditionalProbability()
{
  return MEMORY[0x1E0D42C60]();
}

uint64_t LMLanguageModelCreate()
{
  return MEMORY[0x1E0D42C78]();
}

uint64_t LMLanguageModelGetTokenIDForString()
{
  return MEMORY[0x1E0D42CC0]();
}

uint64_t LMLanguageModelRelease()
{
  return MEMORY[0x1E0D42D00]();
}

uint64_t LMStreamTokenizerCreate()
{
  return MEMORY[0x1E0D42DF8]();
}

uint64_t LMStreamTokenizerPushBytes()
{
  return MEMORY[0x1E0D42E08]();
}

uint64_t LMStreamTokenizerRelease()
{
  return MEMORY[0x1E0D42E10]();
}

uint64_t LXCursorConditionalProbability()
{
  return MEMORY[0x1E0D43530]();
}

uint64_t LXCursorCreateByAdvancing()
{
  return MEMORY[0x1E0D43540]();
}

uint64_t LXLexiconCreate()
{
  return MEMORY[0x1E0D43690]();
}

uint64_t LXLexiconCreateRootCursor()
{
  return MEMORY[0x1E0D436A0]();
}

uint64_t MGGetBoolAnswer()
{
  return MEMORY[0x1E0DE2B50]();
}

uint64_t MRLNeuralNetworkCopyInputNamesAndDimensions()
{
  return MEMORY[0x1E0D50478]();
}

uint64_t MRLNeuralNetworkCopyOutputNamesAndDimensions()
{
  return MEMORY[0x1E0D50480]();
}

uint64_t MRLNeuralNetworkCopyStates()
{
  return MEMORY[0x1E0D50488]();
}

uint64_t MRLNeuralNetworkCreate()
{
  return MEMORY[0x1E0D50498]();
}

uint64_t MRLNeuralNetworkGetOutput()
{
  return MEMORY[0x1E0D504A8]();
}

uint64_t MRLNeuralNetworkGetOutputDimension()
{
  return MEMORY[0x1E0D504B0]();
}

uint64_t MRLNeuralNetworkPredict()
{
  return MEMORY[0x1E0D504C0]();
}

uint64_t MRLNeuralNetworkSetInputTensor()
{
  return MEMORY[0x1E0D504D8]();
}

uint64_t MRLNeuralNetworkTensorAppendData()
{
  return MEMORY[0x1E0D504E0]();
}

uint64_t MRLNeuralNetworkTensorCreate()
{
  return MEMORY[0x1E0D504E8]();
}

void NSLog(NSString *format, ...)
{
  MEMORY[0x1E0CB2D88](format);
}

NSString *__cdecl NSStringFromClass(Class aClass)
{
  return (NSString *)MEMORY[0x1E0CB3200](aClass);
}

NSString *__cdecl NSStringFromSelector(SEL aSelector)
{
  return (NSString *)MEMORY[0x1E0CB3230](aSelector);
}

NSRange NSUnionRange(NSRange range1, NSRange range2)
{
  NSUInteger v2;
  NSUInteger v3;
  NSRange result;

  v2 = MEMORY[0x1E0CB3400](range1.location, range1.length, range2.location, range2.length);
  result.length = v3;
  result.location = v2;
  return result;
}

OSStatus VTPixelTransferSessionCreate(CFAllocatorRef allocator, VTPixelTransferSessionRef *pixelTransferSessionOut)
{
  return MEMORY[0x1E0CECD18](allocator, pixelTransferSessionOut);
}

OSStatus VTPixelTransferSessionTransferImage(VTPixelTransferSessionRef session, CVPixelBufferRef sourceBuffer, CVPixelBufferRef destinationBuffer)
{
  return MEMORY[0x1E0CECD38](session, sourceBuffer, destinationBuffer);
}

void _Block_object_dispose(const void *a1, const int a2)
{
  MEMORY[0x1E0C80948](a1, *(_QWORD *)&a2);
}

uint64_t _CFRuntimeCreateInstance()
{
  return MEMORY[0x1E0C9A498]();
}

uint64_t _CFRuntimeRegisterClass()
{
  return MEMORY[0x1E0C9A4B0]();
}

void _Unwind_Resume(_Unwind_Exception *exception_object)
{
  MEMORY[0x1E0C80A20](exception_object);
}

const char *__cdecl std::runtime_error::what(const std::runtime_error *this)
{
  return (const char *)MEMORY[0x1E0DE4190](this);
}

int std::string::compare(const std::string *this, const std::string::value_type *__s)
{
  return MEMORY[0x1E0DE41D8](this, __s);
}

uint64_t std::stringbuf::str()
{
  return MEMORY[0x1E0DE41F0]();
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__filename(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4208](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__parent_path(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4218](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::__fs::filesystem::path::__string_view std::__fs::filesystem::path::__root_directory(const std::__fs::filesystem::path *this)
{
  const std::string_view::value_type *v1;
  std::basic_string_view<_CharT, _Traits>::size_type v2;
  std::__fs::filesystem::path::__string_view result;

  v1 = (const std::string_view::value_type *)MEMORY[0x1E0DE4220](this);
  result.__size_ = v2;
  result.__data_ = v1;
  return result;
}

std::string *__cdecl std::locale::name(std::string *__return_ptr retstr, const std::locale *this)
{
  return (std::string *)MEMORY[0x1E0DE4240](retstr, this);
}

const std::locale::facet *__cdecl std::locale::use_facet(const std::locale *this, std::locale::id *a2)
{
  return (const std::locale::facet *)MEMORY[0x1E0DE4248](this, a2);
}

std::locale std::ios_base::getloc(const std::ios_base *this)
{
  return (std::locale)MEMORY[0x1E0DE4258](this);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const char *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4288](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::string *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4290](this, a2);
}

std::logic_error *__cdecl std::logic_error::logic_error(std::logic_error *this, const std::logic_error *a2)
{
  return (std::logic_error *)MEMORY[0x1E0DE4298](this, a2);
}

void std::out_of_range::~out_of_range(std::out_of_range *this)
{
  MEMORY[0x1E0DE42E0](this);
}

{
  MEMORY[0x1E0DE42E8](this);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const char *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4308](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4320](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::string *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4310](this, a2);
}

{
  return (std::runtime_error *)MEMORY[0x1E0DE4328](this, a2);
}

std::runtime_error *__cdecl std::runtime_error::runtime_error(std::runtime_error *this, const std::runtime_error *a2)
{
  return (std::runtime_error *)MEMORY[0x1E0DE4318](this, a2);
}

void std::runtime_error::~runtime_error(std::runtime_error *this)
{
  MEMORY[0x1E0DE4338](this);
}

{
  MEMORY[0x1E0DE4340](this);
}

void std::invalid_argument::~invalid_argument(std::invalid_argument *this)
{
  MEMORY[0x1E0DE4368](this);
}

std::bad_array_new_length *__cdecl std::bad_array_new_length::bad_array_new_length(std::bad_array_new_length *this)
{
  return (std::bad_array_new_length *)MEMORY[0x1E0DE4388](this);
}

std::regex_error *__cdecl std::regex_error::regex_error(std::regex_error *this, std::regex_constants::error_type __ecode)
{
  return (std::regex_error *)MEMORY[0x1E0DE43B0](this, *(_QWORD *)&__ecode);
}

size_t std::__next_prime(size_t __n)
{
  return MEMORY[0x1E0DE43E8](__n);
}

std::string *__cdecl std::string::erase(std::string *this, std::string::size_type __pos, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4408](this, __pos, __n);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4420](this, __s);
}

std::string *__cdecl std::string::append(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4428](this, __s, __n);
}

std::string *__cdecl std::string::append(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE4438](this, __n, __c);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4440](this, __s);
}

std::string *__cdecl std::string::assign(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4448](this, __s, __n);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s)
{
  return (std::string *)MEMORY[0x1E0DE4468](this, __pos, __s);
}

std::string *__cdecl std::string::insert(std::string *this, std::string::size_type __pos, const std::string::value_type *__s, std::string::size_type __n)
{
  return (std::string *)MEMORY[0x1E0DE4470](this, __pos, __s, __n);
}

void std::string::resize(std::string *this, std::string::size_type __n, std::string::value_type __c)
{
  MEMORY[0x1E0DE4480](this, __n, __c);
}

void std::string::reserve(std::string *this, std::string::size_type __requested_capacity)
{
  MEMORY[0x1E0DE44A8](this, __requested_capacity);
}

void std::string::__grow_by(std::string *this, std::string::size_type __old_cap, std::string::size_type __delta_cap, std::string::size_type __old_sz, std::string::size_type __n_copy, std::string::size_type __n_del, std::string::size_type __n_add)
{
  MEMORY[0x1E0DE44B0](this, __old_cap, __delta_cap, __old_sz, __n_copy, __n_del, __n_add);
}

void std::string::push_back(std::string *this, std::string::value_type __c)
{
  MEMORY[0x1E0DE44B8](this, __c);
}

std::string *__cdecl std::string::operator=(std::string *this, const std::string *__str)
{
  return (std::string *)MEMORY[0x1E0DE44D8](this, __str);
}

std::string *__cdecl std::string::operator=(std::string *this, std::string::value_type __c)
{
  return (std::string *)MEMORY[0x1E0DE44E0](this, __c);
}

uint64_t std::filebuf::open()
{
  return MEMORY[0x1E0DE4590]();
}

uint64_t std::filebuf::basic_filebuf()
{
  return MEMORY[0x1E0DE45A8]();
}

uint64_t std::filebuf::~filebuf()
{
  return MEMORY[0x1E0DE45B0]();
}

uint64_t std::istream::read()
{
  return MEMORY[0x1E0DE45D0]();
}

uint64_t std::istream::seekg()
{
  return MEMORY[0x1E0DE45E8]();
}

uint64_t std::istream::tellg()
{
  return MEMORY[0x1E0DE45F0]();
}

uint64_t std::istream::sentry::sentry()
{
  return MEMORY[0x1E0DE4608]();
}

uint64_t std::istream::~istream()
{
  return MEMORY[0x1E0DE4628]();
}

uint64_t std::istream::operator>>()
{
  return MEMORY[0x1E0DE4648]();
}

uint64_t std::ostream::put()
{
  return MEMORY[0x1E0DE4698]();
}

uint64_t std::ostream::flush()
{
  return MEMORY[0x1E0DE46A0]();
}

uint64_t std::ostream::sentry::sentry()
{
  return MEMORY[0x1E0DE46B0]();
}

uint64_t std::ostream::sentry::~sentry()
{
  return MEMORY[0x1E0DE46B8]();
}

uint64_t std::ostream::~ostream()
{
  return MEMORY[0x1E0DE46C8]();
}

uint64_t std::ostream::operator<<()
{
  return MEMORY[0x1E0DE46E0]();
}

{
  return MEMORY[0x1E0DE46E8]();
}

{
  return MEMORY[0x1E0DE46F8]();
}

{
  return MEMORY[0x1E0DE4700]();
}

{
  return MEMORY[0x1E0DE4708]();
}

{
  return MEMORY[0x1E0DE4718]();
}

std::random_device *__cdecl std::random_device::random_device(std::random_device *this, const std::string *__token)
{
  return (std::random_device *)MEMORY[0x1E0DE4770](this, __token);
}

void std::random_device::~random_device(std::random_device *this)
{
  MEMORY[0x1E0DE4778](this);
}

std::random_device::result_type std::random_device::operator()(std::random_device *this)
{
  return MEMORY[0x1E0DE4780](this);
}

uint64_t std::iostream::~basic_iostream()
{
  return MEMORY[0x1E0DE47A8]();
}

std::regex_traits<char>::char_class_type std::__get_classname(const char *__s, BOOL __icase)
{
  return MEMORY[0x1E0DE47C8](__s, __icase);
}

uint64_t std::streambuf::basic_streambuf()
{
  return MEMORY[0x1E0DE47E0]();
}

uint64_t std::streambuf::~streambuf()
{
  return MEMORY[0x1E0DE47E8]();
}

void std::__shared_weak_count::__release_weak(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE48F0](this);
}

void std::__shared_weak_count::~__shared_weak_count(std::__shared_weak_count *this)
{
  MEMORY[0x1E0DE4900](this);
}

std::string *__cdecl std::__get_collation_name(std::string *__return_ptr retstr, const char *__s)
{
  return (std::string *)MEMORY[0x1E0DE4910](retstr, __s);
}

std::__fs::filesystem::path *__cdecl std::__fs::filesystem::__canonical(std::__fs::filesystem::path *__return_ptr retstr, const std::__fs::filesystem::path *a2, std::error_code *__ec)
{
  return (std::__fs::filesystem::path *)MEMORY[0x1E0DE4968](retstr, a2, __ec);
}

std::__fs::filesystem::file_status std::__fs::filesystem::__status(const std::__fs::filesystem::path *a1, std::error_code *__ec)
{
  return (std::__fs::filesystem::file_status)MEMORY[0x1E0DE4A48](a1, __ec);
}

void std::mutex::lock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA0](this);
}

void std::mutex::unlock(std::mutex *this)
{
  MEMORY[0x1E0DE4AA8](this);
}

void std::mutex::~mutex(std::mutex *this)
{
  MEMORY[0x1E0DE4AB8](this);
}

std::locale *__cdecl std::locale::locale(std::locale *this, const std::locale *a2)
{
  return (std::locale *)MEMORY[0x1E0DE4B88](this, a2);
}

std::locale *__cdecl std::locale::locale(std::locale *this)
{
  return (std::locale *)MEMORY[0x1E0DE4B90](this);
}

void std::locale::~locale(std::locale *this)
{
  MEMORY[0x1E0DE4B98](this);
}

void std::ios_base::__set_badbit_and_consider_rethrow(std::ios_base *this)
{
  MEMORY[0x1E0DE4C50](this);
}

void std::ios_base::init(std::ios_base *this, void *__sb)
{
  MEMORY[0x1E0DE4C68](this, __sb);
}

void std::ios_base::clear(std::ios_base *this, std::ios_base::iostate __state)
{
  MEMORY[0x1E0DE4C80](this, *(_QWORD *)&__state);
}

uint64_t std::ios::~ios()
{
  return MEMORY[0x1E0DE4D28]();
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D58](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unsigned int __val)
{
  return (std::string *)MEMORY[0x1E0DE4D60](retstr, *(_QWORD *)&__val);
}

std::string *__cdecl std::to_string(std::string *__return_ptr retstr, unint64_t __val)
{
  return (std::string *)MEMORY[0x1E0DE4D70](retstr, __val);
}

uint64_t std::operator+<char>()
{
  return MEMORY[0x1E0DE4D88]();
}

void std::exception::~exception(std::exception *this)
{
  MEMORY[0x1E0DE4DD8](this);
}

void std::terminate(void)
{
  MEMORY[0x1E0DE4E18]();
}

uint64_t operator delete[]()
{
  return off_1E60CA3B0();
}

void operator delete(void *__p)
{
  off_1E60CA3B8(__p);
}

void operator delete(void *__p, std::align_val_t a2)
{
  off_1E60CA3C0(__p, a2);
}

uint64_t operator delete()
{
  return off_1E60CA3C8();
}

void *__cdecl operator new[](size_t __sz)
{
  return (void *)off_1E60CA3D0(__sz);
}

uint64_t operator new[]()
{
  return off_1E60CA3D8();
}

void *__cdecl operator new(size_t __sz)
{
  return (void *)off_1E60CA3E0(__sz);
}

void *__cdecl operator new(size_t __sz, std::align_val_t a2)
{
  return (void *)off_1E60CA3E8(__sz, a2);
}

uint64_t operator new()
{
  return off_1E60CA3F0();
}

void __assert_rtn(const char *a1, const char *a2, int a3, const char *a4)
{
  MEMORY[0x1E0C80A58](a1, a2, *(_QWORD *)&a3, a4);
}

void *__cxa_allocate_exception(size_t thrown_size)
{
  return (void *)MEMORY[0x1E0DE5068](thrown_size);
}

int __cxa_atexit(void (*lpfunc)(void *), void *obj, void *lpdso_handle)
{
  return MEMORY[0x1E0C80A98](lpfunc, obj, lpdso_handle);
}

void *__cxa_begin_catch(void *a1)
{
  return (void *)MEMORY[0x1E0DE5080](a1);
}

void __cxa_end_catch(void)
{
  MEMORY[0x1E0DE5098]();
}

void __cxa_free_exception(void *a1)
{
  MEMORY[0x1E0DE50A0](a1);
}

void __cxa_guard_abort(__guard *a1)
{
  MEMORY[0x1E0DE50B0](a1);
}

int __cxa_guard_acquire(__guard *a1)
{
  return MEMORY[0x1E0DE50B8](a1);
}

void __cxa_guard_release(__guard *a1)
{
  MEMORY[0x1E0DE50C0](a1);
}

void __cxa_rethrow(void)
{
  MEMORY[0x1E0DE50D0]();
}

void __cxa_throw(void *a1, struct type_info *lptinfo, void (*a3)(void *))
{
  MEMORY[0x1E0DE50D8](a1, lptinfo, a3);
}

int *__error(void)
{
  return (int *)MEMORY[0x1E0C80AC0]();
}

__darwin_ct_rune_t __tolower(__darwin_ct_rune_t a1)
{
  return MEMORY[0x1E0C80C70](*(_QWORD *)&a1);
}

void _os_log_error_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81038](dso, log, type, format, buf, *(_QWORD *)&size);
}

void _os_log_impl(void *dso, os_log_t log, os_log_type_t type, const char *format, uint8_t *buf, uint32_t size)
{
  MEMORY[0x1E0C81048](dso, log, type, format, buf, *(_QWORD *)&size);
}

uint64_t _sl_dlopen()
{
  return MEMORY[0x1E0DA88F0]();
}

uint64_t abort_report_np()
{
  return MEMORY[0x1E0C813B0]();
}

void bzero(void *a1, size_t a2)
{
  MEMORY[0x1E0C81758](a1, a2);
}

uint64_t c_network_get_input_names()
{
  return MEMORY[0x1E0D1F880]();
}

uint64_t c_network_get_output_names()
{
  return MEMORY[0x1E0D1F898]();
}

int close(int a1)
{
  return MEMORY[0x1E0C82688](*(_QWORD *)&a1);
}

void dispatch_async(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82C00](queue, block);
}

void dispatch_group_async(dispatch_group_t group, dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82D10](group, queue, block);
}

dispatch_group_t dispatch_group_create(void)
{
  return (dispatch_group_t)MEMORY[0x1E0C82D20]();
}

void dispatch_group_enter(dispatch_group_t group)
{
  MEMORY[0x1E0C82D28](group);
}

void dispatch_group_leave(dispatch_group_t group)
{
  MEMORY[0x1E0C82D30](group);
}

intptr_t dispatch_group_wait(dispatch_group_t group, dispatch_time_t timeout)
{
  return MEMORY[0x1E0C82D48](group, timeout);
}

void dispatch_once(dispatch_once_t *predicate, dispatch_block_t block)
{
  MEMORY[0x1E0C82E08](predicate, block);
}

dispatch_queue_attr_t dispatch_queue_attr_make_with_qos_class(dispatch_queue_attr_t attr, dispatch_qos_class_t qos_class, int relative_priority)
{
  return (dispatch_queue_attr_t)MEMORY[0x1E0C82E38](attr, *(_QWORD *)&qos_class, *(_QWORD *)&relative_priority);
}

dispatch_queue_t dispatch_queue_create(const char *label, dispatch_queue_attr_t attr)
{
  return (dispatch_queue_t)MEMORY[0x1E0C82E48](label, attr);
}

void dispatch_sync(dispatch_queue_t queue, dispatch_block_t block)
{
  MEMORY[0x1E0C82F90](queue, block);
}

uint64_t espresso_buffer_get_rank()
{
  return MEMORY[0x1E0D1FEE0]();
}

uint64_t espresso_buffer_pack_tensor_shape()
{
  return MEMORY[0x1E0D1FEE8]();
}

uint64_t espresso_buffer_unpack_tensor_shape()
{
  return MEMORY[0x1E0D1FF00]();
}

uint64_t espresso_context_destroy()
{
  return MEMORY[0x1E0D1FF10]();
}

uint64_t espresso_create_context()
{
  return MEMORY[0x1E0D1FF38]();
}

uint64_t espresso_create_plan()
{
  return MEMORY[0x1E0D1FF40]();
}

uint64_t espresso_get_output_blob_name()
{
  return MEMORY[0x1E0D1FFA8]();
}

uint64_t espresso_get_status_string()
{
  return MEMORY[0x1E0D1FFB0]();
}

uint64_t espresso_network_bind_buffer()
{
  return MEMORY[0x1E0D1FFB8]();
}

uint64_t espresso_network_bind_cvpixelbuffer()
{
  return MEMORY[0x1E0D1FFD0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_argb8()
{
  return MEMORY[0x1E0D1FFE8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_bgra8()
{
  return MEMORY[0x1E0D1FFF0]();
}

uint64_t espresso_network_bind_input_vimagebuffer_planar8()
{
  return MEMORY[0x1E0D1FFF8]();
}

uint64_t espresso_network_bind_input_vimagebuffer_rgba8()
{
  return MEMORY[0x1E0D20000]();
}

uint64_t espresso_network_change_input_blob_shapes_seq_rank()
{
  return MEMORY[0x1E0D20028]();
}

uint64_t espresso_network_declare_output()
{
  return MEMORY[0x1E0D20040]();
}

uint64_t espresso_network_query_blob_dimensions()
{
  return MEMORY[0x1E0D20060]();
}

uint64_t espresso_network_query_blob_shape()
{
  return MEMORY[0x1E0D20070]();
}

uint64_t espresso_plan_add_network()
{
  return MEMORY[0x1E0D200B0]();
}

uint64_t espresso_plan_build()
{
  return MEMORY[0x1E0D200C8]();
}

uint64_t espresso_plan_build_clean()
{
  return MEMORY[0x1E0D200D8]();
}

uint64_t espresso_plan_destroy()
{
  return MEMORY[0x1E0D200E8]();
}

uint64_t espresso_plan_execute_sync()
{
  return MEMORY[0x1E0D20100]();
}

uint64_t espresso_plan_get_error_info()
{
  return MEMORY[0x1E0D20110]();
}

uint64_t espresso_plan_set_priority()
{
  return MEMORY[0x1E0D20130]();
}

uint64_t espresso_plan_share_intermediate_buffer()
{
  return MEMORY[0x1E0D20138]();
}

uint64_t espresso_set_image_preprocessing_params()
{
  return MEMORY[0x1E0D20160]();
}

void exit(int a1)
{
  MEMORY[0x1E0C83278](*(_QWORD *)&a1);
}

long double exp(long double __x)
{
  long double result;

  MEMORY[0x1E0C83280](__x);
  return result;
}

long double exp2(long double __x)
{
  long double result;

  MEMORY[0x1E0C83288](__x);
  return result;
}

float expf(float a1)
{
  float result;

  MEMORY[0x1E0C83298](a1);
  return result;
}

long double expm1(long double __x)
{
  long double result;

  MEMORY[0x1E0C832A0](__x);
  return result;
}

int fflush(FILE *a1)
{
  return MEMORY[0x1E0C83370](a1);
}

int fprintf(FILE *a1, const char *a2, ...)
{
  return MEMORY[0x1E0C83478](a1, a2);
}

void free(void *a1)
{
  MEMORY[0x1E0C834A8](a1);
}

int fstat(int a1, stat *a2)
{
  return MEMORY[0x1E0C83560](*(_QWORD *)&a1, a2);
}

lconv *localeconv(void)
{
  return (lconv *)MEMORY[0x1E0C83B98]();
}

long double log(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BB8](__x);
  return result;
}

long double log1p(long double __x)
{
  long double result;

  MEMORY[0x1E0C83BD0](__x);
  return result;
}

float log1pf(float a1)
{
  float result;

  MEMORY[0x1E0C83BD8](a1);
  return result;
}

float logf(float a1)
{
  float result;

  MEMORY[0x1E0C83C00](a1);
  return result;
}

int malloc_type_posix_memalign(void **memptr, size_t alignment, size_t size, malloc_type_id_t type_id)
{
  return MEMORY[0x1E0C83F08](memptr, alignment, size, type_id);
}

void *__cdecl memchr(void *__s, int __c, size_t __n)
{
  return (void *)MEMORY[0x1E0C84070](__s, *(_QWORD *)&__c, __n);
}

int memcmp(const void *__s1, const void *__s2, size_t __n)
{
  return MEMORY[0x1E0C84078](__s1, __s2, __n);
}

void *__cdecl memcpy(void *__dst, const void *__src, size_t __n)
{
  return (void *)MEMORY[0x1E0C84088](__dst, __src, __n);
}

void *__cdecl memmove(void *__dst, const void *__src, size_t __len)
{
  return (void *)MEMORY[0x1E0C84098](__dst, __src, __len);
}

void *__cdecl memset(void *__b, int __c, size_t __len)
{
  return (void *)MEMORY[0x1E0C840B0](__b, *(_QWORD *)&__c, __len);
}

void memset_pattern16(void *__b, const void *__pattern16, size_t __len)
{
  MEMORY[0x1E0C840B8](__b, __pattern16, __len);
}

void *__cdecl mmap(void *a1, size_t a2, int a3, int a4, int a5, off_t a6)
{
  return (void *)MEMORY[0x1E0C841D8](a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4, *(_QWORD *)&a5, a6);
}

int munmap(void *a1, size_t a2)
{
  return MEMORY[0x1E0C84220](a1, a2);
}

id objc_alloc(Class a1)
{
  return (id)MEMORY[0x1E0DE7BA8](a1);
}

uint64_t objc_alloc_init()
{
  return MEMORY[0x1E0DE7BB8]();
}

id objc_autorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7BD0](a1);
}

void objc_autoreleasePoolPop(void *context)
{
  MEMORY[0x1E0DE7BD8](context);
}

void *objc_autoreleasePoolPush(void)
{
  return (void *)MEMORY[0x1E0DE7BE0]();
}

id objc_autoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7BE8](a1);
}

id objc_begin_catch(void *exc_buf)
{
  return (id)MEMORY[0x1E0DE7BF0](exc_buf);
}

uint64_t objc_claimAutoreleasedReturnValue()
{
  return MEMORY[0x1E0DE7BF8]();
}

void objc_destroyWeak(id *location)
{
  MEMORY[0x1E0DE7C60](location);
}

void objc_end_catch(void)
{
  MEMORY[0x1E0DE7C80]();
}

void objc_enumerationMutation(id obj)
{
  MEMORY[0x1E0DE7C90](obj);
}

void objc_exception_throw(id exception)
{
  MEMORY[0x1E0DE7CA0](exception);
}

Class objc_getClass(const char *name)
{
  return (Class)MEMORY[0x1E0DE7CB0](name);
}

id objc_getProperty(id self, SEL _cmd, ptrdiff_t offset, BOOL atomic)
{
  return (id)MEMORY[0x1E0DE7CD0](self, _cmd, offset, atomic);
}

id objc_loadWeakRetained(id *location)
{
  return (id)MEMORY[0x1E0DE7D08](location);
}

id objc_msgSendSuper2(objc_super *a1, SEL a2, ...)
{
  return (id)MEMORY[0x1E0DE7D30](a1, a2);
}

uint64_t objc_opt_class()
{
  return MEMORY[0x1E0DE7D38]();
}

uint64_t objc_opt_isKindOfClass()
{
  return MEMORY[0x1E0DE7D40]();
}

void objc_release(id a1)
{
  MEMORY[0x1E0DE7D78](a1);
}

id objc_retain(id a1)
{
  return (id)MEMORY[0x1E0DE7E50](a1);
}

id objc_retainAutorelease(id a1)
{
  return (id)MEMORY[0x1E0DE7E58](a1);
}

id objc_retainAutoreleaseReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E60](a1);
}

id objc_retainAutoreleasedReturnValue(id a1)
{
  return (id)MEMORY[0x1E0DE7E68](a1);
}

id objc_retainBlock(id a1)
{
  return (id)MEMORY[0x1E0DE7E70](a1);
}

void objc_storeStrong(id *location, id obj)
{
  MEMORY[0x1E0DE7FB0](location, obj);
}

id objc_storeWeak(id *location, id obj)
{
  return (id)MEMORY[0x1E0DE7FB8](location, obj);
}

int open(const char *a1, int a2, ...)
{
  return MEMORY[0x1E0C84480](a1, *(_QWORD *)&a2);
}

int openat_authenticated_np(int a1, const char *a2, int a3, int a4)
{
  return MEMORY[0x1E0C844A8](*(_QWORD *)&a1, a2, *(_QWORD *)&a3, *(_QWORD *)&a4);
}

os_log_t os_log_create(const char *subsystem, const char *category)
{
  return (os_log_t)MEMORY[0x1E0C84728](subsystem, category);
}

BOOL os_log_type_enabled(os_log_t oslog, os_log_type_t type)
{
  return MEMORY[0x1E0C84780](oslog, type);
}

uint64_t pc_session_add_metric()
{
  return MEMORY[0x1E0DE8148]();
}

uint64_t pc_session_begin()
{
  return MEMORY[0x1E0DE8160]();
}

uint64_t pc_session_create()
{
  return MEMORY[0x1E0DE8168]();
}

uint64_t pc_session_destroy()
{
  return MEMORY[0x1E0DE8180]();
}

uint64_t pc_session_end()
{
  return MEMORY[0x1E0DE8190]();
}

uint64_t pc_session_get_value()
{
  return MEMORY[0x1E0DE81A0]();
}

uint64_t pc_session_set_procpid()
{
  return MEMORY[0x1E0DE81B8]();
}

long double pow(long double __x, long double __y)
{
  long double result;

  MEMORY[0x1E0C84BB8](__x, __y);
  return result;
}

float powf(float a1, float a2)
{
  float result;

  MEMORY[0x1E0C84BC0](a1, a2);
  return result;
}

void *__cdecl pthread_getspecific(pthread_key_t a1)
{
  return (void *)MEMORY[0x1E0C84DC0](a1);
}

int pthread_key_create(pthread_key_t *a1, void (__cdecl *a2)(void *))
{
  return MEMORY[0x1E0C84DE0](a1, a2);
}

pthread_t pthread_self(void)
{
  return (pthread_t)MEMORY[0x1E0C84ED8]();
}

int pthread_setspecific(pthread_key_t a1, const void *a2)
{
  return MEMORY[0x1E0C84F18](a1, a2);
}

int rand(void)
{
  return MEMORY[0x1E0C84FB0]();
}

int snprintf(char *__str, size_t __size, const char *__format, ...)
{
  return MEMORY[0x1E0C85440](__str, __size, __format);
}

void srand(unsigned int a1)
{
  MEMORY[0x1E0C85478](*(_QWORD *)&a1);
}

int strcmp(const char *__s1, const char *__s2)
{
  return MEMORY[0x1E0C85520](__s1, __s2);
}

int strerror_r(int __errnum, char *__strerrbuf, size_t __buflen)
{
  return MEMORY[0x1E0C85550](*(_QWORD *)&__errnum, __strerrbuf, __buflen);
}

size_t strlen(const char *__s)
{
  return MEMORY[0x1E0C85578](__s);
}

double strtod(const char *a1, char **a2)
{
  double result;

  MEMORY[0x1E0C85618](a1, a2);
  return result;
}

uint64_t strtoll(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C85678](__str, __endptr, *(_QWORD *)&__base);
}

unint64_t strtoull(const char *__str, char **__endptr, int __base)
{
  return MEMORY[0x1E0C856A8](__str, __endptr, *(_QWORD *)&__base);
}

int8_t u_charType(UChar32 c)
{
  return MEMORY[0x1E0DE5978](*(_QWORD *)&c);
}

UBool u_isWhitespace(UChar32 c)
{
  return MEMORY[0x1E0DE5A10](*(_QWORD *)&c);
}

UChar32 u_tolower(UChar32 c)
{
  return MEMORY[0x1E0DE5B10](*(_QWORD *)&c);
}

uint64_t uscript_getScript()
{
  return MEMORY[0x1E0DE6898]();
}

vImage_Error vImagePermuteChannels_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, const uint8_t permuteMap[4], vImage_Flags flags)
{
  return MEMORY[0x1E0C8D520](src, dest, permuteMap, *(_QWORD *)&flags);
}

vImage_Error vImageScale_ARGB8888(const vImage_Buffer *src, const vImage_Buffer *dest, void *tempBuffer, vImage_Flags flags)
{
  return MEMORY[0x1E0C8D6E8](src, dest, tempBuffer, *(_QWORD *)&flags);
}

