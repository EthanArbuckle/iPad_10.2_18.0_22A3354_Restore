uint64_t partial apply for closure #1 in SportsResolver.makeRecommendation(entities:)@<X0>(_QWORD *a1@<X8>)
{
  return closure #1 in SportsResolver.makeRecommendation(entities:)(a1);
}

uint64_t outlined init with copy of Result<Recommendation<SportsItem>, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<Recommendation<SportsItem>, Error>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t dispatch thunk of SportsInferenceQuerying.makeRecommendation(entities:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t outlined init with take of Result<Recommendation<SportsItem>, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t FeatureFlag.isOn.getter()
{
  __int128 *v0;
  char v1;
  _QWORD v3[5];

  v3[3] = &type metadata for FeatureFlag;
  v3[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v3[0] = swift_allocObject();
  outlined init with take of FeatureFlag(v0, v3[0] + 16);
  outlined retain of FeatureFlag((uint64_t)v0);
  v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
  return v1 & 1;
}

uint64_t sub_1C23F366C()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t outlined retain of FeatureFlag(uint64_t a1)
{
  outlined copy of FeatureFlag(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
  return a1;
}

uint64_t outlined copy of FeatureFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 >= 2u)
  {
    if (a5 != 2)
      return result;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

const char *FeatureFlag.domain.getter()
{
  __int128 *v0;
  uint64_t v1;
  _QWORD v4[4];
  char v5;

  outlined init with take of FeatureFlag(v0, (uint64_t)v4);
  if (v5 != 3)
    return "Pommes";
  v1 = v4[2] | v4[3] | v4[1];
  if (v4[0] != 5 || v1 != 0)
  {
    if (v4[0] == 7 && !v1)
      return "SiriSettings";
    return "Pommes";
  }
  return "SiriVideo";
}

const char *specialized FeatureFlag.domainFeature(for:)(uint64_t a1, uint64_t a2)
{
  const char *result;
  char v5;
  BOOL v7;

  if (a1 == 0x73676E6974697277 && a2 == 0xE800000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "writings_search";
  }
  if (a1 == 7300455 && a2 == 0xE300000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || a1 == 1936744813 && a2 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "geo_search";
  }
  if (a1 == 0x6D6E696174756465 && a2 == 0xEB00000000746E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "edutainment_search";
  }
  if (a1 == 0x74616C736E617274 && a2 == 0xEB000000006E6F69
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return "translation_search";
  }
  if (a1 == 0x636E75616C707061 && a2 == 0xE900000000000068)
    return "applaunch_search";
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v7 = a1 == 1936748641 && a2 == 0xE400000000000000;
  result = "applaunch_search";
  if ((v5 & 1) == 0 && !v7)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return "applaunch_search";
    result = "emergency_search";
    if (a1 != 0x636E656772656D65 || a2 != 0xE900000000000079)
    {
      if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return "emergency_search";
      else
        return "";
    }
  }
  return result;
}

const char *specialized FeatureFlag.domainLocaleFeature(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  void *v5;
  Swift::String v6;
  Swift::String v7;
  BOOL v8;
  const char *v9;
  char v11;

  if (a4)
    v4 = a3;
  else
    v4 = 0;
  if (a4)
    v5 = a4;
  else
    v5 = (void *)0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = 95;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  v7._countAndFlagsBits = v4;
  v7._object = v5;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8 = a1 == 0x7A5F7374726F7073 && a2 == 0xEC0000004E435F68;
  if (v8 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return "sports_zh_CN";
  }
  else
  {
    v9 = "edutainment_zh_CN";
    if (a1 == 0xD000000000000011 && a2 == 0x80000001C2504080
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else if (a1 == 0x687A5F636973756DLL && a2 == 0xEB000000004E435FLL)
    {
      swift_bridgeObjectRelease();
      return "music_zh_CN";
    }
    else
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v11 & 1) != 0)
        return "music_zh_CN";
      else
        return "";
    }
  }
  return v9;
}

uint64_t destroy for FeatureFlag(uint64_t a1)
{
  return outlined consume of FeatureFlag(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(_BYTE *)(a1 + 32));
}

uint64_t initializeWithCopy for FeatureFlag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of FeatureFlag(*(_QWORD *)a2, v4, v5, v6, v7);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for FeatureFlag(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 32);
  outlined copy of FeatureFlag(*(_QWORD *)a2, v4, v5, v6, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  outlined consume of FeatureFlag(v8, v9, v10, v11, v12);
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for FeatureFlag(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  unsigned __int8 v9;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_QWORD *)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  outlined consume of FeatureFlag(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureFlag(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 253);
  v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 3)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureFlag(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 253;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFD)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for FeatureFlag(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 32) <= 2u)
    return *(unsigned __int8 *)(a1 + 32);
  else
    return (*(_DWORD *)a1 + 3);
}

uint64_t destructiveInjectEnumTag for FeatureFlag(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(_QWORD *)result = a2 - 3;
    *(_QWORD *)(result + 8) = 0;
    LOBYTE(a2) = 3;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
  }
  *(_BYTE *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for FeatureFlag()
{
  return &type metadata for FeatureFlag;
}

_QWORD *PommesSearchRequestProcessor.__allocating_init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v12;

  swift_allocObject();
  v12 = specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v12;
}

uint64_t PommesSearchRequestProcessor.remoteClient.getter()
{
  return swift_retain();
}

uint64_t PommesSearchRequestProcessor.localClients.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearchRequestProcessor.pegasusCacheManager.getter()
{
  return swift_retain();
}

uint64_t PommesSearchRequestProcessor.domainWarmup.getter()
{
  return swift_retain();
}

uint64_t PommesSearchRequestProcessor.onDeviceSearchInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t key path setter for PommesSearchRequestProcessor.pommesSearchRequest : PommesSearchRequestProcessor(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v6, v7);
  v8 = *a2 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  outlined assign with take of PommesSearchRequest((uint64_t)v6, v8);
  return swift_endAccess();
}

uint64_t PommesSearchRequestProcessor.muxContextManager.getter()
{
  return swift_retain();
}

_QWORD *PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;

  v6 = specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(a1, a2, a3, a4, a5, a6);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v6;
}

void CurrentDevice.codename.getter()
{
  void *v0;
  void *v1;

  v0 = (void *)MEMORY[0x1C3BBEC44](0x536C65646F4D5748, 0xEA00000000007274);
  v1 = (void *)MGGetStringAnswer();

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, int a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, char *, id, _QWORD *, void (*)(char), _QWORD);
  id v28;
  id v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  char *v38;

  LODWORD(v38) = a2;
  v36 = a1;
  v37 = type metadata accessor for DispatchTimeInterval();
  v35 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v34 = (uint64_t *)((char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v32 - v12;
  v14 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = swift_projectBox();
  (*(void (**)(void))(*(_QWORD *)a3 + 152))();
  v18 = *(_QWORD *)&v16[*(int *)(v14 + 52)];
  swift_retain();
  outlined destroy of PommesSearchRequest((uint64_t)v16, type metadata accessor for PommesSearchRequest);
  if (v18)
  {
    v19 = *(_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
    v20 = *(_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v17, (uint64_t)v13, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v13, (uint64_t)v11, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 48))(v11, 1, v21) == 1)
  {
    v22 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
LABEL_8:
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, v22);
    goto LABEL_12;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v22 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
    goto LABEL_8;
  }
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v11, (uint64_t)v7, type metadata accessor for PegasusSearchResponse);
  if ((v38 & 1) == 0)
  {
    v23 = *(_QWORD *)(a3 + 32);
    v38 = &v7[*(int *)(v5 + 20)];
    v33 = v19;
    v24 = v34;
    v25 = v35;
    *v34 = 5;
    v26 = v37;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v25 + 104))(v24, *MEMORY[0x1E0DEF4A0], v37);
    v27 = *(void (**)(uint64_t, uint64_t, char *, id, _QWORD *, void (*)(char), _QWORD))(*(_QWORD *)v23 + 224);
    v28 = v36;
    v29 = v36;
    v27(v33, v20, v38, v29, v24, closure #1 in PommesSearchRequestProcessor.handleResponseCaching(siriRequestId:searchResult:pommesResult:), 0);
    outlined consume of Result<PommesResponse, Error>(v28);
    (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v24, v26);
  }
  outlined destroy of PommesSearchRequest((uint64_t)v7, type metadata accessor for PegasusSearchResponse);
LABEL_12:
  swift_bridgeObjectRelease();
  v30 = outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(a3 + 40) + 200))(v30);
}

uint64_t closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, char a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, _QWORD *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(uint64_t, uint64_t, uint64_t, id, _QWORD *, void (*)(char), _QWORD);
  uint64_t v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;

  v8 = a2 & 1;
  v9 = type metadata accessor for DispatchTimeInterval();
  v46 = *(_QWORD *)(v9 - 8);
  v47 = v9;
  MEMORY[0x1E0C80A78](v9);
  v45 = (uint64_t *)((char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v44 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1E0C80A78](v44);
  v49 = (uint64_t)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v43 - v16;
  v18 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = swift_projectBox();
  v48 = a1;
  v22 = a1;
  v23 = v8;
  v24 = a5;
  v25 = a3(v22, v23);
  (*(void (**)(uint64_t))(*a5 + 152))(v25);
  v26 = *(_QWORD *)&v20[*(int *)(v18 + 52)];
  swift_retain();
  outlined destroy of PommesSearchRequest((uint64_t)v20, type metadata accessor for PommesSearchRequest);
  if (v26)
  {
    v27 = *(_QWORD *)(v26 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
    v28 = *(_QWORD *)(v26 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
    swift_bridgeObjectRetain();
    swift_release();
  }
  else
  {
    v27 = 0;
    v28 = 0;
  }
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v17, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v15, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 48))(v15, 1, v29) == 1)
  {
    v30 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
LABEL_8:
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, v30);
    goto LABEL_9;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v30 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
    goto LABEL_8;
  }
  v33 = (uint64_t)v15;
  v34 = v49;
  outlined init with take of PerformanceUtil.Ticket(v33, v49, type metadata accessor for PegasusSearchResponse);
  if ((_DWORD)v23)
  {
    outlined destroy of PommesSearchRequest(v34, type metadata accessor for PegasusSearchResponse);
  }
  else
  {
    v35 = a5[4];
    v36 = v45;
    v44 = v34 + *(int *)(v44 + 20);
    *v45 = 5;
    v38 = v46;
    v37 = v47;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v46 + 104))(v36, *MEMORY[0x1E0DEF4A0], v47);
    v39 = *(void (**)(uint64_t, uint64_t, uint64_t, id, _QWORD *, void (*)(char), _QWORD))(*(_QWORD *)v35 + 224);
    v40 = v27;
    v41 = v48;
    v42 = v48;
    v39(v40, v28, v44, v42, v36, closure #1 in PommesSearchRequestProcessor.handleResponseCaching(siriRequestId:searchResult:pommesResult:), 0);
    outlined consume of Result<PommesResponse, Error>(v41);
    (*(void (**)(_QWORD *, uint64_t))(v38 + 8))(v36, v37);
    outlined destroy of PommesSearchRequest(v49, type metadata accessor for PegasusSearchResponse);
  }
LABEL_9:
  swift_bridgeObjectRelease();
  v31 = outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24[5] + 200))(v31);
}

void closure #1 in PommesSearchRequestProcessor.handleResponseCaching(siriRequestId:searchResult:pommesResult:)(char a1)
{
  uint64_t v2;
  os_log_type_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  NSObject *oslog;
  uint64_t v9;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v3))
  {
    v4 = swift_slowAlloc();
    v5 = swift_slowAlloc();
    v9 = v5;
    *(_DWORD *)v4 = 136315394;
    if ((a1 & 1) != 0)
      v6 = 0x6465726F7473;
    else
      v6 = 0x726F747320746F6ELL;
    if ((a1 & 1) != 0)
      v7 = 0xE600000000000000;
    else
      v7 = 0xEA00000000006465;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v4 + 12) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, oslog, v3, "PommesSearchRequestProcessor : POMMES response caching complete : %s : %d expired", (uint8_t *)v4, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v5, -1, -1);
    MEMORY[0x1C3BBFF64](v4, -1, -1);

  }
  else
  {

  }
}

uint64_t PommesSearchRequestProcessor.clientSearch(pegasusResponse:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(void);
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  _BYTE v47[4];
  int v48;
  uint64_t v49;
  uint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD v59[5];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v2);
  v51 = &v47[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v50 = type metadata accessor for PommesSearchRequest(0);
  v4 = MEMORY[0x1E0C80A78](v50);
  v6 = &v47[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v4);
  v8 = &v47[-v7];
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v47[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v13);
  v15 = &v47[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v16, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("search.client", 13, 2u, 0, (uint64_t)v15);
  v52 = a1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v17 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  v19 = v18;
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  if (v17 == 0x616964656DLL && v19 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v21 & 1) == 0)
    {
LABEL_22:
      v38 = MEMORY[0x1E0DEE9D8];
      goto LABEL_25;
    }
  }
  v22 = v53[3];
  if (!*(_QWORD *)(v22 + 16))
    goto LABEL_22;
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(1);
  if ((v24 & 1) == 0)
    goto LABEL_22;
  outlined init with copy of AppDataProviding(*(_QWORD *)(v22 + 56) + 40 * v23, (uint64_t)&v56);
  outlined init with take of AppDataProviding(&v56, (uint64_t)v59);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  outlined init with copy of AppDataProviding((uint64_t)v59, (uint64_t)&v56);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v29 = swift_slowAlloc();
    v48 = v28;
    v30 = (uint8_t *)v29;
    v49 = swift_slowAlloc();
    v55 = v49;
    *(_DWORD *)v30 = 136315138;
    v31 = v57;
    v32 = v58;
    __swift_project_boxed_opaque_existential_1(&v56, v57);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 8))(v31, v32);
    v34 = (v33 & 1) == 0;
    if ((v33 & 1) != 0)
      v35 = 0x636973756DLL;
    else
      v35 = 1701736302;
    if (v34)
      v36 = 0xE400000000000000;
    else
      v36 = 0xE500000000000000;
    v54 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
    _os_log_impl(&dword_1C2356000, v26, (os_log_type_t)v48, "PommesSearchRequestProcessor#clientSearch searching local %s domain", v30, 0xCu);
    v37 = v49;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v37, -1, -1);
    MEMORY[0x1C3BBFF64](v30, -1, -1);
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  }

  v39 = v53[6];
  v40 = *(void (**)(void))(*v53 + 152);
  v40();
  v41 = (uint64_t *)&v8[*(int *)(v50 + 32)];
  v42 = v41[1];
  v50 = *v41;
  swift_bridgeObjectRetain();
  v43 = outlined destroy of PommesSearchRequest((uint64_t)v8, type metadata accessor for PommesSearchRequest);
  ((void (*)(uint64_t))v40)(v43);
  v44 = v51;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v51);
  outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesSearchRequest);
  v45 = type metadata accessor for PommesCandidateId();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
  (*(void (**)(uint64_t, uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v39 + 128))(v50, v42, v44, 1);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?((uint64_t)v44, &demangling cache variable for type metadata for PommesCandidateId?);
  v38 = PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(v52, v59);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v59);
LABEL_25:
  OSSignposter.end(token:message:)((uint64_t)v15, 0, 0xE000000000000000);
  outlined destroy of PommesSearchRequest((uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  return v38;
}

uint64_t PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  int *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(void);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  Swift::String v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, uint64_t, _QWORD, uint64_t, void (*)(void *, char), _QWORD *, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  void (*v60)(void);
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;

  v63 = a2;
  v67 = a1;
  v3 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v71 - 8);
  v7 = MEMORY[0x1E0C80A78](v71);
  v64 = v8;
  v65 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v59 - v9;
  v11 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = swift_allocObject();
  v15 = MEMORY[0x1E0DEE9D8];
  v68 = v14;
  *(_QWORD *)(v14 + 16) = MEMORY[0x1E0DEE9D8];
  v66 = v14 + 16;
  v76 = v15;
  v16 = *(void (**)(void))(*(_QWORD *)v2 + 152);
  v16();
  v17 = &v13[*(int *)(v11 + 32)];
  v18 = *(_QWORD *)v17;
  v61 = *((_QWORD *)v17 + 1);
  v62 = v18;
  swift_bridgeObjectRetain();
  v19 = outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PommesSearchRequest);
  v60 = v16;
  ((void (*)(uint64_t))v16)(v19);
  v72 = v10;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v10);
  outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PommesSearchRequest);
  v74 = 0;
  v75 = 0xE000000000000000;
  _StringGuts.grow(_:)(23);
  v74 = v2;
  type metadata accessor for PommesSearchRequestProcessor();
  swift_retain();
  v20 = String.init<A>(describing:)();
  v22 = v21;
  swift_bridgeObjectRelease();
  v74 = v20;
  v75 = v22;
  v23._object = (void *)0x80000001C2504330;
  v23._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v23);
  v24 = v74;
  Date.init()();
  v25 = &v5[v3[5]];
  *(_QWORD *)v25 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((_QWORD *)v25 + 1) = 56;
  v25[16] = 2;
  *(_QWORD *)&v5[v3[6]] = 244;
  v26 = &v5[v3[7]];
  *(_QWORD *)v26 = "clientSearchForMusic(_:musicDomainClient:)";
  *((_QWORD *)v26 + 1) = 42;
  v26[16] = 2;
  v27 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v24);
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = v3[8];
  v70 = v5;
  v31 = (uint64_t *)&v5[v30];
  *v31 = v27;
  v31[1] = v29;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v69 = v6;
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = (uint8_t *)swift_slowAlloc();
    v36 = swift_slowAlloc();
    v74 = v36;
    *(_DWORD *)v35 = 136315138;
    v37 = MEMORY[0x1C3BBEE9C](MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEA968]);
    v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v39 = v71;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v33, v34, "PommesSearchRequestProcessor#clientSearchForMusic calling musicDomainClient.search sharedUserIds: %s", v35, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v36, -1, -1);
    MEMORY[0x1C3BBFF64](v35, -1, -1);

  }
  else
  {

    v39 = v71;
  }
  v40 = v72;
  v41 = v63[3];
  v59 = v63[4];
  v63 = __swift_project_boxed_opaque_existential_1(v63, v41);
  v60();
  swift_beginAccess();
  v42 = v76;
  v43 = swift_allocObject();
  swift_weakInit();
  v44 = v69;
  v45 = v65;
  (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v65, v40, v39);
  v46 = (*(unsigned __int8 *)(v44 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  v47 = (v64 + v46 + 7) & 0xFFFFFFFFFFFFFFF8;
  v48 = (_QWORD *)swift_allocObject();
  v49 = v39;
  v50 = v48;
  v51 = v62;
  v48[2] = v43;
  v48[3] = v51;
  v48[4] = v61;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))((char *)v48 + v46, v45, v49);
  v52 = v68;
  *(_QWORD *)((char *)v50 + v47) = v68;
  v53 = v59;
  v54 = *(void (**)(char *, uint64_t, _QWORD, uint64_t, void (*)(void *, char), _QWORD *, uint64_t, uint64_t))(v59 + 24);
  swift_retain();
  swift_retain();
  v54(v13, v67, 0, v42, partial apply for closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:), v50, v41, v53);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PommesSearchRequest);
  swift_release();
  swift_beginAccess();
  v55 = *(_QWORD *)(v52 + 16);
  v56 = one-time initialization token for shared;
  swift_bridgeObjectRetain();
  if (v56 != -1)
    swift_once();
  v57 = (uint64_t)v70;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v70, 1);
  outlined destroy of PommesSearchRequest(v57, type metadata accessor for PerformanceUtil.Ticket);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v72, v71);
  swift_release();
  return v55;
}

void closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t Strong;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  id v25;
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v37[3];
  uint64_t v38;

  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v37[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a2 & 1) != 0)
  {
    swift_beginAccess();
    Strong = swift_weakLoadStrong();
    if (Strong)
    {
      v22 = *(_QWORD *)(Strong + 48);
      outlined copy of Result<[PommesResult], Error>(a1, 1);
      swift_retain();
      swift_release();
      v23 = type metadata accessor for PommesCandidateId();
      v24 = *(_QWORD *)(v23 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v15, a6, v23);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v15, 0, 1, v23);
      (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v22 + 144))(a4, a5, v15, 1);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesCandidateId?);
    }
    else
    {
      v25 = a1;
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    v27 = a1;
    v28 = a1;
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      v32 = swift_slowAlloc();
      v37[0] = v32;
      *(_DWORD *)v31 = 136315138;
      v38 = (uint64_t)a1;
      v33 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v34 = String.init<A>(describing:)();
      v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      _os_log_impl(&dword_1C2356000, v29, v30, "PommesSearchRequestProcessor#clientSearchForMusic local client search failed : %s", v31, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v32, -1, -1);
      MEMORY[0x1C3BBFF64](v31, -1, -1);

      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
    }
    else
    {
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);

    }
  }
  else
  {
    v16 = (_QWORD *)(a7 + 16);
    swift_beginAccess();
    v17 = swift_weakLoadStrong();
    if (v17)
    {
      v18 = *(_QWORD *)(v17 + 48);
      swift_retain();
      swift_release();
      v19 = type metadata accessor for PommesCandidateId();
      v20 = *(_QWORD *)(v19 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, a6, v19);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v15, 0, 1, v19);
      (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v18 + 136))(a4, a5, v15);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesCandidateId?);
    }
    swift_beginAccess();
    *v16 = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

void closure #2 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t Context;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  void (*v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  void *v44;
  uint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  int64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  int64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  unsigned int *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void *v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  char *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  char *v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  void (*v127)(char *, uint64_t);
  uint64_t v128;
  uint64_t v129;

  v118 = a7;
  v119 = a8;
  v113 = a6;
  v122 = a5;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v11);
  v105 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v116 = *(_QWORD *)(Context - 8);
  v117 = Context;
  MEMORY[0x1E0C80A78](Context);
  v115 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v112 = type metadata accessor for PommesSearchReason();
  v110 = *(_QWORD *)(v112 - 8);
  MEMORY[0x1E0C80A78](v112);
  v111 = (char *)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v16);
  v108 = (uint64_t)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for PommesSearchRequest(0);
  v18 = MEMORY[0x1E0C80A78](v121);
  v106 = (char *)&v104 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v114 = (char *)&v104 - v21;
  MEMORY[0x1E0C80A78](v20);
  v125 = (char *)&v104 - v22;
  v120 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  v123 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v24 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v26 = *(_QWORD *)(v25 - 8);
  v27 = MEMORY[0x1E0C80A78](v25);
  v109 = (char *)&v104 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v107 = (char *)&v104 - v30;
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v104 - v31;
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.clientResults.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  PommesResponse.Builder.conversationContext.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  v33 = *(void (**)(char *, uint64_t))(v26 + 8);
  v33(v32, v25);
  PommesResponse.Builder.metadataDomainName.setter();
  v128 = a4;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.isFallbackTriggered.getter();
  v34 = v32;
  v126 = v25;
  v127 = v33;
  v33(v32, v25);
  PommesResponse.Builder.metadataFallbackTriggered.setter();
  v35 = MEMORY[0x1E0DEE9D8];
  v129 = MEMORY[0x1E0DEE9D8];
  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v36 = _CocoaArrayWrapper.endIndex.getter();
    v124 = a1;
    if (v36)
      goto LABEL_3;
LABEL_16:
    swift_bridgeObjectRelease();
    PommesResponse.Builder.renderedTexts.setter();
    goto LABEL_17;
  }
  v36 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  v124 = a1;
  if (!v36)
    goto LABEL_16;
LABEL_3:
  if (v36 < 1)
  {
    __break(1u);
    goto LABEL_46;
  }
  v37 = 0;
  v38 = a2 & 0xC000000000000001;
  do
  {
    if (v38)
      v39 = (id)MEMORY[0x1C3BBF3F4](v37, a2);
    else
      v39 = *(id *)(a2 + 8 * v37 + 32);
    v40 = v39;
    ++v37;
    v41 = dispatch thunk of Experience.renderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v41);
  }
  while (v36 != v37);
  swift_bridgeObjectRelease();
  PommesResponse.Builder.renderedTexts.setter();
  v129 = v35;
  swift_bridgeObjectRetain();
  v42 = 0;
  do
  {
    if (v38)
      v43 = (id)MEMORY[0x1C3BBF3F4](v42, a2);
    else
      v43 = *(id *)(a2 + 8 * v42 + 32);
    v44 = v43;
    ++v42;
    v45 = dispatch thunk of Experience.redactedRenderedTexts.getter();

    specialized Array.append<A>(contentsOf:)(v45);
  }
  while (v36 != v42);
  swift_bridgeObjectRelease();
LABEL_17:
  PommesResponse.Builder.redactedRenderedTexts.setter();
  v46 = v34;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v47 = v34;
  v48 = v126;
  v127(v47, v126);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  v49 = *(void (**)(char *, uint64_t))(v123 + 8);
  v50 = v120;
  v49(v24, v120);
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v127(v46, v48);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v49(v24, v50);
  PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  if (!v36)
    goto LABEL_22;
  if ((a2 & 0xC000000000000001) == 0)
  {
    if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      goto LABEL_48;
    }
    v51 = *(id *)(a2 + 32);
    goto LABEL_21;
  }
LABEL_46:
  swift_bridgeObjectRetain();
  v51 = (id)MEMORY[0x1C3BBF3F4](0, a2);
  swift_bridgeObjectRelease();
LABEL_21:
  dispatch thunk of Experience.listenAfterSpeaking.getter();

LABEL_22:
  v52 = PommesResponse.Builder.listenAfterSpeaking.setter();
  v53 = v122;
  v54 = *(void (**)(uint64_t))(*(_QWORD *)v122 + 152);
  v55 = (uint64_t)v125;
  v54(v52);
  swift_bridgeObjectRetain();
  outlined destroy of PommesSearchRequest(v55, type metadata accessor for PommesSearchRequest);
  v56 = PommesResponse.Builder.requestId.setter();
  v54(v56);
  v57 = v108;
  PommesSearchRequest.pommesCandidateId.getter(v108);
  outlined destroy of PommesSearchRequest(v55, type metadata accessor for PommesSearchRequest);
  v58 = type metadata accessor for PommesCandidateId();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v57, 0, 1, v58);
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  v59 = v107;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v60 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v127(v59, v126);
  v61 = *(_QWORD *)(v60 + 16);
  v120 = (uint64_t)v54;
  if (v61)
  {
    v129 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v61, 0);
    v62 = v129;
    v63 = v60 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
    v64 = *(_QWORD *)(v123 + 72);
    do
    {
      v65 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      v67 = v66;
      v129 = v62;
      v69 = *(_QWORD *)(v62 + 16);
      v68 = *(_QWORD *)(v62 + 24);
      if (v69 >= v68 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
        v62 = v129;
      }
      *(_QWORD *)(v62 + 16) = v69 + 1;
      v70 = v62 + 16 * v69;
      *(_QWORD *)(v70 + 32) = v65;
      *(_QWORD *)(v70 + 40) = v67;
      v63 += v64;
      --v61;
    }
    while (v61);
    swift_bridgeObjectRelease();
    v53 = v122;
    v54 = (void (*)(uint64_t))v120;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  PommesResponse.Builder.taskStepLogs.setter();
  v71 = v109;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v72 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v127(v71, v126);
  v73 = *(_QWORD *)(v72 + 16);
  if (v73)
  {
    v129 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v73, 0);
    v74 = v129;
    v75 = v72 + ((*(unsigned __int8 *)(v123 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v123 + 80));
    v76 = *(_QWORD *)(v123 + 72);
    do
    {
      v77 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      v79 = v78;
      v129 = v74;
      v81 = *(_QWORD *)(v74 + 16);
      v80 = *(_QWORD *)(v74 + 24);
      if (v81 >= v80 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1);
        v74 = v129;
      }
      *(_QWORD *)(v74 + 16) = v81 + 1;
      v82 = v74 + 16 * v81;
      *(_QWORD *)(v82 + 32) = v77;
      *(_QWORD *)(v82 + 40) = v79;
      v75 += v76;
      --v73;
    }
    while (v73);
    swift_bridgeObjectRelease();
    v53 = v122;
    v54 = (void (*)(uint64_t))v120;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  swift_bridgeObjectRetain();
  v83 = PommesResponse.Builder.componentsWarmedUp.setter();
  v84 = (uint64_t)v125;
  v54(v83);
  v85 = v121;
  v86 = *(unsigned __int8 *)(v84 + *(int *)(v121 + 80));
  outlined destroy of PommesSearchRequest(v84, type metadata accessor for PommesSearchRequest);
  v87 = (unsigned int *)MEMORY[0x1E0D98910];
  if (!v86)
    v87 = (unsigned int *)MEMORY[0x1E0D98920];
  (*(void (**)(char *, _QWORD, uint64_t))(v110 + 104))(v111, *v87, v112);
  v88 = PommesResponse.Builder.searchReason.setter();
  v54(v88);
  swift_bridgeObjectRetain();
  outlined destroy of PommesSearchRequest(v84, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.searchRequestUtterance.setter();
  v89 = v115;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.getter();
  Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v89, v117);
  PommesResponse.Builder.requestCountryCode.setter();
  v90 = PommesResponse.Builder.isCachedResponse.setter();
  v54(v90);
  swift_bridgeObjectRetain();
  outlined destroy of PommesSearchRequest(v84, type metadata accessor for PommesSearchRequest);
  v91 = PommesResponse.Builder.sharedUserId.setter();
  v92 = (uint64_t)v114;
  v54(v91);
  v93 = *(void **)(v92 + *(int *)(v85 + 72));
  v94 = v93;
  outlined destroy of PommesSearchRequest(v92, type metadata accessor for PommesSearchRequest);
  if (!v93)
    goto LABEL_41;
  v95 = objc_msgSend(v94, sel_recognition);

  if (!v95)
  {
LABEL_48:
    __break(1u);
    return;
  }
  v96 = objc_msgSend(v95, sel_aceRecognition);

LABEL_41:
  v97 = (uint64_t)v105;
  PommesResponse.Builder.asrRecognition.setter();
  closure #3 in closure #2 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v53);
  v98 = PommesResponse.Builder.encodedNLUserParses.setter();
  v99 = (uint64_t)v106;
  v54(v98);
  PommesSearchRequest.fallbackParse.getter(v97);
  outlined destroy of PommesSearchRequest(v99, type metadata accessor for PommesSearchRequest);
  v100 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v101 = *(_QWORD *)(v100 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v101 + 48))(v97, 1, v100) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v97, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  else
  {
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_DelegatedUserDialogAct and conformance Siri_Nlu_External_DelegatedUserDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F8F8], MEMORY[0x1E0D9F8E8]);
    Message.serializedData(partial:)();
    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v97, v100);
  }
  v102 = PommesResponse.Builder.encodedNLFallbackParse.setter();
  v103 = (uint64_t)v125;
  v54(v102);
  PommesSearchRequest.responseVariantResult.getter();
  outlined destroy of PommesSearchRequest(v103, type metadata accessor for PommesSearchRequest);
  PommesResponse.Builder.responseVariantResult.setter();
  PommesResponse.Builder.isLowConfidenceKnowledgeResult.setter();
}

uint64_t closure #3 in closure #2 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD v23[3];
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  _QWORD *v27;

  v2 = type metadata accessor for Siri_Nlu_External_UserParse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v9 = JSONEncoder.init()();
  (*(void (**)(void))(*(_QWORD *)a1 + 152))();
  v10 = PommesSearchRequest.userParses.getter();
  outlined destroy of PommesSearchRequest((uint64_t)v8, type metadata accessor for PommesSearchRequest);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v23[1] = v10;
    v23[2] = v9;
    v12 = v10 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v13 = *(_QWORD *)(v3 + 72);
    v26 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    swift_bridgeObjectRetain();
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v24 = v13;
    v25 = v3;
    do
    {
      v26(v5, v12, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F2E0]);
      v15 = Message.serializedData(partial:)();
      v17 = v16;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v19 = v14[2];
      v18 = v14[3];
      if (v19 >= v18 >> 1)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v18 > 1), v19 + 1, 1, v14);
      v14[2] = v19 + 1;
      v20 = &v14[2 * v19];
      v20[4] = v15;
      v20[5] = v17;
      v3 = v25;
      v12 += v24;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease_n();
    if (!v14[2])
      goto LABEL_13;
  }
  else
  {
    swift_bridgeObjectRelease();
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    {
LABEL_13:
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
  }
  v27 = v14;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Data]);
  lazy protocol witness table accessor for type [Data] and conformance <A> [A]();
  v21 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_bridgeObjectRelease();
  swift_release();
  return v21;
}

uint64_t closure #1 in PommesSearchRequestProcessor.handleFailure(with:completion:)()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  MEMORY[0x1E0C80A78](v0);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata, v1, MEMORY[0x1E0D6D110]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.setter();
}

uint64_t closure #1 in closure #1 in PommesSearchRequestProcessor.handleFailure(with:completion:)()
{
  return Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
}

uint64_t CurrentDevice.supportsGenerativeModelSystems.getter()
{
  void *v0;
  uint64_t v1;

  v0 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000024, 0x80000001C25041F0);
  v1 = MGGetBoolAnswer();

  return v1;
}

_QWORD *specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int EnumCaseMultiPayload;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  Swift::String v30;
  uint64_t v31;
  _QWORD v33[2];
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;

  v7 = v6;
  v38 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v36 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v37 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v34);
  v35 = (char *)v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v16);
  v33[1] = (char *)v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v18);
  v20 = (_QWORD *)((char *)v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for AnalyticsComponentIdGenerator();
  v21 = swift_allocObject();
  type metadata accessor for OnDeviceSearchInstrumentationUtil();
  v22 = swift_allocObject();
  *(_QWORD *)(v22 + 16) = 0;
  *(_QWORD *)(v22 + 24) = v21;
  v7[6] = v22;
  *((_BYTE *)v7
  + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution) = 0;
  outlined init with copy of PommesSearchRequest(a5, (uint64_t)v7 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  v7[2] = a1;
  v7[3] = a2;
  v7[4] = a3;
  v7[5] = a4;
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_muxContextManager) = a6;
  v39 = a5;
  outlined init with copy of PommesSearchRequest(a5, (uint64_t)v20, type metadata accessor for PommesSearchRequest.ParseState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    v25 = *v20;
    v24 = (void *)v20[1];
    if (EnumCaseMultiPayload == 1)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      v26 = (uint64_t)v20
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      v27 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    }
    else
    {
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRelease();
      v29 = (char *)v20
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      swift_bridgeObjectRelease();
      v27 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
      v26 = (uint64_t)v29;
    }
    outlined destroy of MediaUserStateCenter?(v26, v27);
  }
  else
  {
    v25 = *v20;
    v24 = (void *)v20[1];
    v28 = (uint64_t)v20
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    outlined destroy of PommesSearchRequest(v28, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  type metadata accessor for OS_dispatch_queue();
  v40 = 0;
  v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v40 = 0xD000000000000021;
  v41 = 0x80000001C25043D0;
  v30._countAndFlagsBits = v25;
  v30._object = v24;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  static DispatchQoS.userInitiated.getter();
  v40 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v36 + 104))(v37, *MEMORY[0x1E0DEF8D0], v38);
  v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  outlined destroy of PommesSearchRequest(v39, type metadata accessor for PommesSearchRequest);
  *(_QWORD *)((char *)v7 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_requestQueue) = v31;
  return v7;
}

uint64_t sub_1C23F6C88()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C23F6CB4()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1C23F6CD8()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C23F6CFC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for SignpostToken();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  v8 = type metadata accessor for Date();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v0 + v2, v8);
  swift_bridgeObjectRelease();
  v9 = v0 + v6 + *(int *)(v4 + 20);
  v10 = type metadata accessor for OSSignpostID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C23F6E28()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(char *a1, uint64_t a2, uint8_t *a3, uint64_t (*a4)(void *, uint64_t), uint64_t a5, _QWORD *a6, uint64_t a7)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (**v41)(char *, uint64_t);
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  char *v64;
  void (*v65)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t result;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  void *v108;
  id v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  BOOL v122;
  void (**v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint8_t *v126;
  void *v127;
  _BYTE *v128;
  id v129;
  void *v130;
  unint64_t v131;
  _QWORD v132[2];
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(void *, uint64_t);
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  void (**v157)(char *, uint64_t);
  char *v158;
  char *v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD v163[2];
  uint64_t v164;
  char v165;
  uint64_t v166;
  _QWORD v167[5];

  v160 = a3;
  v145 = type metadata accessor for Date();
  v144 = *(_QWORD *)(v145 - 8);
  MEMORY[0x1E0C80A78](v145);
  v143 = (char *)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for ClientExperienceSignals();
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v158 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v137);
  v142 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v157 = *(void (***)(char *, uint64_t))(v153 - 8);
  MEMORY[0x1E0C80A78](v153);
  v156 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v155 = *(_QWORD *)(v152 - 8);
  MEMORY[0x1E0C80A78](v152);
  v154 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v138 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v137 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v137 - v25;
  v27 = (_QWORD *)swift_allocObject();
  v146 = a4;
  v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  v27[5] = a7;
  v150 = v27;
  v167[3] = &type metadata for CallBusinessNoResultsExperiencesResolver;
  v167[4] = &protocol witness table for CallBusinessNoResultsExperiencesResolver;
  v167[0] = a2;
  v28 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v139 = a1;
  v29 = &a1[v28];
  v151 = v19;
  v30 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v30(v26, v29, v18);
  v31 = one-time initialization token for pommes;
  v147 = a5;
  swift_retain();
  v148 = a6;
  swift_retain();
  v149 = a7;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v31 != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
  v30(v24, v26, v18);
  v161 = v33;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  v36 = os_log_type_enabled(v34, v35);
  v159 = v26;
  if (v36)
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    *(_QWORD *)&v163[0] = v38;
    *(_DWORD *)v37 = 136315138;
    v30(v138, v24, v18);
    v39 = String.init<A>(describing:)();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)v163);
    v26 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41 = *(void (***)(char *, uint64_t))(v151 + 8);
    ((void (*)(char *, uint64_t))v41)(v24, v18);
    _os_log_impl(&dword_1C2356000, v34, v35, "PireneResponse: %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v38, -1, -1);
    MEMORY[0x1C3BBFF64](v37, -1, -1);
  }
  else
  {
    v41 = *(void (***)(char *, uint64_t))(v151 + 8);
    ((void (*)(char *, uint64_t))v41)(v24, v18);
  }

  v42 = v160;
  v43 = v153;
  v44 = v152;
  v45 = v154;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v46 = v156;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  v47 = (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v45, v44);
  v48 = MEMORY[0x1C3BBC3A0](v47);
  v157[1](v46, v43);
  if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter() & 1) != 0 && *(_QWORD *)(v48 + 16))
  {
    if ((v42[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_1C2356000, v49, v50, "Already attempted profile slice resolution; yielding error response",
          v51,
          2u);
        MEMORY[0x1C3BBFF64](v51, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v52 = (void *)swift_allocError();
      *v53 = 67;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v52, 1, v146, v147, v148);

      ((void (*)(char *, uint64_t))v41)(v26, v18);
    }
    else
    {
      v42[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] = 1;
      swift_bridgeObjectRetain_n();
      v86 = Logger.logObject.getter();
      v87 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc();
        v89 = swift_slowAlloc();
        v161 = v18;
        v90 = v89;
        *(_QWORD *)&v163[0] = v89;
        *(_DWORD *)v88 = 136315138;
        v91 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
        v92 = swift_bridgeObjectRetain();
        v93 = MEMORY[0x1C3BBEE9C](v92, v91);
        v95 = v94;
        swift_bridgeObjectRelease();
        v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v95, (uint64_t *)v163);
        v26 = v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v42 = v160;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v86, v87, "Adding profile slice resolution requests: %s", v88, 0xCu);
        swift_arrayDestroy();
        v96 = v90;
        v18 = v161;
        MEMORY[0x1C3BBFF64](v96, -1, -1);
        MEMORY[0x1C3BBFF64](v88, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v97 = &v42[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest];
      swift_beginAccess();
      *(_QWORD *)&v97[*(int *)(v137 + 92)] = v48;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(), _QWORD *))(*(_QWORD *)v42 + 224))(partial apply for closure #4 in PommesSearchRequestProcessor.search_sync(completion:), v150);
      ((void (*)(char *, uint64_t))v41)(v26, v18);
    }
LABEL_41:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v167);
    return swift_release();
  }
  v54 = swift_bridgeObjectRelease();
  v157 = v41;
  v55 = *((_QWORD *)v42 + 5);
  v56 = *(void (**)(uint64_t))(*(_QWORD *)v42 + 152);
  v57 = (uint64_t)v142;
  v56(v54);
  v58 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v55 + 168))(v57, v26);
  v59 = outlined destroy of PommesSearchRequest(v57, type metadata accessor for PommesSearchRequest);
  v60 = *((_QWORD *)v42 + 2);
  v56(v59);
  v61 = v158;
  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 696))(v57);
  v62 = outlined destroy of PommesSearchRequest(v57, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1)
    v62 = swift_once();
  v63 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v62);
  v133 = v167;
  v134 = v26;
  v135 = v61;
  v64 = v143;
  Date.init()();
  v65 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v63 + 200);
  v135 = (char *)v132;
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v133) = 2;
  v65(&v166, 0xD00000000000002ALL, 0x80000001C2504380, 0, v64, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 341, "handleSuccess(_:_:_:)", 21, (_DWORD)v133, closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v64, v145);
  v66 = v166;
  v67 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v26);
  swift_bridgeObjectRetain_n();
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.debug.getter();
  v70 = os_log_type_enabled(v68, v69);
  v156 = (char *)v58;
  v71 = v18;
  if (v70)
  {
    v72 = (uint8_t *)swift_slowAlloc();
    v73 = swift_slowAlloc();
    *(_QWORD *)&v163[0] = v73;
    *(_DWORD *)v72 = 136315138;
    v74 = type metadata accessor for PommesResult();
    v75 = MEMORY[0x1C3BBEEC0](v67, v74);
    v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v68, v69, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v72, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v73, -1, -1);
    MEMORY[0x1C3BBFF64](v72, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (!(v66 >> 62))
  {
    v77 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v77)
      goto LABEL_19;
LABEL_28:
    swift_bridgeObjectRelease();
    v82 = 0xE700000000000000;
    v80 = 0x6E776F6E6B6E55;
    v85 = 0;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_28;
LABEL_19:
  if ((v66 & 0xC000000000000001) != 0)
  {
    v130 = (void *)MEMORY[0x1C3BBF3F4](0, v66);
    swift_bridgeObjectRelease();
    v80 = dispatch thunk of Experience.pluginIdentifier.getter();
    v82 = v131;

    swift_bridgeObjectRetain();
    v83 = (id)MEMORY[0x1C3BBF3F4](0, v66);
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v79 = *(id *)(v66 + 32);
    swift_bridgeObjectRelease();
    v80 = dispatch thunk of Experience.pluginIdentifier.getter();
    v82 = v81;

    v83 = *(id *)(v66 + 32);
LABEL_22:
    dispatch thunk of Experience.queryConfidence.getter();
    v85 = v84;

LABEL_29:
    swift_bridgeObjectRetain();
    v98 = Logger.logObject.getter();
    v99 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = swift_slowAlloc();
      v101 = swift_slowAlloc();
      *(_QWORD *)&v163[0] = v101;
      *(_DWORD *)v100 = 136315394;
      swift_bridgeObjectRetain();
      v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, (uint64_t *)v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v100 + 12) = 2048;
      v162 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v98, v99, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v101, -1, -1);
      MEMORY[0x1C3BBFF64](v100, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v102 = v71;
    v104 = (uint64_t)v159;
    v103 = v160;
    v105 = v139;
    v106 = v156;
    v165 = 0;
    v107 = type metadata accessor for PommesResponse();
    MEMORY[0x1E0C80A78](v107);
    *(&v137 - 8) = v66;
    *(&v137 - 7) = v67;
    v132[0] = v104;
    v132[1] = v103;
    v133 = v106;
    v134 = v105;
    v135 = &v165;
    v108 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v108)
    {
      v109 = v108;
      v110 = Logger.logObject.getter();
      v111 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc();
        v113 = swift_slowAlloc();
        v161 = v71;
        v114 = v113;
        *(_QWORD *)&v163[0] = v113;
        *(_DWORD *)v112 = 136315138;
        v160 = v112 + 4;
        v115 = objc_msgSend(v109, sel_debugDescription);
        v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v118 = v117;

        v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v118, (uint64_t *)v163);
        v104 = (uint64_t)v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v110, v111, "PommesSearchRequestProcessor#handleSuccess response: %s", v112, 0xCu);
        swift_arrayDestroy();
        v119 = v114;
        v102 = v161;
        MEMORY[0x1C3BBFF64](v119, -1, -1);
        MEMORY[0x1C3BBFF64](v112, -1, -1);

      }
      else
      {

      }
      v123 = v157;
      v124 = v141;
      v125 = v140;
      v164 = 0;
      memset(v163, 0, sizeof(v163));
      static CurareDonation.donateCurareInfo(for:with:into:)(v104, v109, (uint64_t)v163);
      outlined destroy of MediaUserStateCenter?((uint64_t)v163, &demangling cache variable for type metadata for CurareInteractionStream?);
      v129 = v109;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v108, 0, v146, v147, v148);

    }
    else
    {
      v120 = Logger.logObject.getter();
      v121 = static os_log_type_t.error.getter();
      v122 = os_log_type_enabled(v120, v121);
      v123 = v157;
      v124 = v141;
      v125 = v140;
      if (v122)
      {
        v126 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v126 = 0;
        _os_log_impl(&dword_1C2356000, v120, v121, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v126, 2u);
        MEMORY[0x1C3BBFF64](v126, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v127 = (void *)swift_allocError();
      *v128 = 0x80;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v127, 1, v146, v147, v148);

    }
    (*(void (**)(char *, uint64_t))(v125 + 8))(v158, v124);
    ((void (*)(uint64_t, uint64_t))v123)(v104, v102);
    goto LABEL_41;
  }
  __break(1u);
  return result;
}

{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  _QWORD *v27;
  uint64_t v28;
  char *v29;
  void (*v30)(char *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  _BOOL4 v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (**v41)(char *, uint64_t);
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  char *v64;
  void (*v65)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v66;
  uint64_t v67;
  NSObject *v68;
  os_log_type_t v69;
  _BOOL4 v70;
  uint64_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t result;
  id v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  id v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  NSObject *v98;
  os_log_type_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint8_t *v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  uint64_t v107;
  void *v108;
  id v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint64_t v113;
  uint64_t v114;
  id v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  BOOL v122;
  void (**v123)(char *, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint8_t *v126;
  void *v127;
  _BYTE *v128;
  id v129;
  void *v130;
  unint64_t v131;
  _QWORD v132[2];
  _QWORD *v133;
  char *v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t (*v146)(void *, uint64_t);
  uint64_t v147;
  _QWORD *v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  char *v156;
  void (**v157)(char *, uint64_t);
  char *v158;
  char *v159;
  uint8_t *v160;
  uint64_t v161;
  uint64_t v162;
  _OWORD v163[2];
  uint64_t v164;
  char v165;
  uint64_t v166;
  _QWORD v167[5];

  v160 = a3;
  v145 = type metadata accessor for Date();
  v144 = *(_QWORD *)(v145 - 8);
  MEMORY[0x1E0C80A78](v145);
  v143 = (char *)&v137 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for ClientExperienceSignals();
  v140 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v158 = (char *)&v137 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v137);
  v142 = (char *)&v137 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v157 = *(void (***)(char *, uint64_t))(v153 - 8);
  MEMORY[0x1E0C80A78](v153);
  v156 = (char *)&v137 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v155 = *(_QWORD *)(v152 - 8);
  MEMORY[0x1E0C80A78](v152);
  v154 = (char *)&v137 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v138 = (char *)&v137 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v137 - v23;
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v137 - v25;
  v27 = (_QWORD *)swift_allocObject();
  v146 = a4;
  v27[2] = a4;
  v27[3] = a5;
  v27[4] = a6;
  v27[5] = a7;
  v150 = v27;
  v167[3] = &type metadata for DefaultExperiencesResolver;
  v167[4] = &protocol witness table for DefaultExperiencesResolver;
  v167[0] = swift_allocObject();
  outlined init with copy of DefaultExperiencesResolver(a2, v167[0] + 16);
  v28 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v139 = a1;
  v29 = &a1[v28];
  v151 = v19;
  v30 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
  v30(v26, v29, v18);
  v31 = one-time initialization token for pommes;
  v147 = a5;
  swift_retain();
  v148 = a6;
  swift_retain();
  v149 = a7;
  swift_retain();
  if (v31 != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  v33 = __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
  v30(v24, v26, v18);
  v161 = v33;
  v34 = Logger.logObject.getter();
  v35 = static os_log_type_t.debug.getter();
  v36 = os_log_type_enabled(v34, v35);
  v159 = v26;
  if (v36)
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    *(_QWORD *)&v163[0] = v38;
    *(_DWORD *)v37 = 136315138;
    v30(v138, v24, v18);
    v39 = String.init<A>(describing:)();
    v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)v163);
    v26 = v159;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41 = *(void (***)(char *, uint64_t))(v151 + 8);
    ((void (*)(char *, uint64_t))v41)(v24, v18);
    _os_log_impl(&dword_1C2356000, v34, v35, "PireneResponse: %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v38, -1, -1);
    MEMORY[0x1C3BBFF64](v37, -1, -1);
  }
  else
  {
    v41 = *(void (***)(char *, uint64_t))(v151 + 8);
    ((void (*)(char *, uint64_t))v41)(v24, v18);
  }

  v42 = v160;
  v43 = v153;
  v44 = v152;
  v45 = v154;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v46 = v156;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  v47 = (*(uint64_t (**)(char *, uint64_t))(v155 + 8))(v45, v44);
  v48 = MEMORY[0x1C3BBC3A0](v47);
  v157[1](v46, v43);
  if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter() & 1) != 0 && *(_QWORD *)(v48 + 16))
  {
    if ((v42[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_1C2356000, v49, v50, "Already attempted profile slice resolution; yielding error response",
          v51,
          2u);
        MEMORY[0x1C3BBFF64](v51, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v52 = (void *)swift_allocError();
      *v53 = 67;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v52, 1, v146, v147, v148);

      ((void (*)(char *, uint64_t))v41)(v26, v18);
    }
    else
    {
      v42[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] = 1;
      swift_bridgeObjectRetain_n();
      v86 = Logger.logObject.getter();
      v87 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v86, v87))
      {
        v88 = (uint8_t *)swift_slowAlloc();
        v89 = swift_slowAlloc();
        v161 = v18;
        v90 = v89;
        *(_QWORD *)&v163[0] = v89;
        *(_DWORD *)v88 = 136315138;
        v91 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
        v92 = swift_bridgeObjectRetain();
        v93 = MEMORY[0x1C3BBEE9C](v92, v91);
        v95 = v94;
        swift_bridgeObjectRelease();
        v166 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v95, (uint64_t *)v163);
        v26 = v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v42 = v160;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v86, v87, "Adding profile slice resolution requests: %s", v88, 0xCu);
        swift_arrayDestroy();
        v96 = v90;
        v18 = v161;
        MEMORY[0x1C3BBFF64](v96, -1, -1);
        MEMORY[0x1C3BBFF64](v88, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v97 = &v42[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest];
      swift_beginAccess();
      *(_QWORD *)&v97[*(int *)(v137 + 92)] = v48;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(), _QWORD *))(*(_QWORD *)v42 + 224))(partial apply for closure #4 in PommesSearchRequestProcessor.search_sync(completion:), v150);
      ((void (*)(char *, uint64_t))v41)(v26, v18);
    }
LABEL_41:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v167);
    return swift_release();
  }
  v54 = swift_bridgeObjectRelease();
  v157 = v41;
  v55 = *((_QWORD *)v42 + 5);
  v56 = *(void (**)(uint64_t))(*(_QWORD *)v42 + 152);
  v57 = (uint64_t)v142;
  v56(v54);
  v58 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v55 + 168))(v57, v26);
  v59 = outlined destroy of PommesSearchRequest(v57, type metadata accessor for PommesSearchRequest);
  v60 = *((_QWORD *)v42 + 2);
  v56(v59);
  v61 = v158;
  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 696))(v57);
  v62 = outlined destroy of PommesSearchRequest(v57, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1)
    v62 = swift_once();
  v63 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v62);
  v133 = v167;
  v134 = v26;
  v135 = v61;
  v64 = v143;
  Date.init()();
  v65 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v63 + 200);
  v135 = (char *)v132;
  v136 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v133) = 2;
  v65(&v166, 0xD00000000000002ALL, 0x80000001C2504380, 0, v64, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 341, "handleSuccess(_:_:_:)", 21, (_DWORD)v133, closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v64, v145);
  v66 = v166;
  v67 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v26);
  swift_bridgeObjectRetain_n();
  v68 = Logger.logObject.getter();
  v69 = static os_log_type_t.debug.getter();
  v70 = os_log_type_enabled(v68, v69);
  v156 = (char *)v58;
  v71 = v18;
  if (v70)
  {
    v72 = (uint8_t *)swift_slowAlloc();
    v73 = swift_slowAlloc();
    *(_QWORD *)&v163[0] = v73;
    *(_DWORD *)v72 = 136315138;
    v74 = type metadata accessor for PommesResult();
    v75 = MEMORY[0x1C3BBEEC0](v67, v74);
    v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v76, (uint64_t *)v163);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v68, v69, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v72, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v73, -1, -1);
    MEMORY[0x1C3BBFF64](v72, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (!(v66 >> 62))
  {
    v77 = *(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v77)
      goto LABEL_19;
LABEL_28:
    swift_bridgeObjectRelease();
    v82 = 0xE700000000000000;
    v80 = 0x6E776F6E6B6E55;
    v85 = 0;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_28;
LABEL_19:
  if ((v66 & 0xC000000000000001) != 0)
  {
    v130 = (void *)MEMORY[0x1C3BBF3F4](0, v66);
    swift_bridgeObjectRelease();
    v80 = dispatch thunk of Experience.pluginIdentifier.getter();
    v82 = v131;

    swift_bridgeObjectRetain();
    v83 = (id)MEMORY[0x1C3BBF3F4](0, v66);
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (*(_QWORD *)((v66 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v79 = *(id *)(v66 + 32);
    swift_bridgeObjectRelease();
    v80 = dispatch thunk of Experience.pluginIdentifier.getter();
    v82 = v81;

    v83 = *(id *)(v66 + 32);
LABEL_22:
    dispatch thunk of Experience.queryConfidence.getter();
    v85 = v84;

LABEL_29:
    swift_bridgeObjectRetain();
    v98 = Logger.logObject.getter();
    v99 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = swift_slowAlloc();
      v101 = swift_slowAlloc();
      *(_QWORD *)&v163[0] = v101;
      *(_DWORD *)v100 = 136315394;
      swift_bridgeObjectRetain();
      v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v80, v82, (uint64_t *)v163);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v100 + 12) = 2048;
      v162 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v98, v99, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v100, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v101, -1, -1);
      MEMORY[0x1C3BBFF64](v100, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v102 = v71;
    v104 = (uint64_t)v159;
    v103 = v160;
    v105 = v139;
    v106 = v156;
    v165 = 0;
    v107 = type metadata accessor for PommesResponse();
    MEMORY[0x1E0C80A78](v107);
    *(&v137 - 8) = v66;
    *(&v137 - 7) = v67;
    v132[0] = v104;
    v132[1] = v103;
    v133 = v106;
    v134 = v105;
    v135 = &v165;
    v108 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v108)
    {
      v109 = v108;
      v110 = Logger.logObject.getter();
      v111 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v110, v111))
      {
        v112 = (uint8_t *)swift_slowAlloc();
        v113 = swift_slowAlloc();
        v161 = v71;
        v114 = v113;
        *(_QWORD *)&v163[0] = v113;
        *(_DWORD *)v112 = 136315138;
        v160 = v112 + 4;
        v115 = objc_msgSend(v109, sel_debugDescription);
        v116 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v118 = v117;

        v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v116, v118, (uint64_t *)v163);
        v104 = (uint64_t)v159;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v110, v111, "PommesSearchRequestProcessor#handleSuccess response: %s", v112, 0xCu);
        swift_arrayDestroy();
        v119 = v114;
        v102 = v161;
        MEMORY[0x1C3BBFF64](v119, -1, -1);
        MEMORY[0x1C3BBFF64](v112, -1, -1);

      }
      else
      {

      }
      v123 = v157;
      v124 = v141;
      v125 = v140;
      v164 = 0;
      memset(v163, 0, sizeof(v163));
      static CurareDonation.donateCurareInfo(for:with:into:)(v104, v109, (uint64_t)v163);
      outlined destroy of MediaUserStateCenter?((uint64_t)v163, &demangling cache variable for type metadata for CurareInteractionStream?);
      v129 = v109;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v108, 0, v146, v147, v148);

    }
    else
    {
      v120 = Logger.logObject.getter();
      v121 = static os_log_type_t.error.getter();
      v122 = os_log_type_enabled(v120, v121);
      v123 = v157;
      v124 = v141;
      v125 = v140;
      if (v122)
      {
        v126 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v126 = 0;
        _os_log_impl(&dword_1C2356000, v120, v121, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v126, 2u);
        MEMORY[0x1C3BBFF64](v126, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v127 = (void *)swift_allocError();
      *v128 = 0x80;
      closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v127, 1, v146, v147, v148);

    }
    (*(void (**)(char *, uint64_t))(v125 + 8))(v158, v124);
    ((void (*)(uint64_t, uint64_t))v123)(v104, v102);
    goto LABEL_41;
  }
  __break(1u);
  return result;
}

void specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a4;
  v28 = a6;
  v25 = a3;
  v26 = a5;
  v24 = a2;
  v20 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  MEMORY[0x1E0C80A78](v22);
  v21 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v19[2] = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v19[3] = (char *)v19 - v12;
  v13 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v13);
  v14 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v15);
  v16 = type metadata accessor for PommesSearchRequest(0);
  v17 = MEMORY[0x1E0C80A78](v16);
  v18 = MEMORY[0x1E0C80A78](v17);
  MEMORY[0x1E0C80A78](v18);
  __asm { BR              X10 }
}

uint64_t sub_1C23F810C()
{
  uint64_t v0;
  void *v1;
  _BYTE *v2;

  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  v1 = (void *)swift_allocError();
  *v2 = 67;
  swift_retain();
  closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v1, 1, *(uint64_t (**)(void *, uint64_t))(v0 - 120), *(_QWORD *)(v0 - 104), *(_QWORD **)(v0 - 112));

  return swift_release();
}

void sub_1C23F8184()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23F8130);
}

void sub_1C23F81AC()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23F8130);
}

void sub_1C23F81D4()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23F8130);
}

void sub_1C23F81FC()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23F8130);
}

uint64_t sub_1C23F8224()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  char v11;
  uint64_t v12;
  void (*v13)(void);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  int EnumCaseMultiPayload;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  _BYTE *v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;

  *(_QWORD *)(v8 - 192) = v4;
  v9 = *(void (**)(uint64_t))(**(_QWORD **)(v8 - 128) + 152);
  swift_retain();
  swift_retain();
  v10 = swift_retain();
  *(_QWORD *)(v8 - 184) = v9;
  v9(v10);
  v11 = *(_BYTE *)(v0 + *(int *)(v6 + 80));
  v12 = outlined destroy of PommesSearchRequest(v0, type metadata accessor for PommesSearchRequest);
  if ((v11 & 1) == 0)
    goto LABEL_17;
  v13 = *(void (**)(void))(v8 - 184);
  ((void (*)(uint64_t))v13)(v12);
  outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v6 + 40), v7, &demangling cache variable for type metadata for PommesContext?);
  outlined destroy of PommesSearchRequest(v1, type metadata accessor for PommesSearchRequest);
  v14 = type metadata accessor for PommesContext();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v7, 1, v14) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v7, &demangling cache variable for type metadata for PommesContext?);
LABEL_17:
    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    v31 = (void *)swift_allocError();
    *v32 = -127;
    closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v31, 1, *(uint64_t (**)(void *, uint64_t))(v8 - 120), *(_QWORD *)(v8 - 104), *(_QWORD **)(v8 - 112));

    swift_release();
    swift_release();
    return swift_release();
  }
  v16 = PommesContext.domain.getter();
  v18 = v17;
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v7, v14);
  if (!v18)
    goto LABEL_17;
  if (v16 == 0x656E6F6870 && v18 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
      goto LABEL_17;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1C2356000, v21, v22, "Handling no results from fallback request for phone domain as successful", v23, 2u);
    MEMORY[0x1C3BBFF64](v23, -1, -1);
  }

  v13();
  outlined init with copy of PommesSearchRequest(v5, v2, type metadata accessor for PommesSearchRequest.ParseState);
  outlined destroy of PommesSearchRequest(v5, type metadata accessor for PommesSearchRequest);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v25 = v2
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      v26 = *(_QWORD *)(v8 - 168);
      outlined init with take of TCUMappedNLResponse?(v25, v26);
      v27 = *(_QWORD *)(v8 - 176);
      outlined init with copy of MediaUserStateCenter?(v26, v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v28 = type metadata accessor for TCUMappedNLResponse();
      v29 = *(_QWORD *)(v28 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v30 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v38 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
        v30 = NLParseResponse.userParses.getter();

      }
      v36 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
      v37 = v26;
    }
    else
    {
      swift_bridgeObjectRelease();
      v30 = *(_QWORD *)(v2 + 16);
      v35 = v2
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      swift_bridgeObjectRelease();
      v36 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
      v37 = v35;
    }
    outlined destroy of MediaUserStateCenter?(v37, v36);
  }
  else
  {
    swift_bridgeObjectRelease();
    v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined init with take of PerformanceUtil.Ticket(v2 + *(int *)(v34 + 48), (uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v30 = *v3;
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v3, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D1E0], MEMORY[0x1E0D6D198]);
  v40 = *(_QWORD *)(v8 - 152);
  v39 = *(_QWORD *)(v8 - 144);
  static Message.with(_:)();
  v41 = *(char **)(v8 - 136);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.init()();
  v42 = *(_QWORD *)(v8 - 192);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(&v41[*(int *)(*(_QWORD *)(v8 - 160) + 20)], v40, v39);
  v43 = *(_QWORD *)(v8 - 96);
  swift_retain();
  v44 = *(_QWORD *)(v8 - 104);
  swift_retain();
  v45 = *(_QWORD **)(v8 - 112);
  swift_retain();
  specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v41, v30, *(uint8_t **)(v8 - 128), *(uint64_t (**)(void *, uint64_t))(v8 - 120), v44, v45, v43);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest((uint64_t)v41, type metadata accessor for PegasusSearchResponse);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v39);
  swift_release();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(char *a1, uint64_t a2, uint8_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  _BOOL4 v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  void (**v38)(char *, uint64_t);
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  void (**v48)(char *, uint64_t);
  uint8_t *v49;
  uint8_t *v50;
  void *v51;
  _BYTE *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t);
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void *v61;
  char *v62;
  void (*v63)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v64;
  uint64_t v65;
  NSObject *v66;
  os_log_type_t v67;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t result;
  id v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  id v79;
  uint64_t v80;
  uint64_t v81;
  NSObject *v82;
  os_log_type_t v83;
  uint64_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint8_t *v95;
  uint8_t *v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint8_t *v103;
  char *v104;
  uint64_t v105;
  void *v106;
  id v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  BOOL v119;
  char *v120;
  uint8_t *v121;
  void *v122;
  _BYTE *v123;
  id v124;
  void *v125;
  unint64_t v126;
  _QWORD v127[2];
  _QWORD *v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t v148;
  char *v149;
  void (**v150)(char *, uint64_t);
  char *v151;
  char *v152;
  uint8_t *v153;
  uint64_t v154;
  uint64_t v155;
  _OWORD v156[2];
  uint64_t v157;
  char v158;
  uint64_t v159;
  _QWORD v160[5];

  v153 = a3;
  v140 = type metadata accessor for Date();
  v139 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140);
  v138 = (char *)&v132 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for ClientExperienceSignals();
  v135 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136);
  v11 = (char *)&v132 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v133);
  v137 = (char *)&v132 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v146 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v150 = *(void (***)(char *, uint64_t))(v146 - 8);
  MEMORY[0x1E0C80A78](v146);
  v149 = (char *)&v132 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v148 = *(_QWORD *)(v145 - 8);
  MEMORY[0x1E0C80A78](v145);
  v147 = (char *)&v132 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v132 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v132 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v132 - v23;
  v25 = swift_allocObject();
  *(_QWORD *)(v25 + 16) = a4;
  *(_QWORD *)(v25 + 24) = a5;
  v143 = v25;
  v160[3] = &type metadata for CallBusinessNoResultsExperiencesResolver;
  v160[4] = &protocol witness table for CallBusinessNoResultsExperiencesResolver;
  v160[0] = a2;
  v26 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v134 = a1;
  v144 = v16;
  v27 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
  v27(v24, &a1[v26], v15);
  v28 = one-time initialization token for pommes;
  v142 = a4;
  swift_retain();
  v141 = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v28 != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
  v27(v22, v24, v15);
  v154 = v30;
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.debug.getter();
  v33 = os_log_type_enabled(v31, v32);
  v151 = v24;
  v152 = v11;
  if (v33)
  {
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    *(_QWORD *)&v156[0] = v35;
    *(_DWORD *)v34 = 136315138;
    v27(v19, v22, v15);
    v36 = String.init<A>(describing:)();
    v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, (uint64_t *)v156);
    v24 = v151;
    v11 = v152;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v38 = *(void (***)(char *, uint64_t))(v144 + 8);
    ((void (*)(char *, uint64_t))v38)(v22, v15);
    _os_log_impl(&dword_1C2356000, v31, v32, "PireneResponse: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v35, -1, -1);
    MEMORY[0x1C3BBFF64](v34, -1, -1);
  }
  else
  {
    v38 = *(void (***)(char *, uint64_t))(v144 + 8);
    ((void (*)(char *, uint64_t))v38)(v22, v15);
  }

  v39 = v153;
  v40 = v146;
  v41 = v145;
  v42 = v147;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v43 = v149;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  v44 = (*(uint64_t (**)(char *, uint64_t))(v148 + 8))(v42, v41);
  v45 = MEMORY[0x1C3BBC3A0](v44);
  v150[1](v43, v40);
  if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter() & 1) != 0 && *(_QWORD *)(v45 + 16))
  {
    if ((v39[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = v38;
        v49 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v49 = 0;
        _os_log_impl(&dword_1C2356000, v46, v47, "Already attempted profile slice resolution; yielding error response",
          v49,
          2u);
        v50 = v49;
        v38 = v48;
        MEMORY[0x1C3BBFF64](v50, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v51 = (void *)swift_allocError();
      *v52 = 67;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v51, 1, v142);

      ((void (*)(char *, uint64_t))v38)(v24, v15);
    }
    else
    {
      v39[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] = 1;
      swift_bridgeObjectRetain_n();
      v82 = Logger.logObject.getter();
      v83 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v82, v83))
      {
        v84 = swift_slowAlloc();
        v150 = v38;
        v85 = (uint8_t *)v84;
        v86 = swift_slowAlloc();
        v149 = (char *)v15;
        v87 = v86;
        *(_QWORD *)&v156[0] = v86;
        *(_DWORD *)v85 = 136315138;
        v88 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
        v89 = swift_bridgeObjectRetain();
        v90 = MEMORY[0x1C3BBEE9C](v89, v88);
        v91 = v24;
        v93 = v92;
        swift_bridgeObjectRelease();
        v159 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v90, v93, (uint64_t *)v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v24 = v91;
        v39 = v153;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v82, v83, "Adding profile slice resolution requests: %s", v85, 0xCu);
        swift_arrayDestroy();
        v94 = v87;
        v15 = (uint64_t)v149;
        MEMORY[0x1C3BBFF64](v94, -1, -1);
        v95 = v85;
        v38 = v150;
        MEMORY[0x1C3BBFF64](v95, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v96 = &v39[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest];
      swift_beginAccess();
      *(_QWORD *)&v96[*(int *)(v133 + 92)] = v45;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(), uint64_t))(*(_QWORD *)v39 + 224))(closure #3 in PommesSearchRequestProcessor.search_sync(completion:)partial apply, v143);
      ((void (*)(char *, uint64_t))v38)(v24, v15);
    }
LABEL_41:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v160);
    return swift_release();
  }
  v150 = v38;
  v149 = (char *)v15;
  v53 = swift_bridgeObjectRelease();
  v54 = *((_QWORD *)v39 + 5);
  v55 = *(void (**)(uint64_t))(*(_QWORD *)v39 + 152);
  v56 = (uint64_t)v137;
  v55(v53);
  v57 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v54 + 168))(v56, v24);
  v58 = outlined destroy of PommesSearchRequest(v56, type metadata accessor for PommesSearchRequest);
  v59 = *((_QWORD *)v39 + 2);
  v55(v58);
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 696))(v56);
  v60 = outlined destroy of PommesSearchRequest(v56, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1)
    v60 = swift_once();
  v61 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v60);
  v128 = v160;
  v129 = v24;
  v130 = v11;
  v62 = v138;
  Date.init()();
  v63 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v61 + 200);
  v130 = (char *)v127;
  v131 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v128) = 2;
  v63(&v159, 0xD00000000000002ALL, 0x80000001C2504380, 0, v62, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 341, "handleSuccess(_:_:_:)", 21, (_DWORD)v128, closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply);
  (*(void (**)(char *, uint64_t))(v139 + 8))(v62, v140);
  v64 = v159;
  v65 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v24);
  swift_bridgeObjectRetain_n();
  v66 = Logger.logObject.getter();
  v67 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v66, v67))
  {
    v68 = (uint8_t *)swift_slowAlloc();
    v69 = swift_slowAlloc();
    *(_QWORD *)&v156[0] = v69;
    *(_DWORD *)v68 = 136315138;
    v70 = type metadata accessor for PommesResult();
    v71 = MEMORY[0x1C3BBEEC0](v65, v70);
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v71, v72, (uint64_t *)v156);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v66, v67, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v68, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v69, -1, -1);
    MEMORY[0x1C3BBFF64](v68, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (!(v64 >> 62))
  {
    v73 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v73)
      goto LABEL_19;
LABEL_28:
    swift_bridgeObjectRelease();
    v78 = 0xE700000000000000;
    v76 = 0x6E776F6E6B6E55;
    v81 = 0;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_28;
LABEL_19:
  if ((v64 & 0xC000000000000001) != 0)
  {
    v125 = (void *)MEMORY[0x1C3BBF3F4](0, v64);
    swift_bridgeObjectRelease();
    v76 = dispatch thunk of Experience.pluginIdentifier.getter();
    v78 = v126;

    swift_bridgeObjectRetain();
    v79 = (id)MEMORY[0x1C3BBF3F4](0, v64);
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (*(_QWORD *)((v64 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v75 = *(id *)(v64 + 32);
    swift_bridgeObjectRelease();
    v76 = dispatch thunk of Experience.pluginIdentifier.getter();
    v78 = v77;

    v79 = *(id *)(v64 + 32);
LABEL_22:
    dispatch thunk of Experience.queryConfidence.getter();
    v81 = v80;

LABEL_29:
    swift_bridgeObjectRetain();
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = swift_slowAlloc();
      v100 = swift_slowAlloc();
      *(_QWORD *)&v156[0] = v100;
      *(_DWORD *)v99 = 136315394;
      swift_bridgeObjectRetain();
      v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v78, (uint64_t *)v156);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v99 + 12) = 2048;
      v155 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v97, v98, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v99, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v100, -1, -1);
      MEMORY[0x1C3BBFF64](v99, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v102 = (uint64_t)v151;
    v101 = v152;
    v103 = v153;
    v104 = v134;
    v158 = 0;
    v105 = type metadata accessor for PommesResponse();
    MEMORY[0x1E0C80A78](v105);
    *(&v132 - 8) = v64;
    *(&v132 - 7) = v65;
    v127[0] = v102;
    v127[1] = v103;
    v128 = (_QWORD *)v57;
    v129 = v104;
    v130 = &v158;
    v106 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v106)
    {
      v107 = v106;
      v108 = Logger.logObject.getter();
      v109 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v108, v109))
      {
        v110 = (uint8_t *)swift_slowAlloc();
        v154 = swift_slowAlloc();
        *(_QWORD *)&v156[0] = v154;
        *(_DWORD *)v110 = 136315138;
        v153 = v110 + 4;
        v111 = v102;
        v112 = objc_msgSend(v107, sel_debugDescription);
        v113 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v115 = v114;

        v102 = v111;
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v113, v115, (uint64_t *)v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        v101 = v152;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v108, v109, "PommesSearchRequestProcessor#handleSuccess response: %s", v110, 0xCu);
        v116 = v154;
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v116, -1, -1);
        MEMORY[0x1C3BBFF64](v110, -1, -1);

      }
      else
      {

      }
      v120 = v149;
      v157 = 0;
      memset(v156, 0, sizeof(v156));
      static CurareDonation.donateCurareInfo(for:with:into:)(v102, v107, (uint64_t)v156);
      outlined destroy of MediaUserStateCenter?((uint64_t)v156, &demangling cache variable for type metadata for CurareInteractionStream?);
      v124 = v107;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v106, 0, v142);

    }
    else
    {
      v117 = Logger.logObject.getter();
      v118 = static os_log_type_t.error.getter();
      v119 = os_log_type_enabled(v117, v118);
      v120 = v149;
      if (v119)
      {
        v121 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v121 = 0;
        _os_log_impl(&dword_1C2356000, v117, v118, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v121, 2u);
        MEMORY[0x1C3BBFF64](v121, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v122 = (void *)swift_allocError();
      *v123 = 0x80;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v122, 1, v142);

    }
    (*(void (**)(char *, uint64_t))(v135 + 8))(v101, v136);
    ((void (*)(uint64_t, char *))v150)(v102, v120);
    goto LABEL_41;
  }
  __break(1u);
  return result;
}

{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void *v49;
  _BYTE *v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t);
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  void *v60;
  char *v61;
  void (*v62)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  unint64_t v63;
  uint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t result;
  id v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  id v78;
  uint64_t v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  NSObject *v94;
  os_log_type_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint8_t *v99;
  char *v100;
  uint64_t v101;
  void *v102;
  id v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  NSObject *v113;
  os_log_type_t v114;
  BOOL v115;
  uint64_t v116;
  uint8_t *v117;
  void *v118;
  _BYTE *v119;
  id v120;
  void *v121;
  unint64_t v122;
  _QWORD v123[2];
  _QWORD *v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  char *v144;
  uint64_t v145;
  char *v146;
  char *v147;
  char *v148;
  uint8_t *v149;
  uint64_t v150;
  uint64_t v151;
  _OWORD v152[2];
  uint64_t v153;
  char v154;
  uint64_t v155;
  _QWORD v156[5];

  v149 = a3;
  v136 = type metadata accessor for Date();
  v135 = *(_QWORD *)(v136 - 8);
  MEMORY[0x1E0C80A78](v136);
  v134 = (char *)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for ClientExperienceSignals();
  v131 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132);
  v148 = (char *)&v128 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v129);
  v133 = (char *)&v128 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileResolutionRequest();
  v142 = *(_QWORD *)(v143 - 8);
  MEMORY[0x1E0C80A78](v143);
  v146 = (char *)&v128 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v145 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v144 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v128 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v128 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v128 - v22;
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a4;
  *(_QWORD *)(v24 + 24) = a5;
  v139 = v24;
  v156[3] = &type metadata for DefaultExperiencesResolver;
  v156[4] = &protocol witness table for DefaultExperiencesResolver;
  v156[0] = swift_allocObject();
  outlined init with copy of DefaultExperiencesResolver(a2, v156[0] + 16);
  v25 = *(int *)(type metadata accessor for PegasusSearchResponse(0) + 20);
  v130 = a1;
  v140 = v15;
  v26 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v26(v23, &a1[v25], v14);
  v27 = one-time initialization token for pommes;
  v138 = a4;
  swift_retain();
  v137 = a5;
  swift_retain();
  if (v27 != -1)
    swift_once();
  v28 = type metadata accessor for Logger();
  v29 = __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
  v26(v21, v23, v14);
  v150 = v29;
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  v32 = os_log_type_enabled(v30, v31);
  v147 = v23;
  if (v32)
  {
    v33 = (uint8_t *)swift_slowAlloc();
    v34 = swift_slowAlloc();
    *(_QWORD *)&v152[0] = v34;
    *(_DWORD *)v33 = 136315138;
    v26(v18, v21, v14);
    v35 = String.init<A>(describing:)();
    v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, (uint64_t *)v152);
    v23 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v37 = *(void (**)(char *, uint64_t))(v140 + 8);
    v37(v21, v14);
    _os_log_impl(&dword_1C2356000, v30, v31, "PireneResponse: %s", v33, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v34, -1, -1);
    MEMORY[0x1C3BBFF64](v33, -1, -1);
  }
  else
  {
    v37 = *(void (**)(char *, uint64_t))(v140 + 8);
    v37(v21, v14);
  }

  v38 = v149;
  v39 = v143;
  v40 = v142;
  v41 = v141;
  v42 = v144;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v43 = v146;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resolutionRequest.getter();
  v44 = (*(uint64_t (**)(char *, uint64_t))(v145 + 8))(v42, v41);
  v45 = MEMORY[0x1C3BBC3A0](v44);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v43, v39);
  if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.hasSiriInstruction.getter() & 1) != 0 && *(_QWORD *)(v45 + 16))
  {
    if ((v38[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] & 1) != 0)
    {
      swift_bridgeObjectRelease();
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_1C2356000, v46, v47, "Already attempted profile slice resolution; yielding error response",
          v48,
          2u);
        MEMORY[0x1C3BBFF64](v48, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v49 = (void *)swift_allocError();
      *v50 = 67;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v49, 1, v138);

      v37(v23, v14);
    }
    else
    {
      v38[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_hasAttemptedProfileSliceResolution] = 1;
      swift_bridgeObjectRetain_n();
      v81 = Logger.logObject.getter();
      v82 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc();
        v84 = swift_slowAlloc();
        v145 = v14;
        v85 = v84;
        *(_QWORD *)&v152[0] = v84;
        v146 = (char *)v37;
        *(_DWORD *)v83 = 136315138;
        v86 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
        v87 = swift_bridgeObjectRetain();
        v88 = MEMORY[0x1C3BBEE9C](v87, v86);
        v89 = v23;
        v91 = v90;
        swift_bridgeObjectRelease();
        v155 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v91, (uint64_t *)v152);
        v37 = (void (*)(char *, uint64_t))v146;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v23 = v89;
        v38 = v149;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v81, v82, "Adding profile slice resolution requests: %s", v83, 0xCu);
        swift_arrayDestroy();
        v92 = v85;
        v14 = v145;
        MEMORY[0x1C3BBFF64](v92, -1, -1);
        MEMORY[0x1C3BBFF64](v83, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v93 = &v38[OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest];
      swift_beginAccess();
      *(_QWORD *)&v93[*(int *)(v129 + 92)] = v45;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t (*)(void *, char), uint64_t))(*(_QWORD *)v38 + 224))(partial apply for closure #3 in PommesSearchRequestProcessor.search_sync(completion:), v139);
      v37(v23, v14);
    }
LABEL_41:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v156);
    return swift_release();
  }
  v145 = v14;
  v51 = swift_bridgeObjectRelease();
  v146 = (char *)v37;
  v52 = *((_QWORD *)v38 + 5);
  v53 = *(void (**)(uint64_t))(*(_QWORD *)v38 + 152);
  v54 = (uint64_t)v133;
  v53(v51);
  v55 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v52 + 168))(v54, v23);
  v56 = outlined destroy of PommesSearchRequest(v54, type metadata accessor for PommesSearchRequest);
  v57 = *((_QWORD *)v38 + 2);
  v53(v56);
  v58 = v148;
  (*(void (**)(uint64_t))(*(_QWORD *)v57 + 696))(v54);
  v59 = outlined destroy of PommesSearchRequest(v54, type metadata accessor for PommesSearchRequest);
  if (one-time initialization token for shared != -1)
    v59 = swift_once();
  v60 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v59);
  v124 = v156;
  v125 = v23;
  v126 = v58;
  v61 = v134;
  Date.init()();
  v62 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v60 + 200);
  v126 = (char *)v123;
  v127 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  LOBYTE(v124) = 2;
  v62(&v155, 0xD00000000000002ALL, 0x80000001C2504380, 0, v61, "SiriInformationSearch/PommesSearchRequestProcessor.swift", 56, 2, 341, "handleSuccess(_:_:_:)", 21, (_DWORD)v124, partial apply for closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:));
  (*(void (**)(char *, uint64_t))(v135 + 8))(v61, v136);
  v63 = v155;
  v64 = PommesSearchRequestProcessor.clientSearch(pegasusResponse:)((uint64_t)v23);
  swift_bridgeObjectRetain_n();
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v67 = (uint8_t *)swift_slowAlloc();
    v68 = swift_slowAlloc();
    *(_QWORD *)&v152[0] = v68;
    *(_DWORD *)v67 = 136315138;
    v69 = type metadata accessor for PommesResult();
    v70 = MEMORY[0x1C3BBEEC0](v64, v69);
    v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v70, v71, (uint64_t *)v152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v65, v66, "PommesSearchRequestProcessor#handleSuccess clientResults: %s", v67, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v68, -1, -1);
    MEMORY[0x1C3BBFF64](v67, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (!(v63 >> 62))
  {
    v72 = *(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v72)
      goto LABEL_19;
LABEL_28:
    swift_bridgeObjectRelease();
    v77 = 0xE700000000000000;
    v75 = 0x6E776F6E6B6E55;
    v80 = 0;
    goto LABEL_29;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
    goto LABEL_28;
LABEL_19:
  if ((v63 & 0xC000000000000001) != 0)
  {
    v121 = (void *)MEMORY[0x1C3BBF3F4](0, v63);
    swift_bridgeObjectRelease();
    v75 = dispatch thunk of Experience.pluginIdentifier.getter();
    v77 = v122;

    swift_bridgeObjectRetain();
    v78 = (id)MEMORY[0x1C3BBF3F4](0, v63);
    swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  if (*(_QWORD *)((v63 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v74 = *(id *)(v63 + 32);
    swift_bridgeObjectRelease();
    v75 = dispatch thunk of Experience.pluginIdentifier.getter();
    v77 = v76;

    v78 = *(id *)(v63 + 32);
LABEL_22:
    dispatch thunk of Experience.queryConfidence.getter();
    v80 = v79;

LABEL_29:
    swift_bridgeObjectRetain();
    v94 = Logger.logObject.getter();
    v95 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v94, v95))
    {
      v96 = swift_slowAlloc();
      v97 = swift_slowAlloc();
      *(_QWORD *)&v152[0] = v97;
      *(_DWORD *)v96 = 136315394;
      swift_bridgeObjectRetain();
      v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v77, (uint64_t *)v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v96 + 12) = 2048;
      v151 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v94, v95, "PommesResponse primaryPluginIdentifier %s     PommesResponse primaryQueryConfidence %f", (uint8_t *)v96, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v97, -1, -1);
      MEMORY[0x1C3BBFF64](v96, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v98 = (uint64_t)v147;
    v99 = v149;
    v100 = v130;
    v154 = 0;
    v101 = type metadata accessor for PommesResponse();
    MEMORY[0x1E0C80A78](v101);
    *(&v128 - 8) = v63;
    *(&v128 - 7) = v64;
    v123[0] = v98;
    v123[1] = v99;
    v124 = (_QWORD *)v55;
    v125 = v100;
    v126 = &v154;
    v102 = (void *)PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v102)
    {
      v103 = v102;
      v104 = Logger.logObject.getter();
      v105 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v104, v105))
      {
        v106 = (uint8_t *)swift_slowAlloc();
        v150 = swift_slowAlloc();
        *(_QWORD *)&v152[0] = v150;
        *(_DWORD *)v106 = 136315138;
        v149 = v106 + 4;
        v107 = v98;
        v108 = objc_msgSend(v103, sel_debugDescription);
        v109 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v111 = v110;

        v98 = v107;
        v151 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v111, (uint64_t *)v152);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v104, v105, "PommesSearchRequestProcessor#handleSuccess response: %s", v106, 0xCu);
        v112 = v150;
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v112, -1, -1);
        MEMORY[0x1C3BBFF64](v106, -1, -1);

      }
      else
      {

      }
      v116 = v145;
      v153 = 0;
      memset(v152, 0, sizeof(v152));
      static CurareDonation.donateCurareInfo(for:with:into:)(v98, v103, (uint64_t)v152);
      outlined destroy of MediaUserStateCenter?((uint64_t)v152, &demangling cache variable for type metadata for CurareInteractionStream?);
      v120 = v103;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v102, 0, v138);

    }
    else
    {
      v113 = Logger.logObject.getter();
      v114 = static os_log_type_t.error.getter();
      v115 = os_log_type_enabled(v113, v114);
      v116 = v145;
      if (v115)
      {
        v117 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v117 = 0;
        _os_log_impl(&dword_1C2356000, v113, v114, "PommesSearchRequestProcessor failed to build PommesResponse with given parameters", v117, 2u);
        MEMORY[0x1C3BBFF64](v117, -1, -1);
      }

      lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
      v118 = (void *)swift_allocError();
      *v119 = 0x80;
      closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v118, 1, v138);

    }
    (*(void (**)(char *, uint64_t))(v131 + 8))(v148, v132);
    ((void (*)(uint64_t, uint64_t))v146)(v98, v116);
    goto LABEL_41;
  }
  __break(1u);
  return result;
}

void specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v17[4];
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v23 = a4;
  v24 = a3;
  v22 = a2;
  v18 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1E0C80A78](v18);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v20 = *(_QWORD *)(v5 - 8);
  v21 = v5;
  MEMORY[0x1E0C80A78](v5);
  v19 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v17[2] = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v17[3] = (char *)v17 - v10;
  v11 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v12);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v13);
  v14 = type metadata accessor for PommesSearchRequest(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v16 = MEMORY[0x1E0C80A78](v15);
  MEMORY[0x1E0C80A78](v16);
  __asm { BR              X10 }
}

void sub_1C23FAA30()
{
  uint64_t v0;
  void *v1;
  _BYTE *v2;

  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  v1 = (void *)swift_allocError();
  *v2 = 67;
  closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v1, 1, *(_QWORD *)(v0 - 96));

}

void sub_1C23FAA88()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23FAA54);
}

void sub_1C23FAAB0()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23FAA54);
}

void sub_1C23FAAD8()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23FAA54);
}

void sub_1C23FAB00()
{
  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  swift_allocError();
  JUMPOUT(0x1C23FAA54);
}

uint64_t sub_1C23FAB28()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  char *v23;
  uint8_t *v24;
  int EnumCaseMultiPayload;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  *(_QWORD *)(v8 - 176) = v7;
  v9 = *(void (**)(uint64_t))(**(_QWORD **)(v8 - 112) + 152);
  swift_retain();
  v10 = swift_retain();
  *(_QWORD *)(v8 - 168) = v9;
  v9(v10);
  LOBYTE(v9) = *(_BYTE *)(v1 + *(int *)(v5 + 80));
  v11 = outlined destroy of PommesSearchRequest(v1, type metadata accessor for PommesSearchRequest);
  if ((v9 & 1) == 0)
    goto LABEL_17;
  v12 = *(void (**)(void))(v8 - 168);
  ((void (*)(uint64_t))v12)(v11);
  outlined init with copy of MediaUserStateCenter?(v6 + *(int *)(v5 + 40), v4, &demangling cache variable for type metadata for PommesContext?);
  outlined destroy of PommesSearchRequest(v6, type metadata accessor for PommesSearchRequest);
  v13 = type metadata accessor for PommesContext();
  v14 = *(_QWORD *)(v13 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v4, 1, v13) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v4, &demangling cache variable for type metadata for PommesContext?);
LABEL_17:
    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    v32 = (void *)swift_allocError();
    *v33 = -127;
    closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v32, 1, *(_QWORD *)(v8 - 96));

    swift_release();
    return swift_release();
  }
  v15 = PommesContext.domain.getter();
  v17 = v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v4, v13);
  if (!v17)
    goto LABEL_17;
  if (v15 == 0x656E6F6870 && v17 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
      goto LABEL_17;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, v21);
  v23 = *(char **)(v8 - 176);
  if (v22)
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1C2356000, v20, v21, "Handling no results from fallback request for phone domain as successful", v24, 2u);
    MEMORY[0x1C3BBFF64](v24, -1, -1);
  }

  v12();
  outlined init with copy of PommesSearchRequest(v3, v2, type metadata accessor for PommesSearchRequest.ParseState);
  outlined destroy of PommesSearchRequest(v3, type metadata accessor for PommesSearchRequest);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v26 = v2
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                   + 64);
      v27 = *(_QWORD *)(v8 - 152);
      outlined init with take of TCUMappedNLResponse?(v26, v27);
      v28 = *(_QWORD *)(v8 - 160);
      outlined init with copy of MediaUserStateCenter?(v27, v28, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v29 = type metadata accessor for TCUMappedNLResponse();
      v30 = *(_QWORD *)(v29 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v28, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v31 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v39 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
        v31 = NLParseResponse.userParses.getter();

      }
      v37 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
      v38 = v27;
    }
    else
    {
      swift_bridgeObjectRelease();
      v31 = *(_QWORD *)(v2 + 16);
      v36 = v2
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                   + 64);
      swift_bridgeObjectRelease();
      v37 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
      v38 = v36;
    }
    outlined destroy of MediaUserStateCenter?(v38, v37);
  }
  else
  {
    swift_bridgeObjectRelease();
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined init with take of PerformanceUtil.Ticket(v2 + *(int *)(v35 + 48), (uint64_t)v0, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v31 = *v0;
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v0, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D1E0], MEMORY[0x1E0D6D198]);
  v40 = *(_QWORD *)(v8 - 136);
  v41 = *(_QWORD *)(v8 - 120);
  static Message.with(_:)();
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.init()();
  v42 = *(_QWORD *)(v8 - 128);
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(&v23[*(int *)(*(_QWORD *)(v8 - 144) + 20)], v40, v41);
  v43 = *(_QWORD *)(v8 - 96);
  swift_retain();
  v44 = *(_QWORD *)(v8 - 104);
  swift_retain();
  specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v23, v31, *(uint8_t **)(v8 - 112), v43, v44);
  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest((uint64_t)v23, type metadata accessor for PegasusSearchResponse);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v40, v41);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C23FC054(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
}

uint64_t ObjC metadata update function for PommesSearchRequestProcessor()
{
  return type metadata accessor for PommesSearchRequestProcessor();
}

uint64_t type metadata completion function for PommesSearchRequestProcessor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PommesSearchRequest(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PommesSearchRequestProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.pommesSearchRequest.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.__allocating_init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.search(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.search(enabled:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PommesSearchRequestProcessor.search_sync(completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t sub_1C23FC17C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C23FC1A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for PommesCandidateId();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(void *a1, char a2)
{
  uint64_t *v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(type metadata accessor for PommesCandidateId() - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in PommesSearchRequestProcessor.clientSearchForMusic(_:musicDomainClient:)(a1, v4, v2[2], v2[3], v2[4], (uint64_t)v2 + v6, *(uint64_t *)((char *)v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

id outlined copy of Result<[PommesResult], Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)
    return a1;
  else
    return (id)swift_bridgeObjectRetain();
}

uint64_t outlined assign with take of PommesSearchRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(a1, a2 & 1, *(_QWORD *)(v2 + 16));
}

uint64_t sub_1C23FC300()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

unint64_t lazy protocol witness table accessor for type [Data] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [Data] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v2 = lazy protocol witness table accessor for type Data and conformance Data();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [Data] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [Data] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [Data]);
    v2 = lazy protocol witness table accessor for type Data and conformance Data();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF40], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Data] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Data and conformance Data()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0CB0350], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Data and conformance Data;
  if (!lazy protocol witness table cache variable for type Data and conformance Data)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0CB0378], MEMORY[0x1E0CB0338]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Data and conformance Data);
  }
  return result;
}

uint64_t objectdestroy_22Tm()
{
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t objectdestroy_34Tm()
{
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, char a2)
{
  uint64_t v2;

  return closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(a1, a2 & 1, *(uint64_t (**)(void *, uint64_t))(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD **)(v2 + 32));
}

void partial apply for closure #2 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(uint64_t a1)
{
  uint64_t v1;

  closure #2 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_1C23FC480()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t sub_1C23FC4A4()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)partial apply@<X0>(uint64_t *a1@<X8>)
{
  return partial apply for closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)(a1);
}

uint64_t WholeHomeAudioPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static WholeHomeAudioPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

uint64_t WholeHomeAudioPreflightClient.isPlayEverywhereTask(pommesTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  _BOOL4 v18;
  uint8_t *v19;
  uint64_t v20;
  _QWORD v22[11];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29[5];

  v23 = type metadata accessor for UsoEntity_common_UserEntity.DefinedValues();
  v25 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v22[4] = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_UserEntity.DefinedValues?, UsoEntity_common_UserEntity.DefinedValues?));
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_UserEntity.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v22[10] = (char *)v22 - v12;
  MEMORY[0x1E0C80A78](v11);
  v26 = (char *)v22 - v13;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.debug.getter();
  v18 = os_log_type_enabled(v16, v17);
  v22[5] = v10;
  v22[2] = v15;
  v22[3] = a3;
  v22[1] = a2;
  if (v18)
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v20 = swift_slowAlloc();
    v29[0] = v20;
    *(_DWORD *)v19 = 136315138;
    v28 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001C2504420, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v16, v17, "Checking %s...", v19, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v20, -1, -1);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (v29[3])
  {
    type metadata accessor for UsoTask_play_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      UsoTask.arguments.getter();
      JUMPOUT(0x1C23FC844);
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t WholeHomeAudioPreflightClient.isPlayMusicFromTask(pommesTask:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v6[4];

  if (one-time initialization token for pommes != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v6[0] = v4;
    *(_DWORD *)v3 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000020, 0x80000001C2504450, v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v1, v2, "Checking %s...", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v4, -1, -1);
    MEMORY[0x1C3BBFF64](v3, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (v6[3])
  {
    type metadata accessor for UsoTask_play_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      UsoTask.arguments.getter();
      JUMPOUT(0x1C23FD118);
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t WholeHomeAudioPreflightClient.isUpdateLocationTask(pommesTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD v38[7];
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  char *v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[5];

  v38[1] = a2;
  v5 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v38[4] = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v39);
  v9 = (char *)v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v38[5] = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v47 = (char *)v38 - v14;
  MEMORY[0x1E0C80A78](v13);
  v40 = (char *)v38 - v15;
  v16 = type metadata accessor for ListOperators();
  v17 = *(_QWORD *)(v16 - 8);
  v48 = v16;
  v49 = v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
LABEL_27:
    swift_once();
  v20 = type metadata accessor for Logger();
  v38[2] = __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  v23 = os_log_type_enabled(v21, v22);
  v38[6] = v5;
  v41 = v6;
  v46 = v9;
  v38[3] = a3;
  if (v23)
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v5 = swift_slowAlloc();
    v51[0] = v5;
    *(_DWORD *)v24 = 136315138;
    v6 = (uint64_t)(v24 + 4);
    v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000021, 0x80000001C2504480, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v21, v22, "Checking %s...", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v5, -1, -1);
    MEMORY[0x1C3BBFF64](v24, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (v51[3])
  {
    type metadata accessor for UsoTask_update_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      v25 = UsoTask.codeGenUserEntities.getter();
      v26 = v25;
      if (v25 >> 62)
      {
        swift_bridgeObjectRetain();
        v27 = _CocoaArrayWrapper.endIndex.getter();
        if (v27)
          goto LABEL_8;
      }
      else
      {
        v27 = *(_QWORD *)((v25 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v27)
        {
LABEL_8:
          v38[0] = a1;
          v45 = v26 & 0xC000000000000001;
          LODWORD(v44) = *MEMORY[0x1E0DA04F8];
          v28 = 4;
          v42 = (char *)v27;
          v43 = v26;
          v29 = v48;
          do
          {
            v30 = v28 - 4;
            if (v45)
            {
              v31 = MEMORY[0x1C3BBF3F4](v28 - 4, v26);
              a3 = v31;
              v9 = (char *)(v28 - 3);
              if (__OFADD__(v30, 1))
                goto LABEL_26;
            }
            else
            {
              a3 = *(_QWORD *)(v26 + 8 * v28);
              v31 = swift_retain();
              v9 = (char *)(v28 - 3);
              if (__OFADD__(v30, 1))
              {
LABEL_26:
                __break(1u);
                goto LABEL_27;
              }
            }
            if (MEMORY[0x1C3BBCD00](v31, v32))
            {
              v6 = dispatch thunk of CodeGenExpression.operatorAsString.getter();
              a1 = v33;
              swift_release();
            }
            else
            {
              v6 = 0;
              a1 = 0;
            }
            v34 = v49;
            (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v19, v44, v29);
            v5 = ListOperators.rawValue.getter();
            v36 = v35;
            (*(void (**)(char *, uint64_t))(v34 + 8))(v19, v29);
            if (a1)
            {
              if (v6 == v5 && a1 == v36)
              {
                swift_bridgeObjectRelease();
                swift_release();
                swift_bridgeObjectRelease();
LABEL_25:
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                UsoTask.arguments.getter();
                JUMPOUT(0x1C23FDB04);
              }
              v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_release();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v5 & 1) != 0)
                goto LABEL_25;
            }
            else
            {
              swift_release();
              swift_bridgeObjectRelease();
            }
            ++v28;
            v26 = v43;
          }
          while (v9 != v42);
        }
      }
      swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v51, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t WholeHomeAudioPreflightClient.isMultiLocationPlayTask(pommesTask:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint8_t *v17;
  uint64_t v18;
  _QWORD v20[9];
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26[5];

  v20[3] = a3;
  v20[1] = a2;
  v4 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  v22 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v20[6] = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  MEMORY[0x1E0C80A78](v21);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v23 = (char *)v20 - v11;
  MEMORY[0x1E0C80A78](v10);
  v24 = (char *)v20 - v12;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  v20[2] = __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v20[8] = v9;
  if (v16)
  {
    v20[5] = a1;
    v17 = (uint8_t *)swift_slowAlloc();
    v18 = swift_slowAlloc();
    v26[0] = v18;
    *(_DWORD *)v17 = 136315138;
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000024, 0x80000001C25044B0, v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v14, v15, "Checking %s...", v17, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v18, -1, -1);
    MEMORY[0x1C3BBFF64](v17, -1, -1);
  }

  static UsoTask_CodegenConverter.convert(task:)();
  if (v26[3])
  {
    type metadata accessor for UsoTask_play_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      UsoTask.arguments.getter();
      JUMPOUT(0x1C23FE52CLL);
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t WholeHomeAudioPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t WholeHomeAudioPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t WholeHomeAudioPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance WholeHomeAudioPreflightClient()
{
  return 0xD00000000000001DLL;
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t sub_1C23FEF18()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v2 + 16))(*a1, a1[1], a1[2]);
  *a2 = result & 1;
  return result;
}

uint64_t type metadata accessor for WholeHomeAudioPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for WholeHomeAudioPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isPlayEverywhereTask(pommesTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isPlayMusicFromTask(pommesTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isUpdateLocationTask(pommesTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.isMultiLocationPlayTask(pommesTask:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of WholeHomeAudioPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

const char *CommonAudio.beatsOne.unsafeMutableAddressor()
{
  return "Beats 1";
}

uint64_t static CommonAudio.beatsOne.getter()
{
  return 0x31207374616542;
}

const char *CommonAudio.disambiguationRole.unsafeMutableAddressor()
{
  return "disambiguation";
}

uint64_t static CommonAudio.disambiguationRole.getter()
{
  return 0x6769626D61736964;
}

uint64_t CommonAudio.Verb.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C23FF09C + 4 * byte_1C24FC8D0[a1]))(2036427888, 0xE400000000000000);
}

uint64_t sub_1C23FF09C()
{
  return 0x6269726373627573;
}

unint64_t sub_1C23FF194()
{
  return 0xD000000000000012;
}

uint64_t sub_1C23FF1B0()
{
  return 6579297;
}

uint64_t sub_1C23FF1C0()
{
  return 0x656C62616E65;
}

uint64_t sub_1C23FF1D4()
{
  return 0x656C6261736964;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.Verb.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.Verb.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(_QWORD))CommonAudio.Verb.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.Verb.rawValue.getter);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Verb@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized CommonAudio.Verb.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Verb@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = CommonAudio.Verb.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

SiriInformationSearch::CommonAudio::UsoEntity_optional __swiftcall CommonAudio.UsoEntity.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of CommonAudio.UsoEntity.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::UsoEntity_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.UsoEntity.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0xD000000000000010;
  else
    return 0x6E456F4E5F6F7375;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.UsoEntity(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0xD000000000000010;
  else
    v3 = 0x6E456F4E5F6F7375;
  if (v2)
    v4 = 0xEC00000079746974;
  else
    v4 = 0x80000001C25018F0;
  if (*a2)
    v5 = 0xD000000000000010;
  else
    v5 = 0x6E456F4E5F6F7375;
  if (*a2)
    v6 = 0x80000001C25018F0;
  else
    v6 = 0xEC00000079746974;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.UsoEntity()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.UsoEntity()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.UsoEntity()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of CommonAudio.UsoEntity.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.UsoEntity(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0x6E456F4E5F6F7375;
  if (*v1)
    v2 = 0xD000000000000010;
  v3 = 0x80000001C25018F0;
  if (!*v1)
    v3 = 0xEC00000079746974;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t CommonAudio.Attribute.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C23FF584 + 4 * byte_1C24FC8E1[a1]))(0x697472416D6F7266, 0xEA00000000007473);
}

uint64_t sub_1C23FF584()
{
  return 0x676E6F536D6F7266;
}

uint64_t sub_1C23FF59C()
{
  return 0x75626C416D6F7266;
}

uint64_t sub_1C23FF5B8()
{
  return 0x7478654E79616C70;
}

uint64_t sub_1C23FF5D0()
{
  return 0x776F4E79616C70;
}

uint64_t sub_1C23FF5E8()
{
  return 0x7473614C79616C70;
}

uint64_t sub_1C23FF600()
{
  return 0x7974696E69666661;
}

uint64_t sub_1C23FF618()
{
  return 0x6E656D6D6F636572;
}

uint64_t sub_1C23FF638()
{
  return 0x7265766F63736964;
}

unint64_t sub_1C23FF658()
{
  return 0xD000000000000018;
}

uint64_t sub_1C23FF674()
{
  return 1954047342;
}

uint64_t sub_1C23FF684()
{
  return 0x64656D616ELL;
}

uint64_t sub_1C23FF698()
{
  return 0x73756F6976657270;
}

uint64_t sub_1C23FF6B0()
{
  return 0x44657361656C6572;
}

uint64_t sub_1C23FF6D0()
{
  return 0x6E6F697461727564;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Attribute(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.Attribute.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Attribute(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.Attribute.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Attribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(_QWORD))CommonAudio.Attribute.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Attribute(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.Attribute.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Attribute@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CommonAudio.Attribute.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Attribute@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = CommonAudio.Attribute.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

SiriInformationSearch::CommonAudio::Modifier_optional __swiftcall CommonAudio.Modifier.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of CommonAudio.Modifier.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::Modifier_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.Modifier.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E65726566666964;
  else
    return 0x664F65726F6DLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Modifier(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x6E65726566666964;
  else
    v3 = 0x664F65726F6DLL;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xED00006E61685474;
  if (*a2)
    v5 = 0x6E65726566666964;
  else
    v5 = 0x664F65726F6DLL;
  if (*a2)
    v6 = 0xED00006E61685474;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Modifier()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Modifier()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Modifier()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Modifier@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of CommonAudio.Modifier.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Modifier(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x664F65726F6DLL;
  if (*v1)
    v2 = 0x6E65726566666964;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xED00006E61685474;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t CommonAudio.Noun.rawValue.getter(char a1)
{
  if (!a1)
    return 0x7972617262696CLL;
  if (a1 == 1)
    return 0x317374616562;
  return 0xD000000000000011;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Noun(_BYTE *a1, _BYTE *a2)
{
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char v11;

  v2 = *a1;
  v3 = 0xE600000000000000;
  v4 = 0x317374616562;
  v5 = 0x80000001C2501FA0;
  if (v2 != 1)
  {
    v4 = 0xD000000000000011;
    v3 = 0x80000001C2501FA0;
  }
  if (*a1)
    v6 = v4;
  else
    v6 = 0x7972617262696CLL;
  if (v2)
    v7 = v3;
  else
    v7 = 0xE700000000000000;
  v8 = 0x317374616562;
  if (*a2 == 1)
    v5 = 0xE600000000000000;
  else
    v8 = 0xD000000000000011;
  if (*a2)
    v9 = v8;
  else
    v9 = 0x7972617262696CLL;
  if (*a2)
    v10 = v5;
  else
    v10 = 0xE700000000000000;
  if (v6 == v9 && v7 == v10)
    v11 = 1;
  else
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v11 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Noun()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Noun()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Noun()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Noun@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CommonAudio.Noun.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Noun(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  int v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  BOOL v6;
  uint64_t v7;

  v2 = *v1;
  v3 = 0xE700000000000000;
  v4 = 0xE600000000000000;
  v5 = 0x317374616562;
  if (v2 != 1)
  {
    v5 = 0xD000000000000011;
    v4 = 0x80000001C2501FA0;
  }
  v6 = v2 == 0;
  if (*v1)
    v7 = v5;
  else
    v7 = 0x7972617262696CLL;
  if (!v6)
    v3 = v4;
  *a1 = v7;
  a1[1] = v3;
}

SiriInformationSearch::CommonAudio::RadioType_optional __swiftcall CommonAudio.RadioType.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of CommonAudio.RadioType.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::RadioType_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.RadioType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 28001;
  else
    return 28006;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.RadioType(_BYTE *a1, _BYTE *a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;

  if (*a1)
    v2 = 28001;
  else
    v2 = 28006;
  if (*a2)
    v3 = 28001;
  else
    v3 = 28006;
  if (v2 == v3)
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.RadioType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.RadioType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.RadioType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.RadioType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of CommonAudio.RadioType.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.RadioType(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;

  v2 = 28006;
  if (*v1)
    v2 = 28001;
  *a1 = v2;
  a1[1] = 0xE200000000000000;
}

uint64_t CommonAudio.Confirmation.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C23FFF90 + 4 * byte_1C24FC8F0[a1]))(7562617, 0xE300000000000000);
}

uint64_t sub_1C23FFF90()
{
  return 28526;
}

uint64_t sub_1C23FFF9C()
{
  return 0x6C65636E6163;
}

uint64_t sub_1C23FFFB0()
{
  return 0x6F666E4965726F6DLL;
}

void protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Confirmation(uint64_t a1)
{
  __asm { BR              X11 }
}

uint64_t sub_1C240000C@<X0>(uint64_t a1@<X8>)
{
  return ((uint64_t (*)(uint64_t))((char *)sub_1C240005C + 4 * byte_1C24FC8F8[a1]))(28526);
}

uint64_t sub_1C240005C(uint64_t a1)
{
  uint64_t v1;
  char v2;

  if (a1 == 28526 && v1 == 0xE200000000000000)
    v2 = 1;
  else
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v2 & 1;
}

void protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Confirmation()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1C2400138()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance CommonAudio.Confirmation()
{
  __asm { BR              X10 }
}

uint64_t sub_1C24001CC()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

void protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Confirmation()
{
  unsigned __int8 *v0;
  uint64_t v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  __asm { BR              X9 }
}

Swift::Int sub_1C2400258()
{
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Confirmation@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CommonAudio.Confirmation.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Confirmation()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(void))((char *)sub_1C240030C + 4 * byte_1C24FC908[*v0]))();
}

void sub_1C240030C(_QWORD *a1@<X8>)
{
  *a1 = 28526;
  a1[1] = 0xE200000000000000;
}

void sub_1C240031C(_QWORD *a1@<X8>)
{
  *a1 = 0x6C65636E6163;
  a1[1] = 0xE600000000000000;
}

void sub_1C2400334(_QWORD *a1@<X8>)
{
  *a1 = 0x6F666E4965726F6DLL;
  a1[1] = 0xE800000000000000;
}

unint64_t one-time initialization function for mappingDecade()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingDecade);
  static CommonAudio.Decade.mappingDecade = result;
  return result;
}

uint64_t *CommonAudio.Decade.mappingDecade.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingDecade != -1)
    swift_once();
  return &static CommonAudio.Decade.mappingDecade;
}

uint64_t static CommonAudio.Decade.mappingDecade.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingDecade);
}

unint64_t one-time initialization function for mappingToStartYear()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingToStartYear);
  static CommonAudio.Decade.mappingToStartYear = result;
  return result;
}

uint64_t *CommonAudio.Decade.mappingToStartYear.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingToStartYear != -1)
    swift_once();
  return &static CommonAudio.Decade.mappingToStartYear;
}

uint64_t static CommonAudio.Decade.mappingToStartYear.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingToStartYear);
}

uint64_t CommonAudio.Decade.releaseDate.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t result;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, char *, uint64_t);
  void (*v35)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v36;
  id v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  void (*v41)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  void (*v43)(char *, _QWORD, uint64_t, uint64_t);
  void (*v44)(char *, uint64_t);
  unsigned int v45;
  void (*v46)(char *);
  uint64_t v47;
  char *v48;
  char *v49;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateComponents?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v49 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v48 = (char *)&v40 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TimeZone?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Calendar.Identifier();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Calendar?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DateComponents();
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v40 - v21;
  if (one-time initialization token for mappingToStartYear != -1)
  {
    v39 = v20;
    swift_once();
    v20 = v39;
  }
  v23 = static CommonAudio.Decade.mappingToStartYear;
  if (!*(_QWORD *)(static CommonAudio.Decade.mappingToStartYear + 16))
    return 0;
  v47 = v20;
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  if ((v25 & 1) == 0)
    return 0;
  v40 = v19;
  v26 = *(_QWORD *)(*(_QWORD *)(v23 + 56) + 8 * v24);
  v45 = *MEMORY[0x1E0CB0EF8];
  v46 = *(void (**)(char *))(v10 + 104);
  v46(v12);
  Calendar.init(identifier:)();
  v44 = *(void (**)(char *, uint64_t))(v10 + 8);
  v44(v12, v9);
  v27 = type metadata accessor for Calendar();
  v28 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56);
  v42 = v27;
  v43 = v28;
  v28(v15, 0, 1, v27);
  v29 = type metadata accessor for TimeZone();
  v41 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56);
  v41(v8, 1, 1, v29);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  ((void (*)(char *, _QWORD, uint64_t))v46)(v12, v45, v9);
  Calendar.init(identifier:)();
  v44(v12, v9);
  v43(v15, 0, 1, v42);
  result = ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v41)(v8, 1, 1, v29);
  if (!__OFADD__(v26, 9))
  {
    v31 = v40;
    DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
    type metadata accessor for INDateComponentsRange();
    v33 = v47;
    v32 = (uint64_t)v48;
    v34 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v34(v48, v22, v16);
    v35 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v33 + 56);
    v35(v32, 0, 1, v16);
    v36 = (uint64_t)v49;
    v34(v49, v31, v16);
    v35(v36, 0, 1, v16);
    v37 = INDateComponentsRange.__allocating_init(start:end:)(v32, v36);
    v38 = *(void (**)(char *, uint64_t))(v33 + 8);
    v38(v31, v16);
    v38(v22, v16);
    return (uint64_t)v37;
  }
  __break(1u);
  return result;
}

id INDateComponentsRange.__allocating_init(start:end:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int (*v6)(uint64_t, uint64_t, uint64_t);
  Class isa;
  Class v8;
  id v9;

  v4 = type metadata accessor for DateComponents();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  isa = 0;
  if (v6(a1, 1, v4) != 1)
  {
    isa = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  if (v6(a2, 1, v4) == 1)
  {
    v8 = 0;
  }
  else
  {
    v8 = DateComponents._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a2, v4);
  }
  v9 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStartDateComponents_endDateComponents_, isa, v8);

  return v9;
}

uint64_t CommonAudio.Decade.rawValue.getter(char a1)
{
  return *(_QWORD *)&a1920s_2[8 * a1];
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Decade(char *a1, char *a2)
{
  char v2;
  uint64_t v3;
  char v4;

  v2 = *a2;
  v3 = CommonAudio.Decade.rawValue.getter(*a1);
  if (v3 == CommonAudio.Decade.rawValue.getter(v2))
    v4 = 1;
  else
    v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Decade()
{
  char *v0;
  char v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  CommonAudio.Decade.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Decade()
{
  char *v0;

  CommonAudio.Decade.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Decade()
{
  char *v0;
  char v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  CommonAudio.Decade.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Decade@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CommonAudio.Decade.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Decade@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;

  result = CommonAudio.Decade.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = 0xE600000000000000;
  return result;
}

unint64_t one-time initialization function for mappingMediaSortOrder()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingMediaSortOrder);
  static CommonAudio.Sort.mappingMediaSortOrder = result;
  return result;
}

uint64_t *CommonAudio.Sort.mappingMediaSortOrder.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingMediaSortOrder != -1)
    swift_once();
  return &static CommonAudio.Sort.mappingMediaSortOrder;
}

uint64_t static CommonAudio.Sort.mappingMediaSortOrder.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingMediaSortOrder);
}

uint64_t CommonAudio.Sort.sortOrder.getter(char a1)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  if (one-time initialization token for mappingMediaSortOrder != -1)
    swift_once();
  v2 = static CommonAudio.Sort.mappingMediaSortOrder;
  if (*(_QWORD *)(static CommonAudio.Sort.mappingMediaSortOrder + 16))
  {
    specialized __RawDictionaryStorage.find<A>(_:)(a1);
    if ((v4 & 1) != 0)
      return *(_QWORD *)(*(_QWORD *)(v2 + 56) + 8 * v3);
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v13 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v7, v8, "CommonAudio#Sort#sortOrder recieved unregistered decade: %s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v10, -1, -1);
    MEMORY[0x1C3BBFF64](v9, -1, -1);
  }

  return 0;
}

uint64_t CommonAudio.Sort.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2400E3C + 4 * byte_1C24FC90C[a1]))(0x72616C75706F70, 0xE700000000000000);
}

uint64_t sub_1C2400E3C()
{
  return 0x616C75706F706E75;
}

uint64_t sub_1C2400E58()
{
  return 1953719650;
}

uint64_t sub_1C2400E68()
{
  return 0x7473726F77;
}

uint64_t sub_1C2400E7C()
{
  return 0x74736577656ELL;
}

uint64_t sub_1C2400E90()
{
  return 0x747365646C6FLL;
}

uint64_t sub_1C2400EA4()
{
  return 0x74736574746F68;
}

uint64_t sub_1C2400EB8()
{
  return 0x6572636F6964656DLL;
}

uint64_t sub_1C2400ED0()
{
  return 0x7473657461657267;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Sort(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.Sort.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Sort(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.Sort.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Sort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(_QWORD))CommonAudio.Sort.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Sort(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.Sort.rawValue.getter);
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Sort@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized CommonAudio.Sort.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Sort@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = CommonAudio.Sort.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

BOOL CommonAudio.Reference.mediaReference.getter(char a1)
{
  return (a1 & 1) == 0;
}

SiriInformationSearch::CommonAudio::Reference_optional __swiftcall CommonAudio.Reference.init(rawValue:)(Swift::String rawValue)
{
  Swift::OpaquePointer v1;

  v1._rawValue = &outlined read-only object #0 of CommonAudio.Reference.init(rawValue:);
  return (SiriInformationSearch::CommonAudio::Reference_optional)CommonAudio.UsoEntity.init(rawValue:)(rawValue, v1);
}

uint64_t CommonAudio.UsoEntity.init(rawValue:)(Swift::String string, Swift::OpaquePointer cases)
{
  void *object;
  Swift::String v3;
  Swift::Int v5;
  unsigned int v6;

  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  v5 = _findStringSwitchCase(cases:string:)(cases, v3);
  swift_bridgeObjectRelease();
  if (v5 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (v5)
    return v6;
  else
    return 0;
}

uint64_t CommonAudio.Reference.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x696E696665646E69;
  else
    return 0x6574696E69666564;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Reference(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x696E696665646E69;
  else
    v3 = 0x6574696E69666564;
  if (v2)
    v4 = 0xE800000000000000;
  else
    v4 = 0xEA00000000006574;
  if (*a2)
    v5 = 0x696E696665646E69;
  else
    v5 = 0x6574696E69666564;
  if (*a2)
    v6 = 0xEA00000000006574;
  else
    v6 = 0xE800000000000000;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Reference()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Reference()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Reference()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.Reference@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::OpaquePointer v2;

  v2._rawValue = &outlined read-only object #0 of CommonAudio.Reference.init(rawValue:);
  return protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity(v2, a1, a2);
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.UsoEntity@<X0>(Swift::OpaquePointer cases@<0:X3>, Swift::String *a2@<X0>, char *a3@<X8>)
{
  Swift::Int v4;
  uint64_t result;
  char v6;

  v4 = _findStringSwitchCase(cases:string:)(cases, *a2);
  result = swift_bridgeObjectRelease();
  if (v4 == 1)
    v6 = 1;
  else
    v6 = 2;
  if (!v4)
    v6 = 0;
  *a3 = v6;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.Reference(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 0x6574696E69666564;
  if (*v1)
    v2 = 0x696E696665646E69;
  v3 = 0xE800000000000000;
  if (*v1)
    v3 = 0xEA00000000006574;
  *a1 = v2;
  a1[1] = v3;
}

unint64_t one-time initialization function for mappingMediaType()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(unint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?)>);
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?));
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FD170;
  v5 = v4 + v3;
  v6 = *(int *)(v0 + 48);
  v7 = *MEMORY[0x1E0DA1DA0];
  v8 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104);
  v9(v5, v7, v8);
  *(_BYTE *)(v5 + v6) = 0;
  v10 = *(int *)(v0 + 48);
  v9(v5 + v2, *MEMORY[0x1E0DA1DC0], v8);
  *(_BYTE *)(v5 + v2 + v10) = 1;
  v11 = *(int *)(v0 + 48);
  v9(v5 + 2 * v2, *MEMORY[0x1E0DA1DB8], v8);
  *(_BYTE *)(v5 + 2 * v2 + v11) = 2;
  v12 = *(int *)(v0 + 48);
  v9(v5 + 3 * v2, *MEMORY[0x1E0DA1E10], v8);
  *(_BYTE *)(v5 + 3 * v2 + v12) = 3;
  v13 = *(int *)(v0 + 48);
  v9(v5 + 4 * v2, *MEMORY[0x1E0DA1E08], v8);
  *(_BYTE *)(v5 + 4 * v2 + v13) = 4;
  v14 = *(int *)(v0 + 48);
  v9(v5 + 5 * v2, *MEMORY[0x1E0DA1D68], v8);
  *(_BYTE *)(v5 + 5 * v2 + v14) = 5;
  v15 = *(int *)(v0 + 48);
  v9(v5 + 6 * v2, *MEMORY[0x1E0DA1D30], v8);
  *(_BYTE *)(v5 + 6 * v2 + v15) = 6;
  v16 = *(int *)(v0 + 48);
  v9(v5 + 7 * v2, *MEMORY[0x1E0DA1D90], v8);
  *(_BYTE *)(v5 + 7 * v2 + v16) = 7;
  v17 = *(int *)(v0 + 48);
  v9(v5 + 8 * v2, *MEMORY[0x1E0DA1DF0], v8);
  *(_BYTE *)(v5 + 8 * v2 + v17) = 8;
  v18 = *(int *)(v0 + 48);
  v9(v5 + 9 * v2, *MEMORY[0x1E0DA1E00], v8);
  *(_BYTE *)(v5 + 9 * v2 + v18) = 9;
  v19 = *(int *)(v0 + 48);
  v9(v5 + 10 * v2, *MEMORY[0x1E0DA1D38], v8);
  *(_BYTE *)(v5 + 10 * v2 + v19) = 10;
  v20 = *(int *)(v0 + 48);
  v9(v5 + 11 * v2, *MEMORY[0x1E0DA1DB0], v8);
  *(_BYTE *)(v5 + 11 * v2 + v20) = 11;
  v21 = *(int *)(v0 + 48);
  v9(v5 + 12 * v2, *MEMORY[0x1E0DA1D80], v8);
  *(_BYTE *)(v5 + 12 * v2 + v21) = 12;
  v22 = *(int *)(v0 + 48);
  v9(v5 + 13 * v2, *MEMORY[0x1E0DA1DD8], v8);
  *(_BYTE *)(v5 + 13 * v2 + v22) = 13;
  v23 = *(int *)(v0 + 48);
  v9(v5 + 14 * v2, *MEMORY[0x1E0DA1D98], v8);
  *(_BYTE *)(v5 + 14 * v2 + v23) = 14;
  v24 = *(int *)(v0 + 48);
  v9(v5 + 15 * v2, *MEMORY[0x1E0DA1E18], v8);
  *(_BYTE *)(v5 + 15 * v2 + v24) = 15;
  v25 = *(int *)(v0 + 48);
  v9(v5 + 16 * v2, *MEMORY[0x1E0DA1D78], v8);
  *(_BYTE *)(v5 + 16 * v2 + v25) = 16;
  v26 = *(int *)(v0 + 48);
  v9(v5 + 17 * v2, *MEMORY[0x1E0DA1D88], v8);
  *(_BYTE *)(v5 + 17 * v2 + v26) = 17;
  v27 = *(int *)(v0 + 48);
  v9(v5 + 18 * v2, *MEMORY[0x1E0DA1D48], v8);
  *(_BYTE *)(v5 + 18 * v2 + v27) = 18;
  v28 = *(int *)(v0 + 48);
  v9(v5 + 19 * v2, *MEMORY[0x1E0DA1D70], v8);
  *(_BYTE *)(v5 + 19 * v2 + v28) = 19;
  v29 = *(int *)(v0 + 48);
  v9(v5 + 20 * v2, *MEMORY[0x1E0DA1DC8], v8);
  *(_BYTE *)(v5 + 20 * v2 + v29) = 20;
  v30 = *(int *)(v0 + 48);
  v9(v5 + 21 * v2, *MEMORY[0x1E0DA1DE8], v8);
  *(_BYTE *)(v5 + 21 * v2 + v30) = 21;
  v31 = *(int *)(v0 + 48);
  v9(v5 + 22 * v2, *MEMORY[0x1E0DA1D58], v8);
  *(_BYTE *)(v5 + 22 * v2 + v31) = 22;
  v32 = *(int *)(v0 + 48);
  v9(v5 + 23 * v2, *MEMORY[0x1E0DA1DD0], v8);
  *(_BYTE *)(v5 + 23 * v2 + v32) = 23;
  v33 = *(int *)(v0 + 48);
  v9(v5 + 24 * v2, *MEMORY[0x1E0DA1D40], v8);
  *(_BYTE *)(v5 + 24 * v2 + v33) = 24;
  v34 = *(int *)(v0 + 48);
  v9(v5 + 25 * v2, *MEMORY[0x1E0DA1DA8], v8);
  *(_BYTE *)(v5 + 25 * v2 + v34) = 25;
  v35 = *(int *)(v0 + 48);
  v9(v5 + 26 * v2, *MEMORY[0x1E0DA1D28], v8);
  *(_BYTE *)(v5 + 26 * v2 + v35) = 26;
  v36 = *(int *)(v0 + 48);
  v9(v5 + 27 * v2, *MEMORY[0x1E0DA1D50], v8);
  *(_BYTE *)(v5 + 27 * v2 + v36) = 27;
  v37 = *(int *)(v0 + 48);
  v9(v5 + 28 * v2, *MEMORY[0x1E0DA1DE0], v8);
  *(_BYTE *)(v5 + 28 * v2 + v37) = 28;
  v38 = *(int *)(v0 + 48);
  v9(v5 + 29 * v2, *MEMORY[0x1E0DA1DF8], v8);
  *(_BYTE *)(v5 + 29 * v2 + v38) = 28;
  v39 = *(int *)(v0 + 48);
  v9(v5 + 30 * v2, *MEMORY[0x1E0DA1D60], v8);
  *(_BYTE *)(v5 + 30 * v2 + v39) = 28;
  v40 = v5 + 31 * v2;
  v41 = *(int *)(v0 + 48);
  v9(v40, *MEMORY[0x1E0DA1E20], v8);
  *(_BYTE *)(v40 + v41) = 28;
  result = specialized Dictionary.init(dictionaryLiteral:)(v4);
  static CommonAudio.MediaType.mappingMediaType = result;
  return result;
}

uint64_t *CommonAudio.MediaType.mappingMediaType.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingMediaType != -1)
    swift_once();
  return &static CommonAudio.MediaType.mappingMediaType;
}

uint64_t static CommonAudio.MediaType.mappingMediaType.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingMediaType);
}

unint64_t one-time initialization function for mappingMediaItemType()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingMediaItemType);
  static CommonAudio.MediaType.mappingMediaItemType = result;
  return result;
}

uint64_t *CommonAudio.MediaType.mappingMediaItemType.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingMediaItemType != -1)
    swift_once();
  return &static CommonAudio.MediaType.mappingMediaItemType;
}

uint64_t static CommonAudio.MediaType.mappingMediaItemType.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingMediaItemType);
}

unint64_t one-time initialization function for mappingStationMediaItemType()
{
  unint64_t result;

  result = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for mappingStationMediaItemType);
  static CommonAudio.MediaType.mappingStationMediaItemType = result;
  return result;
}

uint64_t *CommonAudio.MediaType.mappingStationMediaItemType.unsafeMutableAddressor()
{
  if (one-time initialization token for mappingStationMediaItemType != -1)
    swift_once();
  return &static CommonAudio.MediaType.mappingStationMediaItemType;
}

uint64_t static CommonAudio.MediaType.mappingStationMediaItemType.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for mappingStationMediaItemType);
}

uint64_t static CommonAudio.Decade.mappingDecade.getter(_QWORD *a1)
{
  if (*a1 != -1)
    swift_once();
  return swift_bridgeObjectRetain();
}

Swift::Bool __swiftcall CommonAudio.MediaType.isStation()()
{
  unsigned __int8 v0;

  return (v0 < 0x17u) & (0x440010u >> v0);
}

uint64_t CommonAudio.MediaType.stationMediaItemType.getter(uint64_t a1)
{
  return CommonAudio.MediaType.stationMediaItemType.getter(a1, &one-time initialization token for mappingStationMediaItemType, &static CommonAudio.MediaType.mappingStationMediaItemType);
}

uint64_t CommonAudio.MediaType.mediaItemType.getter(uint64_t a1)
{
  return CommonAudio.MediaType.stationMediaItemType.getter(a1, &one-time initialization token for mappingMediaItemType, &static CommonAudio.MediaType.mappingMediaItemType);
}

uint64_t CommonAudio.MediaType.stationMediaItemType.getter(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;

  if (*a2 != -1)
    swift_once();
  v5 = *a3;
  if (*(_QWORD *)(v5 + 16) && (v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v7 & 1) != 0))
    return *(_QWORD *)(*(_QWORD *)(v5 + 56) + 8 * v6);
  else
    return 0;
}

uint64_t CommonAudio.MediaType.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2401B28 + 4 * byte_1C24FC915[a1]))(0x65726E6567, 0xE500000000000000);
}

uint64_t sub_1C2401B28()
{
  return 0x747369747261;
}

uint64_t sub_1C2401B3C()
{
  return 0x6F65646976;
}

uint64_t sub_1C2401B4C()
{
  return 0x7473696C79616C70;
}

uint64_t sub_1C2401B64()
{
  return 0x6E6F6974617473;
}

unint64_t sub_1C2401B7C()
{
  return 0xD000000000000015;
}

uint64_t sub_1C2401B98()
{
  return 0x6F68536F69646172;
}

uint64_t sub_1C2401BB8()
{
  return 1735290739;
}

uint64_t sub_1C2401BC8()
{
  return 0x5573656E755469;
}

uint64_t sub_1C2401BE0()
{
  return 0x74736163646F70;
}

uint64_t sub_1C2401BF8()
{
  return 0x646956636973756DLL;
}

uint64_t sub_1C2401C14()
{
  return 0x636973756DLL;
}

uint64_t sub_1C2401C24()
{
  return 1937204590;
}

uint64_t sub_1C2401C34()
{
  return 0x776F68537674;
}

uint64_t sub_1C2401C48()
{
  return 0x6D75626C61;
}

uint64_t sub_1C2401C58()
{
  return 0x656E6F74676E6972;
}

uint64_t sub_1C2401C70()
{
  return 28780;
}

uint64_t sub_1C2401C7C()
{
  return 2003789939;
}

uint64_t sub_1C2401C8C()
{
  return 0x6174536F69646172;
}

uint64_t sub_1C2401CAC()
{
  return 28773;
}

uint64_t sub_1C2401CB8()
{
  return 0x656C676E6973;
}

uint64_t sub_1C2401CCC()
{
  return 0x65646F73697065;
}

uint64_t sub_1C2401CE4()
{
  return 0x5374736163646F70;
}

uint64_t sub_1C2401D08()
{
  return 0x73646E756F73;
}

uint64_t sub_1C2401D1C()
{
  return 0x74616C69706D6F63;
}

uint64_t sub_1C2401D3C()
{
  return 0x6569766F6DLL;
}

uint64_t sub_1C2401D4C()
{
  return 0x6F6F426F69647561;
}

uint64_t sub_1C2401D68()
{
  return 0x616C50636973756DLL;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.MediaType(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(a1, a2, a3, a4, (uint64_t (*)(uint64_t))CommonAudio.MediaType.rawValue.getter);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance CommonAudio.Verb(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v6 = *a2;
  v7 = a5(*a1);
  v9 = v8;
  if (v7 == a5(v6) && v9 == v10)
    v12 = 1;
  else
    v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.MediaType(uint64_t a1, uint64_t a2)
{
  return protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(a1, a2, (void (*)(uint64_t))CommonAudio.MediaType.rawValue.getter);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unsigned __int8 *v3;
  uint64_t v5;

  v5 = *v3;
  Hasher.init(_seed:)();
  a3(v5);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.MediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(_QWORD))CommonAudio.MediaType.rawValue.getter);
}

uint64_t protocol witness for Hashable.hash(into:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD))
{
  unsigned __int8 *v4;

  a4(*v4);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.MediaType(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(a1, a2, a3, (void (*)(uint64_t))CommonAudio.MediaType.rawValue.getter);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance CommonAudio.Verb(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  unsigned __int8 *v4;
  uint64_t v6;

  v6 = *v4;
  Hasher.init(_seed:)();
  a4(v6);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance CommonAudio.MediaType@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized CommonAudio.MediaType.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance CommonAudio.MediaType@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = CommonAudio.MediaType.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t specialized CommonAudio.Verb.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x11)
    return 17;
  else
    return v0;
}

uint64_t specialized static CommonAudio.Decade.from(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v17;

  if (a2)
  {
    v4 = one-time initialization token for mappingDecade;
    swift_bridgeObjectRetain();
    if (v4 != -1)
      swift_once();
    v5 = static CommonAudio.Decade.mappingDecade;
    if (*(_QWORD *)(static CommonAudio.Decade.mappingDecade + 16))
    {
      v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
      if ((v7 & 1) != 0)
      {
        v8 = *(unsigned __int8 *)(*(_QWORD *)(v5 + 56) + v6);
        swift_bridgeObjectRelease();
        return v8;
      }
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    v17 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
    v14 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v10, v11, "CommonAudio#Decade#from received unregistered decade: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    MEMORY[0x1C3BBFF64](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 11;
}

unint64_t specialized CommonAudio.Attribute.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Attribute.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xF)
    return 15;
  else
    return v3;
}

unint64_t specialized CommonAudio.Noun.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Noun.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3)
    return 3;
  else
    return v3;
}

unint64_t specialized CommonAudio.Confirmation.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Confirmation.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4)
    return 4;
  else
    return v3;
}

unint64_t type metadata accessor for INDateComponentsRange()
{
  unint64_t result;

  result = lazy cache variable for type metadata for INDateComponentsRange;
  if (!lazy cache variable for type metadata for INDateComponentsRange)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for INDateComponentsRange);
  }
  return result;
}

unint64_t specialized CommonAudio.Decade.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Decade.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xB)
    return 11;
  else
    return v3;
}

unint64_t specialized CommonAudio.Sort.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.Sort.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

uint64_t specialized static CommonAudio.MediaType.from(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)&v27 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v27 - v9;
  v11 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?(a1, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    if (one-time initialization token for mappingMediaType != -1)
      swift_once();
    v15 = static CommonAudio.MediaType.mappingMediaType;
    if (*(_QWORD *)(static CommonAudio.MediaType.mappingMediaType + 16))
    {
      v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v14);
      if ((v17 & 1) != 0)
      {
        v18 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 56) + v16);
        (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
        return v18;
      }
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?(a1, (uint64_t)v8);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v28 = v23;
    *(_DWORD *)v22 = 136315138;
    outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v8, (uint64_t)v5);
    v24 = String.init<A>(describing:)();
    v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v8);
    _os_log_impl(&dword_1C2356000, v20, v21, "CommonAudio#MediaType#from recieved unregistered type: %s", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v23, -1, -1);
    MEMORY[0x1C3BBFF64](v22, -1, -1);
  }
  else
  {
    outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?((uint64_t)v8);
  }

  return 28;
}

uint64_t specialized CommonAudio.MediaType.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1C)
    return 28;
  else
    return v0;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Verb and conformance CommonAudio.Verb()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Verb and conformance CommonAudio.Verb;
  if (!lazy protocol witness table cache variable for type CommonAudio.Verb and conformance CommonAudio.Verb)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Verb, &type metadata for CommonAudio.Verb);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Verb and conformance CommonAudio.Verb);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity;
  if (!lazy protocol witness table cache variable for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.UsoEntity, &type metadata for CommonAudio.UsoEntity);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.UsoEntity and conformance CommonAudio.UsoEntity);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Attribute and conformance CommonAudio.Attribute()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Attribute and conformance CommonAudio.Attribute;
  if (!lazy protocol witness table cache variable for type CommonAudio.Attribute and conformance CommonAudio.Attribute)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Attribute, &type metadata for CommonAudio.Attribute);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Attribute and conformance CommonAudio.Attribute);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Modifier and conformance CommonAudio.Modifier()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Modifier and conformance CommonAudio.Modifier;
  if (!lazy protocol witness table cache variable for type CommonAudio.Modifier and conformance CommonAudio.Modifier)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Modifier, &type metadata for CommonAudio.Modifier);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Modifier and conformance CommonAudio.Modifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Noun and conformance CommonAudio.Noun()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Noun and conformance CommonAudio.Noun;
  if (!lazy protocol witness table cache variable for type CommonAudio.Noun and conformance CommonAudio.Noun)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Noun, &type metadata for CommonAudio.Noun);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Noun and conformance CommonAudio.Noun);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.RadioType and conformance CommonAudio.RadioType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.RadioType and conformance CommonAudio.RadioType;
  if (!lazy protocol witness table cache variable for type CommonAudio.RadioType and conformance CommonAudio.RadioType)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.RadioType, &type metadata for CommonAudio.RadioType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.RadioType and conformance CommonAudio.RadioType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation;
  if (!lazy protocol witness table cache variable for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Confirmation, &type metadata for CommonAudio.Confirmation);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Confirmation and conformance CommonAudio.Confirmation);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Decade and conformance CommonAudio.Decade()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Decade and conformance CommonAudio.Decade;
  if (!lazy protocol witness table cache variable for type CommonAudio.Decade and conformance CommonAudio.Decade)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Decade, &type metadata for CommonAudio.Decade);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Decade and conformance CommonAudio.Decade);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Sort and conformance CommonAudio.Sort()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Sort and conformance CommonAudio.Sort;
  if (!lazy protocol witness table cache variable for type CommonAudio.Sort and conformance CommonAudio.Sort)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Sort, &type metadata for CommonAudio.Sort);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Sort and conformance CommonAudio.Sort);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.Reference and conformance CommonAudio.Reference()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.Reference and conformance CommonAudio.Reference;
  if (!lazy protocol witness table cache variable for type CommonAudio.Reference and conformance CommonAudio.Reference)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.Reference, &type metadata for CommonAudio.Reference);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.Reference and conformance CommonAudio.Reference);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommonAudio.MediaType and conformance CommonAudio.MediaType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type CommonAudio.MediaType and conformance CommonAudio.MediaType;
  if (!lazy protocol witness table cache variable for type CommonAudio.MediaType and conformance CommonAudio.MediaType)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for CommonAudio.MediaType, &type metadata for CommonAudio.MediaType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommonAudio.MediaType and conformance CommonAudio.MediaType);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio()
{
  return &type metadata for CommonAudio;
}

uint64_t getEnumTagSinglePayload for CommonAudio.Verb(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF0)
    goto LABEL_17;
  if (a2 + 16 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 16) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 16;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 16;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 16;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x11;
  v8 = v6 - 17;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonAudio.Verb(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 16 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 16) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF0)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xEF)
    return ((uint64_t (*)(void))((char *)&loc_1C2402B3C + 4 * byte_1C24FC936[v4]))();
  *a1 = a2 + 16;
  return ((uint64_t (*)(void))((char *)sub_1C2402B70 + 4 * byte_1C24FC931[v4]))();
}

uint64_t sub_1C2402B70(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402B78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2402B80);
  return result;
}

uint64_t sub_1C2402B8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2402B94);
  *(_BYTE *)result = a2 + 16;
  return result;
}

uint64_t sub_1C2402B98(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402BA0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Verb()
{
  return &type metadata for CommonAudio.Verb;
}

ValueMetadata *type metadata accessor for CommonAudio.UsoEntity()
{
  return &type metadata for CommonAudio.UsoEntity;
}

uint64_t getEnumTagSinglePayload for CommonAudio.Attribute(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF2)
    goto LABEL_17;
  if (a2 + 14 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 14) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 14;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 14;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 14;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xF;
  v8 = v6 - 15;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonAudio.Attribute(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 14 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 14) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF2)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF1)
    return ((uint64_t (*)(void))((char *)&loc_1C2402CB0 + 4 * byte_1C24FC940[v4]))();
  *a1 = a2 + 14;
  return ((uint64_t (*)(void))((char *)sub_1C2402CE4 + 4 * byte_1C24FC93B[v4]))();
}

uint64_t sub_1C2402CE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402CEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2402CF4);
  return result;
}

uint64_t sub_1C2402D00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2402D08);
  *(_BYTE *)result = a2 + 14;
  return result;
}

uint64_t sub_1C2402D0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402D14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Attribute()
{
  return &type metadata for CommonAudio.Attribute;
}

ValueMetadata *type metadata accessor for CommonAudio.Modifier()
{
  return &type metadata for CommonAudio.Modifier;
}

uint64_t storeEnumTagSinglePayload for CommonAudio.Noun(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2402D8C + 4 * byte_1C24FC94A[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C2402DC0 + 4 * byte_1C24FC945[v4]))();
}

uint64_t sub_1C2402DC0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402DC8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2402DD0);
  return result;
}

uint64_t sub_1C2402DDC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2402DE4);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C2402DE8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402DF0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Noun()
{
  return &type metadata for CommonAudio.Noun;
}

ValueMetadata *type metadata accessor for CommonAudio.RadioType()
{
  return &type metadata for CommonAudio.RadioType;
}

uint64_t storeEnumTagSinglePayload for CommonAudio.Confirmation(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C2402E68 + 4 * byte_1C24FC954[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C2402E9C + 4 * byte_1C24FC94F[v4]))();
}

uint64_t sub_1C2402E9C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402EA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2402EACLL);
  return result;
}

uint64_t sub_1C2402EB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2402EC0);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C2402EC4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2402ECC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Confirmation()
{
  return &type metadata for CommonAudio.Confirmation;
}

uint64_t getEnumTagSinglePayload for CommonAudio.Decade(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF6)
    goto LABEL_17;
  if (a2 + 10 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 10) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 10;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 10;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 10;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xB;
  v8 = v6 - 11;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonAudio.Decade(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 10 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 10) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF6)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF5)
    return ((uint64_t (*)(void))((char *)&loc_1C2402FC4 + 4 * byte_1C24FC95E[v4]))();
  *a1 = a2 + 10;
  return ((uint64_t (*)(void))((char *)sub_1C2402FF8 + 4 * byte_1C24FC959[v4]))();
}

uint64_t sub_1C2402FF8(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2403000(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2403008);
  return result;
}

uint64_t sub_1C2403014(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C240301CLL);
  *(_BYTE *)result = a2 + 10;
  return result;
}

uint64_t sub_1C2403020(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2403028(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Decade()
{
  return &type metadata for CommonAudio.Decade;
}

uint64_t storeEnumTagSinglePayload for CommonAudio.Sort(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1C2403090 + 4 * byte_1C24FC968[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1C24030C4 + 4 * byte_1C24FC963[v4]))();
}

uint64_t sub_1C24030C4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24030CC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24030D4);
  return result;
}

uint64_t sub_1C24030E0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24030E8);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1C24030EC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24030F4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Sort()
{
  return &type metadata for CommonAudio.Sort;
}

uint64_t storeEnumTagSinglePayload for CommonAudio.UsoEntity(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C240315C + 4 * byte_1C24FC972[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C2403190 + 4 * byte_1C24FC96D[v4]))();
}

uint64_t sub_1C2403190(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2403198(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24031A0);
  return result;
}

uint64_t sub_1C24031AC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24031B4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C24031B8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24031C0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.Reference()
{
  return &type metadata for CommonAudio.Reference;
}

uint64_t getEnumTagSinglePayload for CommonAudio.MediaType(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE5)
    goto LABEL_17;
  if (a2 + 27 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 27) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 27;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 27;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 27;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1C;
  v8 = v6 - 28;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for CommonAudio.MediaType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 27 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 27) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE4)
    return ((uint64_t (*)(void))((char *)&loc_1C24032B8 + 4 * byte_1C24FC97C[v4]))();
  *a1 = a2 + 27;
  return ((uint64_t (*)(void))((char *)sub_1C24032EC + 4 * byte_1C24FC977[v4]))();
}

uint64_t sub_1C24032EC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24032F4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24032FCLL);
  return result;
}

uint64_t sub_1C2403308(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2403310);
  *(_BYTE *)result = a2 + 27;
  return result;
}

uint64_t sub_1C2403314(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C240331C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for CommonAudio.MediaType()
{
  return &type metadata for CommonAudio.MediaType;
}

uint64_t outlined init with copy of UsoEntity_common_MediaItemType.DefinedValues?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of UsoEntity_common_MediaItemType.DefinedValues?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t MediaItemRankingSignals.artist.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MediaItemRankingSignals.isInLibrary.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t MediaItemRankingSignals.isExplicitContent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 33);
}

uint64_t MediaItemRankingSignals.isDownloaded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 34);
}

uint64_t MediaItemRankingSignals.isPlayable.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 35);
}

uint64_t MediaItemRankingSignals.__allocating_init(artist:isInLibrary:isExplicitContent:isDownloaded:isPlayable:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  *(_BYTE *)(result + 32) = a3;
  *(_BYTE *)(result + 33) = a4;
  *(_BYTE *)(result + 34) = a5;
  *(_BYTE *)(result + 35) = a6;
  return result;
}

uint64_t MediaItemRankingSignals.init(artist:isInLibrary:isExplicitContent:isDownloaded:isPlayable:)(uint64_t a1, uint64_t a2, char a3, char a4, char a5, char a6)
{
  uint64_t v6;

  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  *(_BYTE *)(v6 + 32) = a3;
  *(_BYTE *)(v6 + 33) = a4;
  *(_BYTE *)(v6 + 34) = a5;
  *(_BYTE *)(v6 + 35) = a6;
  return v6;
}

uint64_t MediaItemRankingSignals.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t MediaItemRankingSignals.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t MPMediaLibrary.mediaItemRankingSignals(for:)(uint64_t a1, unint64_t a2)
{
  void *v2;
  int *v5;
  uint64_t v6;
  char *v7;
  id v8;
  id v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  Swift::String v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  void *v21;
  id v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  unsigned __int8 v32;
  id v33;
  unsigned __int8 v34;
  id v35;
  unsigned __int8 v36;
  id v37;
  unsigned __int8 v38;
  id v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  id v47;
  id v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t inited;
  unint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  id v67;
  unsigned __int8 v68;
  id v69;
  unint64_t v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  id v74;
  Class isa;
  id v76;
  id v77;
  unint64_t v78;
  id v79;
  id v80;
  int v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  int v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  id v101;
  int v102;
  uint64_t v103;
  char *v104;
  id v105;
  uint64_t v106;
  __int128 v107;
  __int128 v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;

  v5 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v101 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = 0;
  v110 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v8 = v2;
  v9 = objc_msgSend(v8, sel_description);
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v12 = v11;
  swift_bridgeObjectRelease();

  v109 = v10;
  v110 = v12;
  v13._object = (void *)0x80000001C2504520;
  v13._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v13);
  v14 = v109;
  Date.init()();
  v15 = &v7[v5[5]];
  *(_QWORD *)v15 = "SiriInformationSearch/MediaLibrary.swift";
  *((_QWORD *)v15 + 1) = 40;
  v15[16] = 2;
  *(_QWORD *)&v7[v5[6]] = 45;
  v16 = &v7[v5[7]];
  *(_QWORD *)v16 = "mediaItemRankingSignals(for:)";
  *((_QWORD *)v16 + 1) = 29;
  v16[16] = 2;
  v17 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v14);
  v19 = v18;
  swift_bridgeObjectRelease();
  v20 = (uint64_t *)&v7[v5[8]];
  *v20 = v17;
  v20[1] = v19;
  v21 = (void *)MEMORY[0x1C3BBEC44](a1, a2);
  v22 = objc_msgSend(v8, sel_entityWithSiriSyncIdentifier_, v21);

  if (v22)
  {
    objc_opt_self();
    v23 = swift_dynamicCastObjCClass();
    v104 = v7;
    if (v23)
    {
      v24 = (void *)v23;
      v25 = *MEMORY[0x1E0CC1E78];
      v26 = v22;
      if (objc_msgSend(v24, sel_valueForProperty_, v25))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v107, (uint64_t)&v109);
      if (v111)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v31 = v105;
          v32 = objc_msgSend(v105, sel_BOOLValue);

          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v109);
      }
      v32 = 1;
LABEL_14:
      if (objc_msgSend(v24, sel_valueForProperty_, *MEMORY[0x1E0CC1E60]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v107, (uint64_t)&v109);
      if (v111)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v33 = v105;
          v34 = objc_msgSend(v105, sel_BOOLValue);

          goto LABEL_22;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v109);
      }
      v34 = 0;
LABEL_22:
      if (objc_msgSend(v24, sel_valueForProperty_, *MEMORY[0x1E0CC1E50]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v107, (uint64_t)&v109);
      if (v111)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v35 = v105;
          v36 = objc_msgSend(v105, sel_BOOLValue);

          goto LABEL_30;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v109);
      }
      v36 = 0;
LABEL_30:
      if (objc_msgSend(v24, sel_valueForProperty_, *MEMORY[0x1E0CC1E98]))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v107, (uint64_t)&v109);
      if (v111)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v37 = v105;
          v38 = objc_msgSend(v105, sel_BOOLValue);

          goto LABEL_38;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v109);
      }
      v38 = 1;
LABEL_38:
      v39 = objc_msgSend(v24, sel_artist);
      if (v39)
      {
        v40 = v39;
        v41 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v43 = v42;

      }
      else
      {

LABEL_41:
        v41 = 0;
        v43 = 0;
      }
      goto LABEL_93;
    }
    objc_opt_self();
    v27 = swift_dynamicCastObjCClass();
    if (v27)
    {
      v28 = (void *)v27;
      v29 = *MEMORY[0x1E0CC2030];
      v30 = v22;
      if (objc_msgSend(v28, sel_valueForProperty_, v29))
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        v107 = 0u;
        v108 = 0u;
      }
      outlined init with take of Any?((uint64_t)&v107, (uint64_t)&v109);
      if (v111)
      {
        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v67 = v105;
          v68 = objc_msgSend(v105, sel_BOOLValue);

          v32 = v68 ^ 1;
LABEL_58:
          v69 = objc_msgSend(v28, sel_items);
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          v70 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v70 >> 62)
          {
            swift_bridgeObjectRetain();
            v71 = _CocoaArrayWrapper.endIndex.getter();

            swift_bridgeObjectRelease_n();
          }
          else
          {
            v71 = *(_QWORD *)((v70 & 0xFFFFFFFFFFFFF8) + 0x10);
            swift_bridgeObjectRelease();

          }
          v36 = 0;
          v34 = 0;
          v41 = 0;
          v43 = 0;
          v38 = v71 != 0;
LABEL_93:
          type metadata accessor for MediaItemRankingSignals();
          v64 = swift_allocObject();
          *(_QWORD *)(v64 + 16) = v41;
          *(_QWORD *)(v64 + 24) = v43;
          *(_BYTE *)(v64 + 32) = v32;
          *(_BYTE *)(v64 + 33) = v34;
          *(_BYTE *)(v64 + 34) = v36;
          *(_BYTE *)(v64 + 35) = v38;
          if (one-time initialization token for pommes != -1)
            swift_once();
          v82 = type metadata accessor for Logger();
          __swift_project_value_buffer(v82, (uint64_t)static Logger.pommes);
          v83 = Logger.logObject.getter();
          v84 = static os_log_type_t.debug.getter();
          v85 = v84;
          if (os_log_type_enabled(v83, v84))
          {
            v86 = swift_slowAlloc();
            v103 = swift_slowAlloc();
            *(_QWORD *)&v107 = v103;
            *(_DWORD *)v86 = 136316162;
            v87 = *(_QWORD *)(v64 + 24);
            v109 = *(_QWORD *)(v64 + 16);
            v110 = v87;
            swift_bridgeObjectRetain();
            __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
            v102 = v85;
            v88 = String.init<A>(describing:)();
            v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, (uint64_t *)&v107);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_retain();
            swift_bridgeObjectRelease();
            *(_WORD *)(v86 + 12) = 2080;
            v90 = *(unsigned __int8 *)(v64 + 32);
            if (*(_BYTE *)(v64 + 32))
              v91 = 1702195828;
            else
              v91 = 0x65736C6166;
            v101 = v22;
            if (v90)
              v92 = 0xE400000000000000;
            else
              v92 = 0xE500000000000000;
            v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v92, (uint64_t *)&v107);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v86 + 22) = 2080;
            if (*(_BYTE *)(v64 + 33))
              v93 = 1702195828;
            else
              v93 = 0x65736C6166;
            if (*(_BYTE *)(v64 + 33))
              v94 = 0xE400000000000000;
            else
              v94 = 0xE500000000000000;
            v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, (uint64_t *)&v107);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v86 + 32) = 2080;
            if (*(_BYTE *)(v64 + 34))
              v95 = 1702195828;
            else
              v95 = 0x65736C6166;
            if (*(_BYTE *)(v64 + 34))
              v96 = 0xE400000000000000;
            else
              v96 = 0xE500000000000000;
            v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, (uint64_t *)&v107);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            *(_WORD *)(v86 + 42) = 2080;
            if (*(_BYTE *)(v64 + 35))
              v97 = 1702195828;
            else
              v97 = 0x65736C6166;
            if (*(_BYTE *)(v64 + 35))
              v98 = 0xE400000000000000;
            else
              v98 = 0xE500000000000000;
            v109 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v98, (uint64_t *)&v107);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C2356000, v83, (os_log_type_t)v102, "MPMediaLibrary#mediaItemRankingSignals with siriSyncId mediaItemRankingSignals\n{\n    artist: %s\n    isInLibrary: %s\n    isExplicitContent: %s\n    isDownloaded: %s\n    isPlayable: %s\n}", (uint8_t *)v86, 0x34u);
            v99 = v103;
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v99, -1, -1);
            MEMORY[0x1C3BBFF64](v86, -1, -1);

          }
          else
          {

          }
          v7 = v104;
          v66 = one-time initialization token for shared;
          v65 = v64;
          goto LABEL_123;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)&v109);
      }
      v32 = 1;
      goto LABEL_58;
    }
    objc_opt_self();
    v44 = swift_dynamicCastObjCClass();
    if (v44)
    {
      v45 = (void *)v44;
      v46 = (void *)objc_opt_self();
      v47 = v22;
      v48 = objc_msgSend(v46, sel_persistentIDPropertyForGroupingType_, objc_msgSend(v45, sel_groupingType));
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v51 = v50;

      v109 = (unint64_t)objc_msgSend(v45, sel_persistentID);
      v52 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
      v53 = (void *)MEMORY[0x1C3BBEC44](v49, v51);
      swift_bridgeObjectRelease();
      v54 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_forProperty_, v52, v53);
      swift_unknownObjectRelease();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(inited + 32) = v54;
      v109 = inited;
      specialized Array._endMutation()();
      v56 = v109;
      if (v109 >> 62)
      {
        v72 = v54;
        swift_bridgeObjectRetain();
        v73 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v73)
        {
LABEL_63:
          swift_bridgeObjectRelease();
          v74 = objc_allocWithZone(MEMORY[0x1E0CC2438]);
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
          lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
          isa = Set._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          v76 = objc_msgSend(v74, sel_initWithFilterPredicates_, isa);

          objc_msgSend(v76, sel_setGroupingType_, objc_msgSend(v45, sel_groupingType));
          v77 = objc_msgSend(v76, sel_items);
          if (v77)
          {
            type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
            v78 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

            if (v78 >> 62)
            {
              swift_bridgeObjectRetain();
              v77 = (id)_CocoaArrayWrapper.endIndex.getter();
              swift_bridgeObjectRelease();
            }
            else
            {
              v77 = *(id *)((v78 & 0xFFFFFFFFFFFFF8) + 0x10);
            }
            swift_bridgeObjectRelease();
          }
          v32 = (uint64_t)v77 > 0;
          if (objc_msgSend(v45, sel_valueForProperty_, *MEMORY[0x1E0CC1E98]))
          {
            _bridgeAnyObjectToAny(_:)();
            swift_unknownObjectRelease();
          }
          else
          {
            v107 = 0u;
            v108 = 0u;
          }
          outlined init with take of Any?((uint64_t)&v107, (uint64_t)&v109);
          if (v111)
          {
            type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
            if ((swift_dynamicCast() & 1) != 0)
            {
              v79 = v105;
              v38 = objc_msgSend(v105, sel_BOOLValue);

LABEL_75:
              switch((unint64_t)objc_msgSend(v45, sel_groupingType))
              {
                case 1uLL:
                  v80 = objc_msgSend(v45, sel_valueForProperty_, *MEMORY[0x1E0CC1D50]);
                  break;
                case 2uLL:
                  v80 = objc_msgSend(v45, (SEL)&stru_1E7C11678.align + 1, *MEMORY[0x1E0CC1D58]);
                  break;
                case 3uLL:
                  v80 = objc_msgSend(v45, (SEL)&stru_1E7C11678.align + 1, *MEMORY[0x1E0CC1D48]);
                  break;
                case 4uLL:
                  v80 = objc_msgSend(v45, (SEL)&stru_1E7C11678.align + 1, *MEMORY[0x1E0CC1D60]);
                  break;
                default:

                  v36 = 0;
                  v34 = 0;
                  goto LABEL_41;
              }
              if (v80)
              {
                _bridgeAnyObjectToAny(_:)();

                swift_unknownObjectRelease();
              }
              else
              {

                v107 = 0u;
                v108 = 0u;
              }
              outlined init with take of Any?((uint64_t)&v107, (uint64_t)&v109);
              if (v111)
              {
                v81 = swift_dynamicCast();
                if (v81)
                  v41 = (uint64_t)v105;
                else
                  v41 = 0;
                if (v81)
                  v43 = v106;
                else
                  v43 = 0;
              }
              else
              {
                outlined destroy of Any?((uint64_t)&v109);
                v41 = 0;
                v43 = 0;
              }
              v36 = 0;
              v34 = 0;
              goto LABEL_93;
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)&v109);
          }
          v38 = 1;
          goto LABEL_75;
        }
      }
      else
      {
        v57 = *(_QWORD *)((v109 & 0xFFFFFFFFFFFFF8) + 0x10);
        v58 = v54;
        if (!v57)
          goto LABEL_63;
      }
      specialized Set.init(_nonEmptyArrayLiteral:)(v56);
      goto LABEL_63;
    }
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v60, v61))
  {
    v62 = (uint8_t *)swift_slowAlloc();
    v63 = swift_slowAlloc();
    v109 = v63;
    *(_DWORD *)v62 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v107 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v60, v61, "MPMediaItem not found for %s", v62, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v63, -1, -1);
    MEMORY[0x1C3BBFF64](v62, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v64 = 0;
  v65 = 0;
  v66 = one-time initialization token for shared;
LABEL_123:
  if (v66 != -1)
  {
    swift_once();
    v65 = v64;
  }
  (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v7, 1);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v7);
  return v65;
}

uint64_t protocol witness for MediaLibrary.mediaItemRankingSignals(for:) in conformance MPMediaLibrary(uint64_t a1, unint64_t a2)
{
  return MPMediaLibrary.mediaItemRankingSignals(for:)(a1, a2);
}

uint64_t protocol witness for MediaLibrary.mediaItemRankingSignals(for:entityType:) in conformance MPMediaLibrary(unint64_t a1)
{
  return specialized MPMediaLibrary.mediaItemRankingSignals(for:entityType:)(a1);
}

Swift::Int specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  Swift::Int result;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  BOOL v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<String>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v25 = a1 + 32;
    while (1)
    {
      v6 = (uint64_t *)(v25 + 16 * v4);
      v8 = *v6;
      v7 = v6[1];
      Hasher.init(_seed:)();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      result = Hasher._finalize()();
      v10 = -1 << *(_BYTE *)(v3 + 32);
      v11 = result & ~v10;
      v12 = v11 >> 6;
      v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
      v14 = 1 << v11;
      if (((1 << v11) & v13) != 0)
      {
        v15 = *(_QWORD *)(v3 + 48);
        v16 = (_QWORD *)(v15 + 16 * v11);
        v17 = *v16 == v8 && v16[1] == v7;
        if (v17 || (result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
        {
LABEL_3:
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
        v18 = ~v10;
        while (1)
        {
          v11 = (v11 + 1) & v18;
          v12 = v11 >> 6;
          v13 = *(_QWORD *)(v5 + 8 * (v11 >> 6));
          v14 = 1 << v11;
          if ((v13 & (1 << v11)) == 0)
            break;
          v19 = (_QWORD *)(v15 + 16 * v11);
          if (*v19 != v8 || v19[1] != v7)
          {
            result = _stringCompareWithSmolCheck(_:_:expecting:)();
            if ((result & 1) == 0)
              continue;
          }
          goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v12) = v14 | v13;
      v21 = (_QWORD *)(*(_QWORD *)(v3 + 48) + 16 * v11);
      *v21 = v8;
      v21[1] = v7;
      v22 = *(_QWORD *)(v3 + 16);
      v23 = __OFADD__(v22, 1);
      v24 = v22 + 1;
      if (v23)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v24;
LABEL_4:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  Swift::UInt v7;
  Swift::Int result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<KVFieldType>);
    v3 = static _SetStorage.allocate(capacity:)();
    v4 = 0;
    v5 = v3 + 56;
    v6 = a1 + 32;
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 8 * v4);
      Hasher.init(_seed:)();
      Hasher._combine(_:)(v7);
      result = Hasher._finalize()();
      v9 = -1 << *(_BYTE *)(v3 + 32);
      v10 = result & ~v9;
      v11 = v10 >> 6;
      v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
      v13 = 1 << v10;
      v14 = *(_QWORD *)(v3 + 48);
      if (((1 << v10) & v12) != 0)
      {
        if (*(_QWORD *)(v14 + 8 * v10) == v7)
          goto LABEL_3;
        v15 = ~v9;
        while (1)
        {
          v10 = (v10 + 1) & v15;
          v11 = v10 >> 6;
          v12 = *(_QWORD *)(v5 + 8 * (v10 >> 6));
          v13 = 1 << v10;
          if ((v12 & (1 << v10)) == 0)
            break;
          if (*(_QWORD *)(v14 + 8 * v10) == v7)
            goto LABEL_3;
        }
      }
      *(_QWORD *)(v5 + 8 * v11) = v13 | v12;
      *(_QWORD *)(v14 + 8 * v10) = v7;
      v16 = *(_QWORD *)(v3 + 16);
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
      {
        __break(1u);
        return result;
      }
      *(_QWORD *)(v3 + 16) = v18;
LABEL_3:
      if (++v4 == v1)
        return v3;
    }
  }
  return MEMORY[0x1E0DEE9E8];
}

uint64_t specialized Set.init(_nonEmptyArrayLiteral:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D8]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Siri_Nlu_External_Span.MatcherName>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F028], MEMORY[0x1E0D9F038]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F028], MEMORY[0x1E0D9F040]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F160]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F170]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t result;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;

  v2 = type metadata accessor for DeviceClass();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v27 - v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _SetStorage<DeviceClass>);
    v10 = static _SetStorage.allocate(capacity:)();
    v11 = 0;
    v12 = *(unsigned __int8 *)(v3 + 80);
    v28 = v9;
    v29 = a1 + ((v12 + 32) & ~v12);
    v13 = *(_QWORD *)(v3 + 72);
    v31 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v32 = v10 + 56;
    while (1)
    {
      v30 = v11;
      v31(v8, v29 + v13 * v11, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7C28], MEMORY[0x1E0DA7C38]);
      v14 = dispatch thunk of Hashable._rawHashValue(seed:)();
      v15 = ~(-1 << *(_BYTE *)(v10 + 32));
      v16 = v14 & v15;
      v17 = (v14 & (unint64_t)v15) >> 6;
      v18 = *(_QWORD *)(v32 + 8 * v17);
      v19 = 1 << (v14 & v15);
      if ((v19 & v18) != 0)
      {
        do
        {
          v31(v6, *(_QWORD *)(v10 + 48) + v16 * v13, v2);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7C28], MEMORY[0x1E0DA7C40]);
          v20 = dispatch thunk of static Equatable.== infix(_:_:)();
          v21 = v3;
          v22 = *(void (**)(char *, uint64_t))(v3 + 8);
          v22(v6, v2);
          if ((v20 & 1) != 0)
          {
            v22(v8, v2);
            v3 = v21;
            v9 = v28;
            goto LABEL_4;
          }
          v16 = (v16 + 1) & v15;
          v17 = v16 >> 6;
          v18 = *(_QWORD *)(v32 + 8 * (v16 >> 6));
          v19 = 1 << v16;
          v3 = v21;
        }
        while ((v18 & (1 << v16)) != 0);
        v9 = v28;
      }
      *(_QWORD *)(v32 + 8 * v17) = v19 | v18;
      result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v3 + 32))(*(_QWORD *)(v10 + 48) + v16 * v13, v8, v2);
      v24 = *(_QWORD *)(v10 + 16);
      v25 = __OFADD__(v24, 1);
      v26 = v24 + 1;
      if (v25)
        break;
      *(_QWORD *)(v10 + 16) = v26;
LABEL_4:
      v11 = v30 + 1;
      if (v30 + 1 == v9)
        return v10;
    }
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9E8];
  }
  return result;
}

void specialized Set.init(_nonEmptyArrayLiteral:)(unint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  char v18;
  uint64_t v19;
  id v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  Swift::Int v25;
  id v26;
  Swift::Int v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  id v33;
  char v34;
  uint64_t v35;
  id v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v1 = a1;
  v2 = a1 >> 62;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v5)
    {
LABEL_3:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _SetStorage<MPMediaPredicate>);
      v3 = static _SetStorage.allocate(capacity:)();
      if (!v2)
        goto LABEL_4;
LABEL_8:
      swift_bridgeObjectRetain();
      v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v4)
        return;
      goto LABEL_9;
    }
  }
  else if (*(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    goto LABEL_3;
  }
  v3 = MEMORY[0x1E0DEE9E8];
  if (v2)
    goto LABEL_8;
LABEL_4:
  v4 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v4)
    return;
LABEL_9:
  v6 = v3 + 56;
  v43 = v4;
  if ((v1 & 0xC000000000000001) != 0)
  {
    v7 = 0;
    v41 = v1;
    while (1)
    {
      while (1)
      {
        v8 = MEMORY[0x1C3BBF3F4](v7, v1);
        v9 = __OFADD__(v7++, 1);
        if (v9)
        {
          __break(1u);
          goto LABEL_36;
        }
        v10 = v8;
        v11 = NSObject._rawHashValue(seed:)(*(_QWORD *)(v3 + 40));
        v12 = -1 << *(_BYTE *)(v3 + 32);
        v13 = v11 & ~v12;
        v14 = v13 >> 6;
        v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
        v16 = 1 << v13;
        if (((1 << v13) & v15) != 0)
          break;
LABEL_20:
        *(_QWORD *)(v6 + 8 * v14) = v16 | v15;
        *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v13) = v10;
        v22 = *(_QWORD *)(v3 + 16);
        v9 = __OFADD__(v22, 1);
        v23 = v22 + 1;
        if (v9)
          goto LABEL_37;
        *(_QWORD *)(v3 + 16) = v23;
        if (v7 == v4)
          return;
      }
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
      v17 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
      v18 = static NSObject.== infix(_:_:)();

      if ((v18 & 1) == 0)
      {
        v19 = ~v12;
        while (1)
        {
          v13 = (v13 + 1) & v19;
          v14 = v13 >> 6;
          v15 = *(_QWORD *)(v6 + 8 * (v13 >> 6));
          v16 = 1 << v13;
          if ((v15 & (1 << v13)) == 0)
            break;
          v20 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v13);
          v21 = static NSObject.== infix(_:_:)();

          if ((v21 & 1) != 0)
            goto LABEL_11;
        }
        v1 = v41;
        v4 = v43;
        goto LABEL_20;
      }
LABEL_11:
      swift_unknownObjectRelease();
      v1 = v41;
      v4 = v43;
      if (v7 == v43)
        return;
    }
  }
  v24 = 0;
  v40 = v1 + 32;
  v42 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (v24 != v42)
  {
    v25 = *(_QWORD *)(v3 + 40);
    v26 = *(id *)(v40 + 8 * v24);
    v27 = NSObject._rawHashValue(seed:)(v25);
    v28 = -1 << *(_BYTE *)(v3 + 32);
    v29 = v27 & ~v28;
    v30 = v29 >> 6;
    v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
    v32 = 1 << v29;
    if (((1 << v29) & v31) != 0)
    {
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
      v33 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v29);
      v34 = static NSObject.== infix(_:_:)();

      if ((v34 & 1) != 0)
      {
LABEL_24:

        goto LABEL_25;
      }
      v35 = ~v28;
      while (1)
      {
        v29 = (v29 + 1) & v35;
        v30 = v29 >> 6;
        v31 = *(_QWORD *)(v6 + 8 * (v29 >> 6));
        v32 = 1 << v29;
        if ((v31 & (1 << v29)) == 0)
          break;
        v36 = *(id *)(*(_QWORD *)(v3 + 48) + 8 * v29);
        v37 = static NSObject.== infix(_:_:)();

        if ((v37 & 1) != 0)
          goto LABEL_24;
      }
    }
    *(_QWORD *)(v6 + 8 * v30) = v32 | v31;
    *(_QWORD *)(*(_QWORD *)(v3 + 48) + 8 * v29) = v26;
    v38 = *(_QWORD *)(v3 + 16);
    v9 = __OFADD__(v38, 1);
    v39 = v38 + 1;
    if (v9)
      goto LABEL_38;
    *(_QWORD *)(v3 + 16) = v39;
LABEL_25:
    if (++v24 == v43)
      return;
  }
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

unint64_t lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type MPMediaPredicate and conformance NSObject;
  if (!lazy protocol witness table cache variable for type MPMediaPredicate and conformance NSObject)
  {
    v1 = type metadata accessor for CNContactStore(255, &lazy cache variable for type metadata for MPMediaPredicate);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MPMediaPredicate and conformance NSObject);
  }
  return result;
}

uint64_t type metadata accessor for MediaItemRankingSignals()
{
  return objc_opt_self();
}

uint64_t specialized MPMediaLibrary.mediaItemRankingSignals(for:entityType:)(unint64_t a1)
{
  void *v1;
  int *v3;
  uint64_t v4;
  char *v5;
  id v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  Swift::String v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  id v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  id v31;
  id v32;
  uint64_t v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  id v37;
  void *v38;
  id v39;
  unsigned int v40;
  id v41;
  unsigned int v42;
  id v43;
  unsigned int v44;
  id v45;
  unsigned int v46;
  id v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  id v52;
  void *v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  id v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  unsigned int v66;
  int v67;
  id v68;
  unint64_t v69;
  uint64_t v70;
  id v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  void *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  id v81;
  id v82;
  void *v83;
  id v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  void *v89;
  id v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  id v94;
  id v95;
  id v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  id v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  id v112;
  uint64_t v113;
  id v114;
  Class isa;
  id v116;
  id v117;
  unint64_t v118;
  id v119;
  id v120;
  uint64_t v121;
  id v122;
  Class v123;
  id v124;
  unint64_t v125;
  id v126;
  int v127;
  id v128;
  uint64_t v129;
  id v130;
  Class v131;
  id v132;
  id v133;
  unint64_t v134;
  id v135;
  unsigned int v136;
  id v137;
  id v138;
  uint64_t v139;
  id v140;
  Class v141;
  id v142;
  unint64_t v143;
  id v144;
  unsigned int v145;
  NSObject *v146;
  os_log_type_t v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned int v164;
  unsigned int v165;
  uint8_t *v166;
  uint64_t v167;
  char *v168;
  id v169;
  unint64_t v170;
  __int128 v171;
  __int128 v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;

  v3 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v164 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v173 = 0;
  v174 = 0xE000000000000000;
  _StringGuts.grow(_:)(26);
  v6 = v1;
  v7 = objc_msgSend(v6, sel_description);
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = v9;
  swift_bridgeObjectRelease();

  v173 = v8;
  v174 = v10;
  v11._object = (void *)0x80000001C2504520;
  v11._countAndFlagsBits = 0xD000000000000018;
  String.append(_:)(v11);
  v12 = v173;
  Date.init()();
  v13 = &v5[v3[5]];
  *(_QWORD *)v13 = "SiriInformationSearch/MediaLibrary.swift";
  *((_QWORD *)v13 + 1) = 40;
  v13[16] = 2;
  *(_QWORD *)&v5[v3[6]] = 138;
  v14 = &v5[v3[7]];
  *(_QWORD *)v14 = "mediaItemRankingSignals(for:entityType:)";
  *((_QWORD *)v14 + 1) = 40;
  v14[16] = 2;
  v15 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v12);
  v17 = v16;
  swift_bridgeObjectRelease();
  v18 = v3[8];
  v168 = v5;
  v19 = (uint64_t *)&v5[v18];
  *v19 = v15;
  v19[1] = v17;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v22 = Logger.logObject.getter();
  v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    v24 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v24 = 0;
    _os_log_impl(&dword_1C2356000, v22, v23, "MPMediaLibrary#mediaItemRankingSignals with persistentID reached beginning", v24, 2u);
    MEMORY[0x1C3BBFF64](v24, -1, -1);
  }

  v25 = objc_msgSend(v6, sel_itemWithPersistentID_, a1);
  if (v25)
  {
    v26 = v25;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v167 = v21;
      v29 = (uint8_t *)swift_slowAlloc();
      v30 = swift_slowAlloc();
      v173 = v30;
      *(_DWORD *)v29 = 136315138;
      v166 = v29 + 4;
      v31 = v26;
      v32 = objc_msgSend(v31, sel_description);
      v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v34 = v26;
      v36 = v35;

      *(_QWORD *)&v171 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v36, (uint64_t *)&v173);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v26 = v34;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v27, v28, "MPMediaLibrary#mediaItemRankingSignals with PersistentID mpMediaItem: %s", v29, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v30, -1, -1);
      MEMORY[0x1C3BBFF64](v29, -1, -1);

    }
    else
    {

    }
    if (objc_msgSend(v26, sel_valueForProperty_, *MEMORY[0x1E0CC1E78]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v171 = 0u;
      v172 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
    if (v175)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v39 = v169;
        v40 = objc_msgSend(v169, sel_BOOLValue);

        goto LABEL_20;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v173);
    }
    v40 = 1;
LABEL_20:
    if (objc_msgSend(v26, sel_valueForProperty_, *MEMORY[0x1E0CC1E60]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v171 = 0u;
      v172 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
    if (v175)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v41 = v169;
        v42 = objc_msgSend(v169, sel_BOOLValue);

        goto LABEL_28;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v173);
    }
    v42 = 0;
LABEL_28:
    if (objc_msgSend(v26, sel_valueForProperty_, *MEMORY[0x1E0CC1E50]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v171 = 0u;
      v172 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
    if (v175)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v43 = v169;
        v44 = objc_msgSend(v169, sel_BOOLValue);

        goto LABEL_36;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v173);
    }
    v44 = 0;
LABEL_36:
    if (objc_msgSend(v26, sel_valueForProperty_, *MEMORY[0x1E0CC1E98]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v171 = 0u;
      v172 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
    if (v175)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v45 = v169;
        v46 = objc_msgSend(v169, sel_BOOLValue);

        goto LABEL_44;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v173);
    }
    v46 = 1;
LABEL_44:
    v47 = objc_msgSend(v26, sel_artist);
    if (v47)
    {
      v48 = v47;
      v49 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v51 = v50;

    }
    else
    {

      v49 = 0;
      v51 = 0;
    }
    goto LABEL_150;
  }
  v37 = objc_msgSend(v6, sel_playlistWithPersistentID_, a1);
  if (v37)
  {
    v38 = v37;
    if (objc_msgSend(v37, sel_valueForProperty_, *MEMORY[0x1E0CC2030]))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v171 = 0u;
      v172 = 0u;
    }
    outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
    if (v175)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v65 = v169;
        v66 = objc_msgSend(v169, sel_BOOLValue);

        v67 = v66 ^ 1;
LABEL_57:
        v68 = objc_msgSend(v38, sel_items);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
        v69 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        if (v69 >> 62)
        {
          swift_bridgeObjectRetain();
          v70 = _CocoaArrayWrapper.endIndex.getter();

          swift_bridgeObjectRelease_n();
        }
        else
        {
          v70 = *(_QWORD *)((v69 & 0xFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRelease();

        }
        v44 = 0;
        v42 = 0;
        v49 = 0;
        v51 = 0;
        v46 = v70 != 0;
        v40 = v67;
        goto LABEL_150;
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)&v173);
    }
    v67 = 1;
    goto LABEL_57;
  }
  v52 = objc_msgSend(v6, sel_collectionWithPersistentID_groupingType_, a1, 1);
  if (v52)
  {
    v53 = v52;
    v54 = objc_msgSend((id)objc_opt_self(), sel_persistentIDPropertyForGroupingType_, 1);
    v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v57 = v56;

    v173 = (unint64_t)objc_msgSend(v53, sel_persistentID);
    v58 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v59 = (void *)MEMORY[0x1C3BBEC44](v55, v57);
    swift_bridgeObjectRelease();
    v60 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_forProperty_, v58, v59);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_1C24FB5A0;
    *(_QWORD *)(v61 + 32) = v60;
    v173 = v61;
    specialized Array._endMutation()();
    v62 = v173;
    if (v173 >> 62)
    {
      v112 = v60;
      swift_bridgeObjectRetain();
      v113 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v113)
      {
LABEL_77:
        swift_bridgeObjectRelease();
        v114 = objc_allocWithZone(MEMORY[0x1E0CC2438]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        isa = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v116 = objc_msgSend(v114, sel_initWithFilterPredicates_, isa);

        objc_msgSend(v116, sel_setGroupingType_, 1);
        v117 = objc_msgSend(v116, sel_items);
        if (v117)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          v118 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v118 >> 62)
          {
            swift_bridgeObjectRetain();
            v117 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v117 = *(id *)((v118 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        v40 = (uint64_t)v117 > 0;
        if (objc_msgSend(v53, sel_valueForProperty_, *MEMORY[0x1E0CC1E98]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v171 = 0u;
          v172 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
        if (v175)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v119 = v169;
            v46 = objc_msgSend(v169, sel_BOOLValue);

            goto LABEL_89;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v173);
        }
        v46 = 1;
LABEL_89:
        if (objc_msgSend(v53, sel_valueForProperty_, *MEMORY[0x1E0CC1D50]))
        {
LABEL_90:
          _bridgeAnyObjectToAny(_:)();

          swift_unknownObjectRelease();
          goto LABEL_107;
        }
LABEL_106:

        v171 = 0u;
        v172 = 0u;
LABEL_107:
        outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
        if (v175)
        {
LABEL_108:
          v127 = swift_dynamicCast();
          if (v127)
            v49 = (unint64_t)v169;
          else
            v49 = 0;
          if (v127)
            v51 = v170;
          else
            v51 = 0;
          goto LABEL_149;
        }
LABEL_148:
        outlined destroy of Any?((uint64_t)&v173);
        v49 = 0;
        v51 = 0;
LABEL_149:
        v44 = 0;
        v42 = 0;
LABEL_150:
        type metadata accessor for MediaItemRankingSignals();
        v109 = swift_allocObject();
        *(_QWORD *)(v109 + 16) = v49;
        *(_QWORD *)(v109 + 24) = v51;
        *(_BYTE *)(v109 + 32) = v40;
        *(_BYTE *)(v109 + 33) = v42;
        *(_BYTE *)(v109 + 34) = v44;
        *(_BYTE *)(v109 + 35) = v46;
        v145 = v44;
        v146 = Logger.logObject.getter();
        v147 = static os_log_type_t.debug.getter();
        v148 = v147;
        if (os_log_type_enabled(v146, v147))
        {
          v149 = swift_slowAlloc();
          v165 = v145;
          v150 = v149;
          v167 = swift_slowAlloc();
          *(_QWORD *)&v171 = v167;
          *(_DWORD *)v150 = 136316162;
          v173 = v49;
          v174 = v51;
          swift_bridgeObjectRetain();
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
          LODWORD(v166) = v148;
          v151 = String.init<A>(describing:)();
          v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v151, v152, (uint64_t *)&v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_retain();
          swift_bridgeObjectRelease();
          *(_WORD *)(v150 + 12) = 2080;
          v164 = v46;
          if (v40)
            v153 = 1702195828;
          else
            v153 = 0x65736C6166;
          if (v40)
            v154 = 0xE400000000000000;
          else
            v154 = 0xE500000000000000;
          v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v153, v154, (uint64_t *)&v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v150 + 22) = 2080;
          if (v42)
            v155 = 1702195828;
          else
            v155 = 0x65736C6166;
          if (v42)
            v156 = 0xE400000000000000;
          else
            v156 = 0xE500000000000000;
          v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, (uint64_t *)&v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v150 + 32) = 2080;
          if (v165)
            v157 = 1702195828;
          else
            v157 = 0x65736C6166;
          if (v165)
            v158 = 0xE400000000000000;
          else
            v158 = 0xE500000000000000;
          v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v158, (uint64_t *)&v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v150 + 42) = 2080;
          if (v164)
            v159 = 1702195828;
          else
            v159 = 0x65736C6166;
          if (v164)
            v160 = 0xE400000000000000;
          else
            v160 = 0xE500000000000000;
          v173 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v159, v160, (uint64_t *)&v171);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2356000, v146, (os_log_type_t)v166, "MPMediaLibrary#mediaItemRankingSignals with PersistentID mediaItemRankingSignals\n{\n    artist: %s\n    isInLibrary: %s\n    isExplicitContent: %s\n    isDownloaded: %s\n    isPlayable: %s\n}", (uint8_t *)v150, 0x34u);
          v161 = v167;
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v161, -1, -1);
          MEMORY[0x1C3BBFF64](v150, -1, -1);
        }

        v111 = one-time initialization token for shared;
        v110 = v109;
        goto LABEL_177;
      }
    }
    else
    {
      v63 = *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
      v64 = v60;
      if (!v63)
        goto LABEL_77;
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v62);
    goto LABEL_77;
  }
  v71 = objc_msgSend(v6, sel_collectionWithPersistentID_groupingType_, a1, 3);
  if (v71)
  {
    v53 = v71;
    v72 = objc_msgSend((id)objc_opt_self(), sel_persistentIDPropertyForGroupingType_, 3);
    v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v75 = v74;

    v173 = (unint64_t)objc_msgSend(v53, sel_persistentID);
    v76 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v77 = (void *)MEMORY[0x1C3BBEC44](v73, v75);
    swift_bridgeObjectRelease();
    v60 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_forProperty_, v76, v77);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v78 = swift_allocObject();
    *(_OWORD *)(v78 + 16) = xmmword_1C24FB5A0;
    *(_QWORD *)(v78 + 32) = v60;
    v173 = v78;
    specialized Array._endMutation()();
    v79 = v173;
    if (v173 >> 62)
    {
      v120 = v60;
      swift_bridgeObjectRetain();
      v121 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v121)
      {
LABEL_93:
        swift_bridgeObjectRelease();
        v122 = objc_allocWithZone(MEMORY[0x1E0CC2438]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        v123 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v116 = objc_msgSend(v122, sel_initWithFilterPredicates_, v123);

        objc_msgSend(v116, sel_setGroupingType_, 3);
        v124 = objc_msgSend(v116, sel_items);
        if (v124)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          v125 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v125 >> 62)
          {
            swift_bridgeObjectRetain();
            v124 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v124 = *(id *)((v125 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        v40 = (uint64_t)v124 > 0;
        if (objc_msgSend(v53, sel_valueForProperty_, *MEMORY[0x1E0CC1E98]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v171 = 0u;
          v172 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
        if (v175)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v126 = v169;
            v46 = objc_msgSend(v169, sel_BOOLValue);

            goto LABEL_105;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v173);
        }
        v46 = 1;
LABEL_105:
        if (objc_msgSend(v53, sel_valueForProperty_, *MEMORY[0x1E0CC1D48]))
          goto LABEL_90;
        goto LABEL_106;
      }
    }
    else
    {
      v80 = *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
      v81 = v60;
      if (!v80)
        goto LABEL_93;
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v79);
    goto LABEL_93;
  }
  v82 = objc_msgSend(v6, sel_collectionWithPersistentID_groupingType_, a1, 2);
  if (v82)
  {
    v83 = v82;
    v84 = objc_msgSend((id)objc_opt_self(), sel_persistentIDPropertyForGroupingType_, 2);
    v85 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v87 = v86;

    v173 = (unint64_t)objc_msgSend(v83, sel_persistentID);
    v88 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v89 = (void *)MEMORY[0x1C3BBEC44](v85, v87);
    swift_bridgeObjectRelease();
    v90 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_forProperty_, v88, v89);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v91 = swift_allocObject();
    *(_OWORD *)(v91 + 16) = xmmword_1C24FB5A0;
    *(_QWORD *)(v91 + 32) = v90;
    v173 = v91;
    specialized Array._endMutation()();
    v92 = v173;
    if (v173 >> 62)
    {
      v128 = v90;
      swift_bridgeObjectRetain();
      v129 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v129)
      {
LABEL_116:
        swift_bridgeObjectRelease();
        v130 = objc_allocWithZone(MEMORY[0x1E0CC2438]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        v131 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v132 = objc_msgSend(v130, sel_initWithFilterPredicates_, v131);

        objc_msgSend(v132, sel_setGroupingType_, 2);
        v133 = objc_msgSend(v132, sel_items);
        if (v133)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          v134 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v134 >> 62)
          {
            swift_bridgeObjectRetain();
            v133 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v133 = *(id *)((v134 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        v40 = (uint64_t)v133 > 0;
        if (objc_msgSend(v83, sel_valueForProperty_, *MEMORY[0x1E0CC1E98]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v171 = 0u;
          v172 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
        if (v175)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v135 = v169;
            v136 = objc_msgSend(v169, sel_BOOLValue);

LABEL_128:
            v137 = objc_msgSend(v83, sel_valueForProperty_, *MEMORY[0x1E0CC1D58]);
            goto LABEL_144;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v173);
        }
        v136 = 1;
        goto LABEL_128;
      }
    }
    else
    {
      v93 = *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
      v94 = v90;
      if (!v93)
        goto LABEL_116;
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v92);
    goto LABEL_116;
  }
  v95 = objc_msgSend(v6, sel_collectionWithPersistentID_groupingType_, a1, 4);
  if (v95)
  {
    v83 = v95;
    v96 = objc_msgSend((id)objc_opt_self(), sel_persistentIDPropertyForGroupingType_, 4);
    v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v99 = v98;

    v173 = (unint64_t)objc_msgSend(v83, sel_persistentID);
    v100 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)();
    v101 = (void *)MEMORY[0x1C3BBEC44](v97, v99);
    swift_bridgeObjectRelease();
    v90 = objc_msgSend((id)objc_opt_self(), sel_predicateWithValue_forProperty_, v100, v101);
    swift_unknownObjectRelease();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v102 = swift_allocObject();
    *(_OWORD *)(v102 + 16) = xmmword_1C24FB5A0;
    *(_QWORD *)(v102 + 32) = v90;
    v173 = v102;
    specialized Array._endMutation()();
    v103 = v173;
    if (v173 >> 62)
    {
      v138 = v90;
      swift_bridgeObjectRetain();
      v139 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v139)
      {
LABEL_131:
        swift_bridgeObjectRelease();
        v140 = objc_allocWithZone(MEMORY[0x1E0CC2438]);
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaPredicate);
        lazy protocol witness table accessor for type MPMediaPredicate and conformance NSObject();
        v141 = Set._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        v132 = objc_msgSend(v140, sel_initWithFilterPredicates_, v141);

        objc_msgSend(v132, sel_setGroupingType_, 4);
        v142 = objc_msgSend(v132, sel_items);
        if (v142)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for MPMediaItem);
          v143 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

          if (v143 >> 62)
          {
            swift_bridgeObjectRetain();
            v142 = (id)_CocoaArrayWrapper.endIndex.getter();
            swift_bridgeObjectRelease();
          }
          else
          {
            v142 = *(id *)((v143 & 0xFFFFFFFFFFFFF8) + 0x10);
          }
          swift_bridgeObjectRelease();
        }
        v40 = (uint64_t)v142 > 0;
        if (objc_msgSend(v83, sel_valueForProperty_, *MEMORY[0x1E0CC1E98]))
        {
          _bridgeAnyObjectToAny(_:)();
          swift_unknownObjectRelease();
        }
        else
        {
          v171 = 0u;
          v172 = 0u;
        }
        outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
        if (v175)
        {
          type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
          if ((swift_dynamicCast() & 1) != 0)
          {
            v144 = v169;
            v136 = objc_msgSend(v169, sel_BOOLValue);

LABEL_143:
            v137 = objc_msgSend(v83, sel_valueForProperty_, *MEMORY[0x1E0CC1D60]);
LABEL_144:
            if (v137)
            {
              _bridgeAnyObjectToAny(_:)();

              swift_unknownObjectRelease();
            }
            else
            {

              v171 = 0u;
              v172 = 0u;
            }
            outlined init with take of Any?((uint64_t)&v171, (uint64_t)&v173);
            v46 = v136;
            if (v175)
              goto LABEL_108;
            goto LABEL_148;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)&v173);
        }
        v136 = 1;
        goto LABEL_143;
      }
    }
    else
    {
      v104 = *(_QWORD *)((v173 & 0xFFFFFFFFFFFFF8) + 0x10);
      v105 = v90;
      if (!v104)
        goto LABEL_131;
    }
    specialized Set.init(_nonEmptyArrayLiteral:)(v103);
    goto LABEL_131;
  }
  v106 = Logger.logObject.getter();
  v107 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v106, v107))
  {
    v108 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v108 = 134217984;
    v173 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v106, v107, "MPMediaItem not found for %llu", v108, 0xCu);
    MEMORY[0x1C3BBFF64](v108, -1, -1);
  }

  v109 = 0;
  v110 = 0;
  v111 = one-time initialization token for shared;
LABEL_177:
  if (v111 != -1)
  {
    swift_once();
    v110 = v109;
  }
  v162 = (uint64_t)v168;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v168, 1);
  outlined destroy of PerformanceUtil.Ticket(v162);
  return v110;
}

uint64_t method lookup function for MediaItemRankingSignals()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MediaItemRankingSignals.__allocating_init(artist:isInLibrary:isExplicitContent:isDownloaded:isPlayable:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of MediaLibrary.mediaItemRankingSignals(for:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of MediaLibrary.mediaItemRankingSignals(for:entityType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t PommesAppStatus.bundleID.getter(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t PommesAppStatus.isLocked.getter(uint64_t a1, uint64_t a2, char a3)
{
  return a3 & 1;
}

uint64_t PommesAppStatus.isHidden.getter(uint64_t a1, uint64_t a2, unsigned int a3)
{
  return (a3 >> 8) & 1;
}

SiriInformationSearch::PommesAppStatus __swiftcall PommesAppStatus.init(bundleID:isLocked:isHidden:)(Swift::String bundleID, Swift::Bool isLocked, Swift::Bool isHidden)
{
  __int16 v3;
  __int16 v4;
  SiriInformationSearch::PommesAppStatus result;

  if (isHidden)
    v3 = 256;
  else
    v3 = 0;
  v4 = v3 & 0xFFFE | isLocked;
  result.bundleID = bundleID;
  result.isLocked = v4;
  result.isHidden = HIBYTE(v4);
  return result;
}

uint64_t PommesAppStatus.init(_:)(void *a1)
{
  id v2;
  uint64_t v3;

  v2 = objc_msgSend(a1, sel_bundleIdentifier);
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(a1, sel_isLocked);
  objc_msgSend(a1, sel_isHidden);

  return v3;
}

uint64_t static PommesAppStatus.available(_:)(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

SiriInformationSearch::PommesAppStatus __swiftcall PommesSystemAppChecking.appStatus(bundleID:)(Swift::String bundleID)
{
  uint64_t v1;
  void *v2;
  __int16 v3;
  __int16 v4;
  SiriInformationSearch::PommesAppStatus result;

  v1 = specialized PommesSystemAppChecking.appStatus(bundleID:)(bundleID._countAndFlagsBits, (unint64_t)bundleID._object);
  v4 = v3 & 0x101;
  result.bundleID._object = v2;
  result.bundleID._countAndFlagsBits = v1;
  result.isLocked = v4;
  result.isHidden = HIBYTE(v4);
  return result;
}

uint64_t protocol witness for PommesAppChecking.appStatus(bundleID:) in conformance PommesSystemAppChecking(uint64_t a1, unint64_t a2)
{
  return specialized PommesSystemAppChecking.appStatus(bundleID:)(a1, a2);
}

uint64_t specialized PommesSystemAppChecking.appStatus(bundleID:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  uint64_t v13;
  uint8_t *v14;
  uint64_t v15;
  char v16;
  void *v17;
  uint64_t v18;
  void *v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unsigned int v28;
  NSObject *v29;
  os_log_type_t v30;
  _BOOL4 v31;
  uint64_t v32;
  uint8_t *v33;
  id v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v4 = type metadata accessor for AppProtectionFeatures();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  v9 = __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  v12 = os_log_type_enabled(v10, v11);
  v39 = a1;
  if (v12)
  {
    v37 = v4;
    v13 = swift_slowAlloc();
    v38 = v9;
    v14 = (uint8_t *)v13;
    v15 = swift_slowAlloc();
    v41 = v15;
    *(_DWORD *)v14 = 136315138;
    swift_bridgeObjectRetain();
    v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v41);
    v4 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v10, v11, "AVAILABILITY: Checking bundle ID %s", v14, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v15, -1, -1);
    MEMORY[0x1C3BBFF64](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0CF9620], v4);
  v16 = AppProtectionFeatures.enabled.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if ((v16 & 1) != 0)
  {
    v17 = (void *)objc_opt_self();
    v18 = v39;
    v19 = (void *)MEMORY[0x1C3BBEC44](v39, a2);
    v20 = objc_msgSend(v17, sel_applicationWithBundleIdentifier_, v19);

    v21 = v20;
    swift_bridgeObjectRetain_n();
    v22 = v21;
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = swift_slowAlloc();
      v26 = swift_slowAlloc();
      v41 = v26;
      *(_DWORD *)v25 = 136315650;
      swift_bridgeObjectRetain();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, a2, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v25 + 12) = 1024;
      v27 = objc_msgSend(v22, sel_isLocked);

      LODWORD(v40) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v25 + 18) = 1024;
      v28 = objc_msgSend(v22, sel_isHidden);

      LODWORD(v40) = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2356000, v23, v24, "AVAILABILITY: app %s is…\n    locked: %{BOOL}d\n    hidden: %{BOOL}d", (uint8_t *)v25, 0x18u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v26, -1, -1);
      MEMORY[0x1C3BBFF64](v25, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v34 = objc_msgSend(v22, sel_bundleIdentifier);
    v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    objc_msgSend(v22, sel_isLocked);
    objc_msgSend(v22, sel_isHidden);

  }
  else
  {
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    v31 = os_log_type_enabled(v29, v30);
    v32 = v39;
    if (v31)
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1C2356000, v29, v30, "AVAILABILITY: core functionality not enabled", v33, 2u);
      MEMORY[0x1C3BBFF64](v33, -1, -1);
    }

    swift_bridgeObjectRetain();
  }
  return v32;
}

uint64_t destroy for PommesAppStatus()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for PommesAppStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PommesAppStatus(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

__n128 __swift_memcpy18_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PommesAppStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_BYTE *)(a1 + 17) = *(_BYTE *)(a2 + 17);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesAppStatus(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 18))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesAppStatus(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 18) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 18) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesAppStatus()
{
  return &type metadata for PommesAppStatus;
}

uint64_t dispatch thunk of PommesAppChecking.appStatus(bundleID:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

ValueMetadata *type metadata accessor for PommesSystemAppChecking()
{
  return &type metadata for PommesSystemAppChecking;
}

uint64_t CallContactPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static CallContactPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

uint64_t CallContactPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t CallContactPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t CallContactPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance CallContactPreflightClient()
{
  return 0xD00000000000001ALL;
}

uint64_t specialized CallContactPreflightClient.hasContact(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, unint64_t, uint64_t);
  uint64_t v20;
  char v21;
  _QWORD v22[3];
  unint64_t v23;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0DEE9D8];
  v23 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v7 = result;
    if (result)
      goto LABEL_3;
LABEL_14:
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
    goto LABEL_15;
  }
  v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_14;
LABEL_3:
  if (v7 < 1)
  {
    __break(1u);
    return result;
  }
  for (i = 0; i != v7; ++i)
  {
    if ((a1 & 0xC000000000000001) != 0)
      v10 = MEMORY[0x1C3BBF3F4](i, a1);
    else
      v10 = swift_retain();
    v11 = MEMORY[0x1C3BBCF64](v10);
    swift_release();
    if (v11)
      v12 = v11;
    else
      v12 = v6;
    specialized Array.append<A>(contentsOf:)(v12);
  }
  swift_bridgeObjectRelease();
  v13 = v23;
LABEL_15:
  v14 = specialized Sequence.flatMap<A>(_:)(v13);
  swift_bridgeObjectRelease();
  v15 = *(_QWORD *)(v14 + 16);
  if (v15)
  {
    v16 = v14 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v17 = *(_QWORD *)(v3 + 72);
    v18 = v14;
    v19 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
    v22[1] = v18;
    swift_bridgeObjectRetain();
    while (1)
    {
      v19(v5, v16, v2);
      if (UsoIdentifier.appBundleId.getter() == 0x73746361746E6F43 && v20 == 0xE800000000000000)
        break;
      v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      if ((v21 & 1) != 0)
        goto LABEL_25;
      v16 += v17;
      if (!--v15)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_25:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
}

uint64_t outlined destroy of PommesCandidateId?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for CallContactPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for CallContactPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of CallContactPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of CallContactPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t OfflineMusicPlaybackPreflightClient.__allocating_init(networkAvailabilityProvider:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

void *OfflineMusicPlaybackPreflightClient.preflightClientHandlerIdentifier.unsafeMutableAddressor()
{
  return &static OfflineMusicPlaybackPreflightClient.preflightClientHandlerIdentifier;
}

unint64_t static OfflineMusicPlaybackPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000023;
}

unint64_t static OfflineMusicPlaybackPreflightClient.overrideFeatureFlagDomain.getter()
{
  return 0xD000000000000011;
}

unint64_t static OfflineMusicPlaybackPreflightClient.overrideFeatureFlagKey.getter()
{
  return 0xD000000000000018;
}

uint64_t OfflineMusicPlaybackPreflightClient.makeAudioUnderstanding(pommesSearchRequest:)@<X0>(void (*a1)(_QWORD, _QWORD)@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char v39;
  void (*v40)(char *, char *, uint64_t);
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  void (*v63)(_QWORD, _QWORD);
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint64_t v71;
  uint8_t *v72;
  uint8_t *v73;
  uint64_t (*v74)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t);
  void (*v75)(_QWORD, _QWORD);
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(_QWORD, _QWORD);
  char *v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1E0C80A78](v2);
  v83 = (uint64_t)&v83 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v86 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v88 = (char *)&v83 - v7;
  v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v91 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v87 = (char *)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v103 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v102 = (char *)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v101 = (char *)&v83 - v13;
  v14 = type metadata accessor for Siri_Nlu_External_Parser();
  v99 = *(_QWORD *)(v14 - 8);
  v100 = v14;
  MEMORY[0x1E0C80A78](v14);
  v98 = (char *)&v83 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v16);
  v90 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Siri_Nlu_External_UserParse();
  v19 = *(_QWORD *)(v18 - 8);
  v20 = MEMORY[0x1E0C80A78](v18);
  v96 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v83 - v23;
  MEMORY[0x1E0C80A78](v22);
  v89 = (char *)&v83 - v25;
  v26 = PommesSearchRequest.userParses.getter();
  v27 = v26;
  v28 = MEMORY[0x1E0DEE9D8];
  v105 = MEMORY[0x1E0DEE9D8];
  v29 = *(_QWORD *)(v26 + 16);
  v93 = v18;
  v97 = v29;
  if (v29)
  {
    v84 = v8;
    v85 = a1;
    v30 = 0;
    v95 = *MEMORY[0x1E0D9F100];
    v92 = v19;
    v94 = v26;
    while (v30 < *(_QWORD *)(v27 + 16))
    {
      v31 = *(_QWORD *)(v19 + 72);
      v104 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v24, v27 + v104 + v31 * v30, v18);
      v32 = v98;
      Siri_Nlu_External_UserParse.parser.getter();
      v33 = v24;
      v34 = v19;
      v35 = v101;
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(char *, uint64_t))(v99 + 8))(v32, v100);
      v36 = v103;
      v37 = v18;
      v38 = v102;
      (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, v95, v10);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F170]);
      v39 = dispatch thunk of static Equatable.== infix(_:_:)();
      a1 = *(void (**)(_QWORD, _QWORD))(v36 + 8);
      a1(v38, v10);
      a1(v35, v10);
      if ((v39 & 1) != 0)
      {
        (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v37);
        v18 = v37;
        v19 = v34;
        v24 = v33;
        v27 = v94;
      }
      else
      {
        v40 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
        v40(v96, v33, v37);
        v41 = v105;
        v24 = v33;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1);
          v41 = v105;
        }
        v27 = v94;
        v42 = v104;
        v44 = *(_QWORD *)(v41 + 16);
        v43 = *(_QWORD *)(v41 + 24);
        a1 = (void (*)(_QWORD, _QWORD))(v44 + 1);
        if (v44 >= v43 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1);
          v41 = v105;
        }
        *(_QWORD *)(v41 + 16) = a1;
        v45 = v41 + v42 + v44 * v31;
        v18 = v93;
        v40((char *)v45, v96, v93);
        v105 = v41;
        v19 = v92;
      }
      if (v97 == ++v30)
      {
        v28 = v105;
        a1 = v85;
        v8 = v84;
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_48;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  v46 = (uint64_t)v90;
  v47 = v91;
  if (*(_QWORD *)(v28 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v90, v28 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80)), v18);
    v48 = 0;
  }
  else
  {
    v48 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v46, v48, 1, v18);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v46, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
    if (one-time initialization token for pommes == -1)
    {
LABEL_18:
      v49 = type metadata accessor for Logger();
      __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
      v50 = Logger.logObject.getter();
      v51 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v50, v51))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_1C2356000, v50, v51, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : userParse not present", v52, 2u);
        MEMORY[0x1C3BBFF64](v52, -1, -1);
      }

      goto LABEL_43;
    }
LABEL_48:
    swift_once();
    goto LABEL_18;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 32))(v89, v46, v18);
  v53 = Siri_Nlu_External_Span.matcherNames.getter();
  if (*(_QWORD *)(v53 + 16))
  {
    v54 = (uint64_t)v88;
    (*(void (**)(char *, unint64_t, uint64_t))(v47 + 16))(v88, v53 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80)), v8);
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
    v55(v54, 0, 1, v8);
  }
  else
  {
    v55 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
    v54 = (uint64_t)v88;
    v55((uint64_t)v88, 1, 1, v8);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v54, 1, v8) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.pommes);
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_1C2356000, v57, v58, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : userParse.userDialogAct not present", v59, 2u);
      MEMORY[0x1C3BBFF64](v59, -1, -1);
    }

LABEL_42:
    (*(void (**)(char *, uint64_t))(v19 + 8))(v89, v18);
LABEL_43:
    v81 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
    v74 = *(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v81 - 8) + 56);
    v75 = a1;
    v76 = 1;
    return v74(v75, v76, 1, v81);
  }
  v60 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v87, v54, v8);
  type metadata accessor for AudioUsoIntent();
  v61 = (uint64_t)v86;
  (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v86, v60, v8);
  v55(v61, 0, 1, v8);
  if (!AudioUsoIntent.__allocating_init(userDialogAct:)(v61))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      v80 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v80 = 0;
      _os_log_impl(&dword_1C2356000, v78, v79, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : could not create AudioUsoIntent from userDialogAct", v80, 2u);
      MEMORY[0x1C3BBFF64](v80, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v47 + 8))(v87, v8);
    goto LABEL_42;
  }
  v62 = v8;
  v63 = a1;
  v64 = swift_retain();
  v65 = v83;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init(from:)(v64, v83);
  v66 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v67 = *(_QWORD *)(v66 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v67 + 48))(v65, 1, v66) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v65, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
    v69 = Logger.logObject.getter();
    v70 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v69, v70))
    {
      v71 = v19;
      v72 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v72 = 0;
      _os_log_impl(&dword_1C2356000, v69, v70, "OfflineMusicPlaybackPreflightClient makeAudioUnderstanding : could not create AudioUnderstanding from AudioUsoIntent", v72, 2u);
      v73 = v72;
      v19 = v71;
      v47 = v91;
      MEMORY[0x1C3BBFF64](v73, -1, -1);
    }
    swift_release();

    (*(void (**)(char *, uint64_t))(v47 + 8))(v87, v62);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v89, v93);
    v74 = *(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(v67 + 56);
    v75 = v63;
    v76 = 1;
  }
  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v87, v62);
    (*(void (**)(char *, uint64_t))(v19 + 8))(v89, v93);
    (*(void (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v67 + 32))(a1, v65, v66);
    v74 = *(uint64_t (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t, uint64_t))(v67 + 56);
    v75 = a1;
    v76 = 0;
  }
  v81 = v66;
  return v74(v75, v76, 1, v81);
}

void closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(id a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  void (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);
  id v13;
  uint64_t v14;
  id v15;
  id v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  unint64_t v22;
  NSObject *oslog;
  uint64_t v24[3];
  uint64_t v25;

  if ((a2 & 1) != 0)
  {
    v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 144);
    v13 = a1;
    v12(a4, a5, a6, 1);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v15 = a1;
    v16 = a1;
    oslog = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      v19 = swift_slowAlloc();
      v24[0] = v19;
      *(_DWORD *)v18 = 136315138;
      v25 = (uint64_t)a1;
      v20 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v21 = String.init<A>(describing:)();
      v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      _os_log_impl(&dword_1C2356000, oslog, v17, "Local client search failed : %s", v18, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v19, -1, -1);
      MEMORY[0x1C3BBFF64](v18, -1, -1);

      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
    }
    else
    {
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>(a1, 1);

    }
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 136))(a4, a5, a6);
    swift_beginAccess();
    *(_QWORD *)(a7 + 16) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
}

uint64_t OfflineMusicPlaybackPreflightClient.init(networkAvailabilityProvider:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

uint64_t sub_1C2408C4C()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t OfflineMusicPlaybackPreflightClient.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t OfflineMusicPlaybackPreflightClient.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance OfflineMusicPlaybackPreflightClient()
{
  return 0xD000000000000023;
}

id specialized OfflineMusicPlaybackPreflightClient.userDefaultOverride.getter()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  id v4;

  if (!AFIsInternalInstall())
    return 0;
  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0;
  v3 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C25046A0);
  v4 = objc_msgSend(v2, sel_BOOLForKey_, v3);

  return v4;
}

uint64_t specialized OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  void (*v27)(uint64_t, char *, _QWORD, void (*)(void *, char), _QWORD *);
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a2;
  v34 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v33 = *(_QWORD *)(v8 - 8);
  v9 = *(_QWORD *)(v33 + 64);
  MEMORY[0x1E0C80A78](v8);
  v31 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = swift_allocObject();
  v30 = v13;
  *(_QWORD *)(v13 + 16) = MEMORY[0x1E0DEE9D8];
  v14 = (uint64_t *)(v13 + 16);
  type metadata accessor for AnalyticsComponentIdGenerator();
  v15 = swift_allocObject();
  type metadata accessor for OnDeviceSearchInstrumentationUtil();
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = 0;
  *(_QWORD *)(v16 + 24) = v15;
  v17 = objc_msgSend((id)objc_opt_self(), sel_indexMatcher);
  type metadata accessor for MusicDomain();
  v18 = swift_allocObject();
  v19 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v17, v18);
  OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(a3, a4, a5, 1);
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v12, v32, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v20);
  v22 = a5;
  v23 = v31;
  outlined init with copy of PommesCandidateId?(v22, v31);
  v24 = (*(unsigned __int8 *)(v33 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
  v25 = (v9 + v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  v26 = (_QWORD *)swift_allocObject();
  v26[2] = v16;
  v26[3] = a3;
  v26[4] = a4;
  outlined init with take of PommesCandidateId?(v23, (uint64_t)v26 + v24);
  *(_QWORD *)((char *)v26 + v25) = v30;
  v27 = *(void (**)(uint64_t, char *, _QWORD, void (*)(void *, char), _QWORD *))(*(_QWORD *)v19 + 136);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  v27(v34, v12, MEMORY[0x1E0DEE9D8], partial apply for closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:), v26);
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  swift_beginAccess();
  v28 = *v14;
  swift_bridgeObjectRetain();
  swift_release();
  return v28;
}

uint64_t type metadata accessor for OfflineMusicPlaybackPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for OfflineMusicPlaybackPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OfflineMusicPlaybackPreflightClient.__allocating_init(networkAvailabilityProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of OfflineMusicPlaybackPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t sub_1C2409098()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t outlined init with copy of PommesCandidateId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C2409104()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for PommesCandidateId();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  swift_release();
  return swift_deallocObject();
}

uint64_t outlined init with take of PommesCandidateId?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void partial apply for closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(void *a1, char a2)
{
  uint64_t *v2;
  char v4;
  uint64_t v5;
  unint64_t v6;

  v4 = a2 & 1;
  v5 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  closure #1 in OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(a1, v4, v2[2], v2[3], v2[4], (uint64_t)v2 + v6, *(uint64_t *)((char *)v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t one-time initialization function for timeout()
{
  uint64_t v0;

  v0 = type metadata accessor for DispatchTimeInterval();
  __swift_allocate_value_buffer(v0, static PreferredNavigationAppDataProvider.timeout);
  *(_QWORD *)__swift_project_value_buffer(v0, (uint64_t)static PreferredNavigationAppDataProvider.timeout) = 50;
  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 - 8) + 104))();
}

uint64_t PreferredNavigationAppDataProvider.timeout.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for timeout != -1)
    swift_once();
  v0 = type metadata accessor for DispatchTimeInterval();
  return __swift_project_value_buffer(v0, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
}

uint64_t static PreferredNavigationAppDataProvider.timeout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for timeout != -1)
    swift_once();
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = __swift_project_value_buffer(v2, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 16))(a1, v3, v2);
}

const char *PreferredNavigationAppDataProvider.firstPartyMapBundleId.unsafeMutableAddressor()
{
  return "com.apple.Maps";
}

uint64_t static PreferredNavigationAppDataProvider.firstPartyMapBundleId.getter()
{
  return 0x6C7070612E6D6F63;
}

uint64_t PreferredNavigationAppDataProvider.__allocating_init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v10 = swift_allocObject();
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a1, v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)((uint64_t)v15, a2, a3, a4, a5, v10, v11, v12);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;

  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v13 = __swift_mutable_project_boxed_opaque_existential_1(a1, v11);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v16 + 16))(v15);
  v17 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)((uint64_t)v15, a2, a3, a4, a5, v5, v11, v12);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v17;
}

uint64_t static PreferredNavigationAppDataProvider.make(appDataProvider:preferences:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _OWORD v12[2];
  uint64_t v13;
  _BYTE v14[24];
  uint64_t v15;
  uint64_t v16;

  outlined init with copy of AppDataProviding(a1, (uint64_t)v14);
  type metadata accessor for PreferredNavigationAppDataProvider();
  memset(v12, 0, sizeof(v12));
  v13 = 0;
  v3 = swift_allocObject();
  v4 = v15;
  v5 = v16;
  v6 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v14, v15);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v9 + 16))(v8);
  v10 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)((uint64_t)v8, (uint64_t)a2, 0, 0, (uint64_t)v12, v3, v4, v5);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v10);
}

Swift::Void __swiftcall PreferredNavigationAppDataProvider.prepare()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  __int128 v5;
  uint64_t v6;
  _BYTE v7[24];
  ValueMetadata *v8;
  _UNKNOWN **v9;

  v1 = *(void **)(v0 + 72);
  v2 = v1;
  v3 = v1;
  if (!v1)
  {
    v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D0D340]), sel_init);
    v2 = *(void **)(v0 + 72);
  }
  *(_QWORD *)(v0 + 72) = v3;
  v4 = v1;

  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v0 + 80, (uint64_t)&v5, &demangling cache variable for type metadata for ForegroundAppProvider?);
  if (v6)
  {
    outlined init with take of AppDataProviding(&v5, (uint64_t)v7);
  }
  else
  {
    v8 = &type metadata for RunningBoardForegroundAppProvider;
    v9 = &protocol witness table for RunningBoardForegroundAppProvider;
    outlined destroy of MediaUserStateCenter?((uint64_t)&v5, &demangling cache variable for type metadata for ForegroundAppProvider?);
  }
  outlined init with take of ForegroundAppProvider?((uint64_t)v7, (uint64_t)&v5);
  swift_beginAccess();
  outlined assign with take of ForegroundAppProvider?((uint64_t)&v5, v0 + 80);
  swift_endAccess();
}

uint64_t PreferredNavigationAppDataProvider.wait(timeout:)()
{
  return 0;
}

Swift::Void __swiftcall PreferredNavigationAppDataProvider.reset()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  _OWORD v3[2];
  uint64_t v4;

  objc_msgSend(*(id *)(v0 + 64), sel_invalidate);
  v1 = *(void **)(v0 + 64);
  *(_QWORD *)(v0 + 64) = 0;

  v2 = *(void **)(v0 + 72);
  *(_QWORD *)(v0 + 72) = 0;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  swift_beginAccess();
  outlined assign with take of ForegroundAppProvider?((uint64_t)v3, v0 + 80);
  swift_endAccess();
}

uint64_t PreferredNavigationAppDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  const char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v31;
  uint64_t v32;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61[6];

  *(_QWORD *)&v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v50 = (char *)&v45 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v55 = *(_QWORD *)(v1 - 8);
  v56 = v1;
  MEMORY[0x1E0C80A78](v1);
  v54 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v46 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v48 = (char *)&v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Google_Protobuf_Any();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v47 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v49 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v60 = (uint64_t)&v45 - v18;
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  v58 = *(_QWORD *)(v19 - 8);
  v59 = v19;
  MEMORY[0x1E0C80A78](v19);
  v57 = (char *)&v45 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()();
  if (!v22)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_14;
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    v27 = "PreferredNavigationAppDataProvider#fetch No user preferred navigation app found, returning nil";
    goto LABEL_13;
  }
  if (v21 == 0x6C7070612E6D6F63 && v22 == 0xEE007370614D2E65
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.info.getter();
    if (!os_log_type_enabled(v24, v25))
      goto LABEL_14;
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    v27 = "PreferredNavigationAppDataProvider#fetch No user preferred third-party navigation app found, returning nil";
LABEL_13:
    _os_log_impl(&dword_1C2356000, v24, v25, v27, v26, 2u);
    MEMORY[0x1C3BBFF64](v26, -1, -1);
LABEL_14:

    return 0;
  }
  v45 = v3;
  v31 = v57;
  Apple_Parsec_Siri_V2alpha_AppInfo.init()();
  Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.setter();
  v32 = v59;
  v61[3] = v59;
  v61[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v61);
  (*(void (**)(uint64_t *, char *, uint64_t))(v58 + 16))(boxed_opaque_existential_1, v31, v32);
  defaultAnyTypeURLPrefix.getter();
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  v34 = v46;
  v35 = v60;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v60, 0, 1, v5);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0D6FCD0], v8);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5);
  v37 = v45;
  if (v36 == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v47, v17, v5);
  }
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v34 + 104))(v48, *MEMORY[0x1E0D70598], v37);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  v38 = v54;
  Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
  (*(void (**)(char *, _QWORD, _QWORD))(v51 + 104))(v50, *MEMORY[0x1E0D6F198], v53);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  v39 = v49;
  v40 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  v41 = swift_allocObject();
  v53 = xmmword_1C24FA1B0;
  *(_OWORD *)(v41 + 16) = xmmword_1C24FA1B0;
  v42 = v52;
  (*(void (**)(unint64_t, char *, uint64_t))(v39 + 16))(v41 + v40, v13, v52);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
  v43 = v55;
  v44 = (*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = v53;
  (*(void (**)(unint64_t, char *, uint64_t))(v43 + 32))(v29 + v44, v38, v56);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v13, v42);
  outlined destroy of MediaUserStateCenter?(v60, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v57, v59);
  return v29;
}

uint64_t PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  void *v9;
  id v10;
  uint64_t v11;
  void *v12;
  void *v13;
  id v14;
  id v15;
  void *v16;
  uint64_t v17;
  dispatch_semaphore_t v18;
  void *v19;
  id v20;
  NSObject *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v47;
  dispatch_semaphore_t v48;
  uint64_t aBlock[3];
  void *v50;
  Swift::Int (*v51)(uint64_t, uint64_t, void *);
  uint64_t v52;
  _QWORD v53[3];
  uint64_t v54;
  uint64_t v55;

  v1 = v0;
  v2 = type metadata accessor for DispatchTime();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v47 - v7;
  v9 = *(void **)(v1 + 72);
  if (v9)
  {
    v10 = objc_msgSend(v9, sel_currentSession);
    if (v10)
    {

      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = 0;
      *(_QWORD *)(v11 + 24) = 0;
      v48 = dispatch_semaphore_create(0);
      v12 = *(void **)(v1 + 64);
      v13 = v12;
      v14 = v12;
      if (!v12)
      {
        v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D0D378]), sel_init);
        v13 = *(void **)(v1 + 64);
      }
      *(_QWORD *)(v1 + 64) = v14;
      v15 = v12;

      v16 = *(void **)(v1 + 64);
      if (v16)
      {
        v17 = swift_allocObject();
        v47 = v11 + 16;
        v18 = v48;
        *(_QWORD *)(v17 + 16) = v11;
        *(_QWORD *)(v17 + 24) = v18;
        v51 = partial apply for closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp();
        v52 = v17;
        aBlock[0] = MEMORY[0x1E0C809B0];
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ();
        v50 = &block_descriptor_7;
        v19 = _Block_copy(aBlock);
        v20 = v16;
        swift_retain();
        v21 = v18;
        swift_release();
        objc_msgSend(v20, sel_fetchDockAppForCategory_completion_, 8, v19);
        _Block_release(v19);

      }
      static DispatchTime.now()();
      if (one-time initialization token for timeout != -1)
        swift_once();
      v22 = type metadata accessor for DispatchTimeInterval();
      v23 = __swift_project_value_buffer(v22, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
      MEMORY[0x1C3BBEB6C](v6, v23);
      v24 = *(void (**)(char *, uint64_t))(v3 + 8);
      v24(v6, v2);
      MEMORY[0x1C3BBF190](v8);
      v24(v8, v2);
      if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v25 = type metadata accessor for Logger();
        __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
        v26 = Logger.logObject.getter();
        v27 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v26, v27))
        {
          v28 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v28 = 0;
          _os_log_impl(&dword_1C2356000, v26, v27, "PreferredNavigationAppDataProvider#fetch timed out waiting for CarPlay dock app", v28, 2u);
          MEMORY[0x1C3BBFF64](v28, -1, -1);
        }

      }
      swift_beginAccess();
      v29 = *(_QWORD *)(v11 + 24);
      if (v29)
      {
        v30 = *(_QWORD *)(v11 + 16);
        v31 = one-time initialization token for pommes;
        swift_bridgeObjectRetain();
        if (v31 != -1)
          swift_once();
        v32 = type metadata accessor for Logger();
        __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
        swift_bridgeObjectRetain_n();
        v33 = Logger.logObject.getter();
        v34 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v33, v34))
        {
          v35 = (uint8_t *)swift_slowAlloc();
          v36 = swift_slowAlloc();
          aBlock[0] = v36;
          *(_DWORD *)v35 = 136315138;
          swift_bridgeObjectRetain();
          v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v29, aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C2356000, v33, v34, "PreferredNavigationAppDataProvider#fetch from CarPlay dock app bundle id: %s", v35, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v36, -1, -1);
          MEMORY[0x1C3BBFF64](v35, -1, -1);
          swift_release();

        }
        else
        {
          swift_release();

          swift_bridgeObjectRelease_n();
        }
        return v30;
      }
      swift_release();

    }
  }
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v1 + 80, (uint64_t)aBlock, &demangling cache variable for type metadata for ForegroundAppProvider?);
  if (v50)
  {
    outlined init with copy of AppDataProviding((uint64_t)aBlock, (uint64_t)v53);
    outlined destroy of MediaUserStateCenter?((uint64_t)aBlock, &demangling cache variable for type metadata for ForegroundAppProvider?);
    v37 = v54;
    v38 = v55;
    __swift_project_boxed_opaque_existential_1(v53, v54);
    v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 8))(v37, v38);
    v40 = v39;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v53);
    if (v40)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain_n();
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        v45 = swift_slowAlloc();
        aBlock[0] = v45;
        *(_DWORD *)v44 = 136315138;
        swift_bridgeObjectRetain();
        v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v40, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1C2356000, v42, v43, "PreferredNavigationAppDataProvider#fetch from foreground app bundle id: %s", v44, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v45, -1, -1);
        MEMORY[0x1C3BBFF64](v44, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      return 0;
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)aBlock, &demangling cache variable for type metadata for ForegroundAppProvider?);
    return 0;
  }
  return v30;
}

Swift::Int closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;

  if (a2)
  {
    swift_beginAccess();
    *(_QWORD *)(a4 + 16) = a1;
    *(_QWORD *)(a4 + 24) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    v9 = a3;
    v10 = a3;
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v13 = 138412290;
      if (a3)
      {
        v15 = a3;
        v16 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        v16 = 0;
      }
      *v14 = v16;

      _os_log_impl(&dword_1C2356000, v11, v12, "PreferredNavigationAppDataProvider#fetch failed from CarPlay dock with error: %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v14, -1, -1);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }
    else
    {

    }
  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?, @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, uint64_t, void *);
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;

  v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v6;
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  swift_retain();
  v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

id *PreferredNavigationAppDataProvider.deinit()
{
  id *v0;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));

  outlined destroy of MediaUserStateCenter?((uint64_t)(v0 + 10), &demangling cache variable for type metadata for ForegroundAppProvider?);
  return v0;
}

uint64_t PreferredNavigationAppDataProvider.__deallocating_deinit()
{
  id *v0;

  __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));

  outlined destroy of MediaUserStateCenter?((uint64_t)(v0 + 10), &demangling cache variable for type metadata for ForegroundAppProvider?);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance PreferredNavigationAppDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance PreferredNavigationAppDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance PreferredNavigationAppDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 224))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance PreferredNavigationAppDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t *boxed_opaque_existential_1;

  *(_QWORD *)(a6 + 40) = a7;
  *(_QWORD *)(a6 + 48) = a8;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(a6 + 16));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a7 - 8) + 32))(boxed_opaque_existential_1, a1, a7);
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_QWORD *)(a6 + 56) = a2;
  *(_QWORD *)(a6 + 64) = a3;
  *(_QWORD *)(a6 + 72) = a4;
  swift_beginAccess();
  outlined assign with take of ForegroundAppProvider?(a5, a6 + 80);
  swift_endAccess();
  return a6;
}

uint64_t type metadata accessor for PreferredNavigationAppDataProvider()
{
  return objc_opt_self();
}

uint64_t outlined init with take of ForegroundAppProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForegroundAppProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ForegroundAppProvider?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ForegroundAppProvider?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6DD90], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo);
  }
  return result;
}

uint64_t method lookup function for PreferredNavigationAppDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.__allocating_init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))() & 1;
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PreferredNavigationAppDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 224);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t sub_1C240ABC0()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C240ABE4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3;

  return closure #1 in PreferredNavigationAppDataProvider.getUserPreferredNavigationApp()(a1, a2, a3, *(_QWORD *)(v3 + 16));
}

uint64_t AudioCacheHandler.__allocating_init()()
{
  return swift_allocObject();
}

id AudioCacheHandler.makeCacheable(pommesResponse:)(void *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  id result;
  uint64_t v12;
  id v13;
  id v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  void *v20;
  objc_class *v21;
  void *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  void (*v28)(char *, unint64_t, uint64_t);
  char *v29;
  char *v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  void *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  id v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  unint64_t v44;
  Class v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  _QWORD *v51;
  id v52;
  void *v53;

  v38 = a1;
  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v49 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v50 = (char *)&v38 - v5;
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  MEMORY[0x1E0C80A78](v6);
  v42 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = dispatch thunk of PommesResponse.experiences.getter();
  if (v8 >> 62)
    goto LABEL_23;
  v9 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v9)
  {
    while (1)
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v53 = (void *)MEMORY[0x1E0DEE9D8];
      result = (id)specialized ContiguousArray.reserveCapacity(_:)();
      if (v9 < 0)
        break;
      v12 = 0;
      v44 = v8 & 0xC000000000000001;
      v39 = v8 + 32;
      v40 = v8;
      v48 = v2;
      v41 = v9;
      while (v12 != v9)
      {
        if (v44)
          v19 = (id)MEMORY[0x1C3BBF3F4](v12, v8);
        else
          v19 = *(id *)(v39 + 8 * v12);
        v20 = v19;
        dispatch thunk of Experience.associatedEntities.setter();
        v21 = (objc_class *)type metadata accessor for AudioExperience();
        v22 = (void *)swift_dynamicCastClass();
        if (v22)
        {
          v45 = v21;
          v47 = v12;
          v52 = v22;
          v46 = v20;
          v23 = dispatch thunk of AudioExperience.serverAudioResults.getter();
          v24 = *(_QWORD *)(v23 + 16);
          if (v24)
          {
            v51 = v10;
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24, 0);
            v25 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
            v43 = v23;
            v26 = v23 + v25;
            v27 = *(_QWORD *)(v2 + 72);
            v28 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
            v29 = v50;
            do
            {
              v30 = v49;
              v28(v49, v26, v1);
              v28(v29, (unint64_t)v30, v1);
              Apple_Parsec_Siri_V2alpha_AudioItem.assetInfo.setter();
              (*(void (**)(char *, uint64_t))(v2 + 8))(v30, v1);
              v10 = v51;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10[2] + 1, 1);
                v10 = v51;
              }
              v32 = v10[2];
              v31 = v10[3];
              v29 = v50;
              if (v32 >= v31 >> 1)
              {
                specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v31 > 1, v32 + 1, 1);
                v29 = v50;
                v10 = v51;
              }
              v10[2] = v32 + 1;
              v33 = (char *)v10 + v25 + v32 * v27;
              v2 = v48;
              (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v33, v29, v1);
              v51 = v10;
              v26 += v27;
              --v24;
            }
            while (v24);
            swift_bridgeObjectRelease();
            v8 = v40;
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          v13 = v52;
          dispatch thunk of Experience.pluginIdentifier.getter();

          v14 = v13;
          dispatch thunk of Experience.queryConfidence.getter();

          v15 = v14;
          Experience.userDialogAct.getter();

          MEMORY[0x1E0C80A78](v16);
          *(&v38 - 2) = v10;
          *(&v38 - 1) = &v52;
          v17 = objc_allocWithZone(v45);
          AudioExperience.init(pluginId:queryConfidence:userDialogAct:builder:)();
          swift_bridgeObjectRelease();
          v18 = v52;

          v9 = v41;
          v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v12 = v47;
        }
        ++v12;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v12 == v9)
        {
          v34 = v53;
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      v9 = _CocoaArrayWrapper.endIndex.getter();
      if (!v9)
        goto LABEL_24;
    }
    __break(1u);
  }
  else
  {
LABEL_24:
    swift_bridgeObjectRelease();
    v34 = (void *)MEMORY[0x1E0DEE9D8];
LABEL_25:
    v35 = type metadata accessor for PommesResponse();
    MEMORY[0x1E0C80A78](v35);
    v36 = v38;
    *(&v38 - 2) = v34;
    *(&v38 - 1) = v36;
    v37 = PommesResponse.__allocating_init(_:)();
    swift_bridgeObjectRelease();
    if (v37)
      return (id)v37;
    else
      return v38;
  }
  return result;
}

uint64_t closure #2 in closure #1 in AudioCacheHandler.makeCacheable(pommesResponse:)(uint64_t a1, uint64_t a2, id *a3)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v28;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  AudioExperience.Builder.serverAudioResults.setter();
  v13 = *a3;
  AudioExperience.audioUnderstanding.getter();

  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v12, 0, 1, v14);
  AudioExperience.Builder.audioUnderstanding.setter();
  v15 = *a3;
  AudioExperience.playbackSignals.getter();

  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v9, 0, 1, v16);
  AudioExperience.Builder.playbackSignals.setter();
  v17 = *a3;
  dispatch thunk of AudioExperience.internalSignals.getter();

  AudioExperience.Builder.internalSignals.setter();
  v18 = *a3;
  AudioExperience.pegasusAudioType.getter();

  AudioExperience.Builder.pegasusAudioType.setter();
  v19 = *a3;
  AudioExperience.launchID.getter();

  AudioExperience.Builder.launchID.setter();
  v20 = *a3;
  AudioExperience.systemExtensionBundleID.getter();

  AudioExperience.Builder.systemExtensionBundleID.setter();
  v21 = *a3;
  AudioExperience.boltProxiedBundleID.getter();

  AudioExperience.Builder.boltProxiedBundleID.setter();
  v22 = *a3;
  AudioExperience.shouldPerformAppSelection.getter();

  AudioExperience.Builder.shouldPerformAppSelection.setter();
  v23 = *a3;
  AudioExperience.audioClientComponent.getter();

  v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v6, 0, 1, v24);
  AudioExperience.Builder.audioClientComponent.setter();
  v25 = *a3;
  dispatch thunk of AudioExperience.isGlideEligible.getter();

  AudioExperience.Builder.isGlideEligible.setter();
  v26 = *a3;
  dispatch thunk of AudioExperience.networkAvailableAtRequest.getter();

  return AudioExperience.Builder.networkAvailableAtRequest.setter();
}

uint64_t closure #2 in AudioCacheHandler.makeCacheable(pommesResponse:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for PommesSearchReason();
  MEMORY[0x1E0C80A78](v0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v1);
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  dispatch thunk of PommesResponse.clientResults.getter();
  PommesResponse.Builder.clientResults.setter();
  PommesResponse.conversationContext.getter();
  PommesResponse.Builder.conversationContext.setter();
  PommesResponse.metadataDomainName.getter();
  PommesResponse.Builder.metadataDomainName.setter();
  dispatch thunk of PommesResponse.renderedTexts.getter();
  PommesResponse.Builder.renderedTexts.setter();
  dispatch thunk of PommesResponse.redactedRenderedTexts.getter();
  PommesResponse.Builder.redactedRenderedTexts.setter();
  dispatch thunk of PommesResponse.pegasusDomainFlowStepLog.getter();
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  dispatch thunk of PommesResponse.pegasusDomainUserSensitiveTier1Log.getter();
  PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  dispatch thunk of PommesResponse.listenAfterSpeaking.getter();
  PommesResponse.Builder.listenAfterSpeaking.setter();
  PommesResponse.requestId.getter();
  PommesResponse.Builder.requestId.setter();
  PommesResponse.pommesCandidateId.getter();
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.isHandledByPreflight.getter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  PommesResponse.preflightClientHandlerIdentifier.getter();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  dispatch thunk of PommesResponse.taskStepLogs.getter();
  PommesResponse.Builder.taskStepLogs.setter();
  dispatch thunk of PommesResponse.userSensitiveTier1Logs.getter();
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  dispatch thunk of PommesResponse.searchReason.getter();
  PommesResponse.Builder.searchReason.setter();
  PommesResponse.searchRequestUtterance.getter();
  PommesResponse.Builder.searchRequestUtterance.setter();
  PommesResponse.sharedUserId.getter();
  return PommesResponse.Builder.sharedUserId.setter();
}

uint64_t AudioCacheHandler.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AudioCacheHandler.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t AudioCacheHandler.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for CacheHandling.makeCacheable(pommesResponse:) in conformance AudioCacheHandler()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

uint64_t partial apply for closure #2 in AudioCacheHandler.makeCacheable(pommesResponse:)()
{
  return closure #2 in AudioCacheHandler.makeCacheable(pommesResponse:)();
}

uint64_t partial apply for closure #2 in closure #1 in AudioCacheHandler.makeCacheable(pommesResponse:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in AudioCacheHandler.makeCacheable(pommesResponse:)(a1, *(_QWORD *)(v1 + 16), *(id **)(v1 + 24));
}

uint64_t type metadata accessor for AudioCacheHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioCacheHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioCacheHandler.makeCacheable(pommesResponse:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of AudioCacheHandler.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, MEMORY[0x1E0D6CC78], (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E0DA0030]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D28_Product_Proto_SemanticValueVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6CCA0], (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0DA0140]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t);
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v20 = a1;
  v21 = a2;
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  v6 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = v22;
    v18 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v11 = a3 + v18;
    v17 = *(_QWORD *)(v6 + 72);
    while (1)
    {
      v20(v11);
      if (v4)
        break;
      v4 = 0;
      v22 = v10;
      v13 = *(_QWORD *)(v10 + 16);
      v12 = *(_QWORD *)(v10 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v10 = v22;
      }
      *(_QWORD *)(v10 + 16) = v13 + 1;
      v14 = v17;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v18 + v13 * v17, v8, v19);
      v11 += v14;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D18_Nlu_External_SpanVG_10PegasusAPI013Apple_Parsec_D21_Context_ClientEntityVsAE_pTg5(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t *);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v4 = v3;
  v19 = a1;
  v20 = a2;
  v18 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v6 = *(_QWORD *)(v18 - 8);
  MEMORY[0x1E0C80A78](v18);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *(_QWORD *)(a3 + 16);
  v10 = MEMORY[0x1E0DEE9D8];
  if (v9)
  {
    v22 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    v10 = v22;
    v11 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_Span() - 8);
    v12 = a3 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v17 = *(_QWORD *)(v11 + 72);
    while (1)
    {
      v19(v12, &v21);
      if (v4)
        break;
      v4 = 0;
      v22 = v10;
      v14 = *(_QWORD *)(v10 + 16);
      v13 = *(_QWORD *)(v10 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v10 = v22;
      }
      *(_QWORD *)(v10 + 16) = v14 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v14, v8, v18);
      v12 += v17;
      if (!--v9)
        return v10;
    }
    swift_release();
  }
  return v10;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D32_Nlu_External_UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityI0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F9F0], (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E0D9F768]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology18UtteranceAlignmentVG_10PegasusAPI013Apple_Parsec_d21_Context_ClientEntityG0Vs5NeverOTg5(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(a1, a2, a3, a4, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F9F0], (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), MEMORY[0x1E0DA0EF8]);
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), void (*a6)(BOOL, unint64_t, uint64_t), uint64_t (*a7)(_QWORD))
{
  uint64_t v7;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  void (*v23)(BOOL, unint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v28;

  v10 = v7;
  v26 = a1;
  v27 = a2;
  v25 = a5(0);
  v12 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v14 = (char *)&v22 - v13;
  v15 = *(_QWORD *)(a3 + 16);
  v16 = MEMORY[0x1E0DEE9D8];
  if (v15)
  {
    v28 = MEMORY[0x1E0DEE9D8];
    v23 = a6;
    a6(0, v15, 0);
    v16 = v28;
    v17 = *(_QWORD *)(a7(0) - 8);
    v18 = a3 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
    v24 = *(_QWORD *)(v17 + 72);
    while (1)
    {
      v26(v18);
      if (v10)
        break;
      v10 = 0;
      v28 = v16;
      v20 = *(_QWORD *)(v16 + 16);
      v19 = *(_QWORD *)(v16 + 24);
      if (v20 >= v19 >> 1)
      {
        v23(v19 > 1, v20 + 1, 1);
        v16 = v28;
      }
      *(_QWORD *)(v16 + 16) = v20 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(_QWORD *)(v12 + 72) * v20, v14, v25);
      v18 += v24;
      if (!--v15)
        return v16;
    }
    swift_release();
  }
  return v16;
}

uint64_t static ICMediaUserStateCenter.sharedStateCenter.getter@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(), sel_shared);
  result = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for ICMediaUserStateCenter);
  a1[3] = result;
  a1[4] = &protocol witness table for ICMediaUserStateCenter;
  *a1 = v2;
  return result;
}

uint64_t createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v10;

  swift_bridgeObjectRetain();
  v10 = specialized Sequence.compactMap<A>(_:)(a1, a4);
  swift_bridgeObjectRelease();
  createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v10, a2, a3, a5);
  return swift_bridgeObjectRelease();
}

uint64_t specialized Sequence<>.contains(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t result;
  _QWORD *v9;
  uint64_t i;
  uint64_t v11;
  BOOL v12;

  v3 = a3[2];
  if (!v3)
    return 0;
  if (a3[4] == a1 && a3[5] == a2)
    return 1;
  result = _stringCompareWithSmolCheck(_:_:expecting:)();
  if ((result & 1) != 0)
    return 1;
  if (v3 == 1)
    return 0;
  v9 = a3 + 7;
  for (i = 1; ; ++i)
  {
    v11 = i + 1;
    if (__OFADD__(i, 1))
      break;
    v12 = *(v9 - 1) == a1 && *v9 == a2;
    if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return 1;
    result = 0;
    v9 += 2;
    if (v11 == v3)
      return result;
  }
  __break(1u);
  return result;
}

id ICMusicUserState.isUserHistoryModifiable.getter()
{
  void *v0;

  return objc_msgSend(v0, sel_usesListeningHistory);
}

id ICMusicUserState.userToken.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(v0, sel_libraryAuthTokenStatus);
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, sel_token);

  if (v3)
  {
    v4 = objc_msgSend(v3, sel_token);

    v3 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v3;
}

id ICMusicUserState.lastError.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(v0, sel_libraryAuthTokenStatus);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_lastError);

  return v3;
}

uint64_t ICMusicUserState.lastUpdatedDate.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(v2, sel_libraryAuthTokenStatus);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(v7, sel_lastUpdatedDate);

    if (v9)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      v10 = type metadata accessor for Date();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v6, 0, 1, v10);
    }
    else
    {
      v13 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
    }
    return outlined init with take of PommesSearchReason?((uint64_t)v6, a1, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    v11 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(a1, 1, 1, v11);
  }
}

id ICMusicUserState.isSubscribedToGlide.getter()
{
  void *v0;
  id v1;
  id result;
  id v3;

  v1 = objc_msgSend(v0, sel_subscriptionStatus);
  if (v1
    || (result = objc_msgSend(v0, sel_lightweightSubscriptionStatus),
        (v1 = result) != 0))
  {
    v3 = objc_msgSend(v1, sel_statusType);

    return (id)(v3 == (id)3);
  }
  return result;
}

uint64_t ICMusicUserState.itunesSubscriptionStatus.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  id v3;
  void *v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t matched;

  v3 = objc_msgSend(v1, sel_subscriptionStatus);
  if (v3 && (v4 = v3, v5 = objc_msgSend(v3, sel_isMatchEnabled), v4, v5))
    v6 = (unsigned int *)MEMORY[0x1E0D704B8];
  else
    v6 = (unsigned int *)MEMORY[0x1E0D704C0];
  v7 = *v6;
  matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(matched - 8) + 104))(a1, v7, matched);
}

uint64_t ICMusicUserState.xpabCookie.getter()
{
  return ICMusicUserState.xpabCookie.getter((SEL *)&selRef_xpab);
}

uint64_t ICMusicUserState.itfeCookie.getter()
{
  return ICMusicUserState.xpabCookie.getter((SEL *)&selRef_itfe);
}

uint64_t ICMusicUserState.xpabCookie.getter(SEL *a1)
{
  void *v1;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;

  v3 = objc_msgSend(v1, sel_cookies);
  v4 = v3;
  if (!v3)
    return 0;
  v5 = objc_msgSend(v3, *a1);

  v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v6;
}

uint64_t ICMusicUserState.isGlideEligible.getter()
{
  _QWORD *v0;
  char v1;

  v0 = ICMusicUserState.eligibleOffers.getter();
  v1 = specialized Sequence<>.contains(_:)(0x57454956455250, 0xE700000000000000, v0);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t protocol witness for MusicUserState.lastUpdatedDate.getter in conformance ICMusicUserState@<X0>(uint64_t a1@<X8>)
{
  return ICMusicUserState.lastUpdatedDate.getter(a1);
}

double ICMediaUserState.musicUserState.getter@<D0>(uint64_t a1@<X8>)
{
  return ICMediaUserState.musicUserState.getter((SEL *)&selRef_music, &lazy cache variable for type metadata for ICMusicUserState, (uint64_t)&protocol witness table for ICMusicUserState, a1);
}

uint64_t protocol witness for MediaUserState.homeUserIDs.getter in conformance ICMediaUserState()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_homeUserIDs);
  v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t protocol witness for MediaUserState.alternateDSID.getter in conformance ICMediaUserState()
{
  id *v0;
  id v1;
  void *v2;
  uint64_t v3;

  v1 = objc_msgSend(*v0, sel_alternateDSID);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v3;
}

double ICMediaUserStateCenter.activeState.getter@<D0>(uint64_t a1@<X8>)
{
  return ICMediaUserState.musicUserState.getter((SEL *)&selRef_activeUserState, &lazy cache variable for type metadata for ICMediaUserState, (uint64_t)&protocol witness table for ICMediaUserState, a1);
}

double ICMediaUserState.musicUserState.getter@<D0>(SEL *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void *v4;
  id v8;
  id v9;
  double result;

  v8 = objc_msgSend(v4, *a1);
  if (v8)
  {
    v9 = v8;
    *(_QWORD *)(a4 + 24) = type metadata accessor for CNContactStore(0, a2);
    *(_QWORD *)(a4 + 32) = a3;
    *(_QWORD *)a4 = v9;
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t ICMediaUserStateCenter.allStates.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  id v8;
  unint64_t v9;
  unint64_t v10;
  _UNKNOWN **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  _QWORD v19[3];
  uint64_t v20;
  _UNKNOWN **v21;
  uint64_t v22;

  v1 = objc_msgSend(v0, sel_allUserStates);
  v2 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
  v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v3 >> 62))
  {
    v4 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v4)
      goto LABEL_3;
LABEL_13:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v4)
    goto LABEL_13;
LABEL_3:
  v22 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
  if ((v4 & 0x8000000000000000) == 0)
  {
    v6 = 0;
    v7 = v22;
    v18 = v3 & 0xC000000000000001;
    do
    {
      if (v18)
        v8 = (id)MEMORY[0x1C3BBF3F4](v6, v3);
      else
        v8 = *(id *)(v3 + 8 * v6 + 32);
      v20 = v2;
      v21 = &protocol witness table for ICMediaUserState;
      v19[0] = v8;
      v22 = v7;
      v10 = *(_QWORD *)(v7 + 16);
      v9 = *(_QWORD *)(v7 + 24);
      v11 = &protocol witness table for ICMediaUserState;
      v12 = v2;
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v9 > 1, v10 + 1, 1);
        v12 = v20;
        v11 = v21;
      }
      ++v6;
      v13 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v19, v12);
      MEMORY[0x1E0C80A78](v13);
      v15 = (char *)&v17 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *))(v16 + 16))(v15);
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, (uint64_t)v15, &v22, v12, (uint64_t)v11);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
      v7 = v22;
    }
    while (v4 != v6);
    swift_bridgeObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

void ICMediaUserStateCenter.refreshStates(completion:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  void *v6;
  _QWORD v7[6];

  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = a1;
  *(_QWORD *)(v5 + 24) = a2;
  v7[4] = partial apply for closure #1 in ICMediaUserStateCenter.refreshStates(completion:);
  v7[5] = v5;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed (@guaranteed [ICMediaUserState], @guaranteed Error?) -> ();
  v7[3] = &block_descriptor_8;
  v6 = _Block_copy(v7);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_refreshUserStatesWithCompletion_, v6);
  _Block_release(v6);
}

uint64_t closure #1 in ICMediaUserStateCenter.refreshStates(completion:)(unint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  void **v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  __int128 v20;
  uint64_t v21;
  _UNKNOWN **v22;
  uint64_t v23;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = MEMORY[0x1E0DEE9D8];
  if (!v6)
  {
LABEL_16:
    a3(v7, a2);
    return swift_bridgeObjectRelease();
  }
  v23 = MEMORY[0x1E0DEE9D8];
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6 & ~(v6 >> 63), 0);
  if ((v6 & 0x8000000000000000) == 0)
  {
    v18 = a2;
    v19 = a3;
    v7 = v23;
    if ((a1 & 0xC000000000000001) != 0)
    {
      v9 = 0;
      do
      {
        v10 = MEMORY[0x1C3BBF3F4](v9, a1);
        v23 = v7;
        v12 = *(_QWORD *)(v7 + 16);
        v11 = *(_QWORD *)(v7 + 24);
        if (v12 >= v11 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
          v7 = v23;
        }
        ++v9;
        v21 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
        v22 = &protocol witness table for ICMediaUserState;
        *(_QWORD *)&v20 = v10;
        *(_QWORD *)(v7 + 16) = v12 + 1;
        outlined init with take of AppDataProviding(&v20, v7 + 40 * v12 + 32);
      }
      while (v6 != v9);
    }
    else
    {
      v13 = (void **)(a1 + 32);
      do
      {
        v14 = *v13;
        v23 = v7;
        v16 = *(_QWORD *)(v7 + 16);
        v15 = *(_QWORD *)(v7 + 24);
        v17 = v14;
        if (v16 >= v15 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
          v7 = v23;
        }
        v21 = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
        v22 = &protocol witness table for ICMediaUserState;
        *(_QWORD *)&v20 = v17;
        *(_QWORD *)(v7 + 16) = v16 + 1;
        outlined init with take of AppDataProviding(&v20, v7 + 40 * v16 + 32);
        ++v13;
        --v6;
      }
      while (v6);
    }
    a3 = v19;
    a2 = v18;
    goto LABEL_16;
  }
  __break(1u);
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed [ICMediaUserState], @guaranteed Error?) -> ()(uint64_t a1, uint64_t a2, void *a3)
{
  void (*v4)(uint64_t, void *);
  uint64_t v5;
  id v6;

  v4 = *(void (**)(uint64_t, void *))(a1 + 32);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for ICMediaUserState);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6 = a3;
  v4(v5, a3);
  swift_release();
  swift_bridgeObjectRelease();

}

uint64_t protocol witness for static MediaUserStateCenter.sharedStateCenter.getter in conformance ICMediaUserStateCenter@<X0>(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  id v4;
  uint64_t result;

  v4 = objc_msgSend((id)objc_opt_self(), sel_shared);
  result = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for ICMediaUserStateCenter);
  a2[3] = result;
  a2[4] = a1;
  *a2 = v4;
  return result;
}

double protocol witness for MediaUserStateCenter.activeState.getter in conformance ICMediaUserStateCenter@<D0>(uint64_t a1@<X8>)
{
  return protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState((SEL *)&selRef_activeUserState, &lazy cache variable for type metadata for ICMediaUserState, (uint64_t)&protocol witness table for ICMediaUserState, a1);
}

double protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState@<D0>(SEL *a1@<X2>, unint64_t *a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  id *v4;
  id v8;
  id v9;
  double result;

  v8 = objc_msgSend(*v4, *a1);
  if (v8)
  {
    v9 = v8;
    *(_QWORD *)(a4 + 24) = type metadata accessor for CNContactStore(0, a2);
    *(_QWORD *)(a4 + 32) = a3;
    *(_QWORD *)a4 = v9;
  }
  else
  {
    *(_QWORD *)(a4 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

uint64_t protocol witness for MediaUserStateCenter.allStates.getter in conformance ICMediaUserStateCenter()
{
  return ICMediaUserStateCenter.allStates.getter();
}

void protocol witness for MediaUserStateCenter.refreshStates(completion:) in conformance ICMediaUserStateCenter(uint64_t a1, uint64_t a2)
{
  void **v2;
  void *v5;
  uint64_t v6;
  void *v7;
  _QWORD v8[6];

  v5 = *v2;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = a2;
  v8[4] = closure #1 in ICMediaUserStateCenter.refreshStates(completion:)partial apply;
  v8[5] = v6;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 1107296256;
  v8[2] = thunk for @escaping @callee_guaranteed (@guaranteed [ICMediaUserState], @guaranteed Error?) -> ();
  v8[3] = &block_descriptor_7;
  v7 = _Block_copy(v8);
  swift_retain();
  swift_release();
  objc_msgSend(v5, sel_refreshUserStatesWithCompletion_, v7);
  _Block_release(v7);
}

uint64_t specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *boxed_opaque_existential_1;
  uint64_t v10;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = a4;
  v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  v10 = *a3;
  *(_QWORD *)(v10 + 16) = a1 + 1;
  return outlined init with take of AppDataProviding(&v12, v10 + 40 * a1 + 32);
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  char *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v21[2];
  uint64_t v22;
  char *v23;
  char *v24;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v24 = (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v23 = (char *)v21 - v12;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
    return MEMORY[0x1E0DEE9D8];
  v21[0] = a1;
  v21[1] = v2;
  v14 = (_QWORD *)(a1 + 32);
  swift_bridgeObjectRetain();
  v15 = MEMORY[0x1E0DEE9D8];
  v22 = a2;
  do
  {
    createAMPUserState(mediaUserState:muxUserInfo:)(v14, a2, (uint64_t)v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
    }
    else
    {
      v16 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v17 = v23;
      v16(v23, v7, v8);
      v16(v24, v17, v8);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1, v15);
      v19 = *(_QWORD *)(v15 + 16);
      v18 = *(_QWORD *)(v15 + 24);
      if (v19 >= v18 >> 1)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1, v15);
      *(_QWORD *)(v15 + 16) = v19 + 1;
      v16((char *)(v15+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(_QWORD *)(v9 + 72) * v19), v24, v8);
      a2 = v22;
    }
    v14 += 5;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1C240CD24()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ICMediaUserStateCenter.refreshStates(completion:)(unint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in ICMediaUserStateCenter.refreshStates(completion:)(a1, a2, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t dispatch thunk of MusicUserState.isUserHistoryModifiable.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MusicUserState.lastUpdatedDate.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MusicUserState.ampSubscriptionStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of MusicUserState.eligibleOffers.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t dispatch thunk of MusicUserState.isSubscribedToGlide.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of MusicUserState.itunesSubscriptionStatus.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t dispatch thunk of MusicUserState.xpabCookie.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

uint64_t dispatch thunk of MusicUserState.itfeCookie.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 80))();
}

uint64_t dispatch thunk of MusicUserState.isGlideEligible.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 88))();
}

uint64_t dispatch thunk of MediaUserState.musicUserState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MediaUserState.storefrontIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MediaUserState.homeUserIDs.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of MediaUserState.isActive.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t dispatch thunk of MediaUserState.alternateDSID.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of static MediaUserStateCenter.sharedStateCenter.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of MediaUserStateCenter.activeState.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of MediaUserStateCenter.refreshStates(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t specialized BidirectionalCollection.last.getter(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = HIBYTE(a2) & 0xF;
  if ((a2 & 0x2000000000000000) == 0)
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (!v2)
    return 0;
  String.index(before:)();
  return String.subscript.getter();
}

uint64_t AFSpeechRecognition.toAsrHypotheses()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  id v15;
  void *v16;
  unint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  id v23;
  BOOL v24;
  unint64_t v25;
  id v26;
  void *v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  id v38;
  id v39;
  void *v40;
  unint64_t v41;
  id v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  id v46;
  void *v47;
  id v48;
  void *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  id v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  id v63;
  void *v64;
  Swift::String v65;
  id v66;
  void *v67;
  id v68;
  void *v69;
  int v70;
  id v71;
  void *v72;
  unint64_t v73;
  Swift::String v75;
  double v76;
  double v77;
  double v78;
  double v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  id v84;
  id v85;
  uint64_t v86;
  uint64_t v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  id v91;
  uint64_t v92;
  uint64_t v93;
  NSObject *v94;
  os_log_type_t v95;
  uint8_t *v96;
  unint64_t v97;
  char *v98;
  char *v99;
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  uint64_t result;
  _QWORD v116[2];
  uint64_t v117;
  char *v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  unint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  id *v137;
  uint64_t v138;
  unint64_t v139;
  unint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  id v146;
  unint64_t v147;
  id v148;
  uint64_t v149;
  uint64_t v150;
  id v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  unint64_t v161;
  uint64_t v162;
  unint64_t v163;
  uint64_t v164;
  unint64_t v165;

  v128 = type metadata accessor for UUID();
  v127 = *(_QWORD *)(v128 - 8);
  MEMORY[0x1E0C80A78](v128);
  v126 = (char *)v116 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_UUID();
  v125 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v124 = (char *)v116 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v123 = type metadata accessor for CharacterSet();
  v122 = *(_QWORD *)(v123 - 8);
  MEMORY[0x1E0C80A78](v123);
  v121 = (char *)v116 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v136 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
  v135 = *(_QWORD *)(v136 - 8);
  v8 = MEMORY[0x1E0C80A78](v136);
  v134 = (char *)v116 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v131 = (char *)v116 - v10;
  v157 = type metadata accessor for Siri_Nlu_External_AsrTokenInformation();
  v155 = *(_QWORD *)(v157 - 8);
  v11 = MEMORY[0x1E0C80A78](v157);
  v156 = (char *)v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v116 - v13;
  v15 = objc_msgSend(v0, sel_utterances);
  if (!v15)
  {
LABEL_123:
    if (one-time initialization token for pommes != -1)
      goto LABEL_147;
    goto LABEL_124;
  }
  v16 = v15;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechUtterance);
  v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v18 = objc_msgSend(v0, sel_phrases);
  if (!v18)
  {
    swift_bridgeObjectRelease();
    goto LABEL_123;
  }
  v19 = v18;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechPhrase);
  v149 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v140 = v17;
  if (!(v17 >> 62))
  {
    v20 = *(_QWORD *)((v17 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v20)
      goto LABEL_5;
LABEL_149:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRetain();
  v17 = v140;
  v20 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v20)
    goto LABEL_149;
LABEL_5:
  v139 = v17 & 0xC000000000000001;
  v120 = v17 & 0xFFFFFFFFFFFFFF8;
  v119 = v17 + 32;
  v21 = v149 & 0xFFFFFFFFFFFFFF8;
  v142 = v149 & 0xFFFFFFFFFFFFFF8;
  if (v149 < 0)
    v21 = v149;
  v116[1] = v21;
  v145 = v149 & 0xC000000000000001;
  v137 = (id *)(v149 + 32);
  v130 = MEMORY[0x1E0DEE9D8];
  v118 = v4;
  v117 = v5;
  v138 = v20;
  v22 = 0;
  while (1)
  {
    if (v139)
    {
      v23 = (id)MEMORY[0x1C3BBF3F4](v22, v17);
      v24 = __OFADD__(v22, 1);
      v25 = v22 + 1;
      if (v24)
        goto LABEL_140;
    }
    else
    {
      if (v22 >= *(_QWORD *)(v120 + 16))
        goto LABEL_145;
      v23 = *(id *)(v119 + 8 * v22);
      v24 = __OFADD__(v22, 1);
      v25 = v22 + 1;
      if (v24)
      {
LABEL_140:
        __break(1u);
LABEL_141:
        __break(1u);
LABEL_142:
        __break(1u);
LABEL_143:
        __break(1u);
LABEL_144:
        __break(1u);
LABEL_145:
        __break(1u);
LABEL_146:
        __break(1u);
LABEL_147:
        swift_once();
LABEL_124:
        v111 = type metadata accessor for Logger();
        __swift_project_value_buffer(v111, (uint64_t)static Logger.pommes);
        v112 = Logger.logObject.getter();
        v113 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v112, v113))
        {
          v114 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v114 = 0;
          _os_log_impl(&dword_1C2356000, v112, v113, "AFSpeechRecognition utterances/phrases is nil", v114, 2u);
          MEMORY[0x1C3BBFF64](v114, -1, -1);
        }

        return MEMORY[0x1E0DEE9D8];
      }
    }
    v148 = v23;
    v26 = objc_msgSend(v23, sel_interpretationIndices);
    v147 = v25;
    if (!v26)
      goto LABEL_106;
    v27 = v26;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v29 = v28 >> 62;
    if (v28 >> 62)
    {
      swift_bridgeObjectRetain();
      v150 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v150 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    if ((unint64_t)v149 >> 62)
    {
      swift_bridgeObjectRetain();
      v92 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v150 != v92)
      {
LABEL_105:
        swift_bridgeObjectRelease();
LABEL_106:
        if (one-time initialization token for pommes != -1)
          swift_once();
        v93 = type metadata accessor for Logger();
        __swift_project_value_buffer(v93, (uint64_t)static Logger.pommes);
        v94 = Logger.logObject.getter();
        v95 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v94, v95))
        {
          v96 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v96 = 0;
          _os_log_impl(&dword_1C2356000, v94, v95, "Phrase length is not the same as interpretationIndices.", v96, 2u);
          MEMORY[0x1C3BBFF64](v96, -1, -1);
        }

        goto LABEL_9;
      }
      v164 = 0;
      v165 = 0xE000000000000000;
      swift_bridgeObjectRetain_n();
      v150 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v150)
      {
LABEL_104:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_113;
      }
    }
    else
    {
      if (v150 != *(_QWORD *)(v142 + 16))
        goto LABEL_105;
      v164 = 0;
      v165 = 0xE000000000000000;
      swift_bridgeObjectRetain();
      if (!v150)
        goto LABEL_104;
    }
    if (v145)
    {
      v30 = (id)MEMORY[0x1C3BBF3F4](0, v149);
      if (!v29)
        goto LABEL_25;
    }
    else
    {
      if (!*(_QWORD *)(v142 + 16))
        goto LABEL_146;
      v30 = *v137;
      if (!v29)
      {
LABEL_25:
        v31 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        v32 = v30;
        if (v31)
          break;
        goto LABEL_112;
      }
    }
    swift_bridgeObjectRetain();
    v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v32 = v30;
    if (v31)
      break;
LABEL_112:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

LABEL_113:
    v36 = MEMORY[0x1E0DEE9D8];
LABEL_114:
    Siri_Nlu_External_AsrHypothesis.init()();
    v162 = v164;
    v163 = v165;
    v160 = 0x2B5D735C5BLL;
    v161 = 0xE500000000000000;
    v158 = 32;
    v159 = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v162 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v163 = v97;
    v98 = v121;
    static CharacterSet.whitespacesAndNewlines.getter();
    StringProtocol.trimmingCharacters(in:)();
    (*(void (**)(char *, uint64_t))(v122 + 8))(v98, v123);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v99 = v131;
    Siri_Nlu_External_AsrHypothesis.utterance.setter();
    objc_msgSend(v148, sel_confidenceScore);
    Siri_Nlu_External_AsrHypothesis.probability.setter();
    MEMORY[0x1C3BBC748](v36);
    v100 = v126;
    UUID.init()();
    v101 = (uint64_t)v118;
    static ConversionUtils.convertUuidToProto(uuid:)();
    (*(void (**)(char *, uint64_t))(v127 + 8))(v100, v128);
    v102 = v125;
    v103 = v117;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v125 + 48))(v101, 1, v117) == 1)
    {
      Siri_Nlu_External_UUID.init()();
      outlined destroy of Siri_Nlu_External_UUID?(v101);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v124, v101, v103);
    }
    Siri_Nlu_External_AsrHypothesis.id.setter();
    (*(void (**)(char *, char *, uint64_t))(v135 + 16))(v134, v99, v136);
    v104 = v130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v104 + 16) + 1, 1, v104);
    v106 = *(_QWORD *)(v104 + 16);
    v105 = *(_QWORD *)(v104 + 24);
    if (v106 >= v105 >> 1)
      v104 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1, v104);
    *(_QWORD *)(v104 + 16) = v106 + 1;
    v107 = v104;
    v108 = v135;
    v109 = (*(unsigned __int8 *)(v108 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
    v130 = v107;
    v110 = v136;
    (*(void (**)(unint64_t, char *, uint64_t))(v135 + 32))(v107 + v109 + *(_QWORD *)(v135 + 72) * v106, v134, v136);

    (*(void (**)(char *, uint64_t))(v108 + 8))(v99, v110);
LABEL_9:
    v22 = v147;
    v17 = v140;
    if (v147 == v138)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v130;
    }
  }
  v143 = v31;
  v33 = 0;
  v34 = 0;
  v144 = v28 & 0xC000000000000001;
  v133 = v28 & 0xFFFFFFFFFFFFFF8;
  v132 = v28 + 32;
  v35 = 1;
  v36 = MEMORY[0x1E0DEE9D8];
  v141 = v28;
  while (1)
  {
    if (v144)
    {
      v37 = v35;
      v38 = (id)MEMORY[0x1C3BBF3F4](v34, v28);
    }
    else
    {
      if (v34 >= *(_QWORD *)(v133 + 16))
        goto LABEL_141;
      v37 = v35;
      v38 = *(id *)(v132 + 8 * v34);
    }
    v151 = v38;
    v39 = objc_msgSend(v32, sel_interpretations);
    if (v39)
      break;
    v84 = v32;
    v85 = v151;
LABEL_89:
    v45 = v37;
LABEL_90:

    if (v45 == v150)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_114;
    }
    if (v145)
    {
      v91 = (id)MEMORY[0x1C3BBF3F4](v45, v149);
    }
    else
    {
      if (v45 >= *(_QWORD *)(v142 + 16))
        goto LABEL_142;
      v91 = v137[v45];
    }
    v32 = v91;
    if (__OFADD__(v45, 1))
    {
LABEL_138:
      __break(1u);
LABEL_139:
      __break(1u);
      goto LABEL_140;
    }
    v34 = v45;
    v35 = v45 + 1;
    if (v45 == v143)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      goto LABEL_114;
    }
  }
  v40 = v39;
  v146 = v32;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechInterpretation);
  v41 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v42 = objc_msgSend(v151, sel_integerValue);
  v43 = (uint64_t)v42;
  if (!(v41 >> 62))
  {
    if ((uint64_t)v42 < *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_34;
    goto LABEL_84;
  }
  swift_bridgeObjectRetain();
  v86 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (v43 >= v86)
  {
LABEL_84:
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v87 = type metadata accessor for Logger();
    __swift_project_value_buffer(v87, (uint64_t)static Logger.pommes);
    v88 = Logger.logObject.getter();
    v89 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v88, v89))
    {
      v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v90 = 0;
      _os_log_impl(&dword_1C2356000, v88, v89, "Invalid interpretation index.", v90, 2u);
      MEMORY[0x1C3BBFF64](v90, -1, -1);
    }

    v84 = v146;
    v85 = v151;
    v28 = v141;
    goto LABEL_89;
  }
LABEL_34:
  v44 = (unint64_t)objc_msgSend(v151, sel_integerValue);
  v28 = v141;
  v45 = v37;
  if ((v41 & 0xC000000000000001) != 0)
  {
    v46 = (id)MEMORY[0x1C3BBF3F4](v44, v41);
  }
  else
  {
    if ((v44 & 0x8000000000000000) != 0)
      goto LABEL_143;
    if (v44 >= *(_QWORD *)((v41 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_144;
    v46 = *(id *)(v41 + 8 * v44 + 32);
  }
  v47 = v46;
  swift_bridgeObjectRelease();
  v48 = objc_msgSend(v47, sel_tokens);
  if (!v48)
  {

    v84 = v151;
    v85 = v47;
    goto LABEL_90;
  }
  v49 = v48;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for AFSpeechToken);
  v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v50 >> 62)
  {
    swift_bridgeObjectRetain();
    v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v51 = *(_QWORD *)((v50 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v129 = v45;
  if (!v51)
  {
LABEL_81:

    swift_bridgeObjectRelease();
    v84 = v47;
    v28 = v141;
    v85 = v146;
    v45 = v129;
    goto LABEL_90;
  }
  v153 = v50;
  v154 = v50 & 0xC000000000000001;
  v52 = 4;
  v152 = v51;
  while (1)
  {
    if (v154)
      v53 = (id)MEMORY[0x1C3BBF3F4](v52 - 4, v50);
    else
      v53 = *(id *)(v50 + 8 * v52);
    v54 = v53;
    v55 = v52 - 3;
    if (__OFADD__(v52 - 4, 1))
    {
      __break(1u);
LABEL_130:
      __break(1u);
LABEL_131:
      __break(1u);
LABEL_132:
      __break(1u);
LABEL_133:
      __break(1u);
LABEL_134:
      __break(1u);
LABEL_135:
      __break(1u);
LABEL_136:
      __break(1u);
LABEL_137:
      __break(1u);
      goto LABEL_138;
    }
    v56 = v47;
    Siri_Nlu_External_AsrTokenInformation.init()();
    objc_msgSend(v54, sel_removeSpaceBefore);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.setter();
    if ((Siri_Nlu_External_AsrTokenInformation.removeSpaceBefore.getter() & 1) != 0)
    {
      v57 = v164;
      v58 = v165;
      swift_bridgeObjectRetain();
      v59 = specialized BidirectionalCollection.last.getter(v57, v58);
      v61 = v60;
      swift_bridgeObjectRelease();
      if (v61)
      {
        if (v59 == 32 && v61 == 0xE100000000000000)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v62 & 1) == 0)
            goto LABEL_55;
        }
        if (!v33)
          goto LABEL_139;
        specialized RangeReplaceableCollection<>.removeLast()();
        swift_bridgeObjectRelease();
      }
    }
LABEL_55:
    v63 = objc_msgSend(v54, sel_text);
    if (v63)
    {
      v64 = v63;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    Siri_Nlu_External_AsrTokenInformation.postItnText.setter();
    v65._countAndFlagsBits = Siri_Nlu_External_AsrTokenInformation.postItnText.getter();
    String.append(_:)(v65);
    swift_bridgeObjectRelease();
    v66 = objc_msgSend(v54, sel_phoneSequence);
    if (v66)
    {
      v67 = v66;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    Siri_Nlu_External_AsrTokenInformation.phoneSequence.setter();
    v68 = objc_msgSend(v54, sel_ipaPhoneSequence);
    if (v68)
    {
      v69 = v68;
      static String._unconditionallyBridgeFromObjectiveC(_:)();

    }
    Siri_Nlu_External_AsrTokenInformation.ipaPhoneSequence.setter();
    objc_msgSend(v54, sel_removeSpaceAfter);
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.setter();
    Siri_Nlu_External_AsrTokenInformation.removeSpaceAfter.getter();
    Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.setter();
    objc_msgSend(v54, sel_confidenceScore);
    Siri_Nlu_External_AsrTokenInformation.confidenceScore.setter();
    Siri_Nlu_External_AsrTokenInformation.beginIndex.setter();
    v70 = Siri_Nlu_External_AsrTokenInformation.beginIndex.getter();
    v71 = objc_msgSend(v54, sel_text);
    if (!v71)
      break;
    v72 = v71;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v73 = String.count.getter();
    swift_bridgeObjectRelease();
    if ((v73 & 0x8000000000000000) != 0 || HIDWORD(v73))
      goto LABEL_151;
    if (__CFADD__(v70, (_DWORD)v73))
      goto LABEL_130;
    Siri_Nlu_External_AsrTokenInformation.endIndex.setter();
    v33 = Siri_Nlu_External_AsrTokenInformation.endIndex.getter();
    if ((Siri_Nlu_External_AsrTokenInformation.addSpaceAfter.getter() & 1) != 0)
    {
      if (__CFADD__(v33++, 1))
        goto LABEL_137;
      v75._countAndFlagsBits = 32;
      v75._object = (void *)0xE100000000000000;
      String.append(_:)(v75);
    }
    objc_msgSend(v54, sel_startTime);
    v77 = v76 * 1000.0;
    if ((~*(_QWORD *)&v77 & 0x7FF0000000000000) == 0)
      goto LABEL_131;
    if (v77 <= -2147483650.0)
      goto LABEL_132;
    if (v77 >= 2147483650.0)
      goto LABEL_133;
    Siri_Nlu_External_AsrTokenInformation.startMilliSeconds.setter();
    objc_msgSend(v54, sel_endTime);
    v79 = v78 * 1000.0;
    if ((~*(_QWORD *)&v79 & 0x7FF0000000000000) == 0)
      goto LABEL_134;
    if (v79 <= -2147483650.0)
      goto LABEL_135;
    if (v79 >= 2147483650.0)
      goto LABEL_136;
    Siri_Nlu_External_AsrTokenInformation.endMilliSeconds.setter();
    (*(void (**)(char *, char *, uint64_t))(v155 + 16))(v156, v14, v157);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1, v36);
    v81 = *(_QWORD *)(v36 + 16);
    v80 = *(_QWORD *)(v36 + 24);
    if (v81 >= v80 >> 1)
      v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v80 > 1, v81 + 1, 1, v36);
    *(_QWORD *)(v36 + 16) = v81 + 1;
    v82 = v155;
    v83 = v157;
    (*(void (**)(unint64_t, char *, uint64_t))(v155 + 32))(v36+ ((*(unsigned __int8 *)(v82 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))+ *(_QWORD *)(v155 + 72) * v81, v156, v157);

    (*(void (**)(char *, uint64_t))(v82 + 8))(v14, v83);
    ++v52;
    v47 = v56;
    v50 = v153;
    if (v55 == v152)
      goto LABEL_81;
  }
  __break(1u);
LABEL_151:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized RangeReplaceableCollection<>.removeLast()()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t result;

  v1 = v0[1];
  if ((v1 & 0x2000000000000000) == 0)
  {
    if ((*v0 & 0xFFFFFFFFFFFFLL) != 0)
    {
LABEL_5:
      String.index(before:)();
      return String.remove(at:)();
    }
    __break(1u);
  }
  if ((v1 & 0xF00000000000000) != 0)
    goto LABEL_5;
  __break(1u);
  return result;
}

uint64_t outlined destroy of Siri_Nlu_External_UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t DownloadedFeaturiser.name.getter()
{
  type metadata accessor for DownloadedFeaturiser();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DownloadedFeaturiser.Type);
  return String.init<A>(describing:)();
}

uint64_t type metadata accessor for DownloadedFeaturiser()
{
  return objc_opt_self();
}

uint64_t DownloadedFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized DownloadedFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t DownloadedFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized DownloadedFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void DownloadedFeaturiser.featurise(candidate:rankedSlotIndex:)(_QWORD **a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  char v5;
  int v6;
  _QWORD *v7;
  _QWORD *v8;
  __n128 v9;
  void (*v10)(__n128);
  _QWORD *v11;
  _QWORD *v12;
  id v13;

  v2 = v1;
  v3 = *a1;
  if (*((_BYTE *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) == 1)
  {
    v4 = swift_bridgeObjectRelease();
  }
  else
  {
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v4 = swift_bridgeObjectRelease();
    if ((v5 & 1) == 0)
    {
      v11 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v12 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xB8))(v4);
      v10 = *(void (**)(__n128))((*v11 & *v12) + 0x160);
      v9.n128_u32[0] = 1.0;
      v13 = v12;
      goto LABEL_12;
    }
  }
  v6 = *((unsigned __int8 *)v3 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_isDownloaded);
  v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xB8))(v4);
  v10 = *(void (**)(__n128))((*v7 & *v8) + 0x160);
  v13 = v8;
  if (v6 == 1)
  {
    v9.n128_u32[0] = 1065395159;
    if (*(_BYTE *)(v2 + 16))
      v9.n128_f32[0] = 1.0005;
  }
  else
  {
    v9.n128_u32[0] = 0;
    if (*(_BYTE *)(v2 + 16))
      v9.n128_f32[0] = 1.0;
  }
LABEL_12:
  v10(v9);

}

uint64_t DownloadedFeaturiser.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DownloadedFeaturiser.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.name.getter in conformance DownloadedFeaturiser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

uint64_t specialized DownloadedFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2356000, v5, v6, "DownloadedFeaturiser : networkAvailable=%{BOOL}d", v7, 8u);
    MEMORY[0x1C3BBFF64](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_networkAvailableAtRequest);
  return v2;
}

uint64_t method lookup function for DownloadedFeaturiser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DownloadedFeaturiser.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of DownloadedFeaturiser.__allocating_init(query:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of DownloadedFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

void PommesBridge.PommesBridgeError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

BOOL static PommesBridge.PommesBridgeError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

Swift::Int PommesBridge.PommesBridgeError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

uint64_t key path setter for PommesBridge.currentSessionId : PommesBridge(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, &demangling cache variable for type metadata for UUID?);
  return (*(uint64_t (**)(char *))(class metadata base offset for PommesBridge + **a2 + 80))(v6);
}

uint64_t PommesBridge.currentSessionId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for PommesBridge.currentSessionId;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3, &demangling cache variable for type metadata for UUID?);
  return swift_endAccess();
}

uint64_t (*PommesBridge.currentSessionId.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridge.sessionState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for PommesBridge.sessionState;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return swift_endAccess();
}

uint64_t (*PommesBridge.sessionState.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridge.isMultiUser.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for PommesBridge.isMultiUser);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PommesBridge.isMultiUser.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t PommesBridge.isOnlyUserInHome.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for PommesBridge.isOnlyUserInHome);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t (*PommesBridge.isOnlyUserInHome.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridge.__allocating_init(_:_:_:_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  _BYTE v15[40];
  _BYTE v16[40];

  outlined init with copy of AppDataProviding(a3, (uint64_t)v16);
  outlined init with copy of AppDataProviding(a6, (uint64_t)v15);
  v13 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, _BYTE *, _QWORD))(class metadata base offset for PommesBridge
                                                                                                + v6
                                                                                                + 168))(a1, a2, v16, a4, a5, v15, 0);
  __swift_destroy_boxed_opaque_existential_1(a6);
  __swift_destroy_boxed_opaque_existential_1(a3);
  return v13;
}

uint64_t PommesBridge.__allocating_init(_:_:_:_:_:pommesSearch:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;

  swift_allocObject();
  v14 = specialized PommesBridge.init(_:_:_:_:_:pommesSearch:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();

  swift_release();
  return v14;
}

uint64_t PommesBridge.init(_:_:_:_:_:pommesSearch:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;

  v8 = specialized PommesBridge.init(_:_:_:_:_:pommesSearch:)(a1, a2, a3, a4, a5, a6, a7);
  swift_unknownObjectRelease();

  swift_release();
  return v8;
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeC0A12MessageTypes014SessionStartedF0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12f119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dm13CSgtcfcyAE014hI10G0CcACcfu_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #2 in implicit closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeC0A12MessageTypes012SessionEndedF0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12f119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dm13CSgtcfcyAE012hI11G0CcACcfu1_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #4 in implicit closure #3 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeC0A12MessageTypes010MUXContextF0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12f119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dl13CSgtcfcyAE010H11G0CcACcfu3_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #6 in implicit closure #5 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes011StartSpeechfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE018jkf11G0CcAA0deV9G6Ccfu5_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #8 in implicit closure #7 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes016StartChildSpeechfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE023jklf11G0CcAA0deW9G6Ccfu7_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #10 in implicit closure #9 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes014StartChildTextfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE021jklf11G0CcAA0deW9G6Ccfu9_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #12 in implicit closure #11 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes09StartTextfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE016jkf11G0CcAA0deV9G7Ccfu11_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #14 in implicit closure #13 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes010StartLocalfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE017jkf11G0CcAA0deV9G7Ccfu13_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #16 in implicit closure #15 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes010StartLocalfH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE017jkf11G0CcAA0deV9G7Ccfu39_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #42 in implicit closure #41 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes03EndfH4BaseCIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE010jf2G4k9CcAA0deU9G7Ccfu15_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #18 in implicit closure #17 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes0f7ContextH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dn13CSgtcfcyAE014fj11G0CcAA0deT9G7Ccfu17_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #20 in implicit closure #19 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes017NLResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE017jk11G0CcAA0dE16fG7Ccfu19_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #22 in implicit closure #21 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes024TextBasedResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dq13CSgtcfcyAE024jklm11G0CcAA0dE16fG7Ccfu21_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #24 in implicit closure #23 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes027GestureBasedResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dq13CSgtcfcyAE027jklm11G0CcAA0dE16fG7Ccfu23_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #26 in implicit closure #25 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes018AsrResultCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE018jkl11G0CcAA0dE16fG7Ccfu25_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #28 in implicit closure #27 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes010FallbackTodH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE010j14TodG0CcAA0dE16fG7Ccfu27_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #30 in implicit closure #29 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes021TextBasedTRPCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE021jkl11G0CcAA0dE16fG7Ccfu29_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #32 in implicit closure #31 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes027RewrittenUtteranceCandidateH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dp13CSgtcfcyAE027jkl11G0CcAA0dE16fG7Ccfu31_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #34 in implicit closure #33 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes010TTResponseH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dn13CSgtcfcyAE010j11G0CcAA0dE16fG7Ccfu33_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #36 in implicit closure #35 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes012TRPCandidatefH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dn13CSgtcfcyAE019jf11G0CcAA0deU9G7Ccfu35_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #38 in implicit closure #37 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch28PommesBridgeRequestProcessorC0A12MessageTypes014StartCandidatefH0CIegg_Ieggo_ACxRlzCRi_zRi0_zlyAFIsegg_Ieggo_TR04_s21ab8Search12de25C_____06pommesC0ACSS_0A12h119Types0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0do13CSgtcfcyAE021jkf11G0CcAA0deV9G7Ccfu37_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #40 in implicit closure #39 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

uint64_t (*_s21SiriInformationSearch12PommesBridgeCSo20SARDRunPOMMESRequestCSo22AFCommandExecutionInfoCSo12SAAceCommand_pSgs5Error_pSgIeggg_SgIegggg_Ieggo_ACxAgLRlzCRi_zRi0_zlyAEIsegggg_Ieggo_TR04_s21ab8Search12de151C_____06pommesC0ACSS_0A12MessageTypes0G10Publishing_pSo32AFRequestDispatcherServiceHelper_pSo17OS_dispatch_queueCAE28ConversationSessionsManaging_pAA0dq12CSgtcfcySo20fg6C_So22hij6CySo12kl7_pSg_s5M18_pSgtcSgtcACcfu41_Tf3npf_n())()
{
  swift_retain();
  return partial apply for implicit closure #44 in implicit closure #43 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
}

void closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  uint64_t Strong;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v1 = Strong;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1C2356000, v3, v4, "Initializing PommesSearch async", v5, 2u);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }

    type metadata accessor for PommesSearch();
    v6 = PommesSearch.__allocating_init()();
    v7 = direct field offset for PommesBridge.pommesSearch;
    *(_QWORD *)(v1 + direct field offset for PommesBridge.pommesSearch) = v6;
    swift_retain();
    swift_release();
    v8 = *(_QWORD *)(v1 + v7);
    if (v8)
    {
      swift_retain();
      MessageDispatchingBridgeBase.serviceHelper.getter();
      (*(void (**)(void))(*(_QWORD *)v8 + 216))();
      swift_release();
      swift_release();
      swift_release();
      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
      swift_release();
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1C2356000, v10, v11, "PommesBridge deallocated before PommesSearch set up", v12, 2u);
      MEMORY[0x1C3BBFF64](v12, -1, -1);
    }

  }
}

uint64_t PommesBridge.createRequestProcessor(withRequestId:assistantId:sessionId:isCandidateRequest:rootRequestId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  void (*v29)(void);
  void (*v30)(uint64_t, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t (*v32)(uint64_t, uint64_t, uint64_t);
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  char *v46;
  void (*v47)(char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t (*v55)(uint64_t);
  uint64_t v56;
  char v57;
  char v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  _BYTE *v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  _BYTE *v71;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  _BYTE *v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(void);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  unint64_t v93;
  _BYTE v94[40];
  __int128 v95;
  uint64_t v96;
  uint64_t v97[6];
  _QWORD *v98;

  v84 = a8;
  v83 = a7;
  v80 = a6;
  v82 = a4;
  v81 = a3;
  v93 = a2;
  v87 = a1;
  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v92 = (uint64_t)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v89 = (char *)&v78 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v86 = (char *)&v78 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v88 = (uint64_t)&v78 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v78 - v24;
  v26 = MEMORY[0x1E0C80A78](v23);
  v28 = (char *)&v78 - v27;
  v29 = *(void (**)(void))(class metadata base offset for PommesBridge + *v8 + 72);
  v98 = v8;
  v85 = v29;
  ((void (*)(uint64_t))v29)(v26);
  v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  v90 = a5;
  v91 = v30;
  v30((uint64_t)v25, a5, v10);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v25, 0, 1, v10);
  v31 = (uint64_t)&v17[*(int *)(v15 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v28, (uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v25, v31, &demangling cache variable for type metadata for UUID?);
  v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v32((uint64_t)v17, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UUID?);
    v33 = v32(v31, 1, v10);
    v34 = v98;
    if (v33 == 1)
    {
      v35 = outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
      goto LABEL_14;
    }
    goto LABEL_6;
  }
  v36 = v88;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v17, v88, &demangling cache variable for type metadata for UUID?);
  if (v32(v31, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v36, v10);
LABEL_6:
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for (UUID?, UUID?));
LABEL_7:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    v38 = __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    v39 = v92;
    v91(v92, v90, v10);
    swift_bridgeObjectRetain_n();
    swift_retain_n();
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = swift_slowAlloc();
      v90 = swift_slowAlloc();
      v97[0] = v90;
      *(_DWORD *)v42 = 136315650;
      v43 = (uint64_t)v86;
      v85();
      if (v32(v43, 1, v10))
      {
        outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UUID?);
        v44 = 0xE300000000000000;
        v45 = 7104878;
      }
      else
      {
        v64 = v43;
        v65 = v89;
        v91((uint64_t)v89, v64, v10);
        outlined destroy of MediaUserStateCenter?(v64, &demangling cache variable for type metadata for UUID?);
        v45 = UUID.uuidString.getter();
        v44 = v66;
        (*(void (**)(char *, uint64_t))(v11 + 8))(v65, v10);
      }
      *(_QWORD *)&v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v44, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
      v67 = v92;
      v68 = dispatch thunk of CustomStringConvertible.description.getter();
      *(_QWORD *)&v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v67, v10);
      *(_WORD *)(v42 + 22) = 2080;
      v70 = v93;
      swift_bridgeObjectRetain();
      *(_QWORD *)&v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v70, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v40, v41, "Request does not belong to current session id: %s, request session id: %s for request id: %s", (uint8_t *)v42, 0x20u);
      v38 = v90;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v38, -1, -1);
      MEMORY[0x1C3BBFF64](v42, -1, -1);

    }
    else
    {
      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v39, v10);

      swift_bridgeObjectRelease_n();
    }
    lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError();
    swift_allocError();
    *v71 = 0;
    goto LABEL_25;
  }
  v46 = v89;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 32))(v89, v31, v10);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v79 = dispatch thunk of static Equatable.== infix(_:_:)();
  v47 = *(void (**)(char *, uint64_t))(v11 + 8);
  v47(v46, v10);
  outlined destroy of MediaUserStateCenter?((uint64_t)v25, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for UUID?);
  v47((char *)v36, v10);
  v35 = outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  v34 = v98;
  if ((v79 & 1) == 0)
    goto LABEL_7;
LABEL_14:
  (*(void (**)(__int128 *__return_ptr, uint64_t))(class metadata base offset for PommesBridge + *v34 + 96))(&v95, v35);
  if (!v96)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v95, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.error.getter();
    v38 = v61;
    if (os_log_type_enabled(v60, v61))
    {
      v62 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v62 = 0;
      _os_log_impl(&dword_1C2356000, v60, (os_log_type_t)v38, "Unable to find SessionState to pass to RequestProcessor", v62, 2u);
      MEMORY[0x1C3BBFF64](v62, -1, -1);
    }

    lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError();
    swift_allocError();
    *v63 = 1;
LABEL_25:
    swift_willThrow();
    return v38;
  }
  outlined init with take of AppDataProviding(&v95, (uint64_t)v97);
  v48 = *(_QWORD *)((char *)v34 + direct field offset for PommesBridge.pommesSearch);
  if (v48)
  {
    v49 = (uint64_t)v89;
    v91((uint64_t)v89, v90, v10);
    swift_retain();
    v50 = v82;
    swift_bridgeObjectRetain();
    v51 = v93;
    swift_bridgeObjectRetain();
    v52 = v84;
    swift_bridgeObjectRetain();
    v98 = (_QWORD *)MessageDispatchingBridgeBase.name.getter();
    v92 = v53;
    MessageDispatchingBridgeBase.messagePublisher.getter();
    v91 = (void (*)(uint64_t, uint64_t, uint64_t))MessageDispatchingBridgeBase.serviceHelper.getter();
    outlined init with copy of AppDataProviding((uint64_t)v97, (uint64_t)v94);
    v54 = *(_QWORD *)((char *)v34 + direct field offset for PommesBridge.instrumentationUtil);
    v55 = *(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridge + *v34 + 120);
    v56 = swift_retain();
    v57 = v55(v56);
    v58 = (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v34 + 144))();
    type metadata accessor for PommesBridgeRequestProcessor(0);
    swift_allocObject();
    v38 = specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(v81, v50, v49, v87, v51, v83, v52, (uint64_t)v98, v92, (uint64_t)&v95, (uint64_t)v91, v48, (uint64_t)v94, v54, v57 & 1, v80 & 1, v58 & 1);
    swift_release();
    swift_release();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
    v74 = Logger.logObject.getter();
    v75 = static os_log_type_t.error.getter();
    v38 = v75;
    if (os_log_type_enabled(v74, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v76 = 0;
      _os_log_impl(&dword_1C2356000, v74, (os_log_type_t)v38, "PommesSearch instance not available - timing error with async bridge setup?", v76, 2u);
      MEMORY[0x1C3BBFF64](v76, -1, -1);
    }

    lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError();
    swift_allocError();
    *v77 = 2;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v97);
  }
  return v38;
}

void PommesBridge.handleSessionStarted(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint8_t *v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  id v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD v41[2];
  uint8_t *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46[5];
  uint64_t v47[3];
  uint64_t v48;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UUID();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  v12 = __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  v13 = a1;
  v45 = v12;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    v47[0] = v43;
    v44 = v6;
    *(_DWORD *)v16 = 136315138;
    v41[1] = v16 + 4;
    v42 = v16;
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v18 = v8;
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v18 + 8))(v10, v7);
    v46[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v20, v47);
    v6 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v8 = v18;
    swift_bridgeObjectRelease();
    v21 = v42;
    _os_log_impl(&dword_1C2356000, v14, v15, "handling session started for session id: %s", v42, 0xCu);
    v22 = v43;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v22, -1, -1);
    MEMORY[0x1C3BBFF64](v21, -1, -1);

  }
  else
  {

  }
  SessionMessageBase.sessionId.getter();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v6, 0, 1, v7);
  (*(void (**)(char *))(class metadata base offset for PommesBridge + *v2 + 80))(v6);
  MessageDispatchingBridgeBase.conversationSessionsManaging.getter();
  __swift_project_boxed_opaque_existential_1(v47, v48);
  SessionMessageBase.sessionId.getter();
  dispatch thunk of ConversationSessionsManaging.conversationSessionState(forConversationSessionId:)();
  v23 = *(void (**)(char *, uint64_t))(v8 + 8);
  v23(v10, v7);
  (*(void (**)(uint64_t *))(class metadata base offset for PommesBridge + *v2 + 104))(v46);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v47);
  v24 = *(_QWORD *)((char *)v2 + direct field offset for PommesBridge.pommesSearch);
  if (v24)
  {
    v25 = *(void (**)(uint64_t))(*(_QWORD *)v24 + 280);
    v26 = swift_retain();
    v25(v26);
    swift_release();
  }
  v27 = v13;
  swift_retain_n();
  v28 = v27;
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = swift_slowAlloc();
    v44 = (char *)v23;
    v32 = v10;
    v33 = v31;
    v45 = swift_slowAlloc();
    v46[0] = v45;
    *(_DWORD *)v33 = 136315394;
    (*(void (**)(uint64_t *__return_ptr))(class metadata base offset for PommesBridge + *v2 + 96))(v47);
    v34 = v48;
    outlined destroy of MediaUserStateCenter?((uint64_t)v47, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
    if (v34)
      v35 = 0;
    else
      v35 = 544501582;
    if (v34)
      v36 = 0xE000000000000000;
    else
      v36 = 0xE400000000000000;
    v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2080;
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v37 = dispatch thunk of CustomStringConvertible.description.getter();
    v39 = v38;
    ((void (*)(char *, uint64_t))v44)(v32, v7);
    v47[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v39, v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v29, v30, "%sFound session state for session id %s", (uint8_t *)v33, 0x16u);
    v40 = v45;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v40, -1, -1);
    MEMORY[0x1C3BBFF64](v33, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

void PommesBridge.handleSessionEnded(_:)(void *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  void (*v21)(uint64_t);
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  char *v25;
  char v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  _BOOL4 v32;
  _QWORD *v33;
  uint8_t *v34;
  uint64_t v35;
  void (*v36)(uint64_t);
  uint64_t v37;
  char *v38;
  void (*v39)(_OWORD *, _QWORD);
  _QWORD *v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  char *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  id v51;
  _QWORD *v52;
  char *v53;
  char *v54;
  id v55;
  _OWORD v56[2];
  uint64_t v57;
  uint64_t v58;

  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v54 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UUID?, UUID?));
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v53 = (char *)&v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v52 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v52 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v52 - v19;
  v21 = *(void (**)(uint64_t))(class metadata base offset for PommesBridge + *v1 + 72);
  v52 = v1;
  v21(v18);
  v55 = a1;
  SessionMessageBase.sessionId.getter();
  v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v22(v17, 0, 1, v3);
  v23 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v20, (uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v17, v23, &demangling cache variable for type metadata for UUID?);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48);
  if (v24((uint64_t)v8, 1, v3) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
    if (v24(v23, 1, v3) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
LABEL_8:
      v28 = v22;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.debug.getter();
      v32 = os_log_type_enabled(v30, v31);
      v33 = v52;
      if (v32)
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1C2356000, v30, v31, "setting sessionId and sessionState to nil", v34, 2u);
        MEMORY[0x1C3BBFF64](v34, -1, -1);
      }

      v35 = *(_QWORD *)((char *)v33 + direct field offset for PommesBridge.pommesSearch);
      if (v35)
      {
        v36 = *(void (**)(uint64_t))(*(_QWORD *)v35 + 320);
        v37 = swift_retain();
        v36(v37);
        swift_release();
      }
      v38 = v53;
      v28(v53, 1, 1, v3);
      (*(void (**)(char *))(class metadata base offset for PommesBridge + *v33 + 80))(v38);
      v57 = 0;
      memset(v56, 0, sizeof(v56));
      (*(void (**)(_OWORD *))(class metadata base offset for PommesBridge + *v33 + 104))(v56);
      v39 = (void (*)(_OWORD *, _QWORD))dispatch thunk of CandidateRequestAwareBridgeBase.requestIdToCandidateRequestProcessor.modify();
      v41 = v40;
      swift_bridgeObjectRelease();
      *v41 = MEMORY[0x1E0DEE9E0];
      v39(v56, 0);
      return;
    }
    goto LABEL_6;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v8, (uint64_t)v14, &demangling cache variable for type metadata for UUID?);
  if (v24(v23, 1, v3) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v14, v3);
LABEL_6:
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for (UUID?, UUID?));
    goto LABEL_15;
  }
  v25 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 32))(v54, v23, v3);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09D0]);
  v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  v27 = *(void (**)(char *, uint64_t))(v4 + 8);
  v27(v25, v3);
  outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for UUID?);
  v27(v14, v3);
  outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  if ((v26 & 1) != 0)
    goto LABEL_8;
LABEL_15:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
  v43 = v55;
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v44, v45))
  {
    v46 = (uint8_t *)swift_slowAlloc();
    v55 = (id)swift_slowAlloc();
    *(_QWORD *)&v56[0] = v55;
    *(_DWORD *)v46 = 136315138;
    v53 = (char *)(v46 + 4);
    v47 = v54;
    SessionMessageBase.sessionId.getter();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v48 = dispatch thunk of CustomStringConvertible.description.getter();
    v50 = v49;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v47, v3);
    v58 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v50, (uint64_t *)v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v44, v45, "SessionId: %s is not the current session, ignoring", v46, 0xCu);
    v51 = v55;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v51, -1, -1);
    MEMORY[0x1C3BBFF64](v46, -1, -1);

  }
  else
  {

  }
}

uint64_t PommesBridge.handleMUXContextMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t result;
  uint64_t v15;
  void (*v16)(id);
  uint64_t v17;

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v17 = v9;
    *(_DWORD *)v8 = 136315138;
    v10 = MessageBase.assistantId.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v6, v7, "MUXContextMessage received for assistantId: %s", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v9, -1, -1);
    MEMORY[0x1C3BBFF64](v8, -1, -1);

  }
  else
  {

  }
  v12 = MUXContextMessage.isRMVEnabled.getter();
  (*(void (**)(_QWORD))(class metadata base offset for PommesBridge + *v2 + 128))(v12 & 1);
  v13 = static MUXUtils.singleKnownUserInHome(muxContextMessage:)();
  result = (*(uint64_t (**)(_QWORD))(class metadata base offset for PommesBridge + *v2 + 152))(v13 & 1);
  v15 = *(_QWORD *)((char *)v2 + direct field offset for PommesBridge.pommesSearch);
  if (v15)
  {
    v16 = *(void (**)(id))(*(_QWORD *)v15 + 312);
    swift_retain();
    v16(v5);
    return swift_release();
  }
  return result;
}

void PommesBridge.handleRunPOMMESRequest(_:_:_:)(void *a1)
{
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = a1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    v7 = swift_slowAlloc();
    v16 = v7;
    *(_DWORD *)v6 = 136315138;
    v8 = objc_msgSend(v3, sel_debugDescription);
    v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v4, v5, "Received SARDRunPOMMESRequest: %s", v6, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v7, -1, -1);
    MEMORY[0x1C3BBFF64](v6, -1, -1);

  }
  else
  {

  }
  if (dispatch thunk of CandidateRequestAwareBridgeBase.activeRequestProcessor.getter())
  {
    type metadata accessor for PommesBridgeRequestProcessor(0);
    v12 = (_QWORD *)swift_dynamicCastClass();
    if (v12)
    {
      (*(void (**)(id))(class metadata base offset for PommesBridgeRequestProcessor + *v12 + 352))(v3);
      swift_release();
      return;
    }
    swift_release();
  }
  v13 = Logger.logObject.getter();
  v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v15 = 0;
    _os_log_impl(&dword_1C2356000, v13, v14, "Unable to handle SARDRunPOMMESRequest because there is no active PommesBridgeRequestProcessor", v15, 2u);
    MEMORY[0x1C3BBFF64](v15, -1, -1);
  }

}

void PommesBridge.__allocating_init(name:messagePublisher:serviceHelper:queue:conversationSessionsManager:logger:waitBeforeReplacingActiveRequest:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PommesBridge.init(name:messagePublisher:serviceHelper:queue:conversationSessionsManager:logger:waitBeforeReplacingActiveRequest:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PommesBridge.__ivar_destroyer()
{
  uint64_t v0;

  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.currentSessionId, &demangling cache variable for type metadata for UUID?);
  return outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t PommesBridge.deinit()
{
  uint64_t v0;

  v0 = CandidateRequestAwareBridgeBase.deinit();
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.currentSessionId, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return v0;
}

uint64_t PommesBridge.__deallocating_deinit()
{
  uint64_t v0;

  v0 = CandidateRequestAwareBridgeBase.deinit();
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.currentSessionId, &demangling cache variable for type metadata for UUID?);
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridge.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return swift_deallocClassInstance();
}

uint64_t specialized PommesBridge.init(_:_:_:_:_:pommesSearch:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint64_t v36;
  uint8_t *v37;
  uint8_t *v38;
  uint64_t v39;
  void *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD aBlock[6];
  uint64_t v63[6];

  v57 = a5;
  v58 = a7;
  v59 = a2;
  v55 = a1;
  v11 = type metadata accessor for DispatchWorkItemFlags();
  v53 = *(_QWORD *)(v11 - 8);
  v54 = v11;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for DispatchQoS();
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v49 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for MessageHandlerType();
  v56 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Logger();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)(v7 + direct field offset for PommesBridge.pommesSearch) = 0;
  v21 = v7 + direct field offset for PommesBridge.currentSessionId;
  v22 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v21, 1, 1, v22);
  v23 = v7 + direct field offset for PommesBridge.sessionState;
  *(_OWORD *)v23 = 0u;
  *(_OWORD *)(v23 + 16) = 0u;
  *(_QWORD *)(v23 + 32) = 0;
  *(_BYTE *)(v7 + direct field offset for PommesBridge.isMultiUser) = 0;
  *(_BYTE *)(v7 + direct field offset for PommesBridge.isOnlyUserInHome) = 0;
  v24 = one-time initialization token for sharedInstance;
  swift_retain();
  if (v24 != -1)
    swift_once();
  *(_QWORD *)(v7 + direct field offset for PommesBridge.instrumentationUtil) = static PommesBridgeInstrumentationUtil.sharedInstance;
  swift_retain();
  swift_release();
  v61 = a3;
  outlined init with copy of AppDataProviding(a3, (uint64_t)aBlock);
  v60 = a6;
  outlined init with copy of AppDataProviding(a6, (uint64_t)v63);
  v25 = one-time initialization token for pommes;
  swift_unknownObjectRetain();
  v26 = v57;
  if (v25 != -1)
    swift_once();
  v57 = (id)__swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, id, uint64_t))(v18 + 16))(v20, v57, v17);
  v59 = a4;
  v27 = CandidateRequestAwareBridgeBase.init(name:messagePublisher:serviceHelper:queue:conversationSessionsManager:logger:waitBeforeReplacingActiveRequest:)();
  type metadata accessor for SessionStartedMessage();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerMessageHandler<A>(_:)();
  type metadata accessor for SessionEndedMessage();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerMessageHandler<A>(_:)();
  swift_release();
  type metadata accessor for MUXContextMessage();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerMessageHandler<A>(_:)();
  swift_release();
  v28 = *MEMORY[0x1E0DA45B0];
  v55 = v26;
  v29 = v56;
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v56 + 104);
  v30(v16, v28, v14);
  type metadata accessor for StartSpeechRequestMessage();
  type metadata accessor for PommesBridgeRequestProcessor(0);
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31 = *(void (**)(char *, uint64_t))(v29 + 8);
  v31(v16, v14);
  v30(v16, v28, v14);
  type metadata accessor for StartChildSpeechRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v28, v14);
  type metadata accessor for StartChildTextRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v28, v14);
  type metadata accessor for StartTextRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v28, v14);
  type metadata accessor for StartLocalRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, *MEMORY[0x1E0DA45D0], v14);
  type metadata accessor for EndRequestMessageBase();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v32 = *MEMORY[0x1E0DA45D8];
  v30(v16, v32, v14);
  type metadata accessor for RequestContextMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for NLResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for TextBasedResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for GestureBasedResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for AsrResultCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for FallbackToPommesMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for TextBasedTRPCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for RewrittenUtteranceCandidateMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for TTResponseMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v32, v14);
  type metadata accessor for TRPCandidateRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, *MEMORY[0x1E0DA45C0], v14);
  type metadata accessor for StartCandidateRequestMessage();
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  v30(v16, v28, v14);
  swift_retain();
  dispatch thunk of CandidateRequestAwareBridgeBase.registerMessageHandler<A, B>(_:messageHandlerType:)();
  swift_release();
  v31(v16, v14);
  type metadata accessor for SARDRunPOMMESRequest();
  swift_retain();
  dispatch thunk of MessageDispatchingBridgeBase.registerCommandHandler<A>(_:)();
  swift_release();
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  v35 = os_log_type_enabled(v33, v34);
  v36 = v58;
  if (v58)
  {
    if (v35)
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1C2356000, v33, v34, "PommesSearch provided to initializer", v37, 2u);
      MEMORY[0x1C3BBFF64](v37, -1, -1);
    }

    *(_QWORD *)(v27 + direct field offset for PommesBridge.pommesSearch) = v36;
    swift_retain();
  }
  else
  {
    if (v35)
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1C2356000, v33, v34, "Using default PommesSearch, dispatching to initialize", v38, 2u);
      MEMORY[0x1C3BBFF64](v38, -1, -1);
    }

    v39 = swift_allocObject();
    swift_weakInit();
    aBlock[4] = partial apply for closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:);
    aBlock[5] = v39;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = &block_descriptor_9;
    v40 = _Block_copy(aBlock);
    swift_retain();
    v41 = v49;
    static DispatchQoS.unspecified.getter();
    v63[0] = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    v42 = v52;
    v43 = v54;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C3BBF154](0, v41, v42, v40);
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v43);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v41, v51);
    swift_release();
  }
  swift_release();
  v45 = v59;
  v44 = v60;
  v46 = v61;
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t))(*(_QWORD *)static PommesSearchService.shared + 104))(v45);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v44);
  __swift_destroy_boxed_opaque_existential_1(v46);
  return v27;
}

unint64_t lazy protocol witness table accessor for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError;
  if (!lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesBridge.PommesBridgeError, &type metadata for PommesBridge.PommesBridgeError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError;
  if (!lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesBridge.PommesBridgeError, &type metadata for PommesBridge.PommesBridgeError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesBridge.PommesBridgeError and conformance PommesBridge.PommesBridgeError);
  }
  return result;
}

uint64_t sub_1C2411BA4(_QWORD **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 72))();
}

uint64_t sub_1C2411BDC(_QWORD **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 96))();
}

uint64_t sub_1C2411C10(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return (*(uint64_t (**)(_BYTE *))(class metadata base offset for PommesBridge + **a2 + 104))(v4);
}

uint64_t sub_1C2411C64@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 120))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C2411CA4(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))(class metadata base offset for PommesBridge + **a2 + 128))(*a1);
}

uint64_t sub_1C2411CDC@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + **a1 + 144))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C2411D1C(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))(class metadata base offset for PommesBridge + **a2 + 152))(*a1);
}

uint64_t type metadata accessor for PommesBridge()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PommesBridge;
  if (!type metadata singleton initialization cache for PommesBridge)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for PommesBridge()
{
  unint64_t v0;

  type metadata accessor for UUID?();
  if (v0 <= 0x3F)
    swift_initClassMetadata2();
}

uint64_t method lookup function for PommesBridge()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesBridge.currentSessionId.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 72))();
}

uint64_t dispatch thunk of PommesBridge.currentSessionId.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 80))();
}

uint64_t dispatch thunk of PommesBridge.currentSessionId.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 88))();
}

uint64_t dispatch thunk of PommesBridge.sessionState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 96))();
}

uint64_t dispatch thunk of PommesBridge.sessionState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 104))();
}

uint64_t dispatch thunk of PommesBridge.sessionState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 112))();
}

uint64_t dispatch thunk of PommesBridge.isMultiUser.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 120))();
}

uint64_t dispatch thunk of PommesBridge.isMultiUser.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 128))();
}

uint64_t dispatch thunk of PommesBridge.isMultiUser.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 136))();
}

uint64_t dispatch thunk of PommesBridge.isOnlyUserInHome.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 144))();
}

uint64_t dispatch thunk of PommesBridge.isOnlyUserInHome.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 152))();
}

uint64_t dispatch thunk of PommesBridge.isOnlyUserInHome.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 160))();
}

uint64_t dispatch thunk of PommesBridge.__allocating_init(_:_:_:_:_:pommesSearch:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + v0 + 168))();
}

uint64_t dispatch thunk of PommesBridge.handleSessionStarted(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 176))();
}

uint64_t dispatch thunk of PommesBridge.handleSessionEnded(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 184))();
}

uint64_t dispatch thunk of PommesBridge.handleMUXContextMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 192))();
}

uint64_t dispatch thunk of PommesBridge.handleRunPOMMESRequest(_:_:_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 200))();
}

void type metadata accessor for UUID?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for UUID?)
  {
    type metadata accessor for UUID();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UUID?);
  }
}

uint64_t ObjC metadata update function for PommesBridge()
{
  return type metadata accessor for PommesBridge();
}

uint64_t storeEnumTagSinglePayload for PommesBridge.PommesBridgeError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C2412078 + 4 * byte_1C24FD615[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C24120AC + 4 * byte_1C24FD610[v4]))();
}

uint64_t sub_1C24120AC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24120B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C24120BCLL);
  return result;
}

uint64_t sub_1C24120C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C24120D0);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C24120D4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C24120DC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PommesBridge.PommesBridgeError()
{
  return &type metadata for PommesBridge.PommesBridgeError;
}

unint64_t type metadata accessor for SARDRunPOMMESRequest()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SARDRunPOMMESRequest;
  if (!lazy cache variable for type metadata for SARDRunPOMMESRequest)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SARDRunPOMMESRequest);
  }
  return result;
}

uint64_t sub_1C2412134()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

void partial apply for closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:)();
}

uint64_t partial apply for implicit closure #44 in implicit closure #43 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 200))();
}

uint64_t partial apply for implicit closure #40 in implicit closure #39 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 440))();
}

uint64_t partial apply for implicit closure #38 in implicit closure #37 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 368))();
}

uint64_t partial apply for implicit closure #36 in implicit closure #35 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 416))();
}

uint64_t partial apply for implicit closure #34 in implicit closure #33 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 400))();
}

uint64_t partial apply for implicit closure #32 in implicit closure #31 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 392))();
}

uint64_t partial apply for implicit closure #30 in implicit closure #29 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 432))();
}

uint64_t partial apply for implicit closure #28 in implicit closure #27 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 360))();
}

uint64_t partial apply for implicit closure #26 in implicit closure #25 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 384))();
}

uint64_t partial apply for implicit closure #24 in implicit closure #23 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 376))();
}

uint64_t partial apply for implicit closure #22 in implicit closure #21 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 408))();
}

uint64_t partial apply for implicit closure #20 in implicit closure #19 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 336))();
}

uint64_t partial apply for implicit closure #16 in implicit closure #15 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 304))();
}

uint64_t partial apply for implicit closure #14 in implicit closure #13 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 296))();
}

uint64_t partial apply for implicit closure #12 in implicit closure #11 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 320))();
}

uint64_t partial apply for implicit closure #10 in implicit closure #9 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 312))();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 192))();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 184))();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridge + *v0 + 176))();
}

uint64_t static AppInfoDataProvider.make(appDataProvider:preferences:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  id v4;
  __int128 v6[2];

  outlined init with copy of AppDataProviding(a1, (uint64_t)v6);
  type metadata accessor for AppInfoDataProvider();
  v3 = swift_allocObject();
  outlined init with take of AppDataProviding(v6, v3 + 16);
  *(_QWORD *)(v3 + 56) = a2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  v4 = a2;
  return specialized AnyDataProvider.init<A>(provider:)(v3);
}

uint64_t AppInfoDataProvider.appDataProvider.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AppDataProviding(v1 + 16, a1);
}

id AppInfoDataProvider.preferences.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

uint64_t AppInfoDataProvider.__allocating_init(appDataProvider:preferences:)(__int128 *a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  outlined init with take of AppDataProviding(a1, v4 + 16);
  *(_QWORD *)(v4 + 56) = a2;
  return v4;
}

uint64_t type metadata accessor for AppInfoDataProvider()
{
  return objc_opt_self();
}

uint64_t AppInfoDataProvider.init(appDataProvider:preferences:)(__int128 *a1, uint64_t a2)
{
  uint64_t v2;

  outlined init with take of AppDataProviding(a1, v2 + 16);
  *(_QWORD *)(v2 + 56) = a2;
  return v2;
}

uint64_t specialized NSDictionary.arrayValue<A>(for:)()
{
  void *v0;
  void *v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD v12[2];
  _BYTE v13[24];
  uint64_t v14;

  v1 = (void *)MEMORY[0x1C3BBEC44]();
  v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v12, 0, sizeof(v12));
  }
  outlined init with take of PommesSearchReason?((uint64_t)v12, (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v14)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for Any?);
    return 0;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Any]);
  if ((swift_dynamicCast() & 1) == 0)
    return 0;
  v3 = v10;
  v4 = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v3 + 16);
  if (v5)
  {
    v6 = v3 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of Any(v6, (uint64_t)v13);
      outlined init with copy of Any((uint64_t)v13, (uint64_t)v12);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v7 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
        if (v9)
        {
          MEMORY[0x1C3BBEE78](v7);
          if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v13);
      }
      v6 += 32;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    v4 = v11;
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t closure #3 in AppInfoDataProvider.equivalentAppInfo(span:)()
{
  Swift::String v0;
  Swift::String_optional v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  _QWORD *v13;
  id v14;
  void *v15;
  uint64_t v16;
  void *v17;
  id v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  Swift::String v22;
  Swift::Bool_optional v23;
  uint64_t v24;
  uint64_t v25;
  _OWORD v26[2];
  uint64_t v27[4];
  unint64_t countAndFlagsBits;

  Apple_Parsec_Siri_V2alpha_AppVocabularyConcept.init()();
  v0._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v1 = NSDictionary.stringValue(for:)(v0);
  swift_bridgeObjectRelease();
  if (v1.value._object)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      v6 = swift_slowAlloc();
      v27[0] = v6;
      countAndFlagsBits = v1.value._countAndFlagsBits;
      *(_DWORD *)v5 = 136315138;
      v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(_QWORD *)&v26[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v7, v8, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v3, v4, "PegasusProxy#equivalentAppInfo unable find id from key:%s", v5, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v6, -1, -1);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }

    Apple_Parsec_Siri_V2alpha_AppInfo.appName.setter();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = specialized NSDictionary.arrayValue<A>(for:)();
  swift_bridgeObjectRelease();
  if (!v9)
    goto LABEL_30;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v10 = result;
    if (result)
      goto LABEL_10;
    goto LABEL_29;
  }
  v10 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (!v10)
  {
LABEL_29:
    swift_bridgeObjectRelease_n();
    Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
LABEL_30:
    v22._countAndFlagsBits = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v23.value = NSDictionary.BOOLeanValue(for:)(v22).value;
    result = swift_bridgeObjectRelease();
    if (v23.value != 2)
      return MEMORY[0x1C3BBC0AC](v23.value);
    return result;
  }
LABEL_10:
  if (v10 >= 1)
  {
    v12 = 0;
    countAndFlagsBits = v9 & 0xC000000000000001;
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    while (1)
    {
      if (countAndFlagsBits)
        v14 = (id)MEMORY[0x1C3BBF3F4](v12, v9);
      else
        v14 = *(id *)(v9 + 8 * v12 + 32);
      v15 = v14;
      v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v17 = (void *)MEMORY[0x1C3BBEC44](v16);
      v18 = objc_msgSend(v15, sel_objectForKey_, v17);

      if (v18)
      {
        _bridgeAnyObjectToAny(_:)();
        swift_unknownObjectRelease();
      }
      else
      {
        memset(v26, 0, sizeof(v26));
      }
      outlined init with take of PommesSearchReason?((uint64_t)v26, (uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (v27[3])
      {
        if ((swift_dynamicCast() & 1) != 0)
        {

          swift_bridgeObjectRelease();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13[2] + 1, 1, v13);
          v20 = v13[2];
          v19 = v13[3];
          if (v20 >= v19 >> 1)
            v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v19 > 1), v20 + 1, 1, v13);
          v13[2] = v20 + 1;
          v21 = &v13[2 * v20];
          v21[4] = v24;
          v21[5] = v25;
          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v27, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }

      swift_bridgeObjectRelease();
LABEL_14:
      if (v10 == ++v12)
        goto LABEL_29;
    }
  }
  __break(1u);
  return result;
}

uint64_t closure #4 in AppInfoDataProvider.equivalentAppInfo(span:)()
{
  id v0;
  uint64_t v1;
  id v2;
  _QWORD v4[5];

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  v4[3] = type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for LNMetadataProvider);
  v4[4] = &protocol witness table for LNMetadataProvider;
  v4[0] = v0;
  v1 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  AppIntentMetadataMapper.getAppIntentMetadata(bundleId:)(v1, v2);
  swift_bridgeObjectRelease();
  outlined destroy of AppIntentMetadataMapper((uint64_t)v4);
  return Apple_Parsec_Siri_V2alpha_AppInfo.appIntentsProtocolMetadata.setter();
}

uint64_t AppInfoDataProvider.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t AppInfoDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AppInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AppInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AppInfoDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 128))();
  *a1 = result;
  return result;
}

uint64_t method lookup function for AppInfoDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppInfoDataProvider.__allocating_init(appDataProvider:preferences:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AppInfoDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AppInfoDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))() & 1;
}

uint64_t dispatch thunk of AppInfoDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 128);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t sub_1C2412D40()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in AppInfoDataProvider.equivalentAppInfo(span:)()
{
  return closure #4 in AppInfoDataProvider.equivalentAppInfo(span:)();
}

uint64_t outlined destroy of AppIntentMetadataMapper(uint64_t a1)
{
  destroy for SportsPersonalizationExperiencesResolver();
  return a1;
}

unint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  void *v1;
  void *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  char *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  _QWORD v25[2];
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppInfo?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  v29 = *(_QWORD *)(v7 - 8);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v28 = (char *)v25 - v11;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12)
  {
    v13 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_Span() - 8);
    v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    v15 = *(_QWORD *)(v13 + 72);
    v25[1] = a1;
    swift_bridgeObjectRetain();
    v30 = MEMORY[0x1E0DEE9D8];
    v16 = v29;
    v26 = v15;
    v27 = v10;
    while (1)
    {
      AppInfoDataProvider.equivalentAppInfo(span:)(v14, (uint64_t)v6);
      if (v2)
      {

        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v6, 1, 1, v7);
        v2 = 0;
      }
      else if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v6, 1, v7) != 1)
      {
        v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
        v18 = v28;
        v17(v28, v6, v7);
        v17(v10, v18, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v19 = v30;
        else
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v30 + 16) + 1, 1, v30);
        v21 = *(_QWORD *)(v19 + 16);
        v20 = *(_QWORD *)(v19 + 24);
        if (v21 >= v20 >> 1)
          v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v20 > 1, v21 + 1, 1, v19);
        *(_QWORD *)(v19 + 16) = v21 + 1;
        v16 = v29;
        v22 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
        v30 = v19;
        v23 = v19 + v22 + *(_QWORD *)(v29 + 72) * v21;
        v10 = v27;
        v17((char *)v23, v27, v7);
        v15 = v26;
        goto LABEL_5;
      }
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppInfo?);
LABEL_5:
      v14 += v15;
      if (!--v12)
      {
        swift_bridgeObjectRelease();
        return v30;
      }
    }
  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t key path setter for MarketplaceInfoDataProvider.marketplaceInfo : MarketplaceInfoDataProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Search_V2_MarketplaceInfo?(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 96))(v6);
}

uint64_t MarketplaceInfoDataProvider.marketplaceInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  swift_beginAccess();
  return outlined init with copy of Apple_Parsec_Search_V2_MarketplaceInfo?(v3, a1);
}

uint64_t outlined init with copy of Apple_Parsec_Search_V2_MarketplaceInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MarketplaceInfoDataProvider.marketplaceInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Search_V2_MarketplaceInfo?(a1, v3);
  return swift_endAccess();
}

uint64_t outlined assign with take of Apple_Parsec_Search_V2_MarketplaceInfo?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t (*MarketplaceInfoDataProvider.marketplaceInfo.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t MarketplaceInfoDataProvider.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t MarketplaceInfoDataProvider.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  return v0;
}

uint64_t static MarketplaceInfoDataProvider.make()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for MarketplaceInfoDataProvider();
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t type metadata accessor for MarketplaceInfoDataProvider()
{
  uint64_t result;

  result = type metadata singleton initialization cache for MarketplaceInfoDataProvider;
  if (!type metadata singleton initialization cache for MarketplaceInfoDataProvider)
    return swift_getSingletonMetadata();
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int domain_answer;
  int v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint8_t *v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  os_log_type_t v38;
  uint8_t *v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  void (*v45)(uint64_t);
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;

  v2 = v0;
  v49 = *MEMORY[0x1E0C80C00];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v40 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v40 - v13;
  v45 = *(void (**)(uint64_t))(*(_QWORD *)v0 + 88);
  v45(v12);
  v15 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17(v14, 1, v15);
  outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?((uint64_t)v14);
  if (v18 == 1)
  {
    v47 = 0;
    domain_answer = os_eligibility_get_domain_answer();
    if (domain_answer)
    {
      v20 = domain_answer;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v21 = type metadata accessor for Logger();
      __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
      v22 = Logger.logObject.getter();
      v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        v24 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v24 = 67109120;
        v48 = v20;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v22, v23, "MarketplaceInfoDataProvider could not retrieve HYDROGEN domain eligibility information, assuming ineligible. EligibilityError: %d", v24, 8u);
        MEMORY[0x1C3BBFF64](v24, -1, -1);
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v43 = v1;
      v25 = type metadata accessor for Logger();
      v42 = __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      v28 = v27;
      if (os_log_type_enabled(v26, v27))
      {
        v29 = (uint8_t *)swift_slowAlloc();
        v41 = v28;
        v30 = v29;
        *(_DWORD *)v29 = 134217984;
        v40 = v29 + 4;
        swift_beginAccess();
        v46 = v47;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v26, (os_log_type_t)v41, "MarketplaceInfoDataProvider device eligibility: %llu", v30, 0xCu);
        MEMORY[0x1C3BBFF64](v30, -1, -1);
      }

      MEMORY[0x1E0C80A78](v31);
      *(&v40 - 2) = &v47;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_MarketplaceInfo and conformance Apple_Parsec_Search_V2_MarketplaceInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E688], MEMORY[0x1E0D6E678]);
      v32 = v43;
      static Message.with(_:)();
      v43 = v32;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v11, 0, 1, v15);
      v33 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 96))(v11);
      v45(v33);
      if (v17(v8, 1, v15))
      {
        outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?((uint64_t)v8);
      }
      else
      {
        v34 = Apple_Parsec_Search_V2_MarketplaceInfo.isMarketplaceEligible.getter();
        outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?((uint64_t)v8);
        if ((v34 & 1) != 0)
        {
          v35 = type metadata accessor for TaskPriority();
          v36 = (uint64_t)v44;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v44, 1, 1, v35);
          v37 = (_QWORD *)swift_allocObject();
          v37[2] = 0;
          v37[3] = 0;
          v37[4] = v2;
          swift_retain();
          _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v36, (uint64_t)&async function pointer to partial apply for closure #2 in MarketplaceInfoDataProvider.prepare(), (uint64_t)v37);
          swift_release();
          return;
        }
      }
      v22 = Logger.logObject.getter();
      v38 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v22, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_1C2356000, v22, v38, "MarketplaceInfoDataProvider device ineligible", v39, 2u);
        MEMORY[0x1C3BBFF64](v39, -1, -1);
      }
    }

  }
}

uint64_t outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;

  v4[2] = a4;
  v5 = type metadata accessor for Date();
  v4[3] = v5;
  v4[4] = *(_QWORD *)(v5 - 8);
  v4[5] = swift_task_alloc();
  return swift_task_switch();
}

void closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2356000, v2, v3, "MarketplaceInfoDataProvider fetching distributors", v4, 2u);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }

  if (one-time initialization token for shared != -1)
    swift_once();
  v5 = static PerformanceUtil.shared;
  Date.init()();
  v7 = **(int **)(*(_QWORD *)v5 + 208) + *(_QWORD *)(*(_QWORD *)v5 + 208);
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v6;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ()?);
  *v6 = v0;
  v6[1] = closure #2 in MarketplaceInfoDataProvider.prepare();
  __asm { BR              X8 }
}

uint64_t closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(*(_QWORD *)v0 + 40);
  v2 = *(_QWORD *)(*(_QWORD *)v0 + 24);
  v3 = *(_QWORD *)(*(_QWORD *)v0 + 32);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  return swift_task_switch();
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v3;

  v2[6] = a1;
  v2[7] = a2;
  v3 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace();
  v2[8] = v3;
  v2[9] = *(_QWORD *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v0;
  void (*v1)(uint64_t, _QWORD);
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v7;

  v1 = (void (*)(uint64_t, _QWORD))(*(uint64_t (**)(uint64_t))(**(_QWORD **)(v0 + 56) + 104))(v0 + 16);
  v3 = v2;
  *(_QWORD *)(v0 + 88) = v1;
  *(_QWORD *)(v0 + 96) = v2;
  v4 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(v3, 1, v4);
  *(_DWORD *)(v0 + 120) = v5;
  if (v5)
  {
    v1(v0 + 16, 0);
    **(_BYTE **)(v0 + 48) = *(_DWORD *)(v0 + 120) != 0;
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 104) = v7;
    *v7 = v0;
    v7[1] = closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare();
    return static AppDistributor.distributorPriorityList.getter();
  }
}

{
  uint64_t v0;
  uint64_t v1;
  int64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, _QWORD);
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(v0 + 112);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v14 = *(_QWORD *)(v0 + 72);
    v15 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    v3 = v15;
    v4 = (uint64_t *)(v1 + 40);
    do
    {
      v6 = *(v4 - 1);
      v5 = *v4;
      v7 = swift_task_alloc();
      *(_QWORD *)(v7 + 16) = v6;
      *(_QWORD *)(v7 + 24) = v5;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace and conformance Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E668], MEMORY[0x1E0D6E658]);
      swift_bridgeObjectRetain();
      static Message.with(_:)();
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v3 + 16) + 1, 1);
        v3 = v15;
      }
      v9 = *(_QWORD *)(v3 + 16);
      v8 = *(_QWORD *)(v3 + 24);
      if (v9 >= v8 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v8 > 1, v9 + 1, 1);
        v3 = v15;
      }
      v10 = *(_QWORD *)(v0 + 80);
      v11 = *(_QWORD *)(v0 + 64);
      *(_QWORD *)(v3 + 16) = v9 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 32))(v3+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v9, v10, v11);
      v15 = v3;
      v4 += 2;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v3 = MEMORY[0x1E0DEE9D8];
  }
  v12 = *(void (**)(uint64_t, _QWORD))(v0 + 88);
  MEMORY[0x1C3BBB65C](v3);
  v12(v0 + 16, 0);
  **(_BYTE **)(v0 + 48) = *(_DWORD *)(v0 + 120) != 0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 112) = a1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t MarketplaceInfoDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t MarketplaceInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "MarketplaceInfoDataProvider returning marketplace info", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  return (*(uint64_t (**)(void))(*(_QWORD *)v1 + 88))();
}

Swift::Void __swiftcall MarketplaceInfoDataProvider.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 1, 1, v4);
  (*(void (**)(char *))(*(_QWORD *)v0 + 96))(v3);
}

uint64_t MarketplaceInfoDataProvider.deinit()
{
  uint64_t v0;

  outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?(v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo);
  return v0;
}

uint64_t MarketplaceInfoDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of Apple_Parsec_Search_V2_MarketplaceInfo?(v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo);
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance MarketplaceInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance MarketplaceInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance MarketplaceInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 136))();
}

uint64_t protocol witness for DataProvider.reset() in conformance MarketplaceInfoDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 144))();
}

uint64_t partial apply for closure #1 in MarketplaceInfoDataProvider.prepare()()
{
  swift_beginAccess();
  return Apple_Parsec_Search_V2_MarketplaceInfo.isMarketplaceEligible.setter();
}

uint64_t sub_1C2414230()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #2 in MarketplaceInfoDataProvider.prepare()(a1, v4, v5, v6);
}

uint64_t sub_1C24142C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 88))();
}

uint64_t ObjC metadata update function for MarketplaceInfoDataProvider()
{
  return type metadata accessor for MarketplaceInfoDataProvider();
}

void type metadata completion function for MarketplaceInfoDataProvider()
{
  unint64_t v0;

  type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for MarketplaceInfoDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.marketplaceInfo.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.marketplaceInfo.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.marketplaceInfo.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))() & 1;
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 136);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of MarketplaceInfoDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

void type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?)
  {
    type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  }
}

uint64_t partial apply for closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;

  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()(a1, v1);
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #2 in MarketplaceInfoDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return MEMORY[0x1C3BBB644](v2, v1);
}

id PommesCacheInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void PommesCacheInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

void (*PommesCacheInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = PommesCacheInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

void PommesCacheInstrumentationUtil.mockStream.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = v2;

}

uint64_t PommesCacheInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesCacheInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t PommesCacheInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void PommesCacheInstrumentationUtil.logPommesCacheLookupStarted(requestId:pommesCandidateId:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  void *v11;
  id v12;
  char v13;
  id v14;
  uint64_t v15;
  os_log_type_t v16;
  uint8_t *v17;
  void *v18;
  NSObject *oslog;

  v4 = v3;
  v5 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v5)
  {
    v6 = v5;
    v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A190]), sel_init);
    if (v7)
    {
      v8 = v7;
      v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1A8]), sel_init);
      if (v9)
      {
        v10 = v9;
        objc_msgSend(v9, sel_setExists_, 1);
        objc_msgSend(v8, sel_setStartedOrChanged_, v10);
        objc_msgSend(v6, sel_setCacheLookupContext_, v8);
        v11 = (void *)objc_opt_self();
        swift_retain();
        v12 = objc_msgSend(v11, sel_processInfo);
        v13 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v13 & 1) != 0)
          v14 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v4 + 96))();
        else
          v14 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v18 = v14;
        swift_release();
        objc_msgSend(v18, sel_emitMessage_, v6);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v8 = v6;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v16, "Unable to log POMMES cache look up started event", v17, 2u);
    MEMORY[0x1C3BBFF64](v17, -1, -1);
  }

}

void PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)(a1, a2, a3, a4, (Class *)0x1E0D9A190, (Class *)0x1E0D9A1A0, (SEL *)&selRef_setCacheLookupContext_, "Unable to log POMMES cache look up failed event");
}

void PommesCacheInstrumentationUtil.logPommesCacheLookupEnded(requestId:pommesCandidateId:status:resultDomain:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  void *v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  void *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  id v22;
  char v23;
  id v24;
  void *v25;
  NSObject *oslog;

  v7 = v6;
  v11 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v11)
  {
    v12 = v11;
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A190]), sel_init);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A198]), sel_init);
      if (v15)
      {
        v16 = v15;
        objc_msgSend(v15, sel_setStatus_, a4);
        if (a6)
          v17 = (void *)MEMORY[0x1C3BBEC44](a5, a6);
        else
          v17 = 0;
        objc_msgSend(v16, sel_setResultDomain_, v17);

        objc_msgSend(v14, sel_setEnded_, v16);
        objc_msgSend(v12, sel_setCacheLookupContext_, v14);
        v21 = (void *)objc_opt_self();
        swift_retain();
        v22 = objc_msgSend(v21, sel_processInfo);
        v23 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v23 & 1) != 0)
          v24 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 96))();
        else
          v24 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v25 = v24;
        swift_release();
        objc_msgSend(v25, sel_emitMessage_, v12);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v14 = v12;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v19, "Unable to log POMMES cache look up ended event", v20, 2u);
    MEMORY[0x1C3BBFF64](v20, -1, -1);
  }

}

void PommesCacheInstrumentationUtil.logPommesCacheStoringStarted(requestId:pommesCandidateId:resultDomain:resultSizeInBytes:timeToLiveInSeconds:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  void *v19;
  void *v20;
  id v21;
  char v22;
  id v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  NSObject *oslog;

  v8 = v7;
  v13 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1D0]), sel_init);
    if (v15)
    {
      v16 = v15;
      v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1E8]), sel_init);
      if (v17)
      {
        v18 = v17;
        v19 = (void *)MEMORY[0x1C3BBEC44](a4, a5);
        objc_msgSend(v18, sel_setResultDomain_, v19);

        objc_msgSend(v18, sel_setResultSizeInBytes_, a6);
        objc_msgSend(v18, sel_setTimeToLiveInSeconds_, a7);
        objc_msgSend(v16, sel_setStartedOrChanged_, v18);
        objc_msgSend(v14, sel_setCacheStoringContext_, v16);
        v20 = (void *)objc_opt_self();
        swift_retain();
        v21 = objc_msgSend(v20, sel_processInfo);
        v22 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v22 & 1) != 0)
          v23 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v8 + 96))();
        else
          v23 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v27 = v23;
        swift_release();
        objc_msgSend(v27, sel_emitMessage_, v14);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v16 = v14;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v25, "Unable to log POMMES cache storing started event", v26, 2u);
    MEMORY[0x1C3BBFF64](v26, -1, -1);
  }

}

void PommesCacheInstrumentationUtil.logPommesCacheStoringFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)(a1, a2, a3, a4, (Class *)0x1E0D9A1D0, (Class *)0x1E0D9A1E0, (SEL *)&selRef_setCacheStoringContext_, "Unable to log POMMES cache storing failed event");
}

void PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, Class *a5, Class *a6, SEL *a7, const char *a8)
{
  uint64_t v8;
  uint64_t v13;
  void *v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  char v23;
  id v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  NSObject *oslog;

  v13 = v8;
  v15 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(objc_allocWithZone(*a6), sel_init);
      if (v19)
      {
        v20 = v19;
        objc_msgSend(v19, sel_setReason_, a4);
        objc_msgSend(v18, sel_setFailed_, v20);
        objc_msgSend(v16, *a7, v18);
        v21 = (void *)objc_opt_self();
        swift_retain();
        v22 = objc_msgSend(v21, sel_processInfo);
        v23 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v23 & 1) != 0)
          v24 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 96))();
        else
          v24 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v28 = v24;
        swift_release();
        objc_msgSend(v28, sel_emitMessage_, v16);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v18 = v16;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v26, a8, v27, 2u);
    MEMORY[0x1C3BBFF64](v27, -1, -1);
  }

}

void PommesCacheInstrumentationUtil.logPommesCacheStoringEnded(requestId:pommesCandidateId:status:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *oslog;

  v5 = v4;
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1D0]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1D8]), sel_init);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setStatus_, a4);
        objc_msgSend(v10, sel_setEnded_, v12);
        objc_msgSend(v8, sel_setCacheStoringContext_, v10);
        v13 = (void *)objc_opt_self();
        swift_retain();
        v14 = objc_msgSend(v13, sel_processInfo);
        v15 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v15 & 1) != 0)
          v16 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 96))();
        else
          v16 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v18, "Unable to log POMMES cache storing ended event", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

}

void PommesCacheInstrumentationUtil.logPommesCacheInvalidationStarted(requestId:pommesCandidateId:reason:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *oslog;

  v5 = v4;
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A170]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A188]), sel_init);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setReason_, a4);
        objc_msgSend(v10, sel_setStartedOrChanged_, v12);
        objc_msgSend(v8, sel_setCacheInvalidationContext_, v10);
        v13 = (void *)objc_opt_self();
        swift_retain();
        v14 = objc_msgSend(v13, sel_processInfo);
        v15 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v15 & 1) != 0)
          v16 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 96))();
        else
          v16 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v18, "Unable to log POMMES cache invalidation started event", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

}

void PommesCacheInstrumentationUtil.logPommesCacheInvalidationFailed(requestId:pommesCandidateId:reason:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)(a1, a2, a3, a4, (Class *)0x1E0D9A170, (Class *)0x1E0D9A180, (SEL *)&selRef_setCacheInvalidationContext_, "Unable to log POMMES cache invalidation failed event");
}

void PommesCacheInstrumentationUtil.logPommesCacheInvalidationEnded(requestId:pommesCandidateId:numberOfCacheKeysInvalidated:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void *v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *oslog;

  v5 = v4;
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    v8 = v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A170]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A178]), sel_init);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setNumberOfCacheKeysInvalidated_, a4);
        objc_msgSend(v10, sel_setEnded_, v12);
        objc_msgSend(v8, sel_setCacheInvalidationContext_, v10);
        v13 = (void *)objc_opt_self();
        swift_retain();
        v14 = objc_msgSend(v13, sel_processInfo);
        v15 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v15 & 1) != 0)
          v16 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 96))();
        else
          v16 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v18, "Unable to log POMMES cache invalidation ended event", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

}

uint64_t PommesCacheInstrumentationUtil.logPommesCacheMaintenanceStarted(secondsSinceLastMaintenanceStarted:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(0, 0, (uint64_t)v6);
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PommesCandidateId?);
  if (v8)
  {
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1B0]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1C8]), sel_init);
      if (v11)
      {
        v12 = v11;
        if ((a1 & 0x100000000) == 0)
          objc_msgSend(v11, sel_setTimeSinceLastMaintenanceInSeconds_, a1);
        objc_msgSend(v10, sel_setStartedOrChanged_, v12);
        objc_msgSend(v8, sel_setCacheMaintenanceContext_, v10);
        UUID.init()();
        PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)((uint64_t)v8);

        v13 = type metadata accessor for UUID();
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 0, 1, v13);
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v18 = 0;
    _os_log_impl(&dword_1C2356000, v16, v17, "Unable to log POMMESCacheMaintenanceStarted event", v18, 2u);
    MEMORY[0x1C3BBFF64](v18, -1, -1);
  }

  v19 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a2, 1, 1, v19);
}

void PommesCacheInstrumentationUtil.logPommesCacheMaintenanceEnded(isolatedStreamUUID:numberOfCacheEntriesUpdated:totalCacheEntries:secondsSinceMaintenanceStarted:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  NSObject *v16;
  NSObject *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(0, 0, (uint64_t)v11);
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
  if (v13)
  {
    v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1B0]), sel_init);
    if (v14)
    {
      v15 = v14;
      v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1B8]), sel_init);
      if (v16)
      {
        v17 = v16;
        -[NSObject setNumberOfEntriesUpdated:](v16, sel_setNumberOfEntriesUpdated_, a2);
        -[NSObject setTotalCacheEntries:](v17, sel_setTotalCacheEntries_, a3);
        -[NSObject setTimeSinceMaintenanceStartedInSeconds:](v17, sel_setTimeSinceMaintenanceStartedInSeconds_, a4);
        -[NSObject setReason:](v17, sel_setReason_, a5);
        objc_msgSend(v15, sel_setEnded_, v17);
        objc_msgSend(v13, sel_setCacheMaintenanceContext_, v15);
        PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)((uint64_t)v13);

        goto LABEL_12;
      }

    }
    else
    {
      v15 = v13;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  v17 = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v17, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1C2356000, v17, v19, "Unable to log POMMESCacheMaintenanceEnded event", v20, 2u);
    MEMORY[0x1C3BBFF64](v20, -1, -1);
  }
LABEL_12:

}

void PommesCacheInstrumentationUtil.logPommesCacheMaintenanceFailed(isolatedStreamUUID:reason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  id v8;
  void *v9;
  NSObject *v10;
  NSObject *v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(0, 0, (uint64_t)v5);
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for PommesCandidateId?);
  if (v7)
  {
    v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1B0]), sel_init);
    if (v8)
    {
      v9 = v8;
      v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1C0]), sel_init);
      if (v10)
      {
        v11 = v10;
        -[NSObject setReason:](v10, sel_setReason_, a2);
        objc_msgSend(v9, sel_setFailed_, v11);
        objc_msgSend(v7, sel_setCacheMaintenanceContext_, v9);
        PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)((uint64_t)v7);

        goto LABEL_12;
      }

    }
    else
    {
      v9 = v7;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  v11 = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v11, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2356000, v11, v13, "Unable to log POMMESCacheMaintenanceFailed event", v14, 2u);
    MEMORY[0x1C3BBFF64](v14, -1, -1);
  }
LABEL_12:

}

void PommesCacheInstrumentationUtil.emitFromIsolatedStream(message:uuid:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v4;
  id v5;
  char v6;
  id v7;
  char v8;
  void *v9;
  void *v10;
  id v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  os_log_t oslog;

  v2 = v1;
  v4 = (void *)objc_opt_self();
  v5 = objc_msgSend(v4, sel_processInfo);
  v6 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v6 & 1) != 0)
  {
    oslog = (os_log_t)(*(uint64_t (**)(void))(*(_QWORD *)v2 + 96))();
    (*(void (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & (uint64_t)oslog->isa) + 0x78))(a1);
    goto LABEL_13;
  }
  swift_retain();
  v7 = objc_msgSend(v4, sel_processInfo);
  v8 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v8 & 1) == 0)
  {
    v11 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
    swift_release();
    objc_opt_self();
    v10 = (void *)swift_dynamicCastObjCClass();
    if (!v10)
    {
      swift_unknownObjectRelease();
      goto LABEL_9;
    }
LABEL_7:
    oslog = (os_log_t)UUID._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v10, sel_emitMessage_isolatedStreamUUID_, a1);

    goto LABEL_13;
  }
  v9 = (void *)(*(uint64_t (**)(void))(*(_QWORD *)v2 + 96))();
  swift_release();
  objc_opt_self();
  v10 = (void *)swift_dynamicCastObjCClass();
  if (v10)
    goto LABEL_7;

LABEL_9:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  oslog = (os_log_t)Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v13, "PegasusCacheManager : Default stream is not an instance of SiriAnalyticsClientMessageStream", v14, 2u);
    MEMORY[0x1C3BBFF64](v14, -1, -1);
  }
LABEL_13:

}

uint64_t PommesCacheInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PommesCacheInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance PommesCacheInstrumentationUtil()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t protocol witness for Emittable.analyticsComponentIdGenerator.getter in conformance PommesCacheInstrumentationUtil()
{
  return swift_retain();
}

uint64_t sub_1C2416044@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2416074(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PommesCacheInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesCacheInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.mockStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.mockStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheLookupStarted(requestId:pommesCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheLookupFailed(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheLookupEnded(requestId:pommesCandidateId:status:resultDomain:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheStoringStarted(requestId:pommesCandidateId:resultDomain:resultSizeInBytes:timeToLiveInSeconds:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheStoringFailed(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheStoringEnded(requestId:pommesCandidateId:status:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheInvalidationStarted(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheInvalidationFailed(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheInvalidationEnded(requestId:pommesCandidateId:numberOfCacheKeysInvalidated:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheMaintenanceStarted(secondsSinceLastMaintenanceStarted:)(unint64_t a1)
{
  uint64_t v1;

  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)v1 + 200))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheMaintenanceEnded(isolatedStreamUUID:numberOfCacheEntriesUpdated:totalCacheEntries:secondsSinceMaintenanceStarted:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PommesCacheInstrumentationUtil.logPommesCacheMaintenanceFailed(isolatedStreamUUID:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t Collection<>.merge<A>(with:by:isAscending:)(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  BOOL v24;
  void (*v25)(_BYTE *, _QWORD);
  void (*v26)(_BYTE *, _QWORD);
  uint64_t v27;
  char *v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(_BYTE *, _QWORD);
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  char *v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  void (*v46)(_BYTE *, _QWORD);
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD v52[2];
  char *v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t i;
  _BYTE v64[32];
  uint64_t v65;
  uint64_t v66;

  v7 = v6;
  v59 = a6;
  v60 = a3;
  v10 = a1;
  v57 = *(_QWORD *)(*a2 + *MEMORY[0x1E0DEE2A8] + 8);
  v58 = a2;
  v56 = *(_QWORD *)(v57 - 8);
  v11 = MEMORY[0x1E0C80A78](a1);
  v55 = (char *)v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v54 = (char *)v52 - v14;
  v16 = *v15;
  v62 = *(_QWORD *)(*v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v13);
  v53 = (char *)v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)v52 - v19;
  v21 = 0;
  v22 = 0;
  v66 = Array.init()();
  v61 = v10;
  v52[1] = a5;
LABEL_3:
  while (2)
  {
    for (i = v21; ; v21 = i)
    {
      while (1)
      {
        if (v22 >= dispatch thunk of Collection.count.getter() && v21 >= MEMORY[0x1C3BBEEFC](v10, v16))
          return v66;
        if (v22 == dispatch thunk of Collection.count.getter())
        {
          Array.subscript.getter();
          type metadata accessor for Array();
          result = Array.append(_:)();
          v24 = __OFADD__(v21++, 1);
          if (!v24)
            goto LABEL_3;
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        if (v21 != MEMORY[0x1C3BBEEFC](v10, v16))
          break;
        v65 = v22;
        v25 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        (*(void (**)(char *))(v62 + 16))(v20);
        v25(v64, 0);
        type metadata accessor for Array();
        result = Array.append(_:)();
        v24 = __OFADD__(v22++, 1);
        if (v24)
        {
          __break(1u);
LABEL_24:
          __break(1u);
LABEL_25:
          __break(1u);
          goto LABEL_26;
        }
      }
      if ((v60 & 1) != 0)
      {
        v65 = v22;
        v26 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
        v27 = v62;
        v52[0] = *(_QWORD *)(v62 + 16);
        ((void (*)(char *))v52[0])(v20);
        v26(v64, 0);
        v28 = v54;
        v29 = a4;
        swift_getAtKeyPath();
        v30 = *(void (**)(char *, uint64_t))(v27 + 8);
        v30(v20, v16);
        v31 = v53;
        Array.subscript.getter();
        v32 = v7;
        v33 = v55;
        swift_getAtKeyPath();
        v30(v31, v16);
        v34 = v57;
        LOBYTE(v31) = dispatch thunk of static Comparable.< infix(_:_:)();
        v35 = *(void (**)(char *, uint64_t))(v56 + 8);
        v35(v33, v34);
        v35(v28, v34);
        if ((v31 & 1) != 0)
        {
          v65 = v22;
          a4 = v29;
          v36 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
          ((void (*)(char *))v52[0])(v20);
          v36(v64, 0);
          type metadata accessor for Array();
          result = Array.append(_:)();
          v24 = __OFADD__(v22++, 1);
          if (v24)
            goto LABEL_24;
          goto LABEL_16;
        }
        v47 = v29;
        v48 = i;
        v10 = v61;
        Array.subscript.getter();
        type metadata accessor for Array();
        v49 = v20;
        result = Array.append(_:)();
        v50 = v48 + 1;
        if (!__OFADD__(v48, 1))
          goto LABEL_21;
LABEL_27:
        __break(1u);
        goto LABEL_28;
      }
      v65 = v22;
      v37 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      v38 = v62;
      v52[0] = *(_QWORD *)(v62 + 16);
      ((void (*)(char *))v52[0])(v20);
      v37(v64, 0);
      v39 = v54;
      v40 = a4;
      swift_getAtKeyPath();
      v41 = *(void (**)(char *, uint64_t))(v38 + 8);
      v41(v20, v16);
      v42 = v53;
      Array.subscript.getter();
      v32 = v7;
      v43 = v55;
      swift_getAtKeyPath();
      v41(v42, v16);
      v44 = v57;
      LOBYTE(v41) = dispatch thunk of static Comparable.< infix(_:_:)();
      v45 = *(void (**)(char *, uint64_t))(v56 + 8);
      v45(v43, v44);
      v45(v39, v44);
      if ((v41 & 1) != 0)
        break;
      v65 = v22;
      a4 = v40;
      v46 = (void (*)(_BYTE *, _QWORD))dispatch thunk of Collection.subscript.read();
      ((void (*)(char *))v52[0])(v20);
      v46(v64, 0);
      type metadata accessor for Array();
      result = Array.append(_:)();
      v24 = __OFADD__(v22++, 1);
      if (v24)
        goto LABEL_25;
LABEL_16:
      v7 = v32;
      v10 = v61;
    }
    v47 = v40;
    v51 = i;
    v10 = v61;
    Array.subscript.getter();
    type metadata accessor for Array();
    v49 = v20;
    result = Array.append(_:)();
    v50 = v51 + 1;
    if (!__OFADD__(v51, 1))
    {
LABEL_21:
      v7 = v32;
      a4 = v47;
      v20 = v49;
      v21 = v50;
      continue;
    }
    break;
  }
LABEL_28:
  __break(1u);
  return result;
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v21;

  v21 = swift_allocObject();
  PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19);
  return v21;
}

uint64_t PommesRequestContext.CodingKeys.stringValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2416894 + 4 * byte_1C24FD8D0[a1]))(0x6E61747369737361, 0xEB00000000644974);
}

uint64_t sub_1C2416894()
{
  return 0x496E6F6973736573;
}

uint64_t sub_1C24168C4()
{
  return 0x756F536F69647561;
}

unint64_t sub_1C24168E4()
{
  return 0xD000000000000010;
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance PommesRequestContext.CodingKeys()
{
  unsigned __int8 *v0;

  return PommesRequestContext.CodingKeys.stringValue.getter(*v0);
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance PommesRequestContext.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = specialized PommesRequestContext.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CodingKey.intValue.getter in conformance PommesRequestContext.CodingKeys()
{
  return 0;
}

void protocol witness for CodingKey.init(intValue:) in conformance PommesRequestContext.CodingKeys(_BYTE *a1@<X8>)
{
  *a1 = 14;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance PommesRequestContext.CodingKeys()
{
  lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();
  return CodingKey.description.getter();
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance PommesRequestContext.CodingKeys()
{
  lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();
  return CodingKey.debugDescription.getter();
}

uint64_t PommesRequestContext.assistantId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesRequestContext.sessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  v4 = type metadata accessor for UUID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PommesRequestContext.requestId.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesRequestContext.audioSource.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
}

uint64_t PommesRequestContext.audioDestination.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
}

uint64_t PommesRequestContext.responseMode.getter()
{
  return PommesRequestContext.audioSource.getter(&OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
}

uint64_t PommesRequestContext.audioSource.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v1 + *a1);
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t PommesRequestContext.isEyesFree.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree);
}

uint64_t PommesRequestContext.isVoiceTriggerEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled);
}

uint64_t PommesRequestContext.isTextToSpeechEnabled.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled);
}

uint64_t PommesRequestContext.isTriggerlessFollowup.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup);
}

uint64_t PommesRequestContext.isPushOffRequest.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest);
}

uint64_t PommesRequestContext.bargeInModes.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesRequestContext.approximatePreviousTTSInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of MediaUserStateCenter?(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval, a1, &demangling cache variable for type metadata for DateInterval?);
}

uint64_t PommesRequestContext.deviceRestrictions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:)(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v25 = a4;
  v26 = a5;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v25 - v17;
  v19 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v19((char *)&v25 - v17, a3, v12);
  v19(v16, v18, v12);
  v20 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v11, 1, 1, v20);
  BYTE4(v24) = 0;
  LODWORD(v24) = 0;
  v21 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, char *, _QWORD))(v5 + 200))(a1, a2, v16, v25, v26, 0, 0, 0, 0, 0, 0, v24, MEMORY[0x1E0DEE9D8], v11, MEMORY[0x1E0DEE9D8]);
  v22 = *(void (**)(char *, uint64_t))(v13 + 8);
  v22(v18, v12);
  v22(a3, v12);
  return v21;
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v24 = a5;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for UUID();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, a3, v15);
  v19 = type metadata accessor for DateInterval();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v14, 1, 1, v19);
  BYTE4(v22) = 0;
  LODWORD(v22) = 0;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, char *, uint64_t))(v6 + 200))(a1, a2, v18, a4, v24, 0, 0, 0, 0, 0, 0, v22, MEMORY[0x1E0DEE9D8], v14, a6);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a3, v15);
  return v20;
}

uint64_t PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v21;

  v21 = swift_allocObject();
  PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18);
  return v21;
}

uint64_t PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  uint64_t v19;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v24 = v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  *(_QWORD *)(v19 + 16) = a1;
  *(_QWORD *)(v19 + 24) = a2;
  v25 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a3, v25);
  v26 = (_QWORD *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  *v26 = a4;
  v26[1] = a5;
  v27 = (_QWORD *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
  *v27 = a6;
  v27[1] = a7;
  v28 = (_QWORD *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
  *v28 = a8;
  v28[1] = a9;
  v29 = (_QWORD *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
  *v29 = a10;
  v29[1] = a11;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree) = a12;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled) = a13;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled) = a14;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest) = a15;
  *(_BYTE *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup) = a16;
  *(_QWORD *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes) = a17;
  outlined init with take of DateInterval?(a18, v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval);
  *(_QWORD *)(v19 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions) = a19;
  return v19;
}

uint64_t PommesRequestContext.__allocating_init(from:)(_QWORD *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  PommesRequestContext.init(from:)(a1);
  return v2;
}

uint64_t PommesRequestContext.init(from:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedDecodingContainer<PommesRequestContext.CodingKeys>);
  v9 = *(_QWORD *)(v37 - 8);
  MEMORY[0x1E0C80A78](v37);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = a1[3];
  v38 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v12);
  lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();
  v36 = v11;
  v13 = v39;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v13)
  {
    v32 = v40;
    v15 = (uint64_t)v38;
    type metadata accessor for PommesRequestContext();
    swift_deallocPartialClassInstance();
    v33 = v15;
  }
  else
  {
    v34 = v4;
    v35 = v6;
    v39 = v5;
    LOBYTE(v42) = 0;
    v14 = KeyedDecodingContainer.decode(_:forKey:)();
    v17 = v40;
    *(_QWORD *)(v40 + 16) = v14;
    *(_QWORD *)(v17 + 24) = v18;
    LOBYTE(v42) = 1;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09E0]);
    v19 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(uint64_t, char *, uint64_t))(v35 + 32))(v17 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId, v8, v19);
    LOBYTE(v42) = 2;
    v20 = KeyedDecodingContainer.decode(_:forKey:)();
    v21 = (uint64_t *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
    *v21 = v20;
    v21[1] = v22;
    LOBYTE(v42) = 3;
    v23 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v24 = (uint64_t *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
    *v24 = v23;
    v24[1] = v25;
    LOBYTE(v42) = 4;
    v26 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v27 = (uint64_t *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
    *v27 = v26;
    v27[1] = v28;
    LOBYTE(v42) = 5;
    v29 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    v30 = (uint64_t *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
    *v30 = v29;
    v30[1] = v31;
    LOBYTE(v42) = 6;
    *(_BYTE *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v42) = 7;
    *(_BYTE *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v42) = 8;
    *(_BYTE *)(v40 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v42) = 9;
    *(_BYTE *)(v40 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    LOBYTE(v42) = 10;
    *(_BYTE *)(v40 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    v41 = 11;
    lazy protocol witness table accessor for type [String] and conformance <A> [A]((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x1E0DEA9A0], MEMORY[0x1E0DEAF40]);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_QWORD *)(v40 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes) = v42;
    type metadata accessor for DateInterval();
    LOBYTE(v42) = 12;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE600]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    outlined init with take of DateInterval?((uint64_t)v34, v40 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval);
    v41 = 13;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v36, v37);
    v32 = v40;
    *(_QWORD *)(v40 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions) = v42;
    v33 = (uint64_t)v38;
  }
  __swift_destroy_boxed_opaque_existential_1(v33);
  return v32;
}

unint64_t lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesRequestContext.CodingKeys, &unk_1E7C01630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesRequestContext.CodingKeys, &unk_1E7C01630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesRequestContext.CodingKeys, &unk_1E7C01630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys;
  if (!lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesRequestContext.CodingKeys, &unk_1E7C01630);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys);
  }
  return result;
}

uint64_t PommesRequestContext.__allocating_init(requestContextMessage:)(void *a1)
{
  uint64_t v2;

  v2 = specialized PommesRequestContext.__allocating_init(requestContextMessage:)(a1);

  return v2;
}

uint64_t PommesRequestContext.__allocating_init(requestContextData:assistantId:sessionId:requestId:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  _BYTE v28[12];
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v36 = a4;
  v40 = a5;
  v41 = a6;
  v6 = a4;
  v38 = a2;
  v39 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for UUID();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v28[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v12 + 16))(v14, v6, v11);
  v15 = RequestContextData.audioSource.getter();
  v34 = v16;
  v35 = v15;
  v17 = RequestContextData.audioDestination.getter();
  v32 = v18;
  v33 = v17;
  v19 = RequestContextData.responseMode.getter();
  v30 = v20;
  v31 = v19;
  v29 = RequestContextData.isEyesFree.getter();
  v21 = RequestContextData.isVoiceTriggerEnabled.getter();
  LOBYTE(v6) = RequestContextData.isTextToSpeechEnabled.getter();
  v22 = RequestContextData.isTriggerlessFollowup.getter();
  v23 = RequestContextData.bargeInModes.getter();
  RequestContextData.approximatePreviousTTSInterval.getter();
  v24 = RequestContextData.deviceRestrictions.getter();
  BYTE4(v27) = v22 & 1;
  BYTE3(v27) = 0;
  BYTE2(v27) = v6 & 1;
  BYTE1(v27) = v21 & 1;
  LOBYTE(v27) = v29 & 1;
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _BYTE *, uint64_t))(v37 + 200))(v38, v39, v14, v40, v41, v35, v34, v33, v32, v31, v30, v27, v23, v10, v24);

  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v36, v11);
  return v25;
}

uint64_t PommesRequestContext.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for KeyedEncodingContainer<PommesRequestContext.CodingKeys>);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type PommesRequestContext.CodingKeys and conformance PommesRequestContext.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    type metadata accessor for UUID();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09B8]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes);
    v11 = 11;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
    lazy protocol witness table accessor for type [String] and conformance <A> [A](&lazy protocol witness table cache variable for type [String] and conformance <A> [A], MEMORY[0x1E0DEA970], MEMORY[0x1E0DEAF10]);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 12;
    type metadata accessor for DateInterval();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type DateInterval and conformance DateInterval, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAE5D0], MEMORY[0x1E0CAE5E8]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v12 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions);
    v11 = 13;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t PommesRequestContext.mappedInteractionType(inputOrigin:previousInteractionType:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  _DWORD v32[2];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;

  v42 = a3;
  v43 = a2;
  v37 = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v3);
  v35 = (uint64_t)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for InputOrigin();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  MEMORY[0x1E0C80A78](v5);
  v41 = (char *)v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for InteractionTypeHelper();
  v39 = *(_QWORD *)(v7 - 8);
  v40 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioDestination?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioSource?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for DeviceRestrictions();
  v17 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DA8108];
  v18 = *(_QWORD *)(v16 - 8);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v32 - v22;
  swift_bridgeObjectRetain();
  DeviceRestrictions.init(aceValue:)();
  static DeviceRestrictions.starkMode.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, v17, MEMORY[0x1E0DA8110]);
  v32[1] = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v24 = *(void (**)(char *, uint64_t))(v18 + 8);
  v24(v21, v16);
  static DeviceRestrictions.carDNDMode.getter();
  v32[0] = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v24(v21, v16);
  swift_bridgeObjectRetain();
  v36 = v15;
  AudioSource.init(aceValue:)();
  swift_bridgeObjectRetain();
  v38 = v12;
  v26 = v33;
  v25 = v34;
  AudioDestination.init(aceValue:)();
  static InteractionTypeHelper.shared.getter();
  v27 = v35;
  outlined init with copy of MediaUserStateCenter?(v37, v35, &demangling cache variable for type metadata for InputOrigin?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v27, 1, v25) == 1)
  {
    v28 = v41;
    (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v41, *MEMORY[0x1E0DA7CE0], v25);
    outlined destroy of MediaUserStateCenter?(v27, &demangling cache variable for type metadata for InputOrigin?);
  }
  else
  {
    v28 = v41;
    (*(void (**)(char *, uint64_t, uint64_t))(v26 + 32))(v41, v27, v25);
  }
  v29 = (uint64_t)v36;
  v30 = (uint64_t)v38;
  InteractionTypeHelper.mapInteractionType(inputOrigin:isEyesFree:isDeviceInStarkMode:isDeviceInCarDND:audioSource:audioDestination:previousInteractionType:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v40);
  outlined destroy of MediaUserStateCenter?(v30, &demangling cache variable for type metadata for AudioDestination?);
  outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for AudioSource?);
  return ((uint64_t (*)(char *, uint64_t))v24)(v23, v16);
}

uint64_t PommesRequestContext.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  Swift::String v5;
  uint64_t v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  uint64_t v12;
  void *v13;
  Swift::String v14;
  Swift::String v15;
  uint64_t v16;
  Swift::String v17;
  Swift::String v18;
  uint64_t v19;
  Swift::String v20;
  Swift::String v21;
  uint64_t v22;
  Swift::String v23;
  Swift::String v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  Swift::String v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  Swift::String v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  Swift::String v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  Swift::String v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  Swift::String v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  Swift::String v50;
  Swift::String v51;
  Swift::String v52;
  Swift::String v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  void *v57;
  Swift::String v58;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = 0;
  v63 = 0xE000000000000000;
  _StringGuts.grow(_:)(302);
  v5._countAndFlagsBits = 0x6E61747369737361;
  v5._object = (void *)0xEE0022203A644974;
  String.append(_:)(v5);
  v6 = *(_QWORD *)(v0 + 16);
  v7 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x6973736573202C22;
  v9._object = (void *)0xEE00203A64496E6FLL;
  String.append(_:)(v9);
  type metadata accessor for UUID();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x736575716572202CLL;
  v11._object = (void *)0xED0000203A644974;
  String.append(_:)(v11);
  v12 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  v13 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId + 8);
  swift_bridgeObjectRetain();
  v14._countAndFlagsBits = v12;
  v14._object = v13;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0x536F69647561202CLL;
  v15._object = (void *)0xEF203A656372756FLL;
  String.append(_:)(v15);
  v16 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource + 8);
  v60 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
  v61 = v16;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v17._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0xD000000000000015;
  v18._object = (void *)0x80000001C2504DF0;
  String.append(_:)(v18);
  v19 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination + 8);
  v60 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
  v61 = v19;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0xD000000000000012;
  v21._object = (void *)0x80000001C2504E10;
  String.append(_:)(v21);
  v22 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode + 8);
  v60 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
  v61 = v22;
  swift_bridgeObjectRetain();
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 0x6579457369202C22;
  v24._object = (void *)0xEF203A6565724673;
  String.append(_:)(v24);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree))
    v25 = 1702195828;
  else
    v25 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree))
    v26 = 0xE400000000000000;
  else
    v26 = 0xE500000000000000;
  v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x80000001C2504E30;
  v28._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v28);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled))
    v29 = 1702195828;
  else
    v29 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled))
    v30 = 0xE400000000000000;
  else
    v30 = 0xE500000000000000;
  v31 = v30;
  String.append(_:)(*(Swift::String *)&v29);
  swift_bridgeObjectRelease();
  v32._object = (void *)0x80000001C2504E50;
  v32._countAndFlagsBits = 0xD000000000000019;
  String.append(_:)(v32);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled))
    v33 = 1702195828;
  else
    v33 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled))
    v34 = 0xE400000000000000;
  else
    v34 = 0xE500000000000000;
  v35 = v34;
  String.append(_:)(*(Swift::String *)&v33);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0xD000000000000018;
  v36._object = (void *)0x80000001C2504E70;
  String.append(_:)(v36);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup))
    v37 = 1702195828;
  else
    v37 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup))
    v38 = 0xE400000000000000;
  else
    v38 = 0xE500000000000000;
  v39 = v38;
  String.append(_:)(*(Swift::String *)&v37);
  swift_bridgeObjectRelease();
  v40._countAndFlagsBits = 0xD000000000000013;
  v40._object = (void *)0x80000001C2504E90;
  String.append(_:)(v40);
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest))
    v41 = 1702195828;
  else
    v41 = 0x65736C6166;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest))
    v42 = 0xE400000000000000;
  else
    v42 = 0xE500000000000000;
  v43 = v42;
  String.append(_:)(*(Swift::String *)&v41);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0x6E4965677261620ALL;
  v44._object = (void *)0xEF203A7365646F4DLL;
  String.append(_:)(v44);
  v45 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes);
  swift_bridgeObjectRetain();
  v46 = MEMORY[0x1E0DEA968];
  v47 = MEMORY[0x1C3BBEE9C](v45, MEMORY[0x1E0DEA968]);
  v49 = v48;
  swift_bridgeObjectRelease();
  v50._countAndFlagsBits = v47;
  v50._object = v49;
  String.append(_:)(v50);
  swift_bridgeObjectRelease();
  v51._countAndFlagsBits = 0xD000000000000022;
  v51._object = (void *)0x80000001C2504EB0;
  String.append(_:)(v51);
  outlined init with copy of MediaUserStateCenter?(v1 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval, (uint64_t)v4, &demangling cache variable for type metadata for DateInterval?);
  v52._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v52);
  swift_bridgeObjectRelease();
  v53._countAndFlagsBits = 0xD000000000000016;
  v53._object = (void *)0x80000001C2504EE0;
  String.append(_:)(v53);
  v54 = swift_bridgeObjectRetain();
  v55 = MEMORY[0x1C3BBEE9C](v54, v46);
  v57 = v56;
  swift_bridgeObjectRelease();
  v58._countAndFlagsBits = v55;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t protocol witness for Decodable.init(from:) in conformance PommesRequestContext@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = (*(uint64_t (**)(void))(v1 + 208))();
  if (!v2)
    *a1 = result;
  return result;
}

uint64_t protocol witness for Encodable.encode(to:) in conformance PommesRequestContext()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 216))();
}

uint64_t specialized PommesRequestContext.__allocating_init(requestContextMessage:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  id v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MessageBase.assistantId.getter();
  v36 = v9;
  v37 = v8;
  v10 = a1;
  SessionMessageBase.sessionId.getter();

  v11 = v10;
  v12 = RequestMessageBase.requestId.getter();
  v34 = v13;
  v35 = v12;

  v14 = RequestContextMessage.audioSource.getter();
  v32 = v15;
  v33 = v14;
  v16 = RequestContextMessage.audioDestination.getter();
  v30 = v17;
  v31 = v16;
  v18 = RequestContextMessage.responseMode.getter();
  v20 = v19;
  v21 = RequestContextMessage.isEyesFree.getter();
  v22 = RequestContextMessage.isVoiceTriggerEnabled.getter();
  v23 = RequestContextMessage.isTextToSpeechEnabled.getter();
  v24 = RequestContextMessage.isTriggerlessFollowup.getter();
  v25 = RequestContextMessage.bargeInModes.getter();
  RequestContextMessage.approximatePreviousTTSInterval.getter();
  v26 = RequestContextMessage.deviceRestrictions.getter();
  BYTE4(v28) = v24 & 1;
  BYTE3(v28) = 0;
  BYTE2(v28) = v23 & 1;
  BYTE1(v28) = v22 & 1;
  LOBYTE(v28) = v21 & 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))(v38 + 200))(v37, v36, v7, v35, v34, v33, v32, v31, v30, v18, v20, v28, v25, v4, v26);
}

uint64_t lazy protocol witness table accessor for type [String] and conformance <A> [A](unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  result = *a1;
  if (!result)
  {
    v7 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    v8 = a2;
    result = MEMORY[0x1C3BBFE74](a3, v7, &v8);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t ObjC metadata update function for PommesRequestContext()
{
  return type metadata accessor for PommesRequestContext();
}

void type metadata completion function for PommesRequestContext()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for DateInterval?();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for PommesRequestContext()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 192))();
}

uint64_t dispatch thunk of PommesRequestContext.__allocating_init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PommesRequestContext.__allocating_init(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PommesRequestContext.encode(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PommesRequestContext.responseModeInteractionType()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PommesRequestContext.mappedInteractionType(inputOrigin:previousInteractionType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PommesRequestContext.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

void type metadata accessor for DateInterval?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for DateInterval?)
  {
    type metadata accessor for DateInterval();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DateInterval?);
  }
}

uint64_t getEnumTagSinglePayload for PommesRequestContext.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF3)
    goto LABEL_17;
  if (a2 + 13 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 13) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 13;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 13;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 13;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xE;
  v8 = v6 - 14;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesRequestContext.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 13 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 13) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF3)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF2)
    return ((uint64_t (*)(void))((char *)&loc_1C2418D9C + 4 * byte_1C24FD8E3[v4]))();
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1C2418DD0 + 4 * byte_1C24FD8DE[v4]))();
}

uint64_t sub_1C2418DD0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2418DD8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2418DE0);
  return result;
}

uint64_t sub_1C2418DEC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2418DF4);
  *(_BYTE *)result = a2 + 13;
  return result;
}

uint64_t sub_1C2418DF8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2418E00(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *type metadata accessor for PommesRequestContext.CodingKeys()
{
  return &unk_1E7C01630;
}

uint64_t specialized PommesRequestContext.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6E61747369737361 && a2 == 0xEB00000000644974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x496E6F6973736573 && a2 == 0xE900000000000064
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4974736575716572 && a2 == 0xE900000000000064
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x756F536F69647561 && a2 == 0xEB00000000656372
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C2504F60
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65736E6F70736572 && a2 == 0xEC00000065646F4DLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7246736579457369 && a2 == 0xEA00000000006565
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C2504F80
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C2504FA0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001C2504FC0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001C2504FE0
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x4D6E496567726162 && a2 == 0xEC0000007365646FLL
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001ELL && a2 == 0x80000001C2505000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001C2505020)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 13;
    else
      return 14;
  }
}

uint64_t ClassicFollowupPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PommesSearchRequest.hadPreviousClassicTurn.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint8_t *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  const char *v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  uint8_t *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  char *v59;
  uint64_t v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  const char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;

  v1 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v1);
  v77 = (char *)&v69 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v3 = MEMORY[0x1E0C80A78](v71);
  v70 = (uint64_t)&v69 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v73 = (uint64_t)&v69 - v6;
  MEMORY[0x1E0C80A78](v5);
  v76 = (uint64_t)&v69 - v7;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1E0C80A78](v8);
  v72 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v74 = *(_QWORD *)(v10 - 8);
  v75 = v10;
  MEMORY[0x1E0C80A78](v10);
  v69 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PommesContext.Source();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v69 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PommesContext();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = v1;
  v24 = *(int *)(v1 + 40);
  v25 = v0;
  v26 = v0 + v24;
  v28 = v27;
  outlined init with copy of MediaUserStateCenter?(v26, (uint64_t)v18, &demangling cache variable for type metadata for PommesContext?);
  v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48);
  v78 = v28;
  if (v29(v18, 1, v28) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for PommesContext?);
    v30 = v76;
    outlined init with copy of MediaUserStateCenter?(v25 + *(int *)(v23 + 56), v76, &demangling cache variable for type metadata for InputOrigin?);
    v31 = type metadata accessor for InputOrigin();
    v32 = *(_QWORD *)(v31 - 8);
    v33 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31);
    v34 = (uint64_t)v77;
    if (v33 != 1)
    {
      v35 = v73;
      outlined init with copy of MediaUserStateCenter?(v30, v73, &demangling cache variable for type metadata for InputOrigin?);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(v32 + 88))(v35, v31) == *MEMORY[0x1E0DA7D18])
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v36 = type metadata accessor for Logger();
        __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
        v37 = Logger.logObject.getter();
        v38 = static os_log_type_t.debug.getter();
        if (!os_log_type_enabled(v37, v38))
          goto LABEL_28;
        v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_1C2356000, v37, v38, "Had previous Classic turn? FALSE - no PommesContext, but inputOrigin was .serverGenerated, indicating followup from fully on-device previous turn", v39, 2u);
        v40 = v39;
        goto LABEL_26;
      }
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v35, v31);
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
    outlined init with copy of PommesSearchRequest(v25, v34);
    v37 = Logger.logObject.getter();
    v53 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v37, v53))
    {
      outlined destroy of PommesSearchRequest(v34);
      goto LABEL_28;
    }
    v54 = (uint8_t *)swift_slowAlloc();
    v55 = swift_slowAlloc();
    v80 = v55;
    *(_DWORD *)v54 = 136315138;
    outlined init with copy of MediaUserStateCenter?(v34 + *(int *)(v23 + 56), v70, &demangling cache variable for type metadata for InputOrigin?);
    v56 = String.init<A>(describing:)();
    v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v34);
    _os_log_impl(&dword_1C2356000, v37, v53, "Had previous Classic turn? FALSE - no PommesContext and inputOrigin is %s, which is ambiguous", v54, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v55, -1, -1);
    v40 = v54;
LABEL_26:
    MEMORY[0x1C3BBFF64](v40, -1, -1);
LABEL_28:

    outlined destroy of MediaUserStateCenter?(v30, &demangling cache variable for type metadata for InputOrigin?);
    return 0;
  }
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v22, v18, v78);
  PommesContext.source.getter();
  v41 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v15, v12);
  v42 = *MEMORY[0x1E0D98A60];
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  if (v41 != v42)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.pommes);
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v47, v48))
      goto LABEL_20;
    v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v49 = 0;
    v50 = "Had previous Classic turn? FALSE - PommesContext does not have source equal to .modalityTranslated";
    goto LABEL_19;
  }
  v43 = (uint64_t)v72;
  PommesContext.promptContext.getter();
  v45 = v74;
  v44 = v75;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v43, 1, v75) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
LABEL_11:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v46 = type metadata accessor for Logger();
    __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
    v47 = Logger.logObject.getter();
    v48 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v47, v48))
      goto LABEL_20;
    v49 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v49 = 0;
    v50 = "Had previous Classic turn? FALSE - no conclusive information available";
LABEL_19:
    _os_log_impl(&dword_1C2356000, v47, v48, v50, v49, 2u);
    MEMORY[0x1C3BBFF64](v49, -1, -1);
LABEL_20:

    (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v78);
    return 0;
  }
  v59 = v69;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v69, v43, v44);
  if ((Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter() & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v60 = type metadata accessor for Logger();
    __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v61, v62))
      goto LABEL_51;
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    v64 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with strictPrompt=true";
    goto LABEL_50;
  }
  v65 = *(_QWORD *)(Com_Apple_Siri_Product_Proto_PromptContext.promptTargetHints.getter() + 16);
  swift_bridgeObjectRelease();
  if (v65)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v66 = type metadata accessor for Logger();
    __swift_project_value_buffer(v66, (uint64_t)static Logger.pommes);
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v61, v62))
      goto LABEL_51;
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    v64 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with non-empty promptTargetHints";
    goto LABEL_50;
  }
  if ((Com_Apple_Siri_Product_Proto_PromptContext.objectDisambiguation.getter() & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v67 = type metadata accessor for Logger();
    __swift_project_value_buffer(v67, (uint64_t)static Logger.pommes);
    v61 = Logger.logObject.getter();
    v62 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v61, v62))
      goto LABEL_51;
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    v64 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with objectDisambiguation=true";
    goto LABEL_50;
  }
  if ((Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter() & 1) == 0)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v59, v44);
    goto LABEL_11;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v68 = type metadata accessor for Logger();
  __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v63 = 0;
    v64 = "Had previous Classic turn? TRUE - PommesContext has PromptContext with dictationPrompt=true";
LABEL_50:
    _os_log_impl(&dword_1C2356000, v61, v62, v64, v63, 2u);
    MEMORY[0x1C3BBFF64](v63, -1, -1);
  }
LABEL_51:

  (*(void (**)(char *, uint64_t))(v45 + 8))(v59, v44);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v22, v78);
  return 1;
}

unint64_t static ClassicFollowupPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ELL;
}

uint64_t ClassicFollowupPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t ClassicFollowupPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t ClassicFollowupPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance ClassicFollowupPreflightClient()
{
  return 0xD00000000000001ELL;
}

uint64_t type metadata accessor for ClassicFollowupPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for ClassicFollowupPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ClassicFollowupPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of ClassicFollowupPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t OnDeviceSearchInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  return result;
}

id OnDeviceSearchInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void OnDeviceSearchInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

void (*OnDeviceSearchInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = OnDeviceSearchInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t OnDeviceSearchInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t OnDeviceSearchInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void OnDeviceSearchInstrumentationUtil.logFailedOnDeviceSearch(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(a1, a2, a3, a4, (Class *)0x1E0D9A230, (SEL *)&selRef_setReason_, (SEL *)&selRef_setFailed_, "Unable to log failed OnDeviceSearch");
}

void OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, Class *a5, SEL *a6, SEL *a7, const char *a8)
{
  uint64_t v8;
  uint64_t v13;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  char v23;
  id v24;
  uint64_t v25;
  os_log_type_t v26;
  uint8_t *v27;
  void *v28;
  NSObject *oslog;

  v13 = v8;
  v15 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)();
  if (v15)
  {
    v16 = (void *)v15;
    v17 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A220]), sel_init);
    if (v17)
    {
      v18 = v17;
      v19 = objc_msgSend(objc_allocWithZone(*a5), sel_init);
      if (v19)
      {
        v20 = v19;
        objc_msgSend(v19, *a6, a4);
        objc_msgSend(v18, *a7, v20);
        objc_msgSend(v16, sel_setOnDeviceIndexSearchContext_, v18);
        v21 = (void *)objc_opt_self();
        swift_retain();
        v22 = objc_msgSend(v21, sel_processInfo);
        v23 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v23 & 1) != 0)
          v24 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v13 + 96))();
        else
          v24 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v28 = v24;
        swift_release();
        objc_msgSend(v28, sel_emitMessage_, v16);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v18 = v16;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v26, a8, v27, 2u);
    MEMORY[0x1C3BBFF64](v27, -1, -1);
  }

}

uint64_t OnDeviceSearchInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t sub_1C241A2C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C241A2F0(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t method lookup function for OnDeviceSearchInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.mockStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.mockStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.logEndOnDeviceSearch(requestId:pommesCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of OnDeviceSearchInstrumentationUtil.logFailedOnDeviceSearch(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t PlayThisLibraryItemPreflightClient.__allocating_init(rrClient:)(__int128 *a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  outlined init with take of AppDataProviding(a1, v2 + 16);
  return v2;
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  int v18;
  _DWORD *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint8_t *v32;
  os_log_t v33;
  uint64_t v34;
  _QWORD v35[2];
  __int128 v36;
  uint64_t v37;
  char *v38;
  os_log_t v39;
  _DWORD *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48[4];
  uint64_t v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x1E0C80A78](v3);
  v38 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for RREntity();
  v46 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v45 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1E0DEE9D8];
  v49 = MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(a1 + 16);
  if (v8)
  {
    v35[1] = v1;
    v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
    v10 = *(_QWORD *)(v9 - 8);
    v11 = a1 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    v35[0] = a1;
    swift_bridgeObjectRetain();
    v44 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v13 = 136315138;
    v36 = v13;
    v37 = v5;
    do
    {
      v14 = v11 + *(int *)(v9 + 48);
      RREntity.usoEntity.getter();
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (v48[3])
      {
        type metadata accessor for UsoEntity_common_MediaItem();
        if ((swift_dynamicCast() & 1) != 0)
        {
          v43 = v47;
          if (one-time initialization token for pommes != -1)
            swift_once();
          v15 = type metadata accessor for Logger();
          __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
          (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v45, v14, v5);
          v16 = Logger.logObject.getter();
          v17 = static os_log_type_t.debug.getter();
          v18 = v17;
          if (os_log_type_enabled(v16, v17))
          {
            v19 = (_DWORD *)swift_slowAlloc();
            v40 = v19;
            v42 = swift_slowAlloc();
            v48[0] = v42;
            *v19 = v36;
            v41 = v18;
            v20 = v45;
            RREntity.usoEntity.getter();
            v21 = type metadata accessor for UsoBuilderOptions();
            v22 = (uint64_t)v38;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v38, 1, 1, v21);
            static UsoBuilderConversionUtils.convertEntityToRootedEntityGraph(entity:options:)();
            v39 = v16;
            v23 = v12;
            v24 = v9;
            v25 = v20;
            swift_release();
            outlined destroy of MediaUserStateCenter?(v22, (uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
            v26 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
            v28 = v27;
            v29 = v46;
            v30 = v25;
            v9 = v24;
            v12 = v23;
            swift_release();
            v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v28, v48);
            v32 = (uint8_t *)v40;
            *(_QWORD *)(v40 + 1) = v31;
            v5 = v37;
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v5);
            v33 = v39;
            _os_log_impl(&dword_1C2356000, v39, (os_log_type_t)v41, "PlayThisLibraryItemPreflightClient#handle found relevantEntity: %s", v32, 0xCu);
            v34 = v42;
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v34, -1, -1);
            MEMORY[0x1C3BBFF64](v32, -1, -1);

          }
          else
          {
            (*(void (**)(char *, uint64_t))(v46 + 8))(v45, v5);

          }
          MEMORY[0x1C3BBEE78]();
          if (*(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v49 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v48, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      v11 += v12;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    return v49;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;

  v2 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType?;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v39 = a1;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v40 = (v9 - 1) & v9;
  v41 = v12;
  for (i = __clz(__rbit64(v9)) | (v12 << 6); ; i = __clz(__rbit64(v15)) + (v16 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    v21 = one-time initialization token for intentValues;
    swift_bridgeObjectRetain();
    if (v21 != -1)
      swift_once();
    v22 = static SiriKitAppInfoDataProvider.intentValues;
    if (!*((_QWORD *)static SiriKitAppInfoDataProvider.intentValues + 2))
    {
      v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v5, 1, 1, v31);
LABEL_29:
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, v2);
      result = swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
    if ((v24 & 1) != 0)
    {
      v25 = v23;
      v26 = v22[7];
      v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
      v28 = v2;
      v29 = *(_QWORD *)(v27 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v5, v26 + *(_QWORD *)(v29 + 72) * v25, v27);
      v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      v2 = v28;
      a1 = v39;
      v30(v5, 0, 1, v27);
    }
    else
    {
      v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v5, 1, 1, v27);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType();
    v32 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v5, 1, v27) == 1)
      goto LABEL_29;
    v33 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v27);
    swift_bridgeObjectRelease();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
      v38 = (_QWORD *)result;
    }
    v35 = v38[2];
    v34 = v38[3];
    if (v35 >= v34 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v38);
      v38 = (_QWORD *)result;
    }
    v36 = v38;
    v38[2] = v35 + 1;
    v36[v35 + 4] = v33;
LABEL_30:
    v12 = v41;
    v9 = v40;
    if (v40)
      goto LABEL_4;
LABEL_5:
    v14 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v10)
      goto LABEL_37;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    v16 = v12 + 1;
    if (!v15)
    {
      v16 = v12 + 2;
      if (v12 + 2 >= v10)
        goto LABEL_37;
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (!v15)
      {
        v16 = v12 + 3;
        if (v12 + 3 >= v10)
          goto LABEL_37;
        v15 = *(_QWORD *)(v6 + 8 * v16);
        if (!v15)
        {
          v16 = v12 + 4;
          if (v12 + 4 >= v10)
            goto LABEL_37;
          v15 = *(_QWORD *)(v6 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_20:
    v40 = (v15 - 1) & v15;
    v41 = v16;
  }
  v17 = v12 + 5;
  if (v12 + 5 >= v10)
  {
LABEL_37:
    swift_release();
    return (uint64_t)v38;
  }
  v15 = *(_QWORD *)(v6 + 8 * v17);
  if (v15)
  {
    v16 = v12 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v10)
      goto LABEL_37;
    v15 = *(_QWORD *)(v6 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_20;
  }
LABEL_39:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t i;
  int64_t v14;
  unint64_t v15;
  int64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  char v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  void (*v30)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;

  v2 = (uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory?;
  v3 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = a1 + 56;
  v7 = 1 << *(_BYTE *)(a1 + 32);
  v8 = -1;
  if (v7 < 64)
    v8 = ~(-1 << v7);
  v9 = v8 & *(_QWORD *)(a1 + 56);
  v10 = (unint64_t)(v7 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  v38 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v39 = a1;
  if (!v9)
    goto LABEL_5;
LABEL_4:
  v40 = (v9 - 1) & v9;
  v41 = v12;
  for (i = __clz(__rbit64(v9)) | (v12 << 6); ; i = __clz(__rbit64(v15)) + (v16 << 6))
  {
    v18 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * i);
    v19 = *v18;
    v20 = v18[1];
    v21 = one-time initialization token for mediaCategoryValues;
    swift_bridgeObjectRetain();
    if (v21 != -1)
      swift_once();
    v22 = static SiriKitAppInfoDataProvider.mediaCategoryValues;
    if (!*((_QWORD *)static SiriKitAppInfoDataProvider.mediaCategoryValues + 2))
    {
      v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v5, 1, 1, v31);
LABEL_29:
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, v2);
      result = swift_bridgeObjectRelease();
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    v23 = specialized __RawDictionaryStorage.find<A>(_:)(v19, v20);
    if ((v24 & 1) != 0)
    {
      v25 = v23;
      v26 = v22[7];
      v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
      v28 = v2;
      v29 = *(_QWORD *)(v27 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v29 + 16))(v5, v26 + *(_QWORD *)(v29 + 72) * v25, v27);
      v30 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56);
      v2 = v28;
      a1 = v39;
      v30(v5, 0, 1, v27);
    }
    else
    {
      v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v5, 1, 1, v27);
    }
    swift_bridgeObjectRelease();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory();
    v32 = *(_QWORD *)(v27 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v5, 1, v27) == 1)
      goto LABEL_29;
    v33 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v5, v27);
    swift_bridgeObjectRelease();
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v38[2] + 1, 1, v38);
      v38 = (_QWORD *)result;
    }
    v35 = v38[2];
    v34 = v38[3];
    if (v35 >= v34 >> 1)
    {
      result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v34 > 1), v35 + 1, 1, v38);
      v38 = (_QWORD *)result;
    }
    v36 = v38;
    v38[2] = v35 + 1;
    v36[v35 + 4] = v33;
LABEL_30:
    v12 = v41;
    v9 = v40;
    if (v40)
      goto LABEL_4;
LABEL_5:
    v14 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    if (v14 >= v10)
      goto LABEL_37;
    v15 = *(_QWORD *)(v6 + 8 * v14);
    v16 = v12 + 1;
    if (!v15)
    {
      v16 = v12 + 2;
      if (v12 + 2 >= v10)
        goto LABEL_37;
      v15 = *(_QWORD *)(v6 + 8 * v16);
      if (!v15)
      {
        v16 = v12 + 3;
        if (v12 + 3 >= v10)
          goto LABEL_37;
        v15 = *(_QWORD *)(v6 + 8 * v16);
        if (!v15)
        {
          v16 = v12 + 4;
          if (v12 + 4 >= v10)
            goto LABEL_37;
          v15 = *(_QWORD *)(v6 + 8 * v16);
          if (!v15)
            break;
        }
      }
    }
LABEL_20:
    v40 = (v15 - 1) & v15;
    v41 = v16;
  }
  v17 = v12 + 5;
  if (v12 + 5 >= v10)
  {
LABEL_37:
    swift_release();
    return (uint64_t)v38;
  }
  v15 = *(_QWORD *)(v6 + 8 * v17);
  if (v15)
  {
    v16 = v12 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    v16 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v16 >= v10)
      goto LABEL_37;
    v15 = *(_QWORD *)(v6 + 8 * v16);
    ++v17;
    if (v15)
      goto LABEL_20;
  }
LABEL_39:
  __break(1u);
  return result;
}

unint64_t static PlayThisLibraryItemPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000022;
}

uint64_t PlayThisLibraryItemPreflightClient.init(rrClient:)(__int128 *a1)
{
  uint64_t v1;

  outlined init with take of AppDataProviding(a1, v1 + 16);
  return v1;
}

uint64_t closure #4 in PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  Swift::String v18;
  uint64_t v19;
  unint64_t v21;
  unint64_t v22;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioClientComponent?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_PlaybackSignals?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItem>);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_1C24FA1B0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v13 + 16))(v15 + v14, a2, v12);
  AudioExperience.Builder.serverAudioResults.setter();
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init()();
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v11, 0, 1, v16);
  AudioExperience.Builder.audioUnderstanding.setter();
  Apple_Parsec_Siri_V2alpha_PlaybackSignals.init()();
  v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v8, 0, 1, v17);
  AudioExperience.Builder.playbackSignals.setter();
  AudioExperience.Builder.internalSignals.setter();
  AudioExperience.Builder.pegasusAudioType.setter();
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(21);
  swift_bridgeObjectRelease();
  v21 = 0xD000000000000013;
  v22 = 0x80000001C2505110;
  v18._countAndFlagsBits = UsoIdentifier.appBundleId.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  AudioExperience.Builder.launchID.setter();
  AudioExperience.Builder.systemExtensionBundleID.setter();
  AudioExperience.Builder.boltProxiedBundleID.setter();
  AudioExperience.Builder.shouldPerformAppSelection.setter();
  Apple_Parsec_Siri_V2alpha_AudioClientComponent.init()();
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v5, 0, 1, v19);
  return AudioExperience.Builder.audioClientComponent.setter();
}

uint64_t PlayThisLibraryItemPreflightClient.audioItem(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  uint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  BOOL v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  unsigned int (*v54)(uint64_t, uint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59;
  void (*v60)(uint64_t, uint64_t);
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void *v73;
  uint64_t v74;
  void *v75;
  Swift::String v76;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;

  v4 = type metadata accessor for ClientAudioResult.Scheme();
  v81 = *(_QWORD *)(v4 - 8);
  v82 = v4;
  MEMORY[0x1E0C80A78](v4);
  v80 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v99 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v94 = *(_QWORD *)(v99 - 8);
  MEMORY[0x1E0C80A78](v99);
  v86 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v93);
  v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v79 = (char *)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v88 = (uint64_t)&v78 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v87 = (char *)&v78 - v15;
  MEMORY[0x1E0C80A78](v14);
  v98 = (uint64_t)&v78 - v16;
  v96 = type metadata accessor for UsoIdentifier();
  v17 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v19 = (char *)&v78 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v21 = MEMORY[0x1E0C80A78](v20);
  v78 = (uint64_t)&v78 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v78 - v23;
  v25 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v26 = *(_QWORD *)(v25 + 16);
  v95 = v17;
  v84 = a1;
  v85 = a2;
  v83 = v24;
  if (!v26)
  {
    v35 = 1;
    v31 = v96;
    goto LABEL_12;
  }
  v27 = v25 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  v28 = v17;
  v29 = *(_QWORD *)(v17 + 72);
  v30 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
  swift_bridgeObjectRetain();
  v31 = v96;
  while (1)
  {
    v30(v19, v27, v31);
    v33 = UsoIdentifier.namespace.getter();
    if (!v34)
      goto LABEL_4;
    if (v33 == 0x6574736973726570 && v34 == 0xED000064695F746ELL)
      break;
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v32 & 1) != 0)
      goto LABEL_11;
LABEL_4:
    v31 = v96;
    (*(void (**)(char *, uint64_t))(v95 + 8))(v19, v96);
    v27 += v29;
    if (!--v26)
    {
      swift_bridgeObjectRelease();
      v35 = 1;
      v24 = v83;
      v17 = v95;
      goto LABEL_12;
    }
  }
  swift_bridgeObjectRelease();
LABEL_11:
  swift_bridgeObjectRelease();
  v17 = v95;
  v31 = v96;
  v24 = v83;
  (*(void (**)(char *, char *, uint64_t))(v95 + 32))(v83, v19, v96);
  v35 = 0;
LABEL_12:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v24, v35, 1, v31);
  swift_bridgeObjectRelease();
  v36 = Apple_Parsec_Siri_V2alpha_AudioItem.init()();
  MEMORY[0x1C3BBCF40](v36);
  v37 = Apple_Parsec_Siri_V2alpha_AudioItem.title.setter();
  v38 = MEMORY[0x1C3BBCF10](v37);
  v39 = (uint64_t)v87;
  if (!v38)
    goto LABEL_40;
  v40 = v38;
  if (!(v38 >> 62))
  {
    v41 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v41)
      goto LABEL_15;
LABEL_39:
    swift_bridgeObjectRelease_n();
    v24 = v83;
    goto LABEL_40;
  }
  while (2)
  {
    swift_bridgeObjectRetain();
    v41 = _CocoaArrayWrapper.endIndex.getter();
    if (!v41)
      goto LABEL_39;
LABEL_15:
    v92 = v40 & 0xC000000000000001;
    v90 = *MEMORY[0x1E0DA1DC0];
    v42 = 4;
    v43 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
    v91 = v40;
    v89 = v41;
LABEL_19:
    v45 = v42 - 4;
    if (v92)
    {
      v46 = MEMORY[0x1C3BBF3F4](v42 - 4, v40);
      v40 = v42 - 3;
      if (__OFADD__(v45, 1))
        goto LABEL_37;
    }
    else
    {
      v46 = *(_QWORD *)(v40 + 8 * v42);
      swift_retain();
      v40 = v42 - 3;
      if (__OFADD__(v45, 1))
      {
LABEL_37:
        __break(1u);
        continue;
      }
    }
    break;
  }
  v47 = dispatch thunk of CodeGenListEntry.entry.getter();
  v97 = v46;
  if (v100 && (v48 = MEMORY[0x1C3BBCF1C](v47), v49 = swift_release(), v48))
  {
    MEMORY[0x1C3BBD09C](v49);
    swift_release();
    v50 = v94;
  }
  else
  {
    v50 = v94;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v94 + 56))(v98, 1, 1, v99);
  }
  v51 = v99;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v50 + 104))(v39, v90, v99);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v39, 0, 1, v51);
  v52 = (uint64_t)&v8[*(int *)(v93 + 48)];
  v53 = v43;
  outlined init with copy of MediaUserStateCenter?(v98, (uint64_t)v8, v43);
  outlined init with copy of MediaUserStateCenter?(v39, v52, v43);
  v54 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v50 + 48);
  if (v54((uint64_t)v8, 1, v51) != 1)
  {
    v55 = v88;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v8, v88, v43);
    if (v54(v52, 1, v99) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v55, v99);
LABEL_17:
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
      outlined destroy of MediaUserStateCenter?(v39, v43);
      outlined destroy of MediaUserStateCenter?(v98, v43);
    }
    else
    {
      v56 = v99;
      v57 = v8;
      v58 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v86, v52, v99);
      lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues();
      v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      v60 = *(void (**)(uint64_t, uint64_t))(v50 + 8);
      v60(v55, v56);
      v61 = v58;
      v8 = v57;
      v39 = (uint64_t)v87;
      v60((uint64_t)v61, v56);
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, v53);
      outlined destroy of MediaUserStateCenter?(v39, v53);
      outlined destroy of MediaUserStateCenter?(v98, v53);
      v43 = v53;
      if ((v59 & 1) != 0)
        goto LABEL_34;
    }
    swift_release();
    ++v42;
    v44 = v40 == v89;
    v40 = v91;
    if (v44)
      goto LABEL_39;
    goto LABEL_19;
  }
  if (v54(v52, 1, v99) != 1)
    goto LABEL_17;
  outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v98, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
LABEL_34:
  swift_bridgeObjectRelease_n();
  dispatch thunk of CodeGenListEntry.entry.getter();
  v62 = swift_release();
  v24 = v83;
  if (!v100 || (MEMORY[0x1C3BBCF40](v62), v64 = v63, swift_release(), !v64))
LABEL_40:
    swift_bridgeObjectRelease();
  v65 = Apple_Parsec_Siri_V2alpha_AudioItem.artist.setter();
  v66 = MEMORY[0x1C3BBCF1C](v65);
  v67 = v80;
  v68 = (uint64_t)v79;
  if (v66)
  {
    MEMORY[0x1C3BBD09C]();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v94 + 56))(v79, 1, 1, v99);
  }
  v69 = v95;
  static ClientAudioResult.Scheme.from(_:)();
  outlined destroy of MediaUserStateCenter?(v68, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v70 = v78;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v24, v78, &demangling cache variable for type metadata for UsoIdentifier?);
  v71 = v69;
  v72 = v96;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v70, 1, v96) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v70, &demangling cache variable for type metadata for UsoIdentifier?);
    v73 = (void *)0xE100000000000000;
    v74 = 48;
  }
  else
  {
    v74 = UsoIdentifier.value.getter();
    v73 = v75;
    (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
  }
  v76._countAndFlagsBits = v74;
  v76._object = v73;
  ClientAudioResult.Scheme.buildDeviceID(withId:)(v76);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v67, v82);
  Apple_Parsec_Siri_V2alpha_AudioItem.identifier.setter();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for UsoIdentifier?);
}

uint64_t PlayThisLibraryItemPreflightClient.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return v0;
}

uint64_t PlayThisLibraryItemPreflightClient.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance PlayThisLibraryItemPreflightClient()
{
  return 0xD000000000000022;
}

uint64_t partial apply for closure #4 in PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(uint64_t a1)
{
  uint64_t v1;

  return closure #4 in PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t type metadata accessor for PlayThisLibraryItemPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for PlayThisLibraryItemPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PlayThisLibraryItemPreflightClient.__allocating_init(rrClient:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

unint64_t lazy protocol witness table accessor for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues;
  if (!lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues)
  {
    v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DA1E40], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues);
  }
  return result;
}

uint64_t OpenAppVocPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static OpenAppVocPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000019;
}

void OpenAppVocPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t v55;
  _QWORD *v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  Swift::String v74;
  id v75;
  void *v76;
  id v77;
  id v78;
  void *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  const char *v84;
  uint64_t v85;
  id v86;
  id v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  _QWORD *v91;
  id v92;
  void *v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  id v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  _QWORD *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  void (*v133)(char *, unint64_t, uint64_t);
  uint64_t v134;
  unint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  void *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  _QWORD v145[4];
  char v146[8];
  uint64_t v147;
  id v148[5];

  v124 = a2;
  v4 = 0;
  v148[4] = *(id *)MEMORY[0x1E0C80C00];
  v119 = *v2;
  v118 = type metadata accessor for PommesSearchReason();
  v116 = *(_QWORD *)(v118 - 8);
  MEMORY[0x1E0C80A78](v118);
  v115 = (uint64_t)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v6);
  v114 = (uint64_t)&v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v139 = *(_QWORD *)(v8 - 8);
  v140 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v138 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v137 = *(_QWORD *)(v138 - 8);
  MEMORY[0x1E0C80A78](v138);
  v136 = (char *)&v113 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for PommesSearchRequest(0);
  v17 = *(int *)(v16 + 76);
  v117 = a1;
  v18 = *(_QWORD *)(a1 + v17);
  v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v123 = *(_QWORD *)(v18 + 16);
  if (v123)
  {
    v113 = v16;
    v20 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
    v21 = v18 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    v22 = *(_QWORD *)(v20 + 72);
    v120 = v18;
    swift_bridgeObjectRetain_n();
    v23 = 0;
    v126 = v19;
    v130 = v10;
    v129 = v12;
    v128 = v13;
    v127 = v15;
    v121 = v21;
    v131 = v22;
    while (1)
    {
      v125 = v23;
      v24 = Siri_Nlu_External_Span.matcherNames.getter();
      v132 = *(_QWORD *)(v24 + 16);
      if (!v132)
      {
        swift_bridgeObjectRelease();
        v51 = v19;
        goto LABEL_38;
      }
      v135 = v24 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      v122 = v24;
      swift_bridgeObjectRetain();
      v25 = 0;
      v134 = *(_QWORD *)(v13 + 72);
      v133 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      v143 = v19;
      v133(v15, v135, v12);
      while (1)
      {
        v26 = v136;
        Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
        Siri_Nlu_External_UserStatedTask.task.getter();
        (*(void (**)(char *, uint64_t))(v137 + 8))(v26, v138);
        static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
        if (v4)
        {
          (*(void (**)(char *, uint64_t))(v139 + 8))(v10, v140);
          (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n();
          if (one-time initialization token for pommes != -1)
            goto LABEL_120;
          goto LABEL_83;
        }
        v142 = v25;
        (*(void (**)(char *, uint64_t))(v139 + 8))(v10, v140);
        v144 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
        v28 = v27;
        v29 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        if (v29 >> 62)
        {
          swift_bridgeObjectRetain();
          v30 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (!v30)
          {
LABEL_21:
            swift_bridgeObjectRelease();
            swift_release();
            swift_bridgeObjectRelease();
            v32 = v19;
            goto LABEL_22;
          }
        }
        else
        {
          v30 = *(_QWORD *)((v29 & 0xFFFFFFFFFFFFF8) + 0x10);
          if (!v30)
            goto LABEL_21;
        }
        v141 = 0;
        v148[0] = v19;
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v30 & ~(v30 >> 63), 0);
        if (v30 < 0)
          goto LABEL_114;
        v31 = 0;
        v32 = v148[0];
        do
        {
          if ((v29 & 0xC000000000000001) != 0)
          {
            v33 = MEMORY[0x1C3BBF3F4](v31, v29);
          }
          else
          {
            v33 = *(_QWORD *)(v29 + 8 * v31 + 32);
            swift_retain();
          }
          swift_bridgeObjectRetain();
          v148[0] = v32;
          v35 = v32[2];
          v34 = v32[3];
          if (v35 >= v34 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
            v32 = v148[0];
          }
          ++v31;
          v32[2] = v35 + 1;
          v36 = &v32[3 * v35];
          v37 = v144;
          v36[4] = v33;
          v36[5] = v37;
          v36[6] = v28;
        }
        while (v30 != v31);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v10 = v130;
        v12 = v129;
        v13 = v128;
        v15 = v127;
        v4 = v141;
LABEL_22:
        (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
        v38 = v32[2];
        v39 = v143[2];
        v40 = v39 + v38;
        if (__OFADD__(v39, v38))
        {
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
          goto LABEL_117;
        }
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v42 = v143;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v40 > v143[3] >> 1)
        {
          if (v39 <= v40)
            v43 = v39 + v38;
          else
            v43 = v39;
          v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v43, 1, v143);
        }
        v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        v44 = v142;
        v45 = v32[2];
        v143 = v42;
        if (v45)
        {
          v46 = v42[2];
          if ((v42[3] >> 1) - v46 < v38)
            goto LABEL_115;
          v47 = (unint64_t)&v42[3 * v46 + 4];
          if ((unint64_t)(v32 + 4) < v47 + 24 * v38 && v47 < (unint64_t)&v32[3 * v38 + 4])
            goto LABEL_124;
          swift_arrayInitWithCopy();
          if (v38)
          {
            v48 = v143[2];
            v49 = __OFADD__(v48, v38);
            v50 = v48 + v38;
            if (v49)
              goto LABEL_116;
            v143[2] = v50;
          }
        }
        else if (v38)
        {
          goto LABEL_113;
        }
        v25 = v44 + 1;
        swift_bridgeObjectRelease();
        if (v25 == v132)
          break;
        v133(v15, v135 + v134 * v25, v12);
      }
      swift_bridgeObjectRelease_n();
      v51 = v143;
LABEL_38:
      v52 = v51[2];
      v53 = v126[2];
      v54 = v53 + v52;
      if (__OFADD__(v53, v52))
      {
        __break(1u);
        goto LABEL_119;
      }
      v55 = swift_isUniquelyReferenced_nonNull_native();
      v56 = v126;
      if ((v55 & 1) == 0 || v54 > v126[3] >> 1)
      {
        if (v53 <= v54)
          v57 = v53 + v52;
        else
          v57 = v53;
        v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)v55, v57, 1, v126);
      }
      v19 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v58 = v51[2];
      v126 = v56;
      if (!v58)
      {
        if (!v52)
          goto LABEL_56;
LABEL_119:
        __break(1u);
LABEL_120:
        swift_once();
LABEL_83:
        v85 = type metadata accessor for Logger();
        __swift_project_value_buffer(v85, (uint64_t)static Logger.pommes);
        v86 = v4;
        v87 = v4;
        v88 = Logger.logObject.getter();
        v89 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v88, v89))
        {
          v90 = (uint8_t *)swift_slowAlloc();
          v91 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v90 = 138412290;
          v92 = v4;
          v93 = (void *)_swift_stdlib_bridgeErrorToNSError();
          v148[0] = v93;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v91 = v93;

          _os_log_impl(&dword_1C2356000, v88, v89, "#OpenAppVoc: Error scanning for matching USO tasks. %@", v90, 0xCu);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v91, -1, -1);
          MEMORY[0x1C3BBFF64](v90, -1, -1);

        }
        else
        {

        }
LABEL_88:
        if (one-time initialization token for pommes == -1)
        {
LABEL_89:
          v94 = type metadata accessor for Logger();
          __swift_project_value_buffer(v94, (uint64_t)static Logger.pommes);
          v95 = Logger.logObject.getter();
          v96 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v95, v96))
          {
            v97 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v97 = 0;
            _os_log_impl(&dword_1C2356000, v95, v96, "#OpenAppVoc: No matching task. Ignoring.", v97, 2u);
            MEMORY[0x1C3BBFF64](v97, -1, -1);
          }

          goto LABEL_92;
        }
LABEL_117:
        swift_once();
        goto LABEL_89;
      }
      v59 = v56[2];
      if ((v56[3] >> 1) - v59 < v52)
      {
        __break(1u);
        goto LABEL_122;
      }
      v60 = (unint64_t)&v56[3 * v59 + 4];
      if ((unint64_t)(v51 + 4) < v60 + 24 * v52 && v60 < (unint64_t)&v51[3 * v52 + 4])
      {
LABEL_124:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      swift_arrayInitWithCopy();
      if (v52)
      {
        v62 = v126[2];
        v49 = __OFADD__(v62, v52);
        v63 = v62 + v52;
        if (!v49)
        {
          v126[2] = v63;
          goto LABEL_56;
        }
LABEL_122:
        __break(1u);
LABEL_123:
        swift_once();
        goto LABEL_96;
      }
LABEL_56:
      v23 = v125 + 1;
      swift_bridgeObjectRelease();
      if (v23 == v123)
      {
        swift_bridgeObjectRelease_n();
        v16 = v113;
        v64 = v126;
        goto LABEL_59;
      }
    }
  }
  v64 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_59:
  v65 = v64[2];
  if (!v65)
  {
    swift_bridgeObjectRelease();
    goto LABEL_88;
  }
  v113 = v16;
  v66 = v64;
  swift_bridgeObjectRetain();
  v67 = v66 + 6;
  while (1)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    static UsoTask_CodegenConverter.convert(task:)();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v148, (uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (!v147)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_68:
      outlined init with copy of MediaUserStateCenter?((uint64_t)v148, (uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for Any?);
      goto LABEL_69;
    }
    type metadata accessor for UsoTask_open_common_App();
    if ((swift_dynamicCast() & 1) == 0)
      goto LABEL_68;
    v68 = v145[0];
    swift_release();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v148, (uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v68)
      goto LABEL_72;
LABEL_69:
    outlined init with copy of MediaUserStateCenter?((uint64_t)v146, (uint64_t)v145, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v145[3])
      break;
    outlined destroy of MediaUserStateCenter?((uint64_t)v145, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_62:
    outlined destroy of MediaUserStateCenter?((uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for Any?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_bridgeObjectRelease();
    swift_release();
    v67 += 3;
    if (!--v65)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_88;
    }
  }
  type metadata accessor for UsoTask_noVerb_common_App();
  if ((swift_dynamicCast() & 1) == 0)
    goto LABEL_62;
  swift_release();
LABEL_72:
  outlined destroy of MediaUserStateCenter?((uint64_t)v148, (uint64_t *)&demangling cache variable for type metadata for Any?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v146, (uint64_t *)&demangling cache variable for type metadata for Any?);
  swift_bridgeObjectRelease_n();
  swift_retain();
  swift_bridgeObjectRetain();
  v69 = UsoTask.vocAppIds.getter();
  if (v69)
  {
    v70 = *(_QWORD *)(v69 + 16);
    if (v70)
    {
      v71 = (uint64_t *)(v69 + 40);
      while (1)
      {
        v73 = *(v71 - 1);
        v72 = *v71;
        v74._countAndFlagsBits = 0x6C7070612E6D6F63;
        v74._object = (void *)0xEE00697269732E65;
        if (String.hasPrefix(_:)(v74))
        {
          swift_bridgeObjectRelease();
          goto LABEL_101;
        }
        v75 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
        swift_bridgeObjectRetain();
        v76 = (void *)MEMORY[0x1C3BBEC44](v73, v72);
        swift_bridgeObjectRelease();
        v148[0] = 0;
        v77 = objc_msgSend(v75, sel_initWithBundleIdentifier_allowPlaceholder_error_, v76, 1, v148);

        if (v77)
          break;
        v71 += 2;
        v78 = v148[0];
        v79 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        if (!--v70)
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for pommes != -1)
            swift_once();
          v80 = type metadata accessor for Logger();
          __swift_project_value_buffer(v80, (uint64_t)static Logger.pommes);
          v81 = Logger.logObject.getter();
          v82 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v81, v82))
          {
            v83 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v83 = 0;
            v84 = "#OpenAppVoc: Found open app task with vocFile matches, but app is not installed or does not have speci"
                  "al prefix. Ignoring.";
            goto LABEL_98;
          }
          goto LABEL_110;
        }
      }
      v100 = v148[0];
      swift_bridgeObjectRelease();

LABEL_101:
      v101 = v117;
      v102 = (uint64_t *)(v117 + *(int *)(v113 + 32));
      v103 = *v102;
      v104 = v102[1];
      v105 = v114;
      PommesSearchRequest.pommesCandidateId.getter(v114);
      v106 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v105, 0, 1, v106);
      v107 = v115;
      default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v115);
      v98 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v101, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v103, v104, v105, v107, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD000000000000019, 0x80000001C24FDC40);
      (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v107, v118);
      outlined destroy of MediaUserStateCenter?(v105, &demangling cache variable for type metadata for PommesCandidateId?);
      if (v98)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v108 = type metadata accessor for Logger();
        __swift_project_value_buffer(v108, (uint64_t)static Logger.pommes);
        v109 = Logger.logObject.getter();
        v110 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v109, v110))
        {
          v111 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v111 = 0;
          _os_log_impl(&dword_1C2356000, v109, v110, "#OpenAppVoc: Found open app task with vocFile match for installed app. Handling.", v111, 2u);
          MEMORY[0x1C3BBFF64](v111, -1, -1);
          swift_bridgeObjectRelease_n();
          swift_release_n();

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        goto LABEL_93;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v112 = type metadata accessor for Logger();
      __swift_project_value_buffer(v112, (uint64_t)static Logger.pommes);
      v81 = Logger.logObject.getter();
      v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v83 = 0;
        v84 = "#OpenAppVoc: Error. Unable to construct preflight response.";
        goto LABEL_98;
      }
LABEL_110:

      swift_bridgeObjectRelease_n();
      swift_release_n();
      goto LABEL_92;
    }
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for pommes != -1)
    goto LABEL_123;
LABEL_96:
  v99 = type metadata accessor for Logger();
  __swift_project_value_buffer(v99, (uint64_t)static Logger.pommes);
  v81 = Logger.logObject.getter();
  v82 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v81, v82))
    goto LABEL_110;
  v83 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v83 = 0;
  v84 = "#OpenAppVoc: Found open app task but no vocFile matches. Ignoring.";
LABEL_98:
  _os_log_impl(&dword_1C2356000, v81, v82, v84, v83, 2u);
  MEMORY[0x1C3BBFF64](v83, -1, -1);
  swift_bridgeObjectRelease_n();
  swift_release_n();

LABEL_92:
  v98 = 0;
LABEL_93:
  *v124 = v98;
}

uint64_t UsoTask.vocAppIds.getter()
{
  uint64_t v0;
  uint64_t v2;
  _BYTE v3[32];
  _BYTE v4[24];
  uint64_t v5;
  _BYTE v6[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v5)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_9:
    v0 = 0;
    goto LABEL_12;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v4, (uint64_t)v3, (uint64_t *)&demangling cache variable for type metadata for Any?);
  type metadata accessor for UsoTask_open_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_noVerb_common_App();
    if (!swift_dynamicCast())
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
      goto LABEL_9;
    }
  }
  swift_retain();
  dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
  swift_release();
  if (v2)
  {
    v0 = CodeGenGlobalArgs.vocAppIds.getter();
    swift_release();
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, (uint64_t *)&demangling cache variable for type metadata for Any?);
    swift_release();
    v0 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
LABEL_12:
  outlined destroy of MediaUserStateCenter?((uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  return v0;
}

uint64_t OpenAppVocPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t OpenAppVocPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t OpenAppVocPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance OpenAppVocPreflightClient()
{
  return 0xD000000000000019;
}

uint64_t CodeGenGlobalArgs.vocAppIds.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  void (*v34)(uint64_t, uint64_t);
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int64_t v46;
  int64_t v47;
  uint64_t v48;
  int isUniquelyReferenced_nonNull_native;
  int64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56;
  BOOL v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  void (*v66)(char *, char *, uint64_t);
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void (*v73)(char *, unint64_t, uint64_t);
  _QWORD *v74;
  char *v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t result;
  char *v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  char *v89;
  char *v90;
  unsigned int v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;

  v104 = type metadata accessor for SpanProperty();
  v0 = *(_QWORD *)(v104 - 8);
  v1 = MEMORY[0x1E0C80A78](v104);
  v93 = (char *)&v85 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = MEMORY[0x1E0C80A78](v1);
  v98 = (char *)&v85 - v4;
  MEMORY[0x1E0C80A78](v3);
  v100 = (char *)&v85 - v5;
  v6 = type metadata accessor for UsoEntitySpan.SpanSource();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v85 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntitySpan.SpanSource?, UsoEntitySpan.SpanSource?));
  MEMORY[0x1E0C80A78](v95);
  v10 = (char *)&v85 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v101 = (uint64_t)&v85 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v85 - v17;
  v103 = type metadata accessor for UsoEntitySpan();
  v19 = *(_QWORD *)(v103 - 8);
  v20 = MEMORY[0x1E0C80A78](v103);
  v90 = (char *)&v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v102 = (char *)&v85 - v22;
  v23 = dispatch thunk of CodeGenGlobalArgs.getEntitySpansFor(attributeName:)();
  if (v23)
  {
    v24 = MEMORY[0x1E0DEE9D8];
    v105 = MEMORY[0x1E0DEE9D8];
    v25 = *(_QWORD *)(v23 + 16);
    v99 = v0;
    v94 = v25;
    if (!v25)
      goto LABEL_20;
    v89 = v14;
    v26 = 0;
    v91 = *MEMORY[0x1E0DA0518];
    v86 = v7;
    v88 = v19;
    v92 = v23;
    while (1)
    {
      if (v26 >= *(_QWORD *)(v23 + 16))
      {
        __break(1u);
LABEL_73:
        __break(1u);
LABEL_74:
        __break(1u);
LABEL_75:
        __break(1u);
LABEL_76:
        __break(1u);
LABEL_77:
        __break(1u);
LABEL_78:
        result = _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
      v27 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
      v96 = *(_QWORD *)(v19 + 72);
      v97 = v27;
      (*(void (**)(char *, unint64_t, uint64_t))(v19 + 16))(v102, v23 + v27 + v96 * v26, v103);
      UsoEntitySpan.sourceComponent.getter();
      v28 = v101;
      (*(void (**)(uint64_t, _QWORD, uint64_t))(v7 + 104))(v101, v91, v6);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v28, 0, 1, v6);
      v29 = (uint64_t)&v10[*(int *)(v95 + 48)];
      outlined init with copy of MediaUserStateCenter?((uint64_t)v18, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      outlined init with copy of MediaUserStateCenter?(v28, v29, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
      if (v30(v10, 1, v6) == 1)
        break;
      v31 = (uint64_t)v18;
      v32 = (uint64_t)v89;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v10, (uint64_t)v89, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      if (v30((char *)v29, 1, v6) == 1)
      {
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v32, v6);
        v18 = (char *)v31;
        v19 = v88;
LABEL_5:
        outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for (UsoEntitySpan.SpanSource?, UsoEntitySpan.SpanSource?));
        outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
        goto LABEL_6;
      }
      v33 = v85;
      (*(void (**)(char *, uint64_t, uint64_t))(v7 + 32))(v85, v29, v6);
      lazy protocol witness table accessor for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource();
      v87 = dispatch thunk of static Equatable.== infix(_:_:)();
      v34 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
      v34(v32, v6);
      v34((uint64_t)v33, v6);
      outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      v18 = (char *)v31;
      outlined destroy of MediaUserStateCenter?(v31, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      v19 = v88;
      if ((v87 & 1) != 0)
        goto LABEL_14;
LABEL_6:
      (*(void (**)(char *, uint64_t))(v19 + 8))(v102, v103);
      v23 = v92;
LABEL_7:
      if (v94 == ++v26)
      {
        v24 = v105;
LABEL_20:
        swift_bridgeObjectRelease();
        v40 = *(_QWORD *)(v24 + 16);
        if (v40)
        {
          v41 = v24 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
          v42 = *(_QWORD *)(v19 + 72);
          swift_retain();
          v43 = MEMORY[0x1E0DEE9D8];
          while (1)
          {
            v44 = UsoEntitySpan.properties.getter();
            v45 = *(_QWORD *)(v44 + 16);
            v46 = *(_QWORD *)(v43 + 16);
            v47 = v46 + v45;
            if (__OFADD__(v46, v45))
              goto LABEL_74;
            v48 = v44;
            isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            if (isUniquelyReferenced_nonNull_native && v47 <= *(_QWORD *)(v43 + 24) >> 1)
            {
              if (*(_QWORD *)(v48 + 16))
                goto LABEL_33;
            }
            else
            {
              if (v46 <= v47)
                v50 = v46 + v45;
              else
                v50 = v46;
              v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v50, 1, v43);
              if (*(_QWORD *)(v48 + 16))
              {
LABEL_33:
                v51 = *(_QWORD *)(v43 + 16);
                if ((*(_QWORD *)(v43 + 24) >> 1) - v51 < v45)
                  goto LABEL_76;
                v52 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
                v53 = *(_QWORD *)(v0 + 72);
                v54 = v43 + v52 + v53 * v51;
                if (v48 + v52 < v54 + v53 * v45 && v54 < v48 + v52 + v53 * v45)
                  goto LABEL_78;
                swift_arrayInitWithCopy();
                if (v45)
                {
                  v56 = *(_QWORD *)(v43 + 16);
                  v57 = __OFADD__(v56, v45);
                  v58 = v56 + v45;
                  if (v57)
                    goto LABEL_77;
                  *(_QWORD *)(v43 + 16) = v58;
                }
                goto LABEL_23;
              }
            }
            if (v45)
              goto LABEL_75;
LABEL_23:
            swift_bridgeObjectRelease();
            v41 += v42;
            if (!--v40)
            {
              swift_release_n();
              goto LABEL_45;
            }
          }
        }
        swift_release();
        v43 = MEMORY[0x1E0DEE9D8];
LABEL_45:
        v105 = MEMORY[0x1E0DEE9D8];
        v60 = *(_QWORD *)(v43 + 16);
        if (v60)
        {
          v61 = 0;
          while (1)
          {
            if (v61 >= *(_QWORD *)(v43 + 16))
              goto LABEL_73;
            v62 = (*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80);
            v63 = *(_QWORD *)(v0 + 72);
            (*(void (**)(char *, unint64_t, uint64_t))(v0 + 16))(v100, v43 + v62 + v63 * v61, v104);
            if (SpanProperty.key.getter() == 0x656D614E707061 && v64 == 0xE700000000000000)
              break;
            v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v65 & 1) != 0)
              goto LABEL_54;
            (*(void (**)(char *, uint64_t))(v0 + 8))(v100, v104);
LABEL_48:
            if (v60 == ++v61)
              goto LABEL_59;
          }
          swift_bridgeObjectRelease();
LABEL_54:
          v66 = *(void (**)(char *, char *, uint64_t))(v0 + 32);
          v66(v98, v100, v104);
          v67 = v105;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v67 + 16) + 1, 1);
            v67 = v105;
          }
          v69 = *(_QWORD *)(v67 + 16);
          v68 = *(_QWORD *)(v67 + 24);
          if (v69 >= v68 >> 1)
          {
            specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1);
            v67 = v105;
          }
          *(_QWORD *)(v67 + 16) = v69 + 1;
          v66((char *)(v67 + v62 + v69 * v63), v98, v104);
          v105 = v67;
          v0 = v99;
          goto LABEL_48;
        }
LABEL_59:
        swift_bridgeObjectRelease();
        v70 = *(_QWORD *)(v105 + 16);
        if (v70)
        {
          v71 = v105 + ((*(unsigned __int8 *)(v0 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 80));
          v72 = *(_QWORD *)(v0 + 72);
          v73 = *(void (**)(char *, unint64_t, uint64_t))(v0 + 16);
          v103 = v105;
          swift_retain();
          v74 = (_QWORD *)MEMORY[0x1E0DEE9D8];
          v75 = v93;
          do
          {
            v77 = v104;
            v73(v75, v71, v104);
            v78 = SpanProperty.valueString.getter();
            v80 = v79;
            (*(void (**)(char *, uint64_t))(v0 + 8))(v75, v77);
            if (v80)
            {
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v74[2] + 1, 1, v74);
              v82 = v74[2];
              v81 = v74[3];
              if (v82 >= v81 >> 1)
                v74 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v81 > 1), v82 + 1, 1, v74);
              v74[2] = v82 + 1;
              v76 = &v74[2 * v82];
              v76[4] = v78;
              v76[5] = v80;
              v0 = v99;
            }
            v71 += v72;
            --v70;
          }
          while (v70);
          swift_release_n();
        }
        else
        {
          swift_release();
          v74 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        }
        v83 = specialized Set.init<A>(_:)((uint64_t)v74);
        swift_bridgeObjectRelease();
        v59 = specialized _copyCollectionToContiguousArray<A>(_:)(v83);
        swift_bridgeObjectRelease();
        return (uint64_t)v59;
      }
    }
    if (v30((char *)v29, 1, v6) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for UsoEntitySpan.SpanSource?);
LABEL_14:
      v35 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
      v35(v90, v102, v103);
      v36 = v105;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v36 + 16) + 1, 1);
        v36 = v105;
      }
      v37 = v97;
      v39 = *(_QWORD *)(v36 + 16);
      v38 = *(_QWORD *)(v36 + 24);
      if (v39 >= v38 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1);
        v36 = v105;
      }
      *(_QWORD *)(v36 + 16) = v39 + 1;
      v35((char *)(v36 + v37 + v39 * v96), v90, v103);
      v105 = v36;
      v0 = v99;
      v7 = v86;
      v23 = v92;
      goto LABEL_7;
    }
    goto LABEL_5;
  }
  return 0;
}

uint64_t type metadata accessor for OpenAppVocPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for OpenAppVocPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OpenAppVocPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of OpenAppVocPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

unint64_t lazy protocol witness table accessor for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource;
  if (!lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource)
  {
    v1 = type metadata accessor for UsoEntitySpan.SpanSource();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DA0540], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntitySpan.SpanSource and conformance UsoEntitySpan.SpanSource);
  }
  return result;
}

uint64_t UsoEntity_common_MediaItem.identifiers(forNamespace:appBundleId:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[4];
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v23;
  uint64_t v24;

  v23 = a3;
  v18[1] = a2;
  v4 = type metadata accessor for UsoIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v18[3] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v18 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v21 = (char *)v18 - v12;
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v18 - v13;
  v15 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v16 = MEMORY[0x1E0DEE9D8];
  v24 = MEMORY[0x1E0DEE9D8];
  if (*(_QWORD *)(v15 + 16))
  {
    v19 = a1;
    v20 = v15;
    v18[2] = v10;
    if (*(_QWORD *)(v15 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v14, v15 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)), v4);
      UsoIdentifier.namespace.getter();
      __asm { BR              X8 }
    }
    __break(1u);
    JUMPOUT(0x1C241D784);
  }
  swift_bridgeObjectRelease();
  return v16;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.hasNonEmptyName()()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = MEMORY[0x1C3BBCF40]();
  if (!v1)
    return 0;
  v2 = v0;
  v3 = v1;
  swift_bridgeObjectRelease();
  v4 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v4 = v2 & 0xFFFFFFFFFFFFLL;
  return v4 != 0;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isFromArtist()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  const char *v56;
  unint64_t v57;

  v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v53);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v50 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v46 - v11;
  MEMORY[0x1E0C80A78](v10);
  v55 = (char *)&v46 - v12;
  v13 = type metadata accessor for UsoIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v46 - v18;
  v52 = v0;
  v20 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v46 = v4;
    v47 = v2;
    v48 = v6;
    v49 = v1;
    v22 = v20 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v23 = *(_QWORD *)(v14 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v51 = v20;
    swift_bridgeObjectRetain();
    v56 = "mediaPlayerRadioType";
    v57 = 0x80000001C25021F0;
    while (1)
    {
      v24(v19, v22, v13);
      v27 = UsoIdentifier.namespace.getter();
      if (!v28)
        break;
      if (v27 == 0xD000000000000015 && v28 == v57)
      {
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
      }
      else
      {
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
        if ((v29 & 1) == 0)
          goto LABEL_14;
      }
      if (UsoIdentifier.value.getter() == 0x697472416D6F7266 && v30 == 0xEA00000000007473)
      {
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v17, v13);
        v33(v19, v13);
LABEL_17:
        v34 = swift_bridgeObjectRelease_n();
        if (MEMORY[0x1C3BBCF1C](v34))
        {
          v35 = (uint64_t)v55;
          MEMORY[0x1C3BBD09C]();
          swift_release();
          v37 = (uint64_t)v48;
          v36 = v49;
          v38 = v47;
        }
        else
        {
          v38 = v47;
          v35 = (uint64_t)v55;
          v36 = v49;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v55, 1, 1, v49);
          v37 = (uint64_t)v48;
        }
        v39 = v46;
        v40 = (uint64_t)v54;
        (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v54, *MEMORY[0x1E0DA1DC0], v36);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v36);
        v41 = v37 + *(int *)(v53 + 48);
        outlined init with copy of MediaUserStateCenter?(v35, v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
        if (v42(v37, 1, v36) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v32 = 1;
            return v32 & 1;
          }
        }
        else
        {
          v43 = v50;
          outlined init with copy of MediaUserStateCenter?(v37, v50, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v39, v41, v36);
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
            v32 = dispatch thunk of static Equatable.== infix(_:_:)();
            v44 = *(void (**)(char *, uint64_t))(v38 + 8);
            v44(v39, v36);
            outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v44((char *)v43, v36);
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v32 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, v36);
        }
        outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        v32 = 0;
        return v32 & 1;
      }
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v26 = *(void (**)(char *, uint64_t))(v14 + 8);
      v26(v17, v13);
      v26(v19, v13);
      if ((v25 & 1) != 0)
        goto LABEL_17;
LABEL_4:
      v22 += v23;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n();
        v32 = 0;
        return v32 & 1;
      }
    }
    v24(v17, (unint64_t)v19, v13);
LABEL_14:
    v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v17, v13);
    v31(v19, v13);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v32 = 0;
  return v32 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isFromSong()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  const char *v56;
  unint64_t v57;

  v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v53);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v50 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v46 - v11;
  MEMORY[0x1E0C80A78](v10);
  v55 = (char *)&v46 - v12;
  v13 = type metadata accessor for UsoIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v46 - v18;
  v52 = v0;
  v20 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v46 = v4;
    v47 = v2;
    v48 = v6;
    v49 = v1;
    v22 = v20 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v23 = *(_QWORD *)(v14 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v51 = v20;
    swift_bridgeObjectRetain();
    v56 = "mediaPlayerRadioType";
    v57 = 0x80000001C25021F0;
    while (1)
    {
      v24(v19, v22, v13);
      v27 = UsoIdentifier.namespace.getter();
      if (!v28)
        break;
      if (v27 == 0xD000000000000015 && v28 == v57)
      {
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
      }
      else
      {
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
        if ((v29 & 1) == 0)
          goto LABEL_14;
      }
      if (UsoIdentifier.value.getter() == 0x676E6F536D6F7266 && v30 == 0xE800000000000000)
      {
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v17, v13);
        v33(v19, v13);
LABEL_17:
        v34 = swift_bridgeObjectRelease_n();
        if (MEMORY[0x1C3BBCF1C](v34))
        {
          v35 = (uint64_t)v55;
          MEMORY[0x1C3BBD09C]();
          swift_release();
          v37 = (uint64_t)v48;
          v36 = v49;
          v38 = v47;
        }
        else
        {
          v38 = v47;
          v35 = (uint64_t)v55;
          v36 = v49;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v55, 1, 1, v49);
          v37 = (uint64_t)v48;
        }
        v39 = v46;
        v40 = (uint64_t)v54;
        (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v54, *MEMORY[0x1E0DA1D90], v36);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v36);
        v41 = v37 + *(int *)(v53 + 48);
        outlined init with copy of MediaUserStateCenter?(v35, v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
        if (v42(v37, 1, v36) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v32 = 1;
            return v32 & 1;
          }
        }
        else
        {
          v43 = v50;
          outlined init with copy of MediaUserStateCenter?(v37, v50, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v39, v41, v36);
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
            v32 = dispatch thunk of static Equatable.== infix(_:_:)();
            v44 = *(void (**)(char *, uint64_t))(v38 + 8);
            v44(v39, v36);
            outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v44((char *)v43, v36);
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v32 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, v36);
        }
        outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        v32 = 0;
        return v32 & 1;
      }
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v26 = *(void (**)(char *, uint64_t))(v14 + 8);
      v26(v17, v13);
      v26(v19, v13);
      if ((v25 & 1) != 0)
        goto LABEL_17;
LABEL_4:
      v22 += v23;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n();
        v32 = 0;
        return v32 & 1;
      }
    }
    v24(v17, (unint64_t)v19, v13);
LABEL_14:
    v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v17, v13);
    v31(v19, v13);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v32 = 0;
  return v32 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isFromAlbum()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  const char *v56;
  unint64_t v57;

  v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v53);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v50 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v46 - v11;
  MEMORY[0x1E0C80A78](v10);
  v55 = (char *)&v46 - v12;
  v13 = type metadata accessor for UsoIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v46 - v18;
  v52 = v0;
  v20 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v46 = v4;
    v47 = v2;
    v48 = v6;
    v49 = v1;
    v22 = v20 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v23 = *(_QWORD *)(v14 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v51 = v20;
    swift_bridgeObjectRetain();
    v56 = "mediaPlayerRadioType";
    v57 = 0x80000001C25021F0;
    while (1)
    {
      v24(v19, v22, v13);
      v27 = UsoIdentifier.namespace.getter();
      if (!v28)
        break;
      if (v27 == 0xD000000000000015 && v28 == v57)
      {
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
      }
      else
      {
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
        if ((v29 & 1) == 0)
          goto LABEL_14;
      }
      if (UsoIdentifier.value.getter() == 0x75626C416D6F7266 && v30 == 0xE90000000000006DLL)
      {
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v17, v13);
        v33(v19, v13);
LABEL_17:
        v34 = swift_bridgeObjectRelease_n();
        if (MEMORY[0x1C3BBCF1C](v34))
        {
          v35 = (uint64_t)v55;
          MEMORY[0x1C3BBD09C]();
          swift_release();
          v37 = (uint64_t)v48;
          v36 = v49;
          v38 = v47;
        }
        else
        {
          v38 = v47;
          v35 = (uint64_t)v55;
          v36 = v49;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v55, 1, 1, v49);
          v37 = (uint64_t)v48;
        }
        v39 = v46;
        v40 = (uint64_t)v54;
        (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v54, *MEMORY[0x1E0DA1D98], v36);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v36);
        v41 = v37 + *(int *)(v53 + 48);
        outlined init with copy of MediaUserStateCenter?(v35, v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
        if (v42(v37, 1, v36) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v32 = 1;
            return v32 & 1;
          }
        }
        else
        {
          v43 = v50;
          outlined init with copy of MediaUserStateCenter?(v37, v50, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v39, v41, v36);
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
            v32 = dispatch thunk of static Equatable.== infix(_:_:)();
            v44 = *(void (**)(char *, uint64_t))(v38 + 8);
            v44(v39, v36);
            outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v44((char *)v43, v36);
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v32 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, v36);
        }
        outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        v32 = 0;
        return v32 & 1;
      }
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v26 = *(void (**)(char *, uint64_t))(v14 + 8);
      v26(v17, v13);
      v26(v19, v13);
      if ((v25 & 1) != 0)
        goto LABEL_17;
LABEL_4:
      v22 += v23;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n();
        v32 = 0;
        return v32 & 1;
      }
    }
    v24(v17, (unint64_t)v19, v13);
LABEL_14:
    v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v17, v13);
    v31(v19, v13);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v32 = 0;
  return v32 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isRecommended()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (**v8)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  void (**v25)(unint64_t, uint64_t, uint64_t, uint64_t);
  char *v26;
  char v27;
  void (*v28)(unint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  char *v30;
  Swift::Bool v31;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  void (**v37)(unint64_t, uint64_t, uint64_t, uint64_t);
  void (**v38)(unint64_t, uint64_t, uint64_t, uint64_t);
  char *v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;

  v0 = type metadata accessor for UsoEntity_common_SortDirection.DefinedValues();
  v38 = *(void (***)(unint64_t, uint64_t, uint64_t, uint64_t))(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v36 = (char *)&v33 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_SortDirection.DefinedValues?, UsoEntity_common_SortDirection.DefinedValues?));
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (void (**)(unint64_t, uint64_t, uint64_t, uint64_t))((char *)&v33
                                                                         - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v33 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v33 - v12;
  if (!dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter())
    return 0;
  v45 = v13;
  v14 = MEMORY[0x1C3BBD168]();
  swift_release();
  if (!v14)
    return 0;
  if (v14 >> 62)
    goto LABEL_25;
  v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v15; v15 = _CocoaArrayWrapper.endIndex.getter())
  {
    v37 = v8;
    v43 = v14 & 0xC000000000000001;
    v42 = *MEMORY[0x1E0DA1E90];
    v16 = 4;
    v40 = v15;
    v41 = v14;
    v8 = v38;
    v39 = v4;
    v34 = v11;
    v35 = v2;
    while (1)
    {
      if (v43)
      {
        v18 = MEMORY[0x1C3BBF3F4](v16 - 4, v14);
      }
      else
      {
        v18 = *(_QWORD *)(v14 + 8 * v16);
        swift_retain();
      }
      v19 = v16 - 3;
      v14 = (unint64_t)v45;
      if (__OFADD__(v16 - 4, 1))
        break;
      v20 = dispatch thunk of CodeGenListEntry.entry.getter();
      v44 = v18;
      if (v46)
      {
        MEMORY[0x1C3BBD0CC](v20);
        swift_release();
      }
      else
      {
        v8[7](v14, 1, 1, v0);
      }
      ((void (*)(char *, _QWORD, uint64_t))v8[13])(v11, v42, v0);
      v8[7]((unint64_t)v11, 0, 1, v0);
      v21 = (uint64_t)&v4[*(int *)(v2 + 48)];
      outlined init with copy of MediaUserStateCenter?(v14, (uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v11, v21, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      v22 = v8[6];
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v22)(v4, 1, v0) == 1)
      {
        v17 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v22)(v21, 1, v0);
        v14 = v41;
        if (v17 == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v39, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          outlined destroy of MediaUserStateCenter?((uint64_t)v45, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          swift_release();
LABEL_23:
          v31 = 1;
          goto LABEL_27;
        }
        goto LABEL_7;
      }
      v23 = (uint64_t)v37;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v4, (uint64_t)v37, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v22)(v21, 1, v0) == 1)
      {
        v24 = v23;
        v8 = v38;
        ((void (*)(uint64_t, uint64_t))v38[1])(v24, v0);
        v14 = v41;
LABEL_7:
        v4 = v39;
        outlined destroy of MediaUserStateCenter?((uint64_t)v39, &demangling cache variable for type metadata for (UsoEntity_common_SortDirection.DefinedValues?, UsoEntity_common_SortDirection.DefinedValues?));
        outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v45, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
        swift_release();
        goto LABEL_8;
      }
      v25 = v38;
      v26 = v36;
      ((void (*)(char *, uint64_t, uint64_t))v38[4])(v36, v21, v0);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_SortDirection.DefinedValues and conformance UsoEntity_common_SortDirection.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1ED0], MEMORY[0x1E0DA1EE0]);
      v27 = dispatch thunk of static Equatable.== infix(_:_:)();
      v28 = v25[1];
      v29 = v23;
      v8 = v25;
      v11 = v34;
      ((void (*)(uint64_t, uint64_t))v28)(v29, v0);
      v30 = v26;
      v2 = v35;
      ((void (*)(char *, uint64_t))v28)(v30, v0);
      outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v45, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      swift_release();
      v14 = v41;
      if ((v27 & 1) != 0)
        goto LABEL_23;
LABEL_8:
      ++v16;
      if (v19 == v40)
        goto LABEL_26;
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
  }
LABEL_26:
  v31 = 0;
LABEL_27:
  swift_bridgeObjectRelease_n();
  return v31;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isAffinity()()
{
  return UsoEntity_common_MediaItem.isAffinity()(MEMORY[0x1E0DA20D0]);
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isDiscover()()
{
  return UsoEntity_common_MediaItem.isAffinity()(MEMORY[0x1E0DA20D8]);
}

uint64_t UsoEntity_common_MediaItem.isAffinity()(unsigned int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t *v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v2 = type metadata accessor for UsoEntity_common_SearchQualifier.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?));
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v25 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v25 - v16;
  if (dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter())
  {
    MEMORY[0x1C3BBD150]();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, 1, 1, v2);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v15, *a1, v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v15, 0, 1, v2);
  v18 = (uint64_t)&v8[*(int *)(v6 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v8, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v15, v18, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v19((uint64_t)v8, 1, v2) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    v20 = v19(v18, 1, v2);
    if (v20 == 1)
      v21 = &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?;
    else
      v21 = &demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?);
    if (v20 == 1)
      v22 = -1;
    else
      v22 = 0;
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v8, (uint64_t)v12, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
    if (v19(v18, 1, v2) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v12, v2);
      v22 = 0;
      v21 = &demangling cache variable for type metadata for (UsoEntity_common_SearchQualifier.DefinedValues?, UsoEntity_common_SearchQualifier.DefinedValues?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v5, v18, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_SearchQualifier.DefinedValues and conformance UsoEntity_common_SearchQualifier.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA20E0], MEMORY[0x1E0DA20F0]);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v3 + 8);
      v23(v5, v2);
      v21 = &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_SearchQualifier.DefinedValues?);
      v23(v12, v2);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v8, v21);
  return v22 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isMoreOf()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  int v18;
  uint64_t *v19;
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v0 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v23 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  if (dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter())
  {
    MEMORY[0x1C3BBCFD0]();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E0DA16B8], v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v16 = (uint64_t)&v6[*(int *)(v4 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v13, v16, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v17((uint64_t)v6, 1, v0) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    v18 = v17(v16, 1, v0);
    if (v18 == 1)
      v19 = &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?;
    else
      v19 = &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?);
    if (v18 == 1)
      v20 = -1;
    else
      v20 = 0;
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
    if (v17(v16, 1, v0) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      v20 = 0;
      v19 = &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v16, v0);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA16D0], MEMORY[0x1E0DA16E0]);
      v20 = dispatch thunk of static Equatable.== infix(_:_:)();
      v21 = *(void (**)(char *, uint64_t))(v1 + 8);
      v21(v3, v0);
      v19 = &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
      v21(v10, v0);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, v19);
  return v20 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isDifferentThan()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t *v21;
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v0 = type metadata accessor for UsoEntity_common_Similarity.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v25 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v25 - v14;
  if (dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter()
    && (v16 = MEMORY[0x1C3BBD144](), v17 = swift_release(), v16))
  {
    MEMORY[0x1C3BBCFE8](v17);
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v15, 1, 1, v0);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E0DA16F0], v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v18 = (uint64_t)&v6[*(int *)(v4 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v13, v18, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v19((uint64_t)v6, 1, v0) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    v20 = v19(v18, 1, v0);
    if (v20 == 1)
      v21 = &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?;
    else
      v21 = &demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?);
    if (v20 == 1)
      v22 = -1;
    else
      v22 = 0;
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    if (v19(v18, 1, v0) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      v22 = 0;
      v21 = &demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v18, v0);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_Similarity.DefinedValues and conformance UsoEntity_common_Similarity.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA16F8], MEMORY[0x1E0DA1708]);
      v22 = dispatch thunk of static Equatable.== infix(_:_:)();
      v23 = *(void (**)(char *, uint64_t))(v1 + 8);
      v23(v3, v0);
      v21 = &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      v23(v10, v0);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, v21);
  return v22 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isResolvedReference()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  void (*v14)(char *, unint64_t, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD v32[3];
  unint64_t v33;
  char *v34;
  unint64_t v35;
  char *v36;
  unint64_t v37;

  v1 = type metadata accessor for UsoIdentifier();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v3);
  v8 = (char *)v32 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v32 - v9;
  v11 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v12 = *(_QWORD *)(v11 + 16);
  if (!v12)
  {
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  v32[1] = v11;
  v32[2] = v0;
  v13 = v11 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v37 = *(_QWORD *)(v2 + 72);
  v14 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  swift_bridgeObjectRetain();
  v34 = "";
  v35 = 0x80000001C2502280;
  v36 = "nAppVocPreflightClient";
  v33 = 0x80000001C2505170;
  while (1)
  {
    v14(v10, v13, v1);
    v17 = UsoIdentifier.namespace.getter();
    if (!v18)
    {
      v14(v8, (unint64_t)v10, v1);
LABEL_14:
      v21 = *(void (**)(char *, uint64_t))(v2 + 8);
      v21(v8, v1);
      v21(v10, v1);
      goto LABEL_4;
    }
    if (v17 == 0xD000000000000019 && v18 == v35)
    {
      swift_bridgeObjectRelease();
      v14(v8, (unint64_t)v10, v1);
    }
    else
    {
      v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v14(v8, (unint64_t)v10, v1);
      if ((v19 & 1) == 0)
        goto LABEL_14;
    }
    if (UsoIdentifier.appBundleId.getter() == 0xD00000000000001CLL && v20 == v33)
      break;
    v15 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v16 = *(void (**)(char *, uint64_t))(v2 + 8);
    v16(v8, v1);
    v16(v10, v1);
    if ((v15 & 1) != 0)
      goto LABEL_17;
LABEL_4:
    v13 += v37;
    if (!--v12)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_18;
    }
  }
  swift_bridgeObjectRelease();
  v22 = *(void (**)(char *, uint64_t))(v2 + 8);
  v22(v8, v1);
  v22(v10, v1);
LABEL_17:
  swift_bridgeObjectRelease_n();
  LODWORD(v12) = 1;
LABEL_18:
  v23 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v24 = *(_QWORD *)(v23 + 16);
  if (!v24)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  LODWORD(v36) = v12;
  v25 = v23 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v26 = *(_QWORD *)(v2 + 72);
  v27 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  v35 = v23;
  swift_bridgeObjectRetain();
  v37 = 0x80000001C2502210;
  while (2)
  {
    v27(v5, v25, v1);
    v29 = UsoIdentifier.namespace.getter();
    if (!v30)
    {
      (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
LABEL_21:
      v25 += v26;
      if (!--v24)
      {
        swift_bridgeObjectRelease_n();
        return 0;
      }
      continue;
    }
    break;
  }
  if (v29 != 0xD000000000000014 || v30 != v37)
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
    if ((v28 & 1) != 0)
      goto LABEL_29;
    goto LABEL_21;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
LABEL_29:
  swift_bridgeObjectRelease_n();
  return (v36 & 1) != 0;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.isAddToUnspecifiedPlaylist()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  void (*v24)(char *, unint64_t, uint64_t);
  char v25;
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  unint64_t v56;
  const char *v57;
  char *v58;
  unint64_t v59;

  v1 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v53);
  v6 = (char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v50 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v54 = (char *)&v46 - v11;
  MEMORY[0x1E0C80A78](v10);
  v55 = (char *)&v46 - v12;
  v13 = type metadata accessor for UsoIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v46 - v18;
  v52 = v0;
  v20 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v21 = *(_QWORD *)(v20 + 16);
  if (v21)
  {
    v46 = v4;
    v47 = v2;
    v48 = v6;
    v49 = v1;
    v22 = v20 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v23 = *(_QWORD *)(v14 + 72);
    v24 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    v51 = v20;
    swift_bridgeObjectRetain();
    v57 = "mediaPlayerRadioType";
    v58 = "inity";
    v59 = 0x80000001C25021F0;
    v56 = 0x80000001C2501F30;
    while (1)
    {
      v24(v19, v22, v13);
      v27 = UsoIdentifier.namespace.getter();
      if (!v28)
        break;
      if (v27 == 0xD000000000000015 && v28 == v59)
      {
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
      }
      else
      {
        v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v24(v17, (unint64_t)v19, v13);
        if ((v29 & 1) == 0)
          goto LABEL_14;
      }
      if (UsoIdentifier.value.getter() == 0xD000000000000018 && v30 == v56)
      {
        swift_bridgeObjectRelease();
        v33 = *(void (**)(char *, uint64_t))(v14 + 8);
        v33(v17, v13);
        v33(v19, v13);
LABEL_17:
        v34 = swift_bridgeObjectRelease_n();
        if (MEMORY[0x1C3BBCF1C](v34))
        {
          v35 = (uint64_t)v55;
          MEMORY[0x1C3BBD09C]();
          swift_release();
          v37 = (uint64_t)v48;
          v36 = v49;
          v38 = v47;
        }
        else
        {
          v38 = v47;
          v35 = (uint64_t)v55;
          v36 = v49;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v47 + 56))(v55, 1, 1, v49);
          v37 = (uint64_t)v48;
        }
        v39 = v46;
        v40 = (uint64_t)v54;
        (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v54, *MEMORY[0x1E0DA1E10], v36);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v40, 0, 1, v36);
        v41 = v37 + *(int *)(v53 + 48);
        outlined init with copy of MediaUserStateCenter?(v35, v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined init with copy of MediaUserStateCenter?(v40, v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
        if (v42(v37, 1, v36) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v32 = 1;
            return v32 & 1;
          }
        }
        else
        {
          v43 = v50;
          outlined init with copy of MediaUserStateCenter?(v37, v50, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          if (v42(v41, 1, v36) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v39, v41, v36);
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
            v32 = dispatch thunk of static Equatable.== infix(_:_:)();
            v44 = *(void (**)(char *, uint64_t))(v38 + 8);
            v44(v39, v36);
            outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            v44((char *)v43, v36);
            outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
            return v32 & 1;
          }
          outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v43, v36);
        }
        outlined destroy of MediaUserStateCenter?(v37, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
        v32 = 0;
        return v32 & 1;
      }
      v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v26 = *(void (**)(char *, uint64_t))(v14 + 8);
      v26(v17, v13);
      v26(v19, v13);
      if ((v25 & 1) != 0)
        goto LABEL_17;
LABEL_4:
      v22 += v23;
      if (!--v21)
      {
        swift_bridgeObjectRelease_n();
        v32 = 0;
        return v32 & 1;
      }
    }
    v24(v17, (unint64_t)v19, v13);
LABEL_14:
    v31 = *(void (**)(char *, uint64_t))(v14 + 8);
    v31(v17, v13);
    v31(v19, v13);
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  v32 = 0;
  return v32 & 1;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.hasListPosition()()
{
  uint64_t v0;

  v0 = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
  if (v0)
    swift_release();
  return v0 != 0;
}

SiriInformationSearch::CommonAudio::Attribute_optional __swiftcall UsoEntity_common_MediaItem.getListPosition()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  SiriInformationSearch::CommonAudio::Attribute_optional v9;
  uint64_t v11;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v11 - v4;
  if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
  {
    MEMORY[0x1C3BBD048]();
    swift_release();
    v6 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
    v7 = *(_QWORD *)(v6 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) != 1)
    {
      outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
      v8 = (*(uint64_t (**)(char *, uint64_t))(v7 + 88))(v3, v6);
      if (v8 == *MEMORY[0x1E0DA1AB0])
      {
        v9.value = SiriInformationSearch_CommonAudio_Attribute_previous;
LABEL_10:
        outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
        return v9;
      }
      if (v8 == *MEMORY[0x1E0DA1A40])
      {
        v9.value = SiriInformationSearch_CommonAudio_Attribute_next;
        goto LABEL_10;
      }
      (*(void (**)(char *, uint64_t))(v7 + 8))(v3, v6);
    }
    v9.value = SiriInformationSearch_CommonAudio_Attribute_unknownDefault;
    goto LABEL_10;
  }
  return (SiriInformationSearch::CommonAudio::Attribute_optional)15;
}

unint64_t UsoEntity_common_MediaItem.findAll(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  unint64_t result;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  if ((a2(v3) & 1) != 0)
  {
    v7 = swift_retain();
    MEMORY[0x1C3BBEE78](v7);
    if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  if (UsoEntity_common_MediaItem.isResolvedReference()() && !*(_QWORD *)(a1 + 16))
    return v14;
  result = MEMORY[0x1C3BBCF10]();
  if (!result)
    return v14;
  v9 = result;
  if (!(result >> 62))
  {
    v10 = *(_QWORD *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10)
      goto LABEL_10;
LABEL_19:
    swift_bridgeObjectRelease();
    return v14;
  }
  result = _CocoaArrayWrapper.endIndex.getter();
  v10 = result;
  if (!result)
    goto LABEL_19;
LABEL_10:
  if (v10 >= 1)
  {
    for (i = 0; i != v10; ++i)
    {
      if ((v9 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](i, v9);
      else
        swift_retain();
      dispatch thunk of CodeGenListEntry.entry.getter();
      swift_release();
      if (v13)
      {
        dispatch thunk of CodeGenListEntry.entry.getter();
        v12 = UsoEntity_common_MediaItem.findAll(options:with:)(a1, a2, a3);
        swift_release();
        specialized Array.append<A>(contentsOf:)(v12);
      }
      swift_release();
    }
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t specialized UsoEntity_common_MediaItem.findFirst(options:with:)(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (!UsoEntity_common_MediaItem.isResolvedReference()())
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16)))
    {
      v4 = MEMORY[0x1C3BBCF10]();
      if (v4)
      {
        v5 = v4;
        if (v4 >> 62)
          goto LABEL_22;
        for (i = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
        {
          v7 = 4;
          while (1)
          {
            v8 = v7 - 4;
            if ((v5 & 0xC000000000000001) == 0)
              break;
            MEMORY[0x1C3BBF3F4](v7 - 4, v5);
            v9 = v7 - 3;
            if (__OFADD__(v8, 1))
              goto LABEL_21;
LABEL_18:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v11)
            {
              a2 = ((uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:))(a1);
              swift_release();
              swift_release();
              if (a2)
              {
                swift_bridgeObjectRelease();
                return a2;
              }
            }
            else
            {
              swift_release();
            }
            ++v7;
            if (v9 == i)
              goto LABEL_23;
          }
          swift_retain();
          v9 = v7 - 3;
          if (!__OFADD__(v8, 1))
            goto LABEL_18;
LABEL_21:
          __break(1u);
LABEL_22:
          ;
        }
LABEL_23:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  swift_retain();
  return a2;
}

{
  return specialized UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.noun.getter, (uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:));
}

{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  if (MEMORY[0x1C3BBCF4C]())
  {
    swift_release();
    swift_retain();
  }
  else
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16)))
    {
      v4 = MEMORY[0x1C3BBCF10]();
      if (v4)
      {
        v5 = v4;
        if (v4 >> 62)
          goto LABEL_23;
        v6 = *(_QWORD *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (!v6)
        {
LABEL_24:
          swift_bridgeObjectRelease();
          return 0;
        }
LABEL_10:
        v7 = 4;
        while (1)
        {
          v8 = v7 - 4;
          if ((v5 & 0xC000000000000001) != 0)
          {
            MEMORY[0x1C3BBF3F4](v7 - 4, v5);
            v9 = v7 - 3;
            if (__OFADD__(v8, 1))
              goto LABEL_22;
          }
          else
          {
            swift_retain();
            v9 = v7 - 3;
            if (__OFADD__(v8, 1))
            {
LABEL_22:
              __break(1u);
LABEL_23:
              v6 = _CocoaArrayWrapper.endIndex.getter();
              if (!v6)
                goto LABEL_24;
              goto LABEL_10;
            }
          }
          dispatch thunk of CodeGenListEntry.entry.getter();
          if (v11)
          {
            a2 = ((uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:))(a1);
            swift_release();
            swift_release();
            if (a2)
            {
              swift_bridgeObjectRelease();
              return a2;
            }
          }
          else
          {
            swift_release();
          }
          ++v7;
          if (v9 == v6)
            goto LABEL_24;
        }
      }
    }
    return 0;
  }
  return a2;
}

{
  return specialized UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.sort.getter, (uint64_t (*)(uint64_t))specialized UsoEntity_common_MediaItem.findFirst(options:with:));
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter())
  {
    v8 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v6, 1, 1, v8);
LABEL_5:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16)))
    {
      v9 = MEMORY[0x1C3BBCF10]();
      if (v9)
      {
        v10 = v9;
        if (v9 >> 62)
          goto LABEL_24;
        for (i = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
        {
          v12 = 4;
          while (1)
          {
            v13 = v12 - 4;
            if ((v10 & 0xC000000000000001) == 0)
              break;
            MEMORY[0x1C3BBF3F4](v12 - 4, v10);
            v14 = v12 - 3;
            if (__OFADD__(v13, 1))
              goto LABEL_23;
LABEL_20:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v17)
            {
              a2 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(a1, v17);
              swift_release();
              swift_release();
              if (a2)
              {
                swift_bridgeObjectRelease();
                return a2;
              }
            }
            else
            {
              swift_release();
            }
            ++v12;
            if (v14 == i)
              goto LABEL_25;
          }
          swift_retain();
          v14 = v12 - 3;
          if (!__OFADD__(v13, 1))
            goto LABEL_20;
LABEL_23:
          __break(1u);
LABEL_24:
          ;
        }
LABEL_25:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  MEMORY[0x1C3BBD0B4]();
  swift_release();
  v7 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7) == 1)
    goto LABEL_5;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  swift_retain();
  return a2;
}

uint64_t specialized UsoEntity_common_MediaItem.findFirst(options:with:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t))
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = a2;
  if ((a3(a2) & 1) == 0)
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16)))
    {
      v7 = MEMORY[0x1C3BBCF10]();
      if (v7)
      {
        v8 = v7;
        if (v7 >> 62)
          goto LABEL_22;
        for (i = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
        {
          v10 = 4;
          while (1)
          {
            v11 = v10 - 4;
            if ((v8 & 0xC000000000000001) == 0)
              break;
            MEMORY[0x1C3BBF3F4](v10 - 4, v8);
            v12 = v10 - 3;
            if (__OFADD__(v11, 1))
              goto LABEL_21;
LABEL_18:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v14)
            {
              v5 = a4(a1);
              swift_release();
              swift_release();
              if (v5)
              {
                swift_bridgeObjectRelease();
                return v5;
              }
            }
            else
            {
              swift_release();
            }
            ++v10;
            if (v12 == i)
              goto LABEL_23;
          }
          swift_retain();
          v12 = v10 - 3;
          if (!__OFADD__(v11, 1))
            goto LABEL_18;
LABEL_21:
          __break(1u);
LABEL_22:
          ;
        }
LABEL_23:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  swift_retain();
  return v5;
}

uint64_t UsoEntity_common_MediaItem.findFirst(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;

  v4 = v3;
  if ((a2(v3) & 1) == 0)
  {
    if ((!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16))
      && (!UsoEntity_common_MediaItem.isResolvedReference()() || *(_QWORD *)(a1 + 16)))
    {
      v7 = MEMORY[0x1C3BBCF10]();
      if (v7)
      {
        v8 = v7;
        if (v7 >> 62)
          goto LABEL_22;
        for (i = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
        {
          v10 = 4;
          while (1)
          {
            v11 = v10 - 4;
            if ((v8 & 0xC000000000000001) == 0)
              break;
            MEMORY[0x1C3BBF3F4](v10 - 4, v8);
            v12 = v10 - 3;
            if (__OFADD__(v11, 1))
              goto LABEL_21;
LABEL_18:
            dispatch thunk of CodeGenListEntry.entry.getter();
            if (v15)
            {
              v4 = UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, a3);
              swift_release();
              swift_release();
              if (v4)
              {
                swift_bridgeObjectRelease();
                return v4;
              }
            }
            else
            {
              swift_release();
            }
            ++v10;
            if (v12 == i)
              goto LABEL_23;
          }
          swift_retain();
          v12 = v10 - 3;
          if (!__OFADD__(v11, 1))
            goto LABEL_18;
LABEL_21:
          __break(1u);
LABEL_22:
          ;
        }
LABEL_23:
        swift_bridgeObjectRelease();
      }
    }
    return 0;
  }
  swift_retain();
  return v4;
}

Swift::Bool __swiftcall UsoEntity_common_MediaItem.hasMediaTypeOnly()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = MEMORY[0x1C3BBCF1C]();
  v1 = swift_release();
  if (!v0)
    return 0;
  v2 = MEMORY[0x1C3BBCF34](v1);
  swift_release();
  if (v2)
    return 0;
  v3 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
  swift_release();
  if (v3)
    return 0;
  v4 = dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter();
  v5 = swift_release();
  if (v4)
    return 0;
  v6 = MEMORY[0x1C3BBCF10](v5);
  swift_bridgeObjectRelease();
  if (v6)
    return 0;
  v7 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
  swift_release();
  if (v7)
    return 0;
  if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
  {
    swift_release();
    return 0;
  }
  return 1;
}

uint64_t Array<A>.identifiers(forNamespace:)(_QWORD *a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v4 = type metadata accessor for UsoIdentifier();
  v27 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v21 - v6;
  if (a2 >> 62)
    goto LABEL_25;
  v8 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  while (1)
  {
    v26 = (unint64_t)a1;
    if (v8)
    {
      if (v8 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C2421424);
      }
      v9 = 0;
      a1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      do
      {
        if ((a2 & 0xC000000000000001) != 0)
          MEMORY[0x1C3BBF3F4](v9, a2);
        else
          swift_retain();
        v10 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          a1 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, a1[2] + 1, 1, a1);
        v11 = a1;
        v12 = a1[2];
        v13 = v11;
        v14 = v11[3];
        if (v12 >= v14 >> 1)
          v13 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v14 > 1), v12 + 1, 1, v13);
        ++v9;
        v13[2] = v12 + 1;
        v15 = &v13[v12];
        a1 = v13;
        v15[4] = v10;
      }
      while (v8 != v9);
    }
    else
    {
      a1 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v28 = MEMORY[0x1E0DEE9D8];
    v23 = a1[2];
    if (!v23)
      break;
    v16 = 0;
    v21 = a1;
    v22 = a1 + 4;
    v26 = v26;
    while (v16 < a1[2])
    {
      v17 = v22[v16];
      if (*(_QWORD *)(v17 + 16))
      {
        v24 = v22[v16];
        v25 = v16;
        v18 = v27;
        v19 = v17 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80));
        swift_bridgeObjectRetain_n();
        (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v7, v19, v4);
        UsoIdentifier.namespace.getter();
        __asm { BR              X8 }
      }
      if (++v16 == v23)
      {
        swift_bridgeObjectRelease();
        return v28;
      }
    }
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t Array<A>.findAll(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t a4)
{
  uint64_t v8;

  swift_bridgeObjectRetain();
  swift_retain();
  v8 = specialized Sequence.flatMap<A>(_:)(a4, a1, a2, a3);
  swift_bridgeObjectRelease();
  swift_release();
  return v8;
}

uint64_t Array<A>.findFirst(options:with:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (a4 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
      goto LABEL_3;
  }
  else
  {
    v8 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
    {
LABEL_3:
      v9 = 4;
      do
      {
        v10 = v9 - 4;
        if ((a4 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1C3BBF3F4](v9 - 4, a4);
          v11 = v9 - 3;
          if (__OFADD__(v10, 1))
            goto LABEL_13;
        }
        else
        {
          swift_retain();
          v11 = v9 - 3;
          if (__OFADD__(v10, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        v12 = UsoEntity_common_MediaItem.findFirst(options:with:)(a1, a2, a3);
        swift_release();
        if (v12)
          goto LABEL_12;
        ++v9;
      }
      while (v11 != v8);
    }
  }
  v12 = 0;
LABEL_12:
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v14;

  v14 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
  {
LABEL_12:
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_3;
  }
  else
  {
    v7 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v7)
    {
LABEL_3:
      for (i = 4; ; ++i)
      {
        v9 = i - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          MEMORY[0x1C3BBF3F4](i - 4, a1);
          v10 = i - 3;
          if (__OFADD__(v9, 1))
            goto LABEL_11;
        }
        else
        {
          swift_retain();
          v10 = i - 3;
          if (__OFADD__(v9, 1))
          {
LABEL_11:
            __break(1u);
            goto LABEL_12;
          }
        }
        v11 = UsoEntity_common_MediaItem.findAll(options:with:)(a2, a3, a4);
        swift_release();
        specialized Array.append<A>(contentsOf:)(v11);
        if (v10 == v7)
        {
          swift_bridgeObjectRelease();
          return v14;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t SearchToolEmptyDataProvider.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t *static SearchToolEmptyDataProvider.make()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v13;

  v5 = *(_QWORD *)(v4 + 80);
  type metadata accessor for AnyDataProvider(0, v5, a3, a4);
  v8 = type metadata accessor for SearchToolEmptyDataProvider(0, v5, v6, v7);
  v13 = swift_allocObject();
  v9 = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for SearchToolEmptyDataProvider<A>, v8);
  v11 = specialized AnyDataProvider.__allocating_init<A>(provider:)((uint64_t)&v13, v8, v9, v10);
  swift_release();
  return v11;
}

uint64_t type metadata accessor for SearchToolEmptyDataProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for SearchToolEmptyDataProvider);
}

uint64_t SearchToolEmptyDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t SearchToolEmptyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 80) - 8)
                                                              + 56))(a1, 1, 1);
}

uint64_t SearchToolEmptyDataProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SearchToolEmptyDataProvider.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata completion function for SearchToolEmptyDataProvider()
{
  return swift_initClassMetadata2();
}

uint64_t method lookup function for SearchToolEmptyDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))() & 1;
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of SearchToolEmptyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 120);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

void *Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  id v14;
  void *v15;
  id v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v22;

  v10 = type metadata accessor for UUID();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1F8]), sel_init);
  if (v14)
  {
    v15 = v14;
    Emittable.makeComponentIdAndEmitRequestLink(for:with:)(0x15u, a1, a2, a4, a5, (uint64_t)v13);
    v16 = closure #1 in Emittable.eventWrapper(requestId:pommesCandidateId:)((uint64_t)v13, a1, a2, a3);
    objc_msgSend(v15, sel_setEventMetadata_, v16);

    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1C2356000, v18, v19, "Unable to initialize POMMESSchemaPOMMESClientEvent", v20, 2u);
      MEMORY[0x1C3BBFF64](v20, -1, -1);
    }

    return 0;
  }
  return v15;
}

id Emittable.stream.getter(uint64_t a1, uint64_t a2)
{
  id v4;
  char v5;

  v4 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v5 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v5 & 1) != 0)
    return (id)(*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  else
    return objc_msgSend((id)objc_opt_self(), sel_sharedStream);
}

uint64_t Emittable.makeComponentIdAndEmitRequestLink(for:with:)@<X0>(unsigned int a1@<W0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t (*v32)(uint64_t, char *, uint64_t);
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  NSObject *v40;
  NSObject *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(char *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t, char *, uint64_t);
  unsigned int v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v69 = a1;
  v72 = a6;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UUID();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v65 - v19;
  v21 = MEMORY[0x1E0C80A78](v18);
  v70 = (char *)&v65 - v22;
  MEMORY[0x1E0C80A78](v21);
  v71 = (char *)&v65 - v23;
  if (!a3)
    goto LABEL_4;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) != 1)
  {
    v32 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v14 + 32);
    v33 = v71;
    v67 = v13;
    v68 = v32;
    v32((uint64_t)v71, v12, v13);
    v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a5 + 24))(a4, a5);
    v35 = (uint64_t)v70;
    v36 = v69;
    (*(void (**)(_QWORD, char *))(*(_QWORD *)v34 + 88))(v69, v33);
    swift_release();
    if (AFDeviceSupportsSAE())
      v37 = 43;
    else
      v37 = 1;
    v38 = v36;
    v39 = (char *)v35;
    v40 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(v38, v35, v37);
    if (v40)
    {
      v41 = v40;
      objc_msgSend((id)(*(uint64_t (**)(uint64_t, uint64_t))(a5 + 8))(a4, a5), sel_emitMessage_, v40);
      swift_unknownObjectRelease();
      if (one-time initialization token for pommes != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
      v43 = v35;
      v44 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v20, v43, v67);
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v47 = swift_slowAlloc();
        v66 = swift_slowAlloc();
        v74 = v66;
        *(_DWORD *)v47 = 136315394;
        v48 = SISchemaComponentName.description.getter();
        v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v49, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v47 + 12) = 2080;
        lazy protocol witness table accessor for type UUID and conformance UUID();
        v50 = dispatch thunk of CustomStringConvertible.description.getter();
        v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, &v74);
        v39 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v52 = *(void (**)(char *, uint64_t))(v14 + 8);
        v52(v20, v44);
        _os_log_impl(&dword_1C2356000, v45, v46, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v47, 0x16u);
        v53 = v66;
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v53, -1, -1);
        MEMORY[0x1C3BBFF64](v47, -1, -1);

LABEL_28:
        v52(v71, v44);
        return v68(v72, v39, v44);
      }

      v64 = *(void (**)(char *, uint64_t))(v14 + 8);
      v64(v20, v44);
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v54 = type metadata accessor for Logger();
      __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
      v55 = v35;
      v44 = v67;
      (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v17, v55, v67);
      v56 = Logger.logObject.getter();
      v57 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v56, v57))
      {
        v58 = swift_slowAlloc();
        v59 = swift_slowAlloc();
        v74 = v59;
        *(_DWORD *)v58 = 136315394;
        v60 = SISchemaComponentName.description.getter();
        v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, &v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v58 + 12) = 2080;
        lazy protocol witness table accessor for type UUID and conformance UUID();
        v62 = dispatch thunk of CustomStringConvertible.description.getter();
        v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v74);
        v39 = v70;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v52 = *(void (**)(char *, uint64_t))(v14 + 8);
        v52(v17, v44);
        _os_log_impl(&dword_1C2356000, v56, v57, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v59, -1, -1);
        MEMORY[0x1C3BBFF64](v58, -1, -1);

        goto LABEL_28;
      }

      v64 = *(void (**)(char *, uint64_t))(v14 + 8);
      v64(v17, v44);
    }
    v64(v71, v44);
    return v68(v72, v39, v44);
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for UUID?);
LABEL_4:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v74 = v28;
    *(_DWORD *)v27 = 136315138;
    if (a3)
      v29 = a2;
    else
      v29 = 7104878;
    if (a3)
      v30 = a3;
    else
      v30 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    v73 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v25, v26, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v28, -1, -1);
    MEMORY[0x1C3BBFF64](v27, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return UUID.init()();
}

uint64_t dispatch thunk of Emittable.stream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Emittable.mockStream.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of Emittable.analyticsComponentIdGenerator.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

unint64_t static PommesSearchServiceDelegate.machServiceName.getter()
{
  return 0xD000000000000028;
}

void *PommesSearchServiceDelegate.pommesSearchService.getter()
{
  uint64_t v0;
  uint64_t v1;
  void *v2;

  v1 = OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService;
  if (*(_QWORD *)(v0 + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService))
  {
    v2 = *(void **)(v0 + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService);
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v2 = static PommesSearchService.shared;
    *(_QWORD *)(v0 + v1) = static PommesSearchService.shared;
    swift_retain_n();
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRetain();
  return v2;
}

uint64_t PommesSearchServiceDelegate.pommesSearchService.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*PommesSearchServiceDelegate.pommesSearchService.modify(void **a1))(_QWORD *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = PommesSearchServiceDelegate.pommesSearchService.getter();
  return PommesSearchServiceDelegate.pommesSearchService.modify;
}

uint64_t PommesSearchServiceDelegate.pommesSearchService.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1] + OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService) = *a1;
  return swift_unknownObjectRelease();
}

id PommesSearchServiceDelegate.listener.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR___PommesSearchXPCServer_listener);
}

id PommesSearchServiceDelegate.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

char *PommesSearchServiceDelegate.init()()
{
  char *v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  void *v8;
  id v9;
  char *v10;
  uint64_t v11;
  void *v12;
  char *v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  objc_super v19;

  *(_QWORD *)&v0[OBJC_IVAR___PommesSearchXPCServer____lazy_storage___pommesSearchService] = 0;
  v1 = one-time initialization token for pommes;
  v2 = v0;
  if (v1 != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C2356000, v4, v5, "PommesSearchServiceDelegate init", v6, 2u);
    MEMORY[0x1C3BBFF64](v6, -1, -1);
  }

  v7 = objc_allocWithZone(MEMORY[0x1E0CB3B58]);
  v8 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000028, 0x80000001C2505190);
  v9 = objc_msgSend(v7, sel_initWithMachServiceName_, v8);

  *(_QWORD *)&v2[OBJC_IVAR___PommesSearchXPCServer_listener] = v9;
  v19.receiver = v2;
  v19.super_class = (Class)type metadata accessor for PommesSearchServiceDelegate();
  v10 = (char *)objc_msgSendSuper2(&v19, sel_init);
  v11 = OBJC_IVAR___PommesSearchXPCServer_listener;
  v12 = *(void **)&v10[OBJC_IVAR___PommesSearchXPCServer_listener];
  v13 = v10;
  objc_msgSend(v12, sel_setDelegate_, v13);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2356000, v14, v15, "PommesSearchService starts listening for new connection", v16, 2u);
    MEMORY[0x1C3BBFF64](v16, -1, -1);
  }

  v17 = *(id *)&v10[v11];
  objc_msgSend(v17, sel_resume);

  return v13;
}

uint64_t type metadata accessor for PommesSearchServiceDelegate()
{
  return objc_opt_self();
}

id PommesSearchServiceDelegate.__deallocating_deinit()
{
  char *v0;
  char *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  objc_super v7;

  v1 = v0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "PommesSearchService stops listening for new connection", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  objc_msgSend(*(id *)&v1[OBJC_IVAR___PommesSearchXPCServer_listener], sel_invalidate);
  v7.receiver = v1;
  v7.super_class = (Class)type metadata accessor for PommesSearchServiceDelegate();
  return objc_msgSendSuper2(&v7, sel_dealloc);
}

Swift::Bool __swiftcall PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)(NSXPCListener _, NSXPCConnection shouldAcceptNewConnection)
{
  return specialized PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)(shouldAcceptNewConnection.super.isa);
}

uint64_t specialized PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  objc_msgSend(a1, sel_processIdentifier);
  v4 = objc_msgSend(a1, sel_serviceName);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  v26 = v6;
  if (os_log_type_enabled(v10, v11))
  {
    v25 = v2;
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v27 = v13;
    *(_DWORD *)v12 = 67240450;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 2080;
    if (v8)
      v14 = v6;
    else
      v14 = 7104878;
    if (v8)
      v15 = v8;
    else
      v15 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v10, v11, "Process [%{public}d] with service name %s is connecting to PommesSearchService", (uint8_t *)v12, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    v16 = v12;
    v2 = v25;
    MEMORY[0x1C3BBFF64](v16, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v17 = objc_msgSend((id)objc_opt_self(), sel_interfaceWithProtocol_, &unk_1EF77C260);
  objc_msgSend(a1, sel_setExportedInterface_, v17);

  objc_msgSend(a1, sel_setExportedObject_, (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v2) + 0x60))());
  swift_unknownObjectRelease();
  objc_msgSend(a1, sel_resume);
  swift_bridgeObjectRetain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v21 = swift_slowAlloc();
    v27 = v21;
    *(_DWORD *)v20 = 67240450;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 8) = 2080;
    if (v8)
      v22 = v26;
    else
      v22 = 7104878;
    if (v8)
      v23 = v8;
    else
      v23 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v23, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v18, v19, "Process [%{public}d] with service name %s is connected to PommesSearchService", (uint8_t *)v20, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v21, -1, -1);
    MEMORY[0x1C3BBFF64](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  return 1;
}

uint64_t sub_1C2422C90@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2422CD0(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x68);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for PommesSearchServiceDelegate()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.pommesSearchService.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.pommesSearchService.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.pommesSearchService.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of PommesSearchServiceDelegate.listener(_:shouldAcceptNewConnection:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t AudioUsoIntent.__allocating_init(userDialogAct:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  void (*v38)(char *, char *, uint64_t);
  NSObject *v39;
  int v40;
  uint8_t *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  void (*v45)(char *, uint64_t);
  uint64_t countAndFlagsBits;
  void *v47;
  void *object;
  Swift::String v49;
  void (*v50)(char *, uint64_t);
  os_log_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  char *v57;
  uint8_t *v58;
  _QWORD v60[2];
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  os_log_t v66;
  uint64_t v67;
  uint64_t v68[5];

  v2 = v1;
  v4 = type metadata accessor for JSONEncodingOptions();
  v64 = *(_QWORD *)(v4 - 8);
  v65 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)v60 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v19 = MEMORY[0x1E0C80A78](v18);
  v66 = (os_log_t)((char *)v60 - v20);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v60 - v21;
  v67 = a1;
  v23 = a1;
  v25 = v24;
  v27 = v26;
  outlined init with copy of MediaUserStateCenter?(v23, (uint64_t)v10, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v10, 1, v25) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v22, v10, v25);
    v34 = v27;
    v35 = v22;
    if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
    {
      v29 = (*(uint64_t (**)(void))(v2 + 1000))();
      outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v25);
      swift_beginAccess();
      *(_BYTE *)(v29 + 138) = 0;
      return v29;
    }
    if ((Siri_Nlu_External_UserDialogAct.hasRejected.getter() & 1) != 0)
    {
      v29 = (*(uint64_t (**)(void))(v2 + 1000))();
      outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v25);
      swift_beginAccess();
      *(_BYTE *)(v29 + 138) = 1;
      return v29;
    }
    if ((Siri_Nlu_External_UserDialogAct.hasCancelled.getter() & 1) != 0)
    {
      v29 = (*(uint64_t (**)(void))(v2 + 1000))();
      outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v25);
      swift_beginAccess();
      *(_BYTE *)(v29 + 138) = 2;
      return v29;
    }
    if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) == 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v37 = type metadata accessor for Logger();
      __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
      v38 = *(void (**)(char *, char *, uint64_t))(v34 + 16);
      v38(v17, v22, v25);
      v39 = Logger.logObject.getter();
      v40 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v39, (os_log_type_t)v40))
      {
        v62 = v40;
        v66 = v39;
        v63 = v35;
        v41 = (uint8_t *)swift_slowAlloc();
        v61 = swift_slowAlloc();
        v68[0] = v61;
        *(_DWORD *)v41 = 136315138;
        JSONEncodingOptions.init()();
        v60[1] = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F4B0], MEMORY[0x1E0D9F488]);
        countAndFlagsBits = Message.jsonString(options:)();
        object = v47;
        (*(void (**)(char *, uint64_t))(v64 + 8))(v7, v65);
        v38(v14, v17, v25);
        if (!object)
        {
          v49 = Message.textFormatString()();
          countAndFlagsBits = v49._countAndFlagsBits;
          object = v49._object;
        }
        v50 = *(void (**)(char *, uint64_t))(v34 + 8);
        v50(v14, v25);
        v68[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v50(v17, v25);
        v51 = v66;
        _os_log_impl(&dword_1C2356000, v66, (os_log_type_t)v62, "AudioUsoIntent#init unexpected userDialogAct %s", v41, 0xCu);
        v52 = v61;
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v52, -1, -1);
        MEMORY[0x1C3BBFF64](v41, -1, -1);

        outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        v50(v63, v25);
      }
      else
      {

        v45 = *(void (**)(char *, uint64_t))(v34 + 8);
        v45(v17, v25);
        outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        v45(v35, v25);
      }
      return 0;
    }
    v63 = v22;
    v36 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    v42 = v36;
    if (v36 >> 62)
    {
      swift_bridgeObjectRetain();
      v53 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      v43 = v63;
      if (v53)
        goto LABEL_22;
    }
    else
    {
      v43 = v63;
      if (*(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10))
      {
LABEL_22:
        if ((v42 & 0xC000000000000001) != 0)
        {
          v44 = MEMORY[0x1C3BBF3F4](0, v42);
          goto LABEL_25;
        }
        if (*(_QWORD *)((v42 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          v44 = *(_QWORD *)(v42 + 32);
          swift_retain();
LABEL_25:
          swift_bridgeObjectRelease();
          v29 = (*(uint64_t (**)(uint64_t))(v2 + 1008))(v44);
          outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v43, v25);
          return v29;
        }
        __break(1u);
LABEL_38:
        swift_once();
LABEL_31:
        v54 = type metadata accessor for Logger();
        __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
        v55 = Logger.logObject.getter();
        v56 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v55, v56))
        {
          v57 = v43;
          v58 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v58 = 0;
          _os_log_impl(&dword_1C2356000, v55, v56, "tasks extracted from the userDialogAct is empty", v58, 2u);
          MEMORY[0x1C3BBFF64](v58, -1, -1);

          outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v57, v25);
        }
        else
        {

          outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
          (*(void (**)(char *, uint64_t))(v34 + 8))(v43, v25);
        }
        return 0;
      }
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes == -1)
      goto LABEL_31;
    goto LABEL_38;
  }
  v28 = outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v29 = (*(uint64_t (**)(uint64_t))(v2 + 1000))(v28);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_1C2356000, v31, v32, "AudioUsoIntent#init received nil userDialogAct", v33, 2u);
    MEMORY[0x1C3BBFF64](v33, -1, -1);
  }

  outlined destroy of MediaUserStateCenter?(v67, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  return v29;
}

uint64_t AudioUsoIntent.UsoNamespace.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1C2423818 + 4 * byte_1C24FDDD0[a1]))(0x616C50616964656DLL, 0xEF6E756F4E726579);
}

unint64_t sub_1C2423818()
{
  return 0xD000000000000012;
}

void sub_1C2423A44()
{
  JUMPOUT(0x1C2423A58);
}

uint64_t sub_1C2423A64()
{
  return 0x64695F6D657469;
}

void *AudioUsoIntent.pegasusAppBundle.unsafeMutableAddressor()
{
  return &static AudioUsoIntent.pegasusAppBundle;
}

unint64_t static AudioUsoIntent.pegasusAppBundle.getter()
{
  return 0xD00000000000001CLL;
}

uint64_t AudioUsoIntent.verb.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 136);
}

uint64_t AudioUsoIntent.baseEntity.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 137);
}

uint64_t AudioUsoIntent.confirmationState.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 138);
}

uint64_t AudioUsoIntent.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  AudioUsoIntent.init()();
  return v0;
}

double AudioUsoIntent.init()()
{
  uint64_t v0;
  double result;

  *(_QWORD *)(v0 + 128) = 0;
  result = 0.0;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_WORD *)(v0 + 136) = 529;
  *(_BYTE *)(v0 + 138) = 4;
  *(_OWORD *)(v0 + 144) = xmmword_1C24FE160;
  *(int64x2_t *)(v0 + 160) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v0 + 176) = 0;
  *(_WORD *)(v0 + 184) = 7453;
  *(_OWORD *)(v0 + 192) = xmmword_1C24FE160;
  *(_OWORD *)(v0 + 208) = 0u;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_OWORD *)(v0 + 256) = 0u;
  *(_QWORD *)(v0 + 272) = 0;
  *(_BYTE *)(v0 + 280) = 4;
  *(_QWORD *)(v0 + 288) = 1;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(_QWORD *)(v0 + 344) = 1;
  *(_OWORD *)(v0 + 352) = 0u;
  *(_OWORD *)(v0 + 368) = 0u;
  *(_WORD *)(v0 + 384) = 2572;
  *(_QWORD *)(v0 + 392) = 0;
  *(_BYTE *)(v0 + 400) = 3;
  *(_QWORD *)(v0 + 416) = 0;
  *(_QWORD *)(v0 + 424) = 0;
  *(_QWORD *)(v0 + 408) = 0;
  *(_BYTE *)(v0 + 432) = 3;
  *(_QWORD *)(v0 + 440) = 0;
  *(_WORD *)(v0 + 448) = 256;
  *(_QWORD *)(v0 + 456) = 0;
  *(_QWORD *)(v0 + 464) = 0;
  return result;
}

uint64_t AudioUsoIntent.__allocating_init(task:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AudioUsoIntent.init(task:)(a1);
  return v2;
}

uint64_t AudioUsoIntent.init(task:)(uint64_t a1)
{
  uint64_t v1;
  char v2;
  uint64_t v3;
  void *v4;
  void *v5;
  Swift::String v6;
  Swift::Int v7;
  char v8;
  char v9;
  uint64_t v11;
  _BYTE v12[24];
  uint64_t v13;
  _BYTE v14[32];

  *(_OWORD *)(v1 + 16) = 0u;
  *(_WORD *)(v1 + 136) = 529;
  *(_QWORD *)(v1 + 128) = 0;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_BYTE *)(v1 + 138) = 4;
  *(_OWORD *)(v1 + 144) = xmmword_1C24FE160;
  *(int64x2_t *)(v1 + 160) = vdupq_n_s64(1uLL);
  *(_QWORD *)(v1 + 176) = 0;
  *(_WORD *)(v1 + 184) = 7453;
  *(_OWORD *)(v1 + 192) = xmmword_1C24FE160;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(_OWORD *)(v1 + 256) = 0u;
  *(_QWORD *)(v1 + 272) = 0;
  *(_BYTE *)(v1 + 280) = 4;
  *(_QWORD *)(v1 + 288) = 1;
  *(_OWORD *)(v1 + 296) = 0u;
  *(_OWORD *)(v1 + 312) = 0u;
  *(_OWORD *)(v1 + 328) = 0u;
  *(_QWORD *)(v1 + 344) = 1;
  *(_OWORD *)(v1 + 352) = 0u;
  *(_OWORD *)(v1 + 368) = 0u;
  *(_WORD *)(v1 + 384) = 2572;
  *(_QWORD *)(v1 + 392) = 0;
  *(_BYTE *)(v1 + 400) = 3;
  *(_QWORD *)(v1 + 416) = 0;
  *(_QWORD *)(v1 + 424) = 0;
  *(_QWORD *)(v1 + 408) = 0;
  *(_BYTE *)(v1 + 432) = 3;
  *(_QWORD *)(v1 + 440) = 0;
  *(_WORD *)(v1 + 448) = 256;
  *(_QWORD *)(v1 + 456) = 0;
  *(_QWORD *)(v1 + 464) = 0;
  if (a1)
  {
    *(_QWORD *)(v1 + 144) = a1;
    swift_retain_n();
    UsoTask.verbString.getter();
    v2 = specialized CommonAudio.Verb.init(rawValue:)();
    swift_beginAccess();
    *(_BYTE *)(v1 + 136) = v2;
    v3 = UsoTask.baseEntityAsString.getter();
    v5 = v4;
    v6._countAndFlagsBits = v3;
    v6._object = v5;
    v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of CommonAudio.UsoEntity.init(rawValue:), v6);
    swift_bridgeObjectRelease();
    if (v7 == 1)
      v8 = 1;
    else
      v8 = 2;
    if (v7)
      v9 = v8;
    else
      v9 = 0;
    swift_beginAccess();
    *(_BYTE *)(v1 + 137) = v9;
    swift_retain();
    static UsoTask_CodegenConverter.convert(task:)();
    swift_release_n();
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_play_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 16) = v11;
LABEL_67:
        swift_release();
        return v1;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_play_uso_NoEntity();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 24) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_resume_uso_NoEntity();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 32) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_update_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 40) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_summarise_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 48) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_request_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 56) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_subscribe_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 64) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_follow_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 72) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_start_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 80) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_noVerb_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 88) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_noVerb_common_App();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 96) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_like_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 104) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_unlike_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 112) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v13)
    {
      type metadata accessor for UsoTask_shuffle_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
        *(_QWORD *)(v1 + 120) = v11;
        goto LABEL_67;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
    }
    outlined init with take of Any?((uint64_t)v14, (uint64_t)v12);
    if (!v13)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for Any?);
      return v1;
    }
    type metadata accessor for UsoTask_repeat_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      *(_QWORD *)(v1 + 128) = v11;
      goto LABEL_67;
    }
  }
  return v1;
}

uint64_t AudioUsoIntent.referenceMediaItem.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[19];
  v2 = v1;
  if (v1 == 1)
  {
    v2 = closure #1 in AudioUsoIntent.referenceMediaItem.getter(v0);
    v3 = v0[19];
    v0[19] = v2;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v3);
  }
  outlined copy of UsoEntity_common_DateTime??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.referenceMediaItem.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  if (a1[2])
    goto LABEL_2;
  if (!a1[3] && !a1[4])
  {
    if (a1[5])
    {
      v3 = swift_retain();
      MEMORY[0x1C3BBD1D4](&v4, v3);
      goto LABEL_3;
    }
    if (!a1[6])
    {
      if (a1[7] || a1[8] || a1[9])
        goto LABEL_16;
      if (!a1[10])
      {
        if (a1[11])
          goto LABEL_16;
        if (a1[12])
          return 0;
        if (a1[13] || a1[14])
        {
LABEL_16:
          swift_retain();
          dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
          goto LABEL_3;
        }
        if (!a1[15] && !a1[16])
          return 0;
      }
    }
LABEL_2:
    v1 = swift_retain();
    MEMORY[0x1C3BBD204](&v4, v1);
LABEL_3:
    swift_release();
    return v4;
  }
  return 0;
}

uint64_t AudioUsoIntent.userEntities.getter()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = v0[20];
  v2 = v1;
  if (v1 == 1)
  {
    v2 = closure #1 in AudioUsoIntent.userEntities.getter(v0);
    v3 = v0[20];
    v0[20] = v2;
    swift_bridgeObjectRetain();
    outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v3);
  }
  outlined copy of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.userEntities.getter(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (a1[2] || a1[3] || a1[4])
    goto LABEL_4;
  if (a1[5])
  {
LABEL_17:
    swift_retain();
    v2 = dispatch thunk of Uso_VerbTemplate_NoVerb.userEntities.getter();
    goto LABEL_5;
  }
  if (!a1[6])
  {
    if (a1[7] || a1[8] || a1[9])
      goto LABEL_17;
    if (!a1[10])
    {
      if (!a1[11] && !a1[12] && !a1[13] && !a1[14])
      {
        if (!a1[15] && !a1[16])
          return 0;
        goto LABEL_4;
      }
      goto LABEL_17;
    }
  }
LABEL_4:
  v1 = swift_retain();
  v2 = MEMORY[0x1C3BBD1F8](v1);
LABEL_5:
  v3 = v2;
  swift_release();
  return v3;
}

uint64_t AudioUsoIntent.targetMediaItem.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  v1 = v0;
  v2 = *(_QWORD *)(v0 + 168);
  v3 = v2;
  if (v2 == 1)
  {
    v3 = *(_QWORD *)(v1 + 40);
    if (v3)
    {
      swift_retain();
      dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
      swift_release();
      v3 = v6;
      v4 = *(_QWORD *)(v1 + 168);
    }
    else
    {
      v4 = 1;
    }
    *(_QWORD *)(v1 + 168) = v3;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v4);
  }
  outlined copy of UsoEntity_common_DateTime??(v2);
  return v3;
}

uint64_t AudioUsoIntent.rootItems.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 176))
  {
    v1 = *(_QWORD *)(v0 + 176);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.rootItems.getter();
    *(_QWORD *)(v0 + 176) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.rootItems.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x1E0DEE9D8];
  if (AudioUsoIntent.referenceMediaItem.getter())
  {
    v0 = swift_retain();
    MEMORY[0x1C3BBEE78](v0);
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  if (AudioUsoIntent.targetMediaItem.getter())
  {
    v1 = swift_retain();
    MEMORY[0x1C3BBEE78](v1);
    if (*(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    swift_release();
  }
  return v3;
}

uint64_t AudioUsoIntent.mediaType.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 184);
  if ((_DWORD)result == 29)
  {
    result = closure #1 in AudioUsoIntent.mediaType.getter();
    *(_BYTE *)(v0 + 184) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.mediaType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v10 - v4;
  if (AudioUsoIntent.referenceMediaItem.getter())
  {
    if (MEMORY[0x1C3BBCF1C]())
    {
      MEMORY[0x1C3BBD09C]();
      swift_release();
    }
    else
    {
      v6 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v5, 1, 1, v6);
    }
LABEL_11:
    v7 = specialized static CommonAudio.MediaType.from(_:)((uint64_t)v5);
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    return v7;
  }
  if (AudioUsoIntent.targetMediaItem.getter())
  {
    if (MEMORY[0x1C3BBCF1C]())
    {
      MEMORY[0x1C3BBD09C]();
      swift_release();
    }
    else
    {
      v8 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v3, 1, 1, v8);
    }
    v5 = v3;
    goto LABEL_11;
  }
  return 28;
}

uint64_t AudioUsoIntent.targetMediaType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = *(unsigned __int8 *)(v0 + 185);
  if ((_DWORD)v5 == 29)
  {
    if (AudioUsoIntent.targetMediaItem.getter())
    {
      if (MEMORY[0x1C3BBCF1C]())
      {
        MEMORY[0x1C3BBD09C]();
        swift_release();
      }
      else
      {
        v6 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 56))(v4, 1, 1, v6);
      }
      v5 = specialized static CommonAudio.MediaType.from(_:)((uint64_t)v4);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    }
    else
    {
      v5 = 28;
    }
    *(_BYTE *)(v1 + 185) = v5;
  }
  return v5;
}

uint64_t AudioUsoIntent.entities.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 192))
  {
    v1 = *(_QWORD *)(v0 + 192);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.entities.getter();
    *(_QWORD *)(v0 + 192) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.entities.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.entities.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.entities.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _BOOL4 v5;
  uint64_t v6;
  uint64_t result;

  v0 = MEMORY[0x1C3BBCF40]();
  if (v1)
  {
    v2 = v0;
    v3 = v1;
    swift_bridgeObjectRelease();
    v4 = HIBYTE(v3) & 0xF;
    if ((v3 & 0x2000000000000000) == 0)
      v4 = v2 & 0xFFFFFFFFFFFFLL;
    v5 = v4 != 0;
  }
  else
  {
    v5 = 0;
  }
  v6 = *(_QWORD *)(dispatch thunk of CodeGenBase.usoIdentifiers.getter() + 16);
  swift_bridgeObjectRelease();
  result = 0;
  if (v5 && !v6)
  {
    if (MEMORY[0x1C3BBCF1C](0))
    {
      swift_release();
      return 0;
    }
    else
    {
      return 1;
    }
  }
  return result;
}

uint64_t AudioUsoIntent.resolvedReference.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 200);
  v2 = v1;
  if (v1 == 1)
  {
    v2 = closure #1 in AudioUsoIntent.resolvedReference.getter();
    v3 = *(_QWORD *)(v0 + 200);
    *(_QWORD *)(v0 + 200) = v2;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v3);
  }
  outlined copy of UsoEntity_common_DateTime??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.resolvedReference.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = v0;
  if (v0 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      v4 = MEMORY[0x1E0DEE9D8];
      do
      {
        v5 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x1C3BBF3F4](v3 - 4, v1);
          v7 = v3 - 3;
          if (__OFADD__(v5, 1))
            goto LABEL_13;
        }
        else
        {
          v6 = *(_QWORD *)(v1 + 8 * v3);
          swift_retain();
          v7 = v3 - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        v8 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v4, v6);
        swift_release();
        if (v8)
          goto LABEL_12;
        ++v3;
      }
      while (v7 != v2);
    }
  }
  v8 = 0;
LABEL_12:
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t AudioUsoIntent.disambiguationEntities.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  if (*(_QWORD *)(v0 + 208))
  {
    v1 = *(_QWORD *)(v0 + 208);
  }
  else
  {
    v2 = AudioUsoIntent.rootItems.getter();
    v1 = specialized Sequence.flatMap<A>(_:)(v2, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.disambiguationEntities.getter, 0);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 208) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

BOOL closure #1 in closure #1 in AudioUsoIntent.disambiguationEntities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BOOL4 v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  void (*v18)(char *, unint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  void (*v26)(char *, uint64_t);
  uint64_t v28;
  _BOOL4 v29;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v28 - v6;
  v8 = MEMORY[0x1C3BBCF40](v5);
  if (v9)
  {
    v10 = v8;
    v11 = v9;
    swift_bridgeObjectRelease();
    v12 = HIBYTE(v11) & 0xF;
    if ((v11 & 0x2000000000000000) == 0)
      v12 = v10 & 0xFFFFFFFFFFFFLL;
    v13 = v12 == 0;
  }
  else
  {
    v13 = 1;
  }
  v14 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v29 = v13;
  v16 = v14 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  v17 = *(_QWORD *)(v1 + 72);
  v18 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
  v28 = v14;
  swift_bridgeObjectRetain();
  while (1)
  {
    v18(v7, v16, v0);
    v21 = UsoIdentifier.namespace.getter();
    if (!v22)
    {
      v18(v4, (unint64_t)v7, v0);
LABEL_19:
      v25 = *(void (**)(char *, uint64_t))(v1 + 8);
      v25(v4, v0);
      v25(v7, v0);
      goto LABEL_9;
    }
    if (v21 == 1701605234 && v22 == 0xE400000000000000)
    {
      swift_bridgeObjectRelease();
      v18(v4, (unint64_t)v7, v0);
    }
    else
    {
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v18(v4, (unint64_t)v7, v0);
      if ((v23 & 1) == 0)
        goto LABEL_19;
    }
    if (UsoIdentifier.value.getter() == 0x6769626D61736964 && v24 == 0xEE006E6F69746175)
      break;
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v20 = *(void (**)(char *, uint64_t))(v1 + 8);
    v20(v4, v0);
    v20(v7, v0);
    if ((v19 & 1) != 0)
      goto LABEL_22;
LABEL_9:
    v16 += v17;
    if (!--v15)
    {
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  swift_bridgeObjectRelease();
  v26 = *(void (**)(char *, uint64_t))(v1 + 8);
  v26(v4, v0);
  v26(v7, v0);
LABEL_22:
  swift_bridgeObjectRelease_n();
  return !v29;
}

uint64_t AudioUsoIntent.apps.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 216))
  {
    v1 = *(_QWORD *)(v0 + 216);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.apps.getter(v0);
    *(_QWORD *)(v0 + 216) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.apps.getter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if (*(_QWORD *)(a1 + 96))
  {
    swift_retain();
    dispatch thunk of Uso_VerbTemplate_NoVerb.entity.getter();
    swift_release();
    if (v10)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v1 = swift_allocObject();
      *(_OWORD *)(v1 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v1 + 32) = v10;
      v11 = v1;
      specialized Array._endMutation()();
      return v11;
    }
  }
  v3 = AudioUsoIntent.rootItems.getter();
  v4 = v3;
  v12 = MEMORY[0x1E0DEE9D8];
  if (!(v3 >> 62))
  {
    v5 = *(_QWORD *)((v3 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v5)
      goto LABEL_6;
LABEL_18:
    swift_bridgeObjectRelease();
    v2 = MEMORY[0x1E0DEE9D8];
LABEL_19:
    swift_bridgeObjectRelease();
    return v2;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v5 = result;
  if (!result)
    goto LABEL_18;
LABEL_6:
  if (v5 >= 1)
  {
    for (i = 0; i != v5; ++i)
    {
      if ((v4 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](i, v4);
      else
        swift_retain();
      v8 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      v9 = swift_release();
      if (v8)
      {
        MEMORY[0x1C3BBEE78](v9);
        if (*(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
    }
    swift_bridgeObjectRelease();
    v2 = v12;
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t AudioUsoIntent.artists.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 224))
  {
    v1 = *(_QWORD *)(v0 + 224);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.artists.getter();
    *(_QWORD *)(v0 + 224) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.artists.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.artists.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.artists.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, unint64_t, uint64_t);
  char v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(char *, uint64_t);
  void (*v45)(char *, uint64_t);
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  char v50;
  void (*v51)(uint64_t, uint64_t);
  _QWORD v53[2];
  _BOOL4 v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  const char *v65;
  const char *v66;
  uint64_t v67;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v61 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v53[0] = (char *)v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v58);
  v5 = (char *)v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v59 = (char *)v53 - v11;
  MEMORY[0x1E0C80A78](v10);
  v60 = (char *)v53 - v12;
  v13 = type metadata accessor for UsoIdentifier();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)v53 - v19;
  v63 = a1;
  v21 = MEMORY[0x1C3BBCF40](v18);
  v55 = v9;
  if (v22)
  {
    v23 = v21;
    v24 = v22;
    swift_bridgeObjectRelease();
    v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v25 = v23 & 0xFFFFFFFFFFFFLL;
    v26 = v25 == 0;
  }
  else
  {
    v26 = 1;
  }
  v27 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
    v39 = swift_bridgeObjectRelease();
LABEL_23:
    v41 = (uint64_t)v60;
    v40 = v61;
    v42 = (uint64_t)v59;
    if (!v26)
    {
      v43 = 1;
      goto LABEL_30;
    }
    return 0;
  }
  v54 = v26;
  v56 = v5;
  v57 = v2;
  v29 = v27 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v67 = *(_QWORD *)(v14 + 72);
  v30 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
  v53[1] = v27;
  swift_bridgeObjectRetain();
  v65 = "appPlaylistTitle";
  v62 = 0x80000001C2501990;
  v66 = "appAudiobookTitle";
  v64 = 0x80000001C25019D0;
  while (1)
  {
    v30(v20, v29, v13);
    v33 = UsoIdentifier.namespace.getter();
    if (!v34)
    {
      v30(v17, (unint64_t)v20, v13);
      goto LABEL_16;
    }
    if (v33 == 0xD000000000000012 && v34 == v64)
      break;
    v35 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v30(v17, (unint64_t)v20, v13);
    if ((v35 & 1) != 0)
      goto LABEL_26;
LABEL_16:
    v36 = UsoIdentifier.namespace.getter();
    if (v37)
    {
      if (v36 == 0xD000000000000012 && v37 == v62)
      {
        v45 = *(void (**)(char *, uint64_t))(v14 + 8);
        v45(v17, v13);
        swift_bridgeObjectRelease();
        v45(v20, v13);
        goto LABEL_28;
      }
      v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v32 = *(void (**)(char *, uint64_t))(v14 + 8);
      v32(v17, v13);
      swift_bridgeObjectRelease();
      v32(v20, v13);
      if ((v31 & 1) != 0)
        goto LABEL_28;
    }
    else
    {
      v38 = *(void (**)(char *, uint64_t))(v14 + 8);
      v38(v17, v13);
      v38(v20, v13);
    }
    v29 += v67;
    if (!--v28)
    {
      v39 = swift_bridgeObjectRelease_n();
      v5 = v56;
      v2 = v57;
      LOBYTE(v26) = v54;
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease();
  v30(v17, (unint64_t)v20, v13);
LABEL_26:
  v44 = *(void (**)(char *, uint64_t))(v14 + 8);
  v44(v17, v13);
  v44(v20, v13);
LABEL_28:
  v39 = swift_bridgeObjectRelease_n();
  v5 = v56;
  v2 = v57;
  v41 = (uint64_t)v60;
  v40 = v61;
  v42 = (uint64_t)v59;
  if (v54)
    return 0;
  v43 = 0;
LABEL_30:
  if (MEMORY[0x1C3BBCF1C](v39))
  {
    MEMORY[0x1C3BBD09C]();
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, 1, 1, v2);
  }
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v40 + 104))(v42, *MEMORY[0x1E0DA1DC0], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v2);
  v46 = (uint64_t)&v5[*(int *)(v58 + 48)];
  outlined init with copy of MediaUserStateCenter?(v41, (uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v42, v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  if (v47((uint64_t)v5, 1, v2) != 1)
  {
    v48 = (uint64_t)v55;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v55, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v47(v46, 1, v2) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v48, v2);
      goto LABEL_38;
    }
    v49 = v53[0];
    (*(void (**)(_QWORD, uint64_t, uint64_t))(v40 + 32))(v53[0], v46, v2);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
    v50 = dispatch thunk of static Equatable.== infix(_:_:)();
    v51 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
    v51(v49, v2);
    outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    v51(v48, v2);
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if ((v50 & 1) != 0)
      return v43;
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v42, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v47(v46, 1, v2) != 1)
  {
LABEL_38:
    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v43;
}

uint64_t AudioUsoIntent.albums.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 232))
  {
    v1 = *(_QWORD *)(v0 + 232);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.albums.getter();
    *(_QWORD *)(v0 + 232) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.albums.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.albums.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.albums.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E0DA1D98]);
}

_QWORD *AudioUsoIntent.appPlaylistTitles.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 240))
  {
    v1 = *(_QWORD **)(v0 + 240);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.appPlaylistTitles.getter();
    *(_QWORD *)(v0 + 240) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *closure #1 in AudioUsoIntent.appPlaylistTitles.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  const char *v81;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v67 = (char *)&v60 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v60 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v60 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v66 = (char *)&v60 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v60 - v18;
  v20 = AudioUsoIntent.rootItems.getter();
  v21 = specialized Sequence.flatMap<A>(_:)(v20, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.appPlaylistTitles.getter, 0);
  swift_bridgeObjectRelease();
  v68 = v21;
  if (v21 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    v21 = v68;
    v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23)
      goto LABEL_3;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v23 = v22;
    if (v22)
    {
LABEL_3:
      v24 = 0;
      v65 = v21 & 0xC000000000000001;
      v61 = v21 + 32;
      v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v63 = v12;
      v81 = "notebookFolderTitle";
      v79 = 0x80000001C2501970;
      v80 = "resolved_reference_source";
      v78 = 0x80000001C25022A0;
      v70 = v15;
      v71 = v19;
      v64 = v23;
      while (1)
      {
        if (v65)
        {
          v12 = (char *)MEMORY[0x1C3BBF3F4](v24, v21);
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
            goto LABEL_50;
        }
        else
        {
          v12 = *(char **)(v61 + 8 * v24);
          swift_retain();
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
          {
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
        }
        v74 = v27;
        v28 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v29 = *(_QWORD *)(v28 + 16);
        v76 = v28;
        v77 = v12;
        if (!v29)
        {
LABEL_22:
          v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
          v72(v19, 1, 1, v0);
          v36 = (uint64_t)v66;
          v24 = v74;
          goto LABEL_24;
        }
        v30 = v28 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v31 = *(_QWORD *)(v1 + 72);
        v32 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v32(v8, v30, v0);
        while (1)
        {
          v34 = UsoIdentifier.namespace.getter();
          if (!v35)
            goto LABEL_15;
          if (v34 == 0xD000000000000012 && v35 == v78)
            break;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_23;
LABEL_15:
          (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
          v30 += v31;
          if (!--v29)
          {
            swift_bridgeObjectRelease();
            v15 = v70;
            v19 = v71;
            goto LABEL_22;
          }
          v32(v8, v30, v0);
        }
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        v19 = v71;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v71, v8, v0);
        v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
        v72(v19, 0, 1, v0);
        v15 = v70;
        v36 = (uint64_t)v66;
        v24 = v74;
LABEL_24:
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v36, &demangling cache variable for type metadata for UsoIdentifier?);
        v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
        if (v73(v36, 1, v0) == 1)
        {
          v69 = 0;
          v76 = 0;
        }
        else
        {
          v37 = v36;
          v38 = v67;
          (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v37, v0);
          v69 = UsoIdentifier.value.getter();
          v76 = v39;
          (*(void (**)(char *, uint64_t))(v1 + 8))(v38, v0);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for UsoIdentifier?);
        v40 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v41 = *(_QWORD *)(v40 + 16);
        v75 = v40;
        if (!v41)
        {
          v48 = 1;
          v49 = (uint64_t)v63;
          v19 = v71;
          goto LABEL_40;
        }
        v42 = v40 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v43 = *(_QWORD *)(v1 + 72);
        v44 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v44(v4, v42, v0);
        while (2)
        {
          v46 = UsoIdentifier.namespace.getter();
          if (!v47)
            goto LABEL_30;
          if (v46 != 0xD000000000000010 || v47 != v79)
          {
            v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v45 & 1) != 0)
              goto LABEL_38;
LABEL_30:
            (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
            v42 += v43;
            if (!--v41)
            {
              swift_bridgeObjectRelease();
              v48 = 1;
              v49 = (uint64_t)v63;
              v15 = v70;
              goto LABEL_39;
            }
            v44(v4, v42, v0);
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
LABEL_38:
        swift_bridgeObjectRelease();
        v15 = v70;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v70, v4, v0);
        v48 = 0;
        v49 = (uint64_t)v63;
LABEL_39:
        v19 = v71;
        v24 = v74;
LABEL_40:
        v72(v15, v48, 1, v0);
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v15, v49, &demangling cache variable for type metadata for UsoIdentifier?);
        if (v73(v49, 1, v0) == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_5:
          swift_release();
          swift_bridgeObjectRelease();
          v21 = v68;
          v25 = v64;
          goto LABEL_6;
        }
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v49, v0);
        v51 = UsoIdentifier.value.getter();
        v53 = v52;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v50, v0);
        outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
        if (!v76 || !v53)
          goto LABEL_5;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
        v55 = v62[2];
        v54 = v62[3];
        v25 = v64;
        if (v55 >= v54 >> 1)
        {
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v62);
          v25 = v64;
        }
        v56 = v62;
        v62[2] = v55 + 1;
        v57 = &v56[4 * v55];
        v57[4] = v51;
        v57[5] = v53;
        v15 = v70;
        v58 = v76;
        v57[6] = v69;
        v57[7] = v58;
        v21 = v68;
LABEL_6:
        if (v24 == v25)
          goto LABEL_53;
      }
    }
  }
  v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_53:
  swift_bridgeObjectRelease_n();
  return v62;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appPlaylistTitles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v44[0] = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v49);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v53 = (uint64_t)v44 - v12;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)v44 - v13;
  v14 = type metadata accessor for UsoIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1C3BBCF40](v16);
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    swift_bridgeObjectRelease();
    v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v23 = v21 & 0xFFFFFFFFFFFFLL;
    v24 = v23 == 0;
  }
  else
  {
    v24 = 1;
  }
  v50 = v24;
  v51 = a1;
  v25 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v33 = swift_bridgeObjectRelease();
LABEL_17:
    v34 = (uint64_t)v52;
    v35 = v53;
    if (v50)
      return 0;
    v36 = 0;
    if (!MEMORY[0x1C3BBCF1C](v33))
      goto LABEL_22;
LABEL_19:
    MEMORY[0x1C3BBD09C]();
    swift_release();
    goto LABEL_23;
  }
  v45 = v10;
  v46 = v3;
  v47 = v6;
  v48 = v2;
  v27 = v25 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v28 = *(_QWORD *)(v15 + 72);
  v29 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  v44[1] = v25;
  swift_bridgeObjectRetain();
  v54 = 0x80000001C2501970;
  while (1)
  {
    v29(v18, v27, v14);
    v31 = UsoIdentifier.namespace.getter();
    if (!v32)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      goto LABEL_9;
    }
    if (v31 == 0xD000000000000010 && v32 == v54)
      break;
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if ((v30 & 1) != 0)
      goto LABEL_20;
LABEL_9:
    v27 += v28;
    if (!--v26)
    {
      v33 = swift_bridgeObjectRelease_n();
      v6 = v47;
      v2 = v48;
      v10 = v45;
      v3 = v46;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
LABEL_20:
  v37 = swift_bridgeObjectRelease_n();
  v6 = v47;
  v2 = v48;
  v10 = v45;
  v3 = v46;
  v34 = (uint64_t)v52;
  v35 = v53;
  if (v50)
    return 0;
  v36 = 1;
  if (MEMORY[0x1C3BBCF1C](v37))
    goto LABEL_19;
LABEL_22:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v34, 1, 1, v2);
LABEL_23:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E0DA1E10], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  v38 = (uint64_t)&v6[*(int *)(v49 + 48)];
  outlined init with copy of MediaUserStateCenter?(v34, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      v40 = v44[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v44[0], v38, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v42 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v42(v40, v2);
      outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v42((uint64_t)v10, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v41 & 1) != 0)
        return v36;
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
LABEL_28:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1)
    goto LABEL_28;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v36;
}

_QWORD *AudioUsoIntent.appShowTitles.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 248))
  {
    v1 = *(_QWORD **)(v0 + 248);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.appShowTitles.getter();
    *(_QWORD *)(v0 + 248) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *closure #1 in AudioUsoIntent.appShowTitles.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  unint64_t v59;
  _QWORD *v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  char *v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  char *v68;
  char *v69;
  void (*v70)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v71)(uint64_t, uint64_t, uint64_t);
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v65 = (char *)&v59 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v59 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v59 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v64 = (char *)&v59 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v59 - v18;
  v20 = AudioUsoIntent.rootItems.getter();
  v21 = specialized Sequence.flatMap<A>(_:)(v20, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.appShowTitles.getter, 0);
  swift_bridgeObjectRelease();
  v66 = v21;
  if (v21 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    v21 = v66;
    v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23)
      goto LABEL_3;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v23 = v22;
    if (v22)
    {
LABEL_3:
      v24 = 0;
      v63 = v21 & 0xC000000000000001;
      v59 = v21 + 32;
      v60 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v61 = v12;
      v68 = v15;
      v69 = v19;
      v62 = v23;
      while (1)
      {
        if (v63)
        {
          v12 = (char *)MEMORY[0x1C3BBF3F4](v24, v21);
          v25 = __OFADD__(v24, 1);
          v26 = v24 + 1;
          if (v25)
            goto LABEL_50;
        }
        else
        {
          v12 = *(char **)(v59 + 8 * v24);
          swift_retain();
          v25 = __OFADD__(v24, 1);
          v26 = v24 + 1;
          if (v25)
          {
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
        }
        v72 = v26;
        v27 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v28 = *(_QWORD *)(v27 + 16);
        v74 = v27;
        v75 = v12;
        if (!v28)
        {
LABEL_22:
          v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
          v70(v19, 1, 1, v0);
          v35 = (uint64_t)v64;
          v24 = v72;
          goto LABEL_24;
        }
        v29 = v27 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v30 = *(_QWORD *)(v1 + 72);
        v31 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v31(v8, v29, v0);
        while (1)
        {
          v33 = UsoIdentifier.namespace.getter();
          if (!v34)
            goto LABEL_15;
          if (v33 == 0x54776F6853707061 && v34 == 0xEE006449656C7469)
            break;
          v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v32 & 1) != 0)
            goto LABEL_23;
LABEL_15:
          (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
          v29 += v30;
          if (!--v28)
          {
            swift_bridgeObjectRelease();
            v15 = v68;
            v19 = v69;
            goto LABEL_22;
          }
          v31(v8, v29, v0);
        }
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        v19 = v69;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v69, v8, v0);
        v70 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
        v70(v19, 0, 1, v0);
        v15 = v68;
        v35 = (uint64_t)v64;
        v24 = v72;
LABEL_24:
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v35, &demangling cache variable for type metadata for UsoIdentifier?);
        v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
        if (v71(v35, 1, v0) == 1)
        {
          v67 = 0;
          v74 = 0;
        }
        else
        {
          v36 = v35;
          v37 = v65;
          (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v65, v36, v0);
          v67 = UsoIdentifier.value.getter();
          v74 = v38;
          (*(void (**)(char *, uint64_t))(v1 + 8))(v37, v0);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for UsoIdentifier?);
        v39 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v40 = *(_QWORD *)(v39 + 16);
        v73 = v39;
        if (!v40)
        {
          v47 = 1;
          v48 = (uint64_t)v61;
          v19 = v69;
          goto LABEL_40;
        }
        v41 = v39 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v42 = *(_QWORD *)(v1 + 72);
        v43 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v43(v4, v41, v0);
        while (2)
        {
          v45 = UsoIdentifier.namespace.getter();
          if (!v46)
            goto LABEL_30;
          if (v45 != 0x54776F6853707061 || v46 != 0xEC000000656C7469)
          {
            v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v44 & 1) != 0)
              goto LABEL_38;
LABEL_30:
            (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
            v41 += v42;
            if (!--v40)
            {
              swift_bridgeObjectRelease();
              v47 = 1;
              v48 = (uint64_t)v61;
              v15 = v68;
              goto LABEL_39;
            }
            v43(v4, v41, v0);
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
LABEL_38:
        swift_bridgeObjectRelease();
        v15 = v68;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v68, v4, v0);
        v47 = 0;
        v48 = (uint64_t)v61;
LABEL_39:
        v19 = v69;
        v24 = v72;
LABEL_40:
        v70(v15, v47, 1, v0);
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v15, v48, &demangling cache variable for type metadata for UsoIdentifier?);
        if (v71(v48, 1, v0) == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_5:
          swift_release();
          swift_bridgeObjectRelease();
          v21 = v66;
          goto LABEL_6;
        }
        v49 = v65;
        (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v65, v48, v0);
        v50 = UsoIdentifier.value.getter();
        v52 = v51;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v49, v0);
        outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
        if (!v74 || !v52)
          goto LABEL_5;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v60[2] + 1, 1, v60);
        v54 = v60[2];
        v53 = v60[3];
        if (v54 >= v53 >> 1)
          v60 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v53 > 1), v54 + 1, 1, v60);
        v55 = v60;
        v60[2] = v54 + 1;
        v56 = &v55[4 * v54];
        v56[4] = v50;
        v56[5] = v52;
        v15 = v68;
        v57 = v74;
        v56[6] = v67;
        v56[7] = v57;
        v21 = v66;
LABEL_6:
        if (v24 == v62)
          goto LABEL_53;
      }
    }
  }
  v60 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_53:
  swift_bridgeObjectRelease_n();
  return v60;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appShowTitles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  char *v40;
  char v41;
  void (*v42)(char *, uint64_t);
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v44 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v49);
  v6 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v53 = (uint64_t)&v44 - v12;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)&v44 - v13;
  v14 = type metadata accessor for UsoIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1C3BBCF40](v16);
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    swift_bridgeObjectRelease();
    v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v23 = v21 & 0xFFFFFFFFFFFFLL;
    v24 = v23 == 0;
  }
  else
  {
    v24 = 1;
  }
  v50 = v24;
  v51 = a1;
  v25 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v33 = swift_bridgeObjectRelease();
LABEL_17:
    v34 = (uint64_t)v52;
    v35 = v53;
    if (v50)
      return 0;
    v36 = 0;
    if (!MEMORY[0x1C3BBCF1C](v33))
      goto LABEL_22;
LABEL_19:
    MEMORY[0x1C3BBD09C]();
    swift_release();
    goto LABEL_23;
  }
  v45 = v10;
  v46 = v3;
  v47 = v6;
  v48 = v2;
  v27 = v25 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v28 = *(_QWORD *)(v15 + 72);
  v29 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v29(v18, v27, v14);
    v31 = UsoIdentifier.namespace.getter();
    if (!v32)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      goto LABEL_9;
    }
    if (v31 == 0x54776F6853707061 && v32 == 0xEC000000656C7469)
      break;
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if ((v30 & 1) != 0)
      goto LABEL_20;
LABEL_9:
    v27 += v28;
    if (!--v26)
    {
      v33 = swift_bridgeObjectRelease_n();
      v6 = v47;
      v2 = v48;
      v10 = v45;
      v3 = v46;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
LABEL_20:
  v37 = swift_bridgeObjectRelease_n();
  v6 = v47;
  v2 = v48;
  v10 = v45;
  v3 = v46;
  v34 = (uint64_t)v52;
  v35 = v53;
  if (v50)
    return 0;
  v36 = 1;
  if (MEMORY[0x1C3BBCF1C](v37))
    goto LABEL_19;
LABEL_22:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v34, 1, 1, v2);
LABEL_23:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E0DA1D88], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  v38 = (uint64_t)&v6[*(int *)(v49 + 48)];
  outlined init with copy of MediaUserStateCenter?(v34, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      v40 = v44;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v44, v38, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v42 = *(void (**)(char *, uint64_t))(v3 + 8);
      v42(v40, v2);
      outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v42(v10, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v41 & 1) != 0)
        return v36;
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
LABEL_28:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1)
    goto LABEL_28;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v36;
}

_QWORD *AudioUsoIntent.appAudiobookTitles.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 256))
  {
    v1 = *(_QWORD **)(v0 + 256);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.appAudiobookTitles.getter();
    *(_QWORD *)(v0 + 256) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *closure #1 in AudioUsoIntent.appAudiobookTitles.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  const char *v81;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v67 = (char *)&v60 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v60 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v60 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v66 = (char *)&v60 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v60 - v18;
  v20 = AudioUsoIntent.rootItems.getter();
  v21 = specialized Sequence.flatMap<A>(_:)(v20, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.appAudiobookTitles.getter, 0);
  swift_bridgeObjectRelease();
  v68 = v21;
  if (v21 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    v21 = v68;
    v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23)
      goto LABEL_3;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v23 = v22;
    if (v22)
    {
LABEL_3:
      v24 = 0;
      v65 = v21 & 0xC000000000000001;
      v61 = v21 + 32;
      v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v63 = v12;
      v81 = "appMusicArtistName";
      v79 = 0x80000001C25019B0;
      v80 = "Id";
      v78 = 0x80000001C25022D0;
      v70 = v15;
      v71 = v19;
      v64 = v23;
      while (1)
      {
        if (v65)
        {
          v12 = (char *)MEMORY[0x1C3BBF3F4](v24, v21);
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
            goto LABEL_50;
        }
        else
        {
          v12 = *(char **)(v61 + 8 * v24);
          swift_retain();
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
          {
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
        }
        v74 = v27;
        v28 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v29 = *(_QWORD *)(v28 + 16);
        v76 = v28;
        v77 = v12;
        if (!v29)
        {
LABEL_22:
          v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
          v72(v19, 1, 1, v0);
          v36 = (uint64_t)v66;
          v24 = v74;
          goto LABEL_24;
        }
        v30 = v28 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v31 = *(_QWORD *)(v1 + 72);
        v32 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v32(v8, v30, v0);
        while (1)
        {
          v34 = UsoIdentifier.namespace.getter();
          if (!v35)
            goto LABEL_15;
          if (v34 == 0xD000000000000013 && v35 == v78)
            break;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_23;
LABEL_15:
          (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
          v30 += v31;
          if (!--v29)
          {
            swift_bridgeObjectRelease();
            v15 = v70;
            v19 = v71;
            goto LABEL_22;
          }
          v32(v8, v30, v0);
        }
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        v19 = v71;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v71, v8, v0);
        v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
        v72(v19, 0, 1, v0);
        v15 = v70;
        v36 = (uint64_t)v66;
        v24 = v74;
LABEL_24:
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v36, &demangling cache variable for type metadata for UsoIdentifier?);
        v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
        if (v73(v36, 1, v0) == 1)
        {
          v69 = 0;
          v76 = 0;
        }
        else
        {
          v37 = v36;
          v38 = v67;
          (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v37, v0);
          v69 = UsoIdentifier.value.getter();
          v76 = v39;
          (*(void (**)(char *, uint64_t))(v1 + 8))(v38, v0);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for UsoIdentifier?);
        v40 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v41 = *(_QWORD *)(v40 + 16);
        v75 = v40;
        if (!v41)
        {
          v48 = 1;
          v49 = (uint64_t)v63;
          v19 = v71;
          goto LABEL_40;
        }
        v42 = v40 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v43 = *(_QWORD *)(v1 + 72);
        v44 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v44(v4, v42, v0);
        while (2)
        {
          v46 = UsoIdentifier.namespace.getter();
          if (!v47)
            goto LABEL_30;
          if (v46 != 0xD000000000000011 || v47 != v79)
          {
            v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v45 & 1) != 0)
              goto LABEL_38;
LABEL_30:
            (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
            v42 += v43;
            if (!--v41)
            {
              swift_bridgeObjectRelease();
              v48 = 1;
              v49 = (uint64_t)v63;
              v15 = v70;
              goto LABEL_39;
            }
            v44(v4, v42, v0);
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
LABEL_38:
        swift_bridgeObjectRelease();
        v15 = v70;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v70, v4, v0);
        v48 = 0;
        v49 = (uint64_t)v63;
LABEL_39:
        v19 = v71;
        v24 = v74;
LABEL_40:
        v72(v15, v48, 1, v0);
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v15, v49, &demangling cache variable for type metadata for UsoIdentifier?);
        if (v73(v49, 1, v0) == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_5:
          swift_release();
          swift_bridgeObjectRelease();
          v21 = v68;
          v25 = v64;
          goto LABEL_6;
        }
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v49, v0);
        v51 = UsoIdentifier.value.getter();
        v53 = v52;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v50, v0);
        outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
        if (!v76 || !v53)
          goto LABEL_5;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
        v55 = v62[2];
        v54 = v62[3];
        v25 = v64;
        if (v55 >= v54 >> 1)
        {
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v62);
          v25 = v64;
        }
        v56 = v62;
        v62[2] = v55 + 1;
        v57 = &v56[4 * v55];
        v57[4] = v51;
        v57[5] = v53;
        v15 = v70;
        v58 = v76;
        v57[6] = v69;
        v57[7] = v58;
        v21 = v68;
LABEL_6:
        if (v24 == v25)
          goto LABEL_53;
      }
    }
  }
  v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_53:
  swift_bridgeObjectRelease_n();
  return v62;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appAudiobookTitles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v44[0] = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v49);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v53 = (uint64_t)v44 - v12;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)v44 - v13;
  v14 = type metadata accessor for UsoIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1C3BBCF40](v16);
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    swift_bridgeObjectRelease();
    v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v23 = v21 & 0xFFFFFFFFFFFFLL;
    v24 = v23 == 0;
  }
  else
  {
    v24 = 1;
  }
  v50 = v24;
  v51 = a1;
  v25 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v33 = swift_bridgeObjectRelease();
LABEL_17:
    v34 = (uint64_t)v52;
    v35 = v53;
    if (v50)
      return 0;
    v36 = 0;
    if (!MEMORY[0x1C3BBCF1C](v33))
      goto LABEL_22;
LABEL_19:
    MEMORY[0x1C3BBD09C]();
    swift_release();
    goto LABEL_23;
  }
  v45 = v10;
  v46 = v3;
  v47 = v6;
  v48 = v2;
  v27 = v25 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v28 = *(_QWORD *)(v15 + 72);
  v29 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  v44[1] = v25;
  swift_bridgeObjectRetain();
  v54 = 0x80000001C25019B0;
  while (1)
  {
    v29(v18, v27, v14);
    v31 = UsoIdentifier.namespace.getter();
    if (!v32)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      goto LABEL_9;
    }
    if (v31 == 0xD000000000000011 && v32 == v54)
      break;
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if ((v30 & 1) != 0)
      goto LABEL_20;
LABEL_9:
    v27 += v28;
    if (!--v26)
    {
      v33 = swift_bridgeObjectRelease_n();
      v6 = v47;
      v2 = v48;
      v10 = v45;
      v3 = v46;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
LABEL_20:
  v37 = swift_bridgeObjectRelease_n();
  v6 = v47;
  v2 = v48;
  v10 = v45;
  v3 = v46;
  v34 = (uint64_t)v52;
  v35 = v53;
  if (v50)
    return 0;
  v36 = 1;
  if (MEMORY[0x1C3BBCF1C](v37))
    goto LABEL_19;
LABEL_22:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v34, 1, 1, v2);
LABEL_23:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E0DA1D28], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  v38 = (uint64_t)&v6[*(int *)(v49 + 48)];
  outlined init with copy of MediaUserStateCenter?(v34, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      v40 = v44[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v44[0], v38, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v42 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v42(v40, v2);
      outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v42((uint64_t)v10, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v41 & 1) != 0)
        return v36;
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
LABEL_28:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1)
    goto LABEL_28;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v36;
}

_QWORD *AudioUsoIntent.appMusicArtistNames.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 264))
  {
    v1 = *(_QWORD **)(v0 + 264);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.appMusicArtistNames.getter();
    *(_QWORD *)(v0 + 264) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *closure #1 in AudioUsoIntent.appMusicArtistNames.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  const char *v81;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v67 = (char *)&v60 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v60 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v60 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v66 = (char *)&v60 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v60 - v18;
  v20 = AudioUsoIntent.rootItems.getter();
  v21 = specialized Sequence.flatMap<A>(_:)(v20, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.appMusicArtistNames.getter, 0);
  swift_bridgeObjectRelease();
  v68 = v21;
  if (v21 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    v21 = v68;
    v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23)
      goto LABEL_3;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v23 = v22;
    if (v22)
    {
LABEL_3:
      v24 = 0;
      v65 = v21 & 0xC000000000000001;
      v61 = v21 + 32;
      v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v63 = v12;
      v81 = "appPlaylistTitle";
      v79 = 0x80000001C2501990;
      v80 = "appAudiobookTitleId";
      v78 = 0x80000001C25022F0;
      v70 = v15;
      v71 = v19;
      v64 = v23;
      while (1)
      {
        if (v65)
        {
          v12 = (char *)MEMORY[0x1C3BBF3F4](v24, v21);
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
            goto LABEL_50;
        }
        else
        {
          v12 = *(char **)(v61 + 8 * v24);
          swift_retain();
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
          {
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
        }
        v74 = v27;
        v28 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v29 = *(_QWORD *)(v28 + 16);
        v76 = v28;
        v77 = v12;
        if (!v29)
        {
LABEL_22:
          v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
          v72(v19, 1, 1, v0);
          v36 = (uint64_t)v66;
          v24 = v74;
          goto LABEL_24;
        }
        v30 = v28 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v31 = *(_QWORD *)(v1 + 72);
        v32 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v32(v8, v30, v0);
        while (1)
        {
          v34 = UsoIdentifier.namespace.getter();
          if (!v35)
            goto LABEL_15;
          if (v34 == 0xD000000000000014 && v35 == v78)
            break;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_23;
LABEL_15:
          (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
          v30 += v31;
          if (!--v29)
          {
            swift_bridgeObjectRelease();
            v15 = v70;
            v19 = v71;
            goto LABEL_22;
          }
          v32(v8, v30, v0);
        }
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        v19 = v71;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v71, v8, v0);
        v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
        v72(v19, 0, 1, v0);
        v15 = v70;
        v36 = (uint64_t)v66;
        v24 = v74;
LABEL_24:
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v36, &demangling cache variable for type metadata for UsoIdentifier?);
        v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
        if (v73(v36, 1, v0) == 1)
        {
          v69 = 0;
          v76 = 0;
        }
        else
        {
          v37 = v36;
          v38 = v67;
          (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v37, v0);
          v69 = UsoIdentifier.value.getter();
          v76 = v39;
          (*(void (**)(char *, uint64_t))(v1 + 8))(v38, v0);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for UsoIdentifier?);
        v40 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v41 = *(_QWORD *)(v40 + 16);
        v75 = v40;
        if (!v41)
        {
          v48 = 1;
          v49 = (uint64_t)v63;
          v19 = v71;
          goto LABEL_40;
        }
        v42 = v40 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v43 = *(_QWORD *)(v1 + 72);
        v44 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v44(v4, v42, v0);
        while (2)
        {
          v46 = UsoIdentifier.namespace.getter();
          if (!v47)
            goto LABEL_30;
          if (v46 != 0xD000000000000012 || v47 != v79)
          {
            v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v45 & 1) != 0)
              goto LABEL_38;
LABEL_30:
            (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
            v42 += v43;
            if (!--v41)
            {
              swift_bridgeObjectRelease();
              v48 = 1;
              v49 = (uint64_t)v63;
              v15 = v70;
              goto LABEL_39;
            }
            v44(v4, v42, v0);
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
LABEL_38:
        swift_bridgeObjectRelease();
        v15 = v70;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v70, v4, v0);
        v48 = 0;
        v49 = (uint64_t)v63;
LABEL_39:
        v19 = v71;
        v24 = v74;
LABEL_40:
        v72(v15, v48, 1, v0);
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v15, v49, &demangling cache variable for type metadata for UsoIdentifier?);
        if (v73(v49, 1, v0) == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_5:
          swift_release();
          swift_bridgeObjectRelease();
          v21 = v68;
          v25 = v64;
          goto LABEL_6;
        }
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v49, v0);
        v51 = UsoIdentifier.value.getter();
        v53 = v52;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v50, v0);
        outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
        if (!v76 || !v53)
          goto LABEL_5;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
        v55 = v62[2];
        v54 = v62[3];
        v25 = v64;
        if (v55 >= v54 >> 1)
        {
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v62);
          v25 = v64;
        }
        v56 = v62;
        v62[2] = v55 + 1;
        v57 = &v56[4 * v55];
        v57[4] = v51;
        v57[5] = v53;
        v15 = v70;
        v58 = v76;
        v57[6] = v69;
        v57[7] = v58;
        v21 = v68;
LABEL_6:
        if (v24 == v25)
          goto LABEL_53;
      }
    }
  }
  v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_53:
  swift_bridgeObjectRelease_n();
  return v62;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appMusicArtistNames.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v44[0] = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v49);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v53 = (uint64_t)v44 - v12;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)v44 - v13;
  v14 = type metadata accessor for UsoIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1C3BBCF40](v16);
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    swift_bridgeObjectRelease();
    v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v23 = v21 & 0xFFFFFFFFFFFFLL;
    v24 = v23 == 0;
  }
  else
  {
    v24 = 1;
  }
  v50 = v24;
  v51 = a1;
  v25 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v33 = swift_bridgeObjectRelease();
LABEL_17:
    v34 = (uint64_t)v52;
    v35 = v53;
    if (v50)
      return 0;
    v36 = 0;
    if (!MEMORY[0x1C3BBCF1C](v33))
      goto LABEL_22;
LABEL_19:
    MEMORY[0x1C3BBD09C]();
    swift_release();
    goto LABEL_23;
  }
  v45 = v10;
  v46 = v3;
  v47 = v6;
  v48 = v2;
  v27 = v25 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v28 = *(_QWORD *)(v15 + 72);
  v29 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  v44[1] = v25;
  swift_bridgeObjectRetain();
  v54 = 0x80000001C2501990;
  while (1)
  {
    v29(v18, v27, v14);
    v31 = UsoIdentifier.namespace.getter();
    if (!v32)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      goto LABEL_9;
    }
    if (v31 == 0xD000000000000012 && v32 == v54)
      break;
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if ((v30 & 1) != 0)
      goto LABEL_20;
LABEL_9:
    v27 += v28;
    if (!--v26)
    {
      v33 = swift_bridgeObjectRelease_n();
      v6 = v47;
      v2 = v48;
      v10 = v45;
      v3 = v46;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
LABEL_20:
  v37 = swift_bridgeObjectRelease_n();
  v6 = v47;
  v2 = v48;
  v10 = v45;
  v3 = v46;
  v34 = (uint64_t)v52;
  v35 = v53;
  if (v50)
    return 0;
  v36 = 1;
  if (MEMORY[0x1C3BBCF1C](v37))
    goto LABEL_19;
LABEL_22:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v34, 1, 1, v2);
LABEL_23:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E0DA1DC0], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  v38 = (uint64_t)&v6[*(int *)(v49 + 48)];
  outlined init with copy of MediaUserStateCenter?(v34, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      v40 = v44[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v44[0], v38, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v42 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v42(v40, v2);
      outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v42((uint64_t)v10, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v41 & 1) != 0)
        return v36;
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
LABEL_28:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1)
    goto LABEL_28;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v36;
}

_QWORD *AudioUsoIntent.appAudiobookAuthors.getter()
{
  uint64_t v0;
  _QWORD *v1;

  if (*(_QWORD *)(v0 + 272))
  {
    v1 = *(_QWORD **)(v0 + 272);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.appAudiobookAuthors.getter();
    *(_QWORD *)(v0 + 272) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

_QWORD *closure #1 in AudioUsoIntent.appAudiobookAuthors.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  void (*v44)(char *, unint64_t, uint64_t);
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  unint64_t v68;
  uint64_t v69;
  char *v70;
  char *v71;
  void (*v72)(char *, uint64_t, uint64_t, uint64_t);
  unsigned int (*v73)(uint64_t, uint64_t, uint64_t);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  unint64_t v78;
  unint64_t v79;
  const char *v80;
  const char *v81;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v4 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v67 = (char *)&v60 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v60 - v7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v60 - v14;
  v16 = MEMORY[0x1E0C80A78](v13);
  v66 = (char *)&v60 - v17;
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v60 - v18;
  v20 = AudioUsoIntent.rootItems.getter();
  v21 = specialized Sequence.flatMap<A>(_:)(v20, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.appAudiobookAuthors.getter, 0);
  swift_bridgeObjectRelease();
  v68 = v21;
  if (v21 >> 62)
  {
LABEL_51:
    swift_bridgeObjectRetain();
    v21 = v68;
    v23 = _CocoaArrayWrapper.endIndex.getter();
    if (v23)
      goto LABEL_3;
  }
  else
  {
    v22 = *(_QWORD *)((v21 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v23 = v22;
    if (v22)
    {
LABEL_3:
      v24 = 0;
      v65 = v21 & 0xC000000000000001;
      v61 = v21 + 32;
      v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v63 = v12;
      v81 = "appAudiobookTitle";
      v79 = 0x80000001C25019D0;
      v80 = "appMusicArtistNameId";
      v78 = 0x80000001C2502310;
      v70 = v15;
      v71 = v19;
      v64 = v23;
      while (1)
      {
        if (v65)
        {
          v12 = (char *)MEMORY[0x1C3BBF3F4](v24, v21);
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
            goto LABEL_50;
        }
        else
        {
          v12 = *(char **)(v61 + 8 * v24);
          swift_retain();
          v26 = __OFADD__(v24, 1);
          v27 = v24 + 1;
          if (v26)
          {
LABEL_50:
            __break(1u);
            goto LABEL_51;
          }
        }
        v74 = v27;
        v28 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v29 = *(_QWORD *)(v28 + 16);
        v76 = v28;
        v77 = v12;
        if (!v29)
        {
LABEL_22:
          v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
          v72(v19, 1, 1, v0);
          v36 = (uint64_t)v66;
          v24 = v74;
          goto LABEL_24;
        }
        v30 = v28 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v31 = *(_QWORD *)(v1 + 72);
        v32 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v32(v8, v30, v0);
        while (1)
        {
          v34 = UsoIdentifier.namespace.getter();
          if (!v35)
            goto LABEL_15;
          if (v34 == 0xD000000000000014 && v35 == v78)
            break;
          v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v33 & 1) != 0)
            goto LABEL_23;
LABEL_15:
          (*(void (**)(char *, uint64_t))(v1 + 8))(v8, v0);
          v30 += v31;
          if (!--v29)
          {
            swift_bridgeObjectRelease();
            v15 = v70;
            v19 = v71;
            goto LABEL_22;
          }
          v32(v8, v30, v0);
        }
        swift_bridgeObjectRelease();
LABEL_23:
        swift_bridgeObjectRelease();
        v19 = v71;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v71, v8, v0);
        v72 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
        v72(v19, 0, 1, v0);
        v15 = v70;
        v36 = (uint64_t)v66;
        v24 = v74;
LABEL_24:
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v19, v36, &demangling cache variable for type metadata for UsoIdentifier?);
        v73 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
        if (v73(v36, 1, v0) == 1)
        {
          v69 = 0;
          v76 = 0;
        }
        else
        {
          v37 = v36;
          v38 = v67;
          (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v37, v0);
          v69 = UsoIdentifier.value.getter();
          v76 = v39;
          (*(void (**)(char *, uint64_t))(v1 + 8))(v38, v0);
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for UsoIdentifier?);
        v40 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
        v41 = *(_QWORD *)(v40 + 16);
        v75 = v40;
        if (!v41)
        {
          v48 = 1;
          v49 = (uint64_t)v63;
          v19 = v71;
          goto LABEL_40;
        }
        v42 = v40 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        swift_bridgeObjectRetain();
        v43 = *(_QWORD *)(v1 + 72);
        v44 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        v44(v4, v42, v0);
        while (2)
        {
          v46 = UsoIdentifier.namespace.getter();
          if (!v47)
            goto LABEL_30;
          if (v46 != 0xD000000000000012 || v47 != v79)
          {
            v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v45 & 1) != 0)
              goto LABEL_38;
LABEL_30:
            (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
            v42 += v43;
            if (!--v41)
            {
              swift_bridgeObjectRelease();
              v48 = 1;
              v49 = (uint64_t)v63;
              v15 = v70;
              goto LABEL_39;
            }
            v44(v4, v42, v0);
            continue;
          }
          break;
        }
        swift_bridgeObjectRelease();
LABEL_38:
        swift_bridgeObjectRelease();
        v15 = v70;
        (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v70, v4, v0);
        v48 = 0;
        v49 = (uint64_t)v63;
LABEL_39:
        v19 = v71;
        v24 = v74;
LABEL_40:
        v72(v15, v48, 1, v0);
        swift_bridgeObjectRelease();
        outlined init with copy of MediaUserStateCenter?((uint64_t)v15, v49, &demangling cache variable for type metadata for UsoIdentifier?);
        if (v73(v49, 1, v0) == 1)
        {
          outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
LABEL_5:
          swift_release();
          swift_bridgeObjectRelease();
          v21 = v68;
          v25 = v64;
          goto LABEL_6;
        }
        v50 = v67;
        (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v67, v49, v0);
        v51 = UsoIdentifier.value.getter();
        v53 = v52;
        (*(void (**)(char *, uint64_t))(v1 + 8))(v50, v0);
        outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoIdentifier?);
        if (!v76 || !v53)
          goto LABEL_5;
        swift_release();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v62[2] + 1, 1, v62);
        v55 = v62[2];
        v54 = v62[3];
        v25 = v64;
        if (v55 >= v54 >> 1)
        {
          v62 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v62);
          v25 = v64;
        }
        v56 = v62;
        v62[2] = v55 + 1;
        v57 = &v56[4 * v55];
        v57[4] = v51;
        v57[5] = v53;
        v15 = v70;
        v58 = v76;
        v57[6] = v69;
        v57[7] = v58;
        v21 = v68;
LABEL_6:
        if (v24 == v25)
          goto LABEL_53;
      }
    }
  }
  v62 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_53:
  swift_bridgeObjectRelease_n();
  return v62;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.appAudiobookAuthors.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _BOOL4 v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  uint64_t v40;
  char v41;
  void (*v42)(uint64_t, uint64_t);
  _QWORD v44[2];
  char *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v44[0] = (char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v49);
  v6 = (char *)v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v53 = (uint64_t)v44 - v12;
  MEMORY[0x1E0C80A78](v11);
  v52 = (char *)v44 - v13;
  v14 = type metadata accessor for UsoIdentifier();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1C3BBCF40](v16);
  if (v20)
  {
    v21 = v19;
    v22 = v20;
    swift_bridgeObjectRelease();
    v23 = HIBYTE(v22) & 0xF;
    if ((v22 & 0x2000000000000000) == 0)
      v23 = v21 & 0xFFFFFFFFFFFFLL;
    v24 = v23 == 0;
  }
  else
  {
    v24 = 1;
  }
  v50 = v24;
  v51 = a1;
  v25 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v26 = *(_QWORD *)(v25 + 16);
  if (!v26)
  {
    v33 = swift_bridgeObjectRelease();
LABEL_17:
    v34 = (uint64_t)v52;
    v35 = v53;
    if (v50)
      return 0;
    v36 = 0;
    if (!MEMORY[0x1C3BBCF1C](v33))
      goto LABEL_22;
LABEL_19:
    MEMORY[0x1C3BBD09C]();
    swift_release();
    goto LABEL_23;
  }
  v45 = v10;
  v46 = v3;
  v47 = v6;
  v48 = v2;
  v27 = v25 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  v28 = *(_QWORD *)(v15 + 72);
  v29 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
  v44[1] = v25;
  swift_bridgeObjectRetain();
  v54 = 0x80000001C25019D0;
  while (1)
  {
    v29(v18, v27, v14);
    v31 = UsoIdentifier.namespace.getter();
    if (!v32)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
      goto LABEL_9;
    }
    if (v31 == 0xD000000000000012 && v32 == v54)
      break;
    v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    if ((v30 & 1) != 0)
      goto LABEL_20;
LABEL_9:
    v27 += v28;
    if (!--v26)
    {
      v33 = swift_bridgeObjectRelease_n();
      v6 = v47;
      v2 = v48;
      v10 = v45;
      v3 = v46;
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
LABEL_20:
  v37 = swift_bridgeObjectRelease_n();
  v6 = v47;
  v2 = v48;
  v10 = v45;
  v3 = v46;
  v34 = (uint64_t)v52;
  v35 = v53;
  if (v50)
    return 0;
  v36 = 1;
  if (MEMORY[0x1C3BBCF1C](v37))
    goto LABEL_19;
LABEL_22:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v34, 1, 1, v2);
LABEL_23:
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v3 + 104))(v35, *MEMORY[0x1E0DA1DC0], v2);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v3 + 56))(v35, 0, 1, v2);
  v38 = (uint64_t)&v6[*(int *)(v49 + 48)];
  outlined init with copy of MediaUserStateCenter?(v34, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v35, v38, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v39((uint64_t)v6, 1, v2) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v39(v38, 1, v2) != 1)
    {
      v40 = v44[0];
      (*(void (**)(_QWORD, uint64_t, uint64_t))(v3 + 32))(v44[0], v38, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v41 = dispatch thunk of static Equatable.== infix(_:_:)();
      v42 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
      v42(v40, v2);
      outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v42((uint64_t)v10, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v41 & 1) != 0)
        return v36;
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v10, v2);
LABEL_28:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v39(v38, 1, v2) != 1)
    goto LABEL_28;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v36;
}

uint64_t AudioUsoIntent.noun.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 280);
  if ((_DWORD)result == 4)
  {
    result = closure #1 in AudioUsoIntent.noun.getter(v0);
    *(_BYTE *)(v0 + 280) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.noun.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  void (*v27)(char *, unint64_t, uint64_t);
  char v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char v32;
  Swift::String v33;
  Swift::String v34;
  void (*v35)(char *, uint64_t);
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v2 = type metadata accessor for UsoIdentifier();
  v49 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v40 - v6;
  v48 = a1;
  v8 = AudioUsoIntent.rootItems.getter();
  v9 = v8;
  if (v8 >> 62)
    goto LABEL_45;
  v10 = *(_QWORD *)((v8 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v10; v10 = _CocoaArrayWrapper.endIndex.getter())
  {
    v11 = 4;
    while (1)
    {
      v12 = v11 - 4;
      if ((v9 & 0xC000000000000001) != 0)
      {
        v13 = MEMORY[0x1C3BBF3F4](v11 - 4, v9);
        v14 = v11 - 3;
        if (__OFADD__(v12, 1))
          break;
        goto LABEL_9;
      }
      v13 = *(_QWORD *)(v9 + 8 * v11);
      swift_retain();
      v14 = v11 - 3;
      if (__OFADD__(v12, 1))
        break;
LABEL_9:
      v15 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(MEMORY[0x1E0DEE9D8], v13);
      swift_release();
      if (v15)
      {
        swift_bridgeObjectRelease_n();
        swift_release();
        return 0;
      }
      ++v11;
      if (v14 == v10)
        goto LABEL_11;
    }
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
LABEL_45:
    swift_bridgeObjectRetain();
  }
LABEL_11:
  v16 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease_n();
  v17 = AudioUsoIntent.rootItems.getter();
  v9 = specialized Sequence.flatMap<A>(_:)(v17, v16, (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  v50 = v16;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v19 = v49;
    if (v18)
      goto LABEL_13;
LABEL_48:
    swift_bridgeObjectRelease();
    v37 = MEMORY[0x1E0DEE9D8];
    if ((MEMORY[0x1E0DEE9D8] & 0x8000000000000000) != 0)
      goto LABEL_54;
    goto LABEL_49;
  }
  v18 = *(_QWORD *)((v9 & 0xFFFFFFFFFFFFF8) + 0x10);
  v19 = v49;
  if (!v18)
    goto LABEL_48;
LABEL_13:
  v20 = 0;
  v44 = v9;
  v45 = v9 & 0xC000000000000001;
  v41 = v9 + 32;
  v42 = v9 & 0xFFFFFFFFFFFFFF8;
  v43 = v18;
  do
  {
    while (1)
    {
      if (v45)
      {
        v21 = MEMORY[0x1C3BBF3F4](v20, v9);
        v22 = __OFADD__(v20++, 1);
        if (v22)
          goto LABEL_42;
      }
      else
      {
        if (v20 >= *(_QWORD *)(v42 + 16))
          goto LABEL_44;
        v21 = *(_QWORD *)(v41 + 8 * v20);
        swift_retain();
        v22 = __OFADD__(v20++, 1);
        if (v22)
        {
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
      v23 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
        break;
      swift_release();
      swift_bridgeObjectRelease();
      if (v20 == v18)
        goto LABEL_39;
    }
    v47 = v21;
    v48 = v20;
    v25 = v23 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    v46 = v23;
    swift_bridgeObjectRetain();
    v26 = *(_QWORD *)(v19 + 72);
    v27 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
    v27(v7, v25, v2);
    while (1)
    {
      v30 = UsoIdentifier.namespace.getter();
      if (!v31)
      {
        v27(v5, (unint64_t)v7, v2);
LABEL_35:
        v35 = *(void (**)(char *, uint64_t))(v19 + 8);
        v35(v5, v2);
        v35(v7, v2);
        goto LABEL_24;
      }
      if (v30 == 0x616C50616964656DLL && v31 == 0xEF6E756F4E726579)
      {
        swift_bridgeObjectRelease();
        v27(v5, (unint64_t)v7, v2);
      }
      else
      {
        v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v27(v5, (unint64_t)v7, v2);
        if ((v32 & 1) == 0)
          goto LABEL_35;
      }
      UsoIdentifier.value.getter();
      v33 = String.lowercased()();
      swift_bridgeObjectRelease();
      v34 = String.lowercased()();
      if (v33._countAndFlagsBits == v34._countAndFlagsBits && v33._object == v34._object)
        break;
      v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v19 = v49;
      v29 = *(void (**)(char *, uint64_t))(v49 + 8);
      v29(v5, v2);
      v29(v7, v2);
      if ((v28 & 1) != 0)
        goto LABEL_37;
LABEL_24:
      v25 += v26;
      if (!--v24)
      {
        swift_release();
        swift_bridgeObjectRelease_n();
        goto LABEL_38;
      }
      v27(v7, v25, v2);
    }
    swift_bridgeObjectRelease_n();
    v19 = v49;
    v36 = *(void (**)(char *, uint64_t))(v49 + 8);
    v36(v5, v2);
    v36(v7, v2);
LABEL_37:
    swift_bridgeObjectRelease_n();
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
LABEL_38:
    v18 = v43;
    v9 = v44;
    v20 = v48;
  }
  while (v48 != v43);
LABEL_39:
  swift_bridgeObjectRelease();
  v37 = v50;
  if (v50 < 0)
  {
LABEL_54:
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_release();
    goto LABEL_51;
  }
LABEL_49:
  if ((v37 & 0x4000000000000000) != 0)
    goto LABEL_54;
  v39 = *(_QWORD *)(v37 + 16);
LABEL_51:
  swift_release();
  if (v39)
    return 1;
  else
    return 3;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.noun.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t);
  int v19;
  uint64_t *v20;
  char v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;

  v0 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v24 - v12;
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)&v24 - v15;
  if (MEMORY[0x1C3BBCF1C](v14))
  {
    MEMORY[0x1C3BBD09C]();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v16, 1, 1, v0);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v13, *MEMORY[0x1E0DA1DF8], v0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v1 + 56))(v13, 0, 1, v0);
  v17 = (uint64_t)&v6[*(int *)(v4 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v13, v17, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 48);
  if (v18((uint64_t)v6, 1, v0) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    v19 = v18(v17, 1, v0);
    if (v19 == 1)
      v20 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
    else
      v20 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
    if (v19 == 1)
      v21 = -1;
    else
      v21 = 0;
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, (uint64_t)v10, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v18(v17, 1, v0) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      (*(void (**)(char *, uint64_t))(v1 + 8))(v10, v0);
      v21 = 0;
      v20 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v1 + 32))(v3, v17, v0);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v21 = dispatch thunk of static Equatable.== infix(_:_:)();
      v22 = *(void (**)(char *, uint64_t))(v1 + 8);
      v22(v3, v0);
      v20 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v22(v10, v0);
    }
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, v20);
  return v21 & 1;
}

uint64_t AudioUsoIntent.dateTime.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 288);
  v2 = v1;
  if (v1 == 1)
  {
    v2 = closure #1 in AudioUsoIntent.dateTime.getter();
    v3 = *(_QWORD *)(v0 + 288);
    *(_QWORD *)(v0 + 288) = v2;
    swift_retain();
    outlined consume of UsoEntity_common_DateTime??(v3);
  }
  outlined copy of UsoEntity_common_DateTime??(v1);
  return v2;
}

uint64_t closure #1 in AudioUsoIntent.dateTime.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = v0;
  if (v0 >> 62)
  {
LABEL_14:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    if (v2)
      goto LABEL_3;
  }
  else
  {
    v2 = *(_QWORD *)((v0 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      v3 = 4;
      v4 = MEMORY[0x1E0DEE9D8];
      do
      {
        v5 = v3 - 4;
        if ((v1 & 0xC000000000000001) != 0)
        {
          v6 = MEMORY[0x1C3BBF3F4](v3 - 4, v1);
          v7 = v3 - 3;
          if (__OFADD__(v5, 1))
            goto LABEL_13;
        }
        else
        {
          v6 = *(_QWORD *)(v1 + 8 * v3);
          swift_retain();
          v7 = v3 - 3;
          if (__OFADD__(v5, 1))
          {
LABEL_13:
            __break(1u);
            goto LABEL_14;
          }
        }
        v8 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v4, v6);
        swift_release();
        if (v8)
        {
          swift_bridgeObjectRelease_n();
          v10 = swift_retain();
          v11 = MEMORY[0x1C3BBCF4C](v10);
          swift_release_n();
          return v11;
        }
        ++v3;
      }
      while (v7 != v2);
    }
  }
  swift_bridgeObjectRelease_n();
  return 0;
}

uint64_t AudioUsoIntent.attributes.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 296))
  {
    v1 = *(_QWORD *)(v0 + 296);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.attributes.getter(v0);
    *(_QWORD *)(v0 + 296) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.attributes.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char isUniquelyReferenced_nonNull_native;
  Swift::Int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  Swift::Int v31;
  uint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  Swift::Int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  char v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  uint64_t v86;
  unint64_t v87;
  _QWORD v88[10];
  uint64_t v89;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v73 = (char *)&v67 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v76);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v71 = (uint64_t)&v67 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v72 = (uint64_t)&v67 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v74 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v12);
  v81 = (uint64_t)&v67 - v15;
  MEMORY[0x1E0C80A78](v14);
  v82 = (uint64_t)&v67 - v16;
  v89 = MEMORY[0x1E0DEE9E8];
  v17 = AudioUsoIntent.rootItems.getter();
  v18 = specialized Sequence.flatMap<A>(_:)(v17, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.attributes.getter, 0);
  v70 = 0;
  swift_bridgeObjectRelease();
  v84 = v18;
  v79 = v2;
  v80 = a1;
  v78 = v6;
  v77 = v3;
  if (v18 >> 62)
  {
    swift_bridgeObjectRetain();
    v19 = _CocoaArrayWrapper.endIndex.getter();
    if (v19)
      goto LABEL_3;
  }
  else
  {
    v19 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v19)
    {
LABEL_3:
      if (v19 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C242C194);
      }
      v20 = 0;
      v87 = v84 & 0xC000000000000001;
      v83 = v84 + 32;
      v69 = *MEMORY[0x1E0DA1AB0];
      v68 = *MEMORY[0x1E0DA1A40];
      v85 = "inity";
      v86 = v19;
      do
      {
        if (v87)
          MEMORY[0x1C3BBF3F4](v20, v84);
        else
          swift_retain();
        if (UsoEntity_common_MediaItem.isFromArtist()())
        {
          v21 = v89;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v21 + 32));
          if (((*(_QWORD *)(v21 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
            __asm { BR              X9 }
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v88[0] = v21;
          v24 = 0;
        }
        else if (UsoEntity_common_MediaItem.isFromSong()())
        {
          v25 = v89;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v25 + 32));
          if (((*(_QWORD *)(v25 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
            __asm { BR              X9 }
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v88[0] = v25;
          v24 = 1;
        }
        else if (UsoEntity_common_MediaItem.isFromAlbum()())
        {
          v26 = v89;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v26 + 32));
          if (((*(_QWORD *)(v26 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
            __asm { BR              X9 }
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v88[0] = v26;
          v24 = 2;
        }
        else if (UsoEntity_common_MediaItem.isRecommended()())
        {
          v27 = v89;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v27 + 32));
          if (((*(_QWORD *)(v27 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
            __asm { BR              X9 }
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v88[0] = v27;
          v24 = 7;
        }
        else if (UsoEntity_common_MediaItem.isAffinity()())
        {
          v28 = v89;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v28 + 32));
          if (((*(_QWORD *)(v28 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
            __asm { BR              X9 }
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v88[0] = v28;
          v24 = 6;
        }
        else
        {
          if (!UsoEntity_common_MediaItem.isDiscover()())
          {
            if (UsoEntity_common_MediaItem.isAddToUnspecifiedPlaylist()())
            {
              v30 = v89;
              Hasher.init(_seed:)();
              swift_bridgeObjectRetain();
              String.hash(into:)();
              v31 = Hasher._finalize()();
              v32 = -1 << *(_BYTE *)(v30 + 32);
              v33 = v31 & ~v32;
              if (((*(_QWORD *)(v30 + 56 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8)) >> v33) & 1) != 0)
              {
                v75 = ~v32;
                __asm { BR              X9 }
              }
              swift_bridgeObjectRelease();
              v34 = swift_isUniquelyReferenced_nonNull_native();
              v88[0] = v30;
              specialized _NativeSet.insertNew(_:at:isUnique:)(9, v33, v34);
              v89 = v88[0];
              swift_release();
              swift_bridgeObjectRelease();
              goto LABEL_43;
            }
            if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
            {
              swift_release();
              if (dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter())
              {
                v35 = v72;
                MEMORY[0x1C3BBD048]();
                swift_release();
                v36 = type metadata accessor for UsoEntity_common_ListPosition.DefinedValues();
                v37 = *(_QWORD *)(v36 - 8);
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36) == 1)
                  goto LABEL_40;
                v38 = v35;
                v39 = v71;
                outlined init with copy of MediaUserStateCenter?(v38, v71, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
                v40 = (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 88))(v39, v36);
                if (v40 == v69)
                {
                  v41 = 12;
                  goto LABEL_47;
                }
                if (v40 == v68)
                {
                  v41 = 10;
LABEL_47:
                  outlined destroy of MediaUserStateCenter?(v72, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
                  specialized Set._Variant.insert(_:)(v88, v41);
                }
                else
                {
                  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v71, v36);
                  v35 = v72;
LABEL_40:
                  outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for UsoEntity_common_ListPosition.DefinedValues?);
                }
              }
            }
            swift_release();
            goto LABEL_43;
          }
          v29 = v89;
          Hasher.init(_seed:)();
          swift_bridgeObjectRetain();
          String.hash(into:)();
          v22 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(v29 + 32));
          if (((*(_QWORD *)(v29 + 56 + ((v22 >> 3) & 0xFFFFFFFFFFFFF8)) >> v22) & 1) != 0)
            __asm { BR              X9 }
          swift_bridgeObjectRelease();
          isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v88[0] = v29;
          v24 = 8;
        }
        specialized _NativeSet.insertNew(_:at:isUnique:)(v24, v22, isUniquelyReferenced_nonNull_native);
        v89 = v88[0];
        swift_release();
        swift_bridgeObjectRelease();
        v19 = v86;
LABEL_43:
        ++v20;
      }
      while (v20 != v19);
    }
  }
  swift_bridgeObjectRelease_n();
  v43 = v79;
  v42 = v80;
  v44 = (uint64_t)v78;
  v45 = v77;
  v46 = v82;
  if (*(_QWORD *)(v80 + 40)
    && (v47 = swift_retain(), MEMORY[0x1C3BBD1D4](v88, v47), v48 = swift_release(), v88[0])
    && (v49 = MEMORY[0x1C3BBCF1C](v48), v50 = swift_release(), v49))
  {
    MEMORY[0x1C3BBD09C](v50);
    swift_release();
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, 1, 1, v43);
  }
  v51 = v81;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v45 + 104))(v81, *MEMORY[0x1E0DA1DE0], v43);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v45 + 56))(v51, 0, 1, v43);
  v52 = v44 + *(int *)(v76 + 48);
  outlined init with copy of MediaUserStateCenter?(v46, v44, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?(v51, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v53 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  if (v53(v44, 1, v43) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v53(v52, 1, v43) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
LABEL_63:
      specialized Set._Variant.insert(_:)(v88, 3);
      goto LABEL_64;
    }
    goto LABEL_61;
  }
  v54 = v74;
  outlined init with copy of MediaUserStateCenter?(v44, v74, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v53(v52, 1, v43) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v82, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v54, v43);
LABEL_61:
    outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    goto LABEL_64;
  }
  v55 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v73, v52, v43);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
  v56 = dispatch thunk of static Equatable.== infix(_:_:)();
  v57 = *(void (**)(char *, uint64_t))(v45 + 8);
  v57(v55, v43);
  outlined destroy of MediaUserStateCenter?(v81, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v82, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v57((char *)v54, v43);
  outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if ((v56 & 1) != 0)
    goto LABEL_63;
LABEL_64:
  if (*(_QWORD *)(v42 + 56))
  {
    v58 = swift_retain();
    MEMORY[0x1C3BBD1A4](v88, v58);
    v59 = swift_release();
    if (v88[0])
    {
      MEMORY[0x1C3BBCF40](v59);
      v61 = v60;
      v62 = swift_bridgeObjectRelease();
      if (v61)
        v62 = specialized Set._Variant.insert(_:)(v88, 11);
      v63 = MEMORY[0x1C3BBCF4C](v62);
      v64 = swift_release();
      if (v63)
        v64 = specialized Set._Variant.insert(_:)(v88, 13);
      v65 = MEMORY[0x1C3BBCF28](v64);
      swift_release();
      if (v65)
        specialized Set._Variant.insert(_:)(v88, 14);
      swift_release();
    }
  }
  return v89;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.attributes.getter()
{
  uint64_t result;

  if (!UsoEntity_common_MediaItem.isFromArtist()()
    && !UsoEntity_common_MediaItem.isFromSong()()
    && !UsoEntity_common_MediaItem.isFromAlbum()()
    && !UsoEntity_common_MediaItem.isRecommended()()
    && !UsoEntity_common_MediaItem.isAffinity()()
    && !UsoEntity_common_MediaItem.isDiscover()()
    && !UsoEntity_common_MediaItem.isAddToUnspecifiedPlaylist()())
  {
    result = dispatch thunk of CodeGenGlobalArgs.usoListPosition.getter();
    if (!result)
      return result;
    swift_release();
  }
  return 1;
}

uint64_t AudioUsoIntent.musicTitles.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 304))
  {
    v1 = *(_QWORD *)(v0 + 304);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.musicTitles.getter();
    *(_QWORD *)(v0 + 304) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.musicTitles.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.musicTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.musicTitles.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E0DA1D90]);
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.albums.getter(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t);
  int v27;
  uint64_t *v28;
  void (*v29)(char *, uint64_t);
  char *v30;
  char *v32;
  unsigned int *v33;

  v33 = a2;
  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v32 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v32 - v13;
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v32 - v16;
  v18 = MEMORY[0x1C3BBCF40](v15);
  if (!v19)
    goto LABEL_7;
  v20 = v18;
  v21 = v19;
  v22 = swift_bridgeObjectRelease();
  v23 = HIBYTE(v21) & 0xF;
  if ((v21 & 0x2000000000000000) == 0)
    v23 = v20 & 0xFFFFFFFFFFFFLL;
  if (v23)
  {
    if (MEMORY[0x1C3BBCF1C](v22))
    {
      MEMORY[0x1C3BBD09C]();
      swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v17, 1, 1, v2);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v14, *v33, v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v14, 0, 1, v2);
    v25 = (uint64_t)&v7[*(int *)(v5 + 48)];
    outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v7, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v14, v25, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    if (v26((uint64_t)v7, 1, v2) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v27 = v26(v25, 1, v2);
      if (v27 == 1)
        v28 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
      else
        v28 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
      if (v27 == 1)
        v24 = -1;
      else
        v24 = 0;
    }
    else
    {
      outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v11, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v26(v25, 1, v2) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        v24 = 0;
        v29 = *(void (**)(char *, uint64_t))(v3 + 8);
        v28 = &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?);
      }
      else
      {
        v30 = v32;
        (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v32, v25, v2);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
        v24 = dispatch thunk of static Equatable.== infix(_:_:)();
        v29 = *(void (**)(char *, uint64_t))(v3 + 8);
        v29(v30, v2);
        v28 = &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?;
        outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      }
      v29(v11, v2);
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, v28);
  }
  else
  {
LABEL_7:
    v24 = 0;
  }
  return v24 & 1;
}

uint64_t AudioUsoIntent.playlistTitles.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 312))
  {
    v1 = *(_QWORD *)(v0 + 312);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.playlistTitles.getter(v0);
    *(_QWORD *)(v0 + 312) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.playlistTitles.getter(uint64_t a1)
{
  unint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)a1 + 1544))();
  v2 = v1;
  if (!(v1 >> 62))
  {
    v3 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v3)
      goto LABEL_3;
LABEL_16:
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v6;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v3 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v3 >= 1)
  {
    v5 = 0;
    v6 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v2 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v5, v2);
      else
        swift_retain();
      v8 = MEMORY[0x1C3BBCF40]();
      v10 = v9;
      swift_release();
      if (v10)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6[2] + 1, 1, v6);
        v12 = v6[2];
        v11 = v6[3];
        if (v12 >= v11 >> 1)
          v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v11 > 1), v12 + 1, 1, v6);
        v6[2] = v12 + 1;
        v7 = &v6[2 * v12];
        v7[4] = v8;
        v7[5] = v10;
      }
      ++v5;
    }
    while (v3 != v5);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t AudioUsoIntent.playlistMediaItems.getter()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  if (*(_QWORD *)(v0 + 320))
  {
    v1 = *(_QWORD *)(v0 + 320);
  }
  else
  {
    v2 = AudioUsoIntent.rootItems.getter();
    v1 = specialized Sequence.flatMap<A>(_:)(v2, MEMORY[0x1E0DEE9D8], specialized closure #1 in closure #1 in AudioUsoIntent.playlistMediaItems.getter, 0);
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 320) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.applePlaylistTitles.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 328))
  {
    v1 = *(_QWORD *)(v0 + 328);
  }
  else
  {
    v1 = specialized closure #1 in AudioUsoIntent.applePlaylistTitles.getter();
    *(_QWORD *)(v0 + 328) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.appName.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = v1;
  if (v2 == 1)
  {
    v3 = closure #1 in AudioUsoIntent.appName.getter();
    v4 = *(_QWORD *)(v0 + 336);
    v5 = *(_QWORD *)(v0 + 344);
    *(_QWORD *)(v0 + 336) = v3;
    *(_QWORD *)(v0 + 344) = v6;
    swift_bridgeObjectRetain();
    outlined consume of String??(v4, v5);
  }
  outlined copy of String??(v1, v2);
  return v3;
}

uint64_t closure #1 in AudioUsoIntent.appName.getter()
{
  uint64_t v0;

  if (!AudioUsoIntent.referenceMediaItem.getter() && !AudioUsoIntent.targetMediaItem.getter())
    return 0;
  if (!dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter())
  {
    swift_release();
    return 0;
  }
  v0 = MEMORY[0x1C3BBCE44]();
  swift_release();
  swift_release();
  return v0;
}

uint64_t AudioUsoIntent.showTitles.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 352))
  {
    v1 = *(_QWORD *)(v0 + 352);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.showTitles.getter();
    *(_QWORD *)(v0 + 352) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.showTitles.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.showTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.showTitles.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E0DA1D30]);
}

uint64_t AudioUsoIntent.podcastTitles.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 360))
  {
    v1 = *(_QWORD *)(v0 + 360);
  }
  else
  {
    v1 = specialized closure #1 in AudioUsoIntent.podcastTitles.getter();
    *(_QWORD *)(v0 + 360) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.applePodcastTitles.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 368))
  {
    v1 = *(_QWORD *)(v0 + 368);
  }
  else
  {
    v1 = specialized closure #1 in AudioUsoIntent.applePodcastTitles.getter();
    *(_QWORD *)(v0 + 368) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.radioStationNames.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 376))
  {
    v1 = *(_QWORD *)(v0 + 376);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.radioStationNames.getter();
    *(_QWORD *)(v0 + 376) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.radioStationNames.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], closure #1 in closure #1 in AudioUsoIntent.radioStationNames.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.radioStationNames.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AudioUsoIntent.albums.getter(a1, MEMORY[0x1E0DA1D48]);
}

uint64_t AudioUsoIntent.decade.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 384);
  if ((_DWORD)result == 12)
  {
    result = closure #1 in AudioUsoIntent.decade.getter();
    *(_BYTE *)(v0 + 384) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.decade.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t result;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  _QWORD *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  void (*v34)(char *, uint64_t);
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(char *, uint64_t);
  uint64_t v39;
  char *v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t);
  char v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  char *v76;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (unint64_t)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (uint64_t *)((char *)&v64 - v4);
  v6 = type metadata accessor for UsoIdentifier();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v75 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v64 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v64 - v13;
  v15 = AudioUsoIntent.rootItems.getter();
  v16 = specialized Sequence.flatMap<A>(_:)(v15, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  v70 = v16;
  if (v16 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v17 = result;
  }
  else
  {
    v17 = *(_QWORD *)((v16 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v19 = v75;
  v66 = v5;
  v67 = v3;
  if (v17)
  {
    if (v17 < 1)
    {
      __break(1u);
      return result;
    }
    v20 = 0;
    v21 = v70 & 0xC000000000000001;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if (v21)
        MEMORY[0x1C3BBF3F4](v20, v70);
      else
        swift_retain();
      v22 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
      v23 = v5;
      v24 = v5[2];
      v25 = v23;
      v26 = v23[3];
      v3 = v24 + 1;
      if (v24 >= v26 >> 1)
        v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v26 > 1), v24 + 1, 1, v25);
      ++v20;
      v25[2] = v3;
      v27 = &v25[v24];
      v5 = v25;
      v27[4] = v22;
      v19 = v75;
    }
    while (v17 != v20);
  }
  else
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v76 = (char *)MEMORY[0x1E0DEE9D8];
  v69 = (char *)v5[2];
  if (v69)
  {
    v28 = 0;
    v68 = v5 + 4;
    v73 = "t";
    v74 = (char *)0x80000001C2502180;
    v65 = v5;
    while (1)
    {
      if ((unint64_t)v28 >= v5[2])
      {
        __break(1u);
        goto LABEL_75;
      }
      v29 = v68[(_QWORD)v28];
      v30 = *(_QWORD *)(v29 + 16);
      if (!v30)
        goto LABEL_20;
      v71 = v68[(_QWORD)v28];
      v72 = v28;
      v31 = v29 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      swift_bridgeObjectRetain_n();
      v32 = *(_QWORD *)(v7 + 72);
      v33 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v33(v14, v31, v6);
      while (1)
      {
        v35 = UsoIdentifier.namespace.getter();
        if (!v36)
        {
          v33(v12, (uint64_t)v14, v6);
LABEL_25:
          v34 = *(void (**)(char *, uint64_t))(v7 + 8);
          v34(v12, v6);
          v34(v14, v6);
          goto LABEL_26;
        }
        if (v35 == 0xD000000000000012 && v36 == v74)
        {
          swift_bridgeObjectRelease();
          v33(v12, (uint64_t)v14, v6);
        }
        else
        {
          v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v33(v12, (uint64_t)v14, v6);
          if ((v3 & 1) == 0)
            goto LABEL_25;
        }
        if (!UsoIdentifier.value.getter() && v37 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
        v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v38 = *(void (**)(char *, uint64_t))(v7 + 8);
        v38(v12, v6);
        v38(v14, v6);
        if ((v3 & 1) == 0)
          break;
LABEL_26:
        v31 += v32;
        if (!--v30)
        {
          swift_bridgeObjectRelease_n();
          v19 = v75;
          v5 = v65;
          goto LABEL_19;
        }
        v33(v14, v31, v6);
      }
      v39 = v71;
      swift_bridgeObjectRelease();
      v40 = v76;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v40 + 2) + 1, 1);
        v40 = v76;
      }
      v5 = v65;
      v3 = *((_QWORD *)v40 + 2);
      v41 = *((_QWORD *)v40 + 3);
      if (v3 >= v41 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v3 + 1, 1);
        v40 = v76;
      }
      *((_QWORD *)v40 + 2) = v3 + 1;
      *(_QWORD *)&v40[8 * v3 + 32] = v39;
      v19 = v75;
LABEL_19:
      v28 = v72;
LABEL_20:
      if (++v28 == v69)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v42 = v76;
        goto LABEL_44;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_44:
  v44 = (uint64_t)v66;
  v43 = v67;
  v71 = *((_QWORD *)v42 + 2);
  if (v71)
  {
    v69 = v42;
    v70 = (unint64_t)(v42 + 32);
    swift_retain();
    v45 = 0;
    v46 = (char *)MEMORY[0x1E0DEE9D8];
    v74 = "t";
    v73 = (char *)0x80000001C2502180;
    while (1)
    {
      v47 = *(_QWORD *)(v70 + 8 * v45);
      v48 = *(_QWORD *)(v47 + 16);
      v72 = v46;
      if (!v48)
      {
        swift_bridgeObjectRetain();
        v56 = 1;
        goto LABEL_60;
      }
      v49 = v47 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
      swift_bridgeObjectRetain_n();
      v50 = *(_QWORD *)(v7 + 72);
      v51 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v51(v19, v49, v6);
      while (1)
      {
        v54 = UsoIdentifier.namespace.getter();
        if (!v55)
          goto LABEL_51;
        if (v54 == 0xD000000000000012 && v55 == v73)
          break;
        v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v52 & 1) != 0)
          goto LABEL_59;
LABEL_51:
        v53 = v75;
        (*(void (**)(char *, uint64_t))(v7 + 8))(v75, v6);
        v49 += v50;
        if (!--v48)
        {
          swift_bridgeObjectRelease();
          v56 = 1;
          v44 = (uint64_t)v66;
          v43 = v67;
          goto LABEL_60;
        }
        v51(v53, v49, v6);
      }
      swift_bridgeObjectRelease();
LABEL_59:
      swift_bridgeObjectRelease();
      v44 = (uint64_t)v66;
      (*(void (**)(_QWORD *, char *, uint64_t))(v7 + 32))(v66, v75, v6);
      v56 = 0;
      v43 = v67;
LABEL_60:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v44, v56, 1, v6);
      outlined init with copy of MediaUserStateCenter?(v44, v43, &demangling cache variable for type metadata for UsoIdentifier?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v43, 1, v6) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for UsoIdentifier?);
        v57 = 0;
        v58 = 0;
      }
      else
      {
        v57 = UsoIdentifier.value.getter();
        v58 = v59;
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v43, v6);
      }
      v60 = specialized static CommonAudio.Decade.from(_:)(v57, v58);
      swift_bridgeObjectRelease();
      outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for UsoIdentifier?);
      swift_bridgeObjectRelease();
      if (v60 == 11)
      {
        v46 = v72;
      }
      else
      {
        v46 = v72;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v46 + 2) + 1, 1, v46);
        v62 = *((_QWORD *)v46 + 2);
        v61 = *((_QWORD *)v46 + 3);
        if (v62 >= v61 >> 1)
          v46 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v62 + 1, 1, v46);
        *((_QWORD *)v46 + 2) = v62 + 1;
        v46[v62 + 32] = v60;
      }
      ++v45;
      v19 = v75;
      if (v45 == v71)
      {
        swift_release_n();
        if (*((_QWORD *)v46 + 2))
          goto LABEL_70;
LABEL_72:
        v63 = 11;
        goto LABEL_73;
      }
    }
  }
  swift_release();
  v46 = (char *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_72;
LABEL_70:
  v63 = v46[32];
LABEL_73:
  swift_bridgeObjectRelease();
  return v63;
}

uint64_t AudioUsoIntent.sort.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 385);
  if ((_DWORD)result == 10)
  {
    result = closure #1 in AudioUsoIntent.sort.getter();
    *(_BYTE *)(v0 + 385) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.sort.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t result;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)v24 - v4;
  v6 = AudioUsoIntent.rootItems.getter();
  v7 = v6;
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (v8)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_11;
LABEL_3:
  v9 = 4;
  v10 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v11 = v9 - 4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      v12 = MEMORY[0x1C3BBF3F4](v9 - 4, v7);
      v13 = v12;
      v14 = v9 - 3;
      if (__OFADD__(v11, 1))
        goto LABEL_31;
    }
    else
    {
      v13 = *(_QWORD *)(v7 + 8 * v9);
      LODWORD(v12) = swift_retain();
      v14 = v9 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_31:
        __break(1u);
LABEL_32:
        if ((_DWORD)v12 == *MEMORY[0x1E0DA1E88])
        {
          v21 = 1;
          goto LABEL_26;
        }
        if ((_DWORD)v12 != *MEMORY[0x1E0DA1E90])
        {
          if ((_DWORD)v12 == *MEMORY[0x1E0DA1EB0])
          {
            v21 = 5;
          }
          else if ((_DWORD)v12 == *MEMORY[0x1E0DA1E98])
          {
            v21 = 2;
          }
          else if ((_DWORD)v12 == *MEMORY[0x1E0DA1EC0])
          {
            v21 = 7;
          }
          else
          {
            if ((_DWORD)v12 != *MEMORY[0x1E0DA1EC8])
            {
              (*(void (**)(char *, uint64_t))(v11 + 8))(v3, v7);
              goto LABEL_25;
            }
            v21 = 6;
          }
LABEL_26:
          outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
          return v21;
        }
LABEL_30:
        v21 = 0;
        goto LABEL_26;
      }
    }
    v15 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v10, v13);
    swift_release();
    if (v15)
      break;
    ++v9;
    if (v14 == v8)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease_n();
  swift_retain();
  v16 = dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter();
  v17 = swift_release();
  if (!v16 || (v18 = MEMORY[0x1C3BBD168](v17), result = swift_release(), !v18))
  {
LABEL_23:
    swift_release();
    goto LABEL_24;
  }
  if (!(v18 >> 62))
  {
    if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_16;
LABEL_46:
    swift_release();
    swift_bridgeObjectRelease();
LABEL_24:
    v22 = type metadata accessor for UsoEntity_common_SortDirection.DefinedValues();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v5, 1, 1, v22);
LABEL_25:
    v21 = 9;
    goto LABEL_26;
  }
  swift_bridgeObjectRetain();
  v23 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v23)
    goto LABEL_46;
LABEL_16:
  if ((v18 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1C3BBF3F4](0, v18);
LABEL_19:
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    v20 = swift_release();
    if (v24[1])
    {
      MEMORY[0x1C3BBD0CC](v20);
      swift_release();
      swift_release();
      v7 = type metadata accessor for UsoEntity_common_SortDirection.DefinedValues();
      v11 = *(_QWORD *)(v7 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v5, 1, v7) == 1)
        goto LABEL_25;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for UsoEntity_common_SortDirection.DefinedValues?);
      LODWORD(v12) = (*(uint64_t (**)(char *, uint64_t))(v11 + 88))(v3, v7);
      if ((_DWORD)v12 == *MEMORY[0x1E0DA1EA8])
      {
        v21 = 4;
        goto LABEL_26;
      }
      if ((_DWORD)v12 == *MEMORY[0x1E0DA1EA0])
      {
        v21 = 3;
        goto LABEL_26;
      }
      if ((_DWORD)v12 == *MEMORY[0x1E0DA1EB8])
        goto LABEL_30;
      goto LABEL_32;
    }
    goto LABEL_23;
  }
  if (*(_QWORD *)((v18 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
    goto LABEL_19;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in AudioUsoIntent.sort.getter()
{
  uint64_t result;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  result = dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter();
  if (!result)
    return result;
  v1 = MEMORY[0x1C3BBD168]();
  result = swift_release();
  if (!v1)
    return 0;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    result = swift_bridgeObjectRelease();
    if (v2)
      goto LABEL_5;
    goto LABEL_11;
  }
  if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_5:
  if ((v1 & 0xC000000000000001) != 0)
  {
    MEMORY[0x1C3BBF3F4](0, v1);
  }
  else
  {
    if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    swift_retain();
  }
  swift_bridgeObjectRelease();
  dispatch thunk of CodeGenListEntry.entry.getter();
  swift_release();
  result = v3;
  if (v3)
  {
    swift_release();
    return 1;
  }
  return result;
}

uint64_t AudioUsoIntent.modifiers.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 392))
  {
    v1 = *(_QWORD *)(v0 + 392);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.modifiers.getter();
    *(_QWORD *)(v0 + 392) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.modifiers.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t (*v33)(uint64_t, uint64_t, unint64_t);
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int (*v44)(uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char v48;
  void (*v49)(uint64_t, unint64_t);
  char *v50;
  Swift::Int v51;
  uint64_t v52;
  char v53;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v55;
  char *v56;
  char v57;
  void (*v58)(char *, uint64_t);
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  Swift::Int v63;
  uint64_t v64;
  char v65;
  int v66;
  Swift::Int v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  Swift::Int v72;
  uint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  char *v78;
  char *v79;
  unint64_t v80;
  char *v81;
  unsigned int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unsigned int v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  char *v101;

  v0 = type metadata accessor for UsoEntity_common_Similarity.DefinedValues();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v78 = (char *)&v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?));
  MEMORY[0x1E0C80A78](v85);
  v97 = (uint64_t)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v84 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v5);
  v94 = (uint64_t)&v77 - v8;
  MEMORY[0x1E0C80A78](v7);
  v87 = (uint64_t)&v77 - v9;
  v10 = type metadata accessor for UsoEntity_common_Quantifier.DefinedValues();
  v95 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v79 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
  MEMORY[0x1E0C80A78](v92);
  v13 = (char *)&v77 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v77 - v19;
  MEMORY[0x1E0C80A78](v18);
  v98 = (char *)&v77 - v21;
  v22 = AudioUsoIntent.rootItems.getter();
  v23 = specialized Sequence.flatMap<A>(_:)(v22, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #1 in closure #1 in AudioUsoIntent.modifiers.getter, 0);
  swift_bridgeObjectRelease();
  if (v23 >> 62)
  {
LABEL_83:
    swift_bridgeObjectRetain_n();
    v24 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v24 = *(_QWORD *)((v23 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v86 = v23;
  if (!v24)
  {
    v17 = (char *)MEMORY[0x1E0DEE9E8];
LABEL_79:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v17;
  }
  v81 = v17;
  v99 = v13;
  v23 = 0;
  v91 = v86 & 0xC000000000000001;
  v80 = v86 + 32;
  v89 = *MEMORY[0x1E0DA16B8];
  v82 = *MEMORY[0x1E0DA16F0];
  v17 = (char *)MEMORY[0x1E0DEE9E8];
  v25 = &demangling cache variable for type metadata for UsoEntity_common_Quantifier.DefinedValues?;
  v96 = v0;
  v83 = v1;
  v88 = v10;
  v1 = v95;
  v93 = v20;
  v13 = v98;
  v90 = v24;
  while (1)
  {
    if (v91)
    {
      v0 = MEMORY[0x1C3BBF3F4](v23, v86);
      v27 = __OFADD__(v23++, 1);
      if (v27)
        goto LABEL_80;
    }
    else
    {
      v0 = *(_QWORD *)(v80 + 8 * v23);
      swift_retain();
      v27 = __OFADD__(v23++, 1);
      if (v27)
      {
LABEL_80:
        __break(1u);
LABEL_81:
        __break(1u);
LABEL_82:
        __break(1u);
        goto LABEL_83;
      }
    }
    v28 = v25;
    if (dispatch thunk of CodeGenGlobalArgs.usoQuantifier.getter())
    {
      MEMORY[0x1C3BBCFD0]();
      swift_release();
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, unint64_t))(v1 + 56))(v13, 1, 1, v10);
    }
    v29 = v13;
    (*(void (**)(char *, _QWORD, unint64_t))(v1 + 104))(v20, v89, v10);
    (*(void (**)(char *, _QWORD, uint64_t, unint64_t))(v1 + 56))(v20, 0, 1, v10);
    v30 = (uint64_t)v99;
    v31 = (uint64_t)&v99[*(int *)(v92 + 48)];
    v32 = (uint64_t)v29;
    v25 = v28;
    outlined init with copy of MediaUserStateCenter?(v32, (uint64_t)v99, v28);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v20, v31, v28);
    v33 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v1 + 48);
    v34 = v33(v30, 1, v10);
    v100 = v0;
    if (v34 == 1)
    {
      if (v33(v31, 1, v10) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v99, v28);
        outlined destroy of MediaUserStateCenter?((uint64_t)v20, v28);
        v13 = v98;
        outlined destroy of MediaUserStateCenter?((uint64_t)v98, v28);
LABEL_34:
        Hasher.init(_seed:)();
        swift_bridgeObjectRetain();
        String.hash(into:)();
        v51 = Hasher._finalize()();
        v52 = -1 << v17[32];
        v10 = v51 & ~v52;
        if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) != 0)
        {
          v0 = ~v52;
          while ((*(_BYTE *)(*((_QWORD *)v17 + 6) + v10) & 1) != 0)
          {
            v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v53 & 1) != 0)
              goto LABEL_5;
            v10 = (v10 + 1) & v0;
            if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) == 0)
              goto LABEL_39;
          }
LABEL_53:
          swift_bridgeObjectRelease();
LABEL_5:
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
LABEL_39:
        swift_bridgeObjectRelease();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v101 = v17;
        if (*((_QWORD *)v17 + 3) <= *((_QWORD *)v17 + 2))
        {
          if (isUniquelyReferenced_nonNull_native)
            specialized _NativeSet.resize(capacity:)();
          else
            specialized _NativeSet.copyAndResize(capacity:)();
          v17 = v101;
          Hasher.init(_seed:)();
          String.hash(into:)();
          v67 = Hasher._finalize()();
          v68 = -1 << v17[32];
          v10 = v67 & ~v68;
          if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) != 0)
          {
            v0 = ~v68;
            while ((*(_BYTE *)(*((_QWORD *)v17 + 6) + v10) & 1) != 0)
            {
              v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              if ((v69 & 1) != 0)
                goto LABEL_85;
              v10 = (v10 + 1) & v0;
              if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) == 0)
              {
                v1 = v95;
                v26 = v90;
                goto LABEL_65;
              }
            }
            goto LABEL_84;
          }
          v1 = v95;
          v26 = v90;
        }
        else
        {
          v1 = v95;
          v26 = v90;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            specialized _NativeSet.copy()();
            v26 = v90;
            v17 = v101;
          }
        }
LABEL_65:
        *(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] |= 1 << v10;
        *(_BYTE *)(*((_QWORD *)v17 + 6) + v10) = 0;
        v70 = *((_QWORD *)v17 + 2);
        v27 = __OFADD__(v70, 1);
        v71 = v70 + 1;
        if (v27)
          goto LABEL_81;
LABEL_77:
        *((_QWORD *)v17 + 2) = v71;
        swift_release();
        swift_bridgeObjectRelease();
        v10 = v88;
        goto LABEL_7;
      }
      goto LABEL_21;
    }
    v35 = (uint64_t)v81;
    outlined init with copy of MediaUserStateCenter?(v30, (uint64_t)v81, v28);
    if (v33(v31, 1, v10) == 1)
    {
      (*(void (**)(uint64_t, unint64_t))(v95 + 8))(v35, v10);
      v20 = v93;
LABEL_21:
      outlined destroy of MediaUserStateCenter?((uint64_t)v99, &demangling cache variable for type metadata for (UsoEntity_common_Quantifier.DefinedValues?, UsoEntity_common_Quantifier.DefinedValues?));
      outlined destroy of MediaUserStateCenter?((uint64_t)v20, v28);
      outlined destroy of MediaUserStateCenter?((uint64_t)v98, v28);
      goto LABEL_22;
    }
    v46 = v95;
    v47 = v79;
    (*(void (**)(char *, uint64_t, unint64_t))(v95 + 32))(v79, v31, v10);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_Quantifier.DefinedValues and conformance UsoEntity_common_Quantifier.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA16D0], MEMORY[0x1E0DA16E0]);
    v48 = dispatch thunk of static Equatable.== infix(_:_:)();
    v49 = *(void (**)(uint64_t, unint64_t))(v46 + 8);
    v49(v35, v10);
    v50 = v47;
    v25 = v28;
    v49((uint64_t)v50, v10);
    outlined destroy of MediaUserStateCenter?(v30, v28);
    v20 = v93;
    outlined destroy of MediaUserStateCenter?((uint64_t)v93, v28);
    v13 = v98;
    outlined destroy of MediaUserStateCenter?((uint64_t)v98, v28);
    if ((v48 & 1) != 0)
      goto LABEL_34;
LABEL_22:
    if (dispatch thunk of CodeGenGlobalArgs.usoSearchQualifier.getter()
      && (v36 = MEMORY[0x1C3BBD144](), v37 = swift_release(), v36))
    {
      v38 = v87;
      MEMORY[0x1C3BBCFE8](v37);
      swift_release();
      v39 = v83;
      v40 = v96;
    }
    else
    {
      v39 = v83;
      v38 = v87;
      v40 = v96;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v87, 1, 1, v96);
    }
    v41 = v94;
    (*(void (**)(uint64_t, _QWORD, uint64_t))(v39 + 104))(v94, v82, v40);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v39 + 56))(v41, 0, 1, v40);
    v42 = v97;
    v43 = v97 + *(int *)(v85 + 48);
    outlined init with copy of MediaUserStateCenter?(v38, v97, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?(v41, v43, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
    v45 = v42;
    v0 = v96;
    if (v44(v45, 1, v96) == 1)
      break;
    outlined init with copy of MediaUserStateCenter?(v97, v84, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    if (v44(v43, 1, v0) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v94, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v87, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v84, v0);
      goto LABEL_31;
    }
    v55 = v84;
    v56 = v78;
    (*(void (**)(char *, uint64_t, uint64_t))(v39 + 32))(v78, v43, v0);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_Similarity.DefinedValues and conformance UsoEntity_common_Similarity.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA16F8], MEMORY[0x1E0DA1708]);
    v57 = dispatch thunk of static Equatable.== infix(_:_:)();
    v58 = *(void (**)(char *, uint64_t))(v39 + 8);
    v59 = v56;
    v25 = v28;
    v60 = v97;
    v0 = (uint64_t)v93;
    v61 = v94;
    v58(v59, v96);
    outlined destroy of MediaUserStateCenter?(v61, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v87, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    v62 = v55;
    v13 = v98;
    v58((char *)v62, v96);
    v20 = (char *)v0;
    outlined destroy of MediaUserStateCenter?(v60, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
    if ((v57 & 1) != 0)
      goto LABEL_43;
LABEL_6:
    swift_release();
    v10 = v88;
    v1 = v95;
    v26 = v90;
LABEL_7:
    if (v23 == v26)
      goto LABEL_79;
  }
  outlined destroy of MediaUserStateCenter?(v94, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  if (v44(v43, 1, v0) != 1)
  {
LABEL_31:
    outlined destroy of MediaUserStateCenter?(v97, &demangling cache variable for type metadata for (UsoEntity_common_Similarity.DefinedValues?, UsoEntity_common_Similarity.DefinedValues?));
    v20 = v93;
    v13 = v98;
    goto LABEL_6;
  }
  outlined destroy of MediaUserStateCenter?(v97, &demangling cache variable for type metadata for UsoEntity_common_Similarity.DefinedValues?);
  v20 = v93;
  v13 = v98;
LABEL_43:
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  v63 = Hasher._finalize()();
  v64 = -1 << v17[32];
  v10 = v63 & ~v64;
  if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) != 0)
  {
    v0 = ~v64;
    while (*(_BYTE *)(*((_QWORD *)v17 + 6) + v10) != 1)
    {
      v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v65 & 1) != 0)
        goto LABEL_5;
      v10 = (v10 + 1) & v0;
      if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) == 0)
        goto LABEL_48;
    }
    goto LABEL_53;
  }
LABEL_48:
  swift_bridgeObjectRelease();
  v66 = swift_isUniquelyReferenced_nonNull_native();
  v101 = v17;
  if (*((_QWORD *)v17 + 3) > *((_QWORD *)v17 + 2))
  {
    v1 = v95;
    v26 = v90;
    if ((v66 & 1) == 0)
    {
      specialized _NativeSet.copy()();
      v26 = v90;
      v17 = v101;
    }
    goto LABEL_76;
  }
  if (v66)
    specialized _NativeSet.resize(capacity:)();
  else
    specialized _NativeSet.copyAndResize(capacity:)();
  v17 = v101;
  Hasher.init(_seed:)();
  String.hash(into:)();
  v72 = Hasher._finalize()();
  v73 = -1 << v17[32];
  v10 = v72 & ~v73;
  if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) == 0)
  {
    v1 = v95;
    v26 = v90;
LABEL_76:
    *(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] |= 1 << v10;
    *(_BYTE *)(*((_QWORD *)v17 + 6) + v10) = 1;
    v75 = *((_QWORD *)v17 + 2);
    v27 = __OFADD__(v75, 1);
    v71 = v75 + 1;
    if (v27)
      goto LABEL_82;
    goto LABEL_77;
  }
  v0 = ~v73;
  while (*(_BYTE *)(*((_QWORD *)v17 + 6) + v10) != 1)
  {
    v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v74 & 1) != 0)
      goto LABEL_85;
    v10 = (v10 + 1) & v0;
    if (((*(_QWORD *)&v17[((v10 >> 3) & 0xFFFFFFFFFFFFF8) + 56] >> v10) & 1) == 0)
    {
      v1 = v95;
      v26 = v90;
      goto LABEL_76;
    }
  }
LABEL_84:
  swift_bridgeObjectRelease();
LABEL_85:
  result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

BOOL closure #1 in closure #1 in AudioUsoIntent.modifiers.getter()
{
  return UsoEntity_common_MediaItem.isMoreOf()() || UsoEntity_common_MediaItem.isDifferentThan()();
}

uint64_t AudioUsoIntent.reference.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 400);
  if ((_DWORD)result == 3)
  {
    result = closure #1 in AudioUsoIntent.reference.getter();
    *(_BYTE *)(v0 + 400) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.reference.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v23 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v23 - v4;
  v6 = AudioUsoIntent.rootItems.getter();
  v7 = v6;
  if (!(v6 >> 62))
  {
    v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_3;
LABEL_11:
    swift_bridgeObjectRelease_n();
LABEL_12:
    v15 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v5, 1, 1, v15);
    goto LABEL_13;
  }
LABEL_24:
  swift_bridgeObjectRetain();
  v8 = _CocoaArrayWrapper.endIndex.getter();
  if (!v8)
    goto LABEL_11;
LABEL_3:
  v9 = 4;
  v10 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    v11 = v9 - 4;
    if ((v7 & 0xC000000000000001) != 0)
    {
      v12 = MEMORY[0x1C3BBF3F4](v9 - 4, v7);
      v13 = v9 - 3;
      if (__OFADD__(v11, 1))
        goto LABEL_23;
    }
    else
    {
      v12 = *(_QWORD *)(v7 + 8 * v9);
      swift_retain();
      v13 = v9 - 3;
      if (__OFADD__(v11, 1))
      {
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
    }
    v14 = specialized UsoEntity_common_MediaItem.findFirst(options:with:)(v10, v12);
    swift_release();
    if (v14)
      break;
    ++v9;
    if (v13 == v8)
      goto LABEL_11;
  }
  swift_bridgeObjectRelease_n();
  swift_retain();
  v18 = dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter();
  v19 = swift_release();
  if (!v18)
  {
    swift_release();
    goto LABEL_12;
  }
  MEMORY[0x1C3BBD0B4](v19);
  swift_release();
  swift_release();
  v20 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v5, 1, v20) == 1)
    goto LABEL_13;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  v22 = (*(uint64_t (**)(char *, uint64_t))(v21 + 88))(v3, v20);
  if (v22 == *MEMORY[0x1E0DA1E58])
  {
    v16 = 1;
    goto LABEL_14;
  }
  if (v22 == *MEMORY[0x1E0DA1E60])
  {
    v16 = 0;
    goto LABEL_14;
  }
  (*(void (**)(char *, uint64_t))(v21 + 8))(v3, v20);
LABEL_13:
  v16 = 2;
LABEL_14:
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  return v16;
}

uint64_t AudioUsoIntent.genres.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 408))
  {
    v1 = *(_QWORD *)(v0 + 408);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.genres.getter();
    *(_QWORD *)(v0 + 408) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.genres.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v67 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v60 = (char *)&v60 - v5;
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v60 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v60 - v9;
  v11 = AudioUsoIntent.rootItems.getter();
  v12 = specialized Sequence.flatMap<A>(_:)(v11, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  v64 = v12;
  if (v12 >> 62)
  {
LABEL_63:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v13 = result;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = v67;
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
      return result;
    }
    v17 = 0;
    v18 = v64 & 0xC000000000000001;
    do
    {
      if (v18)
        MEMORY[0x1C3BBF3F4](v17, v64);
      else
        swift_retain();
      v19 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      v20 = v15;
      v21 = v15[2];
      v22 = v20;
      v23 = v20[3];
      if (v21 >= v23 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v21 + 1, 1, v22);
      ++v17;
      v22[2] = v21 + 1;
      v24 = &v22[v21];
      v15 = v22;
      v24[4] = v19;
      v16 = v67;
    }
    while (v13 != v17);
  }
  swift_bridgeObjectRelease();
  v68 = MEMORY[0x1E0DEE9D8];
  v63 = v15[2];
  if (v63)
  {
    v25 = 0;
    v61 = v15;
    v62 = v15 + 4;
    while (1)
    {
      if (v25 >= v15[2])
      {
        __break(1u);
        goto LABEL_63;
      }
      v26 = (_QWORD *)v62[v25];
      v27 = v26[2];
      if (!v27)
        goto LABEL_17;
      v65 = v25;
      v66 = v26;
      v28 = (uint64_t)v26 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      swift_bridgeObjectRetain_n();
      v29 = *(_QWORD *)(v1 + 72);
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
      v30(v10, v28, v0);
      while (1)
      {
        v32 = UsoIdentifier.namespace.getter();
        if (!v33)
        {
          v30(v8, (uint64_t)v10, v0);
LABEL_22:
          v31 = *(void (**)(char *, uint64_t))(v1 + 8);
          v31(v8, v0);
          v31(v10, v0);
          goto LABEL_23;
        }
        if (v32 == 0x6E6547636973756DLL && v33 == 0xEA00000000006572)
        {
          swift_bridgeObjectRelease();
          v30(v8, (uint64_t)v10, v0);
        }
        else
        {
          v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v30(v8, (uint64_t)v10, v0);
          if ((v34 & 1) == 0)
            goto LABEL_22;
        }
        if (!UsoIdentifier.value.getter() && v35 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v37 = *(void (**)(char *, uint64_t))(v1 + 8);
        v37(v8, v0);
        v37(v10, v0);
        if ((v36 & 1) == 0)
          break;
LABEL_23:
        v28 += v29;
        if (!--v27)
        {
          swift_bridgeObjectRelease_n();
          v16 = v67;
          v15 = v61;
          v25 = v65;
          goto LABEL_17;
        }
        v30(v10, v28, v0);
      }
      swift_bridgeObjectRelease();
      v38 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1);
        v38 = v68;
      }
      v15 = v61;
      v25 = v65;
      v39 = v66;
      v41 = *(_QWORD *)(v38 + 16);
      v40 = *(_QWORD *)(v38 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v39 = v66;
        v38 = v68;
      }
      *(_QWORD *)(v38 + 16) = v41 + 1;
      *(_QWORD *)(v38 + 8 * v41 + 32) = v39;
      v16 = v67;
LABEL_17:
      if (++v25 == v63)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v42 = v68;
        goto LABEL_41;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x1E0DEE9D8];
LABEL_41:
  v65 = *(_QWORD *)(v42 + 16);
  if (!v65)
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v63 = v42;
  v64 = v42 + 32;
  swift_retain();
  v43 = 0;
  v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v45 = *(_QWORD *)(v64 + 8 * v43);
    v46 = *(_QWORD *)(v45 + 16);
    if (!v46)
      goto LABEL_44;
    v66 = v44;
    v47 = v45 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    swift_bridgeObjectRetain_n();
    v48 = *(_QWORD *)(v1 + 72);
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    v49(v16, v47, v0);
    while (1)
    {
      v51 = UsoIdentifier.namespace.getter();
      if (!v52)
        goto LABEL_48;
      if (v51 == 0x6E6547636973756DLL && v52 == 0xEA00000000006572)
        break;
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
        goto LABEL_54;
LABEL_48:
      v16 = v67;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v67, v0);
      v47 += v48;
      if (!--v46)
      {
        swift_bridgeObjectRelease_n();
        v44 = v66;
        goto LABEL_44;
      }
      v49(v16, v47, v0);
    }
    swift_bridgeObjectRelease();
LABEL_54:
    swift_bridgeObjectRelease();
    v53 = v60;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v60, v67, v0);
    v54 = UsoIdentifier.value.getter();
    v56 = v55;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v53, v0);
    swift_bridgeObjectRelease();
    v44 = v66;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
    v58 = v44[2];
    v57 = v44[3];
    if (v58 >= v57 >> 1)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v44);
    v44[2] = v58 + 1;
    v59 = &v44[2 * v58];
    v59[4] = v54;
    v59[5] = v56;
    v16 = v67;
LABEL_44:
    if (++v43 != v65)
      continue;
    break;
  }
  swift_release_n();
  return (uint64_t)v44;
}

uint64_t AudioUsoIntent.moods.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 416))
  {
    v1 = *(_QWORD *)(v0 + 416);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.moods.getter();
    *(_QWORD *)(v0 + 416) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.moods.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t v68;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v67 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v60 = (char *)&v60 - v5;
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v60 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v60 - v9;
  v11 = AudioUsoIntent.rootItems.getter();
  v12 = specialized Sequence.flatMap<A>(_:)(v11, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  v64 = v12;
  if (v12 >> 62)
  {
LABEL_63:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v13 = result;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = v67;
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
      return result;
    }
    v17 = 0;
    v18 = v64 & 0xC000000000000001;
    do
    {
      if (v18)
        MEMORY[0x1C3BBF3F4](v17, v64);
      else
        swift_retain();
      v19 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      v20 = v15;
      v21 = v15[2];
      v22 = v20;
      v23 = v20[3];
      if (v21 >= v23 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v21 + 1, 1, v22);
      ++v17;
      v22[2] = v21 + 1;
      v24 = &v22[v21];
      v15 = v22;
      v24[4] = v19;
      v16 = v67;
    }
    while (v13 != v17);
  }
  swift_bridgeObjectRelease();
  v68 = MEMORY[0x1E0DEE9D8];
  v63 = v15[2];
  if (v63)
  {
    v25 = 0;
    v61 = v15;
    v62 = v15 + 4;
    while (1)
    {
      if (v25 >= v15[2])
      {
        __break(1u);
        goto LABEL_63;
      }
      v26 = (_QWORD *)v62[v25];
      v27 = v26[2];
      if (!v27)
        goto LABEL_17;
      v65 = v25;
      v66 = v26;
      v28 = (uint64_t)v26 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      swift_bridgeObjectRetain_n();
      v29 = *(_QWORD *)(v1 + 72);
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
      v30(v10, v28, v0);
      while (1)
      {
        v32 = UsoIdentifier.namespace.getter();
        if (!v33)
        {
          v30(v8, (uint64_t)v10, v0);
LABEL_22:
          v31 = *(void (**)(char *, uint64_t))(v1 + 8);
          v31(v8, v0);
          v31(v10, v0);
          goto LABEL_23;
        }
        if (v32 == 0x616C50616964656DLL && v33 == 0xEF646F6F4D726579)
        {
          swift_bridgeObjectRelease();
          v30(v8, (uint64_t)v10, v0);
        }
        else
        {
          v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v30(v8, (uint64_t)v10, v0);
          if ((v34 & 1) == 0)
            goto LABEL_22;
        }
        if (!UsoIdentifier.value.getter() && v35 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v37 = *(void (**)(char *, uint64_t))(v1 + 8);
        v37(v8, v0);
        v37(v10, v0);
        if ((v36 & 1) == 0)
          break;
LABEL_23:
        v28 += v29;
        if (!--v27)
        {
          swift_bridgeObjectRelease_n();
          v16 = v67;
          v15 = v61;
          v25 = v65;
          goto LABEL_17;
        }
        v30(v10, v28, v0);
      }
      swift_bridgeObjectRelease();
      v38 = v68;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1);
        v38 = v68;
      }
      v15 = v61;
      v25 = v65;
      v39 = v66;
      v41 = *(_QWORD *)(v38 + 16);
      v40 = *(_QWORD *)(v38 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v39 = v66;
        v38 = v68;
      }
      *(_QWORD *)(v38 + 16) = v41 + 1;
      *(_QWORD *)(v38 + 8 * v41 + 32) = v39;
      v16 = v67;
LABEL_17:
      if (++v25 == v63)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v42 = v68;
        goto LABEL_41;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x1E0DEE9D8];
LABEL_41:
  v65 = *(_QWORD *)(v42 + 16);
  if (!v65)
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v63 = v42;
  v64 = v42 + 32;
  swift_retain();
  v43 = 0;
  v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (2)
  {
    v45 = *(_QWORD *)(v64 + 8 * v43);
    v46 = *(_QWORD *)(v45 + 16);
    if (!v46)
      goto LABEL_44;
    v66 = v44;
    v47 = v45 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    swift_bridgeObjectRetain_n();
    v48 = *(_QWORD *)(v1 + 72);
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    v49(v16, v47, v0);
    while (1)
    {
      v51 = UsoIdentifier.namespace.getter();
      if (!v52)
        goto LABEL_48;
      if (v51 == 0x616C50616964656DLL && v52 == 0xEF646F6F4D726579)
        break;
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
        goto LABEL_54;
LABEL_48:
      v16 = v67;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v67, v0);
      v47 += v48;
      if (!--v46)
      {
        swift_bridgeObjectRelease_n();
        v44 = v66;
        goto LABEL_44;
      }
      v49(v16, v47, v0);
    }
    swift_bridgeObjectRelease();
LABEL_54:
    swift_bridgeObjectRelease();
    v53 = v60;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v60, v67, v0);
    v54 = UsoIdentifier.value.getter();
    v56 = v55;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v53, v0);
    swift_bridgeObjectRelease();
    v44 = v66;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
    v58 = v44[2];
    v57 = v44[3];
    if (v58 >= v57 >> 1)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v44);
    v44[2] = v58 + 1;
    v59 = &v44[2 * v58];
    v59[4] = v54;
    v59[5] = v56;
    v16 = v67;
LABEL_44:
    if (++v43 != v65)
      continue;
    break;
  }
  swift_release_n();
  return (uint64_t)v44;
}

uint64_t AudioUsoIntent.activities.getter()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_QWORD *)(v0 + 424))
  {
    v1 = *(_QWORD *)(v0 + 424);
  }
  else
  {
    v1 = closure #1 in AudioUsoIntent.activities.getter();
    *(_QWORD *)(v0 + 424) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t closure #1 in AudioUsoIntent.activities.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t result;
  _QWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  char v34;
  uint64_t v35;
  char v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t, uint64_t);
  char v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  char *v60;
  _QWORD *v61;
  _QWORD *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  char *v67;
  char *v68;
  char *v69;
  uint64_t v70;

  v0 = type metadata accessor for UsoIdentifier();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = MEMORY[0x1E0C80A78](v0);
  v69 = (char *)&v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v60 = (char *)&v60 - v5;
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v60 - v7;
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v60 - v9;
  v11 = AudioUsoIntent.rootItems.getter();
  v12 = specialized Sequence.flatMap<A>(_:)(v11, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  v64 = v12;
  if (v12 >> 62)
  {
LABEL_63:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v13 = result;
  }
  else
  {
    v13 = *(_QWORD *)((v12 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v15 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v16 = v69;
  if (v13)
  {
    if (v13 < 1)
    {
      __break(1u);
      return result;
    }
    v17 = 0;
    v18 = v64 & 0xC000000000000001;
    do
    {
      if (v18)
        MEMORY[0x1C3BBF3F4](v17, v64);
      else
        swift_retain();
      v19 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15[2] + 1, 1, v15);
      v20 = v15;
      v21 = v15[2];
      v22 = v20;
      v23 = v20[3];
      if (v21 >= v23 >> 1)
        v22 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v23 > 1), v21 + 1, 1, v22);
      ++v17;
      v22[2] = v21 + 1;
      v24 = &v22[v21];
      v15 = v22;
      v24[4] = v19;
      v16 = v69;
    }
    while (v13 != v17);
  }
  swift_bridgeObjectRelease();
  v70 = MEMORY[0x1E0DEE9D8];
  v63 = v15[2];
  if (v63)
  {
    v25 = 0;
    v61 = v15;
    v62 = v15 + 4;
    v67 = "de";
    v68 = (char *)0x80000001C25021B0;
    while (1)
    {
      if (v25 >= v15[2])
      {
        __break(1u);
        goto LABEL_63;
      }
      v26 = (_QWORD *)v62[v25];
      v27 = v26[2];
      if (!v27)
        goto LABEL_17;
      v65 = v25;
      v66 = v26;
      v28 = (uint64_t)v26 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
      swift_bridgeObjectRetain_n();
      v29 = *(_QWORD *)(v1 + 72);
      v30 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
      v30(v10, v28, v0);
      while (1)
      {
        v32 = UsoIdentifier.namespace.getter();
        if (!v33)
        {
          v30(v8, (uint64_t)v10, v0);
LABEL_22:
          v31 = *(void (**)(char *, uint64_t))(v1 + 8);
          v31(v8, v0);
          v31(v10, v0);
          goto LABEL_23;
        }
        if (v32 == 0xD000000000000013 && v33 == v68)
        {
          swift_bridgeObjectRelease();
          v30(v8, (uint64_t)v10, v0);
        }
        else
        {
          v34 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v30(v8, (uint64_t)v10, v0);
          if ((v34 & 1) == 0)
            goto LABEL_22;
        }
        if (!UsoIdentifier.value.getter() && v35 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_22;
        }
        v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v37 = *(void (**)(char *, uint64_t))(v1 + 8);
        v37(v8, v0);
        v37(v10, v0);
        if ((v36 & 1) == 0)
          break;
LABEL_23:
        v28 += v29;
        if (!--v27)
        {
          swift_bridgeObjectRelease_n();
          v16 = v69;
          v15 = v61;
          v25 = v65;
          goto LABEL_17;
        }
        v30(v10, v28, v0);
      }
      swift_bridgeObjectRelease();
      v38 = v70;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1);
        v38 = v70;
      }
      v15 = v61;
      v25 = v65;
      v39 = v66;
      v41 = *(_QWORD *)(v38 + 16);
      v40 = *(_QWORD *)(v38 + 24);
      if (v41 >= v40 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1);
        v39 = v66;
        v38 = v70;
      }
      *(_QWORD *)(v38 + 16) = v41 + 1;
      *(_QWORD *)(v38 + 8 * v41 + 32) = v39;
      v16 = v69;
LABEL_17:
      if (++v25 == v63)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v42 = v70;
        goto LABEL_41;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v42 = MEMORY[0x1E0DEE9D8];
LABEL_41:
  v65 = *(_QWORD *)(v42 + 16);
  if (!v65)
  {
    swift_release();
    return MEMORY[0x1E0DEE9D8];
  }
  v63 = v42;
  v64 = v42 + 32;
  swift_retain();
  v43 = 0;
  v44 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v68 = "de";
  v67 = (char *)0x80000001C25021B0;
  while (2)
  {
    v45 = *(_QWORD *)(v64 + 8 * v43);
    v46 = *(_QWORD *)(v45 + 16);
    if (!v46)
      goto LABEL_44;
    v66 = v44;
    v47 = v45 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    swift_bridgeObjectRetain_n();
    v48 = *(_QWORD *)(v1 + 72);
    v49 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    v49(v16, v47, v0);
    while (1)
    {
      v51 = UsoIdentifier.namespace.getter();
      if (!v52)
        goto LABEL_48;
      if (v51 == 0xD000000000000013 && v52 == v67)
        break;
      v50 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v50 & 1) != 0)
        goto LABEL_54;
LABEL_48:
      v16 = v69;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v69, v0);
      v47 += v48;
      if (!--v46)
      {
        swift_bridgeObjectRelease_n();
        v44 = v66;
        goto LABEL_44;
      }
      v49(v16, v47, v0);
    }
    swift_bridgeObjectRelease();
LABEL_54:
    swift_bridgeObjectRelease();
    v53 = v60;
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v60, v69, v0);
    v54 = UsoIdentifier.value.getter();
    v56 = v55;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v53, v0);
    swift_bridgeObjectRelease();
    v44 = v66;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44[2] + 1, 1, v44);
    v58 = v44[2];
    v57 = v44[3];
    if (v58 >= v57 >> 1)
      v44 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v57 > 1), v58 + 1, 1, v44);
    v44[2] = v58 + 1;
    v59 = &v44[2 * v58];
    v59[4] = v54;
    v59[5] = v56;
    v16 = v69;
LABEL_44:
    if (++v43 != v65)
      continue;
    break;
  }
  swift_release_n();
  return (uint64_t)v44;
}

uint64_t AudioUsoIntent.radioType.getter()
{
  uint64_t v0;
  uint64_t result;

  result = *(unsigned __int8 *)(v0 + 432);
  if ((_DWORD)result == 3)
  {
    result = closure #1 in AudioUsoIntent.radioType.getter();
    *(_BYTE *)(v0 + 432) = result;
  }
  return result;
}

uint64_t closure #1 in AudioUsoIntent.radioType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  const char *v35;
  char v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char v54;
  char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  void *v61;
  Swift::String v62;
  Swift::Int v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD *v68;
  char *v69;
  char *v70;
  _QWORD *v71;
  char *v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  const char *v76;
  const char *v77;
  char *v78;
  char *v79;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v70 = (char *)&v67 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v69 = (char *)&v67 - v3;
  v4 = type metadata accessor for UsoIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v78 = (char *)&v67 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v67 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v67 - v11;
  v13 = AudioUsoIntent.rootItems.getter();
  v14 = specialized Sequence.flatMap<A>(_:)(v13, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  v73 = v14;
  if (v14 >> 62)
  {
LABEL_75:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v15 = result;
  }
  else
  {
    v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v17 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v18 = v78;
  if (v15)
  {
    if (v15 < 1)
    {
      __break(1u);
      return result;
    }
    v19 = 0;
    v20 = v73 & 0xC000000000000001;
    do
    {
      if (v20)
        MEMORY[0x1C3BBF3F4](v19, v73);
      else
        swift_retain();
      v21 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17[2] + 1, 1, v17);
      v22 = v17;
      v23 = v17[2];
      v24 = v22;
      v25 = v22[3];
      if (v23 >= v25 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v23 + 1, 1, v24);
      ++v19;
      v24[2] = v23 + 1;
      v26 = &v24[v23];
      v17 = v24;
      v26[4] = v21;
      v18 = v78;
    }
    while (v15 != v19);
  }
  swift_bridgeObjectRelease();
  v79 = (char *)MEMORY[0x1E0DEE9D8];
  v72 = (char *)v17[2];
  if (v72)
  {
    v27 = 0;
    v71 = v17 + 4;
    v76 = "mediaPlayerActivity";
    v77 = (const char *)0x80000001C25021D0;
    v68 = v17;
    while (1)
    {
      if ((unint64_t)v27 >= v17[2])
      {
        __break(1u);
        goto LABEL_75;
      }
      v28 = v71[(_QWORD)v27];
      v29 = *(_QWORD *)(v28 + 16);
      if (!v29)
        goto LABEL_18;
      v74 = v71[(_QWORD)v27];
      v75 = v27;
      v30 = v28 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      swift_bridgeObjectRetain_n();
      v31 = *(_QWORD *)(v5 + 72);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v32(v12, v30, v4);
      while (1)
      {
        v34 = UsoIdentifier.namespace.getter();
        if (!v35)
        {
          v32(v10, (uint64_t)v12, v4);
LABEL_23:
          v33 = *(void (**)(char *, uint64_t))(v5 + 8);
          v33(v10, v4);
          v33(v12, v4);
          goto LABEL_24;
        }
        if (v34 == 0xD000000000000014 && v35 == v77)
        {
          swift_bridgeObjectRelease();
          v32(v10, (uint64_t)v12, v4);
        }
        else
        {
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v32(v10, (uint64_t)v12, v4);
          if ((v36 & 1) == 0)
            goto LABEL_23;
        }
        if (!UsoIdentifier.value.getter() && v37 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_23;
        }
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v39 = *(void (**)(char *, uint64_t))(v5 + 8);
        v39(v10, v4);
        v39(v12, v4);
        if ((v38 & 1) == 0)
          break;
LABEL_24:
        v30 += v31;
        if (!--v29)
        {
          swift_bridgeObjectRelease_n();
          v18 = v78;
          v17 = v68;
          goto LABEL_17;
        }
        v32(v12, v30, v4);
      }
      v40 = v74;
      swift_bridgeObjectRelease();
      v41 = v79;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v41 + 2) + 1, 1);
        v41 = v79;
      }
      v17 = v68;
      v43 = *((_QWORD *)v41 + 2);
      v42 = *((_QWORD *)v41 + 3);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        v41 = v79;
      }
      *((_QWORD *)v41 + 2) = v43 + 1;
      *(_QWORD *)&v41[8 * v43 + 32] = v40;
      v18 = v78;
LABEL_17:
      v27 = v75;
LABEL_18:
      if (++v27 == v72)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = v79;
        goto LABEL_42;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = (char *)MEMORY[0x1E0DEE9D8];
LABEL_42:
  v46 = (uint64_t)v69;
  v45 = (uint64_t)v70;
  v74 = *((_QWORD *)v44 + 2);
  if (v74)
  {
    v72 = v44;
    v73 = (unint64_t)(v44 + 32);
    swift_retain();
    v47 = 0;
    v48 = (char *)MEMORY[0x1E0DEE9D8];
    v77 = "mediaPlayerActivity";
    v76 = (const char *)0x80000001C25021D0;
    while (1)
    {
      v75 = v48;
      v49 = *(_QWORD *)(v73 + 8 * v47);
      v50 = *(_QWORD *)(v49 + 16);
      if (!v50)
      {
        swift_bridgeObjectRetain();
        v58 = 1;
        v48 = v75;
        goto LABEL_59;
      }
      v51 = v49 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      swift_bridgeObjectRetain_n();
      v52 = *(_QWORD *)(v5 + 72);
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v53(v18, v51, v4);
      while (1)
      {
        v56 = UsoIdentifier.namespace.getter();
        if (!v57)
          goto LABEL_49;
        if (v56 == 0xD000000000000014 && v57 == v76)
          break;
        v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v54 & 1) != 0)
          goto LABEL_57;
LABEL_49:
        v55 = v78;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v78, v4);
        v51 += v52;
        if (!--v50)
        {
          swift_bridgeObjectRelease();
          v58 = 1;
          v46 = (uint64_t)v69;
          v45 = (uint64_t)v70;
          goto LABEL_58;
        }
        v53(v55, v51, v4);
      }
      swift_bridgeObjectRelease();
LABEL_57:
      swift_bridgeObjectRelease();
      v46 = (uint64_t)v69;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v69, v78, v4);
      v58 = 0;
      v45 = (uint64_t)v70;
LABEL_58:
      v48 = v75;
LABEL_59:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v46, v58, 1, v4);
      outlined init with copy of MediaUserStateCenter?(v46, v45, &demangling cache variable for type metadata for UsoIdentifier?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v45, 1, v4) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoIdentifier?);
        v59 = 0;
        v60 = (void *)0xE000000000000000;
      }
      else
      {
        v59 = UsoIdentifier.value.getter();
        v60 = v61;
        (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v45, v4);
      }
      v62._countAndFlagsBits = v59;
      v62._object = v60;
      v63 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of closure #1 in AudioUsoIntent.radioType.getter, v62);
      swift_bridgeObjectRelease();
      if (v63 && (v18 = v78, v63 != 1))
      {
        outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
      }
      else
      {
        outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
        v65 = *((_QWORD *)v48 + 2);
        v64 = *((_QWORD *)v48 + 3);
        if (v65 >= v64 >> 1)
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, v48);
        *((_QWORD *)v48 + 2) = v65 + 1;
        v48[v65 + 32] = v63;
        v18 = v78;
      }
      if (++v47 == v74)
      {
        swift_release_n();
        if (*((_QWORD *)v48 + 2))
          goto LABEL_70;
LABEL_72:
        swift_bridgeObjectRelease();
        return 2;
      }
    }
  }
  swift_release();
  v48 = (char *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_72;
LABEL_70:
  v66 = v48[32];
  swift_bridgeObjectRelease();
  return v66;
}

uint64_t AudioUsoIntent.frequency.getter()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  if ((*(_BYTE *)(v0 + 449) & 1) == 0)
    return *(_QWORD *)(v0 + 440);
  result = closure #1 in AudioUsoIntent.frequency.getter();
  *(_QWORD *)(v0 + 440) = result;
  *(_BYTE *)(v0 + 448) = v2 & 1;
  *(_BYTE *)(v0 + 449) = 0;
  return result;
}

uint64_t closure #1 in AudioUsoIntent.frequency.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t result;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  const char *v35;
  char v36;
  uint64_t v37;
  char v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(char *, uint64_t, uint64_t);
  char v54;
  char *v55;
  uint64_t v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;
  _BYTE *v64;
  BOOL v65;
  _BYTE *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  char *v74;
  char *v75;
  _QWORD *v76;
  _QWORD *v77;
  unint64_t v78;
  uint64_t v79;
  _QWORD *v80;
  const char *v81;
  const char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v75 = (char *)&v72 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v74 = (char *)&v72 - v3;
  v4 = type metadata accessor for UsoIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v83 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v72 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v72 - v11;
  v13 = AudioUsoIntent.rootItems.getter();
  v14 = 0;
  v15 = specialized Sequence.flatMap<A>(_:)(v13, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))closure #2 in closure #1 in AudioUsoIntent.noun.getter, 0);
  swift_bridgeObjectRelease();
  v78 = v15;
  if (v15 >> 62)
  {
LABEL_91:
    swift_bridgeObjectRetain();
    result = _CocoaArrayWrapper.endIndex.getter();
    v16 = result;
  }
  else
  {
    v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
  }
  v18 = v83;
  v72 = v14;
  if (v16)
  {
    if (v16 < 1)
    {
      __break(1u);
      return result;
    }
    v19 = 0;
    v20 = v78 & 0xC000000000000001;
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if (v20)
        MEMORY[0x1C3BBF3F4](v19, v78);
      else
        swift_retain();
      v21 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
      swift_release();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      v22 = v14;
      v23 = v14[2];
      v24 = v22;
      v25 = v22[3];
      if (v23 >= v25 >> 1)
        v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v25 > 1), v23 + 1, 1, v24);
      ++v19;
      v24[2] = v23 + 1;
      v26 = &v24[v23];
      v14 = v24;
      v26[4] = v21;
      v18 = v83;
    }
    while (v16 != v19);
  }
  else
  {
    v14 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v84 = MEMORY[0x1E0DEE9D8];
  v77 = (_QWORD *)v14[2];
  if (v77)
  {
    v27 = 0;
    v76 = v14 + 4;
    v81 = "mediaPlayerReference";
    v82 = (const char *)0x80000001C2502230;
    v73 = v14;
    while (1)
    {
      if (v27 >= v14[2])
      {
        __break(1u);
        goto LABEL_91;
      }
      v28 = v76[v27];
      v29 = *(_QWORD *)(v28 + 16);
      if (!v29)
        goto LABEL_20;
      v79 = v76[v27];
      v80 = (_QWORD *)v27;
      v30 = v28 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      swift_bridgeObjectRetain_n();
      v31 = *(_QWORD *)(v5 + 72);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v32(v12, v30, v4);
      while (1)
      {
        v34 = UsoIdentifier.namespace.getter();
        if (!v35)
        {
          v32(v10, (uint64_t)v12, v4);
LABEL_25:
          v33 = *(void (**)(char *, uint64_t))(v5 + 8);
          v33(v10, v4);
          v33(v12, v4);
          goto LABEL_26;
        }
        if (v34 == 0xD000000000000015 && v35 == v82)
        {
          swift_bridgeObjectRelease();
          v32(v10, (uint64_t)v12, v4);
        }
        else
        {
          v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          v32(v10, (uint64_t)v12, v4);
          if ((v36 & 1) == 0)
            goto LABEL_25;
        }
        if (!UsoIdentifier.value.getter() && v37 == 0xE000000000000000)
        {
          swift_bridgeObjectRelease();
          goto LABEL_25;
        }
        v38 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v39 = *(void (**)(char *, uint64_t))(v5 + 8);
        v39(v10, v4);
        v39(v12, v4);
        if ((v38 & 1) == 0)
          break;
LABEL_26:
        v30 += v31;
        if (!--v29)
        {
          swift_bridgeObjectRelease_n();
          goto LABEL_19;
        }
        v32(v12, v30, v4);
      }
      v40 = v79;
      swift_bridgeObjectRelease();
      v41 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v41 + 16) + 1, 1);
        v41 = v84;
      }
      v43 = *(_QWORD *)(v41 + 16);
      v42 = *(_QWORD *)(v41 + 24);
      if (v43 >= v42 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v42 > 1, v43 + 1, 1);
        v41 = v84;
      }
      *(_QWORD *)(v41 + 16) = v43 + 1;
      *(_QWORD *)(v41 + 8 * v43 + 32) = v40;
LABEL_19:
      v18 = v83;
      v14 = v73;
      v27 = (unint64_t)v80;
LABEL_20:
      if ((_QWORD *)++v27 == v77)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v44 = v84;
        goto LABEL_44;
      }
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v44 = MEMORY[0x1E0DEE9D8];
LABEL_44:
  v46 = (uint64_t)v74;
  v45 = (uint64_t)v75;
  v79 = *(_QWORD *)(v44 + 16);
  if (v79)
  {
    v77 = (_QWORD *)v44;
    v78 = v44 + 32;
    swift_retain();
    v47 = 0;
    v48 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v82 = "mediaPlayerReference";
    v81 = (const char *)0x80000001C2502230;
    while (1)
    {
      v80 = v48;
      v49 = *(_QWORD *)(v78 + 8 * v47);
      v50 = *(_QWORD *)(v49 + 16);
      if (!v50)
      {
        swift_bridgeObjectRetain();
        v58 = 1;
        goto LABEL_60;
      }
      v51 = v49 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      swift_bridgeObjectRetain_n();
      v52 = *(_QWORD *)(v5 + 72);
      v53 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
      v53(v18, v51, v4);
      while (1)
      {
        v56 = UsoIdentifier.namespace.getter();
        if (!v57)
          goto LABEL_51;
        if (v56 == 0xD000000000000015 && v57 == v81)
          break;
        v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v54 & 1) != 0)
          goto LABEL_59;
LABEL_51:
        v55 = v83;
        (*(void (**)(char *, uint64_t))(v5 + 8))(v83, v4);
        v51 += v52;
        if (!--v50)
        {
          swift_bridgeObjectRelease();
          v58 = 1;
          v46 = (uint64_t)v74;
          v45 = (uint64_t)v75;
          goto LABEL_60;
        }
        v53(v55, v51, v4);
      }
      swift_bridgeObjectRelease();
LABEL_59:
      swift_bridgeObjectRelease();
      v46 = (uint64_t)v74;
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v74, v83, v4);
      v58 = 0;
      v45 = (uint64_t)v75;
LABEL_60:
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v46, v58, 1, v4);
      outlined init with copy of MediaUserStateCenter?(v46, v45, &demangling cache variable for type metadata for UsoIdentifier?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v45, 1, v4) == 1)
      {
        v59 = outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoIdentifier?);
        v60 = 0;
        v61 = 0xE000000000000000;
      }
      else
      {
        v60 = UsoIdentifier.value.getter();
        v61 = v62;
        v59 = (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(v45, v4);
      }
      v87 = 0;
      MEMORY[0x1E0C80A78](v59);
      *(&v72 - 2) = &v87;
      if ((v61 & 0x1000000000000000) != 0)
        goto LABEL_84;
      if ((v61 & 0x2000000000000000) != 0)
      {
        v84 = v60;
        v85 = v61 & 0xFFFFFFFFFFFFFFLL;
        if (v60 <= 0x20u && ((0x100003E01uLL >> v60) & 1) != 0)
          goto LABEL_74;
        v66 = (_BYTE *)_swift_stdlib_strtod_clocale();
        v48 = v80;
        if (v66)
          v65 = *v66 == 0;
        else
          v65 = 0;
LABEL_76:
        v86 = v65;
        swift_bridgeObjectRelease();
      }
      else
      {
        if ((v60 & 0x1000000000000000) != 0)
        {
          v63 = *(unsigned __int8 *)(v61 + 32);
          if (v63 >= 0x21 || ((0x100003E01uLL >> v63) & 1) == 0)
          {
            v64 = (_BYTE *)_swift_stdlib_strtod_clocale();
            v48 = v80;
            if (v64)
              v65 = *v64 == 0;
            else
              v65 = 0;
            goto LABEL_76;
          }
LABEL_74:
          v65 = 0;
          v48 = v80;
          goto LABEL_76;
        }
LABEL_84:
        v70 = v72;
        _StringGuts._slowWithCString<A>(_:)();
        v72 = v70;
        swift_bridgeObjectRelease();
        v48 = v80;
      }
      v18 = v83;
      if (v86)
      {
        v67 = v87;
        outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v48[2] + 1, 1, v48);
        v69 = v48[2];
        v68 = v48[3];
        if (v69 >= v68 >> 1)
          v48 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v68 > 1), v69 + 1, 1, v48);
        v48[2] = v69 + 1;
        v48[v69 + 4] = v67;
        v18 = v83;
      }
      else
      {
        outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoIdentifier?);
        swift_bridgeObjectRelease();
      }
      if (++v47 == v79)
      {
        swift_release_n();
        if (v48[2])
          goto LABEL_86;
LABEL_88:
        v71 = 0;
        goto LABEL_89;
      }
    }
  }
  swift_release();
  v48 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  if (!*(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16))
    goto LABEL_88;
LABEL_86:
  v71 = v48[4];
LABEL_89:
  swift_bridgeObjectRelease();
  return v71;
}

uint64_t closure #2 in closure #1 in AudioUsoIntent.noun.getter()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v0 = MEMORY[0x1C3BBCF40]();
  if (!v1)
    return 0;
  v2 = v0;
  v3 = v1;
  v4 = swift_bridgeObjectRelease();
  v5 = HIBYTE(v3) & 0xF;
  if ((v3 & 0x2000000000000000) == 0)
    v5 = v2 & 0xFFFFFFFFFFFFLL;
  if (!v5)
    return 0;
  if (MEMORY[0x1C3BBCF1C](v4))
  {
    swift_release();
    return 0;
  }
  return 1;
}

uint64_t AudioUsoIntent.mediaIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v1 = *(_QWORD *)(v0 + 456);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AudioUsoIntent.mediaIdentifier.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  swift_beginAccess();
  *(_QWORD *)(v2 + 456) = a1;
  *(_QWORD *)(v2 + 464) = a2;
  return swift_bridgeObjectRelease();
}

uint64_t (*AudioUsoIntent.mediaIdentifier.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioUsoIntent.UsoNamespace(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = AudioUsoIntent.UsoNamespace.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == AudioUsoIntent.UsoNamespace.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioUsoIntent.UsoNamespace()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  AudioUsoIntent.UsoNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioUsoIntent.UsoNamespace()
{
  unsigned __int8 *v0;

  AudioUsoIntent.UsoNamespace.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioUsoIntent.UsoNamespace()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  AudioUsoIntent.UsoNamespace.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance AudioUsoIntent.UsoNamespace@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = specialized AudioUsoIntent.UsoNamespace.init(rawValue:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance AudioUsoIntent.UsoNamespace@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = AudioUsoIntent.UsoNamespace.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t static AudioUsoIntent.IterationOptions.== infix(_:_:)()
{
  return 1;
}

void AudioUsoIntent.IterationOptions.hash(into:)()
{
  Hasher._combine(_:)(0);
}

Swift::Int AudioUsoIntent.IterationOptions.hashValue.getter()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance AudioUsoIntent.IterationOptions()
{
  return 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioUsoIntent.IterationOptions()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AudioUsoIntent.IterationOptions()
{
  Hasher._combine(_:)(0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioUsoIntent.IterationOptions()
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(0);
  return Hasher._finalize()();
}

uint64_t *AudioUsoIntent.deinit()
{
  uint64_t *v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of UsoEntity_common_DateTime??(v0[19]);
  outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v0[20]);
  outlined consume of UsoEntity_common_DateTime??(v0[21]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of UsoEntity_common_DateTime??(v0[25]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of UsoEntity_common_DateTime??(v0[36]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of String??(v0[42], v0[43]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioUsoIntent.__deallocating_deinit()
{
  AudioUsoIntent.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for AudioIntent.activities.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1856))();
}

uint64_t protocol witness for AudioIntent.albums.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1280))();
}

uint64_t protocol witness for AudioIntent.appAudiobookAuthors.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1400))();
}

uint64_t protocol witness for AudioIntent.appAudiobookTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1352))();
}

uint64_t protocol witness for AudioIntent.appMusicArtistNames.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1376))();
}

uint64_t protocol witness for AudioIntent.appName.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1592))();
}

uint64_t protocol witness for AudioIntent.appPlaylistTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1304))();
}

uint64_t protocol witness for AudioIntent.appShowTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1328))();
}

uint64_t protocol witness for AudioIntent.applePlaylistTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1568))();
}

uint64_t protocol witness for AudioIntent.applePodcastTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1664))();
}

uint64_t protocol witness for AudioIntent.apps.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1232))();
}

uint64_t protocol witness for AudioIntent.artists.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1256))();
}

uint64_t protocol witness for AudioIntent.attributes.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1472))();
}

uint64_t protocol witness for AudioIntent.confirmationState.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 952))();
}

uint64_t protocol witness for AudioIntent.dateTime.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1448))();
}

uint64_t protocol witness for AudioIntent.decade.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1712))();
}

uint64_t protocol witness for AudioIntent.entities.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1160))();
}

uint64_t protocol witness for AudioIntent.frequency.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1904))();
}

uint64_t protocol witness for AudioIntent.genres.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1808))();
}

uint64_t protocol witness for AudioIntent.mediaIdentifier.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1928))();
}

uint64_t protocol witness for AudioIntent.mediaType.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1112))();
}

uint64_t protocol witness for AudioIntent.targetMediaType.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1136))();
}

uint64_t protocol witness for AudioIntent.modifiers.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1760))();
}

uint64_t protocol witness for AudioIntent.moods.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1832))();
}

uint64_t protocol witness for AudioIntent.musicTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1496))();
}

uint64_t protocol witness for AudioIntent.noun.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1424))();
}

uint64_t protocol witness for AudioIntent.playlistTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1520))();
}

uint64_t protocol witness for AudioIntent.podcastTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1640))();
}

uint64_t protocol witness for AudioIntent.radioStationNames.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1688))();
}

uint64_t protocol witness for AudioIntent.radioType.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1880))();
}

uint64_t protocol witness for AudioIntent.reference.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1784))();
}

uint64_t protocol witness for AudioIntent.resolvedReference.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1184))();
}

uint64_t protocol witness for AudioIntent.showTitles.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1616))();
}

uint64_t protocol witness for AudioIntent.sort.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 1736))();
}

uint64_t protocol witness for AudioIntent.verb.getter in conformance AudioUsoIntent()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 904))();
}

uint64_t specialized closure #1 in closure #1 in AudioUsoIntent.playlistMediaItems.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v49;
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  unint64_t v55;
  char *v56;
  void (*v57)(char *, uint64_t);
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  void (*v62)(char *, unint64_t, uint64_t);
  char v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char v67;
  Swift::String v68;
  Swift::String v69;
  void (*v70)(char *, uint64_t);
  int v71;
  void (*v72)(char *, uint64_t);
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void (*v77)(char *, unint64_t, uint64_t);
  char *v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t);
  void (*v86)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v87)(uint64_t, uint64_t, uint64_t);
  uint64_t v88;
  char *v89;
  int v90;
  char *v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;

  v2 = type metadata accessor for UsoIdentifier();
  v98 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v97 = (char *)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v83 - v6;
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v83 - v8;
  v10 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v96 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v84 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  v12 = MEMORY[0x1E0C80A78](v95);
  v89 = (char *)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v83 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v88 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v92 = (uint64_t)&v83 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v93 = (char *)&v83 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v91 = (char *)&v83 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v83 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v83 - v29;
  v31 = MEMORY[0x1C3BBCF40](v28);
  if (v32)
  {
    v33 = v31;
    v34 = v32;
    v31 = swift_bridgeObjectRelease();
    v35 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0)
      v35 = v33 & 0xFFFFFFFFFFFFLL;
    v36 = v35 == 0;
  }
  else
  {
    v36 = 1;
  }
  v90 = v36;
  v37 = MEMORY[0x1C3BBCF1C](v31);
  v94 = a1;
  if (v37)
  {
    MEMORY[0x1C3BBD09C]();
    swift_release();
    v38 = (_QWORD *)v96;
  }
  else
  {
    v38 = (_QWORD *)v96;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v96 + 56))(v30, 1, 1, v10);
  }
  v39 = *MEMORY[0x1E0DA1E10];
  v85 = (void (*)(char *, uint64_t, uint64_t))v38[13];
  v85(v27, v39, v10);
  v86 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v38[7];
  v86(v27, 0, 1, v10);
  v40 = (uint64_t)&v15[*(int *)(v95 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v30, (uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v27, v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v41 = (unsigned int (*)(char *, uint64_t, uint64_t))v38[6];
  v42 = v41(v15, 1, v10);
  v87 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v41;
  if (v42 != 1)
  {
    v43 = (uint64_t)v91;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v91, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v41((char *)v40, 1, v10) != 1)
    {
      v49 = v84;
      (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v84, v40, v10);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      v51 = *(void (**)(char *, uint64_t))(v96 + 8);
      v51(v49, v10);
      outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v51(v91, v10);
      v44 = outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v50 & 1) != 0)
        goto LABEL_23;
LABEL_15:
      if (MEMORY[0x1C3BBCF1C](v44))
      {
        v45 = (uint64_t)v93;
        MEMORY[0x1C3BBD09C]();
        swift_release();
        v46 = (uint64_t)v89;
        v47 = v92;
        v48 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v86;
      }
      else
      {
        v45 = (uint64_t)v93;
        v48 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v86;
        v86(v93, 1, 1, v10);
        v46 = (uint64_t)v89;
        v47 = v92;
      }
      v85((char *)v47, *MEMORY[0x1E0DA1D50], v10);
      v48(v47, 0, 1, v10);
      v52 = v46 + *(int *)(v95 + 48);
      outlined init with copy of MediaUserStateCenter?(v45, v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined init with copy of MediaUserStateCenter?(v47, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v53 = v87;
      if (v87(v46, 1, v10) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        if (v53(v52, 1, v10) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
LABEL_23:
          LODWORD(v95) = 1;
          goto LABEL_28;
        }
      }
      else
      {
        outlined init with copy of MediaUserStateCenter?(v46, v88, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        if (v53(v52, 1, v10) != 1)
        {
          v54 = v88;
          v55 = v96;
          v56 = v84;
          (*(void (**)(char *, uint64_t, uint64_t))(v96 + 32))(v84, v52, v10);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
          LODWORD(v95) = dispatch thunk of static Equatable.== infix(_:_:)();
          v57 = *(void (**)(char *, uint64_t))(v55 + 8);
          v57(v56, v10);
          outlined destroy of MediaUserStateCenter?(v92, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?((uint64_t)v93, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          v57((char *)v54, v10);
          outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          goto LABEL_28;
        }
        outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v88, v10);
      }
      outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
      LODWORD(v95) = 0;
      goto LABEL_28;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v43, v10);
LABEL_14:
    v44 = outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    goto LABEL_15;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v41((char *)v40, 1, v10) != 1)
    goto LABEL_14;
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  LODWORD(v95) = 1;
LABEL_28:
  v58 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v59 = *(_QWORD *)(v58 + 16);
  if (!v59)
  {
    swift_bridgeObjectRelease();
    v71 = 1;
    goto LABEL_45;
  }
  v60 = v58 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
  v61 = *(_QWORD *)(v98 + 72);
  v62 = *(void (**)(char *, unint64_t, uint64_t))(v98 + 16);
  v93 = (char *)v58;
  swift_bridgeObjectRetain();
  v96 = 0x80000001C2505170;
  while (1)
  {
    v62(v9, v60, v2);
    v65 = UsoIdentifier.namespace.getter();
    if (!v66)
    {
      v62(v7, (unint64_t)v9, v2);
LABEL_41:
      v70 = *(void (**)(char *, uint64_t))(v98 + 8);
      v70(v7, v2);
      v70(v9, v2);
      goto LABEL_31;
    }
    if (v65 == 0x7473696C79616C70 && v66 == 0xED0000656C746954)
    {
      swift_bridgeObjectRelease();
      v62(v7, (unint64_t)v9, v2);
    }
    else
    {
      v67 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v62(v7, (unint64_t)v9, v2);
      if ((v67 & 1) == 0)
        goto LABEL_41;
    }
    UsoIdentifier.appBundleId.getter();
    v68 = String.lowercased()();
    swift_bridgeObjectRelease();
    v69 = String.lowercased()();
    if (v68._countAndFlagsBits == v69._countAndFlagsBits && v68._object == v69._object)
      break;
    v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v64 = *(void (**)(char *, uint64_t))(v98 + 8);
    v64(v7, v2);
    v64(v9, v2);
    if ((v63 & 1) != 0)
      goto LABEL_44;
LABEL_31:
    v60 += v61;
    if (!--v59)
    {
      swift_bridgeObjectRelease_n();
      v71 = 1;
      goto LABEL_45;
    }
  }
  swift_bridgeObjectRelease_n();
  v72 = *(void (**)(char *, uint64_t))(v98 + 8);
  v72(v7, v2);
  v72(v9, v2);
LABEL_44:
  swift_bridgeObjectRelease_n();
  v71 = 0;
LABEL_45:
  v73 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v74 = *(_QWORD *)(v73 + 16);
  if (!v74)
  {
    swift_bridgeObjectRelease();
    return v95 & v71 & ~v90;
  }
  LODWORD(v94) = v71;
  v75 = v73 + ((*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80));
  v76 = *(_QWORD *)(v98 + 72);
  v77 = *(void (**)(char *, unint64_t, uint64_t))(v98 + 16);
  v96 = v73;
  swift_bridgeObjectRetain();
  v78 = v97;
  while (2)
  {
    v77(v78, v75, v2);
    v80 = UsoIdentifier.namespace.getter();
    if (!v81)
    {
      (*(void (**)(char *, uint64_t))(v98 + 8))(v78, v2);
LABEL_48:
      v75 += v76;
      if (!--v74)
      {
        swift_bridgeObjectRelease_n();
        v71 = v94;
        return v95 & v71 & ~v90;
      }
      continue;
    }
    break;
  }
  if (v80 != 0xD000000000000010 || v81 != 0x80000001C2501970)
  {
    v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v78 = v97;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v2);
    if ((v79 & 1) != 0)
      goto LABEL_57;
    goto LABEL_48;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v98 + 8))(v97, v2);
LABEL_57:
  swift_bridgeObjectRelease_n();
  return 0;
}

BOOL specialized closure #1 in closure #1 in AudioUsoIntent.applePlaylistTitles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _BOOL4 v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(char *, uint64_t, uint64_t);
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v49;
  char v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  unsigned int (*v53)(uint64_t, uint64_t, uint64_t);
  int v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  int v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  void (*v64)(char *, unint64_t, uint64_t);
  char v65;
  void (*v66)(char *, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char v69;
  Swift::String v70;
  Swift::String v71;
  void (*v72)(char *, uint64_t);
  int v73;
  void (*v74)(char *, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(char *, unint64_t, uint64_t);
  char *v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v85;
  char *v86;
  void (*v87)(char *, uint64_t, uint64_t);
  void (*v88)(char *, _QWORD, uint64_t, uint64_t);
  unsigned int (*v89)(uint64_t, uint64_t, uint64_t);
  uint64_t v90;
  char *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  _BOOL4 v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;

  v2 = type metadata accessor for UsoIdentifier();
  v100 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v99 = (char *)&v85 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v85 - v6;
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v85 - v8;
  v10 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v98 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v86 = (char *)&v85 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  v12 = MEMORY[0x1E0C80A78](v97);
  v91 = (char *)&v85 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v85 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v90 = (uint64_t)&v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v17);
  v94 = (uint64_t)&v85 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v93 = (char *)&v85 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v92 = (char *)&v85 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v85 - v26;
  v28 = MEMORY[0x1E0C80A78](v25);
  v30 = (char *)&v85 - v29;
  v31 = MEMORY[0x1C3BBCF40](v28);
  if (v32)
  {
    v33 = v31;
    v34 = v32;
    v31 = swift_bridgeObjectRelease();
    v35 = HIBYTE(v34) & 0xF;
    if ((v34 & 0x2000000000000000) == 0)
      v35 = v33 & 0xFFFFFFFFFFFFLL;
    v36 = v35 == 0;
  }
  else
  {
    v36 = 1;
  }
  v95 = v36;
  v37 = MEMORY[0x1C3BBCF1C](v31);
  v96 = a1;
  if (v37)
  {
    MEMORY[0x1C3BBD09C]();
    swift_release();
    v38 = (_QWORD *)v98;
  }
  else
  {
    v38 = (_QWORD *)v98;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v98 + 56))(v30, 1, 1, v10);
  }
  v39 = *MEMORY[0x1E0DA1E10];
  v87 = (void (*)(char *, uint64_t, uint64_t))v38[13];
  v87(v27, v39, v10);
  v88 = (void (*)(char *, _QWORD, uint64_t, uint64_t))v38[7];
  v88(v27, 0, 1, v10);
  v40 = (uint64_t)&v15[*(int *)(v97 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v30, (uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v27, v40, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v41 = (unsigned int (*)(char *, uint64_t, uint64_t))v38[6];
  v42 = v41(v15, 1, v10);
  v89 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v41;
  if (v42 != 1)
  {
    v43 = (uint64_t)v92;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v15, (uint64_t)v92, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v41((char *)v40, 1, v10) != 1)
    {
      v49 = v86;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v86, v40, v10);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      v50 = dispatch thunk of static Equatable.== infix(_:_:)();
      v51 = *(void (**)(char *, uint64_t))(v98 + 8);
      v51(v49, v10);
      outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v51(v92, v10);
      v44 = outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v45 = v94;
      if ((v50 & 1) != 0)
        goto LABEL_23;
LABEL_15:
      if (MEMORY[0x1C3BBCF1C](v44))
      {
        v46 = (uint64_t)v93;
        MEMORY[0x1C3BBD09C]();
        swift_release();
        v47 = (uint64_t)v91;
        v48 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v88;
      }
      else
      {
        v46 = (uint64_t)v93;
        v48 = (void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v88;
        v88(v93, 1, 1, v10);
        v47 = (uint64_t)v91;
      }
      v87((char *)v45, *MEMORY[0x1E0DA1D50], v10);
      v48(v45, 0, 1, v10);
      v52 = v47 + *(int *)(v97 + 48);
      outlined init with copy of MediaUserStateCenter?(v46, v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined init with copy of MediaUserStateCenter?(v45, v52, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v53 = v89;
      if (v89(v47, 1, v10) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        if (v53(v52, 1, v10) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
LABEL_23:
          LODWORD(v97) = 0;
          goto LABEL_29;
        }
      }
      else
      {
        outlined init with copy of MediaUserStateCenter?(v47, v90, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        if (v53(v52, 1, v10) != 1)
        {
          v55 = v98;
          v56 = v90;
          v57 = v86;
          (*(void (**)(char *, uint64_t, uint64_t))(v98 + 32))(v86, v52, v10);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
          v58 = dispatch thunk of static Equatable.== infix(_:_:)();
          v59 = *(void (**)(char *, uint64_t))(v55 + 8);
          v59(v57, v10);
          outlined destroy of MediaUserStateCenter?(v94, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          outlined destroy of MediaUserStateCenter?((uint64_t)v93, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          v59((char *)v56, v10);
          outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
          v54 = v58 ^ 1;
          goto LABEL_28;
        }
        outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v90, v10);
      }
      outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
      v54 = 1;
LABEL_28:
      LODWORD(v97) = v54;
      goto LABEL_29;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v43, v10);
LABEL_14:
    v44 = outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    v45 = v94;
    goto LABEL_15;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v30, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v41((char *)v40, 1, v10) != 1)
    goto LABEL_14;
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  LODWORD(v97) = 0;
LABEL_29:
  v60 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v61 = *(_QWORD *)(v60 + 16);
  if (!v61)
  {
    swift_bridgeObjectRelease();
    v73 = 1;
    goto LABEL_46;
  }
  v62 = v60 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
  v63 = *(_QWORD *)(v100 + 72);
  v64 = *(void (**)(char *, unint64_t, uint64_t))(v100 + 16);
  v94 = v60;
  swift_bridgeObjectRetain();
  v98 = 0x80000001C2505170;
  while (1)
  {
    v64(v9, v62, v2);
    v67 = UsoIdentifier.namespace.getter();
    if (!v68)
    {
      v64(v7, (unint64_t)v9, v2);
LABEL_42:
      v72 = *(void (**)(char *, uint64_t))(v100 + 8);
      v72(v7, v2);
      v72(v9, v2);
      goto LABEL_32;
    }
    if (v67 == 0x7473696C79616C70 && v68 == 0xED0000656C746954)
    {
      swift_bridgeObjectRelease();
      v64(v7, (unint64_t)v9, v2);
    }
    else
    {
      v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v64(v7, (unint64_t)v9, v2);
      if ((v69 & 1) == 0)
        goto LABEL_42;
    }
    UsoIdentifier.appBundleId.getter();
    v70 = String.lowercased()();
    swift_bridgeObjectRelease();
    v71 = String.lowercased()();
    if (v70._countAndFlagsBits == v71._countAndFlagsBits && v70._object == v71._object)
      break;
    v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v66 = *(void (**)(char *, uint64_t))(v100 + 8);
    v66(v7, v2);
    v66(v9, v2);
    if ((v65 & 1) != 0)
      goto LABEL_45;
LABEL_32:
    v62 += v63;
    if (!--v61)
    {
      swift_bridgeObjectRelease_n();
      v73 = 1;
      goto LABEL_46;
    }
  }
  swift_bridgeObjectRelease_n();
  v74 = *(void (**)(char *, uint64_t))(v100 + 8);
  v74(v7, v2);
  v74(v9, v2);
LABEL_45:
  swift_bridgeObjectRelease_n();
  v73 = 0;
LABEL_46:
  v75 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v76 = *(_QWORD *)(v75 + 16);
  if (v76)
  {
    LODWORD(v98) = v73;
    v77 = v75 + ((*(unsigned __int8 *)(v100 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v100 + 80));
    v78 = *(_QWORD *)(v100 + 72);
    v79 = *(void (**)(char *, unint64_t, uint64_t))(v100 + 16);
    v96 = v75;
    swift_bridgeObjectRetain();
    v80 = v99;
    while (1)
    {
      v79(v80, v77, v2);
      v82 = UsoIdentifier.namespace.getter();
      if (v83)
      {
        if (v82 == 0xD000000000000010 && v83 == 0x80000001C2501970)
        {
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v2);
LABEL_59:
          swift_bridgeObjectRelease_n();
          return 0;
        }
        v81 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v80 = v99;
        (*(void (**)(char *, uint64_t))(v100 + 8))(v99, v2);
        if ((v81 & 1) != 0)
          goto LABEL_59;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v100 + 8))(v80, v2);
      }
      v77 += v78;
      if (!--v76)
      {
        swift_bridgeObjectRelease_n();
        v73 = v98;
        return ((v95 | v97 | v73) & 1) == 0;
      }
    }
  }
  swift_bridgeObjectRelease();
  return ((v95 | v97 | v73) & 1) == 0;
}

uint64_t specialized closure #1 in closure #1 in AudioUsoIntent.podcastTitles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  Swift::String v37;
  Swift::String v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  unsigned int (*v46)(uint64_t, uint64_t, uint64_t);
  uint64_t v47;
  char *v48;
  void (*v49)(char *, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _BOOL4 v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  uint64_t v64;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v52 = (char *)&v51 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v59);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v58 = (uint64_t)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v51 - v11;
  MEMORY[0x1E0C80A78](v10);
  v62 = (char *)&v51 - v13;
  v14 = type metadata accessor for UsoIdentifier();
  v64 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v51 - v19;
  v21 = MEMORY[0x1C3BBCF40](v18);
  if (v22)
  {
    v23 = v21;
    v24 = v22;
    swift_bridgeObjectRelease();
    v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v25 = v23 & 0xFFFFFFFFFFFFLL;
    v26 = v25 == 0;
  }
  else
  {
    v26 = 1;
  }
  v60 = v26;
  v61 = a1;
  v27 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
    v40 = swift_bridgeObjectRelease();
LABEL_22:
    v41 = (uint64_t)v62;
    if (!v60)
    {
      v42 = 1;
      goto LABEL_25;
    }
    return 0;
  }
  v54 = v12;
  v55 = v3;
  v56 = v6;
  v57 = v2;
  v29 = v27 + ((*(unsigned __int8 *)(v64 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80));
  v30 = *(_QWORD *)(v64 + 72);
  v31 = *(void (**)(char *, unint64_t, uint64_t))(v64 + 16);
  v53 = v27;
  swift_bridgeObjectRetain();
  v63 = 0x80000001C2505170;
  while (1)
  {
    v31(v20, v29, v14);
    v34 = UsoIdentifier.namespace.getter();
    if (!v35)
    {
      v31(v17, (unint64_t)v20, v14);
LABEL_19:
      v39 = *(void (**)(char *, uint64_t))(v64 + 8);
      v39(v17, v14);
      v39(v20, v14);
      goto LABEL_9;
    }
    if (v34 == 0x5474736163646F70 && v35 == 0xEC000000656C7469)
    {
      swift_bridgeObjectRelease();
      v31(v17, (unint64_t)v20, v14);
    }
    else
    {
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v31(v17, (unint64_t)v20, v14);
      if ((v36 & 1) == 0)
        goto LABEL_19;
    }
    UsoIdentifier.appBundleId.getter();
    v37 = String.lowercased()();
    swift_bridgeObjectRelease();
    v38 = String.lowercased()();
    if (v37._countAndFlagsBits == v38._countAndFlagsBits && v37._object == v38._object)
      break;
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = *(void (**)(char *, uint64_t))(v64 + 8);
    v33(v17, v14);
    v33(v20, v14);
    if ((v32 & 1) != 0)
      goto LABEL_24;
LABEL_9:
    v29 += v30;
    if (!--v28)
    {
      v40 = swift_bridgeObjectRelease_n();
      v6 = v56;
      v2 = v57;
      v12 = v54;
      v3 = v55;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n();
  v43 = *(void (**)(char *, uint64_t))(v64 + 8);
  v43(v17, v14);
  v43(v20, v14);
LABEL_24:
  v40 = swift_bridgeObjectRelease_n();
  v42 = 0;
  v6 = v56;
  v2 = v57;
  v12 = v54;
  v3 = v55;
  v41 = (uint64_t)v62;
  if (!v60)
  {
LABEL_25:
    if (MEMORY[0x1C3BBCF1C](v40))
    {
      MEMORY[0x1C3BBD09C]();
      swift_release();
    }
    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v41, 1, 1, v2);
    }
    (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v12, *MEMORY[0x1E0DA1E00], v2);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
    v44 = (uint64_t)&v6[*(int *)(v59 + 48)];
    outlined init with copy of MediaUserStateCenter?(v41, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v12, v44, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    v45 = (uint64_t)v12;
    v46 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    if (v46((uint64_t)v6, 1, v2) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v46(v44, 1, v2) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        return v42;
      }
LABEL_33:
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    }
    else
    {
      v47 = v58;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v58, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if (v46(v44, 1, v2) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v47, v2);
        goto LABEL_33;
      }
      v48 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v52, v44, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      LODWORD(v64) = dispatch thunk of static Equatable.== infix(_:_:)();
      v49 = *(void (**)(char *, uint64_t))(v3 + 8);
      v49(v48, v2);
      outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v49((char *)v47, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v64 & 1) != 0)
        return v42;
    }
    return 0;
  }
  return v42;
}

uint64_t specialized closure #1 in closure #1 in AudioUsoIntent.applePodcastTitles.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  _BOOL4 v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  char v36;
  Swift::String v37;
  Swift::String v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int (*v47)(uint64_t, uint64_t, uint64_t);
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  _BOOL4 v61;
  uint64_t v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;

  v2 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v53 = (char *)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v60);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v59 = (uint64_t)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v52 - v11;
  MEMORY[0x1E0C80A78](v10);
  v63 = (char *)&v52 - v13;
  v14 = type metadata accessor for UsoIdentifier();
  v65 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v52 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v52 - v19;
  v21 = MEMORY[0x1C3BBCF40](v18);
  if (v22)
  {
    v23 = v21;
    v24 = v22;
    swift_bridgeObjectRelease();
    v25 = HIBYTE(v24) & 0xF;
    if ((v24 & 0x2000000000000000) == 0)
      v25 = v23 & 0xFFFFFFFFFFFFLL;
    v26 = v25 == 0;
  }
  else
  {
    v26 = 1;
  }
  v61 = v26;
  v62 = a1;
  v27 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
    v40 = swift_bridgeObjectRelease();
LABEL_22:
    v41 = (uint64_t)v63;
    if (v61)
      return 0;
    v42 = 0;
    if (!MEMORY[0x1C3BBCF1C](v40))
      goto LABEL_27;
LABEL_24:
    MEMORY[0x1C3BBD09C]();
    swift_release();
    goto LABEL_28;
  }
  v55 = v12;
  v56 = v3;
  v57 = v6;
  v58 = v2;
  v29 = v27 + ((*(unsigned __int8 *)(v65 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
  v30 = *(_QWORD *)(v65 + 72);
  v31 = *(void (**)(char *, unint64_t, uint64_t))(v65 + 16);
  v54 = v27;
  swift_bridgeObjectRetain();
  v64 = 0x80000001C2505170;
  while (1)
  {
    v31(v20, v29, v14);
    v34 = UsoIdentifier.namespace.getter();
    if (!v35)
    {
      v31(v17, (unint64_t)v20, v14);
LABEL_19:
      v39 = *(void (**)(char *, uint64_t))(v65 + 8);
      v39(v17, v14);
      v39(v20, v14);
      goto LABEL_9;
    }
    if (v34 == 0x5474736163646F70 && v35 == 0xEC000000656C7469)
    {
      swift_bridgeObjectRelease();
      v31(v17, (unint64_t)v20, v14);
    }
    else
    {
      v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      v31(v17, (unint64_t)v20, v14);
      if ((v36 & 1) == 0)
        goto LABEL_19;
    }
    UsoIdentifier.appBundleId.getter();
    v37 = String.lowercased()();
    swift_bridgeObjectRelease();
    v38 = String.lowercased()();
    if (v37._countAndFlagsBits == v38._countAndFlagsBits && v37._object == v38._object)
      break;
    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v33 = *(void (**)(char *, uint64_t))(v65 + 8);
    v33(v17, v14);
    v33(v20, v14);
    if ((v32 & 1) != 0)
      goto LABEL_25;
LABEL_9:
    v29 += v30;
    if (!--v28)
    {
      v40 = swift_bridgeObjectRelease_n();
      v6 = v57;
      v2 = v58;
      v12 = v55;
      v3 = v56;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease_n();
  v43 = *(void (**)(char *, uint64_t))(v65 + 8);
  v43(v17, v14);
  v43(v20, v14);
LABEL_25:
  v44 = swift_bridgeObjectRelease_n();
  v6 = v57;
  v2 = v58;
  v12 = v55;
  v3 = v56;
  v41 = (uint64_t)v63;
  if (v61)
    return 0;
  v42 = 1;
  if (MEMORY[0x1C3BBCF1C](v44))
    goto LABEL_24;
LABEL_27:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v41, 1, 1, v2);
LABEL_28:
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v12, *MEMORY[0x1E0DA1E00], v2);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v3 + 56))(v12, 0, 1, v2);
  v45 = (uint64_t)&v6[*(int *)(v60 + 48)];
  outlined init with copy of MediaUserStateCenter?(v41, (uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v12, v45, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v46 = (uint64_t)v12;
  v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v47((uint64_t)v6, 1, v2) != 1)
  {
    v48 = v59;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v6, v59, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v47(v45, 1, v2) != 1)
    {
      v49 = v53;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v53, v45, v2);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
      LODWORD(v65) = dispatch thunk of static Equatable.== infix(_:_:)();
      v50 = *(void (**)(char *, uint64_t))(v3 + 8);
      v50(v49, v2);
      outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      v50((char *)v48, v2);
      outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      if ((v65 & 1) != 0)
        return v42;
      return 0;
    }
    outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v48, v2);
LABEL_33:
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    return 0;
  }
  outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v47(v45, 1, v2) != 1)
    goto LABEL_33;
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  return v42;
}

uint64_t outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(uint64_t result)
{
  if (result != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of UsoEntity_common_DateTime??(uint64_t result)
{
  if (result != 1)
    return swift_release();
  return result;
}

uint64_t outlined copy of UsoEntity_common_DateTime??(uint64_t result)
{
  if (result != 1)
    return swift_retain();
  return result;
}

uint64_t specialized closure #1 in AudioUsoIntent.applePlaylistTitles.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], (uint64_t (*)(uint64_t))specialized closure #1 in closure #1 in AudioUsoIntent.applePlaylistTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t outlined consume of String??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined copy of String??(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2 != 1)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t specialized closure #1 in AudioUsoIntent.podcastTitles.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], specialized closure #1 in closure #1 in AudioUsoIntent.podcastTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AudioUsoIntent.applePodcastTitles.getter()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v0 = AudioUsoIntent.rootItems.getter();
  v1 = specialized Sequence.flatMap<A>(_:)(v0, MEMORY[0x1E0DEE9D8], specialized closure #1 in closure #1 in AudioUsoIntent.applePodcastTitles.getter, 0);
  swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    v2 = *(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v2)
      goto LABEL_3;
LABEL_16:
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_17:
    swift_bridgeObjectRelease_n();
    return (uint64_t)v5;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  v2 = result;
  if (!result)
    goto LABEL_16;
LABEL_3:
  if (v2 >= 1)
  {
    v4 = 0;
    v5 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v1 & 0xC000000000000001) != 0)
        MEMORY[0x1C3BBF3F4](v4, v1);
      else
        swift_retain();
      v7 = MEMORY[0x1C3BBCF40]();
      v9 = v8;
      swift_release();
      if (v9)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5[2] + 1, 1, v5);
        v11 = v5[2];
        v10 = v5[3];
        if (v11 >= v10 >> 1)
          v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v10 > 1), v11 + 1, 1, v5);
        v5[2] = v11 + 1;
        v6 = &v5[2 * v11];
        v6[4] = v7;
        v6[5] = v9;
      }
      ++v4;
    }
    while (v2 != v4);
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t specialized AudioUsoIntent.UsoNamespace.init(rawValue:)()
{
  unint64_t v0;

  v0 = _findStringSwitchCaseWithCache(cases:string:cache:)();
  swift_bridgeObjectRelease();
  if (v0 >= 0x1A)
    return 26;
  else
    return v0;
}

unint64_t lazy protocol witness table accessor for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace;
  if (!lazy protocol witness table cache variable for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for AudioUsoIntent.UsoNamespace, &type metadata for AudioUsoIntent.UsoNamespace);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioUsoIntent.UsoNamespace and conformance AudioUsoIntent.UsoNamespace);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions;
  if (!lazy protocol witness table cache variable for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for AudioUsoIntent.IterationOptions, &type metadata for AudioUsoIntent.IterationOptions);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioUsoIntent.IterationOptions and conformance AudioUsoIntent.IterationOptions);
  }
  return result;
}

uint64_t sub_1C2434B7C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 904))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434BAC(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 136) = v2;
  return result;
}

uint64_t sub_1C2434BEC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 928))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434C1C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 137) = v2;
  return result;
}

uint64_t sub_1C2434C5C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 952))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434C8C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 138) = v2;
  return result;
}

uint64_t sub_1C2434CCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1040))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434CFC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 160);
  *(_QWORD *)(*(_QWORD *)a2 + 160) = *a1;
  swift_bridgeObjectRetain();
  return outlined consume of [CodeGenListEntry<UsoEntity_common_UserEntity>]??(v2);
}

uint64_t sub_1C2434D2C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1112))();
  *a2 = result;
  return result;
}

_BYTE *sub_1C2434D5C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 184) = *result;
  return result;
}

uint64_t sub_1C2434D6C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1136))();
  *a2 = result;
  return result;
}

_BYTE *sub_1C2434D9C(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 185) = *result;
  return result;
}

uint64_t sub_1C2434DAC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1160))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434DDC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 192) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2434E0C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1184))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434E3C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 200);
  *(_QWORD *)(*(_QWORD *)a2 + 200) = *a1;
  swift_retain();
  return outlined consume of UsoEntity_common_DateTime??(v2);
}

uint64_t sub_1C2434E6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1208))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434E9C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 208) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2434ECC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1232))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434EFC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 216) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2434F2C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1256))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434F5C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 224) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2434F8C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1280))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2434FBC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 232) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2434FEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1304))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243501C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 240) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C243504C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1328))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243507C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 248) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C24350AC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1352))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24350DC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 256) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C243510C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1376))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243513C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 264) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C243516C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1400))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243519C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 272) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C24351CC@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1424))();
  *a2 = result;
  return result;
}

_BYTE *sub_1C24351FC(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 280) = *result;
  return result;
}

uint64_t sub_1C243520C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1448))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243523C(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(*(_QWORD *)a2 + 288);
  *(_QWORD *)(*(_QWORD *)a2 + 288) = *a1;
  swift_retain();
  return outlined consume of UsoEntity_common_DateTime??(v2);
}

uint64_t sub_1C243526C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1472))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243529C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 296) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C24352CC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1496))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24352FC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 304) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C243532C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1520))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243535C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 312) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C243538C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1544))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24353BC(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 320) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C24353EC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1568))();
  *a2 = result;
  return result;
}

uint64_t sub_1C243541C(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 328) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C243544C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1592))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C243547C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *a1;
  v2 = a1[1];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 336);
  v6 = *(_QWORD *)(*a2 + 344);
  *(_QWORD *)(v4 + 336) = v3;
  *(_QWORD *)(v4 + 344) = v2;
  swift_bridgeObjectRetain();
  return outlined consume of String??(v5, v6);
}

uint64_t sub_1C24354B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1616))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24354E0(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 352) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2435510@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1640))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2435540(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 360) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2435570@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1664))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24355A0(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 368) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C24355D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1688))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2435600(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 376) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2435630@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1712))();
  *a2 = result;
  return result;
}

_BYTE *sub_1C2435660(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 384) = *result;
  return result;
}

uint64_t sub_1C2435670@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1736))();
  *a2 = result;
  return result;
}

_BYTE *sub_1C24356A0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 385) = *result;
  return result;
}

uint64_t sub_1C24356B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1760))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24356E0(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 392) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2435710@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1784))();
  *a2 = result;
  return result;
}

_BYTE *sub_1C2435740(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 400) = *result;
  return result;
}

uint64_t sub_1C2435750@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1808))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2435780(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 408) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C24357B0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1832))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24357E0(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 416) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2435810@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1856))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2435840(_QWORD *a1, uint64_t a2)
{
  *(_QWORD *)(*(_QWORD *)a2 + 424) = *a1;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1C2435870@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1880))();
  *a2 = result;
  return result;
}

_BYTE *sub_1C24358A0(_BYTE *result, uint64_t a2)
{
  *(_BYTE *)(*(_QWORD *)a2 + 432) = *result;
  return result;
}

uint64_t sub_1C24358B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result;
  char v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1904))();
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1C24358E8(uint64_t result, uint64_t *a2)
{
  unsigned __int8 v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_QWORD *)(v3 + 440) = *(_QWORD *)result;
  *(_WORD *)(v3 + 448) = v2;
  return result;
}

uint64_t sub_1C2435904@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v4;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 1928))();
  *a2 = result;
  a2[1] = v4;
  return result;
}

uint64_t sub_1C2435934(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);

  v2 = *a1;
  v3 = a1[1];
  v4 = *(uint64_t (**)(uint64_t, uint64_t))(**(_QWORD **)a2 + 1936);
  swift_bridgeObjectRetain();
  return v4(v2, v3);
}

uint64_t type metadata accessor for AudioUsoIntent()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioUsoIntent()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioUsoIntent.verb.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 904))();
}

uint64_t dispatch thunk of AudioUsoIntent.baseEntity.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 928))();
}

uint64_t dispatch thunk of AudioUsoIntent.confirmationState.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 952))();
}

uint64_t dispatch thunk of AudioUsoIntent.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1000))();
}

uint64_t dispatch thunk of AudioUsoIntent.__allocating_init(task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 1008))();
}

uint64_t dispatch thunk of AudioUsoIntent.userEntities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1040))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1112))();
}

uint64_t dispatch thunk of AudioUsoIntent.targetMediaType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1136))();
}

uint64_t dispatch thunk of AudioUsoIntent.entities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1160))();
}

uint64_t dispatch thunk of AudioUsoIntent.resolvedReference.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1184))();
}

uint64_t dispatch thunk of AudioUsoIntent.disambiguationEntities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1208))();
}

uint64_t dispatch thunk of AudioUsoIntent.apps.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1232))();
}

uint64_t dispatch thunk of AudioUsoIntent.artists.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1256))();
}

uint64_t dispatch thunk of AudioUsoIntent.albums.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1280))();
}

uint64_t dispatch thunk of AudioUsoIntent.appPlaylistTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1304))();
}

uint64_t dispatch thunk of AudioUsoIntent.appShowTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1328))();
}

uint64_t dispatch thunk of AudioUsoIntent.appAudiobookTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1352))();
}

uint64_t dispatch thunk of AudioUsoIntent.appMusicArtistNames.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1376))();
}

uint64_t dispatch thunk of AudioUsoIntent.appAudiobookAuthors.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1400))();
}

uint64_t dispatch thunk of AudioUsoIntent.noun.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1424))();
}

uint64_t dispatch thunk of AudioUsoIntent.dateTime.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1448))();
}

uint64_t dispatch thunk of AudioUsoIntent.attributes.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1472))();
}

uint64_t dispatch thunk of AudioUsoIntent.musicTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1496))();
}

uint64_t dispatch thunk of AudioUsoIntent.playlistTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1520))();
}

uint64_t dispatch thunk of AudioUsoIntent.playlistMediaItems.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1544))();
}

uint64_t dispatch thunk of AudioUsoIntent.applePlaylistTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1568))();
}

uint64_t dispatch thunk of AudioUsoIntent.appName.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1592))();
}

uint64_t dispatch thunk of AudioUsoIntent.showTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1616))();
}

uint64_t dispatch thunk of AudioUsoIntent.podcastTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1640))();
}

uint64_t dispatch thunk of AudioUsoIntent.applePodcastTitles.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1664))();
}

uint64_t dispatch thunk of AudioUsoIntent.radioStationNames.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1688))();
}

uint64_t dispatch thunk of AudioUsoIntent.decade.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1712))();
}

uint64_t dispatch thunk of AudioUsoIntent.sort.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1736))();
}

uint64_t dispatch thunk of AudioUsoIntent.modifiers.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1760))();
}

uint64_t dispatch thunk of AudioUsoIntent.reference.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1784))();
}

uint64_t dispatch thunk of AudioUsoIntent.genres.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1808))();
}

uint64_t dispatch thunk of AudioUsoIntent.moods.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1832))();
}

uint64_t dispatch thunk of AudioUsoIntent.activities.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1856))();
}

uint64_t dispatch thunk of AudioUsoIntent.radioType.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1880))();
}

uint64_t dispatch thunk of AudioUsoIntent.frequency.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1904))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaIdentifier.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1928))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaIdentifier.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1936))();
}

uint64_t dispatch thunk of AudioUsoIntent.mediaIdentifier.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 1944))();
}

uint64_t getEnumTagSinglePayload for AudioUsoIntent.UsoNamespace(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xE7)
    goto LABEL_17;
  if (a2 + 25 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 25) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 25;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 25;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 25;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0x1A;
  v8 = v6 - 26;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for AudioUsoIntent.UsoNamespace(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 25 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 25) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xE7)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xE6)
    return ((uint64_t (*)(void))((char *)&loc_1C2435C98 + 4 * byte_1C24FDDEF[v4]))();
  *a1 = a2 + 25;
  return ((uint64_t (*)(void))((char *)sub_1C2435CCC + 4 * byte_1C24FDDEA[v4]))();
}

uint64_t sub_1C2435CCC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2435CD4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C2435CDCLL);
  return result;
}

uint64_t sub_1C2435CE8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C2435CF0);
  *(_BYTE *)result = a2 + 25;
  return result;
}

uint64_t sub_1C2435CF4(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C2435CFC(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioUsoIntent.UsoNamespace()
{
  return &type metadata for AudioUsoIntent.UsoNamespace;
}

uint64_t getEnumTagSinglePayload for AudioUsoIntent.IterationOptions(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t storeEnumTagSinglePayload for AudioUsoIntent.IterationOptions(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_1C2435DAC + 4 * byte_1C24FDDF4[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_1C2435DCC + 4 * byte_1C24FDDF9[v4]))();
}

_BYTE *sub_1C2435DAC(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_1C2435DCC(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2435DD4(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2435DDC(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_1C2435DE4(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_1C2435DEC(_DWORD *result)
{
  *result = 0;
  return result;
}

uint64_t getEnumTag for AudioUsoIntent.IterationOptions()
{
  return 0;
}

ValueMetadata *type metadata accessor for AudioUsoIntent.IterationOptions()
{
  return &type metadata for AudioUsoIntent.IterationOptions;
}

_BYTE *partial apply for closure #1 in closure #1 in Double.init<A>(_:)@<X0>(_BYTE *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3;
  BOOL v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;

  v3 = *result;
  v4 = v3 > 0x20;
  v5 = (1 << v3) & 0x100003E01;
  v6 = v4 || v5 == 0;
  v7 = v6 && (result = (_BYTE *)_swift_stdlib_strtod_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

uint64_t specialized Collection.first.getter(uint64_t a1)
{
  uint64_t result;
  int v3;
  char v4;

  result = specialized Set.startIndex.getter(a1);
  if ((v4 & 1) != 0)
    goto LABEL_7;
  if (*(_DWORD *)(a1 + 36) != v3)
  {
    __break(1u);
LABEL_7:
    __break(1u);
    return result;
  }
  if (result == 1 << *(_BYTE *)(a1 + 32))
    return 2;
  else
    return specialized Set.subscript.getter(result, v3, 0, a1) & 1;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init(from:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int v26;
  int v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  int64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char v65;
  unsigned int *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  char *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;

  v76 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioModifier();
  v74 = *(_QWORD *)(v76 - 8);
  MEMORY[0x1E0C80A78](v76);
  v75 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  MEMORY[0x1E0C80A78](v5);
  v73 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioRadioType();
  v70 = *(_QWORD *)(v72 - 8);
  MEMORY[0x1E0C80A78](v72);
  v71 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioAttribute();
  v98 = *(_QWORD *)(v77 - 8);
  MEMORY[0x1E0C80A78](v77);
  v9 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v78 = *(_QWORD *)(v10 - 8);
  v79 = v10;
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.init()();
  if (*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1160))(v13) + 16))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.entity.setter();
  v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1256))(v14);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  v16 = lazy protocol witness table accessor for type [String] and conformance [A]();
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v17 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.artist.setter();
  v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1280))(v17);
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v18 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.album.setter();
  v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1520))(v18);
  v93 = v16;
  v94 = v15;
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v19 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.playlistTitle.setter();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1592))(v19);
  v20 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.appName.setter();
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1472))(v20);
  v22 = *(_QWORD *)(v21 + 16);
  v23 = MEMORY[0x1E0DEE9D8];
  v91 = v12;
  v92 = a1;
  v80 = a2;
  if (v22)
  {
    v99 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v22, 0);
    v24 = v99;
    v25 = specialized Set.startIndex.getter(v21);
    v27 = v26;
    v90 = *MEMORY[0x1E0D6EBF0];
    v29 = v28 & 1;
    v97 = v21 + 56;
    v89 = *MEMORY[0x1E0D6EBC8];
    v88 = *MEMORY[0x1E0D6EBC0];
    v87 = *MEMORY[0x1E0D6EBF8];
    v86 = *MEMORY[0x1E0D6EBB8];
    v85 = *MEMORY[0x1E0D6EBD8];
    v84 = *MEMORY[0x1E0D6EBE8];
    v83 = *MEMORY[0x1E0D6EC00];
    v82 = *MEMORY[0x1E0D6EBE0];
    v95 = *MEMORY[0x1E0D6EBB0];
    v81 = *MEMORY[0x1E0D6EBD0];
    v30 = v77;
    v96 = v21;
    do
    {
      if (v25 < 0 || v25 >= 1 << *(_BYTE *)(v21 + 32))
      {
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
        JUMPOUT(0x1C2436800);
      }
      if (((*(_QWORD *)(v97 + (((unint64_t)v25 >> 3) & 0xFFFFFFFFFFFFF8)) >> v25) & 1) == 0)
        goto LABEL_51;
      if (*(_DWORD *)(v21 + 36) != v27)
        goto LABEL_52;
      v31 = v95;
      switch(*(_BYTE *)(*(_QWORD *)(v21 + 48) + v25))
      {
        case 0:
          break;
        case 1:
          v31 = v82;
          break;
        case 2:
          v31 = v83;
          break;
        case 3:
          v31 = v84;
          break;
        case 6:
          v31 = v85;
          break;
        case 7:
          v31 = v86;
          break;
        case 8:
          v31 = v87;
          break;
        case 9:
          v31 = v88;
          break;
        case 0xA:
          v31 = v89;
          break;
        case 0xC:
          v31 = v90;
          break;
        default:
          v31 = v81;
          break;
      }
      v32 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v98 + 104))(v9, v31, v30);
      v99 = v24;
      v34 = *(_QWORD *)(v24 + 16);
      v33 = *(_QWORD *)(v24 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v24 = v99;
      }
      *(_QWORD *)(v24 + 16) = v34 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v24+ ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80))+ *(_QWORD *)(v32 + 72) * v34, v9, v30);
      v21 = v96;
      v35 = specialized _NativeSet.index(after:)(v25, v27, v29 & 1, v96);
      v25 = v35;
      v27 = v36;
      v29 = v37 & 1;
      --v22;
    }
    while (v22);
    outlined consume of Set<CommonAudio.Attribute>.Index._Variant(v35, v36, v37 & 1);
    swift_bridgeObjectRelease();
    a2 = v80;
    v12 = v91;
    a1 = v92;
    v23 = MEMORY[0x1E0DEE9D8];
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v38 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.attributes.setter();
  v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1880))(v38);
  if (v39 != 2)
  {
    v40 = (unsigned int *)MEMORY[0x1E0D6EC20];
    if ((v39 & 1) != 0)
      v40 = (unsigned int *)MEMORY[0x1E0D6EC18];
    (*(void (**)(char *, _QWORD, uint64_t))(v70 + 104))(v71, *v40, v72);
    v39 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audioRadioType.setter();
  }
  v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1400))(v39);
  v42 = *(_QWORD *)(v41 + 16);
  if (v42)
  {
    v43 = v23;
    v99 = v23;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v42, 0);
    v44 = v99;
    v45 = (uint64_t *)(v41 + 40);
    do
    {
      v47 = *(v45 - 1);
      v46 = *v45;
      v99 = v44;
      v49 = *(_QWORD *)(v44 + 16);
      v48 = *(_QWORD *)(v44 + 24);
      swift_bridgeObjectRetain();
      if (v49 >= v48 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v48 > 1, v49 + 1, 1);
        v44 = v99;
      }
      v45 += 4;
      *(_QWORD *)(v44 + 16) = v49 + 1;
      v50 = v44 + 16 * v49;
      *(_QWORD *)(v50 + 32) = v47;
      *(_QWORD *)(v50 + 40) = v46;
      --v42;
    }
    while (v42);
    swift_bridgeObjectRelease();
    v12 = v91;
    a1 = v92;
    v23 = v43;
    a2 = v80;
  }
  else
  {
    swift_bridgeObjectRelease();
    v44 = MEMORY[0x1E0DEE9D8];
  }
  v99 = v44;
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v51 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookAuthor.setter();
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1352))(v51);
  v53 = *(_QWORD *)(v52 + 16);
  if (v53)
  {
    v99 = v23;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53, 0);
    v54 = v99;
    v55 = (uint64_t *)(v52 + 40);
    do
    {
      v57 = *(v55 - 1);
      v56 = *v55;
      v99 = v54;
      v59 = *(_QWORD *)(v54 + 16);
      v58 = *(_QWORD *)(v54 + 24);
      swift_bridgeObjectRetain();
      if (v59 >= v58 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v58 > 1, v59 + 1, 1);
        v54 = v99;
      }
      v55 += 4;
      *(_QWORD *)(v54 + 16) = v59 + 1;
      v60 = v54 + 16 * v59;
      *(_QWORD *)(v60 + 32) = v57;
      *(_QWORD *)(v60 + 40) = v56;
      --v53;
    }
    while (v53);
    swift_bridgeObjectRelease();
    v12 = v91;
    a1 = v92;
  }
  else
  {
    swift_bridgeObjectRelease();
    v54 = MEMORY[0x1E0DEE9D8];
  }
  v99 = v54;
  BidirectionalCollection<>.joined(separator:)();
  swift_bridgeObjectRelease();
  v61 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.audiobookTitle.setter();
  v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1712))(v61);
  if (v62 != 11)
  {
    CommonAudio.Decade.parsecDecade.getter(v62);
    v62 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.decade.setter();
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 1808))(v62);
  v63 = Apple_Parsec_Siri_V2alpha_AudioUnderstanding.genre.setter();
  v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 1760))(v63);
  v65 = specialized Collection.first.getter(v64);
  swift_bridgeObjectRelease();
  if (v65 != 2)
  {
    v66 = (unsigned int *)MEMORY[0x1E0D6E9E8];
    if ((v65 & 1) != 0)
      v66 = (unsigned int *)MEMORY[0x1E0D6E9F0];
    (*(void (**)(char *, _QWORD, uint64_t))(v74 + 104))(v75, *v66, v76);
    Apple_Parsec_Siri_V2alpha_AudioUnderstanding.modifier.setter();
  }
  swift_release();
  v68 = v78;
  v67 = v79;
  (*(void (**)(uint64_t, char *, uint64_t))(v78 + 32))(a2, v12, v79);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v68 + 56))(a2, 0, 1, v67);
}

uint64_t CommonAudio.Attribute.parsecAudioAttribute.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int *v3;
  uint64_t v4;
  uint64_t v5;

  switch(a1)
  {
    case 0:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBB0];
      break;
    case 1:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBE0];
      break;
    case 2:
      v3 = (unsigned int *)MEMORY[0x1E0D6EC00];
      break;
    case 3:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBE8];
      break;
    case 6:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBD8];
      break;
    case 7:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBB8];
      break;
    case 8:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBF8];
      break;
    case 9:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBC0];
      break;
    case 10:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBC8];
      break;
    case 12:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBF0];
      break;
    default:
      v3 = (unsigned int *)MEMORY[0x1E0D6EBD0];
      break;
  }
  v4 = *v3;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioAttribute();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a2, v4, v5);
}

uint64_t CommonAudio.RadioType.parsecRadioType.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return CommonAudio.RadioType.parsecRadioType.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EC48], MEMORY[0x1E0D6EC20], MEMORY[0x1E0D6EC18], a2);
}

void CommonAudio.Decade.parsecDecade.getter(char a1)
{
  __asm { BR              X10 }
}

uint64_t sub_1C2436960()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x1E0D6E3C0];
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

uint64_t CommonAudio.Modifier.parsecAudioModifier.getter@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  return CommonAudio.RadioType.parsecRadioType.getter(a1, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E9F8], MEMORY[0x1E0D6E9E8], MEMORY[0x1E0D6E9F0], a2);
}

uint64_t CommonAudio.RadioType.parsecRadioType.getter@<X0>(char a1@<W0>, uint64_t (*a2)(_QWORD)@<X1>, unsigned int *a3@<X2>, unsigned int *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  unsigned int *v10;

  v9 = a2(0);
  if ((a1 & 1) != 0)
    v10 = a4;
  else
    v10 = a3;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(a5, *v10, v9);
}

uint64_t outlined consume of Set<CommonAudio.Attribute>.Index._Variant(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t specialized Set.subscript.getter(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(_BYTE *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a4 + (((unint64_t)result >> 3) & 0xFFFFFFFFFFFFF8) + 56) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2)
    return *(unsigned __int8 *)(*(_QWORD *)(a4 + 48) + result);
LABEL_8:
  __break(1u);
  return result;
}

uint64_t PommesRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  return result;
}

id PommesRequestInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void PommesRequestInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

void (*PommesRequestInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = PommesRequestInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t PommesRequestInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PommesRequestInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void PommesRequestInstrumentationUtil.logUnableToHandlePommesRequest(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *oslog;

  v5 = v4;
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2F0]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A318]), sel_init);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setReason_, a4);
        objc_msgSend(v10, sel_setCancelled_, v12);
        objc_msgSend(v8, sel_setPommesRequestContext_, v10);
        v13 = (void *)objc_opt_self();
        swift_retain();
        v14 = objc_msgSend(v13, sel_processInfo);
        v15 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v15 & 1) != 0)
          v16 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 96))();
        else
          v16 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v18, "Unable to log cancelled POMMES request", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

}

uint64_t PommesRequestInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PommesRequestInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C2436E4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2436E7C(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PommesRequestInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesRequestInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.mockStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.mockStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logStartOfPommesRequest(requestId:pommesCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logEndOfPommesRequest(requestId:pommesCandidateId:result:pommesSearchReason:isHandledByPreflight:preflightClientHandlerIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logFailedPommesRequest(requestId:pommesCandidateId:failedReason:pommesSearchReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logUnableToHandlePommesRequest(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PommesRequestInstrumentationUtil.logPSCScoreReported(requestId:pommesCandidateId:score:parserId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t UsoTask.isAppLaunchTask.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _BYTE v5[32];
  _BYTE v6[24];
  uint64_t v7;
  _BYTE v8[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v8, (uint64_t)v6);
  if (!v7)
  {
    outlined destroy of Any?((uint64_t)v8);
    goto LABEL_5;
  }
  outlined init with copy of Any?((uint64_t)v6, (uint64_t)v5);
  type metadata accessor for UsoTask_open_common_App();
  if (!swift_dynamicCast())
  {
    type metadata accessor for UsoTask_start_uso_NoEntity();
    if (swift_dynamicCast()
      || (type metadata accessor for UsoTask_play_uso_NoEntity(), swift_dynamicCast()))
    {
      v1 = swift_retain();
      MEMORY[0x1C3BBD204](&v4, v1);
      swift_release();
      if (v4)
      {
        v2 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        swift_release();
        outlined destroy of Any?((uint64_t)v8);
        if (v2)
        {
          swift_release();
          v0 = 1;
LABEL_13:
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)v8);
        swift_release();
      }
      v0 = 0;
      goto LABEL_13;
    }
    outlined destroy of Any?((uint64_t)v8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
LABEL_5:
    v0 = 0;
    goto LABEL_14;
  }
  outlined destroy of Any?((uint64_t)v8);
  swift_release();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  v0 = 1;
LABEL_14:
  outlined destroy of Any?((uint64_t)v6);
  return v0;
}

unint64_t Siri_Nlu_External_UserParse.firstAppLaunchTask()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v21 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v8 = *(_QWORD *)(v2 + 72);
    v19 = v5;
    v20 = v8;
    v9 = v2;
    v10 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    while (1)
    {
      v10(v4, v7, v1);
      v11 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v0)
        break;
      v12 = v11;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
      specialized Array.append<A>(contentsOf:)(v12);
      v7 += v20;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        v13 = v21;
        goto LABEL_7;
      }
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
    v15 = v21;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    if (v13 >> 62)
      goto LABEL_20;
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v14)
    {
      while (1)
      {
        v15 = *(_QWORD *)(v13 + 32);
        swift_retain();
        if ((UsoTask.isAppLaunchTask.getter() & 1) != 0)
          break;
        swift_release();
        if (v14 != 1)
        {
          v16 = 5;
          while (1)
          {
            v17 = v16 - 3;
            if (__OFADD__(v16 - 4, 1))
              break;
            v15 = *(_QWORD *)(v13 + 8 * v16);
            swift_retain();
            if ((UsoTask.isAppLaunchTask.getter() & 1) != 0)
              goto LABEL_10;
            swift_release();
            ++v16;
            if (v17 == v14)
              goto LABEL_17;
          }
          __break(1u);
LABEL_20:
          swift_bridgeObjectRetain();
          v14 = _CocoaArrayWrapper.endIndex.getter();
          if (v14)
            continue;
        }
        goto LABEL_17;
      }
LABEL_10:
      swift_bridgeObjectRelease_n();
    }
    else
    {
LABEL_17:
      swift_bridgeObjectRelease_n();
      return 0;
    }
  }
  return v15;
}

uint64_t ParkingLocationProfileSliceResolver.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = swift_allocObject();
  v4 = v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  *(_QWORD *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6((uint64_t)v2, 1, 1, v5);
  v7 = v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v2, v7);
  swift_endAccess();
  *(_BYTE *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 0;
  return v3;
}

uint64_t ParkingLocationProfileSliceResolver.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6(v3, 1, 1, v5);
  v7 = v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v3, v7);
  swift_endAccess();
  *(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 0;
  return v0;
}

uint64_t ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)@<X0>(void *a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  id v43;
  id v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void (*v65)(char *, uint64_t, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t (*v68)(uint64_t);
  uint64_t v69;
  uint64_t v70;
  id v71;
  char *v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  id *v76;
  uint64_t v77;
  uint64_t v78;
  void *v79;
  _QWORD aBlock[6];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v6);
  v76 = (id *)((char *)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v77 = *(_QWORD *)(v8 - 8);
  v78 = v8;
  MEMORY[0x1E0C80A78](v8);
  v74 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v75 = *((_QWORD *)v10 - 1);
  v11 = *(_QWORD *)(v75 + 64);
  v12 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v71 - v14;
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v56 = type metadata accessor for Logger();
    __swift_project_value_buffer(v56, (uint64_t)static Logger.pommes);
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_1C2356000, v57, v58, "Cannot create parking location slice because there is no service helper", v59, 2u);
      MEMORY[0x1C3BBFF64](v59, -1, -1);
    }

    goto LABEL_20;
  }
  if (!a2)
  {
    v60 = one-time initialization token for pommes;
    swift_unknownObjectRetain();
    if (v60 != -1)
      swift_once();
    v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
    v62 = Logger.logObject.getter();
    v63 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v62, v63))
    {
      v64 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v64 = 0;
      _os_log_impl(&dword_1C2356000, v62, v63, "Cannot create parking location slice because there is no dispatch queue", v64, 2u);
      MEMORY[0x1C3BBFF64](v64, -1, -1);
      swift_unknownObjectRelease();

    }
    else
    {

      swift_unknownObjectRelease();
    }
LABEL_20:
    v70 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(a3, 1, 1, v70);
  }
  v73 = a3;
  v20 = objc_allocWithZone(MEMORY[0x1E0D881D0]);
  v72 = v15;
  v21 = a1;
  v22 = v20;
  swift_unknownObjectRetain();
  v71 = a2;
  v23 = objc_msgSend(v22, sel_init);
  UUID.init()();
  v24 = UUID.uuidString.getter();
  v26 = v25;
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
  v27 = v24;
  v28 = v21;
  v29 = (uint64_t)v72;
  v30 = (void *)MEMORY[0x1C3BBEC44](v27, v26);
  swift_bridgeObjectRelease();
  objc_msgSend(v23, sel_setAceId_, v30);

  objc_msgSend(v23, sel_setRefId_, 0);
  Date.init()();
  v31 = v29 + v10[5];
  *(_QWORD *)v31 = "SiriInformationSearch/ParkingLocationProfileSliceResolver.swift";
  *(_QWORD *)(v31 + 8) = 63;
  *(_BYTE *)(v31 + 16) = 2;
  *(_QWORD *)(v29 + v10[6]) = 45;
  v32 = v29 + v10[7];
  *(_QWORD *)v32 = "resolveParkingLocationSlice(serviceHelper:dispatchQueue:)";
  *(_QWORD *)(v32 + 8) = 57;
  *(_BYTE *)(v32 + 16) = 2;
  v33 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
  v34 = (uint64_t *)(v29 + v10[8]);
  *v34 = v33;
  v34[1] = v35;
  outlined init with copy of PerformanceUtil.Ticket(v29, (uint64_t)v13);
  v36 = (*(unsigned __int8 *)(v75 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
  v37 = (v11 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
  v38 = swift_allocObject();
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v13, v38 + v36);
  v39 = v71;
  *(_QWORD *)(v38 + v37) = v71;
  v40 = v79;
  *(_QWORD *)(v38 + ((v37 + 15) & 0xFFFFFFFFFFFFFFF8)) = v79;
  v41 = v40;
  aBlock[4] = partial apply for closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:);
  aBlock[5] = v38;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = &block_descriptor_10;
  v42 = _Block_copy(aBlock);
  v43 = v39;
  v44 = v23;
  swift_retain();
  swift_release();
  objc_msgSend(v28, sel_handleCommand_completion_, v44, v42);
  _Block_release(v42);

  OS_dispatch_semaphore.wait()();
  v45 = (uint64_t)v41 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
  swift_beginAccess();
  v46 = (uint64_t)v76;
  outlined init with copy of MediaUserStateCenter?(v45, (uint64_t)v76, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  v47 = v77;
  v48 = v78;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v77 + 48))(v46, 1, v78) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v46, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
    v49 = v73;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v53 = 0;
      _os_log_impl(&dword_1C2356000, v51, v52, "There was a problem resolving parking location profile slice value", v53, 2u);
      MEMORY[0x1C3BBFF64](v53, -1, -1);
    }

    v54 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E868], MEMORY[0x1E0D6E838]);
    static Message.with(_:)();

    swift_unknownObjectRelease();
    outlined destroy of PerformanceUtil.Ticket(v29);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v54 - 8) + 56))(v49, 0, 1, v54);
  }
  else
  {
    v65 = *(void (**)(char *, uint64_t, uint64_t))(v47 + 32);
    v79 = v28;
    v66 = v74;
    v65(v74, v46, v48);
    v67 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    v76 = &v71;
    MEMORY[0x1E0C80A78](v67);
    *(&v71 - 2) = v66;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, v68, MEMORY[0x1E0D6E838]);
    v69 = v73;
    static Message.with(_:)();

    swift_unknownObjectRelease();
    outlined destroy of PerformanceUtil.Ticket(v29);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v66, v48);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v67 - 8) + 56))(v69, 0, 1, v67);
  }
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v23 = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(a3, 0);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a5;
  v16[3] = a2;
  v16[4] = a1;
  aBlock[4] = partial apply for closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6_1;
  v17 = _Block_copy(aBlock);
  swift_retain();
  v18 = a2;
  v19 = a1;
  static DispatchQoS.unspecified.getter();
  v24 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C3BBF154](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

Swift::Int closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(int a1, id a2, void *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  if (!a2)
  {
    if (a3)
    {
      v15 = a3;
      ParkingLocationProfileSliceResolver.handleAceVehicleEvent(_:)(v15);

      return OS_dispatch_semaphore.signal()();
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    v8 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1C2356000, v8, v18, "Received nil response from service helper", v19, 2u);
      MEMORY[0x1C3BBFF64](v19, -1, -1);
    }
LABEL_9:

    return OS_dispatch_semaphore.signal()();
  }
  v4 = a2;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  v6 = a2;
  v7 = a2;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v8, v9))
  {

    goto LABEL_9;
  }
  v10 = (uint8_t *)swift_slowAlloc();
  v11 = swift_slowAlloc();
  v20 = v11;
  *(_DWORD *)v10 = 136315138;
  v12 = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v13 = String.init<A>(describing:)();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v20);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1C2356000, v8, v9, "Service helper returned an error: %s", v10, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v11, -1, -1);
  MEMORY[0x1C3BBFF64](v10, -1, -1);

  return OS_dispatch_semaphore.signal()();
}

uint64_t closure #2 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v11;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, _QWORD))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6F188]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C24FA1B0;
  if (*(_BYTE *)(a2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) == 1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1C2356000, v7, v8, "Resolution succeeded but no vehicle event found", v9, 2u);
      MEMORY[0x1C3BBFF64](v9, -1, -1);
    }

  }
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t closure #3 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, _QWORD))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6F188]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C24FA1B0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v9 + v8, a2, v6);
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

void ParkingLocationProfileSliceResolver.handleAceVehicleEvent(_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  uint64_t v15;
  id v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  id v33;
  void *v34;
  unint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  id v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  id v49;
  id v50;
  uint64_t v51;
  id v52;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v6 = swift_dynamicCastObjCClass();
  if (!v6)
    goto LABEL_9;
  v7 = v6;
  v8 = (void *)objc_opt_self();
  v50 = a1;
  v9 = objc_msgSend(v8, sel_aceObjectWithGenericCommand_, v7);
  if (!v9)
  {

LABEL_9:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    v50 = a1;
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = (id)swift_slowAlloc();
      v52 = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = v50;
      v26 = objc_msgSend(v25, sel_description);
      v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v29 = v28;

      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v21, v22, "Received invalid service helper response %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v24, -1, -1);
      MEMORY[0x1C3BBFF64](v23, -1, -1);
LABEL_13:

      return;
    }

LABEL_15:
    v30 = v50;
    goto LABEL_16;
  }
  v10 = v9;
  objc_opt_self();
  v11 = swift_dynamicCastObjCClass();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = one-time initialization token for pommes;
    v14 = v10;
    if (v13 != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    v16 = v14;
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v19 = 134217984;
      v52 = objc_msgSend(v12, sel_errorCode);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2356000, v17, v18, "Command failed with error code = %ld", v19, 0xCu);
      MEMORY[0x1C3BBFF64](v19, -1, -1);

      return;
    }

    goto LABEL_26;
  }
  objc_opt_self();
  v31 = swift_dynamicCastObjCClass();
  if (!v31)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
    v50 = v50;
    v21 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = (id)swift_slowAlloc();
      v52 = v41;
      *(_DWORD *)v40 = 136315138;
      swift_getObjectType();
      v42 = _typeName(_:qualified:)();
      v51 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v43, (uint64_t *)&v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v21, v39, "Service helper response was of type %s, not SALocalSearchVehicleEventSearchCompleted", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v41, -1, -1);
      MEMORY[0x1C3BBFF64](v40, -1, -1);

      goto LABEL_13;
    }

    goto LABEL_15;
  }
  v32 = (void *)v31;
  v49 = v10;
  v33 = objc_msgSend(v32, sel_events);
  if (!v33)
  {
LABEL_34:
    *(_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 1;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1C2356000, v46, v47, "No vehicle event found", v48, 2u);
      MEMORY[0x1C3BBFF64](v48, -1, -1);

      return;
    }

    v30 = v49;
LABEL_16:

LABEL_26:
    return;
  }
  v34 = v33;
  type metadata accessor for SALocalSearchVehicleEvent();
  v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v35 >> 62)
  {
    swift_bridgeObjectRetain();
    v44 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v44)
      goto LABEL_21;
    goto LABEL_33;
  }
  if (!*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_33:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
LABEL_21:
  if ((v35 & 0xC000000000000001) != 0)
  {
    v36 = (id)MEMORY[0x1C3BBF3F4](0, v35);
    goto LABEL_24;
  }
  if (*(_QWORD *)((v35 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v36 = *(id *)(v35 + 32);
LABEL_24:
    v37 = v36;
    swift_bridgeObjectRelease();
    ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(v37, (uint64_t)v5);
    ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)((uint64_t)v5);

    outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
    return;
  }
  __break(1u);
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.buildResolutionStateFailedSliceValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v9[2];

  v0 = type metadata accessor for Google_Protobuf_Any();
  MEMORY[0x1E0C80A78](v0);
  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1E0C80A78](v5);
  (*(void (**)(char *, _QWORD))(v7 + 104))((char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6FCB8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0D70598], v1);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Google_Protobuf_Any.init()();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t closure #2 in ParkingLocationProfileSliceResolver.buildResolutionStateFailedSliceValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, _QWORD))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6FCB8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D70590], v0);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  uint64_t v27;
  uint64_t v29;
  _QWORD v30[4];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)v30 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v30 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ParkingLocation?);
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) == 1)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1C2356000, v21, v22, "Resolution succeeded but no vehicle event found", v23, 2u);
        MEMORY[0x1C3BBFF64](v23, -1, -1);
      }

      v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
    }
    else
    {
      v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
    }
    static Message.with(_:)();
    type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v7, 0, 1, v24);
    outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v7, (uint64_t)v12);
    v29 = v2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
    swift_beginAccess();
    outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v12, v29);
    return swift_endAccess();
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v19, v15, v16);
    v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    MEMORY[0x1E0C80A78](v25);
    v30[-2] = v19;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, v26, MEMORY[0x1E0D6F200]);
    static Message.with(_:)();
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v12, 0, 1, v25);
    outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v12, (uint64_t)v10);
    v27 = v2 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
    swift_beginAccess();
    outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v10, v27);
    swift_endAccess();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v17 + 8))(v19, v16);
  }
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *boxed_opaque_existential_1;
  void *v16;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[5];
  uint64_t v24;

  v19 = a2;
  v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v22 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v4 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Google_Protobuf_Any();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
  v23[3] = v14;
  v23[4] = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ParkingLocation and conformance Apple_Parsec_Siri_V2alpha_ParkingLocation, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6EE30], MEMORY[0x1E0D6EE18]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(boxed_opaque_existential_1, v19, v14);
  defaultAnyTypeURLPrefix.getter();
  v16 = v20;
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v16)
  {

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v13, v9, v10);
  }
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D6FCB8], v21);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v22 + 104))(v3, *MEMORY[0x1E0D70598], v24);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t ParkingLocationProfileSliceResolver.buildParkingLocation(_:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  float v7;
  float v8;
  id v9;
  void *v10;
  float v11;
  float v12;
  uint64_t v13;
  NSObject *v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  _QWORD *v18;
  id v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint32_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t);
  os_log_type_t v37;
  NSObject *v38;
  uint64_t v39;

  v3 = objc_msgSend(a1, sel_location);
  if (v3)
  {
    v4 = v3;
    v5 = objc_msgSend(v3, sel_latitude);
    if (v5)
    {
      v6 = v5;
      objc_msgSend(v5, sel_floatValue);
      v8 = v7;

      v9 = objc_msgSend(v4, sel_longitude);
      if (v9)
      {
        v10 = v9;
        objc_msgSend(v9, sel_floatValue);
        v12 = v11;

        if (one-time initialization token for pommes != -1)
          swift_once();
        v13 = type metadata accessor for Logger();
        __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
        v14 = v4;
        v15 = Logger.logObject.getter();
        v16 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v15, v16))
        {
          v17 = swift_slowAlloc();
          v18 = (_QWORD *)swift_slowAlloc();
          *(_DWORD *)v17 = 138412546;
          v19 = -[NSObject latitude](v14, sel_latitude);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *v18 = v19;
          *(_WORD *)(v17 + 12) = 2112;
          v26 = -[NSObject longitude](v14, sel_longitude);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v18[1] = v26;

          _os_log_impl(&dword_1C2356000, v15, v16, "Fetched parking location with latlong (%@, %@)", (uint8_t *)v17, 0x16u);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v18, -1, -1);
          MEMORY[0x1C3BBFF64](v17, -1, -1);

          if (v8 != 0.0)
            goto LABEL_20;
        }
        else
        {

          if (v8 != 0.0)
            goto LABEL_20;
        }
        if (v12 == 0.0)
        {
          v27 = Logger.logObject.getter();
          v28 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v27, v28))
          {
            v29 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v29 = 0;
            v30 = "Received zero for both latlong, treating as error";
            v31 = v27;
            v32 = v28;
            v33 = v29;
            v34 = 2;
LABEL_25:
            _os_log_impl(&dword_1C2356000, v31, v32, v30, v33, v34);
            MEMORY[0x1C3BBFF64](v29, -1, -1);
            v38 = v14;
LABEL_27:

            v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a2, 1, 1, v39);
          }
          goto LABEL_26;
        }
LABEL_20:
        if (fabsf(v8) <= 90.0 && fabsf(v12) <= 180.0)
        {
          v35 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
          MEMORY[0x1E0C80A78](v35);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ParkingLocation and conformance Apple_Parsec_Siri_V2alpha_ParkingLocation, v36, MEMORY[0x1E0D6EE18]);
          static Message.with(_:)();

          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(a2, 0, 1, v35);
        }
        v27 = Logger.logObject.getter();
        v37 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v27, v37))
        {
          v29 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v29 = 134218240;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *((_WORD *)v29 + 6) = 2048;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v30 = "Received latlong out of valid range: (%f, %f)";
          v31 = v27;
          v32 = v37;
          v33 = v29;
          v34 = 22;
          goto LABEL_25;
        }
LABEL_26:
        v38 = v27;
        v27 = v14;
        goto LABEL_27;
      }
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1C2356000, v21, v22, "Missing location in the local search vehicle event", v23, 2u);
    MEMORY[0x1C3BBFF64](v23, -1, -1);
  }

  v24 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ParkingLocation();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(a2, 1, 1, v24);
}

uint64_t closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(float a1, float a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v11;

  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LocationBuilderParams();
  MEMORY[0x1E0C80A78](v7);
  v8 = objc_msgSend(a4, sel_notes);
  if (v8)
  {
    v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v8 = (id)Apple_Parsec_Siri_V2alpha_ParkingLocation.notes.setter();
  }
  MEMORY[0x1E0C80A78](v8);
  *((float *)&v11 - 4) = a1;
  *((float *)&v11 - 3) = a2;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_LocationBuilderParams and conformance Apple_Parsec_Siri_V2alpha_LocationBuilderParams, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6FAD0], MEMORY[0x1E0D6FAB8]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_V2alpha_ParkingLocation.location.setter();
}

uint64_t ParkingLocationProfileSliceResolver.deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return v0;
}

uint64_t ParkingLocationProfileSliceResolver.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return swift_deallocClassInstance();
}

uint64_t sub_1C2439C64()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v0 + v2;
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t partial apply for closure #2 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(a1, v1);
}

uint64_t partial apply for closure #3 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t ObjC metadata update function for ParkingLocationProfileSliceResolver()
{
  return type metadata accessor for ParkingLocationProfileSliceResolver();
}

uint64_t type metadata accessor for ParkingLocationProfileSliceResolver()
{
  uint64_t result;

  result = type metadata singleton initialization cache for ParkingLocationProfileSliceResolver;
  if (!type metadata singleton initialization cache for ParkingLocationProfileSliceResolver)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for ParkingLocationProfileSliceResolver()
{
  unint64_t v0;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for ParkingLocationProfileSliceResolver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ParkingLocationProfileSliceResolver.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 152))();
}

uint64_t dispatch thunk of ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t partial apply for closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)(*(float *)(v1 + 24), *(float *)(v1 + 28), a1, *(void **)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocation(_:)()
{
  Apple_Parsec_Siri_V2alpha_LocationBuilderParams.latitude.setter();
  return Apple_Parsec_Siri_V2alpha_LocationBuilderParams.longitude.setter();
}

uint64_t partial apply for closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in ParkingLocationProfileSliceResolver.buildParkingLocationProfileSlice(_:)(a1, *(_QWORD *)(v1 + 16));
}

unint64_t type metadata accessor for SALocalSearchVehicleEvent()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SALocalSearchVehicleEvent;
  if (!lazy cache variable for type metadata for SALocalSearchVehicleEvent)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SALocalSearchVehicleEvent);
  }
  return result;
}

uint64_t sub_1C2439F5C()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

Swift::Int partial apply for closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(*(_QWORD *)(v0 + 16), *(id *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t DataProviderManager.__allocating_init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v34 = a7;
  v35 = a8;
  v32 = a5;
  v33 = a6;
  v37 = a9;
  v26 = a11;
  v27 = a10;
  v29 = a12;
  v30 = a2;
  v28 = a13;
  v17 = swift_allocObject();
  v36 = a14;
  v18 = *(_QWORD *)(a14 + 24);
  v19 = *(_QWORD *)(a14 + 32);
  v20 = __swift_mutable_project_boxed_opaque_existential_1(v36, *(_QWORD *)(v36 + 24));
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v26 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v23 + 16))(v22);
  v24 = v27;
  v31 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(a1, v30, a3, a4, v32, v33, v34, v35, v37, v27, v26, a12, a13, (uint64_t)v22, v17, v18, v19);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v36);
  return v31;
}

uint64_t specialized AnyDataProvider.waitForPrepare(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v19[16];
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;

  v2 = v1;
  v4 = type metadata accessor for ContinuousClock();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = 1;
  ContinuousClock.init()();
  v20 = &v25;
  v21 = v2;
  v22 = a1;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, v5, MEMORY[0x1E0DF0BB0]);
  Clock.measure(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v4);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v24 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = Duration.description.getter();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v16 = *(_QWORD *)(v2 + 96);
    v17 = *(_QWORD *)(v2 + 104);
    swift_bridgeObjectRetain();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v10, v11, "Waited %s for %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    MEMORY[0x1C3BBFF64](v12, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v25;
}

uint64_t DataProviderManager.environment.getter()
{
  return swift_retain();
}

id DataProviderManager.preferences.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 104);
}

uint64_t key path setter for DataProviderManager.appChecking : DataProviderManager(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  _BYTE v5[40];

  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for PommesAppChecking?);
  v3 = *a2 + 128;
  swift_beginAccess();
  outlined assign with take of PommesAppChecking?((uint64_t)v5, v3);
  return swift_endAccess();
}

uint64_t DataProviderManager.appChecking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v1 + 128, a1, (uint64_t *)&demangling cache variable for type metadata for PommesAppChecking?);
}

uint64_t DataProviderManager.setServiceHelper(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  id v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17[3];

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_unknownObjectRetain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v17[0] = v8;
    *(_DWORD *)v7 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFRequestDispatcherServiceHelper);
    v9 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v5, v6, "Creating POMMES service helper (underlying: %s)", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v8, -1, -1);
    MEMORY[0x1C3BBFF64](v7, -1, -1);

  }
  else
  {

    swift_unknownObjectRelease_n();
  }
  v11 = objc_allocWithZone(MEMORY[0x1E0C97298]);
  swift_unknownObjectRetain();
  v12 = objc_msgSend(v11, sel_init);
  type metadata accessor for AssistantDataCache();
  v13 = swift_allocObject();
  v14 = closure #1 in variable initialization expression of AssistantDataCache.contactsQueue();
  *(_QWORD *)(v13 + 144) = 0;
  *(_OWORD *)(v13 + 48) = 0u;
  *(_OWORD *)(v13 + 64) = 0u;
  *(_OWORD *)(v13 + 80) = 0u;
  *(_OWORD *)(v13 + 96) = 0u;
  *(_OWORD *)(v13 + 112) = 0u;
  *(_OWORD *)(v13 + 122) = 0u;
  *(_QWORD *)(v13 + 16) = v14;
  *(_QWORD *)(v13 + 24) = a1;
  *(_QWORD *)(v13 + 32) = v12;
  *(_QWORD *)(v13 + 40) = &protocol witness table for CNContactStore;
  swift_beginAccess();
  v15 = *(void **)(v13 + 144);
  *(_QWORD *)(v13 + 144) = 0;

  *(_QWORD *)(v2 + 112) = v13;
  swift_release();
  *(_QWORD *)(v2 + 120) = a1;
  swift_unknownObjectRetain();
  return swift_unknownObjectRelease();
}

uint64_t DataProviderManager.getServiceHelper()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    v4 = swift_slowAlloc();
    v8 = v4;
    *(_DWORD *)v3 = 136315138;
    swift_unknownObjectRetain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AFRequestDispatcherServiceHelper?);
    v5 = String.init<A>(describing:)();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v6, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v1, v2, "Retrieving POMMES service helper (underlying: %s)", v3, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v4, -1, -1);
    MEMORY[0x1C3BBFF64](v3, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return swift_unknownObjectRetain();
}

uint64_t DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v32 = a8;
  v26 = a4;
  v27 = a5;
  v33 = a6;
  v34 = a9;
  v25 = a10;
  v29 = a7;
  v30 = a12;
  v28 = a13;
  v17 = *(_QWORD *)(a14 + 24);
  v18 = *(_QWORD *)(a14 + 32);
  v19 = __swift_mutable_project_boxed_opaque_existential_1(a14, v17);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v25 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v22 + 16))(v21);
  v23 = v25;
  v31 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(a1, a2, a3, v26, v27, v33, v29, v32, v34, v25, a11, a12, a13, (uint64_t)v21, v31, v17, v18);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(a14);
  return v31;
}

Swift::Void __swiftcall DataProviderManager.prepareForSearchAtSessionStart()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, _QWORD);
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    v20 = *(_QWORD *)(v1 + 112);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssistantDataCache?);
    v10 = String.init<A>(describing:)();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v6, v7, "DataProviderManager scheduling work to prepare for search at session start (helper: %s)...", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v9, -1, -1);
    MEMORY[0x1C3BBFF64](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v12 = *(_QWORD *)(v1 + 16);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 32) + 216))(v12);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 40) + 216))(v12);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 48) + 216))(v12);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 56) + 216))(v12);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 24) + 216))(v12);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 64) + 216))(v12);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 72) + 216))(v12);
  (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 80) + 216))(v12);
  Date.init()();
  v13 = &v4[v2[5]];
  *(_QWORD *)v13 = "SiriInformationSearch/DataProviderManager.swift";
  *((_QWORD *)v13 + 1) = 47;
  v13[16] = 2;
  *(_QWORD *)&v4[v2[6]] = 105;
  v14 = &v4[v2[7]];
  *(_QWORD *)v14 = "prepareForSearchAtSessionStart()";
  *((_QWORD *)v14 + 1) = 32;
  v14[16] = 2;
  v15 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000032);
  v16 = (uint64_t *)&v4[v2[8]];
  *v16 = v15;
  v16[1] = v17;
  v18 = *(_QWORD *)(v1 + 112);
  if (v18)
  {
    v19 = *(void (**)(uint64_t, _QWORD))(*(_QWORD *)v18 + 176);
    swift_retain();
    v19(v12, 0);
    swift_release();
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v4, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v4);
}

Swift::Void __swiftcall DataProviderManager.prepareForSearchAtPommesRequestStart()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;

  v1 = v0;
  v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = swift_slowAlloc();
    v21 = v9;
    *(_DWORD *)v8 = 136315138;
    v20 = *(_QWORD *)(v1 + 112);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssistantDataCache?);
    v10 = String.init<A>(describing:)();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v11, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v6, v7, "DataProviderManager scheduling work to prepare for search at POMMES request start (helper: %s)...", v8, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v9, -1, -1);
    MEMORY[0x1C3BBFF64](v8, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  Date.init()();
  v12 = &v4[v2[5]];
  *(_QWORD *)v12 = "SiriInformationSearch/DataProviderManager.swift";
  *((_QWORD *)v12 + 1) = 47;
  v12[16] = 2;
  *(_QWORD *)&v4[v2[6]] = 120;
  v13 = &v4[v2[7]];
  *(_QWORD *)v13 = "prepareForSearchAtPommesRequestStart()";
  *((_QWORD *)v13 + 1) = 38;
  v13[16] = 2;
  v14 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000032);
  v15 = (uint64_t *)&v4[v2[8]];
  *v15 = v14;
  v15[1] = v16;
  v17 = *(_QWORD *)(v1 + 112);
  if (v17)
  {
    v18 = *(_QWORD *)(v1 + 16);
    v19 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 176);
    swift_retain();
    v19(v18, 1);
    swift_release();
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v4, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v4);
}

Swift::Void __swiftcall DataProviderManager.tearDown()()
{
  _QWORD **v0;
  _QWORD **v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = v0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "DataProviderManager tearing down data providers ...", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  v6 = (*(uint64_t (**)(void))(*v1[3] + 248))();
  v7 = (*(uint64_t (**)(uint64_t))(*v1[4] + 248))(v6);
  v8 = (*(uint64_t (**)(uint64_t))(*v1[5] + 248))(v7);
  v9 = (*(uint64_t (**)(uint64_t))(*v1[6] + 248))(v8);
  v10 = (*(uint64_t (**)(uint64_t))(*v1[7] + 248))(v9);
  v11 = (*(uint64_t (**)(uint64_t))(*v1[8] + 248))(v10);
  v12 = (*(uint64_t (**)(uint64_t))(*v1[9] + 248))(v11);
  (*(void (**)(uint64_t))(*v1[10] + 248))(v12);
}

uint64_t DataProviderManager.addNavigationAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void (*v18)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v6 = type metadata accessor for Date();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v23 - v14, a1, v9);
  if (one-time initialization token for shared != -1)
    v16 = swift_once();
  v17 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v16);
  v21 = v3;
  v22 = a2;
  Date.init()();
  v18 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v17 + 200);
  v21 = &v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]?);
  LOBYTE(v20) = 2;
  v18(&v27, 0xD000000000000052, 0x80000001C2505D50, 0, v8, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 231, "addNavigationAppInfoSlice(to:for:)", 34, v20, partial apply for closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:));
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v25);
  if (v27)
  {
    DataProviderManager.appendProfileSlices(_:to:)(v27, (uint64_t)v15, (uint64_t)v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v15 = v13;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v26, v15, v9);
}

uint64_t closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  uint64_t v24;
  _BYTE v25[96];
  uint64_t v26[15];

  v26[14] = a3;
  v5 = type metadata accessor for DispatchTime();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = &v25[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  MEMORY[0x1E0C80A78](v7);
  v11 = &v25[-v10 - 8];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v12);
  v14 = &v25[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v15 = a1[6];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v14);
  v16 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v14, 0, 1, v16);
  v17 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v18 = v24;
  OS_dispatch_queue.sync<A>(execute:)();
  v24 = v18;
  outlined init with take of PommesSearchReason?((uint64_t)v25, (uint64_t)v26, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v19 = a1[15];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  if (one-time initialization token for timeout != -1)
    swift_once();
  v20 = type metadata accessor for DispatchTimeInterval();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static PreferredNavigationAppDataProvider.timeout);
  MEMORY[0x1C3BBEB6C](v9, v21);
  v22 = *(void (**)(char *, uint64_t))(v6 + 8);
  v22(v9, v5);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)v15 + 240))(v14, v26, v19, v17, v11);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v26);
  v22(v11, v5);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t DataProviderManager.addSiriKitAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  void (*v12)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint64_t v14;
  int v15;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v19 = a1;
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    v8 = swift_once();
  v11 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v8);
  v16 = v3;
  v17 = a2;
  Date.init()();
  v12 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v11 + 200);
  v16 = &v15;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]?);
  LOBYTE(v15) = 2;
  v12(&v20, 0xD00000000000004ALL, 0x80000001C2505DE0, 0, v10, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 259, "addSiriKitAppInfoSlice(to:for:)", 31, v15, partial apply for closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:));
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  if (v20)
  {
    DataProviderManager.appendProfileSlices(_:to:)(v20, v19, a3);
    return swift_bridgeObjectRelease();
  }
  else
  {
    v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a3, v19, v14);
  }
}

uint64_t closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[96];
  uint64_t v29[15];

  v29[14] = a3;
  v5 = type metadata accessor for DispatchTimeInterval();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for DispatchTime();
  v26 = *(_QWORD *)(v27 - 8);
  v9 = MEMORY[0x1E0C80A78](v27);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[7];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v16);
  v17 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
  v23 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v18 = v25;
  OS_dispatch_queue.sync<A>(execute:)();
  v25 = v18;
  outlined init with take of PommesSearchReason?((uint64_t)v28, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v19 = a1[15];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  *v8 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF490], v5);
  MEMORY[0x1C3BBEB6C](v11, v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v21 = v27;
  v20(v11, v27);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)v24 + 240))(v16, v29, v19, v23, v13);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v29);
  v20(v13, v21);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t DataProviderManager.addMarketplaceInfo(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v36;
  void (*v37)(_BYTE *, _QWORD);
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[96];
  uint64_t v49[10];

  v3 = v2;
  v46 = type metadata accessor for DispatchTimeInterval();
  v44 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v7 = (uint64_t *)((char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = type metadata accessor for DispatchTime();
  v45 = *(_QWORD *)(v47 - 8);
  v8 = MEMORY[0x1E0C80A78](v47);
  v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v38 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v42 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  v43 = *(_QWORD *)(v42 - 8);
  v19 = MEMORY[0x1E0C80A78](v42);
  v39 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v40 = (char *)&v38 - v21;
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 16);
  v41 = a2;
  v23(a2, a1, v22);
  v24 = v3[9];
  v25 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v15, 1, 1, v25);
  v26 = v3[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  outlined init with take of PommesSearchReason?((uint64_t)v48, (uint64_t)v49, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v27 = v3[15];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  *v7 = 1;
  v28 = v44;
  v29 = v46;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v44 + 104))(v7, *MEMORY[0x1E0DEF490], v46);
  MEMORY[0x1C3BBEB6C](v10, v7);
  (*(void (**)(_QWORD *, uint64_t))(v28 + 8))(v7, v29);
  v30 = *(void (**)(char *, uint64_t))(v45 + 8);
  v31 = v47;
  v30(v10, v47);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)v24 + 240))(v15, v49, v27, v26, v12);
  v32 = v42;
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v49);
  v33 = v31;
  v34 = v43;
  v30(v12, v33);
  outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesSearchRequest?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v18, 1, v32) == 1)
    return outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Search_V2_MarketplaceInfo?);
  v36 = v40;
  (*(void (**)(char *, char *, uint64_t))(v34 + 32))(v40, v18, v32);
  (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v39, v36, v32);
  v37 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.modify();
  Apple_Parsec_Search_PegasusQueryContext.marketplaceInfo.setter();
  v37(v48, 0);
  return (*(uint64_t (**)(char *, uint64_t))(v34 + 8))(v36, v32);
}

void DataProviderManager.addMuxSettings(to:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void **v18;
  uint64_t v19;
  void **v20;
  void *v21;
  char *v22;
  void *v23;
  void **v24;
  NSObject *v25;
  char v27;
  NSObject *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  NSObject *v33;
  id v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  unsigned int *v46;
  id v47;
  void *v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  unsigned int v53;
  unsigned int *v54;
  uint64_t v55;
  char v56;
  _QWORD v57[2];
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;

  v63 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.HourFormat();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v62 = (char *)v57 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  v58 = *(_QWORD *)(v60 - 8);
  MEMORY[0x1E0C80A78](v60);
  v59 = (char *)v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTimeInterval();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (_QWORD *)((char *)v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for DispatchTime();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(void ***)(v2 + 88);
  if (v18)
  {
    static DispatchTime.now()();
    *v10 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v8 + 104))(v10, *MEMORY[0x1E0DEF490], v7);
    MEMORY[0x1C3BBEB6C](v14, v10);
    (*(void (**)(_QWORD *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
    v18 = (void **)(*((uint64_t (**)(char *))*v18 + 21))(v17);
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for DispatchTime?);
  }
  v19 = type metadata accessor for PommesSearchRequest(0);
  if (*(_BYTE *)(a2 + *(int *)(v19 + 60)) != 1)
    goto LABEL_15;
  if (!v18)
  {
LABEL_16:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1C2356000, v30, v31, "Unable to get mux settings for user", v32, 2u);
      MEMORY[0x1C3BBFF64](v32, -1, -1);
    }
    goto LABEL_20;
  }
  v20 = (void **)(a2 + *(int *)(v19 + 84));
  v21 = v20[1];
  if (!v21 || (v22 = (char *)v18[2]) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }
  v57[1] = a1;
  v23 = *v20;
  swift_bridgeObjectRetain_n();
  v24 = v18 + 10;
  while (1)
  {
    v25 = *v24;
    if (*(v24 - 6) == v23 && v21 == *(v24 - 5))
      break;
    v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28 = v25;
    if ((v27 & 1) != 0)
      goto LABEL_22;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 += 7;
    if (!--v22)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_16;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v33 = v25;
LABEL_22:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v34 = -[NSObject temperatureUnit](v25, sel_temperatureUnit);
  if (!v34)
    goto LABEL_34;
  v35 = v34;
  v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v38 = v37;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v40, v41))
  {
    v42 = (uint8_t *)swift_slowAlloc();
    v43 = swift_slowAlloc();
    v65 = v43;
    *(_DWORD *)v42 = 136315138;
    swift_bridgeObjectRetain();
    v64 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, &v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v40, v41, "Adding temperatureUnit %s to Pegasus query context from mux context", v42, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v43, -1, -1);
    MEMORY[0x1C3BBFF64](v42, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v36 && v44 == v38)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0)
    {
      if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v36 && v55 == v38)
      {
        swift_bridgeObjectRelease();
        v46 = (unsigned int *)MEMORY[0x1E0D6CA58];
      }
      else
      {
        v56 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        v46 = (unsigned int *)MEMORY[0x1E0D6CA68];
        if ((v56 & 1) != 0)
          v46 = (unsigned int *)MEMORY[0x1E0D6CA58];
      }
      goto LABEL_33;
    }
  }
  v46 = (unsigned int *)MEMORY[0x1E0D6CA60];
LABEL_33:
  (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v59, *v46, v60);
  swift_bridgeObjectRelease();
  Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
LABEL_34:
  v47 = -[NSObject twentyFourHourTimeDisplay](v25, sel_twentyFourHourTimeDisplay);
  if (v47)
  {
    v48 = v47;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
    v30 = v48;
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v52 = 67109120;
      LODWORD(v65) = -[NSObject BOOLValue](v30, sel_BOOLValue);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2356000, v50, v51, "Adding twentyFourHourMode %{BOOL}d to Pegasus query context from mux context", v52, 8u);
      MEMORY[0x1C3BBFF64](v52, -1, -1);
    }
    else
    {

      v50 = v30;
    }

    v53 = -[NSObject BOOLValue](v30, sel_BOOLValue);
    v54 = (unsigned int *)MEMORY[0x1E0D6C9E0];
    if (!v53)
      v54 = (unsigned int *)MEMORY[0x1E0D6C9E8];
    (*(void (**)(char *, _QWORD, uint64_t))(v61 + 104))(v62, *v54, v63);
    Apple_Parsec_Search_PegasusQueryContext.hourFormat.setter();

  }
  else
  {
    v30 = v25;
  }
LABEL_20:

}

Swift::Bool __swiftcall DataProviderManager.userContentAllowed()()
{
  uint64_t v0;
  uint64_t v1;
  void (*v2)(uint64_t *__return_ptr, uint64_t);
  uint64_t v3;
  char v4;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10[12];
  _BYTE v11[24];
  uint64_t v12;
  char v13;

  v1 = *(_QWORD *)(v0 + 112);
  if (v1
    && (v2 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1 + 120),
        v3 = swift_retain(),
        v2(v10, v3),
        swift_release(),
        outlined init with take of PommesSearchReason?((uint64_t)v10, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?), v12))
  {
    v4 = v13;
    outlined release of AssistantDataSnapshot?(v10);
    return v4 & 1;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v9 = 0;
      _os_log_impl(&dword_1C2356000, v7, v8, "No allowUserGeneratedContent BOOLean available from assistant data cache.", v9, 2u);
      MEMORY[0x1C3BBFF64](v9, -1, -1);
    }

    return 1;
  }
}

uint64_t DataProviderManager.getQueueState()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  _QWORD v21[2];
  _OWORD v22[6];

  v21[1] = a1;
  v2 = type metadata accessor for DispatchTimeInterval();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (_QWORD *)((char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v6 = type metadata accessor for DispatchTime();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v21 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v1 + 32);
  v17 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 1, 1, v17);
  memset(v22, 0, 90);
  v18 = *(_QWORD *)(v1 + 16);
  static DispatchTime.now()();
  *v5 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v3 + 104))(v5, *MEMORY[0x1E0DEF490], v2);
  MEMORY[0x1C3BBEB6C](v10, v5);
  (*(void (**)(_QWORD *, uint64_t))(v3 + 8))(v5, v2);
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v10, v6);
  (*(void (**)(char *, _OWORD *, _QWORD, uint64_t, char *))(*(_QWORD *)v16 + 240))(v15, v22, 0, v18, v12);
  v19(v12, v6);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E0D6F840], MEMORY[0x1E0D6F260]);
}

uint64_t closure #3 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E0D6F838], MEMORY[0x1E0D6F258]);
}

uint64_t closure #4 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E0D6F838], MEMORY[0x1E0D6F270]);
}

uint64_t closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E0D6F848]);
}

uint64_t closure #6 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E0D6F850]);
}

uint64_t closure #5 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1, unsigned int *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionCategory();
  MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, _QWORD))(v5 + 104))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *a2);
  return Apple_Parsec_Siri_V2alpha_Restriction.category.setter();
}

uint64_t closure #8 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E0D6F858], MEMORY[0x1E0D6F250]);
}

uint64_t closure #9 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  return closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, MEMORY[0x1E0D6F858], MEMORY[0x1E0D6F268]);
}

uint64_t closure #1 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionReason();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionCategory();
  MEMORY[0x1E0C80A78](v9);
  (*(void (**)(char *, _QWORD))(v11 + 104))((char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), *a2);
  Apple_Parsec_Siri_V2alpha_Restriction.category.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *a3, v5);
  return Apple_Parsec_Siri_V2alpha_Restriction.reason.setter();
}

uint64_t static DataProviderManager.isDeviceLockedWithPasscode()()
{
  unsigned int v0;

  v0 = MKBGetDeviceLockState();
  return (v0 < 4) & (6u >> (v0 & 0xF));
}

uint64_t DataProviderManager.addPairedDevices(to:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t (*v30)(uint64_t *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36[12];
  uint64_t v37;
  uint64_t v38[13];

  v31 = a1;
  v33 = type metadata accessor for DispatchTimeInterval();
  v2 = *(_QWORD *)(v33 - 8);
  MEMORY[0x1E0C80A78](v33);
  v4 = (uint64_t *)((char *)&v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v35 = type metadata accessor for DispatchTime();
  v34 = *(_QWORD *)(v35 - 8);
  v5 = MEMORY[0x1E0C80A78](v35);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v31 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = v1[10];
  v13 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v12, 1, 1, v13);
  v14 = v1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  outlined init with take of PommesSearchReason?((uint64_t)v36, (uint64_t)v38, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v15 = v1[15];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  *v4 = 1;
  v16 = v33;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF490], v33);
  MEMORY[0x1C3BBEB6C](v7, v4);
  (*(void (**)(_QWORD *, uint64_t))(v2 + 8))(v4, v16);
  v17 = *(void (**)(char *, uint64_t))(v34 + 8);
  v18 = v35;
  v17(v7, v35);
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)v32 + 240))(&v37, v12, v38, v15, v14, v9);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v38);
  v17(v9, v18);
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for PommesSearchRequest?);
  if (v37)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v36[0] = v24;
      *(_DWORD *)v23 = 136315138;
      v25 = type metadata accessor for Useragentpb_CompanionDevice();
      v26 = swift_bridgeObjectRetain();
      v27 = MEMORY[0x1C3BBEE9C](v26, v25);
      v29 = v28;
      swift_bridgeObjectRelease();
      v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v29, v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v21, v22, "Adding paired device info: %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v24, -1, -1);
      MEMORY[0x1C3BBFF64](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v30 = (uint64_t (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.modify();
    Apple_Parsec_Search_PegasusQueryContext.companionDevice.setter();
    return v30(v36, 0);
  }
  return result;
}

uint64_t DataProviderManager.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_unknownObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + 128, (uint64_t *)&demangling cache variable for type metadata for PommesAppChecking?);
  return v0;
}

uint64_t DataProviderManager.__deallocating_deinit()
{
  DataProviderManager.deinit();
  return swift_deallocClassInstance();
}

uint64_t DataProviderManager.waitForPrepare(timeout:)(unint64_t a1)
{
  int64_t v1;
  int64_t v2;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  _BOOL4 v17;
  uint64_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t *v33;
  uint64_t v34;
  char v35;
  NSObject *v36;
  os_log_type_t v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t result;
  unint64_t v43;
  _QWORD v44[2];
  __int128 v45;
  unint64_t v46;
  unint64_t v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51[2];
  unint64_t v52;

  v2 = v1;
  v4 = type metadata accessor for ContinuousClock();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t)v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v9 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v9 & 1) != 0)
  {
    v52 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    if (one-time initialization token for pommes != -1)
LABEL_33:
      swift_once();
    v10 = type metadata accessor for Logger();
    v49 = __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, v11, v12, "Starting to wait for data providers to finish preparing", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }

    v14 = ContinuousClock.init()();
    MEMORY[0x1E0C80A78](v14);
    v44[-4] = &v52;
    v44[-3] = v2;
    v43 = a1;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0], MEMORY[0x1E0DF0BB0]);
    Clock.measure(_:)();
    (*(void (**)(uint64_t, unint64_t))(v5 + 8))(v7, v4);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    v4 = v16;
    v17 = os_log_type_enabled(v15, v16);
    v18 = MEMORY[0x1E0DEE9B8];
    if (v17)
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v51[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v5 = (uint64_t)(v19 + 4);
      v21 = Duration.description.getter();
      v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v15, (os_log_type_t)v4, "It took %s for data providers to finish preparing", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v20, -1, -1);
      MEMORY[0x1C3BBFF64](v19, -1, -1);
    }

    a1 = v52;
    v23 = *(_QWORD *)(v52 + 64);
    v47 = v52 + 64;
    v24 = 1 << *(_BYTE *)(v52 + 32);
    v25 = -1;
    if (v24 < 64)
      v25 = ~(-1 << v24);
    v26 = v25 & v23;
    v48 = (unint64_t)(v24 + 63) >> 6;
    swift_bridgeObjectRetain();
    v7 = 0;
    v2 = 0;
    *(_QWORD *)&v27 = 136315394;
    v45 = v27;
    v44[1] = v18 + 8;
    v46 = a1;
    while (1)
    {
      if (v26)
      {
        v28 = __clz(__rbit64(v26));
        v26 &= v26 - 1;
        v29 = v28 | (v2 << 6);
      }
      else
      {
        v30 = v2 + 1;
        if (__OFADD__(v2, 1))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          goto LABEL_33;
        }
        if (v30 >= v48)
          goto LABEL_30;
        v31 = *(_QWORD *)(v47 + 8 * v30);
        ++v2;
        if (!v31)
        {
          v2 = v30 + 1;
          if (v30 + 1 >= v48)
            goto LABEL_30;
          v31 = *(_QWORD *)(v47 + 8 * v2);
          if (!v31)
          {
            v2 = v30 + 2;
            if (v30 + 2 >= v48)
              goto LABEL_30;
            v31 = *(_QWORD *)(v47 + 8 * v2);
            if (!v31)
            {
              v32 = v30 + 3;
              if (v32 >= v48)
              {
LABEL_30:
                swift_release();
                swift_bridgeObjectRelease();
                return v7 & 1;
              }
              v31 = *(_QWORD *)(v47 + 8 * v32);
              if (!v31)
              {
                while (1)
                {
                  v2 = v32 + 1;
                  if (__OFADD__(v32, 1))
                    goto LABEL_32;
                  if (v2 >= v48)
                    goto LABEL_30;
                  v31 = *(_QWORD *)(v47 + 8 * v2);
                  ++v32;
                  if (v31)
                    goto LABEL_27;
                }
              }
              v2 = v32;
            }
          }
        }
LABEL_27:
        v26 = (v31 - 1) & v31;
        v29 = __clz(__rbit64(v31)) + (v2 << 6);
      }
      v33 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v29);
      v34 = *v33;
      v4 = v33[1];
      v35 = *(_BYTE *)(*(_QWORD *)(a1 + 56) + v29);
      swift_bridgeObjectRetain_n();
      v36 = Logger.logObject.getter();
      v37 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v36, v37))
      {
        v5 = swift_slowAlloc();
        v38 = v7;
        v7 = swift_slowAlloc();
        v51[0] = v7;
        *(_DWORD *)v5 = v45;
        swift_bridgeObjectRetain();
        *(_QWORD *)(v5 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v4, v51);
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v5 + 12) = 2080;
        LOBYTE(v50) = v35;
        v39 = String.init<A>(describing:)();
        v4 = v40;
        *(_QWORD *)(v5 + 14) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, v51);
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v36, v37, "Data provider %s wait status: %s", (uint8_t *)v5, 0x16u);
        swift_arrayDestroy();
        v41 = v7;
        LODWORD(v7) = v38;
        a1 = v46;
        MEMORY[0x1C3BBFF64](v41, -1, -1);
        MEMORY[0x1C3BBFF64](v5, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v7 = static DispatchTimeoutResult.== infix(_:_:)() | v7;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in DataProviderManager.waitForPrepare(timeout:)(uint64_t *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = a2[4];
  v7 = *(_QWORD *)(v6 + 96);
  v8 = *(_QWORD *)(v6 + 104);
  swift_bridgeObjectRetain();
  v9 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v36 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v9, v7, v8, isUniquelyReferenced_nonNull_native);
  *a1 = v36;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11 = a2[5];
  v12 = *(_QWORD *)(v11 + 96);
  v13 = *(_QWORD *)(v11 + 104);
  swift_bridgeObjectRetain();
  v14 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  v15 = swift_isUniquelyReferenced_nonNull_native();
  v37 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v14, v12, v13, v15);
  *a1 = v37;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16 = a2[6];
  v17 = *(_QWORD *)(v16 + 96);
  v18 = *(_QWORD *)(v16 + 104);
  swift_bridgeObjectRetain();
  v19 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  v20 = swift_isUniquelyReferenced_nonNull_native();
  v38 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v19, v17, v18, v20);
  *a1 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v21 = a2[7];
  v22 = *(_QWORD *)(v21 + 96);
  v23 = *(_QWORD *)(v21 + 104);
  swift_bridgeObjectRetain();
  v24 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  v25 = swift_isUniquelyReferenced_nonNull_native();
  v39 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, v22, v23, v25);
  *a1 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v26 = a2[3];
  v27 = *(_QWORD *)(v26 + 96);
  v28 = *(_QWORD *)(v26 + 104);
  swift_bridgeObjectRetain();
  v29 = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  v30 = swift_isUniquelyReferenced_nonNull_native();
  v40 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v29, v27, v28, v30);
  *a1 = v40;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v31 = a2[8];
  v32 = *(_QWORD *)(v31 + 96);
  v33 = *(_QWORD *)(v31 + 104);
  swift_bridgeObjectRetain();
  LOBYTE(a3) = specialized AnyDataProvider.waitForPrepare(timeout:)(a3) & 1;
  v34 = swift_isUniquelyReferenced_nonNull_native();
  v41 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a3, v32, v33, v34);
  *a1 = v41;
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3, float a4, float a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t result;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  float *v21;
  char v22;
  uint64_t *v23;
  float *v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;

  v6 = v5;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  result = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v19 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (float *)(v20[7] + 8 * v14);
      *v21 = a4;
      v21[1] = a5;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v23 = (uint64_t *)(v20[6] + 16 * v14);
    *v23 = a1;
    v23[1] = a2;
    v24 = (float *)(v20[7] + 8 * v14);
    *v24 = a4;
    v24[1] = a5;
    v25 = v20[2];
    v26 = __OFADD__(v25, 1);
    v27 = v25 + 1;
    if (!v26)
    {
      v20[2] = v27;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v18 & 1) == (v22 & 1))
  {
    v14 = result;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(char a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  uint64_t *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      *(_BYTE *)(v18[7] + v12) = a1 & 1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v20 = (uint64_t *)(v18[6] + 16 * v12);
    *v20 = a2;
    v20[1] = a3;
    *(_BYTE *)(v18[7] + v12) = a1 & 1;
    v21 = v18[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (!v22)
    {
      v18[2] = v23;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v19 & 1))
  {
    v12 = result;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t result;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  _QWORD *v20;
  uint64_t *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  result = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= result && (a4 & 1) != 0)
  {
LABEL_9:
    v19 = a1 & 1;
    v20 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
      *(_BYTE *)(v20[7] + v12) = v19;
      return result;
    }
    v20[(v12 >> 6) + 8] |= 1 << v12;
    v21 = (uint64_t *)(v20[6] + 16 * v12);
    *v21 = a2;
    v21[1] = a3;
    *(_BYTE *)(v20[7] + v12) = v19;
    v22 = v20[2];
    v23 = __OFADD__(v22, 1);
    v24 = v22 + 1;
    if (!v23)
    {
      v20[2] = v24;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  if (v17 >= result && (a4 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
    goto LABEL_9;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a4 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v18 & 1))
  {
    v12 = result;
    goto LABEL_9;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t result;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  _QWORD *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v6 = v5;
  v12 = *v5;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  v15 = *(_QWORD *)(v12 + 16);
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v18 = v13;
  v19 = *(_QWORD *)(v12 + 24);
  if (v19 >= v17 && (a5 & 1) != 0)
    goto LABEL_7;
  if (v19 >= v17 && (a5 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
    {
LABEL_8:
      v21 = (_QWORD *)(v20[7] + 16 * v14);
      result = swift_bridgeObjectRelease();
      *v21 = a1;
      v21[1] = a2;
      return result;
    }
LABEL_11:
    v20[(v14 >> 6) + 8] |= 1 << v14;
    v25 = (uint64_t *)(v20[6] + 16 * v14);
    *v25 = a3;
    v25[1] = a4;
    v26 = (_QWORD *)(v20[7] + 16 * v14);
    *v26 = a1;
    v26[1] = a2;
    v27 = v20[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v20[2] = v29;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
  v23 = specialized __RawDictionaryStorage.find<A>(_:)(a3, a4);
  if ((v18 & 1) == (v24 & 1))
  {
    v14 = v23;
    v20 = (_QWORD *)*v6;
    if ((v18 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t result;
  unint64_t v24;
  char v25;
  uint64_t v26;

  v4 = (_QWORD **)v3;
  v8 = type metadata accessor for PommesCandidateId();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (_QWORD *)*v3;
  v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  v15 = v12[2];
  v16 = (v13 & 1) == 0;
  v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
  }
  else
  {
    v18 = v13;
    v19 = v12[3];
    if (v19 >= v17 && (a3 & 1) != 0)
    {
LABEL_7:
      v20 = *v4;
      if ((v18 & 1) != 0)
      {
LABEL_8:
        v21 = v20[7];
        v22 = type metadata accessor for PommesBridgeResultCandidateState(0);
        return outlined assign with take of PommesBridgeResultCandidateState(a1, v21 + *(_QWORD *)(*(_QWORD *)(v22 - 8) + 72) * v14);
      }
      goto LABEL_11;
    }
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v25 & 1))
    {
      v14 = v24;
      v20 = *v4;
      if ((v18 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t result;
  unint64_t v21;
  char v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;

  v5 = v4;
  v10 = *v4;
  v12 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v16 = v11;
  v17 = *(_QWORD *)(v10 + 24);
  if (v17 >= v15 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v17 >= v15 && (a4 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
LABEL_7:
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
    {
LABEL_8:
      v19 = v18[7];
      result = swift_release();
      *(_QWORD *)(v19 + 8 * v12) = a1;
      return result;
    }
LABEL_11:
    v18[(v12 >> 6) + 8] |= 1 << v12;
    v23 = (uint64_t *)(v18[6] + 16 * v12);
    *v23 = a2;
    v23[1] = a3;
    *(_QWORD *)(v18[7] + 8 * v12) = a1;
    v24 = v18[2];
    v25 = __OFADD__(v24, 1);
    v26 = v24 + 1;
    if (!v25)
    {
      v18[2] = v26;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v15, a4 & 1);
  v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v16 & 1) == (v22 & 1))
  {
    v12 = v21;
    v18 = (_QWORD *)*v5;
    if ((v16 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

{
  return specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, a2, a3, a4, (void (*)(void))specialized _NativeDictionary.copy(), (void (*)(void))specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:));
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, char a2, char a3)
{
  _QWORD *v3;
  _QWORD *v4;
  char v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t result;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;

  v4 = v3;
  v7 = a2 & 1;
  v8 = *v3;
  v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2 & 1);
  v11 = *(_QWORD *)(v8 + 16);
  v12 = (v9 & 1) == 0;
  result = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v14 = v9;
  v15 = *(_QWORD *)(v8 + 24);
  if (v15 >= result && (a3 & 1) != 0)
    goto LABEL_7;
  if (v15 >= result && (a3 & 1) == 0)
  {
    result = (uint64_t)specialized _NativeDictionary.copy()();
LABEL_7:
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
    {
LABEL_8:
      v17 = v16[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v17 + 8 * v10) = a1;
      return result;
    }
LABEL_11:
    v16[(v10 >> 6) + 8] |= 1 << v10;
    *(_BYTE *)(v16[6] + v10) = v7;
    *(_QWORD *)(v16[7] + 8 * v10) = a1;
    v19 = v16[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (!v20)
    {
      v16[2] = v21;
      return result;
    }
    goto LABEL_14;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, a3 & 1);
  result = specialized __RawDictionaryStorage.find<A>(_:)(v7);
  if ((v14 & 1) == (v18 & 1))
  {
    v10 = result;
    v16 = (_QWORD *)*v4;
    if ((v14 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  uint64_t *v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;

  v9 = v6;
  v14 = *v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];

      *(_QWORD *)(v23 + 8 * v16) = a1;
      return;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v26 = (uint64_t *)(v22[6] + 16 * v16);
    *v26 = a2;
    v26[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v27 = v22[2];
    v28 = __OFADD__(v27, 1);
    v29 = v27 + 1;
    if (!v28)
    {
      v22[2] = v29;
      swift_bridgeObjectRetain();
      return;
    }
    goto LABEL_14;
  }
  a6();
  v24 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) == (v25 & 1))
  {
    v16 = v24;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

uint64_t specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(void), void (*a6)(void))
{
  _QWORD *v6;
  _QWORD *v9;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  _BOOL8 v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  char v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;

  v9 = v6;
  v14 = *v6;
  v16 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  v17 = *(_QWORD *)(v14 + 16);
  v18 = (v15 & 1) == 0;
  v19 = v17 + v18;
  if (__OFADD__(v17, v18))
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v20 = v15;
  v21 = *(_QWORD *)(v14 + 24);
  if (v21 >= v19 && (a4 & 1) != 0)
    goto LABEL_7;
  if (v21 >= v19 && (a4 & 1) == 0)
  {
    a5();
LABEL_7:
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
    {
LABEL_8:
      v23 = v22[7];
      result = swift_bridgeObjectRelease();
      *(_QWORD *)(v23 + 8 * v16) = a1;
      return result;
    }
LABEL_11:
    v22[(v16 >> 6) + 8] |= 1 << v16;
    v27 = (uint64_t *)(v22[6] + 16 * v16);
    *v27 = a2;
    v27[1] = a3;
    *(_QWORD *)(v22[7] + 8 * v16) = a1;
    v28 = v22[2];
    v29 = __OFADD__(v28, 1);
    v30 = v28 + 1;
    if (!v29)
    {
      v22[2] = v30;
      return swift_bridgeObjectRetain();
    }
    goto LABEL_14;
  }
  a6();
  v25 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
  if ((v20 & 1) == (v26 & 1))
  {
    v16 = v25;
    v22 = (_QWORD *)*v9;
    if ((v20 & 1) != 0)
      goto LABEL_8;
    goto LABEL_11;
  }
LABEL_15:
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a5[(result >> 6) + 8] |= 1 << result;
  v5 = (_QWORD *)(a5[6] + 16 * result);
  *v5 = a2;
  v5[1] = a3;
  *(_BYTE *)(a5[7] + result) = a4;
  v6 = a5[2];
  v7 = __OFADD__(v6, 1);
  v8 = v6 + 1;
  if (v7)
    __break(1u);
  else
    a5[2] = v8;
  return result;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, _QWORD *a6)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  a6[(result >> 6) + 8] |= 1 << result;
  v6 = (_QWORD *)(a6[6] + 16 * result);
  *v6 = a2;
  v6[1] = a3;
  v7 = (_QWORD *)(a6[7] + 16 * result);
  *v7 = a4;
  v7[1] = a5;
  v8 = a6[2];
  v9 = __OFADD__(v8, 1);
  v10 = v8 + 1;
  if (v9)
    __break(1u);
  else
    a6[2] = v10;
  return result;
}

uint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  v8 = a4[6];
  v9 = type metadata accessor for PommesCandidateId();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v8 + *(_QWORD *)(*(_QWORD *)(v9 - 8) + 72) * a1, a2, v9);
  v10 = a4[7];
  v11 = type metadata accessor for PommesBridgeResultCandidateState(0);
  result = outlined init with take of PommesBridgeResultCandidateState(a3, v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * a1);
  v13 = a4[2];
  v14 = __OFADD__(v13, 1);
  v15 = v13 + 1;
  if (v14)
    __break(1u);
  else
    a4[2] = v15;
  return result;
}

uint64_t specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *boxed_opaque_existential_1;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, _QWORD, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  id v44;
  void (*v45)(uint64_t);
  void (*v46)(uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  _OWORD v63[2];
  uint64_t v64;
  uint64_t v65[6];

  v61 = a8;
  v58 = a7;
  v51 = a6;
  v55 = a5;
  v52 = a4;
  v54 = a3;
  v53 = a2;
  v50 = a1;
  v59 = a11;
  v60 = a10;
  v56 = a9;
  v57 = a12;
  v62 = a13;
  v48 = a14;
  v49 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v17 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v19 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for DispatchQoS.QoSClass();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v48 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v24);
  v25 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v25);
  v65[3] = a16;
  v65[4] = a17;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v65);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a16 - 8) + 32))(boxed_opaque_existential_1, v48, a16);
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x1E0DEF540], v20);
  static OS_dispatch_queue.global(qos:)();
  v27 = *(void (**)(char *, uint64_t))(v21 + 8);
  v28 = v51;
  v29 = v20;
  v30 = v50;
  v27(v23, v29);
  v31 = *(void (**)(char *, _QWORD, uint64_t))(v17 + 104);
  v32 = v52;
  v31(v19, *MEMORY[0x1E0DEF8D0], v49);
  v33 = v54;
  v34 = v53;
  v35 = v55;
  v36 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(a15 + 112) = 0u;
  *(_OWORD *)(a15 + 128) = 0u;
  *(_OWORD *)(a15 + 144) = 0u;
  *(_QWORD *)(a15 + 160) = 0;
  *(_QWORD *)(a15 + 16) = v36;
  *(_QWORD *)(a15 + 24) = v30;
  *(_QWORD *)(a15 + 32) = v34;
  *(_QWORD *)(a15 + 40) = v33;
  *(_QWORD *)(a15 + 48) = v32;
  *(_QWORD *)(a15 + 56) = v35;
  if (v28)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v37 = v28;
    v38 = v56;
  }
  else
  {
    type metadata accessor for AnalyticsComponentIdGenerator();
    memset(v63, 0, sizeof(v63));
    v64 = 0;
    v39 = swift_allocObject();
    type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil();
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = 0;
    *(_QWORD *)(v40 + 24) = v39;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v38 = v56;
    v37 = specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)((uint64_t)v63, v40, v56);
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v63, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  }
  v42 = v58;
  v41 = v59;
  *(_QWORD *)(a15 + 64) = v37;
  *(_QWORD *)(a15 + 72) = v42;
  v43 = v60;
  *(_QWORD *)(a15 + 80) = v61;
  *(_QWORD *)(a15 + 88) = v38;
  *(_QWORD *)(a15 + 96) = v41;
  *(_QWORD *)(a15 + 104) = v43;
  *(_QWORD *)(a15 + 112) = v57;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v44 = v43;
  swift_release();
  *(_QWORD *)(a15 + 120) = v62;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  outlined init with copy of AppDataProviding((uint64_t)v65, (uint64_t)v63);
  swift_beginAccess();
  outlined assign with take of PommesAppChecking?((uint64_t)v63, a15 + 128);
  swift_endAccess();
  v45 = *(void (**)(uint64_t))(**(_QWORD **)(a15 + 40) + 160);
  swift_retain();
  v45(1);
  swift_release();
  v46 = *(void (**)(uint64_t))(**(_QWORD **)(a15 + 48) + 160);
  swift_retain();
  v46(1);
  swift_release();
  (*(void (**)(uint64_t))(**(_QWORD **)(a15 + 56) + 160))(1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v65);
  return a15;
}

unint64_t lazy protocol witness table accessor for type PegasusError and conformance PegasusError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PegasusError and conformance PegasusError;
  if (!lazy protocol witness table cache variable for type PegasusError and conformance PegasusError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PegasusError, &type metadata for PegasusError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PegasusError and conformance PegasusError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PegasusError and conformance PegasusError;
  if (!lazy protocol witness table cache variable for type PegasusError and conformance PegasusError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PegasusError, &type metadata for PegasusError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PegasusError and conformance PegasusError);
  }
  return result;
}

uint64_t partial apply for closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DataProviderManager.addNavigationAppInfoSlice(to:for:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DataProviderManager.addSiriKitAppInfoSlice(to:for:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #1 in DataProviderManager.waitForPrepare(timeout:)()
{
  uint64_t v0;

  return closure #1 in DataProviderManager.waitForPrepare(timeout:)(*(uint64_t **)(v0 + 16), *(_QWORD **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t sub_1C243ED54(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 248))();
}

uint64_t type metadata accessor for DataProviderManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for DataProviderManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DataProviderManager.appChecking.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of DataProviderManager.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of DataProviderManager.getServiceHelper()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of DataProviderManager.__allocating_init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 288))();
}

uint64_t dispatch thunk of DataProviderManager.prepareForSearchAtSessionStart()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of DataProviderManager.prepareForSearchAtPommesRequestStart()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of DataProviderManager.tearDown()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of DataProviderManager.resolveProfileSlice(to:with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 328))();
}

uint64_t dispatch thunk of DataProviderManager.addAmpStorefront(to:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 336))();
}

uint64_t dispatch thunk of DataProviderManager.addAppInfoSlice(to:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 344))();
}

uint64_t dispatch thunk of DataProviderManager.addNavigationAppInfoSlice(to:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 352))();
}

uint64_t dispatch thunk of DataProviderManager.addSiriKitAppInfoSlice(to:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 360))();
}

uint64_t dispatch thunk of DataProviderManager.addMarketplaceInfo(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 368))();
}

uint64_t dispatch thunk of DataProviderManager.addUIScale(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 376))();
}

uint64_t dispatch thunk of DataProviderManager.addTemperatureUnit(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 384))();
}

uint64_t dispatch thunk of DataProviderManager.addMuxSettings(to:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 392))();
}

uint64_t dispatch thunk of DataProviderManager.userContentAllowed()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 400))();
}

uint64_t dispatch thunk of DataProviderManager.getQueueState()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 408))();
}

uint64_t dispatch thunk of DataProviderManager.addProviderData(to:searchRequest:queryContext:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 416))();
}

uint64_t dispatch thunk of DataProviderManager.addClientExperienceSignals(to:for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 464))();
}

uint64_t dispatch thunk of DataProviderManager.addPairedDevices(to:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 472))();
}

uint64_t outlined assign with take of PommesAppChecking?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesAppChecking?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in AnyDataProvider.waitForPrepare(timeout:)()
{
  return partial apply for closure #1 in AnyDataProvider.waitForPrepare(timeout:)();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h103InformationSearch19DataProviderManagerC19appendProfileSlices33_025996E41686C8D59143D5DC4568B6E8LL_2to10d6API013f1_g4_a9_i62_aR7RequestVSayAG0t1_u1_a1_v1_H5SliceVG_AItFAG0t1_u1_a1_v1_rC5K9VANXEfU0_SayAF0f1_g1_h1_i1_T5SliceVGTf1cn_nTf4ng_n(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(char *, _QWORD);
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  char v24[32];
  uint64_t v25;

  v23 = a2;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v19[1] = v2;
    v25 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v25;
    v22 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v10 = a1 + v22;
    v11 = *(_QWORD *)(v5 + 72);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v21 = v11;
    do
    {
      v20(v7, v10, v4);
      v12 = v23;
      swift_bridgeObjectRetain();
      v13 = v4;
      v14 = (void (*)(char *, _QWORD))Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.modify();
      specialized Array.append<A>(contentsOf:)(v12);
      v14(v24, 0);
      v25 = v9;
      v16 = *(_QWORD *)(v9 + 16);
      v15 = *(_QWORD *)(v9 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v15 > 1, v16 + 1, 1);
        v9 = v25;
      }
      *(_QWORD *)(v9 + 16) = v16 + 1;
      v17 = v21;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v22 + v16 * v21, v7, v13);
      v10 += v17;
      --v8;
      v4 = v13;
    }
    while (v8);
  }
  return v9;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5j175OIegnrzr_TR04_s21a167InformationSearch28PommesBridgeRequestProcessorC25updatePSCParseForFallback33_8DFE86024D401B7CABDD6F200033BF3CLL7prStateSbAA0de15ResultCandidateS0Vz_tF0A8lM27_c1_d1_eF7VAKcfU_Tf3nnnpf_nTf1cn_n(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(_BYTE *, uint64_t);
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE v32[4];
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _BYTE *v40;
  uint64_t v41;
  uint64_t v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v39 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v45 = *(_QWORD *)(v39 - 8);
  v3 = MEMORY[0x1E0C80A78](v39);
  v44 = &v32[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v3);
  v43 = &v32[-v5];
  v6 = type metadata accessor for Siri_Nlu_External_Parser();
  v41 = *(_QWORD *)(v6 - 8);
  v42 = v6;
  MEMORY[0x1E0C80A78](v6);
  v40 = &v32[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for Siri_Nlu_External_UserParse();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = &v32[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x1E0DEE9D8];
  if (v12)
  {
    v46 = v1;
    v49 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12, 0);
    v35 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v14 = a1 + v35;
    v34 = *(_QWORD *)(v9 + 72);
    v33 = *MEMORY[0x1E0D9F100];
    v37 = v9;
    v38 = v8;
    v36 = v11;
    do
    {
      v15 = v40;
      Siri_Nlu_External_UserParse.parser.getter();
      v16 = v43;
      Siri_Nlu_External_Parser.parserID.getter();
      (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v15, v42);
      v18 = v44;
      v17 = v45;
      v19 = v39;
      (*(void (**)(_BYTE *, _QWORD, uint64_t))(v45 + 104))(v44, v33, v39);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v21 = v47;
      v20 = v48;
      v22 = *(void (**)(_BYTE *, uint64_t))(v17 + 8);
      v22(v18, v19);
      v23 = ((uint64_t (*)(_BYTE *, uint64_t))v22)(v16, v19);
      if (v20 == v21)
      {
        MEMORY[0x1E0C80A78](v23);
        *(_QWORD *)&v32[-16] = v14;
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F2E0]);
        v24 = v36;
        v25 = v38;
        v26 = v46;
        static Message.with(_:)();
        v46 = v26;
        v27 = v37;
      }
      else
      {
        v24 = v36;
        v27 = v37;
        v25 = v38;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v37 + 16))(v36, v14, v38);
      }
      v13 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v13 + 16) + 1, 1);
        v13 = v49;
      }
      v29 = *(_QWORD *)(v13 + 16);
      v28 = *(_QWORD *)(v13 + 24);
      if (v29 >= v28 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v28 > 1, v29 + 1, 1);
        v13 = v49;
      }
      *(_QWORD *)(v13 + 16) = v29 + 1;
      v30 = v34;
      (*(void (**)(unint64_t, _BYTE *, uint64_t))(v27 + 32))(v13 + v35 + v29 * v34, v24, v25);
      v49 = v13;
      v14 += v30;
      --v12;
    }
    while (v12);
  }
  return v13;
}

uint64_t PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v19;

  swift_allocObject();
  v19 = specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  swift_release();
  swift_release();
  return v19;
}

uint64_t PommesBridgeResultCandidateState.parseState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PommesSearchRequest(v1, a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
}

uint64_t PommesBridgeResultCandidateState.userId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 20);
  v4 = type metadata accessor for UserID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PommesBridgeResultCandidateState.userId.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 20);
  v4 = type metadata accessor for UserID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
}

uint64_t (*PommesBridgeResultCandidateState.userId.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.voiceIdClassification.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 24));
}

uint64_t PommesBridgeResultCandidateState.voiceIdClassification.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(_QWORD *)(v1 + *(int *)(result + 24)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.voiceIdClassification.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

void *PommesBridgeResultCandidateState.speechPackage.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 28));
  v2 = v1;
  return v1;
}

uint64_t PommesBridgeResultCandidateState.utterance.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PommesBridgeResultCandidateState.started.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 36));
}

uint64_t PommesBridgeResultCandidateState.started.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(_BYTE *)(v1 + *(int *)(result + 36)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.started.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.finished.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 40));
}

uint64_t PommesBridgeResultCandidateState.finished.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(_BYTE *)(v1 + *(int *)(result + 40)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.finished.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.selected.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 44));
}

uint64_t PommesBridgeResultCandidateState.selected.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(_BYTE *)(v1 + *(int *)(result + 44)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.selected.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.fallback.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 48));
}

uint64_t PommesBridgeResultCandidateState.fallback.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(_BYTE *)(v1 + *(int *)(result + 48)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.fallback.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.isGestureBased.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 52));
}

uint64_t PommesBridgeResultCandidateState.isGestureBased.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = type metadata accessor for PommesBridgeResultCandidateState(0);
  *(_BYTE *)(v1 + *(int *)(result + 52)) = a1;
  return result;
}

uint64_t (*PommesBridgeResultCandidateState.isGestureBased.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.eagerSearchInfo.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesBridgeResultCandidateState(0);
  return outlined init with copy of MediaUserStateCenter?(v1 + *(int *)(v3 + 56), a1, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t PommesBridgeResultCandidateState.eagerSearchInfo.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesBridgeResultCandidateState(0);
  return outlined assign with take of MediaUserStateCenter?(a1, v1 + *(int *)(v3 + 56), &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t (*PommesBridgeResultCandidateState.eagerSearchInfo.modify())()
{
  type metadata accessor for PommesBridgeResultCandidateState(0);
  return destructiveProjectEnumData for SearchError;
}

uint64_t PommesBridgeResultCandidateState.pommesCandidateId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;

  v2 = v1;
  v4 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v2, (uint64_t)v6, v7);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      v36 = *(_OWORD *)v6;
      v9 = *((_QWORD *)v6 + 2);
      v10 = *((_QWORD *)v6 + 3);
      v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v12 = (uint64_t)&v6[v11[16]];
      v13 = (uint64_t)&v6[v11[24]];
      v14 = (uint64_t)&v6[v11[28]];
      *(_OWORD *)a1 = v36;
      *(_QWORD *)(a1 + 16) = v9;
      *(_QWORD *)(a1 + 24) = v10;
      v15 = *MEMORY[0x1E0D988D0];
      v16 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 104))(a1, v15, v16);
      outlined destroy of MediaUserStateCenter?(v14, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?(v13, &demangling cache variable for type metadata for SiriUserInput?);
      v17 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
    }
    else
    {
      v24 = *(void **)v6;
      swift_bridgeObjectRelease();
      v12 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                                + 64)];
      v25 = objc_msgSend(v24, sel_refId);
      if (v25)
      {
        v26 = v25;
        v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v29 = v28;

        *(_QWORD *)a1 = v27;
        *(_QWORD *)(a1 + 8) = v29;
      }
      else
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v30 = type metadata accessor for Logger();
        __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
        v31 = Logger.logObject.getter();
        v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v33 = 0;
          _os_log_impl(&dword_1C2356000, v31, v32, "No refId associated with SARDRunPOMMESRequest. Using empty string for PommesCandidateId. This should never happened.", v33, 2u);
          MEMORY[0x1C3BBFF64](v33, -1, -1);
        }

        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0xE000000000000000;
      }
      v34 = *MEMORY[0x1E0D988C0];
      v35 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 104))(a1, v34, v35);
      v17 = (uint64_t *)&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    return outlined destroy of MediaUserStateCenter?(v12, v17);
  }
  else
  {
    v18 = *(_QWORD *)v6;
    v19 = *((_QWORD *)v6 + 1);
    v20 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool))
                              + 48)];
    *(_QWORD *)a1 = v18;
    *(_QWORD *)(a1 + 8) = v19;
    v21 = *MEMORY[0x1E0D988C8];
    v22 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 104))(a1, v21, v22);
    return outlined destroy of PommesSearchRequest(v20, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesBridgeResultCandidateState.userParses.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  void *v23;
  char *v24;
  uint64_t v26;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v26 - v6;
  v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v8);
  v10 = (uint64_t *)((char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      outlined init with take of PommesSearchReason?((uint64_t)&v13[v16[16]], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v17 = type metadata accessor for TCUMappedNLResponse();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v17) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v19 = 0;
      }
      else
      {
        v23 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v17);
        v19 = NLParseResponse.userParses.getter();

        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
      v24 = &v13[v16[24]];
      outlined destroy of MediaUserStateCenter?((uint64_t)&v13[v16[28]], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      v22 = &demangling cache variable for type metadata for SiriUserInput?;
      v21 = (uint64_t)v24;
    }
    else
    {

      v19 = *((_QWORD *)v13 + 1);
      v21 = (uint64_t)&v13[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                                 + 64)];
      v22 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    outlined destroy of MediaUserStateCenter?(v21, v22);
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)&v13[*(int *)(v20 + 48)], (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v19 = *v10;
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  return v19;
}

uint64_t PommesBridgeResultCandidateState.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  id *v15;
  uint64_t (*v16)(_QWORD);
  int EnumCaseMultiPayload;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v27 - v8;
  v10 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (id *)((char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest(v2, (uint64_t)v15, v16);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v18 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      outlined init with take of PommesSearchReason?((uint64_t)v15 + v18[16], (uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v19 = type metadata accessor for TCUMappedNLResponse();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v7, 1, v19) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v21 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(a1, 1, 1, v21);
      }
      else
      {
        v25 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v20 + 8))(v7, v19);
        NLParseResponse.fallbackParse.getter();

        outlined destroy of MediaUserStateCenter?((uint64_t)v9, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
      v26 = (uint64_t)v15 + v18[24];
      outlined destroy of MediaUserStateCenter?((uint64_t)v15 + v18[28], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      return outlined destroy of MediaUserStateCenter?(v26, &demangling cache variable for type metadata for SiriUserInput?);
    }
    else
    {

      swift_bridgeObjectRelease();
      v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
      return outlined init with take of PommesSearchReason?((uint64_t)v15 + *(int *)(v24 + 64), a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v15 + *(int *)(v22 + 48), (uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v12[*(int *)(v10 + 20)], a1, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    return outlined destroy of PommesSearchRequest((uint64_t)v12, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
}

uint64_t PommesBridgeResultCandidateState.responseVariantResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  uint64_t (*v14)(_QWORD);
  int EnumCaseMultiPayload;
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  id v22;
  void *v23;
  void *v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v29;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v29 - v6;
  v8 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (void **)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v13, v14);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v16 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      outlined init with take of PommesSearchReason?((uint64_t)v13 + v16[16], (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v7, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v17 = type metadata accessor for TCUMappedNLResponse();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v5, 1, v17) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v19 = 0;
        v7 = v5;
      }
      else
      {
        v24 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(char *, uint64_t))(v18 + 8))(v5, v17);
        v19 = NLParseResponse.responseVariantResult.getter();

      }
      outlined destroy of MediaUserStateCenter?((uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v25 = (char *)v13 + v16[24];
      outlined destroy of MediaUserStateCenter?((uint64_t)v13 + v16[28], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      v26 = &demangling cache variable for type metadata for SiriUserInput?;
      v27 = (uint64_t)v25;
    }
    else
    {
      v21 = *v13;
      swift_bridgeObjectRelease();
      v22 = objc_msgSend(v21, sel_responseVariantResult);
      if (v22)
      {
        v23 = v22;
        v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();

      }
      else
      {

        v19 = 0;
      }
      v27 = (uint64_t)v13
          + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      v26 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    }
    outlined destroy of MediaUserStateCenter?(v27, v26);
  }
  else
  {
    swift_bridgeObjectRelease();
    v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v13 + *(int *)(v20 + 48), (uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v19 = *(_QWORD *)&v10[*(int *)(v8 + 24)];
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v10, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  return v19;
}

uint64_t PommesBridgeResultCandidateState.tcuMappedResponse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t (*v7)(_QWORD);
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14;

  v2 = v1;
  v4 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v2, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v9 = (uint64_t)&v6[v8[16]];
    v10 = (uint64_t)&v6[v8[24]];
    v11 = (uint64_t)&v6[v8[28]];
    outlined init with take of PommesSearchReason?(v9, a1, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    outlined destroy of MediaUserStateCenter?(v11, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    return outlined destroy of MediaUserStateCenter?(v10, &demangling cache variable for type metadata for SiriUserInput?);
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    v13 = type metadata accessor for TCUMappedNLResponse();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a1, 1, 1, v13);
  }
}

uint64_t PommesBridgeResultCandidateState.tcuId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v3, v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_bridgeObjectRelease();
    v5 = *((_QWORD *)v3 + 2);
    v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v7 = (uint64_t)&v3[v6[16]];
    v8 = (uint64_t)&v3[v6[24]];
    outlined destroy of MediaUserStateCenter?((uint64_t)&v3[v6[28]], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v8, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v7, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v3, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    return 0;
  }
  return v5;
}

uint64_t PommesBridgeResultCandidateState.requestType.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void **v4;
  uint64_t (*v5)(_QWORD);
  void *v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v12;

  v1 = v0;
  v2 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (void **)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v4, v5);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of PommesSearchRequest((uint64_t)v4, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    return 0;
  }
  v6 = *v4;
  swift_bridgeObjectRelease();
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
  outlined destroy of MediaUserStateCenter?((uint64_t)v4 + *(int *)(v7 + 64), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v8 = objc_msgSend(v6, sel_requestType);
  if (!v8)
  {

    return 0;
  }
  v9 = v8;
  v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v10;
}

uint64_t PommesBridgeResultCandidateState.setRunPommesRequest(userParses:fallbackParse:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t (*v15)(_QWORD);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  void (*v27)(char *, uint64_t);
  _QWORD v28[3];
  uint64_t v29;

  v5 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)v28 - v10;
  v12 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v12);
  v14 = (_QWORD *)((char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest((uint64_t)v2, (uint64_t)v14, v15);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    v16 = *v14;
    swift_bridgeObjectRelease();
    v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
    outlined destroy of MediaUserStateCenter?((uint64_t)v14 + *(int *)(v17 + 64), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    outlined destroy of PommesSearchRequest((uint64_t)v2, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    v18 = (uint64_t)v2 + *(int *)(v17 + 64);
    *v2 = v16;
    v2[1] = a1;
    outlined init with copy of MediaUserStateCenter?(a2, v18, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    swift_storeEnumTagMultiPayload();
    return swift_bridgeObjectRetain();
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v11);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = swift_slowAlloc();
      v29 = v24;
      *(_DWORD *)v23 = 136315138;
      v28[1] = v23 + 4;
      v25 = PommesCandidateId.description.getter();
      v28[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v27 = *(void (**)(char *, uint64_t))(v6 + 8);
      v27(v9, v5);
      _os_log_impl(&dword_1C2356000, v21, v22, "Attempting to set user parses while not on the runPommesRequest state path for %s", v23, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v24, -1, -1);
      MEMORY[0x1C3BBFF64](v23, -1, -1);

    }
    else
    {

      v27 = *(void (**)(char *, uint64_t))(v6 + 8);
      v27(v9, v5);
    }
    return ((uint64_t (*)(char *, uint64_t))v27)(v11, v5);
  }
}

uint64_t PommesBridgeResultCandidateState.setParseResponse(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  int *v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  void (*v36)(char *, uint64_t);
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v40 = a1;
  v2 = type metadata accessor for PommesCandidateId();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v37 - v7;
  v9 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v39 = *(_OWORD *)v11;
    v18 = *((_QWORD *)v11 + 3);
    v38 = *((_QWORD *)v11 + 2);
    v19 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v20 = (uint64_t)&v11[v19[16]];
    v21 = v11[v19[20]];
    v22 = (uint64_t)&v11[v19[28]];
    outlined init with take of PommesSearchReason?((uint64_t)&v11[v19[24]], (uint64_t)v17, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?(v22, (uint64_t)v14, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v20, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    outlined destroy of PommesSearchRequest(v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    v23 = v1 + v19[16];
    v24 = v19[20];
    v25 = v1 + v19[24];
    v26 = v1 + v19[28];
    *(_OWORD *)v1 = v39;
    *(_QWORD *)(v1 + 16) = v38;
    *(_QWORD *)(v1 + 24) = v18;
    outlined init with copy of MediaUserStateCenter?(v40, v23, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    *(_BYTE *)(v1 + v24) = v21;
    outlined init with take of PommesSearchReason?((uint64_t)v17, v25, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?((uint64_t)v14, v26, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v8);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    v29 = v2;
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v40 = v29;
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v42 = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = PommesCandidateId.description.getter();
      v41 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v36 = *(void (**)(char *, uint64_t))(v3 + 8);
      v29 = v40;
      v36(v6, v40);
      _os_log_impl(&dword_1C2356000, v30, v31, "Attempting to set TCU-mapped user parses while not on the TRP state path for %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v33, -1, -1);
      MEMORY[0x1C3BBFF64](v32, -1, -1);

    }
    else
    {

      v36 = *(void (**)(char *, uint64_t))(v3 + 8);
      v36(v6, v29);
    }
    return ((uint64_t (*)(char *, uint64_t))v36)(v8, v29);
  }
}

Swift::Void __swiftcall PommesBridgeResultCandidateState.setHasTTResponse(_:)(Swift::Bool a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t v40;
  _BOOL4 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v41 = a1;
  *(_QWORD *)&v42 = type metadata accessor for PommesCandidateId();
  v2 = *(_QWORD *)(v42 - 8);
  v3 = MEMORY[0x1E0C80A78](v42);
  v5 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v40 - v6;
  v8 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v42 = *(_OWORD *)v10;
    v20 = *((_QWORD *)v10 + 2);
    v40 = *((_QWORD *)v10 + 3);
    v21 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v22 = (uint64_t)&v10[v21[24]];
    v23 = (uint64_t)&v10[v21[28]];
    outlined init with take of PommesSearchReason?((uint64_t)&v10[v21[16]], (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    outlined init with take of PommesSearchReason?(v22, (uint64_t)v16, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?(v23, (uint64_t)v13, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of PommesSearchRequest(v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    v24 = v1 + v21[16];
    v25 = v21[20];
    v26 = v1 + v21[24];
    v27 = v1 + v21[28];
    *(_OWORD *)v1 = v42;
    v28 = v40;
    *(_QWORD *)(v1 + 16) = v20;
    *(_QWORD *)(v1 + 24) = v28;
    outlined init with take of PommesSearchReason?((uint64_t)v19, v24, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    *(_BYTE *)(v1 + v25) = v41;
    outlined init with take of PommesSearchReason?((uint64_t)v16, v26, &demangling cache variable for type metadata for SiriUserInput?);
    outlined init with take of PommesSearchReason?((uint64_t)v13, v27, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v7);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v30 = v42;
    (*(void (**)(char *, char *, _QWORD))(v2 + 16))(v5, v7, v42);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      v44 = v34;
      *(_DWORD *)v33 = 136315138;
      v35 = PommesCandidateId.description.getter();
      v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v36, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37 = *(void (**)(char *, uint64_t))(v2 + 8);
      v38 = v42;
      v37(v5, v42);
      _os_log_impl(&dword_1C2356000, v31, v32, "Attempting to set hasTTResponse while not on the TRP state path for %s", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v34, -1, -1);
      MEMORY[0x1C3BBFF64](v33, -1, -1);

      v37(v7, v38);
    }
    else
    {

      v39 = *(void (**)(char *, uint64_t))(v2 + 8);
      v39(v5, v30);
      v39(v7, v30);
    }
  }
}

uint64_t PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, unsigned __int8 a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13, uint64_t a14)
{
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  int v50;

  v49 = a7;
  v50 = a8;
  v46 = a5;
  v47 = a6;
  v43 = a3;
  v44 = a4;
  v48 = a11;
  v45 = a10;
  v42 = a12;
  v41 = a13;
  v17 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v17);
  v19 = (uint64_t *)((char *)&v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v40);
  v24 = (uint64_t *)((char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  *(_BYTE *)(a9 + v25[13]) = 0;
  v26 = a9 + v25[14];
  v27 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v26, 1, 1, v27);
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  v29 = (uint64_t)v24 + *(int *)(v28 + 48);
  v39 = *(int *)(v28 + 64);
  *v24 = a1;
  v24[1] = a2;
  outlined init with copy of MediaUserStateCenter?(a14, (uint64_t)v22, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v30 = (uint64_t)v19 + *(int *)(v17 + 20);
  v31 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(v30, 1, 1, v31);
  v32 = (_QWORD *)((char *)v19 + *(int *)(v17 + 24));
  *v32 = 0;
  v32[1] = 0;
  *v19 = v41;
  outlined assign with take of MediaUserStateCenter?((uint64_t)v22, v30, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  swift_bridgeObjectRelease();
  *v32 = 0;
  v32[1] = 0;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v19, v29, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  outlined destroy of MediaUserStateCenter?(a14, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  *((_BYTE *)v24 + v39) = v42;
  swift_storeEnumTagMultiPayload();
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v24, a9, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  v33 = a9 + v25[5];
  v34 = type metadata accessor for UserID();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 32))(v33, v43, v34);
  *(_QWORD *)(a9 + v25[7]) = v44;
  v36 = (_QWORD *)(a9 + v25[8]);
  v37 = v47;
  *v36 = v46;
  v36[1] = v37;
  *(_BYTE *)(a9 + v25[9]) = v49;
  *(_BYTE *)(a9 + v25[10]) = v50;
  *(_BYTE *)(a9 + v25[11]) = v45;
  *(_BYTE *)(a9 + v25[12]) = v48;
  *(_QWORD *)(a9 + v25[6]) = 0;
  return result;
}

uint64_t PommesBridgeResultCandidateState.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GestureInput();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = a1;
  v17 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v28 = v18;
  v29 = v17;

  v19 = v16;
  UserIdAwareResultCandidateMessageBase.userId.getter();

  v20 = GestureBasedResultCandidateMessage.gesture.getter();
  v21 = MEMORY[0x1C3BBDB64](v20);
  v23 = v22;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if (!v23)
  {
    v21 = 0;
    v23 = 0xE000000000000000;
  }
  v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v5, 1, 1, v24);
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v29, v28, (uint64_t)v12, 0, v21, v23, 0, 0, (uint64_t)v15, 0, 0, 0, MEMORY[0x1E0DEE9D8], (uint64_t)v5);

  v25 = v30;
  result = outlined init with take of PerformanceUtil.Ticket((uint64_t)v15, v30, type metadata accessor for PommesBridgeResultCandidateState);
  *(_BYTE *)(v25 + *(int *)(v13 + 52)) = 1;
  return result;
}

uint64_t PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, _QWORD *a9@<X8>, char a10, char a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  int *v21;
  char *v22;
  uint64_t v23;
  int *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t result;
  _QWORD *v32;

  v21 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  *((_BYTE *)a9 + v21[13]) = 0;
  v22 = (char *)a9 + v21[14];
  v23 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v22, 1, 1, v23);
  v24 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  v25 = (uint64_t)a9 + v24[16];
  v26 = v24[20];
  v27 = (uint64_t)a9 + v24[24];
  v28 = (uint64_t)a9 + v24[28];
  *a9 = a1;
  a9[1] = a2;
  a9[2] = a3;
  a9[3] = a4;
  outlined init with take of PommesSearchReason?(a15, v25, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  *((_BYTE *)a9 + v26) = a14;
  outlined init with take of PommesSearchReason?(a16, v27, &demangling cache variable for type metadata for SiriUserInput?);
  outlined init with take of PommesSearchReason?(a17, v28, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v29 = (char *)a9 + v21[5];
  v30 = type metadata accessor for UserID();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 32))(v29, a5, v30);
  *(_QWORD *)((char *)a9 + v21[7]) = a6;
  v32 = (_QWORD *)((char *)a9 + v21[8]);
  *v32 = a7;
  v32[1] = a8;
  *((_BYTE *)a9 + v21[9]) = a10;
  *((_BYTE *)a9 + v21[10]) = a11;
  *((_BYTE *)a9 + v21[11]) = a12;
  *((_BYTE *)a9 + v21[12]) = a13;
  *(_QWORD *)((char *)a9 + v21[6]) = 0;
  return result;
}

uint64_t PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  id v25;
  void *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;

  v37 = a5;
  v38 = a6;
  v35 = a3;
  v36 = a4;
  v39 = a7;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  v13 = *((_QWORD *)v12 - 1);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)((char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *((_BYTE *)v16 + *(int *)(v14 + 52)) = 0;
  v17 = (char *)v16 + *(int *)(v14 + 56);
  v18 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
  v19 = closure #1 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(a1);
  closure #2 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(a1, (uint64_t)v11);
  v20 = (uint64_t)v16
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
               + 64);
  *v16 = a1;
  v16[1] = v19;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v11, v20, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  v21 = (char *)v16 + v12[5];
  v22 = type metadata accessor for UserID();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v21, a2, v22);
  v24 = a1;
  v25 = objc_msgSend(v24, sel_recognition);
  if (v25)
  {
    v26 = v25;
    v27 = SASRecognition.toAFSpeechPackage(utteranceStart:processedAudioDuration:isFinal:)();

  }
  else
  {
    v27 = 0;
  }
  *(_QWORD *)((char *)v16 + v12[7]) = v27;
  v28 = closure #3 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(v24);
  v30 = v29;

  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a2, v22);
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v31 = (_QWORD *)((char *)v16 + v12[8]);
  *v31 = v28;
  v31[1] = v30;
  *((_BYTE *)v16 + v12[9]) = v35 & 1;
  *((_BYTE *)v16 + v12[10]) = v36 & 1;
  *((_BYTE *)v16 + v12[11]) = v37 & 1;
  *((_BYTE *)v16 + v12[12]) = v38 & 1;
  *(_QWORD *)((char *)v16 + v12[6]) = 0;
  v32 = v39;
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v16, v39, type metadata accessor for PommesBridgeResultCandidateState);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(v13 + 56))(v32, 0, 1, v12);
}

uint64_t closure #1 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  _QWORD v18[9];

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v2);
  v18[8] = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserParse?);
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  v6 = MEMORY[0x1E0C80A78](v5);
  v18[7] = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v18[5] = (char *)v18 - v8;
  v9 = objc_msgSend(a1, sel_nlUserParses);
  if (v9)
  {
    v10 = v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v12 = v11;

    __asm { BR              X10 }
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2356000, v14, v15, "nlUserParses from SARDRunPOMMESRequest are nil", v16, 2u);
    MEMORY[0x1C3BBFF64](v16, -1, -1);
  }

  return MEMORY[0x1E0DEE9D8];
}

uint64_t closure #2 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v4);
  v5 = objc_msgSend(a1, sel_nlFallbackParse);
  if (v5)
  {
    v6 = v5;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    __asm { BR              X10 }
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1C2356000, v10, v11, "nlFallbackParse from SARDRunPOMMESRequest is nil", v12, 2u);
    MEMORY[0x1C3BBFF64](v12, -1, -1);
  }

  v13 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a2, 1, 1, v13);
}

uint64_t closure #3 in PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(void *a1)
{
  id v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v1 = objc_msgSend(a1, sel_utterance);
  if (v1)
  {
    v2 = v1;
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v3 = 0x3E6C696E3CLL;
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1C2356000, v5, v6, "No utterance provided by SARDRunPOMMESRequest. Using <nil>.", v7, 2u);
      MEMORY[0x1C3BBFF64](v7, -1, -1);
    }

  }
  return v3;
}

const char *PommesBridgeRequestProcessor.nilUtterance.unsafeMutableAddressor()
{
  return "<nil>";
}

uint64_t (*PommesBridgeRequestProcessor.isRequestFinished.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t PommesBridgeRequestProcessor.pommesStateHolder.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + direct field offset for PommesBridgeRequestProcessor.pommesStateHolder);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t PommesBridgeRequestProcessor.sessionState.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for PommesBridgeRequestProcessor.sessionState;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return swift_endAccess();
}

uint64_t (*PommesBridgeRequestProcessor.sessionState.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridgeRequestProcessor.isCandidateRequest.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest);
  swift_beginAccess();
  return *v1;
}

void *PommesBridgeRequestProcessor.PommesParserId.unsafeMutableAddressor()
{
  return &static PommesBridgeRequestProcessor.PommesParserId;
}

unint64_t static PommesBridgeRequestProcessor.PommesParserId.getter()
{
  return 0xD000000000000010;
}

uint64_t static PommesBridgeRequestProcessor.nilUtterance.getter()
{
  return 0x3E6C696E3CLL;
}

uint64_t key path setter for PommesBridgeRequestProcessor.timeout : PommesBridgeRequestProcessor(uint64_t a1, _QWORD **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for DispatchTimeInterval();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return (*(uint64_t (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 248))(v6);
}

uint64_t PommesBridgeRequestProcessor.timeout.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for PommesBridgeRequestProcessor.timeout;
  swift_beginAccess();
  v4 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PommesBridgeRequestProcessor.timeout.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + direct field offset for PommesBridgeRequestProcessor.timeout;
  swift_beginAccess();
  v4 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(v3, a1, v4);
  return swift_endAccess();
}

uint64_t (*PommesBridgeRequestProcessor.timeout.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v17;

  v17 = specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17);
  swift_release();
  swift_release();
  return v17;
}

uint64_t static PommesBridgeRequestProcessor.configuredTimeout(isServerFallbackDisabled:)@<X0>(char a1@<W0>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  id v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v5 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v6 = objc_msgSend(v4, sel_initWithSuiteName_, v5);

  if (v6
    && (v7 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000001BLL, 0x80000001C25063B0),
        v8 = objc_msgSend(v6, sel_integerForKey_, v7),
        v7,
        v6,
        v8))
  {
    *a2 = (uint64_t)v8;
    v9 = (unsigned int *)MEMORY[0x1E0DEF490];
  }
  else
  {
    v10 = 5;
    if ((a1 & 1) != 0)
      v10 = 8;
    *a2 = v10;
    v9 = (unsigned int *)MEMORY[0x1E0DEF4A0];
  }
  v11 = *v9;
  v12 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a2, v11, v12);
}

uint64_t PommesBridgeRequestProcessor.handleStartRequestMessage(_:location:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t result;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE v41[4];
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _BYTE *v54;
  uint64_t v55;
  uint64_t v56;

  v1 = v0;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v2);
  v53 = &v41[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for UUID();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v54 = &v41[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v8 = &v41[-v7];
  v9 = type metadata accessor for InputOrigin();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = &v41[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v13 = *(_QWORD *)((char *)v0 + direct field offset for PommesBridgeRequestProcessor.pommesSearch);
  v14 = RequestMessageBase.requestId.getter();
  (*(void (**)(uint64_t))(*(_QWORD *)v13 + 304))(v14);
  swift_bridgeObjectRelease();
  StartRequestMessageBase.inputOrigin.getter();
  v15 = InputOrigin.aceInputOrigin.getter();
  v17 = v16;
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v12, v9);
  v18 = (_QWORD *)((char *)v1 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin);
  *v18 = v15;
  v18[1] = v17;
  swift_bridgeObjectRelease();
  result = StartRequestMessageBase.optionalRequestContextData.getter();
  if (result)
  {
    v20 = (void *)result;
    v21 = MessageBase.assistantId.getter();
    v51 = v22;
    v52 = v21;
    SessionMessageBase.sessionId.getter();
    v23 = RequestMessageBase.requestId.getter();
    v49 = v24;
    v50 = v23;
    v25 = (uint64_t)v54;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v55 + 16))(v54, v8, v56);
    v26 = RequestContextData.audioSource.getter();
    v47 = v27;
    v48 = v26;
    v28 = RequestContextData.audioDestination.getter();
    v45 = v29;
    v46 = v28;
    v30 = RequestContextData.responseMode.getter();
    v43 = v31;
    v44 = v30;
    v42 = RequestContextData.isEyesFree.getter();
    v32 = RequestContextData.isVoiceTriggerEnabled.getter();
    v33 = RequestContextData.isTextToSpeechEnabled.getter();
    v34 = RequestContextData.isTriggerlessFollowup.getter();
    v35 = RequestContextData.bargeInModes.getter();
    v36 = (uint64_t)v53;
    RequestContextData.approximatePreviousTTSInterval.getter();
    v37 = RequestContextData.deviceRestrictions.getter();
    type metadata accessor for PommesRequestContext();
    swift_allocObject();
    v38 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v52, v51, v25, v50, v49, v48, v47, v46, v45, v44, v43, v42 & 1, v32 & 1, v33 & 1, 0, v34 & 1, v35, v36, v37);
    (*(void (**)(_BYTE *, uint64_t))(v55 + 8))(v8, v56);
    *(_QWORD *)((char *)v1 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext) = v38;
    swift_retain();
    v39 = swift_release();
    v40 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 120))(v39);
    specialized Sequence.forEach(_:)(v40, (void (*)(char *, uint64_t))partial apply for closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:));

    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:)(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;

  v5 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *a3 + 448))(a2);
  if ((result & 1) != 0)
  {
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v8);
    (*(void (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + *a3 + 456))(v8);
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t PommesBridgeRequestProcessor.handleRunPommesRequest(command:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  NSObject *v24;
  os_log_type_t v25;
  _BOOL4 v26;
  uint8_t *v27;
  _QWORD *v28;
  id v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  id v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  void (*v57)(uint64_t *, _QWORD);
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t *v78;
  _QWORD *v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87[5];

  v2 = type metadata accessor for PommesCandidateId();
  v76 = *(_QWORD *)(v2 - 8);
  v77 = v2;
  v3 = MEMORY[0x1E0C80A78](v2);
  v72 = (char *)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v78 = (uint64_t *)((char *)&v70 - v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v71 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v70 - v9;
  v11 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v73 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v70 - v15;
  v17 = type metadata accessor for UserID();
  v83 = *(_QWORD *)(v17 - 8);
  v84 = v17;
  v18 = MEMORY[0x1E0C80A78](v17);
  v81 = (char *)&v70 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v85 = (char *)&v70 - v20;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v21 = type metadata accessor for Logger();
  v22 = __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
  v23 = a1;
  v80 = v22;
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  v26 = os_log_type_enabled(v24, v25);
  v82 = v10;
  if (v26)
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = (_QWORD *)swift_slowAlloc();
    v74 = v12;
    v75 = v11;
    *(_DWORD *)v27 = 138412290;
    v87[0] = (uint64_t)v23;
    v29 = v23;
    v12 = v74;
    v11 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v28 = v23;

    _os_log_impl(&dword_1C2356000, v24, v25, "PommesBridgeRequestProcessor received SARDRunPOMMESRequest: %@", v27, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v28, -1, -1);
    MEMORY[0x1C3BBFF64](v27, -1, -1);

  }
  else
  {

  }
  v30 = objc_msgSend(v23, sel_userId);
  if (v30)
  {
    v31 = v30;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UserID.init(sharedUserId:)();
  }
  else
  {
    static UserID.defaultUserId.getter();
  }
  v32 = (uint64_t)v81;
  (*(void (**)(char *, char *, uint64_t))(v83 + 16))(v81, v85, v84);
  v33 = v23;
  v34 = (uint64_t)v82;
  PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)(v33, v32, 0, 0, 0, 0, (uint64_t)v82);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v34, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1C2356000, v35, v36, "Not handling SARDRunPOMMESRequest because unable to create PommesBridgeResultCandidateState", v37, 2u);
      MEMORY[0x1C3BBFF64](v37, -1, -1);
    }

  }
  else
  {
    outlined init with take of PerformanceUtil.Ticket(v34, (uint64_t)v16, type metadata accessor for PommesBridgeResultCandidateState);
    v38 = objc_msgSend(v33, sel_refId);
    if (v38)
    {
      v39 = v38;
      v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v42 = v41;

      v74 = v12;
      v43 = v77;
      v44 = v78;
      *v78 = v40;
      v44[1] = v42;
      v45 = *MEMORY[0x1E0D988C0];
      v75 = v11;
      v46 = v76;
      (*(void (**)(uint64_t *, uint64_t, uint64_t))(v76 + 104))(v44, v45, v43);
      v47 = v79;
      v48 = *(_QWORD *)((char *)v79 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
      v49 = RequestProcessorBase.requestId.getter();
      v51 = v50;
      v52 = RequestProcessorBase.rootLevelRequestId.getter();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v48 + 128))(v44, v49, v51, v52, v53);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v54 = (uint64_t)v72;
      (*(void (**)(char *, uint64_t *, uint64_t))(v46 + 16))(v72, v44, v43);
      v55 = v71;
      outlined init with copy of PommesSearchRequest((uint64_t)v16, v71, type metadata accessor for PommesBridgeResultCandidateState);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v74 + 56))(v55, 0, 1, v75);
      v56 = (uint64_t)v73;
      v57 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                         + *v47
                                                                                         + 136))(v87);
      specialized Dictionary.subscript.setter(v55, v54);
      v57(v87, 0);
      v82 = v16;
      outlined init with copy of PommesSearchRequest((uint64_t)v16, v56, type metadata accessor for PommesBridgeResultCandidateState);
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc();
        v61 = swift_slowAlloc();
        v87[0] = v61;
        *(_DWORD *)v60 = 136315138;
        v62 = PommesBridgeResultCandidateState.description.getter();
        v86 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v87);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of PommesSearchRequest(v56, type metadata accessor for PommesBridgeResultCandidateState);
        _os_log_impl(&dword_1C2356000, v58, v59, "Created %s", v60, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v61, -1, -1);
        MEMORY[0x1C3BBFF64](v60, -1, -1);
      }
      else
      {
        outlined destroy of PommesSearchRequest(v56, type metadata accessor for PommesBridgeResultCandidateState);
      }

      v68 = (uint64_t)v82;
      if (((*(uint64_t (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + *v79 + 448))(v82) & 1) != 0)
        (*(void (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor + *v79 + 456))(v78);
      (*(void (**)(uint64_t *, uint64_t))(v76 + 8))(v78, v77);
      v67 = v68;
    }
    else
    {
      v64 = Logger.logObject.getter();
      v65 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v66 = 0;
        _os_log_impl(&dword_1C2356000, v64, v65, "Not handling SARDRunPOMMESRequest because no refId provided", v66, 2u);
        MEMORY[0x1C3BBFF64](v66, -1, -1);
      }

      v67 = (uint64_t)v16;
    }
    outlined destroy of PommesSearchRequest(v67, type metadata accessor for PommesBridgeResultCandidateState);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v85, v84);
}

uint64_t PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  NSObject *v32;
  os_log_type_t v33;
  _BOOL4 v34;
  uint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  _QWORD *v38;
  NSObject *v39;
  char *v40;
  NSObject *v41;
  _QWORD *v42;
  uint8_t *v43;
  uint64_t v44;
  void *v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(uint64_t *, _QWORD);
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, uint64_t);
  uint64_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v82 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v93 = (uint64_t)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v92 = (uint64_t *)((char *)&v82 - v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v13);
  v86 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v87 = *(_QWORD *)(v15 - 8);
  v88 = v15;
  v16 = MEMORY[0x1E0C80A78](v15);
  v89 = (uint64_t)&v82 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v91 = (uint64_t)&v82 - v18;
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v82 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for InsightRequestSummaryLogger();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v82 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v22, (uint64_t)static Logger.insightRequestSummaryLogger);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v25, v26, v22);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = v94;
  *(_QWORD *)(v27 + 24) = a1;
  swift_retain();
  v28 = a1;
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  v30 = __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
  v31 = v28;
  v85 = v30;
  v32 = Logger.logObject.getter();
  v33 = static os_log_type_t.debug.getter();
  v34 = os_log_type_enabled(v32, v33);
  v90 = v6;
  if (v34)
  {
    v35 = swift_slowAlloc();
    v84 = v5;
    v36 = (uint8_t *)v35;
    v37 = swift_slowAlloc();
    v83 = v21;
    v38 = (_QWORD *)v37;
    *(_DWORD *)v36 = 138412290;
    v96[0] = (uint64_t)v31;
    v39 = v31;
    v82 = v12;
    v40 = v4;
    v41 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v38 = v31;

    v4 = v40;
    v12 = v82;
    _os_log_impl(&dword_1C2356000, v32, v33, "PommesBridge handling message: %@", v36, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v42 = v38;
    v21 = v83;
    MEMORY[0x1C3BBFF64](v42, -1, -1);
    v43 = v36;
    v5 = v84;
    MEMORY[0x1C3BBFF64](v43, -1, -1);
  }
  else
  {

    v32 = v31;
  }
  v44 = 0x3E6C696E3CLL;

  v45 = (void *)AsrResultCandidateMessage.speechPackage.getter();
  v46 = objc_msgSend(v45, sel_recognition);

  if (v46)
  {
    v47 = AFSpeechRecognition.toAsrHypotheses()();

    v48 = *(_QWORD *)(v47 + 16);
    v49 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    v50 = *(_QWORD *)(v49 - 8);
    if (v48)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v50 + 16))(v21, v47 + ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80)), v49);
      v51 = 0;
    }
    else
    {
      v51 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v21, v51, 1, v49);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v21, 1, v49) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
      v52 = 0xE500000000000000;
    }
    else
    {
      v44 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
      v53 = v21;
      v52 = v54;
      (*(void (**)(char *, uint64_t))(v50 + 8))(v53, v49);
    }
  }
  else
  {
    v52 = 0xE500000000000000;
  }
  v55 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v57 = v56;
  v58 = (uint64_t)v86;
  UserIdAwareResultCandidateMessageBase.userId.getter();
  v59 = AsrResultCandidateMessage.speechPackage.getter();
  v60 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v60 - 8) + 56))(v12, 1, 1, v60);
  v81 = (uint64_t)v12;
  v61 = v91;
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v55, v57, v58, v59, v44, v52, 0, 0, v91, 0, 0, 0, MEMORY[0x1E0DEE9D8], v81);
  v62 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v63 = v92;
  *v92 = v62;
  v63[1] = v64;
  v65 = v90;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v90 + 104))(v63, *MEMORY[0x1E0D988C8], v5);
  v66 = v93;
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v65 + 16))(v93, v63, v5);
  outlined init with copy of PommesSearchRequest(v61, (uint64_t)v4, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v87 + 56))(v4, 0, 1, v88);
  v67 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v94
                                                                                     + 136))(v96);
  specialized Dictionary.subscript.setter((uint64_t)v4, v66);
  v67(v96, 0);
  v68 = v89;
  outlined init with copy of PommesSearchRequest(v61, v89, type metadata accessor for PommesBridgeResultCandidateState);
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v69, v70))
  {
    v71 = (uint8_t *)swift_slowAlloc();
    v72 = v5;
    v73 = swift_slowAlloc();
    v96[0] = v73;
    *(_DWORD *)v71 = 136315138;
    v74 = PommesBridgeResultCandidateState.description.getter();
    v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v68, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C2356000, v69, v70, "Created %s", v71, 0xCu);
    swift_arrayDestroy();
    v76 = v73;
    v5 = v72;
    MEMORY[0x1C3BBFF64](v76, -1, -1);
    MEMORY[0x1C3BBFF64](v71, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest(v68, type metadata accessor for PommesBridgeResultCandidateState);
  }

  v77 = v93;
  v78 = v91;
  PommesBridgeResultCandidateState.pommesCandidateId.getter(v93);
  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(v77);
  v79 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
  v79(v77, v5);
  v79((uint64_t)v92, v5);
  return outlined destroy of PommesSearchRequest(v78, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  id v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  _QWORD *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  v5 = a1;
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    v9 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v8 = 138412290;
    v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v9 = v5;

    _os_log_impl(&dword_1C2356000, v6, v7, "PommesBridge handling message: %@", v8, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v9, -1, -1);
    MEMORY[0x1C3BBFF64](v8, -1, -1);

  }
  else
  {

  }
  v11 = TRPCandidateRequestMessage.tcuToContextList.getter();
  v12 = *(_QWORD *)(v11 + 16);
  if (v12)
  {
    v13 = v11 + 40;
    do
    {
      closure #1 in PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)(*(void **)(v13 - 8), v13, (uint64_t)v5, v2);
      v13 += 48;
      --v12;
    }
    while (v12);
  }
  return swift_bridgeObjectRelease();
}

id closure #1 in PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  id result;
  void *v26;
  id v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  int *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  unint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint8_t *v70;
  uint64_t *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  char *v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86[4];

  v78 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PommesCandidateId();
  v82 = *(_QWORD *)(v9 - 8);
  v83 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v84 = (uint64_t *)((char *)&v72 - v13);
  v14 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  v15 = *((_QWORD *)v14 - 1);
  v16 = MEMORY[0x1E0C80A78](v14);
  v77 = (uint64_t)&v72 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (uint64_t *)((char *)&v72 - v18);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v72 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v79 = a3;
  v80 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v24 = v23;
  result = objc_msgSend(a1, sel_speechPackage);
  if (!result)
  {
    __break(1u);
    goto LABEL_19;
  }
  v26 = result;
  v74 = v15;
  v75 = v12;
  v73 = v8;
  v81 = 0x3E6C696E3CLL;
  v27 = objc_msgSend(result, sel_recognition);

  if (!v27)
    goto LABEL_8;
  v28 = AFSpeechRecognition.toAsrHypotheses()();

  v29 = *(_QWORD *)(v28 + 16);
  v30 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
  v31 = *(_QWORD *)(v30 - 8);
  if (v29)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v31 + 16))(v22, v28 + ((*(unsigned __int8 *)(v31 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80)), v30);
    v32 = 0;
  }
  else
  {
    v32 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v22, v32, 1, v30);
  swift_bridgeObjectRelease();
  type metadata accessor for Siri_Nlu_External_AsrHypothesis();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v22, 1, v30) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v22, &demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
LABEL_8:
    v76 = 0xE500000000000000;
    goto LABEL_10;
  }
  v81 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
  v76 = v33;
  (*(void (**)(char *, uint64_t))(v31 + 8))(v22, v30);
LABEL_10:
  result = objc_msgSend(a1, sel_tcuId);
  if (!result)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v34 = result;
  v35 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

  TRPCandidateRequestMessageBase.userId.getter();
  v38 = objc_msgSend(a1, sel_speechPackage);
  v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  v40 = (char *)v19 + v39[16];
  v41 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v42 = (char *)v19 + v39[24];
  v43 = type metadata accessor for SiriUserInput();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
  v44 = (char *)v19 + v39[28];
  v45 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
  *((_BYTE *)v19 + v14[13]) = 0;
  v46 = (char *)v19 + v14[14];
  v47 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
  v48 = v39[20];
  v49 = v80;
  *v19 = v80;
  v19[1] = v24;
  v19[2] = v35;
  v19[3] = v37;
  *((_BYTE *)v19 + v48) = 0;
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v19 + v14[7]) = (uint64_t)v38;
  v50 = (uint64_t *)((char *)v19 + v14[8]);
  v51 = v76;
  *v50 = v81;
  v50[1] = v51;
  *((_BYTE *)v19 + v14[9]) = 0;
  *((_BYTE *)v19 + v14[10]) = 0;
  *((_BYTE *)v19 + v14[11]) = 0;
  *((_BYTE *)v19 + v14[12]) = 0;
  *(uint64_t *)((char *)v19 + v14[6]) = 0;
  swift_bridgeObjectRetain();
  result = objc_msgSend(a1, (SEL)&stru_1E7C114C8.name + 2);
  if (!result)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  v52 = result;
  v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v55 = v54;

  v56 = v84;
  *v84 = v49;
  v56[1] = v24;
  v56[2] = v53;
  v56[3] = v55;
  v58 = v82;
  v57 = v83;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v82 + 104))(v56, *MEMORY[0x1E0D988D0], v83);
  v59 = (uint64_t)v75;
  (*(void (**)(char *, uint64_t *, uint64_t))(v58 + 16))(v75, v56, v57);
  v60 = (uint64_t)v73;
  outlined init with copy of PommesSearchRequest((uint64_t)v19, (uint64_t)v73, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v74 + 56))(v60, 0, 1, v14);
  v61 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v78
                                                                                     + 136))(v86);
  specialized Dictionary.subscript.setter(v60, v59);
  v61(v86, 0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v62 = type metadata accessor for Logger();
  __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
  v63 = v77;
  outlined init with copy of PommesSearchRequest((uint64_t)v19, v77, type metadata accessor for PommesBridgeResultCandidateState);
  v64 = Logger.logObject.getter();
  v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v64, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc();
    v67 = swift_slowAlloc();
    v86[0] = v67;
    *(_DWORD *)v66 = 136315138;
    v68 = PommesBridgeResultCandidateState.description.getter();
    v85 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v86);
    v58 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v63, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C2356000, v64, v65, "Created %s", v66, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v67, -1, -1);
    v70 = v66;
    v57 = v83;
    MEMORY[0x1C3BBFF64](v70, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest(v63, type metadata accessor for PommesBridgeResultCandidateState);
  }

  v71 = v84;
  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)((uint64_t)v84);
  (*(void (**)(uint64_t *, uint64_t))(v58 + 8))(v71, v57);
  return (id)outlined destroy of PommesSearchRequest((uint64_t)v19, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleGestureBasedResultCandidateMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  id v32;
  _QWORD *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  _QWORD *v37;
  id v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  uint64_t v62;
  NSObject *v63;
  uint64_t v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  char *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93[5];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v2);
  v86 = (uint64_t)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for PommesCandidateId();
  v89 = *(_QWORD *)(v91 - 8);
  v4 = MEMORY[0x1E0C80A78](v91);
  v85 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v90 = (uint64_t *)((char *)&v72 - v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v7);
  v82 = (char *)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for GestureInput();
  v78 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v77 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v11);
  v80 = (char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v83 = *(_QWORD *)(v13 - 8);
  v84 = v13;
  v14 = MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v79 = (uint64_t)&v72 - v18;
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v72 - v19;
  v21 = type metadata accessor for InsightRequestSummaryLogger();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v76 = (char *)&v72 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  v26 = a1;
  v81 = v25;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  v29 = os_log_type_enabled(v27, v28);
  v87 = v16;
  if (v29)
  {
    v74 = v21;
    v30 = (uint8_t *)swift_slowAlloc();
    v73 = (_QWORD *)swift_slowAlloc();
    v75 = v9;
    *(_DWORD *)v30 = 138412290;
    v93[0] = (uint64_t)v26;
    v31 = v22;
    v32 = v26;
    v21 = v74;
    v9 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v33 = v73;
    *v73 = v26;

    v22 = v31;
    _os_log_impl(&dword_1C2356000, v27, v28, "PommesBridge handling message: %@", v30, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v33, -1, -1);
    MEMORY[0x1C3BBFF64](v30, -1, -1);

  }
  else
  {

  }
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v34 = __swift_project_value_buffer(v21, (uint64_t)static Logger.insightRequestSummaryLogger);
  v35 = v76;
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v76, v34, v21);
  v36 = swift_allocObject();
  v37 = v88;
  *(_QWORD *)(v36 + 16) = v88;
  *(_QWORD *)(v36 + 24) = v26;
  v38 = v26;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v22 + 8))(v35, v21);
  v39 = v38;
  v40 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v42 = v41;
  v43 = v39;
  v44 = (uint64_t)v80;
  UserIdAwareResultCandidateMessageBase.userId.getter();

  v45 = v77;
  v46 = GestureBasedResultCandidateMessage.gesture.getter();
  v47 = MEMORY[0x1C3BBDB64](v46);
  v49 = v48;
  (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v9);
  if (!v49)
  {
    v47 = 0;
    v49 = 0xE000000000000000;
  }
  v50 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v51 = v82;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(v82, 1, 1, v50);
  v71 = (uint64_t)v51;
  v52 = v79;
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v40, v42, v44, 0, v47, v49, 0, 0, v79, 0, 0, 0, MEMORY[0x1E0DEE9D8], v71);

  outlined init with take of PerformanceUtil.Ticket(v52, (uint64_t)v20, type metadata accessor for PommesBridgeResultCandidateState);
  v53 = v84;
  v20[*(int *)(v84 + 52)] = 1;
  v54 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v55 = v89;
  v56 = v90;
  *v90 = v54;
  v56[1] = v57;
  v58 = v91;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v55 + 104))(v56, *MEMORY[0x1E0D988C8], v91);
  v59 = (uint64_t)v85;
  (*(void (**)(char *, uint64_t *, uint64_t))(v55 + 16))(v85, v56, v58);
  v60 = v86;
  outlined init with copy of PommesSearchRequest((uint64_t)v20, v86, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v83 + 56))(v60, 0, 1, v53);
  v61 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v37
                                                                                     + 136))(v93);
  specialized Dictionary.subscript.setter(v60, v59);
  v61(v93, 0);
  v62 = (uint64_t)v87;
  outlined init with copy of PommesSearchRequest((uint64_t)v20, (uint64_t)v87, type metadata accessor for PommesBridgeResultCandidateState);
  v63 = Logger.logObject.getter();
  v64 = (uint64_t)v20;
  v65 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v65))
  {
    v66 = (uint8_t *)swift_slowAlloc();
    v67 = swift_slowAlloc();
    v93[0] = v67;
    *(_DWORD *)v66 = 136315138;
    v68 = PommesBridgeResultCandidateState.description.getter();
    v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v62, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C2356000, v63, v65, "Created %s", v66, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v67, -1, -1);
    MEMORY[0x1C3BBFF64](v66, -1, -1);

  }
  else
  {

    outlined destroy of PommesSearchRequest(v62, type metadata accessor for PommesBridgeResultCandidateState);
  }
  (*(void (**)(uint64_t *, uint64_t))(v89 + 8))(v90, v91);
  return outlined destroy of PommesSearchRequest(v64, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleTextBasedTRPCandidateMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint8_t *v22;
  id v23;
  id v24;
  _QWORD *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v2);
  v78 = (uint64_t)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PommesCandidateId();
  v82 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v77 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v81 = (uint64_t *)((char *)&v71 - v7);
  v8 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  v76 = *((_QWORD *)v8 - 1);
  v9 = MEMORY[0x1E0C80A78](v8);
  v79 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v71 - v11);
  v13 = type metadata accessor for InsightRequestSummaryLogger();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  v18 = a1;
  v75 = v17;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v80 = v4;
  if (v21)
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v71 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v22 = 138412290;
    v72 = v14;
    v85[0] = (uint64_t)v18;
    v23 = v18;
    v73 = v13;
    v24 = v23;
    v14 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25 = v71;
    *v71 = v18;

    v13 = v73;
    _os_log_impl(&dword_1C2356000, v19, v20, "PommesBridge handling message: %@", v22, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v25, -1, -1);
    MEMORY[0x1C3BBFF64](v22, -1, -1);

  }
  else
  {

  }
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v26 = __swift_project_value_buffer(v13, (uint64_t)static Logger.insightRequestSummaryLogger);
  v27 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v74, v26, v13);
  v28 = swift_allocObject();
  v29 = v83;
  *(_QWORD *)(v28 + 16) = v83;
  *(_QWORD *)(v28 + 24) = v18;
  v30 = v18;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v27, v13);
  v31 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v33 = v32;
  v34 = TextBasedTRPCandidateMessage.tcuId.getter();
  v36 = v35;
  TRPCandidateRequestMessageBase.userId.getter();
  v37 = TextBasedTRPCandidateMessage.utterance.getter();
  v73 = v38;
  v74 = (char *)v37;
  v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  v40 = (char *)v12 + v39[16];
  v41 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v42 = (char *)v12 + v39[24];
  v43 = type metadata accessor for SiriUserInput();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 1, 1, v43);
  v44 = (char *)v12 + v39[28];
  v45 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 1, 1, v45);
  *((_BYTE *)v12 + v8[13]) = 0;
  v46 = (char *)v12 + v8[14];
  v47 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
  v48 = v39[20];
  *v12 = v31;
  v12[1] = v33;
  v12[2] = v34;
  v12[3] = v36;
  *((_BYTE *)v12 + v48) = 0;
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v12 + v8[7]) = 0;
  v49 = (char **)((char *)v12 + v8[8]);
  v50 = v73;
  *v49 = v74;
  v49[1] = (char *)v50;
  *((_BYTE *)v12 + v8[9]) = 0;
  *((_BYTE *)v12 + v8[10]) = 0;
  *((_BYTE *)v12 + v8[11]) = 0;
  *((_BYTE *)v12 + v8[12]) = 0;
  *(uint64_t *)((char *)v12 + v8[6]) = 0;
  v51 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v53 = v52;
  v54 = TextBasedTRPCandidateMessage.tcuId.getter();
  v56 = v80;
  v55 = v81;
  *v81 = v51;
  v55[1] = v53;
  v55[2] = v54;
  v55[3] = v57;
  v58 = v82;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v82 + 104))(v55, *MEMORY[0x1E0D988D0], v56);
  v59 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t *, uint64_t))(v58 + 16))(v77, v55, v56);
  v60 = v78;
  outlined init with copy of PommesSearchRequest((uint64_t)v12, v78, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v76 + 56))(v60, 0, 1, v8);
  v61 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v29
                                                                                     + 136))(v85);
  specialized Dictionary.subscript.setter(v60, v59);
  v61(v85, 0);
  v62 = v79;
  outlined init with copy of PommesSearchRequest((uint64_t)v12, v79, type metadata accessor for PommesBridgeResultCandidateState);
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc();
    v66 = swift_slowAlloc();
    v85[0] = v66;
    *(_DWORD *)v65 = 136315138;
    v67 = PommesBridgeResultCandidateState.description.getter();
    v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v62, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C2356000, v63, v64, "Created %s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v66, -1, -1);
    MEMORY[0x1C3BBFF64](v65, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest(v62, type metadata accessor for PommesBridgeResultCandidateState);
  }

  v69 = v81;
  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)((uint64_t)v81);
  (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v69, v56);
  return outlined destroy of PommesSearchRequest((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t PommesBridgeRequestProcessor.handleRewrittenUtteranceCandidateMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  _BOOL4 v21;
  uint64_t v22;
  uint8_t *v23;
  id v24;
  _QWORD *v25;
  uint8_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int *v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  char **v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  void (*v61)(uint64_t *, _QWORD);
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t *v69;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85[4];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v2);
  v78 = (uint64_t)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for PommesCandidateId();
  v82 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x1E0C80A78](v4);
  v77 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v81 = (uint64_t *)((char *)&v71 - v7);
  v8 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  v76 = *((_QWORD *)v8 - 1);
  v9 = MEMORY[0x1E0C80A78](v8);
  v79 = (uint64_t)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t *)((char *)&v71 - v11);
  v13 = type metadata accessor for InsightRequestSummaryLogger();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v74 = (char *)&v71 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v17 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  v18 = a1;
  v75 = v17;
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  v21 = os_log_type_enabled(v19, v20);
  v80 = v4;
  if (v21)
  {
    v22 = swift_slowAlloc();
    v73 = v13;
    v23 = (uint8_t *)v22;
    v71 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v23 = 138412290;
    v72 = v14;
    v85[0] = (uint64_t)v18;
    v24 = v18;
    v14 = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v25 = v71;
    *v71 = v18;

    _os_log_impl(&dword_1C2356000, v19, v20, "PommesBridge handling message: %@", v23, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v25, -1, -1);
    v26 = v23;
    v13 = v73;
    MEMORY[0x1C3BBFF64](v26, -1, -1);

  }
  else
  {

  }
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v27 = __swift_project_value_buffer(v13, (uint64_t)static Logger.insightRequestSummaryLogger);
  v28 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v74, v27, v13);
  v29 = swift_allocObject();
  v30 = v83;
  *(_QWORD *)(v29 + 16) = v83;
  *(_QWORD *)(v29 + 24) = v18;
  v31 = v18;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v28, v13);
  v72 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v33 = v32;
  v34 = TextBasedTRPCandidateMessage.tcuId.getter();
  v36 = v35;
  TRPCandidateRequestMessageBase.userId.getter();
  v37 = TextBasedTRPCandidateMessage.utterance.getter();
  v73 = v38;
  v74 = (char *)v37;
  v39 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  v40 = (char *)v12 + v39[16];
  v41 = type metadata accessor for TCUMappedNLResponse();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v40, 1, 1, v41);
  v42 = (char *)v12 + v39[24];
  RewrittenUtteranceCandidateMessage.originalUserInput.getter();
  v43 = type metadata accessor for SiriUserInput();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v42, 0, 1, v43);
  v44 = (char *)v12 + v39[28];
  RewrittenUtteranceCandidateMessage.rewriteReason.getter();
  v45 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v44, 0, 1, v45);
  *((_BYTE *)v12 + v8[13]) = 0;
  v46 = (char *)v12 + v8[14];
  v47 = type metadata accessor for PommesSearchEagerInfo(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v46, 1, 1, v47);
  v48 = v39[20];
  *v12 = v72;
  v12[1] = v33;
  v12[2] = v34;
  v12[3] = v36;
  *((_BYTE *)v12 + v48) = 0;
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  swift_storeEnumTagMultiPayload();
  *(uint64_t *)((char *)v12 + v8[7]) = 0;
  v49 = (char **)((char *)v12 + v8[8]);
  v50 = v73;
  *v49 = v74;
  v49[1] = (char *)v50;
  *((_BYTE *)v12 + v8[9]) = 0;
  *((_BYTE *)v12 + v8[10]) = 0;
  *((_BYTE *)v12 + v8[11]) = 0;
  *((_BYTE *)v12 + v8[12]) = 0;
  *(uint64_t *)((char *)v12 + v8[6]) = 0;
  v51 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v53 = v52;
  v54 = TextBasedTRPCandidateMessage.tcuId.getter();
  v56 = v80;
  v55 = v81;
  *v81 = v51;
  v55[1] = v53;
  v55[2] = v54;
  v55[3] = v57;
  v58 = v82;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v82 + 104))(v55, *MEMORY[0x1E0D988D0], v56);
  v59 = (uint64_t)v77;
  (*(void (**)(char *, uint64_t *, uint64_t))(v58 + 16))(v77, v55, v56);
  v60 = v78;
  outlined init with copy of PommesSearchRequest((uint64_t)v12, v78, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v76 + 56))(v60, 0, 1, v8);
  v61 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v30
                                                                                     + 136))(v85);
  specialized Dictionary.subscript.setter(v60, v59);
  v61(v85, 0);
  v62 = v79;
  outlined init with copy of PommesSearchRequest((uint64_t)v12, v79, type metadata accessor for PommesBridgeResultCandidateState);
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc();
    v66 = swift_slowAlloc();
    v85[0] = v66;
    *(_DWORD *)v65 = 136315138;
    v67 = PommesBridgeResultCandidateState.description.getter();
    v84 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v62, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C2356000, v63, v64, "Created %s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v66, -1, -1);
    MEMORY[0x1C3BBFF64](v65, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest(v62, type metadata accessor for PommesBridgeResultCandidateState);
  }

  v69 = v81;
  PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)((uint64_t)v81);
  (*(void (**)(uint64_t *, uint64_t))(v82 + 8))(v69, v56);
  return outlined destroy of PommesSearchRequest((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState);
}

void PommesBridgeRequestProcessor.handleTTResponseMessage(_:)(void *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  NSObject *v38;
  os_log_type_t v39;
  _BOOL4 v40;
  uint8_t *v41;
  _QWORD *v42;
  id v43;
  char *v44;
  void (**v45)(_QWORD, _QWORD, _QWORD);
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, uint64_t);
  id v51;
  id v52;
  NSObject *v53;
  os_log_type_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  const char *v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  NSObject *v68;
  NSObject *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  uint8_t *v72;
  char *v73;
  uint64_t v74;
  NSObject *v75;
  NSObject *v76;
  os_log_type_t v77;
  _BOOL4 v78;
  uint8_t *v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  void (**v92)(_QWORD, _QWORD, _QWORD);
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  void (*v97)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t (*v101)(uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  void (*v109)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  NSObject *v116;
  os_log_type_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  uint8_t *v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t *, _QWORD);
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  NSObject *v142;
  os_log_type_t v143;
  _BOOL4 v144;
  uint64_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t v150;
  unint64_t v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (***v156)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t, _QWORD);
  _QWORD *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t);
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  char v175;
  void (*v176)(char *, uint64_t);
  uint64_t v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  char *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  uint64_t *v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  char *v204;
  char *v205;
  void (**v206)(_QWORD, _QWORD, _QWORD);
  char *v207;
  _QWORD *p_isa;
  uint64_t v209;
  _QWORD *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;

  v182 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  MEMORY[0x1E0C80A78](v182);
  v181 = (char *)&v177 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v184 = (uint64_t)&v177 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v198 = (char *)&v177 - v6;
  v193 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v190 = *(_QWORD *)(v193 - 8);
  MEMORY[0x1E0C80A78](v193);
  v189 = (uint64_t)&v177 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v197 = type metadata accessor for ServerFallbackReason();
  v8 = *(_QWORD *)(v197 - 8);
  MEMORY[0x1E0C80A78](v197);
  v178 = (char *)&v177 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v186 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
  MEMORY[0x1E0C80A78](v186);
  v187 = (uint64_t)&v177 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v180 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ServerFallbackReason?);
  v11 = MEMORY[0x1E0C80A78](v180);
  v179 = (char *)&v177 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v183 = (uint64_t)&v177 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v191 = (uint64_t)&v177 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v177 - v18;
  MEMORY[0x1E0C80A78](v17);
  v194 = (char *)&v177 - v20;
  v202 = type metadata accessor for PommesCandidateId();
  v21 = *(_QWORD *)(v202 - 8);
  v22 = MEMORY[0x1E0C80A78](v202);
  v188 = (uint64_t)&v177 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v25 = (uint64_t *)((char *)&v177 - v24);
  v185 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v26 = MEMORY[0x1E0C80A78](v185);
  v192 = (char *)&v177 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v201 = (char *)&v177 - v28;
  v29 = type metadata accessor for TCUMappedNLResponse();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v204 = (char *)&v177 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  p_isa = (_QWORD *)type metadata accessor for TTResponseMessage.MitigationDecision();
  v206 = (void (**)(_QWORD, _QWORD, _QWORD))*(p_isa - 1);
  v32 = MEMORY[0x1E0C80A78](p_isa);
  v205 = (char *)&v177 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v207 = (char *)&v177 - v34;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v35 = type metadata accessor for Logger();
  v36 = __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
  v37 = a1;
  v209 = v36;
  v38 = Logger.logObject.getter();
  v39 = static os_log_type_t.debug.getter();
  v40 = os_log_type_enabled(v38, v39);
  v203 = v21;
  v199 = v25;
  v196 = v8;
  v195 = v19;
  if (v40)
  {
    v200 = v30;
    v41 = (uint8_t *)swift_slowAlloc();
    v42 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v41 = 138412290;
    v213 = (uint64_t)v37;
    v43 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v42 = v37;

    v30 = v200;
    _os_log_impl(&dword_1C2356000, v38, v39, "PommesBridge handling message: %@", v41, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v42, -1, -1);
    MEMORY[0x1C3BBFF64](v41, -1, -1);

  }
  else
  {

  }
  v44 = v207;
  TTResponseMessage.mitigationDecision.getter();
  v46 = v205;
  v45 = v206;
  v47 = (uint64_t)p_isa;
  ((void (**)(char *, _QWORD, _QWORD *))v206)[13](v205, *MEMORY[0x1E0D9C950], p_isa);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type TTResponseMessage.MitigationDecision and conformance TTResponseMessage.MitigationDecision, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9C978], MEMORY[0x1E0D9C990]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v48 = v213;
  v49 = v212;
  v50 = (void (*)(char *, uint64_t))v45[1];
  v50(v46, v47);
  v50(v44, v47);
  if (v48 == v49)
  {
    v51 = v37;
    swift_retain_n();
    v52 = v51;
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc();
      v56 = swift_slowAlloc();
      v213 = v56;
      *(_DWORD *)v55 = 136315394;
      v57 = RequestProcessorBase.requestId.getter();
      v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v58, &v213);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2048;
      v59 = v207;
      TTResponseMessage.mitigationDecision.getter();
      v60 = TTResponseMessage.MitigationDecision.rawValue.getter();
      v50(v59, (uint64_t)p_isa);

      v212 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v61 = "Returning because TTResponseMessage forceMitigated - requestId: %s with mitigatedDecision: %ld";
LABEL_12:
      _os_log_impl(&dword_1C2356000, v53, v54, v61, (uint8_t *)v55, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v56, -1, -1);
      MEMORY[0x1C3BBFF64](v55, -1, -1);

      return;
    }
LABEL_13:

    swift_release_n();
    return;
  }
  v62 = (uint64_t)v201;
  TTResponseMessage.tcuMappedNLResponse.getter();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v62, 1, v29) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v62, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v63 = v37;
    swift_retain_n();
    v52 = v63;
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = swift_slowAlloc();
      v56 = swift_slowAlloc();
      v213 = v56;
      *(_DWORD *)v55 = 136315394;
      v64 = RequestProcessorBase.requestId.getter();
      v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v64, v65, &v213);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v55 + 12) = 2048;
      v66 = v207;
      TTResponseMessage.mitigationDecision.getter();
      v67 = TTResponseMessage.MitigationDecision.rawValue.getter();
      v50(v66, (uint64_t)p_isa);

      v212 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v61 = "Returning because TTResponseMessage contains no tcuMappedNLResponse for requestId: %s with mitigatedDecision: %ld";
      goto LABEL_12;
    }
    goto LABEL_13;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 32))(v204, v62, v29);
  v68 = v37;
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  v71 = os_log_type_enabled(v69, v70);
  v177 = v29;
  v200 = v30;
  if (v71)
  {
    v72 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v72 = 134217984;
    v73 = v207;
    TTResponseMessage.mitigationDecision.getter();
    v74 = TTResponseMessage.MitigationDecision.rawValue.getter();
    v50(v73, (uint64_t)p_isa);
    v213 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1C2356000, v69, v70, "TTResponseMessage contains tcuMappedNLResponse with mitigationDecision: %ld", v72, 0xCu);
    MEMORY[0x1C3BBFF64](v72, -1, -1);
  }
  else
  {

    v69 = v68;
  }

  v75 = v68;
  v76 = Logger.logObject.getter();
  v77 = static os_log_type_t.debug.getter();
  v78 = os_log_type_enabled(v76, v77);
  p_isa = &v75->isa;
  if (v78)
  {
    v79 = (uint8_t *)swift_slowAlloc();
    v80 = swift_slowAlloc();
    v213 = v80;
    *(_DWORD *)v79 = 136315138;
    TTResponseMessage.tcuMappedNLResponse.getter();
    v81 = String.init<A>(describing:)();
    v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, &v213);
    v83 = p_isa;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v76, v77, "PommesBridgeRequestProcessor received messages: %s", v79, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v80, -1, -1);
    MEMORY[0x1C3BBFF64](v79, -1, -1);

  }
  else
  {

  }
  v84 = v196;
  v85 = (uint64_t)v195;
  v86 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
  v88 = v87;
  v89 = TCUMappedNLResponse.tcuId.getter();
  v90 = v199;
  *v199 = v86;
  v90[1] = v88;
  v90[2] = v89;
  v90[3] = v91;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v203 + 104))(v90, *MEMORY[0x1E0D988D0], v202);
  v92 = *(void (***)(_QWORD, _QWORD, _QWORD))((char *)v210
                                                       + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  v93 = RequestProcessorBase.requestId.getter();
  v95 = v94;
  v96 = RequestProcessorBase.rootLevelRequestId.getter();
  v97 = (void (*)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))*((_QWORD *)*v92 + 16);
  v206 = v92;
  v97(v90, v93, v95, v96, v98);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v99 = (char *)TCUMappedNLResponse.nlResponse.getter();
  v100 = (uint64_t)v194;
  v207 = v99;
  NLParseResponse.serverFallbackReason.getter();
  v101 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
  v102 = v197;
  LODWORD(v93) = v101(v100, 1, v197);
  outlined destroy of MediaUserStateCenter?(v100, &demangling cache variable for type metadata for ServerFallbackReason?);
  v103 = (uint64_t)v198;
  if ((_DWORD)v93 == 1)
    goto LABEL_21;
  NLParseResponse.serverFallbackReason.getter();
  v110 = v191;
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v84 + 104))(v191, *MEMORY[0x1E0D9ED50], v102);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v84 + 56))(v110, 0, 1, v102);
  v111 = v187;
  v112 = v187 + *(int *)(v186 + 48);
  outlined init with copy of MediaUserStateCenter?(v85, v187, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined init with copy of MediaUserStateCenter?(v110, v112, &demangling cache variable for type metadata for ServerFallbackReason?);
  if (v101(v111, 1, v102) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v110, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for ServerFallbackReason?);
    v113 = v111;
    if (v101(v112, 1, v102) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v111, &demangling cache variable for type metadata for ServerFallbackReason?);
      v103 = (uint64_t)v198;
      goto LABEL_21;
    }
    goto LABEL_30;
  }
  v114 = v183;
  outlined init with copy of MediaUserStateCenter?(v111, v183, &demangling cache variable for type metadata for ServerFallbackReason?);
  v113 = v111;
  if (v101(v112, 1, v102) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v191, &demangling cache variable for type metadata for ServerFallbackReason?);
    outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for ServerFallbackReason?);
    (*(void (**)(uint64_t, uint64_t))(v84 + 8))(v114, v102);
LABEL_30:
    outlined destroy of MediaUserStateCenter?(v113, &demangling cache variable for type metadata for (ServerFallbackReason?, ServerFallbackReason?));
LABEL_31:
    v115 = v207;
    v116 = Logger.logObject.getter();
    v117 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v116, v117))
    {
      v118 = swift_slowAlloc();
      v119 = swift_slowAlloc();
      v213 = v119;
      *(_DWORD *)v118 = 136315394;
      NLParseResponse.serverFallbackReason.getter();
      v120 = String.init<A>(describing:)();
      v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v120, v121, &v213);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v118 + 12) = 2080;
      NLParseResponse.responseStatusCode.getter();
      v122 = String.init<A>(describing:)();
      v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v122, v123, &v213);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v116, v117, "Returning because tcuMappedNLResponse indicates server fallback\n    serverFallbackReason: %s\n    responseStatusCode: %s", (uint8_t *)v118, 0x16u);
      swift_arrayDestroy();
      v124 = v119;
      v90 = v199;
      MEMORY[0x1C3BBFF64](v124, -1, -1);
      MEMORY[0x1C3BBFF64](v118, -1, -1);

    }
    else
    {

    }
    v166 = v177;
    v167 = v210;
    v168 = RequestProcessorBase.requestId.getter();
    v170 = v169;
    v171 = RequestProcessorBase.rootLevelRequestId.getter();
    (*((void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))*v206 + 18))(4, v90, v168, v170, v171, v172);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    closure #1 in PommesBridgeRequestProcessor.handleTTResponseMessage(_:)((uint64_t)p_isa, v167);

    (*(void (**)(uint64_t *, uint64_t))(v203 + 8))(v90, v202);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v204, v166);
    return;
  }
  v173 = v85;
  v174 = v178;
  (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v178, v112, v102);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ServerFallbackReason and conformance ServerFallbackReason, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9ED60], MEMORY[0x1E0D9ED70]);
  v175 = dispatch thunk of static Equatable.== infix(_:_:)();
  v176 = *(void (**)(char *, uint64_t))(v84 + 8);
  v176(v174, v102);
  outlined destroy of MediaUserStateCenter?(v191, &demangling cache variable for type metadata for ServerFallbackReason?);
  outlined destroy of MediaUserStateCenter?(v173, &demangling cache variable for type metadata for ServerFallbackReason?);
  v176((char *)v114, v102);
  outlined destroy of MediaUserStateCenter?(v113, &demangling cache variable for type metadata for ServerFallbackReason?);
  v103 = (uint64_t)v198;
  if ((v175 & 1) == 0)
    goto LABEL_31;
LABEL_21:
  v104 = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v210 + 120))();
  if (*(_QWORD *)(v104 + 16))
  {
    v105 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v90);
    v106 = v190;
    v107 = v193;
    if ((v108 & 1) != 0)
    {
      outlined init with copy of PommesSearchRequest(*(_QWORD *)(v104 + 56) + *(_QWORD *)(v190 + 72) * v105, v103, type metadata accessor for PommesBridgeResultCandidateState);
      v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v106 + 56);
      v109(v103, 0, 1, v107);
    }
    else
    {
      v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56);
      v109(v103, 1, 1, v193);
    }
  }
  else
  {
    v106 = v190;
    v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v190 + 56);
    v107 = v193;
    v109(v103, 1, 1, v193);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v106 + 48))(v103, 1, v107) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v103, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    swift_retain_n();
    v125 = Logger.logObject.getter();
    v126 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v125, v126))
    {
      v127 = (uint8_t *)swift_slowAlloc();
      v128 = swift_slowAlloc();
      v213 = v128;
      *(_DWORD *)v127 = 136315138;
      v129 = RequestProcessorBase.requestId.getter();
      v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v129, v130, &v213);
      v90 = v199;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v125, v126, "Do not have prior state for this TTResponseMessage for requestId: %s", v127, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v128, -1, -1);
      MEMORY[0x1C3BBFF64](v127, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v155 = v177;
    v156 = (void (***)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t, _QWORD))v206;
    v157 = v210;
    v158 = RequestProcessorBase.requestId.getter();
    v160 = v159;
    v161 = RequestProcessorBase.rootLevelRequestId.getter();
    (*v156)[18](5, v90, v158, v160, v161, v162);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    closure #1 in PommesBridgeRequestProcessor.handleTTResponseMessage(_:)((uint64_t)p_isa, v157);

    (*(void (**)(uint64_t *, uint64_t))(v203 + 8))(v90, v202);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v204, v155);
  }
  else
  {
    v131 = v189;
    outlined init with take of PerformanceUtil.Ticket(v103, v189, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.setHasTTResponse(_:)(1);
    v132 = (uint64_t)v192;
    TTResponseMessage.tcuMappedNLResponse.getter();
    PommesBridgeResultCandidateState.setParseResponse(_:)(v132);
    outlined destroy of MediaUserStateCenter?(v132, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    *(_BYTE *)(v131 + *(int *)(v107 + 44)) = 1;
    v133 = v188;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v203 + 16))(v188, v90, v202);
    v134 = v184;
    outlined init with copy of PommesSearchRequest(v131, v184, type metadata accessor for PommesBridgeResultCandidateState);
    v109(v134, 0, 1, v107);
    v135 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                        + *v210
                                                                                        + 136))(&v213);
    specialized Dictionary.subscript.setter(v134, v133);
    v135(&v213, 0);
    v136 = Logger.logObject.getter();
    v137 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v136, v137))
    {
      v138 = (uint8_t *)swift_slowAlloc();
      v139 = swift_slowAlloc();
      v213 = v139;
      *(_DWORD *)v138 = 136315138;
      swift_beginAccess();
      v140 = PommesBridgeResultCandidateState.description.getter();
      v212 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v140, v141, &v213);
      v107 = v193;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v136, v137, "Fetched %s", v138, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v139, -1, -1);
      MEMORY[0x1C3BBFF64](v138, -1, -1);
    }

    v142 = Logger.logObject.getter();
    v143 = static os_log_type_t.debug.getter();
    v144 = os_log_type_enabled(v142, v143);
    v145 = v203;
    if (v144)
    {
      v146 = (uint8_t *)swift_slowAlloc();
      v147 = swift_slowAlloc();
      v213 = v147;
      *(_DWORD *)v146 = 136315138;
      v148 = v189;
      swift_beginAccess();
      v149 = (uint64_t *)(v148 + *(int *)(v107 + 32));
      v150 = *v149;
      v151 = v149[1];
      swift_bridgeObjectRetain();
      v211 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v150, v151, &v213);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v145 = v203;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v142, v143, "Extracted Pommes query:\n    prState utterance: \"%s\"", v146, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v147, -1, -1);
      MEMORY[0x1C3BBFF64](v146, -1, -1);

      v152 = v199;
      v153 = v177;
      v154 = v200;
    }
    else
    {

      v152 = v199;
      v153 = v177;
      v154 = v200;
      v148 = v189;
    }
    swift_beginAccess();
    if (((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v210 + 448))(v148) & 1) != 0)
    {
      v163 = v188;
      PommesBridgeResultCandidateState.pommesCandidateId.getter(v188);
      (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v210 + 456))(v163);

      v164 = *(void (**)(uint64_t, uint64_t))(v145 + 8);
      v165 = v202;
      v164(v163, v202);
      v164((uint64_t)v152, v165);
    }
    else
    {

      (*(void (**)(uint64_t *, uint64_t))(v145 + 8))(v152, v202);
    }
    (*(void (**)(char *, uint64_t))(v154 + 8))(v204, v153);
    outlined destroy of PommesSearchRequest(v148, type metadata accessor for PommesBridgeResultCandidateState);
  }
}

void closure #1 in PommesBridgeRequestProcessor.handleTTResponseMessage(_:)(uint64_t a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD v38[4];

  v37 = a2;
  v2 = type metadata accessor for UserID();
  v36 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PommesSearchReason();
  v34 = *(_QWORD *)(v5 - 8);
  v35 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for PommesError();
  v33 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  TTResponseMessage.tcuMappedNLResponse.getter();
  v14 = type metadata accessor for TCUMappedNLResponse();
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }
  else
  {
    v30 = TCUMappedNLResponse.tcuId.getter();
    v32 = v2;
    v17 = v16;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
    v29 = TRPCandidateRequestMessageBase.trpCandidateId.getter();
    v19 = v18;
    v20 = v33;
    (*(void (**)(char *, _QWORD, uint64_t))(v33 + 104))(v10, *MEMORY[0x1E0D9E820], v8);
    v21 = *MEMORY[0x1E0D98920];
    v31 = v8;
    v22 = v34;
    v23 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 104))(v7, v21, v35);
    TRPCandidateRequestMessageBase.userId.getter();
    v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, char *))(class metadata base offset for PommesBridgeRequestProcessor + *v37 + 552))(v29, v19, v30, v17, v10, v7, v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v36 + 8))(v4, v32);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v23);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v10, v31);
    if (v24)
    {
      RequestProcessorBase.messagePublisher.getter();
      __swift_project_boxed_opaque_existential_1(v38, v38[3]);
      dispatch thunk of MessagePublishing.postMessage(_:)();

      __swift_destroy_boxed_opaque_existential_1((uint64_t)v38);
      return;
    }
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1C2356000, v26, v27, "PommesBridgeRequestProcessor failed to build noQuery message", v28, 2u);
    MEMORY[0x1C3BBFF64](v28, -1, -1);
  }

}

uint64_t PommesBridgeRequestProcessor.handleResultSelectedMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint64_t v23;
  uint8_t *v24;
  uint64_t v25;
  id v26;
  _QWORD *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD *, _QWORD);
  void (*v45)(uint64_t, uint64_t);
  _QWORD *v47;
  char *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  _QWORD v57[4];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v53 = (uint64_t)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v55 = (char *)&v47 - v7;
  v56 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v54 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PommesCandidateId();
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (uint64_t *)((char *)&v47 - v15);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  v19 = a1;
  v51 = v18;
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, v21);
  v52 = v14;
  if (v22)
  {
    v23 = swift_slowAlloc();
    v50 = v10;
    v24 = (uint8_t *)v23;
    v25 = swift_slowAlloc();
    v49 = v16;
    v47 = (_QWORD *)v25;
    v48 = v9;
    *(_DWORD *)v24 = 138412290;
    v57[0] = v19;
    v26 = v19;
    v9 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v27 = v47;
    *v47 = v19;

    _os_log_impl(&dword_1C2356000, v20, v21, "PommesBridge handling resultSelectedMessage: %@", v24, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v16 = v49;
    MEMORY[0x1C3BBFF64](v27, -1, -1);
    v28 = v24;
    v10 = v50;
    MEMORY[0x1C3BBFF64](v28, -1, -1);

  }
  else
  {

  }
  *v16 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v16[1] = v29;
  v30 = (*(uint64_t (**)(uint64_t *, _QWORD, uint64_t))(v11 + 104))(v16, *MEMORY[0x1E0D988C8], v10);
  v31 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v30);
  v32 = v54;
  v33 = (uint64_t)v55;
  if (*(_QWORD *)(v31 + 16))
  {
    v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v16);
    v35 = v56;
    if ((v36 & 1) != 0)
    {
      outlined init with copy of PommesSearchRequest(*(_QWORD *)(v31 + 56) + *(_QWORD *)(v32 + 72) * v34, v33, type metadata accessor for PommesBridgeResultCandidateState);
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
      v37(v33, 0, 1, v35);
    }
    else
    {
      v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
      v37(v33, 1, 1, v56);
    }
  }
  else
  {
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v54 + 56);
    v35 = v56;
    v37((uint64_t)v55, 1, 1, v56);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v35) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1C2356000, v38, v39, "ResultSelectedMessage received before setting Pommes RC state", v40, 2u);
      MEMORY[0x1C3BBFF64](v40, -1, -1);
    }

  }
  else
  {
    outlined init with take of PerformanceUtil.Ticket(v33, (uint64_t)v9, type metadata accessor for PommesBridgeResultCandidateState);
    v9[*(int *)(v35 + 44)] = 1;
    v41 = (uint64_t)v52;
    (*(void (**)(char *, uint64_t *, uint64_t))(v11 + 16))(v52, v16, v10);
    v42 = v35;
    v43 = v53;
    outlined init with copy of PommesSearchRequest((uint64_t)v9, v53, type metadata accessor for PommesBridgeResultCandidateState);
    v37(v43, 0, 1, v42);
    v44 = (void (*)(_QWORD *, _QWORD))(*(uint64_t (**)(_QWORD *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v2
                                                                                     + 136))(v57);
    specialized Dictionary.subscript.setter(v43, v41);
    v44(v57, 0);
    if (((*(uint64_t (**)(char *))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 448))(v9) & 1) != 0)
    {
      PommesBridgeResultCandidateState.pommesCandidateId.getter(v41);
      (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 456))(v41);
      v45 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v45(v41, v10);
      outlined destroy of PommesSearchRequest((uint64_t)v9, type metadata accessor for PommesBridgeResultCandidateState);
      return ((uint64_t (*)(uint64_t *, uint64_t))v45)(v16, v10);
    }
    outlined destroy of PommesSearchRequest((uint64_t)v9, type metadata accessor for PommesBridgeResultCandidateState);
  }
  return (*(uint64_t (**)(uint64_t *, uint64_t))(v11 + 8))(v16, v10);
}

uint64_t PommesBridgeRequestProcessor.handleFallbackToPommesMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  _QWORD *v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  void (*v47)(uint64_t, uint64_t, uint64_t, int *);
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t, char *, _QWORD *);
  uint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t *, _QWORD);
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(uint64_t, id);
  _QWORD v97[2];
  _QWORD *v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  id v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116[3];
  uint64_t v117[5];

  v2 = v1;
  v106 = type metadata accessor for UserID();
  v104 = *(_QWORD *)(v106 - 8);
  MEMORY[0x1E0C80A78](v106);
  v103 = (char *)v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v105 = type metadata accessor for PommesSearchReason();
  v102 = *(_QWORD *)(v105 - 8);
  MEMORY[0x1E0C80A78](v105);
  v101 = (char *)v97 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v99 = (uint64_t)v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v108 = (uint64_t)v97 - v9;
  v109 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v10 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v12 = (char *)v97 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (_QWORD *)type metadata accessor for PommesCandidateId();
  v111 = *(v13 - 1);
  v14 = MEMORY[0x1E0C80A78](v13);
  v100 = (uint64_t)v97 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)v97 - v16;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v107 = v10;
  v18 = type metadata accessor for Logger();
  v19 = __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  v20 = a1;
  v110 = v19;
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  v23 = os_log_type_enabled(v21, v22);
  v112 = v12;
  v113 = v20;
  if (v23)
  {
    v24 = (uint8_t *)swift_slowAlloc();
    v25 = swift_slowAlloc();
    v117[0] = v25;
    v98 = v2;
    *(_DWORD *)v24 = 136315138;
    v97[1] = v24 + 4;
    v26 = FallbackToPommesMessage.delegatedUserDialogActs.getter();
    v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v28 = MEMORY[0x1C3BBEE9C](v26, v27);
    v29 = v17;
    v30 = v13;
    v32 = v31;
    swift_bridgeObjectRelease();
    v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v32, v117);
    v2 = v98;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v13 = v30;
    v17 = v29;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v21, v22, "PommesBridgeRequestProcessor received FallbackToPommesMessage with DUDAs: %s", v24, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v25, -1, -1);
    MEMORY[0x1C3BBFF64](v24, -1, -1);

  }
  else
  {

  }
  FallbackToPommesMessage.pommesCandidateId.getter();
  v33 = *(_QWORD *)((char *)v2 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  v34 = RequestProcessorBase.requestId.getter();
  v36 = v35;
  v37 = RequestProcessorBase.rootLevelRequestId.getter();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 128))(v17, v34, v36, v37, v38);
  swift_bridgeObjectRelease();
  v39 = swift_bridgeObjectRelease();
  v40 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v39);
  v41 = (int *)v109;
  if (*(_QWORD *)(v40 + 16))
  {
    v42 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v17);
    v43 = (uint64_t)v112;
    v45 = v107;
    v44 = v108;
    if ((v46 & 1) != 0)
    {
      outlined init with copy of PommesSearchRequest(*(_QWORD *)(v40 + 56) + *(_QWORD *)(v107 + 72) * v42, v108, type metadata accessor for PommesBridgeResultCandidateState);
      v47 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v45 + 56);
      v47(v44, 0, 1, v41);
    }
    else
    {
      v47 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v107 + 56);
      v47(v108, 1, 1, v41);
    }
  }
  else
  {
    v45 = v107;
    v44 = v108;
    v47 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v107 + 56);
    v47(v108, 1, 1, (int *)v109);
    v43 = (uint64_t)v112;
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v45 + 48))(v44, 1, v41) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v44, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    swift_retain_n();
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      v51 = v17;
      v52 = swift_slowAlloc();
      v117[0] = v52;
      *(_DWORD *)v50 = 136315138;
      v53 = RequestProcessorBase.requestId.getter();
      v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v117);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v48, v49, "Do not have prior state for this FallbackToPommesMessage for requestId: %s", v50, 0xCu);
      swift_arrayDestroy();
      v55 = v52;
      v17 = v51;
      MEMORY[0x1C3BBFF64](v55, -1, -1);
      MEMORY[0x1C3BBFF64](v50, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v76 = v102;
    v77 = (uint64_t)v101;
    v78 = v105;
    (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, *MEMORY[0x1E0D98910], v105);
    v79 = (uint64_t)v103;
    FallbackToPommesMessage.userId.getter();
    PommesBridgeRequestProcessor.publishNoQueryErrorMessage(pommesCandidateId:searchReason:userId:)((uint64_t)v17, v77, v79);
    (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v79, v106);
    (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v77, v78);
    return (*(uint64_t (**)(char *, _QWORD *))(v111 + 8))(v17, v13);
  }
  else
  {
    outlined init with take of PerformanceUtil.Ticket(v44, v43, type metadata accessor for PommesBridgeResultCandidateState);
    if ((specialized PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(v43) & 1) != 0)
    {
      *(_BYTE *)(v43 + v41[10]) = 0;
      *(_BYTE *)(v43 + v41[12]) = 1;
      v56 = *(void (**)(uint64_t, char *, _QWORD *))(v111 + 16);
      v57 = v100;
      v113 = v13;
      v56(v100, v17, v13);
      v58 = v99;
      outlined init with copy of PommesSearchRequest(v43, v99, type metadata accessor for PommesBridgeResultCandidateState);
      v47(v58, 0, 1, v41);
      v59 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                         + *v2
                                                                                         + 136))(v117);
      specialized Dictionary.subscript.setter(v58, v57);
      v59(v117, 0);
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.debug.getter();
      v62 = os_log_type_enabled(v60, v61);
      v97[0] = v17;
      if (v62)
      {
        v63 = (uint8_t *)swift_slowAlloc();
        v64 = swift_slowAlloc();
        v117[0] = v64;
        *(_DWORD *)v63 = 136315138;
        swift_beginAccess();
        v65 = PommesBridgeResultCandidateState.description.getter();
        v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v65, v66, v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v60, v61, "Fetched %s", v63, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v64, -1, -1);
        MEMORY[0x1C3BBFF64](v63, -1, -1);
      }

      v67 = Logger.logObject.getter();
      v68 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v67, v68))
      {
        v69 = (uint8_t *)swift_slowAlloc();
        v70 = swift_slowAlloc();
        v117[0] = v70;
        *(_DWORD *)v69 = 136315138;
        swift_beginAccess();
        v71 = (uint64_t *)(v43 + v41[8]);
        v72 = v43;
        v73 = *v71;
        v74 = v71[1];
        swift_bridgeObjectRetain();
        v115 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v117);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v67, v68, "Extracted Pommes query:\n    prState utterance: \"%s\"", v69, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v70, -1, -1);
        MEMORY[0x1C3BBFF64](v69, -1, -1);

        v75 = v113;
      }
      else
      {

        v75 = v113;
        v72 = v43;
      }
      v94 = v97[0];
      swift_beginAccess();
      v95 = v100;
      PommesBridgeResultCandidateState.pommesCandidateId.getter(v100);
      (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 456))(v95);
      v96 = *(void (**)(uint64_t, id))(v111 + 8);
      v96(v95, v75);
      v96(v94, v75);
      v93 = v72;
    }
    else
    {
      v81 = Logger.logObject.getter();
      v82 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v81, v82))
      {
        v83 = (uint8_t *)swift_slowAlloc();
        v84 = v17;
        v85 = swift_slowAlloc();
        v116[0] = v85;
        *(_DWORD *)v83 = 136315138;
        swift_beginAccess();
        v86 = PommesBridgeResultCandidateState.description.getter();
        v114 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, v116);
        v43 = (uint64_t)v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v81, v82, "Unable to override PommesCandidateResultState's PSC score %s", v83, 0xCu);
        swift_arrayDestroy();
        v88 = v85;
        v17 = v84;
        MEMORY[0x1C3BBFF64](v88, -1, -1);
        MEMORY[0x1C3BBFF64](v83, -1, -1);
      }

      v89 = v102;
      v90 = (uint64_t)v101;
      v91 = v105;
      (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v101, *MEMORY[0x1E0D98910], v105);
      v92 = (uint64_t)v103;
      FallbackToPommesMessage.userId.getter();
      PommesBridgeRequestProcessor.publishNoQueryErrorMessage(pommesCandidateId:searchReason:userId:)((uint64_t)v17, v90, v92);
      (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v92, v106);
      (*(void (**)(uint64_t, uint64_t))(v89 + 8))(v90, v91);
      (*(void (**)(char *, _QWORD *))(v111 + 8))(v17, v13);
      v93 = v43;
    }
    return outlined destroy of PommesSearchRequest(v93, type metadata accessor for PommesBridgeResultCandidateState);
  }
}

void PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1)
{
  _QWORD *v1;
  int *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t (*v58)(uint64_t);
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char v62;
  void (*v63)(uint64_t, _QWORD, uint64_t, int *);
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  void (*v80)(__int128 *, _QWORD);
  uint64_t v81;
  uint64_t v82;
  int **v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  BOOL v88;
  int *v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  os_log_type_t v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t (*v112)(char *, uint64_t, uint64_t);
  int v113;
  uint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void (*v120)(char *, uint64_t, uint64_t);
  uint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  void *v125;
  id v126;
  void *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  char *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  NSObject *v144;
  os_log_type_t v145;
  uint8_t *v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  void (*v154)(char *, char *, uint64_t);
  char *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(char *, uint64_t);
  char *v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  int *v169;
  uint64_t v170;
  uint64_t v171;
  NSObject *v172;
  os_log_type_t v173;
  uint8_t *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  char *v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  void (*v183)(uint64_t, uint64_t (*)(uint64_t, char), uint64_t);
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  NSObject *v187;
  os_log_type_t v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  NSObject *v193;
  os_log_type_t v194;
  uint8_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  unint64_t v199;
  int *v200;
  uint64_t v201;
  NSObject *v202;
  os_log_type_t v203;
  _BOOL4 v204;
  uint64_t v205;
  uint8_t *v206;
  uint64_t v207;
  char *v208;
  uint64_t v209;
  void *v210;
  uint64_t v211;
  uint64_t v212;
  void *v213;
  char *v214;
  char *v215;
  void (*v216)(_QWORD *__return_ptr);
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  void (*v223)(__int128 *, _QWORD);
  uint64_t v224;
  uint64_t v225;
  NSObject *v226;
  os_log_type_t v227;
  uint8_t *v228;
  uint8_t *v229;
  char *v230;
  uint64_t v231;
  _QWORD *v232;
  char *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  int *v239;
  uint64_t (*v240)(__int128 *);
  int v241;
  uint64_t v242;
  char *v243;
  char *v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  uint64_t v253;
  uint64_t v254;
  char *v255;
  uint64_t v256;
  void (*v257)(_QWORD *__return_ptr);
  uint64_t v258;
  uint64_t v259;
  int *v260;
  char *v261;
  char *v262;
  char *v263;
  char *v264;
  char *v265;
  char *v266;
  uint64_t v267;
  uint64_t v268;
  char *v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  uint64_t v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (*v288)(uint64_t, _QWORD, uint64_t, int *);
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _QWORD *v297;
  char *v298;
  __int128 aBlock;
  __int128 v300;
  uint64_t (*v301)();
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  __int128 v305;
  __int128 v306;

  v3 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  v4 = *((_QWORD *)v3 - 1);
  MEMORY[0x1E0C80A78](v3);
  v259 = (uint64_t)&v239 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = type metadata accessor for PommesSearchEagerInfo(0);
  v276 = *(_QWORD *)(v277 - 8);
  v6 = MEMORY[0x1E0C80A78](v277);
  v248 = (uint64_t)&v239 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v258 = (uint64_t)&v239 - v9;
  MEMORY[0x1E0C80A78](v8);
  v273 = (uint64_t)&v239 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v272 = (uint64_t)&v239 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v285 = (uint64_t)&v239 - v14;
  v271 = type metadata accessor for InsightRequestSummaryLogger();
  v270 = *(_QWORD *)(v271 - 8);
  MEMORY[0x1E0C80A78](v271);
  v269 = (char *)&v239 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = type metadata accessor for PommesSearchRequest(0);
  v282 = *(_QWORD *)(v284 - 8);
  MEMORY[0x1E0C80A78](v284);
  v291 = (uint64_t)&v239 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v283 = (uint64_t)&v239 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v292 = (char *)&v239 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v21);
  v293 = (char *)&v239 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v23);
  v266 = (char *)&v239 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v268 = type metadata accessor for UUID();
  v267 = *(_QWORD *)(v268 - 8);
  v25 = MEMORY[0x1E0C80A78](v268);
  v263 = (char *)&v239 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v265 = (char *)&v239 - v28;
  MEMORY[0x1E0C80A78](v27);
  v264 = (char *)&v239 - v29;
  v295 = type metadata accessor for PommesContext();
  v287 = *(_QWORD *)(v295 - 8);
  MEMORY[0x1E0C80A78](v295);
  v261 = (char *)&v239 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
  MEMORY[0x1E0C80A78](v31);
  v262 = (char *)&v239 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v33);
  v244 = (char *)&v239 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1E0C80A78](v35);
  v245 = (char *)&v239 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  v247 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  v246 = *(_QWORD *)(v247 - 8);
  MEMORY[0x1E0C80A78](v247);
  v243 = (char *)&v239 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v281 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v281);
  v39 = (char *)&v239 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v280 = type metadata accessor for ConversationSessionKey();
  v279 = *(_QWORD *)(v280 - 8);
  MEMORY[0x1E0C80A78](v280);
  v278 = (char *)&v239 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v257 = (void (*)(_QWORD *__return_ptr))type metadata accessor for DispatchWorkItemFlags();
  v256 = *((_QWORD *)v257 - 1);
  MEMORY[0x1E0C80A78](v257);
  v255 = (char *)&v239 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v254 = type metadata accessor for DispatchQoS();
  v253 = *(_QWORD *)(v254 - 8);
  MEMORY[0x1E0C80A78](v254);
  v252 = (char *)&v239 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v251 = type metadata accessor for DispatchQoS.QoSClass();
  v250 = *(_QWORD *)(v251 - 8);
  MEMORY[0x1E0C80A78](v251);
  v249 = (char *)&v239 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  v44 = type metadata accessor for UserID();
  v294 = *(_QWORD *)(v44 - 8);
  MEMORY[0x1E0C80A78](v44);
  v298 = (char *)&v239 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  v46 = type metadata accessor for PommesCandidateId();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = MEMORY[0x1E0C80A78](v46);
  v50 = (char *)&v239 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v48);
  v290 = (uint64_t)&v239 - v51;
  v52 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v53 = MEMORY[0x1E0C80A78](v52);
  v289 = (uint64_t)&v239 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = MEMORY[0x1E0C80A78](v53);
  v57 = (char *)&v239 - v56;
  v58 = *(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 120);
  v297 = v1;
  v59 = v58(v55);
  v60 = *(_QWORD *)(v59 + 16);
  v296 = a1;
  if (v60 && (v61 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v62 & 1) != 0))
  {
    outlined init with copy of PommesSearchRequest(*(_QWORD *)(v59 + 56) + *(_QWORD *)(v4 + 72) * v61, (uint64_t)v57, type metadata accessor for PommesBridgeResultCandidateState);
    v63 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v4 + 56);
    v64 = v57;
    v65 = 0;
  }
  else
  {
    v63 = *(void (**)(uint64_t, _QWORD, uint64_t, int *))(v4 + 56);
    v64 = v57;
    v65 = 1;
  }
  v288 = v63;
  v63((uint64_t)v64, v65, 1, v3);
  swift_bridgeObjectRelease();
  v66 = swift_allocBox();
  v68 = v67;
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v4 + 48))(v57, 1, v3) != 1)
  {
    v275 = v66;
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v57, v68, type metadata accessor for PommesBridgeResultCandidateState);
    *(_BYTE *)(v68 + v3[9]) = 1;
    v76 = v290;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v290, v296, v46);
    v77 = v68;
    v286 = v68;
    v78 = v289;
    outlined init with copy of PommesSearchRequest(v77, v289, type metadata accessor for PommesBridgeResultCandidateState);
    v288(v78, 0, 1, v3);
    v79 = v297;
    v240 = *(uint64_t (**)(__int128 *))(class metadata base offset for PommesBridgeRequestProcessor
                                                + *v297
                                                + 136);
    v80 = (void (*)(__int128 *, _QWORD))v240(&aBlock);
    v81 = v78;
    v82 = v286;
    specialized Dictionary.subscript.setter(v81, v76);
    v80(&aBlock, 0);
    v83 = (int **)(v82 + v3[8]);
    v84 = v83[1];
    v260 = *v83;
    v85 = v44;
    (*(void (**)(char *, uint64_t, uint64_t))(v294 + 16))(v298, v82 + v3[5], v44);
    v86 = v3[13];
    v87 = *(unsigned __int8 *)(v82 + v3[12]);
    v88 = *(_BYTE *)(v82 + v86) == 1;
    v89 = v3;
    v242 = v85;
    v274 = v84;
    v241 = v87;
    if (v88)
    {
      v90 = one-time initialization token for pommes;
      swift_bridgeObjectRetain();
      if (v90 != -1)
        swift_once();
      v91 = type metadata accessor for Logger();
      __swift_project_value_buffer(v91, (uint64_t)static Logger.pommes);
      v92 = Logger.logObject.getter();
      v93 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v92, v93))
      {
        v94 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v94 = 0;
        _os_log_impl(&dword_1C2356000, v92, v93, "Handling request for gesture based RC", v94, 2u);
        MEMORY[0x1C3BBFF64](v94, -1, -1);
      }

    }
    else
    {
      v95 = *(_QWORD *)((char *)v79 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin + 8);
      if (!v95)
      {
        swift_bridgeObjectRetain();
        goto LABEL_26;
      }
      v96 = *(_QWORD *)((char *)v79 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin);
      if (v96 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v95 == v97)
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v79 = v297;
      }
      else
      {
        v98 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v79 = v297;
        if ((v98 & 1) == 0)
          goto LABEL_26;
      }
      if ((objc_msgSend((id)objc_opt_self(), sel_isIntuitiveConversationAnnounceEnabled) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        if (one-time initialization token for pommes != -1)
          swift_once();
        v201 = type metadata accessor for Logger();
        __swift_project_value_buffer(v201, (uint64_t)static Logger.pommes);
        v202 = Logger.logObject.getter();
        v203 = static os_log_type_t.error.getter();
        v204 = os_log_type_enabled(v202, v203);
        v205 = v275;
        if (v204)
        {
          v206 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v206 = 0;
          _os_log_impl(&dword_1C2356000, v202, v203, "Pommes doesn't handle request for clientGenerated inputOrigin when intuitive conversation announce feature flag is disabled", v206, 2u);
          MEMORY[0x1C3BBFF64](v206, -1, -1);
        }

        type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
        v207 = v250;
        v208 = v249;
        v209 = v251;
        (*(void (**)(char *, _QWORD, uint64_t))(v250 + 104))(v249, *MEMORY[0x1E0DEF540], v251);
        v210 = (void *)static OS_dispatch_queue.global(qos:)();
        (*(void (**)(char *, uint64_t))(v207 + 8))(v208, v209);
        v211 = swift_allocObject();
        swift_weakInit();
        v212 = swift_allocObject();
        *(_QWORD *)(v212 + 16) = v211;
        *(_QWORD *)(v212 + 24) = v205;
        v301 = partial apply for closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:);
        v302 = v212;
        *(_QWORD *)&aBlock = MEMORY[0x1E0C809B0];
        *((_QWORD *)&aBlock + 1) = 1107296256;
        *(_QWORD *)&v300 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
        *((_QWORD *)&v300 + 1) = &block_descriptor_11;
        v213 = _Block_copy(&aBlock);
        swift_retain();
        swift_retain();
        v214 = v252;
        static DispatchQoS.unspecified.getter();
        v303 = MEMORY[0x1E0DEE9D8];
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
        _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
        v215 = v255;
        v216 = v257;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        MEMORY[0x1C3BBF154](0, v214, v215, v213);
        _Block_release(v213);

        (*(void (**)(char *, void (*)(_QWORD *__return_ptr)))(v256 + 8))(v215, v216);
        (*(void (**)(char *, uint64_t))(v253 + 8))(v214, v254);
        (*(void (**)(char *, uint64_t))(v294 + 8))(v298, v242);
        swift_release();
        swift_release();
        goto LABEL_84;
      }
    }
LABEL_26:
    v281 = swift_allocBox();
    v100 = v99;
    v257 = *(void (**)(_QWORD *__return_ptr))(class metadata base offset for PommesBridgeRequestProcessor
                                                       + *v79
                                                       + 144);
    v257(&aBlock);
    if (*((_QWORD *)&v300 + 1))
    {
      outlined init with copy of AppDataProviding((uint64_t)&aBlock, (uint64_t)&v303);
      outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
      __swift_project_boxed_opaque_existential_1(&v303, v304);
      v101 = v279;
      v102 = v39;
      v103 = v100;
      v104 = v89;
      v105 = v86;
      v106 = v278;
      v107 = v280;
      (*(void (**)(char *, _QWORD, uint64_t))(v279 + 104))(v278, *MEMORY[0x1E0D9EDB8], v280);
      dispatch thunk of ConversationSessionState.value(forKey:userId:)();
      v108 = v106;
      v86 = v105;
      v89 = v104;
      v100 = v103;
      v39 = v102;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v108, v107);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v303);
      if (*((_QWORD *)&v306 + 1))
      {
        v109 = v295;
        v110 = swift_dynamicCast();
        v111 = v287;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v287 + 56))(v100, v110 ^ 1u, 1, v109);
        goto LABEL_31;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
      v305 = 0u;
      v306 = 0u;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)&v305, (uint64_t *)&demangling cache variable for type metadata for Any?);
    v111 = v287;
    v109 = v295;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v287 + 56))(v100, 1, 1, v295);
LABEL_31:
    outlined init with copy of MediaUserStateCenter?(v100, (uint64_t)v39, &demangling cache variable for type metadata for PommesContext?);
    v112 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 48);
    v113 = v112(v39, 1, v109);
    v114 = outlined destroy of MediaUserStateCenter?((uint64_t)v39, &demangling cache variable for type metadata for PommesContext?);
    v88 = v113 == 1;
    v115 = v295;
    v116 = v297;
    v117 = v275;
    v239 = v89;
    if (v88)
      goto LABEL_39;
    ((void (*)(__int128 *__return_ptr, uint64_t))v257)(&aBlock, v114);
    if (*((_QWORD *)&v300 + 1))
    {
      outlined init with copy of AppDataProviding((uint64_t)&aBlock, (uint64_t)&v303);
      outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
      __swift_project_boxed_opaque_existential_1(&v303, v304);
      v118 = *MEMORY[0x1E0D9EDE8];
      v119 = v279;
      v120 = *(void (**)(char *, uint64_t, uint64_t))(v279 + 104);
      v257 = (void (*)(_QWORD *__return_ptr))v112;
      v121 = v86;
      v122 = v278;
      v123 = v280;
      v120(v278, v118, v280);
      v115 = v295;
      v116 = v297;
      dispatch thunk of ConversationSessionState.value(forKey:userId:)();
      v124 = v122;
      v86 = v121;
      v112 = (uint64_t (*)(char *, uint64_t, uint64_t))v257;
      (*(void (**)(char *, uint64_t))(v119 + 8))(v124, v123);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v303);
      if (*((_QWORD *)&v306 + 1))
      {
        type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SARDNativeFlowContextUpdate);
        if ((swift_dynamicCast() & 1) != 0)
        {
          v125 = (void *)aBlock;
          v126 = objc_msgSend((id)aBlock, sel_promptContextProto);
          if (v126)
          {
            v127 = v126;
            v128 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            v130 = v129;

            v301 = 0;
            aBlock = 0u;
            v300 = 0u;
            outlined copy of Data._Representation(v128, v130);
            BinaryDecodingOptions.init()();
            lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Com_Apple_Siri_Product_Proto_PromptContext and conformance Com_Apple_Siri_Product_Proto_PromptContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA0100], MEMORY[0x1E0DA0060]);
            v131 = v245;
            v132 = v247;
            Message.init(serializedData:extensions:partial:options:)();
            v224 = v246;
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v246 + 56))(v131, 0, 1, v132);
            (*(void (**)(char *, char *, uint64_t))(v224 + 32))(v243, v131, v132);
            if (one-time initialization token for pommes != -1)
              swift_once();
            v225 = type metadata accessor for Logger();
            __swift_project_value_buffer(v225, (uint64_t)static Logger.pommes);
            v226 = Logger.logObject.getter();
            v227 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v226, v227))
            {
              v228 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v228 = 0;
              _os_log_impl(&dword_1C2356000, v226, v227, "Adding promptContext to PommesContext", v228, 2u);
              v229 = v228;
              v117 = v275;
              MEMORY[0x1C3BBFF64](v229, -1, -1);
            }

            v115 = v295;
            if (v112((char *)v100, 1, v295))
            {
              (*(void (**)(char *, uint64_t))(v246 + 8))(v243, v247);

              outlined consume of Data._Representation(v128, v130);
            }
            else
            {
              v230 = v243;
              PommesContext.update(with:)();

              outlined consume of Data._Representation(v128, v130);
              (*(void (**)(char *, uint64_t))(v246 + 8))(v230, v247);
            }
            v116 = v297;
          }
          else
          {

          }
        }
LABEL_39:
        v133 = v112((char *)v100, 1, v115);
        v134 = MEMORY[0x1E0DEE9D8];
        v135 = (uint64_t)v293;
        if (!v133)
        {
          v136 = v287;
          v137 = v261;
          (*(void (**)(char *, uint64_t, uint64_t))(v287 + 16))(v261, v100, v115);
          v138 = (uint64_t)v262;
          PommesContext.exportLegacyNLContext()();
          (*(void (**)(char *, uint64_t))(v136 + 8))(v137, v115);
          v139 = type metadata accessor for Siri_Nlu_External_LegacyNLContext();
          v140 = *(_QWORD *)(v139 - 8);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v140 + 48))(v138, 1, v139) == 1)
          {
            outlined destroy of MediaUserStateCenter?(v138, &demangling cache variable for type metadata for Siri_Nlu_External_LegacyNLContext?);
            v134 = MEMORY[0x1E0DEE9D8];
          }
          else
          {
            v134 = MEMORY[0x1C3BBC868]();
            (*(void (**)(uint64_t, uint64_t))(v140 + 8))(v138, v139);
          }
        }
        if (*(_BYTE *)(v286 + v86) == 1)
        {
          v141 = *(_QWORD *)(v134 + 16);
          swift_bridgeObjectRelease();
          v142 = (uint64_t)v292;
          if (!v141)
          {
            if (one-time initialization token for pommes != -1)
              swift_once();
            v143 = type metadata accessor for Logger();
            __swift_project_value_buffer(v143, (uint64_t)static Logger.pommes);
            v144 = Logger.logObject.getter();
            v145 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v144, v145))
            {
              v146 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v146 = 0;
              _os_log_impl(&dword_1C2356000, v144, v145, "POMMES might not be expecting a confirmation, continuing to use the gesture based RC", v146, 2u);
              MEMORY[0x1C3BBFF64](v146, -1, -1);
            }

          }
        }
        else
        {
          swift_bridgeObjectRelease();
          v142 = (uint64_t)v292;
        }
        if (*(_QWORD *)((char *)v116 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext))
        {
          v147 = *(_QWORD *)((char *)v116 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext);
        }
        else
        {
          v295 = RequestProcessorBase.assistantId.getter();
          v287 = v148;
          v149 = v264;
          RequestProcessorBase.sessionId.getter();
          v150 = RequestProcessorBase.requestId.getter();
          v152 = v151;
          v153 = v267;
          v154 = *(void (**)(char *, char *, uint64_t))(v267 + 16);
          v155 = v265;
          v156 = v268;
          v154(v265, v149, v268);
          v157 = (uint64_t)v263;
          v154(v263, v155, v156);
          v158 = v275;
          v159 = type metadata accessor for DateInterval();
          v160 = (uint64_t)v266;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 56))(v266, 1, 1, v159);
          type metadata accessor for PommesRequestContext();
          swift_allocObject();
          v236 = v160;
          v117 = v158;
          v161 = v152;
          v116 = v297;
          v162 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v295, v287, v157, v150, v161, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, MEMORY[0x1E0DEE9D8], v236, MEMORY[0x1E0DEE9D8]);
          v163 = *(void (**)(char *, uint64_t))(v153 + 8);
          v135 = (uint64_t)v293;
          v164 = v155;
          v142 = (uint64_t)v292;
          v163(v164, v156);
          v165 = v149;
          v147 = v162;
          v163(v165, v156);
        }
        v166 = v296;
        if (*(_QWORD *)((char *)v116 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin + 8))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          v167 = InputOrigin.init(aceValue:)();
        }
        else
        {
          v168 = type metadata accessor for InputOrigin();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v168 - 8) + 56))(v135, 1, 1, v168);
          v167 = swift_retain();
        }
        MEMORY[0x1E0C80A78](v167);
        v169 = v274;
        *(&v239 - 10) = v260;
        *(&v239 - 9) = v169;
        v231 = v117;
        v232 = v116;
        v233 = v298;
        v234 = v147;
        v235 = v281;
        v236 = v135;
        LOBYTE(v237) = v241;
        v238 = v166;
        PommesSearchRequest.init(_:)((void (*)(_QWORD *))partial apply for closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:), v142);
        v170 = v283;
        outlined init with copy of MediaUserStateCenter?(v142, v283, &demangling cache variable for type metadata for PommesSearchRequest?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v282 + 48))(v170, 1, v284) == 1)
        {
          swift_bridgeObjectRelease();
          outlined destroy of MediaUserStateCenter?(v170, &demangling cache variable for type metadata for PommesSearchRequest?);
          if (one-time initialization token for pommes != -1)
            swift_once();
          v171 = type metadata accessor for Logger();
          __swift_project_value_buffer(v171, (uint64_t)static Logger.pommes);
          v172 = Logger.logObject.getter();
          v173 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v172, v173))
          {
            v174 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v174 = 0;
            _os_log_impl(&dword_1C2356000, v172, v173, "Unable to construct PommesSearchRequest! Search will not complete", v174, 2u);
            MEMORY[0x1C3BBFF64](v174, -1, -1);
          }

          swift_release();
        }
        else
        {
          v296 = v147;
          outlined init with take of PerformanceUtil.Ticket(v170, v291, type metadata accessor for PommesSearchRequest);
          if (one-time initialization token for insightRequestSummaryLogger != -1)
            swift_once();
          v175 = v271;
          v176 = __swift_project_value_buffer(v271, (uint64_t)static Logger.insightRequestSummaryLogger);
          v177 = v270;
          v178 = v269;
          (*(void (**)(char *, uint64_t, uint64_t))(v270 + 16))(v269, v176, v175);
          v179 = (_QWORD *)swift_allocObject();
          v179[2] = v116;
          v179[3] = v117;
          v179[4] = v260;
          v179[5] = v169;
          swift_retain();
          swift_retain();
          InsightRequestSummaryLogger.emitDebug(_:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v177 + 8))(v178, v175);
          v180 = *(_QWORD *)((char *)v116 + direct field offset for PommesBridgeRequestProcessor.pommesSearch);
          v181 = swift_allocObject();
          swift_weakInit();
          v182 = swift_allocObject();
          *(_QWORD *)(v182 + 16) = v181;
          *(_QWORD *)(v182 + 24) = v117;
          v183 = *(void (**)(uint64_t, uint64_t (*)(uint64_t, char), uint64_t))(*(_QWORD *)v180 + 240);
          swift_retain();
          swift_retain();
          v184 = v285;
          v183(v291, partial apply for closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:), v182);
          swift_release();
          swift_release();
          v185 = v272;
          outlined init with copy of MediaUserStateCenter?(v184, v272, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v276 + 48))(v185, 1, v277) != 1)
          {
            v190 = v273;
            outlined init with take of PerformanceUtil.Ticket(v185, v273, type metadata accessor for PommesSearchEagerInfo);
            if (one-time initialization token for pommes != -1)
              swift_once();
            v191 = type metadata accessor for Logger();
            __swift_project_value_buffer(v191, (uint64_t)static Logger.pommes);
            v192 = v258;
            outlined init with copy of PommesSearchRequest(v190, v258, type metadata accessor for PommesSearchEagerInfo);
            v193 = Logger.logObject.getter();
            v194 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v193, v194))
            {
              v195 = (uint8_t *)swift_slowAlloc();
              v196 = swift_slowAlloc();
              *(_QWORD *)&aBlock = v196;
              *(_DWORD *)v195 = 136315138;
              outlined init with copy of PommesSearchRequest(v192, v248, type metadata accessor for PommesSearchEagerInfo);
              v197 = v277;
              v198 = String.init<A>(describing:)();
              v303 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v198, v199, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              v142 = (uint64_t)v292;
              swift_bridgeObjectRelease();
              v135 = (uint64_t)v293;
              outlined destroy of PommesSearchRequest(v192, type metadata accessor for PommesSearchEagerInfo);
              _os_log_impl(&dword_1C2356000, v193, v194, "Updating prState with eager search information: %s", v195, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1C3BBFF64](v196, -1, -1);
              MEMORY[0x1C3BBFF64](v195, -1, -1);

              v200 = v239;
            }
            else
            {
              outlined destroy of PommesSearchRequest(v192, type metadata accessor for PommesSearchEagerInfo);

              v200 = v239;
              v197 = v277;
            }
            v217 = v286;
            swift_beginAccess();
            v218 = v259;
            outlined init with copy of PommesSearchRequest(v217, v259, type metadata accessor for PommesBridgeResultCandidateState);
            v219 = v218 + v200[14];
            outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
            v220 = v273;
            outlined init with copy of PommesSearchRequest(v273, v219, type metadata accessor for PommesSearchEagerInfo);
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v276 + 56))(v219, 0, 1, v197);
            v221 = v290;
            PommesBridgeResultCandidateState.pommesCandidateId.getter(v290);
            v222 = v289;
            outlined init with copy of PommesSearchRequest(v218, v289, type metadata accessor for PommesBridgeResultCandidateState);
            v288(v222, 0, 1, v200);
            v223 = (void (*)(__int128 *, _QWORD))v240(&aBlock);
            specialized Dictionary.subscript.setter(v222, v221);
            v223(&aBlock, 0);
            swift_release();
            outlined destroy of PommesSearchRequest(v220, type metadata accessor for PommesSearchEagerInfo);
            outlined destroy of MediaUserStateCenter?(v285, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
            outlined destroy of PommesSearchRequest(v291, type metadata accessor for PommesSearchRequest);
            outlined destroy of MediaUserStateCenter?(v142, &demangling cache variable for type metadata for PommesSearchRequest?);
            outlined destroy of MediaUserStateCenter?(v135, &demangling cache variable for type metadata for InputOrigin?);
            (*(void (**)(char *, uint64_t))(v294 + 8))(v298, v242);
            outlined destroy of PommesSearchRequest(v218, type metadata accessor for PommesBridgeResultCandidateState);
            goto LABEL_83;
          }
          outlined destroy of MediaUserStateCenter?(v185, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
          if (one-time initialization token for pommes != -1)
            swift_once();
          v186 = type metadata accessor for Logger();
          __swift_project_value_buffer(v186, (uint64_t)static Logger.pommes);
          v187 = Logger.logObject.getter();
          v188 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v187, v188))
          {
            v189 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v189 = 0;
            _os_log_impl(&dword_1C2356000, v187, v188, "No eager information available at POMMES search start", v189, 2u);
            MEMORY[0x1C3BBFF64](v189, -1, -1);
          }

          swift_release();
          outlined destroy of MediaUserStateCenter?(v285, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
          outlined destroy of PommesSearchRequest(v291, type metadata accessor for PommesSearchRequest);
        }
        outlined destroy of MediaUserStateCenter?(v142, &demangling cache variable for type metadata for PommesSearchRequest?);
        outlined destroy of MediaUserStateCenter?(v135, &demangling cache variable for type metadata for InputOrigin?);
        (*(void (**)(char *, uint64_t))(v294 + 8))(v298, v242);
LABEL_83:
        swift_release();
LABEL_84:
        swift_release();
        return;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)&aBlock, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
      v305 = 0u;
      v306 = 0u;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)&v305, (uint64_t *)&demangling cache variable for type metadata for Any?);
    goto LABEL_39;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v57, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  swift_deallocBox();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v69 = type metadata accessor for Logger();
  __swift_project_value_buffer(v69, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v50, v296, v46);
  v70 = Logger.logObject.getter();
  v71 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v70, v71))
  {
    v72 = (uint8_t *)swift_slowAlloc();
    v73 = swift_slowAlloc();
    *(_QWORD *)&aBlock = v73;
    *(_DWORD *)v72 = 136315138;
    v74 = PommesCandidateId.description.getter();
    v303 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v74, v75, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v46);
    _os_log_impl(&dword_1C2356000, v70, v71, "Unable to retrieve mutable prState for pommesCandidateId=%s", v72, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v73, -1, -1);
    MEMORY[0x1C3BBFF64](v72, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v50, v46);
  }

}

uint64_t closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  void *v10;
  _BYTE *v11;
  _BYTE v12[24];

  v0 = type metadata accessor for PommesCandidateId();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = &v12[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v4 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = swift_projectBox();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v9 = (_QWORD *)result;
    swift_beginAccess();
    outlined init with copy of PommesSearchRequest(v7, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v3);
    outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    v10 = (void *)swift_allocError();
    *v11 = 0;
    (*(void (**)(_BYTE *, void *, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                     + *v9
                                                     + 472))(v3, v10, 1);

    swift_release();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  }
  return result;
}

uint64_t closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  void *v55;
  NSObject *v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  void *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  id v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  void *v84;
  id v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  os_log_t v89;
  uint64_t v90;
  int *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  void *v106;
  id v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  int EnumCaseMultiPayload;
  int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  NSObject *v119;
  os_log_type_t v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  NSObject *v129;
  os_log_type_t v130;
  uint8_t *v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  void *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  id v140;
  void *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t result;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  void (*v165)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v166;
  char *v167;
  int v168;
  id v169;
  void *v170;
  id v171;
  id v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  NSObject *v184;
  os_log_type_t v185;
  uint8_t *v186;
  uint8_t *v187;
  void (*v188)(char *, uint64_t);
  uint64_t v189;
  _QWORD v190[3];
  char *v191;
  _QWORD *v192;
  int v193;
  uint64_t v194;
  os_log_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  char *v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  void *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  int v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  id v241;
  uint64_t v242[4];

  v222 = a7;
  v238 = a6;
  v235 = a3;
  v234 = a2;
  v228 = a1;
  v224 = a11;
  v242[3] = *MEMORY[0x1E0C80C00];
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v14);
  v207 = (uint64_t)v190 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
  MEMORY[0x1E0C80A78](v16);
  v196 = (char *)v190 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v200 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v201 = *(_QWORD *)(v200 - 8);
  MEMORY[0x1E0C80A78](v200);
  v202 = (char *)v190 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v210 = type metadata accessor for SiriUserInput();
  v209 = *(_QWORD *)(v210 - 8);
  v19 = MEMORY[0x1E0C80A78](v210);
  v199 = (char *)v190 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v203 = (char *)v190 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1E0C80A78](v22);
  v220 = (uint64_t)v190 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
  v25 = MEMORY[0x1E0C80A78](v24);
  v208 = (uint64_t)v190 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v28 = (char *)v190 - v27;
  v198 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v29 = MEMORY[0x1E0C80A78](v198);
  v197 = (uint64_t)v190 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v204 = (uint64_t)v190 - v32;
  MEMORY[0x1E0C80A78](v31);
  v217 = (uint64_t)v190 - v33;
  v206 = type metadata accessor for NLXResultCandidate();
  v34 = MEMORY[0x1E0C80A78](v206);
  v211 = (uint64_t)v190 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v205 = (_QWORD *)((char *)v190 - v36);
  v223 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v223);
  v225 = (uint64_t)v190 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v216 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v216);
  v214 = (uint64_t)v190 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v232 = type metadata accessor for PommesCandidateId();
  v231 = *(_QWORD *)(v232 - 8);
  MEMORY[0x1E0C80A78](v232);
  v212 = (uint64_t)v190 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  v233 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1E0C80A78](v233);
  v41 = (char *)v190 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v215 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v42 = MEMORY[0x1E0C80A78](v215);
  v213 = (uint64_t)v190 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v42);
  v45 = (char *)v190 - v44;
  v46 = type metadata accessor for UserID();
  v236 = *(_QWORD *)(v46 - 8);
  MEMORY[0x1E0C80A78](v46);
  v48 = (char *)v190 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  v237 = swift_projectBox();
  v49 = a8;
  v229 = swift_projectBox();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v219 = v28;
  v230 = a10;
  v50 = type metadata accessor for Logger();
  v51 = __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v236 + 16))(v48, v238, v46);
  v226 = a9;
  outlined init with copy of MediaUserStateCenter?(a9, (uint64_t)v45, &demangling cache variable for type metadata for InputOrigin?);
  swift_retain_n();
  v52 = v235;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  v221 = v46;
  v53 = v52;
  v54 = a4;
  v55 = v222;
  swift_retain_n();
  swift_retain_n();
  v218 = v51;
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.info.getter();
  v58 = os_log_type_enabled(v56, (os_log_type_t)v57);
  v227 = a5;
  if (v58)
  {
    v193 = v57;
    v195 = v56;
    v190[1] = v54;
    v59 = swift_slowAlloc();
    v191 = v45;
    v60 = v59;
    v192 = (_QWORD *)swift_slowAlloc();
    v194 = swift_slowAlloc();
    v242[0] = v194;
    *(_DWORD *)v60 = 136317442;
    swift_bridgeObjectRetain();
    v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v234, v53, v242);
    v190[2] = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v60 + 12) = 2080;
    v61 = v237;
    swift_beginAccess();
    outlined init with copy of PommesSearchRequest(v61, (uint64_t)v41, type metadata accessor for PommesBridgeResultCandidateState);
    v62 = v212;
    PommesBridgeResultCandidateState.pommesCandidateId.getter(v212);
    outlined destroy of PommesSearchRequest((uint64_t)v41, type metadata accessor for PommesBridgeResultCandidateState);
    v63 = PommesCandidateId.description.getter();
    v65 = v64;
    (*(void (**)(uint64_t, uint64_t))(v231 + 8))(v62, v232);
    v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v63, v65, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 22) = 1024;
    LODWORD(v63) = *(unsigned __int8 *)(a5 + direct field offset for PommesBridgeRequestProcessor.isMultiUser);
    swift_release();
    LODWORD(v241) = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v60 + 28) = 2080;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EFA0]);
    v66 = v221;
    v67 = dispatch thunk of CustomStringConvertible.description.getter();
    v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v67, v68, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v236 + 8))(v48, v66);
    *(_WORD *)(v60 + 38) = 2080;
    v241 = v55;
    type metadata accessor for PommesRequestContext();
    swift_retain();
    v69 = String.init<A>(describing:)();
    v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v71 = v55;
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 48) = 2080;
    v72 = v229;
    swift_beginAccess();
    outlined init with copy of MediaUserStateCenter?(v72, v214, &demangling cache variable for type metadata for PommesContext?);
    v73 = String.init<A>(describing:)();
    v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 58) = 2080;
    v75 = (uint64_t)v191;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v191, v213, &demangling cache variable for type metadata for InputOrigin?);
    v76 = String.init<A>(describing:)();
    v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v75, &demangling cache variable for type metadata for InputOrigin?);
    *(_WORD *)(v60 + 68) = 2080;
    v78 = v237;
    swift_beginAccess();
    v79 = v233;
    v241 = *(id *)(v78 + *(int *)(v233 + 28));
    v80 = v241;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AFSpeechPackage?);
    v81 = String.init<A>(describing:)();
    v241 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v81, v82, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v60 + 78) = 1024;
    LODWORD(v241) = v230 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v60 + 84) = 2112;
    swift_beginAccess();
    v83 = *(int *)(v79 + 28);
    v84 = *(void **)(v78 + v83);
    if (v84)
    {
      v241 = *(id *)(v78 + v83);
      v85 = v84;
    }
    else
    {
      v241 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v86 = v228;
    v88 = v192;
    *v192 = v84;
    swift_release_n();
    v89 = v195;
    _os_log_impl(&dword_1C2356000, v195, (os_log_type_t)v193, "Constructing Pommes search request:\n    utterance: \"%s\",\n    %s,\n    isMultiUser: %{BOOL}d,\n    userId=%s,\n    requestContext: %s,\n    pommesContext: %s,\n    inputOrigin: %s,\n    asrSpeechPackage: %s,\n    isFallback=%{BOOL}d,\n    isGestureBased=%@", (uint8_t *)v60, 0x5Eu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v88, -1, -1);
    v90 = v194;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v90, -1, -1);
    MEMORY[0x1C3BBFF64](v60, -1, -1);

    a5 = v227;
    v87 = v235;
    v55 = v71;
  }
  else
  {
    swift_release_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    (*(void (**)(char *, uint64_t))(v236 + 8))(v48, v221);
    swift_release_n();
    swift_release_n();
    outlined destroy of MediaUserStateCenter?((uint64_t)v45, &demangling cache variable for type metadata for InputOrigin?);

    swift_release_n();
    v86 = v228;
    v87 = v53;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *v86 = v234;
  v86[1] = v87;
  v91 = (int *)type metadata accessor for PommesSearchRequest.Builder(0);
  v92 = (uint64_t)v86 + v91[6];
  outlined destroy of MediaUserStateCenter?(v92, &demangling cache variable for type metadata for PommesCandidateId?);
  v93 = v231;
  v94 = v232;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v231 + 16))(v92, v224, v232);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v92, 0, 1, v94);
  v95 = RequestProcessorBase.rootLevelRequestId.getter();
  v97 = v96;
  v98 = (uint64_t *)((char *)v86 + v91[7]);
  swift_bridgeObjectRelease();
  *v98 = v95;
  v98[1] = v97;
  *((_BYTE *)v86 + v91[9]) = *(_BYTE *)(a5 + direct field offset for PommesBridgeRequestProcessor.isMultiUser);
  v99 = v91[8];
  swift_retain();
  swift_release();
  *(uint64_t *)((char *)v86 + v99) = (uint64_t)v55;
  v100 = v229;
  swift_beginAccess();
  v101 = (uint64_t)v86 + v91[11];
  outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for PommesContext?);
  outlined init with copy of MediaUserStateCenter?(v100, v101, &demangling cache variable for type metadata for PommesContext?);
  outlined assign with copy of InputOrigin?(v226, (uint64_t)v86 + v91[12], &demangling cache variable for type metadata for InputOrigin?);
  v102 = v237;
  swift_beginAccess();
  v103 = v233;
  v104 = *(void **)(v102 + *(int *)(v233 + 28));
  v105 = v91[17];
  v106 = *(void **)((char *)v86 + v105);
  v107 = v104;

  *(uint64_t *)((char *)v86 + v105) = (uint64_t)v104;
  *((_BYTE *)v86 + v91[18]) = v230 & 1;
  v108 = UserID.sharedUserId.getter();
  v110 = v109;
  v111 = (uint64_t *)((char *)v86 + v91[19]);
  swift_bridgeObjectRelease();
  *v111 = v108;
  v111[1] = v110;
  swift_beginAccess();
  *(uint64_t *)((char *)v86 + v91[20]) = *(_QWORD *)(v102 + *(int *)(v103 + 24));
  *((_BYTE *)v86 + v91[21]) = *(_BYTE *)(v102 + *(int *)(v103 + 52));
  v112 = v225;
  outlined init with copy of PommesSearchRequest(v102, v225, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_bridgeObjectRelease();
    v126 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    v127 = v205;
    outlined init with take of PerformanceUtil.Ticket(v112 + *(int *)(v126 + 48), (uint64_t)v205, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v128 = v211;
    outlined init with copy of PommesSearchRequest((uint64_t)v127, v211, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v129 = Logger.logObject.getter();
    v130 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v129, v130))
    {
      v131 = (uint8_t *)swift_slowAlloc();
      v132 = swift_slowAlloc();
      v240 = v132;
      *(_DWORD *)v131 = 136315138;
      v133 = NLXResultCandidate.description.getter();
      v239 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v133, v134, &v240);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of PommesSearchRequest(v211, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
      _os_log_impl(&dword_1C2356000, v129, v130, "Pommes search request parse detail: %s", v131, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v132, -1, -1);
      MEMORY[0x1C3BBFF64](v131, -1, -1);
    }
    else
    {
      outlined destroy of PommesSearchRequest(v128, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    }

    v150 = *v127;
    v151 = v91[14];
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v86 + v151) = v150;
    v152 = v206;
    v153 = (uint64_t *)((char *)v127 + *(int *)(v206 + 24));
    v154 = *v153;
    v155 = v153[1];
    v156 = (uint64_t *)((char *)v86 + v91[16]);
    swift_bridgeObjectRelease();
    *v156 = v154;
    v156[1] = v155;
    *((_BYTE *)v86 + v91[10]) = 0;
    v157 = (uint64_t)v127 + *(int *)(v152 + 20);
    v158 = (uint64_t)v86 + v91[15];
    return outlined assign with take of MediaUserStateCenter?(v157, v158, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  if (EnumCaseMultiPayload != 1)
  {
    v136 = *(void **)v112;
    v135 = *(_QWORD *)(v112 + 8);
    v137 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
    v138 = v207;
    outlined init with take of PommesSearchReason?(v112 + *(int *)(v137 + 64), v207, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    v139 = v91[14];
    swift_bridgeObjectRelease();
    *(uint64_t *)((char *)v86 + v139) = v135;
    v140 = objc_msgSend(v136, sel_responseVariantResult);
    if (v140)
    {
      v141 = v140;
      v142 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v144 = v143;

    }
    else
    {

      v142 = 0;
      v144 = 0;
    }
    v180 = v227;
    v181 = (uint64_t *)((char *)v86 + v91[16]);
    swift_bridgeObjectRelease();
    *v181 = v142;
    v181[1] = v144;
    *((_BYTE *)v86 + v91[10]) = *(_BYTE *)(v180 + direct field offset for PommesBridgeRequestProcessor.isOnlyUserInHome);
    v158 = (uint64_t)v86 + v91[15];
    v157 = v138;
    return outlined assign with take of MediaUserStateCenter?(v157, v158, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v114 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  v115 = v112 + v114[24];
  v116 = v112 + v114[28];
  v117 = v217;
  outlined init with take of PommesSearchReason?(v112 + v114[16], v217, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  outlined init with take of PommesSearchReason?(v115, (uint64_t)v219, &demangling cache variable for type metadata for SiriUserInput?);
  outlined init with take of PommesSearchReason?(v116, v220, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  v118 = v204;
  outlined init with copy of MediaUserStateCenter?(v117, v204, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v119 = Logger.logObject.getter();
  v120 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v119, v120))
  {
    v121 = (uint8_t *)swift_slowAlloc();
    v122 = swift_slowAlloc();
    v240 = v122;
    *(_DWORD *)v121 = 136315138;
    outlined init with copy of MediaUserStateCenter?(v118, v197, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v123 = String.init<A>(describing:)();
    v239 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v123, v124, &v240);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v86 = v228;
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v118, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    _os_log_impl(&dword_1C2356000, v119, v120, "Pommes search request parse detail: %s", v121, 0xCu);
    swift_arrayDestroy();
    v125 = v122;
    v117 = v217;
    MEMORY[0x1C3BBFF64](v125, -1, -1);
    MEMORY[0x1C3BBFF64](v121, -1, -1);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?(v118, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  }

  v145 = v210;
  v146 = v209;
  outlined assign with copy of InputOrigin?(v117, (uint64_t)v86 + v91[13], (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  *((_BYTE *)v86 + v91[10]) = *(_BYTE *)(v227 + direct field offset for PommesBridgeRequestProcessor.isOnlyUserInHome);
  v147 = (uint64_t)v219;
  v148 = v208;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v219, v208, &demangling cache variable for type metadata for SiriUserInput?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v146 + 48))(v148, 1, v145) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v147, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v117, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    return outlined destroy of MediaUserStateCenter?(v148, &demangling cache variable for type metadata for SiriUserInput?);
  }
  v159 = v203;
  (*(void (**)(char *, uint64_t, uint64_t))(v146 + 32))(v203, v148, v145);
  v160 = v202;
  PommesBridgeRequestProcessor.buildRewriteMessage(rewriteUtterance:rewriteReason:)(v234, v235, v220);
  v161 = (uint64_t)v86 + v91[5];
  outlined destroy of MediaUserStateCenter?(v161, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  v162 = v201;
  v163 = v160;
  v164 = v200;
  (*(void (**)(uint64_t, char *, uint64_t))(v201 + 16))(v161, v163, v200);
  v165 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v162 + 56);
  v166 = v164;
  v165(v161, 0, 1, v164);
  v167 = v199;
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))(v199, v159, v145);
  v168 = (*(uint64_t (**)(char *, uint64_t))(v146 + 88))(v167, v145);
  if (v168 == *MEMORY[0x1E0D9E598])
  {
    (*(void (**)(char *, uint64_t))(v146 + 96))(v167, v145);
    v169 = *(id *)v167;
    v170 = *(void **)((char *)v86 + v105);
    v171 = *(id *)v167;

    *(uint64_t *)((char *)v86 + v105) = (uint64_t)v169;
    v172 = objc_msgSend(v171, sel_recognition);
    if (!v172)
    {

      (*(void (**)(char *, uint64_t))(v201 + 8))(v202, v166);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v203, v145);
      outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v219, &demangling cache variable for type metadata for SiriUserInput?);
      return outlined destroy of MediaUserStateCenter?(v117, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    }
    v173 = v172;
    v174 = AFSpeechRecognition.toAsrHypotheses()();

    v175 = *(_QWORD *)(v174 + 16);
    v176 = type metadata accessor for Siri_Nlu_External_AsrHypothesis();
    v177 = *(_QWORD *)(v176 - 8);
    if (v175)
    {
      v178 = (uint64_t)v196;
      (*(void (**)(char *, unint64_t, uint64_t))(v177 + 16))(v196, v174 + ((*(unsigned __int8 *)(v177 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v177 + 80)), v176);
      v179 = 0;
    }
    else
    {
      v179 = 1;
      v178 = (uint64_t)v196;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v177 + 56))(v178, v179, 1, v176);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v178, 1, v176) == 1)
    {

      (*(void (**)(char *, uint64_t))(v201 + 8))(v202, v166);
      (*(void (**)(char *, uint64_t))(v146 + 8))(v203, v145);
      outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v219, &demangling cache variable for type metadata for SiriUserInput?);
      outlined destroy of MediaUserStateCenter?(v217, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      return outlined destroy of MediaUserStateCenter?(v178, &demangling cache variable for type metadata for Siri_Nlu_External_AsrHypothesis?);
    }
    v182 = Siri_Nlu_External_AsrHypothesis.utterance.getter();
    v183 = v189;

    (*(void (**)(char *, uint64_t))(v201 + 8))(v202, v166);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v203, v145);
    outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v219, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v217, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    (*(void (**)(uint64_t, uint64_t))(v177 + 8))(v178, v176);
    goto LABEL_39;
  }
  if (v168 == *MEMORY[0x1E0D9E590])
  {
    (*(void (**)(char *, uint64_t))(v201 + 8))(v202, v166);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v203, v145);
    outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v147, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v117, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    (*(void (**)(char *, uint64_t))(v146 + 96))(v167, v145);
    v182 = *(_QWORD *)v167;
    v183 = *((_QWORD *)v167 + 1);
LABEL_39:
    result = swift_bridgeObjectRelease();
    *v86 = v182;
    v86[1] = v183;
    return result;
  }
  v184 = Logger.logObject.getter();
  v185 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v184, v185))
  {
    v186 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v186 = 0;
    _os_log_impl(&dword_1C2356000, v184, v185, "originalUserInput is nil or unknown type", v186, 2u);
    v187 = v186;
    v147 = (uint64_t)v219;
    MEMORY[0x1C3BBFF64](v187, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v201 + 8))(v202, v166);
  v188 = *(void (**)(char *, uint64_t))(v146 + 8);
  v188(v203, v145);
  outlined destroy of MediaUserStateCenter?(v220, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  outlined destroy of MediaUserStateCenter?(v147, &demangling cache variable for type metadata for SiriUserInput?);
  outlined destroy of MediaUserStateCenter?(v117, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  return ((uint64_t (*)(char *, uint64_t))v188)(v167, v145);
}

uint64_t implicit closure #5 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  unint64_t v23;
  _QWORD *v24;
  Swift::String v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  _QWORD *v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  _QWORD *v34;
  Swift::String v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  unint64_t v45;
  _QWORD *v46;
  Swift::String v47;
  Swift::String v48;
  unint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  Swift::String v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;

  v58._countAndFlagsBits = a3;
  v58._object = a4;
  v4 = type metadata accessor for PommesCandidateId();
  v56 = *(_QWORD *)(v4 - 8);
  v57 = v4;
  MEMORY[0x1E0C80A78](v4);
  v54 = (uint64_t)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1E0C80A78](v6);
  v53 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for UUID();
  v51 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = swift_projectBox();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 72);
  v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v15 = swift_allocObject();
  v55 = v15;
  *(_OWORD *)(v15 + 16) = xmmword_1C24FE390;
  v16 = v15 + v14;
  v17 = v15 + v14 + *(int *)(v11 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v17, "PommesBridge");
  *(_BYTE *)(v17 + 13) = 0;
  *(_WORD *)(v17 + 14) = -5120;
  v18 = (_QWORD *)(v16 + v13 + *(int *)(v11 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *v18 = 0xD000000000000017;
  v18[1] = 0x80000001C2501D50;
  v19 = (_QWORD *)(v16 + 2 * v13 + *(int *)(v11 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  v59 = 0;
  v60 = 0xE000000000000000;
  v20._countAndFlagsBits = 0;
  v20._object = (void *)0xE000000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.append(_:)(v22);
  v23 = v60;
  *v19 = v59;
  v19[1] = v23;
  v24 = (_QWORD *)(v16 + 3 * v13 + *(int *)(v11 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  v59 = 0;
  v60 = 0xE000000000000000;
  v25._countAndFlagsBits = 0;
  v25._object = (void *)0xE000000000000000;
  String.append(_:)(v25);
  RequestProcessorBase.sessionId.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v10, v8);
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  String.append(_:)(v27);
  v28 = v60;
  *v24 = v59;
  v24[1] = v28;
  v29 = (_QWORD *)(v16 + 4 * v13 + *(int *)(v11 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  v59 = 0;
  v60 = 0xE000000000000000;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  String.append(_:)(v32);
  v33 = v60;
  *v29 = v59;
  v29[1] = v33;
  v34 = (_QWORD *)(v16 + 5 * v13 + *(int *)(v11 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  v61 = 0;
  v62 = 0xE000000000000000;
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  String.append(_:)(v35);
  v36 = v52;
  swift_beginAccess();
  v37 = v53;
  outlined init with copy of PommesSearchRequest(v36, v53, type metadata accessor for PommesBridgeResultCandidateState);
  v38 = v54;
  PommesBridgeResultCandidateState.pommesCandidateId.getter(v54);
  outlined destroy of PommesSearchRequest(v37, type metadata accessor for PommesBridgeResultCandidateState);
  v39 = v38;
  v40 = PommesCandidateId.asResultCandidateId.getter();
  v42 = v41;
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v39, v57);
  v43._countAndFlagsBits = v40;
  v43._object = v42;
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  String.append(_:)(v44);
  v45 = v62;
  *v34 = v61;
  v34[1] = v45;
  v46 = (_QWORD *)(v16 + 6 * v13 + *(int *)(v11 + 48));
  static InsightRequestSummaryKey.utterance.getter();
  v61 = 0;
  v62 = 0xE000000000000000;
  v47._countAndFlagsBits = 0;
  v47._object = (void *)0xE000000000000000;
  String.append(_:)(v47);
  String.append(_:)(v58);
  v48._countAndFlagsBits = 0;
  v48._object = (void *)0xE000000000000000;
  String.append(_:)(v48);
  v49 = v62;
  *v46 = v61;
  v46[1] = v49;
  return v55;
}

uint64_t closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t result;
  _QWORD *v13;
  _BYTE v14[24];

  v4 = type metadata accessor for PommesCandidateId();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = &v14[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1E0C80A78](v8);
  v10 = &v14[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = swift_projectBox();
  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v13 = (_QWORD *)result;
    swift_beginAccess();
    outlined init with copy of PommesSearchRequest(v11, (uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v7);
    outlined destroy of PommesSearchRequest((uint64_t)v10, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(_BYTE *, uint64_t, _QWORD))(class metadata base offset for PommesBridgeRequestProcessor
                                                     + *v13
                                                     + 472))(v7, a1, a2 & 1);
    swift_release();
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  }
  return result;
}

uint64_t PommesBridgeRequestProcessor.buildRewriteMessage(rewriteUtterance:rewriteReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  int v20;
  void (*v21)(char *, _QWORD, uint64_t);
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
  v23 = *(_QWORD *)(v6 - 8);
  v24 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v23 - v17;
  Apple_Parsec_Siri_V2alpha_RewrittenUtterance.init()();
  swift_bridgeObjectRetain();
  MEMORY[0x1C3BBBE54](a1, a2);
  outlined init with copy of MediaUserStateCenter?(a3, (uint64_t)v11, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
    return outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v18, v11, v12);
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v16, v18, v12);
  v20 = (*(uint64_t (**)(char *, uint64_t))(v13 + 88))(v16, v12);
  v21 = *(void (**)(char *, _QWORD, uint64_t))(v23 + 104);
  if (v20 == *MEMORY[0x1E0D9DF08])
  {
    v21(v8, *MEMORY[0x1E0D6E530], v24);
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewriteType.setter();
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v18, v12);
  }
  else
  {
    v21(v8, *MEMORY[0x1E0D6E550], v24);
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewriteType.setter();
    v22 = *(void (**)(char *, uint64_t))(v13 + 8);
    v22(v18, v12);
    return ((uint64_t (*)(char *, uint64_t))v22)(v16, v12);
  }
}

uint64_t implicit closure #1 in closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  unint64_t v20;
  _QWORD *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  unint64_t v25;
  _QWORD *v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  unint64_t v30;
  _QWORD *v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(unint64_t, uint64_t, uint64_t);
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v44 = a5;
  v48 = a3;
  v49 = a4;
  v46 = a2;
  v5 = type metadata accessor for UUID();
  v45 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 72);
  v11 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_1C24FE3A0;
  v47 = v12;
  v13 = v12 + v11;
  v14 = v12 + v11 + *(int *)(v8 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v14, "PommesBridge");
  *(_BYTE *)(v14 + 13) = 0;
  *(_WORD *)(v14 + 14) = -5120;
  v15 = (_QWORD *)(v13 + v10 + *(int *)(v8 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *v15 = 0xD000000000000018;
  v15[1] = 0x80000001C2501D70;
  v16 = (_QWORD *)(v13 + 2 * v10 + *(int *)(v8 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  v50 = 0;
  v51 = 0xE000000000000000;
  v17._countAndFlagsBits = 0;
  v17._object = (void *)0xE000000000000000;
  String.append(_:)(v17);
  v18._countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.append(_:)(v19);
  v20 = v51;
  *v16 = v50;
  v16[1] = v20;
  v21 = (_QWORD *)(v13 + 3 * v10 + *(int *)(v8 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  v50 = 0;
  v51 = 0xE000000000000000;
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.append(_:)(v22);
  RequestProcessorBase.sessionId.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v5);
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  String.append(_:)(v24);
  v25 = v51;
  *v21 = v50;
  v21[1] = v25;
  v26 = (_QWORD *)(v13 + 4 * v10 + *(int *)(v8 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  v50 = 0;
  v51 = 0xE000000000000000;
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  String.append(_:)(v27);
  v28._countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.append(_:)(v29);
  v30 = v51;
  *v26 = v50;
  v26[1] = v30;
  v31 = (_QWORD *)(v13 + 5 * v10 + *(int *)(v8 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  v50 = 0;
  v51 = 0xE000000000000000;
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  String.append(_:)(v32);
  v33._countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  String.append(_:)(v34);
  v35 = v51;
  *v31 = v50;
  v31[1] = v35;
  v36 = (_QWORD *)(v13 + 6 * v10 + *(int *)(v8 + 48));
  if (one-time initialization token for isFromTimeoutHandler != -1)
    swift_once();
  v37 = type metadata accessor for InsightRequestSummaryKey();
  v38 = __swift_project_value_buffer(v37, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  v39 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v39(v13 + 6 * v10, v38, v37);
  *v36 = 0x65736C6166;
  v36[1] = 0xE500000000000000;
  v40 = *(int *)(v8 + 48);
  if (*v48 != -1)
    swift_once();
  v41 = (_QWORD *)(v13 - v10 + 8 * v10 + v40);
  v42 = __swift_project_value_buffer(v37, v49);
  v39(v13 - v10 + 8 * v10, v42, v37);
  *v41 = 1702195828;
  v41[1] = 0xE400000000000000;
  return v47;
}

uint64_t implicit closure #12 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  _QWORD *v25;
  Swift::String v26;
  Swift::String v27;
  unint64_t v28;
  _QWORD *v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  unint64_t v33;
  _QWORD *v34;
  Swift::String v35;
  char *v36;
  uint64_t v37;
  Swift::String v38;
  Swift::String v39;
  unint64_t v40;
  _QWORD *v41;
  Swift::String v42;
  Swift::String v43;
  Swift::String v44;
  unint64_t v45;
  _QWORD *v46;
  Swift::String v47;
  Swift::String v48;
  Swift::String v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(unint64_t, uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;

  v63 = a3;
  v61 = a2;
  v4 = type metadata accessor for UUID();
  v57 = *(_QWORD *)(v4 - 8);
  v58 = v4;
  MEMORY[0x1E0C80A78](v4);
  v56 = (char *)&v56 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(_QWORD *)(v10 + 72);
  v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1C24FE3A0;
  v62 = v13;
  v14 = v13 + v12;
  v15 = v13 + v12 + *(int *)(v9 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v15, "PommesBridge");
  *(_BYTE *)(v15 + 13) = 0;
  *(_WORD *)(v15 + 14) = -5120;
  v16 = (_QWORD *)(v14 + v11 + *(int *)(v9 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *v16 = 0xD000000000000015;
  v16[1] = 0x80000001C2501D90;
  if (one-time initialization token for pommesError != -1)
    swift_once();
  v17 = type metadata accessor for InsightRequestSummaryKey();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static PommesInsightRequestSummaryKey.pommesError);
  v59 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
  v60 = v17;
  v59(v14 + 2 * v11, v18, v17);
  v64 = 0;
  v65 = 0xE000000000000000;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.append(_:)(v19);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
  v20 = type metadata accessor for PommesError();
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v8, 1, v20) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    v22 = 0;
    v23 = (void *)0xE000000000000000;
  }
  else
  {
    v22 = PommesError.rawValue.getter();
    v23 = v24;
    (*(void (**)(char *, uint64_t))(v21 + 8))(v8, v20);
  }
  v25 = (_QWORD *)(v14 + 2 * v11 + *(int *)(v9 + 48));
  v26._countAndFlagsBits = v22;
  v26._object = v23;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 0;
  v27._object = (void *)0xE000000000000000;
  String.append(_:)(v27);
  v28 = v65;
  *v25 = v64;
  v25[1] = v28;
  v29 = (_QWORD *)(v14 + 3 * v11 + *(int *)(v9 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  v64 = 0;
  v65 = 0xE000000000000000;
  v30._countAndFlagsBits = 0;
  v30._object = (void *)0xE000000000000000;
  String.append(_:)(v30);
  v31._countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v31);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  String.append(_:)(v32);
  v33 = v65;
  *v29 = v64;
  v29[1] = v33;
  v34 = (_QWORD *)(v14 + 4 * v11 + *(int *)(v9 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  v64 = 0;
  v65 = 0xE000000000000000;
  v35._countAndFlagsBits = 0;
  v35._object = (void *)0xE000000000000000;
  String.append(_:)(v35);
  v36 = v56;
  RequestProcessorBase.sessionId.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v37 = v58;
  v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v38);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v57 + 8))(v36, v37);
  v39._countAndFlagsBits = 0;
  v39._object = (void *)0xE000000000000000;
  String.append(_:)(v39);
  v40 = v65;
  *v34 = v64;
  v34[1] = v40;
  v41 = (_QWORD *)(v14 + 5 * v11 + *(int *)(v9 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  v64 = 0;
  v65 = 0xE000000000000000;
  v42._countAndFlagsBits = 0;
  v42._object = (void *)0xE000000000000000;
  String.append(_:)(v42);
  v43._countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v43);
  swift_bridgeObjectRelease();
  v44._countAndFlagsBits = 0;
  v44._object = (void *)0xE000000000000000;
  String.append(_:)(v44);
  v45 = v65;
  *v41 = v64;
  v41[1] = v45;
  v46 = (_QWORD *)(v14 + 6 * v11 + *(int *)(v9 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  v64 = 0;
  v65 = 0xE000000000000000;
  v47._countAndFlagsBits = 0;
  v47._object = (void *)0xE000000000000000;
  String.append(_:)(v47);
  v48._countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v48);
  swift_bridgeObjectRelease();
  v49._countAndFlagsBits = 0;
  v49._object = (void *)0xE000000000000000;
  String.append(_:)(v49);
  v50 = v65;
  *v46 = v64;
  v46[1] = v50;
  v51 = *(int *)(v9 + 48);
  if (one-time initialization token for isFromTimeoutHandler != -1)
    swift_once();
  v52 = (_QWORD *)(v14 - v11 + 8 * v11 + v51);
  v53 = v60;
  v54 = __swift_project_value_buffer(v60, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  v59(v14 - v11 + 8 * v11, v54, v53);
  *v52 = 0x65736C6166;
  v52[1] = 0xE500000000000000;
  return v62;
}

uint64_t PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void *v29;
  char *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD aBlock[7];

  v35 = a1;
  v39 = type metadata accessor for DispatchWorkItemFlags();
  v42 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v38 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for DispatchQoS();
  v40 = *(_QWORD *)(v3 - 8);
  v41 = v3;
  MEMORY[0x1E0C80A78](v3);
  v37 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = type metadata accessor for PommesCandidateId();
  v5 = *(_QWORD *)(v32 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v32);
  v31 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchTimeInterval();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for DispatchTime();
  v12 = *(_QWORD *)(v11 - 8);
  v34 = v11;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v33 = (char *)&v31 - v16;
  v36 = RequestProcessorBase.requestQueue.getter();
  v17 = static DispatchTime.now()();
  (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 240))(v17);
  MEMORY[0x1C3BBEB6C](v15, v10);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v15, v11);
  v19 = swift_allocObject();
  swift_weakInit();
  v21 = v31;
  v20 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v31, v35, v32);
  v22 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = v19;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v23 + v22, v21, v20);
  aBlock[4] = partial apply for closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:);
  aBlock[5] = v23;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_69;
  v24 = _Block_copy(aBlock);
  swift_retain();
  v25 = v37;
  static DispatchQoS.unspecified.getter();
  v43 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E0DEAF38]);
  v27 = v38;
  v26 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v28 = v33;
  v29 = (void *)v36;
  MEMORY[0x1C3BBF124](v33, v25, v27, v24);
  _Block_release(v24);

  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v26);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v25, v41);
  v18(v28, v34);
  swift_release();
  return swift_release();
}

_QWORD *closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  _QWORD *result;

  swift_beginAccess();
  result = (_QWORD *)swift_weakLoadStrong();
  if (result)
  {
    (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *result + 488))(a2);
    return (_QWORD *)swift_release();
  }
  return result;
}

void PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(NSObject *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  int *v49;
  NSObject *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  NSObject *v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  _QWORD *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  char *v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  NSObject *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  void (*v96)(char *, NSObject *, uint64_t);
  char *v97;
  int v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  _BOOL4 v109;
  uint64_t v110;
  uint8_t *v111;
  const char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  NSObject *v125;
  os_log_type_t v126;
  _BOOL4 v127;
  uint64_t v128;
  uint8_t *v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  void (*v142)(char *, NSObject *, uint64_t);
  uint64_t v143;
  unint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  void (*v149)(char *, char *, uint64_t);
  char *v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  uint64_t v157;
  unint64_t v158;
  void (*v159)(char *, uint64_t);
  NSObject *v160;
  int *v161;
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  _BOOL4 v165;
  uint64_t v166;
  uint8_t *v167;
  uint8_t *v168;
  uint64_t v169;
  _BOOL4 v170;
  uint8_t *v171;
  void (*v172)(char *, NSObject *, uint64_t);
  uint64_t v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  _QWORD *v179;
  char *v180;
  char *v181;
  char *v182;
  _BYTE *v183;
  uint64_t v184;
  uint64_t v185;
  char *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  int *v190;
  char *v191;
  char *v192;
  uint64_t v193;
  uint64_t v194;
  char *v195;
  uint64_t v196;
  uint64_t v197;
  NSObject *v198;
  uint64_t v199[4];
  uint64_t v200;

  v198 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v2);
  v176 = (uint64_t)&v172 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v174 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1E0C80A78](v174);
  v175 = (char *)&v172 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for PommesError();
  v184 = *(_QWORD *)(v5 - 8);
  v185 = v5;
  MEMORY[0x1E0C80A78](v5);
  v177 = (char *)&v172 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v7);
  v180 = (char *)&v172 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v172 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for PommesSearchReason();
  v189 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v178 = (char *)&v172 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v13);
  v182 = (char *)&v172 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v172 - v18;
  MEMORY[0x1E0C80A78](v17);
  v195 = (char *)&v172 - v20;
  v190 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  v188 = *((_QWORD *)v190 - 1);
  MEMORY[0x1E0C80A78](v190);
  v187 = (uint64_t)&v172 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for InsightRequestSummaryLogger();
  v193 = *(_QWORD *)(v22 - 8);
  v194 = v22;
  MEMORY[0x1E0C80A78](v22);
  v192 = (char *)&v172 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = type metadata accessor for PommesCandidateId();
  v196 = *(_QWORD *)(v24 - 8);
  v197 = v24;
  v25 = *(_QWORD *)(v196 + 64);
  v26 = MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x1E0C80A78](v26);
  v181 = (char *)&v172 - v29;
  v30 = MEMORY[0x1E0C80A78](v28);
  v186 = (char *)&v172 - v31;
  v32 = MEMORY[0x1E0C80A78](v30);
  v191 = (char *)&v172 - v33;
  MEMORY[0x1E0C80A78](v32);
  v35 = (char *)&v172 - v34;
  v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
  v37 = MEMORY[0x1E0C80A78](v36);
  v39 = (char *)&v172 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = MEMORY[0x1E0C80A78](v37);
  v42 = (char *)&v172 - v41;
  if (((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 96))(v40) & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    __swift_project_value_buffer(v43, (uint64_t)static Logger.pommes);
    v198 = Logger.logObject.getter();
    v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v198, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v45 = 0;
      _os_log_impl(&dword_1C2356000, v198, v44, "Not posting pommes timeout message, request finished", v45, 2u);
      MEMORY[0x1C3BBFF64](v45, -1, -1);
    }

    return;
  }
  v173 = v12;
  v46 = (uint64_t)&v42[*(int *)(v36 + 48)];
  v179 = v1;
  v47 = PommesBridgeRequestProcessor.fetchAndUpdateState(_:)(v46, (uint64_t)v198);
  v183 = v42;
  *v42 = v47 & 1;
  if ((v47 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v61 = type metadata accessor for Logger();
    __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
    v63 = v196;
    v62 = v197;
    v64 = v198;
    v195 = *(char **)(v196 + 16);
    ((void (*)(char *, NSObject *, uint64_t))v195)(v35, v198, v197);
    v65 = Logger.logObject.getter();
    v66 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v65, v66))
    {
      v67 = (uint8_t *)swift_slowAlloc();
      v68 = swift_slowAlloc();
      v199[0] = v68;
      *(_DWORD *)v67 = 136315138;
      v69 = PommesCandidateId.description.getter();
      v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v199);
      v62 = v197;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v62);
      _os_log_impl(&dword_1C2356000, v65, v66, "Not posting pommes timeout message, %s finished", v67, 0xCu);
      swift_arrayDestroy();
      v71 = v68;
      v64 = v198;
      MEMORY[0x1C3BBFF64](v71, -1, -1);
      MEMORY[0x1C3BBFF64](v67, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v63 + 8))(v35, v62);
    }

    v75 = v179;
    if (one-time initialization token for insightRequestSummaryLogger != -1)
      swift_once();
    v76 = v194;
    v77 = __swift_project_value_buffer(v194, (uint64_t)static Logger.insightRequestSummaryLogger);
    v79 = v192;
    v78 = v193;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v192, v77, v76);
    v80 = v191;
    ((void (*)(char *, NSObject *, uint64_t))v195)(v191, v64, v62);
    v81 = (*(unsigned __int8 *)(v63 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80);
    v82 = swift_allocObject();
    *(_QWORD *)(v82 + 16) = v75;
    (*(void (**)(unint64_t, char *, uint64_t))(v63 + 32))(v82 + v81, v80, v62);
    swift_retain();
    InsightRequestSummaryLogger.emitDebug(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v76);
    goto LABEL_24;
  }
  v48 = (uint64_t)&v39[*(int *)(v36 + 48)];
  *v39 = v47 & 1;
  outlined init with copy of MediaUserStateCenter?(v46, v48, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v49 = v190;
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v188 + 48))(v48, 1, v190) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    v50 = v198;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v51 = type metadata accessor for Logger();
    __swift_project_value_buffer(v51, (uint64_t)static Logger.pommes);
    v52 = v196;
    v53 = v197;
    (*(void (**)(char *, NSObject *, uint64_t))(v196 + 16))(v27, v50, v197);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = v52;
      v58 = swift_slowAlloc();
      v199[0] = v58;
      *(_DWORD *)v56 = 136315138;
      v59 = PommesCandidateId.description.getter();
      v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v57 + 8))(v27, v53);
      _os_log_impl(&dword_1C2356000, v54, v55, "Not posting pommes timeout message, no Pommes state for %s", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v58, -1, -1);
      MEMORY[0x1C3BBFF64](v56, -1, -1);

    }
    else
    {

      (*(void (**)(char *, uint64_t))(v52 + 8))(v27, v53);
    }
LABEL_24:
    v83 = (uint64_t)v183;
LABEL_25:
    outlined destroy of MediaUserStateCenter?(v83, &demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
    return;
  }
  v72 = v187;
  outlined init with take of PerformanceUtil.Ticket(v48, v187, type metadata accessor for PommesBridgeResultCandidateState);
  outlined init with copy of MediaUserStateCenter?(v72 + v49[14], (uint64_t)v11, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
  v73 = type metadata accessor for PommesSearchEagerInfo(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 48))(v11, 1, v73) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
    v74 = v195;
    (*(void (**)(char *, _QWORD, uint64_t))(v189 + 104))(v195, *MEMORY[0x1E0D98920], v173);
  }
  else
  {
    v84 = v189;
    v85 = v173;
    (*(void (**)(char *, char *, uint64_t))(v189 + 16))(v19, v11, v173);
    outlined destroy of PommesSearchRequest((uint64_t)v11, type metadata accessor for PommesSearchEagerInfo);
    v74 = v195;
    (*(void (**)(char *, char *, uint64_t))(v84 + 32))(v195, v19, v85);
  }
  v86 = v179;
  v87 = *(_QWORD *)((char *)v179 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  v88 = RequestProcessorBase.requestId.getter();
  v90 = v89;
  v91 = RequestProcessorBase.rootLevelRequestId.getter();
  v92 = v198;
  (*(void (**)(uint64_t, NSObject *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v87 + 144))(3, v198, v88, v90, v91, v93);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v95 = v196;
  v94 = v197;
  v96 = *(void (**)(char *, NSObject *, uint64_t))(v196 + 16);
  v97 = v186;
  v96(v186, v92, v197);
  v98 = (*(uint64_t (**)(char *, uint64_t))(v95 + 88))(v97, v94);
  if (v98 == *MEMORY[0x1E0D988C8])
  {
    v172 = v96;
    (*(void (**)(char *, uint64_t))(v95 + 96))(v97, v94);
    v99 = *(_QWORD *)v97;
    v100 = *((_QWORD *)v97 + 1);
    v102 = v184;
    v101 = v185;
    v103 = (uint64_t)v180;
    (*(void (**)(char *, _QWORD, uint64_t))(v184 + 104))(v180, *MEMORY[0x1E0D9E838], v185);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v102 + 56))(v103, 0, 1, v101);
    v104 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                       + *v86
                                                                                       + 520))(v99, v100, 0, v103, v74);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v103, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    v105 = (uint64_t)v183;
    if (!v104)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v106 = type metadata accessor for Logger();
      __swift_project_value_buffer(v106, (uint64_t)static Logger.pommes);
      v107 = Logger.logObject.getter();
      v108 = static os_log_type_t.error.getter();
      v109 = os_log_type_enabled(v107, v108);
      v110 = v173;
      if (!v109)
        goto LABEL_60;
      v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v111 = 0;
      v112 = "Could not construct PommesResultCandidate message, buildCandidateMessage returned nil";
LABEL_59:
      _os_log_impl(&dword_1C2356000, v107, v108, v112, v111, 2u);
      v171 = v111;
      v105 = (uint64_t)v183;
      MEMORY[0x1C3BBFF64](v171, -1, -1);
LABEL_60:

      (*(void (**)(char *, uint64_t))(v189 + 8))(v74, v110);
      v131 = v72;
LABEL_61:
      outlined destroy of PommesSearchRequest(v131, type metadata accessor for PommesBridgeResultCandidateState);
      v83 = v105;
      goto LABEL_25;
    }
    goto LABEL_42;
  }
  if (v98 == *MEMORY[0x1E0D988D0])
  {
    v172 = v96;
    (*(void (**)(char *, uint64_t))(v95 + 96))(v97, v197);
    v114 = *(_QWORD *)v97;
    v113 = *((_QWORD *)v97 + 1);
    v115 = *((_QWORD *)v97 + 2);
    v116 = *((_QWORD *)v97 + 3);
    v117 = v72 + v190[5];
    v119 = v184;
    v118 = v185;
    v120 = v177;
    (*(void (**)(char *, _QWORD, uint64_t))(v184 + 104))(v177, *MEMORY[0x1E0D9E838], v185);
    v121 = v117;
    v122 = v195;
    v104 = (int *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, char *, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v179 + 552))(v114, v113, v115, v116, v120, v195, v121);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v123 = v187;
    (*(void (**)(char *, uint64_t))(v119 + 8))(v120, v118);
    v105 = (uint64_t)v183;
    if (!v104)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v124 = type metadata accessor for Logger();
      __swift_project_value_buffer(v124, (uint64_t)static Logger.pommes);
      v125 = Logger.logObject.getter();
      v126 = static os_log_type_t.error.getter();
      v127 = os_log_type_enabled(v125, v126);
      v128 = v173;
      if (v127)
      {
        v129 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v129 = 0;
        _os_log_impl(&dword_1C2356000, v125, v126, "Could not construct PommesTRPCandidateMessage message, buildTRPCommonErrorMessage returned nil", v129, 2u);
        v130 = v129;
        v105 = (uint64_t)v183;
        MEMORY[0x1C3BBFF64](v130, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v189 + 8))(v122, v128);
      v131 = v123;
      goto LABEL_61;
    }
LABEL_42:
    v190 = v104;
    if (one-time initialization token for insightRequestSummaryLogger != -1)
      swift_once();
    v136 = v194;
    v137 = __swift_project_value_buffer(v194, (uint64_t)static Logger.insightRequestSummaryLogger);
    v139 = v192;
    v138 = v193;
    (*(void (**)(char *, uint64_t, uint64_t))(v193 + 16))(v192, v137, v136);
    v140 = v191;
    v141 = v197;
    v142 = v172;
    v172(v191, v198, v197);
    v143 = v196;
    v144 = (*(unsigned __int8 *)(v196 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v196 + 80);
    v145 = swift_allocObject();
    *(_QWORD *)(v145 + 16) = v179;
    (*(void (**)(unint64_t, char *, uint64_t))(v143 + 32))(v145 + v144, v140, v141);
    swift_retain();
    InsightRequestSummaryLogger.emitDebug(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v138 + 8))(v139, v136);
    v146 = v189;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v147 = type metadata accessor for Logger();
    __swift_project_value_buffer(v147, (uint64_t)static Logger.pommes);
    v148 = v181;
    v142(v181, v198, v141);
    v149 = *(void (**)(char *, char *, uint64_t))(v146 + 16);
    v150 = v182;
    v151 = v173;
    v149(v182, v195, v173);
    v152 = Logger.logObject.getter();
    v153 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v152, v153))
    {
      v154 = swift_slowAlloc();
      v198 = swift_slowAlloc();
      v199[0] = (uint64_t)v198;
      *(_DWORD *)v154 = 136315394;
      v155 = PommesCandidateId.description.getter();
      v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v155, v156, v199);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v196 + 8))(v148, v141);
      *(_WORD *)(v154 + 12) = 2080;
      v149(v178, v150, v173);
      v157 = String.init<A>(describing:)();
      v200 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v157, v158, v199);
      v151 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v159 = *(void (**)(char *, uint64_t))(v189 + 8);
      v159(v150, v151);
      _os_log_impl(&dword_1C2356000, v152, v153, "Posting pommes result candidate with timeout error for %s; search reason was %s",
        (uint8_t *)v154,
        0x16u);
      v160 = v198;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v160, -1, -1);
      MEMORY[0x1C3BBFF64](v154, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v196 + 8))(v148, v141);
      v159 = *(void (**)(char *, uint64_t))(v146 + 8);
      v159(v150, v151);
    }

    RequestProcessorBase.messagePublisher.getter();
    __swift_project_boxed_opaque_existential_1(v199, v199[3]);
    v161 = v190;
    dispatch thunk of MessagePublishing.postMessage(_:)();

    v159(v195, v151);
    outlined destroy of PommesSearchRequest(v187, type metadata accessor for PommesBridgeResultCandidateState);
    outlined destroy of MediaUserStateCenter?((uint64_t)v183, &demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v199);
    return;
  }
  v105 = (uint64_t)v183;
  if (v98 == *MEMORY[0x1E0D988C0])
  {
    v172 = v96;
    (*(void (**)(char *, uint64_t))(v95 + 96))(v97, v197);
    swift_bridgeObjectRelease();
    v132 = (uint64_t)v175;
    (*(void (**)(char *, _QWORD, uint64_t))(v184 + 104))(v175, *MEMORY[0x1E0D9E838], v185);
    swift_storeEnumTagMultiPayload();
    v133 = v176;
    outlined init with copy of PommesSearchRequest(v72, v176, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(uint64_t, _QWORD, uint64_t, int *))(v188 + 56))(v133, 0, 1, v190);
    v134 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                               + *v179
                                                               + 528))(v132, v133, v74);
    v135 = v133;
    v104 = (int *)v134;
    outlined destroy of MediaUserStateCenter?(v135, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    outlined destroy of MediaUserStateCenter?(v132, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
    if (!v104)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v169 = type metadata accessor for Logger();
      __swift_project_value_buffer(v169, (uint64_t)static Logger.pommes);
      v107 = Logger.logObject.getter();
      v108 = static os_log_type_t.error.getter();
      v170 = os_log_type_enabled(v107, v108);
      v110 = v173;
      if (!v170)
        goto LABEL_60;
      v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v111 = 0;
      v112 = "Could not construct RunPommesResponseMessage, buildRunPommesResponseMessage returned nil";
      goto LABEL_59;
    }
    goto LABEL_42;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v162 = type metadata accessor for Logger();
  __swift_project_value_buffer(v162, (uint64_t)static Logger.pommes);
  v163 = Logger.logObject.getter();
  v164 = static os_log_type_t.error.getter();
  v165 = os_log_type_enabled(v163, v164);
  v166 = v173;
  if (v165)
  {
    v167 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v167 = 0;
    _os_log_impl(&dword_1C2356000, v163, v164, "Unexpected pommesCandidateId. Not posting timeoutMessage.", v167, 2u);
    v168 = v167;
    v105 = (uint64_t)v183;
    MEMORY[0x1C3BBFF64](v168, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v189 + 8))(v74, v166);
  outlined destroy of PommesSearchRequest(v72, type metadata accessor for PommesBridgeResultCandidateState);
  outlined destroy of MediaUserStateCenter?(v105, &demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
  (*(void (**)(char *, uint64_t))(v95 + 8))(v186, v197);
}

uint64_t implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  _QWORD *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  _QWORD *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  _QWORD *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(unint64_t, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;

  v44 = a2;
  v2 = type metadata accessor for UUID();
  v43 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v42 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C24FE3A0;
  v45 = v9;
  v10 = v9 + v8;
  v11 = v9 + v8 + *(int *)(v5 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v11, "PommesBridge");
  *(_BYTE *)(v11 + 13) = 0;
  *(_WORD *)(v11 + 14) = -5120;
  v12 = (_QWORD *)(v10 + v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *v12 = 0xD000000000000018;
  v12[1] = 0x80000001C2501D70;
  v13 = (_QWORD *)(v10 + 2 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  v46 = 0;
  v47 = 0xE000000000000000;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.append(_:)(v16);
  v17 = v47;
  *v13 = v46;
  v13[1] = v17;
  v18 = (_QWORD *)(v10 + 3 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  v46 = 0;
  v47 = 0xE000000000000000;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.append(_:)(v19);
  RequestProcessorBase.sessionId.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v4, v2);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  String.append(_:)(v21);
  v22 = v47;
  *v18 = v46;
  v18[1] = v22;
  v23 = (_QWORD *)(v10 + 4 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  v46 = 0;
  v47 = 0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.append(_:)(v26);
  v27 = v47;
  *v23 = v46;
  v23[1] = v27;
  v28 = (_QWORD *)(v10 + 5 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  v46 = 0;
  v47 = 0xE000000000000000;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  String.append(_:)(v31);
  v32 = v47;
  *v28 = v46;
  v28[1] = v32;
  v33 = (_QWORD *)(v10 + 6 * v7 + *(int *)(v5 + 48));
  if (one-time initialization token for isFromTimeoutHandler != -1)
    swift_once();
  v34 = type metadata accessor for InsightRequestSummaryKey();
  v35 = __swift_project_value_buffer(v34, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  v36 = *(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v34 - 8) + 16);
  v36(v10 + 6 * v7, v35, v34);
  *v33 = 1702195828;
  v33[1] = 0xE400000000000000;
  v37 = *(int *)(v5 + 48);
  if (one-time initialization token for isRcFinished != -1)
    swift_once();
  v38 = v10 - v7 + 8 * v7;
  v39 = (_QWORD *)(v38 + v37);
  v40 = __swift_project_value_buffer(v34, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished);
  v36(v38, v40, v34);
  *v39 = 1702195828;
  v39[1] = 0xE400000000000000;
  return v45;
}

uint64_t implicit closure #5 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  unint64_t v17;
  _QWORD *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  _QWORD *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  _QWORD *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;

  v40 = a2;
  v2 = type metadata accessor for UUID();
  v39 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 72);
  v8 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C24FE390;
  v41 = v9;
  v10 = v9 + v8;
  v11 = v9 + v8 + *(int *)(v5 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v11, "PommesBridge");
  *(_BYTE *)(v11 + 13) = 0;
  *(_WORD *)(v11 + 14) = -5120;
  v12 = (_QWORD *)(v10 + v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *v12 = 0xD000000000000015;
  v12[1] = 0x80000001C2501D90;
  v13 = (_QWORD *)(v10 + 2 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  v42 = 0;
  v43 = 0xE000000000000000;
  v14._countAndFlagsBits = 0;
  v14._object = (void *)0xE000000000000000;
  String.append(_:)(v14);
  v15._countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0;
  v16._object = (void *)0xE000000000000000;
  String.append(_:)(v16);
  v17 = v43;
  *v13 = v42;
  v13[1] = v17;
  v18 = (_QWORD *)(v10 + 3 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  v42 = 0;
  v43 = 0xE000000000000000;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.append(_:)(v19);
  RequestProcessorBase.sessionId.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v4, v2);
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  String.append(_:)(v21);
  v22 = v43;
  *v18 = v42;
  v18[1] = v22;
  v23 = (_QWORD *)(v10 + 4 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  v42 = 0;
  v43 = 0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.append(_:)(v26);
  v27 = v43;
  *v23 = v42;
  v23[1] = v27;
  v28 = (_QWORD *)(v10 + 5 * v7 + *(int *)(v5 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  v42 = 0;
  v43 = 0xE000000000000000;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = PommesCandidateId.asResultCandidateId.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  String.append(_:)(v31);
  v32 = v43;
  *v28 = v42;
  v28[1] = v32;
  v33 = *(int *)(v5 + 48);
  if (one-time initialization token for isFromTimeoutHandler != -1)
    swift_once();
  v34 = (_QWORD *)(v10 + 6 * v7 + v33);
  v35 = type metadata accessor for InsightRequestSummaryKey();
  v36 = __swift_project_value_buffer(v35, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 16))(v10 + 6 * v7, v36, v35);
  *v34 = 1702195828;
  v34[1] = 0xE400000000000000;
  return v41;
}

void PommesBridgeRequestProcessor.publishNoQueryErrorMessage(pommesCandidateId:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  _QWORD v69[4];

  v4 = v3;
  v64 = a3;
  v68 = a2;
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1E0C80A78](v61);
  v62 = (char *)&v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v7);
  v60 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PommesError();
  v66 = *(_QWORD *)(v9 - 8);
  v67 = v9;
  MEMORY[0x1E0C80A78](v9);
  v63 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v11);
  v65 = (char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for PommesCandidateId();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (uint64_t *)((char *)&v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = *(_QWORD *)((char *)v3 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  v18 = RequestProcessorBase.requestId.getter();
  v20 = v19;
  v21 = RequestProcessorBase.rootLevelRequestId.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 144))(5, a1, v18, v20, v21, v22);
  swift_bridgeObjectRelease();
  v23 = v13;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  v24 = (*(uint64_t (**)(uint64_t *, uint64_t))(v14 + 88))(v16, v13);
  if (v24 == *MEMORY[0x1E0D988C8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v13);
    v25 = *v16;
    v26 = v16[1];
    v27 = (uint64_t)v65;
    v28 = v66;
    v29 = v67;
    (*(void (**)(char *, _QWORD, uint64_t))(v66 + 104))(v65, *MEMORY[0x1E0D9E820], v67);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v27, 0, 1, v29);
    v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                        + *v4
                                                                                        + 520))(v25, v26, 0, v27, v68);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v27, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    if (!v30)
      goto LABEL_19;
LABEL_18:
    v55 = v30;
    RequestProcessorBase.messagePublisher.getter();
    __swift_project_boxed_opaque_existential_1(v69, v69[3]);
    dispatch thunk of MessagePublishing.postMessage(_:)();

    __swift_destroy_boxed_opaque_existential_1((uint64_t)v69);
    return;
  }
  v32 = v66;
  v31 = v67;
  v33 = v68;
  if (v24 == *MEMORY[0x1E0D988D0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v23);
    v34 = *v16;
    v35 = v16[1];
    v36 = v16[2];
    v37 = v16[3];
    v38 = v63;
    (*(void (**)(char *, _QWORD, uint64_t))(v32 + 104))(v63, *MEMORY[0x1E0D9E820], v31);
    v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v4 + 552))(v34, v35, v36, v37, v38, v33, v64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v38, v31);
    if (!v30)
      goto LABEL_19;
    goto LABEL_18;
  }
  if (v24 != *MEMORY[0x1E0D988C0])
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v50, v51))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_1C2356000, v50, v51, "Unexpected pommesCandidateId", v52, 2u);
      MEMORY[0x1C3BBFF64](v52, -1, -1);
    }

    (*(void (**)(uint64_t *, uint64_t))(v14 + 8))(v16, v23);
    goto LABEL_19;
  }
  (*(void (**)(uint64_t *, uint64_t))(v14 + 96))(v16, v23);
  v39 = swift_bridgeObjectRelease();
  v40 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v3 + 120))(v39);
  if (*(_QWORD *)(v40 + 16) && (v41 = specialized __RawDictionaryStorage.find<A>(_:)(a1), (v42 & 1) != 0))
  {
    v43 = v41;
    v44 = *(_QWORD *)(v40 + 56);
    v45 = type metadata accessor for PommesBridgeResultCandidateState(0);
    v46 = *(_QWORD *)(v45 - 8);
    v47 = v44 + *(_QWORD *)(v46 + 72) * v43;
    v48 = v60;
    outlined init with copy of PommesSearchRequest(v47, v60, type metadata accessor for PommesBridgeResultCandidateState);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v48, 0, 1, v45);
  }
  else
  {
    v53 = type metadata accessor for PommesBridgeResultCandidateState(0);
    v48 = v60;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v53 - 8) + 56))(v60, 1, 1, v53);
  }
  v54 = (uint64_t)v62;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v32 + 104))(v54, *MEMORY[0x1E0D9E820], v31);
  swift_storeEnumTagMultiPayload();
  v30 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                     + *v4
                                                                     + 528))(v54, v48, v33);
  outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  if (v30)
    goto LABEL_18;
LABEL_19:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v56 = type metadata accessor for Logger();
  __swift_project_value_buffer(v56, (uint64_t)static Logger.pommes);
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v59 = 0;
    _os_log_impl(&dword_1C2356000, v57, v58, "PommesBridgeRequestProcessor failed to build noQuery message", v59, 2u);
    MEMORY[0x1C3BBFF64](v59, -1, -1);
  }

}

uint64_t closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  _QWORD v20[4];

  v4 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v20 - v9;
  v11 = type metadata accessor for Siri_Nlu_External_Parser();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v8, *MEMORY[0x1E0D9F100], v4);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F178]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v16 = v20[2];
  v15 = v20[3];
  v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  v17(v10, v4);
  v18 = type metadata accessor for Siri_Nlu_External_UserParse();
  if (v15 != v16)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(a2, a1, v18);
  MEMORY[0x1E0C80A78](v18);
  v20[-2] = a1;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_UserParse and conformance Siri_Nlu_External_UserParse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F340], MEMORY[0x1E0D9F2E0]);
  return static Message.with(_:)();
}

uint64_t closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Siri_Nlu_External_Parser();
  MEMORY[0x1E0C80A78](v0);
  v1 = Siri_Nlu_External_Span.matcherNames.getter();
  MEMORY[0x1C3BBC6E8](v1);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_UserParse.parser.setter();
  Siri_Nlu_External_UserParse.probability.setter();
  return Siri_Nlu_External_UserParse.comparableProbability.setter();
}

uint64_t closure #2 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  _BYTE v14[16];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = (void *)TCUMappedNLResponse.nlResponse.getter();
  v10 = NLParseResponse.userParses.getter();

  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5J11OIegnrzr_TRA2HIgnr_Tf1cn_nTf4ng_n(v10, a3, a4);
  swift_bridgeObjectRelease();
  NLParseResponse.Builder.userParses.setter();
  v11 = (void *)TCUMappedNLResponse.nlResponse.getter();
  NLParseResponse.responseStatusCode.getter();

  v12 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v8, 0, 1, v12);
  return NLParseResponse.Builder.responseStatusCode.setter();
}

uint64_t PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  id v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v36;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v10, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1C2356000, v16, v17, "Unable to construct RunPommesResponseMessage without PR state", v18, 2u);
      MEMORY[0x1C3BBFF64](v18, -1, -1);
    }

    return 0;
  }
  v19 = outlined init with take of PerformanceUtil.Ticket((uint64_t)v10, (uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
  MEMORY[0x1E0C80A78](v19);
  *(&v36 - 2) = (uint64_t)v14;
  v20 = objc_allocWithZone((Class)type metadata accessor for NLParseResponse());
  v21 = NLParseResponse.init(build:)();
  if (!v21)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1C2356000, v28, v29, "Could not construct NLParseResponse needed for RunPommesResponse message, constructor failure", v30, 2u);
      MEMORY[0x1C3BBFF64](v30, -1, -1);
    }

    goto LABEL_20;
  }
  v22 = (void *)v21;
  v23 = MEMORY[0x1E0C80A78](v21);
  *(&v36 - 6) = v4;
  *(&v36 - 5) = a1;
  *(&v36 - 4) = v23;
  *(&v36 - 3) = a3;
  *(&v36 - 2) = (uint64_t)v14;
  v24 = objc_allocWithZone((Class)type metadata accessor for RunPommesResponseMessage());
  v25 = RunPommesResponseMessage.init(build:)();
  if (!v25)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1C2356000, v32, v33, "Could not construct RunPommesResponseMessage message, constructor failure", v34, 2u);
      MEMORY[0x1C3BBFF64](v34, -1, -1);
    }

LABEL_20:
    outlined destroy of PommesSearchRequest((uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
    return 0;
  }
  v26 = v25;

  outlined destroy of PommesSearchRequest((uint64_t)v14, type metadata accessor for PommesBridgeResultCandidateState);
  return v26;
}

uint64_t closure #1 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_ResponseStatus.StatusCode?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  PommesBridgeResultCandidateState.userParses.getter();
  NLParseResponse.Builder.userParses.setter();
  PommesBridgeResultCandidateState.fallbackParse.getter((uint64_t)v5);
  NLParseResponse.Builder.fallbackParse.setter();
  v6 = *MEMORY[0x1E0D9F518];
  v7 = type metadata accessor for Siri_Nlu_External_ResponseStatus.StatusCode();
  v8 = *(_QWORD *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 104))(v2, v6, v7);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v8 + 56))(v2, 0, 1, v7);
  return NLParseResponse.Builder.responseStatusCode.setter();
}

uint64_t closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  id v31;
  uint64_t v32;
  uint64_t v33;

  v32 = a5;
  v33 = a6;
  v30 = a3;
  v31 = a4;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RunPommesResponseMessage.UserInput?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (uint64_t *)((char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v30 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = *MEMORY[0x1E0D9E658];
  v22 = type metadata accessor for MessageSource();
  v23 = *(_QWORD *)(v22 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 104))(v20, v21, v22);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  RunPommesResponseMessage.Builder.source.setter();
  RequestProcessorBase.assistantId.getter();
  RunPommesResponseMessage.Builder.assistantId.setter();
  RequestProcessorBase.sessionId.getter();
  v24 = type metadata accessor for UUID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v17, 0, 1, v24);
  RunPommesResponseMessage.Builder.sessionId.setter();
  RequestProcessorBase.requestId.getter();
  RunPommesResponseMessage.Builder.requestId.setter();
  outlined init with copy of MediaUserStateCenter?(v30, (uint64_t)v14, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v14, 0, 1, v25);
  RunPommesResponseMessage.Builder.pommesResult.setter();
  v26 = v31;
  RunPommesResponseMessage.Builder.nlResponse.setter();
  v27 = type metadata accessor for PommesSearchReason();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v11, v32, v27);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v11, 0, 1, v27);
  RunPommesResponseMessage.Builder.pommesSearchReason.setter();
  closure #1 in closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(v33, v8);
  return RunPommesResponseMessage.Builder.userInput.setter();
}

uint64_t closure #1 in closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t (*v7)(_QWORD);
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;
  uint64_t v19;
  char v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  const char *v30;
  uint64_t v31;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;

  v4 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (void **)((char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload() != 2)
  {
    outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C2356000, v23, v24, "Attempting to build RunPommesResponseMessage with incorrect PommesBridgeResultCandidateState", v25, 2u);
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }

    goto LABEL_28;
  }
  v8 = *v6;
  swift_bridgeObjectRelease();
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
  outlined destroy of MediaUserStateCenter?((uint64_t)v6 + *(int *)(v9 + 64), &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v10 = objc_msgSend(v8, sel_requestType);
  if (!v10)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    goto LABEL_21;
  }
  v11 = v10;
  v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v14 = v13;

  v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!v14)
  {
LABEL_21:
    swift_bridgeObjectRelease();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    swift_bridgeObjectRelease();
LABEL_22:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v27, v28))
      goto LABEL_27;
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    v30 = "Unexpected requestType for SARDRunPOMMESRequest";
LABEL_26:
    _os_log_impl(&dword_1C2356000, v27, v28, v30, v29, 2u);
    MEMORY[0x1C3BBFF64](v29, -1, -1);
LABEL_27:

LABEL_28:
    v31 = type metadata accessor for RunPommesResponseMessage.UserInput();
    return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v31 - 8) + 56))(a2, 1, 1, v31);
  }
  if (v15 == v12 && v14 == v16)
  {
    swift_bridgeObjectRelease();
    goto LABEL_30;
  }
  v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) != 0)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    v33 = *(void **)(a1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 28));
    if (v33)
    {
      v34 = v33;

      *a2 = v34;
      v35 = *MEMORY[0x1E0D9D218];
      v36 = type metadata accessor for RunPommesResponseMessage.UserInput();
      v37 = *(_QWORD *)(v36 - 8);
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(v37 + 104))(a2, v35, v36);
      return (*(uint64_t (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v37 + 56))(a2, 0, 1, v36);
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v38 = type metadata accessor for Logger();
    __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v27, v28))
      goto LABEL_27;
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    v30 = "Unable to build RunPommesResponseMessage with type SARDRequestTypeSPEECHValue without AFSpeechPackage";
    goto LABEL_26;
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v12 && v14 == v19)
  {

    swift_bridgeObjectRelease_n();
    goto LABEL_37;
  }
  v21 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v21 & 1) == 0)
    goto LABEL_22;

LABEL_37:
  v39 = (_QWORD *)(a1 + *(int *)(type metadata accessor for PommesBridgeResultCandidateState(0) + 32));
  v40 = v39[1];
  *a2 = *v39;
  a2[1] = v40;
  v41 = *MEMORY[0x1E0D9D210];
  v42 = type metadata accessor for RunPommesResponseMessage.UserInput();
  v43 = *(_QWORD *)(v42 - 8);
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(v43 + 104))(a2, v41, v42);
  (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(a2, 0, 1, v42);
  return swift_bridgeObjectRetain();
}

uint64_t PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v0 = objc_allocWithZone((Class)type metadata accessor for PommesTRPCandidateMessage());
  v1 = PommesTRPCandidateMessage.init(build:)();
  if (!v1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1C2356000, v3, v4, "Could not construct PommesTRPCandidateMessage message, constructor failure", v5, 2u);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }

  }
  return v1;
}

uint64_t closure #1 in PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v35 = a7;
  v36 = a8;
  v34[3] = a6;
  v34[4] = a5;
  v34[1] = a4;
  v34[2] = a3;
  v37 = a9;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UserID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v34 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v21);
  v23 = (char *)v34 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *MEMORY[0x1E0D9E658];
  v25 = type metadata accessor for MessageSource();
  v26 = *(_QWORD *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 104))(v23, v24, v25);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  PommesTRPCandidateMessage.Builder.source.setter();
  RequestProcessorBase.assistantId.getter();
  PommesTRPCandidateMessage.Builder.assistantId.setter();
  RequestProcessorBase.sessionId.getter();
  v27 = type metadata accessor for UUID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v27 - 8) + 56))(v20, 0, 1, v27);
  PommesTRPCandidateMessage.Builder.sessionId.setter();
  RequestProcessorBase.requestId.getter();
  PommesTRPCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.trpCandidateId.setter();
  swift_bridgeObjectRetain();
  PommesTRPCandidateMessage.Builder.tcuId.setter();
  outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v17, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v17, 0, 1, v28);
  PommesTRPCandidateMessage.Builder.pommesResult.setter();
  v29 = type metadata accessor for PommesSearchReason();
  v30 = *(_QWORD *)(v29 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v14, v36, v29);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v14, 0, 1, v29);
  PommesTRPCandidateMessage.Builder.searchReason.setter();
  v31 = type metadata accessor for UserID();
  v32 = *(_QWORD *)(v31 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v32 + 16))(v11, v37, v31);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v11, 0, 1, v31);
  return PommesTRPCandidateMessage.Builder.userId.setter();
}

uint64_t PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:response:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t);
  id v19;
  uint64_t v20;
  uint64_t v22;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1E0C80A78](v15);
  v17 = (uint64_t *)((char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  *v17 = a5;
  swift_storeEnumTagMultiPayload();
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                                 + *v7
                                                                                                 + 536);
  v19 = a5;
  v20 = v18(a1, a2, a3, a4, v17, a6, a7);
  outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  return v20;
}

uint64_t PommesBridgeRequestProcessor.buildTRPErrorMessage(trpId:tcuId:error:searchReason:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for PommesError();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v17, a5, v18);
  swift_storeEnumTagMultiPayload();
  v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                                + *v7
                                                                                                + 536))(a1, a2, a3, a4, v17, a6, a7);
  outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  return v19;
}

void PommesBridgeRequestProcessor.__allocating_init(_:_:_:_:_:_:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PommesBridgeRequestProcessor.init(_:_:_:_:_:_:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootRequestId:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootRequestId:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootLevelRequestId:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

void PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootLevelRequestId:)()
{
  _swift_stdlib_reportUnimplementedInitializer();
  __break(1u);
}

uint64_t PommesBridgeRequestProcessor.__ivar_destroyer()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridgeRequestProcessor.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + direct field offset for PommesBridgeRequestProcessor.timeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
}

uint64_t PommesBridgeRequestProcessor.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = RequestProcessorBase.deinit();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridgeRequestProcessor.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + direct field offset for PommesBridgeRequestProcessor.timeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5J11OIegnrzr_TRA2HIgnr_Tf1cn_nTf4ng_n(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD v15[2];
  unint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t);
  uint64_t v19;
  uint64_t v20;

  v18 = a2;
  v19 = a3;
  v17 = type metadata accessor for Siri_Nlu_External_UserParse();
  v5 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x1E0DEE9D8];
  if (v8)
  {
    v15[1] = v3;
    v20 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v9 = v20;
    v16 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v10 = a1 + v16;
    v11 = *(_QWORD *)(v5 + 72);
    do
    {
      v18(v10);
      v20 = v9;
      v13 = *(_QWORD *)(v9 + 16);
      v12 = *(_QWORD *)(v9 + 24);
      if (v13 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1);
        v9 = v20;
      }
      *(_QWORD *)(v9 + 16) = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v16 + v13 * v11, v7, v17);
      v10 += v11;
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(char *, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64_t v20;
  unint64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: PommesCandidateId, value: PommesBridgeResultCandidateState));
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(a1 + 64);
  v24 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v25 = (unint64_t)(v8 + 63) >> 6;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_5;
    }
    v20 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v20 >= v25)
      return swift_release();
    v21 = *(_QWORD *)(v24 + 8 * v20);
    ++v12;
    if (!v21)
    {
      v12 = v20 + 1;
      if (v20 + 1 >= v25)
        return swift_release();
      v21 = *(_QWORD *)(v24 + 8 * v12);
      if (!v21)
      {
        v12 = v20 + 2;
        if (v20 + 2 >= v25)
          return swift_release();
        v21 = *(_QWORD *)(v24 + 8 * v12);
        if (!v21)
        {
          v12 = v20 + 3;
          if (v20 + 3 >= v25)
            return swift_release();
          v21 = *(_QWORD *)(v24 + 8 * v12);
          if (!v21)
            break;
        }
      }
    }
LABEL_22:
    v10 = (v21 - 1) & v21;
    v14 = __clz(__rbit64(v21)) + (v12 << 6);
LABEL_5:
    v15 = *(_QWORD *)(a1 + 48);
    v16 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, unint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v6, v15 + *(_QWORD *)(*(_QWORD *)(v16 - 8) + 72) * v14, v16);
    v17 = *(_QWORD *)(a1 + 56);
    v18 = v17
        + *(_QWORD *)(*(_QWORD *)(type metadata accessor for PommesBridgeResultCandidateState(0) - 8) + 72) * v14;
    v19 = (uint64_t)&v6[*(int *)(v4 + 48)];
    outlined init with copy of PommesSearchRequest(v18, v19, type metadata accessor for PommesBridgeResultCandidateState);
    a2(v6, v19);
    result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for (key: PommesCandidateId, value: PommesBridgeResultCandidateState));
  }
  v22 = v20 + 4;
  if (v22 >= v25)
    return swift_release();
  v21 = *(_QWORD *)(v24 + 8 * v22);
  if (v21)
  {
    v12 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    v12 = v22 + 1;
    if (__OFADD__(v22, 1))
      break;
    if (v12 >= v25)
      return swift_release();
    v21 = *(_QWORD *)(v24 + 8 * v12);
    ++v22;
    if (v21)
      goto LABEL_22;
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t specialized PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t (*v27)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  id v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  id v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  _QWORD v54[3];
  char *v55;
  char *v56;
  char *v57;
  uint64_t v58;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for TCUMappedNLResponse();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v56 = (char *)v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v57 = (char *)v54 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v55 = (char *)v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v54 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v54 - v16;
  v18 = type metadata accessor for NLXResultCandidate();
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (_QWORD *)((char *)v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v54 - v22;
  v24 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)v54 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = a1;
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v26, v27);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      v30 = *((_QWORD *)v26 + 2);
      v29 = *((_QWORD *)v26 + 3);
      v31 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      outlined init with take of PommesSearchReason?((uint64_t)&v26[v31[16]], (uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v17, (uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?((uint64_t)v15, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      }
      else
      {
        v54[1] = v30;
        v54[2] = v29;
        v39 = v57;
        v40 = (*(uint64_t (**)(char *, char *, uint64_t))(v6 + 32))(v57, v15, v5);
        MEMORY[0x1E0C80A78](v40);
        v54[-4] = v39;
        v54[-3] = closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:);
        v54[-2] = 0;
        v41 = objc_allocWithZone((Class)type metadata accessor for NLParseResponse());
        v42 = NLParseResponse.init(build:)();
        if (v42)
        {
          v43 = (void *)v42;
          if (one-time initialization token for pommes != -1)
            swift_once();
          v44 = type metadata accessor for Logger();
          __swift_project_value_buffer(v44, (uint64_t)static Logger.pommes);
          v45 = Logger.logObject.getter();
          v46 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v45, v46))
          {
            v47 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v47 = 0;
            _os_log_impl(&dword_1C2356000, v45, v46, "Assigning overridden TCUMappedNLResponse to prState", v47, 2u);
            MEMORY[0x1C3BBFF64](v47, -1, -1);
          }

          v48 = v43;
          v49 = v56;
          TCUMappedNLResponse.init(tcuId:nlResponse:)();
          v50 = (uint64_t)v55;
          (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v55, v49, v5);
          v38 = 1;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v6 + 56))(v50, 0, 1, v5);
          PommesBridgeResultCandidateState.setParseResponse(_:)(v50);

          outlined destroy of MediaUserStateCenter?(v50, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          v51 = *(void (**)(char *, uint64_t))(v6 + 8);
          v51(v49, v5);
          outlined destroy of MediaUserStateCenter?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
          v51(v57, v5);
          goto LABEL_16;
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v17, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v6 + 8))(v39, v5);
      }
      v38 = 0;
LABEL_16:
      v52 = (uint64_t)&v26[v31[24]];
      outlined destroy of MediaUserStateCenter?((uint64_t)&v26[v31[28]], &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for SiriUserInput?);
      return v38;
    }

    v35 = *((_QWORD *)v26 + 1);
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
    outlined init with take of PommesSearchReason?((uint64_t)&v26[*(int *)(v36 + 64)], (uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    v37 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5j175OIegnrzr_TR04_s21a167InformationSearch28PommesBridgeRequestProcessorC25updatePSCParseForFallback33_8DFE86024D401B7CABDD6F200033BF3CLL7prStateSbAA0de15ResultCandidateS0Vz_tF0A8lM27_c1_d1_eF7VAKcfU_Tf3nnnpf_nTf1cn_n(v35);
    swift_bridgeObjectRelease();
    PommesBridgeResultCandidateState.setRunPommesRequest(userParses:fallbackParse:)(v37, (uint64_t)v4);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  else
  {
    swift_bridgeObjectRelease();
    v32 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)&v26[*(int *)(v32 + 48)], (uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    outlined init with copy of PommesSearchRequest((uint64_t)v23, (uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v33 = swift_bridgeObjectRetain();
    v34 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D23_Nlu_External_UserParseVG_AHs5NeverOTg504_s12d13NLUTypes0A23_f1_g1_hi13VACIgnr_A2Cs5j175OIegnrzr_TR04_s21a167InformationSearch28PommesBridgeRequestProcessorC25updatePSCParseForFallback33_8DFE86024D401B7CABDD6F200033BF3CLL7prStateSbAA0de15ResultCandidateS0Vz_tF0A8lM27_c1_d1_eF7VAKcfU_Tf3nnnpf_nTf1cn_n(v33);
    swift_bridgeObjectRelease_n();
    *v21 = v34;
    PommesBridgeResultCandidateState.setNLXResultCandidate(_:)((uint64_t)v21);
    outlined destroy of PommesSearchRequest((uint64_t)v23, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    outlined destroy of PommesSearchRequest((uint64_t)v21, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  return 1;
}

uint64_t specialized PommesBridgeRequestProcessor.init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, unsigned __int8 a15, unsigned __int8 a16, unsigned __int8 a17)
{
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  void (*v27)(_QWORD *__return_ptr, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD v55[3];
  uint64_t v56;
  uint64_t v57;

  v53 = a5;
  v54 = a8;
  v47 = a7;
  v48 = a1;
  v51 = a6;
  v52 = a4;
  v49 = a2;
  v50 = a9;
  v44 = a3;
  v45 = a10;
  v43 = a17;
  v40 = a15;
  v41 = a16;
  v38 = a13;
  v39 = a14;
  v46 = a11;
  v42 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v42 - 8);
  MEMORY[0x1E0C80A78](v42);
  v20 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for DispatchTimeInterval();
  v22 = *(_QWORD *)(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v24 = (uint64_t *)((char *)&v38 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(_BYTE *)(v17 + direct field offset for PommesBridgeRequestProcessor.isRequestFinished) = 0;
  *(_QWORD *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesStateHolder) = MEMORY[0x1E0DEE9E0];
  v25 = v17 + direct field offset for PommesBridgeRequestProcessor.sessionState;
  *(_OWORD *)v25 = 0u;
  *(_OWORD *)(v25 + 16) = 0u;
  *(_QWORD *)(v25 + 32) = 0;
  v26 = (_QWORD *)(v17 + direct field offset for PommesBridgeRequestProcessor.aceInputOrigin);
  *v26 = 0;
  v26[1] = 0;
  *(_QWORD *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext) = 0;
  *(_QWORD *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesSearch) = a12;
  type metadata accessor for PommesBridgeRequestProcessor(0);
  v27 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a12 + 152);
  swift_retain();
  v28 = swift_retain();
  v27(v55, v28);
  v29 = v56;
  v30 = v57;
  __swift_project_boxed_opaque_existential_1(v55, v56);
  v31 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v30 + 8))(0, v29, v30);
  static PommesBridgeRequestProcessor.configuredTimeout(isServerFallbackDisabled:)(v31 & 1, v24);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v55);
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(v22 + 32))(v17 + direct field offset for PommesBridgeRequestProcessor.timeout, v24, v21);
  *(double *)(v17 + direct field offset for PommesBridgeRequestProcessor.pommesDUDAThreshold) = specialized static PommesBridgeRequestProcessor.configuredScoreThreshold()();
  swift_beginAccess();
  v32 = v38;
  outlined assign with copy of InputOrigin?(v38, v25, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  swift_endAccess();
  *(_QWORD *)(v17 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil) = v39;
  *(_BYTE *)(v17 + direct field offset for PommesBridgeRequestProcessor.isMultiUser) = v40;
  *(_BYTE *)(v17 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest) = v41;
  *(_BYTE *)(v17 + direct field offset for PommesBridgeRequestProcessor.isOnlyUserInHome) = v43;
  swift_retain();
  swift_release();
  v33 = v44;
  v34 = v42;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, v44, v42);
  v35 = v45;
  outlined init with copy of AppDataProviding(v45, (uint64_t)v55);
  v36 = RequestProcessorBase.init(assistantId:sessionId:requestId:name:messagePublisher:serviceHelper:rootLevelRequestId:)();
  outlined destroy of MediaUserStateCenter?(v32, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  __swift_destroy_boxed_opaque_existential_1(v35);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v33, v34);
  return v36;
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  return closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:)(a1, a2, v2);
}

uint64_t partial apply for implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)()
{
  uint64_t v0;

  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD00000000000001ELL, 0x80000001C2501C80, MEMORY[0x1E0D9D9C8]);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleGestureBasedResultCandidateMessage(_:)()
{
  uint64_t v0;

  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD000000000000027, 0x80000001C2501DB0, MEMORY[0x1E0D9D9C8]);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleTextBasedTRPCandidateMessage(_:)()
{
  uint64_t v0;

  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD000000000000021, 0x80000001C2501CD0, MEMORY[0x1E0D9D578]);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleRewrittenUtteranceCandidateMessage(_:)()
{
  uint64_t v0;

  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD000000000000027, 0x80000001C2501D00, MEMORY[0x1E0D9D578]);
}

uint64_t partial apply for closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t *a1)
{
  uint64_t v1;

  return closure #3 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(void **)(v1 + 56), *(_QWORD *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_BYTE *)(v1 + 80), *(_QWORD *)(v1 + 88));
}

uint64_t sub_1C2452238()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  uint64_t v0;

  return implicit closure #5 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1C2452278()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(uint64_t a1, char a2)
{
  return closure #4 in PommesBridgeRequestProcessor.search(pommesCandidateId:)(a1, a2 & 1);
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  return closure #1 in PommesBridgeRequestProcessor.search(pommesCandidateId:)();
}

uint64_t sub_1C24522B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for PommesCandidateId();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

uint64_t sub_1C2452340()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(&one-time initialization token for isRcFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished, (uint64_t)one-time initialization function for isRcFinished);
}

uint64_t sub_1C2452370()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v9 = *(_QWORD *)(v1 + 64);
  v3 = type metadata accessor for PommesCandidateId();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = *(unsigned __int8 *)(v4 + 80);
  v6 = type metadata accessor for PommesError();
  v7 = *(_QWORD *)(v6 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v2, 1, v6))
    (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v2, v6);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + ((((v9 + v2 + 7) & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & ~v5), v3);
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #12 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PommesCandidateId() - 8) + 80);
  return implicit closure #12 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(v0 + v2, *(_QWORD *)(v0 + v3), v0 + ((v3 + v4 + 8) & ~v4));
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:));
}

uint64_t partial apply for implicit closure #5 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(implicit closure #5 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:));
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)(uint64_t (*a1)(_QWORD, uint64_t))
{
  uint64_t v1;
  uint64_t v2;

  v2 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PommesCandidateId() - 8) + 80);
  return a1(*(_QWORD *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)()
{
  return closure #1 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)();
}

uint64_t partial apply for closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1C2452590@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 96))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C24525D0(unsigned __int8 *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(_QWORD))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 104))(*a1);
}

uint64_t sub_1C2452608@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2452644(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 128);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t sub_1C2452680(_QWORD **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 144))();
}

uint64_t sub_1C24526B4(uint64_t a1, _QWORD **a2)
{
  _BYTE v4[40];

  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  return (*(uint64_t (**)(_BYTE *))(class metadata base offset for PommesBridgeRequestProcessor + **a2 + 152))(v4);
}

uint64_t sub_1C2452708@<X0>(_QWORD **a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 168))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C2452748(char *a1, _QWORD *a2)
{
  char v2;
  _BYTE *v3;
  uint64_t result;

  v2 = *a1;
  v3 = (_BYTE *)(*a2 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest);
  result = swift_beginAccess();
  *v3 = v2;
  return result;
}

uint64_t sub_1C2452794(_QWORD **a1)
{
  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + **a1 + 240))();
}

char *initializeBufferWithCopyOfBuffer for PommesBridgeResultCandidateState(char *a1, char **a2, int *a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v8;
  char *v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(char *, uint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int (*v68)(char *, uint64_t, uint64_t);
  id v69;
  uint64_t v70;
  uint64_t v71;
  char *__dst;
  uint64_t v74;
  uint64_t v75;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v17[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
    return a1;
  }
  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v18 = *a2;
    v19 = a2[1];
    *(_QWORD *)a1 = *a2;
    *((_QWORD *)a1 + 1) = v19;
    v20 = v18;
    swift_bridgeObjectRetain();
    v21 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    v22 = &a1[v21];
    v23 = (char *)a2 + v21;
    v24 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_17:
      v45 = __swift_instantiateConcreteTypeFromMangledName(v26);
      memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      goto LABEL_21;
    }
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      v27 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v27;
      swift_bridgeObjectRetain();
      v75 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
      v28 = *(int *)(v75 + 48);
      v29 = &a1[v28];
      v30 = (char *)a2 + v28;
      *(_QWORD *)&a1[v28] = *(char **)((char *)a2 + v28);
      v31 = type metadata accessor for NLXResultCandidate();
      v32 = *(int *)(v31 + 20);
      __dst = &v29[v32];
      v74 = v31;
      v33 = &v30[v32];
      v34 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v35 = *(_QWORD *)(v34 - 8);
      v36 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48);
      swift_bridgeObjectRetain();
      if (v36(v33, 1, v34))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v33, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(__dst, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(__dst, 0, 1, v34);
      }
      v46 = *(int *)(v74 + 24);
      v47 = &v29[v46];
      v48 = &v30[v46];
      v49 = *((_QWORD *)v48 + 1);
      *(_QWORD *)v47 = *(_QWORD *)v48;
      *((_QWORD *)v47 + 1) = v49;
      a1[*(int *)(v75 + 64)] = *((_BYTE *)a2 + *(int *)(v75 + 64));
      swift_bridgeObjectRetain();
      goto LABEL_21;
    }
    v8 = a2[1];
    *(_QWORD *)a1 = *a2;
    *((_QWORD *)a1 + 1) = v8;
    v9 = a2[3];
    *((_QWORD *)a1 + 2) = a2[2];
    *((_QWORD *)a1 + 3) = v9;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v10 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v11 = v10[16];
    v12 = &a1[v11];
    v13 = (char *)a2 + v11;
    v14 = type metadata accessor for TCUMappedNLResponse();
    v15 = *(_QWORD *)(v14 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
    {
      v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    a1[v10[20]] = *((_BYTE *)a2 + v10[20]);
    v38 = v10[24];
    v39 = &a1[v38];
    v40 = (char *)a2 + v38;
    v41 = type metadata accessor for SiriUserInput();
    v42 = *(_QWORD *)(v41 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
    {
      v43 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v42 + 16))(v39, v40, v41);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
    }
    v44 = v10[28];
    v22 = &a1[v44];
    v23 = (char *)a2 + v44;
    v24 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    v25 = *(_QWORD *)(v24 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    {
      v26 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_17;
    }
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
LABEL_21:
  swift_storeEnumTagMultiPayload();
  v50 = a3[5];
  v51 = &a1[v50];
  v52 = (char *)a2 + v50;
  v53 = type metadata accessor for UserID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v53 - 8) + 16))(v51, v52, v53);
  v54 = a3[7];
  *(_QWORD *)&a1[a3[6]] = *(char **)((char *)a2 + a3[6]);
  v55 = *(char **)((char *)a2 + v54);
  *(_QWORD *)&a1[v54] = v55;
  v56 = a3[8];
  v57 = a3[9];
  v58 = &a1[v56];
  v59 = (char **)((char *)a2 + v56);
  v60 = v59[1];
  *(_QWORD *)v58 = *v59;
  *((_QWORD *)v58 + 1) = v60;
  a1[v57] = *((_BYTE *)a2 + v57);
  v61 = a3[11];
  a1[a3[10]] = *((_BYTE *)a2 + a3[10]);
  a1[v61] = *((_BYTE *)a2 + v61);
  v62 = a3[13];
  a1[a3[12]] = *((_BYTE *)a2 + a3[12]);
  v63 = a3[14];
  v64 = &a1[v63];
  v65 = (char *)a2 + v63;
  a1[v62] = *((_BYTE *)a2 + v62);
  v66 = type metadata accessor for PommesSearchEagerInfo(0);
  v67 = *(_QWORD *)(v66 - 8);
  v68 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v67 + 48);
  v69 = v55;
  swift_bridgeObjectRetain();
  if (v68(v65, 1, v66))
  {
    v70 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v64, v65, *(_QWORD *)(*(_QWORD *)(v70 - 8) + 64));
  }
  else
  {
    v71 = type metadata accessor for PommesSearchReason();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v64, v65, v71);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v67 + 56))(v64, 0, 1, v66);
  }
  return a1;
}

_QWORD *assignWithCopy for PommesBridgeResultCandidateState(_QWORD *a1, _QWORD *a2, int *a3)
{
  int EnumCaseMultiPayload;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(char *, uint64_t, uint64_t);
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  id v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(char *, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest((uint64_t)a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v14 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      v15 = v14;
      swift_bridgeObjectRetain();
      v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      v17 = (char *)a1 + v16;
      v18 = (char *)a2 + v16;
      v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        v41 = __swift_instantiateConcreteTypeFromMangledName(v21);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v65 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        v22 = *(int *)(v65 + 48);
        v23 = (char *)a1 + v22;
        v24 = (char *)a2 + v22;
        *(_QWORD *)((char *)a1 + v22) = *(_QWORD *)((char *)a2 + v22);
        v64 = type metadata accessor for NLXResultCandidate();
        v25 = *(int *)(v64 + 20);
        __dst = &v23[v25];
        v26 = &v24[v25];
        v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        v28 = *(_QWORD *)(v27 - 8);
        v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48);
        swift_bridgeObjectRetain();
        if (v29(v26, 1, v27))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(__dst, v26, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v28 + 16))(__dst, v26, v27);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(__dst, 0, 1, v27);
        }
        v37 = *(int *)(v64 + 24);
        v38 = &v23[v37];
        v39 = &v24[v37];
        *(_QWORD *)v38 = *(_QWORD *)v39;
        *((_QWORD *)v38 + 1) = *((_QWORD *)v39 + 1);
        *((_BYTE *)a1 + *(int *)(v65 + 64)) = *((_BYTE *)a2 + *(int *)(v65 + 64));
        swift_bridgeObjectRetain();
        goto LABEL_20;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v8 = v7[16];
      v9 = (char *)a1 + v8;
      v10 = (char *)a2 + v8;
      v11 = type metadata accessor for TCUMappedNLResponse();
      v12 = *(_QWORD *)(v11 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
      }
      *((_BYTE *)a1 + v7[20]) = *((_BYTE *)a2 + v7[20]);
      v31 = v7[24];
      v32 = (char *)a1 + v31;
      v33 = (char *)a2 + v31;
      v34 = type metadata accessor for SiriUserInput();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v40 = v7[28];
      v17 = (char *)a1 + v40;
      v18 = (char *)a2 + v40;
      v19 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v17, v18, v19);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    goto LABEL_20;
  }
LABEL_21:
  v42 = a3[5];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = type metadata accessor for UserID();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v45 - 8) + 24))(v43, v44, v45);
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)((char *)a2 + a3[6]);
  v46 = a3[7];
  v47 = *(void **)((char *)a1 + v46);
  v48 = *(void **)((char *)a2 + v46);
  *(_QWORD *)((char *)a1 + v46) = v48;
  v49 = v48;

  v50 = a3[8];
  v51 = (_QWORD *)((char *)a1 + v50);
  v52 = (_QWORD *)((char *)a2 + v50);
  *v51 = *v52;
  v51[1] = v52[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *((_BYTE *)a1 + a3[9]) = *((_BYTE *)a2 + a3[9]);
  *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  *((_BYTE *)a1 + a3[12]) = *((_BYTE *)a2 + a3[12]);
  *((_BYTE *)a1 + a3[13]) = *((_BYTE *)a2 + a3[13]);
  v53 = a3[14];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = type metadata accessor for PommesSearchEagerInfo(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  LODWORD(v44) = v58(v54, 1, v56);
  v59 = v58(v55, 1, v56);
  if (!(_DWORD)v44)
  {
    if (!v59)
    {
      v63 = type metadata accessor for PommesSearchReason();
      (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v63 - 8) + 24))(v54, v55, v63);
      return a1;
    }
    outlined destroy of PommesSearchRequest((uint64_t)v54, type metadata accessor for PommesSearchEagerInfo);
    goto LABEL_26;
  }
  if (v59)
  {
LABEL_26:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    return a1;
  }
  v60 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v60 - 8) + 16))(v54, v55, v60);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t initializeWithTake for PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2, int *a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;

  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v15 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v15;
    v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    v17 = (void *)(a1 + v16);
    v18 = (const void *)(a2 + v16);
    v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      v39 = __swift_instantiateConcreteTypeFromMangledName(v21);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
    v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v9 = v8[16];
    v10 = (void *)(a1 + v9);
    v11 = (const void *)(a2 + v9);
    v12 = type metadata accessor for TCUMappedNLResponse();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    *(_BYTE *)(a1 + v8[20]) = *(_BYTE *)(a2 + v8[20]);
    v32 = v8[24];
    v33 = (void *)(a1 + v32);
    v34 = (const void *)(a2 + v32);
    v35 = type metadata accessor for SiriUserInput();
    v36 = *(_QWORD *)(v35 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
    {
      v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v36 + 32))(v33, v34, v35);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
    }
    v38 = v8[28];
    v17 = (void *)(a1 + v38);
    v18 = (const void *)(a2 + v38);
    v19 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    v20 = *(_QWORD *)(v19 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
LABEL_16:
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    goto LABEL_19;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  v22 = *(int *)(v56 + 48);
  v23 = a1 + v22;
  v24 = a2 + v22;
  *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
  v25 = type metadata accessor for NLXResultCandidate();
  v26 = *(int *)(v25 + 20);
  v27 = (void *)(v23 + v26);
  v28 = (const void *)(v24 + v26);
  v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v30 = *(_QWORD *)(v29 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
  {
    v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
  }
  *(_OWORD *)(v23 + *(int *)(v25 + 24)) = *(_OWORD *)(v24 + *(int *)(v25 + 24));
  *(_BYTE *)(a1 + *(int *)(v56 + 64)) = *(_BYTE *)(a2 + *(int *)(v56 + 64));
LABEL_19:
  swift_storeEnumTagMultiPayload();
  v40 = a3[5];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 32))(v41, v42, v43);
  v44 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);
  v45 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v45) = *(_BYTE *)(a2 + v45);
  v46 = a3[11];
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *(_BYTE *)(a1 + v46) = *(_BYTE *)(a2 + v46);
  v47 = a3[13];
  *(_BYTE *)(a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v48 = a3[14];
  v49 = (void *)(a1 + v48);
  v50 = (const void *)(a2 + v48);
  *(_BYTE *)(a1 + v47) = *(_BYTE *)(a2 + v47);
  v51 = type metadata accessor for PommesSearchEagerInfo(0);
  v52 = *(_QWORD *)(v51 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
  {
    v53 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v53 - 8) + 64));
  }
  else
  {
    v54 = type metadata accessor for PommesSearchReason();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v54 - 8) + 32))(v49, v50, v54);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  }
  return a1;
}

uint64_t sub_1C24536EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
    return v9(v10, a2, v8);
  }
  v11 = type metadata accessor for UserID();
  v12 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v13 = a3[5];
LABEL_10:
    v10 = a1 + v13;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    v12 = *(_QWORD *)(v8 - 8);
    v13 = a3[14];
    goto LABEL_10;
  }
  v14 = *(_QWORD *)(a1 + a3[8] + 8);
  if (v14 >= 0xFFFFFFFF)
    LODWORD(v14) = -1;
  return (v14 + 1);
}

uint64_t sub_1C24537C0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;

  v8 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    result = type metadata accessor for UserID();
    v14 = *(_QWORD *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      v10 = result;
      v15 = a4[5];
    }
    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(_QWORD *)(a1 + a4[8] + 8) = (a2 - 1);
        return result;
      }
      v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
      v14 = *(_QWORD *)(v10 - 8);
      v15 = a4[14];
    }
    v12 = a1 + v15;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }
  return v11(v12, a2, a2, v10);
}

void type metadata completion function for PommesBridgeResultCandidateState()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;

  type metadata accessor for PommesBridgeResultCandidateState.ParseState(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UserID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for PommesSearchEagerInfo?, (void (*)(uint64_t))type metadata accessor for PommesSearchEagerInfo);
      if (v2 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

char *initializeBufferWithCopyOfBuffer for PommesBridgeResultCandidateState.ParseState(char *a1, char **a2, uint64_t a3)
{
  int v5;
  int EnumCaseMultiPayload;
  char *v7;
  char *v8;
  int *v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  char *__dst;
  uint64_t v55;
  uint64_t v56;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *(_QWORD *)a1 = *a2;
    a1 = &v16[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v17 = *a2;
      v18 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v18;
      v19 = v17;
      swift_bridgeObjectRetain();
      v20 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      v21 = &a1[v20];
      v22 = (char *)a2 + v20;
      v23 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v24 = *(_QWORD *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(v21, v22, *(_QWORD *)(*(_QWORD *)(v25 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v24 + 16))(v21, v22, v23);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
    }
    else if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v7;
      v8 = a2[3];
      *((_QWORD *)a1 + 2) = a2[2];
      *((_QWORD *)a1 + 3) = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v10 = v9[16];
      v11 = &a1[v10];
      v12 = (char *)a2 + v10;
      v13 = type metadata accessor for TCUMappedNLResponse();
      v14 = *(_QWORD *)(v13 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      {
        v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      }
      a1[v9[20]] = *((_BYTE *)a2 + v9[20]);
      v37 = v9[24];
      v38 = &a1[v37];
      v39 = (char *)a2 + v37;
      v40 = type metadata accessor for SiriUserInput();
      v41 = *(_QWORD *)(v40 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
      {
        v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v38, v39, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v38, v39, v40);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56))(v38, 0, 1, v40);
      }
      v43 = v9[28];
      v44 = &a1[v43];
      v45 = (char *)a2 + v43;
      v46 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      v47 = *(_QWORD *)(v46 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v45, 1, v46))
      {
        v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
        memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
      }
    }
    else
    {
      v26 = a2[1];
      *(_QWORD *)a1 = *a2;
      *((_QWORD *)a1 + 1) = v26;
      swift_bridgeObjectRetain();
      v56 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
      v27 = *(int *)(v56 + 48);
      v28 = &a1[v27];
      v29 = (char *)a2 + v27;
      *(_QWORD *)&a1[v27] = *(char **)((char *)a2 + v27);
      v30 = type metadata accessor for NLXResultCandidate();
      v31 = *(int *)(v30 + 20);
      __dst = &v28[v31];
      v55 = v30;
      v32 = &v29[v31];
      v33 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v34 = *(_QWORD *)(v33 - 8);
      v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        memcpy(__dst, v32, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(__dst, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(__dst, 0, 1, v33);
      }
      v49 = *(int *)(v55 + 24);
      v50 = &v28[v49];
      v51 = &v29[v49];
      v52 = *((_QWORD *)v51 + 1);
      *(_QWORD *)v50 = *(_QWORD *)v51;
      *((_QWORD *)v50 + 1) = v52;
      a1[*(int *)(v56 + 64)] = *((_BYTE *)a2 + *(int *)(v56 + 64));
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

_QWORD *assignWithCopy for PommesBridgeResultCandidateState.ParseState(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  int *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(char *, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v42;
  char *__dst;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest((uint64_t)a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v12 = (void *)*a2;
      *a1 = *a2;
      a1[1] = a2[1];
      v13 = v12;
      swift_bridgeObjectRetain();
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      v15 = (char *)a1 + v14;
      v16 = (char *)a2 + v14;
      v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        v40 = __swift_instantiateConcreteTypeFromMangledName(v19);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v40 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *a1 = *a2;
        a1[1] = a2[1];
        swift_bridgeObjectRetain();
        v42 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        v20 = *(int *)(v42 + 48);
        v21 = (char *)a1 + v20;
        v22 = (char *)a2 + v20;
        *(_QWORD *)((char *)a1 + v20) = *(_QWORD *)((char *)a2 + v20);
        v23 = type metadata accessor for NLXResultCandidate();
        v24 = *(int *)(v23 + 20);
        __dst = &v21[v24];
        v25 = &v22[v24];
        v26 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        v27 = *(_QWORD *)(v26 - 8);
        v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
        swift_bridgeObjectRetain();
        if (v28(v25, 1, v26))
        {
          v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(__dst, v25, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
        }
        v36 = *(int *)(v23 + 24);
        v37 = &v21[v36];
        v38 = &v22[v36];
        *(_QWORD *)v37 = *(_QWORD *)v38;
        *((_QWORD *)v37 + 1) = *((_QWORD *)v38 + 1);
        *((_BYTE *)a1 + *(int *)(v42 + 64)) = *((_BYTE *)a2 + *(int *)(v42 + 64));
        swift_bridgeObjectRetain();
        goto LABEL_20;
      }
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      a1[3] = a2[3];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v5 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v6 = v5[16];
      v7 = (char *)a1 + v6;
      v8 = (char *)a2 + v6;
      v9 = type metadata accessor for TCUMappedNLResponse();
      v10 = *(_QWORD *)(v9 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
      {
        v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      }
      *((_BYTE *)a1 + v5[20]) = *((_BYTE *)a2 + v5[20]);
      v30 = v5[24];
      v31 = (char *)a1 + v30;
      v32 = (char *)a2 + v30;
      v33 = type metadata accessor for SiriUserInput();
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
      }
      v39 = v5[28];
      v15 = (char *)a1 + v39;
      v16 = (char *)a2 + v39;
      v17 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    goto LABEL_20;
  }
  return a1;
}

uint64_t initializeWithTake for PommesBridgeResultCandidateState.ParseState(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v13 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a1 = *(_QWORD *)a2;
    *(_QWORD *)(a1 + 8) = v13;
    v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    v15 = (void *)(a1 + v14);
    v16 = (const void *)(a2 + v14);
    v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      v38 = __swift_instantiateConcreteTypeFromMangledName(v19);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
      goto LABEL_19;
    }
LABEL_16:
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v7 = v6[16];
    v8 = (void *)(a1 + v7);
    v9 = (const void *)(a2 + v7);
    v10 = type metadata accessor for TCUMappedNLResponse();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
    v31 = v6[24];
    v32 = (void *)(a1 + v31);
    v33 = (const void *)(a2 + v31);
    v34 = type metadata accessor for SiriUserInput();
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
    v37 = v6[28];
    v15 = (void *)(a1 + v37);
    v16 = (const void *)(a2 + v37);
    v17 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  v21 = *(int *)(v20 + 48);
  v22 = a1 + v21;
  v23 = a2 + v21;
  *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
  v24 = type metadata accessor for NLXResultCandidate();
  v25 = *(int *)(v24 + 20);
  v26 = (void *)(v22 + v25);
  v27 = (const void *)(v23 + v25);
  v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
  *(_BYTE *)(a1 + *(int *)(v20 + 64)) = *(_BYTE *)(a2 + *(int *)(v20 + 64));
LABEL_19:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithTake for PommesBridgeResultCandidateState.ParseState(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  __int128 v5;
  int *v6;
  uint64_t v7;
  void *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  const void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  const void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  const void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest(a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v13 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v13;
      v14 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      v15 = (void *)(a1 + v14);
      v16 = (const void *)(a2 + v14);
      v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        v38 = __swift_instantiateConcreteTypeFromMangledName(v19);
        memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v20 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        v21 = *(int *)(v20 + 48);
        v22 = a1 + v21;
        v23 = a2 + v21;
        *(_QWORD *)(a1 + v21) = *(_QWORD *)(a2 + v21);
        v24 = type metadata accessor for NLXResultCandidate();
        v25 = *(int *)(v24 + 20);
        v26 = (void *)(v22 + v25);
        v27 = (const void *)(v23 + v25);
        v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        v29 = *(_QWORD *)(v28 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
        {
          v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v29 + 32))(v26, v27, v28);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        }
        *(_OWORD *)(v22 + *(int *)(v24 + 24)) = *(_OWORD *)(v23 + *(int *)(v24 + 24));
        *(_BYTE *)(a1 + *(int *)(v20 + 64)) = *(_BYTE *)(a2 + *(int *)(v20 + 64));
        goto LABEL_20;
      }
      v5 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v5;
      v6 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v7 = v6[16];
      v8 = (void *)(a1 + v7);
      v9 = (const void *)(a2 + v7);
      v10 = type metadata accessor for TCUMappedNLResponse();
      v11 = *(_QWORD *)(v10 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      {
        v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
      }
      *(_BYTE *)(a1 + v6[20]) = *(_BYTE *)(a2 + v6[20]);
      v31 = v6[24];
      v32 = (void *)(a1 + v31);
      v33 = (const void *)(a2 + v31);
      v34 = type metadata accessor for SiriUserInput();
      v35 = *(_QWORD *)(v34 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
      {
        v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v35 + 32))(v32, v33, v34);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      }
      v37 = v6[28];
      v15 = (void *)(a1 + v37);
      v16 = (const void *)(a2 + v37);
      v17 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
      {
        v19 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v18 + 32))(v15, v16, v17);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    goto LABEL_20;
  }
  return a1;
}

void type metadata completion function for PommesBridgeResultCandidateState.ParseState()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  char v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  char v16;
  char *v17;
  char *v18;
  char *v19;

  type metadata accessor for NLXResultCandidate();
  if (v0 <= 0x3F)
  {
    swift_getTupleTypeLayout3();
    v17 = &v16;
    v9 = &unk_1C24FE4B0;
    v10 = &unk_1C24FE4B0;
    type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for TCUMappedNLResponse?, (void (*)(uint64_t))MEMORY[0x1E0D9ED00]);
    if (v2 <= 0x3F)
    {
      v11 = *(_QWORD *)(v1 - 8) + 64;
      v12 = &unk_1C24FE4C8;
      type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for SiriUserInput?, (void (*)(uint64_t))MEMORY[0x1E0D9E5A0]);
      if (v4 <= 0x3F)
      {
        v13 = *(_QWORD *)(v3 - 8) + 64;
        type metadata accessor for PommesSearchEagerInfo?(319, &lazy cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?, (void (*)(uint64_t))MEMORY[0x1E0D9DF10]);
        if (v6 <= 0x3F)
        {
          v14 = *(_QWORD *)(v5 - 8) + 64;
          swift_getTupleTypeLayout();
          v18 = &v15;
          type metadata accessor for PommesSearchEagerInfo?(319, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?, (void (*)(uint64_t))MEMORY[0x1E0D9F8F8]);
          if (v7 <= 0x3F)
          {
            swift_getTupleTypeLayout3();
            v19 = &v8;
            swift_initEnumMetadataMultiPayload();
          }
        }
      }
    }
  }
}

void type metadata accessor for PommesSearchEagerInfo?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = type metadata accessor for Optional();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t type metadata completion function for PommesBridgeRequestProcessor()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for DispatchTimeInterval();
  if (v1 <= 0x3F)
    return swift_initClassMetadata2();
  return result;
}

uint64_t method lookup function for PommesBridgeRequestProcessor()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isRequestFinished.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 96))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isRequestFinished.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 104))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isRequestFinished.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 112))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.pommesStateHolder.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 120))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.pommesStateHolder.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 128))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.pommesStateHolder.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 136))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.sessionState.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 144))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.sessionState.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 152))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.sessionState.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 160))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isCandidateRequest.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 168))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeout.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 240))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeout.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 248))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeout.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 256))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.__allocating_init(assistantId:sessionId:requestId:rootRequestId:name:messagePublisher:serviceHelper:pommesSearch:sessionState:instrumentationUtil:isMultiUser:isCandidateRequest:isOnlyUserInHome:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + v0 + 264))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartSpeechRequestMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 288))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartTextRequestMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 296))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartLocalRequestMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 304))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartChildSpeechRequestMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 312))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartChildTextRequestMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 320))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartRequestMessage(_:location:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 328))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleRequestContextMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 336))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleRunPommesRequest(command:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 352))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 360))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTRPCandidateRequestMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 368))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTextBasedResultCandidateMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 376))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleGestureBasedResultCandidateMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 384))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTextBasedTRPCandidateMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 392))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleRewrittenUtteranceCandidateMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 400))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleNLResultCandidateMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 408))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleTTResponseMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 416))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleResultSelectedMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 424))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleFallbackToPommesMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 432))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.handleStartCandidateRequestMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 440))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.isReady(prState:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 448))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.search(pommesCandidateId:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 456))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, char a3)
{
  _QWORD *v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(class metadata base offset for PommesBridgeRequestProcessor
                                                             + *v3
                                                             + 472))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.timeoutCompletionHandler(pommesCandidateId:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 488))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 520))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildRunPommesResponseMessage(result:prState:searchReason:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 528))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:pommesResult:searchReason:userId:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 536))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildTRPMessage(trpId:tcuId:response:searchReason:userId:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 544))();
}

uint64_t dispatch thunk of PommesBridgeRequestProcessor.buildTRPErrorMessage(trpId:tcuId:error:searchReason:userId:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 552))();
}

uint64_t ObjC metadata update function for PommesBridgeRequestProcessor()
{
  return type metadata accessor for PommesBridgeRequestProcessor(0);
}

uint64_t partial apply for implicit closure #1 in closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  return partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(&one-time initialization token for isRequestFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRequestFinished, (uint64_t)one-time initialization function for isRequestFinished);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PommesCandidateId() - 8) + 80);
  return implicit closure #1 in closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(*(_QWORD *)(v3 + 16), v3 + ((v7 + 24) & ~v7), a1, a2, a3);
}

uint64_t partial apply for closure #2 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)(a1, *(_QWORD *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)()
{
  return closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)();
}

uint64_t objectdestroy_40Tm()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for PommesCandidateId();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

_QWORD *partial apply for closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PommesCandidateId() - 8) + 80);
  return closure #1 in PommesBridgeRequestProcessor.queueTimeout(pommesCandidateId:)(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t outlined assign with copy of InputOrigin?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)partial apply()
{
  return partial apply for closure #1 in closure #1 in PommesBridgeRequestProcessor.updatePSCParseForFallback(prState:)();
}

uint64_t static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(uint64_t a1)
{
  uint64_t v2;

  if (one-time initialization token for serialQueue != -1)
    a1 = swift_once();
  MEMORY[0x1E0C80A78](a1);
  type metadata accessor for DomainAffinityKVStore();
  OS_dispatch_queue.sync<A>(execute:)();
  return v2;
}

void *one-time initialization function for singletonInstances()
{
  void *result;

  result = (void *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  static DomainAffinityKVStoreManager.singletonInstances = result;
  return result;
}

uint64_t one-time initialization function for serialQueue()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v0 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v11 = *(_QWORD *)(v0 - 8);
  v12 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v3);
  v4 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for DispatchQoS.QoSClass();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF540], v5);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  static DispatchQoS.unspecified.getter();
  v13 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v2, *MEMORY[0x1E0DEF8D0], v12);
  result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  static DomainAffinityKVStoreManager.serialQueue = result;
  return result;
}

void closure #1 in static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  unint64_t v7;
  char v8;
  _QWORD *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint8_t *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21[3];
  void *v22;

  if (one-time initialization token for singletonInstances != -1)
    swift_once();
  swift_beginAccess();
  v6 = static DomainAffinityKVStoreManager.singletonInstances;
  if (!*((_QWORD *)static DomainAffinityKVStoreManager.singletonInstances + 2))
  {
LABEL_10:
    swift_endAccess();
    type metadata accessor for DomainAffinityKVStore();
    swift_allocObject();
    swift_bridgeObjectRetain();
    v9 = DomainAffinityKVStore.init(name:)(a1, a2);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    swift_retain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v22 = static DomainAffinityKVStoreManager.singletonInstances;
    static DomainAffinityKVStoreManager.singletonInstances = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v9, a1, a2, isUniquelyReferenced_nonNull_native);
    static DomainAffinityKVStoreManager.singletonInstances = v22;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_endAccess();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v11 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v21[0] = swift_slowAlloc();
      v20 = v21[0];
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain();
      v22 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v11, v18, "[DomainAffinityKVStoreManager] Created new DomainAffinityKVStore singleton instance for %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v20, -1, -1);
      v15 = v19;
      goto LABEL_14;
    }
LABEL_15:

    swift_bridgeObjectRelease_n();
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  v9 = *(_QWORD **)(v6[7] + 8 * v7);
  swift_endAccess();
  swift_retain();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v11, v12))
    goto LABEL_15;
  v13 = (uint8_t *)swift_slowAlloc();
  v14 = swift_slowAlloc();
  v21[0] = v14;
  *(_DWORD *)v13 = 136315138;
  swift_bridgeObjectRetain();
  v22 = (void *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v21);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  _os_log_impl(&dword_1C2356000, v11, v12, "[DomainAffinityKVStoreManager] Found existing DomainAffinityKVStore singleton instance for %s", v13, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v14, -1, -1);
  v15 = v13;
LABEL_14:
  MEMORY[0x1C3BBFF64](v15, -1, -1);

LABEL_16:
  *a3 = v9;
}

void partial apply for closure #1 in static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(_QWORD *a1@<X8>)
{
  uint64_t v1;

  closure #1 in static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t type metadata accessor for DomainAffinityKVStore()
{
  uint64_t result;

  result = type metadata singleton initialization cache for DomainAffinityKVStore;
  if (!type metadata singleton initialization cache for DomainAffinityKVStore)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t DomainAffinityKVStoreManager.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t DomainAffinityKVStoreManager.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t DomainAffinityKVStore.dictStore.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t DomainAffinityKVStore.dictStore.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*DomainAffinityKVStore.dictStore.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

_QWORD *DomainAffinityKVStore.init(name:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::String v21;
  Swift::String v22;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;

  v25 = a2;
  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v30 = *(_QWORD *)(v4 - 8);
  v31 = v4;
  MEMORY[0x1E0C80A78](v4);
  v29 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v28);
  v27 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v7);
  v26 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS.QoSClass();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for URL();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  URL.init(fileURLWithPath:isDirectory:)();
  v17 = (_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
  v18 = v25;
  *v17 = a1;
  v17[1] = v18;
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))((uint64_t)v2 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_assetDir, v16, v13);
  type metadata accessor for OS_dispatch_queue();
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(38);
  swift_bridgeObjectRelease();
  v32 = 0xD000000000000018;
  v33 = 0x80000001C25065B0;
  v19 = *v17;
  v20 = (void *)v17[1];
  swift_bridgeObjectRetain();
  v21._countAndFlagsBits = v19;
  v21._object = v20;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x516C61697265535DLL;
  v22._object = (void *)0xEC00000065756575;
  String.append(_:)(v22);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF540], v9);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter();
  v32 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v30 + 104))(v29, *MEMORY[0x1E0DEF8D0], v31);
  *(_QWORD *)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_serialQueue) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  (*(void (**)(void))(*v2 + 184))();
  return v2;
}

uint64_t DomainAffinityKVStore.maximumDomainAffinity(forKey:usingNormalizer:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
  if (!v1)
    return 0;
  v2 = specialized Sequence.max(by:)(v1);
  v4 = v3;
  swift_bridgeObjectRelease();
  if (!v4)
    return 0;
  return v2;
}

uint64_t specialized Sequence.max(by:)(uint64_t a1)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  float v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t v15;
  float v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  v2 = a1 + 64;
  v3 = *(_BYTE *)(a1 + 32);
  v4 = 1 << v3;
  v5 = -1;
  if (1 << v3 < 64)
    v5 = ~(-1 << (1 << v3));
  v6 = v5 & *(_QWORD *)(a1 + 64);
  if (v6)
  {
    v7 = 0;
    v8 = __clz(__rbit64(v6));
    v9 = (v6 - 1) & v6;
    v10 = (unint64_t)(v4 + 63) >> 6;
    while (2)
    {
      v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v8);
      v12 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * v8);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9)
      {
LABEL_6:
        v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        v15 = v14 | (v7 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        v17 = v7 + 1;
        if (__OFADD__(v7, 1))
          break;
        if (v17 >= v10)
          goto LABEL_27;
        v18 = *(_QWORD *)(v2 + 8 * v17);
        ++v7;
        if (!v18)
        {
          v7 = v17 + 1;
          if (v17 + 1 >= v10)
            goto LABEL_27;
          v18 = *(_QWORD *)(v2 + 8 * v7);
          if (!v18)
          {
            v7 = v17 + 2;
            if (v17 + 2 >= v10)
              goto LABEL_27;
            v18 = *(_QWORD *)(v2 + 8 * v7);
            if (!v18)
            {
              v7 = v17 + 3;
              if (v17 + 3 >= v10)
                goto LABEL_27;
              v18 = *(_QWORD *)(v2 + 8 * v7);
              if (!v18)
              {
                v19 = v17 + 4;
                if (v19 >= v10)
                {
LABEL_27:
                  swift_release();
                  return v11;
                }
                v18 = *(_QWORD *)(v2 + 8 * v19);
                if (!v18)
                {
                  while (1)
                  {
                    v7 = v19 + 1;
                    if (__OFADD__(v19, 1))
                      break;
                    if (v7 >= v10)
                      goto LABEL_27;
                    v18 = *(_QWORD *)(v2 + 8 * v7);
                    ++v19;
                    if (v18)
                      goto LABEL_24;
                  }
                  __break(1u);
LABEL_44:
                  v21 = 0;
                  v22 = 6;
                  if (v10 > 6)
                    v22 = v10;
                  v23 = v22 - 6;
                  while (v23 != v21)
                  {
                    v20 = *(_QWORD *)(a1 + 112 + 8 * v21++);
                    if (v20)
                    {
                      v7 = v21 + 5;
                      goto LABEL_31;
                    }
                  }
                  return 0;
                }
                v7 = v19;
              }
            }
          }
        }
LABEL_24:
        v13 = v18 - 1;
        v9 = (v18 - 1) & v18;
        v15 = __clz(__rbit64(v18)) + (v7 << 6);
LABEL_7:
        v16 = *(float *)(*(_QWORD *)(a1 + 56) + 4 * v15);
        if (v12 < v16)
        {
          v11 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16 * v15);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          v12 = v16;
          if (v9)
            goto LABEL_6;
        }
        else if (v9)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v13 >= 9)
      {
        v20 = *(_QWORD *)(a1 + 96);
        if (v20)
        {
          v7 = 4;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 104);
          if (!v20)
            goto LABEL_44;
          v7 = 5;
        }
LABEL_31:
        v9 = (v20 - 1) & v20;
        v8 = __clz(__rbit64(v20)) + (v7 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    v13 = v3 & 0x3F;
    if (v13 > 6)
    {
      v10 = (unint64_t)(v4 + 63) >> 6;
      v20 = *(_QWORD *)(a1 + 72);
      if (v20)
      {
        v7 = 1;
        goto LABEL_31;
      }
      if (v13 >= 8)
      {
        v20 = *(_QWORD *)(a1 + 80);
        if (v20)
        {
          v7 = 2;
        }
        else
        {
          v20 = *(_QWORD *)(a1 + 88);
          if (!v20)
            goto LABEL_38;
          v7 = 3;
        }
        goto LABEL_31;
      }
    }
  }
  return 0;
}

uint64_t DomainAffinityKVStore.domainAffinities(forKey:usingNormalizer:)(uint64_t a1, unint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;

  v4 = v3;
  v7 = a3();
  v9 = v8;
  v10 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 120);
  v11 = swift_bridgeObjectRetain();
  v12 = v10(v11);
  if (*(_QWORD *)(v12 + 16) && (v13 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v9), (v14 & 1) != 0))
  {
    v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
    swift_bridgeObjectRetain();
  }
  else
  {
    v15 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  swift_retain_n();
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v27 = v18;
    v28 = v7;
    v19 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    v29 = v26;
    *(_DWORD *)v19 = 136315906;
    v20 = *(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
    v21 = *(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    if (!v15)
      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    swift_bridgeObjectRetain();
    v22 = Dictionary.description.getter();
    v24 = v23;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v22, v24, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v19 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v28, v9, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v17, v27, "[DomainAffinityKVStore][%s] Found (value: %s) for (key: %s, normalizedKey: %s)", (uint8_t *)v19, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v26, -1, -1);
    MEMORY[0x1C3BBFF64](v19, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
  return v15;
}

void DomainAffinityKVStore.setDomainAffinities(_:forKey:usingNormalizer:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t (*v12)(uint64_t *);
  void (*v13)(uint64_t *, _QWORD);
  uint64_t *v14;
  uint64_t *v15;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29[4];

  v5 = v4;
  v9 = a4(a2, a3);
  v11 = v10;
  v12 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)v4 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v13 = (void (*)(uint64_t *, _QWORD))v12(v29);
  v15 = v14;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v28 = *v15;
  *v15 = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(a1, v9, v11, isUniquelyReferenced_nonNull_native);
  *v15 = v28;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v13(v29, 0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v29[0] = v27;
    *(_DWORD *)v20 = 136315906;
    v26 = a2;
    v21 = *(_QWORD *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
    v22 = *(_QWORD *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2080;
    swift_bridgeObjectRetain();
    v23 = Dictionary.description.getter();
    v25 = v24;
    swift_bridgeObjectRelease();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v25, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, a3, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 32) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v11, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v18, v19, "[DomainAffinityKVStore][%s] Updated (value: %s) for (key: %s, normalizedKey: %s)", (uint8_t *)v20, 0x2Au);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v27, -1, -1);
    MEMORY[0x1C3BBFF64](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
  }
}

Swift::Void __swiftcall DomainAffinityKVStore.clear()()
{
  uint64_t v0;
  unint64_t v1;

  v1 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  (*(void (**)(unint64_t))(*(_QWORD *)v0 + 128))(v1);
}

Swift::Void __swiftcall DomainAffinityKVStore.load()()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_serialQueue);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in DomainAffinityKVStore.load();
  *(_QWORD *)(v2 + 24) = v0;
  v4[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v4[5] = v2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_12;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
}

void closure #1 in DomainAffinityKVStore.load()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  void (*v13)(uint64_t *__return_ptr, uint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    swift_once();
  v6 = static PerformanceUtil.shared;
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v23 = 0xD000000000000016;
  v24 = 0x80000001C2506500;
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
  v7 = *(void **)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x292864616F6C2E5DLL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  v11 = v23;
  v12 = v24;
  Date.init()();
  v13 = *(void (**)(uint64_t *__return_ptr, uint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)v6 + 200);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : Float]]);
  v13(&v25, v11, v12, 0, v5, "SiriInformationSearch/DomainAffinityKVStore.swift", 49, 2, 107, "load()", 6, 2, partial apply for closure #1 in closure #1 in DomainAffinityKVStore.load(), a1, v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 128))(v25);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v16 = Logger.logObject.getter();
  v17 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v16, v17))
  {
    v18 = swift_slowAlloc();
    v19 = swift_slowAlloc();
    v23 = v19;
    *(_DWORD *)v18 = 136315394;
    swift_bridgeObjectRetain();
    v25 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, (unint64_t)v7, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v20 = swift_bridgeObjectRelease();
    *(_WORD *)(v18 + 12) = 2048;
    v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(v20) + 16);
    swift_release();
    swift_bridgeObjectRelease();
    v25 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2356000, v16, v17, "[DomainAffinityKVStore][%s] Loaded %ld entries from disk", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v19, -1, -1);
    MEMORY[0x1C3BBFF64](v18, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in closure #1 in DomainAffinityKVStore.load()()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  PropertyListDecoder.init()();
  v1 = Data.init(contentsOf:options:)();
  if (!v0)
  {
    v3 = v1;
    v4 = v2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : Float]]);
    lazy protocol witness table accessor for type [String : [String : Float]] and conformance <> [A : B]();
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    outlined consume of Data._Representation(v3, v4);
  }
  return swift_release();
}

Swift::Void __swiftcall DomainAffinityKVStore.save()()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = *(NSObject **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_serialQueue);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in DomainAffinityKVStore.save();
  *(_QWORD *)(v2 + 24) = v0;
  v4[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v4[5] = v2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_7_0;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
}

void closure #1 in DomainAffinityKVStore.save()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  Swift::String v9;
  Swift::String v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v2 = type metadata accessor for Date();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    swift_once();
  v6 = static PerformanceUtil.shared;
  v21 = 0;
  v22 = 0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v21 = 0xD000000000000016;
  v22 = 0x80000001C2506500;
  v8 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name);
  v7 = *(void **)(a1 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_name + 8);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x2928657661732E5DLL;
  v10._object = (void *)0xE800000000000000;
  String.append(_:)(v10);
  v11 = v21;
  v12 = v22;
  Date.init()();
  (*(void (**)(uint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)v6 + 200))(v11, v12, 0, v5, "SiriInformationSearch/DomainAffinityKVStore.swift", 49, 2, 121, "save()", 6, 2, partial apply for closure #1 in closure #1 in DomainAffinityKVStore.save(), a1, MEMORY[0x1E0DEE9C0] + 8);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    v21 = v17;
    *(_DWORD *)v16 = 136315394;
    swift_bridgeObjectRetain();
    v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, (unint64_t)v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v18 = swift_bridgeObjectRelease();
    *(_WORD *)(v16 + 12) = 2048;
    v19 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 120))(v18) + 16);
    swift_release();
    swift_bridgeObjectRelease();
    v20 = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2356000, v14, v15, "[DomainAffinityKVStore][%s] Saved %ld entries to disk", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v17, -1, -1);
    MEMORY[0x1C3BBFF64](v16, -1, -1);

  }
  else
  {

    swift_release_n();
  }
}

uint64_t closure #1 in closure #1 in DomainAffinityKVStore.save()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t result;

  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  (*(void (**)(void))(*(_QWORD *)a1 + 120))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : [String : Float]]);
  lazy protocol witness table accessor for type [String : [String : Float]] and conformance <> [A : B]();
  v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v5 = v4;
  swift_release();
  result = swift_bridgeObjectRelease();
  if (!v1)
  {
    Data.write(to:options:)();
    return outlined consume of Data._Representation(v3, v5);
  }
  return result;
}

uint64_t DomainAffinityKVStore.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_baseAssetsDir;
  v2 = type metadata accessor for URL();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease();
  v3(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_assetDir, v2);

  return v0;
}

uint64_t DomainAffinityKVStore.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_baseAssetsDir;
  v2 = type metadata accessor for URL();
  v3 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8);
  v3(v1, v2);
  swift_bridgeObjectRelease();
  v3(v0 + OBJC_IVAR____TtC21SiriInformationSearch21DomainAffinityKVStore_assetDir, v2);

  return swift_deallocClassInstance();
}

void partial apply for closure #1 in DomainAffinityKVStore.load()()
{
  uint64_t v0;

  closure #1 in DomainAffinityKVStore.load()(v0);
}

uint64_t sub_1C2457718()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in DomainAffinityKVStore.save()()
{
  uint64_t v0;

  closure #1 in DomainAffinityKVStore.save()(v0);
}

uint64_t sub_1C2457730()
{
  return swift_deallocObject();
}

uint64_t sub_1C2457740@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2457770(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 128);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t type metadata accessor for DomainAffinityKVStoreManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for DomainAffinityKVStoreManager()
{
  return swift_lookUpClassMethod();
}

uint64_t ObjC metadata update function for DomainAffinityKVStore()
{
  return type metadata accessor for DomainAffinityKVStore();
}

uint64_t type metadata completion function for DomainAffinityKVStore()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for DomainAffinityKVStore()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of DomainAffinityKVStore.dictStore.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.dictStore.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.dictStore.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.maximumDomainAffinity(forKey:usingNormalizer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.domainAffinities(forKey:usingNormalizer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.setDomainAffinities(_:forKey:usingNormalizer:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.clear()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.load()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of DomainAffinityKVStore.save()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t partial apply for closure #1 in closure #1 in DomainAffinityKVStore.save()()
{
  uint64_t v0;

  return closure #1 in closure #1 in DomainAffinityKVStore.save()(v0);
}

uint64_t partial apply for closure #1 in closure #1 in DomainAffinityKVStore.load()()
{
  return closure #1 in closure #1 in DomainAffinityKVStore.load()();
}

Class protocol witness for LNMetadataProviding.actionsConforming(to:logicalType:bundleIdentifier:) in conformance LNMetadataProvider(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  return @nonobjc LNMetadataProvider.actionsConforming(to:logicalType:bundleIdentifier:)(a1, a2, a3, a4);
}

uint64_t dispatch thunk of LNMetadataProviding.actionsConforming(to:logicalType:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

Class @nonobjc LNMetadataProvider.actionsConforming(to:logicalType:bundleIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void *v4;
  NSSet v8;
  id v9;
  id v10;
  id v11;
  id v12;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for LNSystemProtocol();
  lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject();
  v8.super.isa = Set._bridgeToObjectiveC()().super.isa;
  if (a4)
    a4 = (void *)MEMORY[0x1C3BBEC44](a3, a4);
  v14[0] = 0;
  v9 = objc_msgSend(v4, sel_actionsConformingToSystemProtocols_logicalType_bundleIdentifier_error_, v8.super.isa, a2, a4, v14);

  v10 = v14[0];
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [String : LNActionMetadata]);
    v8.super.isa = (Class)static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v10;

  }
  else
  {
    v12 = v14[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v8.super.isa;
}

unint64_t type metadata accessor for LNSystemProtocol()
{
  unint64_t result;

  result = lazy cache variable for type metadata for LNSystemProtocol;
  if (!lazy cache variable for type metadata for LNSystemProtocol)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocol);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LNSystemProtocol and conformance NSObject()
{
  unint64_t result;
  unint64_t v1;

  result = lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject;
  if (!lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject)
  {
    v1 = type metadata accessor for LNSystemProtocol();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEFCF8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocol and conformance NSObject);
  }
  return result;
}

uint64_t PluginWarmupHandler.pluginIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PluginWarmupHandler.warmupComponents.getter()
{
  return swift_bridgeObjectRetain();
}

_QWORD *PluginWarmupHandler.__allocating_init(pluginIdentifier:warmupComponents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;

  result = (_QWORD *)swift_allocObject();
  result[2] = a1;
  result[3] = a2;
  result[4] = a3;
  return result;
}

_QWORD *PluginWarmupHandler.init(pluginIdentifier:warmupComponents:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;

  v3[2] = a1;
  v3[3] = a2;
  v3[4] = a3;
  return v3;
}

uint64_t sub_1C2457D30()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t PluginWarmupHandler.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PluginWarmupHandler.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PluginWarmupHandler()
{
  return objc_opt_self();
}

uint64_t method lookup function for PluginWarmupHandler()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PluginWarmupHandler.__allocating_init(pluginIdentifier:warmupComponents:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PluginWarmupHandler.warmup(request:serviceHelper:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t specialized Collection<>.merge<A>(with:by:isAscending:)(unint64_t a1, uint64_t a2, char a3, unint64_t a4)
{
  unint64_t v4;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  id v11;
  BOOL v12;
  id v13;
  uint64_t v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  id v23;
  id v24;
  id v25;
  uint64_t result;
  id v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  float v35;
  float v36;
  uint64_t v37;

  v4 = a4;
  v37 = MEMORY[0x1E0DEE9D8];
  if (a4 >> 62)
  {
LABEL_104:
    v34 = v4 & 0xFFFFFFFFFFFFFF8;
    swift_bridgeObjectRetain();
    v6 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v34 = a4 & 0xFFFFFFFFFFFFFF8;
    v6 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v7 = 0;
  v8 = 0;
  v9 = a1 & 0xFFFFFFFFFFFFFF8;
  v29 = a1;
  v10 = v4 & 0xC000000000000001;
  v30 = v4;
  v4 += 32;
  v32 = a1 + 32;
  v33 = a1 & 0xC000000000000001;
  a1 >>= 62;
  do
  {
    while (1)
    {
      while (1)
      {
        while (1)
        {
          while (1)
          {
            if ((uint64_t)v8 >= v6)
            {
              if (a1)
              {
                swift_bridgeObjectRetain();
                v28 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
                if ((uint64_t)v7 >= v28)
                  return v37;
              }
              else if ((int64_t)v7 >= *(_QWORD *)(v9 + 16))
              {
                return v37;
              }
            }
            if (v8 != v6)
              break;
            if (v33)
            {
              MEMORY[0x1C3BBF3F4](v7, v29);
            }
            else
            {
              if ((v7 & 0x8000000000000000) != 0)
                goto LABEL_101;
              if (v7 >= *(_QWORD *)(v9 + 16))
                goto LABEL_102;
              v13 = *(id *)(v32 + 8 * v7);
            }
            MEMORY[0x1C3BBEE78]();
            if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
            v12 = __OFADD__(v7++, 1);
            if (v12)
              goto LABEL_103;
            v8 = v6;
          }
          if (!a1)
            break;
          swift_bridgeObjectRetain();
          v14 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
          if (v7 != v14)
            goto LABEL_28;
LABEL_10:
          if (v10)
          {
            MEMORY[0x1C3BBF3F4](v8, v30);
          }
          else
          {
            if ((v8 & 0x8000000000000000) != 0)
            {
              __break(1u);
LABEL_89:
              __break(1u);
LABEL_90:
              __break(1u);
LABEL_91:
              __break(1u);
LABEL_92:
              __break(1u);
LABEL_93:
              __break(1u);
LABEL_94:
              __break(1u);
LABEL_95:
              __break(1u);
LABEL_96:
              __break(1u);
LABEL_97:
              __break(1u);
LABEL_98:
              __break(1u);
LABEL_99:
              __break(1u);
LABEL_100:
              __break(1u);
LABEL_101:
              __break(1u);
LABEL_102:
              __break(1u);
LABEL_103:
              __break(1u);
              goto LABEL_104;
            }
            if (v8 >= *(_QWORD *)(v34 + 16))
              goto LABEL_89;
            v11 = *(id *)(v4 + 8 * v8);
          }
          MEMORY[0x1C3BBEE78]();
          if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v12 = __OFADD__(v8++, 1);
          if (v12)
            goto LABEL_90;
        }
        if (v7 == *(_QWORD *)(v9 + 16))
          goto LABEL_10;
LABEL_28:
        if ((a3 & 1) != 0)
          break;
        if (v10)
        {
          v19 = (id)MEMORY[0x1C3BBF3F4](v8, v30);
        }
        else
        {
          if ((v8 & 0x8000000000000000) != 0)
            goto LABEL_94;
          if (v8 >= *(_QWORD *)(v34 + 16))
            goto LABEL_95;
          v19 = *(id *)(v4 + 8 * v8);
        }
        v20 = v19;
        swift_getAtKeyPath();

        if (v33)
        {
          v21 = (id)MEMORY[0x1C3BBF3F4](v7, v29);
        }
        else
        {
          if ((v7 & 0x8000000000000000) != 0)
            goto LABEL_96;
          if (v7 >= *(_QWORD *)(v9 + 16))
            goto LABEL_98;
          v21 = *(id *)(v32 + 8 * v7);
        }
        v22 = v21;
        swift_getAtKeyPath();

        if (v36 < v35)
        {
          if (v33)
            MEMORY[0x1C3BBF3F4](v7, v29);
          else
            v27 = *(id *)(v32 + 8 * v7);
          MEMORY[0x1C3BBEE78]();
          if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          result = specialized Array._endMutation()();
          v12 = __OFADD__(v7++, 1);
          if (v12)
            goto LABEL_105;
        }
        else
        {
          if (v10)
            MEMORY[0x1C3BBF3F4](v8, v30);
          else
            v24 = *(id *)(v4 + 8 * v8);
          MEMORY[0x1C3BBEE78]();
          if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
          v12 = __OFADD__(v8++, 1);
          if (v12)
            goto LABEL_100;
        }
      }
      if (v10)
      {
        v15 = (id)MEMORY[0x1C3BBF3F4](v8, v30);
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0)
          goto LABEL_91;
        if (v8 >= *(_QWORD *)(v34 + 16))
          goto LABEL_92;
        v15 = *(id *)(v4 + 8 * v8);
      }
      v16 = v15;
      swift_getAtKeyPath();

      if (v33)
      {
        v17 = (id)MEMORY[0x1C3BBF3F4](v7, v29);
      }
      else
      {
        if ((v7 & 0x8000000000000000) != 0)
          goto LABEL_93;
        if (v7 >= *(_QWORD *)(v9 + 16))
          goto LABEL_97;
        v17 = *(id *)(v32 + 8 * v7);
      }
      v18 = v17;
      swift_getAtKeyPath();

      if (v36 >= v35)
        break;
      if (v10)
        MEMORY[0x1C3BBF3F4](v8, v30);
      else
        v23 = *(id *)(v4 + 8 * v8);
      MEMORY[0x1C3BBEE78]();
      if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      v12 = __OFADD__(v8++, 1);
      if (v12)
        goto LABEL_99;
    }
    if (v33)
      MEMORY[0x1C3BBF3F4](v7, v29);
    else
      v25 = *(id *)(v32 + 8 * v7);
    MEMORY[0x1C3BBEE78]();
    if (*(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    result = specialized Array._endMutation()();
    v12 = __OFADD__(v7++, 1);
  }
  while (!v12);
  __break(1u);
LABEL_105:
  __break(1u);
  return result;
}

uint64_t specialized Sequence.max(by:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD *v22;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_26;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  result = swift_bridgeObjectRetain();
  if (v2)
  {
    while (1)
    {
      v21 = v1 & 0xC000000000000001;
      if ((v1 & 0xC000000000000001) != 0)
      {
        v4 = (_QWORD *)MEMORY[0x1C3BBF3F4](0, v1);
      }
      else
      {
        if (!*(_QWORD *)((v1 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        v4 = *(id *)(v1 + 32);
      }
      v22 = v4;
      if (v2 == 1)
        break;
      v20 = v1 & 0xFFFFFFFFFFFFFF8;
      v6 = 1;
      v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      while (1)
      {
        if (v21)
        {
          v8 = (_QWORD *)MEMORY[0x1C3BBF3F4](v6, v1);
        }
        else
        {
          if ((v6 & 0x8000000000000000) != 0)
            goto LABEL_24;
          if (v6 >= *(_QWORD *)(v20 + 16))
            goto LABEL_25;
          v8 = *(id *)(v1 + 8 * v6 + 32);
        }
        v5 = v8;
        v9 = v6 + 1;
        if (__OFADD__(v6, 1))
          break;
        v10 = v1;
        v11 = v2;
        v12 = (_QWORD *)(*(uint64_t (**)(void))((*v7 & *v22) + 0xB8))();
        v13 = (*(uint64_t (**)(void))((*v7 & *v12) + 0xE0))();

        v14 = *(_QWORD *)(v13 + 16);
        v15 = swift_bridgeObjectRelease();
        v16 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v7 & *v5) + 0xB8))(v15);
        v17 = (*(uint64_t (**)(void))((*v7 & *v16) + 0xE0))();

        v18 = *(_QWORD *)(v17 + 16);
        swift_bridgeObjectRelease();
        if (v14 < v18)
        {

          v22 = v5;
          ++v6;
          v2 = v11;
          v19 = v9 == v11;
          v1 = v10;
          if (v19)
            goto LABEL_8;
        }
        else
        {

          ++v6;
          v2 = v11;
          v19 = v9 == v11;
          v1 = v10;
          if (v19)
            goto LABEL_7;
        }
      }
      __break(1u);
LABEL_24:
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      swift_bridgeObjectRetain();
      result = _CocoaArrayWrapper.endIndex.getter();
      v2 = result;
      if (!result)
        goto LABEL_27;
    }
LABEL_7:
    v5 = v22;
LABEL_8:
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
  return (uint64_t)v5;
}

uint64_t AudioRanker.__allocating_init(localeIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  id v5;
  Class isa;
  id v7;
  uint64_t v9;

  v0 = type metadata accessor for Locale();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = swift_allocObject();
  Locale.init(identifier:)();
  v5 = objc_allocWithZone(MEMORY[0x1E0D981D0]);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v7 = objc_msgSend(v5, sel_initWithLocale_, isa);

  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  *(_QWORD *)(v4 + 16) = v7;
  return v4;
}

uint64_t AudioRanker.init(localeIdentifier:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  id v6;
  Class isa;
  id v8;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for Locale();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Locale.init(identifier:)();
  v6 = objc_allocWithZone(MEMORY[0x1E0D981D0]);
  isa = Locale._bridgeToObjectiveC()().super.isa;
  v8 = objc_msgSend(v6, sel_initWithLocale_, isa);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  *(_QWORD *)(v1 + 16) = v8;
  return v1;
}

uint64_t AudioRanker.rank(query:clientCandidate:serverCandidate:clientSignals:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  _BOOL4 v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unsigned int (*v56)(uint64_t, uint64_t, uint64_t);
  unsigned int v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint8_t *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  char *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  void (*v82)(unint64_t, _QWORD, uint64_t);
  unint64_t v83;
  char *v84;
  void (*v85)(char *, unint64_t, uint64_t);
  void (*v86)(char *, uint64_t);
  char v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  unint64_t v107;
  _QWORD *v108;
  uint64_t v109;
  _QWORD *v110;
  _QWORD *v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  unint64_t v115;
  _QWORD *v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  void (*v122)(unint64_t *, unint64_t);
  NSObject *v123;
  os_log_type_t v124;
  _BOOL4 v125;
  uint8_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  unint64_t v131;
  unint64_t v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  uint8_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  float v146;
  float v147;
  void (*v148)(char *, uint64_t);
  char *v149;
  uint64_t v150;
  float v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  _QWORD *v155;
  uint64_t (*v156)(unint64_t, uint64_t, uint64_t);
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  float v161;
  int isUniquelyReferenced_nonNull_native;
  char v163;
  uint64_t v164;
  _BOOL8 v165;
  uint64_t v166;
  char v167;
  unint64_t v168;
  char v169;
  float v170;
  uint64_t v171;
  BOOL v172;
  uint64_t v173;
  unint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  uint64_t v177;
  void (*v178)(unint64_t *, _QWORD);
  float *v179;
  _QWORD *v180;
  _QWORD *v181;
  float v182;
  unint64_t v183;
  char v184;
  NSObject *v185;
  os_log_type_t v186;
  _BOOL4 v187;
  char *v188;
  uint8_t *v189;
  uint64_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unint64_t v198;
  unint64_t v199;
  uint64_t v200;
  unint64_t v201;
  unint64_t v202;
  unint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  uint8_t *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  unint64_t v211;
  uint64_t KeyPath;
  unint64_t v213;
  uint64_t result;
  uint64_t v215;
  void (*v216)(char *, uint64_t);
  char *v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  char *v221;
  uint64_t v222;
  unsigned int (*v223)(uint64_t, uint64_t, uint64_t);
  uint64_t v224;
  unint64_t v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  __int128 v233;
  void (*v234)(char *);
  uint8_t *v235;
  char *v236;
  char *v237;
  char *v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  char *v243;
  uint64_t v244;
  char *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;

  v230 = a4;
  v222 = a1;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v249 = *(_QWORD *)(v6 - 8);
  v250 = v6;
  MEMORY[0x1E0C80A78](v6);
  v251 = (uint64_t)&v215 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v248 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibraryResultTypedScoreMultiplier();
  v247 = *(_QWORD *)(v248 - 8);
  MEMORY[0x1E0C80A78](v248);
  v9 = (unint64_t)&v215 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientRankingOverrides();
  v218 = *(_QWORD *)(v10 - 8);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v215 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v217 = (char *)&v215 - v14;
  v232 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v229 = *(_QWORD *)(v232 - 8);
  MEMORY[0x1E0C80A78](v232);
  v221 = (char *)&v215 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact();
  v239 = *(_QWORD *)(v16 - 8);
  v17 = MEMORY[0x1E0C80A78](v16);
  v238 = (char *)&v215 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v237 = (char *)&v215 - v19;
  v242 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo();
  v241 = *(_QWORD *)(v242 - 8);
  MEMORY[0x1E0C80A78](v242);
  v243 = (char *)&v215 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v224 = (uint64_t)&v215 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v244 = (uint64_t)&v215 - v24;
  v226 = type metadata accessor for Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo();
  v246 = *(_QWORD *)(v226 - 8);
  v25 = MEMORY[0x1E0C80A78](v226);
  v245 = (char *)&v215 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1E0C80A78](v25);
  v236 = (char *)&v215 - v28;
  MEMORY[0x1E0C80A78](v27);
  v227 = (char *)&v215 - v29;
  v254 = a3;
  v255 = a2;
  v30 = one-time initialization token for pommes;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v30 != -1)
    goto LABEL_76;
  while (1)
  {
    v31 = type metadata accessor for Logger();
    v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    v33 = Logger.logObject.getter();
    v34 = static os_log_type_t.debug.getter();
    v35 = os_log_type_enabled(v33, v34);
    v240 = v32;
    v225 = v9;
    v220 = v10;
    v219 = v13;
    if (v35)
    {
      v36 = (uint8_t *)swift_slowAlloc();
      v37 = swift_slowAlloc();
      v252 = v37;
      *(_DWORD *)v36 = 136315138;
      v235 = v36 + 4;
      swift_beginAccess();
      v38 = type metadata accessor for AudioItemCandidate(0);
      v39 = swift_bridgeObjectRetain();
      v40 = MEMORY[0x1C3BBEEC0](v39, v38);
      v42 = v41;
      swift_bridgeObjectRelease();
      v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v40, v42, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v33, v34, "AudioRanker#rank clientCandidate: %s", v36, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v37, -1, -1);
      MEMORY[0x1C3BBFF64](v36, -1, -1);
    }

    v43 = Logger.logObject.getter();
    v44 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v43, v44))
    {
      v45 = (uint8_t *)swift_slowAlloc();
      v46 = swift_slowAlloc();
      v252 = v46;
      *(_DWORD *)v45 = 136315138;
      v235 = v45 + 4;
      swift_beginAccess();
      v47 = type metadata accessor for AudioItemCandidate(0);
      v48 = swift_bridgeObjectRetain();
      v49 = MEMORY[0x1C3BBEEC0](v48, v47);
      v51 = v50;
      swift_bridgeObjectRelease();
      v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v43, v44, "AudioRanker#rank serverCandidate: %s", v45, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v46, -1, -1);
      MEMORY[0x1C3BBFF64](v45, -1, -1);
    }

    v52 = v229;
    v53 = v246;
    v54 = v245;
    v55 = v244;
    outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v230, v244);
    v56 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
    v57 = v56(v55, 1, v232);
    v223 = v56;
    if (v57 == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v55);
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v60 = 0;
        _os_log_impl(&dword_1C2356000, v58, v59, "AudioRanker#rank musicRankingInfluenceImpactInfo: NOT_AVAILABLE ", v60, 2u);
        MEMORY[0x1C3BBFF64](v60, -1, -1);
      }

    }
    else
    {
      v61 = v236;
      Apple_Parsec_Siri_V2alpha_ClientSignals.musicRankingInfluenceImpactInfo.getter();
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v55, v232);
      v62 = v227;
      v63 = v226;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v227, v61, v226);
      (*(void (**)(char *, char *, uint64_t))(v53 + 16))(v54, v62, v63);
      v64 = Logger.logObject.getter();
      v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = (uint8_t *)swift_slowAlloc();
        v67 = swift_slowAlloc();
        v252 = v67;
        *(_DWORD *)v66 = 136315138;
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo and conformance Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D70520], MEMORY[0x1E0D70518]);
        v68 = Message.debugDescription.getter();
        v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v70 = *(void (**)(char *, uint64_t))(v246 + 8);
        v70(v54, v63);
        _os_log_impl(&dword_1C2356000, v64, v65, "AudioRanker#rank musicRankingInfluenceImpactInfo: %s", v66, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v67, -1, -1);
        MEMORY[0x1C3BBFF64](v66, -1, -1);
      }
      else
      {
        v70 = *(void (**)(char *, uint64_t))(v53 + 8);
        v70(v54, v63);
      }

      v71 = v243;
      v72 = Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.suggestionImpactInfo.getter();
      v73 = *(char **)(v72 + 16);
      if (v73)
      {
        v216 = v70;
        v74 = (*(unsigned __int8 *)(v241 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v241 + 80);
        v215 = v72;
        v75 = v72 + v74;
        LODWORD(v236) = *MEMORY[0x1E0D703D0];
        LODWORD(v235) = *MEMORY[0x1E0D70400];
        v231 = *(_QWORD *)(v241 + 72);
        v234 = *(void (**)(char *))(v241 + 16);
        v233 = xmmword_1C24FB7E0;
        v76 = v239;
        v77 = v238;
        while (1)
        {
          v245 = v73;
          v244 = v75;
          v234(v71);
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact>);
          v78 = *(_QWORD *)(v76 + 72);
          v79 = (*(unsigned __int8 *)(v76 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
          v80 = swift_allocObject();
          *(_OWORD *)(v80 + 16) = v233;
          v246 = v80;
          v81 = v80 + v79;
          v82 = *(void (**)(unint64_t, _QWORD, uint64_t))(v76 + 104);
          v82(v81, v236, v16);
          v83 = v81 + v78;
          v82(v81 + v78, v235, v16);
          v84 = v237;
          Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpactInfo.ClientMusicSuggestionImpactInfo.impact.getter();
          v85 = *(void (**)(char *, unint64_t, uint64_t))(v76 + 16);
          v85(v77, v81, v16);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact and conformance Ampmusicfeedbackforpplpb_MusicRankingInfluenceImpact, (uint64_t (*)(uint64_t))MEMORY[0x1E0D70410], MEMORY[0x1E0D70420]);
          LOBYTE(v78) = dispatch thunk of static Equatable.== infix(_:_:)();
          v86 = *(void (**)(char *, uint64_t))(v76 + 8);
          v86(v77, v16);
          if ((v78 & 1) != 0)
            break;
          v85(v77, v83, v16);
          v87 = dispatch thunk of static Equatable.== infix(_:_:)();
          v86(v77, v16);
          v86(v84, v16);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          if ((v87 & 1) != 0)
            goto LABEL_71;
          v71 = v243;
          (*(void (**)(char *, uint64_t))(v241 + 8))(v243, v242);
          v75 = v244 + v231;
          v73 = v245 - 1;
          if (v245 == (char *)1)
          {
            swift_bridgeObjectRelease();
            v216(v227, v226);
            goto LABEL_20;
          }
        }
        v86(v84, v16);
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
LABEL_71:
        swift_bridgeObjectRelease();
        v185 = Logger.logObject.getter();
        v186 = static os_log_type_t.info.getter();
        v187 = os_log_type_enabled(v185, v186);
        v188 = v243;
        if (v187)
        {
          v189 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v189 = 0;
          _os_log_impl(&dword_1C2356000, v185, v186, "AudioRanker#rank musicRankingInfluenceImpactInfo: Top result from the server is a slotted result. Ignoring the client results and returning the server results", v189, 2u);
          MEMORY[0x1C3BBFF64](v189, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v241 + 8))(v188, v242);
        v216(v227, v226);
        swift_beginAccess();
        v190 = v254;
        goto LABEL_89;
      }
      swift_bridgeObjectRelease();
      v70(v227, v226);
    }
LABEL_20:
    v88 = v222;
    swift_beginAccess();
    swift_beginAccess();
    AudioRanker.featurise(clientCandidate:serverCandidate:with:)(&v255, &v254, v88);
    swift_endAccess();
    swift_endAccess();
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc();
      v92 = swift_slowAlloc();
      v252 = v92;
      *(_DWORD *)v91 = 136315138;
      v93 = type metadata accessor for AudioItemCandidate(0);
      v94 = swift_bridgeObjectRetain();
      v95 = MEMORY[0x1C3BBEEC0](v94, v93);
      v97 = v96;
      swift_bridgeObjectRelease();
      v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v97, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v89, v90, "AudioRanker#rank Post featurise-clientCandidate: %s", v91, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v92, -1, -1);
      MEMORY[0x1C3BBFF64](v91, -1, -1);
    }

    v98 = Logger.logObject.getter();
    v99 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v98, v99))
    {
      v100 = (uint8_t *)swift_slowAlloc();
      v101 = swift_slowAlloc();
      v252 = v101;
      *(_DWORD *)v100 = 136315138;
      v102 = type metadata accessor for AudioItemCandidate(0);
      v103 = swift_bridgeObjectRetain();
      v104 = MEMORY[0x1C3BBEEC0](v103, v102);
      v106 = v105;
      swift_bridgeObjectRelease();
      v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v98, v99, "AudioRanker#rank Post featurise-serverCandidate: %s", v100, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v101, -1, -1);
      MEMORY[0x1C3BBFF64](v100, -1, -1);
    }

    v107 = swift_bridgeObjectRetain();
    v108 = (_QWORD *)specialized Sequence.max(by:)(v107);
    v109 = swift_bridgeObjectRelease();
    v110 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    if (v108)
    {
      v111 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v108) + 0xB8))(v109);

      v113 = (*(uint64_t (**)(uint64_t))((*v110 & *v111) + 0xE0))(v112);
      v114 = *(_QWORD *)(v113 + 16);
      swift_bridgeObjectRelease();
    }
    else
    {
      v114 = 1;
    }
    v115 = swift_bridgeObjectRetain();
    v116 = (_QWORD *)specialized Sequence.max(by:)(v115);
    v117 = swift_bridgeObjectRelease();
    if (v116)
    {
      v118 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*v110 & *v116) + 0xB8))(v117);

      v120 = (*(uint64_t (**)(uint64_t))((*v110 & *v118) + 0xE0))(v119);
      v121 = *(_QWORD *)(v120 + 16);
      swift_bridgeObjectRelease();
      if (v121 <= v114)
        v121 = v114;
    }
    else if (v114 <= 1)
    {
      v121 = 1;
    }
    else
    {
      v121 = v114;
    }
    swift_beginAccess();
    v122 = *(void (**)(unint64_t *, unint64_t))(*(_QWORD *)v228 + 112);
    v122(&v255, v121);
    swift_endAccess();
    swift_beginAccess();
    v122((unint64_t *)&v254, v121);
    swift_endAccess();
    v123 = Logger.logObject.getter();
    v124 = static os_log_type_t.debug.getter();
    v125 = os_log_type_enabled(v123, v124);
    v246 = 0;
    if (v125)
    {
      v126 = (uint8_t *)swift_slowAlloc();
      v127 = swift_slowAlloc();
      v252 = v127;
      *(_DWORD *)v126 = 136315138;
      v128 = type metadata accessor for AudioItemCandidate(0);
      v129 = swift_bridgeObjectRetain();
      v130 = MEMORY[0x1C3BBEEC0](v129, v128);
      v132 = v131;
      swift_bridgeObjectRelease();
      v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v130, v132, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v123, v124, "AudioRanker#rank Post score-clientCandidate: %s", v126, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v127, -1, -1);
      MEMORY[0x1C3BBFF64](v126, -1, -1);
    }

    v133 = v254;
    swift_bridgeObjectRetain_n();
    v134 = Logger.logObject.getter();
    v135 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v134, v135))
    {
      v136 = (uint8_t *)swift_slowAlloc();
      v137 = swift_slowAlloc();
      v252 = v137;
      *(_DWORD *)v136 = 136315138;
      v138 = type metadata accessor for AudioItemCandidate(0);
      v139 = MEMORY[0x1C3BBEEC0](v133, v138);
      v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v139, v140, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v134, v135, "AudioRanker#rank Post score-serverCandidate: %s", v136, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v137, -1, -1);
      MEMORY[0x1C3BBFF64](v136, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v141 = v251;
    v142 = v225;
    v143 = v224;
    outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v230, v224);
    v144 = v232;
    if (v223(v143, 1, v232) == 1)
    {
      outlined destroy of Apple_Parsec_Siri_V2alpha_ClientSignals?(v143);
      goto LABEL_81;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v229 + 32))(v221, v143, v144);
    v145 = v217;
    Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
    Apple_Parsec_Siri_V2alpha_ClientRankingOverrides.libraryResultUniversalScoreMultiplier.getter();
    v147 = v146;
    v148 = *(void (**)(char *, uint64_t))(v218 + 8);
    v149 = v145;
    v150 = v220;
    v148(v149, v220);
    v151 = v147 >= 0.001 ? v147 : 1.0;
    v152 = v219;
    v153 = Apple_Parsec_Siri_V2alpha_ClientSignals.clientRankingOverrides.getter();
    v154 = MEMORY[0x1C3BBC274](v153);
    v148(v152, v150);
    v155 = (_QWORD *)specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v10 = *(_QWORD *)(v154 + 16);
    if (!v10)
      break;
    v16 = v154 + ((*(unsigned __int8 *)(v247 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v247 + 80));
    v13 = *(char **)(v247 + 72);
    v156 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v247 + 16);
    v245 = (char *)v154;
    swift_bridgeObjectRetain();
    v157 = v248;
    while (1)
    {
      v158 = v156(v142, v16, v157);
      v159 = MEMORY[0x1C3BBC520](v158);
      v160 = v142;
      v161 = MEMORY[0x1C3BBC52C](v159);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v252 = (unint64_t)v155;
      v9 = specialized __RawDictionaryStorage.find<A>(_:)(v141);
      v164 = v155[2];
      v165 = (v163 & 1) == 0;
      v166 = v164 + v165;
      if (__OFADD__(v164, v165))
        break;
      v167 = v163;
      if (v155[3] < v166)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v166, isUniquelyReferenced_nonNull_native);
        v168 = specialized __RawDictionaryStorage.find<A>(_:)(v251);
        if ((v167 & 1) != (v169 & 1))
          goto LABEL_92;
        v9 = v168;
        goto LABEL_52;
      }
      v157 = v248;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
LABEL_52:
        v157 = v248;
      }
      v170 = v151 * v161;
      v155 = (_QWORD *)v252;
      if ((v167 & 1) != 0)
      {
        *(float *)(*(_QWORD *)(v252 + 56) + 4 * v9) = v170;
        v141 = v251;
      }
      else
      {
        *(_QWORD *)(v252 + 8 * (v9 >> 6) + 64) |= 1 << v9;
        v141 = v251;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v249 + 16))(v155[6] + *(_QWORD *)(v249 + 72) * v9, v251, v250);
        *(float *)(v155[7] + 4 * v9) = v170;
        v171 = v155[2];
        v172 = __OFADD__(v171, 1);
        v173 = v171 + 1;
        if (v172)
          goto LABEL_75;
        v155[2] = v173;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v249 + 8))(v141, v250);
      v142 = v160;
      (*(void (**)(unint64_t, uint64_t))(v247 + 8))(v160, v157);
      v16 += (uint64_t)v13;
      if (!--v10)
      {
        swift_bridgeObjectRelease();
        goto LABEL_59;
      }
    }
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    swift_once();
  }
LABEL_59:
  swift_bridgeObjectRelease();
  v174 = v255;
  v175 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  if (v255 >> 62)
  {
    swift_bridgeObjectRetain_n();
    v176 = _CocoaArrayWrapper.endIndex.getter();
    if (!v176)
      goto LABEL_78;
LABEL_61:
    if (v176 >= 1)
    {
      v177 = 0;
      do
      {
        if ((v174 & 0xC000000000000001) != 0)
          v180 = (_QWORD *)MEMORY[0x1C3BBF3F4](v177, v174);
        else
          v180 = *(id *)(v174 + 8 * v177 + 32);
        v181 = v180;
        v182 = v151;
        if (v155[2])
        {
          v183 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v180 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType);
          v182 = v151;
          if ((v184 & 1) != 0)
            v182 = *(float *)(v155[7] + 4 * v183);
        }
        ++v177;
        v178 = (void (*)(unint64_t *, _QWORD))(*(uint64_t (**)(unint64_t *))((*v175 & *v181) + 0xB0))(&v252);
        *v179 = v182 * *v179;
        v178(&v252, 0);

      }
      while (v176 != v177);
      goto LABEL_78;
    }
    __break(1u);
LABEL_92:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
  else
  {
    v176 = *(_QWORD *)((v255 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v176)
      goto LABEL_61;
LABEL_78:
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    v191 = Logger.logObject.getter();
    v192 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v191, v192))
    {
      v193 = (uint8_t *)swift_slowAlloc();
      v194 = swift_slowAlloc();
      v252 = v194;
      *(_DWORD *)v193 = 136315138;
      v195 = type metadata accessor for AudioItemCandidate(0);
      v196 = swift_bridgeObjectRetain();
      v197 = MEMORY[0x1C3BBEEC0](v196, v195);
      v199 = v198;
      swift_bridgeObjectRelease();
      v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v197, v199, (uint64_t *)&v252);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v191, v192, "AudioRanker#rank Post multipliers-clientCandidate: %s", v193, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v194, -1, -1);
      MEMORY[0x1C3BBFF64](v193, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v229 + 8))(v221, v232);
LABEL_81:
    v200 = v246;
    v201 = v255;
    if ((v255 & 0x8000000000000000) != 0 || (v255 & 0x4000000000000000) != 0)
    {
      swift_bridgeObjectRetain_n();
      v202 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v201);
      swift_bridgeObjectRelease();
    }
    else
    {
      v202 = v255 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain_n();
    }
    v252 = v202;
    specialized MutableCollection<>.sort(by:)((uint64_t *)&v252);
    if (!v200)
    {
      swift_bridgeObjectRelease();
      v203 = v252;
      v255 = v252;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n();
      v204 = Logger.logObject.getter();
      v205 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v204, v205))
      {
        v206 = (uint8_t *)swift_slowAlloc();
        v207 = swift_slowAlloc();
        v252 = v207;
        *(_DWORD *)v206 = 136315138;
        v208 = type metadata accessor for AudioItemCandidate(0);
        v209 = MEMORY[0x1C3BBEEC0](v203, v208);
        v253 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v209, v210, (uint64_t *)&v252);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v204, v205, "AudioRanker#rank Post sorting by score-clientCandidate: %s", v206, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v207, -1, -1);
        MEMORY[0x1C3BBFF64](v206, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v211 = v254;
      KeyPath = swift_getKeyPath();
      swift_bridgeObjectRetain();
      v213 = swift_bridgeObjectRetain();
      v190 = specialized Collection<>.merge<A>(with:by:isAscending:)(v213, KeyPath, 0, v211);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_89:
      swift_bridgeObjectRelease();
      return v190;
    }
  }
  result = swift_release();
  __break(1u);
  return result;
}

void key path getter for AudioItemCandidate.score : AudioItemCandidate(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xA0))();
}

uint64_t key path setter for AudioItemCandidate.score : AudioItemCandidate(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xA8))(*a1);
}

uint64_t AudioRanker.featurise(clientCandidate:serverCandidate:with:)(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t matched;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  id v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  id v59;

  v4 = v3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Featuriser>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FE380;
  v9 = type metadata accessor for AudioTypeFeaturiser(0);
  swift_allocObject();
  v10 = swift_retain();
  v11 = specialized AudioTypeFeaturiser.init(query:)(v10);
  swift_release();
  *(_QWORD *)(inited + 32) = v11;
  v54 = inited + 32;
  *(_QWORD *)(inited + 56) = v9;
  *(_QWORD *)(inited + 64) = &protocol witness table for AudioTypeFeaturiser;
  matched = type metadata accessor for SourceMatchFeaturiser();
  swift_allocObject();
  v13 = swift_retain();
  v14 = specialized SourceMatchFeaturiser.init(query:)(v13);
  swift_release();
  *(_QWORD *)(inited + 96) = matched;
  *(_QWORD *)(inited + 104) = &protocol witness table for SourceMatchFeaturiser;
  *(_QWORD *)(inited + 72) = v14;
  v15 = type metadata accessor for GlideFeaturiser();
  swift_allocObject();
  v16 = swift_retain();
  v17 = specialized GlideFeaturiser.init(query:)(v16);
  swift_release();
  *(_QWORD *)(inited + 136) = v15;
  *(_QWORD *)(inited + 144) = &protocol witness table for GlideFeaturiser;
  *(_QWORD *)(inited + 112) = v17;
  v18 = *(void **)(v4 + 16);
  v19 = type metadata accessor for EntityNameFeaturiser();
  swift_allocObject();
  swift_retain();
  v20 = EntityNameFeaturiser.init(query:localizedTokenizer:)(a3, v18);
  *(_QWORD *)(inited + 176) = v19;
  *(_QWORD *)(inited + 184) = &protocol witness table for EntityNameFeaturiser;
  *(_QWORD *)(inited + 152) = v20;
  v21 = type metadata accessor for SourcePriorityFeaturiser();
  swift_allocObject();
  v22 = swift_retain();
  v23 = SourcePriorityFeaturiser.init(query:)(v22);
  *(_QWORD *)(inited + 216) = v21;
  *(_QWORD *)(inited + 224) = &protocol witness table for SourcePriorityFeaturiser;
  *(_QWORD *)(inited + 192) = v23;
  v24 = type metadata accessor for DownloadedFeaturiser();
  swift_allocObject();
  v25 = swift_retain();
  v26 = specialized DownloadedFeaturiser.init(query:)(v25);
  swift_release();
  *(_QWORD *)(inited + 256) = v24;
  *(_QWORD *)(inited + 264) = &protocol witness table for DownloadedFeaturiser;
  *(_QWORD *)(inited + 232) = v26;
  v27 = *a1;
  if (*a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    v58 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  else
  {
    v58 = *(_QWORD *)((v27 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v28 = *a2;
  if ((unint64_t)*a2 >> 62)
  {
    swift_bridgeObjectRetain();
    v29 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v29 < 0)
      __break(1u);
    v51 = v28 & 0xFFFFFFFFFFFFFF8;
  }
  else
  {
    v51 = v28 & 0xFFFFFFFFFFFFFF8;
    v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v30 = 0;
  v55 = v27 & 0xC000000000000001;
  v56 = v29;
  v57 = v28 & 0xC000000000000001;
  a2 = (uint64_t *)v27;
  v52 = v28;
  do
  {
    v31 = (_QWORD *)(v54 + 40 * v30);
    if (v58)
    {
      if (v58 < 1)
      {
        __break(1u);
LABEL_26:
        __break(1u);
        goto LABEL_27;
      }
      v53 = v30;
      v32 = v54 + 40 * v30;
      v33 = (uint64_t *)(v32 + 24);
      v34 = (uint64_t *)(v32 + 32);
      swift_bridgeObjectRetain_n();
      v35 = 0;
      do
      {
        if (v55)
          v36 = (id)MEMORY[0x1C3BBF3F4](v35, v27);
        else
          v36 = *(id *)(v27 + 8 * v35 + 32);
        v37 = v36;
        ++v35;
        v59 = v36;
        v38 = *v33;
        v39 = *v34;
        __swift_project_boxed_opaque_existential_1(v31, *v33);
        v40 = v37;
        Featuriser.featurise(candidate:)((uint64_t)&v59, v38, v39);
        v41 = v59;

        v27 = (unint64_t)a2;
      }
      while (v58 != v35);
      swift_bridgeObjectRelease_n();
      v28 = v52;
      v30 = v53;
      v29 = v56;
    }
    if (v29)
    {
      if (!v57)
      {
        v42 = *(_QWORD *)(v51 + 16);
        if (!v42 || v29 > v42)
          goto LABEL_26;
      }
      v43 = 0;
      v44 = v54 + 40 * v30;
      v45 = (uint64_t *)(v44 + 24);
      v46 = (uint64_t *)(v44 + 32);
      do
      {
        if (v57)
          v47 = (id)MEMORY[0x1C3BBF3F4](v43, v28);
        else
          v47 = *(id *)(v28 + 8 * v43 + 32);
        v59 = v47;
        v48 = *v45;
        v49 = *v46;
        __swift_project_boxed_opaque_existential_1(v31, *v45);
        (*(void (**)(id *, uint64_t, uint64_t, uint64_t))(v49 + 16))(&v59, v43, v48, v49);

        ++v43;
        v29 = v56;
      }
      while (v56 != v43);
    }
    ++v30;
    v27 = (unint64_t)a2;
  }
  while (v30 != 6);
  swift_bridgeObjectRelease();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Featuriser);
  return swift_arrayDestroy();
}

Swift::Void __swiftcall AudioRanker.score(items:maxCandidateFieldCount:)(Swift::OpaquePointer *items, Swift::Int maxCandidateFieldCount)
{
  unint64_t rawValue;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void *v7;
  _QWORD *v8;

  rawValue = (unint64_t)items->_rawValue;
  if (!((unint64_t)items->_rawValue >> 62))
  {
    v4 = *(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (v4)
      goto LABEL_3;
LABEL_10:
    swift_bridgeObjectRelease_n();
    return;
  }
  swift_bridgeObjectRetain_n();
  v4 = _CocoaArrayWrapper.endIndex.getter();
  if (!v4)
    goto LABEL_10;
LABEL_3:
  if (v4 >= 1)
  {
    v5 = 0;
    do
    {
      if ((rawValue & 0xC000000000000001) != 0)
        v6 = (_QWORD *)MEMORY[0x1C3BBF3F4](v5, rawValue);
      else
        v6 = *(id *)(rawValue + 8 * v5 + 32);
      v7 = v6;
      ++v5;
      v8 = v6;
      closure #1 in AudioRanker.score(items:maxCandidateFieldCount:)(&v8, maxCandidateFieldCount);

    }
    while (v4 != v5);
    goto LABEL_10;
  }
  __break(1u);
}

uint64_t closure #1 in AudioRanker.score(items:maxCandidateFieldCount:)(_QWORD **a1, int64_t a2)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v5)(void);
  _QWORD *v6;
  float v7;
  _QWORD *v8;
  float v9;
  _QWORD *v10;
  float v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int64_t v15;
  _QWORD *v16;
  uint64_t v17;
  float v18;
  float v19;
  uint64_t v20;
  _QWORD *v21;
  float v22;
  _QWORD *v23;
  float v24;
  float v25;
  float v26;
  _QWORD *v27;
  float v28;
  _QWORD *v29;

  v3 = *a1;
  v4 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v5 = *(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xB8);
  v6 = (_QWORD *)v5();
  v7 = (*(float (**)(void))((*v4 & *v6) + 0xC8))();

  v8 = (_QWORD *)v5();
  v9 = (*(float (**)(void))((*v4 & *v8) + 0xB0))();

  v10 = (_QWORD *)v5();
  v11 = (*(float (**)(void))((*v4 & *v10) + 0x98))();

  v12 = (_QWORD *)v5();
  v13 = (*(uint64_t (**)(void))((*v4 & *v12) + 0xE0))();

  v14 = (_QWORD *)v5();
  v15 = (*(uint64_t (**)(void))((*v4 & *v14) + 0xF8))();

  v16 = (_QWORD *)v5();
  v17 = (*(uint64_t (**)(void))((*v4 & *v16) + 0x110))();

  specialized static EntityNameFeaturiser.score(_:_:_:_:)(v13, v15, v17, a2);
  v19 = v18;
  v20 = swift_bridgeObjectRelease();
  v21 = (_QWORD *)((uint64_t (*)(uint64_t))v5)(v20);
  v22 = (*(float (**)(void))((*v4 & *v21) + 0x140))();

  v23 = (_QWORD *)v5();
  v24 = (*(float (**)(void))((*v4 & *v23) + 0x128))();

  v25 = (float)((float)(v22 * v24) * 2.2) + 1.0;
  if (v22 < 0.001)
    v25 = 1.0;
  v26 = (float)((float)((float)(v7 * v9) * v11) * v19) * v25;
  v27 = (_QWORD *)v5();
  v28 = (*(float (**)(void))((*v4 & *v27) + 0x158))();

  v29 = (_QWORD *)v5();
  (*(void (**)(void))((*v4 & *v29) + 0x128))();

  return (*(uint64_t (**)(float))((*v4 & *v3) + 0xA8))(v26 * v28);
}

uint64_t AudioRanker.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AudioRanker.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t specialized MutableCollection<>.sort(by:)(uint64_t *a1)
{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

{
  uint64_t v2;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v4;
  uint64_t v6[2];

  v2 = *a1;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v2;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    specialized _ContiguousArrayBuffer._consumeAndCreateNew()();
  v4 = *(_QWORD *)(v2 + 16);
  v6[0] = v2 + 32;
  v6[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  return specialized ContiguousArray._endMutation()();
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(uint64_t *a1)
{
  uint64_t v1;
  uint64_t *v2;
  Swift::Int v3;
  Swift::Int v4;
  uint64_t v5;
  Swift::Int v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  unint64_t v12;
  Swift::Int v13;
  _QWORD *v14;
  void *v15;
  _QWORD *v16;
  float (*v17)(void);
  _QWORD *v18;
  _QWORD *v19;
  float v20;
  float v21;
  Swift::Int v22;
  char *v23;
  id *v24;
  void *v25;
  _QWORD *v26;
  float (*v27)(void);
  id v28;
  _QWORD *v29;
  float v30;
  float v31;
  uint64_t *v32;
  Swift::Int v33;
  Swift::Int v34;
  uint64_t *v35;
  uint64_t v36;
  Swift::Int v37;
  uint64_t v38;
  _QWORD *v39;
  Swift::Int v40;
  uint64_t v41;
  void *v42;
  _QWORD *v43;
  float (*v44)(void);
  _QWORD *v45;
  _QWORD *v46;
  float v47;
  float v48;
  void *v49;
  unint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  BOOL v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  BOOL v75;
  uint64_t v76;
  char v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  BOOL v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  unint64_t v105;
  char *v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  Swift::Int v110;
  Swift::Int v111;
  Swift::Int v112;
  Swift::Int v113;
  void **v114;
  uint64_t v115;
  uint64_t v116;

  v2 = a1;
  v3 = a1[1];
  v4 = _minimumMergeRunLength(_:)(v3);
  if (v4 >= v3)
  {
    if (v3 < 0)
      goto LABEL_131;
    if (v3)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v3, 1, v2);
    return;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_139;
  v6 = v4;
  v107 = v2;
  if (v3 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v116 = MEMORY[0x1E0DEE9D8];
    v114 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v3 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_97:
      if (v12 >= 2)
      {
        v100 = *v107;
        do
        {
          v101 = v12 - 2;
          if (v12 < 2)
            goto LABEL_126;
          if (!v100)
            goto LABEL_138;
          v102 = *(_QWORD *)&v10[16 * v101 + 32];
          v103 = *(_QWORD *)&v10[16 * v12 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v100 + 8 * v102), (id *)(v100 + 8 * *(_QWORD *)&v10[16 * v12 + 16]), v100 + 8 * v103, v114);
          if (v1)
            break;
          if (v103 < v102)
            goto LABEL_127;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v10 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v10);
          if (v101 >= *((_QWORD *)v10 + 2))
            goto LABEL_128;
          v104 = &v10[16 * v101 + 32];
          *(_QWORD *)v104 = v102;
          *((_QWORD *)v104 + 1) = v103;
          v105 = *((_QWORD *)v10 + 2);
          if (v12 > v105)
            goto LABEL_129;
          memmove(&v10[16 * v12 + 16], &v10[16 * v12 + 32], 16 * (v105 - v12));
          *((_QWORD *)v10 + 2) = v105 - 1;
          v12 = v105 - 1;
        }
        while (v105 > 2);
      }
LABEL_108:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v116 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v7 = v2;
    v8 = v5 >> 1;
    type metadata accessor for AudioItemCandidate(0);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v2 = v7;
    v114 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v116 = v9;
  }
  v11 = 0;
  v109 = *v2 + 16;
  v110 = v6;
  v115 = *v2;
  v108 = *v2 - 8;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v112 = v3;
  while (1)
  {
    v13 = v11++;
    v113 = v13;
    if (v11 < v3)
    {
      v14 = *(_QWORD **)(v115 + 8 * v11);
      v15 = *(void **)(v115 + 8 * v13);
      v16 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v17 = *(float (**)(void))((*MEMORY[0x1E0DEEDD8] & *v14) + 0xA0);
      v18 = v14;
      v19 = v15;
      v20 = v17();
      v21 = (*(float (**)(void))((*v16 & *v19) + 0xA0))();

      v11 = v13 + 2;
      if (v13 + 2 < v3)
      {
        v22 = v13;
        v23 = v10;
        v24 = (id *)(v109 + 8 * v22);
        while (1)
        {
          v25 = *(v24 - 1);
          v26 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          v27 = *(float (**)(void))((*MEMORY[0x1E0DEEDD8] & *(_QWORD *)*v24) + 0xA0);
          v28 = *v24;
          v29 = v25;
          v30 = v27();
          v31 = (*(float (**)(void))((*v26 & *v29) + 0xA0))();

          if (v21 < v20 == v31 >= v30)
            break;
          ++v11;
          ++v24;
          v3 = v112;
          if (v112 == v11)
          {
            v11 = v112;
            goto LABEL_22;
          }
        }
        v3 = v112;
LABEL_22:
        v10 = v23;
        v13 = v113;
      }
      if (v21 < v20)
      {
        if (v11 < v13)
          goto LABEL_132;
        if (v13 < v11)
        {
          v32 = (uint64_t *)(v108 + 8 * v11);
          v33 = v11;
          v34 = v13;
          v35 = (uint64_t *)(v115 + 8 * v13);
          do
          {
            if (v34 != --v33)
            {
              if (!v115)
                goto LABEL_137;
              v36 = *v35;
              *v35 = *v32;
              *v32 = v36;
            }
            ++v34;
            --v32;
            ++v35;
          }
          while (v34 < v33);
        }
      }
    }
    if (v11 < v3)
    {
      if (__OFSUB__(v11, v13))
        goto LABEL_130;
      if (v11 - v13 < v110)
        break;
    }
LABEL_48:
    if (v11 < v13)
      goto LABEL_125;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v51 = *((_QWORD *)v10 + 2);
    v50 = *((_QWORD *)v10 + 3);
    v12 = v51 + 1;
    if (v51 >= v50 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v50 > 1), v51 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v12;
    v52 = v10 + 32;
    v53 = &v10[16 * v51 + 32];
    *(_QWORD *)v53 = v13;
    *((_QWORD *)v53 + 1) = v11;
    if (v51)
    {
      while (1)
      {
        v54 = v12 - 1;
        if (v12 >= 4)
        {
          v59 = &v52[16 * v12];
          v60 = *((_QWORD *)v59 - 8);
          v61 = *((_QWORD *)v59 - 7);
          v65 = __OFSUB__(v61, v60);
          v62 = v61 - v60;
          if (v65)
            goto LABEL_114;
          v64 = *((_QWORD *)v59 - 6);
          v63 = *((_QWORD *)v59 - 5);
          v65 = __OFSUB__(v63, v64);
          v57 = v63 - v64;
          v58 = v65;
          if (v65)
            goto LABEL_115;
          v66 = v12 - 2;
          v67 = &v52[16 * v12 - 32];
          v69 = *(_QWORD *)v67;
          v68 = *((_QWORD *)v67 + 1);
          v65 = __OFSUB__(v68, v69);
          v70 = v68 - v69;
          if (v65)
            goto LABEL_117;
          v65 = __OFADD__(v57, v70);
          v71 = v57 + v70;
          if (v65)
            goto LABEL_120;
          if (v71 >= v62)
          {
            v89 = &v52[16 * v54];
            v91 = *(_QWORD *)v89;
            v90 = *((_QWORD *)v89 + 1);
            v65 = __OFSUB__(v90, v91);
            v92 = v90 - v91;
            if (v65)
              goto LABEL_124;
            v82 = v57 < v92;
            goto LABEL_85;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v83 = *((_QWORD *)v10 + 4);
            v84 = *((_QWORD *)v10 + 5);
            v65 = __OFSUB__(v84, v83);
            v76 = v84 - v83;
            v77 = v65;
            goto LABEL_79;
          }
          v56 = *((_QWORD *)v10 + 4);
          v55 = *((_QWORD *)v10 + 5);
          v65 = __OFSUB__(v55, v56);
          v57 = v55 - v56;
          v58 = v65;
        }
        if ((v58 & 1) != 0)
          goto LABEL_116;
        v66 = v12 - 2;
        v72 = &v52[16 * v12 - 32];
        v74 = *(_QWORD *)v72;
        v73 = *((_QWORD *)v72 + 1);
        v75 = __OFSUB__(v73, v74);
        v76 = v73 - v74;
        v77 = v75;
        if (v75)
          goto LABEL_119;
        v78 = &v52[16 * v54];
        v80 = *(_QWORD *)v78;
        v79 = *((_QWORD *)v78 + 1);
        v65 = __OFSUB__(v79, v80);
        v81 = v79 - v80;
        if (v65)
          goto LABEL_122;
        if (__OFADD__(v76, v81))
          goto LABEL_123;
        if (v76 + v81 >= v57)
        {
          v82 = v57 < v81;
LABEL_85:
          if (v82)
            v54 = v66;
          goto LABEL_87;
        }
LABEL_79:
        if ((v77 & 1) != 0)
          goto LABEL_118;
        v85 = &v52[16 * v54];
        v87 = *(_QWORD *)v85;
        v86 = *((_QWORD *)v85 + 1);
        v65 = __OFSUB__(v86, v87);
        v88 = v86 - v87;
        if (v65)
          goto LABEL_121;
        if (v88 < v76)
          goto LABEL_14;
LABEL_87:
        v93 = v54 - 1;
        if (v54 - 1 >= v12)
        {
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
          goto LABEL_134;
        }
        if (!v115)
          goto LABEL_136;
        v94 = v10;
        v95 = &v52[16 * v93];
        v96 = *(_QWORD *)v95;
        v97 = &v52[16 * v54];
        v98 = *((_QWORD *)v97 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v115 + 8 * *(_QWORD *)v95), (id *)(v115 + 8 * *(_QWORD *)v97), v115 + 8 * v98, v114);
        if (v1)
          goto LABEL_108;
        if (v98 < v96)
          goto LABEL_111;
        if (v54 > *((_QWORD *)v94 + 2))
          goto LABEL_112;
        *(_QWORD *)v95 = v96;
        *(_QWORD *)&v52[16 * v93 + 8] = v98;
        v99 = *((_QWORD *)v94 + 2);
        if (v54 >= v99)
          goto LABEL_113;
        v10 = v94;
        v12 = v99 - 1;
        memmove(&v52[16 * v54], v97 + 16, 16 * (v99 - 1 - v54));
        *((_QWORD *)v94 + 2) = v99 - 1;
        if (v99 <= 2)
          goto LABEL_14;
      }
    }
    v12 = 1;
LABEL_14:
    v3 = v112;
    if (v11 >= v112)
      goto LABEL_97;
  }
  if (__OFADD__(v13, v110))
    goto LABEL_133;
  if (v13 + v110 >= v3)
    v37 = v3;
  else
    v37 = v13 + v110;
  if (v37 >= v13)
  {
    if (v11 != v37)
    {
      v106 = v10;
      v38 = v108 + 8 * v11;
      v111 = v37;
      do
      {
        v39 = *(_QWORD **)(v115 + 8 * v11);
        v40 = v13;
        v41 = v38;
        do
        {
          v42 = *(void **)v41;
          v43 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          v44 = *(float (**)(void))((*MEMORY[0x1E0DEEDD8] & *v39) + 0xA0);
          v45 = v39;
          v46 = v42;
          v47 = v44();
          v48 = (*(float (**)(void))((*v43 & *v46) + 0xA0))();

          if (v48 >= v47)
            break;
          if (!v115)
            goto LABEL_135;
          v49 = *(void **)v41;
          v39 = *(_QWORD **)(v41 + 8);
          *(_QWORD *)v41 = v39;
          *(_QWORD *)(v41 + 8) = v49;
          v41 -= 8;
          ++v40;
        }
        while (v11 != v40);
        ++v11;
        v38 += 8;
        v13 = v113;
      }
      while (v11 != v111);
      v11 = v111;
      v10 = v106;
    }
    goto LABEL_48;
  }
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;
  Swift::Int v5;
  uint64_t v6;
  Swift::Int v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::Int v11;
  uint64_t v12;
  unint64_t v13;
  Swift::Int v14;
  void *v15;
  id v16;
  id v17;
  float v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  void *v23;
  id v24;
  id v25;
  float v26;
  float v27;
  float v28;
  float v29;
  uint64_t *v30;
  Swift::Int v31;
  Swift::Int v32;
  uint64_t *v33;
  uint64_t v34;
  Swift::Int v35;
  uint64_t v36;
  void *v37;
  Swift::Int v38;
  uint64_t v39;
  void *v40;
  id v41;
  id v42;
  float v43;
  float v44;
  float v45;
  float v46;
  void *v47;
  unint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  BOOL v63;
  unint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  uint64_t v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  uint64_t v95;
  char *v96;
  unint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  unint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  Swift::Int v114;
  Swift::Int v115;
  Swift::Int v116;
  Swift::Int v117;
  void **v118;
  uint64_t v119;

  v2 = v1;
  v4 = a1[1];
  v5 = _minimumMergeRunLength(_:)(v4);
  if (v5 >= v4)
  {
    if (v4 < 0)
      goto LABEL_132;
    if (v4)
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v4, 1, a1);
    return;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_140;
  v7 = v5;
  v110 = a1;
  if (v4 < 2)
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
    v119 = MEMORY[0x1E0DEE9D8];
    v118 = (void **)((MEMORY[0x1E0DEE9D8] & 0xFFFFFFFFFFFFFF8) + 32);
    if (v4 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
LABEL_98:
      v102 = v10;
      if (v13 >= 2)
      {
        v103 = *v110;
        do
        {
          v104 = v13 - 2;
          if (v13 < 2)
            goto LABEL_127;
          if (!v103)
            goto LABEL_139;
          v105 = v102;
          v106 = *(_QWORD *)&v102[16 * v104 + 32];
          v107 = *(_QWORD *)&v102[16 * v13 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v103 + 8 * v106), (id *)(v103 + 8 * *(_QWORD *)&v102[16 * v13 + 16]), v103 + 8 * v107, v118);
          if (v2)
            break;
          if (v107 < v106)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v105 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v105);
          if (v104 >= *((_QWORD *)v105 + 2))
            goto LABEL_129;
          v108 = &v105[16 * v104 + 32];
          *(_QWORD *)v108 = v106;
          *((_QWORD *)v108 + 1) = v107;
          v109 = *((_QWORD *)v105 + 2);
          if (v13 > v109)
            goto LABEL_130;
          memmove(&v105[16 * v13 + 16], &v105[16 * v13 + 32], 16 * (v109 - v13));
          v102 = v105;
          *((_QWORD *)v105 + 2) = v109 - 1;
          v13 = v109 - 1;
        }
        while (v109 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      *(_QWORD *)((v119 & 0xFFFFFFFFFFFFF8) + 0x10) = 0;
      specialized Array._endMutation()();
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    v8 = v6 >> 1;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
    v9 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(_QWORD *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10) = v8;
    v118 = (void **)((v9 & 0xFFFFFFFFFFFFFF8) + 32);
    v119 = v9;
  }
  v114 = v7;
  v11 = 0;
  v12 = *a1;
  v111 = *a1 - 8;
  v112 = *a1 + 16;
  v10 = (char *)MEMORY[0x1E0DEE9D8];
  v115 = v4;
  while (1)
  {
    v14 = v11++;
    v116 = v14;
    if (v11 < v4)
    {
      v15 = *(void **)(v12 + 8 * v14);
      v16 = *(id *)(v12 + 8 * v11);
      v17 = v15;
      objc_msgSend(v16, sel_score);
      v19 = v18;
      objc_msgSend(v17, sel_score);
      v21 = v20;

      v11 = v14 + 2;
      if (v14 + 2 < v4)
      {
        v22 = (id *)(v112 + 8 * v14);
        while (1)
        {
          v23 = *(v22 - 1);
          v24 = *v22;
          v25 = v23;
          objc_msgSend(v24, sel_score);
          v27 = v26;
          objc_msgSend(v25, sel_score);
          v29 = v28;

          if (v21 < v19 == v29 >= v27)
            break;
          ++v11;
          ++v22;
          if (v4 == v11)
          {
            v11 = v4;
            break;
          }
        }
        v14 = v116;
      }
      if (v21 < v19)
      {
        if (v11 < v14)
          goto LABEL_133;
        if (v14 < v11)
        {
          v30 = (uint64_t *)(v111 + 8 * v11);
          v31 = v11;
          v32 = v14;
          v33 = (uint64_t *)(v12 + 8 * v14);
          do
          {
            if (v32 != --v31)
            {
              if (!v12)
                goto LABEL_138;
              v34 = *v33;
              *v33 = *v30;
              *v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v11 >= v4)
      goto LABEL_47;
    if (__OFSUB__(v11, v14))
      goto LABEL_131;
    if (v11 - v14 >= v114)
      goto LABEL_47;
    if (__OFADD__(v14, v114))
      goto LABEL_134;
    v35 = v14 + v114 >= v4 ? v4 : v14 + v114;
    if (v35 < v14)
      break;
    if (v11 != v35)
    {
      v113 = v10;
      v36 = v111 + 8 * v11;
      do
      {
        v37 = *(void **)(v12 + 8 * v11);
        v38 = v14;
        v39 = v36;
        do
        {
          v40 = *(void **)v39;
          v41 = v37;
          v42 = v40;
          objc_msgSend(v41, sel_score);
          v44 = v43;
          objc_msgSend(v42, sel_score);
          v46 = v45;

          if (v46 >= v44)
            break;
          if (!v12)
            goto LABEL_136;
          v47 = *(void **)v39;
          v37 = *(void **)(v39 + 8);
          *(_QWORD *)v39 = v37;
          *(_QWORD *)(v39 + 8) = v47;
          v39 -= 8;
          ++v38;
        }
        while (v11 != v38);
        ++v11;
        v36 += 8;
        v14 = v116;
      }
      while (v11 != v35);
      v11 = v35;
      v10 = v113;
    }
LABEL_47:
    if (v11 < v14)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((_QWORD *)v10 + 2) + 1, 1, v10);
    v49 = *((_QWORD *)v10 + 2);
    v48 = *((_QWORD *)v10 + 3);
    v13 = v49 + 1;
    if (v49 >= v48 >> 1)
      v10 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v48 > 1), v49 + 1, 1, v10);
    *((_QWORD *)v10 + 2) = v13;
    v50 = v10 + 32;
    v51 = &v10[16 * v49 + 32];
    *(_QWORD *)v51 = v14;
    *((_QWORD *)v51 + 1) = v11;
    if (v49)
    {
      v117 = v11;
      while (1)
      {
        v52 = v13 - 1;
        if (v13 >= 4)
        {
          v57 = &v50[16 * v13];
          v58 = *((_QWORD *)v57 - 8);
          v59 = *((_QWORD *)v57 - 7);
          v63 = __OFSUB__(v59, v58);
          v60 = v59 - v58;
          if (v63)
            goto LABEL_115;
          v62 = *((_QWORD *)v57 - 6);
          v61 = *((_QWORD *)v57 - 5);
          v63 = __OFSUB__(v61, v62);
          v55 = v61 - v62;
          v56 = v63;
          if (v63)
            goto LABEL_116;
          v64 = v13 - 2;
          v65 = &v50[16 * v13 - 32];
          v67 = *(_QWORD *)v65;
          v66 = *((_QWORD *)v65 + 1);
          v63 = __OFSUB__(v66, v67);
          v68 = v66 - v67;
          if (v63)
            goto LABEL_118;
          v63 = __OFADD__(v55, v68);
          v69 = v55 + v68;
          if (v63)
            goto LABEL_121;
          if (v69 >= v60)
          {
            v87 = &v50[16 * v52];
            v89 = *(_QWORD *)v87;
            v88 = *((_QWORD *)v87 + 1);
            v63 = __OFSUB__(v88, v89);
            v90 = v88 - v89;
            if (v63)
              goto LABEL_125;
            v80 = v55 < v90;
            goto LABEL_85;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v81 = *((_QWORD *)v10 + 4);
            v82 = *((_QWORD *)v10 + 5);
            v63 = __OFSUB__(v82, v81);
            v74 = v82 - v81;
            v75 = v63;
            goto LABEL_79;
          }
          v54 = *((_QWORD *)v10 + 4);
          v53 = *((_QWORD *)v10 + 5);
          v63 = __OFSUB__(v53, v54);
          v55 = v53 - v54;
          v56 = v63;
        }
        if ((v56 & 1) != 0)
          goto LABEL_117;
        v64 = v13 - 2;
        v70 = &v50[16 * v13 - 32];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v73 = __OFSUB__(v71, v72);
        v74 = v71 - v72;
        v75 = v73;
        if (v73)
          goto LABEL_120;
        v76 = &v50[16 * v52];
        v78 = *(_QWORD *)v76;
        v77 = *((_QWORD *)v76 + 1);
        v63 = __OFSUB__(v77, v78);
        v79 = v77 - v78;
        if (v63)
          goto LABEL_123;
        if (__OFADD__(v74, v79))
          goto LABEL_124;
        if (v74 + v79 >= v55)
        {
          v80 = v55 < v79;
LABEL_85:
          if (v80)
            v52 = v64;
          goto LABEL_87;
        }
LABEL_79:
        if ((v75 & 1) != 0)
          goto LABEL_119;
        v83 = &v50[16 * v52];
        v85 = *(_QWORD *)v83;
        v84 = *((_QWORD *)v83 + 1);
        v63 = __OFSUB__(v84, v85);
        v86 = v84 - v85;
        if (v63)
          goto LABEL_122;
        if (v86 < v74)
          goto LABEL_14;
LABEL_87:
        v91 = v52 - 1;
        if (v52 - 1 >= v13)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        v92 = v12;
        if (!v12)
          goto LABEL_137;
        v93 = v10;
        v94 = &v50[16 * v91];
        v95 = *(_QWORD *)v94;
        v96 = v50;
        v97 = v52;
        v98 = &v50[16 * v52];
        v99 = *((_QWORD *)v98 + 1);
        v100 = v92;
        specialized _merge<A>(low:mid:high:buffer:by:)((void **)(v92 + 8 * *(_QWORD *)v94), (id *)(v92 + 8 * *(_QWORD *)v98), v92 + 8 * v99, v118);
        if (v1)
          goto LABEL_95;
        if (v99 < v95)
          goto LABEL_112;
        if (v97 > *((_QWORD *)v93 + 2))
          goto LABEL_113;
        *(_QWORD *)v94 = v95;
        *(_QWORD *)&v96[16 * v91 + 8] = v99;
        v101 = *((_QWORD *)v93 + 2);
        if (v97 >= v101)
          goto LABEL_114;
        v10 = v93;
        v13 = v101 - 1;
        memmove(v98, v98 + 16, 16 * (v101 - 1 - v97));
        v50 = v96;
        *((_QWORD *)v93 + 2) = v101 - 1;
        v12 = v100;
        v11 = v117;
        if (v101 <= 2)
          goto LABEL_14;
      }
    }
    v13 = 1;
LABEL_14:
    v4 = v115;
    if (v11 >= v115)
    {
      v2 = v1;
      goto LABEL_98;
    }
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  float (*v11)(void);
  _QWORD *v12;
  _QWORD *v13;
  float v14;
  float v15;
  void *v16;
  uint64_t v19;

  if (a3 != a2)
  {
    v4 = a3;
    v5 = *a4;
    v6 = *a4 + 8 * a3 - 8;
    v7 = (_QWORD *)MEMORY[0x1E0DEEDD8];
LABEL_5:
    v8 = *(_QWORD **)(v5 + 8 * v4);
    v9 = a1;
    v19 = v6;
    while (1)
    {
      v10 = *(void **)v6;
      v11 = *(float (**)(void))((*v7 & *v8) + 0xA0);
      v12 = v8;
      v13 = v10;
      v14 = v11();
      v15 = (*(float (**)(void))((*v7 & *v13) + 0xA0))();

      if (v15 >= v14)
      {
LABEL_4:
        ++v4;
        v6 = v19 + 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v5)
        break;
      v16 = *(void **)v6;
      v8 = *(_QWORD **)(v6 + 8);
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(v6 + 8) = v16;
      v6 -= 8;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  id v12;
  id v13;
  float v14;
  float v15;
  float v16;
  float v17;
  void *v18;

  if (a3 != a2)
  {
    v4 = a3;
    v6 = *a4;
    v7 = *a4 + 8 * a3 - 8;
LABEL_5:
    v8 = *(void **)(v6 + 8 * v4);
    v9 = a1;
    v10 = v7;
    while (1)
    {
      v11 = *(void **)v10;
      v12 = v8;
      v13 = v11;
      objc_msgSend(v12, sel_score);
      v15 = v14;
      objc_msgSend(v13, sel_score);
      v17 = v16;

      if (v17 >= v15)
      {
LABEL_4:
        ++v4;
        v7 += 8;
        if (v4 == a2)
          return;
        goto LABEL_5;
      }
      if (!v6)
        break;
      v18 = *(void **)v10;
      v8 = *(void **)(v10 + 8);
      *(_QWORD *)v10 = v8;
      *(_QWORD *)(v10 + 8) = v18;
      v10 -= 8;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(void **__src, id *a2, unint64_t a3, void **a4)
{
  id *v4;
  void **v5;
  int64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD *v13;
  void **v14;
  void *v15;
  float (*v16)(void);
  id v17;
  _QWORD *v18;
  float v19;
  float v20;
  id *v21;
  char *v22;
  id *v23;
  id *v24;
  _QWORD *v25;
  char *v26;
  void *v27;
  unint64_t v28;
  _QWORD *v29;
  float (*v30)(void);
  _QWORD *v31;
  _QWORD *v32;
  float v33;
  float v34;
  uint64_t result;
  void **v36;
  id *v38;
  id *v40;
  char *v41;
  void **v42;
  id *v43;

  v4 = a2;
  v5 = __src;
  v6 = (char *)a2 - (char *)__src;
  v7 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v7 = (char *)a2 - (char *)__src;
  v8 = v7 >> 3;
  v9 = a3 - (_QWORD)a2;
  v10 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v10 = a3 - (_QWORD)a2;
  v11 = v10 >> 3;
  v43 = __src;
  v42 = a4;
  if (v8 >= v10 >> 3)
  {
    if (v9 >= -7)
    {
      if (a4 != a2 || &a2[v11] <= a4)
        memmove(a4, a2, 8 * v11);
      v22 = (char *)&a4[v11];
      v41 = v22;
      v43 = v4;
      if (v5 < v4 && v9 >= 8)
      {
        v23 = (id *)(a3 - 8);
        v24 = v4;
        v36 = v5;
        while (1)
        {
          v38 = v23 + 1;
          v40 = v4;
          v26 = v22 - 8;
          v25 = (_QWORD *)*((_QWORD *)v22 - 1);
          v27 = *--v24;
          v28 = (unint64_t)v22;
          v29 = (_QWORD *)MEMORY[0x1E0DEEDD8];
          v30 = *(float (**)(void))((*MEMORY[0x1E0DEEDD8] & *v25) + 0xA0);
          v31 = v25;
          v32 = v27;
          v33 = v30();
          v34 = (*(float (**)(void))((*v29 & *v32) + 0xA0))();

          if (v34 >= v33)
          {
            v41 = v26;
            v24 = v40;
            if ((unint64_t)v38 < v28 || (unint64_t)v23 >= v28)
            {
              *v23 = *(id *)v26;
              v22 = v26;
              if (v40 <= v36)
                goto LABEL_44;
            }
            else
            {
              if (v38 != (id *)v28)
                *v23 = *(id *)v26;
              v22 = v26;
              if (v40 <= v36)
                goto LABEL_44;
            }
          }
          else
          {
            if (v38 != v40 || v23 >= v40)
              *v23 = *v24;
            v43 = v24;
            v22 = (char *)v28;
            if (v24 <= v36)
              goto LABEL_44;
          }
          --v23;
          v4 = v24;
          if (v22 <= (char *)a4)
            goto LABEL_44;
        }
      }
      goto LABEL_44;
    }
  }
  else if (v6 >= -7)
  {
    if (a4 != __src || &__src[v8] <= a4)
      memmove(a4, __src, 8 * v8);
    v12 = (char *)&a4[v8];
    v41 = v12;
    if ((unint64_t)v4 < a3 && v6 >= 8)
    {
      v13 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v14 = a4;
      do
      {
        v15 = *v14;
        v16 = *(float (**)(void))((*v13 & *(_QWORD *)*v4) + 0xA0);
        v17 = *v4;
        v18 = v15;
        v19 = v16();
        v20 = (*(float (**)(void))((*v13 & *v18) + 0xA0))();

        if (v20 >= v19)
        {
          if (v5 != v14)
            *v5 = *v14;
          v42 = ++v14;
          v21 = v4;
        }
        else
        {
          v21 = v4 + 1;
          if (v5 < v4 || v5 >= v21 || v5 != v4)
            *v5 = *v4;
        }
        ++v5;
        if (v14 >= (void **)v12)
          break;
        v4 = v21;
      }
      while ((unint64_t)v21 < a3);
      v43 = v5;
    }
LABEL_44:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v43, &v42, &v41);
    return 1;
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  id *v5;
  void **v6;
  int64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void **v14;
  void *v15;
  id v16;
  id v17;
  float v18;
  float v19;
  float v20;
  float v21;
  id *v22;
  id *v23;
  id *v24;
  void **v25;
  id *v26;
  id *v27;
  void *v28;
  id v29;
  id v30;
  float v31;
  float v32;
  float v33;
  float v34;
  uint64_t result;
  char *v37;
  void **v38;
  id *v39;

  v5 = a2;
  v6 = __src;
  v7 = (char *)a2 - (char *)__src;
  v8 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0)
    v8 = (char *)a2 - (char *)__src;
  v9 = v8 >> 3;
  v10 = a3 - (_QWORD)a2;
  v11 = a3 - (_QWORD)a2 + 7;
  if ((uint64_t)(a3 - (_QWORD)a2) >= 0)
    v11 = a3 - (_QWORD)a2;
  v12 = v11 >> 3;
  v39 = __src;
  v38 = a4;
  if (v9 >= v11 >> 3)
  {
    if (v10 < -7)
      goto LABEL_46;
    if (a4 != a2 || &a2[v12] <= a4)
      memmove(a4, a2, 8 * v12);
    v23 = &a4[v12];
    v37 = (char *)v23;
    v39 = v5;
    if (v6 >= v5 || v10 < 8)
      goto LABEL_45;
    v24 = (id *)(a3 - 8);
    v25 = v5;
    while (1)
    {
      v26 = v24 + 1;
      v27 = v23 - 1;
      v28 = *--v25;
      v29 = *(v23 - 1);
      v30 = v28;
      objc_msgSend(v29, sel_score);
      v32 = v31;
      objc_msgSend(v30, sel_score);
      v34 = v33;

      if (v34 < v32)
        break;
      v37 = (char *)(v23 - 1);
      if (v26 < v23 || v24 >= v23)
      {
        *v24 = *v27;
        v25 = v5;
        --v23;
        goto LABEL_43;
      }
      if (v26 != v23)
        *v24 = *v27;
      v25 = v5;
      --v23;
      if (v5 <= v6)
        goto LABEL_45;
LABEL_44:
      --v24;
      v5 = v25;
      if (v23 <= a4)
        goto LABEL_45;
    }
    if (v26 != v5 || v24 >= v5)
      *v24 = *v25;
    v39 = v25;
LABEL_43:
    if (v25 <= v6)
      goto LABEL_45;
    goto LABEL_44;
  }
  if (v7 >= -7)
  {
    if (a4 != __src || &__src[v9] <= a4)
      memmove(a4, __src, 8 * v9);
    v13 = &a4[v9];
    v37 = (char *)v13;
    if ((unint64_t)v5 < a3 && v7 >= 8)
    {
      v14 = a4;
      do
      {
        v15 = *v14;
        v16 = *v5;
        v17 = v15;
        objc_msgSend(v16, sel_score);
        v19 = v18;
        objc_msgSend(v17, sel_score);
        v21 = v20;

        if (v21 >= v19)
        {
          if (v6 != v14)
            *v6 = *v14;
          v38 = ++v14;
          v22 = v5;
        }
        else
        {
          v22 = v5 + 1;
          if (v6 < v5 || v6 >= v22 || v6 != v5)
            *v6 = *v5;
        }
        ++v6;
        if (v14 >= v13)
          break;
        v5 = v22;
      }
      while ((unint64_t)v22 < a3);
      v39 = v6;
    }
LABEL_45:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)((void **)&v39, (const void **)&v38, &v37);
    return 1;
  }
LABEL_46:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_ClientSignals?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1C245B81C(_QWORD **a1@<X0>, float *a2@<X8>)
{
  *a2 = (*(float (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0xA0))();
}

uint64_t sub_1C245B85C(float *a1, _QWORD **a2)
{
  return (*(uint64_t (**)(float))((*MEMORY[0x1E0DEEDD8] & **a2) + 0xA8))(*a1);
}

uint64_t dispatch thunk of AudioRanking.rank(query:clientCandidate:serverCandidate:clientSignals:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t type metadata accessor for AudioRanker()
{
  return objc_opt_self();
}

uint64_t method lookup function for AudioRanker()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioRanker.__allocating_init(localeIdentifier:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of AudioRanker.rank(query:clientCandidate:serverCandidate:clientSignals:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AudioRanker.score(items:maxCandidateFieldCount:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

void *PommesSearchRequest.PommesPreferAltParserId.unsafeMutableAddressor()
{
  return &static PommesSearchRequest.PommesPreferAltParserId;
}

void *PommesSearchRequest.PommesPhaseTwoParserId.unsafeMutableAddressor()
{
  return &static PommesSearchRequest.PommesPhaseTwoParserId;
}

void *PommesSearchRequest.PommesGeoParserId.unsafeMutableAddressor()
{
  return &static PommesSearchRequest.PommesGeoParserId;
}

unint64_t static PommesSearchRequest.PommesParserId.getter()
{
  return 0xD000000000000010;
}

unint64_t static PommesSearchRequest.PommesPreferAltParserId.getter()
{
  return 0xD000000000000024;
}

unint64_t static PommesSearchRequest.PommesPhaseTwoParserId.getter()
{
  return 0xD000000000000018;
}

unint64_t static PommesSearchRequest.PommesGeoParserId.getter()
{
  return 0xD000000000000014;
}

uint64_t one-time initialization function for PommesMultiClassParserIds()
{
  Swift::Int v0;
  uint64_t result;

  v0 = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of one-time initialization function for PommesMultiClassParserIds);
  result = swift_arrayDestroy();
  static PommesSearchRequest.PommesMultiClassParserIds = v0;
  return result;
}

uint64_t *PommesSearchRequest.PommesMultiClassParserIds.unsafeMutableAddressor()
{
  if (one-time initialization token for PommesMultiClassParserIds != -1)
    swift_once();
  return &static PommesSearchRequest.PommesMultiClassParserIds;
}

uint64_t static PommesSearchRequest.PommesMultiClassParserIds.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for PommesMultiClassParserIds);
}

uint64_t one-time initialization function for PommesPhaseTwoAllowedDeviceClasses()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  void (*v6)(unint64_t, _QWORD, uint64_t);
  uint64_t v7;
  uint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<DeviceClass>);
  v0 = type metadata accessor for DeviceClass();
  v1 = *(_QWORD *)(v0 - 8);
  v2 = *(_QWORD *)(v1 + 72);
  v3 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FE760;
  v5 = v4 + v3;
  v6 = *(void (**)(unint64_t, _QWORD, uint64_t))(v1 + 104);
  v6(v5, *MEMORY[0x1E0DA7C08], v0);
  v6(v5 + v2, *MEMORY[0x1E0DA7BF8], v0);
  v6(v5 + 2 * v2, *MEMORY[0x1E0DA7C18], v0);
  v6(v5 + 3 * v2, *MEMORY[0x1E0DA7C10], v0);
  v6(v5 + 4 * v2, *MEMORY[0x1E0DA7C20], v0);
  v7 = specialized Set.init(_nonEmptyArrayLiteral:)(v4);
  swift_setDeallocating();
  swift_arrayDestroy();
  result = swift_deallocClassInstance();
  static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses = v7;
  return result;
}

uint64_t *PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses.unsafeMutableAddressor()
{
  if (one-time initialization token for PommesPhaseTwoAllowedDeviceClasses != -1)
    swift_once();
  return &static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses;
}

uint64_t static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for PommesPhaseTwoAllowedDeviceClasses);
}

unint64_t one-time initialization function for PommesMultiClassAllowedDeviceClasses()
{
  uint64_t inited;
  uint64_t v1;
  unint64_t result;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Set<DeviceClass>)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FA1A0;
  *(_QWORD *)(inited + 32) = 0xD000000000000024;
  *(_QWORD *)(inited + 40) = 0x80000001C2501BD0;
  if (one-time initialization token for PommesPhaseTwoAllowedDeviceClasses != -1)
    swift_once();
  v1 = static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses;
  *(_QWORD *)(inited + 48) = static PommesSearchRequest.PommesPhaseTwoAllowedDeviceClasses;
  *(_QWORD *)(inited + 56) = 0xD000000000000018;
  *(_QWORD *)(inited + 64) = 0x80000001C2501C00;
  *(_QWORD *)(inited + 72) = v1;
  *(_QWORD *)(inited + 80) = 0xD000000000000014;
  *(_QWORD *)(inited + 88) = 0x80000001C2501C20;
  *(_QWORD *)(inited + 96) = v1;
  swift_bridgeObjectRetain_n();
  result = specialized Dictionary.init(dictionaryLiteral:)(inited);
  static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses = result;
  return result;
}

uint64_t *PommesSearchRequest.PommesMultiClassAllowedDeviceClasses.unsafeMutableAddressor()
{
  if (one-time initialization token for PommesMultiClassAllowedDeviceClasses != -1)
    swift_once();
  return &static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses;
}

uint64_t static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses.getter()
{
  return static CommonAudio.Decade.mappingDecade.getter(&one-time initialization token for PommesMultiClassAllowedDeviceClasses);
}

uint64_t specialized Sequence.filter(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t i;
  int64_t v21;
  unint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;

  v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  v41 = *(_QWORD *)(v39 - 8);
  v2 = MEMORY[0x1E0C80A78](v39);
  v37 = (uint64_t)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v34 - v5;
  v7 = MEMORY[0x1E0C80A78](v4);
  v38 = (uint64_t)&v34 - v8;
  result = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v34 - v10;
  v12 = 0;
  v43 = MEMORY[0x1E0DEE9D8];
  v40 = a1;
  v15 = *(_QWORD *)(a1 + 64);
  v14 = a1 + 64;
  v13 = v15;
  v16 = 1 << *(_BYTE *)(v14 - 32);
  v17 = -1;
  if (v16 < 64)
    v17 = ~(-1 << v16);
  v18 = v17 & v13;
  v35 = v14;
  v36 = (unint64_t)(v16 + 63) >> 6;
  if ((v17 & v13) != 0)
    goto LABEL_6;
LABEL_7:
  v21 = v12 + 1;
  if (!__OFADD__(v12, 1))
  {
    if (v21 < v36)
    {
      v22 = *(_QWORD *)(v35 + 8 * v21);
      v23 = v12 + 1;
      if (v22)
        goto LABEL_22;
      v23 = v12 + 2;
      if (v12 + 2 >= v36)
        goto LABEL_30;
      v22 = *(_QWORD *)(v35 + 8 * v23);
      if (v22)
        goto LABEL_22;
      v23 = v12 + 3;
      if (v12 + 3 >= v36)
        goto LABEL_30;
      v22 = *(_QWORD *)(v35 + 8 * v23);
      if (v22)
        goto LABEL_22;
      v23 = v12 + 4;
      if (v12 + 4 >= v36)
        goto LABEL_30;
      v22 = *(_QWORD *)(v35 + 8 * v23);
      if (v22)
      {
LABEL_22:
        v18 = (v22 - 1) & v22;
        v42 = v23;
        for (i = __clz(__rbit64(v22)) + (v23 << 6); ; i = v19 | (v12 << 6))
        {
          v25 = *(_QWORD *)(v41 + 72);
          v26 = v38;
          outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v40 + 56) + v25 * i, v38, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          outlined init with take of PommesSearchReason?(v26, (uint64_t)v11, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          v27 = *(int *)(v39 + 48);
          v28 = *(int *)(v39 + 64);
          v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
          v30 = *(_QWORD *)(v29 - 8);
          (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v6, v11, v29);
          *(_QWORD *)&v6[v27] = *(_QWORD *)&v11[v27];
          LODWORD(v27) = v11[v28];
          v6[v28] = v27;
          (*(void (**)(char *, uint64_t))(v30 + 8))(v6, v29);
          if ((_DWORD)v27 == 1)
          {
            outlined init with take of PommesSearchReason?((uint64_t)v11, v37, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
            v31 = v43;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1);
              v31 = v43;
            }
            v33 = *(_QWORD *)(v31 + 16);
            v32 = *(_QWORD *)(v31 + 24);
            if (v33 >= v32 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
              v31 = v43;
            }
            *(_QWORD *)(v31 + 16) = v33 + 1;
            result = outlined init with take of PommesSearchReason?(v37, v31+ ((*(unsigned __int8 *)(v41 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80))+ v33 * v25, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
            v12 = v42;
            if (!v18)
              goto LABEL_7;
          }
          else
          {
            result = outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
            v12 = v42;
            if (!v18)
              goto LABEL_7;
          }
LABEL_6:
          v19 = __clz(__rbit64(v18));
          v18 &= v18 - 1;
          v42 = v12;
        }
      }
      v24 = v12 + 5;
      if (v12 + 5 < v36)
      {
        v22 = *(_QWORD *)(v35 + 8 * v24);
        if (v22)
        {
          v23 = v12 + 5;
          goto LABEL_22;
        }
        while (1)
        {
          v23 = v24 + 1;
          if (__OFADD__(v24, 1))
            goto LABEL_32;
          if (v23 >= v36)
            break;
          v22 = *(_QWORD *)(v35 + 8 * v23);
          ++v24;
          if (v22)
            goto LABEL_22;
        }
      }
    }
LABEL_30:
    swift_release();
    return v43;
  }
  __break(1u);
LABEL_32:
  __break(1u);
  return result;
}

{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  char *v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;

  v2 = &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  v51 = *(_QWORD *)(v48 - 8);
  v3 = MEMORY[0x1E0C80A78](v48);
  v42 = (uint64_t)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v41 - v6;
  v8 = MEMORY[0x1E0C80A78](v5);
  v47 = (uint64_t)&v41 - v9;
  result = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v41 - v11;
  v13 = 0;
  v52 = MEMORY[0x1E0DEE9D8];
  v49 = a1;
  v16 = *(_QWORD *)(a1 + 64);
  v15 = a1 + 64;
  v14 = v16;
  v17 = 1 << *(_BYTE *)(v15 - 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v14;
  v43 = v15;
  v44 = (unint64_t)(v17 + 63) >> 6;
  v46 = "onScreenAppBundleID";
  v45 = 0x80000001C2501BB0;
  if ((v18 & v14) != 0)
    goto LABEL_7;
LABEL_8:
  while (2)
  {
    v23 = v13 + 1;
    if (!__OFADD__(v13, 1))
    {
      if (v23 < v44)
      {
        v24 = *(_QWORD *)(v43 + 8 * v23);
        v25 = v13 + 1;
        if (v24)
          goto LABEL_23;
        v25 = v13 + 2;
        if (v13 + 2 >= v44)
          goto LABEL_33;
        v24 = *(_QWORD *)(v43 + 8 * v25);
        if (v24)
          goto LABEL_23;
        v25 = v13 + 3;
        if (v13 + 3 >= v44)
          goto LABEL_33;
        v24 = *(_QWORD *)(v43 + 8 * v25);
        if (v24)
          goto LABEL_23;
        v25 = v13 + 4;
        if (v13 + 4 >= v44)
          goto LABEL_33;
        v24 = *(_QWORD *)(v43 + 8 * v25);
        if (v24)
        {
LABEL_23:
          v19 = (v24 - 1) & v24;
          v21 = v25;
          for (i = __clz(__rbit64(v24)) + (v25 << 6); ; i = v20 | (v13 << 6))
          {
            v27 = *(_QWORD *)(v49 + 56);
            v50 = *(_QWORD *)(v51 + 72);
            v28 = v47;
            outlined init with copy of MediaUserStateCenter?(v27 + v50 * i, v47, v2);
            v29 = v2;
            outlined init with take of PommesSearchReason?(v28, (uint64_t)v12, v2);
            v30 = *(int *)(v48 + 48);
            v31 = *(int *)(v48 + 64);
            v32 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
            v33 = *(_QWORD *)(v32 - 8);
            (*(void (**)(char *, char *, uint64_t))(v33 + 16))(v7, v12, v32);
            *(_QWORD *)&v7[v30] = *(_QWORD *)&v12[v30];
            v7[v31] = v12[v31];
            v34 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
            v36 = v35;
            (*(void (**)(char *, uint64_t))(v33 + 8))(v7, v32);
            if (v34 == 0xD000000000000010 && v36 == v45)
              break;
            v37 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            v2 = v29;
            v13 = v21;
            if ((v37 & 1) != 0)
              goto LABEL_6;
            outlined init with take of PommesSearchReason?((uint64_t)v12, v42, v2);
            v38 = v52;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v38 + 16) + 1, 1);
              v38 = v52;
            }
            v40 = *(_QWORD *)(v38 + 16);
            v39 = *(_QWORD *)(v38 + 24);
            if (v40 >= v39 >> 1)
            {
              specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
              v38 = v52;
            }
            *(_QWORD *)(v38 + 16) = v40 + 1;
            result = outlined init with take of PommesSearchReason?(v42, v38+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ v40 * v50, v2);
            if (!v19)
              goto LABEL_8;
LABEL_7:
            v20 = __clz(__rbit64(v19));
            v19 &= v19 - 1;
            v21 = v13;
          }
          swift_bridgeObjectRelease();
          v2 = v29;
          v13 = v21;
LABEL_6:
          result = outlined destroy of MediaUserStateCenter?((uint64_t)v12, v2);
          if (!v19)
            continue;
          goto LABEL_7;
        }
        v26 = v13 + 5;
        if (v13 + 5 < v44)
        {
          v24 = *(_QWORD *)(v43 + 8 * v26);
          if (v24)
          {
            v25 = v13 + 5;
            goto LABEL_23;
          }
          while (1)
          {
            v25 = v26 + 1;
            if (__OFADD__(v26, 1))
              goto LABEL_35;
            if (v25 >= v44)
              break;
            v24 = *(_QWORD *)(v43 + 8 * v25);
            ++v26;
            if (v24)
              goto LABEL_23;
          }
        }
      }
LABEL_33:
      swift_release();
      return v52;
    }
    break;
  }
  __break(1u);
LABEL_35:
  __break(1u);
  return result;
}

uint64_t static PommesSearchRequest.convertToPommesDelegatedUDA(fallbackParse:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter();
  return 0;
}

uint64_t outlined assign with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C245C540()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t dispatch thunk of AppSearchViewProvider.isSearchViewVisible(completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.label.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.street.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.city.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.state.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.zipCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.ContactAddress.countryCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_bridgeObjectRetain();
  return v1;
}

double AssistantDataSnapshot.MeCard.ContactAddress.init(_:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  double result;
  __int128 v6;
  _OWORD v7[6];

  specialized AssistantDataSnapshot.MeCard.ContactAddress.init(_:)(a1, (uint64_t *)v7);
  v3 = v7[3];
  a2[2] = v7[2];
  a2[3] = v3;
  v4 = v7[5];
  a2[4] = v7[4];
  a2[5] = v4;
  result = *(double *)v7;
  v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

uint64_t AssistantDataSnapshot.MeCard.givenName.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.middleName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.familyName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.nickName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.fullName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 64);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.MeCard.addresses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AssistantDataSnapshot.MeCard.contactIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 88);
  swift_bridgeObjectRetain();
  return v1;
}

__n128 AssistantDataSnapshot.MeCard.init(_:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  __int128 v4;
  __n128 result;
  _OWORD v6[6];
  uint64_t v7;

  specialized AssistantDataSnapshot.MeCard.init(_:)(a1, (uint64_t *)v6);
  v3 = v6[5];
  *(_OWORD *)(a2 + 64) = v6[4];
  *(_OWORD *)(a2 + 80) = v3;
  *(_QWORD *)(a2 + 96) = v7;
  v4 = v6[1];
  *(_OWORD *)a2 = v6[0];
  *(_OWORD *)(a2 + 16) = v4;
  result = (__n128)v6[3];
  *(_OWORD *)(a2 + 32) = v6[2];
  *(__n128 *)(a2 + 48) = result;
  return result;
}

uint64_t AssistantDataSnapshot.ContentRestriction.movieRestriction.setter(uint64_t result)
{
  _QWORD *v1;

  *v1 = result;
  return result;
}

uint64_t (*AssistantDataSnapshot.ContentRestriction.movieRestriction.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t AssistantDataSnapshot.ContentRestriction.tvRestriction.getter(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AssistantDataSnapshot.ContentRestriction.tvRestriction.setter(uint64_t result)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 8) = result;
  return result;
}

uint64_t (*AssistantDataSnapshot.ContentRestriction.tvRestriction.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

id AssistantDataSnapshot.ContentRestriction.init(_:)(void *a1)
{
  id v2;

  v2 = objc_msgSend(a1, sel_movieRestriction);
  objc_msgSend(a1, sel_tvRestriction);

  return v2;
}

void AssistantDataSnapshot.Source.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

BOOL static AssistantDataSnapshot.Source.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

Swift::Int AssistantDataSnapshot.Source.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

uint64_t AssistantDataSnapshot.source.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t AssistantDataSnapshot.countryCode.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.meCards.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AssistantDataSnapshot.contentRestrictions.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 32);
}

uint64_t AssistantDataSnapshot.uiScale.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 56);
}

uint64_t AssistantDataSnapshot.temperatureUnit.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 72);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AssistantDataSnapshot.allowUserGeneratedContent.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t AssistantDataSnapshot.censorSpeech.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 89);
}

double AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)@<D0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, _OWORD *a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  __int128 v13;
  double result;
  __int128 v15;
  _OWORD v16[4];
  _OWORD v17[2];

  specialized AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)(a1 & 1, a2, a3, a4, a5, a6, a7 & 1, a8, (uint64_t)v16, a10, a11, a12);
  v13 = v16[3];
  a9[2] = v16[2];
  a9[3] = v13;
  a9[4] = v17[0];
  *(_OWORD *)((char *)a9 + 74) = *(_OWORD *)((char *)v17 + 10);
  result = *(double *)v16;
  v15 = v16[1];
  *a9 = v16[0];
  a9[1] = v15;
  return result;
}

double AssistantDataSnapshot.init(_:replacementMeCards:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  __int128 v4;
  double result;
  __int128 v6;
  _OWORD v7[4];
  _OWORD v8[2];

  specialized AssistantDataSnapshot.init(_:replacementMeCards:)(a1, v7);

  v4 = v7[3];
  a2[2] = v7[2];
  a2[3] = v4;
  a2[4] = v8[0];
  *(_OWORD *)((char *)a2 + 74) = *(_OWORD *)((char *)v8 + 10);
  result = *(double *)v7;
  v6 = v7[1];
  *a2 = v7[0];
  a2[1] = v6;
  return result;
}

uint64_t AssistantDataSnapshot.description.getter()
{
  uint64_t v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  Swift::String v21;
  Swift::String v22;
  Swift::String v23;
  uint64_t v25;
  _BYTE v26[24];
  uint64_t v27;
  unint64_t v28;
  _BYTE v29[16];
  _QWORD v30[3];
  _BYTE v31[16];

  v30[0] = 0;
  v30[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(190);
  v27 = 0;
  v28 = 0xE000000000000000;
  v1._countAndFlagsBits = 0xD000000000000028;
  v1._object = (void *)0x80000001C2506760;
  String.append(_:)(v1);
  outlined init with take of PommesSearchReason?(v0 + 8, (uint64_t)v31, &demangling cache variable for type metadata for String?);
  outlined init with take of PommesSearchReason?((uint64_t)v31, (uint64_t)v30, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)v31);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v2._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x656D202020200A2CLL;
  v3._object = (void *)0xEF203A7364726143;
  String.append(_:)(v3);
  v4 = swift_bridgeObjectRetain();
  v5 = MEMORY[0x1C3BBEE9C](v4, &type metadata for AssistantDataSnapshot.MeCard);
  v7 = v6;
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = v5;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0xD00000000000001BLL;
  v9._object = (void *)0x80000001C2506790;
  String.append(_:)(v9);
  outlined init with take of PommesSearchReason?(v0 + 32, (uint64_t)v30, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  outlined init with take of PommesSearchReason?((uint64_t)v30, (uint64_t)v26, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  v10._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x6975202020200A2CLL;
  v11._object = (void *)0xEF203A656C616353;
  String.append(_:)(v11);
  outlined init with take of PommesSearchReason?(v0 + 56, (uint64_t)v29, &demangling cache variable for type metadata for Double?);
  outlined init with take of PommesSearchReason?((uint64_t)v29, (uint64_t)v26, &demangling cache variable for type metadata for Double?);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Double?);
  v12._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0xD000000000000021;
  v13._object = (void *)0x80000001C25067B0;
  String.append(_:)(v13);
  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
    v14 = 1702195828;
  else
    v14 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 88) & 1) != 0)
    v15 = 0xE400000000000000;
  else
    v15 = 0xE500000000000000;
  v16 = v15;
  String.append(_:)(*(Swift::String *)&v14);
  swift_bridgeObjectRelease();
  v17._object = (void *)0x80000001C25067E0;
  v17._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v17);
  if ((*(_BYTE *)(v0 + 89) & 1) != 0)
    v18 = 1702195828;
  else
    v18 = 0x65736C6166;
  if ((*(_BYTE *)(v0 + 89) & 1) != 0)
    v19 = 0xE400000000000000;
  else
    v19 = 0xE500000000000000;
  v20 = v19;
  String.append(_:)(*(Swift::String *)&v18);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0xD000000000000017;
  v21._object = (void *)0x80000001C2506800;
  String.append(_:)(v21);
  outlined init with take of PommesSearchReason?(v0 + 72, (uint64_t)v26, &demangling cache variable for type metadata for String?);
  outlined init with take of PommesSearchReason?((uint64_t)v26, (uint64_t)&v25, &demangling cache variable for type metadata for String?);
  outlined retain of String?((uint64_t)v26);
  v22._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._countAndFlagsBits = 2689580;
  v23._object = (void *)0xE300000000000000;
  String.append(_:)(v23);
  return v27;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AssistantDataSnapshot()
{
  return AssistantDataSnapshot.description.getter();
}

void specialized AssistantDataSnapshot.MeCard.ContactAddress.init(_:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v4 = objc_msgSend(a1, sel_label);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v34 = v7;
    v35 = v6;

  }
  else
  {
    v34 = 0;
    v35 = 0;
  }
  v8 = objc_msgSend(a1, sel_street);
  if (v8)
  {
    v9 = v8;
    v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v32 = v11;
    v33 = v10;

  }
  else
  {
    v32 = 0;
    v33 = 0;
  }
  v12 = objc_msgSend(a1, sel_city);
  if (v12)
  {
    v13 = v12;
    v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v15 = v14;

  }
  else
  {
    v31 = 0;
    v15 = 0;
  }
  v16 = objc_msgSend(a1, sel_stateCode);
  if (v16)
  {
    v17 = v16;
    v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v20 = v19;

  }
  else
  {
    v18 = 0;
    v20 = 0;
  }
  v21 = objc_msgSend(a1, sel_postalCode);
  if (v21)
  {
    v22 = v21;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v25 = v24;

  }
  else
  {
    v23 = 0;
    v25 = 0;
  }
  v26 = objc_msgSend(a1, sel_countryCode);
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v30 = v29;

  }
  else
  {

    v28 = 0;
    v30 = 0;
  }
  *a2 = v35;
  a2[1] = v34;
  a2[2] = v33;
  a2[3] = v32;
  a2[4] = v31;
  a2[5] = v15;
  a2[6] = v18;
  a2[7] = v20;
  a2[8] = v23;
  a2[9] = v25;
  a2[10] = v28;
  a2[11] = v30;
}

uint64_t specialized AssistantDataSnapshot.MeCard.init(_:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  id v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  void *v31;
  uint64_t v32;
  id v33;
  uint64_t v34;
  void *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  id v40;
  unint64_t v41;
  unint64_t v42;
  _OWORD *v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char *v49;
  id v50;
  void *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _OWORD v81[6];

  v79 = type metadata accessor for URL();
  v4 = *(_QWORD *)(v79 - 8);
  MEMORY[0x1E0C80A78](v79);
  v6 = (char *)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v64 - v11;
  v13 = objc_msgSend(a1, sel_firstName);
  if (v13)
  {
    v14 = v13;
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

  }
  else
  {
    v15 = 0;
    v17 = 0;
  }
  v18 = objc_msgSend(a1, sel_middleName);
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v76 = v21;
    v77 = v20;

  }
  else
  {
    v76 = 0;
    v77 = 0;
  }
  v22 = objc_msgSend(a1, sel_lastName);
  if (v22)
  {
    v23 = v22;
    v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v74 = v25;
    v75 = v24;

  }
  else
  {
    v74 = 0;
    v75 = 0;
  }
  v26 = objc_msgSend(a1, sel_nickName);
  if (v26)
  {
    v27 = v26;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v72 = v29;
    v73 = v28;

  }
  else
  {
    v72 = 0;
    v73 = 0;
  }
  v30 = objc_msgSend(a1, sel_fullName);
  v78 = v10;
  if (v30)
  {
    v31 = v30;
    v71 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v70 = v32;

  }
  else
  {
    v71 = 0;
    v70 = 0;
  }
  v33 = objc_msgSend(a1, sel_addresses);
  v34 = MEMORY[0x1E0DEE9D8];
  if (!v33)
  {
    v48 = v15;
    goto LABEL_31;
  }
  v35 = v33;
  v68 = v17;
  v69 = v15;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SALocation);
  v36 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v37 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v37)
      goto LABEL_19;
LABEL_30:
    swift_bridgeObjectRelease();
    v48 = v69;
    v17 = v68;
    goto LABEL_31;
  }
  v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v37)
    goto LABEL_30;
LABEL_19:
  v80 = v34;
  result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v37 & ~(v37 >> 63), 0);
  if (v37 < 0)
  {
    __break(1u);
    return result;
  }
  v64 = v12;
  v65 = v6;
  v66 = v4;
  v67 = a1;
  v39 = 0;
  v34 = v80;
  do
  {
    if ((v36 & 0xC000000000000001) != 0)
      v40 = (id)MEMORY[0x1C3BBF3F4](v39, v36);
    else
      v40 = *(id *)(v36 + 8 * v39 + 32);
    specialized AssistantDataSnapshot.MeCard.ContactAddress.init(_:)(v40, (uint64_t *)v81);
    v80 = v34;
    v42 = *(_QWORD *)(v34 + 16);
    v41 = *(_QWORD *)(v34 + 24);
    if (v42 >= v41 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v41 > 1, v42 + 1, 1);
      v34 = v80;
    }
    ++v39;
    *(_QWORD *)(v34 + 16) = v42 + 1;
    v43 = (_OWORD *)(v34 + 96 * v42);
    v44 = v81[1];
    v43[2] = v81[0];
    v43[3] = v44;
    v45 = v81[2];
    v46 = v81[3];
    v47 = v81[5];
    v43[6] = v81[4];
    v43[7] = v47;
    v43[4] = v45;
    v43[5] = v46;
  }
  while (v37 != v39);
  swift_bridgeObjectRelease();
  a1 = v67;
  v4 = v66;
  v6 = v65;
  v48 = v69;
  v17 = v68;
  v12 = v64;
LABEL_31:
  v49 = v6;
  v50 = objc_msgSend(a1, sel_identifier, v64, v65, v66, v67);
  if (v50)
  {
    v51 = v50;
    v52 = (uint64_t)v78;
    static URL._unconditionallyBridgeFromObjectiveC(_:)();

    v53 = 0;
  }
  else
  {
    v53 = 1;
    v52 = (uint64_t)v78;
  }
  v54 = v79;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v52, v53, 1, v79);
  outlined init with take of PommesSearchReason?(v52, (uint64_t)v12, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v12, 1, v54))
  {

    result = outlined destroy of URL?((uint64_t)v12);
    v55 = 0;
    v56 = 0;
  }
  else
  {
    v57 = v49;
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v49, v12, v54);
    outlined destroy of URL?((uint64_t)v12);
    v58 = v54;
    v55 = URL.absoluteString.getter();
    v56 = v59;

    result = (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v57, v58);
  }
  *a2 = v48;
  a2[1] = v17;
  v60 = v76;
  a2[2] = v77;
  a2[3] = v60;
  v61 = v74;
  a2[4] = v75;
  a2[5] = v61;
  v62 = v72;
  a2[6] = v73;
  a2[7] = v62;
  v63 = v70;
  a2[8] = v71;
  a2[9] = v63;
  a2[10] = v34;
  a2[11] = v55;
  a2[12] = v56;
  return result;
}

void specialized AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, char a8@<W7>, uint64_t a9@<X8>, char a10, uint64_t a11, uint64_t a12)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  uint64_t v39;
  _OWORD v40[6];
  uint64_t v41;

  if (a4 >> 62)
    v20 = _CocoaArrayWrapper.endIndex.getter();
  else
    v20 = *(_QWORD *)((a4 & 0xFFFFFFFFFFFFF8) + 0x10);
  v37 = a8;
  v35 = a3;
  v36 = a6;
  if (v20)
  {
    v39 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20 & ~(v20 >> 63), 0);
    if (v20 < 0)
    {
      __break(1u);
      return;
    }
    v21 = 0;
    v22 = v39;
    do
    {
      if ((a4 & 0xC000000000000001) != 0)
        v23 = (id)MEMORY[0x1C3BBF3F4](v21, a4);
      else
        v23 = *(id *)(a4 + 8 * v21 + 32);
      specialized AssistantDataSnapshot.MeCard.init(_:)(v23, (uint64_t *)v40);
      v25 = *(_QWORD *)(v39 + 16);
      v24 = *(_QWORD *)(v39 + 24);
      if (v25 >= v24 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
      ++v21;
      *(_QWORD *)(v39 + 16) = v25 + 1;
      v26 = v39 + 104 * v25;
      v27 = v40[0];
      v28 = v40[2];
      *(_OWORD *)(v26 + 48) = v40[1];
      *(_OWORD *)(v26 + 64) = v28;
      *(_OWORD *)(v26 + 32) = v27;
      v29 = v40[3];
      v30 = v40[4];
      v31 = v40[5];
      *(_QWORD *)(v26 + 128) = v41;
      *(_OWORD *)(v26 + 96) = v30;
      *(_OWORD *)(v26 + 112) = v31;
      *(_OWORD *)(v26 + 80) = v29;
    }
    while (v20 != v21);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v22 = MEMORY[0x1E0DEE9D8];
  }
  if (a5)
  {
    v32 = a5;
    v33 = objc_msgSend(v32, sel_movieRestriction);
    v34 = objc_msgSend(v32, sel_tvRestriction);

  }
  else
  {
    v33 = 0;
    v34 = 0;
  }
  *(_BYTE *)a9 = a1 & 1;
  *(_QWORD *)(a9 + 8) = a2;
  *(_QWORD *)(a9 + 16) = v35;
  *(_QWORD *)(a9 + 24) = v22;
  *(_QWORD *)(a9 + 32) = v33;
  *(_QWORD *)(a9 + 40) = v34;
  *(_BYTE *)(a9 + 48) = a5 == 0;
  *(_QWORD *)(a9 + 56) = v36;
  *(_BYTE *)(a9 + 64) = a7 & 1;
  *(_QWORD *)(a9 + 72) = a11;
  *(_QWORD *)(a9 + 80) = a12;
  *(_BYTE *)(a9 + 88) = v37 & 1;
  *(_BYTE *)(a9 + 89) = a10 & 1;
}

double specialized AssistantDataSnapshot.init(_:replacementMeCards:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  id v15;
  void *v16;
  char v17;
  id v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  void *v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  uint8_t *v31;
  uint8_t *v32;
  id v33;
  void *v34;
  unint64_t v35;
  __int128 v36;
  double result;
  __int128 v38;
  _OWORD *v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _OWORD v43[4];
  _OWORD v44[2];

  swift_bridgeObjectRelease();
  v4 = objc_msgSend(a1, sel_countryCode);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
  v9 = objc_msgSend(a1, sel_mediaContentRatingRestrictions);
  v10 = objc_msgSend(a1, sel_uiScale);
  v11 = v10;
  if (v10)
  {
    objc_msgSend(v10, sel_doubleValue);
    v13 = v12;

    v14 = v13;
  }
  else
  {
    v14 = 0;
  }
  v15 = objc_msgSend(a1, sel_allowUserGeneratedContent);
  if (v15)
  {
    v16 = v15;
    v17 = objc_msgSend(v15, sel_BOOLValue);

  }
  else
  {
    v17 = 1;
  }
  v42 = objc_msgSend(a1, sel_censorSpeech);
  v18 = objc_msgSend(a1, sel_temperatureUnit);
  if (v18)
  {
    v19 = v18;
    v20 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v40 = v21;
    v41 = v20;

  }
  else
  {
    v40 = 0;
    v41 = 0;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v39 = a2;
    v25 = v11;
    v26 = v17;
    v27 = v14;
    v28 = v9;
    v29 = v8;
    v30 = v6;
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1C2356000, v23, v24, "#AssistantData Creating snapshot with SAPerson card(s)", v31, 2u);
    v32 = v31;
    v6 = v30;
    v8 = v29;
    v9 = v28;
    v14 = v27;
    v17 = v26;
    v11 = v25;
    a2 = v39;
    MEMORY[0x1C3BBFF64](v32, -1, -1);
  }

  v33 = objc_msgSend(a1, sel_meCards);
  if (v33)
  {
    v34 = v33;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SAPerson);
    v35 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v35 = MEMORY[0x1E0DEE9D8];
  }
  specialized AssistantDataSnapshot.init(source:countryCode:meCards:contentRestrictions:uiScale:allowUserGeneratedContent:censorSpeech:temperatureUnit:)(0, v6, v8, v35, v9, v14, v11 == 0, v17, (uint64_t)v43, v42, v41, v40);
  v36 = v43[3];
  a2[2] = v43[2];
  a2[3] = v36;
  a2[4] = v44[0];
  *(_OWORD *)((char *)a2 + 74) = *(_OWORD *)((char *)v44 + 10);
  result = *(double *)v43;
  v38 = v43[1];
  *a2 = v43[0];
  a2[1] = v38;
  return result;
}

unint64_t lazy protocol witness table accessor for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source;
  if (!lazy protocol witness table cache variable for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for AssistantDataSnapshot.Source, &type metadata for AssistantDataSnapshot.Source);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AssistantDataSnapshot.Source and conformance AssistantDataSnapshot.Source);
  }
  return result;
}

uint64_t assignWithCopy for AssistantDataSnapshot(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v4;
  v5 = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = v5;
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return a1;
}

__n128 __swift_memcpy90_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 74) = *(_OWORD *)(a2 + 74);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for AssistantDataSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 88) = *(_BYTE *)(a2 + 88);
  *(_BYTE *)(a1 + 89) = *(_BYTE *)(a2 + 89);
  return a1;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot()
{
  return &type metadata for AssistantDataSnapshot;
}

uint64_t destroy for AssistantDataSnapshot.MeCard()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AssistantDataSnapshot.MeCard(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AssistantDataSnapshot.MeCard(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[11] = a2[11];
  a1[12] = a2[12];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy104_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __n128 result;
  __int128 v5;
  __int128 v6;

  v2 = *a2;
  v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  result = (__n128)a2[3];
  v5 = a2[4];
  v6 = a2[5];
  *(_QWORD *)(a1 + 96) = *((_QWORD *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for AssistantDataSnapshot.MeCard(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  v6 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  v7 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(a2 + 96);
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a1 + 96) = v8;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantDataSnapshot.MeCard(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 104))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AssistantDataSnapshot.MeCard(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 104) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 80) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 104) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.MeCard()
{
  return &type metadata for AssistantDataSnapshot.MeCard;
}

uint64_t destroy for AssistantDataSnapshot.MeCard.ContactAddress()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AssistantDataSnapshot.MeCard.ContactAddress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  v7 = a2[9];
  a1[8] = a2[8];
  a1[9] = v7;
  v8 = a2[11];
  a1[10] = a2[10];
  a1[11] = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AssistantDataSnapshot.MeCard.ContactAddress(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy96_8(uint64_t a1, uint64_t a2)
{
  __int128 v2;
  __n128 result;
  __int128 v4;
  __int128 v5;

  v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  result = *(__n128 *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

_QWORD *assignWithTake for AssistantDataSnapshot.MeCard.ContactAddress(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  swift_bridgeObjectRelease();
  v6 = a2[5];
  a1[4] = a2[4];
  a1[5] = v6;
  swift_bridgeObjectRelease();
  v7 = a2[7];
  a1[6] = a2[6];
  a1[7] = v7;
  swift_bridgeObjectRelease();
  v8 = a2[9];
  a1[8] = a2[8];
  a1[9] = v8;
  swift_bridgeObjectRelease();
  v9 = a2[11];
  a1[10] = a2[10];
  a1[11] = v9;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AssistantDataSnapshot.MeCard.ContactAddress(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 96))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AssistantDataSnapshot.MeCard.ContactAddress(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 96) = 0;
    if (a2)
      *(_QWORD *)(result + 8) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.MeCard.ContactAddress()
{
  return &type metadata for AssistantDataSnapshot.MeCard.ContactAddress;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.ContentRestriction()
{
  return &type metadata for AssistantDataSnapshot.ContentRestriction;
}

uint64_t storeEnumTagSinglePayload for AssistantDataSnapshot.Source(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C245E2F4 + 4 * byte_1C24FE7B5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C245E328 + 4 * asc_1C24FE7B0[v4]))();
}

uint64_t sub_1C245E328(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C245E330(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C245E338);
  return result;
}

uint64_t sub_1C245E344(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C245E34CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C245E350(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C245E358(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AssistantDataSnapshot.Source()
{
  return &type metadata for AssistantDataSnapshot.Source;
}

uint64_t outlined destroy of URL?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PerformanceUtil.Ticket.init(description:startDate:fileId:lineNumber:callingFunction:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, char a5@<W5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, char a10)
{
  int *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;

  v16 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v17 = a8 + v16[5];
  *(_QWORD *)v17 = a3;
  *(_QWORD *)(v17 + 8) = a4;
  *(_BYTE *)(v17 + 16) = a5;
  *(_QWORD *)(a8 + v16[6]) = a6;
  v18 = a8 + v16[7];
  *(_QWORD *)v18 = a7;
  *(_QWORD *)(v18 + 8) = a9;
  *(_BYTE *)(v18 + 16) = a10;
  v19 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(a1);
  v21 = v20;
  swift_bridgeObjectRelease();
  v22 = (uint64_t *)(a8 + v16[8]);
  *v22 = v19;
  v22[1] = v21;
  v23 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(a8, a2, v23);
}

const char *PerformanceUtil.Ticket.maxDescriptionLength.unsafeMutableAddressor()
{
  return "d";
}

uint64_t static PerformanceUtil.Ticket.maxDescriptionLength.getter()
{
  return 100;
}

uint64_t PerformanceUtil.Ticket.startDate.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PerformanceUtil.Ticket.fileId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 20));
}

uint64_t PerformanceUtil.Ticket.lineNumber.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 24));
}

uint64_t PerformanceUtil.Ticket.callingFunction.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 28));
}

uint64_t PerformanceUtil.Ticket.description.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Ticket(0) + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t PerformanceUtil.Measurement.ticket.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of PommesSearchRequest(v1, a1, type metadata accessor for PerformanceUtil.Ticket);
}

double PerformanceUtil.Measurement.duration.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for PerformanceUtil.Measurement(0) + 20));
}

BOOL static PerformanceUtil.Measurement.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  if ((specialized static PerformanceUtil.Ticket.== infix(_:_:)(a1, a2) & 1) == 0)
    return 0;
  v4 = type metadata accessor for PerformanceUtil.Measurement(0);
  return *(double *)(a1 + *(int *)(v4 + 20)) == *(double *)(a2 + *(int *)(v4 + 20));
}

uint64_t PerformanceUtil.Measurement.init(ticket:duration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t result;

  outlined init with take of PerformanceUtil.Ticket(a1, a2, type metadata accessor for PerformanceUtil.Ticket);
  result = type metadata accessor for PerformanceUtil.Measurement(0);
  *(double *)(a2 + *(int *)(result + 20)) = a3;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (specialized static PerformanceUtil.Ticket.== infix(_:_:)(a1, a2) & 1) != 0
      && *(double *)(a1 + *(int *)(a3 + 20)) == *(double *)(a2 + *(int *)(a3 + 20));
}

uint64_t PerformanceUtil.__allocating_init(analyticsComponentIdGenerator:trialClient:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)(a1, a2);
  return v4;
}

uint64_t static PerformanceUtil.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

void *PerformanceUtil.TrialNamespace.unsafeMutableAddressor()
{
  return &static PerformanceUtil.TrialNamespace;
}

unint64_t static PerformanceUtil.TrialNamespace.getter()
{
  return 0xD000000000000017;
}

id PerformanceUtil.trialClient.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id PerformanceUtil.mockStream.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 24);
  if (v1)
  {
    v2 = *(id *)(v0 + 24);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    v4 = *(void **)(v0 + 24);
    *(_QWORD *)(v0 + 24) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void PerformanceUtil.mockStream.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = a1;

}

void (*PerformanceUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = PerformanceUtil.mockStream.getter();
  return PerformanceUtil.mockStream.modify;
}

void PerformanceUtil.mockStream.modify(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  void *v3;

  v2 = *a1;
  v1 = a1[1];
  v3 = *(void **)(v1 + 24);
  *(_QWORD *)(v1 + 24) = v2;

}

uint64_t PerformanceUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t key path setter for PerformanceUtil.measurements : PerformanceUtil(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 40) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  id v5;
  void *v6;
  id v7;
  void *v8;
  unsigned __int8 v9;

  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 40) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 48) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  v5 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v6 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
  v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (v7)
  {
    v8 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000022, 0x80000001C2506840);
    v9 = objc_msgSend(v7, sel_BOOLForKey_, v8);

  }
  else
  {
    v9 = 0;
  }
  *(_BYTE *)(v2 + 56) = v9;
  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 16) = a2;
  return v2;
}

Swift::Void __swiftcall PerformanceUtil.resetMeasurements()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 48);
  objc_msgSend(v1, sel_lock);
  swift_beginAccess();
  *(_QWORD *)(v0 + 40) = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  objc_msgSend(v1, sel_unlock);
}

Swift::Void __swiftcall PerformanceUtil.emitMeasurements(requestId:resultCandidateId:)(Swift::String_optional requestId, Swift::String_optional resultCandidateId)
{
  uint64_t v2;
  void *object;
  uint64_t countAndFlagsBits;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  object = resultCandidateId.value._object;
  countAndFlagsBits = resultCandidateId.value._countAndFlagsBits;
  v5 = requestId.value._object;
  v6 = requestId.value._countAndFlagsBits;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (uint64_t *)((char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (object)
  {
    *v9 = countAndFlagsBits;
    v9[1] = (uint64_t)object;
    v10 = *MEMORY[0x1E0D988C8];
    v11 = type metadata accessor for PommesCandidateId();
    v12 = *(_QWORD *)(v11 - 8);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v12 + 104))(v9, v10, v11);
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  else
  {
    v13 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v9, 1, 1, v13);
  }
  swift_bridgeObjectRetain();
  v14 = AFIsInternalInstall();
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t))(*(_QWORD *)v2 + 248))(v6, v5, v9, v14);
  outlined destroy of PommesCandidateId?((uint64_t)v9);
}

id *PerformanceUtil.deinit()
{
  id *v0;

  swift_release();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t PerformanceUtil.__deallocating_deinit()
{
  id *v0;

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t protocol witness for Emittable.mockStream.getter in conformance PerformanceUtil()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 128))();
}

uint64_t protocol witness for Emittable.analyticsComponentIdGenerator.getter in conformance PerformanceUtil()
{
  return swift_retain();
}

uint64_t specialized static PerformanceUtil.Ticket.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char v44;
  char v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;

  v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v56 = (uint64_t)&v52 - v9;
  v10 = MEMORY[0x1E0C80A78](v8);
  v57 = (uint64_t)&v52 - v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v55 = (char *)&v52 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v52 - v15;
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v52 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v22 = (char *)&v52 - v21;
  MEMORY[0x1E0C80A78](v20);
  v24 = (char *)&v52 - v23;
  v25 = static Date.== infix(_:_:)();
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
  if ((v25 & 1) == 0)
  {
    outlined destroy of PommesSearchRequest((uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PommesSearchRequest((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a1, (uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a2, (uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
    v32 = (uint64_t)v55;
    goto LABEL_9;
  }
  v54 = v7;
  v26 = StaticString.description.getter();
  v28 = v27;
  v53 = v4;
  if (v26 == StaticString.description.getter() && v28 == v29)
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of PommesSearchRequest((uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PommesSearchRequest((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a1, (uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a2, (uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
    v7 = v54;
    v32 = (uint64_t)v55;
    goto LABEL_11;
  }
  v31 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of PommesSearchRequest((uint64_t)v22, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PommesSearchRequest((uint64_t)v24, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
  v7 = v54;
  v32 = (uint64_t)v55;
  if ((v31 & 1) == 0)
  {
LABEL_9:
    outlined destroy of PommesSearchRequest((uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PommesSearchRequest((uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a1, v32, type metadata accessor for PerformanceUtil.Ticket);
    v33 = v57;
    outlined init with copy of PommesSearchRequest(a2, v57, type metadata accessor for PerformanceUtil.Ticket);
LABEL_15:
    outlined destroy of PommesSearchRequest(v33, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PommesSearchRequest(v32, type metadata accessor for PerformanceUtil.Ticket);
    v43 = a1;
    v42 = v56;
    outlined init with copy of PommesSearchRequest(v43, v56, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a2, (uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
    v44 = 0;
    goto LABEL_16;
  }
LABEL_11:
  v34 = v53;
  v35 = *(_QWORD *)&v19[*(int *)(v53 + 24)];
  outlined destroy of PommesSearchRequest((uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
  v36 = *(_QWORD *)&v16[*(int *)(v34 + 24)];
  outlined destroy of PommesSearchRequest((uint64_t)v16, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PommesSearchRequest(a1, v32, type metadata accessor for PerformanceUtil.Ticket);
  v33 = v57;
  outlined init with copy of PommesSearchRequest(a2, v57, type metadata accessor for PerformanceUtil.Ticket);
  if (v35 != v36)
    goto LABEL_15;
  v37 = StaticString.description.getter();
  v39 = v38;
  if (v37 == StaticString.description.getter() && v39 == v40)
  {
    swift_bridgeObjectRelease_n();
    outlined destroy of PommesSearchRequest(v33, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PommesSearchRequest(v32, type metadata accessor for PerformanceUtil.Ticket);
    v41 = a1;
    v42 = v56;
    outlined init with copy of PommesSearchRequest(v41, v56, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a2, (uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
  }
  else
  {
    v46 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v33, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of PommesSearchRequest(v32, type metadata accessor for PerformanceUtil.Ticket);
    v47 = a1;
    v42 = v56;
    outlined init with copy of PommesSearchRequest(v47, v56, type metadata accessor for PerformanceUtil.Ticket);
    outlined init with copy of PommesSearchRequest(a2, (uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
    v44 = 0;
    if ((v46 & 1) == 0)
      goto LABEL_16;
  }
  v48 = *(int *)(v34 + 32);
  v49 = *(_QWORD *)(v42 + v48);
  v50 = *(_QWORD *)(v42 + v48 + 8);
  v51 = &v7[v48];
  if (v49 == *(_QWORD *)v51 && v50 == *((_QWORD *)v51 + 1))
    v44 = 1;
  else
    v44 = _stringCompareWithSmolCheck(_:_:expecting:)();
LABEL_16:
  outlined destroy of PommesSearchRequest(v42, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PommesSearchRequest((uint64_t)v7, type metadata accessor for PerformanceUtil.Ticket);
  return v44 & 1;
}

uint64_t sub_1C245F1A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1C245F1D0(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 136))(*a1);
}

uint64_t sub_1C245F200@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for PerformanceUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for PerformanceUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PerformanceUtil.mockStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PerformanceUtil.mockStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PerformanceUtil.mockStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PerformanceUtil.measurements.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PerformanceUtil.__allocating_init(analyticsComponentIdGenerator:trialClient:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement(for:logMeasurement:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))();
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v6 + 200))(a1, a2, a3, a4, a5, a6);
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, unsigned int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  _QWORD *v18;
  uint64_t (*v20)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v20 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v15 + 208) + *(_QWORD *)(*(_QWORD *)v15 + 208));
  v18 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v16 + 16) = v18;
  *v18 = v16;
  v18[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v20(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
}

uint64_t dispatch thunk of PerformanceUtil.recordMeasurement<A>(for:logMeasurement:block:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PerformanceUtil.resetMeasurements()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PerformanceUtil.emitMeasurements(requestId:resultCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t *initializeBufferWithCopyOfBuffer for PerformanceUtil.Ticket(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (char *)a1 + v8;
    v11 = (char *)a2 + v8;
    v12 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *(_OWORD *)v10 = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    v13 = a3[7];
    v14 = a3[8];
    v15 = (char *)a1 + v13;
    v16 = (char *)a2 + v13;
    *(_OWORD *)v15 = *(_OWORD *)v16;
    v15[16] = v16[16];
    v17 = (uint64_t *)((char *)a1 + v14);
    v18 = (uint64_t *)((char *)a2 + v14);
    v19 = v18[1];
    *v17 = *v18;
    v17[1] = v19;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_QWORD *)v8 = *(_QWORD *)v9;
  *(_QWORD *)(v8 + 8) = *(_QWORD *)(v9 + 8);
  *(_BYTE *)(v8 + 16) = *(_BYTE *)(v9 + 16);
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  *(_QWORD *)v11 = *(_QWORD *)v12;
  *(_QWORD *)(v11 + 8) = *(_QWORD *)(v12 + 8);
  *(_BYTE *)(v11 + 16) = *(_BYTE *)(v12 + 16);
  v13 = a3[8];
  v14 = (_QWORD *)(a1 + v13);
  v15 = (_QWORD *)(a2 + v13);
  *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = a2 + v7;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v11 = a3[7];
  v12 = a3[8];
  v13 = a1 + v11;
  v14 = a2 + v11;
  *(_BYTE *)(v13 + 16) = *(_BYTE *)(v14 + 16);
  *(_OWORD *)v13 = *(_OWORD *)v14;
  *(_OWORD *)(a1 + v12) = *(_OWORD *)(a2 + v12);
  return a1;
}

uint64_t assignWithTake for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = (__int128 *)(a2 + v7);
  v11 = *v10;
  *(_BYTE *)(v9 + 16) = *((_BYTE *)v10 + 16);
  v12 = *(_QWORD *)(a2 + v8);
  *(_OWORD *)v9 = v11;
  *(_QWORD *)(a1 + v8) = v12;
  v13 = a3[7];
  v14 = a3[8];
  v15 = a1 + v13;
  v16 = a2 + v13;
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  v17 = (_QWORD *)(a1 + v14);
  v18 = (uint64_t *)(a2 + v14);
  v20 = *v18;
  v19 = v18[1];
  *v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PerformanceUtil.Ticket()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C245F700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for PerformanceUtil.Ticket()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C245F78C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Date();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for PerformanceUtil.Ticket()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PerformanceUtil.Measurement(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
    v9 = v8[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    *(_OWORD *)v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *(uint64_t *)((char *)a1 + v8[6]) = *(uint64_t *)((char *)a2 + v8[6]);
    v12 = v8[7];
    v13 = (char *)a1 + v12;
    v14 = (char *)a2 + v12;
    v13[16] = v14[16];
    *(_OWORD *)v13 = *(_OWORD *)v14;
    v15 = v8[8];
    v16 = (uint64_t *)((char *)a1 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_QWORD *)v9 = *(_QWORD *)v10;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)(v10 + 8);
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v11 = v7[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)v12 = *(_QWORD *)v13;
  *(_QWORD *)(v12 + 8) = *(_QWORD *)(v13 + 8);
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  v14 = v7[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  *v15 = *v16;
  v15[1] = v16[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t initializeWithTake for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v11 = v7[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_OWORD *)(a1 + v7[8]) = *(_OWORD *)(a2 + v7[8]);
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t assignWithTake for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v11 = v7[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_OWORD *)v12 = *(_OWORD *)v13;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  v14 = v7[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (uint64_t *)(a2 + v14);
  v18 = *v16;
  v17 = v16[1];
  *v15 = v18;
  v15[1] = v17;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for PerformanceUtil.Measurement()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C245FBE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PerformanceUtil.Measurement()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C245FC30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PerformanceUtil.Measurement()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PerformanceUtil.Ticket(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  _QWORD v16[2];

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PhoneCallBuilderParams();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v16 - v7;
  v9 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.phoneCall.getter();
  v10 = MEMORY[0x1C3BBC2BC](v9);
  v12 = v11;
  swift_bridgeObjectRelease();
  v13 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0)
    v13 = v10 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    type metadata accessor for PhoneCallExperience();
    (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
    v14 = PhoneCallExperience.__allocating_init(phoneCall:queryConfidenceScore:)();
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
  }
  else
  {
    result = (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    v14 = 0;
  }
  *a1 = v14;
  return result;
}

ValueMetadata *type metadata accessor for PhoneCallExperiencesResolver()
{
  return &type metadata for PhoneCallExperiencesResolver;
}

uint64_t partial apply for closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:)(a1);
}

uint64_t static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  unint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void *v80;
  id v81;
  id v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  char *v92;
  uint64_t (*v93)(char *, uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111[3];

  v97 = a5;
  v104 = a3;
  v109 = a1;
  v7 = type metadata accessor for SportsResolverMetrics();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v102 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v98 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v103 = (char *)&v90 - v13;
  v96 = a4;
  v16 = type metadata accessor for SportsPersonalizationSelection(0, a4, v14, v15);
  v106 = *(_QWORD *)(v16 - 8);
  v107 = v16;
  MEMORY[0x1E0C80A78](v16);
  v105 = (char *)&v90 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1E0C80A78](v19);
  v101 = (uint64_t)&v90 - v23;
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v90 - v24;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  v27 = MEMORY[0x1E0C80A78](v26);
  v92 = (char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v90 - v29;
  v31 = type metadata accessor for SportsResolverConfig();
  v94 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v108 = (char *)&v90 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = a2;
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v25, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v25, 1, v34);
  v99 = v7;
  v100 = v8;
  v95 = v31;
  v93 = v36;
  if (v37 == 1)
  {
    v38 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?;
    v39 = (uint64_t)v25;
LABEL_8:
    outlined destroy of MediaUserStateCenter?(v39, v38);
    goto LABEL_10;
  }
  v40 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v25, v34);
  v41 = *(_QWORD *)(v40 + 16);
  v42 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v43 = *(_QWORD *)(v42 - 8);
  if (v41)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v43 + 16))(v30, v40 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)), v42);
    v44 = 0;
  }
  else
  {
    v44 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v30, v44, 1, v42);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v30, 1, v42) == 1)
  {
    v38 = &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?;
    v39 = (uint64_t)v30;
    goto LABEL_8;
  }
  Apple_Parsec_Siri_Context_ResultEntity.name.getter();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v42);
LABEL_10:
  v45 = (uint64_t)v108;
  v47 = v105;
  v46 = v106;
  SportsResolverConfig.init(intentTypeName:bundleId:)();
  v48 = v33;
  v49 = v101;
  outlined init with copy of MediaUserStateCenter?(v48, v101, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  v50 = v107;
  (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v47, v109, v107);
  v51 = v46;
  v52 = Logger.logObject.getter();
  v53 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v52, (os_log_type_t)v53))
  {
    v91 = v53;
    v54 = swift_slowAlloc();
    v55 = swift_slowAlloc();
    v111[0] = v55;
    *(_DWORD *)v54 = 136315394;
    outlined init with copy of MediaUserStateCenter?(v49, (uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    v56 = v93(v21, 1, v34);
    v90 = v55;
    if (v56 == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v21, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      v57 = 0xE700000000000000;
      v58 = v100;
      v59 = v102;
      v60 = 0x6E776F6E6B6E75;
    }
    else
    {
      v65 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      (*(void (**)(char *, uint64_t))(v35 + 8))(v21, v34);
      v66 = *(_QWORD *)(v65 + 16);
      v67 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      v68 = *(_QWORD *)(v67 - 8);
      v60 = 0x6E776F6E6B6E75;
      if (v66)
      {
        v69 = (uint64_t)v92;
        (*(void (**)(char *, unint64_t, uint64_t))(v68 + 16))(v92, v65 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80)), v67);
        v70 = 0;
      }
      else
      {
        v70 = 1;
        v69 = (uint64_t)v92;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v68 + 56))(v69, v70, 1, v67);
      swift_bridgeObjectRelease();
      v71 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v69, 1, v67);
      v58 = v100;
      if (v71 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v69, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
        v57 = 0xE700000000000000;
      }
      else
      {
        v60 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
        v57 = v72;
        (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v69, v67);
      }
      v59 = v102;
    }
    v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v57, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    *(_WORD *)(v54 + 12) = 2080;
    v73 = v107;
    v74 = v97;
    v75 = v105;
    v76 = SportsPersonalizationSelection<A>.debugDescription.getter(v107, v97);
    v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v75, v73);
    _os_log_impl(&dword_1C2356000, v52, (os_log_type_t)v91, "Logging sports personalization metrics: intent=%s selection=%s", (uint8_t *)v54, 0x16u);
    v78 = v90;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v78, -1, -1);
    MEMORY[0x1C3BBFF64](v54, -1, -1);

    v63 = v74;
    v62 = (uint64_t)v103;
    v45 = (uint64_t)v108;
    v64 = (uint64_t)v98;
    v61 = v99;
  }
  else
  {

    outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v47, v50);
    v61 = v99;
    v58 = v100;
    v59 = v102;
    v62 = (uint64_t)v103;
    v63 = v97;
    v64 = (uint64_t)v98;
  }
  closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(v109, v45, v96, v63, v62);
  outlined init with copy of MediaUserStateCenter?(v62, v64, &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v64, 1, v61) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v62, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(uint64_t, uint64_t))(v94 + 8))(v45, v95);
    return outlined destroy of MediaUserStateCenter?(v64, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v59, v64, v61);
    SportsResolverMetrics.logSportsMetric()();
    if (v80)
    {
      v81 = v80;
      v82 = v80;
      v83 = Logger.logObject.getter();
      v84 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc();
        v86 = swift_slowAlloc();
        v111[0] = v86;
        *(_DWORD *)v85 = 136315138;
        swift_getErrorValue();
        v87 = Error.localizedDescription.getter();
        v110 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v87, v88, v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v83, v84, "Logging sports metrics failed with: %s", v85, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v86, -1, -1);
        MEMORY[0x1C3BBFF64](v85, -1, -1);

        (*(void (**)(char *, uint64_t))(v58 + 8))(v102, v61);
        v89 = (uint64_t)v103;
      }
      else
      {

        (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v61);
        v89 = v62;
      }
      outlined destroy of MediaUserStateCenter?(v89, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v94 + 8))(v108, v95);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v61);
      outlined destroy of MediaUserStateCenter?(v62, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v94 + 8))(v45, v95);
    }
  }
}

uint64_t closure #1 in static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = a4;
  v9 = *(_QWORD *)(a3 - 8);
  MEMORY[0x1E0C80A78](a1);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for SportsResolverConfig();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for SportsPersonalizationSelection(0, a3, v16, v17);
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)&v26 - v19;
  (*(void (**)(char *, uint64_t))(v21 + 16))((char *)&v26 - v19, a1);
  v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v20, 2, a3);
  if (v22)
  {
    if (v22 == 1)
    {
      v23 = type metadata accessor for SportsResolverMetrics();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(a5, 1, 1, v23);
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v20, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
    (*(void (**)(uint64_t))(v27 + 8))(a3);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, a3);
  }
  v25 = type metadata accessor for SportsResolverMetrics();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a5, 0, 1, v25);
}

uint64_t dispatch thunk of SportsPersonalizationResultMetric.recommendationFound.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for SportsPersonalizationMetrics()
{
  return &type metadata for SportsPersonalizationMetrics;
}

uint64_t SmartPlayPreflightClient.__allocating_init(dataProviderManager:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

unint64_t static SmartPlayPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000018;
}

uint64_t SmartPlayPreflightClient.dataProviderManager.getter()
{
  return swift_retain();
}

uint64_t SmartPlayPreflightClient.init(dataProviderManager:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

Swift::Bool __swiftcall SmartPlayPreflightClient.isLocalPlaybackResumable()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t);
  char *v29;
  void (*v30)(char *, uint64_t);
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioState();
  v35 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v35 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v36 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v38 = (char *)&v35 - v15;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v37 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, v17, v18, "SmartPlayPreflightClient#isLocalPlaybackResumable", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

  (*(void (**)(void))(**(_QWORD **)(v1 + 16) + 408))();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1C2356000, v20, v21, "SmartPlayPreflightClient#isLocalPlaybackResumable queue state is nil", v22, 2u);
      MEMORY[0x1C3BBFF64](v22, -1, -1);
    }

    v23 = 0;
  }
  else
  {
    v24 = v35;
    v25 = v38;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v38, v10, v11);
    Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.getter();
    (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v5, *MEMORY[0x1E0D6E290], v2);
    lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState();
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v27 = v39;
    v26 = v40;
    v28 = *(void (**)(char *, uint64_t))(v24 + 8);
    v28(v5, v2);
    v28(v7, v2);
    v29 = v36;
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v36, v25, v11);
    if (v26 == v27)
      v23 = Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.hasAudioQueueStateItem.getter();
    else
      v23 = 0;
    v30 = *(void (**)(char *, uint64_t))(v12 + 8);
    v30(v29, v11);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v33 = 67109120;
      LODWORD(v40) = v23 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v31, v32, "SmartPlayPreflightClient#isLocalPlaybackResumable: %{BOOL}d", v33, 8u);
      MEMORY[0x1C3BBFF64](v33, -1, -1);
    }

    v30(v38, v11);
  }
  return v23 & 1;
}

uint64_t SmartPlayPreflightClient.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SmartPlayPreflightClient.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance SmartPlayPreflightClient()
{
  return 0xD000000000000018;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioState();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6E2A0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioState and conformance Apple_Parsec_Siri_V2alpha_AudioState);
  }
  return result;
}

uint64_t partial apply for closure #2 in SmartPlayPreflightClient.handle(pommesSearchRequest:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))();
  *a1 = result & 1;
  return result;
}

uint64_t type metadata accessor for SmartPlayPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for SmartPlayPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SmartPlayPreflightClient.__allocating_init(dataProviderManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SmartPlayPreflightClient.isLocalPlaybackResumable()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SmartPlayPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t ResponseCache.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 24) = 0;
  type metadata accessor for AnalyticsComponentIdGenerator();
  v1 = swift_allocObject();
  type metadata accessor for PommesCacheInstrumentationUtil();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

void one-time initialization function for sqliteTransient()
{
  static ResponseCache.sqliteTransient = -1;
}

void *ResponseCache.sqliteFileName.unsafeMutableAddressor()
{
  return &static ResponseCache.sqliteFileName;
}

unint64_t static ResponseCache.sqliteFileName.getter()
{
  return 0xD000000000000011;
}

uint64_t ResponseCache.cacheInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t ResponseCache.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v0 + 24) = 0;
  type metadata accessor for AnalyticsComponentIdGenerator();
  v1 = swift_allocObject();
  type metadata accessor for PommesCacheInstrumentationUtil();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v1;
  *(_QWORD *)(v0 + 16) = v2;
  return v0;
}

uint64_t ResponseCache.deinit()
{
  uint64_t v0;

  (*(void (**)(void))(*(_QWORD *)v0 + 144))();
  swift_release();
  return v0;
}

uint64_t ResponseCache.__deallocating_deinit()
{
  ResponseCache.deinit();
  return swift_deallocClassInstance();
}

const char *ResponseCache.DBError.init(db:)(sqlite3 *a1)
{
  unsigned int v1;
  uint64_t v2;
  const char *result;

  if (!a1)
    return 0;
  v1 = sqlite3_errcode(a1);
  v2 = v1;
  switch(v1)
  {
    case 0u:
      return (const char *)v2;
    case 0x65u:
      return 0;
    case 0x64u:
      return 0;
  }
  result = sqlite3_errstr(v1);
  if (result)
  {
    String.init(cString:)();
    return (const char *)v2;
  }
  __break(1u);
  return result;
}

const char *ResponseCache.DBError.init(errorCode:)(unsigned int a1)
{
  uint64_t v1;
  const char *result;

  if (a1 == 101)
    return 0;
  if (a1 == 100)
    return 0;
  v1 = a1;
  if (!a1)
    return (const char *)v1;
  result = sqlite3_errstr(a1);
  if (result)
  {
    String.init(cString:)();
    return (const char *)v1;
  }
  __break(1u);
  return result;
}

uint64_t ResponseCache.DBError.description.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t result;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;

  result = 0x4F5F4554494C5153;
  switch((unint64_t)a3)
  {
    case 0uLL:
      return result;
    case 1uLL:
      result = 0x525F4554494C5153;
      break;
    case 2uLL:
      result = 0x445F4554494C5153;
      break;
    case 3uLL:
      result = 0x7274706C6C756ELL;
      break;
    case 4uLL:
      result = 0x6E65704F746F6ELL;
      break;
    case 5uLL:
      result = 0x44746F4E68746170;
      break;
    default:
      v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v5);
      swift_bridgeObjectRelease();
      v6._countAndFlagsBits = 44;
      v6._object = (void *)0xE100000000000000;
      String.append(_:)(v6);
      v7._countAndFlagsBits = 0xE90000000000004BLL;
      v7._object = a3;
      String.append(_:)(v7);
      v8._countAndFlagsBits = 41;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      result = 0x28726F727265;
      break;
  }
  return result;
}

BOOL ResponseCache.isOpen.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24) != 0;
}

void ResponseCache.open(directoryPath:flags:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  id v25;
  uint64_t v26;
  void *v27;
  unsigned int v28;
  sqlite3 *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  sqlite3 *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  sqlite3 *v47[2];

  v4 = v3;
  v47[1] = *(sqlite3 **)MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for URL();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 128))(v11) & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1C2356000, v15, v16, "ResponseCache : Cache database already open", v17, 2u);
      MEMORY[0x1C3BBFF64](v17, -1, -1);
    }

    return;
  }
  v44 = a2;
  v43 = v2;
  Date.init()();
  v18 = &v13[v10[5]];
  *(_QWORD *)v18 = "SiriInformationSearch/ResponseCache.swift";
  *((_QWORD *)v18 + 1) = 41;
  v18[16] = 2;
  *(_QWORD *)&v13[v10[6]] = 145;
  v19 = &v13[v10[7]];
  *(_QWORD *)v19 = "open(directoryPath:flags:)";
  *((_QWORD *)v19 + 1) = 26;
  v19[16] = 2;
  v20 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000012);
  v21 = (uint64_t *)&v13[v10[8]];
  *v21 = v20;
  v21[1] = v22;
  if ((URL.hasDirectoryPath.getter() & 1) != 0)
  {
    URL.path.getter();
    v23 = String.utf8CString.getter();
    swift_bridgeObjectRelease();
    v24 = access((const char *)(v23 + 32), 0);
    swift_release();
    if (!v24)
      goto LABEL_11;
    v42 = v3;
    v25 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
    v26 = URL.path.getter();
    v27 = (void *)MEMORY[0x1C3BBEC44](v26);
    swift_bridgeObjectRelease();
    v47[0] = 0;
    v28 = objc_msgSend(v25, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v27, 1, 0, v47);

    if (v28)
    {
      v29 = v47[0];
      v4 = v42;
LABEL_11:
      URL.appendingPathComponent(_:isDirectory:)();
      v30 = URL.path.getter();
      v32 = v31;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v47[0] = 0;
      swift_bridgeObjectRetain();
      specialized static ResponseCache.sqlite_run(closure:)(v30, v32, v47, v44);
      if (v4)
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
        *(sqlite3 **)(v43 + 24) = v47[0];
        if (one-time initialization token for pommes != -1)
          swift_once();
        v35 = type metadata accessor for Logger();
        __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
        swift_bridgeObjectRetain();
        v36 = Logger.logObject.getter();
        v37 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v36, v37))
        {
          v38 = swift_slowAlloc();
          v42 = 0;
          v39 = (uint8_t *)v38;
          v40 = swift_slowAlloc();
          v46 = v40;
          *(_DWORD *)v39 = 136315138;
          swift_bridgeObjectRetain();
          v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v32, &v46);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C2356000, v36, v37, "ResponseCache : Opened database @ %s", v39, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v40, -1, -1);
          MEMORY[0x1C3BBFF64](v39, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        ResponseCache.createTables()();
      }
      goto LABEL_21;
    }
    v34 = v47[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  else
  {
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *v33 = 0;
    v33[1] = 0;
    v33[2] = 5;
    swift_willThrow();
  }
LABEL_21:
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v13, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v13);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> ResponseCache.close()()
{
  sqlite3 **v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*((uint64_t (**)(uint64_t))*v0 + 16))(v2) & 1) != 0)
  {
    closure #1 in ResponseCache.close()((uint64_t)v0, (uint64_t)v4);
    v5 = sqlite3_close(v0[3]);
    v0[3] = 0;
    if (!v5)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
      v21 = Logger.logObject.getter();
      v22 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v21, v22))
      {
        v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v23 = 0;
        _os_log_impl(&dword_1C2356000, v21, v22, "ResponseCache : Closed database", v23, 2u);
        MEMORY[0x1C3BBFF64](v23, -1, -1);
      }

      specialized ResponseCache.markPurgeable(_:)((uint64_t)v4);
      goto LABEL_24;
    }
    LODWORD(v6) = v5;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v28 = v11;
      *(_DWORD *)v10 = 136315138;
      LODWORD(v27) = v6;
      v12 = dispatch thunk of CustomStringConvertible.description.getter();
      v27 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v8, v9, "ResponseCache : Database close failed : %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v11, -1, -1);
      MEMORY[0x1C3BBFF64](v10, -1, -1);
    }

    if ((_DWORD)v6 == 101)
    {
      v6 = 0;
      v14 = 0;
      v15 = 2;
      goto LABEL_23;
    }
    if ((_DWORD)v6 == 100)
    {
      v6 = 0;
      v14 = 0;
      v15 = 1;
LABEL_23:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      swift_allocError();
      *v25 = v6;
      v25[1] = v14;
      v25[2] = v15;
      swift_willThrow();
LABEL_24:
      outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for URL?);
      return;
    }
    if (sqlite3_errstr(v6))
    {
      v14 = String.init(cString:)();
      v15 = v24;
      v6 = v6;
      goto LABEL_23;
    }
    __break(1u);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1C2356000, v17, v18, "ResponseCache : Ignoring request to close because database is not open", v19, 2u);
      MEMORY[0x1C3BBFF64](v19, -1, -1);
    }

  }
}

uint64_t closure #1 in ResponseCache.close()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;

  if (sqlite3_db_filename(*(sqlite3 **)(a1 + 24), "main") && (MEMORY[0x1C3BBECE0](), v3))
  {
    URL.init(fileURLWithPath:)();
    swift_bridgeObjectRelease();
    v4 = type metadata accessor for URL();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 0;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1C2356000, v9, v10, "ResponseCache : Unable to obtain file name for DB", v11, 2u);
      MEMORY[0x1C3BBFF64](v11, -1, -1);
    }

    v4 = type metadata accessor for URL();
    v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
    v6 = a2;
    v7 = 1;
  }
  return v5(v6, v7, 1, v4);
}

uint64_t ResponseCache.store(response:expiration:)(sqlite3_stmt *a1, double a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  sqlite3_stmt *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  uint64_t v40;
  sqlite3_stmt *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  sqlite3_int64 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  id v52;
  unint64_t v53;
  void *v54;
  void *v55;
  int v56;
  unsigned int v57;
  uint64_t v58;
  uint64_t v59;
  void (__cdecl *v60)(void *);
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  void (__cdecl *v68)(void *);
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t result;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  id v78;
  id v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  sqlite3_stmt *v83;
  id v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  sqlite3_stmt *v129;
  void *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  sqlite3_stmt *v135;
  unint64_t v136;
  uint64_t v137;

  v3 = v2;
  v137 = *MEMORY[0x1E0C80C00];
  v6 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v122 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v125 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v122 - v12;
  v14 = a1;
  v131 = PommesResponse.metadataDomainName.getter();
  v132 = v15;
  v16 = *(_QWORD *)(v3 + 16);
  v17 = PommesResponse.requestId.getter();
  v19 = v18;
  PommesResponse.pommesCandidateId.getter();
  if ((~*(_QWORD *)&a2 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_56;
  }
  if (a2 <= -1.0)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (a2 >= 4294967300.0)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  (*(void (**)(uint64_t, uint64_t, char *, uint64_t, char *, uint64_t, _QWORD))(*(_QWORD *)v16 + 152))(v17, v19, v13, v131, v132, 8, a2);
  swift_bridgeObjectRelease();
  v20 = outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v20) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v48 = PommesResponse.requestId.getter();
    v50 = v49;
    PommesResponse.pommesCandidateId.getter();
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v16 + 160))(v48, v50, v13, 1);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *v51 = 0;
    v51[1] = 0;
    v51[2] = 4;
    swift_willThrow();
    return 1;
  }
  v123 = v16;
  Date.init()();
  v21 = &v8[v6[5]];
  *(_QWORD *)v21 = "SiriInformationSearch/ResponseCache.swift";
  *((_QWORD *)v21 + 1) = 41;
  v21[16] = 2;
  *(_QWORD *)&v8[v6[6]] = 216;
  v22 = &v8[v6[7]];
  *(_QWORD *)v22 = "store(response:expiration:)";
  *((_QWORD *)v22 + 1) = 27;
  v22[16] = 2;
  v129 = a1;
  v23 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000013);
  v24 = v6[8];
  v124 = v8;
  v25 = (uint64_t *)&v8[v24];
  *v25 = v23;
  v25[1] = v26;
  v135 = 0;
  v136 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v27._countAndFlagsBits = 0xD000000000000018;
  v27._object = (void *)0x80000001C2506AC0;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x6361437972657571;
  v28._object = (void *)0xEA00000000006568;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0x220A282022;
  v29._object = (void *)0xE500000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x636E617265747475;
  v30._object = (void *)0xED00006873614865;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 571092002;
  v31._object = (void *)0xE400000000000000;
  String.append(_:)(v31);
  v32._countAndFlagsBits = 0x636E617265747475;
  v32._object = (void *)0xE900000000000065;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 571092002;
  v33._object = (void *)0xE400000000000000;
  String.append(_:)(v33);
  v34._countAndFlagsBits = 0x6E69616D6F64;
  v34._object = (void *)0xE600000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 571092002;
  v35._object = (void *)0xE400000000000000;
  String.append(_:)(v35);
  v36._countAndFlagsBits = 0x65736E6F70736572;
  v36._object = (void *)0xE800000000000000;
  String.append(_:)(v36);
  v37._countAndFlagsBits = 571092002;
  v37._object = (void *)0xE400000000000000;
  String.append(_:)(v37);
  v38._object = (void *)0xEA00000000006E6FLL;
  v38._countAndFlagsBits = 0x6974617269707865;
  String.append(_:)(v38);
  v39._countAndFlagsBits = 0xD00000000000001BLL;
  v39._object = (void *)0x80000001C2506AE0;
  String.append(_:)(v39);
  v41 = v135;
  v40 = v136;
  PommesResponse.searchRequestUtterance.getter();
  v43 = v42;
  PommesResponse.sharedUserId.getter();
  v45 = v44;
  v128 = v43;
  v46 = String.hashValue.getter();
  if (AFSupportsMultiUser())
  {
    if (v45)
    {
      v47 = String.hashValue.getter();
      swift_bridgeObjectRelease();
      v46 ^= v47;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  v8 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB36F8]), sel_initRequiringSecureCoding_, 1);
  dispatch thunk of PommesResponse.encode(cachingCoder:)();
  v52 = objc_msgSend(v8, sel_encodedData);
  v126 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  v127 = v53;

  v135 = 0;
  swift_retain();
  swift_bridgeObjectRetain();
  v54 = v130;
  specialized static ResponseCache.sqlite_run(closure:)(v3, (uint64_t)v41, v40, &v135);
  v55 = v54;
  if (v54)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease_n();
LABEL_36:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
    v78 = v55;
    v79 = v55;
    v80 = Logger.logObject.getter();
    v81 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v80, v81))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      v83 = (sqlite3_stmt *)swift_slowAlloc();
      v134 = (uint64_t)v55;
      v135 = v83;
      v132 = v13;
      *(_DWORD *)v82 = 136315138;
      v84 = v55;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v85 = String.init<A>(describing:)();
      v134 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v85, v86, (uint64_t *)&v135);
      v13 = v132;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v80, v81, "ResponseCache : Database INSERT INTO operation failed : %s", v82, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v83, -1, -1);
      MEMORY[0x1C3BBFF64](v82, -1, -1);
    }
    else
    {

    }
    v87 = (uint64_t)v124;
    v88 = PommesResponse.requestId.getter();
    v90 = v89;
    PommesResponse.pommesCandidateId.getter();
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v123 + 160))(v88, v90, v13, 2);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
    swift_willThrow();
    outlined consume of Data._Representation(v126, v127);

    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v87, 0);
    v91 = v87;
LABEL_44:
    outlined destroy of PerformanceUtil.Ticket(v91);
    return 1;
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  v14 = v135;
  v17 = 1;
  v56 = sqlite3_bind_int64(v135, 1, v46);
  if (v56)
  {
    v57 = v56;
    if (v56 == 100)
    {
      v58 = 0;
      v59 = 0;
      goto LABEL_25;
    }
    if (v56 == 101)
    {
      v58 = 0;
      v59 = 0;
      v17 = 2;
LABEL_25:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      v55 = (void *)swift_allocError();
      *v67 = v58;
      v67[1] = v59;
      v67[2] = v17;
      swift_willThrow();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_35:
      sqlite3_finalize(v135);
      goto LABEL_36;
    }
    if (sqlite3_errstr(v56))
    {
      v59 = String.init(cString:)();
      v17 = v66;
      v58 = v57;
      goto LABEL_25;
    }
    __break(1u);
    goto LABEL_86;
  }
  if (one-time initialization token for sqliteTransient != -1)
    swift_once();
  v60 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
  v61 = String.utf8CString.getter();
  v62 = sqlite3_bind_text(v14, 2, (const char *)(v61 + 32), -1, v60);
  swift_release();
  if (v62)
  {
    if (v62 == 100)
    {
      v63 = 0;
      v64 = 0;
      v65 = 1;
      goto LABEL_33;
    }
    if (v62 == 101)
    {
      v63 = 0;
      v64 = 0;
      v65 = 2;
LABEL_33:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      v55 = (void *)swift_allocError();
      *v76 = v63;
      v76[1] = v64;
      v76[2] = v65;
      swift_willThrow();
      swift_bridgeObjectRelease();
LABEL_34:
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    result = (uint64_t)sqlite3_errstr(v62);
    if (result)
    {
      v64 = String.init(cString:)();
      v65 = v75;
      v63 = v62;
      goto LABEL_33;
    }
    __break(1u);
    goto LABEL_88;
  }
  v17 = (uint64_t)v8;
  swift_bridgeObjectRelease();
  v68 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
  v69 = String.utf8CString.getter();
  v70 = sqlite3_bind_text(v14, 3, (const char *)(v69 + 32), -1, v68);
  swift_release();
  if (v70)
  {
    if (v70 == 100)
    {
      v71 = 0;
      v72 = 0;
      v73 = 1;
    }
    else if (v70 == 101)
    {
      v71 = 0;
      v72 = 0;
      v73 = 2;
    }
    else
    {
      result = (uint64_t)sqlite3_errstr(v70);
      if (!result)
      {
LABEL_88:
        __break(1u);
        goto LABEL_89;
      }
      v72 = String.init(cString:)();
      v73 = v94;
      v71 = v70;
    }
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    v55 = (void *)swift_allocError();
    *v95 = v71;
    v95[1] = v72;
    v95[2] = v73;
    swift_willThrow();
    goto LABEL_34;
  }
  swift_bridgeObjectRelease();
  v93 = v126;
  v92 = v127;
  outlined copy of Data._Representation(v126, v127);
  specialized static ResponseCache.sqlite_run(closure:)(v93, v92);
  outlined consume of Data._Representation(v93, v92);
  v96 = sqlite3_bind_double(v14, 5, a2);
  if (v96)
  {
    v97 = v96;
    if (v96 == 100)
    {
      v98 = 0;
      v99 = 0;
      v100 = 1;
    }
    else if (v96 == 101)
    {
      v98 = 0;
      v99 = 0;
      v100 = 2;
    }
    else
    {
      result = (uint64_t)sqlite3_errstr(v96);
      if (!result)
      {
LABEL_89:
        __break(1u);
        goto LABEL_90;
      }
      v99 = String.init(cString:)();
      v100 = v116;
      v98 = v97;
    }
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    v55 = (void *)swift_allocError();
    *v117 = v98;
    v117[1] = v99;
    v117[2] = v100;
    swift_willThrow();
    goto LABEL_35;
  }
LABEL_58:
  v101 = sqlite3_step(v14);
  v102 = v101;
  switch(v101)
  {
    case 0u:
      v118 = 0;
      v119 = 0;
LABEL_84:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      v55 = (void *)swift_allocError();
      *v121 = v102;
      v121[1] = v118;
      v121[2] = v119;
      swift_willThrow();
      goto LABEL_35;
    case 0x64u:
      v102 = 0;
      v118 = 0;
      v119 = 1;
      goto LABEL_84;
    case 0x65u:
      LODWORD(v132) = sqlite3_changes(*(sqlite3 **)(v3 + 24));
      if (one-time initialization token for pommes == -1)
      {
LABEL_62:
        v103 = type metadata accessor for Logger();
        __swift_project_value_buffer(v103, (uint64_t)static Logger.pommes);
        v104 = Logger.logObject.getter();
        v105 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v104, v105))
        {
          v106 = (uint8_t *)swift_slowAlloc();
          v107 = swift_slowAlloc();
          *(_DWORD *)v106 = 136315138;
          v134 = v107;
          if ((int)v132 <= 0)
            v108 = 0x657461647075;
          else
            v108 = 0x65726F7473;
          if ((int)v132 <= 0)
            v109 = 0xE600000000000000;
          else
            v109 = 0xE500000000000000;
          v133 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, &v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2356000, v104, v105, "ResponseCache : %s cache entry complete", v106, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v107, -1, -1);
          MEMORY[0x1C3BBFF64](v106, -1, -1);
        }

        sqlite3_finalize(v135);
        v110 = PommesResponse.requestId.getter();
        v112 = v111;
        v113 = (uint64_t)v125;
        PommesResponse.pommesCandidateId.getter();
        if ((int)v132 >= 1)
          v114 = 1;
        else
          v114 = 2;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v123 + 168))(v110, v112, v113, v114);
        outlined consume of Data._Representation(v126, v127);

        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?(v113, &demangling cache variable for type metadata for PommesCandidateId?);
        if (one-time initialization token for shared != -1)
          swift_once();
        v115 = (uint64_t)v124;
        (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v124, 0);
        v91 = v115;
        goto LABEL_44;
      }
LABEL_86:
      swift_once();
      goto LABEL_62;
  }
  result = (uint64_t)sqlite3_errstr(v101);
  if (result)
  {
    v118 = String.init(cString:)();
    v119 = v120;
    goto LABEL_84;
  }
LABEL_90:
  __break(1u);
  return result;
}

const char *ResponseCache.fetchResponse(with:domainWarmup:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void (*v12)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(uint64_t);
  char *v20;
  int *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  Swift::String v27;
  Swift::String v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  Swift::String v32;
  Swift::String v33;
  Swift::String v34;
  Swift::String v35;
  __int128 v36;
  uint64_t v37;
  sqlite3_int64 v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  char *v45;
  double v46;
  double v47;
  sqlite3_stmt *v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  void (__cdecl *v54)(void *);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const char *result;
  uint64_t v60;
  _QWORD *v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  id v66;
  id v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  id v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  void (*v76)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  sqlite3_stmt *v86;
  int v87;
  uint64_t *v88;
  __int128 v89;
  const void *v90;
  const void *v91;
  int v92;
  unsigned int v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  _BOOL4 v99;
  uint64_t v100;
  void *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  NSObject *v105;
  os_log_type_t v106;
  uint8_t *v107;
  uint8_t *v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  void (*v123)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v124;
  void (*v125)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  __int128 v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  _QWORD *v134;
  char *v135;
  uint64_t v136;
  sqlite3_stmt *v137;
  __int128 __dst;
  uint64_t v139;

  v3 = v2;
  v126 = a2;
  v139 = *MEMORY[0x1E0C80C00];
  v130 = type metadata accessor for Date();
  *(_QWORD *)&v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x1E0C80A78](v130);
  v128 = (char *)&v121 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v131 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v131);
  v135 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v124 = (uint64_t)&v121 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v121 - v10;
  v12 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v3[2];
  v132 = type metadata accessor for PommesSearchRequest(0);
  v13 = (uint64_t *)(a1 + *(int *)(v132 + 32));
  v14 = *v13;
  v15 = v13[1];
  v136 = a1;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v11);
  v16 = type metadata accessor for PommesCandidateId();
  v17 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56);
  v17(v11, 0, 1, v16);
  (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v12 + 128))(v14, v15, v11);
  v18 = outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
  v19 = *(uint64_t (**)(uint64_t))(*v3 + 128);
  v134 = v3;
  if ((v19(v18) & 1) == 0)
  {
    v43 = *v13;
    v42 = v13[1];
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v11);
    v17(v11, 0, 1, v16);
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v12 + 136))(v43, v42, v11, 1);
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *v44 = 0;
    v44[1] = 0;
    v44[2] = 4;
    swift_willThrow();
    return (const char *)v12;
  }
  v121 = v11;
  v127 = v13;
  v125 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v17;
  v122 = v16;
  v123 = v12;
  v20 = v135;
  Date.init()();
  v21 = (int *)v131;
  v22 = &v20[*(int *)(v131 + 20)];
  *(_QWORD *)v22 = "SiriInformationSearch/ResponseCache.swift";
  *((_QWORD *)v22 + 1) = 41;
  v22[16] = 2;
  *(_QWORD *)&v20[v21[6]] = 289;
  v23 = &v20[v21[7]];
  *(_QWORD *)v23 = "fetchResponse(with:domainWarmup:)";
  *((_QWORD *)v23 + 1) = 33;
  v23[16] = 2;
  v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000013);
  v25 = (uint64_t *)&v20[v21[8]];
  *v25 = v24;
  v25[1] = v26;
  *(_QWORD *)&__dst = 0;
  *((_QWORD *)&__dst + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(61);
  v27._countAndFlagsBits = 0x2A205443454C4553;
  v27._object = (void *)0xEF22204D4F524620;
  String.append(_:)(v27);
  v28._countAndFlagsBits = 0x6361437972657571;
  v28._object = (void *)0xEA00000000006568;
  String.append(_:)(v28);
  v29._countAndFlagsBits = 0xA45524548572022;
  v29._object = (void *)0xE900000000000022;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 0x636E617265747475;
  v30._object = (void *)0xED00006873614865;
  String.append(_:)(v30);
  v31._countAndFlagsBits = 0x4E41203F203D2022;
  v31._object = (void *)0xEB00000000220A44;
  String.append(_:)(v31);
  v32._object = (void *)0xE900000000000065;
  v32._countAndFlagsBits = 0x636E617265747475;
  String.append(_:)(v32);
  v33._countAndFlagsBits = 0x4E41203F203D2022;
  v33._object = (void *)0xEB00000000220A44;
  String.append(_:)(v33);
  v34._object = (void *)0xEA00000000006E6FLL;
  v34._countAndFlagsBits = 0x6974617269707865;
  String.append(_:)(v34);
  v35._countAndFlagsBits = 0x3B3F203D3E2022;
  v35._object = (void *)0xE700000000000000;
  String.append(_:)(v35);
  v36 = __dst;
  v37 = *(_QWORD *)(v136 + *(int *)(v132 + 84) + 8);
  v38 = String.hashValue.getter();
  if (AFSupportsMultiUser() && v37)
    v38 ^= String.hashValue.getter();
  v137 = 0;
  v39 = (uint64_t)v134;
  swift_retain();
  swift_bridgeObjectRetain();
  v40 = (void *)v133;
  specialized static ResponseCache.sqlite_run(closure:)(v39, v36, *((uint64_t *)&v36 + 1), &v137);
  v41 = v40;
  if (v40)
  {
    swift_release();
    swift_bridgeObjectRelease_n();
    v12 = v125;
LABEL_32:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v65 = type metadata accessor for Logger();
    __swift_project_value_buffer(v65, (uint64_t)static Logger.pommes);
    v66 = v41;
    v67 = v41;
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      v71 = swift_slowAlloc();
      v137 = (sqlite3_stmt *)v41;
      *(_QWORD *)&__dst = v71;
      *(_DWORD *)v70 = 136315138;
      v72 = v41;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v73 = String.init<A>(describing:)();
      v137 = (sqlite3_stmt *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v74, (uint64_t *)&__dst);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v68, v69, "ResponseCache : SELECT failed : %s", v70, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v71, -1, -1);
      MEMORY[0x1C3BBFF64](v70, -1, -1);
    }
    else
    {

    }
    v75 = (uint64_t)v135;
    v76 = v123;
    v77 = v122;
    v78 = (uint64_t)v121;
    v79 = *v127;
    v80 = v127[1];
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v121);
    v12(v78, 0, 1, v77);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v76 + 136))(v79, v80, v78, 2);
    outlined destroy of MediaUserStateCenter?(v78, &demangling cache variable for type metadata for PommesCandidateId?);
    swift_willThrow();
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v75, 0);
    outlined destroy of PerformanceUtil.Ticket(v75);
    return (const char *)v12;
  }
  swift_release();
  swift_bridgeObjectRelease_n();
  v45 = v128;
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  v47 = v46;
  (*(void (**)(char *, uint64_t))(v129 + 8))(v45, v130);
  v48 = v137;
  v49 = 1;
  v50 = sqlite3_bind_int64(v137, 1, v38);
  if (!v50)
  {
    if (one-time initialization token for sqliteTransient != -1)
      swift_once();
    v54 = (void (__cdecl *)(void *))static ResponseCache.sqliteTransient;
    v55 = String.utf8CString.getter();
    LODWORD(v56) = sqlite3_bind_text(v48, 2, (const char *)(v55 + 32), -1, v54);
    swift_release();
    v12 = v125;
    if ((_DWORD)v56)
    {
      if ((_DWORD)v56 != 100)
      {
        if ((_DWORD)v56 == 101)
        {
LABEL_17:
          v56 = 0;
          v57 = 0;
          v58 = 2;
LABEL_30:
          lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
          v41 = (void *)swift_allocError();
          *v64 = v56;
          v64[1] = v57;
          v64[2] = v58;
          goto LABEL_31;
        }
        result = sqlite3_errstr(v56);
        if (!result)
          goto LABEL_77;
LABEL_29:
        v57 = String.init(cString:)();
        v58 = v63;
        v56 = v56;
        goto LABEL_30;
      }
    }
    else
    {
      v62 = sqlite3_bind_double(v48, 3, v47);
      if (!v62)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v81 = type metadata accessor for Logger();
        v82 = __swift_project_value_buffer(v81, (uint64_t)static Logger.pommes);
        v83 = Logger.logObject.getter();
        v84 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v83, v84))
        {
          v85 = (uint8_t *)swift_slowAlloc();
          *(_DWORD *)v85 = 134217984;
          *(double *)&__dst = v47;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2356000, v83, v84, "ResponseCache : Fetching cached responses with expiration threshold %f", v85, 0xCu);
          MEMORY[0x1C3BBFF64](v85, -1, -1);
        }

        v86 = v137;
        v87 = sqlite3_step(v137);
        v88 = v127;
        v12 = 0;
        if (v87 == 100)
        {
          v133 = 0;
          v134 = 0;
          *((_QWORD *)&v89 + 1) = 0x7FFFFFFFLL;
          v129 = xmmword_1C24FEC50;
          *(_QWORD *)&v89 = 136315138;
          v131 = v89;
          v130 = MEMORY[0x1E0DEE9B8] + 8;
          v132 = v82;
          do
          {
            v90 = sqlite3_column_blob(v86, 3);
            if (v90)
            {
              v91 = v90;
              v92 = sqlite3_column_bytes(v86, 3);
              if (v92 < 1)
              {
                v109 = Logger.logObject.getter();
                v110 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v109, v110))
                {
                  v111 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)v111 = 0;
                  _os_log_impl(&dword_1C2356000, v109, v110, "ResponseCache : Cached POMMES response 0 bytes", v111, 2u);
                  MEMORY[0x1C3BBFF64](v111, -1, -1);
                }

              }
              else
              {
                v93 = v92;
                if (sqlite3_column_text(v86, 2))
                {
                  v94 = String.init(cString:)();
                  v96 = v95;
                  swift_bridgeObjectRetain_n();
                  swift_bridgeObjectRelease();
                  v97 = Logger.logObject.getter();
                  v98 = static os_log_type_t.debug.getter();
                  v99 = os_log_type_enabled(v97, v98);
                  v134 = (_QWORD *)v94;
                  if (v99)
                  {
                    v100 = swift_slowAlloc();
                    v101 = v41;
                    v102 = swift_slowAlloc();
                    *(_QWORD *)&__dst = v102;
                    *(_DWORD *)v100 = v131;
                    swift_bridgeObjectRetain();
                    *(_QWORD *)(v100 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v134, v96, (uint64_t *)&__dst);
                    swift_bridgeObjectRelease_n();
                    _os_log_impl(&dword_1C2356000, v97, v98, "ResponseCache : warmup domain %s", (uint8_t *)v100, 0xCu);
                    swift_arrayDestroy();
                    v103 = v102;
                    v41 = v101;
                    MEMORY[0x1C3BBFF64](v103, -1, -1);
                    v104 = v100;
                    v94 = (uint64_t)v134;
                    MEMORY[0x1C3BBFF64](v104, -1, -1);

                  }
                  else
                  {

                    swift_bridgeObjectRelease_n();
                  }
                  (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v126 + 184))(v136, v94, v96);
                  swift_bridgeObjectRelease();
                  v133 = v96;
                }
                if (v93 <= 0xE)
                {
                  *(_QWORD *)((char *)&__dst + 6) = 0;
                  *(_QWORD *)&__dst = 0;
                  BYTE14(__dst) = v93;
                  memcpy(&__dst, v91, v93);
                  v112 = __dst;
                  v113 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
                }
                else
                {
                  type metadata accessor for __DataStorage();
                  swift_allocObject();
                  if (v93 >= 0x7FFFFFFF)
                  {
                    v114 = __DataStorage.init(bytes:length:)();
                    type metadata accessor for Data.RangeReference();
                    v112 = swift_allocObject();
                    *(_OWORD *)(v112 + 16) = v129;
                    v113 = v114 | 0x8000000000000000;
                  }
                  else
                  {
                    v112 = (unint64_t)v93 << 32;
                    v113 = __DataStorage.init(bytes:length:)() | 0x4000000000000000;
                  }
                }
                v115 = specialized ResponseCache.hydratePommesResponse(response:pommesSearchRequest:componentsWarmedUp:)(v112, v113);

                outlined consume of Data._Representation(v112, v113);
                swift_bridgeObjectRelease();
                v86 = v137;
                v12 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v115;
              }
              v88 = v127;
            }
            else
            {
              v105 = Logger.logObject.getter();
              v106 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v105, v106))
              {
                v107 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v107 = 0;
                _os_log_impl(&dword_1C2356000, v105, v106, "ResponseCache : Cached POMMES response is nil", v107, 2u);
                v108 = v107;
                v88 = v127;
                MEMORY[0x1C3BBFF64](v108, -1, -1);
              }

            }
          }
          while (sqlite3_step(v86) == 100);
        }
        else
        {
          v133 = 0;
          v134 = 0;
        }
        sqlite3_finalize(v86);
        v116 = *v88;
        v117 = v88[1];
        v118 = v124;
        PommesSearchRequest.pommesCandidateId.getter(v124);
        v125(v118, 0, 1, v122);
        if (v12)
          v119 = 1;
        else
          v119 = 3;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD *, unint64_t))(*(_QWORD *)v123 + 144))(v116, v117, v118, v119, v134, v133);
        swift_bridgeObjectRelease();
        outlined destroy of MediaUserStateCenter?(v118, &demangling cache variable for type metadata for PommesCandidateId?);
        if (one-time initialization token for shared != -1)
          swift_once();
        v120 = (uint64_t)v135;
        (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v135, 0);
        outlined destroy of PerformanceUtil.Ticket(v120);
        return (const char *)v12;
      }
      LODWORD(v56) = v62;
      if (v62 != 100)
      {
        if (v62 == 101)
          goto LABEL_17;
        if (sqlite3_errstr(v62))
          goto LABEL_29;
        __break(1u);
      }
    }
    v56 = 0;
    v57 = 0;
    v58 = 1;
    goto LABEL_30;
  }
  v51 = v50;
  if (v50 == 100)
  {
    v52 = 0;
    v53 = 0;
    v12 = v125;
    goto LABEL_21;
  }
  v12 = v125;
  if (v50 == 101)
  {
    v52 = 0;
    v53 = 0;
    v49 = 2;
LABEL_21:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    v41 = (void *)swift_allocError();
    *v61 = v52;
    v61[1] = v53;
    v61[2] = v49;
LABEL_31:
    swift_willThrow();
    sqlite3_finalize(v137);
    goto LABEL_32;
  }
  result = sqlite3_errstr(v50);
  if (result)
  {
    v53 = String.init(cString:)();
    v49 = v60;
    v52 = v51;
    goto LABEL_21;
  }
  __break(1u);
LABEL_77:
  __break(1u);
  return result;
}

uint64_t ResponseCache.delete(path:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  void (*v17)(char *, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  sqlite3_stmt *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  id v45;
  id v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  sqlite3_stmt *v50;
  id v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t result;
  uint64_t v55;
  id v56;
  void *v57;
  unsigned __int8 v58;
  uint64_t (*v59)(uint64_t, uint64_t, uint64_t, uint64_t);
  sqlite3_stmt *v60;
  sqlite3_stmt *v61;
  _QWORD v62[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  sqlite3_stmt *ppStmt[2];
  sqlite3 *v68[2];

  v63 = a1;
  v68[1] = *(sqlite3 **)MEMORY[0x1E0C80C00];
  v10 = type metadata accessor for URL();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62[0] = v5;
  v14 = *(_QWORD *)(v5 + 16);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 176);
  v65 = a4;
  v66 = a2;
  v64 = a3;
  v15(a2, a3, a4, a5);
  URL.appendingPathComponent(_:isDirectory:)();
  v16 = URL.path.getter();
  v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19 = v18;
  v17(v13, v10);
  v20 = String.utf8CString.getter();
  LODWORD(a2) = access((const char *)(v20 + 32), 0);
  swift_release();
  if (!(_DWORD)a2)
  {
    v30 = v14;
    v31 = v62[0];
    v33 = v64;
    v32 = v65;
    v68[0] = 0;
    swift_bridgeObjectRetain();
    v34 = (void *)v62[1];
    specialized static ResponseCache.sqlite_run(closure:)(v16, v19, v68);
    v25 = v34;
    if (v34)
    {
      swift_bridgeObjectRelease_n();
LABEL_17:
      v27 = v32;
      v28 = v33;
      v29 = v66;
      v24 = v30;
      goto LABEL_18;
    }
    swift_bridgeObjectRelease();
    ppStmt[0] = 0;
    ppStmt[1] = (sqlite3_stmt *)0xE000000000000000;
    _StringGuts.grow(_:)(25);
    swift_bridgeObjectRelease();
    ppStmt[0] = 0;
    v35 = sqlite3_prepare_v2(v68[0], "SELECT COUNT(*) FROM \"queryCache\"", -1, ppStmt, 0);
    if (v35)
    {
      LODWORD(v36) = v35;
      if (v35 == 100)
      {
        v36 = 0;
        v37 = 0;
        v38 = 1;
        goto LABEL_16;
      }
      if (v35 == 101)
      {
        v36 = 0;
        v37 = 0;
        v38 = 2;
LABEL_16:
        lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
        v25 = (void *)swift_allocError();
        *v43 = v36;
        v43[1] = v37;
        v43[2] = v38;
        swift_willThrow();
        swift_bridgeObjectRelease();
        goto LABEL_17;
      }
      if (sqlite3_errstr(v35))
      {
        v37 = String.init(cString:)();
        v38 = v42;
        v36 = v36;
        goto LABEL_16;
      }
      __break(1u);
    }
    else
    {
      v63 = v16;
      v39 = ppStmt[0];
      if (sqlite3_step(ppStmt[0]) == 100)
      {
        v40 = v31;
        do
          v41 = sqlite3_column_int(v39, 0);
        while (sqlite3_step(v39) == 100);
      }
      else
      {
        v41 = 0;
        v40 = v31;
      }
      v55 = sqlite3_finalize(v39);
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 144))(v55);
      v56 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
      v57 = (void *)MEMORY[0x1C3BBEC44](v63, v19);
      swift_bridgeObjectRelease();
      ppStmt[0] = 0;
      v58 = objc_msgSend(v56, sel_removeItemAtPath_error_, v57, ppStmt);

      if ((v58 & 1) == 0)
      {
        v61 = ppStmt[0];
        v25 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        goto LABEL_17;
      }
      if ((v41 & 0x80000000) == 0)
      {
        v59 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 192);
        v60 = ppStmt[0];
        return v59(v66, v33, v32, v41);
      }
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRelease();
  v21 = v65;
  v22 = v66;
  v23 = v64;
  v24 = v14;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 184))(v66, v64, v65, 1);
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  v25 = (void *)swift_allocError();
  *v26 = 0;
  v26[1] = 0;
  v26[2] = 5;
  swift_willThrow();
  v27 = v21;
  v28 = v23;
  v29 = v22;
LABEL_18:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 184))(v29, v28, v27, 2);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v44 = type metadata accessor for Logger();
  __swift_project_value_buffer(v44, (uint64_t)static Logger.pommes);
  v45 = v25;
  v46 = v25;
  v47 = Logger.logObject.getter();
  v48 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v47, v48))
  {
    v49 = (uint8_t *)swift_slowAlloc();
    v50 = (sqlite3_stmt *)swift_slowAlloc();
    ppStmt[0] = v50;
    *(_DWORD *)v49 = 136315138;
    v68[0] = (sqlite3 *)v25;
    v51 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v52 = String.init<A>(describing:)();
    v68[0] = (sqlite3 *)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, (uint64_t *)ppStmt);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v47, v48, "ResponseCache : purge failed : %s", v49, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v50, -1, -1);
    MEMORY[0x1C3BBFF64](v49, -1, -1);
  }
  else
  {

  }
  return swift_willThrow();
}

uint64_t ResponseCache.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  int *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t (*v18)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  sqlite3_stmt *v27;
  uint64_t v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  id v43;
  id v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  sqlite3_stmt *v48;
  id v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t result;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  sqlite3_stmt *v61[3];

  v7 = v6;
  v8 = v5;
  v61[2] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  v14 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *(_QWORD *)(v8 + 16);
  v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 176);
  v59 = a3;
  v19 = v18(a1, a2, a3, a4);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 128))(v19) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v17 + 184))(a1, a2, v59, 1);
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *v26 = 0;
    v26[1] = 0;
    v26[2] = 4;
    swift_willThrow();
    return v8;
  }
  Date.init()();
  v20 = &v16[v14[5]];
  *(_QWORD *)v20 = "SiriInformationSearch/ResponseCache.swift";
  *((_QWORD *)v20 + 1) = 41;
  v20[16] = 2;
  *(_QWORD *)&v16[v14[6]] = 415;
  v21 = &v16[v14[7]];
  *(_QWORD *)v21 = "purge(expirationThreshold:requestId:pommesCandidateId:reason:)";
  *((_QWORD *)v21 + 1) = 62;
  v21[16] = 2;
  v22 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001ALL);
  v23 = (uint64_t *)&v16[v14[8]];
  *v23 = v22;
  v23[1] = v24;
  v61[0] = 0;
  v61[1] = (sqlite3_stmt *)0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v61[0] = 0;
  v25 = swift_retain();
  specialized static ResponseCache.sqlite_run(closure:)(v25, 0xD000000000000030, 0x80000001C2506BA0, v61);
  v58 = v17;
  if (v6)
  {
    swift_release();
    goto LABEL_24;
  }
  swift_release();
  v27 = v61[0];
  v28 = 1;
  v29 = sqlite3_bind_double(v61[0], 1, a5);
  if (v29)
  {
    v30 = v29;
    if (v29 == 100)
    {
      v31 = 0;
      v32 = 0;
      goto LABEL_22;
    }
    if (v29 == 101)
    {
      v31 = 0;
      v32 = 0;
      v28 = 2;
LABEL_22:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      v7 = (void *)swift_allocError();
      *v41 = v31;
      v41[1] = v32;
      v41[2] = v28;
LABEL_23:
      swift_willThrow();
      sqlite3_finalize(v61[0]);
LABEL_24:
      if (one-time initialization token for pommes != -1)
        swift_once();
      v42 = type metadata accessor for Logger();
      __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
      v43 = v7;
      v44 = v7;
      v45 = Logger.logObject.getter();
      v46 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v45, v46))
      {
        v57 = a1;
        v47 = (uint8_t *)swift_slowAlloc();
        v48 = (sqlite3_stmt *)swift_slowAlloc();
        v60 = (uint64_t)v7;
        v61[0] = v48;
        *(_DWORD *)v47 = 136315138;
        v8 = (uint64_t)(v47 + 12);
        v56 = v47 + 4;
        v49 = v7;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v50 = String.init<A>(describing:)();
        v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, (uint64_t *)v61);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        a1 = v57;
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v45, v46, "ResponseCache : DELETE FROM failed : %s", v47, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v48, -1, -1);
        MEMORY[0x1C3BBFF64](v47, -1, -1);
      }
      else
      {

      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v58 + 184))(a1, a2, v59, 2);
      swift_willThrow();
      if (one-time initialization token for shared == -1)
        goto LABEL_30;
LABEL_37:
      swift_once();
LABEL_30:
      (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v16, 0);
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v16);
      return v8;
    }
    if (sqlite3_errstr(v29))
    {
      v32 = String.init(cString:)();
      v28 = v40;
      v31 = v30;
      goto LABEL_22;
    }
    __break(1u);
    goto LABEL_40;
  }
  v33 = sqlite3_step(v27);
  v34 = v33;
  if (!v33)
  {
    v53 = 0;
    v8 = 0;
    goto LABEL_36;
  }
  v35 = v58;
  if (v33 == 100)
  {
    v34 = 0;
    v53 = 0;
    v8 = 1;
    goto LABEL_36;
  }
  if (v33 != 101)
  {
    if (!sqlite3_errstr(v33))
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    v53 = String.init(cString:)();
    v8 = v54;
LABEL_36:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    v7 = (void *)swift_allocError();
    *v55 = v34;
    v55[1] = v53;
    v55[2] = v8;
    goto LABEL_23;
  }
  v8 = sqlite3_changes(*(sqlite3 **)(v8 + 24));
  sqlite3_finalize(v27);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
  v37 = Logger.logObject.getter();
  v38 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v37, v38))
  {
    v39 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v39 = 67109120;
    LODWORD(v61[0]) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v37, v38, "ResponseCache : Successfully purged %d expired entries", v39, 8u);
    v35 = v58;
    MEMORY[0x1C3BBFF64](v39, -1, -1);
  }

  if ((v8 & 0x80000000) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 192))(a1, a2, v59, v8);
    if (one-time initialization token for shared == -1)
      goto LABEL_30;
    goto LABEL_37;
  }
LABEL_41:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t ResponseCache.purge(response:reason:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  void *v30;
  _QWORD *v31;
  sqlite3_stmt *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  id v49;
  id v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  id v54;
  uint64_t v55;
  unint64_t v56;
  void (*v57)(uint64_t, uint64_t, char *, uint64_t);
  uint64_t result;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  sqlite3_int64 v63;
  char *v64;
  void *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  sqlite3_stmt *v70[3];

  v3 = v2;
  v70[2] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  v5 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = PommesResponse.requestId.getter();
  v68 = v11;
  v66 = v10;
  PommesResponse.pommesCandidateId.getter();
  PommesResponse.searchRequestUtterance.getter();
  PommesResponse.sharedUserId.getter();
  v13 = v12;
  v14 = String.hashValue.getter();
  if (AFSupportsMultiUser())
  {
    if (v13)
    {
      v15 = String.hashValue.getter();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v63 = v15 ^ v14;
      goto LABEL_7;
    }
    v63 = v14;
  }
  else
  {
    v63 = v14;
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_7:
  v16 = *(_QWORD *)(v3 + 16);
  v17 = v67;
  v18 = v68;
  v19 = (uint64_t)v66;
  v20 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v16 + 176))(v67, v68, v66, a2);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 128))(v20) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v16 + 184))(v17, v18, v19, 1);
    swift_bridgeObjectRelease();
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    swift_allocError();
    *v31 = 0;
    v31[1] = 0;
    v31[2] = 4;
    swift_willThrow();
LABEL_39:
    outlined destroy of MediaUserStateCenter?(v19, &demangling cache variable for type metadata for PommesCandidateId?);
    return v3;
  }
  v21 = v16;
  Date.init()();
  v22 = &v7[v5[5]];
  *(_QWORD *)v22 = "SiriInformationSearch/ResponseCache.swift";
  *((_QWORD *)v22 + 1) = 41;
  v22[16] = 2;
  *(_QWORD *)&v7[v5[6]] = 461;
  v23 = &v7[v5[7]];
  *(_QWORD *)v23 = "purge(response:reason:)";
  *((_QWORD *)v23 + 1) = 23;
  v23[16] = 2;
  v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001FLL);
  v25 = v5[8];
  v64 = v7;
  v26 = (uint64_t *)&v7[v25];
  *v26 = v24;
  v26[1] = v27;
  v70[0] = 0;
  v70[1] = (sqlite3_stmt *)0xE000000000000000;
  _StringGuts.grow(_:)(32);
  swift_bridgeObjectRelease();
  v70[0] = 0;
  v28 = swift_retain();
  v29 = v65;
  specialized static ResponseCache.sqlite_run(closure:)(v28, 0xD000000000000033, 0x80000001C2506C00, v70);
  v30 = v29;
  if (v29)
  {
    swift_release();
LABEL_30:
    v40 = (uint64_t)v64;
LABEL_31:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v48 = type metadata accessor for Logger();
    __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
    v49 = v30;
    v50 = v30;
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v3 = swift_slowAlloc();
      v70[0] = (sqlite3_stmt *)v3;
      *(_DWORD *)v53 = 136315394;
      v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x65736E6F70736572, 0xE800000000000000, (uint64_t *)v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v53 + 12) = 2080;
      v69 = (uint64_t)v30;
      v54 = v30;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v55 = String.init<A>(describing:)();
      v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, (uint64_t *)v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v40 = (uint64_t)v64;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v51, v52, "ResponseCache : DELETE FROM WHERE %s failed : %s", (uint8_t *)v53, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v3, -1, -1);
      MEMORY[0x1C3BBFF64](v53, -1, -1);
    }
    else
    {

    }
    v57 = *(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v21 + 184);
    v19 = (uint64_t)v66;
    v57(v67, v68, v66, 2);
    swift_bridgeObjectRelease();
    swift_willThrow();
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v40, 0);
    outlined destroy of PerformanceUtil.Ticket(v40);
    goto LABEL_39;
  }
  swift_release();
  v32 = v70[0];
  v33 = 1;
  v34 = sqlite3_bind_int64(v70[0], 1, v63);
  if (v34)
  {
    v35 = v34;
    if (v34 == 100)
    {
      v36 = 0;
      v37 = 0;
      goto LABEL_29;
    }
    if (v34 == 101)
    {
      v36 = 0;
      v37 = 0;
      v33 = 2;
LABEL_29:
      lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
      v30 = (void *)swift_allocError();
      *v47 = v36;
      v47[1] = v37;
      v47[2] = v33;
      swift_willThrow();
      sqlite3_finalize(v70[0]);
      goto LABEL_30;
    }
    if (sqlite3_errstr(v34))
    {
      v37 = String.init(cString:)();
      v33 = v46;
      v36 = v35;
      goto LABEL_29;
    }
    __break(1u);
    goto LABEL_47;
  }
  v38 = sqlite3_step(v32);
  v39 = v38;
  v40 = (uint64_t)v64;
  if (!v38)
  {
    v59 = 0;
    v60 = 0;
    goto LABEL_45;
  }
  if (v38 == 100)
  {
    v39 = 0;
    v59 = 0;
    v60 = 1;
    goto LABEL_45;
  }
  if (v38 != 101)
  {
    if (!sqlite3_errstr(v38))
    {
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    v59 = String.init(cString:)();
    v60 = v61;
LABEL_45:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    v30 = (void *)swift_allocError();
    *v62 = v39;
    v62[1] = v59;
    v62[2] = v60;
    swift_willThrow();
    sqlite3_finalize(v70[0]);
    goto LABEL_31;
  }
  v3 = sqlite3_changes(*(sqlite3 **)(v3 + 24));
  sqlite3_finalize(v32);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v41 = type metadata accessor for Logger();
  __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
  v42 = Logger.logObject.getter();
  v43 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v42, v43))
  {
    v44 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v44 = 67109120;
    v40 = (uint64_t)v64;
    LODWORD(v70[0]) = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v42, v43, "ResponseCache : Successfully purged response with %d entries deleted", v44, 8u);
    MEMORY[0x1C3BBFF64](v44, -1, -1);
  }

  v45 = (uint64_t)v66;
  if ((v3 & 0x80000000) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v21 + 192))(v67, v68, v66, v3);
    swift_bridgeObjectRelease();
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v40, 0);
    outlined destroy of PerformanceUtil.Ticket(v40);
    outlined destroy of MediaUserStateCenter?(v45, &demangling cache variable for type metadata for PommesCandidateId?);
    return v3;
  }
LABEL_48:
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)(uint64_t a1)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t);
  id v8;
  id v9;
  uint64_t v10;
  id v12;
  NSURL *v13;

  v13 = (NSURL *)*MEMORY[0x1E0C80C00];
  URL._bridgeToObjectiveC()(v13);
  v3 = v2;
  v12 = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_fileHandleForReadingFromURL_error_, v2, &v12);

  v5 = v12;
  if (v4)
  {
    v6 = type metadata accessor for URL();
    v7 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8);
    v8 = v5;
    v7(a1, v6);
  }
  else
  {
    v9 = v12;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    v10 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(a1, v10);
  }
  return v4;
}

uint64_t closure #1 in ResponseCache.markPurgeable(_:)(void *a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t inited;
  uint64_t v12;
  uint64_t v13;
  uint64_t *boxed_opaque_existential_1;
  id v15;
  void *v16;
  Class isa;
  id v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;

  result = ffsctl(a2, 0xC0084A44uLL, a1, 0);
  if ((_DWORD)result)
  {
    v7 = result;
    v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v10 = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C24FA1B0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(inited + 40) = v12;
    v13 = type metadata accessor for URL();
    *(_QWORD *)(inited + 72) = v13;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(boxed_opaque_existential_1, a3, v13);
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    v15 = objc_allocWithZone(MEMORY[0x1E0CB35C8]);
    v16 = (void *)MEMORY[0x1C3BBEC44](v8, v10);
    swift_bridgeObjectRelease();
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v18 = objc_msgSend(v15, sel_initWithDomain_code_userInfo_, v16, v7, isa);

    if (one-time initialization token for pommes != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v22 = 67109120;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v20, v21, "ResponseCache : Unable to mark cache as purgeable error=%d", v22, 8u);
      MEMORY[0x1C3BBFF64](v22, -1, -1);
    }

    result = swift_willThrow();
    *a4 = v18;
  }
  return result;
}

const char *ResponseCache.createTables()()
{
  void *v0;
  void *v1;
  Swift::String v2;
  Swift::String v3;
  Swift::String v4;
  Swift::String v5;
  Swift::String v6;
  Swift::String v7;
  Swift::String v8;
  Swift::String v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  sqlite3_stmt *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  const char *result;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  sqlite3_stmt *pStmt[3];

  v1 = v0;
  pStmt[2] = *(sqlite3_stmt **)MEMORY[0x1E0C80C00];
  pStmt[1] = (sqlite3_stmt *)0xE000000000000000;
  _StringGuts.grow(_:)(159);
  v2._countAndFlagsBits = 0xD00000000000001CLL;
  v2._object = (void *)0x80000001C2506CA0;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x6361437972657571;
  v3._object = (void *)0xEA00000000006568;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x220A282022;
  v4._object = (void *)0xE500000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = 0x636E617265747475;
  v5._object = (void *)0xED00006873614865;
  String.append(_:)(v5);
  v6._countAndFlagsBits = 0xD000000000000021;
  v6._object = (void *)0x80000001C2506CC0;
  String.append(_:)(v6);
  v7._countAndFlagsBits = 0x636E617265747475;
  v7._object = (void *)0xE900000000000065;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0xD000000000000015;
  v8._object = (void *)0x80000001C2506CF0;
  String.append(_:)(v8);
  v9._countAndFlagsBits = 0x6E69616D6F64;
  v9._object = (void *)0xE600000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 0xD000000000000015;
  v10._object = (void *)0x80000001C2506CF0;
  String.append(_:)(v10);
  v11._countAndFlagsBits = 0x65736E6F70736572;
  v11._object = (void *)0xE800000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 0xD000000000000012;
  v12._object = (void *)0x80000001C2506D10;
  String.append(_:)(v12);
  v13._object = (void *)0xEA00000000006E6FLL;
  v13._countAndFlagsBits = 0x6974617269707865;
  String.append(_:)(v13);
  v14._object = (void *)0x80000001C2506D30;
  v14._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v14);
  pStmt[0] = 0;
  v15 = swift_retain();
  specialized static ResponseCache.sqlite_run(closure:)(v15, 0, 0xE000000000000000, pStmt);
  if (v0)
  {
    swift_release();
    swift_bridgeObjectRelease();
LABEL_16:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v30 = v1;
    v31 = v1;
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v35 = swift_slowAlloc();
      v39 = v35;
      *(_DWORD *)v34 = 136315138;
      v36 = v1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v37 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v32, v33, "ResponseCache : CREATE TABLE failed : %s", v34, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v35, -1, -1);
      MEMORY[0x1C3BBFF64](v34, -1, -1);
    }
    else
    {

    }
    return (const char *)swift_willThrow();
  }
  swift_release();
  swift_bridgeObjectRelease();
  v16 = pStmt[0];
  v17 = sqlite3_step(pStmt[0]);
  v18 = v17;
  if (!v17)
  {
    v25 = v17;
    v26 = v17;
LABEL_15:
    lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
    v1 = (void *)swift_allocError();
    *v28 = v18;
    v28[1] = v25;
    v28[2] = v26;
    swift_willThrow();
    sqlite3_finalize(pStmt[0]);
    goto LABEL_16;
  }
  if (v17 == 100)
  {
    v18 = 0;
    v25 = 0;
    v26 = 1;
    goto LABEL_15;
  }
  if (v17 != 101)
  {
    result = sqlite3_errstr(v17);
    if (!result)
    {
      __break(1u);
      return result;
    }
    v25 = String.init(cString:)();
    v26 = v27;
    goto LABEL_15;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v20, v21))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v39 = v23;
    *(_DWORD *)v22 = 136315138;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0x6361437972657571, 0xEA00000000006568, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v20, v21, "ResponseCache : Table created : \"%s\"", v22, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v23, -1, -1);
    MEMORY[0x1C3BBFF64](v22, -1, -1);
  }

  return (const char *)sqlite3_finalize(v16);
}

void specialized ResponseCache.markPurgeable(_:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  unsigned int (*v18)(char *, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  unint64_t v24;
  uint64_t v25;
  id v26;
  void *v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  uint64_t v42[2];

  v42[1] = *MEMORY[0x1E0C80C00];
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v40 = (uint64_t)&v38 - v8;
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v38 - v9;
  v11 = type metadata accessor for URL();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v38 - v16;
  outlined init with copy of URL?(a1, (uint64_t)v10);
  v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  if (v18(v10, 1, v11) == 1)
  {
    v39 = v12;
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for URL?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    v20 = v40;
    outlined init with copy of URL?(a1, v40);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v42[0] = v38;
      *(_DWORD *)v23 = 136315138;
      outlined init with copy of URL?(v20, (uint64_t)v6);
      if (v18(v6, 1, v11) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for URL?);
        v24 = 0xE600000000000000;
        v25 = 0x3E656E6F6E3CLL;
      }
      else
      {
        v25 = URL.path.getter();
        v24 = v29;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v6, v11);
      }
      v41 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v24, v42);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      outlined destroy of MediaUserStateCenter?(v20, &demangling cache variable for type metadata for URL?);
      _os_log_impl(&dword_1C2356000, v21, v22, "ResponseCache : Unable to mark %s purgeable because no file path exists", v23, 0xCu);
      v30 = v38;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v30, -1, -1);
      MEMORY[0x1C3BBFF64](v23, -1, -1);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?(v20, &demangling cache variable for type metadata for URL?);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
    type metadata accessor for NSFileHandle();
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v17, v11);
    v26 = @nonobjc NSFileHandle.__allocating_init(forReadingFrom:)((uint64_t)v15);
    if (!v1)
    {
      v27 = v26;
      v28 = objc_msgSend(v26, sel_fileDescriptor);
      v42[0] = 65541;
      closure #1 in ResponseCache.markPurgeable(_:)(v42, v28, (uint64_t)v17, &v41);
      v41 = 0;
      if ((objc_msgSend(v27, sel_closeAndReturnError_, &v41) & 1) != 0)
      {
        v31 = one-time initialization token for pommes;
        v32 = v41;
        if (v31 != -1)
          swift_once();
        v33 = type metadata accessor for Logger();
        __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
        v34 = Logger.logObject.getter();
        v35 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v34, v35))
        {
          v36 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v36 = 0;
          _os_log_impl(&dword_1C2356000, v34, v35, "ResponseCache : Database marked purgeable", v36, 2u);
          MEMORY[0x1C3BBFF64](v36, -1, -1);
        }

      }
      else
      {
        v37 = v41;
        _convertNSErrorToError(_:)();

        swift_willThrow();
      }

    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v17, v11);
  }
}

unint64_t lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type ResponseCache.DBError and conformance ResponseCache.DBError;
  if (!lazy protocol witness table cache variable for type ResponseCache.DBError and conformance ResponseCache.DBError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for ResponseCache.DBError, &type metadata for ResponseCache.DBError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResponseCache.DBError and conformance ResponseCache.DBError);
  }
  return result;
}

uint64_t specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, uint64_t a2, sqlite3 **a3, int a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v6 = String.utf8CString.getter();
  LODWORD(v7) = sqlite3_open_v2((const char *)(v6 + 32), a3, a4, 0);
  result = swift_release();
  switch((_DWORD)v7)
  {
    case 0x65:
      v7 = 0;
      v9 = 0;
      v11 = 2;
      break;
    case 0x64:
      v7 = 0;
      v9 = 0;
      v11 = 1;
      break;
    case 0:
      return result;
    default:
      result = (uint64_t)sqlite3_errstr(v7);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v9 = String.init(cString:)();
      v11 = v10;
      v7 = v7;
      break;
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  *v12 = v7;
  v12[1] = v9;
  v12[2] = v11;
  return swift_willThrow();
}

id specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)()
{
  void *v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  isa = Data._bridgeToObjectiveC()().super.isa;
  v6[0] = 0;
  v2 = objc_msgSend(v0, sel_initForReadingFromData_error_, isa, v6);

  if (v2)
  {
    v3 = v6[0];
  }
  else
  {
    v4 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v2;
}

uint64_t specialized ResponseCache.hydratePommesResponse(response:pommesSearchRequest:componentsWarmedUp:)(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  id v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_allocWithZone(MEMORY[0x1E0CB3710]);
  outlined copy of Data._Representation(a1, a2);
  v8 = specialized @nonobjc NSKeyedUnarchiver.init(forReadingFrom:)();
  outlined consume of Data._Representation(a1, a2);
  if (!v8)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1C2356000, v10, v11, "ResponseCache : Failed to hydrate POMMES response : nil unarchiver", v12, 2u);
      MEMORY[0x1C3BBFF64](v12, -1, -1);
    }
    goto LABEL_6;
  }
  type metadata accessor for PommesResponse();
  type metadata accessor for PommesSearchRequest(0);
  swift_bridgeObjectRetain();
  v10 = v8;
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v6);
  v15 = type metadata accessor for PommesCandidateId();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v6, 0, 1, v15);
  swift_bridgeObjectRetain();
  v16 = PommesResponse.__allocating_init(cachingCoder:requestId:pommesCandidateId:componentsWarmedUp:)();
  if (!v16)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1C2356000, v22, v23, "ResponseCache : Failed to instantiate PommesResponse from cachingCoder", v24, 2u);
      MEMORY[0x1C3BBFF64](v24, -1, -1);

      return 0;
    }

LABEL_6:
    return 0;
  }
  v13 = v16;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1C2356000, v18, v19, "ResponseCache : Successfully hydrated response", v20, 2u);
    MEMORY[0x1C3BBFF64](v20, -1, -1);

  }
  else
  {

  }
  return v13;
}

void specialized closure #5 in ResponseCache.store(response:expiration:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_1C24666C0()
{
  uint64_t v0;
  sqlite3_stmt **v1;
  uint64_t v2;
  sqlite3_stmt *v3;
  uint64_t v5;
  __int16 v6;
  char v7;
  char v8;
  char v9;
  char v10;

  v5 = v0;
  v6 = v2;
  v7 = BYTE2(v2);
  v8 = BYTE3(v2);
  v9 = BYTE4(v2);
  v10 = BYTE5(v2);
  v3 = *v1;
  if (one-time initialization token for sqliteTransient != -1)
    swift_once();
  return sqlite3_bind_blob(v3, 4, &v5, BYTE6(v2), (void (__cdecl *)(void *))static ResponseCache.sqliteTransient);
}

void specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  specialized closure #5 in ResponseCache.store(response:expiration:)(a1, a2);
  if (v2 == 101)
  {
    v3 = 0;
    v4 = 0;
    v6 = 2;
  }
  else
  {
    LODWORD(v3) = v2;
    if (v2 == 100)
    {
      v3 = 0;
      v4 = 0;
      v6 = 1;
    }
    else
    {
      if (!v2)
        return;
      if (!sqlite3_errstr(v2))
      {
        __break(1u);
        return;
      }
      v4 = String.init(cString:)();
      v6 = v5;
      v3 = v3;
    }
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  *v7 = v3;
  v7[1] = v4;
  v7[2] = v6;
  swift_willThrow();
}

uint64_t specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, uint64_t a2, sqlite3 **a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = String.utf8CString.getter();
  LODWORD(v5) = sqlite3_open_v2((const char *)(v4 + 32), a3, 2, 0);
  result = swift_release();
  switch((_DWORD)v5)
  {
    case 0x65:
      v5 = 0;
      v7 = 0;
      v9 = 2;
      break;
    case 0x64:
      v5 = 0;
      v7 = 0;
      v9 = 1;
      break;
    case 0:
      return result;
    default:
      result = (uint64_t)sqlite3_errstr(v5);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v7 = String.init(cString:)();
      v9 = v8;
      v5 = v5;
      break;
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  *v10 = v5;
  v10[1] = v7;
  v10[2] = v9;
  return swift_willThrow();
}

uint64_t specialized static ResponseCache.sqlite_run(closure:)(uint64_t a1, uint64_t a2, uint64_t a3, sqlite3_stmt **a4)
{
  sqlite3 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v5 = *(sqlite3 **)(a1 + 24);
  v6 = String.utf8CString.getter();
  LODWORD(v7) = sqlite3_prepare_v2(v5, (const char *)(v6 + 32), -1, a4, 0);
  result = swift_release();
  switch((_DWORD)v7)
  {
    case 0x65:
      v7 = 0;
      v9 = 0;
      v11 = 2;
      break;
    case 0x64:
      v7 = 0;
      v9 = 0;
      v11 = 1;
      break;
    case 0:
      return result;
    default:
      result = (uint64_t)sqlite3_errstr(v7);
      if (!result)
      {
        __break(1u);
        return result;
      }
      v9 = String.init(cString:)();
      v11 = v10;
      v7 = v7;
      break;
  }
  lazy protocol witness table accessor for type ResponseCache.DBError and conformance ResponseCache.DBError();
  swift_allocError();
  *v12 = v7;
  v12[1] = v9;
  v12[2] = v11;
  return swift_willThrow();
}

uint64_t type metadata accessor for ResponseCache()
{
  return objc_opt_self();
}

uint64_t method lookup function for ResponseCache()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ResponseCache.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of ResponseCache.isOpen.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ResponseCache.open(directoryPath:flags:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ResponseCache.close()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of ResponseCache.store(response:expiration:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))() & 1;
}

uint64_t dispatch thunk of ResponseCache.fetchResponse(with:domainWarmup:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of ResponseCache.delete(path:requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of ResponseCache.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of ResponseCache.purge(response:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

unint64_t destroy for ResponseCache.DBError(uint64_t a1)
{
  unint64_t result;

  result = *(_QWORD *)(a1 + 16);
  if (result >= 0xFFFFFFFF)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ResponseCache.DBError(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 16);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 16) = v3;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t assignWithCopy for ResponseCache.DBError(uint64_t a1, __int128 *a2)
{
  unint64_t v4;
  __int128 v5;

  v4 = *((_QWORD *)a2 + 2);
  if (*(_QWORD *)(a1 + 16) < 0xFFFFFFFFuLL)
  {
    if (v4 >= 0xFFFFFFFF)
    {
      *(_DWORD *)a1 = *(_DWORD *)a2;
      *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_7:
    v5 = *a2;
    *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)a1 = v5;
    return a1;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *((_QWORD *)a2 + 1);
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ResponseCache.DBError(uint64_t a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a1 + 16) < 0xFFFFFFFFuLL)
    goto LABEL_5;
  v4 = *(_QWORD *)(a2 + 16);
  if (v4 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    return a1;
  }
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResponseCache.DBError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unsigned int v4;
  unsigned int v5;

  if (!a2)
    return 0;
  if (a2 > 0x7FFFFFF9 && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 2147483642);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 + 1;
  v5 = v3 - 5;
  if (v4 >= 7)
    return v5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for ResponseCache.DBError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFA)
  {
    *(_QWORD *)result = 0;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_DWORD *)result = a2 - 2147483642;
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFA)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2 + 5;
  }
  return result;
}

uint64_t getEnumTag for ResponseCache.DBError(uint64_t a1)
{
  unint64_t v1;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for ResponseCache.DBError(_QWORD *result, int a2)
{
  if (a2 < 0)
  {
    result[1] = 0;
    result[2] = 0;
    *result = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    result[2] = (a2 - 1);
  }
  return result;
}

ValueMetadata *type metadata accessor for ResponseCache.DBError()
{
  return &type metadata for ResponseCache.DBError;
}

uint64_t outlined init with copy of URL?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for NSFileHandle()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSFileHandle;
  if (!lazy cache variable for type metadata for NSFileHandle)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileHandle);
  }
  return result;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  return result;
}

id ProfileSliceResolutionRequestInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void ProfileSliceResolutionRequestInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

void (*ProfileSliceResolutionRequestInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = ProfileSliceResolutionRequestInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.init(analyticsComponentIdGenerator:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestStarted(requestId:pommesCandidateId:profileSliceLabel:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  void *v13;
  id v14;
  void *v15;
  id v16;
  void *v17;
  unint64_t v18;
  id v19;
  Class isa;
  id v21;
  void *v22;
  id v23;
  char v24;
  id v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  void *v30;
  uint64_t result;
  uint64_t v32;

  v4 = v3;
  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (!v12)
    goto LABEL_11;
  v13 = (void *)v12;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2D0]), sel_init);
  if (!v14)
  {
    v15 = v13;
LABEL_10:

LABEL_11:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1C2356000, v27, v28, "Unable to log ProfileSliceResolutionRequestStarted event", v29, 2u);
      MEMORY[0x1C3BBFF64](v29, -1, -1);
    }

    return 0;
  }
  v15 = v14;
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2E8]), sel_init);
  if (!v16)
  {

    goto LABEL_10;
  }
  v17 = v16;
  v18 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
  if ((v18 & 0x8000000000000000) == 0 && !HIDWORD(v18))
  {
    objc_msgSend(v17, sel_setSliceLabel_, v18);
    UUID.init()();
    v19 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v21 = objc_msgSend(v19, sel_initWithNSUUID_, isa);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    objc_msgSend(v15, sel_setContextId_, v21);
    objc_msgSend(v15, sel_setStartedOrChanged_, v17);
    objc_msgSend(v13, sel_setProfileResolutionRequestContext_, v15);
    v22 = (void *)objc_opt_self();
    swift_retain();
    v23 = objc_msgSend(v22, sel_processInfo);
    v24 = NSProcessInfo.isRunningUnitTests.getter();

    if ((v24 & 1) != 0)
      v25 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v4 + 96))();
    else
      v25 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
    v30 = v25;
    swift_release();
    objc_msgSend(v30, sel_emitMessage_, v13);

    swift_unknownObjectRelease();
    return (uint64_t)v21;
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestEnded(requestId:pommesCandidateId:contextId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *oslog;

  v5 = v4;
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v7)
  {
    v8 = (void *)v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2D0]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2D8]), sel_init);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setExists_, 1);
        objc_msgSend(v10, sel_setContextId_, a4);
        objc_msgSend(v10, sel_setEnded_, v12);
        objc_msgSend(v8, sel_setProfileResolutionRequestContext_, v10);
        v13 = (void *)objc_opt_self();
        swift_retain();
        v14 = objc_msgSend(v13, sel_processInfo);
        v15 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v15 & 1) != 0)
          v16 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 96))();
        else
          v16 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v18, "Unable to log ProfileSliceResolutionRequestEnded event", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

}

void ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestFailed(requestId:pommesCandidateId:contextId:failedReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  char v17;
  id v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  NSObject *oslog;

  v6 = v5;
  v9 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v9)
  {
    v10 = (void *)v9;
    v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2D0]), sel_init);
    if (v11)
    {
      v12 = v11;
      v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2E0]), sel_init);
      if (v13)
      {
        v14 = v13;
        objc_msgSend(v13, sel_setReason_, a5);
        objc_msgSend(v12, sel_setContextId_, a4);
        objc_msgSend(v12, sel_setFailed_, v14);
        objc_msgSend(v10, sel_setProfileResolutionRequestContext_, v12);
        v15 = (void *)objc_opt_self();
        swift_retain();
        v16 = objc_msgSend(v15, sel_processInfo);
        v17 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v17 & 1) != 0)
          v18 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v6 + 96))();
        else
          v18 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v22 = v18;
        swift_release();
        objc_msgSend(v22, sel_emitMessage_, v10);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v12 = v10;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v20, "Unable to log ProfileSliceResolutionRequestFailed event", v21, 2u);
    MEMORY[0x1C3BBFF64](v21, -1, -1);
  }

}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t ProfileSliceResolutionRequestInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t sub_1C2467A00@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C2467A30(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for ProfileSliceResolutionRequestInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.mockStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.mockStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.__allocating_init(analyticsComponentIdGenerator:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestStarted(requestId:pommesCandidateId:profileSliceLabel:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestEnded(requestId:pommesCandidateId:contextId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of ProfileSliceResolutionRequestInstrumentationUtil.logProfileSliceResolutionRequestFailed(requestId:pommesCandidateId:contextId:failedReason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

ValueMetadata *type metadata accessor for ParsecAlias()
{
  return &type metadata for ParsecAlias;
}

uint64_t AnalyticsComponentIdGenerator.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t AnalyticsComponentIdGenerator.init()()
{
  uint64_t v0;

  return v0;
}

uint64_t AnalyticsComponentIdGenerator.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t method lookup function for AnalyticsComponentIdGenerator()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnalyticsComponentIdGenerator.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 80))();
}

uint64_t dispatch thunk of AnalyticsComponentIdGenerator.derivedIdentifier(for:from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

id MockEmittableSiriAnalyticsMessageStream.__allocating_init()()
{
  objc_class *v0;

  return objc_msgSend(objc_allocWithZone(v0), sel_init);
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emittedMessages.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emittedMessages.setter(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;

  v3 = (_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_emittedMessages);
  swift_beginAccess();
  *v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*MockEmittableSiriAnalyticsMessageStream.emittedMessages.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)(void *a1)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v11[6];

  v3 = *(NSObject **)&v1[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:);
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v11[5] = v5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_14;
  v6 = _Block_copy(v11);
  v7 = v1;
  v8 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t sub_1C2467D60()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t sub_1C2467D8C()
{
  return swift_deallocObject();
}

uint64_t closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)(_QWORD *a1, void *a2)
{
  uint64_t (*v2)(_BYTE *);
  id v3;
  uint64_t (*v4)(_BYTE *, _QWORD);
  _QWORD *v5;
  _QWORD *v6;
  _BYTE v8[32];

  v2 = *(uint64_t (**)(_BYTE *))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x70);
  v3 = a2;
  v4 = (uint64_t (*)(_BYTE *, _QWORD))v2(v8);
  v6 = v5;
  MEMORY[0x1C3BBEE78]();
  if (*(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  specialized Array._endMutation()();
  return v4(v8, 0);
}

uint64_t MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)()
{
  uint64_t v1;

  type metadata accessor for Array();
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & *a1) + 0x60))();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SISchemaTopLevelUnionType]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](&lazy protocol witness table cache variable for type [SISchemaTopLevelUnionType] and conformance [A], &demangling cache variable for type metadata for [SISchemaTopLevelUnionType]);
  v3 = Sequence.compactMap<A>(_:)();
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t closure #1 in closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  id v6;
  int v7;

  v5 = *a1;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SISchemaTopLevelUnionType);
  v6 = v5;
  v7 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 56))(a3, v7 ^ 1u, 1, a2);
}

Swift::Void __swiftcall MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages()()
{
  char *v0;
  NSObject *v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char *v5;
  char isEscapingClosureAtFileLocation;
  _QWORD v7[6];

  v1 = *(NSObject **)&v0[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue];
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = v0;
  v3 = swift_allocObject();
  *(_QWORD *)(v3 + 16) = partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages();
  *(_QWORD *)(v3 + 24) = v2;
  v7[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v7[5] = v3;
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_13_0;
  v4 = _Block_copy(v7);
  v5 = v0;
  swift_retain();
  swift_release();
  dispatch_sync(v1, v4);
  _Block_release(v4);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
}

id MockEmittableSiriAnalyticsMessageStream.init()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  objc_class *v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  objc_super v18;
  uint64_t v19;

  v1 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v16 = *(_QWORD *)(v1 - 8);
  v17 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v14 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v5);
  v6 = type metadata accessor for DispatchQoS.QoSClass();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF540], v6);
  v10 = v0;
  v14[0] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  static DispatchQoS.unspecified.getter();
  v11 = MEMORY[0x1E0DEE9D8];
  v19 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v3, *MEMORY[0x1E0DEF8D0], v17);
  *(_QWORD *)(v14[1] + v15) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_QWORD *)&v10[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_emittedMessages] = v11;

  v12 = (objc_class *)type metadata accessor for MockEmittableSiriAnalyticsMessageStream();
  v18.receiver = v10;
  v18.super_class = v12;
  return objc_msgSendSuper2(&v18, sel_init);
}

id MockEmittableSiriAnalyticsMessageStream.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t specialized MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:)(void *a1)
{
  char *v1;
  NSObject *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  char *v7;
  id v8;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  _QWORD v11[6];

  v3 = *(NSObject **)&v1[OBJC_IVAR____TtC21SiriInformationSearch39MockEmittableSiriAnalyticsMessageStream_queue];
  v4 = swift_allocObject();
  *(_QWORD *)(v4 + 16) = v1;
  *(_QWORD *)(v4 + 24) = a1;
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 16) = partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:);
  *(_QWORD *)(v5 + 24) = v4;
  v11[4] = thunk for @callee_guaranteed () -> ()partial apply;
  v11[5] = v5;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1107296256;
  v11[2] = thunk for @escaping @callee_guaranteed () -> ();
  v11[3] = &block_descriptor_24;
  v6 = _Block_copy(v11);
  v7 = v1;
  v8 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v3, v6);
  _Block_release(v6);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
    __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)(*(_QWORD **)(v1 + 24), a1);
}

uint64_t sub_1C2468718()
{
  uint64_t v0;

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages()()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x68))(MEMORY[0x1E0DEE9D8]);
}

uint64_t sub_1C246877C()
{
  return swift_deallocObject();
}

uint64_t type metadata accessor for MockEmittableSiriAnalyticsMessageStream()
{
  return objc_opt_self();
}

uint64_t sub_1C24687AC@<X0>(_QWORD **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **a1) + 0x60))();
  *a2 = result;
  return result;
}

uint64_t sub_1C24687EC(uint64_t a1, _QWORD **a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & **a2) + 0x68);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for MockEmittableSiriAnalyticsMessageStream()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages.getter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x60))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages.setter()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x68))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages.modify()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x70))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x78))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x80))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.resolvePartialMessage(_:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x88))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.resolvePartialMessage(_:timestamp:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x90))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.enqueueLargeMessageObject(fromPath:assetIdentifier:messageMetadata:completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0x98))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.barrier(completion:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA0))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xA8))();
}

uint64_t dispatch thunk of MockEmittableSiriAnalyticsMessageStream.clearEmittedMessages()()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & *v0) + 0xB0))();
}

uint64_t partial apply for closure #1 in closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in MockEmittableSiriAnalyticsMessageStream.emittedMessages<A>(ofType:)(a1, *(_QWORD *)(v2 + 16), a2);
}

uint64_t partial apply for closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:timestamp:)()
{
  uint64_t v0;

  return closure #1 in MockEmittableSiriAnalyticsMessageStream.emitMessage(_:)(*(_QWORD **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_1C246899C()
{
  return swift_deallocObject();
}

uint64_t SageSearch.remoteSearchClient.getter()
{
  return swift_retain();
}

uint64_t SageSearch.__allocating_init()()
{
  uint64_t v0;

  v0 = swift_allocObject();
  SageSearch.init()();
  return v0;
}

uint64_t SageSearch.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  id v8;
  char v9;
  ValueMetadata *v10;
  unint64_t v11;
  id v12;
  id v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t);
  uint64_t v17;
  __int128 v19;
  ValueMetadata *v20;
  unint64_t v21;

  v1 = v0;
  type metadata accessor for PegasusProxyForIntelligenceFlow();
  v2 = static PegasusProxyForIntelligenceFlow.shared.getter();
  if (one-time initialization token for shared != -1)
    swift_once();
  v3 = (void *)static PommesLocationManager.shared;
  type metadata accessor for SiriEnvironment();
  v4 = v3;
  static SiriEnvironment.default.getter();
  v5 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  type metadata accessor for AnalyticsComponentIdGenerator();
  v6 = swift_allocObject();
  type metadata accessor for PegasusInstrumentationUtil();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v6;
  v8 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v9 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v9 & 1) != 0)
  {
    v10 = &type metadata for EmptyReferenceResolver;
    v11 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    v10 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *(_QWORD *)&v19 = ReferenceResolutionClient.__allocating_init()();
    v11 = MEMORY[0x1E0DA3CC8];
  }
  v20 = v10;
  v21 = v11;
  v12 = default argument 5 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)();
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
  type metadata accessor for SagePegasusProxy();
  v14 = swift_allocObject();
  v15 = specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(v2, (uint64_t)v4, v5, v7, &v19, (uint64_t)v12, (uint64_t)v13, v14);
  *(_QWORD *)(v1 + 16) = v15;
  v16 = *(void (**)(uint64_t))(*(_QWORD *)v15 + 336);
  v17 = swift_retain();
  v16(v17);
  swift_release();
  return v1;
}

BOOL static SageSearch.SageSearchError.SageSearchErrorType.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

void SageSearch.SageSearchError.SageSearchErrorType.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int SageSearch.SageSearchError.SageSearchErrorType.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void SageSearch.SageSearchError.error.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t SageSearch.SageSearchError.debugMessage.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 8);
  swift_bridgeObjectRetain();
  return v1;
}

SiriInformationSearch::SageSearch::SageSearchError __swiftcall SageSearch.SageSearchError.init(error:debugMessage:)(SiriInformationSearch::SageSearch::SageSearchError::SageSearchErrorType error, Swift::String_optional debugMessage)
{
  uint64_t v2;
  SiriInformationSearch::SageSearch::SageSearchError result;

  *(_BYTE *)v2 = *(_BYTE *)error;
  *(Swift::String_optional *)(v2 + 8) = debugMessage;
  result.debugMessage = debugMessage;
  result.error = error;
  return result;
}

uint64_t SageSearch.search(query:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v2 + 104))(a1, a2, 0);
}

uint64_t SageSearch.search(query:location:)()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for sage != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.sage);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C2356000, v1, v2, "The deprecated search API was called. Pegasus response is always nil.", v3, 2u);
    MEMORY[0x1C3BBFF64](v3, -1, -1);
  }

  return 0;
}

uint64_t SageSearch.search(query:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, _QWORD, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, _QWORD, uint64_t))(**(int **)(*(_QWORD *)v3 + 120)
                                                                  + *(_QWORD *)(*(_QWORD *)v3 + 120));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = SageSearch.search(query:location:);
  return v10(a1, a2, MEMORY[0x1E0DEE9D8], a3);
}

uint64_t SageSearch.search(query:location:)(uint64_t a1)
{
  void *v1;
  uint64_t *v2;
  uint64_t v4;

  v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {

    a1 = 0;
  }
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t SageSearch.search(query:clientEntities:location:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  v5[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v5[9] = swift_task_alloc();
  type metadata accessor for PommesSearchRequest(0);
  v5[10] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  v5[11] = swift_task_alloc();
  v6 = type metadata accessor for UUID();
  v5[12] = v6;
  v5[13] = *(_QWORD *)(v6 - 8);
  v5[14] = swift_task_alloc();
  v5[15] = swift_task_alloc();
  v5[16] = swift_task_alloc();
  v5[17] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SageSearch.search(query:clientEntities:location:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(uint64_t, uint64_t);
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;

  v2 = v0[16];
  v1 = v0[17];
  v4 = v0[14];
  v3 = v0[15];
  v6 = v0[12];
  v5 = v0[13];
  v7 = v0[11];
  v30 = (_QWORD *)v0[10];
  v27 = v0[9];
  v28 = v0[8];
  v26 = v0[4];
  v29 = v0[3];
  UUID.init()();
  v8 = UUID.uuidString.getter();
  v24 = v9;
  v25 = v8;
  v10 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v10(v1, v6);
  UUID.init()();
  v11 = UUID.uuidString.getter();
  v23 = v12;
  v10(v1, v6);
  UUID.init()();
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v13(v3, v2, v6);
  v13(v4, v3, v6);
  v14 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v7, 1, 1, v14);
  type metadata accessor for PommesRequestContext();
  swift_allocObject();
  v15 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v11, v23, v4, v25, v24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, MEMORY[0x1E0DEE9D8], v7, MEMORY[0x1E0DEE9D8]);
  v0[18] = v15;
  v10(v3, v6);
  v10(v2, v6);
  swift_bridgeObjectRetain();
  UUID.init()();
  v16 = UUID.uuidString.getter();
  v18 = v17;
  v10(v1, v6);
  v19 = type metadata accessor for PommesContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v27, 1, 1, v19);
  v20 = type metadata accessor for InputOrigin();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v28, 1, 1, v20);
  swift_retain();
  PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:)(v29, v26, v16, v18, 0, v15, v27, v28, v30, MEMORY[0x1E0DEE9D8], 0);
  v21 = (_QWORD *)swift_task_alloc();
  v0[19] = v21;
  *v21 = v0;
  v21[1] = SageSearch.search(query:clientEntities:location:);
  return SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(v0[10], v0[5], v0[6], 8);
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  _BOOL4 v6;
  void *v7;
  uint64_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;

  if (one-time initialization token for sage != -1)
    swift_once();
  v1 = *(void **)(v0 + 160);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.sage);
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  v6 = os_log_type_enabled(v4, v5);
  v7 = *(void **)(v0 + 160);
  v8 = *(_QWORD *)(v0 + 80);
  if (v6)
  {
    v18 = *(_QWORD *)(v0 + 80);
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v19 = v10;
    *(_DWORD *)v9 = 136315138;
    v11 = dispatch thunk of PommesResponse.experiences.getter();
    v12 = type metadata accessor for Experience();
    v13 = MEMORY[0x1C3BBEE9C](v11, v12);
    v15 = v14;
    swift_bridgeObjectRelease();
    *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v4, v5, "Received experiences:\n%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v10, -1, -1);
    MEMORY[0x1C3BBFF64](v9, -1, -1);

    swift_release();
    v16 = v18;
  }
  else
  {

    swift_release();
    v16 = v8;
  }
  outlined destroy of PommesSearchRequest(v16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 160));
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 80);
  swift_release();
  outlined destroy of PommesSearchRequest(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SageSearch.search(query:clientEntities:location:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 160) = a1;
  *(_QWORD *)(v3 + 168) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v5[6] = a4;
  v5[7] = v4;
  v5[4] = a2;
  v5[5] = a3;
  v5[3] = a1;
  v6 = type metadata accessor for UUID();
  v5[8] = v6;
  v5[9] = *(_QWORD *)(v6 - 8);
  v5[10] = swift_task_alloc();
  v5[11] = type metadata accessor for PommesSearchRequest(0);
  v5[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _QWORD *v18;

  v2 = v0[11];
  v1 = v0[12];
  v4 = v0[3];
  v3 = v0[4];
  v5 = *(_QWORD *)(v0[7] + 16);
  outlined init with copy of PommesSearchRequest(v4, v1);
  type metadata accessor for SageSearchRequestProcessor();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  v6 = specialized SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)(v5, v1, v3);
  v0[13] = v6;
  swift_release();
  v7 = (uint64_t *)(v4 + *(int *)(v2 + 32));
  if (v7[1])
  {
    v8 = *v7;
    v9 = v7[1];
  }
  else
  {
    v11 = v0[9];
    v10 = v0[10];
    v12 = v0[8];
    UUID.init()();
    v8 = UUID.uuidString.getter();
    v9 = v13;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  v14 = v0[5];
  v15 = v0[6];
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v5 + 344);
  swift_bridgeObjectRetain();
  v16(v8, v9, v14);
  swift_bridgeObjectRelease();
  type metadata accessor for PommesResponse();
  v17 = swift_task_alloc();
  v0[14] = v17;
  *(_QWORD *)(v17 + 16) = v6;
  *(_QWORD *)(v17 + 24) = v15;
  v18 = (_QWORD *)swift_task_alloc();
  v0[15] = v18;
  *v18 = v0;
  v18[1] = SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return withThrowingTaskGroup<A, B>(of:returning:isolation:body:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 128) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  swift_release();
  v1 = *(_QWORD *)(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

{
  uint64_t v0;

  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[5] = a3;
  v4[6] = a4;
  v4[3] = a1;
  v4[4] = a2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v4[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t, uint64_t, uint64_t);
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;

  v2 = v0[6];
  v1 = v0[7];
  v3 = v0[5];
  v4 = type metadata accessor for TaskPriority();
  v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56);
  v5(v1, 1, 1, v4);
  v6 = (_QWORD *)swift_allocObject();
  v6[2] = 0;
  v6[3] = 0;
  v6[4] = v3;
  swift_retain();
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF21SiriInformationSearch14PommesResponseC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), (uint64_t)v6);
  outlined destroy of TaskPriority?(v1);
  v5(v1, 1, 1, v4);
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0;
  v7[3] = 0;
  v7[4] = v2;
  _sScg7addTask8priority9operationyScPSg_xyYaKYAcntF21SiriInformationSearch14PommesResponseC_s5Error_pTg5(v1, (uint64_t)&async function pointer to partial apply for closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:), (uint64_t)v7);
  outlined destroy of TaskPriority?(v1);
  v8 = (_QWORD *)swift_task_alloc();
  v0[8] = v8;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ThrowingTaskGroup<PommesResponse, Error>);
  *v8 = v0;
  v8[1] = closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return ThrowingTaskGroup.next(isolation:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(void);
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v1 = *(_QWORD *)(v0 + 16);
  if (v1)
  {
    v2 = *(uint64_t **)(v0 + 32);
    **(_QWORD **)(v0 + 24) = v1;
    v3 = *v2;
    v4 = type metadata accessor for PommesResponse();
    v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1C3BBEFE0](v3, v4, v5, MEMORY[0x1E0DEDB38]);
    swift_task_dealloc();
    v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  else
  {
    if (one-time initialization token for sage != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.sage);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1C2356000, v8, v9, "SageSearch encountered unknown error", v10, 2u);
      MEMORY[0x1C3BBFF64](v10, -1, -1);
    }

    lazy protocol witness table accessor for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError();
    swift_allocError();
    *(_BYTE *)v11 = 1;
    *(_QWORD *)(v11 + 8) = 0xD000000000000024;
    *(_QWORD *)(v11 + 16) = 0x80000001C2506EB0;
    swift_willThrow();
    v12 = **(_QWORD **)(v0 + 32);
    v13 = type metadata accessor for PommesResponse();
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    MEMORY[0x1C3BBEFE0](v12, v13, v14, MEMORY[0x1E0DEDB38]);
    swift_task_dealloc();
    v6 = *(uint64_t (**)(void))(v0 + 8);
  }
  return v6();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = **(_QWORD **)(v0 + 32);
  v2 = type metadata accessor for PommesResponse();
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1C3BBEFE0](v1, v2, v3, MEMORY[0x1E0DEDB38]);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  *(_QWORD *)(v4 + 16) = a1;
  v7 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)a4 + 208) + *(_QWORD *)(*(_QWORD *)a4 + 208));
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 24) = v5;
  *v5 = v4;
  v5[1] = closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return v7();
}

uint64_t closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = *v2;
  swift_task_dealloc();
  if (v1)
    return (*(uint64_t (**)(void))(v5 + 8))();
  *(_QWORD *)(v4 + 32) = a1;
  return swift_task_switch();
}

uint64_t closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  uint64_t v0;

  **(_QWORD **)(v0 + 16) = *(_QWORD *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4[5] = a4;
  v5 = type metadata accessor for ContinuousClock();
  v4[6] = v5;
  v4[7] = *(_QWORD *)(v5 - 8);
  v4[8] = swift_task_alloc();
  v6 = type metadata accessor for ContinuousClock.Instant();
  v4[9] = v6;
  v4[10] = *(_QWORD *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);
  _QWORD *v6;

  v1 = *(_QWORD *)(v0 + 88);
  v2 = *(_QWORD *)(v0 + 72);
  v3 = *(_QWORD *)(v0 + 80);
  v4 = *(_QWORD *)(v0 + 40);
  static ContinuousClock.Instant.now.getter();
  MEMORY[0x1C3BBF460](1000000000000000000 * v4, ((v4 >> 63) & 0xF21F494C589C0000) + (((unint64_t)v4 * (unsigned __int128)0xDE0B6B3A7640000uLL) >> 64));
  v5 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(_QWORD *)(v0 + 104) = v5;
  v5(v1, v2);
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 16) = 0;
  *(_BYTE *)(v0 + 32) = 1;
  ContinuousClock.init()();
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 112) = v6;
  lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock();
  *v6 = v0;
  v6[1] = closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return static Task<>.sleep<A>(until:tolerance:clock:)();
}

{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void (*v4)(uint64_t, uint64_t);
  uint64_t v5;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 120) = v0;
  swift_task_dealloc();
  v3 = v2[12];
  v4 = (void (*)(uint64_t, uint64_t))v2[13];
  v5 = v2[9];
  (*(void (**)(_QWORD, _QWORD))(v2[7] + 8))(v2[8], v2[6]);
  v4(v3, v5);
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;

  if (one-time initialization token for sage != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.sage);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2356000, v2, v3, "SageSearch timed out waiting for Pegasus", v4, 2u);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }

  lazy protocol witness table accessor for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError();
  swift_allocError();
  *(_BYTE *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0xD000000000000028;
  *(_QWORD *)(v5 + 16) = 0x80000001C2506EE0;
  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SageSearch.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t SageSearch.__deallocating_deinit()
{
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(_QWORD *)(a8 + 104) = type metadata accessor for PommesLocationManager(0);
  *(_QWORD *)(a8 + 112) = &protocol witness table for PommesLocationManager;
  *(_QWORD *)(a8 + 80) = a2;
  *(_QWORD *)(a8 + 184) = type metadata accessor for CNContactStore();
  *(_QWORD *)(a8 + 192) = &protocol witness table for CNContactStore;
  *(_QWORD *)(a8 + 160) = a7;
  *(_QWORD *)(a8 + 56) = 0;
  *(_QWORD *)(a8 + 64) = 0;
  *(_OWORD *)(a8 + 144) = xmmword_1C24FEDE0;
  *(_QWORD *)(a8 + 200) = 0;
  *(_QWORD *)(a8 + 72) = a1;
  *(_QWORD *)(a8 + 120) = a3;
  *(_QWORD *)(a8 + 128) = a4;
  *(_QWORD *)(a8 + 136) = a6;
  outlined init with take of AppDataProviding(a5, a8 + 16);
  return a8;
}

unint64_t lazy protocol witness table accessor for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType;
  if (!lazy protocol witness table cache variable for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for SageSearch.SageSearchError.SageSearchErrorType, &type metadata for SageSearch.SageSearchError.SageSearchErrorType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearch.SageSearchError.SageSearchErrorType and conformance SageSearch.SageSearchError.SageSearchErrorType);
  }
  return result;
}

uint64_t type metadata accessor for SageSearch()
{
  return objc_opt_self();
}

uint64_t method lookup function for SageSearch()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of SageSearch.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of SageSearch.search(query:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of SageSearch.search(query:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of SageSearch.search(query:location:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v3 + 112)
                                                          + *(_QWORD *)(*(_QWORD *)v3 + 112));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = dispatch thunk of SageSearch.search(query:location:);
  return v10(a1, a2, a3);
}

uint64_t dispatch thunk of SageSearch.search(query:location:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of SageSearch.search(query:clientEntities:location:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v10;
  uint64_t (*v12)(uint64_t, uint64_t, uint64_t, uint64_t);

  v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(*(_QWORD *)v4 + 120)
                                                                   + *(_QWORD *)(*(_QWORD *)v4 + 120));
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v10;
  *v10 = v5;
  v10[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v12(a1, a2, a3, a4);
}

uint64_t destroy for SageSearch.SageSearchError()
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for SageSearch.SageSearchError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SageSearch.SageSearchError(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SageSearch.SageSearchError(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SageSearch.SageSearchError(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SageSearch.SageSearchError(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)(result + 16) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for SageSearch.SageSearchError()
{
  return &type metadata for SageSearch.SageSearchError;
}

uint64_t storeEnumTagSinglePayload for SageSearch.SageSearchError.SageSearchErrorType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C246A638 + 4 * byte_1C24FEDF5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C246A66C + 4 * byte_1C24FEDF0[v4]))();
}

uint64_t sub_1C246A66C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C246A674(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C246A67CLL);
  return result;
}

uint64_t sub_1C246A688(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C246A690);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C246A694(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C246A69C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SageSearch.SageSearchError.SageSearchErrorType()
{
  return &type metadata for SageSearch.SageSearchError.SageSearchErrorType;
}

uint64_t partial apply for closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v7 = *(_QWORD *)(v2 + 16);
  v6 = *(_QWORD *)(v2 + 24);
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v8;
  *v8 = v3;
  v8[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(a1, a2, v7, v6);
}

uint64_t sub_1C246A724()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t (*v8)(void);

  v4 = *(_QWORD *)(v1 + 32);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  v5[2] = a1;
  v8 = (uint64_t (*)(void))(**(int **)(*(_QWORD *)v4 + 208) + *(_QWORD *)(*(_QWORD *)v4 + 208));
  v6 = (_QWORD *)swift_task_alloc();
  v5[3] = v6;
  *v6 = v5;
  v6[1] = closure #1 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:);
  return v8();
}

uint64_t outlined destroy of TaskPriority?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C246A81C()
{
  swift_unknownObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #2 in closure #1 in SageSearch.searchRemote(pommesSearchRequest:clientEntities:location:timeout:)(a1, v4, v5, v6);
}

unint64_t lazy protocol witness table accessor for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError;
  if (!lazy protocol witness table cache variable for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for SageSearch.SageSearchError, &type metadata for SageSearch.SageSearchError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SageSearch.SageSearchError and conformance SageSearch.SageSearchError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ContinuousClock and conformance ContinuousClock()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock;
  if (!lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock)
  {
    v1 = type metadata accessor for ContinuousClock();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DF0BB0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock);
  }
  return result;
}

unint64_t type metadata accessor for CNContactStore()
{
  unint64_t result;

  result = lazy cache variable for type metadata for CNContactStore;
  if (!lazy cache variable for type metadata for CNContactStore)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for CNContactStore);
  }
  return result;
}

uint64_t AudioResult.ItemSource.description.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0x726576726573;
  if (*v0 != 1)
    v1 = 0xD000000000000011;
  if (*v0)
    return v1;
  else
    return 0x6E776F6E6B6E75;
}

SiriInformationSearch::AudioResult::ItemSource_optional __swiftcall AudioResult.ItemSource.init(rawValue:)(Swift::Int rawValue)
{
  char *v1;
  char v2;

  v2 = 3;
  if ((unint64_t)rawValue < 3)
    v2 = rawValue;
  *v1 = v2;
  return (SiriInformationSearch::AudioResult::ItemSource_optional)rawValue;
}

uint64_t AudioResult.ItemSource.rawValue.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

SiriInformationSearch::AudioResult::ItemSource_optional protocol witness for RawRepresentable.init(rawValue:) in conformance AudioResult.ItemSource(Swift::Int *a1)
{
  return AudioResult.ItemSource.init(rawValue:)(*a1);
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AudioResult.ItemSource(_QWORD *a1@<X8>)
{
  unsigned __int8 *v1;

  *a1 = *v1;
}

void AudioResult.itemSource.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 16);
}

uint64_t AudioResult.persistentId.getter()
{
  uint64_t v0;

  return *(_QWORD *)(v0 + 24);
}

uint64_t AudioResult.audioItem.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t AudioResult.isDownloaded.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded);
}

uint64_t static AudioResult.decodeSiriSyncId(id:)()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t result;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v0 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v0);
  v2 = Data.init(base64Encoded:options:)();
  result = 0;
  if (v1 >> 60 != 15)
  {
    v4 = v1;
    static String.Encoding.utf8.getter();
    v5 = String.init(data:encoding:)();
    v7 = v6;
    outlined consume of Data?(v2, v4);
    if (v7)
      return v5;
    else
      return 0;
  }
  return result;
}

uint64_t AudioResult.__allocating_init(itemSource:persistentId:audioItem:)(_BYTE *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = swift_allocObject();
  *(_BYTE *)(v8 + 16) = *a1;
  *(_QWORD *)(v8 + 24) = a2;
  *(_BYTE *)(v8 + 32) = a3 & 1;
  v9 = v8 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v9, a4, v10);
  *(_BYTE *)(v8 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = 0;
  return v8;
}

uint64_t AudioResult.init(itemSource:persistentId:audioItem:)(_BYTE *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v4 + 16) = *a1;
  *(_QWORD *)(v4 + 24) = a2;
  *(_BYTE *)(v4 + 32) = a3 & 1;
  v6 = v4 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a4, v7);
  *(_BYTE *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = 0;
  return v4;
}

uint64_t AudioResult.__allocating_init(itemSource:audioItem:isDownloaded:)(_BYTE *a1, uint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = swift_allocObject();
  *(_BYTE *)(v6 + 16) = *a1;
  *(_QWORD *)(v6 + 24) = 0;
  *(_BYTE *)(v6 + 32) = 0;
  v7 = v6 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v7, a2, v8);
  *(_BYTE *)(v6 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = a3;
  return v6;
}

uint64_t AudioResult.init(itemSource:audioItem:isDownloaded:)(_BYTE *a1, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;

  *(_BYTE *)(v3 + 16) = *a1;
  *(_QWORD *)(v3 + 24) = 0;
  *(_BYTE *)(v3 + 32) = 0;
  v6 = v3 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, a2, v7);
  *(_BYTE *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_isDownloaded) = a3;
  return v3;
}

uint64_t AudioResult.__allocating_init(vocabularyResult:isDownloaded:)(void *a1, int a2)
{
  uint8_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  id v16;
  int v17;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v25;
  NSObject *v26;
  NSObject *v27;
  os_log_type_t v28;
  int v29;
  uint8_t *v30;
  uint64_t v31;
  uint8_t *v32;
  int v33;
  char v34;
  uint64_t v35;

  v33 = a2;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v31 - v14;
  if (a1)
  {
    v32 = v2;
    v16 = a1;
    Apple_Parsec_Siri_V2alpha_AudioItem.init()();
    dispatch thunk of VocabularyResult.fieldType.getter();
    KVFieldType.audioType.getter();
    Apple_Parsec_Siri_V2alpha_AudioItem.type.setter();
    Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
    v17 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v8, v4);
    if (v17 == *MEMORY[0x1E0D6E960] || v17 == *MEMORY[0x1E0D6E968])
      goto LABEL_7;
    if (v17 == *MEMORY[0x1E0D6E988])
    {
      VocabularyResult.semanticValue.getter();
      Apple_Parsec_Siri_V2alpha_AudioItem.artist.setter();
      goto LABEL_15;
    }
    if (v17 == *MEMORY[0x1E0D6E970]
      || v17 == *MEMORY[0x1E0D6E9A8]
      || v17 == *MEMORY[0x1E0D6E918]
      || v17 == *MEMORY[0x1E0D6E938]
      || v17 == *MEMORY[0x1E0D6E9B8]
      || v17 == *MEMORY[0x1E0D6E978]
      || v17 == *MEMORY[0x1E0D6E990]
      || v17 == *MEMORY[0x1E0D6E930]
      || v17 == *MEMORY[0x1E0D6E910]
      || v17 == *MEMORY[0x1E0D6E940])
    {
LABEL_7:
      VocabularyResult.semanticValue.getter();
      Apple_Parsec_Siri_V2alpha_AudioItem.title.setter();
LABEL_15:
      VocabularyResult.userId.getter();
      Apple_Parsec_Siri_V2alpha_AudioItem.sharedUserIDFromPlayableMusicAccount.setter();
      v34 = 2;
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
      v23 = (*((uint64_t (**)(char *, char *, _QWORD))v32 + 15))(&v34, v13, v33 & 1);

      (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
      return v23;
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    v26 = v16;
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v33 = v29;
      *(_DWORD *)v30 = 134217984;
      v32 = v30 + 4;
      v35 = dispatch thunk of VocabularyResult.fieldType.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2356000, v27, (os_log_type_t)v33, "vocabularyResult ontologyLabel ** %ld ** not handled", v30, 0xCu);
      MEMORY[0x1C3BBFF64](v30, -1, -1);
    }
    else
    {

      v27 = v26;
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    return 0;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v19 = type metadata accessor for Logger();
    __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1C2356000, v20, v21, "cannot create AudioResult from nil vocabularyResult", v22, 2u);
      MEMORY[0x1C3BBFF64](v22, -1, -1);
    }

    return 0;
  }
}

uint64_t AudioResult.__allocating_init(clientAudioResult:)(void *a1)
{
  void *v2;
  uint64_t v3;

  v2 = (void *)ClientAudioResult.vocabularyResult.getter();
  v3 = AudioResult.__allocating_init(vocabularyResult:isDownloaded:)(v2, 0);

  return v3;
}

uint64_t AudioResult.__allocating_init(clientAudioResult:isDownloaded:)(void *a1, int a2)
{
  void *v4;
  uint64_t v5;

  v4 = (void *)ClientAudioResult.vocabularyResult.getter();
  v5 = AudioResult.__allocating_init(vocabularyResult:isDownloaded:)(v4, a2);

  return v5;
}

uint64_t AudioResult.__allocating_init(audioItem:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE v15[15];
  char v16;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItem?);
  MEMORY[0x1E0C80A78](v3);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v8);
  v12 = &v15[-v11];
  outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioItem?(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?(a1);
    outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?((uint64_t)v5);
    return 0;
  }
  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 32))(v12, v5, v6);
    v16 = 1;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v10, v12, v6);
    v13 = (*(uint64_t (**)(char *, _BYTE *, _QWORD))(v1 + 120))(&v16, v10, 0);
    outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?(a1);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v12, v6);
  }
  return v13;
}

uint64_t AudioResult.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  void *v6;
  uint64_t v7;
  Swift::String v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  Swift::String v22;
  _QWORD v24[2];

  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_AudioItem.type.getter();
  v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E0D6E9A0])
  {
    v6 = (void *)0xE700000000000000;
    v7 = 0x6E776F6E6B6E75;
  }
  else if (v5 == *MEMORY[0x1E0D6E960])
  {
    v6 = (void *)0xE400000000000000;
    v7 = 1735290739;
  }
  else if (v5 == *MEMORY[0x1E0D6E968])
  {
    v6 = (void *)0xE500000000000000;
    v7 = 0x6D75626C61;
  }
  else if (v5 == *MEMORY[0x1E0D6E988])
  {
    v6 = (void *)0xE600000000000000;
    v7 = 0x747369747261;
  }
  else if (v5 == *MEMORY[0x1E0D6E970])
  {
    v6 = (void *)0xE500000000000000;
    v7 = 0x65726E6567;
  }
  else if (v5 == *MEMORY[0x1E0D6E9A8])
  {
    v6 = (void *)0xE800000000000000;
    v7 = 0x7473696C79616C70;
  }
  else
  {
    v7 = 0x5374736163646F70;
    if (v5 == *MEMORY[0x1E0D6E918])
    {
      v6 = (void *)0xEB00000000776F68;
    }
    else if (v5 == *MEMORY[0x1E0D6E938])
    {
      v6 = (void *)0xEE0065646F736970;
      v7 = 0x4574736163646F70;
    }
    else if (v5 == *MEMORY[0x1E0D6E948])
    {
      v6 = (void *)0xEF7473696C79616CLL;
      v7 = 0x5074736163646F70;
    }
    else
    {
      v6 = (void *)0xEC0000006E6F6974;
      if (v5 == *MEMORY[0x1E0D6E920])
      {
        v7 = 0x617453636973756DLL;
      }
      else if (v5 == *MEMORY[0x1E0D6E9B8])
      {
        v6 = (void *)0xE90000000000006BLL;
        v7 = 0x6F6F426F69647561;
      }
      else if (v5 == *MEMORY[0x1E0D6E978])
      {
        v6 = (void *)0xE500000000000000;
        v7 = 0x6569766F6DLL;
      }
      else if (v5 == *MEMORY[0x1E0D6E990])
      {
        v6 = (void *)0xE600000000000000;
        v7 = 0x776F68537674;
      }
      else if (v5 == *MEMORY[0x1E0D6E930])
      {
        v6 = (void *)0xED000065646F7369;
        v7 = 0x7045776F68537674;
      }
      else if (v5 == *MEMORY[0x1E0D6E910])
      {
        v6 = (void *)0xEA00000000006F65;
        v7 = 0x646956636973756DLL;
      }
      else if (v5 == *MEMORY[0x1E0D6E940])
      {
        v6 = (void *)0xEE006E6F69746174;
      }
      else if (v5 == *MEMORY[0x1E0D6E928])
      {
        v7 = 0x6174536F69646172;
      }
      else if (v5 == *MEMORY[0x1E0D6E998])
      {
        v6 = (void *)0xE700000000000000;
        v7 = 0x6E6F6974617473;
      }
      else if (v5 == *MEMORY[0x1E0D6E980])
      {
        v6 = (void *)0xE500000000000000;
        v7 = 0x636973756DLL;
      }
      else if (v5 == *MEMORY[0x1E0D6E950])
      {
        v7 = 0xD000000000000017;
        v6 = (void *)0x80000001C2506F50;
      }
      else if (v5 == *MEMORY[0x1E0D6E958])
      {
        v6 = (void *)0xE400000000000000;
        v7 = 1937204590;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        v6 = (void *)0xEC00000044455A49;
        v7 = 0x4E474F4345524E55;
      }
    }
  }
  v24[0] = 0;
  v24[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(82);
  v8._countAndFlagsBits = 0xD000000000000019;
  v8._object = (void *)0x80000001C2506F30;
  String.append(_:)(v8);
  v9 = 0xE600000000000000;
  v10 = 0x726576726573;
  if (*(_BYTE *)(v0 + 16) != 1)
  {
    v10 = 0xD000000000000011;
    v9 = 0x80000001C2506F10;
  }
  if (*(_BYTE *)(v0 + 16))
    v11 = v10;
  else
    v11 = 0x6E776F6E6B6E75;
  if (*(_BYTE *)(v0 + 16))
    v12 = v9;
  else
    v12 = 0xE700000000000000;
  v13 = v12;
  String.append(_:)(*(Swift::String *)&v11);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x69746E656469202CLL;
  v14._object = (void *)0xEE00203A72656966;
  String.append(_:)(v14);
  v15._countAndFlagsBits = Apple_Parsec_Siri_V2alpha_AudioItem.identifier.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x747369747261202CLL;
  v16._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = Apple_Parsec_Siri_V2alpha_AudioItem.artist.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0x656C746974202C22;
  v18._object = (void *)0xEB0000000022203ALL;
  String.append(_:)(v18);
  v19._countAndFlagsBits = Apple_Parsec_Siri_V2alpha_AudioItem.title.getter();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x3A65707974202C22;
  v20._object = (void *)0xE900000000000020;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v7;
  v21._object = v6;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 32032;
  v22._object = (void *)0xE200000000000000;
  String.append(_:)(v22);
  return v24[0];
}

uint64_t AudioResult.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t AudioResult.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch11AudioResult_audioItem;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_AudioItem?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItem?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Apple_Parsec_Siri_V2alpha_AudioItem?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioItem?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type AudioResult.ItemSource and conformance AudioResult.ItemSource()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type AudioResult.ItemSource and conformance AudioResult.ItemSource;
  if (!lazy protocol witness table cache variable for type AudioResult.ItemSource and conformance AudioResult.ItemSource)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for AudioResult.ItemSource, &type metadata for AudioResult.ItemSource);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AudioResult.ItemSource and conformance AudioResult.ItemSource);
  }
  return result;
}

uint64_t ObjC metadata update function for AudioResult()
{
  return type metadata accessor for AudioResult();
}

uint64_t type metadata accessor for AudioResult()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AudioResult;
  if (!type metadata singleton initialization cache for AudioResult)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AudioResult()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AudioResult()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioResult.__allocating_init(itemSource:persistentId:audioItem:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3;

  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(v3 + 112))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of AudioResult.__allocating_init(itemSource:audioItem:isDownloaded:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AudioResult.description.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t storeEnumTagSinglePayload for AudioResult.ItemSource(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C246BCBC + 4 * byte_1C24FEF35[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C246BCF0 + 4 * byte_1C24FEF30[v4]))();
}

uint64_t sub_1C246BCF0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C246BCF8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C246BD00);
  return result;
}

uint64_t sub_1C246BD0C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C246BD14);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C246BD18(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C246BD20(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AudioResult.ItemSource()
{
  return &type metadata for AudioResult.ItemSource;
}

uint64_t GlideFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized GlideFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t GlideFeaturiser.name.getter()
{
  type metadata accessor for GlideFeaturiser();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for GlideFeaturiser.Type);
  return String.init<A>(describing:)();
}

uint64_t GlideFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized GlideFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void GlideFeaturiser.featurise(candidate:rankedSlotIndex:)(uint64_t **a1)
{
  uint64_t v1;
  uint64_t **v2;
  uint64_t *v3;
  char v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  void (*v8)(__n128);
  __n128 v9;
  _QWORD *v10;
  id v11;

  v2 = a1;
  if (*(_BYTE *)(v1 + 16) != 1)
    goto LABEL_4;
  v3 = *a1;
  if ((*((_BYTE *)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_source) & 1) == 0)
  {
    a1 = (uint64_t **)swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  a1 = (uint64_t **)swift_bridgeObjectRelease();
  if ((v4 & 1) != 0)
  {
LABEL_6:
    v10 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v7 = (_QWORD *)(*(uint64_t (**)(uint64_t **))((*MEMORY[0x1E0DEEDD8] & *v3) + 0xB8))(a1);
    v8 = *(void (**)(__n128))((*v10 & *v7) + 0xB8);
    v9.n128_u32[0] = 1064514355;
    goto LABEL_7;
  }
LABEL_4:
  v5 = **v2;
  v6 = (_QWORD *)MEMORY[0x1E0DEEDD8];
  v7 = (_QWORD *)(*(uint64_t (**)(uint64_t **))((*MEMORY[0x1E0DEEDD8] & v5) + 0xB8))(a1);
  v8 = *(void (**)(__n128))((*v6 & *v7) + 0xB8);
  v9.n128_u32[0] = 1.0;
LABEL_7:
  v11 = v7;
  v8(v9);

}

uint64_t GlideFeaturiser.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t GlideFeaturiser.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t specialized GlideFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_retain();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2356000, v5, v6, "GlideFeaturiser : isGlideEligible=%{BOOL}d", v7, 8u);
    MEMORY[0x1C3BBFF64](v7, -1, -1);

  }
  else
  {

    swift_release();
  }
  *(_BYTE *)(v2 + 16) = *(_BYTE *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_isGlideEligible);
  return v2;
}

uint64_t type metadata accessor for GlideFeaturiser()
{
  return objc_opt_self();
}

uint64_t method lookup function for GlideFeaturiser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of GlideFeaturiser.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of GlideFeaturiser.__allocating_init(query:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of GlideFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

id PegasusInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 16);
  if (v1)
  {
    v2 = *(id *)(v0 + 16);
  }
  else
  {
    v3 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for MockEmittableSiriAnalyticsMessageStream()), sel_init);
    v4 = *(void **)(v0 + 16);
    *(_QWORD *)(v0 + 16) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

void PegasusInstrumentationUtil.mockStream.setter(uint64_t a1)
{
  uint64_t v1;
  void *v2;

  v2 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

void (*PegasusInstrumentationUtil.mockStream.modify(id *a1))(uint64_t *a1)
{
  void *v1;

  a1[1] = v1;
  *a1 = PegasusInstrumentationUtil.mockStream.getter();
  return PommesCacheInstrumentationUtil.mockStream.modify;
}

uint64_t PegasusInstrumentationUtil.analyticsComponentIdGenerator.getter()
{
  return swift_retain();
}

uint64_t PegasusInstrumentationUtil.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a1;
  return result;
}

uint64_t PegasusInstrumentationUtil.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = 0;
  *(_QWORD *)(v1 + 24) = a1;
  return v1;
}

void PegasusInstrumentationUtil.logStartOfPegasusRequest(requestId:pommesId:pommesCandidateId:payloadSizeInKB:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  void *v8;
  void *v9;
  void *v10;
  id v11;
  char v12;
  id v13;
  void *v14;
  id v15;

  v4 = v3;
  v15 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v3 + 136))();
  if (v15)
  {
    v8 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a1, a2, a3);
    if (v8)
    {
      v9 = v8;
      objc_msgSend(v8, sel_setPegasusRequestContext_, v15);
      v10 = (void *)objc_opt_self();
      swift_retain();
      v11 = objc_msgSend(v10, sel_processInfo);
      v12 = NSProcessInfo.isRunningUnitTests.getter();

      if ((v12 & 1) != 0)
        v13 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v4 + 96))();
      else
        v13 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
      v14 = v13;
      swift_release();
      objc_msgSend(v14, sel_emitMessage_, v9);

      swift_unknownObjectRelease();
    }
    else
    {

    }
  }
}

void PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, int a8, long double a9, long double a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  int v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  const char *v38;
  id v39;
  void *v40;
  id v41;
  void *v42;
  int *v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  char *v53;
  uint64_t v54;
  void *v55;
  char *v56;
  void (*v57)(_QWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>));
  void *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  void *v63;
  char *v64;
  void (*v65)(_QWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(_QWORD *@<X8>));
  void *v66;
  void (*v67)(char *, uint64_t);
  void *v68;
  void *v69;
  void *v70;
  int *v71;
  id v72;
  char v73;
  id v74;
  void *v75;
  int v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  int *v97;
  _QWORD v98[2];

  v89 = a8;
  v87 = a6;
  v90 = a5;
  v93 = a2;
  v94 = a3;
  v92 = a1;
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v95 = *(_QWORD *)(v14 - 8);
  v96 = v14;
  MEMORY[0x1E0C80A78](v14);
  v83 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Date();
  v85 = *(_QWORD *)(v16 - 8);
  v86 = v16;
  MEMORY[0x1E0C80A78](v16);
  v84 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  v81 = *(_QWORD *)(v18 - 8);
  v82 = v18;
  MEMORY[0x1E0C80A78](v18);
  v80 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1E0C80A78](v20);
  v22 = (char *)&v79 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  v91 = *(_QWORD *)(v23 - 8);
  v24 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v88 = (char *)&v79 - v27;
  v28 = type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x1E0C80A78](v28);
  v31 = (char *)&v79 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v31, a4, v28);
  v32 = (*(uint64_t (**)(char *, uint64_t))(v29 + 88))(v31, v28);
  v33 = *MEMORY[0x1E0D6E230];
  (*(void (**)(char *, uint64_t))(v29 + 8))(v31, v28);
  if (v32 == v33)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v35, v36))
      goto LABEL_18;
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    v38 = "Incorrect logging method called. Should call logFailedPegasusRequest(pommesId:resultCandidateId:reason:).";
LABEL_17:
    _os_log_impl(&dword_1C2356000, v35, v36, v38, v37, 2u);
    MEMORY[0x1C3BBFF64](v37, -1, -1);
LABEL_18:

    return;
  }
  v39 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A280]), sel_init);
  if (!v39)
  {
LABEL_13:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v35, v36))
      goto LABEL_18;
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    v38 = "Failed to create the End event and/or context";
    goto LABEL_17;
  }
  v40 = v39;
  v41 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A278]), sel_init);
  if (!v41)
  {

    goto LABEL_13;
  }
  v42 = v41;
  objc_msgSend(v40, sel_setStatus_, closure #1 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(a4));
  specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(a9);
  objc_msgSend(v40, sel_setConfidenceScore_);
  specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(a10);
  objc_msgSend(v40, sel_setPayloadSizeInKB_);
  if (a7)
    a7 = (void *)MEMORY[0x1C3BBEC44](v87, a7);
  v43 = v97;
  v44 = v23;
  v45 = v91;
  objc_msgSend(v40, sel_setPegasusDomain_, a7);

  objc_msgSend(v40, sel_setIsRewrittenUtteranceUsed_, v89 & 1);
  v46 = (void *)specialized static PegasusInstrumentationUtil.kfedLatency(from:)();
  objc_msgSend(v40, sel_setKfedLatency_, v46);

  outlined init with copy of MediaUserStateCenter?(v90, (uint64_t)v22, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48))(v22, 1, v23);
  v49 = v95;
  v48 = v96;
  if (v47 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v22, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
    goto LABEL_29;
  }
  v51 = v88;
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v88, v22, v44);
  (*(void (**)(char *, char *, uint64_t))(v45 + 16))(v26, v51, v44);
  v52 = (*(uint64_t (**)(char *, uint64_t))(v45 + 88))(v26, v44);
  if (v52 == *MEMORY[0x1E0D6D078])
  {
    (*(void (**)(char *, uint64_t))(v45 + 96))(v26, v44);
    v53 = v83;
    v54 = (*(uint64_t (**)(char *, char *, uint64_t))(v49 + 32))(v83, v26, v48);
    if (one-time initialization token for shared != -1)
      v54 = swift_once();
    v55 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v54);
    v77 = v97;
    v78 = (uint64_t)v53;
    v56 = v84;
    Date.init()();
    v57 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>)))(*(_QWORD *)v55 + 200);
    v77 = &v76;
    v78 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for POMMESSchemaPOMMESPegasusResponseServerDrivenContext?);
    LOBYTE(v76) = 2;
    v57(v98, 0xD00000000000001CLL, 0x80000001C2507000, 0, v56, "SiriInformationSearch/PegasusInstrumentationUtil.swift", 54, 2, 150, "logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)", 162, v76, partial apply for closure #3 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:));
    (*(void (**)(char *, uint64_t))(v85 + 8))(v56, v86);
    v58 = (void *)v98[0];
    objc_msgSend(v40, sel_setServerDriven_, v98[0]);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v88, v44);
    v60 = v95;
    v59 = v96;
LABEL_27:
    (*(void (**)(char *, uint64_t))(v60 + 8))(v53, v59);
    goto LABEL_29;
  }
  if (v52 == *MEMORY[0x1E0D6D070])
  {
    (*(void (**)(char *, uint64_t))(v45 + 96))(v26, v44);
    v61 = v80;
    v62 = (*(uint64_t (**)(char *, char *, uint64_t))(v81 + 32))(v80, v26, v82);
    if (one-time initialization token for shared != -1)
      v62 = swift_once();
    v63 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v62);
    v77 = v43;
    v78 = (uint64_t)v61;
    v64 = v84;
    Date.init()();
    v53 = v61;
    v65 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(_QWORD *@<X8>)))(*(_QWORD *)v63 + 200);
    v77 = &v76;
    v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for POMMESSchemaPOMMESPegasusResponseClientDrivenContext?);
    LOBYTE(v76) = 2;
    v65(v98, 0xD00000000000001CLL, 0x80000001C2507110, 0, v64, "SiriInformationSearch/PegasusInstrumentationUtil.swift", 54, 2, 148, "logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)", 162, v76, partial apply for closure #2 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:));
    (*(void (**)(char *, uint64_t))(v85 + 8))(v64, v86);
    v66 = (void *)v98[0];
    objc_msgSend(v40, sel_setClientDriven_, v98[0]);

    (*(void (**)(char *, uint64_t))(v45 + 8))(v88, v44);
    v60 = v81;
    v59 = v82;
    goto LABEL_27;
  }
  v67 = *(void (**)(char *, uint64_t))(v45 + 8);
  v67(v88, v44);
  v67(v26, v44);
LABEL_29:
  objc_msgSend(v42, sel_setEnded_, v40);
  v68 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(v92, v93, v94);
  if (v68)
  {
    v69 = v68;
    objc_msgSend(v68, sel_setPegasusRequestContext_, v42);
    v70 = (void *)objc_opt_self();
    v71 = v97;
    swift_retain();
    v72 = objc_msgSend(v70, sel_processInfo);
    v73 = NSProcessInfo.isRunningUnitTests.getter();

    if ((v73 & 1) != 0)
      v74 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v71 + 96))();
    else
      v74 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
    v75 = v74;
    swift_release();
    objc_msgSend(v75, sel_emitMessage_, v69);

    swift_unknownObjectRelease();
  }
  else
  {

  }
}

uint64_t closure #1 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;

  v2 = type metadata accessor for Apple_Parsec_Siri_V1alpha_StatusCode();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0D6E238])
    goto LABEL_5;
  if (v6 == *MEMORY[0x1E0D6E248])
    return 1;
  if (v6 == *MEMORY[0x1E0D6E230])
  {
LABEL_5:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1C2356000, v9, v10, "Unrecognized status from log end of request", v11, 2u);
      MEMORY[0x1C3BBFF64](v11, -1, -1);
    }

    return 0;
  }
  if (v6 != *MEMORY[0x1E0D6E240])
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C2356000, v13, v14, "Unknown status from log end of request", v15, 2u);
      MEMORY[0x1C3BBFF64](v15, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
  return 3;
}

void closure #2 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(_QWORD *a1@<X8>)
{
  id v2;
  id v3;
  id v4;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2A8]), sel_init);
  v3 = v2;
  if (v2)
  {
    v4 = v2;
    objc_msgSend(v4, sel_setType_, closure #1 in PegasusInstrumentationUtil.buildClientDrivenContext(_:)());

  }
  *a1 = v3;
}

void PegasusInstrumentationUtil.logFailedPegasusRequest(requestId:pommesId:pommesCandidateId:reason:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, char a6)
{
  uint64_t v6;
  uint64_t v7;
  id v14;
  void *v15;
  NSObject *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  char v21;
  id v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  NSObject *v27;

  v7 = v6;
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A288]), sel_init);
  if (!v14)
    goto LABEL_12;
  v15 = v14;
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A278]), sel_init);
  if (!v16)
  {

LABEL_12:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C2356000, v27, v24, "Failed to create the Failed event and/or context", v25, 2u);
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }
    goto LABEL_17;
  }
  v27 = v16;
  objc_msgSend(v15, sel_setReason_, a4);
  if ((a6 & 1) == 0 && (_DWORD)a4 == 1)
  {
    if ((a5 & 0x8000000000000000) != 0 || HIDWORD(a5))
    {
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return;
    }
    objc_msgSend(v15, sel_setErrorCode_, a5);
  }
  -[NSObject setFailed:](v27, sel_setFailed_, v15);
  v17 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a1, a2, a3);
  if (!v17)
  {

LABEL_17:
    return;
  }
  v18 = v17;
  objc_msgSend(v17, sel_setPegasusRequestContext_, v27);
  v19 = (void *)objc_opt_self();
  swift_retain();
  v20 = objc_msgSend(v19, sel_processInfo);
  v21 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v21 & 1) != 0)
    v22 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 96))();
  else
    v22 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
  v26 = v22;
  swift_release();
  objc_msgSend(v26, sel_emitMessage_, v18);

  swift_unknownObjectRelease();
}

void PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_QWORD, _QWORD);
  void (*v53)(unint64_t, uint64_t);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  void (*v69)(char *, uint64_t);
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  void *v90;
  void *v91;
  void *v92;
  id v93;
  char v94;
  id v95;
  void *v96;
  char *v97;
  char *v98;
  char *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  char *v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  char *v115;
  char *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  void (*v125)(char *, unint64_t, uint64_t);
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(_QWORD, _QWORD);
  uint64_t v131;
  int v132;

  v104 = a3;
  v103 = a2;
  v102 = a1;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
  v123 = *(_QWORD *)(v6 - 8);
  v124 = v6;
  v7 = MEMORY[0x1E0C80A78](v6);
  v98 = (char *)&v97 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v106 = (char *)&v97 - v10;
  MEMORY[0x1E0C80A78](v9);
  v122 = (char *)&v97 - v11;
  v111 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v126 = *(_QWORD *)(v111 - 8);
  v12 = MEMORY[0x1E0C80A78](v111);
  v99 = (char *)&v97 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v110 = (char *)&v97 - v14;
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v118 = *(_QWORD *)(v15 - 8);
  v119 = v15;
  MEMORY[0x1E0C80A78](v15);
  v117 = (char *)&v97 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v120 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v97 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v97 - v20;
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v121 = (char *)&v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v116 = *(char **)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v115 = (char *)&v97 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery();
  v28 = *(char **)(v27 - 8);
  MEMORY[0x1E0C80A78](v27);
  v30 = (char *)&v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
  v32 = v31;
  v33 = *(char **)(v31 + 16);
  v112 = v17;
  v127 = v33;
  if (v33)
  {
    v107 = v25;
    v113 = v23;
    v114 = (char *)v22;
    v108 = a5;
    v23 = 0;
    v34 = v31 + ((v28[80] + 32) & ~(unint64_t)v28[80]);
    v35 = *((_QWORD *)v28 + 9);
    v125 = (void (*)(char *, unint64_t, uint64_t))*((_QWORD *)v28 + 2);
    while (1)
    {
      v125(v30, v34, v27);
      swift_bridgeObjectRetain();
      closure #1 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(&v129);
      v36 = v28;
      v37 = (void (*)(char *, uint64_t))*((_QWORD *)v28 + 1);
      v37(v30, v27);
      swift_bridgeObjectRelease();
      v38 = (unint64_t)v130;
      swift_bridgeObjectRelease();
      if (v38)
        break;
      ++v23;
      v34 += v35;
      v28 = v36;
      if (v127 == (char *)v23)
        goto LABEL_8;
    }
    if (v127 == (char *)v23)
    {
LABEL_8:
      swift_bridgeObjectRelease();
      v101 = 0;
      v39 = 0;
      v17 = v112;
      v23 = v113;
      v38 = (unint64_t)v114;
LABEL_12:
      v36 = v121;
      v25 = v107;
      v40 = v116;
      goto LABEL_13;
    }
    if (v23 < *(_QWORD *)(v32 + 16))
    {
      v125(v30, v34, v27);
      closure #1 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(&v129);
      v37(v30, v27);
      v39 = (unint64_t)v130;
      v23 = v113;
      v38 = (unint64_t)v114;
      if (!v130)
        goto LABEL_70;
      v101 = v129;
      swift_bridgeObjectRelease();
      v17 = v112;
      goto LABEL_12;
    }
    __break(1u);
    goto LABEL_67;
  }
  swift_bridgeObjectRelease();
  v101 = 0;
  v39 = 0;
  v38 = v22;
  v36 = v121;
  v40 = v116;
LABEL_13:
  v41 = v115;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  v42 = (*((uint64_t (**)(char *, uint64_t))v40 + 1))(v41, v25);
  v43 = MEMORY[0x1C3BBC31C](v42);
  (*(void (**)(char *, unint64_t))(v23 + 8))(v36, v38);
  v116 = *(char **)(v43 + 16);
  if (!v116)
  {
    swift_bridgeObjectRelease();
    v57 = 0;
    v58 = 0;
LABEL_33:
    v72 = v101;
    if (!v39)
      goto LABEL_42;
LABEL_34:
    if (v58 && (v72 == v57 && v39 == v58 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0))
    {
      v73 = 2;
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  v100 = v39;
  v23 = 0;
  v114 = (char *)(v43 + ((*(unsigned __int8 *)(v120 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v120 + 80)));
  v113 = *(_QWORD *)(v120 + 72);
  v115 = *(char **)(v120 + 16);
  v109 = v21;
  v108 = v43;
  while (1)
  {
    v36 = &v114[v113 * v23];
    ((void (*)(char *, char *, uint64_t))v115)(v21, v36, v17);
    swift_bridgeObjectRetain();
    v44 = v117;
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
    v45 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    (*(void (**)(char *, uint64_t))(v118 + 8))(v44, v119);
    v127 = *(char **)(v45 + 16);
    if (v127)
      break;
    swift_bridgeObjectRelease();
LABEL_16:
    (*(void (**)(char *, uint64_t))(v120 + 8))(v21, v17);
    swift_bridgeObjectRelease();
    if ((char *)++v23 == v116)
      goto LABEL_32;
  }
  v107 = (uint64_t)v36;
  v121 = (char *)v23;
  v36 = 0;
  v46 = v45 + ((*(unsigned __int8 *)(v126 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80));
  v47 = *(_QWORD *)(v126 + 72);
  v125 = *(void (**)(char *, unint64_t, uint64_t))(v126 + 16);
  v48 = v111;
  v49 = v110;
  while (1)
  {
    v125(v49, v46, v48);
    swift_bridgeObjectRetain();
    v23 = (unint64_t)v122;
    v50 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    v51 = MEMORY[0x1C3BBC388](v50);
    v38 = (unint64_t)v52;
    v53 = *(void (**)(unint64_t, uint64_t))(v123 + 8);
    v53(v23, v124);
    swift_bridgeObjectRelease();
    v54 = HIBYTE(v38) & 0xF;
    if ((v38 & 0x2000000000000000) == 0)
      v54 = v51 & 0xFFFFFFFFFFFFLL;
    if (v54)
      break;
    (*(void (**)(char *, uint64_t))(v126 + 8))(v49, v48);
    swift_bridgeObjectRelease();
    ++v36;
    v46 += v47;
    if (v127 == v36)
      goto LABEL_25;
  }
  v55 = v106;
  v56 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
  MEMORY[0x1C3BBC388](v56);
  v53((unint64_t)v55, v124);
  v38 = *(_QWORD *)(v126 + 8);
  ((void (*)(char *, uint64_t))v38)(v49, v48);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v127 == v36)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    v17 = v112;
    v21 = v109;
    v23 = (unint64_t)v121;
    goto LABEL_16;
  }
  if ((unint64_t)v36 >= *(_QWORD *)(v45 + 16))
  {
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    __break(1u);
LABEL_70:
    __break(1u);
    goto LABEL_71;
  }
  v36 = v99;
  v125(v99, v46, v48);
  v59 = v98;
  v23 = v48;
  v60 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
  v61 = MEMORY[0x1C3BBC388](v60);
  v63 = v62;
  v64 = v59;
  v65 = v124;
  v53((unint64_t)v64, v124);
  swift_bridgeObjectRelease();
  v66 = HIBYTE(v63) & 0xF;
  if ((v63 & 0x2000000000000000) == 0)
    v66 = v61 & 0xFFFFFFFFFFFFLL;
  if (!v66)
  {
LABEL_71:
    ((void (*)(char *, unint64_t))v38)(v36, v23);
    __break(1u);
    goto LABEL_72;
  }
  v67 = v106;
  v68 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
  MEMORY[0x1C3BBC388](v68);
  v53((unint64_t)v67, v65);
  ((void (*)(char *, unint64_t))v38)(v36, v23);
  swift_bridgeObjectRelease();
  v69 = *(void (**)(char *, uint64_t))(v120 + 8);
  v70 = v112;
  v69(v109, v112);
  swift_bridgeObjectRelease();
  v71 = v108;
  swift_bridgeObjectRelease();
  if (v121 == v116)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    v57 = 0;
    v58 = 0;
    v39 = v100;
    goto LABEL_33;
  }
  if ((unint64_t)v121 >= *(_QWORD *)(v71 + 16))
    goto LABEL_68;
  v74 = v97;
  ((void (*)(char *, uint64_t, uint64_t))v115)(v97, v107, v70);
  closure #2 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)(&v129);
  v69(v74, v70);
  v58 = (unint64_t)v130;
  v39 = v100;
  v72 = v101;
  if (!v130)
  {
LABEL_72:
    __break(1u);
    return;
  }
  v57 = v129;
  swift_bridgeObjectRelease();
  if (v39)
    goto LABEL_34;
LABEL_42:
  if (v58)
  {
LABEL_43:
    v73 = 1;
    goto LABEL_44;
  }
  v73 = 3;
LABEL_44:
  v132 = v73;
  v75 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A290]), sel_init);
  if (!v75)
    goto LABEL_69;
  v76 = v75;
  objc_msgSend(v75, sel_setGeoAppResolutionType_, v73);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v77 = type metadata accessor for Logger();
  __swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v78 = Logger.logObject.getter();
  v79 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = swift_slowAlloc();
    v127 = v76;
    v81 = v80;
    v82 = swift_slowAlloc();
    v131 = v82;
    *(_DWORD *)v81 = 136315650;
    if (v39)
      v83 = v72;
    else
      v83 = 7104878;
    if (v39)
      v84 = v39;
    else
      v84 = 0xE300000000000000;
    swift_bridgeObjectRetain();
    v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v81 + 12) = 2080;
    if (v58)
    {
      v85 = v58;
    }
    else
    {
      v57 = 7104878;
      v85 = 0xE300000000000000;
    }
    swift_bridgeObjectRetain();
    v129 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v57, v85, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v81 + 22) = 2080;
    swift_beginAccess();
    v86 = POMMESSchemaPOMMESPegasusRequestGeoAppResolutionType.description.getter();
    v128 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v86, v87, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v78, v79, "Third party maps app bundle Id from request is %s, from response is %s). Reporting resolution type: %s.", (uint8_t *)v81, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v82, -1, -1);
    v88 = v81;
    v76 = v127;
    MEMORY[0x1C3BBFF64](v88, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v89 = v105;
  v90 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(v102, v103, v104);
  if (v90)
  {
    v91 = v90;
    objc_msgSend(v90, sel_setPommesPegasusRequestGeoAppResolutionReported_, v76);
    v92 = (void *)objc_opt_self();
    swift_retain();
    v93 = objc_msgSend(v92, sel_processInfo);
    v94 = NSProcessInfo.isRunningUnitTests.getter();

    if ((v94 & 1) != 0)
      v95 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v89 + 96))();
    else
      v95 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
    v96 = v95;
    swift_release();
    objc_msgSend(v96, sel_emitMessage_, v91);

    swift_unknownObjectRelease();
  }
  else
  {

  }
}

uint64_t closure #1 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  void (*v52)(char *, unint64_t, uint64_t);
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t result;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t *v91;
  char *v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, unint64_t, uint64_t);
  void (*v101)(char *, unint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  uint64_t v107;

  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v2);
  v83 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v82 = type metadata accessor for Google_Protobuf_Any();
  v81 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v80 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AppInfo?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v85 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  v84 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v78 = (char *)&v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v96 = *(_QWORD *)(v9 - 8);
  v97 = v9;
  v10 = MEMORY[0x1E0C80A78](v9);
  v95 = (char *)&v77 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v94 = (char *)&v77 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v13);
  v88 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v98 = *(_QWORD *)(v87 - 8);
  v15 = MEMORY[0x1E0C80A78](v87);
  v86 = (char *)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v89 = (char *)&v77 - v17;
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v102 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v77 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v77 - v22;
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1E0C80A78](v24);
  v92 = (char *)&v77 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = MEMORY[0x1E0C80A78](v26);
  v30 = (char *)&v77 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v93 = (char *)&v77 - v31;
  v32 = Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.getter();
  v33 = *(_QWORD *)(v32 + 16);
  v91 = a1;
  v90 = v7;
  v103 = v27;
  if (v33)
  {
    v34 = (*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v79 = v32;
    v35 = v32 + v34;
    LODWORD(v101) = *MEMORY[0x1E0D6F198];
    v36 = *(void (**)(char *, unint64_t, uint64_t))(v27 + 16);
    v99 = *(_QWORD *)(v27 + 72);
    v100 = v36;
    while (1)
    {
      v100(v30, v35, v26);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
      v37 = v102;
      (*(void (**)(char *, _QWORD, uint64_t))(v102 + 104))(v21, v101, v18);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F1D8], MEMORY[0x1E0D6F1F0]);
      v38 = v26;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v39 = v104;
      v40 = v107;
      v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v21, v18);
      v41(v23, v18);
      if (v39 == v40)
        break;
      (*(void (**)(char *, uint64_t))(v103 + 8))(v30, v38);
      v35 += v99;
      --v33;
      v26 = v38;
      if (!v33)
      {
        v42 = 1;
        a1 = v91;
        v43 = v92;
        v7 = v90;
        v27 = v103;
        goto LABEL_8;
      }
    }
    v44 = v103;
    v43 = v92;
    (*(void (**)(char *, char *, uint64_t))(v103 + 32))(v92, v30, v38);
    v42 = 0;
    a1 = v91;
    v7 = v90;
    v26 = v38;
    v27 = v44;
  }
  else
  {
    v42 = 1;
    v43 = v92;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56))(v43, v42, 1, v26);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v43, 1, v26) == 1)
  {
    v45 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?;
    v46 = (uint64_t)v43;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v93, v43, v26);
    v47 = Apple_Parsec_Siri_V2alpha_ProfileSlice.values.getter();
    v48 = *(_QWORD *)(v47 + 16);
    v77 = v26;
    if (v48)
    {
      v49 = v97;
      v50 = (*(unsigned __int8 *)(v98 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v98 + 80);
      v99 = v47;
      v51 = v47 + v50;
      LODWORD(v102) = *MEMORY[0x1E0D6FCD0];
      v52 = *(void (**)(char *, unint64_t, uint64_t))(v98 + 16);
      v100 = *(void (**)(char *, unint64_t, uint64_t))(v98 + 72);
      v101 = v52;
      v53 = v87;
      v54 = v86;
      v55 = v94;
      v56 = v95;
      while (1)
      {
        v101(v54, v51, v53);
        Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
        v57 = v96;
        (*(void (**)(char *, _QWORD, uint64_t))(v96 + 104))(v56, v102, v49);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6FCE0], MEMORY[0x1E0D6FCE8]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        v58 = v104;
        v59 = v107;
        v60 = *(void (**)(char *, uint64_t))(v57 + 8);
        v60(v56, v49);
        v60(v55, v49);
        if (v58 == v59)
          break;
        v61 = v98;
        (*(void (**)(char *, uint64_t))(v98 + 8))(v54, v53);
        v51 += (unint64_t)v100;
        if (!--v48)
        {
          v62 = 1;
          a1 = v91;
          v7 = v90;
          v63 = v89;
          v64 = v88;
          goto LABEL_17;
        }
      }
      v61 = v98;
      v64 = v88;
      (*(void (**)(char *, char *, uint64_t))(v98 + 32))(v88, v54, v53);
      v62 = 0;
      a1 = v91;
      v7 = v90;
      v63 = v89;
    }
    else
    {
      v62 = 1;
      v53 = v87;
      v61 = v98;
      v63 = v89;
      v64 = v88;
    }
LABEL_17:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v61 + 56))(v64, v62, 1, v53);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v64, 1, v53) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v63, v64, v53);
      v65 = v80;
      v66 = v53;
      v67 = v61;
      Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.getter();
      Google_Protobuf_Any.value.getter();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v65, v82);
      v106 = 0;
      v104 = 0u;
      v105 = 0u;
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6DDC0], MEMORY[0x1E0D6DD90]);
      v68 = v85;
      Message.init(serializedData:extensions:partial:options:)();
      v69 = v84;
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v84 + 56))(v7, 0, 1, v68);
      v70 = v78;
      (*(void (**)(char *, char *, uint64_t))(v69 + 32))(v78, v7, v68);
      v71 = Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.getter();
      v72 = v68;
      v73 = v71;
      v75 = v74;
      (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v72);
      (*(void (**)(char *, uint64_t))(v67 + 8))(v63, v66);
      result = (*(uint64_t (**)(char *, uint64_t))(v103 + 8))(v93, v77);
      *a1 = v73;
      a1[1] = v75;
      return result;
    }
    (*(void (**)(char *, uint64_t))(v103 + 8))(v93, v77);
    v45 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?;
    v46 = (uint64_t)v64;
  }
  result = outlined destroy of MediaUserStateCenter?(v46, v45);
  *a1 = 0;
  a1[1] = 0;
  return result;
}

uint64_t closure #2 in PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  void (*v22)(char *, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  void (*v29)(char *, uint64_t);
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  void (*v36)(char *, uint64_t);
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t *v51;
  char *v52;
  uint64_t v53;
  void (*v54)(char *, unint64_t, uint64_t);
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppPunchOutBuilderParams();
  v56 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v49 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v52 = (char *)&v48 - v6;
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v48 - v7;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v50 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v48 - v13;
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
  v19 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  v55 = *(_QWORD *)(v19 + 16);
  if (v55)
  {
    v57 = v2;
    v51 = a1;
    v20 = 0;
    v21 = v19 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v22 = *(void (**)(char *, unint64_t, uint64_t))(v10 + 16);
    v53 = *(_QWORD *)(v10 + 72);
    v54 = v22;
    v23 = v10;
    while (1)
    {
      v54(v14, v21, v9);
      swift_bridgeObjectRetain();
      v24 = v19;
      v25 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      v26 = MEMORY[0x1C3BBC388](v25);
      v28 = v27;
      v29 = *(void (**)(char *, uint64_t))(v56 + 8);
      v29(v8, v57);
      swift_bridgeObjectRelease();
      v30 = HIBYTE(v28) & 0xF;
      if ((v28 & 0x2000000000000000) == 0)
        v30 = v26 & 0xFFFFFFFFFFFFLL;
      if (v30)
        break;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v14, v9);
      swift_bridgeObjectRelease();
      ++v20;
      v21 += v53;
      v19 = v24;
      if (v55 == v20)
        goto LABEL_10;
    }
    v34 = v52;
    v35 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
    MEMORY[0x1C3BBC388](v35);
    v29(v34, v57);
    v36 = *(void (**)(char *, uint64_t))(v23 + 8);
    v36(v14, v9);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v55 == v20)
    {
LABEL_10:
      result = swift_bridgeObjectRelease();
      v32 = 0;
      v33 = 0;
LABEL_16:
      a1 = v51;
      goto LABEL_17;
    }
    if (v20 >= *(_QWORD *)(v24 + 16))
    {
      __break(1u);
    }
    else
    {
      v8 = v50;
      v54(v50, v21, v9);
      v37 = v49;
      v38 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
      v39 = MEMORY[0x1C3BBC388](v38);
      v41 = v40;
      v42 = v37;
      v43 = v57;
      v29(v42, v57);
      swift_bridgeObjectRelease();
      v44 = HIBYTE(v41) & 0xF;
      if ((v41 & 0x2000000000000000) == 0)
        v44 = v39 & 0xFFFFFFFFFFFFLL;
      if (v44)
      {
        v45 = v52;
        v46 = Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.appPunchOut.getter();
        v32 = MEMORY[0x1C3BBC388](v46);
        v33 = v47;
        v29(v45, v43);
        v36(v8, v9);
        result = swift_bridgeObjectRelease();
        goto LABEL_16;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v36)(v8, v9);
    __break(1u);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v32 = 0;
    v33 = 0;
LABEL_17:
    *a1 = v32;
    a1[1] = v33;
  }
  return result;
}

void PegasusInstrumentationUtil.logPegasusKitPegasusRequest(requestId:pommesId:pommesCandidateId:startNetworkSearchFeedback:onDeviceLabels:)(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  id v16;
  void *v17;
  uint64_t v18;
  os_log_type_t v19;
  uint8_t *v20;
  void *v21;
  uint64_t v22;
  unint64_t started;
  unint64_t v24;
  id v25;
  void *v26;
  void *v27;
  void *v28;
  id v29;
  char v30;
  id v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  NSObject *v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;

  v36 = a6;
  v37 = a1;
  v38 = a2;
  v39 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A250]), sel_init);
  if (v16)
  {
    v17 = v16;
    v35 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A258]), sel_init);
    if (v35)
    {
      v34 = v6;
      Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.bodyData.getter();
      v42 = 0;
      v40 = 0u;
      v41 = 0u;
      BinaryDecodingOptions.init()();
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D028], MEMORY[0x1E0D6CFD8]);
      Message.init(serializedData:extensions:partial:options:)();
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v15, v12);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      v21 = (void *)specialized static PegasusInstrumentationUtil.requestArguments(from:onDeviceLabels:)((uint64_t)v10, a5, v36);
      outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
      objc_msgSend(v17, sel_setPegasusRequestArguments_, v21);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v22 = v34;
      started = Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.rawRequestSize.getter();
      if (started >> 42
        || (objc_msgSend(v17, sel_setRawRequestSizeInKB_, started >> 10),
            v24 = Apple_Parsec_Feedback_V2_StartNetworkSearchFeedback.compressedRequestSize.getter(),
            v24 >> 42))
      {
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      else
      {
        objc_msgSend(v17, sel_setCompressedRequestSizeInKB_, v24 >> 10);
        v25 = v35;
        objc_msgSend(v35, sel_setStartedOrChanged_, v17);
        v26 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(v37, v38, (uint64_t)v39);
        if (v26)
        {
          v27 = v26;
          objc_msgSend(v26, sel_setPegasusKitRequestContext_, v25);
          v28 = (void *)objc_opt_self();
          swift_retain();
          v29 = objc_msgSend(v28, sel_processInfo);
          v30 = NSProcessInfo.isRunningUnitTests.getter();

          if ((v30 & 1) != 0)
            v31 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v22 + 96))();
          else
            v31 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
          v32 = v31;
          swift_release();
          objc_msgSend(v32, sel_emitMessage_, v27);

          swift_unknownObjectRelease();
        }
        else
        {

        }
      }
      return;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  v39 = Logger.logObject.getter();
  v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1C2356000, v39, v19, "Failed to initialize POMMESSchemaPOMMESPegasusKitPegasusRequest or POMMESSchemaPOMMESPegasusKitPegasusRequestContext", v20, 2u);
    MEMORY[0x1C3BBFF64](v20, -1, -1);
  }

}

void PegasusInstrumentationUtil.logPegasusKitPegasusResponse(requestId:pommesId:pommesCandidateId:endNetworkSearchFeedback:)(uint64_t a1, uint64_t a2, NSObject *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  id v11;
  void *v12;
  id v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  void *v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  id v29;
  char v30;
  id v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  uint64_t v36;
  NSObject *v37;

  v7 = type metadata accessor for Apple_Parsec_Feedback_V2_NetworkTimingData();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A260]), sel_init);
  if (v11)
  {
    v12 = v11;
    v36 = v3;
    v37 = a3;
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A248]), sel_init);
    if (v13)
    {
      v14 = v13;
      v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A258]), sel_init);
      if (v15)
      {
        v16 = v15;
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        v17 = Apple_Parsec_Feedback_V2_NetworkTimingData.requestStart.getter();
        v18 = *(void (**)(char *, uint64_t))(v8 + 8);
        v18(v10, v7);
        objc_msgSend(v14, sel_setRequestStartOffsetInMS_, v17);
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        v19 = Apple_Parsec_Feedback_V2_NetworkTimingData.requestEnd.getter();
        v18(v10, v7);
        objc_msgSend(v14, sel_setRequestEndOffsetInMS_, v19);
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        v20 = Apple_Parsec_Feedback_V2_NetworkTimingData.responseStart.getter();
        v18(v10, v7);
        objc_msgSend(v14, sel_setResponseStartOffsetInMS_, v20);
        Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.timingData.getter();
        v21 = Apple_Parsec_Feedback_V2_NetworkTimingData.responseEnd.getter();
        v18(v10, v7);
        objc_msgSend(v14, sel_setResponseEndOffsetInMS_, v21);
        objc_msgSend(v12, sel_setTimingData_, v14);
        v22 = Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.decompressedResponseSize.getter();
        if (v22 >> 42
          || (objc_msgSend(v12, sel_setRawResponseSizeInKB_, v22 >> 10),
              v23 = Apple_Parsec_Feedback_V2_EndNetworkSearchFeedback.rawResponseSize.getter(),
              v23 >> 42))
        {
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
        }
        else
        {
          objc_msgSend(v12, sel_setCompressedResponseSizeInKB_, v23 >> 10);
          objc_msgSend(v16, sel_setEnded_, v12);
          v24 = specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a1, a2, (uint64_t)v37);
          if (v24)
          {
            v25 = v24;
            v26 = v16;
            objc_msgSend(v24, sel_setPegasusKitRequestContext_, v16);
            v27 = (void *)objc_opt_self();
            v28 = v36;
            swift_retain();
            v29 = objc_msgSend(v27, sel_processInfo);
            v30 = NSProcessInfo.isRunningUnitTests.getter();

            if ((v30 & 1) != 0)
              v31 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v28 + 96))();
            else
              v31 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
            v35 = v31;
            swift_release();
            objc_msgSend(v35, sel_emitMessage_, v25);

            swift_unknownObjectRelease();
          }
          else
          {

          }
        }
        return;
      }

    }
    else
    {
      v14 = v12;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v32 = type metadata accessor for Logger();
  __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
  v37 = Logger.logObject.getter();
  v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v37, v33))
  {
    v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v34 = 0;
    _os_log_impl(&dword_1C2356000, v37, v33, "Failed to initialize POMMESSchemaPOMMESPegasusKitPegasusResponse and POMMESSchemaPOMMESPegasusKitNetworkTimingData and POMMESSchemaPOMMESPegasusKitPegasusRequestContext", v34, 2u);
    MEMORY[0x1C3BBFF64](v34, -1, -1);
  }

}

id closure #1 in PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  id v22;
  id v23;
  id v24;
  id v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  char *v31;
  id v32;
  Class isa;
  id v34;
  unsigned int (*v35)(char *, uint64_t, uint64_t);
  id v36;
  id v37;
  NSUUID v38;
  id v39;
  char **v40;
  id v41;
  id v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  const char *v49;
  int v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  void *v62;
  char *v63;
  id v64;
  id v65;
  Class v66;
  id v67;
  id v68;
  void *v69;
  uint64_t v70;
  char *v72;
  char *v73;
  char *v74;
  uint64_t v75;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char **)((char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v72 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v73 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v72 - v14;
  v16 = type metadata accessor for UUID();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v72 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v72 - v20;
  v22 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A200]), sel_init);
  v75 = a3;
  if (v22)
  {
    v23 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
    v74 = v21;
    v24 = v23;
    v25 = v22;
    v26 = a2;
    v27 = v8;
    v28 = v16;
    v29 = v17;
    v30 = v22;
    v31 = v10;
    v32 = v25;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v34 = objc_msgSend(v24, sel_initWithNSUUID_, isa);

    objc_msgSend(v32, sel_setPommesId_, v34);
    v10 = v31;
    v22 = v30;
    v17 = v29;
    v16 = v28;
    v8 = v27;
    a2 = v26;

    v21 = v74;
    a3 = v75;
  }
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v15, &demangling cache variable for type metadata for UUID?);
  v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v35(v15, 1, v16) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for UUID?);
    goto LABEL_12;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v15, v16);
  if (AFDeviceSupportsSAE())
  {
    if (v22)
    {
      v36 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
      v37 = v22;
      v38.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v39 = objc_msgSend(v36, sel_initWithNSUUID_, v38.super.isa);
      v40 = &selRef_setSubRequestId_;
LABEL_10:

      objc_msgSend(v22, *v40, v39);
      a3 = v75;
    }
  }
  else if (v22)
  {
    v41 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
    v42 = v22;
    v38.super.isa = UUID._bridgeToObjectiveC()().super.isa;
    v39 = objc_msgSend(v41, sel_initWithNSUUID_, v38.super.isa);
    v40 = &selRef_setRequestId_;
    goto LABEL_10;
  }
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
LABEL_12:
  outlined init with copy of MediaUserStateCenter?(a3, (uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
  v43 = type metadata accessor for PommesCandidateId();
  v44 = *(_QWORD *)(v43 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v10, 1, v43) == 1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v46, v47))
      goto LABEL_18;
    v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v48 = 0;
    v49 = "PommesCandidateId is nil";
LABEL_17:
    _os_log_impl(&dword_1C2356000, v46, v47, v49, v48, 2u);
    MEMORY[0x1C3BBFF64](v48, -1, -1);
LABEL_18:

    goto LABEL_40;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v10, (uint64_t)v8, &demangling cache variable for type metadata for PommesCandidateId?);
  v50 = (*(uint64_t (**)(_QWORD *, uint64_t))(v44 + 88))(v8, v43);
  if (v50 == *MEMORY[0x1E0D988C8])
    goto LABEL_28;
  if (v50 != *MEMORY[0x1E0D988D0])
  {
    if (v50 != *MEMORY[0x1E0D988C0])
    {
      (*(void (**)(_QWORD *, uint64_t))(v44 + 8))(v8, v43);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v70 = type metadata accessor for Logger();
      __swift_project_value_buffer(v70, (uint64_t)static Logger.pommes);
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v46, v47))
        goto LABEL_18;
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      v49 = "Unknown PommesCandidateId";
      goto LABEL_17;
    }
LABEL_28:
    (*(void (**)(_QWORD *, uint64_t))(v44 + 96))(v8, v43);
    v59 = v8[1];
    if (v22)
    {
      v60 = *v8;
      v61 = v22;
      v62 = (void *)MEMORY[0x1C3BBEC44](v60, v59);
      swift_bridgeObjectRelease();
      objc_msgSend(v61, sel_setResultCandidateId_, v62);

    }
    else
    {
      swift_bridgeObjectRelease();
    }
    goto LABEL_40;
  }
  v51 = v10;
  (*(void (**)(_QWORD *, uint64_t))(v44 + 96))(v8, v43);
  v53 = *v8;
  v52 = v8[1];
  swift_bridgeObjectRelease();
  v54 = (uint64_t)v73;
  UUID.init(uuidString:)();
  if (v35((char *)v54, 1, v16) == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.pommes);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    v10 = v51;
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_1C2356000, v56, v57, "Unable to create UUID from trpId. Returning nil for POMMESSchemaPOMMESClientEvent.", v58, 2u);
      MEMORY[0x1C3BBFF64](v58, -1, -1);

    }
    else
    {

    }
    v22 = 0;
  }
  else
  {
    v63 = v72;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(v72, v54, v16);
    if (v22)
    {
      v64 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
      v65 = v22;
      v66 = UUID._bridgeToObjectiveC()().super.isa;
      v67 = objc_msgSend(v64, sel_initWithNSUUID_, v66);

      objc_msgSend(v65, sel_setTrpId_, v67);
      v68 = v65;
      v69 = (void *)MEMORY[0x1C3BBEC44](v53, v52);
      swift_bridgeObjectRelease();
      objc_msgSend(v68, sel_setResultCandidateId_, v69);

      (*(void (**)(char *, uint64_t))(v17 + 8))(v63, v16);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v17 + 8))(v63, v16);
      swift_bridgeObjectRelease();
    }
    v10 = v51;
  }
LABEL_40:
  outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
  return v22;
}

uint64_t PegasusInstrumentationUtil.deinit()
{
  uint64_t v0;

  swift_release();
  return v0;
}

uint64_t PegasusInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t specialized Sequence.compactMap<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = MEMORY[0x1E0DEE9D8];
  v11 = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(a1 + 16);
  if (v5)
  {
    v7 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusSearchQuery() - 8);
    v8 = a1 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v9 = *(_QWORD *)(v7 + 72);
    swift_bridgeObjectRetain();
    do
    {
      closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)(v8, a2, &v10);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v10)
      {
        MEMORY[0x1C3BBEE78]();
        if (*(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += v9;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    return v11;
  }
  return result;
}

{
  uint64_t result;
  uint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;

  result = MEMORY[0x1E0DEE9D8];
  v13 = MEMORY[0x1E0DEE9D8];
  v4 = *(_QWORD *)(a1 + 16);
  if (v4)
  {
    swift_bridgeObjectRetain();
    v6 = (uint64_t *)(a1 + 40);
    do
    {
      if (*(_QWORD *)(a2 + 16))
      {
        v7 = *(v6 - 1);
        v8 = *v6;
        swift_bridgeObjectRetain_n();
        v9 = specialized __RawDictionaryStorage.find<A>(_:)(v7, v8);
        if ((v10 & 1) != 0)
        {
          v11 = *(id *)(*(_QWORD *)(a2 + 56) + 8 * v9);
          v12 = swift_bridgeObjectRelease_n();
          MEMORY[0x1C3BBEE78](v12);
          if (*(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_bridgeObjectRelease_n();
        }
      }
      v6 += 2;
      --v4;
    }
    while (v4);
    swift_bridgeObjectRelease();
    return v13;
  }
  return result;
}

void *specialized PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id v6;
  void *v7;
  NSObject *v8;
  uint64_t v9;
  os_log_type_t v10;
  uint8_t *v11;

  v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1F8]), sel_init);
  if (v6)
  {
    v7 = v6;
    v8 = closure #1 in PegasusInstrumentationUtil.createEventWrapper(requestId:pommesId:pommesCandidateId:)(a2, a1, a3);
    objc_msgSend(v7, sel_setEventMetadata_, v8);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    v8 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1C2356000, v8, v10, "Failed to create POMMESSchemaPOMMESClientEvent", v11, 2u);
      MEMORY[0x1C3BBFF64](v11, -1, -1);
    }
    v7 = 0;
  }

  return v7;
}

id partial apply for closure #3 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = specialized PegasusInstrumentationUtil.buildServerDrivenContext(_:)();
  *a1 = result;
  return result;
}

void partial apply for closure #2 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(_QWORD *a1@<X8>)
{
  closure #2 in PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)(a1);
}

uint64_t sub_1C246FF34@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C246FF64(id *a1, uint64_t a2)
{
  return (*(uint64_t (**)(id))(**(_QWORD **)a2 + 104))(*a1);
}

uint64_t type metadata accessor for PegasusInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t method lookup function for PegasusInstrumentationUtil()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.mockStream.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.mockStream.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.mockStream.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logStartOfPegasusRequest(requestId:pommesId:pommesCandidateId:payloadSizeInKB:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.createPegasusRequestStartedEvent(payloadSizeInKB:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logEndOfPegasusRequest(requestId:pommesId:pommesCandidateId:status:confidenceScore:experience:payloadSizeInKB:pegasusDomain:isRewrittenUtteranceUsed:latencyInfo:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logFailedPegasusRequest(requestId:pommesId:pommesCandidateId:reason:errorCode:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v6;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v6 + 152))(a1, a2, a3, a4, a5, a6 & 1);
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logPegasusSelfOpaquePayloads(requestId:payloads:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logThirdPartyMapsAppSelectionResult(requestId:pommesId:pommesCandidateId:request:response:delegatedUDA:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logPegasusKitPegasusRequest(requestId:pommesId:pommesCandidateId:startNetworkSearchFeedback:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PegasusInstrumentationUtil.logPegasusKitPegasusResponse(requestId:pommesId:pommesCandidateId:endNetworkSearchFeedback:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

unint64_t specialized Sequence.compactMap<A>(_:)(void (*a1)(_QWORD), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  char *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  void (*v25)(_QWORD);
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;

  v30 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v9 = *(_QWORD *)(v27 - 8);
  v10 = MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v26 = (char *)&v24 - v12;
  v13 = *(_QWORD *)(a3 + 16);
  if (!v13)
    return MEMORY[0x1E0DEE9D8];
  v14 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest() - 8);
  v15 = a3 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  v28 = *(_QWORD *)(v14 + 72);
  v24 = a3;
  swift_bridgeObjectRetain();
  v16 = MEMORY[0x1E0DEE9D8];
  v25 = a1;
  v17 = v27;
  do
  {
    a1(v15);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v17) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
    }
    else
    {
      v18 = v9;
      v19 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
      v20 = v26;
      v19(v26, v8, v17);
      v19(v29, v20, v17);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1, v16);
      v22 = *(_QWORD *)(v16 + 16);
      v21 = *(_QWORD *)(v16 + 24);
      if (v22 >= v21 >> 1)
        v16 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v21 > 1, v22 + 1, 1, v16);
      *(_QWORD *)(v16 + 16) = v22 + 1;
      v17 = v27;
      v19((char *)(v16+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v22), v29, v27);
      v9 = v18;
      a1 = v25;
    }
    v15 += v28;
    --v13;
  }
  while (v13);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t specialized Sequence.compactMap<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return specialized Sequence.compactMap<A>(_:)(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6CE58]);
}

uint64_t specialized Sequence.compactMap<A>(_:)(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v4;
  uint64_t v6;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;

  v6 = *(_QWORD *)(a3 + 16);
  result = MEMORY[0x1E0DEE9D8];
  v14 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v9 = *(_QWORD *)(a4(0) - 8);
    v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    v11 = *(_QWORD *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      v12 = a1(&v13, v10);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (v13)
      {
        MEMORY[0x1C3BBEE78](v12);
        if (*(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v14;
  }
  return result;
}

_QWORD *ExperiencesResolver.defaultExperiences(from:with:)(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  void (*v15)(_QWORD **__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), _QWORD *, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t (*v18)(char *, uint64_t);
  uint64_t v19;
  void *v20;
  int v22;
  _QWORD v23[2];
  _QWORD *v24;
  unint64_t v25;
  _QWORD *v26;

  v5 = v4;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  if (one-time initialization token for shared != -1)
    v12 = swift_once();
  v24 = v23;
  v13 = (uint64_t *)static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v12);
  v22 = v5;
  Date.init()();
  v14 = *v13;
  v23[1] = v5;
  v15 = *(void (**)(_QWORD **__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), _QWORD *, uint64_t))(v14 + 200);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v23[0] = a4;
  v17 = v16;
  LOBYTE(v22) = 2;
  v15(&v26, 0xD00000000000002BLL, 0x80000001C2507170, 0, v11, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 60, "defaultExperiences(from:with:)", 30, v22, partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:), &v23[-8], v16);
  v18 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v19 = v18(v11, v8);
  v24 = v26;
  v20 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v19);
  v22 = a1;
  Date.init()();
  LOBYTE(v22) = 2;
  (*(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), _QWORD *, uint64_t))(*(_QWORD *)v20 + 200))(&v25, 0xD00000000000002ELL, 0x80000001C25071F0, 0, v11, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 63, "defaultExperiences(from:with:)", 30, v22, partial apply for closure #2 in ExperiencesResolver.defaultExperiences(from:with:), &v23[-8], v17);
  v18(v11, v8);
  v26 = v24;
  specialized Array.append<A>(contentsOf:)(v25);
  return v26;
}

uint64_t ExperiencesResolver.extractExperiences(from:score:with:)(_QWORD *a1, uint64_t a2, char *a3, char *a4, double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  void *v100;
  void (*v101)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)());
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  _QWORD *v114;
  void (*v115)(char *, char *, _QWORD *);
  char *v116;
  uint64_t v117;
  int v118;
  char *v119;
  char *v120;
  void (*v121)(char *, char *, uint64_t);
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  unint64_t v132;
  objc_class *v133;
  id v134;
  id v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  uint64_t v139;
  char *v140;
  char *v141;
  char *v142;
  uint64_t v143;
  uint64_t v144;
  char *v145;
  int v146;
  uint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  char v151;
  char *v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, uint64_t);
  uint64_t v157;
  id v158;
  id v159;
  void (*v160)(char *, uint64_t);
  void *v161;
  id v162;
  char *v163;
  uint64_t v164;
  id v165;
  uint64_t v166;
  unint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  char v171;
  char v172;
  uint64_t v173;
  char *v174;
  id v175;
  id v176;
  id v177;
  char *v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  int v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  NSObject *v188;
  os_log_type_t v189;
  _BOOL4 v190;
  uint64_t v191;
  uint8_t *v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t v198;
  uint64_t v199;
  NSObject *v200;
  os_log_type_t v201;
  uint8_t *v202;
  void (*v203)(char *, uint64_t);
  uint64_t v204;
  uint64_t v205;
  char *v206;
  unint64_t v207;
  int v209;
  unint64_t v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  char *v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  void (*v220)(char *, char *, uint64_t);
  char *v221;
  uint64_t v222;
  NSObject *v223;
  os_log_type_t v224;
  _BOOL4 v225;
  uint64_t v226;
  uint8_t *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  char *v231;
  void (*v232)(char *, uint64_t);
  uint64_t v233;
  char *v234;
  char *v235;
  int v236;
  uint64_t v237;
  char *v238;
  uint64_t v239;
  NSObject *v240;
  os_log_type_t v241;
  uint8_t *v242;
  uint64_t v243;
  uint64_t v244;
  unint64_t v245;
  int v246;
  uint64_t v247;
  char *v248;
  char *v249;
  NSObject *v250;
  os_log_type_t v251;
  _BOOL4 v252;
  uint64_t v253;
  uint8_t *v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  int v262;
  int v263;
  uint64_t v264;
  uint8_t *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  char *v269;
  NSObject *v270;
  os_log_type_t v271;
  uint8_t *v272;
  uint64_t v273;
  uint64_t v274;
  unint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  _QWORD *v279;
  id v280;
  uint64_t v281;
  void (*v282)(char *, uint64_t);
  char *v283;
  uint64_t v284;
  uint64_t v285;
  char *v286;
  NSObject *v287;
  os_log_type_t v288;
  uint8_t *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  uint64_t v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  _QWORD *v297;
  void *v298;
  uint64_t v299;
  char *v300;
  NSObject *v301;
  os_log_type_t v302;
  uint8_t *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  uint64_t v307;
  char *v308;
  NSObject *v309;
  os_log_type_t v310;
  uint8_t *v311;
  uint64_t v312;
  uint64_t v313;
  unint64_t v314;
  id v315;
  uint64_t v316;
  NSObject *v317;
  os_log_type_t v318;
  _BOOL4 v319;
  uint8_t *v320;
  uint8_t *v321;
  void (*v322)(char *, uint64_t);
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  id v327;
  id v328;
  uint64_t v329;
  char *v330;
  uint64_t v331;
  uint64_t v332;
  char *v333;
  _QWORD *v334;
  unint64_t v335;
  char *v336;
  char *v337;
  char *v338;
  char *v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  char *v343;
  char *v344;
  char *v345;
  uint64_t v346;
  uint64_t v347;
  char *v348;
  char *v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  char *v359;
  char *v360;
  uint64_t v361;
  char *v362;
  char *v363;
  char *v364;
  uint64_t v365;
  char *v366;
  char *v367;
  char *v368;
  char *v369;
  char *v370;
  uint64_t v371;
  char *v372;
  char *v373;
  uint64_t v374;
  char *v375;
  char *v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  char *v381;
  char *v382;
  char *v383;
  char *v384;
  char *v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  char *v398;
  uint64_t v399;
  char *v400;
  char *v401;
  char *v402;
  char *v403;
  _QWORD *v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  char *v408;
  uint64_t v409;
  unsigned int v410;
  uint64_t v411;
  _QWORD *v412;
  unsigned int v413;
  int v414;
  unsigned int v415;
  char **v416;
  char *v417;
  uint64_t v418;
  uint64_t v419;
  void (*v420)(char *, char *, _QWORD *);
  uint64_t v421;
  char *v422;
  char *v423;
  unint64_t v424;
  char *v425;
  _QWORD *v426;
  uint64_t v427;
  unint64_t v428;

  v403 = a4;
  v402 = a3;
  v387 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1E0C80A78](v7);
  v370 = (char *)&v336 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v355 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v354 = *(_QWORD *)(v355 - 8);
  v9 = MEMORY[0x1E0C80A78](v355);
  v349 = (char *)&v336 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v353 = (char *)&v336 - v11;
  v341 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  v342 = *(_QWORD *)(v341 - 8);
  v12 = MEMORY[0x1E0C80A78](v341);
  v337 = (char *)&v336 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v340 = (char *)&v336 - v14;
  v347 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v346 = *(_QWORD *)(v347 - 8);
  v15 = MEMORY[0x1E0C80A78](v347);
  v339 = (char *)&v336 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v345 = (char *)&v336 - v17;
  v352 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v351 = *(_QWORD *)(v352 - 8);
  v18 = MEMORY[0x1E0C80A78](v352);
  v344 = (char *)&v336 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v350 = (char *)&v336 - v20;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v21);
  v358 = (uint64_t)&v336 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v361 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v365 = *(_QWORD *)(v361 - 8);
  v23 = MEMORY[0x1E0C80A78](v361);
  v357 = (char *)&v336 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v360 = (char *)&v336 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  v27 = MEMORY[0x1E0C80A78](v26);
  v364 = (char *)&v336 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v27);
  v376 = (char *)&v336 - v29;
  v379 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  v378 = *(_QWORD *)(v379 - 8);
  v30 = MEMORY[0x1E0C80A78](v379);
  v362 = (char *)&v336 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v366 = (char *)&v336 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  v34 = MEMORY[0x1E0C80A78](v33);
  v369 = (char *)&v336 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v363 = (char *)&v336 - v37;
  MEMORY[0x1E0C80A78](v36);
  v375 = (char *)&v336 - v38;
  v388 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  v386 = *(_QWORD *)(v388 - 8);
  v39 = MEMORY[0x1E0C80A78](v388);
  v359 = (char *)&v336 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = MEMORY[0x1E0C80A78](v39);
  v348 = (char *)&v336 - v42;
  v43 = MEMORY[0x1E0C80A78](v41);
  v336 = (char *)&v336 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v338 = (char *)&v336 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v343 = (char *)&v336 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v356 = (char *)&v336 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v367 = (char *)&v336 - v52;
  MEMORY[0x1E0C80A78](v51);
  v377 = (char *)&v336 - v53;
  v392 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  v389 = *(_QWORD *)(v392 - 8);
  v54 = MEMORY[0x1E0C80A78](v392);
  v382 = (char *)&v336 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = MEMORY[0x1E0C80A78](v54);
  v380 = (char *)&v336 - v57;
  MEMORY[0x1E0C80A78](v56);
  v393 = (char *)&v336 - v58;
  v59 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1E0C80A78](v59);
  v368 = (char *)&v336 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1E0C80A78](v61);
  v381 = (char *)&v336 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v64 = MEMORY[0x1E0C80A78](v63);
  v385 = (char *)&v336 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v64);
  v372 = (char *)&v336 - v66;
  v374 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  v371 = *(_QWORD *)(v374 - 8);
  MEMORY[0x1E0C80A78](v374);
  v373 = (char *)&v336 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0);
  v396 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v395 = *(_QWORD *)(v396 - 8);
  MEMORY[0x1E0C80A78](v396);
  v401 = (char *)&v336 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1E0C80A78](v69);
  v71 = (char *)&v336 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v72 = type metadata accessor for PommesRenderOptions.PromptType();
  v73 = *(_QWORD *)(v72 - 8);
  v74 = MEMORY[0x1E0C80A78](v72);
  v422 = (char *)&v336 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v74);
  v417 = (char *)&v336 - v76;
  v426 = (_QWORD *)type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  v418 = *(v426 - 1);
  v77 = MEMORY[0x1E0C80A78](v426);
  v423 = (char *)&v336 - ((v78 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v77);
  v425 = (char *)&v336 - v79;
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1E0C80A78](v80);
  v400 = (char *)&v336 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v411 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  v409 = *(_QWORD *)(v411 - 8);
  v82 = MEMORY[0x1E0C80A78](v411);
  v394 = (char *)&v336 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v82);
  v398 = (char *)&v336 - v84;
  v424 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  v421 = *(_QWORD *)(v424 - 8);
  MEMORY[0x1E0C80A78](v424);
  v86 = (char *)&v336 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = type metadata accessor for Date();
  v419 = *(_QWORD *)(v87 - 8);
  v420 = (void (*)(char *, char *, _QWORD *))v87;
  MEMORY[0x1E0C80A78](v87);
  v89 = (char *)&v336 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v405 = *(_QWORD *)(v90 - 8);
  v91 = MEMORY[0x1E0C80A78](v90);
  v384 = (char *)&v336 - ((v92 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = MEMORY[0x1E0C80A78](v91);
  v383 = (char *)&v336 - v94;
  MEMORY[0x1E0C80A78](v93);
  v96 = (char *)&v336 - v95;
  v399 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  v397 = *(_QWORD *)(v399 - 8);
  MEMORY[0x1E0C80A78](v399);
  v98 = (char *)&v336 - ((v97 + 15) & 0xFFFFFFFFFFFFFFF0);
  v412 = a1;
  v99 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1)
    v99 = swift_once();
  v416 = &v336;
  v100 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v99);
  v332 = (uint64_t)v402;
  v333 = v403;
  v334 = v404;
  v335 = (unint64_t)v98;
  v406 = v98;
  Date.init()();
  v101 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(_QWORD *)v100 + 200);
  v407 = v90;
  v334 = &v330;
  v335 = v90;
  LOBYTE(v332) = 2;
  v408 = v96;
  v101(0xD00000000000001ELL, 0x80000001C2507220, 0, v89, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 108, "extractExperiences(from:score:with:)", 36, v332, partial apply for closure #1 in ExperiencesResolver.extractExperiences(from:score:with:));
  v391 = 0;
  (*(void (**)(char *, void (*)(char *, char *, _QWORD *)))(v419 + 8))(v89, v420);
  v102 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  v103 = MEMORY[0x1C3BBBC2C](v102);
  v104 = v86;
  v105 = v103;
  (*(void (**)(char *, unint64_t))(v421 + 8))(v104, v424);
  v106 = *(_QWORD *)(v105 + 16);
  if (v106)
  {
    v107 = v105 + ((*(unsigned __int8 *)(v418 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v418 + 80));
    v108 = *(_QWORD *)(v418 + 72);
    v109 = v418;
    v420 = *(void (**)(char *, char *, _QWORD *))(v418 + 16);
    v421 = v108;
    LODWORD(v419) = *MEMORY[0x1E0D6F290];
    LODWORD(v416) = *MEMORY[0x1E0D6F280];
    v414 = *MEMORY[0x1E0D6F288];
    v410 = *MEMORY[0x1E0D98E70];
    v413 = *MEMORY[0x1E0D98E68];
    v415 = *MEMORY[0x1E0D98E78];
    v390 = v105;
    swift_bridgeObjectRetain();
    v424 = MEMORY[0x1E0DEE9D8];
    do
    {
      v110 = v72;
      v111 = v73;
      v112 = v71;
      v113 = v425;
      v114 = v426;
      v115 = v420;
      v420(v425, (char *)v107, v426);
      v116 = v423;
      v115(v423, v113, v114);
      v117 = v109;
      v118 = (*(uint64_t (**)(char *, _QWORD *))(v109 + 88))(v116, v114);
      if (v118 == (_DWORD)v419)
      {
        v73 = v111;
        v71 = v112;
        v119 = v112;
        v72 = v110;
        (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v119, v415, v110);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v71, 0, 1, v110);
      }
      else
      {
        v71 = v112;
        v73 = v111;
        if (v118 == (_DWORD)v416)
        {
          v120 = v112;
          v72 = v110;
          (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v120, v413, v110);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v71, 0, 1, v110);
        }
        else
        {
          v72 = v110;
          if (v118 == v414)
          {
            (*(void (**)(char *, _QWORD, uint64_t))(v111 + 104))(v71, v410, v110);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v111 + 56))(v71, 0, 1, v110);
          }
          else
          {
            if (one-time initialization token for pommes != -1)
              swift_once();
            v127 = type metadata accessor for Logger();
            __swift_project_value_buffer(v127, (uint64_t)static Logger.pommes);
            v128 = Logger.logObject.getter();
            v129 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v128, v129))
            {
              v130 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v130 = 0;
              _os_log_impl(&dword_1C2356000, v128, v129, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v130, 2u);
              v117 = v418;
              MEMORY[0x1C3BBFF64](v130, -1, -1);
            }

            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v111 + 56))(v71, 1, 1, v72);
            (*(void (**)(char *, _QWORD *))(v117 + 8))(v423, v426);
          }
        }
      }
      (*(void (**)(char *, _QWORD *))(v117 + 8))(v425, v426);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72) == 1)
      {
        v109 = v117;
        outlined destroy of MediaUserStateCenter?((uint64_t)v71, &demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        v121 = *(void (**)(char *, char *, uint64_t))(v73 + 32);
        v122 = v417;
        v121(v417, v71, v72);
        v121(v422, v122, v72);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v424 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v424 + 16) + 1, 1, v424);
        v123 = v424;
        v125 = *(_QWORD *)(v424 + 16);
        v124 = *(_QWORD *)(v424 + 24);
        if (v125 >= v124 >> 1)
          v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, v125 + 1, 1, v424);
        *(_QWORD *)(v123 + 16) = v125 + 1;
        v126 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
        v424 = v123;
        v121((char *)(v123 + v126 + *(_QWORD *)(v73 + 72) * v125), v422, v72);
        v109 = v418;
      }
      v107 += v421;
      --v106;
    }
    while (v106);
    v131 = swift_bridgeObjectRelease_n();
    v132 = v424;
  }
  else
  {
    v131 = swift_bridgeObjectRelease();
    v132 = MEMORY[0x1E0DEE9D8];
  }
  MEMORY[0x1E0C80A78](v131);
  v334 = (_QWORD *)v132;
  v133 = (objc_class *)type metadata accessor for PommesRenderOptions();
  v134 = objc_allocWithZone(v133);
  v135 = (id)PommesRenderOptions.init(_:)();
  v136 = (uint64_t)v400;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  v137 = v409;
  v138 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v409 + 48))(v136, 1, v411);
  v139 = v407;
  v140 = v406;
  v141 = v408;
  if (v138 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v136, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
LABEL_61:

    (*(void (**)(char *, uint64_t))(v405 + 8))(v141, v139);
    (*(void (**)(char *, uint64_t))(v397 + 8))(v140, v399);
    return MEMORY[0x1E0DEE9D8];
  }
  v424 = v132;
  v142 = v398;
  v143 = v136;
  v144 = v411;
  (*(void (**)(char *, uint64_t, uint64_t))(v137 + 32))(v398, v143, v411);
  v145 = v394;
  (*(void (**)(char *, char *, uint64_t))(v137 + 16))(v394, v142, v144);
  v146 = (*(uint64_t (**)(char *, uint64_t))(v137 + 88))(v145, v144);
  if (v146 != *MEMORY[0x1E0D6D078])
  {
    v184 = v146;
    v185 = *MEMORY[0x1E0D6D070];
    swift_bridgeObjectRelease();
    if (v184 != v185)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v199 = type metadata accessor for Logger();
      __swift_project_value_buffer(v199, (uint64_t)static Logger.pommes);
      v200 = Logger.logObject.getter();
      v201 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v200, v201))
      {
        v202 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v202 = 0;
        _os_log_impl(&dword_1C2356000, v200, v201, "unexpected experience component", v202, 2u);
        MEMORY[0x1C3BBFF64](v202, -1, -1);
      }

      v203 = *(void (**)(char *, uint64_t))(v137 + 8);
      v204 = v411;
      v203(v398, v411);
      v203(v145, v204);
      goto LABEL_61;
    }
    (*(void (**)(char *, uint64_t))(v137 + 96))(v145, v411);
    (*(void (**)(char *, char *, uint64_t))(v389 + 32))(v393, v145, v392);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v186 = type metadata accessor for Logger();
    v187 = __swift_project_value_buffer(v186, (uint64_t)static Logger.pommes);
    v188 = Logger.logObject.getter();
    v189 = static os_log_type_t.debug.getter();
    v190 = os_log_type_enabled(v188, v189);
    v191 = (uint64_t)v375;
    if (v190)
    {
      v192 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v192 = 0;
      _os_log_impl(&dword_1C2356000, v188, v189, "Adding a client driven experience", v192, 2u);
      v193 = v192;
      v137 = v409;
      MEMORY[0x1C3BBFF64](v193, -1, -1);
    }

    v194 = MEMORY[0x1C3BBC250]();
    v195 = *(_QWORD *)(v194 + 16);
    v196 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
    v197 = *(_QWORD *)(v196 - 8);
    if (v195)
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v197 + 16))(v191, v194 + ((*(unsigned __int8 *)(v197 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v197 + 80)), v196);
      v198 = 0;
    }
    else
    {
      v198 = 1;
    }
    v423 = *(char **)(v197 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v423)(v191, v198, 1, v196);
    swift_bridgeObjectRelease();
    v422 = *(char **)(v197 + 48);
    v209 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v422)(v191, 1, v196);
    v426 = v135;
    v210 = v197;
    v211 = (uint64_t)v376;
    v424 = v210;
    v425 = (char *)v187;
    if (v209 == 1)
    {
      v212 = v139;
      outlined destroy of MediaUserStateCenter?(v191, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
      goto LABEL_73;
    }
    v213 = v367;
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    (*(void (**)(uint64_t, uint64_t))(v210 + 8))(v191, v196);
    v214 = v386;
    v215 = v377;
    v216 = v388;
    (*(void (**)(char *, char *, uint64_t))(v386 + 32))(v377, v213, v388);
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
    v217 = v378;
    v218 = v379;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v378 + 48))(v211, 1, v379) == 1)
    {
      (*(void (**)(char *, uint64_t))(v214 + 8))(v215, v216);
      outlined destroy of MediaUserStateCenter?(v211, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      v212 = v407;
LABEL_73:
      v219 = v389;
      v220 = *(void (**)(char *, char *, uint64_t))(v389 + 16);
      v221 = v380;
      v222 = v392;
      v220(v380, v393, v392);
      v223 = Logger.logObject.getter();
      v224 = static os_log_type_t.debug.getter();
      v225 = os_log_type_enabled(v223, v224);
      v226 = (uint64_t)v370;
      if (v225)
      {
        v227 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v227 = 67109120;
        v228 = MEMORY[0x1C3BBC250]();
        if (*(_QWORD *)(v228 + 16))
        {
          v229 = (uint64_t)v363;
          (*(void (**)(char *, unint64_t, uint64_t))(v424 + 16))(v363, v228 + ((*(unsigned __int8 *)(v424 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v424 + 80)), v196);
          v230 = 0;
        }
        else
        {
          v230 = 1;
          v229 = (uint64_t)v363;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v423)(v229, v230, 1, v196);
        swift_bridgeObjectRelease();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v422)(v229, 1, v196) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v229, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
          v246 = 0;
          v247 = 1;
        }
        else
        {
          Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
          (*(void (**)(uint64_t, uint64_t))(v424 + 8))(v229, v196);
          v247 = 0;
          v246 = 1;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v386 + 56))(v226, v247, 1, v388);
        outlined destroy of MediaUserStateCenter?(v226, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        v232 = *(void (**)(char *, uint64_t))(v219 + 8);
        v233 = v392;
        v232(v380, v392);
        LODWORD(v428) = v246;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v223, v224, "Has clientComponent? %{BOOL}d", v227, 8u);
        MEMORY[0x1C3BBFF64](v227, -1, -1);
        v212 = v407;
      }
      else
      {
        v231 = v221;
        v232 = *(void (**)(char *, uint64_t))(v219 + 8);
        v232(v231, v222);
        v233 = v222;
      }

      v248 = v382;
      v249 = v393;
      v220(v382, v393, v233);
      v250 = Logger.logObject.getter();
      v251 = static os_log_type_t.debug.getter();
      v252 = os_log_type_enabled(v250, v251);
      v253 = (uint64_t)v369;
      if (!v252)
      {
        v232(v248, v233);
        v257 = v406;
        v258 = v397;
        v259 = v411;
LABEL_95:

        v232(v249, v233);
        (*(void (**)(char *, uint64_t))(v409 + 8))(v398, v259);
        (*(void (**)(char *, uint64_t))(v405 + 8))(v408, v212);
        (*(void (**)(char *, uint64_t))(v258 + 8))(v257, v399);
        return MEMORY[0x1E0DEE9D8];
      }
      v254 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v254 = 67109120;
      v255 = MEMORY[0x1C3BBC250]();
      if (*(_QWORD *)(v255 + 16))
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v424 + 16))(v253, v255 + ((*(unsigned __int8 *)(v424 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v424 + 80)), v196);
        v256 = 0;
      }
      else
      {
        v256 = 1;
      }
      v260 = (uint64_t)v364;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v423)(v253, v256, 1, v196);
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v422)(v253, 1, v196) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v253, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v378 + 56))(v260, 1, 1, v379);
        v257 = v406;
        v258 = v397;
      }
      else
      {
        v261 = v359;
        Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
        (*(void (**)(uint64_t, uint64_t))(v424 + 8))(v253, v196);
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
        (*(void (**)(char *, uint64_t))(v386 + 8))(v261, v388);
        v262 = 1;
        v263 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v378 + 48))(v260, 1, v379);
        v257 = v406;
        v258 = v397;
        if (v263 != 1)
        {
LABEL_94:
          outlined destroy of MediaUserStateCenter?(v260, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
          v264 = v392;
          v232(v382, v392);
          LODWORD(v428) = v262;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2356000, v250, v251, "Has domainComponent? %{BOOL}d", v254, 8u);
          v265 = v254;
          v233 = v264;
          MEMORY[0x1C3BBFF64](v265, -1, -1);
          v259 = v411;
          v249 = v393;
          goto LABEL_95;
        }
      }
      v262 = 0;
      goto LABEL_94;
    }
    v234 = v366;
    (*(void (**)(char *, uint64_t, uint64_t))(v217 + 32))(v366, v211, v218);
    v235 = v362;
    (*(void (**)(char *, char *, uint64_t))(v217 + 16))(v362, v234, v218);
    v236 = (*(uint64_t (**)(char *, uint64_t))(v217 + 88))(v235, v218);
    if (v236 == *MEMORY[0x1E0D6FA68])
    {
      (*(void (**)(char *, uint64_t))(v217 + 96))(v235, v218);
      (*(void (**)(char *, char *, uint64_t))(v365 + 32))(v360, v235, v361);
      v237 = v386;
      v238 = v356;
      v239 = v388;
      (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v356, v377, v388);
      v240 = Logger.logObject.getter();
      v241 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v240, v241))
      {
        v242 = (uint8_t *)swift_slowAlloc();
        v243 = swift_slowAlloc();
        v428 = v243;
        *(_DWORD *)v242 = 136315138;
        v244 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v427 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v244, v245, (uint64_t *)&v428);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v425 = *(char **)(v237 + 8);
        ((void (*)(char *, uint64_t))v425)(v238, v239);
        _os_log_impl(&dword_1C2356000, v240, v241, "Adding AudioExperience with identifier %s to PommesResponse", v242, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v243, -1, -1);
        MEMORY[0x1C3BBFF64](v242, -1, -1);
      }
      else
      {
        v425 = *(char **)(v237 + 8);
        ((void (*)(char *, uint64_t))v425)(v238, v239);
      }

      v276 = v407;
      type metadata accessor for AudioExperience();
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v277 = v360;
      v278 = v361;
      (*(void (**)(char *, char *, uint64_t))(v365 + 16))(v357, v360, v361);
      (*(void (**)(char *, char *, uint64_t))(v405 + 16))(v383, v408, v276);
      outlined init with copy of ClientExperienceSignals?(v387, v358);
      v279 = v426;
      v280 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v281 = swift_allocObject();
      *(_OWORD *)(v281 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v281 + 32) = v280;
      v428 = v281;
      specialized Array._endMutation()();
      v205 = v428;

      (*(void (**)(char *, uint64_t))(v365 + 8))(v277, v278);
      (*(void (**)(char *, uint64_t))(v378 + 8))(v366, v379);
      ((void (*)(char *, uint64_t))v425)(v377, v388);
      (*(void (**)(char *, uint64_t))(v389 + 8))(v393, v392);
      (*(void (**)(char *, uint64_t))(v409 + 8))(v398, v411);
      v282 = *(void (**)(char *, uint64_t))(v405 + 8);
      v283 = v408;
LABEL_101:
      v284 = v276;
LABEL_118:
      v282(v283, v284);
      (*(void (**)(char *, uint64_t))(v397 + 8))(v406, v399);
      return v205;
    }
    v266 = v388;
    v135 = v426;
    v267 = v377;
    if (v236 == *MEMORY[0x1E0D6FA70])
    {
      (*(void (**)(char *, uint64_t))(v217 + 96))(v235, v218);
      (*(void (**)(char *, char *, uint64_t))(v354 + 32))(v353, v235, v355);
      v268 = v386;
      v269 = v348;
      (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v348, v267, v266);
      v270 = Logger.logObject.getter();
      v271 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v270, v271))
      {
        v272 = (uint8_t *)swift_slowAlloc();
        v273 = swift_slowAlloc();
        v428 = v273;
        *(_DWORD *)v272 = 136315138;
        v274 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v427 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v274, v275, (uint64_t *)&v428);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v425 = *(char **)(v268 + 8);
        ((void (*)(char *, uint64_t))v425)(v269, v266);
        _os_log_impl(&dword_1C2356000, v270, v271, "Adding VideoExperience with identifier %s to PommesResponse", v272, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v273, -1, -1);
        MEMORY[0x1C3BBFF64](v272, -1, -1);
      }
      else
      {
        v425 = *(char **)(v268 + 8);
        ((void (*)(char *, uint64_t))v425)(v269, v266);
      }

      v293 = v407;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v294 = v354;
      v295 = v353;
      v296 = v355;
      (*(void (**)(char *, char *, uint64_t))(v354 + 16))(v349, v353, v355);
      (*(void (**)(char *, char *, uint64_t))(v405 + 16))(v383, v408, v293);
      objc_allocWithZone((Class)type metadata accessor for VideoExperience());
      v297 = v426;
      v298 = (void *)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
    }
    else if (v236 == *MEMORY[0x1E0D6FA58])
    {
      (*(void (**)(char *, uint64_t))(v217 + 96))(v235, v218);
      (*(void (**)(char *, char *, uint64_t))(v351 + 32))(v350, v235, v352);
      v285 = v386;
      v286 = v343;
      (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v343, v267, v266);
      v287 = Logger.logObject.getter();
      v288 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v287, v288))
      {
        v289 = (uint8_t *)swift_slowAlloc();
        v290 = swift_slowAlloc();
        v428 = v290;
        *(_DWORD *)v289 = 136315138;
        v291 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v427 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v291, v292, (uint64_t *)&v428);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v425 = *(char **)(v285 + 8);
        ((void (*)(char *, uint64_t))v425)(v286, v266);
        _os_log_impl(&dword_1C2356000, v287, v288, "Adding GeoExperience with identifier %s to PommesResponse", v289, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v290, -1, -1);
        MEMORY[0x1C3BBFF64](v289, -1, -1);
      }
      else
      {
        v425 = *(char **)(v285 + 8);
        ((void (*)(char *, uint64_t))v425)(v286, v266);
      }

      v293 = v407;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v294 = v351;
      v295 = v350;
      v296 = v352;
      (*(void (**)(char *, char *, uint64_t))(v351 + 16))(v344, v350, v352);
      (*(void (**)(char *, char *, uint64_t))(v405 + 16))(v383, v408, v293);
      objc_allocWithZone((Class)type metadata accessor for GeoExperience());
      v297 = v426;
      v298 = (void *)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
    }
    else
    {
      if (v236 != *MEMORY[0x1E0D6FA60])
      {
        if (v236 != *MEMORY[0x1E0D6FA50])
        {
          v317 = Logger.logObject.getter();
          v318 = static os_log_type_t.error.getter();
          v319 = os_log_type_enabled(v317, v318);
          v139 = v407;
          if (v319)
          {
            v320 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v320 = 0;
            _os_log_impl(&dword_1C2356000, v317, v318, "Unexpected DomainComponent encountered when building Client Driven experience", v320, 2u);
            v321 = v320;
            v267 = v377;
            MEMORY[0x1C3BBFF64](v321, -1, -1);
          }

          v322 = *(void (**)(char *, uint64_t))(v378 + 8);
          v323 = v379;
          v322(v366, v379);
          (*(void (**)(char *, uint64_t))(v386 + 8))(v267, v266);
          (*(void (**)(char *, uint64_t))(v389 + 8))(v393, v392);
          (*(void (**)(char *, uint64_t))(v137 + 8))(v398, v411);
          v322(v362, v323);
          v140 = v406;
          v141 = v408;
          goto LABEL_61;
        }
        (*(void (**)(char *, uint64_t))(v217 + 96))(v235, v218);
        (*(void (**)(char *, char *, uint64_t))(v342 + 32))(v340, v235, v341);
        v307 = v386;
        v308 = v336;
        (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v336, v267, v266);
        v309 = Logger.logObject.getter();
        v310 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v309, v310))
        {
          v311 = (uint8_t *)swift_slowAlloc();
          v312 = swift_slowAlloc();
          v428 = v312;
          *(_DWORD *)v311 = 136315138;
          v313 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v427 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v313, v314, (uint64_t *)&v428);
          v266 = v388;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v425 = *(char **)(v307 + 8);
          ((void (*)(char *, uint64_t))v425)(v308, v266);
          _os_log_impl(&dword_1C2356000, v309, v310, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v311, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v312, -1, -1);
          MEMORY[0x1C3BBFF64](v311, -1, -1);
        }
        else
        {
          v425 = *(char **)(v307 + 8);
          ((void (*)(char *, uint64_t))v425)(v308, v266);
        }

        v276 = v407;
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v324 = v340;
        v325 = v341;
        (*(void (**)(char *, char *, uint64_t))(v342 + 16))(v337, v340, v341);
        v326 = v408;
        (*(void (**)(char *, char *, uint64_t))(v405 + 16))(v383, v408, v276);
        v327 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
        v328 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v329 = swift_allocObject();
        *(_OWORD *)(v329 + 16) = xmmword_1C24FB5A0;
        *(_QWORD *)(v329 + 32) = v328;
        v428 = v329;
        specialized Array._endMutation()();
        v205 = v428;

        (*(void (**)(char *, uint64_t))(v342 + 8))(v324, v325);
        (*(void (**)(char *, uint64_t))(v378 + 8))(v366, v379);
        ((void (*)(char *, uint64_t))v425)(v377, v266);
        (*(void (**)(char *, uint64_t))(v389 + 8))(v393, v392);
        (*(void (**)(char *, uint64_t))(v409 + 8))(v398, v411);
        v282 = *(void (**)(char *, uint64_t))(v405 + 8);
        v283 = v326;
        goto LABEL_101;
      }
      (*(void (**)(char *, uint64_t))(v217 + 96))(v235, v218);
      (*(void (**)(char *, char *, uint64_t))(v346 + 32))(v345, v235, v347);
      v299 = v386;
      v300 = v338;
      (*(void (**)(char *, char *, uint64_t))(v386 + 16))(v338, v267, v266);
      v301 = Logger.logObject.getter();
      v302 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v301, v302))
      {
        v303 = (uint8_t *)swift_slowAlloc();
        v304 = swift_slowAlloc();
        v428 = v304;
        *(_DWORD *)v303 = 136315138;
        v305 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v427 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v305, v306, (uint64_t *)&v428);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v425 = *(char **)(v299 + 8);
        ((void (*)(char *, uint64_t))v425)(v300, v266);
        _os_log_impl(&dword_1C2356000, v301, v302, "Adding AppsExperience with identfier %s to PommesResponse", v303, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v304, -1, -1);
        MEMORY[0x1C3BBFF64](v303, -1, -1);
      }
      else
      {
        v425 = *(char **)(v299 + 8);
        ((void (*)(char *, uint64_t))v425)(v300, v266);
      }

      v293 = v407;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v294 = v346;
      v295 = v345;
      v296 = v347;
      (*(void (**)(char *, char *, uint64_t))(v346 + 16))(v339, v345, v347);
      (*(void (**)(char *, char *, uint64_t))(v405 + 16))(v383, v408, v293);
      objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
      v297 = v426;
      v298 = (void *)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
    }
    v315 = v298;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v316 = swift_allocObject();
    *(_OWORD *)(v316 + 16) = xmmword_1C24FB5A0;
    *(_QWORD *)(v316 + 32) = v315;
    v428 = v316;
    specialized Array._endMutation()();
    v205 = v428;

    (*(void (**)(char *, uint64_t))(v294 + 8))(v295, v296);
    (*(void (**)(char *, uint64_t))(v378 + 8))(v366, v379);
    ((void (*)(char *, uint64_t))v425)(v377, v388);
    (*(void (**)(char *, uint64_t))(v389 + 8))(v393, v392);
    (*(void (**)(char *, uint64_t))(v409 + 8))(v398, v411);
    v282 = *(void (**)(char *, uint64_t))(v405 + 8);
    v283 = v408;
    v284 = v293;
    goto LABEL_118;
  }
  (*(void (**)(char *, uint64_t))(v137 + 96))(v145, v411);
  (*(void (**)(char *, char *, uint64_t))(v395 + 32))(v401, v145, v396);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v147 = type metadata accessor for Logger();
  __swift_project_value_buffer(v147, (uint64_t)static Logger.pommes);
  v148 = Logger.logObject.getter();
  v149 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v148, v149))
  {
    v150 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v150 = 0;
    _os_log_impl(&dword_1C2356000, v148, v149, "Adding a server driven experience", v150, 2u);
    MEMORY[0x1C3BBFF64](v150, -1, -1);
  }

  v428 = MEMORY[0x1E0DEE9D8];
  v151 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter();
  v426 = v135;
  if ((v151 & 1) != 0)
  {
    v152 = v141;
    v153 = v373;
    v154 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    MEMORY[0x1C3BBBAD0](v154);
    v155 = v139;
    v156 = *(void (**)(char *, uint64_t))(v371 + 8);
    v157 = v374;
    v156(v153, v374);
    (*(void (**)(char *, char *, uint64_t))(v405 + 16))(v383, v152, v155);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    v158 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    v159 = v135;
    v160 = v156;
    v161 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    LOBYTE(v155) = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
    v156(v153, v157);
    if ((v155 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
      type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C24FA1B0;
      v162 = v161;
      Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
      v160(v153, v157);
      dispatch thunk of Experience.associatedEntities.setter();

    }
    if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
    {
      v163 = v381;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      v164 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v164 - 8) + 56))(v163, 0, 1, v164);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    v165 = v161;
    MEMORY[0x1C3BBEE78]();
    v139 = v407;
    v135 = v426;
    v141 = v408;
    if (*(_QWORD *)((v428 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v428 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

  }
  v166 = MEMORY[0x1C3BBC328]();
  MEMORY[0x1E0C80A78](v166);
  v332 = *(_QWORD *)&a5;
  v333 = v141;
  v334 = v412;
  v335 = (unint64_t)v135;
  v167 = specialized Sequence.compactMap<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #4 in ExperiencesResolver.extractExperiences(from:score:with:), (uint64_t)&v330, v166, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EFC8]);
  swift_bridgeObjectRelease();
  v168 = v401;
  v169 = specialized Array.append<A>(contentsOf:)(v167);
  v170 = *(_QWORD *)(MEMORY[0x1C3BBC31C](v169) + 16);
  swift_bridgeObjectRelease();
  if (v170)
  {
    v171 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
    v172 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
    MEMORY[0x1C3BBC31C]();
    (*(void (**)(char *, char *, uint64_t))(v405 + 16))(v384, v141, v139);
    v173 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    MEMORY[0x1E0C80A78](v173);
    v174 = v403;
    *(&v336 - 8) = v402;
    *(&v336 - 7) = v174;
    v330 = v168;
    LOBYTE(v331) = v171 & 1;
    v332 = v387;
    v333 = (char *)v404;
    LOBYTE(v334) = v172 & 1;
    v335 = v424;
    v175 = objc_allocWithZone(v133);
    PommesRenderOptions.init(_:)();
    swift_bridgeObjectRelease();
    v176 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    v177 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
    {
      v178 = v381;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      v179 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v179 - 8) + 56))(v178, 0, 1, v179);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    v180 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
    v181 = v409;
    if ((v180 & 1) != 0)
    {
      v182 = v368;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
      v183 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v183 - 8) + 56))(v182, 0, 1, v183);
      v180 = dispatch thunk of GenericExperience.sageExperience.setter();
    }
    MEMORY[0x1C3BBEE78](v180);
    v141 = v408;
    v139 = v407;
    v135 = v426;
    if (*(_QWORD *)((v428 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v428 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
  }
  else
  {
    swift_bridgeObjectRelease();
    v181 = v409;
  }
  v206 = v406;
  v207 = v428;
  if (v428 >> 62)
  {
    type metadata accessor for Experience();
    swift_bridgeObjectRetain();
    v205 = _bridgeCocoaArray<A>(_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for Experience();

    v205 = v207;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v181 + 8))(v398, v411);
  (*(void (**)(char *, uint64_t))(v395 + 8))(v401, v396);
  (*(void (**)(char *, uint64_t))(v405 + 8))(v141, v139);
  (*(void (**)(char *, uint64_t))(v397 + 8))(v206, v399);
  return v205;
}

uint64_t closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, double))(a3 + 24))(v13, a1, a2, a3, a5);
  result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  *a4 = v14;
  return result;
}

uint64_t partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)()
{
  return partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))closure #1 in ExperiencesResolver.defaultExperiences(from:with:));
}

uint64_t closure #2 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, _QWORD *a4@<X8>, double a5@<D0>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(unint64_t, uint64_t, uint64_t, uint64_t, double);
  unint64_t v16;
  uint64_t result;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;

  v10 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  v21 = MEMORY[0x1E0DEE9D8];
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v19 = a4;
    v12 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    v13 = v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v14 = *(_QWORD *)(v12 + 72);
    v15 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t, double))(a3 + 24);
    swift_bridgeObjectRetain();
    while (1)
    {
      v16 = v15(v13, a1, a2, a3, a5);
      if (v20)
        break;
      specialized Array.append<A>(contentsOf:)(v16);
      v13 += v14;
      if (!--v11)
      {
        result = swift_bridgeObjectRelease_n();
        v18 = v21;
        a4 = v19;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    __break(1u);
  }
  else
  {
    result = swift_bridgeObjectRelease();
    v18 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    *a4 = v18;
  }
  return result;
}

uint64_t partial apply for closure #2 in ExperiencesResolver.defaultExperiences(from:with:)()
{
  return partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
}

uint64_t partial apply for closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(uint64_t (*a1)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD, double))
{
  uint64_t v1;

  return a1(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(double *)(v1 + 48));
}

uint64_t Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.containsDelayedActionComponent(where:)(uint64_t (*a1)(char *), uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  _QWORD v21[2];
  uint64_t (*v22)(char *);
  uint64_t v23;

  v22 = a1;
  v23 = a2;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1C3BBC31C](v7);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent() - 8);
    v13 = *(unsigned __int8 *)(v12 + 80);
    v21[1] = v10;
    v14 = v10 + ((v13 + 32) & ~v13);
    v15 = *MEMORY[0x1E0D6F778];
    v16 = *(_QWORD *)(v12 + 72);
    do
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      v18 = *(_QWORD *)(v17 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v4, 1, v17) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else if ((*(unsigned int (**)(char *, uint64_t))(v18 + 88))(v4, v17) == v15)
      {
        (*(void (**)(char *, uint64_t))(v18 + 96))(v4, v17);
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v9, v4, v5);
        v19 = v22(v9);
        (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
        if ((v19 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v17);
      }
      v14 += v16;
      --v11;
    }
    while (v11);
  }
  swift_bridgeObjectRelease();
  return 0;
}

void specialized static ExperiencesResolver.userDialogAct(from:)()
{
  uint64_t v0;
  uint64_t v2;

  v0 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v2);
  Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
  __asm { BR              X10 }
}

uint64_t sub_1C2473C80()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  outlined consume of Data._Representation(v0, v1);
  if ((v1 & 0xFF000000000000) != 0)
    Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
  else
    Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter();
  return ((uint64_t (*)(void))&dword_1C2473D4C[byte_1C24FF184[v2 >> 62]])();
}

void static ExperiencesResolver.userDialogAct(from:)()
{
  uint64_t v0;
  uint64_t v1;

  v0 = type metadata accessor for Date();
  MEMORY[0x1E0C80A78](v0);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v1);
  Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
  __asm { BR              X10 }
}

uint64_t sub_1C2474140()
{
  uint64_t v0;
  unint64_t v1;
  unint64_t v2;

  outlined consume of Data._Representation(v0, v1);
  if ((v1 & 0xFF000000000000) != 0)
    Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogActOverride.getter();
  else
    Apple_Parsec_Siri_V2alpha_ServerUnderstanding.userDialogAct.getter();
  return ((uint64_t (*)(void))&dword_1C247420C[byte_1C24FF18C[v2 >> 62]])();
}

uint64_t closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)@<X0>(uint64_t a1@<X1>, void *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  id v13;
  void *v14;
  id v15;
  uint64_t result;
  char *v17;
  uint64_t v18;
  char *v19;
  id v20;
  _QWORD *v21;

  v21 = a3;
  v20 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1E0C80A78](v4);
  v19 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1C3BBBAD0](v9);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a1, v7);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
  v12 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
  v13 = v20;
  v14 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
  if ((Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter() & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
    type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
    *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C24FA1B0;
    v15 = v14;
    Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
    dispatch thunk of Experience.associatedEntities.setter();

  }
  result = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter();
  if ((result & 1) != 0)
  {
    v17 = v19;
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
    v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 0, 1, v18);
    result = dispatch thunk of GenericExperience.serverSuggestions.setter();
  }
  *v21 = v14;
  return result;
}

uint64_t specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v10);
  v11 = type metadata accessor for ClientExperienceSignals();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v7);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v10);
  v11 = type metadata accessor for ClientExperienceSignals();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v7);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v10);
  v11 = type metadata accessor for ClientExperienceSignals();
  v12 = *(_QWORD *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v7);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

uint64_t closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  int v19;

  v18 = a8;
  v19 = a6;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.isImmersiveExperience.getter();
  PommesRenderOptions.Builder.isImmersiveExperience.setter();
  PommesRenderOptions.Builder.isSquawkResponse.setter();
  outlined init with copy of ClientExperienceSignals?(a4, (uint64_t)v14);
  v15 = type metadata accessor for ClientExperienceSignals();
  v16 = *(_QWORD *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for ClientExperienceSignals?);
  }
  else
  {
    ClientExperienceSignals.isPhoneCallActive.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v14, v15);
  }
  PommesRenderOptions.Builder.isPhoneCallActive.setter();
  specialized ExperiencesResolver.extractSwitchProfile(serverExp:)((uint64_t)v11);
  PommesRenderOptions.Builder.switchProfile.setter();
  PommesRenderOptions.Builder.preserveResultSpaceIfPossible.setter();
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

uint64_t protocol witness for ExperiencesResolver.extractExperiences(from:score:with:) in conformance SportsPersonalizationExperiencesResolver(double *a1, uint64_t a2, double a3)
{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:)(a1, a2, (unint64_t)partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:), a3);
}

uint64_t protocol witness for ExperiencesResolver.defaultExperiences(from:with:) in conformance CallBusinessNoResultsExperiencesResolver(uint64_t *a1, uint64_t a2)
{
  uint64_t *v2;

  return specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, a2, *v2);
}

uint64_t protocol witness for ExperiencesResolver.extractExperiences(from:score:with:) in conformance CallBusinessNoResultsExperiencesResolver(double *a1, uint64_t a2, double a3)
{
  uint64_t *v3;

  return specialized ExperiencesResolver.extractExperiences(from:score:with:)(a1, a2, *v3, a3);
}

uint64_t protocol witness for ExperiencesResolver.extractExperiences(from:score:with:) in conformance DefaultExperiencesResolver(double *a1, uint64_t a2, double a3)
{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:)(a1, a2, (unint64_t)partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:), a3);
}

void partial apply for closure #1 in ExperiencesResolver.extractExperiences(from:score:with:)()
{
  swift_getDynamicType();
  static ExperiencesResolver.userDialogAct(from:)();
}

uint64_t outlined init with copy of ClientExperienceSignals?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)(*(_QWORD *)(v1 + 24), *(void **)(v1 + 40), a1);
}

uint64_t partial apply for closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(uint64_t a1)
{
  uint64_t v1;

  return closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(a1, *(_QWORD *)(v1 + 32), *(unsigned __int8 *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 72), *(_QWORD *)(v1 + 16));
}

uint64_t dispatch thunk of ExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of ExperiencesResolver.defaultExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of ExperiencesResolver.extractExperiences(from:score:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 24))();
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct)
  {
    v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D9F488], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct);
  }
  return result;
}

uint64_t partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(uint64_t a1)
{
  uint64_t v1;

  return specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:)(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:)()
{
  swift_bridgeObjectRetain();
  return PommesRenderOptions.Builder.promptTypes.setter();
}

uint64_t closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)partial apply@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)(a1);
}

uint64_t closure #1 in static ExperiencesResolver.userDialogAct(from:)partial apply@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in static ExperiencesResolver.userDialogAct(from:)(a1);
}

uint64_t specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  Swift::String v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  void *v70;
  id v71;
  id v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t (*v82)(char *, uint64_t, uint64_t);
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;

  v6 = type metadata accessor for SportsResolverMetrics();
  v7 = *(_QWORD *)(v6 - 8);
  v86 = v6;
  v87 = v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsResolverMetrics?);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v88 = (uint64_t)&v79 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v91 = (uint64_t)&v79 - v20;
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v79 - v21;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v81 = (char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v79 - v26;
  v90 = type metadata accessor for SportsResolverConfig();
  v92 = *(_QWORD *)(v90 - 8);
  v28 = MEMORY[0x1E0C80A78](v90);
  v83 = (char *)&v79 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v93 = (char *)&v79 - v30;
  v31 = a2;
  outlined init with copy of MediaUserStateCenter?(a2, (uint64_t)v22, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  v32 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v33 = *(_QWORD *)(v32 - 8);
  v82 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  v34 = v82(v22, 1, v32);
  v89 = v9;
  v84 = a3;
  v85 = v13;
  if (v34 == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v22, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  }
  else
  {
    v35 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v22, v32);
    v36 = *(_QWORD *)(v35 + 16);
    v37 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
    v38 = *(_QWORD *)(v37 - 8);
    if (v36)
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v27, v35 + ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80)), v37);
      v39 = 0;
    }
    else
    {
      v39 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v27, v39, 1, v37);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v27, 1, v37) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
    }
    else
    {
      Apple_Parsec_Siri_Context_ResultEntity.name.getter();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v37);
    }
  }
  SportsResolverConfig.init(intentTypeName:bundleId:)();
  v40 = v91;
  outlined init with copy of MediaUserStateCenter?(v31, v91, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  outlined copy of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
  outlined copy of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
  v41 = Logger.logObject.getter();
  v42 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v41, v42))
  {

    outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
    outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
    v45 = v87;
    v47 = v88;
    v48 = v89;
    v46 = v90;
    goto LABEL_32;
  }
  v43 = swift_slowAlloc();
  v80 = swift_slowAlloc();
  v96 = v80;
  *(_DWORD *)v43 = 136315394;
  outlined init with copy of MediaUserStateCenter?(v40, (uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  if (v82(v18, 1, v32) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    v44 = 0xE700000000000000;
    v45 = v87;
    v46 = v90;
  }
  else
  {
    v49 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v18, v32);
    v50 = *(_QWORD *)(v49 + 16);
    v51 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
    v52 = *(_QWORD *)(v51 - 8);
    if (v50)
    {
      v53 = (uint64_t)v81;
      (*(void (**)(char *, unint64_t, uint64_t))(v52 + 16))(v81, v49 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80)), v51);
      v54 = 0;
      v45 = v87;
    }
    else
    {
      v54 = 1;
      v45 = v87;
      v53 = (uint64_t)v81;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v53, v54, 1, v51);
    swift_bridgeObjectRelease();
    v55 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v53, 1, v51);
    v46 = v90;
    if (v55 != 1)
    {
      v57 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
      v44 = v58;
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v51);
      v56 = v57;
      v46 = v90;
      goto LABEL_20;
    }
    outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
    v44 = 0xE700000000000000;
  }
  v56 = 0x6E776F6E6B6E75;
LABEL_20:
  v59 = v80;
  v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v44, &v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v91, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  *(_WORD *)(v43 + 12) = 2080;
  if (a1 == 1)
  {
    v60 = 0xEC000000656C6261;
    v61 = 0x63696C7070616E69;
  }
  else if (a1 == 2)
  {
    v60 = 0xEB0000000073756FLL;
    v61 = 0x756769626D616E75;
  }
  else
  {
    v94 = 0;
    v95 = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v94 = 0xD00000000000001ELL;
    v95 = 0x80000001C25074B0;
    if (a1)
      v62 = 1702195828;
    else
      v62 = 0x65736C6166;
    if (a1)
      v63 = 0xE400000000000000;
    else
      v63 = 0xE500000000000000;
    v64 = v63;
    String.append(_:)(*(Swift::String *)&v62);
    swift_bridgeObjectRelease();
    v65._countAndFlagsBits = 41;
    v65._object = (void *)0xE100000000000000;
    String.append(_:)(v65);
    outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
    v61 = v94;
    v60 = v95;
  }
  v94 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v60, &v96);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
  outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(a1);
  _os_log_impl(&dword_1C2356000, v41, v42, "Logging sports personalization metrics: intent=%s selection=%s", (uint8_t *)v43, 0x16u);
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v59, -1, -1);
  MEMORY[0x1C3BBFF64](v43, -1, -1);

  v47 = v88;
  v48 = v89;
LABEL_32:
  v66 = (uint64_t)v85;
  if (a1 == 1)
  {
    v67 = 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v92 + 16))(v83, v93, v46);
    SportsResolverMetrics.init(config:isSiriInstructionExecuted:isDisambiguation:isRecommendationFound:isTaskSuccess:)();
    v67 = 0;
  }
  v68 = v86;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v47, v67, 1, v86);
  outlined init with copy of MediaUserStateCenter?(v47, v66, &demangling cache variable for type metadata for SportsResolverMetrics?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v66, 1, v68) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for SportsResolverMetrics?);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v93, v46);
    return outlined destroy of MediaUserStateCenter?(v66, &demangling cache variable for type metadata for SportsResolverMetrics?);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v48, v66, v68);
  SportsResolverMetrics.logSportsMetric()();
  if (v70)
  {
    v71 = v70;
    v72 = v70;
    v73 = Logger.logObject.getter();
    v74 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc();
      v76 = swift_slowAlloc();
      v94 = v76;
      *(_DWORD *)v75 = 136315138;
      swift_getErrorValue();
      v77 = Error.localizedDescription.getter();
      v96 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v77, v78, &v94);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v73, v74, "Logging sports metrics failed with: %s", v75, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v76, -1, -1);
      MEMORY[0x1C3BBFF64](v75, -1, -1);

      (*(void (**)(char *, uint64_t))(v45 + 8))(v89, v68);
      outlined destroy of MediaUserStateCenter?(v88, &demangling cache variable for type metadata for SportsResolverMetrics?);
      return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v93, v90);
    }

  }
  (*(void (**)(char *, uint64_t))(v45 + 8))(v48, v68);
  outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for SportsResolverMetrics?);
  return (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v93, v46);
}

BOOL DisambiguatedSportsExperiencesResult.recommendationFound.getter(uint64_t a1)
{
  return a1 != 0;
}

BOOL protocol witness for SportsPersonalizationResultMetric.recommendationFound.getter in conformance DisambiguatedSportsExperiencesResult()
{
  _QWORD *v0;

  return *v0 != 0;
}

uint64_t SportsPersonalizationExperiencesResolver.inferenceApi.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AppDataProviding(v1, a1);
}

uint64_t SportsPersonalizationExperiencesResolver.init(inferenceApi:)@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  return outlined init with take of AppDataProviding(a1, a2);
}

uint64_t SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>));
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint8_t *v30;
  NSObject *v31;
  os_signpost_type_t v32;
  os_signpost_id_t v33;
  uint64_t v34;
  uint64_t v35;
  os_signpost_type_t v36;
  os_signpost_id_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  uint8_t *v46;
  int *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  int v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;

  v71 = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  MEMORY[0x1E0C80A78](v3);
  v60 = (char *)&v58 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v59);
  v6 = (char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OSSignpostID();
  v64 = *(_QWORD *)(v7 - 8);
  v65 = v7;
  MEMORY[0x1E0C80A78](v7);
  v63 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = type metadata accessor for OSSignposter();
  v72 = *(_QWORD *)(v61 - 8);
  MEMORY[0x1E0C80A78](v61);
  v62 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Date();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v67 = *(_QWORD *)(v14 - 8);
  v68 = v14;
  MEMORY[0x1E0C80A78](v14);
  v66 = (uint64_t)&v58 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  if (one-time initialization token for shared != -1)
    v16 = swift_once();
  v17 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v16);
  v69 = a1;
  v56 = (int *)a1;
  Date.init()();
  v18 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>)))(*(_QWORD *)v17 + 200);
  v56 = &v55;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)]?);
  LOBYTE(v55) = 2;
  v18(&v74, 0xD000000000000030, 0x80000001C25072D0, 0, v13, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 44, "buildExperiences(from:with:)", 28, v55, partial apply for closure #1 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:));
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  v19 = v74;
  if (v74)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    v23 = os_log_type_enabled(v21, v22);
    v24 = v69;
    if (v23)
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C2356000, v21, v22, "Got a request that is applicable for sports personalization via alternative selection. Will attempt to select an alternative", v25, 2u);
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }

    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = v61;
    v27 = __swift_project_value_buffer(v61, (uint64_t)static Signposter.pommes);
    v28 = v62;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v62, v27, v26);
    v29 = v63;
    static OSSignpostID.exclusive.getter();
    v30 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v30 = 0;
    v31 = OSSignposter.logHandle.getter();
    v32 = static os_signpost_type_t.begin.getter();
    v33 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1C2356000, v31, v32, v33, "selectSportsAlternative", "", v30, 2u);
    v34 = v24;
    v35 = v66;
    closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)(v70, v19, v34, v66, v71, &v73);
    v36 = static os_signpost_type_t.end.getter();
    v37 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1C2356000, v31, v36, v37, "selectSportsAlternative", "", v30, 2u);

    v38 = v73;
    MEMORY[0x1C3BBFF64](v30, -1, -1);
    v39 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v64 + 8))(v29, v65);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v28, v26);
    v41 = v67;
    v40 = v68;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v42 = type metadata accessor for Logger();
    v43 = __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
    v44 = Logger.logObject.getter();
    v45 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v44, v45))
    {
      v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v46 = 0;
      _os_log_impl(&dword_1C2356000, v44, v45, "Request doesn't have a supported (SportsEntity -> Instruction) mapping. Not performing sports personalization...", v46, 2u);
      MEMORY[0x1C3BBFF64](v46, -1, -1);
    }

    Date.init()();
    v47 = (int *)v59;
    v48 = &v6[*(int *)(v59 + 20)];
    *(_QWORD *)v48 = "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift";
    *((_QWORD *)v48 + 1) = 68;
    v48[16] = 2;
    *(_QWORD *)&v6[v47[6]] = 51;
    v49 = &v6[v47[7]];
    *(_QWORD *)v49 = "buildExperiences(from:with:)";
    *((_QWORD *)v49 + 1) = 28;
    v49[16] = 2;
    v50 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
    v51 = (uint64_t *)&v6[v47[8]];
    *v51 = v50;
    v51[1] = v52;
    v39 = v66;
    v41 = v67;
    v53 = (uint64_t)v60;
    v40 = v68;
    (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v60, v66, v68);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v41 + 56))(v53, 0, 1, v40);
    specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(0, v53, v43);
    outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v6, 0);
    v38 = specialized ExperiencesResolver.defaultExperiences(from:with:)(v69, v71, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
    outlined destroy of PerformanceUtil.Ticket((uint64_t)v6);
  }
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  return v38;
}

uint64_t partial apply for closure #1 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t result;

  v2 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  v3 = specialized static SportsPersonalizationExperiencesResolver.makeEntityInstructionMapping(alternatives:)(v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

uint64_t closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  void (*v19)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t result;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  ValueMetadata *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t *v46;
  uint64_t v47;

  v44 = a4;
  v40 = a5;
  v42 = a2;
  v46 = a6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  MEMORY[0x1E0C80A78](v8);
  v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Date();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    v15 = swift_once();
  v41 = &v39;
  v18 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v15);
  v39 = a1;
  v35 = a1;
  v36 = v42;
  v42 = a3;
  v37 = (uint64_t *)a3;
  Date.init()();
  v19 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v18 + 200);
  v37 = &v34;
  v38 = &type metadata for DisambiguatedSportsExperiencesResult;
  LOBYTE(v35) = 2;
  v20 = v43;
  v19(&v47, 0xD000000000000021, 0x80000001C25073E0, 0, v17, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 64, "buildExperiences(from:with:)", 28, v35, partial apply for closure #1 in closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:));
  v43 = v20;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v13);
  v21 = v47;
  Date.init()();
  v22 = &v12[v10[5]];
  *(_QWORD *)v22 = "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift";
  *((_QWORD *)v22 + 1) = 68;
  v22[16] = 2;
  *(_QWORD *)&v12[v10[6]] = 68;
  v23 = &v12[v10[7]];
  *(_QWORD *)v23 = "buildExperiences(from:with:)";
  *((_QWORD *)v23 + 1) = 28;
  v23[16] = 2;
  v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
  v25 = (uint64_t *)&v12[v10[8]];
  *v25 = v24;
  v25[1] = v26;
  v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v28 = *(_QWORD *)(v27 - 8);
  v29 = (uint64_t)v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v45, v44, v27);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v29, 0, 1, v27);
  v30 = one-time initialization token for pommes;
  swift_bridgeObjectRetain();
  if (v30 != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
  specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(v21, v29, v32);
  outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v12, 0);
  if (!v21)
    v21 = specialized ExperiencesResolver.defaultExperiences(from:with:)(v42, v40, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
  result = outlined destroy of PerformanceUtil.Ticket((uint64_t)v12);
  *v46 = v21;
  return result;
}

uint64_t SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  void (*v39)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>));
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint8_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  void (*v71)(char *, char *, uint64_t);
  uint64_t v72;
  _QWORD *v73;
  char *v74;
  char v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint8_t *v99;
  uint64_t v100;
  char *v101;
  uint64_t (*v102)(uint64_t *, _QWORD);
  _QWORD *v103;
  uint64_t v104;
  void *v105;
  void (*v106)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v107;
  uint64_t v109;
  _QWORD v110[2];
  uint64_t *v111;
  uint64_t v112;
  uint8_t *v113;
  uint8_t *v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t);
  uint64_t v119;
  char *v120;
  uint64_t *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  char *v132;
  void (*v133)(char *, char *, uint64_t);
  char *v134;
  char *v135;
  char *v136;
  char *v137;
  unsigned int (*v138)(uint64_t, uint64_t, _QWORD *);
  char *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;

  v121 = a2;
  v131 = a1;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v142 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v122 = (char *)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v141 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  v128 = *(_QWORD *)(v141 - 8);
  v4 = MEMORY[0x1E0C80A78](v141);
  v120 = (char *)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x1E0C80A78](v4);
  v119 = (uint64_t)&v113 - v7;
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v113 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v113 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v123 = (uint64_t)&v113 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v126 = (uint64_t)&v113 - v16;
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v124 = (uint64_t)&v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v125 = (char *)&v113 - v20;
  v129 = type metadata accessor for Date();
  v143 = *(_QWORD *)(v129 - 8);
  MEMORY[0x1E0C80A78](v129);
  v22 = (char *)&v113 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v139 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v113 - v26;
  v28 = type metadata accessor for SportsItem();
  v29 = *(_QWORD **)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v134 = (char *)&v113 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v132 = (char *)&v113 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v135 = (char *)&v113 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v136 = (char *)&v113 - v37;
  if (one-time initialization token for shared != -1)
    v36 = swift_once();
  v140 = &v113;
  v38 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v36);
  v111 = v130;
  v112 = v131;
  Date.init()();
  v39 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v38 + 200);
  v111 = v110;
  v112 = v23;
  LOBYTE(v110[0]) = 2;
  v39(0xD000000000000045, 0x80000001C2507410, 0, v22, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 110, "personalizedSelection(from:with:)", 33, v110[0], partial apply for closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:));
  v40 = *(void (**)(char *, uint64_t))(v143 + 8);
  v127 = v22;
  v40(v22, v129);
  v138 = (unsigned int (*)(uint64_t, uint64_t, _QWORD *))v29[6];
  if (v138((uint64_t)v27, 1, (_QWORD *)v28) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for SportsItem?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v41 = type metadata accessor for Logger();
    __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
    v42 = Logger.logObject.getter();
    v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_1C2356000, v42, v43, "Inference was unable to recommend an alternative. Will use original instruction", v44, 2u);
      MEMORY[0x1C3BBFF64](v44, -1, -1);
    }

  }
  else
  {
    v118 = v40;
    v45 = v136;
    v133 = (void (*)(char *, char *, uint64_t))v29[4];
    v133(v136, v27, v28);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v117 = 0;
    v46 = type metadata accessor for Logger();
    v47 = __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
    v48 = (void (*)(char *, char *, uint64_t))v29[2];
    v49 = v135;
    v48(v135, v45, v28);
    v116 = v47;
    v50 = Logger.logObject.getter();
    v51 = static os_log_type_t.debug.getter();
    v52 = os_log_type_enabled(v50, v51);
    v140 = (_QWORD *)v28;
    if (v52)
    {
      v115 = v29;
      v53 = (uint8_t *)swift_slowAlloc();
      v143 = swift_slowAlloc();
      v145 = v143;
      v114 = v53;
      *(_DWORD *)v53 = 136315138;
      v113 = v53 + 4;
      v48(v132, v49, v28);
      v54 = String.init<A>(describing:)();
      v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v135 = (char *)v115[1];
      ((void (*)(char *, uint64_t))v135)(v49, v28);
      v56 = v114;
      _os_log_impl(&dword_1C2356000, v50, v51, "Got a recommended alternative entity: %s", v114, 0xCu);
      v57 = v143;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v57, -1, -1);
      MEMORY[0x1C3BBFF64](v56, -1, -1);
    }
    else
    {
      v135 = (char *)v29[1];
      ((void (*)(char *, uint64_t))v135)(v49, v28);
    }

    v58 = v141;
    v59 = *(_QWORD *)(v131 + 16);
    if (v59)
    {
      v60 = v131 + ((*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80));
      v61 = *(char **)(v128 + 72);
      swift_bridgeObjectRetain();
      v137 = v12;
      v132 = v61;
      do
      {
        outlined init with copy of MediaUserStateCenter?(v60, (uint64_t)v12, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        v62 = *(int *)(v58 + 48);
        v63 = v12;
        v64 = v10;
        v65 = &v10[v62];
        v66 = &v63[v62];
        v67 = type metadata accessor for SportsPersonalizationEntity();
        v68 = v2;
        v69 = *(_QWORD *)(v67 - 8);
        (*(void (**)(char *, char *, uint64_t))(v69 + 16))(v64, v63, v67);
        v70 = v142;
        v71 = *(void (**)(char *, char *, uint64_t))(v142 + 16);
        v143 = (uint64_t)v65;
        v71(v65, v66, v68);
        v72 = (uint64_t)v139;
        SportsPersonalizationEntity.sportsItem.getter();
        v73 = v140;
        if (v138(v72, 1, v140) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v72, &demangling cache variable for type metadata for SportsItem?);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v64, v67);
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v143, v68);
          v2 = v68;
          v10 = v64;
        }
        else
        {
          v74 = v134;
          v133(v134, (char *)v72, (uint64_t)v73);
          (*(void (**)(char *, uint64_t))(v69 + 8))(v64, v67);
          (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v143, v68);
          v75 = static SportsItem.partiallyEqual(lhs:rhs:)();
          v76 = v74;
          v61 = v132;
          ((void (*)(char *, _QWORD *))v135)(v76, v73);
          v2 = v68;
          v10 = v64;
          if ((v75 & 1) != 0)
          {
            swift_bridgeObjectRelease();
            v77 = v126;
            outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)((uint64_t)v137, v126);
            v78 = 0;
            v58 = v141;
            goto LABEL_23;
          }
        }
        v12 = v137;
        outlined destroy of MediaUserStateCenter?((uint64_t)v137, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
        v60 += (uint64_t)v61;
        --v59;
        v58 = v141;
      }
      while (v59);
      swift_bridgeObjectRelease();
    }
    v78 = 1;
    v77 = v126;
LABEL_23:
    v79 = v128;
    v80 = 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v128 + 56))(v77, v78, 1, v58);
    v81 = v123;
    outlined init with copy of MediaUserStateCenter?(v77, v123, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
    v82 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v79 + 48))(v81, 1, v58);
    v83 = v142;
    v84 = (uint64_t)v125;
    v85 = v130;
    v86 = v127;
    if (v82 != 1)
    {
      v87 = v119;
      outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v81, v119);
      v88 = *(int *)(v58 + 48);
      v89 = v120;
      v90 = &v120[v88];
      v91 = v87 + v88;
      v92 = type metadata accessor for SportsPersonalizationEntity();
      v93 = *(_QWORD *)(v92 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v93 + 16))(v89, v87, v92);
      v94 = v91;
      v77 = v126;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 16))(v90, v94, v2);
      (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v84, v90, v2);
      (*(void (**)(char *, uint64_t))(v93 + 8))(v89, v92);
      v95 = v87;
      v86 = v127;
      outlined destroy of MediaUserStateCenter?(v95, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      v80 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v83 + 56))(v84, v80, 1, v2);
    outlined destroy of MediaUserStateCenter?(v77, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
    v96 = v124;
    outlined init with copy of MediaUserStateCenter?(v84, v124, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v96, 1, v2) != 1)
    {
      v101 = v122;
      (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v122, v96, v2);
      v102 = (uint64_t (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.modify();
      *v103 = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
      v104 = v102(&v145, 0);
      v105 = static PerformanceUtil.shared;
      MEMORY[0x1E0C80A78](v104);
      v110[0] = v85;
      v110[1] = v101;
      v111 = v121;
      Date.init()();
      v106 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v105 + 200);
      v107 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
      v111 = &v109;
      v112 = v107;
      LOBYTE(v110[0]) = 2;
      v106(&v145, 0xD000000000000049, 0x80000001C2507460, 0, v86, "SiriInformationSearch/SportsPersonalizationExperiencesResolver.swift", 68, 2, 137, "personalizedSelection(from:with:)", 33, v110[0], partial apply for closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:));
      v118(v86, v129);
      outlined destroy of MediaUserStateCenter?(v84, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      ((void (*)(char *, _QWORD *))v135)(v136, v140);
      v100 = v145;
      (*(void (**)(char *, uint64_t))(v83 + 8))(v101, v2);
      return v100;
    }
    outlined destroy of MediaUserStateCenter?(v96, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    v97 = Logger.logObject.getter();
    v98 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v99 = 0;
      _os_log_impl(&dword_1C2356000, v97, v98, "Unable to map the recommended sports item back to an alternative. This is unexpected. Will continue with original instruction", v99, 2u);
      MEMORY[0x1C3BBFF64](v99, -1, -1);
    }

    outlined destroy of MediaUserStateCenter?(v84, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
    ((void (*)(char *, _QWORD *))v135)(v136, v140);
  }
  return 0;
}

BOOL static SportsPersonalizationExperiencesResolver.hasPersonalizationInstruction(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL8 v17;
  uint64_t v19;

  v0 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v19 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  if (*(_QWORD *)(v13 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v1 + 16))(v9, v13 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), v0);
    v14 = 0;
  }
  else
  {
    v14 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v9, v14, 1, v0);
  swift_bridgeObjectRelease();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48))(v7, 1, v0) == 1)
  {
    v15 = type metadata accessor for SportsPersonalizationEntity();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v12, 1, 1, v15);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v1 + 32))(v3, v7, v0);
    static SportsPersonalizationExperiencesResolver.makeSportsEntity(entity:)((uint64_t)v3, (uint64_t)v12);
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  v16 = type metadata accessor for SportsPersonalizationEntity();
  v17 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 48))(v12, 1, v16) != 1;
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for SportsPersonalizationEntity?);
  return v17;
}

uint64_t static SportsPersonalizationExperiencesResolver.makeSportsEntity(entity:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t i;
  char v27;
  char v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalizationLevel?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v34 - v8;
  v10 = type metadata accessor for SportsItem();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v34 - v18;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  v21 = __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v22 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(a1, v21);
  if (!v22)
  {
    v29 = type metadata accessor for SportsPersonalizationEntity();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 56))(a2, 1, 1, v29);
  }
  v41 = v11;
  v42 = v22;
  v23 = MEMORY[0x1C3BBD000]();
  if (v23)
  {
    v24 = v23;
    SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
    v39 = v9;
    v40 = a2;
    v37 = v19;
    v38 = v7;
    v35 = v10;
    v36 = v17;
    if (v24 >> 62)
    {
      swift_bridgeObjectRetain();
      v25 = _CocoaArrayWrapper.endIndex.getter();
      if (v25)
        goto LABEL_7;
    }
    else
    {
      v25 = *(_QWORD *)((v24 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v25)
      {
LABEL_7:
        if (v25 < 1)
        {
          __break(1u);
          JUMPOUT(0x1C2477870);
        }
        for (i = 0; i != v25; ++i)
        {
          if ((v24 & 0xC000000000000001) != 0)
            MEMORY[0x1C3BBF3F4](i, v24);
          else
            swift_retain();
          dispatch thunk of CodeGenListEntry.entry.getter();
          if (v43)
          {
            specialized static SportsProperty.from(entity:)();
            v28 = v27;
            swift_release();
            switch(v28)
            {
              case 0:
                SportsItem.team.setter();
                break;
              case 1:
                SportsItem.teamQId.setter();
                break;
              case 2:
                SportsItem.league.setter();
                break;
              case 3:
                SportsItem.leagueQId.setter();
                break;
              case 4:
                SportsItem.sport.setter();
                break;
              case 5:
                SportsItem.sportQId.setter();
                break;
              case 6:
                SportsItem.athlete.setter();
                break;
              case 7:
                SportsItem.athleteQId.setter();
                break;
              default:
                break;
            }
          }
          swift_release();
        }
      }
    }
    swift_bridgeObjectRelease();
    v31 = v41;
    v19 = v37;
    v32 = v35;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v37, v13, v35);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v19, 0, 1, v32);
    v9 = v39;
    a2 = v40;
    v7 = v38;
    v17 = v36;
    goto LABEL_27;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56))(v19, 1, 1, v10);
LABEL_27:
  static PersonalizationLevel.from(uso:)((unint64_t)v9);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v19, (uint64_t)v17, &demangling cache variable for type metadata for SportsItem?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v9, (uint64_t)v7, &demangling cache variable for type metadata for PersonalizationLevel?);
  SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)();
  swift_release();
  outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for PersonalizationLevel?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for SportsItem?);
  v33 = type metadata accessor for SportsPersonalizationEntity();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(a2, 0, 1, v33);
}

uint64_t closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  int64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(unint64_t, char *, uint64_t);
  char *v30;
  void (*v31)(unint64_t, char *, uint64_t);
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  _QWORD v36[4];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  v7 = *(_QWORD *)(v42 - 8);
  v8 = MEMORY[0x1E0C80A78](v42);
  v41 = (char *)v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v40 = (uint64_t)v36 - v10;
  v11 = type metadata accessor for SportsPersonalizationEntity();
  v43 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of AppDataProviding(a1, (uint64_t)v46);
  v37 = v48;
  v38 = v47;
  v14 = __swift_project_boxed_opaque_existential_1(v46, v47);
  v15 = *(_QWORD *)(a2 + 16);
  v16 = MEMORY[0x1E0DEE9D8];
  if (v15)
  {
    v36[1] = v14;
    v36[2] = a3;
    v36[3] = v3;
    v49 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v15, 0);
    v17 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v39 = *(_QWORD *)(v7 + 72);
    v18 = v43;
    do
    {
      v44 = v17;
      v45 = v15;
      v19 = v40;
      outlined init with copy of MediaUserStateCenter?(v17, v40, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      v20 = *(int *)(v42 + 48);
      v21 = v11;
      v22 = v41;
      v23 = &v41[v20];
      v24 = v19 + v20;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v41, v19, v21);
      v25 = v13;
      v26 = v18;
      v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
      v28 = *(_QWORD *)(v27 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v23, v24, v27);
      v29 = *(void (**)(unint64_t, char *, uint64_t))(v26 + 32);
      v13 = v25;
      v30 = v22;
      v11 = v21;
      v31 = v29;
      v29((unint64_t)v25, v30, v11);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v23, v27);
      outlined destroy of MediaUserStateCenter?(v19, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
      v16 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v16 + 16) + 1, 1);
        v16 = v49;
      }
      v33 = *(_QWORD *)(v16 + 16);
      v32 = *(_QWORD *)(v16 + 24);
      v34 = v45;
      if (v33 >= v32 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v32 > 1, v33 + 1, 1);
        v16 = v49;
      }
      *(_QWORD *)(v16 + 16) = v33 + 1;
      v18 = v43;
      v31(v16+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v43 + 72) * v33, v25, v11);
      v49 = v16;
      v17 = v44 + v39;
      v15 = v34 - 1;
    }
    while (v15);
  }
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v16, v38);
  swift_bridgeObjectRelease();
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
}

uint64_t closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  double v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (double *)((char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(double *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  v12 = v11;
  v13 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v6, 1, 1, v13);
  v14 = specialized ExperiencesResolver.extractExperiences(from:score:with:)(v10, (uint64_t)v6, v12);
  outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for ClientExperienceSignals?);
  result = (*(uint64_t (**)(double *, uint64_t))(v8 + 8))(v10, v7);
  *a2 = v14;
  return result;
}

unint64_t specialized static SportsPersonalizationExperiencesResolver.makeEntityInstructionMapping(alternatives:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  void (*v60)(char *, uint64_t, uint64_t);
  char *v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  unint64_t result;
  uint64_t v79;
  NSObject *v80;
  os_log_type_t v81;
  uint8_t *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  void (*v108)(char *, uint64_t, uint64_t);
  uint64_t v109;
  char *v110;
  unint64_t v111;
  uint64_t v112;
  char *v113;
  char *v114;
  uint64_t v115;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PersonalizationLevel?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v91 = (uint64_t)&v83 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v90 = (unint64_t)&v83 - v5;
  v88 = type metadata accessor for SportsItem();
  v87 = *(_QWORD *)(v88 - 8);
  MEMORY[0x1E0C80A78](v88);
  v101 = (char *)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsItem?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v89 = (uint64_t)&v83 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v83 - v10;
  v12 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v95 = (char *)&v83 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v83 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v83 - v19;
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SportsPersonalizationEntity?);
  MEMORY[0x1E0C80A78](v21);
  v105 = (char *)&v83 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for SportsPersonalizationEntity();
  v103 = *(_QWORD *)(v23 - 8);
  v104 = v23;
  MEMORY[0x1E0C80A78](v23);
  v93 = (char *)&v83 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v83 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  v109 = *(_QWORD *)(v28 - 8);
  v29 = MEMORY[0x1E0C80A78](v28);
  v102 = (uint64_t)&v83 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v92 = (uint64_t)&v83 - v31;
  v112 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  MEMORY[0x1E0C80A78](v112);
  v106 = *(_QWORD *)(a1 + 16);
  if (v106)
  {
    v114 = (char *)&v83 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
    v96 = v28;
    v97 = v33;
    v99 = a1 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
    v100 = v18;
    v98 = *(_QWORD *)(v33 + 72);
    v108 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    v83 = a1;
    swift_bridgeObjectRetain();
    v34 = 0;
    v111 = MEMORY[0x1E0DEE9D8];
    v113 = v27;
    v35 = v112;
    v84 = v11;
    v86 = v12;
    v85 = v13;
    v110 = v20;
    while (1)
    {
      v108(v114, v99 + v98 * v34, v35);
      v36 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      if (*(_QWORD *)(v36 + 16))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v20, v36 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), v12);
        v37 = 0;
      }
      else
      {
        v37 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v20, v37, 1, v12);
      swift_bridgeObjectRelease();
      v38 = (uint64_t)v100;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v20, (uint64_t)v100, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v38, 1, v12) != 1)
        break;
      v39 = v103;
      v40 = v104;
      v41 = (uint64_t)v105;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v103 + 56))(v105, 1, 1, v104);
LABEL_24:
      outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ResultEntity?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v41, 1, v40) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for SportsPersonalizationEntity?);
        v57 = 1;
        v58 = v96;
        v35 = v112;
        v59 = v114;
      }
      else
      {
        v60 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 32);
        v61 = v93;
        v60(v93, v41, v40);
        v58 = v96;
        v62 = &v113[*(int *)(v96 + 48)];
        v63 = v61;
        v27 = v113;
        v60(v113, (uint64_t)v63, v40);
        v59 = v114;
        v35 = v112;
        v108(v62, (uint64_t)v114, v112);
        v57 = 0;
      }
      v64 = v109;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v109 + 56))(v27, v57, 1, v58);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v59, v35);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v27, 1, v58) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)?);
      }
      else
      {
        v65 = v92;
        outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)((uint64_t)v27, v92);
        outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v65, v102);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v66 = v111;
        else
          v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v111 + 16) + 1, 1, v111);
        v68 = *(_QWORD *)(v66 + 16);
        v67 = *(_QWORD *)(v66 + 24);
        if (v68 >= v67 >> 1)
          v66 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v67 > 1, v68 + 1, 1, v66);
        *(_QWORD *)(v66 + 16) = v68 + 1;
        v69 = (*(unsigned __int8 *)(v109 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v109 + 80);
        v111 = v66;
        outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(v102, v66 + v69 + *(_QWORD *)(v109 + 72) * v68);
        v35 = v112;
      }
      if (++v34 == v106)
      {
        swift_bridgeObjectRelease();
        result = v111;
        goto LABEL_85;
      }
    }
    v42 = (uint64_t)v95;
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(v95, v38, v12);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v43 = type metadata accessor for Logger();
    v44 = __swift_project_value_buffer(v43, (uint64_t)static Logger.pommes);
    v45 = specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(v42, v44);
    if (!v45)
    {
      v50 = 1;
      v41 = (uint64_t)v105;
LABEL_23:
      v55 = v103;
      v40 = v104;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v41, v50, 1, v104);
      v56 = v42;
      v39 = v55;
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v56, v12);
      goto LABEL_24;
    }
    v94 = v45;
    v46 = MEMORY[0x1C3BBD000]();
    if (!v46)
    {
      v51 = 1;
      v52 = v87;
      v53 = v88;
LABEL_22:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56))(v11, v51, 1, v53);
      v54 = v90;
      static PersonalizationLevel.from(uso:)(v90);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v11, v89, &demangling cache variable for type metadata for SportsItem?);
      outlined init with copy of MediaUserStateCenter?(v54, v91, &demangling cache variable for type metadata for PersonalizationLevel?);
      v41 = (uint64_t)v105;
      SportsPersonalizationEntity.init(sportsItem:personalizationLevel:)();
      swift_release();
      outlined destroy of MediaUserStateCenter?(v54, &demangling cache variable for type metadata for PersonalizationLevel?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for SportsItem?);
      v50 = 0;
      v12 = v86;
      v13 = v85;
      v42 = (uint64_t)v95;
      v27 = v113;
      goto LABEL_23;
    }
    v47 = v46;
    SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
    if (!(v47 >> 62))
    {
      v48 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v48)
        goto LABEL_16;
      goto LABEL_21;
    }
    swift_bridgeObjectRetain();
    v48 = _CocoaArrayWrapper.endIndex.getter();
    if (!v48)
    {
LABEL_21:
      swift_bridgeObjectRelease();
      v52 = v87;
      v11 = v84;
      v53 = v88;
      (*(void (**)(char *, char *, uint64_t))(v87 + 32))(v84, v101, v88);
      swift_bridgeObjectRelease();
      v51 = 0;
      goto LABEL_22;
    }
LABEL_16:
    if (v48 >= 1)
    {
      v49 = 0;
      while (1)
      {
        if ((v47 & 0xC000000000000001) != 0)
          MEMORY[0x1C3BBF3F4](v49, v47);
        else
          swift_retain();
        v70 = dispatch thunk of CodeGenListEntry.entry.getter();
        if (v115)
        {
          if (!MEMORY[0x1C3BBD018](v70))
          {
            MEMORY[0x1C3BBD00C]();
LABEL_52:
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            goto LABEL_37;
          }
          v71 = MEMORY[0x1C3BBD0F0]();
          v73 = v72;
          v74 = swift_release();
          v75 = MEMORY[0x1C3BBD00C](v74);
          if (!v73)
          {
            v20 = v110;
            goto LABEL_52;
          }
          if (!v76)
            goto LABEL_53;
          v107 = v75;
          if (v71 == 0x74726F7073 && v73 == 0xE500000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.sport.setter();
LABEL_49:
            swift_release();
            v20 = v110;
            goto LABEL_37;
          }
          if (v71 == 0x69715F74726F7073 && v73 == 0xE900000000000064
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.sportQId.setter();
            goto LABEL_49;
          }
          if (v71 == 0x65756761656CLL && v73 == 0xE600000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.league.setter();
            goto LABEL_49;
          }
          if (v71 == 0x715F65756761656CLL && v73 == 0xEA00000000006469
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.leagueQId.setter();
            goto LABEL_49;
          }
          if (v71 == 1835099508 && v73 == 0xE400000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.team.setter();
            goto LABEL_49;
          }
          if (v71 == 0x6469715F6D616574 && v73 == 0xE800000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.teamQId.setter();
            goto LABEL_49;
          }
          if (v71 == 0x6574656C687461 && v73 == 0xE700000000000000
            || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          {
            swift_release();
            swift_bridgeObjectRelease();
            SportsItem.athlete.setter();
            goto LABEL_49;
          }
          if (v71 == 0x5F6574656C687461 && v73 == 0xEB00000000646971)
          {
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            v77 = _stringCompareWithSmolCheck(_:_:expecting:)();
            swift_bridgeObjectRelease();
            if ((v77 & 1) == 0)
            {
LABEL_53:
              swift_release();
              swift_release();
              swift_bridgeObjectRelease();
              v20 = v110;
              goto LABEL_37;
            }
            swift_release();
          }
          v20 = v110;
          SportsItem.athleteQId.setter();
        }
        swift_release();
LABEL_37:
        if (v48 == ++v49)
          goto LABEL_21;
      }
    }
    __break(1u);
    goto LABEL_92;
  }
  result = MEMORY[0x1E0DEE9D8];
LABEL_85:
  if (*(_QWORD *)(result + 16) != v106)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes == -1)
    {
LABEL_87:
      v79 = type metadata accessor for Logger();
      __swift_project_value_buffer(v79, (uint64_t)static Logger.pommes);
      v80 = Logger.logObject.getter();
      v81 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v80, v81))
      {
        v82 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v82 = 0;
        _os_log_impl(&dword_1C2356000, v80, v81, "One or more alternative instruction did not have a single sports entity. Will ignore alternatives...", v82, 2u);
        MEMORY[0x1C3BBFF64](v82, -1, -1);
      }

      return 0;
    }
LABEL_92:
    swift_once();
    goto LABEL_87;
  }
  return result;
}

uint64_t specialized static SportsPersonalizationExperiencesResolver.isSupportedPersonalizationInstruction(_:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  uint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  char *v31;
  void (*v32)(char *, char *, uint64_t);
  char *v33;
  uint64_t v34;
  Swift::String v35;
  char v36;
  char *v37;
  char *v38;
  Swift::String v39;
  char v40;
  void (*v41)(char *, uint64_t);
  void (*v42)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  char v59[16];
  Swift::String v60;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v50 = *(_QWORD *)(v2 - 8);
  v51 = v2;
  MEMORY[0x1E0C80A78](v2);
  v49 = (char *)&v44 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_CatDialogComponent();
  v54 = *(_QWORD *)(v4 - 8);
  v55 = v4;
  MEMORY[0x1E0C80A78](v4);
  v53 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v56 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v58 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v52 = (char *)&v44 - v9;
  v10 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v57 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v45 = v15;
    v46 = v14;
    v47 = a1;
    v48 = (void (*)(char *, char *, uint64_t))v6;
    v19 = v17 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    v20 = *(_QWORD *)(v11 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    v44 = v17;
    swift_bridgeObjectRetain();
    while (1)
    {
      v21(v13, v19, v10);
      if (Apple_Parsec_Siri_Context_ResultEntity.name.getter() == 0x6769626D61736944 && v22 == 0xEE006E6F69746175)
        break;
      v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
      if ((v23 & 1) != 0)
        goto LABEL_10;
      v19 += v20;
      if (!--v18)
      {
        swift_bridgeObjectRelease_n();
        v24 = 0;
        goto LABEL_11;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
LABEL_10:
    swift_bridgeObjectRelease_n();
    v24 = 1;
LABEL_11:
    v6 = (uint64_t)v48;
    v15 = v45;
    v14 = v46;
  }
  else
  {
    swift_bridgeObjectRelease();
    v24 = 0;
  }
  v25 = v57;
  v26 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  v27 = MEMORY[0x1C3BBC31C](v26);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v25, v14);
  v28 = *(char **)(v27 + 16);
  if (v28)
  {
    LODWORD(v45) = v24;
    v29 = v27 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
    v30 = *(void (**)(char *, char *, uint64_t))(v56 + 16);
    v47 = *(_QWORD *)(v56 + 72);
    v48 = v30;
    v46 = v27;
    swift_bridgeObjectRetain();
    v31 = v52;
    while (1)
    {
      v57 = v28;
      v32 = v48;
      v48(v31, (char *)v29, v6);
      v33 = v53;
      v34 = Apple_Parsec_Siri_V2alpha_ExperienceComponent.catDialog.getter();
      MEMORY[0x1C3BBBE24](v34);
      (*(void (**)(char *, uint64_t))(v54 + 8))(v33, v55);
      v35 = String.lowercased()();
      swift_bridgeObjectRelease();
      v60 = v35;
      strcpy(v59, "disambiguation");
      v59[15] = -18;
      lazy protocol witness table accessor for type String and conformance String();
      v36 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      v37 = v58;
      v32(v58, v31, v6);
      if ((v36 & 1) != 0)
        break;
      v38 = v49;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
      Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
      (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v51);
      v39 = String.lowercased()();
      swift_bridgeObjectRelease();
      v60 = v39;
      strcpy(v59, "disambiguation");
      v59[15] = -18;
      v40 = StringProtocol.contains<A>(_:)();
      swift_bridgeObjectRelease();
      v41 = *(void (**)(char *, uint64_t))(v56 + 8);
      v41(v58, v6);
      v41(v31, v6);
      if ((v40 & 1) != 0)
        goto LABEL_20;
      v29 += v47;
      v28 = v57 - 1;
      if (v57 == (char *)1)
      {
        swift_bridgeObjectRelease_n();
        return v45;
      }
    }
    v42 = *(void (**)(char *, uint64_t))(v56 + 8);
    v42(v37, v6);
    v42(v31, v6);
LABEL_20:
    swift_bridgeObjectRelease_n();
    return 1;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  return v24;
}

_QWORD *initializeBufferWithCopyOfBuffer for DisambiguatedSportsExperiencesResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for DisambiguatedSportsExperiencesResult()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for DisambiguatedSportsExperiencesResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

_QWORD *assignWithTake for DisambiguatedSportsExperiencesResult(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisambiguatedSportsExperiencesResult(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 8))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  if ((v3 + 1) >= 2)
    return v3;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for DisambiguatedSportsExperiencesResult(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)result = 0;
    *(_DWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 8) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

uint64_t getEnumTag for DisambiguatedSportsExperiencesResult(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v1) = -1;
  return (v1 + 1);
}

_QWORD *destructiveInjectEnumTag for DisambiguatedSportsExperiencesResult(_QWORD *result, int a2)
{
  unsigned int v2;

  if (a2 < 0)
  {
    v2 = a2 ^ 0x80000000;
  }
  else
  {
    if (!a2)
      return result;
    v2 = a2 - 1;
  }
  *result = v2;
  return result;
}

ValueMetadata *type metadata accessor for DisambiguatedSportsExperiencesResult()
{
  return &type metadata for DisambiguatedSportsExperiencesResult;
}

uint64_t *assignWithCopy for SportsPersonalizationExperiencesResolver(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_1(a1, a2);
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SportsPersonalizationExperiencesResolver(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  __swift_destroy_boxed_opaque_existential_1(a1);
  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsPersonalizationExperiencesResolver(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsPersonalizationExperiencesResolver(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for SportsPersonalizationExperiencesResolver()
{
  return &type metadata for SportsPersonalizationExperiencesResolver;
}

uint64_t partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 40), a1, *(double *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(_QWORD *)(v1 + 40), a1, *(double *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(_QWORD *)(v1 + 40), (uint64_t (*)(char *, uint64_t, double))specialized ExperiencesResolver.extractExperiences(from:score:with:), a1, *(double *)(v1 + 32));
}

{
  uint64_t v1;

  return specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)(*(_QWORD *)(v1 + 40), (uint64_t (*)(char *, uint64_t, double))specialized ExperiencesResolver.extractExperiences(from:score:with:), a1, *(double *)(v1 + 32));
}

uint64_t partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(*(double *)(v1 + 32), *(_QWORD *)(v1 + 16), **(_QWORD **)(v1 + 24), *(_QWORD *)(v1 + 40));
  if (!v2)
    *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  result = specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(*(double *)(v1 + 32), *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 40));
  if (!v2)
    *a1 = result;
  return result;
}

{
  return partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(unint64_t, uint64_t, double))specialized ExperiencesResolver.extractExperiences(from:score:with:), a1);
}

{
  return partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)((uint64_t (*)(unint64_t, uint64_t, double))specialized ExperiencesResolver.extractExperiences(from:score:with:), a1);
}

uint64_t partial apply for closure #1 in closure #2 in SportsPersonalizationExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(*(_QWORD *)(v1 + 24), *(uint64_t **)(v1 + 32));
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t partial apply for closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #4 in SportsPersonalizationExperiencesResolver.personalizedSelection(from:with:)(*(_QWORD *)(v1 + 24), a1);
}

uint64_t outlined init with take of (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t (*a1)(unint64_t, uint64_t, double)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  result = specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(*(double *)(v2 + 32), *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 40), a1);
  if (!v3)
    *a2 = result;
  return result;
}

uint64_t outlined copy of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t outlined consume of SportsPersonalizationSelection<DisambiguatedSportsExperiencesResult>(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 2)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t outlined destroy of Siri_Nlu_External_UserDialogAct?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t LazySequenceProtocol<>.keepSalientNLv4Parses()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t (*v20)(char *);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(char *);
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(char *);
  uint64_t v49;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v3);
  v43 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_UserParse();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v44 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v36 - v10;
  v12 = MEMORY[0x1E0C80A78](v9);
  v42 = (char *)&v36 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v45 = (char *)&v36 - v15;
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v1, a1);
  result = LazySequenceProtocol.filter(_:)();
  v19 = v47;
  v20 = v48;
  v46 = MEMORY[0x1E0DEE9D8];
  v21 = *(_QWORD *)(v47 + 16);
  if (!v21)
  {
LABEL_17:
    swift_release();
    swift_bridgeObjectRelease();
    return v46;
  }
  v22 = 0;
  v23 = v21 - 1;
  v40 = v47;
  v41 = v11;
  v38 = v48;
  v39 = v49;
  v37 = v21 - 1;
  while (v22 < *(_QWORD *)(v19 + 16))
  {
    v24 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
    v25 = *(_QWORD *)(v6 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v11, v19 + v24 + v25 * v22, v5);
    if ((v20(v11) & 1) == 0)
    {
      result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      if (v23 == v22)
        goto LABEL_17;
      goto LABEL_4;
    }
    v26 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
    v27 = v42;
    v26(v42, v11, v5);
    v26(v45, v27, v5);
    v28 = v43;
    Siri_Nlu_External_UserParse.firstUserDialogAct.getter(v43);
    v29 = (uint64_t)v28;
    v30 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
    {
      outlined destroy of Siri_Nlu_External_UserDialogAct?(v29);
    }
    else
    {
      v32 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);
      if ((v32 & 1) != 0)
      {
        result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v45, v5);
        v11 = v41;
        goto LABEL_16;
      }
    }
    v26(v44, v45, v5);
    v33 = v46;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v33 + 16) + 1, 1);
      v33 = v46;
    }
    v11 = v41;
    v35 = *(_QWORD *)(v33 + 16);
    v34 = *(_QWORD *)(v33 + 24);
    if (v35 >= v34 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v34 > 1, v35 + 1, 1);
      v33 = v46;
    }
    *(_QWORD *)(v33 + 16) = v35 + 1;
    result = ((uint64_t (*)(unint64_t, char *, uint64_t))v26)(v33 + v24 + v35 * v25, v44, v5);
    v46 = v33;
LABEL_16:
    v20 = v38;
    v23 = v37;
    v19 = v40;
    if (v37 == v22)
      goto LABEL_17;
LABEL_4:
    ++v22;
  }
  __break(1u);
  return result;
}

BOOL closure #1 in LazySequenceProtocol<>.keepSalientNLv4Parses()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, uint64_t, uint64_t);
  char *v21;
  void (*v22)(char *, uint64_t);
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  double v27;
  _BOOL8 v28;
  void (*v30)(char *, uint64_t, uint64_t);
  void (*v31)(char *, uint64_t);
  uint64_t v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a1;
  v37 = type metadata accessor for Siri_Nlu_External_UserParse();
  v1 = *(_QWORD *)(v37 - 8);
  v2 = MEMORY[0x1E0C80A78](v37);
  v35 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v33 = (char *)&v30 - v4;
  v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v30 - v10;
  v12 = type metadata accessor for Siri_Nlu_External_Parser();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  v31 = *(void (**)(char *, uint64_t))(v13 + 8);
  v32 = v12;
  v31(v15, v12);
  v16 = *MEMORY[0x1E0D9F118];
  v30 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v30(v9, v16, v5);
  lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier();
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v18 = v38;
  v17 = v39;
  v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  v19(v9, v5);
  v19(v11, v5);
  v34 = v1;
  v20 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
  v21 = v33;
  v20(v33, v36, v37);
  if (v17 == v18)
  {
    v22 = *(void (**)(char *, uint64_t))(v34 + 8);
    v23 = v37;
    v22(v21, v37);
    v24 = v35;
    v20(v35, v36, v23);
  }
  else
  {
    Siri_Nlu_External_UserParse.parser.getter();
    Siri_Nlu_External_Parser.parserID.getter();
    v31(v15, v32);
    v30(v9, *MEMORY[0x1E0D9F138], v5);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    v26 = v38;
    v25 = v39;
    v19(v9, v5);
    v19(v11, v5);
    v22 = *(void (**)(char *, uint64_t))(v34 + 8);
    v23 = v37;
    v22(v21, v37);
    v24 = v35;
    v20(v35, v36, v23);
    if (v25 != v26)
    {
      v28 = 0;
      goto LABEL_6;
    }
  }
  Siri_Nlu_External_UserParse.comparableProbability.getter();
  v28 = v27 > 0.05;
LABEL_6:
  v22(v24, v23);
  return v28;
}

unint64_t lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier;
  if (!lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier)
  {
    v1 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D9F178], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier);
  }
  return result;
}

uint64_t static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void (*a10)(char *, uint64_t), uint64_t a11)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  int64_t v28;
  unint64_t v29;
  unint64_t v30;
  void (*v31)(char *, unint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  int64_t v44;
  unint64_t v45;
  char *v46;
  void (*v47)(char *, char *, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  void (*v65)(char *, uint64_t);
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;

  v77 = a1;
  v78 = a7;
  v75 = a5;
  v76 = a6;
  v72 = a3;
  v73 = a4;
  v70 = a2;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v64 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x1E0C80A78](v16);
  v66 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v21 = (char *)&v64 - v20;
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v68 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = a8;
  v82 = a8;
  v83 = a9;
  v71 = a9;
  lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v69 = v22;
  static Message.with(_:)();
  v25 = MEMORY[0x1E0DEE9D8];
  v85 = MEMORY[0x1E0DEE9D8];
  v86 = MEMORY[0x1E0DEE9D8];
  v79 = v24;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v26 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v67 = v16;
  v27(v21, v16);
  v28 = *(_QWORD *)(v26 + 16);
  v81 = v13;
  if (v28)
  {
    v65 = v27;
    v84 = v25;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v28, 0);
    v29 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v64 = v26;
    v30 = v26 + v29;
    v80 = *(_QWORD *)(v13 + 72);
    v31 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
    do
    {
      v31(v15, v30, v12);
      v32 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
      v34 = v33;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      v35 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v35 + 16) + 1, 1);
        v35 = v84;
      }
      v37 = *(_QWORD *)(v35 + 16);
      v36 = *(_QWORD *)(v35 + 24);
      if (v37 >= v36 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1);
        v35 = v84;
      }
      *(_QWORD *)(v35 + 16) = v37 + 1;
      v38 = v35 + 16 * v37;
      *(_QWORD *)(v38 + 32) = v32;
      *(_QWORD *)(v38 + 40) = v34;
      v13 = v81;
      v30 += v80;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    v25 = MEMORY[0x1E0DEE9D8];
    v27 = v65;
  }
  else
  {
    swift_bridgeObjectRelease();
    v35 = MEMORY[0x1E0DEE9D8];
  }
  v39 = a11;
  v65 = a10;
  swift_bridgeObjectRelease();
  v86 = v35;
  v40 = v66;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v41 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLogs.getter();
  v42 = v40;
  v43 = (char *)v41;
  v27(v42, v67);
  v44 = *((_QWORD *)v43 + 2);
  if (v44)
  {
    v67 = a11;
    v84 = v25;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v44, 0);
    v45 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    v66 = v43;
    v46 = &v43[v45];
    v80 = *(_QWORD *)(v13 + 72);
    v47 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    do
    {
      v47(v15, v46, v12);
      v48 = Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
      v50 = v49;
      (*(void (**)(char *, uint64_t))(v81 + 8))(v15, v12);
      v51 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v51 + 16) + 1, 1);
        v51 = v84;
      }
      v53 = *(_QWORD *)(v51 + 16);
      v52 = *(_QWORD *)(v51 + 24);
      if (v53 >= v52 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v52 > 1, v53 + 1, 1);
        v51 = v84;
      }
      *(_QWORD *)(v51 + 16) = v53 + 1;
      v54 = v51 + 16 * v53;
      *(_QWORD *)(v54 + 32) = v48;
      *(_QWORD *)(v54 + 40) = v50;
      v46 += v80;
      --v44;
    }
    while (v44);
    swift_bridgeObjectRelease();
    v39 = v67;
  }
  else
  {
    swift_bridgeObjectRelease();
    v51 = MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  v85 = v51;
  v55 = type metadata accessor for PommesResponse();
  MEMORY[0x1E0C80A78](v55);
  v56 = v72;
  *(&v64 - 14) = v70;
  *(&v64 - 13) = v56;
  v57 = v79;
  v58 = v74;
  *(&v64 - 12) = (uint64_t)v79;
  *(&v64 - 11) = v58;
  v59 = v73;
  *(&v64 - 10) = v71;
  *(&v64 - 9) = v59;
  v60 = v76;
  *(&v64 - 8) = v75;
  *(&v64 - 7) = v60;
  *(&v64 - 6) = (uint64_t)v65;
  *(&v64 - 5) = v39;
  *(&v64 - 4) = (uint64_t)&v86;
  *(&v64 - 3) = (uint64_t)&v85;
  v61 = v77;
  *(&v64 - 2) = v78;
  *(&v64 - 1) = v61;
  v62 = PommesResponse.__allocating_init(_:)();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v57, v69);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v62;
}

uint64_t closure #1 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  uint64_t (*v0)(uint64_t *, _QWORD);
  uint64_t v2;

  swift_bridgeObjectRetain();
  v0 = (uint64_t (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
  return v0(&v2, 0);
}

uint64_t closure #4 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t);
  void (*v28)(char *, uint64_t);
  _QWORD v30[2];
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v33 = a8;
  v34 = a7;
  v30[0] = a4;
  v30[1] = a5;
  v42 = a14;
  v43 = a15;
  v39 = a13;
  v35 = a11;
  v36 = a10;
  v37 = a12;
  v32 = a9;
  v15 = type metadata accessor for PommesSearchReason();
  v40 = *(_QWORD *)(v15 - 8);
  v41 = v15;
  MEMORY[0x1E0C80A78](v15);
  v38 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v17);
  v31 = (uint64_t)v30 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PegasusClientEventLog();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)v30 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v30 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  PommesResponse.Builder.experiences.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.clientResults.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.conversationContextBytes.getter();
  PommesResponse.Builder.conversationContext.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.metadataDomainName.setter();
  PommesResponse.Builder.metadataFallbackTriggered.setter();
  PommesResponse.Builder.renderedTexts.setter();
  PommesResponse.Builder.redactedRenderedTexts.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v27 = *(void (**)(char *, uint64_t))(v24 + 8);
  v27(v26, v23);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainFlowStepLog.getter();
  v28 = *(void (**)(char *, uint64_t))(v20 + 8);
  v28(v22, v19);
  PommesResponse.Builder.pegasusDomainFlowStepLog.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.pegasusClientEventLog.getter();
  v27(v26, v23);
  Apple_Parsec_Siri_V2alpha_PegasusClientEventLog.pegasusDomainUserSensitiveTier1Log.getter();
  v28(v22, v19);
  PommesResponse.Builder.pegasusDomainUserSensitiveTier1Log.setter();
  PommesResponse.Builder.listenAfterSpeaking.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.requestId.setter();
  outlined init with copy of PommesCandidateId?(v32, v31);
  PommesResponse.Builder.pommesCandidateId.setter();
  PommesResponse.Builder.isHandledByPreflight.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.preflightClientHandlerIdentifier.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.taskStepLogs.setter();
  swift_bridgeObjectRetain();
  PommesResponse.Builder.userSensitiveTier1Logs.setter();
  PommesResponse.Builder.componentsWarmedUp.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v38, v42, v41);
  PommesResponse.Builder.searchReason.setter();
  PommesResponse.Builder.isCachedResponse.setter();
  type metadata accessor for PommesSearchRequest(0);
  swift_bridgeObjectRetain();
  PommesResponse.Builder.searchRequestUtterance.setter();
  swift_bridgeObjectRetain();
  return PommesResponse.Builder.sharedUserId.setter();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(void (*a1)(void))
{
  a1();
  return _typeName(_:qualified:)();
}

uint64_t partial apply for closure #1 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return closure #1 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)();
}

uint64_t partial apply for closure #4 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #4 in static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11], v1[12], v1[13], v1[14], v1[15]);
}

void **initializeBufferWithCopyOfBuffer for PommesSearchPreflightResult(void **a1, void **a2)
{
  void *v3;
  id v4;

  v3 = *a2;
  *a1 = *a2;
  v4 = v3;
  return a1;
}

void **assignWithCopy for PommesSearchPreflightResult(void **a1, void **a2)
{
  void *v3;
  void *v4;
  id v5;

  v3 = *a2;
  v4 = *a1;
  *a1 = *a2;
  v5 = v3;

  return a1;
}

void **assignWithTake for PommesSearchPreflightResult(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

ValueMetadata *type metadata accessor for PommesSearchPreflightResult()
{
  return &type metadata for PommesSearchPreflightResult;
}

uint64_t dispatch thunk of static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of PommesSearchPreflightHandling.handle(pommesSearchRequest:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t AssistantLocationProvider.__allocating_init(serviceHelper:)(uint64_t a1)
{
  uint64_t v2;

  v2 = swift_allocObject();
  AssistantLocationProvider.init(serviceHelper:)(a1);
  return v2;
}

uint64_t AssistantLocationProvider.init(serviceHelper:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t);
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v12 = a1;
  v11 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v2 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v4 = (char *)&v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  v6 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810];
  MEMORY[0x1E0C80A78](v5);
  v7 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v7);
  *(_QWORD *)(v1 + 16) = 0;
  v10 = type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v13 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, v6, MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes], MEMORY[0x1E0DEAF38]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E0DEF8D0], v11);
  *(_QWORD *)(v1 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for LocationStatus(0);
  swift_storeEnumTagMultiPayload();
  v8 = OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider_statusPassthrough;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
  swift_allocObject();
  *(_QWORD *)(v1 + v8) = PassthroughSubject.init()();
  *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher) = 0;
  swift_beginAccess();
  *(_QWORD *)(v1 + 16) = v12;
  swift_unknownObjectRelease();
  return v1;
}

uint64_t AssistantLocationProvider.serviceHelper.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t AssistantLocationProvider.serviceHelper.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;

  swift_beginAccess();
  v1[2] = a1;
  swift_unknownObjectRetain();
  v3 = swift_unknownObjectRelease();
  (*(void (**)(uint64_t))(*v1 + 280))(v3);
  swift_unknownObjectRelease();
  return swift_release();
}

uint64_t (*AssistantLocationProvider.serviceHelper.modify(uint64_t a1))(uint64_t a1, char a2)
{
  uint64_t v1;

  *(_QWORD *)(a1 + 24) = v1;
  swift_beginAccess();
  return AssistantLocationProvider.serviceHelper.modify;
}

uint64_t AssistantLocationProvider.serviceHelper.modify(uint64_t a1, char a2)
{
  uint64_t result;

  result = swift_endAccess();
  if ((a2 & 1) == 0)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(a1 + 24) + 280))(result);
    return swift_release();
  }
  return result;
}

uint64_t AssistantLocationProvider.setServiceHelper(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v3)(uint64_t);

  v3 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 136);
  v1 = swift_unknownObjectRetain();
  return v3(v1);
}

uint64_t key path setter for AssistantLocationProvider.status : AssistantLocationProvider(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;

  v4 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(a1, (uint64_t)v6);
  return (*(uint64_t (**)(char *))(**(_QWORD **)a2 + 216))(v6);
}

void AssistantLocationProvider.status.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  v1 = *(void **)(v0 + 24);
  type metadata accessor for LocationStatus(0);
  v2 = v1;
  OS_dispatch_queue.sync<A>(execute:)();

}

uint64_t partial apply for closure #1 in AssistantLocationProvider.status.getter@<X0>(uint64_t a1@<X8>)
{
  return partial apply for closure #1 in AssistantLocationProvider.status.getter(a1);
}

{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status;
  swift_beginAccess();
  return outlined init with copy of LocationStatus(v3, a1);
}

uint64_t AssistantLocationProvider.status.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  NSObject *v16;
  uint64_t result;
  _QWORD aBlock[6];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for LocationStatus(0);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)aBlock - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(void **)(v1 + 24);
  outlined init with copy of LocationStatus(a1, (uint64_t)v10);
  v12 = (*(unsigned __int8 *)(v8 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v13 = swift_allocObject();
  *(_QWORD *)(v13 + 16) = v2;
  outlined init with take of LocationStatus((uint64_t)v10, v13 + v12);
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = partial apply for closure #1 in AssistantLocationProvider.status.setter;
  *(_QWORD *)(v14 + 24) = v13;
  aBlock[4] = partial apply for thunk for @callee_guaranteed () -> ();
  aBlock[5] = v14;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_15;
  v15 = _Block_copy(aBlock);
  v16 = v11;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v16, v15);

  _Block_release(v15);
  LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v15 & 1) != 0)
  {
    __break(1u);
  }
  else
  {
    outlined init with copy of LocationStatus(a1, (uint64_t)v6);
    swift_storeEnumTagMultiPayload();
    PassthroughSubject.send(_:)();
    outlined destroy of LocationStatus(a1);
    outlined destroy of Result<LocationStatus, LocationError>((uint64_t)v6);
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in AssistantLocationProvider.status.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  v4 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of LocationStatus(a2, (uint64_t)v6);
  v7 = a1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status;
  swift_beginAccess();
  outlined assign with take of LocationStatus((uint64_t)v6, v7);
  return swift_endAccess();
}

uint64_t outlined init with copy of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C247AF9C()
{
  uint64_t v0;
  uint64_t v1;
  id *v2;
  int EnumCaseMultiPayload;
  char *v4;
  uint64_t v5;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationStatus(0) - 8) + 80);
  swift_release();
  v2 = (id *)(v0 + ((v1 + 24) & ~v1));
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    v4 = (char *)v2
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    v5 = type metadata accessor for Date();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  }
  else if (!EnumCaseMultiPayload)
  {

  }
  return swift_deallocObject();
}

uint64_t outlined init with take of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in AssistantLocationProvider.status.setter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for LocationStatus(0) - 8) + 80);
  return closure #1 in AssistantLocationProvider.status.setter(*(_QWORD *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1C247B0C4()
{
  return swift_deallocObject();
}

uint64_t outlined destroy of LocationStatus(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of Result<LocationStatus, LocationError>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<LocationStatus, LocationError>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*AssistantLocationProvider.status.modify(_QWORD *a1))(uint64_t a1, char a2)
{
  uint64_t v1;
  size_t v3;
  id v4;

  *a1 = v1;
  v3 = *(_QWORD *)(*(_QWORD *)(type metadata accessor for LocationStatus(0) - 8) + 64);
  a1[1] = malloc(v3);
  a1[2] = malloc(v3);
  v4 = *(id *)(v1 + 24);
  OS_dispatch_queue.sync<A>(execute:)();

  return AssistantLocationProvider.status.modify;
}

void AssistantLocationProvider.status.modify(uint64_t a1, char a2)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 8);
  v3 = *(void **)(a1 + 16);
  if ((a2 & 1) != 0)
  {
    outlined init with copy of LocationStatus((uint64_t)v3, (uint64_t)v2);
    AssistantLocationProvider.status.setter((uint64_t)v2);
    outlined destroy of LocationStatus((uint64_t)v3);
  }
  else
  {
    AssistantLocationProvider.status.setter((uint64_t)v3);
  }
  free(v3);
  free(v2);
}

uint64_t AssistantLocationProvider.statusPublisher.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher;
  if (*(_QWORD *)(v0
                 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher))
  {
    v2 = *(_QWORD *)(v0
                   + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher);
  }
  else
  {
    v3 = v0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>);
    _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type PassthroughSubject<Result<LocationStatus, LocationError>, Never> and conformance PassthroughSubject<A, B>, &demangling cache variable for type metadata for PassthroughSubject<Result<LocationStatus, LocationError>, Never>, MEMORY[0x1E0C95F48]);
    v2 = Publisher.eraseToAnyPublisher()();
    *(_QWORD *)(v3 + v1) = v2;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v2;
}

uint64_t AssistantLocationProvider.statusPublisher.setter(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher) = a1;
  return swift_release();
}

uint64_t (*AssistantLocationProvider.statusPublisher.modify(uint64_t *a1))(_QWORD *a1)
{
  uint64_t v1;

  a1[1] = v1;
  *a1 = AssistantLocationProvider.statusPublisher.getter();
  return AssistantLocationProvider.statusPublisher.modify;
}

uint64_t AssistantLocationProvider.statusPublisher.modify(_QWORD *a1)
{
  *(_QWORD *)(a1[1]
            + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider____lazy_storage___statusPublisher) = *a1;
  return swift_release();
}

Swift::Void __swiftcall AssistantLocationProvider.setCachedLocation(location:)(CLLocation location)
{
  uint64_t v1;
  Class isa;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject **v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v14;
  void (*v15)(char *);
  objc_class *v16;
  uint64_t v17;

  isa = location.super.isa;
  v3 = type metadata accessor for LocationStatus(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (NSObject **)((char *)&v17 - v8);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 208))(v7);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of LocationStatus((uint64_t)v9);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, v11, v12, "Cannot set cached location on cachedLocation status that is not .available", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }
  }
  else
  {
    v11 = *v9;
    v14 = v9[1];
    *(_QWORD *)v6 = isa;
    *((_QWORD *)v6 + 1) = v14;
    v6[16] = 0;
    swift_storeEnumTagMultiPayload();
    v15 = *(void (**)(char *))(*(_QWORD *)v1 + 216);
    v16 = isa;
    v15(v6);
  }

}

void AssistantLocationProvider.cachedLocationInfo()(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _DWORD *v19;
  char *v20;
  char *v21;
  _QWORD v22[4];

  v3 = type metadata accessor for LocationStatus(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v9 = (char *)v22 - v8;
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)v22 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v22 - v14;
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 208))(v13);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  outlined init with copy of LocationStatus((uint64_t)v15, (uint64_t)v12);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v22[1] = a1;
    v19 = (_DWORD *)swift_slowAlloc();
    v22[3] = swift_slowAlloc();
    *v19 = 136315138;
    outlined init with copy of LocationStatus((uint64_t)v12, (uint64_t)v9);
    v22[0] = v3;
    v20 = (char *)&loc_1C247B6E8 + 4 * byte_1C24FF320[swift_getEnumCaseMultiPayload()];
    __asm { BR              X10 }
  }
  outlined destroy of LocationStatus((uint64_t)v12);

  outlined init with take of LocationStatus((uint64_t)v15, (uint64_t)v6);
  v21 = (char *)&loc_1C247B87C + 4 * byte_1C24FF326[swift_getEnumCaseMultiPayload()];
  __asm { BR              X10 }
}

uint64_t AssistantLocationProvider.fetchLocation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static TaskPriority.userInitiated.getter();
  v4 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(v3, 0, 1, v4);
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = 0;
  v5[3] = 0;
  v5[4] = v0;
  swift_retain();
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5((uint64_t)v3, (uint64_t)&async function pointer to partial apply for closure #1 in AssistantLocationProvider.fetchLocation(), (uint64_t)v5);
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;

  v4[13] = a1;
  v4[14] = a4;
  v4[15] = type metadata accessor for LocationStatus(0);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t);
  uint64_t ObjectType;
  _QWORD *v15;

  v1 = (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 112) + 128))();
  *(_QWORD *)(v0 + 152) = v1;
  if (!v1)
  {
    **(_BYTE **)(v0 + 104) = 0;
    goto LABEL_6;
  }
  v2 = v1;
  (*(void (**)(void))(**(_QWORD **)(v0 + 112) + 208))();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v3 = *(_QWORD *)(v0 + 136);
    outlined init with copy of LocationStatus(*(_QWORD *)(v0 + 144), v3);
    v4 = *(unsigned __int8 *)(v3 + 8);
    v5 = v3
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                + 48);
    if (v4 == 1)
    {
      v6 = *(_QWORD *)(v0 + 144);
      v7 = *(_BYTE **)(v0 + 104);
      swift_unknownObjectRelease();
      *v7 = 0;
      v8 = type metadata accessor for Date();
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 8))(v5, v8);
      outlined destroy of LocationStatus(v6);
LABEL_6:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
    v10 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v5, v10);
  }
  v11 = *(_QWORD *)(v0 + 128);
  v12 = *(_QWORD *)(v0 + 112);
  outlined destroy of LocationStatus(*(_QWORD *)(v0 + 144));
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
  *(_QWORD *)v11 = 0;
  *(_BYTE *)(v11 + 8) = 1;
  Date.init()();
  swift_storeEnumTagMultiPayload();
  v13 = *(void (**)(uint64_t))(*(_QWORD *)v12 + 216);
  *(_QWORD *)(v0 + 160) = v13;
  v13(v11);
  ObjectType = swift_getObjectType();
  *(_QWORD *)(v0 + 168) = ObjectType;
  v15 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 176) = v15;
  *v15 = v0;
  v15[1] = closure #1 in AssistantLocationProvider.fetchLocation();
  v15[4] = ObjectType;
  v15[5] = v2;
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  double v11;
  double *v12;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  void (*v23)(uint64_t);
  uint64_t v24;
  _BYTE *v25;

  switch(*(_QWORD *)(v0 + 184))
  {
    case 0:
      if (one-time initialization token for pommes != -1)
        swift_once();
      v17 = type metadata accessor for Logger();
      __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
      v2 = Logger.logObject.getter();
      v18 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1C2356000, v2, v18, "Setting status to .siriLocationDisabled because authorization style is .undetermined", v19, 2u);
        MEMORY[0x1C3BBFF64](v19, -1, -1);
      }
      goto LABEL_26;
    case 1:
    case 2:
      if (one-time initialization token for pommes != -1)
        swift_once();
      v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
      v2 = Logger.logObject.getter();
      v3 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v3))
      {
        v4 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v4 = 0;
        _os_log_impl(&dword_1C2356000, v2, v3, "Setting status to .unavailable because authorization style is .restricted or .denied", v4, 2u);
        MEMORY[0x1C3BBFF64](v4, -1, -1);
      }
      goto LABEL_26;
    case 3:
    case 4:
      if (one-time initialization token for pommes != -1)
        swift_once();
      v5 = type metadata accessor for Logger();
      *(_QWORD *)(v0 + 200) = __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
      v6 = Logger.logObject.getter();
      v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v8 = 0;
        _os_log_impl(&dword_1C2356000, v6, v7, "Getting currentLocation from serviceHelper", v8, 2u);
        MEMORY[0x1C3BBFF64](v8, -1, -1);
      }
      v9 = *(_QWORD *)(v0 + 192);
      v10 = *(_QWORD *)(v0 + 152);

      v11 = specialized closure #1 in closure #1 in AssistantLocationProvider.fetchLocation()(v9);
      v12 = (double *)swift_task_alloc();
      *(_QWORD *)(v0 + 208) = v12;
      *(_QWORD *)v12 = v0;
      *((_QWORD *)v12 + 1) = closure #1 in AssistantLocationProvider.fetchLocation();
      v12[5] = *(double *)(v0 + 168);
      *((_QWORD *)v12 + 6) = v10;
      v12[4] = 1.0;
      v12[3] = v11;
      return swift_task_switch();
    case 5:
      if (one-time initialization token for pommes != -1)
        swift_once();
      v20 = type metadata accessor for Logger();
      __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
      v2 = Logger.logObject.getter();
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v21))
      {
        v22 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v22 = 0;
        _os_log_impl(&dword_1C2356000, v2, v21, "Setting status to .locationDisabled because authorization style is .serviceDisabled", v22, 2u);
        MEMORY[0x1C3BBFF64](v22, -1, -1);
      }
      goto LABEL_26;
    default:
      if (one-time initialization token for pommes != -1)
        swift_once();
      v14 = type metadata accessor for Logger();
      __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
      v2 = Logger.logObject.getter();
      v15 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v2, v15))
      {
        v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v16 = 0;
        _os_log_impl(&dword_1C2356000, v2, v15, "Setting status to .unknown because we encountered an unhandled authorization style", v16, 2u);
        MEMORY[0x1C3BBFF64](v16, -1, -1);
      }
LABEL_26:
      v23 = *(void (**)(uint64_t))(v0 + 160);
      v24 = *(_QWORD *)(v0 + 128);
      v25 = *(_BYTE **)(v0 + 104);

      swift_storeEnumTagMultiPayload();
      v23(v24);
      swift_unknownObjectRelease();
      *v25 = 0;
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
  }
}

{
  uint64_t v0;
  void *v1;
  id v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  void (*v7)(uint64_t);
  uint64_t v8;
  _BYTE *v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(uint64_t);
  uint64_t v15;
  _BYTE *v16;

  v1 = *(void **)(v0 + 216);
  if (v1)
  {
    v2 = v1;
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1C2356000, v3, v4, "Setting status to .available", v5, 2u);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }
    v6 = *(_QWORD *)(v0 + 192);
    v7 = *(void (**)(uint64_t))(v0 + 160);
    v8 = *(_QWORD *)(v0 + 128);
    v9 = *(_BYTE **)(v0 + 104);

    *(_QWORD *)v8 = v2;
    *(_QWORD *)(v8 + 8) = v6;
    *(_BYTE *)(v8 + 16) = 0;
    swift_storeEnumTagMultiPayload();
    v10 = v2;
    v7(v8);

    swift_unknownObjectRelease();
    *v9 = 1;
  }
  else
  {
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, v11, v12, "Location returned from service helper is nil. Setting status to .unavailable.", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }
    v14 = *(void (**)(uint64_t))(v0 + 160);
    v15 = *(_QWORD *)(v0 + 128);
    v16 = *(_BYTE **)(v0 + 104);

    swift_storeEnumTagMultiPayload();
    v14(v15);
    swift_unknownObjectRelease();
    *v16 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  void *v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  void *v7;
  id v8;
  id v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  void *v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  void *v25;
  void (*v26)(uint64_t);
  uint64_t v27;
  _BYTE *v28;
  void (*v29)(uint64_t);
  uint64_t v30;
  _BYTE *v31;
  uint64_t v33;

  v1 = *(void **)(v0 + 224);
  *(_QWORD *)(v0 + 56) = v1;
  v2 = v1;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(0);
  if ((swift_dynamicCast() & 1) != 0)
  {

    v3 = *(void **)(v0 + 40);
    *(_QWORD *)(v0 + 80) = v3;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
    _BridgedStoredNSError.code.getter();
    if (*(_QWORD *)(v0 + 72) == 5)
    {
      v4 = Logger.logObject.getter();
      v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v6 = 0;
        _os_log_impl(&dword_1C2356000, v4, v5, "Setting status to .siriLocationDisabled with unauthorizedToFetchLocation error", v6, 2u);
        MEMORY[0x1C3BBFF64](v6, -1, -1);
      }

    }
    else
    {
      v18 = v3;
      v19 = Logger.logObject.getter();
      v20 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v19, v20))
      {
        v21 = (uint8_t *)swift_slowAlloc();
        v22 = swift_slowAlloc();
        v33 = v22;
        *(_DWORD *)v21 = 136315138;
        *(_QWORD *)(v0 + 88) = v18;
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
        v23 = Error.localizedDescription.getter();
        *(_QWORD *)(v0 + 96) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v33);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v19, v20, "Setting status to .unavailable with error %s", v21, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v22, -1, -1);
        MEMORY[0x1C3BBFF64](v21, -1, -1);
      }
      else
      {

      }
    }
    v29 = *(void (**)(uint64_t))(v0 + 160);
    v30 = *(_QWORD *)(v0 + 128);
    v31 = *(_BYTE **)(v0 + 104);
    swift_storeEnumTagMultiPayload();
    v29(v30);

    swift_unknownObjectRelease();
    *v31 = 0;

  }
  else
  {
    v7 = *(void **)(v0 + 224);

    v8 = v7;
    v9 = v7;
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    v12 = os_log_type_enabled(v10, v11);
    v13 = *(void **)(v0 + 224);
    if (v12)
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v15 = swift_slowAlloc();
      v33 = v15;
      *(_DWORD *)v14 = 136315138;
      swift_getErrorValue();
      v16 = Error.localizedDescription.getter();
      *(_QWORD *)(v0 + 64) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v10, v11, "Setting status to .unavailable with error %s", v14, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v15, -1, -1);
      MEMORY[0x1C3BBFF64](v14, -1, -1);
    }
    else
    {

    }
    v25 = *(void **)(v0 + 224);
    v26 = *(void (**)(uint64_t))(v0 + 160);
    v27 = *(_QWORD *)(v0 + 128);
    v28 = *(_BYTE **)(v0 + 104);
    swift_storeEnumTagMultiPayload();
    v26(v27);

    swift_unknownObjectRelease();
    *v28 = 0;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 184) = a1;
  *(_QWORD *)(v3 + 192) = a2;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 216) = a1;
  *(_QWORD *)(v3 + 224) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 32) = a1;
  *(_QWORD *)(v2 + 40) = v1;
  return swift_task_switch();
}

uint64_t AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;

  v1 = swift_task_alloc();
  *(_QWORD *)(v0 + 48) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 32);
  v2 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v2;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (AFLocationAuthorizationStyle, CLAccuracyAuthorization));
  *v2 = v0;
  v2[1] = AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync();
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(uint64_t a1, double a2, double a3)
{
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v4 + 40) = a1;
  *(_QWORD *)(v4 + 48) = v3;
  *(double *)(v4 + 24) = a2;
  *(double *)(v4 + 32) = a3;
  return swift_task_switch();
}

uint64_t AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 24);
  v1 = *(_QWORD *)(v0 + 32);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 56) = v3;
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 40);
  *(_QWORD *)(v3 + 32) = v2;
  *(_QWORD *)(v3 + 40) = v1;
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 64) = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CLLocation?);
  *v4 = v0;
  v4[1] = AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)();
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 72) = v0;
  swift_task_dealloc();
  if (!v0)
    swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;

  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall AssistantLocationProvider.reset()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;

  v1 = type metadata accessor for LocationStatus(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v4 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *))(*(_QWORD *)v0 + 216))(v3);
}

uint64_t AssistantLocationProvider.deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  outlined destroy of LocationStatus(v0 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status);
  swift_release();
  swift_release();
  return v0;
}

uint64_t AssistantLocationProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  outlined destroy of LocationStatus(v0 + OBJC_IVAR____TtC21SiriInformationSearch25AssistantLocationProvider__status);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for PommesLocationManaging.fetchLocation() in conformance AssistantLocationProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 280))();
}

uint64_t protocol witness for PommesLocationManaging.setCachedLocation(location:) in conformance AssistantLocationProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 256))();
}

uint64_t protocol witness for PommesLocationManaging.cachedLocationInfo() in conformance AssistantLocationProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 264))();
}

uint64_t protocol witness for PommesLocationManaging.countryCode() in conformance AssistantLocationProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 272))();
}

uint64_t protocol witness for PommesLocationManaging.setServiceHelper(_:) in conformance AssistantLocationProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t protocol witness for PommesLocationManaging.status.getter in conformance AssistantLocationProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t protocol witness for PommesLocationManaging.statusPublisher.getter in conformance AssistantLocationProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))();
}

uint64_t closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  unint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD aBlock[6];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(AFLocationAuthorizationStyle, CLAccuracyAuthorization), Never>);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  result = (uint64_t)objc_msgSend(a2, sel_respondsToSelector_, sel_currentAuthorizationStyle_);
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
    v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    v9 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
    aBlock[4] = partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync();
    aBlock[5] = v9;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization) -> ();
    aBlock[3] = &block_descriptor_27;
    v10 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    objc_msgSend(a2, sel_currentAuthorizationStyle_, v10);
    _Block_release(v10);
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned AFLocationAuthorizationStyle, @unowned CLAccuracyAuthorization) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(uint64_t, uint64_t);

  v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);
  return swift_release();
}

uint64_t closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(uint64_t a1, void *a2, double a3, double a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  _QWORD aBlock[6];

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(_QWORD *)(v9 + 64);
  MEMORY[0x1E0C80A78](v8);
  result = (uint64_t)objc_msgSend(a2, sel_respondsToSelector_, sel_currentLocationWithAccuracy_timeout_completion_);
  if ((result & 1) != 0)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
    v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v13 = swift_allocObject();
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v13 + v12, (char *)aBlock - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
    aBlock[4] = partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:);
    aBlock[5] = v13;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
    aBlock[3] = &block_descriptor_21;
    v14 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_retain();
    objc_msgSend(a2, sel_currentLocationWithAccuracy_timeout_completion_, v14, a3, a4);
    _Block_release(v14);
    swift_release();
    swift_unknownObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(void *a1, id a2)
{
  id v2;
  id v4;

  if (a2)
  {
    v2 = a2;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    v4 = a1;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_1C247D0E0()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in AssistantLocationProvider.fetchLocation()(a1, v4, v5, v6);
}

uint64_t partial apply for closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()(a1, *(void **)(v1 + 24));
}

uint64_t partial apply for closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(a1, *(void **)(v1 + 24), *(double *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_1C247D18C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 128))();
  *a2 = result;
  return result;
}

uint64_t sub_1C247D1BC(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 136);
  v3 = swift_unknownObjectRetain();
  return v2(v3);
}

uint64_t sub_1C247D1EC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 208))();
}

uint64_t sub_1C247D218@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 232))();
  *a2 = result;
  return result;
}

uint64_t sub_1C247D248(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 240);
  v3 = swift_retain();
  return v2(v3);
}

uint64_t ObjC metadata update function for AssistantLocationProvider()
{
  return type metadata accessor for AssistantLocationProvider();
}

uint64_t type metadata accessor for AssistantLocationProvider()
{
  uint64_t result;

  result = type metadata singleton initialization cache for AssistantLocationProvider;
  if (!type metadata singleton initialization cache for AssistantLocationProvider)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for AssistantLocationProvider()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for LocationStatus(319);
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AssistantLocationProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AssistantLocationProvider.__allocating_init(serviceHelper:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 120))();
}

uint64_t dispatch thunk of AssistantLocationProvider.serviceHelper.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AssistantLocationProvider.serviceHelper.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AssistantLocationProvider.serviceHelper.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t dispatch thunk of AssistantLocationProvider.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AssistantLocationProvider.status.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of AssistantLocationProvider.status.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of AssistantLocationProvider.status.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of AssistantLocationProvider.statusPublisher.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of AssistantLocationProvider.statusPublisher.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of AssistantLocationProvider.statusPublisher.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of AssistantLocationProvider.setCachedLocation(location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of AssistantLocationProvider.cachedLocationInfo()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of AssistantLocationProvider.countryCode()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of AssistantLocationProvider.fetchLocation()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of AssistantLocationProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t sub_1C247D418()
{
  return objectdestroy_17Tm(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
}

uint64_t partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(void *a1, void *a2)
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<CLLocation?, Error>);
  return closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentLocationAsync(withAccuracy:timeout:)(a1, a2);
}

uint64_t sub_1C247D474()
{
  return objectdestroy_17Tm(&demangling cache variable for type metadata for CheckedContinuation<(AFLocationAuthorizationStyle, CLAccuracyAuthorization), Never>);
}

uint64_t objectdestroy_17Tm(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(a1);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1+ ((*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v2 - 8) + 80)), v2);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in AFRequestDispatcherServiceHelper.currentAuthorizationStyleAsync()()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(AFLocationAuthorizationStyle, CLAccuracyAuthorization), Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<(AFLocationAuthorizationStyle, CLAccuracyAuthorization), Never>);
  return CheckedContinuation.resume(returning:)();
}

double specialized closure #1 in closure #1 in AssistantLocationProvider.fetchLocation()(uint64_t a1)
{
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  const char *v8;
  uint64_t v9;

  if (a1 != 1)
  {
    if (!a1)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v1 = type metadata accessor for Logger();
      __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
      v2 = Logger.logObject.getter();
      v3 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v2, v3))
      {
        v5 = MEMORY[0x1E0C9E4A8];
        goto LABEL_19;
      }
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      _os_log_impl(&dword_1C2356000, v2, v3, "Fetching location with 100 meters accuracy", v4, 2u);
      v5 = MEMORY[0x1E0C9E4A8];
      goto LABEL_16;
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    v2 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v7))
    {
      v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v4 = 0;
      v8 = "Encountered unknown accuracyAuthorization. Fetching location with reduced accuracy.";
      goto LABEL_15;
    }
LABEL_17:
    v5 = MEMORY[0x1E0C9E4E0];
    goto LABEL_19;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  v2 = Logger.logObject.getter();
  v7 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(v2, v7))
    goto LABEL_17;
  v4 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)v4 = 0;
  v8 = "Fetching location with reduced accuracy";
LABEL_15:
  _os_log_impl(&dword_1C2356000, v2, v7, v8, v4, 2u);
  v5 = MEMORY[0x1E0C9E4E0];
LABEL_16:
  MEMORY[0x1C3BBFF64](v4, -1, -1);
LABEL_19:

  return *(double *)v5;
}

uint64_t outlined assign with take of LocationStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for LocationStatus(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t static PairedDeviceDataProvider.make()()
{
  uint64_t v0;

  type metadata accessor for PairedDeviceDataProvider();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t PairedDeviceDataProvider.__allocating_init()()
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  return result;
}

uint64_t type metadata accessor for PairedDeviceDataProvider()
{
  return objc_opt_self();
}

uint64_t PairedDeviceDataProvider.init()()
{
  uint64_t v0;
  uint64_t result;

  result = v0;
  *(_QWORD *)(v0 + 16) = 0;
  return result;
}

void *PairedDeviceDataProvider.pairedWatch.getter()
{
  uint64_t v0;
  void *v1;
  id v2;

  swift_beginAccess();
  v1 = *(void **)(v0 + 16);
  v2 = v1;
  return v1;
}

void PairedDeviceDataProvider.pairedWatch.setter(uint64_t a1)
{
  uint64_t v1;
  void *v3;

  swift_beginAccess();
  v3 = *(void **)(v1 + 16);
  *(_QWORD *)(v1 + 16) = a1;

}

uint64_t (*PairedDeviceDataProvider.pairedWatch.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> PairedDeviceDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  void *v3;
  id v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;

  v1 = v0;
  v2 = *(uint64_t (**)(void))(*(_QWORD *)v0 + 96);
  v3 = (void *)v2();

  if (!v3)
  {
    v4 = objc_msgSend((id)objc_opt_self(), sel_sharedInstance);
    v5 = objc_msgSend(v4, sel_getActivePairedDevice);

    (*(void (**)(id))(*(_QWORD *)v1 + 104))(v5);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    swift_retain_n();
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v13 = v10;
      *(_DWORD *)v9 = 136315138;
      v2();
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NRDevice?);
      v11 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v7, v8, "PairedDeviceDataProvider: paired watch fetched as %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v10, -1, -1);
      MEMORY[0x1C3BBFF64](v9, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t PairedDeviceDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t (*v32)(uint64_t);
  uint64_t v33;
  uint64_t v34[2];

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
  if (!v1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    v2 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v2, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C2356000, v2, v24, "PairedDeviceDataProvider: no paired device", v25, 2u);
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }
    goto LABEL_20;
  }
  v2 = v1;
  v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(v3, v4, v2);
  v7 = v6;
  swift_bridgeObjectRelease();
  if (!v7)
  {
LABEL_15:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1C2356000, v27, v28, "PairedDeviceDataProvider: found paired device but unable to extract productType, systemVersion, or regulatoryDeviceModel property", v29, 2u);
      MEMORY[0x1C3BBFF64](v29, -1, -1);
    }

LABEL_20:
    return 0;
  }
  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v10 = specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(v8, v9, v2);
  v12 = v11;
  swift_bridgeObjectRelease();
  if (!v12)
  {
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v15 = specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(v13, v14, v2);
  v17 = v16;
  swift_bridgeObjectRelease();
  if (!v17)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v33 = v15;
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = swift_slowAlloc();
    v22 = swift_slowAlloc();
    v34[0] = v22;
    *(_DWORD *)v21 = 136315650;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v5, v7, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v10, v12, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v21 + 22) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v17, v34);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v19, v20, "PairedDeviceDataProvider: returning paired device (product: %s, OS: %s, model: %s)", (uint8_t *)v21, 0x20u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v22, -1, -1);
    MEMORY[0x1C3BBFF64](v21, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Useragentpb_CompanionDevice>);
  type metadata accessor for Useragentpb_CompanionDevice();
  v32 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D928];
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1C24FA1B0;
  MEMORY[0x1E0C80A78](v30);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Useragentpb_CompanionDevice and conformance Useragentpb_CompanionDevice, v32, MEMORY[0x1E0D6D920]);
  static Message.with(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v30;
}

uint64_t closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v0 = type metadata accessor for Useragentpb_DeviceMetadata();
  MEMORY[0x1E0C80A78](v0);
  v1 = type metadata accessor for Useragentpb_UserAgent();
  MEMORY[0x1E0C80A78](v1);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Useragentpb_UserAgent and conformance Useragentpb_UserAgent, v2, MEMORY[0x1E0D6D7F8]);
  static Message.with(_:)();
  Useragentpb_CompanionDevice.companionUserAgent.setter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Useragentpb_DeviceMetadata and conformance Useragentpb_DeviceMetadata, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D8C8], MEMORY[0x1E0D6D8C0]);
  static Message.with(_:)();
  return Useragentpb_CompanionDevice.deviceMetadata.setter();
}

uint64_t closure #1 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  swift_bridgeObjectRetain();
  Useragentpb_UserAgent.buildOsVersion.setter();
  swift_bridgeObjectRetain();
  return Useragentpb_UserAgent.productVersion.setter();
}

Swift::Void __swiftcall PairedDeviceDataProvider.reset()()
{
  uint64_t v0;

  (*(void (**)(_QWORD))(*(_QWORD *)v0 + 104))(0);
}

uint64_t PairedDeviceDataProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PairedDeviceDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance PairedDeviceDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 136))();
  *a1 = result;
  return result;
}

uint64_t specialized PairedDeviceDataProvider.pairedDeviceValue(forKey:device:)(uint64_t a1, void *a2, void *a3)
{
  uint64_t result;
  uint64_t v7;
  void *v8;
  id v9;
  uint64_t v10;
  _OWORD v11[2];
  _BYTE v12[24];
  uint64_t v13;

  result = specialized static PegasusOverrideUtil.pairedDeviceOverrideValue(forKey:)(a1, a2);
  if (!v7)
  {
    v8 = (void *)MEMORY[0x1C3BBEC44](a1, a2);
    v9 = objc_msgSend(a3, sel_valueForProperty_, v8);

    if (v9)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v11, 0, sizeof(v11));
    }
    outlined init with take of Any?((uint64_t)v11, (uint64_t)v12);
    if (v13)
    {
      if (swift_dynamicCast())
        return v10;
      else
        return 0;
    }
    else
    {
      outlined destroy of Any?((uint64_t)v12);
      return 0;
    }
  }
  return result;
}

uint64_t partial apply for closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)();
}

uint64_t sub_1C247E40C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
  *a2 = result;
  return result;
}

uint64_t sub_1C247E43C(id *a1, uint64_t a2)
{
  id v2;
  uint64_t (*v3)(id);
  id v4;

  v2 = *a1;
  v3 = *(uint64_t (**)(id))(**(_QWORD **)a2 + 104);
  v4 = *a1;
  return v3(v2);
}

uint64_t method lookup function for PairedDeviceDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.pairedWatch.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.pairedWatch.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.pairedWatch.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PairedDeviceDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))() & 1;
}

uint64_t dispatch thunk of PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 136);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of PairedDeviceDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t partial apply for closure #1 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  return closure #1 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)();
}

uint64_t partial apply for closure #2 in closure #1 in PairedDeviceDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v2 = *(_QWORD *)(v0 + 16);
  v1 = *(_QWORD *)(v0 + 24);
  swift_bridgeObjectRetain();
  return MEMORY[0x1C3BBB188](v2, v1);
}

uint64_t UtteranceMatchPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static UtteranceMatchPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001DLL;
}

void one-time initialization function for disallowedUtterances()
{
  static UtteranceMatchPreflightClient.disallowedUtterances = (uint64_t)&outlined read-only object #0 of one-time initialization function for disallowedUtterances;
}

uint64_t *UtteranceMatchPreflightClient.disallowedUtterances.unsafeMutableAddressor()
{
  if (one-time initialization token for disallowedUtterances != -1)
    swift_once();
  return &static UtteranceMatchPreflightClient.disallowedUtterances;
}

uint64_t static UtteranceMatchPreflightClient.disallowedUtterances.getter()
{
  if (one-time initialization token for disallowedUtterances != -1)
    swift_once();
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t static UtteranceMatchPreflightClient.disallowedUtterances.setter(uint64_t a1)
{
  if (one-time initialization token for disallowedUtterances != -1)
    swift_once();
  swift_beginAccess();
  static UtteranceMatchPreflightClient.disallowedUtterances = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*static UtteranceMatchPreflightClient.disallowedUtterances.modify())()
{
  if (one-time initialization token for disallowedUtterances != -1)
    swift_once();
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

void UtteranceMatchPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  _QWORD v45[2];
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  v4 = type metadata accessor for PommesSearchReason();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v8);
  v52 = (uint64_t)v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for PommesSearchRequest(0);
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x1E0C80A78](v11);
  v16 = (char *)v45 - v15;
  v17 = (uint64_t *)(a1 + *(int *)(v14 + 20));
  v19 = *v17;
  v18 = v17[1];
  v20 = v19 & 0xFFFFFFFFFFFFLL;
  if ((v18 & 0x2000000000000000) != 0)
    v21 = HIBYTE(v18) & 0xF;
  else
    v21 = v20;
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v45 - v15);
  if (!v21)
  {
    outlined destroy of PommesSearchRequest((uint64_t)v16);
LABEL_10:
    v50 = v7;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v51 = v5;
    v24 = type metadata accessor for Logger();
    v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
    outlined init with copy of PommesSearchRequest(a1, (uint64_t)v13);
    v49 = v25;
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v47 = v4;
      v28 = swift_slowAlloc();
      v48 = a2;
      v29 = (uint8_t *)v28;
      v30 = swift_slowAlloc();
      v46 = v30;
      *(_DWORD *)v29 = 136315138;
      v54 = v30;
      v45[1] = v29 + 4;
      v31 = (uint64_t *)&v13[*(int *)(v10 + 20)];
      v33 = *v31;
      v32 = v31[1];
      swift_bridgeObjectRetain();
      v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v32, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v4 = v47;
      swift_bridgeObjectRelease();
      outlined destroy of PommesSearchRequest((uint64_t)v13);
      _os_log_impl(&dword_1C2356000, v26, v27, "UtteranceMatchPreflightClient matched utterance: %s", v29, 0xCu);
      v34 = v46;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v34, -1, -1);
      v35 = v29;
      a2 = v48;
      MEMORY[0x1C3BBFF64](v35, -1, -1);
    }
    else
    {
      outlined destroy of PommesSearchRequest((uint64_t)v13);
    }

    v36 = (uint64_t *)(a1 + *(int *)(v10 + 32));
    v37 = *v36;
    v38 = v36[1];
    v39 = v52;
    PommesSearchRequest.pommesCandidateId.getter(v52);
    v40 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v39, 0, 1, v40);
    v41 = (uint64_t)v50;
    default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)((uint64_t)v50);
    v23 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(a1, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v37, v38, v39, v41, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD00000000000001DLL, 0x80000001C24FF420);
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v41, v4);
    outlined destroy of PommesCandidateId?(v39);
    if (!v23)
    {
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v44 = 0;
        _os_log_impl(&dword_1C2356000, v42, v43, "UtteranceMatchPreflightClient#handle could not build PommesResponse with given parameters", v44, 2u);
        MEMORY[0x1C3BBFF64](v44, -1, -1);
      }

      v23 = 0;
    }
    goto LABEL_19;
  }
  if (one-time initialization token for disallowedUtterances != -1)
    swift_once();
  swift_beginAccess();
  v22 = specialized Sequence<>.contains(_:)(*(_QWORD *)&v16[*(int *)(v10 + 20)], *(_QWORD *)&v16[*(int *)(v10 + 20) + 8], (_QWORD *)static UtteranceMatchPreflightClient.disallowedUtterances);
  outlined destroy of PommesSearchRequest((uint64_t)v16);
  v23 = 0;
  if ((v22 & 1) != 0)
    goto LABEL_10;
LABEL_19:
  *a2 = v23;
}

uint64_t UtteranceMatchPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t UtteranceMatchPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t UtteranceMatchPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance UtteranceMatchPreflightClient()
{
  return 0xD00000000000001DLL;
}

uint64_t type metadata accessor for UtteranceMatchPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for UtteranceMatchPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of UtteranceMatchPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of UtteranceMatchPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  *a6 = result;
  a6[1] = a2;
  a6[2] = a3;
  a6[3] = a4;
  a6[4] = a5;
  return result;
}

uint64_t AppDataProvider.__allocating_init(appChecking:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized AppDataProvider.init(appChecking:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t AppData.applicationIdentifier.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AppData.supportedIntents.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppData.supportedMediaCategories.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppData.linkActions.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t AppDataProvider.appChecking.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return outlined init with copy of AppDataProviding(v1 + 16, a1);
}

id AppDataProvider.linkMetadataProvider.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 56);
}

uint64_t AppDataProvider.init(appChecking:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized AppDataProvider.init(appChecking:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t AppDataProvider.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return v0;
}

uint64_t AppDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t specialized AppDataProvider.init(appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *boxed_opaque_existential_1;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = a3;
  v11 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v9);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  *(_QWORD *)(a2 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  outlined init with take of AppDataProviding(&v9, a2 + 16);
  return a2;
}

uint64_t sub_1C247EF34()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t destroy for AppData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

_QWORD *initializeWithCopy for AppData(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *assignWithCopy for AppData(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AppData(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AppData(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AppData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for AppData()
{
  return &type metadata for AppData;
}

uint64_t dispatch thunk of AppDataProviding.getAppInfo(bundleId:allowPlaceholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t dispatch thunk of AppDataProviding.getVocabularies(bundleId:allowPlaceholder:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 16))();
}

uint64_t type metadata accessor for AppDataProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for AppDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AppDataProvider.__allocating_init(appChecking:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of AppDataProvider.getAppInfo(bundleId:allowPlaceholder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AppDataProvider.getVocabularies(bundleId:allowPlaceholder:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t outlined init with take of AppData?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppData?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t NLXResultCandidate.init(parses:fallbackParse:responseVariantResult:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t result;

  v10 = type metadata accessor for NLXResultCandidate();
  v11 = (uint64_t)a5 + *(int *)(v10 + 20);
  v12 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 1, 1, v12);
  v13 = (_QWORD *)((char *)a5 + *(int *)(v10 + 24));
  *v13 = 0;
  v13[1] = 0;
  *a5 = a1;
  outlined assign with take of Siri_Nlu_External_DelegatedUserDialogAct?(a2, v11);
  result = swift_bridgeObjectRelease();
  *v13 = a3;
  v13[1] = a4;
  return result;
}

uint64_t NLXResultCandidate.parses.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t NLXResultCandidate.parses.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*NLXResultCandidate.parses.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t NLXResultCandidate.fallbackParse.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
  return outlined init with copy of Siri_Nlu_External_DelegatedUserDialogAct?(v3, a1);
}

uint64_t NLXResultCandidate.fallbackParse.setter(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
  return outlined assign with take of Siri_Nlu_External_DelegatedUserDialogAct?(a1, v3);
}

uint64_t (*NLXResultCandidate.fallbackParse.modify())()
{
  type metadata accessor for NLXResultCandidate();
  return destructiveProjectEnumData for SearchError;
}

uint64_t NLXResultCandidate.responseVariantResult.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for NLXResultCandidate() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t NLXResultCandidate.responseVariantResult.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;
  uint64_t result;

  v5 = (_QWORD *)(v2 + *(int *)(type metadata accessor for NLXResultCandidate() + 24));
  result = swift_bridgeObjectRelease();
  *v5 = a1;
  v5[1] = a2;
  return result;
}

uint64_t (*NLXResultCandidate.responseVariantResult.modify())()
{
  type metadata accessor for NLXResultCandidate();
  return destructiveProjectEnumData for SearchError;
}

uint64_t *initializeBufferWithCopyOfBuffer for NLXResultCandidate(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int (*v13)(char *, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v12 = *(_QWORD *)(v11 - 8);
    v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    v15 = *(int *)(a3 + 24);
    v16 = (uint64_t *)((char *)v7 + v15);
    v17 = (uint64_t *)((char *)a2 + v15);
    v18 = v17[1];
    *v16 = *v17;
    v16[1] = v18;
    swift_bridgeObjectRetain();
  }
  return v7;
}

_QWORD *assignWithCopy for NLXResultCandidate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  *v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *initializeWithTake for NLXResultCandidate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v10 = *(_QWORD *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *assignWithTake for NLXResultCandidate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(char *, uint64_t, uint64_t);
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  v12 = v11(v7, 1, v9);
  v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  v15 = *(int *)(a3 + 24);
  v16 = (_QWORD *)((char *)a1 + v15);
  v17 = (_QWORD *)((char *)a2 + v15);
  v19 = *v17;
  v18 = v17[1];
  *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for NLXResultCandidate()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C247F8D0(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t storeEnumTagSinglePayload for NLXResultCandidate()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_1C247F95C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

void type metadata completion function for NLXResultCandidate()
{
  unint64_t v0;

  type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct?();
  if (v0 <= 0x3F)
    swift_initStructMetadata();
}

void type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?)
  {
    type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
}

uint64_t SportsPersonalizationSelection<A>.debugDescription.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  char v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  Swift::String v19;
  unint64_t v21;
  unint64_t v22;

  v3 = *(_QWORD *)(a1 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](a1);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v10 + 16))(v9, v11);
  v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 2, v3);
  if (v12)
  {
    if (v12 == 1)
      return 0x63696C7070616E69;
    else
      return 0x756769626D616E75;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v9, v3);
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    v21 = 0xD00000000000001ELL;
    v22 = 0x80000001C25074B0;
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 8))(v3, a2);
    v15 = (v14 & 1) == 0;
    if ((v14 & 1) != 0)
      v16 = 1702195828;
    else
      v16 = 0x65736C6166;
    if (v15)
      v17 = 0xE500000000000000;
    else
      v17 = 0xE400000000000000;
    v18 = v17;
    String.append(_:)(*(Swift::String *)&v16);
    swift_bridgeObjectRelease();
    v19._countAndFlagsBits = 41;
    v19._object = (void *)0xE100000000000000;
    String.append(_:)(v19);
    v13 = v21;
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v3);
  }
  return v13;
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance <A> SportsPersonalizationSelection<A>(uint64_t a1, uint64_t a2)
{
  return SportsPersonalizationSelection<A>.debugDescription.getter(a1, *(_QWORD *)(a2 - 8));
}

uint64_t type metadata instantiation function for SportsPersonalizationSelection()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t type metadata completion function for SportsPersonalizationSelection()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for SportsPersonalizationSelection(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  _BOOL8 v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  _BOOL8 v20;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(_QWORD *)(v6 + 64);
  v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        v10 = 4;
      }
      else
      {
        v12 = v11 != 0;
        v13 = v11 >= 0xFF;
        v10 = 2;
        if (!v13)
          v10 = v12;
      }
    }
    else
    {
      v10 = 1;
    }
    v9 = v10 + v8;
  }
  v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, _QWORD))(v6 + 48))(a2, 2, *(_QWORD *)(a3 + 16)))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            v18 = 4;
          }
          else
          {
            v20 = v19 != 0;
            v13 = v19 >= 0xFF;
            v18 = 2;
            if (!v13)
              v18 = v20;
          }
        }
        else
        {
          v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for SportsPersonalizationSelection(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(v3 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(a1, 2, v3);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(a1, v3);
  return result;
}

void *initializeWithCopy for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *assignWithCopy for SportsPersonalizationSelection(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(void *, uint64_t, uint64_t);
  int v8;
  int v9;
  unsigned int v10;
  size_t v11;
  uint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  BOOL v15;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  v8 = v7(a1, 2, v5);
  v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        v13 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v13 > 0xFFFE)
        {
          v12 = 4;
        }
        else
        {
          v14 = v13 != 0;
          v15 = v13 >= 0xFF;
          v12 = 2;
          if (!v15)
            v12 = v14;
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      (*(void (**)(void *, uint64_t))(v6 + 8))(a1, v5);
      v10 = *(_DWORD *)(v6 + 84);
      v11 = *(_QWORD *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
          goto LABEL_5;
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *initializeWithTake for SportsPersonalizationSelection(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  size_t v8;
  uint64_t v9;
  unsigned int v10;
  _BOOL8 v11;
  BOOL v12;

  v5 = *(_QWORD *)(a3 + 16);
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    v7 = *(_DWORD *)(v6 + 84);
    v8 = *(_QWORD *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          v9 = 4;
        }
        else
        {
          v11 = v10 != 0;
          v12 = v10 >= 0xFF;
          v9 = 2;
          if (!v12)
            v9 = v11;
        }
      }
      else
      {
        v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

