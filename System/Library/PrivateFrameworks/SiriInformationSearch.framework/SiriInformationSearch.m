uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BBFE5C]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t PommesBridge.currentSessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for PommesBridge.currentSessionId;
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v3, a1, &demangling cache variable for type metadata for UUID?);
}

uint64_t outlined destroy of MediaUserStateCenter?(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t outlined destroy of UUID?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t PommesBridge.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for PommesBridge.sessionState;
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t outlined init with take of AppDataProviding(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t outlined init with copy of AppDataProviding(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t PommesBridge.isMultiUser.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridge.isMultiUser);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesBridge.isOnlyUserInHome.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridge.isOnlyUserInHome);
  swift_beginAccess();
  return *v1;
}

uint64_t type metadata accessor for PommesBridgeRequestProcessor(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesBridgeRequestProcessor);
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

double specialized static PommesBridgeRequestProcessor.configuredScoreThreshold()()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  double v4;
  double v5;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0.6;
  v3 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000013, 0x80000001C2506390);
  objc_msgSend(v2, sel_doubleForKey_, v3);
  v5 = v4;

  if ((*(_QWORD *)&v5 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v5 & 0xFFFFFFFFFFFFFLL) == 0)
    return 0.6;
  return v5;
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t PommesBridgeRequestProcessor.handleStartTextRequestMessage(_:)(uint64_t a1)
{
  _QWORD *v1;

  return (*(uint64_t (**)(uint64_t, _QWORD))(class metadata base offset for PommesBridgeRequestProcessor
                                                    + *v1
                                                    + 328))(a1, 0);
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtRequestStart(requestId:location:)(Swift::String requestId, CLLocation_optional location)
{
  uint64_t v2;
  Class isa;
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  _QWORD v16[5];

  isa = location.value.super.isa;
  object = requestId._object;
  countAndFlagsBits = requestId._countAndFlagsBits;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1C2356000, v7, v8, "POMMES preparing for search at request start", v9, 2u);
    MEMORY[0x1C3BBFF64](v9, -1, -1);
  }

  v16[3] = &type metadata for FeatureFlag;
  v16[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v10 = swift_allocObject();
  v16[0] = v10;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(_BYTE *)(v10 + 48) = 3;
  v11 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v16);
  if ((v11 & 1) != 0)
  {
    v12 = (*(uint64_t (**)(uint64_t, void *, Class))(**(_QWORD **)(v2 + 24) + 536))(countAndFlagsBits, object, isa);
    (*(void (**)(uint64_t))(**(_QWORD **)(v2 + 40) + 200))(v12);
  }
  else
  {
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C2356000, v13, v14, "Sphinx FF is disabled, skipping prepareForSearchAtRequestStart", v15, 2u);
      MEMORY[0x1C3BBFF64](v15, -1, -1);
    }

  }
}

Swift::Void __swiftcall PegasusProxy.prepareForSearchAtRequestStart(requestId:location:)(Swift::String requestId, CLLocation_optional location)
{
  _QWORD *v2;
  _QWORD *v3;
  Class isa;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  objc_class *v13;
  uint64_t v14;
  objc_class *v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  Swift::String v42;
  uint64_t v43;

  v3 = v2;
  isa = location.value.super.isa;
  v42 = requestId;
  v5 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v6 = ((uint64_t (*)(void))MEMORY[0x1E0C80A78])();
  v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v41 - v9;
  v11 = &demangling cache variable for type metadata for (String, CacheHandling);
  if (isa)
  {
    v12 = one-time initialization token for pommes;
    v13 = isa;
    if (v12 != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v15 = v13;
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = swift_slowAlloc();
      *(_DWORD *)v18 = 134283777;
      -[objc_class coordinate](v15, sel_coordinate);
      v43 = v19;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2049;
      -[objc_class coordinate](v15, sel_coordinate);
      v43 = v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      _os_log_impl(&dword_1C2356000, v16, v17, "Received location: (%{private}f, %{private}f) from startSpeechRequest", (uint8_t *)v18, 0x16u);
      v21 = v18;
      v11 = (_QWORD *)&demangling cache variable for type metadata for (String, CacheHandling);
      MEMORY[0x1C3BBFF64](v21, -1, -1);

    }
    else
    {

    }
    v22 = v3[15];
    v23 = v3[16];
    __swift_project_boxed_opaque_existential_1(v3 + 12, v22);
    (*(void (**)(objc_class *, uint64_t, uint64_t))(v23 + 16))(v15, v22, v23);

  }
  if (v11[240] != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v27 = 0;
    _os_log_impl(&dword_1C2356000, v25, v26, "Fetching location", v27, 2u);
    MEMORY[0x1C3BBFF64](v27, -1, -1);
  }

  Date.init()();
  v28 = &v10[v5[5]];
  *(_QWORD *)v28 = "SiriInformationSearch/PegasusProxy.swift";
  *((_QWORD *)v28 + 1) = 40;
  v28[16] = 2;
  *(_QWORD *)&v10[v5[6]] = 365;
  v29 = &v10[v5[7]];
  *(_QWORD *)v29 = "prepareForSearchAtRequestStart(requestId:location:)";
  *((_QWORD *)v29 + 1) = 51;
  v29[16] = 2;
  v30 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000024);
  v31 = (uint64_t *)&v10[v5[8]];
  *v31 = v30;
  v31[1] = v32;
  v33 = v3[15];
  v34 = v3[16];
  __swift_project_boxed_opaque_existential_1(v3 + 12, v33);
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
  swift_release();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v10, 0);
  Date.init()();
  v35 = &v8[v5[5]];
  *(_QWORD *)v35 = "SiriInformationSearch/PegasusProxy.swift";
  *((_QWORD *)v35 + 1) = 40;
  v35[16] = 2;
  *(_QWORD *)&v8[v5[6]] = 369;
  v36 = &v8[v5[7]];
  *(_QWORD *)v36 = "prepareForSearchAtRequestStart(requestId:location:)";
  *((_QWORD *)v36 + 1) = 51;
  v36[16] = 2;
  v37 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000048);
  v38 = (uint64_t *)&v8[v5[8]];
  *v38 = v37;
  v38[1] = v39;
  v40 = (*(uint64_t (**)(void))(*v3 + 352))();
  if (v40)
  {
    (*(void (**)(uint64_t, void *, uint64_t (*)(), _QWORD))(*(_QWORD *)v40 + 128))(v42._countAndFlagsBits, v42._object, destructiveProjectEnumData for SearchError, 0);
    swift_release();
  }
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v8, 0);
  outlined destroy of PommesSearchRequest((uint64_t)v8, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PommesSearchRequest((uint64_t)v10, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t type metadata accessor for PommesSearchError(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for PerformanceUtil.Ticket(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PerformanceUtil.Ticket);
}

uint64_t specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;
  Swift::String v8;

  if (String.count.getter() < 101)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v5 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v3, v4, "Description is too long. Trimming to %ld characters.", v5, 0xCu);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }

    String.index(_:offsetBy:)();
    v6 = String.subscript.getter();
    v7 = MEMORY[0x1C3BBECC8](v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v8._countAndFlagsBits = 3026478;
    v8._object = (void *)0xE300000000000000;
    String.append(_:)(v8);
    swift_bridgeObjectRelease();
    return v7;
  }
  return a1;
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD))(**(_QWORD **)(v0 + 104) + 184))(v1, *(unsigned __int8 *)(v0 + 144));
  outlined destroy of PommesSearchRequest(v1, type metadata accessor for PerformanceUtil.Ticket);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  int *v3;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t (*v22)(_QWORD);

  v2 = *(int **)(v0 + 112);
  v1 = *(_QWORD *)(v0 + 120);
  v21 = *(_BYTE *)(v0 + 146);
  v3 = *(int **)(v0 + 88);
  v4 = *(_QWORD *)(v0 + 64);
  v18 = *(_QWORD *)(v0 + 72);
  v5 = *(_BYTE *)(v0 + 145);
  v7 = *(_QWORD *)(v0 + 48);
  v6 = *(_QWORD *)(v0 + 56);
  v8 = *(_QWORD *)(v0 + 40);
  v19 = *(_QWORD *)(v0 + 24);
  v20 = *(_QWORD *)(v0 + 80);
  v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v1, v8, v9);
  v10 = v1 + v2[5];
  *(_QWORD *)v10 = v7;
  *(_QWORD *)(v10 + 8) = v6;
  *(_BYTE *)(v10 + 16) = v5;
  *(_QWORD *)(v1 + v2[6]) = v4;
  v11 = v1 + v2[7];
  *(_QWORD *)v11 = v18;
  *(_QWORD *)(v11 + 8) = v20;
  *(_BYTE *)(v11 + 16) = v21;
  swift_bridgeObjectRetain();
  v12 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v19);
  v14 = v13;
  swift_bridgeObjectRelease();
  v15 = (uint64_t *)(v1 + v2[8]);
  *v15 = v12;
  v15[1] = v14;
  v22 = (uint64_t (*)(_QWORD))((char *)v3 + *v3);
  v16 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 128) = v16;
  *v16 = v0;
  v16[1] = PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:);
  return v22(*(_QWORD *)(v0 + 16));
}

{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 120);
  (*(void (**)(uint64_t, _QWORD))(**(_QWORD **)(v0 + 104) + 184))(v1, *(unsigned __int8 *)(v0 + 144));
  outlined destroy of PommesSearchRequest(v1, type metadata accessor for PerformanceUtil.Ticket);
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v8;
  uint64_t v9;
  __int128 v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;

  *(_QWORD *)(v9 + 96) = v15;
  *(_QWORD *)(v9 + 104) = v8;
  *(_BYTE *)(v9 + 146) = v13;
  *(_QWORD *)(v9 + 80) = v12;
  *(_QWORD *)(v9 + 88) = v14;
  *(_OWORD *)(v9 + 64) = v11;
  *(_BYTE *)(v9 + 145) = a8;
  *(_QWORD *)(v9 + 48) = a6;
  *(_QWORD *)(v9 + 56) = a7;
  *(_BYTE *)(v9 + 144) = a4;
  *(_QWORD *)(v9 + 32) = a3;
  *(_QWORD *)(v9 + 40) = a5;
  *(_QWORD *)(v9 + 16) = a1;
  *(_QWORD *)(v9 + 24) = a2;
  *(_QWORD *)(v9 + 112) = type metadata accessor for PerformanceUtil.Ticket(0);
  *(_QWORD *)(v9 + 120) = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:date:fileId:lineNumber:callingFunction:block:)@<X0>(uint64_t a1@<X0>, unsigned int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, int a6@<W6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;

  v30 = a7;
  v31 = a1;
  v29 = a6;
  v36 = a2;
  v32 = a8;
  v34 = a13;
  v35 = a12;
  v33 = a14;
  v17 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v19, a3, v20);
  v21 = &v19[v17[5]];
  *(_QWORD *)v21 = a4;
  *((_QWORD *)v21 + 1) = a5;
  v21[16] = v29;
  *(_QWORD *)&v19[v17[6]] = v30;
  v22 = &v19[v17[7]];
  *(_QWORD *)v22 = a9;
  *((_QWORD *)v22 + 1) = a10;
  v22[16] = a11;
  swift_bridgeObjectRetain();
  v23 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v31);
  v25 = v24;
  swift_bridgeObjectRelease();
  v26 = (uint64_t *)&v19[v17[8]];
  *v26 = v23;
  v26[1] = v25;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v37 + 216))(v19, v36, v35, v34, v33);
  return outlined destroy of PommesSearchRequest((uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
}

uint64_t PerformanceUtil.recordMeasurement<A>(for:logMeasurement:block:)(uint64_t a1, char a2, uint64_t (*a3)(void))
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = a3();
  if (!v4)
    return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 184))(a1, a2 & 1);
  return result;
}

uint64_t PerformanceUtil.recordMeasurement(for:logMeasurement:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PerformanceUtil.Ticket>);
  v5 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8) + 80);
  v6 = (v5 + 32) & ~v5;
  v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1C24FA1B0;
  outlined init with copy of PommesSearchRequest(a1, v7 + v6, type metadata accessor for PerformanceUtil.Ticket);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 192))(v7, a2);
  return swift_bridgeObjectRelease();
}

Swift::Void __swiftcall PerformanceUtil.recordMeasurement(for:logMeasurement:)(Swift::OpaquePointer a1, Swift::Bool logMeasurement)
{
  uint64_t v2;
  uint64_t v3;
  _BOOL4 v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  double v24;
  double v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  char *v32;
  _BOOL4 v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = v2;
  v4 = logMeasurement;
  v6 = type metadata accessor for Date();
  v38 = *(_QWORD *)(v6 - 8);
  v39 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PerformanceUtil.Ticket(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v37 = (uint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v32 - v13;
  v36 = type metadata accessor for PerformanceUtil.Measurement(0);
  v40 = *(_QWORD *)(v36 - 8);
  v15 = MEMORY[0x1E0C80A78](v36);
  v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v32 - v18;
  v20 = *((_QWORD *)a1._rawValue + 2);
  v21 = MEMORY[0x1E0DEE9D8];
  if (v20)
  {
    v32 = v17;
    v33 = v4;
    v34 = v3;
    v41 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20, 0);
    v22 = (char *)a1._rawValue
        + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v35 = *(_QWORD *)(v10 + 72);
    do
    {
      outlined init with copy of PommesSearchRequest((uint64_t)v22, (uint64_t)v14, type metadata accessor for PerformanceUtil.Ticket);
      v23 = v37;
      outlined init with copy of PommesSearchRequest((uint64_t)v14, v37, type metadata accessor for PerformanceUtil.Ticket);
      Date.init()();
      Date.timeIntervalSince(_:)();
      v25 = v24;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v8, v39);
      outlined init with take of PerformanceUtil.Ticket(v23, (uint64_t)v19, type metadata accessor for PerformanceUtil.Ticket);
      *(double *)&v19[*(int *)(v36 + 20)] = v25 * 1000.0;
      outlined destroy of PommesSearchRequest((uint64_t)v14, type metadata accessor for PerformanceUtil.Ticket);
      v21 = v41;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v21 + 16) + 1, 1);
        v21 = v41;
      }
      v27 = *(_QWORD *)(v21 + 16);
      v26 = *(_QWORD *)(v21 + 24);
      if (v27 >= v26 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v26 > 1, v27 + 1, 1);
        v21 = v41;
      }
      *(_QWORD *)(v21 + 16) = v27 + 1;
      outlined init with take of PerformanceUtil.Ticket((uint64_t)v19, v21+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(_QWORD *)(v40 + 72) * v27, type metadata accessor for PerformanceUtil.Measurement);
      v22 += v35;
      --v20;
    }
    while (v20);
    v3 = v34;
    LOBYTE(v4) = v33;
    v17 = v32;
  }
  if (v4 || *(_BYTE *)(v3 + 56) == 1)
  {
    v28 = *(_QWORD *)(v21 + 16);
    if (v28)
    {
      v29 = v21 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
      v30 = *(_QWORD *)(v40 + 72);
      swift_bridgeObjectRetain();
      do
      {
        outlined init with copy of PommesSearchRequest(v29, (uint64_t)v17, type metadata accessor for PerformanceUtil.Measurement);
        PerformanceUtil.Measurement.log()();
        outlined destroy of PommesSearchRequest((uint64_t)v17, type metadata accessor for PerformanceUtil.Measurement);
        v29 += v30;
        --v28;
      }
      while (v28);
      swift_bridgeObjectRelease();
    }
  }
  v31 = *(void **)(v3 + 48);
  objc_msgSend(v31, sel_lock);
  swift_beginAccess();
  specialized Array.append<A>(contentsOf:)(v21);
  swift_endAccess();
  objc_msgSend(v31, sel_unlock);
}

uint64_t initializeWithCopy for PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = a1 + v7;
  v10 = (__int128 *)(a2 + v7);
  v11 = *v10;
  *(_BYTE *)(v9 + 16) = *((_BYTE *)v10 + 16);
  *(_OWORD *)v9 = v11;
  *(_QWORD *)(a1 + v8) = *(_QWORD *)(a2 + v8);
  v12 = a3[7];
  v13 = a3[8];
  v14 = a1 + v12;
  v15 = a2 + v12;
  *(_OWORD *)v14 = *(_OWORD *)v15;
  *(_BYTE *)(v14 + 16) = *(_BYTE *)(v15 + 16);
  v16 = (_QWORD *)(a1 + v13);
  v17 = (_QWORD *)(a2 + v13);
  v18 = v17[1];
  *v16 = *v17;
  v16[1] = v18;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t type metadata accessor for PerformanceUtil.Measurement(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PerformanceUtil.Measurement);
}

uint64_t outlined destroy of PommesSearchRequest(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for PerformanceUtil.Ticket(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PerformanceUtil.Measurement(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;

  v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v8 = v7[5];
  v9 = a1 + v8;
  v10 = a2 + v8;
  *(_OWORD *)v9 = *(_OWORD *)v10;
  *(_BYTE *)(v9 + 16) = *(_BYTE *)(v10 + 16);
  *(_QWORD *)(a1 + v7[6]) = *(_QWORD *)(a2 + v7[6]);
  v11 = v7[7];
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_BYTE *)(v12 + 16) = *(_BYTE *)(v13 + 16);
  *(_OWORD *)v12 = *(_OWORD *)v13;
  v14 = v7[8];
  v15 = (_QWORD *)(a1 + v14);
  v16 = (_QWORD *)(a2 + v14);
  v17 = v16[1];
  *v15 = *v16;
  v15[1] = v17;
  *(_QWORD *)(a1 + *(int *)(a3 + 20)) = *(_QWORD *)(a2 + *(int *)(a3 + 20));
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for PerformanceUtil.Measurement(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  type metadata accessor for PerformanceUtil.Ticket(0);
  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for SignpostToken()
{
  uint64_t result;

  result = type metadata singleton initialization cache for SignpostToken;
  if (!type metadata singleton initialization cache for SignpostToken)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t OSSignposter.begin(name:context:)@<X0>(const char *a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  NSObject *v16;
  os_signpost_type_t v17;
  uint64_t result;
  const char *v19;
  void (*v20)(char *, char *, uint64_t);
  uint8_t *v21;
  os_signpost_id_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  uint64_t v27;
  int v28;
  const char *v29;
  char v30;

  v29 = a1;
  v8 = a3;
  v9 = type metadata accessor for OSSignpostID();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v25 - v14;
  if (a4)
  {
    swift_unknownObjectRetain();
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:object:)();
  }
  else
  {
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
  }
  v16 = OSSignposter.logHandle.getter();
  v17 = static os_signpost_type_t.begin.getter();
  result = OS_os_log.signpostsEnabled.getter();
  v28 = v8;
  if ((result & 1) == 0)
    goto LABEL_8;
  v27 = a2;
  if ((v8 & 1) == 0)
  {
    v19 = v29;
    if (!v29)
    {
      __break(1u);
LABEL_8:

      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v13, v15, v9);
LABEL_14:
      type metadata accessor for OSSignpostIntervalState();
      swift_allocObject();
      v23 = OSSignpostIntervalState.init(id:isOpen:)();
      *(_QWORD *)a5 = v29;
      *(_QWORD *)(a5 + 8) = a2;
      *(_BYTE *)(a5 + 16) = v28;
      v24 = type metadata accessor for SignpostToken();
      result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5 + *(int *)(v24 + 20), v15, v9);
      *(_QWORD *)(a5 + *(int *)(v24 + 24)) = v23;
      return result;
    }
LABEL_13:
    v26 = v19;
    v20 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
    v20(v13, v15, v9);
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    v22 = OSSignpostID.rawValue.getter();
    _os_signpost_emit_with_name_impl(&dword_1C2356000, v16, v17, v22, v26, "", v21, 2u);
    MEMORY[0x1C3BBFF64](v21, -1, -1);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
    a2 = v27;
    v20(v13, v15, v9);
    goto LABEL_14;
  }
  if ((unint64_t)v29 >> 32)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v29 >> 11 != 27)
  {
    if (v29 >> 16 <= 0x10)
    {
      v19 = &v30;
      goto LABEL_13;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

void type metadata accessor for CLAccuracyAuthorization(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for CLAccuracyAuthorization);
}

uint64_t destroy for SignpostToken(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1 + *(int *)(a2 + 20);
  v3 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(v2, v3);
  return swift_release();
}

uint64_t PegasusProxy.phoneCallStateManager.getter()
{
  swift_beginAccess();
  return swift_retain();
}

void PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 v17;
  void *v18;
  uint64_t inited;
  uint64_t v20;
  _QWORD *v21;
  Class isa;
  void *v23;
  void *v24;
  uint64_t aBlock[6];

  v5 = v4;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v10 = type metadata accessor for Logger();
  __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v11 = Logger.logObject.getter();
  v12 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v11, v12))
  {
    v13 = (uint8_t *)swift_slowAlloc();
    v14 = swift_slowAlloc();
    aBlock[0] = v14;
    *(_DWORD *)v13 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v11, v12, "Fetching isUserOnPhoneCall status for requestId: %s", v13, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v14, -1, -1);
    MEMORY[0x1C3BBFF64](v13, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v15 = *(_QWORD *)(v5 + 24);
  v16 = *(_QWORD *)(v5 + 32);
  *(_QWORD *)(v5 + 24) = a1;
  *(_QWORD *)(v5 + 32) = a2;
  v17 = *(_BYTE *)(v5 + 40);
  *(_BYTE *)(v5 + 40) = 0;
  swift_bridgeObjectRetain();
  outlined consume of PommesPhoneCallStateManager.Status(v15, v16, v17);
  v18 = *(void **)(v5 + 16);
  if ((objc_msgSend(v18, sel_respondsToSelector_, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_) & 1) != 0)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C24FA1B0;
    *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(_QWORD *)(inited + 40) = v20;
    swift_unknownObjectRetain();
    specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    v21 = (_QWORD *)swift_allocObject();
    v21[2] = a1;
    v21[3] = a2;
    v21[4] = v5;
    v21[5] = a3;
    v21[6] = a4;
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    isa = Set._bridgeToObjectiveC()().super.isa;
    v23 = (void *)MEMORY[0x1C3BBEC44](a1, a2);
    aBlock[4] = (uint64_t)partial apply for closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:);
    aBlock[5] = (uint64_t)v21;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_23;
    v24 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v18, sel_fetchContextsForKeys_forRequestID_includesNearbyDevices_completion_, isa, v23, 0, v24);
    _Block_release(v24);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();

  }
}

uint64_t getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = specialized _StringGuts._deconstructUTF8<A>(scratch:)(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x1E0DEC2B8];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      outlined init with copy of Any((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t specialized _StringGuts._deconstructUTF8<A>(scratch:)(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = _StringGuts._allocateForDeconstruct()(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = _StringObject.sharedUTF8.getter();
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_17:
    result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t outlined consume of PommesPhoneCallStateManager.Status(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 2u)
    return swift_bridgeObjectRelease();
  return result;
}

Swift::Void __swiftcall PegasusCacheManager.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  void *v10;
  void *v11;
  id v12;
  unsigned int v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD aBlock[6];

  v1 = type metadata accessor for DispatchWorkItemFlags();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for DispatchQoS();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) != 0)
    goto LABEL_4;
  v9 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  v10 = (void *)MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
  v11 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
  v12 = objc_msgSend(v9, sel_levelForFactor_withNamespaceName_, v10, v11);

  if (v12)
  {
    v13 = objc_msgSend(v12, sel_BOOLeanValue);

    if (v13)
    {
LABEL_4:
      v18 = *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      v14 = swift_allocObject();
      swift_weakInit();
      aBlock[4] = partial apply for closure #1 in PegasusCacheManager.prepare();
      aBlock[5] = v14;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
      aBlock[3] = &block_descriptor_4;
      v15 = _Block_copy(aBlock);
      swift_retain();
      static DispatchQoS.unspecified.getter();
      v19 = MEMORY[0x1E0DEE9D8];
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      v17 = v5;
      lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      MEMORY[0x1C3BBF154](0, v8, v4, v15);
      _Block_release(v15);
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v17);
      swift_release();
      swift_release();
    }
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed [AFServiceDeviceContext]?) -> ()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void (*v3)(uint64_t);

  v2 = a2;
  v3 = *(void (**)(uint64_t))(a1 + 32);
  if (a2)
  {
    type metadata accessor for AFServiceDeviceContext();
    v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  swift_retain();
  v3(v2);
  swift_release();
  return swift_bridgeObjectRelease();
}

unint64_t type metadata accessor for AFServiceDeviceContext()
{
  unint64_t result;

  result = lazy cache variable for type metadata for AFServiceDeviceContext;
  if (!lazy cache variable for type metadata for AFServiceDeviceContext)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for AFServiceDeviceContext);
  }
  return result;
}

uint64_t partial apply for closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(unint64_t a1)
{
  uint64_t v1;

  return closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t (**)(uint64_t))(v1 + 40));
}

uint64_t closure #1 in PommesPhoneCallStateManager.fetchIsUserOnPhoneCall(requestId:completion:)(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  id v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  id v21;
  id v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36[3];
  uint64_t v37;

  if (!a1)
    goto LABEL_17;
  v10 = a1 & 0xFFFFFFFFFFFFFF8;
  if (!(a1 >> 62))
  {
    v11 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    result = swift_bridgeObjectRetain();
    if (v11)
      goto LABEL_4;
    goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  result = _CocoaArrayWrapper.endIndex.getter();
  if (!result)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    v34 = 0u;
    v35 = 0u;
    goto LABEL_18;
  }
LABEL_4:
  if ((a1 & 0xC000000000000001) != 0)
  {
    v13 = (id)MEMORY[0x1C3BBF3F4](0, a1);
  }
  else
  {
    if (!*(_QWORD *)(v10 + 16))
    {
      __break(1u);
      return result;
    }
    v13 = *(id *)(a1 + 32);
  }
  v14 = v13;
  swift_bridgeObjectRelease();
  v15 = objc_msgSend(v14, sel_serializedContextByKey);

  if (!v15)
    goto LABEL_17;
  v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (*(_QWORD *)(v16 + 16) && (v19 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v20 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v19, (uint64_t)&v34);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v35 + 1))
    {
      outlined init with take of Any(&v34, v36);
      v21 = objc_allocWithZone(MEMORY[0x1E0CFE848]);
      __swift_project_boxed_opaque_existential_1(v36, v37);
      v22 = objc_msgSend(v21, sel_initWithSerializedBackingStore_, _bridgeAnythingToObjectiveC<A>(_:)());
      swift_unknownObjectRelease();
      if ((objc_msgSend(v22, sel_callState) & 1) != 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);

        v24 = 1;
      }
      else
      {
        v23 = (unint64_t)objc_msgSend(v22, sel_callState);

        v24 = (v23 >> 3) & 1;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v36);
      }
      goto LABEL_19;
    }
  }
  else
  {
    v34 = 0u;
    v35 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
LABEL_18:
  outlined destroy of Any?((uint64_t)&v34);
  v24 = 0;
LABEL_19:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = swift_slowAlloc();
    v29 = swift_slowAlloc();
    v36[0] = v29;
    *(_DWORD *)v28 = 67109378;
    LODWORD(v34) = v24;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 8) = 2080;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v26, v27, "Retrieved isUserOnPhoneCall status: %{BOOL}d for requestId: %s", (uint8_t *)v28, 0x12u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v29, -1, -1);
    MEMORY[0x1C3BBFF64](v28, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if ((_DWORD)v24)
    v30 = 2;
  else
    v30 = 1;
  v31 = *(_QWORD *)(a4 + 24);
  v32 = *(_QWORD *)(a4 + 32);
  *(_QWORD *)(a4 + 24) = a2;
  *(_QWORD *)(a4 + 32) = a3;
  v33 = *(_BYTE *)(a4 + 40);
  *(_BYTE *)(a4 + 40) = v30;
  swift_bridgeObjectRetain();
  outlined consume of PommesPhoneCallStateManager.Status(v31, v32, v33);
  return a5(v24);
}

void PommesBridgeRequestProcessor.handleRequestContextMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  NSObject *v15;
  uint64_t v16;
  id v17;
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  char v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE v35[4];
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v35[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v7 = type metadata accessor for UUID();
  MEMORY[0x1E0C80A78](v7);
  v9 = &v35[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = direct field offset for PommesBridgeRequestProcessor.pommesRequestContext;
  if (*(_QWORD *)((char *)v2 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    v46 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, v46, v12, "Got RequestContextMessage when we already have RequestContextData in scope. This may be due to a temporary transition period where RequestContext is being sent twice for compatibility. Ignoring this message.", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }

  }
  else
  {
    v14 = a1;
    v15 = MessageBase.assistantId.getter();
    v45 = v16;
    v46 = v15;
    v17 = v14;
    SessionMessageBase.sessionId.getter();

    v18 = v17;
    v19 = RequestMessageBase.requestId.getter();
    v43 = v20;
    v44 = v19;

    v21 = RequestContextMessage.audioSource.getter();
    v41 = v22;
    v42 = v21;
    v23 = RequestContextMessage.audioDestination.getter();
    v39 = v24;
    v40 = v23;
    v25 = RequestContextMessage.responseMode.getter();
    v37 = v26;
    v38 = v25;
    v36 = RequestContextMessage.isEyesFree.getter();
    v27 = RequestContextMessage.isVoiceTriggerEnabled.getter();
    v28 = RequestContextMessage.isTextToSpeechEnabled.getter();
    v29 = RequestContextMessage.isTriggerlessFollowup.getter();
    v30 = RequestContextMessage.bargeInModes.getter();
    RequestContextMessage.approximatePreviousTTSInterval.getter();
    v31 = RequestContextMessage.deviceRestrictions.getter();
    type metadata accessor for PommesRequestContext();
    swift_allocObject();
    v32 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)((uint64_t)v46, v45, (uint64_t)v9, v44, v43, v42, v41, v40, v39, v38, v37, v36 & 1, v27 & 1, v28 & 1, 0, v29 & 1, v30, (uint64_t)v6, v31);

    *(_QWORD *)((char *)v2 + v10) = v32;
    swift_retain();
    v33 = swift_release();
    v34 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v33);
    specialized Sequence.forEach(_:)(v34, (void (*)(char *, uint64_t))partial apply for closure #1 in PommesBridgeRequestProcessor.setRequestContextAndBeginSearchIfReady(_:));
    swift_release();
    swift_bridgeObjectRelease();
  }
}

uint64_t type metadata accessor for PommesRequestContext()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PommesRequestContext;
  if (!type metadata singleton initialization cache for PommesRequestContext)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v18;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;

  v24 = v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  *(_QWORD *)(v18 + 16) = a1;
  *(_QWORD *)(v18 + 24) = a2;
  v25 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24, a3, v25);
  v26 = (_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_requestId);
  *v26 = a4;
  v26[1] = a5;
  v27 = (_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioSource);
  *v27 = a6;
  v27[1] = a7;
  v28 = (_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_audioDestination);
  *v28 = a8;
  v28[1] = a9;
  v29 = (_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_responseMode);
  *v29 = a10;
  v29[1] = a11;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isEyesFree) = a12;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isVoiceTriggerEnabled) = a13;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTextToSpeechEnabled) = a14;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isPushOffRequest) = 0;
  *(_BYTE *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_isTriggerlessFollowup) = a15;
  *(_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_bargeInModes) = a16;
  outlined init with take of DateInterval?(a17, v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval);
  *(_QWORD *)(v18 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_deviceRestrictions) = a18;
  return v18;
}

uint64_t outlined init with take of DateInterval?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PommesBridgeRequestProcessor.handleTextBasedResultCandidateMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  _QWORD *v31;
  id v32;
  _QWORD *v33;
  uint8_t *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(uint64_t *, _QWORD);
  uint64_t v56;
  NSObject *v57;
  uint64_t v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  _QWORD *v68;
  char *v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82[5];

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = type metadata accessor for PommesCandidateId();
  v78 = *(_QWORD *)(v80 - 8);
  v7 = MEMORY[0x1E0C80A78](v80);
  v76 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v79 = (uint64_t *)((char *)&v65 - v9);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v10);
  v72 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UserID();
  MEMORY[0x1E0C80A78](v12);
  v71 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v74 = *(_QWORD *)(v14 - 8);
  v75 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v65 - v18;
  v20 = type metadata accessor for InsightRequestSummaryLogger();
  v70 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v69 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  v23 = __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
  v24 = a1;
  v73 = v23;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.debug.getter();
  v27 = os_log_type_enabled(v25, v26);
  v77 = v17;
  if (v27)
  {
    v28 = swift_slowAlloc();
    v67 = v6;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc();
    v66 = v20;
    v31 = (_QWORD *)v30;
    v68 = v2;
    *(_DWORD *)v29 = 138412290;
    v82[0] = (uint64_t)v24;
    v32 = v24;
    v2 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v31 = v24;

    _os_log_impl(&dword_1C2356000, v25, v26, "PommesBridge handling message: %@", v29, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    v33 = v31;
    v20 = v66;
    MEMORY[0x1C3BBFF64](v33, -1, -1);
    v34 = v29;
    v6 = v67;
    MEMORY[0x1C3BBFF64](v34, -1, -1);

  }
  else
  {

  }
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v35 = __swift_project_value_buffer(v20, (uint64_t)static Logger.insightRequestSummaryLogger);
  v36 = v69;
  v37 = v70;
  (*(void (**)(char *, uint64_t, uint64_t))(v70 + 16))(v69, v35, v20);
  v38 = swift_allocObject();
  v39 = v2;
  *(_QWORD *)(v38 + 16) = v2;
  *(_QWORD *)(v38 + 24) = v24;
  v24;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v20);
  v40 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v42 = v41;
  v43 = (uint64_t)v71;
  UserIdAwareResultCandidateMessageBase.userId.getter();
  v44 = TextBasedResultCandidateMessage.utterance.getter();
  v46 = v45;
  v47 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v48 = (uint64_t)v72;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v47 - 8) + 56))(v72, 1, 1, v47);
  PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)(v40, v42, v43, 0, v44, v46, 0, 0, (uint64_t)v19, 0, 0, 0, MEMORY[0x1E0DEE9D8], v48);
  v49 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v50 = v78;
  v51 = v79;
  *v79 = v49;
  v51[1] = v52;
  v53 = v80;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v50 + 104))(v51, *MEMORY[0x1E0D988C8], v80);
  v54 = (uint64_t)v76;
  (*(void (**)(char *, uint64_t *, uint64_t))(v50 + 16))(v76, v51, v53);
  outlined init with copy of PommesSearchRequest((uint64_t)v19, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v74 + 56))(v6, 0, 1, v75);
  v55 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v39
                                                                                     + 136))(v82);
  specialized Dictionary.subscript.setter((uint64_t)v6, v54);
  v55(v82, 0);
  v56 = (uint64_t)v77;
  outlined init with copy of PommesSearchRequest((uint64_t)v19, (uint64_t)v77, type metadata accessor for PommesBridgeResultCandidateState);
  v57 = Logger.logObject.getter();
  v58 = (uint64_t)v19;
  v59 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v59))
  {
    v60 = (uint8_t *)swift_slowAlloc();
    v61 = swift_slowAlloc();
    v82[0] = v61;
    *(_DWORD *)v60 = 136315138;
    v62 = PommesBridgeResultCandidateState.description.getter();
    v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest(v56, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C2356000, v57, v59, "Created %s", v60, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v61, -1, -1);
    MEMORY[0x1C3BBFF64](v60, -1, -1);

  }
  else
  {

    outlined destroy of PommesSearchRequest(v56, type metadata accessor for PommesBridgeResultCandidateState);
  }
  (*(void (**)(uint64_t *, uint64_t))(v78 + 8))(v79, v80);
  return outlined destroy of PommesSearchRequest(v58, type metadata accessor for PommesBridgeResultCandidateState);
}

uint64_t type metadata accessor for NLXResultCandidate()
{
  uint64_t result;

  result = type metadata singleton initialization cache for NLXResultCandidate;
  if (!type metadata singleton initialization cache for NLXResultCandidate)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for PommesBridgeResultCandidateState(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, type metadata singleton initialization cache for PommesBridgeResultCandidateState);
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleTextBasedResultCandidateMessage(_:)()
{
  uint64_t v0;

  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD000000000000024, 0x80000001C2501CA0, MEMORY[0x1E0D9D9C8]);
}

uint64_t implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  Swift::String v19;
  Swift::String v20;
  Swift::String v21;
  unint64_t v22;
  _QWORD *v23;
  Swift::String v24;
  Swift::String v25;
  Swift::String v26;
  unint64_t v27;
  _QWORD *v28;
  Swift::String v29;
  Swift::String v30;
  Swift::String v31;
  unint64_t v32;
  _QWORD *v33;
  Swift::String v34;
  Swift::String v35;
  Swift::String v36;
  unint64_t v37;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t (*v42)(void);
  uint64_t v43;
  unint64_t v44;

  v41 = a2;
  v42 = a5;
  v7 = type metadata accessor for UUID();
  v39 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(InsightRequestSummaryKey, String)>);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (InsightRequestSummaryKey, String));
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 72);
  v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v14 = swift_allocObject();
  v40 = v14;
  *(_OWORD *)(v14 + 16) = xmmword_1C24FE380;
  v15 = v14 + v13;
  v16 = v15 + *(int *)(v10 + 48);
  static InsightRequestSummaryKey.bridgeName.getter();
  strcpy((char *)v16, "PommesBridge");
  *(_BYTE *)(v16 + 13) = 0;
  *(_WORD *)(v16 + 14) = -5120;
  v17 = (_QWORD *)(v15 + v12 + *(int *)(v10 + 48));
  static InsightRequestSummaryKey.messageDescription.getter();
  *v17 = a3;
  v17[1] = a4;
  v18 = (_QWORD *)(v15 + 2 * v12 + *(int *)(v10 + 48));
  static InsightRequestSummaryKey.assistantId.getter();
  v43 = 0;
  v44 = 0xE000000000000000;
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = RequestProcessorBase.assistantId.getter();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0;
  v21._object = (void *)0xE000000000000000;
  String.append(_:)(v21);
  v22 = v44;
  *v18 = v43;
  v18[1] = v22;
  v23 = (_QWORD *)(v15 + 3 * v12 + *(int *)(v10 + 48));
  static InsightRequestSummaryKey.sessionId.getter();
  v43 = 0;
  v44 = 0xE000000000000000;
  v24._countAndFlagsBits = 0;
  v24._object = (void *)0xE000000000000000;
  String.append(_:)(v24);
  RequestProcessorBase.sessionId.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v9, v7);
  v26._countAndFlagsBits = 0;
  v26._object = (void *)0xE000000000000000;
  String.append(_:)(v26);
  v27 = v44;
  *v23 = v43;
  v23[1] = v27;
  v28 = (_QWORD *)(v15 + 4 * v12 + *(int *)(v10 + 48));
  static InsightRequestSummaryKey.requestId.getter();
  v43 = 0;
  v44 = 0xE000000000000000;
  v29._countAndFlagsBits = 0;
  v29._object = (void *)0xE000000000000000;
  String.append(_:)(v29);
  v30._countAndFlagsBits = RequestProcessorBase.requestId.getter();
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  v31._countAndFlagsBits = 0;
  v31._object = (void *)0xE000000000000000;
  String.append(_:)(v31);
  v32 = v44;
  *v28 = v43;
  v28[1] = v32;
  v33 = (_QWORD *)(v15 + 5 * v12 + *(int *)(v10 + 48));
  static InsightRequestSummaryKey.resultCandidateId.getter();
  v43 = 0;
  v44 = 0xE000000000000000;
  v34._countAndFlagsBits = 0;
  v34._object = (void *)0xE000000000000000;
  String.append(_:)(v34);
  v35._countAndFlagsBits = v42();
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 0;
  v36._object = (void *)0xE000000000000000;
  String.append(_:)(v36);
  v37 = v44;
  *v33 = v43;
  v33[1] = v37;
  return v40;
}

uint64_t lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x1C3BBFE74](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t objectdestroyTm()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t outlined assign with take of MediaUserStateCenter?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t outlined assign with take of Siri_Nlu_External_DelegatedUserDialogAct?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with take of PerformanceUtil.Ticket(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PommesBridgeResultCandidateState.ParseState(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesBridgeResultCandidateState.ParseState);
}

uint64_t outlined init with copy of PommesSearchRequest(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

_QWORD *initializeWithCopy for PommesBridgeResultCandidateState(_QWORD *a1, uint64_t a2, int *a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  int *v9;
  uint64_t v10;
  char *v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  char *v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int (*v34)(const void *, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  char *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void *v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(const void *, uint64_t, uint64_t);
  id v67;
  uint64_t v68;
  uint64_t v69;
  char *__dst;
  uint64_t v72;
  uint64_t v73;

  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v16 = *(void **)a2;
    v17 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v17;
    v18 = v16;
    swift_bridgeObjectRetain();
    v19 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    v20 = (char *)a1 + v19;
    v21 = (const void *)(a2 + v19);
    v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      v43 = __swift_instantiateConcreteTypeFromMangledName(v24);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v7 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v7;
    v8 = *(_QWORD *)(a2 + 24);
    a1[2] = *(_QWORD *)(a2 + 16);
    a1[3] = v8;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v10 = v9[16];
    v11 = (char *)a1 + v10;
    v12 = (const void *)(a2 + v10);
    v13 = type metadata accessor for TCUMappedNLResponse();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    {
      v15 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
    }
    *((_BYTE *)a1 + v9[20]) = *(_BYTE *)(a2 + v9[20]);
    v36 = v9[24];
    v37 = (char *)a1 + v36;
    v38 = (const void *)(a2 + v36);
    v39 = type metadata accessor for SiriUserInput();
    v40 = *(_QWORD *)(v39 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
    {
      v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v40 + 16))(v37, v38, v39);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    }
    v42 = v9[28];
    v20 = (char *)a1 + v42;
    v21 = (const void *)(a2 + v42);
    v22 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
LABEL_16:
    (*(void (**)(char *, const void *, uint64_t))(v23 + 16))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    goto LABEL_19;
  }
  v25 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v25;
  swift_bridgeObjectRetain();
  v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  v26 = *(int *)(v73 + 48);
  v27 = (char *)a1 + v26;
  v28 = a2 + v26;
  *(_QWORD *)((char *)a1 + v26) = *(_QWORD *)(a2 + v26);
  v29 = type metadata accessor for NLXResultCandidate();
  v30 = *(int *)(v29 + 20);
  __dst = &v27[v30];
  v72 = v29;
  v31 = (const void *)(v28 + v30);
  v32 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v33 + 48);
  swift_bridgeObjectRetain();
  if (v34(v31, 1, v32))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(__dst, v31, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v33 + 16))(__dst, v31, v32);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(__dst, 0, 1, v32);
  }
  v44 = *(int *)(v72 + 24);
  v45 = &v27[v44];
  v46 = (_QWORD *)(v28 + v44);
  v47 = v46[1];
  *(_QWORD *)v45 = *v46;
  *((_QWORD *)v45 + 1) = v47;
  *((_BYTE *)a1 + *(int *)(v73 + 64)) = *(_BYTE *)(a2 + *(int *)(v73 + 64));
  swift_bridgeObjectRetain();
LABEL_19:
  swift_storeEnumTagMultiPayload();
  v48 = a3[5];
  v49 = (char *)a1 + v48;
  v50 = a2 + v48;
  v51 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v51 - 8) + 16))(v49, v50, v51);
  v52 = a3[7];
  *(_QWORD *)((char *)a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v53 = *(void **)(a2 + v52);
  *(_QWORD *)((char *)a1 + v52) = v53;
  v54 = a3[8];
  v55 = a3[9];
  v56 = (_QWORD *)((char *)a1 + v54);
  v57 = (_QWORD *)(a2 + v54);
  v58 = v57[1];
  *v56 = *v57;
  v56[1] = v58;
  *((_BYTE *)a1 + v55) = *(_BYTE *)(a2 + v55);
  v59 = a3[11];
  *((_BYTE *)a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  *((_BYTE *)a1 + v59) = *(_BYTE *)(a2 + v59);
  v60 = a3[13];
  *((_BYTE *)a1 + a3[12]) = *(_BYTE *)(a2 + a3[12]);
  v61 = a3[14];
  v62 = (char *)a1 + v61;
  v63 = (const void *)(a2 + v61);
  *((_BYTE *)a1 + v60) = *(_BYTE *)(a2 + v60);
  v64 = type metadata accessor for PommesSearchEagerInfo(0);
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v65 + 48);
  v67 = v53;
  swift_bridgeObjectRetain();
  if (v66(v63, 1, v64))
  {
    v68 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v68 - 8) + 64));
  }
  else
  {
    v69 = type metadata accessor for PommesSearchReason();
    (*(void (**)(char *, const void *, uint64_t))(*(_QWORD *)(v69 - 8) + 16))(v62, v63, v69);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
  }
  return a1;
}

uint64_t storeEnumTagSinglePayload for PommesBridgeResultCandidateState()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t (*PommesBridgeRequestProcessor.pommesStateHolder.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t specialized Dictionary.subscript.setter(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PommesBridgeResultCandidateState(0);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v12 + 48))(a1, 1) == 1)
  {
    outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    specialized Dictionary._Variant.removeValue(forKey:)(a2, (uint64_t)v8);
    v13 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 8))(a2, v13);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  }
  else
  {
    outlined init with take of PerformanceUtil.Ticket(a1, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v3;
    *v3 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v11, a2, isUniquelyReferenced_nonNull_native);
    *v3 = v18;
    swift_bridgeObjectRelease();
    v16 = type metadata accessor for PommesCandidateId();
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 8))(a2, v16);
  }
}

uint64_t getEnumTagSinglePayload for PommesBridgeResultCandidateState()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t outlined init with take of PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesBridgeResultCandidateState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t PommesBridgeResultCandidateState.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t (*v20)(_QWORD);
  int EnumCaseMultiPayload;
  int *v22;
  uint64_t v23;
  uint64_t v24;
  Swift::String v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  Swift::String v29;
  Swift::String v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  Swift::String v37;
  Swift::String v38;
  Swift::String v39;
  Swift::String v40;
  Swift::String v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  int *v47;
  void *v48;
  id v49;
  uint64_t v50;
  void *v51;
  void *v52;
  Swift::String v53;
  Swift::String v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  Swift::String v58;
  Swift::String v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  Swift::String v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  Swift::String v67;
  Swift::String v68;
  Swift::String v69;
  Swift::String v70;
  uint64_t v72;
  uint64_t v73;
  _QWORD v74[2];

  v1 = v0;
  v2 = type metadata accessor for PommesCandidateId();
  v72 = *(_QWORD *)(v2 - 8);
  v73 = v2;
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v72 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v72 - v12;
  v14 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)&v72 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v19, v20);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v22 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v23 = (uint64_t)&v19[v22[24]];
      v24 = (uint64_t)&v19[v22[28]];
      outlined init with take of PommesSearchReason?((uint64_t)&v19[v22[16]], (uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      strcpy((char *)v74, "response: ");
      BYTE3(v74[1]) = 0;
      HIDWORD(v74[1]) = -369098752;
      outlined init with copy of MediaUserStateCenter?((uint64_t)v13, (uint64_t)v11, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v25._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26 = v74[0];
      v27 = (void *)v74[1];
      outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined destroy of MediaUserStateCenter?(v24, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
      outlined destroy of MediaUserStateCenter?(v23, &demangling cache variable for type metadata for SiriUserInput?);
    }
    else
    {

      v31 = *((_QWORD *)v19 + 1);
      v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?));
      outlined init with take of PommesSearchReason?((uint64_t)&v19[*(int *)(v32 + 64)], (uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      v74[0] = 0;
      v74[1] = 0xE000000000000000;
      _StringGuts.grow(_:)(37);
      swift_bridgeObjectRelease();
      strcpy((char *)v74, "userParses: (");
      HIWORD(v74[1]) = -4864;
      v33 = type metadata accessor for Siri_Nlu_External_UserParse();
      v34 = MEMORY[0x1C3BBEEC0](v31, v33);
      v36 = v35;
      swift_bridgeObjectRelease();
      v37._countAndFlagsBits = v34;
      v37._object = v36;
      String.append(_:)(v37);
      swift_bridgeObjectRelease();
      v38._countAndFlagsBits = 0xD000000000000013;
      v38._object = (void *)0x80000001C2506140;
      String.append(_:)(v38);
      v39._countAndFlagsBits = Optional.debugDescription.getter();
      String.append(_:)(v39);
      swift_bridgeObjectRelease();
      v40._countAndFlagsBits = 41;
      v40._object = (void *)0xE100000000000000;
      String.append(_:)(v40);
      v26 = v74[0];
      v27 = (void *)v74[1];
      outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)&v19[*(int *)(v28 + 48)], (uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v74[0] = 0;
    v74[1] = 0xE000000000000000;
    _StringGuts.grow(_:)(16);
    swift_bridgeObjectRelease();
    strcpy((char *)v74, "userParses: (");
    HIWORD(v74[1]) = -4864;
    v29._countAndFlagsBits = NLXResultCandidate.description.getter();
    String.append(_:)(v29);
    swift_bridgeObjectRelease();
    v30._countAndFlagsBits = 41;
    v30._object = (void *)0xE100000000000000;
    String.append(_:)(v30);
    v26 = v74[0];
    v27 = (void *)v74[1];
    outlined destroy of PommesSearchRequest((uint64_t)v16, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  v74[0] = 0;
  v74[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(103);
  v41._countAndFlagsBits = 0xD000000000000015;
  v41._object = (void *)0x80000001C2506160;
  String.append(_:)(v41);
  PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v4);
  v42 = PommesCandidateId.description.getter();
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v72 + 8))(v4, v73);
  v45._countAndFlagsBits = v42;
  v45._object = v44;
  String.append(_:)(v45);
  swift_bridgeObjectRelease();
  v46._object = (void *)0x80000001C2506180;
  v46._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v46);
  v47 = (int *)type metadata accessor for PommesBridgeResultCandidateState(0);
  v48 = *(void **)(v0 + v47[7]);
  if (v48)
  {
    v49 = objc_msgSend(v48, sel_description);
    v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v52 = v51;

  }
  else
  {
    v50 = 1701736302;
    v52 = (void *)0xE400000000000000;
  }
  v53._countAndFlagsBits = v50;
  v53._object = v52;
  String.append(_:)(v53);
  swift_bridgeObjectRelease();
  v54._countAndFlagsBits = 0x617265747475202CLL;
  v54._object = (void *)0xEE0022203A65636ELL;
  String.append(_:)(v54);
  v55 = (uint64_t *)(v1 + v47[8]);
  v56 = *v55;
  v57 = (void *)v55[1];
  swift_bridgeObjectRetain();
  v58._countAndFlagsBits = v56;
  v58._object = v57;
  String.append(_:)(v58);
  swift_bridgeObjectRelease();
  v59._countAndFlagsBits = 0x73696E6966202C22;
  v59._object = (void *)0xED0000203A646568;
  String.append(_:)(v59);
  if (*(_BYTE *)(v1 + v47[10]))
    v60 = 1702195828;
  else
    v60 = 0x65736C6166;
  if (*(_BYTE *)(v1 + v47[10]))
    v61 = 0xE400000000000000;
  else
    v61 = 0xE500000000000000;
  v62 = v61;
  String.append(_:)(*(Swift::String *)&v60);
  swift_bridgeObjectRelease();
  v63._countAndFlagsBits = 0x7463656C6573202CLL;
  v63._object = (void *)0xEC000000203A6465;
  String.append(_:)(v63);
  if (*(_BYTE *)(v1 + v47[11]))
    v64 = 1702195828;
  else
    v64 = 0x65736C6166;
  if (*(_BYTE *)(v1 + v47[11]))
    v65 = 0xE400000000000000;
  else
    v65 = 0xE500000000000000;
  v66 = v65;
  String.append(_:)(*(Swift::String *)&v64);
  swift_bridgeObjectRelease();
  v67._countAndFlagsBits = 8236;
  v67._object = (void *)0xE200000000000000;
  String.append(_:)(v67);
  v68._countAndFlagsBits = v26;
  v68._object = v27;
  String.append(_:)(v68);
  swift_bridgeObjectRelease();
  v69._countAndFlagsBits = 0x644972657375202CLL;
  v69._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v69);
  type metadata accessor for UserID();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UserID and conformance UserID, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9EF80], MEMORY[0x1E0D9EFA0]);
  v70._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v70);
  swift_bridgeObjectRelease();
  return v74[0];
}

_QWORD *initializeWithCopy for PommesBridgeResultCandidateState.ParseState(_QWORD *a1, uint64_t a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  char *v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  char *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  const void *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(const void *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  const void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  _QWORD *v44;
  uint64_t v45;
  char *__dst;
  uint64_t v48;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v14 = *(void **)a2;
    v15 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v15;
    v16 = v14;
    swift_bridgeObjectRetain();
    v17 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                 + 64);
    v18 = (char *)a1 + v17;
    v19 = (const void *)(a2 + v17);
    v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_15:
      v41 = __swift_instantiateConcreteTypeFromMangledName(v22);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
      goto LABEL_19;
    }
LABEL_16:
    (*(void (**)(char *, const void *, uint64_t))(v21 + 16))(v18, v19, v20);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    goto LABEL_19;
  }
  if (EnumCaseMultiPayload == 1)
  {
    v5 = *(_QWORD *)(a2 + 8);
    *a1 = *(_QWORD *)a2;
    a1[1] = v5;
    v6 = *(_QWORD *)(a2 + 24);
    a1[2] = *(_QWORD *)(a2 + 16);
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v8 = v7[16];
    v9 = (char *)a1 + v8;
    v10 = (const void *)(a2 + v8);
    v11 = type metadata accessor for TCUMappedNLResponse();
    v12 = *(_QWORD *)(v11 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v9, v10, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    *((_BYTE *)a1 + v7[20]) = *(_BYTE *)(a2 + v7[20]);
    v34 = v7[24];
    v35 = (char *)a1 + v34;
    v36 = (const void *)(a2 + v34);
    v37 = type metadata accessor for SiriUserInput();
    v38 = *(_QWORD *)(v37 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    {
      v39 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
      memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    v40 = v7[28];
    v18 = (char *)a1 + v40;
    v19 = (const void *)(a2 + v40);
    v20 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
      goto LABEL_15;
    }
    goto LABEL_16;
  }
  v23 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v23;
  swift_bridgeObjectRetain();
  v48 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
  v24 = *(int *)(v48 + 48);
  v25 = (char *)a1 + v24;
  v26 = a2 + v24;
  *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)(a2 + v24);
  v27 = type metadata accessor for NLXResultCandidate();
  v28 = *(int *)(v27 + 20);
  __dst = &v25[v28];
  v29 = (const void *)(v26 + v28);
  v30 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v31 + 48);
  swift_bridgeObjectRetain();
  if (v32(v29, 1, v30))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v31 + 16))(__dst, v29, v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
  }
  v42 = *(int *)(v27 + 24);
  v43 = &v25[v42];
  v44 = (_QWORD *)(v26 + v42);
  v45 = v44[1];
  *(_QWORD *)v43 = *v44;
  *((_QWORD *)v43 + 1) = v45;
  *((_BYTE *)a1 + *(int *)(v48 + 64)) = *(_BYTE *)(a2 + *(int *)(v48 + 64));
  swift_bridgeObjectRetain();
LABEL_19:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t NLXResultCandidate.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  Swift::String v4;
  Swift::String v5;
  uint64_t v6;
  Swift::String v7;
  Swift::String v8;
  _QWORD *v9;
  uint64_t v10;
  Swift::String v11;
  _QWORD v13[2];
  uint64_t v14;
  unint64_t v15;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = 0;
  v15 = 0xE000000000000000;
  _StringGuts.grow(_:)(67);
  v13[0] = *(_QWORD *)(*(_QWORD *)v0 + 16);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._object = (void *)0x80000001C2507810;
  v5._countAndFlagsBits = 0xD00000000000001BLL;
  String.append(_:)(v5);
  v6 = type metadata accessor for NLXResultCandidate();
  outlined init with copy of Siri_Nlu_External_DelegatedUserDialogAct?(v0 + *(int *)(v6 + 20), (uint64_t)v3);
  v7._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0xD000000000000022;
  v8._object = (void *)0x80000001C2507830;
  String.append(_:)(v8);
  v9 = (_QWORD *)(v0 + *(int *)(v6 + 24));
  v10 = v9[1];
  v13[0] = *v9;
  v13[1] = v10;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  v11._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v14;
}

uint64_t destroy for NLXResultCandidate(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v6 = *(_QWORD *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_bridgeObjectRelease();
}

uint64_t PommesCandidateId.description.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  Swift::String v13;
  Swift::String v14;
  uint64_t v15;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  uint64_t v21;
  unint64_t v22;

  v1 = type metadata accessor for PommesCandidateId();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (uint64_t *)((char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  v5 = (*(uint64_t (**)(uint64_t *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E0D988C8])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = v4[1];
    v8 = 0x203A64496372;
    v9 = 0xE600000000000000;
LABEL_7:
    v21 = v8;
    v22 = v9;
    goto LABEL_8;
  }
  if (v5 == *MEMORY[0x1E0D988D0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    v10 = *v4;
    v11 = (void *)v4[1];
    v12 = v4[2];
    v7 = v4[3];
    v21 = 0;
    v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(19);
    swift_bridgeObjectRelease();
    v21 = 0x203A6449707274;
    v22 = 0xE700000000000000;
    v13._countAndFlagsBits = v10;
    v13._object = v11;
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 0x203A644975637420;
    v14._object = (void *)0xE800000000000000;
    String.append(_:)(v14);
    v6 = v12;
LABEL_8:
    v15 = v7;
    String.append(_:)(*(Swift::String *)&v6);
    swift_bridgeObjectRelease();
    return v21;
  }
  if (v5 == *MEMORY[0x1E0D988C0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *v4;
    v7 = v4[1];
    v8 = 0x203A6449666572;
    v9 = 0xE700000000000000;
    goto LABEL_7;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v20 = 0;
    _os_log_impl(&dword_1C2356000, v18, v19, "Unexpected pommesCandidateId. Returning empty string for description.", v20, 2u);
    MEMORY[0x1C3BBFF64](v20, -1, -1);
  }

  (*(void (**)(uint64_t *, uint64_t))(v2 + 8))(v4, v1);
  return 0;
}

uint64_t destroy for PommesBridgeResultCandidateState(id *a1, int *a2)
{
  int EnumCaseMultiPayload;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;

  type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {

    swift_bridgeObjectRelease();
    v9 = (char *)a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                + 64);
    v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  }
  else
  {
    if (EnumCaseMultiPayload != 1)
    {
      if (!EnumCaseMultiPayload)
      {
        swift_bridgeObjectRelease();
        v5 = (char *)a1
           + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool))
                    + 48);
        swift_bridgeObjectRelease();
        v6 = &v5[*(int *)(type metadata accessor for NLXResultCandidate() + 20)];
        v7 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        v8 = *(_QWORD *)(v7 - 8);
        if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
          (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
        swift_bridgeObjectRelease();
      }
      goto LABEL_15;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v11 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
    v12 = (char *)a1 + v11[16];
    v13 = type metadata accessor for TCUMappedNLResponse();
    v14 = *(_QWORD *)(v13 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
      (*(void (**)(char *, uint64_t))(v14 + 8))(v12, v13);
    v15 = (char *)a1 + v11[24];
    v16 = type metadata accessor for SiriUserInput();
    v17 = *(_QWORD *)(v16 - 8);
    if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
      (*(void (**)(char *, uint64_t))(v17 + 8))(v15, v16);
    v9 = (char *)a1 + v11[28];
    v10 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
  }
  v18 = v10;
  v19 = *(_QWORD *)(v10 - 8);
  if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, v10))
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
LABEL_15:
  v20 = (char *)a1 + a2[5];
  v21 = type metadata accessor for UserID();
  (*(void (**)(char *, uint64_t))(*(_QWORD *)(v21 - 8) + 8))(v20, v21);

  swift_bridgeObjectRelease();
  v22 = (char *)a1 + a2[14];
  v23 = type metadata accessor for PommesSearchEagerInfo(0);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 48))(v22, 1, v23);
  if (!(_DWORD)result)
  {
    v25 = type metadata accessor for PommesSearchReason();
    return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v25 - 8) + 8))(v22, v25);
  }
  return result;
}

Swift::Void __swiftcall PommesLocationManager.locationManagerDidChangeAuthorization(_:)(CLLocationManager a1)
{
  Class isa;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  int v14;
  void *v15;
  void (*v16)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>));
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  Class v33;
  char *v34;
  int *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  _DWORD *v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  _DWORD *v50;
  id v51;
  id v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  _DWORD *v59;
  uint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  char *v68;
  Class v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  isa = a1.super.isa;
  v2 = type metadata accessor for LocationStatus(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v64 = (char *)v61 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v66 = (char *)v61 - v6;
  MEMORY[0x1E0C80A78](v5);
  v65 = (char *)v61 - v7;
  v62 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v62);
  v68 = (char *)v61 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = -[objc_class authorizationStatus](isa, sel_authorizationStatus);
  v14 = (int)v13;
  if (one-time initialization token for shared != -1)
    v13 = (id)swift_once();
  v15 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v13);
  v69 = isa;
  v59 = isa;
  Date.init()();
  v16 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>)))(*(_QWORD *)v15 + 200);
  type metadata accessor for CLAccuracyAuthorization(0);
  v59 = &v58;
  v60 = v17;
  LOBYTE(v58) = 2;
  v16(&v72, 0xD000000000000037, 0x80000001C2509E10, 0, v12, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 379, "locationManagerDidChangeAuthorization(_:)", 41, v58, partial apply for closure #1 in PommesLocationManager.locationManagerDidChangeAuthorization(_:));
  v67 = 0;
  v63 = *(void (**)(char *, uint64_t))(v10 + 8);
  v63(v12, v9);
  v18 = v72;
  v19 = v9;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  v61[1] = __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v61[0] = v9;
    v25 = v24;
    v72 = v24;
    *(_DWORD *)v23 = 136315394;
    LODWORD(v71) = v14;
    type metadata accessor for CLAuthorizationStatus(0);
    v26 = String.init<A>(describing:)();
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    v28 = v18;
    v71 = v18;
    v29 = String.init<A>(describing:)();
    v71 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v21, v22, "Auth Change: %s, %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    v31 = v25;
    v19 = v61[0];
    MEMORY[0x1C3BBFF64](v31, -1, -1);
    MEMORY[0x1C3BBFF64](v23, -1, -1);
  }
  else
  {
    v28 = v18;
  }

  v33 = v69;
  if ((v14 - 3) > 1)
  {
    MEMORY[0x1E0C80A78](v32);
    v59 = v50;
    v52 = v51;
    v53 = (uint64_t)v64;
    OS_dispatch_queue.sync<A>(execute:)();

    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v54 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
      v63((char *)(v53 + *(int *)(v54 + 48)), v19);
      if (one-time initialization token for loc != -1)
        swift_once();
      v55 = type metadata accessor for OSSignposter();
      __swift_project_value_buffer(v55, (uint64_t)static Signposter.loc);
      OSSignposter.end(name:context:message:)("locationManager.startup", 23, 2, v70, 0x726F687475616E75, 0xEC00000064657A69);
    }
    else
    {
      outlined destroy of PommesSearchRequest(v53, type metadata accessor for LocationStatus);
    }
    v57 = (uint64_t)v66;
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter(v57);
  }
  else
  {
    v34 = v68;
    Date.init()();
    v35 = (int *)v62;
    v36 = &v34[*(int *)(v62 + 20)];
    *(_QWORD *)v36 = "SiriInformationSearch/PommesLocationManager.swift";
    *((_QWORD *)v36 + 1) = 49;
    v36[16] = 2;
    *(_QWORD *)&v34[v35[6]] = 383;
    v37 = &v34[v35[7]];
    *(_QWORD *)v37 = "locationManagerDidChangeAuthorization(_:)";
    *((_QWORD *)v37 + 1) = 41;
    v37[16] = 2;
    v38 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
    v39 = (uint64_t *)&v34[v35[8]];
    *v39 = v38;
    v39[1] = v40;
    MEMORY[0x1E0C80A78](v38);
    v59 = v41;
    v43 = v42;
    v44 = (uint64_t)v65;
    OS_dispatch_queue.sync<A>(execute:)();

    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
      v63((char *)(v44 + *(int *)(v45 + 48)), v19);
      v46 = Logger.logObject.getter();
      v47 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v46, v47))
      {
        v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v48 = 0;
        _os_log_impl(&dword_1C2356000, v46, v47, "Received Auth Change while in pending state. Setting state to unknown so we can re-request our location", v48, 2u);
        MEMORY[0x1C3BBFF64](v48, -1, -1);
      }

      v49 = (uint64_t)v66;
      swift_storeEnumTagMultiPayload();
      PommesLocationManager.status.setter(v49);
    }
    else
    {
      outlined destroy of PommesSearchRequest(v44, type metadata accessor for LocationStatus);
    }
    PommesLocationManager.requestLocation(with:accuracyAuthorization:didAuthorizationChange:)(v33, v28, 1);
    v56 = (uint64_t)v68;
    (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v68, 0);
    outlined destroy of PommesSearchRequest(v56, type metadata accessor for PerformanceUtil.Ticket);
  }
}

id partial apply for closure #1 in PommesLocationManager.locationManagerDidChangeAuthorization(_:)@<X0>(_QWORD *a1@<X8>)
{
  return partial apply for closure #1 in PommesLocationManager.locationManager(_:didUpdateLocations:)(a1);
}

void type metadata accessor for CLAuthorizationStatus(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for CLAuthorizationStatus);
}

Swift::Void __swiftcall PommesLocationManager.locationManager(_:didUpdateLocations:)(CLLocationManager _, Swift::OpaquePointer didUpdateLocations)
{
  _DWORD *v2;
  _DWORD *v3;
  uint64_t internal;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  void *v19;
  id v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  _BOOL4 v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint8_t *v40;
  uint64_t v41;
  id v42;
  uint64_t v43;
  id v44;
  id v45;
  char *v46;
  uint64_t EnumCaseMultiPayload;
  void *v48;
  char *v49;
  void (*v50)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>));
  uint64_t v51;
  uint64_t v52;
  void *v53;
  id v54;
  uint64_t v55;
  _DWORD *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  id v60;
  char v61;
  char *v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  int v66;
  _DWORD *v67;
  uint64_t v68;
  _QWORD v69[2];
  uint64_t v70;
  char *v71;
  char *v72;
  id v73;
  Class isa;
  char *v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  char *v79;
  _DWORD *v80;
  uint64_t v81;
  uint64_t v82[2];

  v3 = v2;
  internal = (uint64_t)_._internal;
  isa = _.super.isa;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)v69 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v75 = (char *)v69 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for LocationStatus(0);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v79 = (char *)v69 - v16;
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)v69 - v17;
  v78 = OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue;
  v19 = *(void **)((char *)v2 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  v80 = v2;
  v20 = v19;
  v21 = 0;
  OS_dispatch_queue.sync<A>(execute:)();

  if (swift_getEnumCaseMultiPayload() != 1)
  {
    outlined destroy of PommesSearchRequest((uint64_t)v18, type metadata accessor for LocationStatus);
    goto LABEL_5;
  }
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date));
  (*(void (**)(char *, unint64_t))(v9 + 8))(&v18[*(int *)(v22 + 48)], v8);
  if (one-time initialization token for loc != -1)
    goto LABEL_34;
  while (1)
  {
    v23 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v23, (uint64_t)static Signposter.loc);
    OSSignposter.end(name:context:message:)("locationManager.startup", 23, 2, (uint64_t)v3, 0, 0xE000000000000000);
LABEL_5:
    v76 = v9;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v73 = (id)v25;
    v9 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    v27 = os_log_type_enabled((os_log_t)v9, v26);
    v77 = v8;
    if (v27)
    {
      v28 = swift_slowAlloc();
      v70 = v11;
      v29 = (uint8_t *)v28;
      v30 = swift_slowAlloc();
      v71 = v14;
      v31 = v30;
      v82[0] = v30;
      v72 = v7;
      *(_DWORD *)v29 = 136315138;
      v69[1] = v29 + 4;
      v32 = v21;
      v33 = v3;
      v34 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for CLLocation);
      v35 = swift_bridgeObjectRetain();
      v36 = MEMORY[0x1C3BBEE9C](v35, v34);
      v8 = v37;
      swift_bridgeObjectRelease();
      v38 = v36;
      v3 = v33;
      v21 = v32;
      v81 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v8, v82);
      v7 = v72;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, (os_log_t)v9, v26, "Location Update: %s", v29, 0xCu);
      swift_arrayDestroy();
      v39 = v31;
      v14 = v71;
      MEMORY[0x1C3BBFF64](v39, -1, -1);
      v40 = v29;
      v11 = v70;
      MEMORY[0x1C3BBFF64](v40, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    if ((unint64_t)internal >> 62)
      break;
    v41 = *(_QWORD *)((internal & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v41)
      goto LABEL_29;
LABEL_12:
    if ((internal & 0xC000000000000001) != 0)
    {
      v42 = (id)MEMORY[0x1C3BBF3F4](0, internal);
LABEL_15:
      v73 = v42;
      v43 = swift_bridgeObjectRelease();
      MEMORY[0x1E0C80A78](v43);
      v67 = v3;
      v45 = v44;
      v46 = v79;
      OS_dispatch_queue.sync<A>(execute:)();

      EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if ((EnumCaseMultiPayload - 2) < 4)
      {
LABEL_16:
        if (one-time initialization token for shared != -1)
          EnumCaseMultiPayload = swift_once();
        v48 = static PerformanceUtil.shared;
        MEMORY[0x1E0C80A78](EnumCaseMultiPayload);
        v49 = v75;
        v67 = isa;
        Date.init()();
        v50 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, id (*)@<X0>(_QWORD *@<X8>)))(*(_QWORD *)v48 + 200);
        type metadata accessor for CLAccuracyAuthorization(0);
        v67 = &v66;
        v68 = v51;
        LOBYTE(v66) = 2;
        v50(v82, 0xD000000000000033, 0x80000001C2509EC0, 0, v49, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 418, "locationManager(_:didUpdateLocations:)", 38, v66, partial apply for closure #1 in PommesLocationManager.locationManager(_:didUpdateLocations:));
        (*(void (**)(char *, unint64_t))(v76 + 8))(v49, v77);
        v52 = v82[0];
        goto LABEL_19;
      }
      if ((_DWORD)EnumCaseMultiPayload)
      {
        v61 = v46[8];
        v62 = &v46[*(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (CLAccuracyAuthorization?, Date))
                          + 48)];
        if ((v61 & 1) != 0)
        {
          EnumCaseMultiPayload = (*(uint64_t (**)(char *, unint64_t))(v76 + 8))(v62, v77);
          goto LABEL_16;
        }
        v52 = *(_QWORD *)v46;
        (*(void (**)(char *, unint64_t))(v76 + 8))(v62, v77);
      }
      else
      {
        v52 = *((_QWORD *)v46 + 1);

      }
LABEL_19:
      v53 = v73;
      *(_QWORD *)v14 = v73;
      *((_QWORD *)v14 + 1) = v52;
      v14[16] = 0;
      swift_storeEnumTagMultiPayload();
      v54 = v53;
      PommesLocationManager.status.setter((uint64_t)v14);
      v55 = swift_allocObject();
      *(_QWORD *)(v55 + 16) = v3;
      *(_QWORD *)(v55 + 24) = v52;
      v56 = v3;
      static TaskPriority.userInitiated.getter();
      v57 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v57 - 8) + 56))(v7, 0, 1, v57);
      v58 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v59 = (_QWORD *)swift_allocObject();
      v59[2] = 0;
      v59[3] = 0;
      v59[4] = v58;
      v59[5] = v54;
      v59[6] = partial apply for closure #2 in PommesLocationManager.locationManager(_:didUpdateLocations:);
      v59[7] = v55;
      v60 = v54;
      swift_retain();
      _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v7, (uint64_t)&closure #1 in PommesLocationManager.shiftedLocation(for:completion:)partial apply, (uint64_t)v59);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for TaskPriority?);

      swift_release();
      return;
    }
    if (*(_QWORD *)((internal & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      v42 = *(id *)(internal + 32);
      goto LABEL_15;
    }
    __break(1u);
LABEL_34:
    swift_once();
  }
  if (internal < 0)
    v8 = internal;
  else
    v8 = internal & 0xFFFFFFFFFFFFFF8;
  swift_bridgeObjectRetain();
  if (_CocoaArrayWrapper.endIndex.getter())
    goto LABEL_12;
LABEL_29:
  swift_bridgeObjectRelease();
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v65 = 0;
    _os_log_impl(&dword_1C2356000, v63, v64, "No locations", v65, 2u);
    MEMORY[0x1C3BBFF64](v65, -1, -1);
  }

  swift_storeEnumTagMultiPayload();
  PommesLocationManager.status.setter((uint64_t)v14);
}

uint64_t OSSignposter.end(name:context:message:)(const char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  const char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  NSObject *v21;
  uint64_t result;
  void (*v23)(char *, uint64_t);
  const char *v24;
  uint64_t v25;
  char v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  os_signpost_id_t v31;
  void (*v32)(char *, uint64_t);
  char *v33;
  unint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  int v36;
  uint64_t v37;
  const char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  char v44;

  v39 = a5;
  LODWORD(v40) = a3;
  v41 = (char *)a1;
  v8 = (const char *)type metadata accessor for OSSignpostError();
  v37 = *((_QWORD *)v8 - 1);
  v38 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignpostID();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v13);
  v18 = (char *)&v33 - v17;
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v33 - v19;
  if (a4)
  {
    swift_unknownObjectRetain();
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:object:)();
  }
  else
  {
    OSSignposter.logHandle.getter();
    OSSignpostID.init(log:)();
  }
  v35 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v35(v18, v20, v11);
  type metadata accessor for OSSignpostIntervalState();
  swift_allocObject();
  OSSignpostIntervalState.init(id:isOpen:)();
  swift_bridgeObjectRetain_n();
  v21 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v36 = static os_signpost_type_t.end.getter();
  result = OS_os_log.signpostsEnabled.getter();
  if ((result & 1) == 0)
    goto LABEL_8;
  v34 = a6;
  if ((v40 & 1) == 0)
  {
    if (!v41)
    {
      swift_bridgeObjectRelease_n();
      __break(1u);
LABEL_8:
      swift_bridgeObjectRelease_n();

      v23 = *(void (**)(char *, uint64_t))(v12 + 8);
      v23(v15, v11);
      v23(v20, v11);
      return swift_release();
    }
    goto LABEL_13;
  }
  if ((unint64_t)v41 >> 32)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (v41 >> 11 == 27)
  {
LABEL_20:
    __break(1u);
    return result;
  }
  if (v41 >> 16 > 0x10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v41 = &v44;
LABEL_13:
  v40 = v12;
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  v25 = v37;
  v24 = v38;
  if ((*(unsigned int (**)(char *, const char *))(v37 + 88))(v10, v38) == *MEMORY[0x1E0DF2190])
  {
    v26 = 0;
    v27 = 0;
    v38 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, const char *))(v25 + 8))(v10, v24);
    v38 = "%s";
    v27 = 2;
    v26 = 1;
  }
  v33 = v15;
  v35(v18, v15, v11);
  v28 = swift_slowAlloc();
  v29 = swift_slowAlloc();
  v43 = v29;
  *(_BYTE *)v28 = v27;
  *(_BYTE *)(v28 + 1) = v26;
  *(_WORD *)(v28 + 2) = 2080;
  v30 = v34;
  swift_bridgeObjectRetain();
  v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v30, &v43);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  v31 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1C2356000, v21, (os_signpost_type_t)v36, v31, v41, v38, (uint8_t *)v28, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v29, -1, -1);
  MEMORY[0x1C3BBFF64](v28, -1, -1);

  v32 = *(void (**)(char *, uint64_t))(v40 + 8);
  v32(v33, v11);
  v32(v20, v11);
  swift_release();
  return ((uint64_t (*)(char *, uint64_t))v32)(v18, v11);
}

uint64_t _StringGuts._allocateForDeconstruct()(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = specialized _copyCollectionToContiguousArray<A>(_:)(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = _StringGuts.copyUTF8(into:)();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
LABEL_10:
      v2 = String.UTF8View._foreignCount()();
      if (!v2)
        return MEMORY[0x1E0DEE9D8];
    }
    _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
LABEL_14:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    return MEMORY[0x1E0DEE9D8];
  }
  return result;
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(textMatchScore: Float, itemTypeMatchScore: Float)>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 25;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  v6 = specialized Sequence._copySequenceContents(initializing:)(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
  if (v6 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v5 = v4 - 32;
  if (v4 < 32)
    v5 = v4 - 17;
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  v6 = specialized Sequence._copySequenceContents(initializing:)((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
  if (v6 != v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  uint64_t v1;
  _QWORD *v3;
  size_t v4;
  _QWORD *v5;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 16);
  if (!v1)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AppData>);
  v3 = (_QWORD *)swift_allocObject();
  v4 = _swift_stdlib_malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 40);
  v5 = specialized Sequence._copySequenceContents(initializing:)(&v7, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  outlined consume of [String : (textMatchScore: Float, itemTypeMatchScore: Float)].Iterator._Variant();
  if (v5 != (_QWORD *)v1)
  {
    __break(1u);
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

_QWORD *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(name: String, identifier: String)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Int>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MUXUserInfo>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PommesUsoTask>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(beginIndex: Int, parenOpen: Character)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Double>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<String.Index>>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<[UsoIdentifier]>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 1;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 5);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 4])
          memmove(v13, a4 + 4, 32 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<KVFieldType>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 25;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 3);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v13 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[v8 + 4])
          memmove(v13, a4 + 4, 8 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (char *)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, AppData)>);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 56);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[7 * v8 + 4])
          memmove(v12, a4 + 4, 56 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v12 = (_QWORD *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4)
{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(Siri_Nlu_External_Span, RREntity)>, &demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6FA78]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_SiriCommandBuilder>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6CE58]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA0688]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrTokenInformation>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F800]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E868]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3D70]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AmpUserState>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E828]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntity>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E758]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppInfo>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6DDC0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EDE8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction)>, &demangling cache variable for type metadata for (entity: SportsPersonalizationEntity, instruction: Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction));
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ContactAddress>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6ECC0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<UUID>, (uint64_t (*)(_QWORD))MEMORY[0x1E0CB0998]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PimsSuggestionMetadata>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3BD0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_LibrarySearchTerm>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F160]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PerformanceUtil.Measurement>, type metadata accessor for PerformanceUtil.Measurement);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_Restriction>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E520]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_AsrHypothesis>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F3C0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F340]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F240]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserDialogAct>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F4B0]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpanProperty>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA04E8]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<PommesRenderOptions.PromptType>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D98E80]);
}

{
  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, a4, &demangling cache variable for type metadata for _ContiguousArrayStorage<(query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>, &demangling cache variable for type metadata for (query: SEMSpanMatchQuery, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
}

char *specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonAudio.RadioType>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<CommonAudio.Decade>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * v11 - 64;
      v12 = v10 + 32;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[v8 + 32])
          memmove(v12, a4 + 32, v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v12 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = *((_QWORD *)a4 + 3);
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = *((_QWORD *)a4 + 2);
    if (v7 <= v8)
      v9 = *((_QWORD *)a4 + 2);
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt32>);
      v10 = (char *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 29;
      *((_QWORD *)v10 + 2) = v8;
      *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
      v13 = v10 + 32;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (char *)MEMORY[0x1E0DEE9D8];
      v13 = (char *)(MEMORY[0x1E0DEE9D8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[4 * v8 + 32])
          memmove(v13, a4 + 32, 4 * v8);
        *((_QWORD *)a4 + 2) = 0;
        goto LABEL_24;
      }
    }
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v8, v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Range<Int>>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<UInt8>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t PommesBridgeRequestProcessor.handleNLResultCandidateMessage(_:)(void *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint8_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v53;
  uint64_t v54;
  char v55;
  _QWORD *v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t *, _QWORD);
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  void *v116;
  NSObject *v118;
  os_log_type_t v119;
  uint8_t *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t *v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146[4];

  v2 = v1;
  v132 = type metadata accessor for PommesSearchReason();
  v131 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132);
  v130 = (char *)&v121 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v5);
  v129 = (char *)&v121 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v7);
  v126 = (char *)&v121 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v124 = type metadata accessor for NLXResultCandidate();
  v9 = MEMORY[0x1E0C80A78](v124);
  v125 = (uint64_t *)((char *)&v121 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v127 = (uint64_t)&v121 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v128 = (uint64_t)&v121 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v137 = (uint64_t *)((char *)&v121 - v15);
  v140 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v136 = *(_QWORD *)(v140 - 8);
  MEMORY[0x1E0C80A78](v140);
  v138 = (char *)&v121 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for InsightRequestSummaryLogger();
  v135 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v134 = (char *)&v121 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for PommesCandidateId();
  v142 = *(_QWORD *)(v19 - 8);
  v143 = v19;
  v20 = MEMORY[0x1E0C80A78](v19);
  v133 = (uint64_t)&v121 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v23 = (uint64_t *)((char *)&v121 - v22);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  v25 = __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  v26 = a1;
  v139 = v25;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  v29 = os_log_type_enabled(v27, v28);
  v141 = v23;
  if (v29)
  {
    v30 = (uint8_t *)swift_slowAlloc();
    v31 = swift_slowAlloc();
    v146[0] = v31;
    v123 = v2;
    *(_DWORD *)v30 = 136315138;
    v32 = NLResultCandidateMessageBase.userParses.getter();
    v33 = specialized Sequence<>.summarizedDescription.getter(v32);
    v122 = v17;
    v35 = v34;
    swift_bridgeObjectRelease();
    v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v35, v146);
    v2 = v123;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v17 = v122;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v27, v28, "PommesBridgeRequestProcessor received messages: %s", v30, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v31, -1, -1);
    v36 = v30;
    v23 = v141;
    MEMORY[0x1C3BBFF64](v36, -1, -1);

  }
  else
  {

  }
  *v23 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
  v23[1] = v37;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v142 + 104))(v23, *MEMORY[0x1E0D988C8], v143);
  v38 = *(_QWORD *)((char *)v2 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
  v39 = RequestProcessorBase.requestId.getter();
  v41 = v40;
  v42 = RequestProcessorBase.rootLevelRequestId.getter();
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 128))(v23, v39, v41, v42, v43);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v44 = __swift_project_value_buffer(v17, (uint64_t)static Logger.insightRequestSummaryLogger);
  v45 = v135;
  v46 = v134;
  (*(void (**)(char *, uint64_t, uint64_t))(v135 + 16))(v134, v44, v17);
  v47 = swift_allocObject();
  *(_QWORD *)(v47 + 16) = v2;
  *(_QWORD *)(v47 + 24) = v26;
  v26;
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  v48 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v46, v17);
  v49 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v48);
  v50 = v136;
  if (*(_QWORD *)(v49 + 16))
  {
    v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23);
    v52 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v137;
    v53 = (uint64_t)v138;
    v54 = v140;
    if ((v55 & 1) != 0)
    {
      outlined init with copy of PommesSearchRequest(*(_QWORD *)(v49 + 56) + *(_QWORD *)(v50 + 72) * v51, (uint64_t)v137, type metadata accessor for PommesBridgeResultCandidateState);
      v56 = *(_QWORD **)(v50 + 56);
      ((void (*)(_QWORD, _QWORD, uint64_t, uint64_t))v56)(v52, 0, 1, v54);
    }
    else
    {
      v56 = *(_QWORD **)(v50 + 56);
      ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v56)(v137, 1, 1, v140);
    }
  }
  else
  {
    v56 = *(_QWORD **)(v136 + 56);
    v52 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v137;
    v54 = v140;
    ((void (*)(_QWORD *, uint64_t, uint64_t, uint64_t))v56)(v137, 1, 1, v140);
    v53 = (uint64_t)v138;
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(void (*)(_QWORD, _QWORD, _QWORD, _QWORD), uint64_t, uint64_t))(v50 + 48))(v52, 1, v54) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v52, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    swift_retain_n();
    v57 = Logger.logObject.getter();
    v58 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v57, v58))
    {
      v59 = (uint8_t *)swift_slowAlloc();
      v60 = swift_slowAlloc();
      v146[0] = v60;
      *(_DWORD *)v59 = 136315138;
      v61 = RequestProcessorBase.requestId.getter();
      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v57, v58, "Do not have prior state for this NLResultCandidateMessage for requestId: %s", v59, 0xCu);
      swift_arrayDestroy();
      v63 = v60;
      v23 = v141;
      MEMORY[0x1C3BBFF64](v63, -1, -1);
      MEMORY[0x1C3BBFF64](v59, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v101 = RequestProcessorBase.requestId.getter();
    v103 = v102;
    v104 = RequestProcessorBase.rootLevelRequestId.getter();
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v38 + 144))(5, v23, v101, v103, v104, v105);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v106 = ResultCandidateRequestMessageBase.resultCandidateId.getter();
    v108 = v107;
    v109 = *MEMORY[0x1E0D9E820];
    v110 = type metadata accessor for PommesError();
    v111 = *(_QWORD *)(v110 - 8);
    v112 = (uint64_t)v129;
    (*(void (**)(char *, uint64_t, uint64_t))(v111 + 104))(v129, v109, v110);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v111 + 56))(v112, 0, 1, v110);
    v113 = v131;
    v114 = v130;
    v115 = v132;
    (*(void (**)(char *, _QWORD, uint64_t))(v131 + 104))(v130, *MEMORY[0x1E0D98920], v132);
    v116 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                        + *v2
                                                                                        + 520))(v106, v108, 0, v112, v114);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v113 + 8))(v114, v115);
    outlined destroy of MediaUserStateCenter?(v112, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
    if (v116)
    {
      RequestProcessorBase.messagePublisher.getter();
      __swift_project_boxed_opaque_existential_1(v146, v146[3]);
      dispatch thunk of MessagePublishing.postMessage(_:)();

      (*(void (**)(uint64_t *, uint64_t))(v142 + 8))(v23, v143);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)v146);
    }
    else
    {
      v118 = Logger.logObject.getter();
      v119 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v118, v119))
      {
        v120 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v120 = 0;
        _os_log_impl(&dword_1C2356000, v118, v119, "PommesBridgeRequestProcessor failed to build noQuery message", v120, 2u);
        MEMORY[0x1C3BBFF64](v120, -1, -1);
      }

      return (*(uint64_t (**)(uint64_t *, uint64_t))(v142 + 8))(v23, v143);
    }
  }
  else
  {
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v52, v53, type metadata accessor for PommesBridgeResultCandidateState);
    PommesBridgeResultCandidateState.setHasNLResultCandidate(_:)(1);
    v64 = NLResultCandidateMessageBase.userParses.getter();
    v65 = (uint64_t)v126;
    NLResultCandidateMessageBase.fallbackParse.getter();
    v66 = NLResultCandidateMessageBase.responseVariantResult.getter();
    v68 = v67;
    v69 = v124;
    v70 = *(int *)(v124 + 20);
    v137 = v56;
    v71 = v125;
    v72 = (uint64_t)v125 + v70;
    v73 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v73 - 8) + 56))(v72, 1, 1, v73);
    v74 = (uint64_t *)((char *)v71 + *(int *)(v69 + 24));
    *v74 = 0;
    v74[1] = 0;
    *v71 = v64;
    outlined assign with take of MediaUserStateCenter?(v65, v72, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    swift_bridgeObjectRelease();
    *v74 = v66;
    v74[1] = v68;
    v75 = v127;
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v71, v127, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    PommesBridgeResultCandidateState.setNLXResultCandidate(_:)(v75);
    outlined destroy of PommesSearchRequest(v75, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v76 = NLResultCandidateMessage.voiceIdClassification.getter();
    if ((v77 & 1) != 0)
      v78 = 0;
    else
      v78 = v76;
    v80 = v140;
    v79 = v141;
    *(_QWORD *)(v53 + *(int *)(v140 + 24)) = v78;
    v81 = v133;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v142 + 16))(v133, v79, v143);
    v82 = v128;
    outlined init with copy of PommesSearchRequest(v53, v128, type metadata accessor for PommesBridgeResultCandidateState);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v137)(v82, 0, 1, v80);
    v83 = (void (*)(uint64_t *, _QWORD))(*(uint64_t (**)(uint64_t *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                       + *v2
                                                                                       + 136))(v146);
    specialized Dictionary.subscript.setter(v82, v81);
    v83(v146, 0);
    v84 = Logger.logObject.getter();
    v85 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v84, v85))
    {
      v86 = (uint8_t *)swift_slowAlloc();
      v87 = swift_slowAlloc();
      v146[0] = v87;
      *(_DWORD *)v86 = 136315138;
      swift_beginAccess();
      v88 = PommesBridgeResultCandidateState.description.getter();
      v145 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v89, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v84, v85, "Fetched %s", v86, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v87, -1, -1);
      MEMORY[0x1C3BBFF64](v86, -1, -1);
    }

    v90 = Logger.logObject.getter();
    v91 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc();
      v93 = swift_slowAlloc();
      v146[0] = v93;
      *(_DWORD *)v92 = 136315138;
      swift_beginAccess();
      v94 = (uint64_t *)(v53 + *(int *)(v140 + 32));
      v95 = *v94;
      v96 = v94[1];
      swift_bridgeObjectRetain();
      v144 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v53 = (uint64_t)v138;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v90, v91, "Extracted Pommes query:\n    prState utterance: \"%s\"", v92, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v93, -1, -1);
      MEMORY[0x1C3BBFF64](v92, -1, -1);
    }

    v97 = v141;
    swift_beginAccess();
    if (((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 448))(v53) & 1) != 0)
    {
      v98 = v133;
      PommesBridgeResultCandidateState.pommesCandidateId.getter(v133);
      (*(void (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 456))(v98);
      v99 = v143;
      v100 = *(void (**)(uint64_t, uint64_t))(v142 + 8);
      v100(v98, v143);
      v100((uint64_t)v97, v99);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t))(v142 + 8))(v97, v143);
    }
    return outlined destroy of PommesSearchRequest(v53, type metadata accessor for PommesBridgeResultCandidateState);
  }
}

uint64_t specialized Sequence<>.summarizedDescription.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void *v17;
  void *v18;
  Swift::String v19;
  Swift::String v20;
  _QWORD v22[2];
  void (*v23)(char *, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;

  v2 = type metadata accessor for Siri_Nlu_External_UserParse();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v27 = MEMORY[0x1E0DEE9D8];
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
  v22[1] = a1;
  if (v6)
  {
    v7 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    v8 = *(_QWORD *)(v3 + 72);
    v23 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
    v24 = v8;
    swift_bridgeObjectRetain();
    v25 = v3;
    do
    {
      v23(v5, v7, v2);
      v9 = Siri_Nlu_External_UserParse.summarizedDescription.getter();
      v11 = v10;
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      v12 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v12 + 16) + 1, 1);
        v12 = v27;
      }
      v14 = *(_QWORD *)(v12 + 16);
      v13 = *(_QWORD *)(v12 + 24);
      if (v14 >= v13 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1);
        v12 = v27;
      }
      *(_QWORD *)(v12 + 16) = v14 + 1;
      v15 = v12 + 16 * v14;
      *(_QWORD *)(v15 + 32) = v9;
      *(_QWORD *)(v15 + 40) = v11;
      v3 = v25;
      v7 += v24;
      --v6;
    }
    while (v6);
  }
  else
  {
    v12 = v27;
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v27 = 91;
  v28 = 0xE100000000000000;
  v26 = v12;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A], &demangling cache variable for type metadata for [String], MEMORY[0x1E0DEAF20]);
  v16 = BidirectionalCollection<>.joined(separator:)();
  v18 = v17;
  swift_release();
  v19._countAndFlagsBits = v16;
  v19._object = v18;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 93;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  return v27;
}

uint64_t specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntity>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E758]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E9C0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Span>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F078]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoIdentifier>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA0688]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3E50]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppVocabularyConcept>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F908]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E790]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SportsPersonalizationEntity>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D987C8]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ASRInterpretation>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F100]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ClientEntityAlignment>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F9F0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E868]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<PerformanceUtil.Measurement>, type metadata accessor for PerformanceUtil.Measurement);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_PegasusSearchQuery>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6CCF0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_InterpretationToken>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F828]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F240]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[String : String]>, &demangling cache variable for type metadata for [String : String]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItem>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E058]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioAttribute>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EC08]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_UserParse>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F340]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<(itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType)>, &demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ContactAddress>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6ECC0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_PegasusSemanticValue>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6CCA0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_RenderedDialogComponent>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6FE28]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<[UsoIdentifier]>, &demangling cache variable for type metadata for [UsoIdentifier]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_PegasusDisplayHint>, MEMORY[0x1E0D6CC78]);
  *v3 = result;
  return result;
}

{
  char **v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<SpanProperty>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA04E8]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<UsoEntitySpan>, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA05B0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Search_V2_MarketplaceInfo.Marketplace>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E668]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.PlayVideoIntentMetadata.VideoCategory>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70018]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata.ShowInAppStringSearchResultsIntentMetadata.StringSearchScope>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6FFD0]);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, &demangling cache variable for type metadata for _ContiguousArrayStorage<VideoCategory?>, &demangling cache variable for type metadata for VideoCategory?);
  *v3 = result;
  return result;
}

{
  uint64_t *v3;
  uint64_t result;

  result = specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(a1, a2, a3, (_QWORD *)*v3, (uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<StringSearchScope?>, &demangling cache variable for type metadata for StringSearchScope?);
  *v3 = result;
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 25;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 3);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 8 * v11)
      memmove(v13 + 4, a4 + 4, 8 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 8 * v11 || v16 >= v17 + 8 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssistantDataSnapshot.MeCard.ContactAddress>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 96);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[96 * v8])
      memmove(v12, v13, 96 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[96 * v8] || v12 >= &v13[96 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PommesUsoTask>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8])
      memmove(v12, v13, 24 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[24 * v8] || v12 >= &v13[24 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Substring>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 1;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8])
      memmove(v13, v14, 32 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[32 * v8] || v13 >= &v14[32 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AssistantDataSnapshot.MeCard>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8])
      memmove(v12, v13, 104 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[104 * v8] || v12 >= &v13[104 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Float>);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 29;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    v10 = (char *)MEMORY[0x1E0DEE9D8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8])
      memmove(v13, v14, 4 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[4 * v8] || v13 >= &v14[4 * v8])
  {
    memcpy(v13, v14, 4 * v8);
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Data?>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    v10[2] = v8;
    v10[3] = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v13 = (unint64_t)(v10 + 4);
  v14 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= v14 + 16 * v8)
      memmove(v10 + 4, a4 + 4, 16 * v8);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v14 >= v13 + 16 * v8 || v13 >= v14 + 16 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MediaUserState>);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MediaUserState);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t Siri_Nlu_External_UserParse.summarizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  Swift::String v11;
  void (*v12)(char *, uint64_t);
  Swift::String v13;
  Swift::String v14;
  Swift::String v15;
  Swift::String v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v0 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v19 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Siri_Nlu_External_Parser.AlgorithmType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_Parser();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = 0;
  v21 = 0xE000000000000000;
  _StringGuts.grow(_:)(106);
  v11._countAndFlagsBits = 0xD000000000000018;
  v11._object = (void *)0x80000001C25063D0;
  String.append(_:)(v11);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.algorithm.getter();
  v12 = *(void (**)(char *, uint64_t))(v8 + 8);
  v12(v10, v7);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  v13._countAndFlagsBits = 0xD000000000000017;
  v13._object = (void *)0x80000001C25063F0;
  String.append(_:)(v13);
  Siri_Nlu_External_UserParse.parser.getter();
  Siri_Nlu_External_Parser.parserID.getter();
  v12(v10, v7);
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v2, v0);
  v14._object = (void *)0x80000001C2506410;
  v14._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v14);
  Siri_Nlu_External_UserParse.probability.getter();
  Double.write<A>(to:)();
  v15._countAndFlagsBits = 0xD00000000000001DLL;
  v15._object = (void *)0x80000001C2506430;
  String.append(_:)(v15);
  Siri_Nlu_External_UserParse.comparableProbability.getter();
  Double.write<A>(to:)();
  v16._countAndFlagsBits = 8194604;
  v16._object = (void *)0xE300000000000000;
  String.append(_:)(v16);
  return v20;
}

uint64_t specialized PommesBridgeInstrumentationUtil.getRCIdAndTRPId(pommesCandidateId:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  v2 = type metadata accessor for PommesCandidateId();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0D988C8])
    goto LABEL_5;
  if (v6 == *MEMORY[0x1E0D988D0])
  {
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    v7 = *(_QWORD *)v5;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    return v7;
  }
  if (v6 == *MEMORY[0x1E0D988C0])
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v3 + 96))(v5, v2);
    return *(_QWORD *)v5;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v9 = type metadata accessor for Logger();
    __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1C2356000, v10, v11, "Unknown PommesCandidateId. Setting resultCandidateId and trpId to empty string.", v12, 2u);
      MEMORY[0x1C3BBFF64](v12, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return 0;
  }
}

uint64_t partial apply for implicit closure #2 in PommesBridgeRequestProcessor.handleNLResultCandidateMessage(_:)()
{
  uint64_t v0;

  return implicit closure #1 in PommesBridgeRequestProcessor.handleASRResultCandidateMessage(_:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), 0xD00000000000001DLL, 0x80000001C2501D30, MEMORY[0x1E0D9D9C8]);
}

uint64_t PommesBridgeRequestProcessor.pommesStateHolder.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

Swift::Void __swiftcall PommesBridgeResultCandidateState.setHasNLResultCandidate(_:)(Swift::Bool a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[3];
  uint64_t v30;

  v3 = type metadata accessor for PommesCandidateId();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v29 - v8;
  v10 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (_QWORD *)((char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest((uint64_t)v1, (uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of PommesSearchRequest((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v9);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v30 = v20;
      *(_DWORD *)v19 = 136315138;
      v29[1] = v19 + 4;
      v21 = PommesCandidateId.description.getter();
      v29[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v23 = *(void (**)(char *, uint64_t))(v4 + 8);
      v23(v7, v3);
      _os_log_impl(&dword_1C2356000, v17, v18, "Attempting to set hasResultCandidate while not on the RC state path for %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v20, -1, -1);
      MEMORY[0x1C3BBFF64](v19, -1, -1);

    }
    else
    {

      v23 = *(void (**)(char *, uint64_t))(v4 + 8);
      v23(v7, v3);
    }
    v23(v9, v3);
  }
  else
  {
    v24 = *v12;
    v25 = v12[1];
    v26 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v12 + *(int *)(v26 + 48), (uint64_t)v15, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    outlined destroy of PommesSearchRequest((uint64_t)v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    v27 = (uint64_t)v1 + *(int *)(v26 + 48);
    v28 = *(int *)(v26 + 64);
    *v1 = v24;
    v1[1] = v25;
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v15, v27, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    *((_BYTE *)v1 + v28) = a1;
    swift_storeEnumTagMultiPayload();
  }
}

uint64_t destroy for PommesBridgeResultCandidateState.ParseState(id *a1)
{
  uint64_t result;
  char *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  result = swift_getEnumCaseMultiPayload();
  switch((_DWORD)result)
  {
    case 2:

      swift_bridgeObjectRelease();
      v7 = (char *)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                  + 64);
      v8 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      break;
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v9 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v10 = (char *)a1 + v9[16];
      v11 = type metadata accessor for TCUMappedNLResponse();
      v12 = *(_QWORD *)(v11 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
        (*(void (**)(char *, uint64_t))(v12 + 8))(v10, v11);
      v13 = (char *)a1 + v9[24];
      v14 = type metadata accessor for SiriUserInput();
      v15 = *(_QWORD *)(v14 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
        (*(void (**)(char *, uint64_t))(v15 + 8))(v13, v14);
      v7 = (char *)a1 + v9[28];
      v8 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      break;
    case 0:
      swift_bridgeObjectRelease();
      v3 = (char *)a1
         + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool))
                  + 48);
      swift_bridgeObjectRelease();
      v4 = &v3[*(int *)(type metadata accessor for NLXResultCandidate() + 20)];
      v5 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v6 = *(_QWORD *)(v5 - 8);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5))
        (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
      return swift_bridgeObjectRelease();
    default:
      return result;
  }
  v16 = v8;
  v17 = *(_QWORD *)(v8 - 8);
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v7, 1, v8);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v7, v16);
  return result;
}

uint64_t PommesBridgeResultCandidateState.setNLXResultCandidate(_:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t (*v13)(_QWORD);
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD v30[3];
  uint64_t v31;

  v3 = type metadata accessor for PommesCandidateId();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v30 - v8;
  v10 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (_QWORD *)((char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest((uint64_t)v1, (uint64_t)v12, v13);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of PommesSearchRequest((uint64_t)v12, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    PommesBridgeResultCandidateState.pommesCandidateId.getter((uint64_t)v9);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, char *, uint64_t))(v4 + 16))(v7, v9, v3);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      v18 = swift_slowAlloc();
      v31 = v18;
      *(_DWORD *)v17 = 136315138;
      v30[1] = v17 + 4;
      v19 = PommesCandidateId.description.getter();
      v30[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v21 = *(void (**)(char *, uint64_t))(v4 + 8);
      v21(v7, v3);
      _os_log_impl(&dword_1C2356000, v15, v16, "Attempting to set RC-based user parses while not on the RC state path for %s", v17, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v18, -1, -1);
      MEMORY[0x1C3BBFF64](v17, -1, -1);

    }
    else
    {

      v21 = *(void (**)(char *, uint64_t))(v4 + 8);
      v21(v7, v3);
    }
    return ((uint64_t (*)(char *, uint64_t))v21)(v9, v3);
  }
  else
  {
    v23 = *v12;
    v24 = v12[1];
    v25 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    v26 = (uint64_t)v12 + *(int *)(v25 + 48);
    v27 = *((_BYTE *)v12 + *(int *)(v25 + 64));
    outlined destroy of PommesSearchRequest(v26, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    outlined destroy of PommesSearchRequest((uint64_t)v1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    v28 = (uint64_t)v1 + *(int *)(v25 + 48);
    v29 = *(int *)(v25 + 64);
    *v1 = v23;
    v1[1] = v24;
    outlined init with copy of PommesSearchRequest(a1, v28, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    *((_BYTE *)v1 + v29) = v27;
    return swift_storeEnumTagMultiPayload();
  }
}

_QWORD *initializeWithCopy for NLXResultCandidate(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int (*v11)(char *, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v7, v8, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  v13 = *(int *)(a3 + 24);
  v14 = (_QWORD *)((char *)a1 + v13);
  v15 = (_QWORD *)((char *)a2 + v13);
  v16 = v15[1];
  *v14 = *v15;
  v14[1] = v16;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined assign with take of PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesBridgeResultCandidateState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t assignWithTake for PommesBridgeResultCandidateState(uint64_t a1, uint64_t a2, int *a3)
{
  int EnumCaseMultiPayload;
  __int128 v7;
  int *v8;
  uint64_t v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  const void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void *v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  void *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t (*v58)(void *, uint64_t, uint64_t);
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v63;
  uint64_t v64;

  if (a1 != a2)
  {
    outlined destroy of PommesSearchRequest(a1, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v15 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a1 = *(_QWORD *)a2;
      *(_QWORD *)(a1 + 8) = v15;
      v16 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (request: SARDRunPOMMESRequest, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?))
                   + 64);
      v17 = (void *)(a1 + v16);
      v18 = (const void *)(a2 + v16);
      v19 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
LABEL_18:
        v39 = __swift_instantiateConcreteTypeFromMangledName(v21);
        memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
LABEL_20:
        swift_storeEnumTagMultiPayload();
        goto LABEL_21;
      }
    }
    else
    {
      if (EnumCaseMultiPayload != 1)
      {
        *(_OWORD *)a1 = *(_OWORD *)a2;
        v64 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
        v22 = *(int *)(v64 + 48);
        v23 = a1 + v22;
        v24 = a2 + v22;
        *(_QWORD *)(a1 + v22) = *(_QWORD *)(a2 + v22);
        v25 = type metadata accessor for NLXResultCandidate();
        v26 = *(int *)(v25 + 20);
        v27 = (void *)(v23 + v26);
        v28 = (const void *)(v24 + v26);
        v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
        v30 = *(_QWORD *)(v29 - 8);
        if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
        {
          v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
        }
        else
        {
          (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
          (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
        }
        *(_OWORD *)(v23 + *(int *)(v25 + 24)) = *(_OWORD *)(v24 + *(int *)(v25 + 24));
        *(_BYTE *)(a1 + *(int *)(v64 + 64)) = *(_BYTE *)(a2 + *(int *)(v64 + 64));
        goto LABEL_20;
      }
      v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      v8 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
      v9 = v8[16];
      v10 = (void *)(a1 + v9);
      v11 = (const void *)(a2 + v9);
      v12 = type metadata accessor for TCUMappedNLResponse();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v13 + 32))(v10, v11, v12);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      *(_BYTE *)(a1 + v8[20]) = *(_BYTE *)(a2 + v8[20]);
      v32 = v8[24];
      v33 = (void *)(a1 + v32);
      v34 = (const void *)(a2 + v32);
      v35 = type metadata accessor for SiriUserInput();
      v36 = *(_QWORD *)(v35 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
      {
        v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriUserInput?);
        memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
      }
      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v36 + 32))(v33, v34, v35);
        (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      }
      v38 = v8[28];
      v17 = (void *)(a1 + v38);
      v18 = (const void *)(a2 + v38);
      v19 = type metadata accessor for RewrittenUtteranceCandidateMessage.RewriteReason();
      v20 = *(_QWORD *)(v19 - 8);
      if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        v21 = &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?;
        goto LABEL_18;
      }
    }
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v17, v18, v19);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    goto LABEL_20;
  }
LABEL_21:
  v40 = a3[5];
  v41 = a1 + v40;
  v42 = a2 + v40;
  v43 = type metadata accessor for UserID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 40))(v41, v42, v43);
  v44 = a3[7];
  *(_QWORD *)(a1 + a3[6]) = *(_QWORD *)(a2 + a3[6]);
  v45 = *(void **)(a1 + v44);
  *(_QWORD *)(a1 + v44) = *(_QWORD *)(a2 + v44);

  v46 = a3[8];
  v47 = (_QWORD *)(a1 + v46);
  v48 = (uint64_t *)(a2 + v46);
  v50 = *v48;
  v49 = v48[1];
  *v47 = v50;
  v47[1] = v49;
  swift_bridgeObjectRelease();
  v51 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v51) = *(_BYTE *)(a2 + v51);
  v52 = a3[12];
  *(_BYTE *)(a1 + a3[11]) = *(_BYTE *)(a2 + a3[11]);
  *(_BYTE *)(a1 + v52) = *(_BYTE *)(a2 + v52);
  v53 = a3[14];
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v54 = (void *)(a1 + v53);
  v55 = (void *)(a2 + v53);
  v56 = type metadata accessor for PommesSearchEagerInfo(0);
  v57 = *(_QWORD *)(v56 - 8);
  v58 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v57 + 48);
  LODWORD(v42) = v58(v54, 1, v56);
  v59 = v58(v55, 1, v56);
  if (!(_DWORD)v42)
  {
    if (!v59)
    {
      v63 = type metadata accessor for PommesSearchReason();
      (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v63 - 8) + 40))(v54, v55, v63);
      return a1;
    }
    outlined destroy of PommesSearchRequest((uint64_t)v54, type metadata accessor for PommesSearchEagerInfo);
    goto LABEL_26;
  }
  if (v59)
  {
LABEL_26:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v61 - 8) + 64));
    return a1;
  }
  v60 = type metadata accessor for PommesSearchReason();
  (*(void (**)(void *, void *, uint64_t))(*(_QWORD *)(v60 - 8) + 32))(v54, v55, v60);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  return a1;
}

uint64_t PommesBridgeRequestProcessor.isReady(prState:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t (*v23)(_QWORD);
  int EnumCaseMultiPayload;
  int *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint64_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  NSObject *v42;
  os_log_type_t v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  const char *v55;
  NSObject *v56;
  os_log_type_t v57;
  uint64_t v58;
  uint64_t v59;
  os_log_type_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v65;
  os_log_type_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v3 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v68 = (uint64_t)&v67 - v8;
  v9 = MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v67 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v67 - v12;
  v14 = type metadata accessor for PommesBridgeResultCandidateState.ParseState(0);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v67 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v67 - v21;
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)&v67 - v21, v23);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    outlined init with copy of PommesSearchRequest((uint64_t)v22, (uint64_t)v20, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    swift_bridgeObjectRelease();
    v39 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate, hasNLResultCandidate: Bool));
    v40 = (uint64_t)&v20[*(int *)(v39 + 48)];
    if ((v20[*(int *)(v39 + 64)] & 1) == 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v41 = type metadata accessor for Logger();
      __swift_project_value_buffer(v41, (uint64_t)static Logger.pommes);
      outlined init with copy of PommesSearchRequest(a1, (uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
      v42 = Logger.logObject.getter();
      v43 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v42, v43))
      {
        v44 = (uint8_t *)swift_slowAlloc();
        v45 = swift_slowAlloc();
        v70 = v45;
        *(_DWORD *)v44 = 136315138;
        v46 = PommesBridgeResultCandidateState.description.getter();
        v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
        _os_log_impl(&dword_1C2356000, v42, v43, "search cannot continue because has not received NLResultCandidate yet %s", v44, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v45, -1, -1);
        MEMORY[0x1C3BBFF64](v44, -1, -1);
      }
      else
      {
        outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
      }

      outlined destroy of PommesSearchRequest(v40, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
      goto LABEL_35;
    }
    outlined destroy of PommesSearchRequest((uint64_t)&v20[*(int *)(v39 + 48)], (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
LABEL_18:
    outlined destroy of PommesSearchRequest((uint64_t)v22, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
    if ((*(_BYTE *)(a1 + *(int *)(v3 + 36)) & 1) != 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v48 = type metadata accessor for Logger();
      __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
      outlined init with copy of PommesSearchRequest(a1, (uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
      v49 = Logger.logObject.getter();
      v50 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v50))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        v52 = swift_slowAlloc();
        v70 = v52;
        *(_DWORD *)v51 = 136315138;
        v53 = PommesBridgeResultCandidateState.description.getter();
        v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesBridgeResultCandidateState);
        v55 = "search cannot continue because prState has been previously started for rcId %s";
        v56 = v49;
        v57 = v50;
LABEL_28:
        _os_log_impl(&dword_1C2356000, v56, v57, v55, v51, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v52, -1, -1);
LABEL_29:
        MEMORY[0x1C3BBFF64](v51, -1, -1);
LABEL_38:

        return 0;
      }
      v63 = (uint64_t)v6;
    }
    else
    {
      if ((*(_BYTE *)(a1 + *(int *)(v3 + 40)) & 1) == 0)
      {
        if (*(_QWORD *)((char *)v1 + direct field offset for PommesBridgeRequestProcessor.pommesRequestContext))
          return 1;
        if (one-time initialization token for pommes != -1)
          swift_once();
        v65 = type metadata accessor for Logger();
        __swift_project_value_buffer(v65, (uint64_t)static Logger.pommes);
        v49 = Logger.logObject.getter();
        v66 = static os_log_type_t.info.getter();
        if (!os_log_type_enabled(v49, v66))
          goto LABEL_38;
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_1C2356000, v49, v66, "search cannot continue because pommesRequestContext has not been set yet", v51, 2u);
        goto LABEL_29;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v58 = type metadata accessor for Logger();
      __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
      v59 = v68;
      outlined init with copy of PommesSearchRequest(a1, v68, type metadata accessor for PommesBridgeResultCandidateState);
      v49 = Logger.logObject.getter();
      v60 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v49, v60))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        v52 = swift_slowAlloc();
        v70 = v52;
        *(_DWORD *)v51 = 136315138;
        v61 = PommesBridgeResultCandidateState.description.getter();
        v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v62, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        outlined destroy of PommesSearchRequest(v59, type metadata accessor for PommesBridgeResultCandidateState);
        v55 = "search cannot continue because prState has been previously finished for rcId %s";
        v56 = v49;
        v57 = v60;
        goto LABEL_28;
      }
      v63 = v59;
    }
    outlined destroy of PommesSearchRequest(v63, type metadata accessor for PommesBridgeResultCandidateState);
    goto LABEL_38;
  }
  if (EnumCaseMultiPayload != 1)
    goto LABEL_18;
  outlined init with copy of PommesSearchRequest((uint64_t)v22, (uint64_t)v17, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool, originalUserInput: SiriUserInput?, rewriteReason: RewrittenUtteranceCandidateMessage.RewriteReason?));
  v26 = v17[v25[20]];
  v27 = (uint64_t)&v17[v25[16]];
  v28 = (uint64_t)&v17[v25[24]];
  v29 = (uint64_t)&v17[v25[28]];
  if (v26 == 1
    && ((*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 168))() & 1) == 0)
  {
    outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
    outlined destroy of MediaUserStateCenter?(v28, &demangling cache variable for type metadata for SiriUserInput?);
    outlined destroy of MediaUserStateCenter?(v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    goto LABEL_18;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v30 = type metadata accessor for Logger();
  __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
  v31 = Logger.logObject.getter();
  v32 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v31, v32))
  {
    v33 = swift_slowAlloc();
    v68 = v27;
    v34 = (uint8_t *)v33;
    v35 = swift_slowAlloc();
    v70 = v35;
    *(_DWORD *)v34 = 136315138;
    v67 = v29;
    v36 = PommesBridgeResultCandidateState.description.getter();
    v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v70);
    v29 = v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest((uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
    _os_log_impl(&dword_1C2356000, v31, v32, "search cannot continue because request is candidate request or no TTResponseMessage received yet %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v35, -1, -1);
    v38 = v34;
    v27 = v68;
    MEMORY[0x1C3BBFF64](v38, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
  }

  outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for RewrittenUtteranceCandidateMessage.RewriteReason?);
  outlined destroy of MediaUserStateCenter?(v28, &demangling cache variable for type metadata for SiriUserInput?);
  outlined destroy of MediaUserStateCenter?(v27, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
LABEL_35:
  outlined destroy of PommesSearchRequest((uint64_t)v22, type metadata accessor for PommesBridgeResultCandidateState.ParseState);
  return 0;
}

uint64_t type metadata accessor for PommesSearchRequest(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequest);
}

uint64_t PommesBridgeRequestProcessor.sessionState.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + direct field offset for PommesBridgeRequestProcessor.sessionState;
  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v3, a1, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
}

uint64_t outlined init with copy of TCUMappedNLResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of MediaUserStateCenter?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for PommesSearchRequest.ParseState(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchRequest.ParseState);
}

uint64_t static PommesSearchRequest.extractPommesDelegatedUDA(from:fallbackParse:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  _BOOL4 v65;
  uint8_t *v66;
  uint8_t *v67;
  char *v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  void (*v80)(unint64_t, _QWORD, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  double v86;
  double v87;
  char *v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  char *v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t, uint64_t);
  void (*v94)(char *, uint64_t, uint64_t);
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  uint64_t v104;
  uint8_t *v105;
  double v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  int v114;
  uint64_t v115;
  char *v116;
  char *v117;
  uint8_t *v118;
  uint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  void (*v134)(char *, uint64_t, uint64_t);
  unint64_t v135;
  char v136;
  uint64_t v137;
  id v138;
  char v139;
  uint64_t v140;
  char v141;
  void (*v142)(char *, uint64_t *, uint64_t);
  uint64_t v143;
  uint64_t v144;
  char *v145;
  uint64_t v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char v151;
  uint64_t v152;
  _BOOL8 v153;
  uint64_t v154;
  char v155;
  unint64_t v156;
  char v157;
  uint64_t *v158;
  void (*v159)(char *, uint64_t, uint64_t);
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  double v170;
  NSObject *v171;
  os_log_type_t v172;
  _BOOL4 v173;
  uint64_t v174;
  uint8_t *v175;
  unint64_t v176;
  unint64_t v177;
  char v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void (*v185)(char *, uint64_t, uint64_t);
  uint64_t v186;
  double v187;
  char v188;
  NSObject *v189;
  os_log_type_t v190;
  _BOOL4 v191;
  uint8_t *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  char *v199;
  char v200;
  void (*v201)(char *, uint64_t, uint64_t);
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  void (*v210)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  char *v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  void (*v221)(char *, char *, uint64_t);
  uint64_t v222;
  uint64_t v223;
  NSObject *v224;
  os_log_type_t v225;
  uint8_t *v226;
  uint64_t v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  unint64_t v231;
  unint64_t v232;
  uint8_t *v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  void (*v237)(uint64_t, uint64_t, uint64_t, uint64_t);
  NSObject *v238;
  os_log_type_t v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  void (*v247)(uint64_t, char *, uint64_t);
  char *v248;
  NSObject *v249;
  os_log_type_t v250;
  uint8_t *v251;
  uint64_t result;
  uint64_t v253;
  char *v254;
  unint64_t v255;
  char *v256;
  uint64_t v257;
  char *v258;
  char *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  char *v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  char *v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  char *v276;
  uint64_t v277;
  uint64_t v278;
  __int128 v279;
  char *v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  os_log_t v286;
  int v287;
  uint64_t v288;
  __int128 v289;
  unsigned int v290;
  unsigned int v291;
  char *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  void (*v299)(char *, unint64_t, uint64_t);
  uint64_t v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  unint64_t v304;
  void (*v305)(char *, uint64_t);
  void (*v306)(char *, uint64_t);
  uint64_t v307;
  char *v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  void (*v314)(char *, uint64_t *, uint64_t);
  char *v315;
  uint64_t v316;
  void (*v317)(uint64_t, unint64_t, uint64_t);
  int v318;
  uint64_t v319;
  uint8_t *v320;
  uint64_t v321;
  uint8_t *v322;
  uint64_t *v323;
  void (*v324)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v325;
  void (*v326)(char *, uint64_t, uint64_t);
  uint64_t v327[5];
  uint64_t v328;
  char v329;

  v260 = a2;
  v265 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (uint64_t)&v253 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v321 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  v303 = *(_QWORD *)(v321 - 8);
  v7 = MEMORY[0x1E0C80A78](v321);
  v262 = (uint64_t)&v253 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v7);
  v259 = (char *)&v253 - v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v268 = (char *)&v253 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v264 = (char *)&v253 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v269 = (char *)&v253 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v256 = (char *)&v253 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v257 = (uint64_t)&v253 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v23 = (char *)&v253 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v267 = (char *)&v253 - v25;
  v26 = MEMORY[0x1E0C80A78](v24);
  v277 = (uint64_t)&v253 - v27;
  MEMORY[0x1E0C80A78](v26);
  v276 = (char *)&v253 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1E0C80A78](v29);
  v282 = (char *)&v253 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v284 = type metadata accessor for DeviceClass();
  v285 = *(_QWORD *)(v284 - 8);
  MEMORY[0x1E0C80A78](v284);
  v283 = (uint64_t)&v253 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v33 = MEMORY[0x1E0C80A78](v32);
  v263 = (uint64_t)&v253 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = MEMORY[0x1E0C80A78](v33);
  v266 = (uint64_t)&v253 - v36;
  MEMORY[0x1E0C80A78](v35);
  v297 = (uint64_t)&v253 - v37;
  v325 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v319 = *(_QWORD *)(v325 - 8);
  v38 = MEMORY[0x1E0C80A78](v325);
  v254 = (char *)&v253 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v296 = (char *)&v253 - v40;
  v311 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v295 = *(_QWORD *)(v311 - 8);
  MEMORY[0x1E0C80A78](v311);
  v310 = (char *)&v253 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v309 = type metadata accessor for Siri_Nlu_External_Parser();
  v294 = *(_QWORD *)(v309 - 8);
  MEMORY[0x1E0C80A78](v309);
  v308 = (char *)&v253 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v322 = (uint8_t *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
  v43 = MEMORY[0x1E0C80A78](v322);
  v275 = (char *)&v253 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v281 = (char *)&v253 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v307 = (uint64_t)&v253 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v323 = (uint64_t *)((char *)&v253 - v50);
  v51 = MEMORY[0x1E0C80A78](v49);
  v293 = (char *)&v253 - v52;
  MEMORY[0x1E0C80A78](v51);
  v324 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v253 - v53);
  v54 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v301 = *(char **)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  isUniquelyReferenced_nonNull_native = (uint64_t)&v253 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v312 = type metadata accessor for Siri_Nlu_External_UserParse();
  v300 = *(_QWORD *)(v312 - 8);
  v57 = MEMORY[0x1E0C80A78](v312);
  v59 = (char *)&v253 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v57);
  v315 = (char *)&v253 - v60;
  if (one-time initialization token for pommes != -1)
    goto LABEL_102;
  while (1)
  {
    v61 = type metadata accessor for Logger();
    v62 = __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    v298 = v62;
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.debug.getter();
    v65 = os_log_type_enabled(v63, v64);
    v261 = v6;
    v258 = v23;
    if (v65)
    {
      v66 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v66 = 134217984;
      v327[0] = *(_QWORD *)(a1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v63, v64, "Extract DUDA: considering %ld user parses", v66, 0xCu);
      MEMORY[0x1C3BBFF64](v66, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
    }
    v304 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    v67 = v322;
    v68 = v301;
    v272 = *(_QWORD *)(a1 + 16);
    if (v272)
      break;
LABEL_58:
    v164 = swift_bridgeObjectRetain();
    v165 = specialized Sequence.filter(_:)(v164);
    v166 = *(_QWORD *)(v165 + 16);
    v167 = (uint64_t)v267;
    if (v166)
    {
      v168 = v165 + ((*(unsigned __int8 *)(v303 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v303 + 80));
      v169 = *(_QWORD *)(v303 + 72);
      v170 = 0.0;
      do
      {
        outlined init with copy of MediaUserStateCenter?(v168, v167, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        v170 = v170 + *(double *)(v167 + *(int *)(v321 + 48));
        outlined destroy of MediaUserStateCenter?(v167, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        v168 += v169;
        --v166;
      }
      while (v166);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      v170 = 0.0;
    }
    v171 = Logger.logObject.getter();
    v172 = static os_log_type_t.debug.getter();
    v173 = os_log_type_enabled(v171, v172);
    v174 = v319;
    isUniquelyReferenced_nonNull_native = v303;
    if (v173)
    {
      v175 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v175 = 134217984;
      *(double *)v327 = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v171, v172, "Extract DUDA: synthesized combined POMMES parse score is %f", v175, 0xCu);
      MEMORY[0x1C3BBFF64](v175, -1, -1);
    }

    v176 = v304;
    if (*(_QWORD *)(v304 + 16))
    {
      v177 = specialized __RawDictionaryStorage.find<A>(_:)(0xD000000000000010, 0x80000001C2501BB0);
      if ((v178 & 1) != 0)
      {
        v179 = v321;
        v180 = *(int *)(v321 + 48);
        v181 = *(int *)(v321 + 64);
        v182 = v257;
        outlined init with copy of MediaUserStateCenter?(*(_QWORD *)(v176 + 56) + *(_QWORD *)(isUniquelyReferenced_nonNull_native + 72) * v177, v257, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        v183 = *(int *)(v179 + 48);
        v184 = *(int *)(v179 + 64);
        v185 = *(void (**)(char *, uint64_t, uint64_t))(v174 + 32);
        v186 = (uint64_t)v258;
        v185(v258, v182, v325);
        v187 = *(double *)(v182 + v183);
        *(double *)(v186 + v180) = v187;
        v188 = *(_BYTE *)(v182 + v184);
        *(_BYTE *)(v186 + v181) = v188;
        if (specialized static PommesSearchRequest.pommesDUDAThreshold.getter() <= v187
          || v170 < specialized static PommesSearchRequest.pommesDUDAThreshold.getter())
        {
          v189 = Logger.logObject.getter();
          v190 = static os_log_type_t.debug.getter();
          v191 = os_log_type_enabled(v189, v190);
          v326 = v185;
          if (v191)
          {
            v192 = (uint8_t *)swift_slowAlloc();
            v193 = swift_slowAlloc();
            v327[0] = v193;
            *(_DWORD *)v192 = 136315138;
            v328 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001C2501BB0, v327);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl(&dword_1C2356000, v189, v190, "Extract DUDA: primary parse class is usable alone, or combined parse is not usable; returning with %s",
              v192,
              0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v193, -1, -1);
            MEMORY[0x1C3BBFF64](v192, -1, -1);
          }

          v194 = v321;
          v195 = *(int *)(v321 + 48);
          v196 = *(int *)(v321 + 64);
          v197 = v267;
          v198 = v325;
          (*(void (**)(char *, uint64_t, uint64_t))(v319 + 16))(v267, v186, v325);
          *(double *)&v197[v195] = v187;
          v197[v196] = v188;
          v199 = v265;
          v200 = v188;
          v201 = v326;
          v326(v265, (uint64_t)v197, v198);
          v202 = *(int *)(v194 + 48);
          v203 = *(int *)(v194 + 64);
          v204 = v186;
          v205 = v256;
          v201(v256, v204, v198);
          *(double *)&v205[v202] = v187;
          v205[v203] = v200;
          *(double *)&v199[v195] = v187;
          v199[v196] = 0;
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v303 + 56))(v199, 0, 1, v194);
          (*(void (**)(char *, uint64_t))(v319 + 8))(v205, v198);
          return swift_bridgeObjectRelease();
        }
        outlined destroy of MediaUserStateCenter?(v186, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        v174 = v319;
        isUniquelyReferenced_nonNull_native = v303;
      }
    }
    v206 = swift_bridgeObjectRetain();
    v207 = specialized Sequence.filter(_:)(v206);
    v6 = v207;
    v23 = *(char **)(v207 + 16);
    if (!v23)
    {
      v210 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 56);
      v209 = v266;
      v210(v266, 1, 1, v321);
      v54 = v325;
LABEL_77:
      swift_bridgeObjectRelease();
      v211 = v263;
      outlined init with copy of MediaUserStateCenter?(v209, v263, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 48))(v211, 1, v321) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v211, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        v212 = v261;
        outlined init with copy of MediaUserStateCenter?(v260, v261, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v174 + 48))(v212, 1, v54) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v212, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
        }
        else
        {
          v236 = v254;
          (*(void (**)(char *, uint64_t, uint64_t))(v174 + 32))(v254, v212, v54);
          if ((specialized static PommesSearchRequest.isSupportedExternalParseId(externalParseId:)(0xD000000000000018, 0x80000001C2501C00) & 1) != 0)
          {
            v237 = v210;
            v238 = Logger.logObject.getter();
            v239 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v238, v239))
            {
              v240 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v240 = 0;
              _os_log_impl(&dword_1C2356000, v238, v239, "Convert general fallback parse to PSC DUDA.", v240, 2u);
              MEMORY[0x1C3BBFF64](v240, -1, -1);
            }

            v241 = v321;
            v242 = *(int *)(v321 + 48);
            v243 = *(int *)(v321 + 64);
            v244 = v265;
            (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v265, v236, v54);
            Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.setter();
            (*(void (**)(char *, uint64_t))(v174 + 8))(v236, v54);
            outlined destroy of MediaUserStateCenter?(v266, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
            *(_QWORD *)&v244[v242] = 0;
            v244[v243] = 0;
            v237((uint64_t)v244, 0, 1, v241);
            return swift_bridgeObjectRelease();
          }
          (*(void (**)(char *, uint64_t))(v174 + 8))(v236, v54);
        }
        v249 = Logger.logObject.getter();
        v250 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v249, v250))
        {
          v251 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v251 = 0;
          _os_log_impl(&dword_1C2356000, v249, v250, "Extract DUDA: no parse meets criteria; returning nil", v251, 2u);
          MEMORY[0x1C3BBFF64](v251, -1, -1);
        }

        outlined destroy of MediaUserStateCenter?(v266, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        v210((uint64_t)v265, 1, 1, v321);
      }
      else
      {
        v213 = v174;
        v214 = v321;
        v215 = *(int *)(v321 + 48);
        v216 = *(int *)(v321 + 64);
        v217 = v264;
        v326 = *(void (**)(char *, uint64_t, uint64_t))(v213 + 32);
        v326(v264, v211, v54);
        v218 = *(_QWORD *)(v211 + v215);
        *(_QWORD *)&v217[v215] = v218;
        LOBYTE(v215) = *(_BYTE *)(v211 + v216);
        v217[v216] = v215;
        v219 = *(int *)(v214 + 48);
        v220 = *(int *)(v214 + 64);
        v221 = *(void (**)(char *, char *, uint64_t))(v213 + 16);
        v222 = (uint64_t)v259;
        v221(v259, v217, v54);
        *(_QWORD *)(v222 + v219) = v218;
        *(_BYTE *)(v222 + v220) = v215;
        v223 = v262;
        outlined init with take of PommesSearchReason?(v222, v262, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        v224 = Logger.logObject.getter();
        v225 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v224, v225))
        {
          v226 = (uint8_t *)swift_slowAlloc();
          v323 = (uint64_t *)swift_slowAlloc();
          v327[0] = (uint64_t)v323;
          v324 = v210;
          v322 = v226;
          *(_DWORD *)v226 = 136315138;
          v320 = v226 + 4;
          v227 = *(int *)(v214 + 48);
          v228 = *(int *)(v214 + 64);
          v229 = v267;
          v221(v267, (char *)v223, v325);
          *(_QWORD *)&v229[v227] = *(_QWORD *)(v223 + v227);
          v229[v228] = *(_BYTE *)(v223 + v228);
          v54 = v325;
          v230 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
          v232 = v231;
          (*(void (**)(char *, uint64_t))(v213 + 8))(v229, v54);
          v328 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v230, v232, v327);
          v210 = v324;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          outlined destroy of MediaUserStateCenter?(v223, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          v233 = v322;
          _os_log_impl(&dword_1C2356000, v224, v225, "Extract DUDA: combined parse class is usable; returning with %s",
            v322,
            0xCu);
          v234 = (uint64_t)v323;
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v234, -1, -1);
          MEMORY[0x1C3BBFF64](v233, -1, -1);

          outlined destroy of MediaUserStateCenter?(v266, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
        }
        else
        {

          outlined destroy of MediaUserStateCenter?(v223, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
          outlined destroy of MediaUserStateCenter?(v266, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
          v229 = v267;
        }
        v245 = *(int *)(v214 + 48);
        v246 = *(int *)(v214 + 64);
        v247 = (void (*)(uint64_t, char *, uint64_t))v326;
        v326(v229, (uint64_t)v264, v54);
        v248 = v265;
        v247((uint64_t)v265, v229, v54);
        *(double *)&v248[v245] = v170;
        v248[v246] = 0;
        v210((uint64_t)v248, 0, 1, v214);
      }
      return swift_bridgeObjectRelease();
    }
    v208 = v207
         + ((*(unsigned __int8 *)(isUniquelyReferenced_nonNull_native + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(isUniquelyReferenced_nonNull_native + 80));
    outlined init with copy of MediaUserStateCenter?(v208, (uint64_t)v269, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    v54 = v325;
    if (v23 == (char *)1)
    {
LABEL_75:
      v209 = v266;
      outlined init with take of PommesSearchReason?((uint64_t)v269, v266, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      v210 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(isUniquelyReferenced_nonNull_native + 56);
      v210(v209, 0, 1, v321);
      goto LABEL_77;
    }
    a1 = 1;
    v235 = (uint64_t)v268;
    v59 = v269;
    while (a1 < *(_QWORD *)(v6 + 16))
    {
      outlined init with copy of MediaUserStateCenter?(v208 + *(_QWORD *)(isUniquelyReferenced_nonNull_native + 72) * a1, v235, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      if (*(double *)&v59[*(int *)(v321 + 48)] >= *(double *)(v235 + *(int *)(v321 + 48)))
      {
        outlined destroy of MediaUserStateCenter?(v235, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v59, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
        outlined init with take of PommesSearchReason?(v235, (uint64_t)v59, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      }
      if (v23 == (char *)++a1)
        goto LABEL_75;
    }
LABEL_101:
    __break(1u);
LABEL_102:
    swift_once();
  }
  v292 = v59;
  v271 = a1 + ((*(unsigned __int8 *)(v300 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v300 + 80));
  v270 = *(_QWORD *)(v300 + 72);
  v299 = *(void (**)(char *, unint64_t, uint64_t))(v300 + 16);
  v291 = *MEMORY[0x1E0D9F100];
  v290 = *MEMORY[0x1E0D9F138];
  v280 = &v329;
  v255 = a1;
  swift_bridgeObjectRetain();
  v69 = 0;
  *((_QWORD *)&v70 + 1) = 4;
  v289 = xmmword_1C24FB7E0;
  *(_QWORD *)&v70 = 136315906;
  v279 = v70;
  v278 = MEMORY[0x1E0DEE9B8] + 8;
  v71 = v312;
  v59 = v315;
  v302 = v54;
  v320 = (uint8_t *)isUniquelyReferenced_nonNull_native;
  while (1)
  {
    v299(v59, v271 + v270 * v69, v71);
    v72 = Siri_Nlu_External_Span.matcherNames.getter();
    v73 = *(_QWORD *)(v72 + 16);
    if (v73)
      break;
    swift_bridgeObjectRelease();
LABEL_8:
    ++v69;
    v71 = v312;
    (*(void (**)(char *, uint64_t))(v300 + 8))(v59, v312);
    if (v69 == v272)
    {
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }
  }
  v274 = v69;
  v74 = (v68[80] + 32) & ~(unint64_t)v68[80];
  v273 = v72;
  v23 = (char *)(v72 + v74);
  v316 = *((_QWORD *)v68 + 9);
  v317 = (void (*)(uint64_t, unint64_t, uint64_t))*((_QWORD *)v68 + 2);
  v317(isUniquelyReferenced_nonNull_native, v72 + v74, v54);
  while ((Siri_Nlu_External_UserDialogAct.hasDelegated.getter() & 1) == 0)
  {
LABEL_13:
    (*((void (**)(uint64_t, uint64_t))v68 + 1))(isUniquelyReferenced_nonNull_native, v54);
    v23 += v316;
    if (!--v73)
    {
      swift_bridgeObjectRelease();
      v69 = v274;
      goto LABEL_8;
    }
    v317(isUniquelyReferenced_nonNull_native, (unint64_t)v23, v54);
  }
  v313 = v73;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Parser.ParserIdentifier>);
  v75 = v295;
  v76 = *(_QWORD *)(v295 + 72);
  v77 = (*(unsigned __int8 *)(v295 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v295 + 80);
  v78 = swift_allocObject();
  *(_OWORD *)(v78 + 16) = v289;
  v79 = v78 + v77;
  v80 = *(void (**)(unint64_t, _QWORD, uint64_t))(v75 + 104);
  v81 = v311;
  v80(v79, v291, v311);
  v80(v79 + v76, v290, v81);
  v82 = specialized Set.init(_nonEmptyArrayLiteral:)(v78);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v83 = *((int *)v67 + 12);
  v84 = *((int *)v67 + 16);
  v85 = (uint64_t)v324;
  Siri_Nlu_External_UserDialogAct.delegated.getter();
  Siri_Nlu_External_UserParse.comparableProbability.getter();
  v87 = v86;
  *(double *)(v85 + v83) = v86;
  v88 = v308;
  Siri_Nlu_External_UserParse.parser.getter();
  v89 = (uint64_t)v310;
  Siri_Nlu_External_Parser.parserID.getter();
  v305 = *(void (**)(char *, uint64_t))(v294 + 8);
  v305(v88, v309);
  LOBYTE(v78) = specialized Set.contains(_:)(v89, v82);
  swift_bridgeObjectRelease();
  v90 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
  isUniquelyReferenced_nonNull_native = (uint64_t)v320;
  v90(v89, v81);
  v318 = v78 & 1;
  *(_BYTE *)(v85 + v84) = v78 & 1;
  v91 = v296;
  Siri_Nlu_External_UserDialogAct.delegated.getter();
  v92 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  v94 = (void (*)(char *, uint64_t, uint64_t))v93;
  v306 = *(void (**)(char *, uint64_t))(v319 + 8);
  v306(v91, v325);
  v95 = v304;
  v96 = *(_QWORD *)(v304 + 16);
  v326 = v94;
  if (v96)
  {
    swift_bridgeObjectRetain();
    v97 = specialized __RawDictionaryStorage.find<A>(_:)(v92, (uint64_t)v94);
    v98 = v297;
    v99 = v307;
    v100 = (uint64_t)v323;
    v101 = v312;
    if ((v102 & 1) != 0)
    {
      v103 = *(_QWORD *)(v95 + 56);
      v104 = v303;
      outlined init with copy of MediaUserStateCenter?(v103 + *(_QWORD *)(v303 + 72) * v97, v297, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v104 + 56))(v98, 0, 1, v321);
    }
    else
    {
      v104 = v303;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v303 + 56))(v297, 1, 1, v321);
    }
    swift_bridgeObjectRelease();
    v105 = v322;
  }
  else
  {
    v104 = v303;
    v98 = v297;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v303 + 56))(v297, 1, 1, v321);
    v105 = v322;
    v100 = (uint64_t)v323;
    v99 = v307;
    v101 = v312;
  }
  v106 = -1.0;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v104 + 48))(v98, 1, v321))
    v106 = *(double *)(v98 + *(int *)(v321 + 48));
  outlined destroy of MediaUserStateCenter?(v98, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  v107 = v292;
  v299(v292, (unint64_t)v315, v101);
  v108 = *((int *)v105 + 12);
  v109 = *((int *)v105 + 16);
  v110 = (uint64_t)v293;
  v314 = *(void (**)(char *, uint64_t *, uint64_t))(v319 + 16);
  v314(v293, (uint64_t *)v324, v325);
  *(double *)(v110 + v108) = v87;
  *(_BYTE *)(v110 + v109) = v318;
  outlined init with copy of MediaUserStateCenter?(v110, v100, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
  outlined init with take of PommesSearchReason?(v110, v99, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
  v111 = (unint64_t)v326;
  swift_bridgeObjectRetain_n();
  v112 = Logger.logObject.getter();
  v113 = static os_log_type_t.debug.getter();
  v114 = v113;
  if (os_log_type_enabled(v112, v113))
  {
    v115 = swift_slowAlloc();
    v288 = swift_slowAlloc();
    v327[0] = v288;
    *(_DWORD *)v115 = v279;
    v287 = v114;
    v116 = v308;
    v286 = v112;
    Siri_Nlu_External_UserParse.parser.getter();
    Siri_Nlu_External_Parser.parserID.getter();
    v117 = v116;
    v118 = v322;
    v305(v117, v309);
    v119 = String.init<A>(describing:)();
    v328 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v119, v120, v327);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v300 + 8))(v107, v312);
    *(_WORD *)(v115 + 12) = 2080;
    swift_bridgeObjectRetain();
    v121 = v92;
    v328 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v92, v111, v327);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v115 + 22) = 2048;
    v122 = *((int *)v118 + 12);
    v123 = *((int *)v118 + 16);
    v124 = v281;
    v314(v281, v323, v325);
    v125 = *(uint64_t *)((char *)v323 + v122);
    *(_QWORD *)&v124[v122] = v125;
    v124[v123] = *((_BYTE *)v323 + v123);
    v306(v124, v325);
    v328 = v125;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of MediaUserStateCenter?(v307, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
    outlined destroy of MediaUserStateCenter?((uint64_t)v323, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
    *(_WORD *)(v115 + 32) = 2048;
    v328 = *(_QWORD *)&v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v112 = v286;
    _os_log_impl(&dword_1C2356000, v286, (os_log_type_t)v287, "Extract DUDA: considering %s %s, comparing score %f > %f", (uint8_t *)v115, 0x2Au);
    v126 = v288;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v126, -1, -1);
    v127 = v115;
    isUniquelyReferenced_nonNull_native = (uint64_t)v320;
    MEMORY[0x1C3BBFF64](v127, -1, -1);
  }
  else
  {
    v121 = v92;
    (*(void (**)(char *, uint64_t))(v300 + 8))(v107, v101);
    swift_bridgeObjectRelease_n();
    outlined destroy of MediaUserStateCenter?(v99, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
    outlined destroy of MediaUserStateCenter?(v100, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
  }

  v54 = v302;
  v68 = v301;
  v59 = v315;
  if (one-time initialization token for PommesMultiClassParserIds != -1)
    swift_once();
  v128 = v121;
  v129 = specialized Set.contains(_:)(v121, (uint64_t)v326, static PommesSearchRequest.PommesMultiClassParserIds);
  v67 = v322;
  if ((v129 & 1) == 0)
    goto LABEL_11;
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  v130 = (uint64_t)v282;
  dispatch thunk of CurrentDevice.deviceClass.getter();
  swift_release();
  v131 = v285;
  v132 = v284;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v285 + 48))(v130, 1, v284) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v130, &demangling cache variable for type metadata for DeviceClass?);
LABEL_40:
    v142 = v314;
    goto LABEL_41;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v131 + 32))(v283, v130, v132);
  if (one-time initialization token for PommesMultiClassAllowedDeviceClasses != -1)
    swift_once();
  v133 = static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses;
  if (!*(_QWORD *)(static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses + 16))
  {
LABEL_39:
    (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v283, v132);
    goto LABEL_40;
  }
  v134 = v326;
  swift_bridgeObjectRetain();
  v306 = (void (*)(char *, uint64_t))v128;
  v135 = specialized __RawDictionaryStorage.find<A>(_:)(v128, (uint64_t)v134);
  if ((v136 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v128 = (uint64_t)v306;
    v68 = v301;
    goto LABEL_39;
  }
  v137 = *(_QWORD *)(*(_QWORD *)(v133 + 56) + 8 * v135);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v138 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v139 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v139 & 1) != 0)
  {
    v140 = v283;
    v141 = specialized Set.contains(_:)(v283, v137);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v140, v284);
  }
  else
  {
    swift_bridgeObjectRelease();
    v327[3] = (uint64_t)&type metadata for FeatureFlag;
    v327[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v163 = swift_allocObject();
    v327[0] = v163;
    *(_QWORD *)(v163 + 16) = 6;
    *(_QWORD *)(v163 + 24) = 0;
    *(_QWORD *)(v163 + 32) = 0;
    *(_QWORD *)(v163 + 40) = 0;
    *(_BYTE *)(v163 + 48) = 3;
    v141 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v327);
    (*(void (**)(uint64_t, uint64_t))(v285 + 8))(v283, v284);
  }
  v67 = v322;
  v128 = (uint64_t)v306;
  v68 = v301;
  v142 = v314;
  if ((v141 & 1) == 0)
    goto LABEL_11;
LABEL_41:
  if (v106 >= v87)
  {
LABEL_11:
    swift_bridgeObjectRelease();
LABEL_12:
    outlined destroy of MediaUserStateCenter?((uint64_t)v324, &demangling cache variable for type metadata for (Siri_Nlu_External_DelegatedUserDialogAct, Double, Bool));
    v73 = v313;
    goto LABEL_13;
  }
  v54 = (uint64_t)v59;
  v59 = v68;
  v143 = *((int *)v67 + 12);
  v144 = *((int *)v67 + 16);
  v145 = v275;
  v146 = v325;
  v142(v275, (uint64_t *)v324, v325);
  *(double *)&v145[v143] = v87;
  v147 = v318;
  v145[v144] = v318;
  v6 = *(int *)(v321 + 48);
  v148 = *(int *)(v321 + 64);
  v149 = (uint64_t)v276;
  (*(void (**)(char *, char *, uint64_t))(v319 + 32))(v276, v145, v146);
  *(double *)(v149 + v6) = v87;
  *(_BYTE *)(v149 + v148) = v147;
  outlined init with take of PommesSearchReason?(v149, v277, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  v150 = v304;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v327[0] = v150;
  a1 = specialized __RawDictionaryStorage.find<A>(_:)(v128, (uint64_t)v326);
  v152 = *(_QWORD *)(v150 + 16);
  v153 = (v151 & 1) == 0;
  v154 = v152 + v153;
  if (__OFADD__(v152, v153))
  {
    __break(1u);
LABEL_100:
    __break(1u);
    goto LABEL_101;
  }
  v155 = v151;
  if (*(_QWORD *)(v150 + 24) >= v154)
  {
    v68 = v59;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      specialized _NativeDictionary.copy()();
    goto LABEL_48;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v154, isUniquelyReferenced_nonNull_native);
  v156 = specialized __RawDictionaryStorage.find<A>(_:)(v128, (uint64_t)v326);
  if ((v155 & 1) == (v157 & 1))
  {
    a1 = v156;
    v68 = v59;
LABEL_48:
    isUniquelyReferenced_nonNull_native = (uint64_t)v320;
    v59 = (char *)v54;
    v6 = v327[0];
    v54 = v302;
    v304 = v327[0];
    if ((v155 & 1) != 0)
    {
      outlined assign with take of (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)(v277, *(_QWORD *)(v327[0] + 56) + *(_QWORD *)(v303 + 72) * a1);
    }
    else
    {
      *(_QWORD *)(v327[0] + 8 * (a1 >> 6) + 64) |= 1 << a1;
      v158 = (uint64_t *)(*(_QWORD *)(v6 + 48) + 16 * a1);
      v159 = v326;
      *v158 = v128;
      v158[1] = (uint64_t)v159;
      outlined init with take of PommesSearchReason?(v277, *(_QWORD *)(v6 + 56) + *(_QWORD *)(v303 + 72) * a1, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      v160 = *(_QWORD *)(v6 + 16);
      v161 = __OFADD__(v160, 1);
      v162 = v160 + 1;
      if (v161)
        goto LABEL_100;
      *(_QWORD *)(v6 + 16) = v162;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v67 = v322;
    goto LABEL_12;
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

double specialized static PommesSearchRequest.resolvedScore(_:isFallback:)(uint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  double v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void (*v62)(char *, char *, uint64_t);
  uint64_t v63;
  Swift::String_optional v64;
  uint64_t countAndFlagsBits;
  void *object;
  os_log_type_t v67;
  uint64_t v68;
  id v69;
  void *v70;
  id v71;
  void *v72;
  id v73;
  uint64_t v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  char *v83;
  void (*v84)(char *, char *, uint64_t);
  char *v85;
  void (*v86)(char *, char *, uint64_t);
  uint64_t v87;
  double v88;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
  v11 = *(_QWORD *)(v10 - 8);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = MEMORY[0x1E0C80A78](v12);
  v17 = (char *)&v79 - v16;
  v18 = MEMORY[0x1E0C80A78](v15);
  v20 = (char *)&v79 - v19;
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v79 - v21;
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v23 = type metadata accessor for Logger();
    __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
    v24 = Logger.logObject.getter();
    v25 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v24, v25))
    {
      v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v26 = 0;
      _os_log_impl(&dword_1C2356000, v24, v25, "POMMES request is for fallback. Forcing effective PSC score to 1.0.", v26, 2u);
      MEMORY[0x1C3BBFF64](v26, -1, -1);
    }

    return 1.0;
  }
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v9, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1C2356000, v29, v30, "No delegated UDA found. Setting effective PSC score to 0.0.", v31, 2u);
      MEMORY[0x1C3BBFF64](v31, -1, -1);
    }

    goto LABEL_25;
  }
  v85 = v14;
  v83 = v6;
  v32 = *(int *)(v10 + 48);
  v33 = *(int *)(v10 + 64);
  v34 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v35 = *(_QWORD **)(v34 - 8);
  v84 = (void (*)(char *, char *, uint64_t))v35[4];
  v84(v22, v9, v34);
  v27 = *(double *)&v9[v32];
  *(double *)&v22[v32] = v27;
  v36 = v9[v33];
  v22[v33] = v36;
  v37 = *(int *)(v10 + 48);
  v38 = *(int *)(v10 + 64);
  v86 = (void (*)(char *, char *, uint64_t))v35[2];
  v86(v20, v22, v34);
  *(double *)&v20[v37] = v27;
  v20[v38] = v36;
  v39 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
  v41 = v40;
  v42 = (void (*)(char *, uint64_t))v35[1];
  v42(v20, v34);
  LOBYTE(v39) = specialized static PommesSearchRequest.isSupportedExternalParseId(externalParseId:)(v39, v41);
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    v82 = v34;
    v84 = (void (*)(char *, char *, uint64_t))v22;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v45 = type metadata accessor for Logger();
    __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
    v46 = *(int *)(v10 + 48);
    v47 = *(int *)(v10 + 64);
    v48 = v84;
    v49 = v82;
    v86(v17, (char *)v84, v82);
    *(double *)&v17[v46] = v27;
    v17[v47] = v36;
    v50 = (uint64_t)v85;
    outlined init with take of PommesSearchReason?((uint64_t)v17, (uint64_t)v85, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v51, (os_log_type_t)v52))
    {

      outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
      v63 = (uint64_t)v48;
LABEL_24:
      outlined destroy of MediaUserStateCenter?(v63, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
LABEL_25:
      v27 = 0.0;
      goto LABEL_26;
    }
    v81 = v52;
    v53 = swift_slowAlloc();
    v80 = swift_slowAlloc();
    v88 = *(double *)&v80;
    *(_DWORD *)v53 = 136315394;
    v54 = *(int *)(v10 + 48);
    v55 = *(int *)(v10 + 64);
    v86(v20, (char *)v50, v49);
    *(_QWORD *)&v20[v54] = *(_QWORD *)(v50 + v54);
    v20[v55] = *(_BYTE *)(v50 + v55);
    v56 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
    v58 = v57;
    v42(v20, v49);
    v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v58, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v50, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    *(_WORD *)(v53 + 12) = 2080;
    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    v59 = (uint64_t)v83;
    dispatch thunk of CurrentDevice.deviceClass.getter();
    swift_release();
    v60 = type metadata accessor for DeviceClass();
    v61 = *(_QWORD *)(v60 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v59, 1, v60) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for DeviceClass?);
      v62 = v84;
    }
    else
    {
      v64 = DeviceClass.stringValue()();
      countAndFlagsBits = v64.value._countAndFlagsBits;
      object = v64.value._object;
      (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v59, v60);
      v62 = v84;
      if (v64.value._object)
      {
LABEL_23:
        v67 = v81;
        v68 = v80;
        v87 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(countAndFlagsBits, (unint64_t)object, (uint64_t *)&v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v51, v67, "externalParseID: %s is unsupported in current DeviceClass %s. Setting effective PSC score to 0.0.", (uint8_t *)v53, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v68, -1, -1);
        MEMORY[0x1C3BBFF64](v53, -1, -1);

        v63 = (uint64_t)v62;
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
    object = (void *)0xE700000000000000;
    countAndFlagsBits = 0x6E776F6E6B6E75;
    goto LABEL_23;
  }
  v43 = *(int *)(v10 + 48);
  v44 = *(int *)(v10 + 64);
  v84(v20, v22, v34);
  *(double *)&v20[v43] = v27;
  v20[v44] = v36;
  v42(v20, v34);
LABEL_26:
  v69 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v70 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000012, 0x80000001C2506740);
  v71 = objc_msgSend(v69, sel_initWithSuiteName_, v70);

  if (v71)
  {
    v72 = (void *)MEMORY[0x1C3BBEC44](0x7265766F20435350, 0xEC00000065646972);
    v73 = objc_msgSend(v71, sel_stringForKey_, v72);

    if (v73)
    {

      if (one-time initialization token for pommes != -1)
        swift_once();
      v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.pommes);
      v75 = Logger.logObject.getter();
      v76 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v75, v76))
      {
        v77 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v77 = 134217984;
        v88 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v75, v76, "WARNING: POMMES override enabled in CDM for PSC score. This may lead to unintended user-facing behavior. Effective PSC score: %f", v77, 0xCu);
        MEMORY[0x1C3BBFF64](v77, -1, -1);
      }

    }
  }
  return v27;
}

uint64_t specialized LazySequenceProtocol<>.keepSalientNLv4Parses()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t result;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  char *v39;
  void (*v40)(char *, char *, uint64_t);
  _BOOL4 v41;
  char *v42;
  char *v43;
  char *v44;
  void (*v45)(char *, uint64_t);
  char *v46;
  double v47;
  double v48;
  void (*v49)(char *, char *, uint64_t);
  char *v50;
  void (*v51)(char *, char *, uint64_t);
  uint64_t v52;
  uint64_t v53;
  char v54;
  uint64_t v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned int v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  void (*v78)(char *, uint64_t);
  void (*v79)(char *, _QWORD, uint64_t);
  char *v80;
  uint64_t v81;
  void (*v82)(char *, unint64_t, uint64_t);
  unint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v75 = *(_QWORD *)(v5 - 8);
  v6 = MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v59 - v9;
  v11 = type metadata accessor for Siri_Nlu_External_Parser();
  v74 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Siri_Nlu_External_UserParse();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v62 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v16);
  v73 = (char *)&v59 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v72 = (char *)&v59 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v84 = (char *)&v59 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v61 = (char *)&v59 - v25;
  MEMORY[0x1E0C80A78](v24);
  v63 = (char *)&v59 - v26;
  v87 = MEMORY[0x1E0DEE9D8];
  v27 = *(_QWORD *)(a1 + 16);
  v76 = a1;
  result = swift_bridgeObjectRetain();
  v77 = v27;
  if (!v27)
    goto LABEL_24;
  v29 = 0;
  v67 = *MEMORY[0x1E0D9F118];
  v64 = *MEMORY[0x1E0D9F138];
  v60 = v77 - 1;
  v80 = v13;
  v81 = v11;
  v69 = v4;
  v68 = v14;
  v70 = v15;
  while (2)
  {
    v30 = v77;
    if (v29 > v77)
      v30 = v29;
    v71 = v30;
    v31 = v29;
    while (1)
    {
      if (v71 == v31)
      {
        __break(1u);
        return result;
      }
      v32 = *(_QWORD *)(v15 + 72);
      v66 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      v83 = v31;
      v65 = v32;
      v82 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
      v33 = v84;
      v82(v84, v76 + v66 + v32 * v31, v14);
      Siri_Nlu_External_UserParse.parser.getter();
      Siri_Nlu_External_Parser.parserID.getter();
      v78 = *(void (**)(char *, uint64_t))(v74 + 8);
      v78(v13, v11);
      v34 = v75;
      v79 = *(void (**)(char *, _QWORD, uint64_t))(v75 + 104);
      v79(v8, v67, v5);
      lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E0D9F178]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v35 = v85;
      v36 = v86;
      v37 = *(void (**)(char *, uint64_t))(v34 + 8);
      v37(v8, v5);
      v37(v10, v5);
      v38 = v72;
      v39 = v33;
      v40 = (void (*)(char *, char *, uint64_t))v82;
      v82(v72, (unint64_t)v39, v14);
      if (v36 == v35)
      {
        v41 = 1;
      }
      else
      {
        v42 = v80;
        Siri_Nlu_External_UserParse.parser.getter();
        Siri_Nlu_External_Parser.parserID.getter();
        v78(v42, v81);
        v79(v8, v64, v5);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        v41 = v86 == v85;
        v37(v8, v5);
        v37(v10, v5);
      }
      v43 = v73;
      v44 = v38;
      v15 = v70;
      v45 = *(void (**)(char *, uint64_t))(v70 + 8);
      v14 = v68;
      v45(v44, v68);
      v40(v43, v84, v14);
      v46 = v69;
      if (v41)
        break;
      v45(v43, v14);
      v13 = v80;
LABEL_7:
      v31 = v83 + 1;
      result = ((uint64_t (*)(char *, uint64_t))v45)(v84, v14);
      v11 = v81;
      if (v77 == v31)
        goto LABEL_24;
    }
    Siri_Nlu_External_UserParse.comparableProbability.getter();
    v48 = v47;
    v45(v43, v14);
    v13 = v80;
    if (v48 <= 0.05)
      goto LABEL_7;
    v82 = (void (*)(char *, unint64_t, uint64_t))v10;
    v49 = *(void (**)(char *, char *, uint64_t))(v15 + 32);
    v50 = v61;
    v49(v61, v84, v14);
    v51 = v49;
    v49(v63, v50, v14);
    Siri_Nlu_External_UserParse.firstUserDialogAct.getter(v46);
    v52 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
    v53 = *(_QWORD *)(v52 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v46, 1, v52) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v46, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      goto LABEL_18;
    }
    v54 = Siri_Nlu_External_UserDialogAct.hasDelegated.getter();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v46, v52);
    if ((v54 & 1) != 0)
    {
      result = ((uint64_t (*)(char *, uint64_t))v45)(v63, v14);
      v10 = (char *)v82;
      v15 = v70;
    }
    else
    {
LABEL_18:
      v51(v62, v63, v14);
      v55 = v87;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v15 = v70;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v55 + 16) + 1, 1);
        v55 = v87;
      }
      v58 = *(_QWORD *)(v55 + 16);
      v57 = *(_QWORD *)(v55 + 24);
      if (v58 >= v57 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v57 > 1, v58 + 1, 1);
        v55 = v87;
      }
      *(_QWORD *)(v55 + 16) = v58 + 1;
      result = ((uint64_t (*)(unint64_t, char *, uint64_t))v51)(v55 + v66 + v58 * v65, v62, v14);
      v87 = v55;
      v10 = (char *)v82;
    }
    v29 = v83 + 1;
    v11 = v81;
    if (v60 != v83)
      continue;
    break;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  return v87;
}

uint64_t Siri_Nlu_External_UserParse.firstUserDialogAct.getter@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  void (*v21)(char *, unint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  void (*v29)(char *, unint64_t, uint64_t);
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t, uint64_t);
  char *v41;
  char *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  char *v47;
  char *v48;

  v47 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v3 = MEMORY[0x1E0C80A78](v2);
  v44 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v48 = (char *)&v43 - v5;
  v6 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v8);
  v43 = (char *)&v43 - v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v43 - v14;
  MEMORY[0x1E0C80A78](v13);
  v45 = (char *)&v43 - v16;
  v46 = v1;
  v17 = Siri_Nlu_External_Span.matcherNames.getter();
  v18 = *(_QWORD *)(v17 + 16);
  if (v18)
  {
    v19 = v17 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v20 = *(_QWORD *)(v7 + 72);
    v21 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v21(v15, v19, v6);
      if ((Siri_Nlu_External_UserDialogAct.hasAccepted.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v15, v6);
      v19 += v20;
      if (!--v18)
        goto LABEL_5;
    }
    v23 = (uint64_t)v48;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v48, v15, v6);
    v22 = *(char **)(v7 + 56);
    ((void (*)(uint64_t, _QWORD, uint64_t, uint64_t))v22)(v23, 0, 1, v6);
  }
  else
  {
LABEL_5:
    v22 = *(char **)(v7 + 56);
    v23 = (uint64_t)v48;
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v22)(v48, 1, 1, v6);
  }
  swift_bridgeObjectRelease();
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v24(v23, 1, v6) != 1)
  {
    v32 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    v33 = v45;
    v32(v45, v23, v6);
    v34 = v47;
    v32(v47, (uint64_t)v33, v6);
    v35 = v34;
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v35, 0, 1, v6);
  }
  outlined destroy of Siri_Nlu_External_UserDialogAct?(v23);
  v25 = Siri_Nlu_External_Span.matcherNames.getter();
  v26 = *(_QWORD *)(v25 + 16);
  if (v26)
  {
    v48 = v22;
    v27 = v25 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v28 = *(_QWORD *)(v7 + 72);
    v29 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      v29(v10, v27, v6);
      if ((Siri_Nlu_External_UserDialogAct.hasUserStatedTask.getter() & 1) != 0)
        break;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
      v27 += v28;
      if (!--v26)
      {
        v30 = v47;
        v22 = v48;
        v31 = (uint64_t)v44;
        ((void (*)(char *, uint64_t, uint64_t, uint64_t))v48)(v44, 1, 1, v6);
        goto LABEL_17;
      }
    }
    v31 = (uint64_t)v44;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v44, v10, v6);
    v36 = 0;
    v30 = v47;
    v22 = v48;
  }
  else
  {
    v36 = 1;
    v30 = v47;
    v31 = (uint64_t)v44;
  }
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v22)(v31, v36, 1, v6);
LABEL_17:
  swift_bridgeObjectRelease();
  if (v24(v31, 1, v6) != 1)
  {
    v40 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    v41 = v43;
    v40(v43, v31, v6);
    v40(v30, (uint64_t)v41, v6);
    v35 = v30;
    return ((uint64_t (*)(char *, _QWORD, uint64_t, uint64_t))v22)(v35, 0, 1, v6);
  }
  outlined destroy of Siri_Nlu_External_UserDialogAct?(v31);
  v37 = Siri_Nlu_External_Span.matcherNames.getter();
  if (*(_QWORD *)(v37 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))(v30, v37 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)), v6);
    v38 = v30;
    v39 = 0;
  }
  else
  {
    v38 = v30;
    v39 = 1;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v22)(v38, v39, 1, v6);
  return swift_bridgeObjectRelease();
}

uint64_t PommesCandidateId.asResultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  int v5;
  uint64_t v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v1 = type metadata accessor for PommesCandidateId();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v2 + 16))(v4, v0, v1);
  v5 = (*(uint64_t (**)(char *, uint64_t))(v2 + 88))(v4, v1);
  if (v5 == *MEMORY[0x1E0D988C8])
    goto LABEL_5;
  if (v5 == *MEMORY[0x1E0D988D0])
  {
    (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
    v6 = *(_QWORD *)v4;
    swift_bridgeObjectRelease();
    return v6;
  }
  if (v5 == *MEMORY[0x1E0D988C0])
  {
LABEL_5:
    (*(void (**)(char *, uint64_t))(v2 + 96))(v4, v1);
    return *(_QWORD *)v4;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C2356000, v9, v10, "No resultCandidateId for unexpected pommesCandidateId. Passing empty string for resultCandidateId.", v11, 2u);
    MEMORY[0x1C3BBFF64](v11, -1, -1);
  }

  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return 0;
}

_QWORD *initializeWithCopy for PommesSearchRequest(_QWORD *a1, _QWORD *a2, int *a3)
{
  int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int (*v32)(char *, uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int (*v48)(char *, uint64_t, uint64_t);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int (*v66)(char *, uint64_t, uint64_t);
  uint64_t v67;
  uint64_t v68;
  char *v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int (*v80)(char *, uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  id v91;
  char *__dst;
  uint64_t v94;
  char *v95;

  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v15 = a2[1];
    *a1 = *a2;
    a1[1] = v15;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    v17 = *(int *)(v16 + 64);
    v18 = (char *)a1 + v17;
    v19 = (char *)a2 + v17;
    v20 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v21 = *(_QWORD *)(v20 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
    {
      v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v21 + 16))(v18, v19, v20);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
    }
    v34 = *(int *)(v16 + 80);
    v35 = (char *)a1 + v34;
    v36 = (char *)a2 + v34;
  }
  else
  {
    if (EnumCaseMultiPayload == 1)
    {
      v7 = a2[1];
      *a1 = *a2;
      a1[1] = v7;
      v8 = a2[3];
      a1[2] = a2[2];
      a1[3] = v8;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v9 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                  + 64);
      v10 = (char *)a1 + v9;
      v11 = (char *)a2 + v9;
      v12 = type metadata accessor for TCUMappedNLResponse();
      v13 = *(_QWORD *)(v12 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      {
        v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        memcpy(v10, v11, *(_QWORD *)(*(_QWORD *)(v14 - 8) + 64));
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
      }
      goto LABEL_15;
    }
    v23 = a2[1];
    *a1 = *a2;
    a1[1] = v23;
    swift_bridgeObjectRetain();
    v24 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    v25 = (char *)a1 + v24;
    v26 = (char *)a2 + v24;
    *(_QWORD *)((char *)a1 + v24) = *(_QWORD *)((char *)a2 + v24);
    v27 = type metadata accessor for NLXResultCandidate();
    v28 = *(int *)(v27 + 20);
    __dst = &v25[v28];
    v94 = v27;
    v29 = &v26[v28];
    v30 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v31 = *(_QWORD *)(v30 - 8);
    v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v29, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(__dst, v29, v30);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(__dst, 0, 1, v30);
    }
    v37 = *(int *)(v94 + 24);
    v35 = &v25[v37];
    v36 = &v26[v37];
  }
  v38 = *((_QWORD *)v36 + 1);
  *(_QWORD *)v35 = *(_QWORD *)v36;
  *((_QWORD *)v35 + 1) = v38;
  swift_bridgeObjectRetain();
LABEL_15:
  swift_storeEnumTagMultiPayload();
  v39 = a3[5];
  v40 = a3[6];
  v41 = (_QWORD *)((char *)a1 + v39);
  v42 = (_QWORD *)((char *)a2 + v39);
  v43 = v42[1];
  *v41 = *v42;
  v41[1] = v43;
  v44 = (char *)a1 + v40;
  v45 = (char *)a2 + v40;
  v46 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v47 = *(_QWORD *)(v46 - 8);
  v48 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48);
  swift_bridgeObjectRetain();
  if (v48(v45, 1, v46))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    memcpy(v44, v45, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v44, v45, v46);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
  }
  v50 = a3[7];
  v51 = a3[8];
  v52 = (_QWORD *)((char *)a1 + v50);
  v53 = (_QWORD *)((char *)a2 + v50);
  v54 = v53[1];
  *v52 = *v53;
  v52[1] = v54;
  v55 = (_QWORD *)((char *)a1 + v51);
  v56 = (_QWORD *)((char *)a2 + v51);
  v57 = v56[1];
  *v55 = *v56;
  v55[1] = v57;
  v58 = a3[9];
  v59 = a3[10];
  v60 = (_QWORD *)((char *)a1 + v58);
  v61 = (_QWORD *)((char *)a2 + v58);
  v62 = v61[1];
  *v60 = *v61;
  v60[1] = v62;
  v95 = (char *)a1 + v59;
  v63 = (char *)a2 + v59;
  v64 = type metadata accessor for PommesContext();
  v65 = *(_QWORD *)(v64 - 8);
  v66 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v66(v63, 1, v64))
  {
    v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
    memcpy(v95, v63, *(_QWORD *)(*(_QWORD *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v65 + 16))(v95, v63, v64);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v95, 0, 1, v64);
  }
  v68 = a3[11];
  v69 = (char *)a1 + v68;
  v70 = (char *)a2 + v68;
  v71 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v72 = *(_QWORD *)(v71 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v72 + 48))(v70, 1, v71))
  {
    v73 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    memcpy(v69, v70, *(_QWORD *)(*(_QWORD *)(v73 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v72 + 16))(v69, v70, v71);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v72 + 56))(v69, 0, 1, v71);
  }
  v74 = a3[13];
  *(_QWORD *)((char *)a1 + a3[12]) = *(_QWORD *)((char *)a2 + a3[12]);
  *(_QWORD *)((char *)a1 + v74) = *(_QWORD *)((char *)a2 + v74);
  v75 = a3[14];
  v76 = (char *)a1 + v75;
  v77 = (char *)a2 + v75;
  v78 = type metadata accessor for InputOrigin();
  v79 = *(_QWORD *)(v78 - 8);
  v80 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v79 + 48);
  swift_retain();
  if (v80(v77, 1, v78))
  {
    v81 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
    memcpy(v76, v77, *(_QWORD *)(*(_QWORD *)(v81 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v79 + 16))(v76, v77, v78);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v79 + 56))(v76, 0, 1, v78);
  }
  v82 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  *((_BYTE *)a1 + v82) = *((_BYTE *)a2 + v82);
  v83 = a3[18];
  *((_BYTE *)a1 + a3[17]) = *((_BYTE *)a2 + a3[17]);
  v84 = *(void **)((char *)a2 + v83);
  *(_QWORD *)((char *)a1 + v83) = v84;
  v85 = a3[20];
  *(_QWORD *)((char *)a1 + a3[19]) = *(_QWORD *)((char *)a2 + a3[19]);
  *((_BYTE *)a1 + v85) = *((_BYTE *)a2 + v85);
  v86 = a3[21];
  v87 = a3[22];
  v88 = (_QWORD *)((char *)a1 + v86);
  v89 = (_QWORD *)((char *)a2 + v86);
  v90 = v89[1];
  *v88 = *v89;
  v88[1] = v90;
  *(_QWORD *)((char *)a1 + v87) = *(_QWORD *)((char *)a2 + v87);
  *(_QWORD *)((char *)a1 + a3[23]) = *(_QWORD *)((char *)a2 + a3[23]);
  v91 = v84;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t PommesSearch.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v11;

  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 240))(a1, a2, a3);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t outlined init with copy of PommesSearchRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

_QWORD *initializeWithCopy for PommesSearchRequest.ParseState(_QWORD *a1, _QWORD *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int (*v30)(char *, uint64_t, uint64_t);
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  char *__dst;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v13 = a2[1];
    *a1 = *a2;
    a1[1] = v13;
    a1[2] = a2[2];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v14 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?));
    v15 = *(int *)(v14 + 64);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v19 = *(_QWORD *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v16, v17, v18);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    v32 = *(int *)(v14 + 80);
    v33 = (_QWORD *)((char *)a1 + v32);
    v34 = (_QWORD *)((char *)a2 + v32);
    v35 = v34[1];
    *v33 = *v34;
    v33[1] = v35;
    swift_bridgeObjectRetain();
  }
  else if (EnumCaseMultiPayload == 1)
  {
    v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    v6 = a2[3];
    a1[2] = a2[2];
    a1[3] = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v7 = *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
                + 64);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    v10 = type metadata accessor for TCUMappedNLResponse();
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  else
  {
    v21 = a2[1];
    *a1 = *a2;
    a1[1] = v21;
    swift_bridgeObjectRetain();
    v22 = *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    *(_QWORD *)((char *)a1 + v22) = *(_QWORD *)((char *)a2 + v22);
    v25 = type metadata accessor for NLXResultCandidate();
    v26 = *(int *)(v25 + 20);
    __dst = &v23[v26];
    v27 = &v24[v26];
    v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v29 = *(_QWORD *)(v28 - 8);
    v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48);
    swift_bridgeObjectRetain();
    if (v30(v27, 1, v28))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      memcpy(__dst, v27, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v29 + 16))(__dst, v27, v28);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
    }
    v36 = *(int *)(v25 + 24);
    v37 = &v23[v36];
    v38 = &v24[v36];
    v39 = *((_QWORD *)v38 + 1);
    *(_QWORD *)v37 = *(_QWORD *)v38;
    *((_QWORD *)v37 + 1) = v39;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void PommesRequestInstrumentationUtil.logStartOfPommesRequest(requestId:pommesCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  NSObject *oslog;

  v1 = v0;
  v2 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2F0]), sel_init);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A310]), sel_init);
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v6, sel_setExists_, 1);
        objc_msgSend(v5, sel_setStartedOrChanged_, v7);
        objc_msgSend(v3, sel_setPommesRequestContext_, v5);
        v8 = (void *)objc_opt_self();
        swift_retain();
        v9 = objc_msgSend(v8, sel_processInfo);
        v10 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v10 & 1) != 0)
          v11 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))();
        else
          v11 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v15 = v11;
        swift_release();
        objc_msgSend(v15, sel_emitMessage_, v3);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v5 = v3;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v13, "Unable to log start of POMMES request", v14, 2u);
    MEMORY[0x1C3BBFF64](v14, -1, -1);
  }

}

void *specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
}

{
  return specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3, (void (*)(uint64_t, uint64_t, uint64_t))specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:));
}

void *specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;

  v8 = type metadata accessor for UUID();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1F8]), sel_init);
  if (v12)
  {
    v13 = v12;
    a4(21, a1, a2);
    v14 = closure #1 in Emittable.eventWrapper(requestId:pommesCandidateId:)((uint64_t)v11, a1, a2, a3);
    objc_msgSend(v13, sel_setEventMetadata_, v14);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1C2356000, v16, v17, "Unable to initialize POMMESSchemaPOMMESClientEvent", v18, 2u);
      MEMORY[0x1C3BBFF64](v18, -1, -1);
    }

    return 0;
  }
  return v13;
}

void *specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  void *v11;
  id v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;

  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1F8]), sel_init);
  if (v10)
  {
    v11 = v10;
    specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:)(21, a1, a2, (uint64_t)v9);
    v12 = closure #1 in Emittable.eventWrapper(requestId:pommesCandidateId:)((uint64_t)v9, a1, a2, a3);
    objc_msgSend(v11, sel_setEventMetadata_, v12);

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1C2356000, v14, v15, "Unable to initialize POMMESSchemaPOMMESClientEvent", v16, 2u);
      MEMORY[0x1C3BBFF64](v16, -1, -1);
    }

    return 0;
  }
  return v11;
}

uint64_t specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v32)(uint64_t, char *);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  id v37;
  char v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = v4;
  v69 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v64 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v68 = (char *)&v64 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v64 - v22;
  if (!a3)
    goto LABEL_4;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v71 = v28;
      *(_DWORD *)v27 = 136315138;
      if (a3)
        v29 = a2;
      else
        v29 = 7104878;
      if (a3)
        v30 = a3;
      else
        v30 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v25, v26, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v28, -1, -1);
      MEMORY[0x1C3BBFF64](v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  v67 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v67(v23, v11, v12);
  v32 = *(void (**)(uint64_t, char *))(*v5[3] + 88);
  swift_retain();
  v33 = (uint64_t)v68;
  v32(a1, v23);
  swift_release();
  if (AFDeviceSupportsSAE())
    v34 = 43;
  else
    v34 = 1;
  v35 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(a1, v33, v34);
  if (v35)
  {
    v36 = v35;
    v37 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v38 = NSProcessInfo.isRunningUnitTests.getter();

    if ((v38 & 1) != 0)
      v39 = (id)((uint64_t (*)(void))(*v5)[12])();
    else
      v39 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
    objc_msgSend(v39, sel_emitMessage_, v36);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v19, v33, v12);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v71 = v66;
      *(_DWORD *)v53 = 136315394;
      v54 = SISchemaComponentName.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v71);
      v65 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v56 = dispatch thunk of CustomStringConvertible.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v58 = *(void (**)(char *, uint64_t))(v13 + 8);
      v58(v19, v12);
      _os_log_impl(&dword_1C2356000, v51, v52, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      v59 = v66;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v59, -1, -1);
      MEMORY[0x1C3BBFF64](v53, -1, -1);

      v58(v23, v12);
    }
    else
    {

      v60 = *(void (**)(char *, uint64_t))(v13 + 8);
      v60(v19, v12);
      v60(v23, v12);
    }
    v62 = v68;
    v61 = v69;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v33, v12);
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v71 = v66;
      *(_DWORD *)v43 = 136315394;
      v44 = SISchemaComponentName.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v46 = dispatch thunk of CustomStringConvertible.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v71);
      v33 = (uint64_t)v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v48 = *(void (**)(char *, uint64_t))(v13 + 8);
      v48(v16, v12);
      _os_log_impl(&dword_1C2356000, v41, v42, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v43, 0x16u);
      v49 = v66;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v49, -1, -1);
      MEMORY[0x1C3BBFF64](v43, -1, -1);

      v48(v23, v12);
    }
    else
    {

      v63 = *(void (**)(char *, uint64_t))(v13 + 8);
      v63(v16, v12);
      v63(v23, v12);
    }
    v61 = v69;
    v62 = (char *)v33;
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v67)(v61, v62, v12);
}

{
  _QWORD **v4;
  _QWORD **v5;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v32)(uint64_t, char *);
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  NSObject *v36;
  id v37;
  char v38;
  id v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  void (*v48)(char *, uint64_t);
  uint64_t v49;
  uint64_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void (*v58)(char *, uint64_t);
  uint64_t v59;
  void (*v60)(char *, uint64_t);
  uint64_t v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  void (*v67)(char *, char *, uint64_t);
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = v4;
  v69 = a4;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for UUID();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v64 - v18;
  v20 = MEMORY[0x1E0C80A78](v17);
  v68 = (char *)&v64 - v21;
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)&v64 - v22;
  if (!a3)
    goto LABEL_4;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for UUID?);
LABEL_4:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v24 = type metadata accessor for Logger();
    __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v71 = v28;
      *(_DWORD *)v27 = 136315138;
      if (a3)
        v29 = a2;
      else
        v29 = 7104878;
      if (a3)
        v30 = a3;
      else
        v30 = 0xE300000000000000;
      swift_bridgeObjectRetain();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v25, v26, "[SELF Logging] Unable to create UUID for derived SELF ids from requestId: %s.", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v28, -1, -1);
      MEMORY[0x1C3BBFF64](v27, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return UUID.init()();
  }
  v67 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v67(v23, v11, v12);
  v32 = *(void (**)(uint64_t, char *))(*v5[4] + 88);
  swift_retain();
  v33 = (uint64_t)v68;
  v32(a1, v23);
  swift_release();
  if (AFDeviceSupportsSAE())
    v34 = 43;
  else
    v34 = 1;
  v35 = specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(a1, v33, v34);
  if (v35)
  {
    v36 = v35;
    v37 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    v38 = NSProcessInfo.isRunningUnitTests.getter();

    if ((v38 & 1) != 0)
      v39 = (id)((uint64_t (*)(void))(*v5)[16])();
    else
      v39 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
    objc_msgSend(v39, sel_emitMessage_, v36);
    swift_unknownObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v50 = type metadata accessor for Logger();
    __swift_project_value_buffer(v50, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v19, v33, v12);
    v51 = Logger.logObject.getter();
    v52 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v51, v52))
    {
      v53 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v71 = v66;
      *(_DWORD *)v53 = 136315394;
      v54 = SISchemaComponentName.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, &v71);
      v65 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v53 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v56 = dispatch thunk of CustomStringConvertible.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v58 = *(void (**)(char *, uint64_t))(v13 + 8);
      v58(v19, v12);
      _os_log_impl(&dword_1C2356000, v51, v52, "[SELF Logging] Logged request link event with component:%s, ID: %s", (uint8_t *)v53, 0x16u);
      v59 = v66;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v59, -1, -1);
      MEMORY[0x1C3BBFF64](v53, -1, -1);

      v58(v23, v12);
    }
    else
    {

      v60 = *(void (**)(char *, uint64_t))(v13 + 8);
      v60(v19, v12);
      v60(v23, v12);
    }
    v62 = v68;
    v61 = v69;
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v16, v33, v12);
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = swift_slowAlloc();
      v66 = swift_slowAlloc();
      v71 = v66;
      *(_DWORD *)v43 = 136315394;
      v44 = SISchemaComponentName.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v43 + 12) = 2080;
      lazy protocol witness table accessor for type UUID and conformance UUID();
      v46 = dispatch thunk of CustomStringConvertible.description.getter();
      v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v46, v47, &v71);
      v33 = (uint64_t)v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v48 = *(void (**)(char *, uint64_t))(v13 + 8);
      v48(v16, v12);
      _os_log_impl(&dword_1C2356000, v41, v42, "[SELF Logging] Unable to log request link event with component:%s, ID: %s", (uint8_t *)v43, 0x16u);
      v49 = v66;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v49, -1, -1);
      MEMORY[0x1C3BBFF64](v43, -1, -1);

      v48(v23, v12);
    }
    else
    {

      v63 = *(void (**)(char *, uint64_t))(v13 + 8);
      v63(v16, v12);
      v63(v23, v12);
    }
    v61 = v69;
    v62 = (char *)v33;
  }
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v67)(v61, v62, v12);
}

void AnalyticsComponentIdGenerator.derivedIdentifier(for:from:)(uint64_t a1)
{
  void *v2;
  Class isa;
  id v4;

  v2 = (void *)objc_opt_self();
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v4 = objc_msgSend(v2, sel_derivedIdentifierForComponent_fromSourceIdentifier_, a1, isa);

  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
}

NSObject *specialized Emittable.buildRequestLinkEvent(sourceComponent:sourceUUID:targetComponent:targetUUID:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  NSObject *v5;
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  Class isa;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A488]), sel_init);
  if (!v5)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    v6 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v39 = v20;
      *(_DWORD *)v19 = 136315394;
      v21 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      v23 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v6, v18, "Failed to create RequestLink event for source component: %s and target component: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v20, -1, -1);
      MEMORY[0x1C3BBFF64](v19, -1, -1);
    }
    goto LABEL_18;
  }
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A498]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v39 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v26, v27, "Failed to create source link event for source component: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v29, -1, -1);
      MEMORY[0x1C3BBFF64](v28, -1, -1);
    }
LABEL_17:

LABEL_18:
    return 0;
  }
  v8 = v7;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A498]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    v26 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v33))
    {

      return 0;
    }
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v39 = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = SISchemaComponentName.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v26, v33, "Failed to create target link event for target component: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v35, -1, -1);
    MEMORY[0x1C3BBFF64](v34, -1, -1);

    goto LABEL_17;
  }
  v10 = v9;
  objc_msgSend(v8, sel_setComponent_, a1);
  v11 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v11, sel_initWithNSUUID_, isa);

  objc_msgSend(v8, sel_setUuid_, v13);
  objc_msgSend(v10, sel_setComponent_, a3);
  v14 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
  v15 = UUID._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, sel_initWithNSUUID_, v15);

  objc_msgSend(v10, sel_setUuid_, v16);
  -[NSObject setSource:](v6, sel_setSource_, v8);
  -[NSObject setTarget:](v6, sel_setTarget_, v10);

  return v6;
}

{
  NSObject *v5;
  NSObject *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  Class isa;
  id v13;
  id v14;
  Class v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v39;

  v5 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A488]), sel_init);
  if (!v5)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    v6 = Logger.logObject.getter();
    v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v18))
    {
      v19 = swift_slowAlloc();
      v20 = swift_slowAlloc();
      v39 = v20;
      *(_DWORD *)v19 = 136315394;
      v21 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2080;
      v23 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v6, v18, "Failed to create RequestLink event for source component: %s and target component: %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v20, -1, -1);
      MEMORY[0x1C3BBFF64](v19, -1, -1);
    }
    goto LABEL_18;
  }
  v6 = v5;
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A498]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v25 = type metadata accessor for Logger();
    __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
    v26 = Logger.logObject.getter();
    v27 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v27))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v39 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = SISchemaComponentName.description.getter();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v26, v27, "Failed to create source link event for source component: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v29, -1, -1);
      MEMORY[0x1C3BBFF64](v28, -1, -1);
    }
LABEL_17:

LABEL_18:
    return 0;
  }
  v8 = v7;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A498]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v32 = type metadata accessor for Logger();
    __swift_project_value_buffer(v32, (uint64_t)static Logger.pommes);
    v26 = Logger.logObject.getter();
    v33 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v26, v33))
    {

      return 0;
    }
    v34 = (uint8_t *)swift_slowAlloc();
    v35 = swift_slowAlloc();
    v39 = v35;
    *(_DWORD *)v34 = 136315138;
    v36 = SISchemaComponentName.description.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v37, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v26, v33, "Failed to create target link event for target component: %s", v34, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v35, -1, -1);
    MEMORY[0x1C3BBFF64](v34, -1, -1);

    goto LABEL_17;
  }
  v10 = v9;
  objc_msgSend(v8, sel_setComponent_, a1);
  v11 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v13 = objc_msgSend(v11, sel_initWithNSUUID_, isa);

  objc_msgSend(v8, sel_setUuid_, v13);
  objc_msgSend(v10, sel_setComponent_, a3);
  v14 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
  v15 = UUID._bridgeToObjectiveC()().super.isa;
  v16 = objc_msgSend(v14, sel_initWithNSUUID_, v15);

  objc_msgSend(v10, sel_setUuid_, v16);
  -[NSObject setSource:](v6, sel_setSource_, v8);
  -[NSObject setTarget:](v6, sel_setTarget_, v10);

  return v6;
}

uint64_t NSProcessInfo.isRunningUnitTests.getter()
{
  void *v0;
  id v1;
  uint64_t v2;
  char v3;
  uint64_t v4;

  v1 = objc_msgSend(v0, sel_environment);
  v2 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(_QWORD *)(v2 + 16)
    && (specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, 0x80000001C2504400), (v3 & 1) != 0))
  {
    swift_bridgeObjectRetain();
    v4 = 1;
  }
  else
  {
    v4 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

{
  uint64_t v2;
  unint64_t v3;

  v3 = a2 & ~(-1 << *(_BYTE *)(v2 + 32));
  if (((*(_QWORD *)(v2 + 64 + ((v3 >> 3) & 0xFFFFFFFFFFFFF8)) >> v3) & 1) != 0)
    __asm { BR              X9 }
  return a2 & ~(-1 << *(_BYTE *)(v2 + 32));
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(char a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    v6 = *(_QWORD *)&a1920s_1[8 * a1];
    while (*(_QWORD *)&a1920s_1[8 * *(char *)(*(_QWORD *)(v2 + 48) + v4)] != v6)
    {
      v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease_n();
      if ((v7 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x6E65657263536E6FLL;
    else
      v6 = 0xD000000000000013;
    if ((a1 & 1) != 0)
      v7 = 0xEB00000000495255;
    else
      v7 = 0x80000001C2501B90;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x6E65657263536E6FLL : 0xD000000000000013;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xEB00000000495255 : 0x80000001C2501B90;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v11;

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v5 = ~v3;
    if ((a1 & 1) != 0)
      v6 = 0x636973756DLL;
    else
      v6 = 1701736302;
    if ((a1 & 1) != 0)
      v7 = 0xE500000000000000;
    else
      v7 = 0xE400000000000000;
    while (1)
    {
      v8 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0x636973756DLL : 1701736302;
      v9 = *(_BYTE *)(*(_QWORD *)(v2 + 48) + v4) ? 0xE500000000000000 : 0xE400000000000000;
      if (v8 == v6 && v9 == v7)
        break;
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        v4 = (v4 + 1) & v5;
        if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
          continue;
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), unint64_t *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  unint64_t *v21;
  uint64_t v22;

  v21 = a4;
  v22 = a5;
  v6 = v5;
  v19 = a1;
  v20 = a3;
  v8 = a3(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v19 - v10;
  v12 = -1 << *(_BYTE *)(v6 + 32);
  v13 = a2 & ~v12;
  if (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0)
  {
    v14 = ~v12;
    v15 = *(_QWORD *)(v9 + 72);
    v16 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    do
    {
      v16(v11, *(_QWORD *)(v6 + 48) + v15 * v13, v8);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(v21, v20, v22);
      v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      if ((v17 & 1) != 0)
        break;
      v13 = (v13 + 1) & v14;
    }
    while (((*(_QWORD *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:hashValue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      outlined init with copy of AnyHashable(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x1C3BBF37C](v9, a1);
      outlined destroy of AnyHashable((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v18;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      v12 = ~v4;
      v5 = (v5 + 1) & v12;
      if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
      {
        while (1)
        {
          v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16)
            break;
          v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            v5 = (v5 + 1) & v12;
            if (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
              continue;
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t lazy protocol witness table accessor for type UUID and conformance UUID()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UUID and conformance UUID;
  if (!lazy protocol witness table cache variable for type UUID and conformance UUID)
  {
    v1 = type metadata accessor for UUID();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0CB09F0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID);
  }
  return result;
}

id closure #1 in Emittable.eventWrapper(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  id v23;
  id v24;
  id v25;
  id v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  id v31;
  char *v32;
  id v33;
  Class isa;
  id v35;
  uint64_t v36;
  id v37;
  id v38;
  NSUUID v39;
  id v40;
  char **v41;
  id v42;
  id v43;
  uint64_t v44;
  uint64_t v45;
  id v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  const char *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  id v64;
  id v65;
  char *v66;
  id v67;
  void *v68;
  char *v69;
  id v70;
  char *v71;
  id v72;
  Class v73;
  id v74;
  id v75;
  id v76;
  void *v77;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;

  v85 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v80 - v10;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v82 = (char *)&v80 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v80 - v15;
  v17 = type metadata accessor for UUID();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = MEMORY[0x1E0C80A78](v17);
  v81 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v22 = (char *)&v80 - v21;
  v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A200]), sel_init);
  if (v23)
  {
    v24 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
    v83 = a3;
    v25 = v24;
    v26 = v23;
    v84 = v22;
    v27 = a4;
    v28 = v9;
    v29 = v18;
    v30 = v17;
    v31 = v23;
    v32 = v11;
    v33 = v26;
    isa = UUID._bridgeToObjectiveC()().super.isa;
    v35 = objc_msgSend(v25, sel_initWithNSUUID_, isa);

    objc_msgSend(v33, sel_setPommesId_, v35);
    v11 = v32;
    v23 = v31;
    v17 = v30;
    v18 = v29;
    v9 = v28;
    a4 = v27;
    v22 = v84;

    a3 = v83;
  }
  if (a3)
  {
    UUID.init(uuidString:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UUID?);
      goto LABEL_13;
    }
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v22, v16, v17);
    if (AFDeviceSupportsSAE())
    {
      if (v23)
      {
        v36 = v18;
        v37 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
        v38 = v23;
        v39.super.isa = UUID._bridgeToObjectiveC()().super.isa;
        v40 = objc_msgSend(v37, sel_initWithNSUUID_, v39.super.isa);
        v41 = &selRef_setSubRequestId_;
LABEL_11:

        objc_msgSend(v23, *v41, v40);
        v18 = v36;
      }
    }
    else if (v23)
    {
      v36 = v18;
      v42 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
      v43 = v23;
      v39.super.isa = UUID._bridgeToObjectiveC()().super.isa;
      v40 = objc_msgSend(v42, sel_initWithNSUUID_, v39.super.isa);
      v41 = &selRef_setRequestId_;
      goto LABEL_11;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v17);
  }
LABEL_13:
  outlined init with copy of PommesCandidateId?(a4, (uint64_t)v11);
  v44 = type metadata accessor for PommesCandidateId();
  v45 = *(_QWORD *)(v44 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v11, 1, v44) == 1)
  {
    v46 = v23;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v47 = type metadata accessor for Logger();
    __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v48, v49))
      goto LABEL_19;
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    v51 = "PommesCandidateId is nil";
LABEL_18:
    _os_log_impl(&dword_1C2356000, v48, v49, v51, v50, 2u);
    MEMORY[0x1C3BBFF64](v50, -1, -1);
LABEL_19:

    v23 = v46;
    goto LABEL_34;
  }
  outlined init with copy of PommesCandidateId?((uint64_t)v11, (uint64_t)v9);
  v52 = (*(uint64_t (**)(_QWORD *, uint64_t))(v45 + 88))(v9, v44);
  if (v52 == *MEMORY[0x1E0D988C8])
    goto LABEL_29;
  if (v52 != *MEMORY[0x1E0D988D0])
  {
    if (v52 != *MEMORY[0x1E0D988C0])
    {
      v46 = v23;
      (*(void (**)(_QWORD *, uint64_t))(v45 + 8))(v9, v44);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v79 = type metadata accessor for Logger();
      __swift_project_value_buffer(v79, (uint64_t)static Logger.pommes);
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v48, v49))
        goto LABEL_19;
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      v51 = "Unknown PommesCandidateId";
      goto LABEL_18;
    }
LABEL_29:
    (*(void (**)(_QWORD *, uint64_t))(v45 + 96))(v9, v44);
    v62 = v9[1];
    if (v23)
    {
      v63 = *v9;
      v64 = v23;
      v65 = v23;
      v66 = v11;
      v67 = v64;
      v68 = (void *)MEMORY[0x1C3BBEC44](v63, v62);
      swift_bridgeObjectRelease();
      objc_msgSend(v67, sel_setResultCandidateId_, v68);

      v11 = v66;
      v23 = v65;

      goto LABEL_34;
    }
LABEL_31:
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  (*(void (**)(_QWORD *, uint64_t))(v45 + 96))(v9, v44);
  v53 = v18;
  v55 = *v9;
  v54 = v9[1];
  swift_bridgeObjectRelease();
  v56 = (uint64_t)v82;
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v53 + 48))(v56, 1, v17) != 1)
  {
    v69 = v81;
    (*(void (**)(char *, uint64_t, uint64_t))(v53 + 32))(v81, v56, v17);
    if (v23)
    {
      v70 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
      v71 = v11;
      v72 = v23;
      v73 = UUID._bridgeToObjectiveC()().super.isa;
      v74 = objc_msgSend(v70, sel_initWithNSUUID_, v73);

      objc_msgSend(v72, sel_setTrpId_, v74);
      v75 = v72;
      v11 = v71;
      v76 = v75;
      v77 = (void *)MEMORY[0x1C3BBEC44](v55, v54);
      swift_bridgeObjectRelease();
      objc_msgSend(v76, sel_setResultCandidateId_, v77);

      (*(void (**)(char *, uint64_t))(v53 + 8))(v69, v17);
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t))(v53 + 8))(v69, v17);
    goto LABEL_31;
  }
  v57 = v23;
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for UUID?);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v58 = type metadata accessor for Logger();
  __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
  v59 = Logger.logObject.getter();
  v60 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v59, v60))
  {
    v61 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v61 = 0;
    _os_log_impl(&dword_1C2356000, v59, v60, "Unable to create UUID from trpId", v61, 2u);
    MEMORY[0x1C3BBFF64](v61, -1, -1);
  }

  v23 = v57;
LABEL_34:
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
  return v23;
}

void PommesRequestInstrumentationUtil.logPSCScoreReported(requestId:pommesCandidateId:score:parserId:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v11;
  void *v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  char v17;
  id v18;
  uint64_t v19;
  os_log_type_t v20;
  uint8_t *v21;
  void *v22;
  NSObject *oslog;

  v7 = v6;
  v11 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)();
  if (v11)
  {
    v12 = (void *)v11;
    v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A340]), sel_init);
    if (v13)
    {
      v14 = v13;
      objc_msgSend(v13, sel_setScore_, a1);
      objc_msgSend(v14, sel_setClassifierLabel_, specialized PommesRequestInstrumentationUtil.classifierLabel(for:)(a5, a6));
      objc_msgSend(v12, sel_setPommesServiceClassifierScoreReported_, v14);
      v15 = (void *)objc_opt_self();
      swift_retain();
      v16 = objc_msgSend(v15, sel_processInfo);
      v17 = NSProcessInfo.isRunningUnitTests.getter();

      if ((v17 & 1) != 0)
        v18 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v7 + 96))();
      else
        v18 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
      v22 = v18;
      swift_release();
      objc_msgSend(v22, sel_emitMessage_, v12);

      swift_unknownObjectRelease();
      return;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v19 = type metadata accessor for Logger();
  __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v20, "Unable to log cancelled PSC score reported", v21, 2u);
    MEMORY[0x1C3BBFF64](v21, -1, -1);
  }

}

uint64_t specialized PommesRequestInstrumentationUtil.classifierLabel(for:)(uint64_t a1, uint64_t a2)
{
  if (!a2)
    return 0;
  if (a1 == 0xD000000000000010 && a2 == 0x80000001C2501BB0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 1;
  }
  if (a1 == 0xD000000000000024 && a2 == 0x80000001C2501BD0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 2;
  }
  if (a1 == 0xD000000000000018 && a2 == 0x80000001C2501C00
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 3;
  }
  if (a1 == 0xD000000000000014 && a2 == 0x80000001C2501C20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    return 4;
  }
  else
  {
    return 0;
  }
}

uint64_t destroy for PommesSearchRequest(uint64_t a1, int *a2)
{
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                + 64);
    v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
LABEL_9:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      goto LABEL_12;
    swift_bridgeObjectRelease();
    v5 = a1
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                + 48);
    swift_bridgeObjectRelease();
    v6 = v5 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    v7 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    goto LABEL_9;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = a1
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v13 = type metadata accessor for TCUMappedNLResponse();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
LABEL_12:
  swift_bridgeObjectRelease();
  v15 = a1 + a2[6];
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = a1 + a2[10];
  v19 = type metadata accessor for PommesContext();
  v20 = *(_QWORD *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  v21 = a1 + a2[11];
  v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  swift_release();
  v24 = a1 + a2[14];
  v25 = type metadata accessor for InputOrigin();
  v26 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PommesSearch.shouldHandleRequest(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  int v25;
  uint64_t (*v26)(_QWORD);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  uint64_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  NSObject *v64;
  os_log_type_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  NSObject *v69;
  os_log_type_t v70;
  uint8_t *v71;
  uint32_t v72;
  double v73;
  uint64_t v74;
  uint64_t v75;
  os_log_type_t v76;
  uint64_t v77;
  uint64_t v78;
  NSObject *v79;
  os_log_type_t v80;
  uint8_t *v81;
  uint64_t v83;
  NSObject *v84;
  os_log_type_t v85;
  uint8_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96[3];
  uint64_t v97;
  uint64_t v98;

  v3 = v2;
  v94 = a2;
  v91 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v91);
  v6 = (char *)&v91 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v91 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v91 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = (int *)type metadata accessor for PommesSearchRequest(0);
  v14 = MEMORY[0x1E0C80A78](v13);
  v92 = (uint64_t)&v91 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v91 - v17;
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)&v91 - v20;
  v22 = MEMORY[0x1E0C80A78](v19);
  v24 = (char *)&v91 - v23;
  v25 = *(unsigned __int8 *)(a1 + *(int *)(v22 + 80));
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)&v91 - v23, v26);
  if (v25 != 1)
  {
    v28 = outlined destroy of PommesSearchRequest((uint64_t)v24, type metadata accessor for PommesSearchRequest);
LABEL_9:
    v93 = 0xD000000000000012;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v3 + 152))(v96, v28);
    v34 = v97;
    v35 = v98;
    __swift_project_boxed_opaque_existential_1(v96, v97);
    v36 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v35 + 8))(0, v34, v35);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v96);
    outlined init with copy of PommesSearchRequest(a1, (uint64_t)v21, type metadata accessor for PommesSearchRequest);
    if ((v36 & 1) != 0)
    {
      v37 = *(_QWORD *)(PommesSearchRequest.otherSalientParses()() + 16);
      swift_bridgeObjectRelease();
      outlined destroy of PommesSearchRequest((uint64_t)v21, type metadata accessor for PommesSearchRequest);
      v38 = (uint64_t)v12;
      if (v37)
      {
        outlined init with copy of PommesSearchRequest(a1, (uint64_t)v18, type metadata accessor for PommesSearchRequest);
        outlined destroy of PommesSearchRequest((uint64_t)v18, type metadata accessor for PommesSearchRequest);
LABEL_18:
        if (one-time initialization token for pommes != -1)
          swift_once();
        v48 = type metadata accessor for Logger();
        __swift_project_value_buffer(v48, (uint64_t)static Logger.pommes);
        v49 = Logger.logObject.getter();
        v50 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v49, v50))
        {
          v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v51 = 0;
          _os_log_impl(&dword_1C2356000, v49, v50, "NL server fallback is enabled, or there are other salient parses available. POMMES will not act as fallback.", v51, 2u);
          MEMORY[0x1C3BBFF64](v51, -1, -1);
        }

        v52 = type metadata accessor for PommesSearchReason();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 56))(v38, 1, 1, v52);
        v47 = "Rejecting request.";
        goto LABEL_28;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
      v54 = Logger.logObject.getter();
      v55 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v56 = 0;
        _os_log_impl(&dword_1C2356000, v54, v55, "NL server fallback is disabled and there are no other salient parses. POMMES may act as fallback.", v56, 2u);
        MEMORY[0x1C3BBFF64](v56, -1, -1);
      }

      v57 = *MEMORY[0x1E0D98908];
      v58 = type metadata accessor for PommesSearchReason();
      v59 = *(_QWORD *)(v58 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v59 + 104))(v12, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v12, 0, 1, v58);
      v93 = 0xD000000000000028;
      v47 = "Accepting anyway due to POMMES fallback.";
    }
    else
    {
      outlined destroy of PommesSearchRequest((uint64_t)v21, type metadata accessor for PommesSearchRequest);
      outlined init with copy of PommesSearchRequest(a1, (uint64_t)v18, type metadata accessor for PommesSearchRequest);
      v39 = v18[v13[17]];
      outlined destroy of PommesSearchRequest((uint64_t)v18, type metadata accessor for PommesSearchRequest);
      v38 = (uint64_t)v12;
      if ((v39 & 1) == 0)
        goto LABEL_18;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v40 = type metadata accessor for Logger();
      __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_1C2356000, v41, v42, "NL server fallback is enabled, or there are other salient parses available. POMMES may act as fallback for the head gesture initiated search.", v43, 2u);
        MEMORY[0x1C3BBFF64](v43, -1, -1);
      }

      v44 = *MEMORY[0x1E0D98920];
      v45 = type metadata accessor for PommesSearchReason();
      v46 = *(_QWORD *)(v45 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v46 + 104))(v12, v44, v45);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v12, 0, 1, v45);
      v93 = 0xD000000000000047;
      v47 = "Accepting anyway due to POMMES fallback for head gestures based search.";
    }
LABEL_28:
    v60 = (unint64_t)(v47 - 32) | 0x8000000000000000;
    outlined init with copy of MediaUserStateCenter?(a1 + v13[11], (uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    v61 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v62 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 48))(v9, 1, v61);
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    if (v62 == 1)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v63 = type metadata accessor for Logger();
      __swift_project_value_buffer(v63, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain();
      v64 = Logger.logObject.getter();
      v65 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v65))
      {
        v66 = swift_slowAlloc();
        v67 = swift_slowAlloc();
        v96[0] = v67;
        *(_DWORD *)v66 = 136446210;
        swift_bridgeObjectRetain();
        v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v60, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v68 = "No delegatedUDA from PSC parsers. %{public}s";
        v69 = v64;
        v70 = v65;
        v71 = (uint8_t *)v66;
        v72 = 12;
LABEL_38:
        _os_log_impl(&dword_1C2356000, v69, v70, v68, v71, v72);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v67, -1, -1);
        MEMORY[0x1C3BBFF64](v66, -1, -1);

        return outlined init with take of PommesSearchReason?(v38, v94, &demangling cache variable for type metadata for PommesSearchReason?);
      }
    }
    else
    {
      v73 = *(double *)(a1 + v13[12]);
      if (specialized static PommesSearchRequest.pommesDUDAThreshold.getter() <= v73)
      {
        swift_bridgeObjectRelease();
        outlined init with copy of PommesSearchRequest(a1, (uint64_t)v6, type metadata accessor for PommesSearchRequest.ParseState);
        if (swift_getEnumCaseMultiPayload() == 2)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v77 = (uint64_t)&v6[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                                    + 64)];
          swift_bridgeObjectRelease();
          outlined destroy of MediaUserStateCenter?(v77, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
          if (one-time initialization token for pommes != -1)
            swift_once();
          v78 = type metadata accessor for Logger();
          __swift_project_value_buffer(v78, (uint64_t)static Logger.pommes);
          v79 = Logger.logObject.getter();
          v80 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v79, v80))
          {
            v81 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v81 = 0;
            _os_log_impl(&dword_1C2356000, v79, v80, "Found PSC parse with high confidence from SARDRunPommesRequest. Accepting search for POMMES.", v81, 2u);
            MEMORY[0x1C3BBFF64](v81, -1, -1);
          }

          outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for PommesSearchReason?);
          v33 = (unsigned int *)MEMORY[0x1E0D988F8];
        }
        else
        {
          outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesSearchRequest.ParseState);
          if (one-time initialization token for pommes != -1)
            swift_once();
          v83 = type metadata accessor for Logger();
          __swift_project_value_buffer(v83, (uint64_t)static Logger.pommes);
          v84 = Logger.logObject.getter();
          v85 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v84, v85))
          {
            v86 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v86 = 0;
            _os_log_impl(&dword_1C2356000, v84, v85, "Found PSC parse with high confidence. Accepting search for POMMES.", v86, 2u);
            MEMORY[0x1C3BBFF64](v86, -1, -1);
          }

          outlined destroy of MediaUserStateCenter?(v38, &demangling cache variable for type metadata for PommesSearchReason?);
          v33 = (unsigned int *)MEMORY[0x1E0D98900];
        }
        goto LABEL_53;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v74 = type metadata accessor for Logger();
      __swift_project_value_buffer(v74, (uint64_t)static Logger.pommes);
      v75 = v92;
      outlined init with copy of PommesSearchRequest(a1, v92, type metadata accessor for PommesSearchRequest);
      swift_bridgeObjectRetain();
      v64 = Logger.logObject.getter();
      v76 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v64, v76))
      {
        v66 = swift_slowAlloc();
        v67 = swift_slowAlloc();
        v96[0] = v67;
        *(_DWORD *)v66 = 134218242;
        v95 = *(_QWORD *)(v75 + v13[12]);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        outlined destroy of PommesSearchRequest(v75, type metadata accessor for PommesSearchRequest);
        *(_WORD *)(v66 + 12) = 2082;
        swift_bridgeObjectRetain();
        v95 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v60, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v68 = "Low PSC score: %f. %{public}s";
        v69 = v64;
        v70 = v76;
        v71 = (uint8_t *)v66;
        v72 = 22;
        goto LABEL_38;
      }
      outlined destroy of PommesSearchRequest(v75, type metadata accessor for PommesSearchRequest);
    }

    swift_bridgeObjectRelease_n();
    return outlined init with take of PommesSearchReason?(v38, v94, &demangling cache variable for type metadata for PommesSearchReason?);
  }
  v27 = *(_QWORD *)(PommesSearchRequest.userParses.getter() + 16);
  swift_bridgeObjectRelease();
  v28 = outlined destroy of PommesSearchRequest((uint64_t)v24, type metadata accessor for PommesSearchRequest);
  if (!v27)
    goto LABEL_9;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v29 = type metadata accessor for Logger();
  __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
  v30 = Logger.logObject.getter();
  v31 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v30, v31))
  {
    v32 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v32 = 0;
    _os_log_impl(&dword_1C2356000, v30, v31, "Search request specified fallback and had any parse. Handle it in POMMES.", v32, 2u);
    MEMORY[0x1C3BBFF64](v32, -1, -1);
  }

  v33 = (unsigned int *)MEMORY[0x1E0D98910];
LABEL_53:
  v87 = *v33;
  v88 = type metadata accessor for PommesSearchReason();
  v89 = *(_QWORD *)(v88 - 8);
  v90 = v94;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v89 + 104))(v94, v87, v88);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v89 + 56))(v90, 0, 1, v88);
}

uint64_t outlined init with take of PommesSearchReason?(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t lazy protocol witness table accessor for type String and conformance String()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEA9B8], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEA980], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type String and conformance String;
  if (!lazy protocol witness table cache variable for type String and conformance String)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEFF48], MEMORY[0x1E0DEA968]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type String and conformance String);
  }
  return result;
}

uint64_t PommesSearchRequest.otherSalientParses()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(_QWORD);
  int EnumCaseMultiPayload;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t result;
  char *v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  unint64_t v42;
  void (*v43)(char *, uint64_t);
  unint64_t v44;
  void (*v45)(char *, unint64_t, uint64_t);
  char *v46;
  char *v47;
  uint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  char v54;
  void (*v55)(char *, uint64_t);
  char *v56;
  double v57;
  double v58;
  void (*v59)(char *, char *, uint64_t);
  uint64_t v60;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;

  v1 = v0;
  v70 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v76 = *(_QWORD *)(v70 - 8);
  v2 = MEMORY[0x1E0C80A78](v70);
  v75 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v2);
  v74 = (char *)&v64 - v4;
  v5 = type metadata accessor for Siri_Nlu_External_Parser();
  v72 = *(_QWORD *)(v5 - 8);
  v73 = v5;
  MEMORY[0x1E0C80A78](v5);
  v71 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UserParse();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v65 = (char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v64 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v64 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v64 - v20;
  v22 = type metadata accessor for NLXResultCandidate();
  MEMORY[0x1E0C80A78](v22);
  v24 = (uint64_t *)((char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v25);
  v27 = (char *)&v64 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of PommesSearchRequest(v1, (uint64_t)v27, v28);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v30 = MEMORY[0x1E0DEE9D8];
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?));
      outlined init with take of PommesSearchReason?((uint64_t)&v27[*(int *)(v31 + 64)], (uint64_t)v21, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      outlined init with copy of MediaUserStateCenter?((uint64_t)v21, (uint64_t)v19, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v32 = type metadata accessor for TCUMappedNLResponse();
      v33 = (uint64_t)v19;
      v34 = *(_QWORD *)(v32 - 8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48))(v33, 1, v32) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v33, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
        v35 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        v41 = (void *)TCUMappedNLResponse.nlResponse.getter();
        (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v32);
        v35 = NLParseResponse.userParses.getter();

      }
      v39 = (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?;
      v40 = (uint64_t)v21;
    }
    else
    {
      swift_bridgeObjectRelease();
      v35 = *((_QWORD *)v27 + 2);
      v38 = &v27[*(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                        + 64)];
      swift_bridgeObjectRelease();
      v39 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
      v40 = (uint64_t)v38;
    }
    result = outlined destroy of MediaUserStateCenter?(v40, v39);
  }
  else
  {
    swift_bridgeObjectRelease();
    v36 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined init with take of PerformanceUtil.Ticket((uint64_t)&v27[*(int *)(v36 + 48)], (uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
    v35 = *v24;
    swift_bridgeObjectRetain();
    result = outlined destroy of PommesSearchRequest((uint64_t)v24, (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  v79 = v30;
  v69 = *(_QWORD *)(v35 + 16);
  if (!v69)
  {
LABEL_23:
    swift_bridgeObjectRelease();
    return v79;
  }
  v42 = 0;
  v68 = *MEMORY[0x1E0D9F100];
  v66 = v8;
  v67 = v35;
  while (v42 < *(_QWORD *)(v35 + 16))
  {
    v44 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    v77 = *(_QWORD *)(v8 + 72);
    v78 = v44;
    v45 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
    v45(v15, v35 + v44 + v77 * v42, v7);
    v46 = v71;
    Siri_Nlu_External_UserParse.parser.getter();
    v47 = v74;
    Siri_Nlu_External_Parser.parserID.getter();
    (*(void (**)(char *, uint64_t))(v72 + 8))(v46, v73);
    v48 = v76;
    v49 = v15;
    v50 = v13;
    v51 = v7;
    v52 = v75;
    v53 = v70;
    (*(void (**)(char *, _QWORD, uint64_t))(v76 + 104))(v75, v68, v70);
    lazy protocol witness table accessor for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, MEMORY[0x1E0D9F170]);
    v54 = dispatch thunk of static Equatable.== infix(_:_:)();
    v55 = *(void (**)(char *, uint64_t))(v48 + 8);
    v56 = v52;
    v7 = v51;
    v13 = v50;
    v15 = v49;
    v55(v56, v53);
    v55(v47, v53);
    v45(v13, (unint64_t)v49, v7);
    if ((v54 & 1) != 0)
    {
      v8 = v66;
      v43 = *(void (**)(char *, uint64_t))(v66 + 8);
      v43(v13, v7);
    }
    else
    {
      Siri_Nlu_External_UserParse.comparableProbability.getter();
      v58 = v57;
      v8 = v66;
      v43 = *(void (**)(char *, uint64_t))(v66 + 8);
      v43(v13, v7);
      if (v58 > 0.05)
      {
        v59 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
        v59(v65, v15, v7);
        v60 = v79;
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v35 = v67;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v60 + 16) + 1, 1);
          v60 = v79;
        }
        v63 = *(_QWORD *)(v60 + 16);
        v62 = *(_QWORD *)(v60 + 24);
        if (v63 >= v62 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v62 > 1, v63 + 1, 1);
          v60 = v79;
        }
        *(_QWORD *)(v60 + 16) = v63 + 1;
        result = ((uint64_t (*)(unint64_t, char *, uint64_t))v59)(v60 + v78 + v63 * v77, v65, v7);
        v79 = v60;
        goto LABEL_14;
      }
    }
    result = ((uint64_t (*)(char *, uint64_t))v43)(v49, v7);
    v35 = v67;
LABEL_14:
    if (v69 == ++v42)
      goto LABEL_23;
  }
  __break(1u);
  return result;
}

uint64_t initializeWithCopy for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 16))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  return a1;
}

uint64_t outlined init with take of PerformanceUtil.Ticket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for OS_dispatch_queue()
{
  unint64_t result;

  result = lazy cache variable for type metadata for OS_dispatch_queue;
  if (!lazy cache variable for type metadata for OS_dispatch_queue)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  }
  return result;
}

uint64_t type metadata accessor for CNContactStore(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_3(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_6(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_7(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_9(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_11(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_12(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_13(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_14(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_15(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_16(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_17(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_18(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_19(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_20(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_21(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_22(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_copy_helper_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF38], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _sSay8Dispatch0A13WorkItemFlagsVGSayxGSTsWlTm_0(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BBFE74](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A];
  if (!lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A]);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable () -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  v2 = swift_retain();
  v1(v2);
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError;
  if (!lazy protocol witness table cache variable for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesSearchRequestProcessorError, &type metadata for PommesSearchRequestProcessorError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError);
  }
  return result;
}

uint64_t OSSignposter.end(token:message:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char v14;
  NSObject *v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  const char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  os_signpost_id_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  const char *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;

  v36 = a2;
  v34 = type metadata accessor for OSSignpostError();
  v5 = *(_QWORD *)(v34 - 8);
  MEMORY[0x1E0C80A78](v34);
  v7 = (char *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for OSSignpostID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v33 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v31 - v12;
  v37 = *(const char **)a1;
  v14 = *(_BYTE *)(a1 + 16);
  type metadata accessor for SignpostToken();
  swift_bridgeObjectRetain_n();
  v15 = OSSignposter.logHandle.getter();
  OSSignpostIntervalState.signpostID.getter();
  v35 = static os_signpost_type_t.end.getter();
  if ((OS_os_log.signpostsEnabled.getter() & 1) == 0)
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
  }
  v32 = a3;
  if ((v14 & 1) != 0)
  {
    if ((unint64_t)v37 >> 32)
    {
      __break(1u);
    }
    else
    {
      if (v37 >> 11 == 27)
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      if (v37 >> 16 <= 0x10)
      {
        v16 = v9;
        v37 = &v40;
        goto LABEL_10;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  if (!v37)
  {
LABEL_18:
    result = swift_bridgeObjectRelease_n();
    __break(1u);
    return result;
  }
  v16 = v9;
LABEL_10:
  swift_retain();
  checkForErrorAndConsumeState(state:)();
  swift_release();
  v18 = v34;
  v19 = v8;
  if ((*(unsigned int (**)(char *, uint64_t))(v5 + 88))(v7, v34) == *MEMORY[0x1E0DF2190])
  {
    v20 = 0;
    v21 = 0;
    v22 = "[Error] Interval already ended";
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v18);
    v22 = "%s";
    v21 = 2;
    v20 = 1;
  }
  v23 = v33;
  v24 = v13;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v33, v13, v19);
  v25 = swift_slowAlloc();
  v26 = swift_slowAlloc();
  v39 = v26;
  *(_BYTE *)v25 = v21;
  *(_BYTE *)(v25 + 1) = v20;
  *(_WORD *)(v25 + 2) = 2080;
  v27 = v16;
  v28 = v32;
  swift_bridgeObjectRetain();
  v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v28, &v39);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  v29 = OSSignpostID.rawValue.getter();
  _os_signpost_emit_with_name_impl(&dword_1C2356000, v15, (os_signpost_type_t)v35, v29, v37, v22, (uint8_t *)v25, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v26, -1, -1);
  MEMORY[0x1C3BBFF64](v25, -1, -1);

  v30 = *(void (**)(char *, uint64_t))(v27 + 8);
  v30(v24, v19);
  return ((uint64_t (*)(char *, uint64_t))v30)(v23, v19);
}

uint64_t type metadata accessor for PommesSearchError(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, type metadata singleton initialization cache for PommesSearchError);
}

id outlined copy of Result<PommesResponse, Error>(id a1)
{
  return a1;
}

uint64_t PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  void (*v72)(char *, uint64_t, uint64_t);
  NSObject *v73;
  void (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  void (*v79)(uint64_t, char *, uint64_t);
  uint64_t v80;
  void *v81;
  char isEscapingClosureAtFileLocation;
  uint64_t v83;
  uint64_t (*v84)(uint64_t, uint64_t, int *);
  unsigned int v85;
  _QWORD *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  _QWORD *v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void (*v101)(char *, uint64_t, uint64_t);
  uint64_t v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  void *v120;
  uint64_t v121;
  _QWORD *v122;
  uint64_t v123;
  void **v124;
  uint64_t v125;
  unsigned int (*v126)(void **, uint64_t, uint64_t);
  id v127;
  uint64_t v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  void *v142;
  id v143;
  id v144;
  char *v145;
  uint64_t v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  uint64_t v152;
  id v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  id *v160;
  uint64_t v161;
  id v162;
  uint64_t v163;
  id v164;
  uint64_t v165;
  char *v166;
  char **v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  char *v172;
  uint64_t v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  int v177;
  char *v178;
  char *v179;
  uint64_t v180;
  uint64_t v181;
  void (*v182)(char *, char *, uint64_t);
  char *v183;
  uint64_t v184;
  NSObject *v185;
  os_log_type_t v186;
  uint64_t v187;
  uint8_t *v188;
  uint64_t v189;
  unint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint8_t *v194;
  _QWORD *v195;
  char *v196;
  char *v197;
  char *v198;
  uint64_t v199;
  int *v200;
  void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  uint64_t v214;
  char *v215;
  NSObject *v216;
  os_log_type_t v217;
  uint64_t v218;
  uint8_t *v219;
  uint64_t v220;
  uint64_t v221;
  unint64_t v222;
  uint64_t v223;
  char *v224;
  void *v225;
  void (*v226)(char *, uint64_t);
  int *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  void (*v232)(char *, char *, uint64_t);
  NSObject *v233;
  os_log_type_t v234;
  _BOOL4 v235;
  uint8_t *v236;
  uint64_t v237;
  unint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  NSObject *v243;
  os_log_type_t v244;
  uint8_t *v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  NSObject *v252;
  os_log_type_t v253;
  void *v254;
  uint8_t *v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint8_t *v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  char *v264;
  uint64_t v265;
  void (*v266)(char *, char *, uint64_t);
  char *v267;
  uint64_t v268;
  char *v269;
  NSObject *v270;
  os_log_type_t v271;
  uint8_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  uint64_t v278;
  _QWORD *v279;
  uint64_t v280;
  void (*v281)(char *, char *, uint64_t);
  NSObject *v282;
  os_log_type_t v283;
  uint8_t *v284;
  uint64_t v285;
  char *v286;
  uint64_t v287;
  unint64_t v288;
  uint64_t v289;
  _QWORD *v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t (*v297)(uint64_t, uint64_t, char *);
  id v298;
  char *v299;
  char *v300;
  uint64_t v301;
  NSObject *v302;
  os_log_type_t v303;
  uint8_t *v304;
  char *v306;
  uint64_t v307;
  uint64_t v308;
  NSObject *v309;
  os_log_type_t v310;
  uint8_t *v311;
  char *v312;
  NSObject *v313;
  os_log_type_t v314;
  uint8_t *v315;
  uint64_t v316;
  char *v317;
  char *v318;
  char *v319;
  uint64_t v320;
  uint64_t v321;
  _QWORD *v322;
  uint64_t v323;
  char *v324;
  uint64_t v325;
  char *v326;
  char *v327;
  uint64_t v328;
  uint64_t v329;
  char *v330;
  id *v331;
  uint64_t v332;
  char *v333;
  char *v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  uint64_t v340;
  _QWORD *v341;
  char *v342;
  _QWORD *v343;
  void **v344;
  int v345;
  uint64_t v346;
  _QWORD *v347;
  _QWORD *v348;
  char **v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t *v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  char *v358;
  uint64_t v359;
  void *v360;
  char *v361;
  int *v362;
  uint64_t v363;
  void (*v364)(unint64_t, char *, uint64_t);
  char *v365;
  char *v366;
  uint64_t v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  void (*v374)(char *, uint64_t, uint64_t);
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  char *v378;
  uint64_t v379;
  uint64_t aBlock[3];
  void *v381;
  uint64_t (*v382)();
  uint64_t v383;
  char v384;

  v345 = a3;
  v346 = a2;
  v321 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
  MEMORY[0x1E0C80A78](v321);
  v322 = (uint64_t *)((char *)&v316 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v353 = type metadata accessor for PommesError();
  v351 = *(_QWORD *)(v353 - 8);
  v6 = MEMORY[0x1E0C80A78](v353);
  v317 = (char *)&v316 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v327 = (char *)&v316 - v8;
  v329 = type metadata accessor for UserID();
  v328 = *(_QWORD *)(v329 - 8);
  v9 = MEMORY[0x1E0C80A78](v329);
  v319 = (char *)&v316 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v334 = (char *)&v316 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v12);
  v352 = (uint64_t)&v316 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v372 = type metadata accessor for PommesSearchReason();
  v363 = *(_QWORD *)(v372 - 8);
  v14 = MEMORY[0x1E0C80A78](v372);
  v350 = (char *)&v316 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v318 = (char *)&v316 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v326 = (char *)&v316 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v330 = (char *)&v316 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v333 = (char *)&v316 - v23;
  v24 = MEMORY[0x1E0C80A78](v22);
  v324 = (char *)&v316 - v25;
  MEMORY[0x1E0C80A78](v24);
  v370 = (char *)&v316 - v26;
  v27 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  v28 = MEMORY[0x1E0C80A78](v27);
  v332 = (uint64_t)&v316 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v344 = (void **)((char *)&v316 - v30);
  v31 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  v336 = *(_QWORD *)(v31 - 8);
  v32 = MEMORY[0x1E0C80A78](v31);
  v338 = (uint64_t)&v316 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x1E0C80A78](v32);
  v323 = (uint64_t)&v316 - v35;
  v36 = MEMORY[0x1E0C80A78](v34);
  v325 = (uint64_t)&v316 - v37;
  v337 = v38;
  MEMORY[0x1E0C80A78](v36);
  v368 = (char *)&v316 - v39;
  v355 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
  v40 = MEMORY[0x1E0C80A78](v355);
  v348 = (uint64_t *)((char *)&v316 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0));
  v42 = MEMORY[0x1E0C80A78](v40);
  v331 = (id *)((char *)&v316 - v43);
  v44 = MEMORY[0x1E0C80A78](v42);
  v347 = (uint64_t *)((char *)&v316 - v45);
  v46 = MEMORY[0x1E0C80A78](v44);
  v343 = (uint64_t *)((char *)&v316 - v47);
  v48 = MEMORY[0x1E0C80A78](v46);
  v341 = (uint64_t *)((char *)&v316 - v49);
  MEMORY[0x1E0C80A78](v48);
  v354 = (uint64_t *)((char *)&v316 - v50);
  v367 = type metadata accessor for InsightRequestSummaryLogger();
  v369 = *(_QWORD *)(v367 - 8);
  MEMORY[0x1E0C80A78](v367);
  v366 = (char *)&v316 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for PommesCandidateId();
  v53 = *(_QWORD *)(v52 - 8);
  v54 = *(_QWORD *)(v53 + 64);
  v55 = MEMORY[0x1E0C80A78](v52);
  v342 = (char *)&v316 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = MEMORY[0x1E0C80A78](v55);
  v339 = (char *)&v316 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v349 = (char **)((char *)&v316 - v59);
  v60 = MEMORY[0x1E0C80A78](v58);
  v358 = (char *)&v316 - v61;
  MEMORY[0x1E0C80A78](v60);
  v63 = (char *)&v316 - v62;
  v64 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v65 = MEMORY[0x1E0C80A78](v64);
  v320 = (uint64_t)&v316 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = MEMORY[0x1E0C80A78](v65);
  v357 = (char *)&v316 - v68;
  MEMORY[0x1E0C80A78](v67);
  v70 = (char *)&v316 - v69;
  v71 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v356 = *(_QWORD *)(v71 - 8);
  v72 = *(void (**)(char *, uint64_t, uint64_t))(v356 + 56);
  v362 = (int *)v71;
  v72(v70, 1, 1);
  v384 = 0;
  v73 = RequestProcessorBase.requestQueue.getter();
  v74 = *(void (**)(char *, uint64_t, uint64_t))(v53 + 16);
  v377 = a1;
  v374 = v74;
  v74(v63, a1, v52);
  v75 = *(unsigned __int8 *)(v53 + 80);
  v76 = (v75 + 24) & ~v75;
  v335 = v54;
  v340 = v75;
  v360 = (void *)(v76 + v54);
  v77 = (v76 + v54 + 7) & 0xFFFFFFFFFFFFFFF8;
  v359 = v75 | 7;
  v78 = swift_allocObject();
  *(_QWORD *)(v78 + 16) = v3;
  v361 = (char *)v76;
  v373 = v53;
  v79 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
  v365 = v63;
  v375 = v52;
  v79(v78 + v76, v63, v52);
  *(_QWORD *)(v78 + v77) = &v384;
  v378 = v70;
  *(_QWORD *)(v78 + ((v77 + 15) & 0xFFFFFFFFFFFFFFF8)) = v70;
  v80 = swift_allocObject();
  *(_QWORD *)(v80 + 16) = partial apply for closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:);
  *(_QWORD *)(v80 + 24) = v78;
  v371 = v78;
  v382 = partial apply for thunk for @callee_guaranteed () -> ();
  v383 = v80;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
  v381 = &block_descriptor_38;
  v81 = _Block_copy(aBlock);
  v376 = v3;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v73, v81);

  _Block_release(v81);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
LABEL_96:
    swift_once();
    goto LABEL_9;
  }
  v364 = (void (*)(unint64_t, char *, uint64_t))v79;
  if ((v384 & 1) != 0)
  {
    v83 = (uint64_t)v357;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v378, (uint64_t)v357, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    v84 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v356 + 48);
    v85 = v84(v83, 1, v362);
    outlined destroy of MediaUserStateCenter?(v83, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    v86 = &unk_1ED7DD000;
    if (v85 == 1)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v87 = type metadata accessor for Logger();
      __swift_project_value_buffer(v87, (uint64_t)static Logger.pommes);
      v88 = v342;
      v89 = v375;
      v374(v342, v377, v375);
      v90 = Logger.logObject.getter();
      v91 = static os_log_type_t.debug.getter();
      v92 = os_log_type_enabled(v90, v91);
      v93 = v376;
      if (v92)
      {
        v94 = (uint8_t *)swift_slowAlloc();
        v95 = swift_slowAlloc();
        aBlock[0] = v95;
        *(_DWORD *)v94 = 136315138;
        v96 = PommesCandidateId.description.getter();
        v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v96, v97, aBlock);
        v86 = (_QWORD *)&unk_1ED7DD000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v373 + 8))(v88, v89);
        _os_log_impl(&dword_1C2356000, v90, v91, "Not posting pommes message, no Pommes state for %s", v94, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v95, -1, -1);
        MEMORY[0x1C3BBFF64](v94, -1, -1);
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v373 + 8))(v88, v89);
      }

      v136 = *(_QWORD *)((char *)v93 + v86[180]);
      v137 = RequestProcessorBase.requestId.getter();
      v139 = v138;
      v140 = RequestProcessorBase.rootLevelRequestId.getter();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v136 + 144))(5, v377, v137, v139, v140, v141);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_19:
      v128 = (uint64_t)v378;
      goto LABEL_84;
    }
    v361 = (char *)v84;
    v109 = v345 & 1;
    v110 = v355;
    v111 = v354;
    v112 = (uint64_t)v354 + *(int *)(v355 + 48);
    v113 = *(_QWORD *)((char *)v376 + direct field offset for PommesBridgeRequestProcessor.instrumentationUtil);
    v114 = RequestProcessorBase.requestId.getter();
    v116 = v115;
    v117 = RequestProcessorBase.rootLevelRequestId.getter();
    v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v113 + 160))(v112, v377, v114, v116, v117, v118, v346, v109);
    swift_bridgeObjectRelease();
    v120 = (void *)v119;
    swift_bridgeObjectRelease();
    *v111 = v119;
    v121 = *(int *)(v110 + 48);
    v122 = v341;
    v123 = (uint64_t)v341 + v121;
    *v341 = v120;
    outlined init with copy of MediaUserStateCenter?(v112, (uint64_t)v122 + v121, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    v124 = v344;
    outlined init with take of PommesSearchReason?(v123, (uint64_t)v344, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    v125 = type metadata accessor for PommesSearchError(0);
    v126 = *(unsigned int (**)(void **, uint64_t, uint64_t))(*(_QWORD *)(v125 - 8) + 48);
    if (v126(v124, 1, v125) == 1)
    {
      v127 = v120;
      outlined destroy of MediaUserStateCenter?((uint64_t)v124, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v351 + 56))(v368, 1, 1, v353);
    }
    else
    {
      v142 = *v124;
      v143 = v120;
      v144 = v142;
      outlined destroy of PommesSearchRequest((uint64_t)v124, type metadata accessor for PommesSearchError);
      aBlock[0] = (uint64_t)v142;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v145 = v368;
      v146 = v353;
      v147 = swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v351 + 56))(v145, v147 ^ 1u, 1, v146);
    }
    v148 = v372;
    v149 = v363;
    v150 = *(int *)(v110 + 48);
    v151 = v343;
    v152 = (uint64_t)v343 + v150;
    *v343 = v120;
    outlined init with copy of MediaUserStateCenter?(v112, (uint64_t)v151 + v150, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    if (v120)
    {
      v153 = v120;
      v154 = v352;
      dispatch thunk of PommesResponse.searchReason.getter();

      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v149 + 56))(v154, 0, 1, v148);
      outlined destroy of MediaUserStateCenter?(v152, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?(v152, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      v154 = v352;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v149 + 56))(v352, 1, 1, v148);
    }
    v155 = v355;
    v156 = *(int *)(v355 + 48);
    v157 = (uint64_t)v347;
    v158 = (uint64_t)v347 + v156;
    *v347 = v120;
    outlined init with copy of MediaUserStateCenter?(v112, v157 + v156, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v149 + 48))(v154, 1, v148) == 1)
    {
      v159 = *(int *)(v155 + 48);
      v160 = v331;
      v161 = (uint64_t)v331 + v159;
      *v331 = v120;
      outlined init with copy of MediaUserStateCenter?(v158, (uint64_t)v160 + v159, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      v162 = v120;
      outlined destroy of MediaUserStateCenter?(v157, &demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));

      v163 = v332;
      outlined init with take of PommesSearchReason?(v161, v332, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
      if (v126((void **)v163, 1, v125) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v163, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
        (*(void (**)(char *, _QWORD, uint64_t))(v363 + 104))(v370, *MEMORY[0x1E0D98920], v372);
      }
      else
      {
        v169 = v163 + *(int *)(v125 + 20);
        v170 = v163;
        v171 = v363;
        v172 = v324;
        v173 = v372;
        (*(void (**)(char *, uint64_t, uint64_t))(v363 + 16))(v324, v169, v372);
        outlined destroy of PommesSearchRequest(v170, type metadata accessor for PommesSearchError);
        (*(void (**)(char *, char *, uint64_t))(v171 + 32))(v370, v172, v173);
      }
      v165 = v373;
      v166 = v350;
      v167 = v349;
      v168 = v375;
      outlined destroy of MediaUserStateCenter?(v352, &demangling cache variable for type metadata for PommesSearchReason?);
    }
    else
    {
      v164 = v120;
      outlined destroy of MediaUserStateCenter?(v157, &demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
      (*(void (**)(char *, uint64_t, uint64_t))(v149 + 32))(v370, v154, v148);
      v165 = v373;
      v166 = v350;
      v167 = v349;
      v168 = v375;
    }
    v174 = *(int *)(v155 + 48);
    v175 = v348;
    v176 = (uint64_t)v348 + v174;
    *v348 = v120;
    outlined init with copy of MediaUserStateCenter?(v112, (uint64_t)v175 + v174, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    outlined destroy of MediaUserStateCenter?(v176, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    v374((char *)v167, v377, v168);
    v177 = (*(uint64_t (**)(char **, uint64_t))(v165 + 88))(v167, v168);
    if (v177 == *MEMORY[0x1E0D988C8])
    {
      (*(void (**)(char **, uint64_t))(v165 + 96))(v167, v168);
      v179 = *v167;
      v178 = v167[1];
      v128 = (uint64_t)v378;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v180 = type metadata accessor for Logger();
      __swift_project_value_buffer(v180, (uint64_t)static Logger.pommes);
      v181 = v363;
      v182 = *(void (**)(char *, char *, uint64_t))(v363 + 16);
      v183 = v333;
      v184 = v372;
      v182(v333, v370, v372);
      v185 = Logger.logObject.getter();
      v186 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v185, v186))
      {
        v361 = v179;
        v187 = swift_slowAlloc();
        v362 = (int *)v178;
        v188 = (uint8_t *)v187;
        v359 = swift_slowAlloc();
        aBlock[0] = v359;
        *(_DWORD *)v188 = 136315138;
        v182(v330, v183, v372);
        v189 = String.init<A>(describing:)();
        v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v189, v190, aBlock);
        v128 = (uint64_t)v378;
        v191 = v372;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v363 = *(_QWORD *)(v181 + 8);
        ((void (*)(char *, uint64_t))v363)(v183, v191);
        _os_log_impl(&dword_1C2356000, v185, v186, "Building POMMES result candidate message on rcId path with reason: %s", v188, 0xCu);
        v192 = v359;
        swift_arrayDestroy();
        v193 = (uint64_t)v368;
        MEMORY[0x1C3BBFF64](v192, -1, -1);
        v194 = v188;
        v178 = (char *)v362;
        v184 = v191;
        v179 = v361;
        MEMORY[0x1C3BBFF64](v194, -1, -1);

        v195 = v376;
      }
      else
      {
        v363 = *(_QWORD *)(v181 + 8);
        ((void (*)(char *, uint64_t))v363)(v183, v184);

        v195 = v376;
        v193 = (uint64_t)v368;
      }
      v201 = (void *)(*(uint64_t (**)(char *, char *, void *, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                        + *v195
                                                                                        + 520))(v179, v178, v120, v193, v370);
      swift_bridgeObjectRelease();
    }
    else
    {
      v128 = (uint64_t)v378;
      if (v177 == *MEMORY[0x1E0D988D0])
      {
        (*(void (**)(char **, uint64_t))(v165 + 96))(v167, v168);
        v197 = *v167;
        v196 = v167[1];
        v199 = (uint64_t)v167[2];
        v198 = v167[3];
        v200 = v362;
        if (((unsigned int (*)(uint64_t, uint64_t, int *))v361)(v128, 1, v362))
        {
          static UserID.defaultUserId.getter();
        }
        else
        {
          v246 = v128 + v200[5];
          v247 = v328;
          v248 = v319;
          v249 = v329;
          (*(void (**)(char *, uint64_t, uint64_t))(v328 + 16))(v319, v246, v329);
          (*(void (**)(char *, char *, uint64_t))(v247 + 32))(v334, v248, v249);
        }
        v250 = (uint64_t)v368;
        v358 = v197;
        v359 = v199;
        v361 = v198;
        v362 = (int *)v196;
        if (one-time initialization token for pommes != -1)
          swift_once();
        v251 = type metadata accessor for Logger();
        __swift_project_value_buffer(v251, (uint64_t)static Logger.pommes);
        swift_retain_n();
        v252 = Logger.logObject.getter();
        v253 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v252, v253))
        {
          v254 = v120;
          v255 = (uint8_t *)swift_slowAlloc();
          v256 = swift_slowAlloc();
          aBlock[0] = v256;
          *(_DWORD *)v255 = 136315138;
          v257 = RequestProcessorBase.requestId.getter();
          v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v257, v258, aBlock);
          v250 = (uint64_t)v368;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2356000, v252, v253, "No userId in prState, falling back to defaultUserId for request %s", v255, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v256, -1, -1);
          v259 = v255;
          v120 = v254;
          MEMORY[0x1C3BBFF64](v259, -1, -1);

        }
        else
        {

          swift_release_n();
        }
        v260 = v353;
        v261 = v325;
        outlined init with copy of MediaUserStateCenter?(v250, v325, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
        v262 = v351;
        v263 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v351 + 48))(v261, 1, v260);
        v264 = v326;
        if (v263 == 1)
        {
          outlined destroy of MediaUserStateCenter?(v261, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
          if (!v120)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v309 = Logger.logObject.getter();
            v310 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v309, v310))
            {
              v311 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v311 = 0;
              _os_log_impl(&dword_1C2356000, v309, v310, "No POMMES result or error! Not posting any message", v311, 2u);
              MEMORY[0x1C3BBFF64](v311, -1, -1);
            }

            (*(void (**)(char *, uint64_t))(v328 + 8))(v334, v329);
            (*(void (**)(char *, uint64_t))(v363 + 8))(v370, v372);
            outlined destroy of MediaUserStateCenter?((uint64_t)v354, &demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
            outlined destroy of MediaUserStateCenter?(v250, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
            goto LABEL_19;
          }
          v265 = v363;
          v266 = *(void (**)(char *, char *, uint64_t))(v363 + 16);
          v267 = v318;
          v268 = v372;
          v266(v318, v370, v372);
          v269 = v120;
          v270 = Logger.logObject.getter();
          v271 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v270, v271))
          {
            v272 = (uint8_t *)swift_slowAlloc();
            v273 = swift_slowAlloc();
            v357 = v269;
            v274 = v273;
            aBlock[0] = v273;
            v360 = v120;
            *(_DWORD *)v272 = 136315138;
            v266(v330, v267, v372);
            v275 = String.init<A>(describing:)();
            v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v275, v276, aBlock);
            v120 = v360;
            v277 = v372;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v363 = *(_QWORD *)(v265 + 8);
            ((void (*)(char *, uint64_t))v363)(v267, v277);
            _os_log_impl(&dword_1C2356000, v270, v271, "Building POMMES TRP candidate message on success path with reason: %s", v272, 0xCu);
            swift_arrayDestroy();
            v278 = v274;
            v269 = v357;
            MEMORY[0x1C3BBFF64](v278, -1, -1);
            v184 = v277;
            MEMORY[0x1C3BBFF64](v272, -1, -1);

            v128 = (uint64_t)v378;
            v279 = v376;
            v193 = (uint64_t)v368;
            v202 = v340;
          }
          else
          {
            v363 = *(_QWORD *)(v265 + 8);
            ((void (*)(char *, uint64_t))v363)(v267, v268);

            v128 = (uint64_t)v378;
            v279 = v376;
            v193 = (uint64_t)v368;
            v202 = v340;
            v184 = v268;
          }
          v312 = v334;
          v201 = (void *)(*(uint64_t (**)(char *, int *, uint64_t, char *, char *, char *, char *))(class metadata base offset for PommesBridgeRequestProcessor + *v279 + 544))(v358, v362, v359, v361, v269, v370, v334);

          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v328 + 8))(v312, v329);
          if (v201)
            goto LABEL_41;
        }
        else
        {
          (*(void (**)(char *, uint64_t, uint64_t))(v262 + 32))(v327, v261, v260);
          v280 = v363;
          v281 = *(void (**)(char *, char *, uint64_t))(v363 + 16);
          v184 = v372;
          v281(v264, v370, v372);
          v282 = Logger.logObject.getter();
          v283 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v282, v283))
          {
            v284 = (uint8_t *)swift_slowAlloc();
            v285 = swift_slowAlloc();
            aBlock[0] = v285;
            v360 = v120;
            *(_DWORD *)v284 = 136315138;
            v286 = v264;
            v281(v330, v264, v372);
            v287 = String.init<A>(describing:)();
            v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v287, v288, aBlock);
            v262 = v351;
            v120 = v360;
            v289 = v372;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v363 = *(_QWORD *)(v280 + 8);
            ((void (*)(char *, uint64_t))v363)(v286, v289);
            _os_log_impl(&dword_1C2356000, v282, v283, "Building POMMES TRP candidate message on error path with reason: %s", v284, 0xCu);
            swift_arrayDestroy();
            v193 = (uint64_t)v368;
            MEMORY[0x1C3BBFF64](v285, -1, -1);
            v184 = v289;
            MEMORY[0x1C3BBFF64](v284, -1, -1);

            v290 = v376;
            v202 = v340;
          }
          else
          {
            v363 = *(_QWORD *)(v280 + 8);
            ((void (*)(char *, uint64_t))v363)(v264, v184);

            v290 = v376;
            v202 = v340;
            v193 = (uint64_t)v368;
          }
          v299 = v327;
          v300 = v334;
          v201 = (void *)(*(uint64_t (**)(char *, int *, uint64_t, char *, char *, char *, char *))(class metadata base offset for PommesBridgeRequestProcessor + *v290 + 552))(v358, v362, v359, v361, v327, v370, v334);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, uint64_t))(v262 + 8))(v299, v353);
          (*(void (**)(char *, uint64_t))(v328 + 8))(v300, v329);
          v128 = (uint64_t)v378;
          if (v201)
            goto LABEL_41;
        }
LABEL_77:
        if (one-time initialization token for pommes != -1)
          swift_once();
        v301 = type metadata accessor for Logger();
        __swift_project_value_buffer(v301, (uint64_t)static Logger.pommes);
        v302 = Logger.logObject.getter();
        v303 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v302, v303))
        {
          v304 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v304 = 0;
          _os_log_impl(&dword_1C2356000, v302, v303, "Could not construct PommesResultCandidate message, builder function returned nil", v304, 2u);
          MEMORY[0x1C3BBFF64](v304, -1, -1);
        }

LABEL_82:
        ((void (*)(char *, uint64_t))v363)(v370, v184);
        outlined destroy of MediaUserStateCenter?((uint64_t)v354, &demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
        v228 = v193;
LABEL_83:
        outlined destroy of MediaUserStateCenter?(v228, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
        goto LABEL_84;
      }
      if (v177 != *MEMORY[0x1E0D988C0])
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v242 = type metadata accessor for Logger();
        __swift_project_value_buffer(v242, (uint64_t)static Logger.pommes);
        v243 = Logger.logObject.getter();
        v244 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v243, v244))
        {
          v245 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v245 = 0;
          _os_log_impl(&dword_1C2356000, v243, v244, "Unexpected pommesCandidateId. Not posting any message.", v245, 2u);
          MEMORY[0x1C3BBFF64](v245, -1, -1);
        }

        (*(void (**)(char *, uint64_t))(v363 + 8))(v370, v372);
        outlined destroy of MediaUserStateCenter?((uint64_t)v354, &demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
        (*(void (**)(char **, uint64_t))(v165 + 8))(v167, v168);
        v228 = (uint64_t)v368;
        goto LABEL_83;
      }
      (*(void (**)(char **, uint64_t))(v165 + 96))(v167, v168);
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1)
        swift_once();
      v229 = type metadata accessor for Logger();
      v230 = __swift_project_value_buffer(v229, (uint64_t)static Logger.pommes);
      v231 = v363;
      v232 = *(void (**)(char *, char *, uint64_t))(v363 + 16);
      v184 = v372;
      v232(v166, v370, v372);
      v362 = (int *)v230;
      v233 = Logger.logObject.getter();
      v234 = static os_log_type_t.debug.getter();
      v235 = os_log_type_enabled(v233, v234);
      v193 = (uint64_t)v368;
      if (v235)
      {
        v236 = (uint8_t *)swift_slowAlloc();
        v361 = (char *)swift_slowAlloc();
        aBlock[0] = (uint64_t)v361;
        *(_DWORD *)v236 = 136315138;
        v232(v330, v166, v372);
        v237 = String.init<A>(describing:)();
        v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v237, v238, aBlock);
        v239 = v372;
        v240 = v368;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v363 = *(_QWORD *)(v231 + 8);
        ((void (*)(char *, uint64_t))v363)(v166, v239);
        v184 = v239;
        v193 = (uint64_t)v240;
        _os_log_impl(&dword_1C2356000, v233, v234, "Building RunPommesResponseMessage with reason: %s", v236, 0xCu);
        v241 = v361;
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v241, -1, -1);
        MEMORY[0x1C3BBFF64](v236, -1, -1);
      }
      else
      {
        v363 = *(_QWORD *)(v231 + 8);
        ((void (*)(char *, uint64_t))v363)(v166, v184);
      }

      v291 = v323;
      outlined init with copy of MediaUserStateCenter?(v193, v323, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
      v292 = v351;
      v293 = v353;
      v294 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v351 + 48))(v291, 1, v353);
      v128 = (uint64_t)v378;
      if (v294 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v291, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
        if (!v120)
        {
          v313 = Logger.logObject.getter();
          v314 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v313, v314))
          {
            v315 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v315 = 0;
            _os_log_impl(&dword_1C2356000, v313, v314, "No POMMES result or error! Not posting any message", v315, 2u);
            MEMORY[0x1C3BBFF64](v315, -1, -1);
          }

          goto LABEL_82;
        }
        v295 = (uint64_t)v322;
        *v322 = v120;
        swift_storeEnumTagMultiPayload();
        v296 = v320;
        outlined init with copy of MediaUserStateCenter?(v128, v320, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        v297 = *(uint64_t (**)(uint64_t, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                  + *v376
                                                                  + 528);
        v298 = v120;
        v201 = (void *)v297(v295, v296, v370);
        outlined destroy of MediaUserStateCenter?(v296, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        outlined destroy of MediaUserStateCenter?(v295, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
      }
      else
      {
        v306 = v317;
        (*(void (**)(char *, uint64_t, uint64_t))(v292 + 32))(v317, v291, v293);
        v307 = (uint64_t)v322;
        (*(void (**)(_QWORD *, char *, uint64_t))(v292 + 16))(v322, v306, v293);
        swift_storeEnumTagMultiPayload();
        v308 = v320;
        outlined init with copy of MediaUserStateCenter?(v128, v320, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        v201 = (void *)(*(uint64_t (**)(uint64_t, uint64_t, char *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                           + *v376
                                                                           + 528))(v307, v308, v370);
        outlined destroy of MediaUserStateCenter?(v308, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
        outlined destroy of MediaUserStateCenter?(v307, &demangling cache variable for type metadata for Result<PommesResponse, PommesError>);
        (*(void (**)(char *, uint64_t))(v292 + 8))(v306, v293);
      }
    }
    v202 = v340;
    if (v201)
    {
LABEL_41:
      v360 = v120;
      v203 = one-time initialization token for insightRequestSummaryLogger;
      v362 = v201;
      if (v203 != -1)
        swift_once();
      v204 = v367;
      v205 = __swift_project_value_buffer(v367, (uint64_t)static Logger.insightRequestSummaryLogger);
      v206 = v366;
      (*(void (**)(char *, uint64_t, uint64_t))(v369 + 16))(v366, v205, v204);
      v207 = v193;
      v208 = v338;
      outlined init with copy of MediaUserStateCenter?(v207, v338, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
      v209 = v365;
      v210 = v375;
      v374(v365, v377, v375);
      v211 = (*(unsigned __int8 *)(v336 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v336 + 80);
      v212 = (v337 + v211 + 7) & 0xFFFFFFFFFFFFFFF8;
      v213 = swift_allocObject();
      outlined init with take of PommesSearchReason?(v208, v213 + v211, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
      *(_QWORD *)(v213 + v212) = v376;
      v364(v213 + ((v202 + v212 + 8) & ~v202), v209, v210);
      swift_retain();
      InsightRequestSummaryLogger.emitDebug(_:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v369 + 8))(v206, v204);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v214 = type metadata accessor for Logger();
      __swift_project_value_buffer(v214, (uint64_t)static Logger.pommes);
      v215 = v339;
      v374(v339, v377, v210);
      v216 = Logger.logObject.getter();
      v217 = static os_log_type_t.debug.getter();
      v218 = v210;
      if (os_log_type_enabled(v216, v217))
      {
        v219 = (uint8_t *)swift_slowAlloc();
        v220 = swift_slowAlloc();
        aBlock[0] = v220;
        *(_DWORD *)v219 = 136315138;
        v221 = PommesCandidateId.asResultCandidateId.getter();
        v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v221, v222, aBlock);
        v223 = v372;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v373 + 8))(v215, v218);
        _os_log_impl(&dword_1C2356000, v216, v217, "Posting pommes result candidate for %s", v219, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v220, -1, -1);
        MEMORY[0x1C3BBFF64](v219, -1, -1);

        v224 = v368;
        v225 = v360;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v373 + 8))(v215, v210);

        v224 = v368;
        v225 = v360;
        v223 = v372;
      }
      v128 = (uint64_t)v378;
      v226 = (void (*)(char *, uint64_t))v363;
      v227 = v362;
      RequestProcessorBase.messagePublisher.getter();
      __swift_project_boxed_opaque_existential_1(aBlock, (uint64_t)v381);
      dispatch thunk of MessagePublishing.postMessage(_:)();

      v226(v370, v223);
      outlined destroy of MediaUserStateCenter?((uint64_t)v354, &demangling cache variable for type metadata for (response: PommesResponse?, error: PommesSearchError?));
      __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
      v228 = (uint64_t)v224;
      goto LABEL_83;
    }
    goto LABEL_77;
  }
  if (one-time initialization token for pommes != -1)
    goto LABEL_96;
LABEL_9:
  v98 = type metadata accessor for Logger();
  __swift_project_value_buffer(v98, (uint64_t)static Logger.pommes);
  v99 = v358;
  v100 = v377;
  v101 = v374;
  v102 = v375;
  v374(v358, v377, v375);
  v103 = Logger.logObject.getter();
  v104 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v103, v104))
  {
    v105 = (uint8_t *)swift_slowAlloc();
    v106 = swift_slowAlloc();
    aBlock[0] = v106;
    *(_DWORD *)v105 = 136315138;
    v107 = PommesCandidateId.description.getter();
    v379 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v107, v108, aBlock);
    v102 = v375;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v373 + 8))(v99, v102);
    _os_log_impl(&dword_1C2356000, v103, v104, "Not posting pommes message, %s finished", v105, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v106, -1, -1);
    MEMORY[0x1C3BBFF64](v105, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v373 + 8))(v99, v102);
  }

  v128 = (uint64_t)v378;
  v129 = v376;
  if (one-time initialization token for insightRequestSummaryLogger != -1)
    swift_once();
  v130 = v367;
  v131 = __swift_project_value_buffer(v367, (uint64_t)static Logger.insightRequestSummaryLogger);
  v132 = v369;
  v133 = v366;
  (*(void (**)(char *, uint64_t, uint64_t))(v369 + 16))(v366, v131, v130);
  v134 = v365;
  v101(v365, v100, v102);
  v135 = swift_allocObject();
  *(_QWORD *)(v135 + 16) = v129;
  v364((unint64_t)&v361[v135], v134, v102);
  swift_retain();
  InsightRequestSummaryLogger.emitDebug(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v132 + 8))(v133, v130);
LABEL_84:
  outlined destroy of MediaUserStateCenter?(v128, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  return swift_release();
}

uint64_t thunk for @escaping @callee_guaranteed () -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for PommesCandidateId() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(*(_QWORD **)(v0 + 16), v0 + v2, *(_BYTE **)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t closure #1 in PommesBridgeRequestProcessor.searchCompletionHandler(pommesCandidateId:result:)(_QWORD *a1, uint64_t a2, _BYTE *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t result;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;

  v37 = a4;
  v41 = a3;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (shouldContinue: Bool, prState: PommesBridgeResultCandidateState?));
  v7 = MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v36 - v10;
  v12 = type metadata accessor for PommesCandidateId();
  v38 = *(_QWORD *)(v12 - 8);
  v39 = v12;
  v13 = *(_QWORD *)(v38 + 64);
  MEMORY[0x1E0C80A78](v12);
  v14 = type metadata accessor for InsightRequestSummaryLogger();
  v40 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *a1 + 96))(v15) & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v21 = 0;
      _os_log_impl(&dword_1C2356000, v19, v20, "Not posting pommes message, request finished", v21, 2u);
      MEMORY[0x1C3BBFF64](v21, -1, -1);
    }
    v22 = a1;

    v23 = a2;
    if (one-time initialization token for insightRequestSummaryLogger != -1)
      swift_once();
    v24 = __swift_project_value_buffer(v14, (uint64_t)static Logger.insightRequestSummaryLogger);
    v25 = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v17, v24, v14);
    v26 = v17;
    v27 = v38;
    v28 = v39;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))((char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v23, v39);
    v29 = (*(unsigned __int8 *)(v27 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v22;
    (*(void (**)(unint64_t, char *, uint64_t))(v27 + 32))(v30 + v29, (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v28);
    swift_retain();
    InsightRequestSummaryLogger.emitDebug(_:)();
    swift_release();
    result = (*(uint64_t (**)(char *, uint64_t))(v25 + 8))(v26, v14);
    *v41 = 0;
  }
  else
  {
    v32 = (uint64_t)&v11[*(int *)(v6 + 48)];
    v33 = PommesBridgeRequestProcessor.fetchAndUpdateState(_:)(v32, a2) & 1;
    *v11 = v33;
    v34 = (uint64_t)&v9[*(int *)(v6 + 48)];
    *v9 = v33;
    outlined init with copy of MediaUserStateCenter?(v32, v34, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    outlined assign with take of MediaUserStateCenter?(v34, v37, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    v35 = (uint64_t)&v9[*(int *)(v6 + 48)];
    *v9 = v33;
    outlined init with take of PommesSearchReason?(v32, v35, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
    *v41 = v33;
    return outlined destroy of MediaUserStateCenter?(v35, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  }
  return result;
}

uint64_t PommesBridgeRequestProcessor.isRequestFinished.getter()
{
  uint64_t v0;
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)(v0 + direct field offset for PommesBridgeRequestProcessor.isRequestFinished);
  swift_beginAccess();
  return *v1;
}

uint64_t PommesBridgeRequestProcessor.fetchAndUpdateState(_:)(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD);
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _BYTE v35[32];

  v3 = v2;
  v34 = a1;
  v5 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v33 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v31 - v12;
  v14 = type metadata accessor for PommesBridgeResultCandidateState(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v2 + 120))(v16);
  v20 = *(_QWORD *)(v19 + 16);
  v32 = a2;
  if (v20 && (v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v22 & 1) != 0))
  {
    outlined init with copy of PommesSearchRequest(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v15 + 72) * v21, (uint64_t)v13, type metadata accessor for PommesBridgeResultCandidateState);
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v23(v13, 0, 1, v14);
  }
  else
  {
    v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
    v23(v13, 1, 1, v14);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesBridgeResultCandidateState?);
  }
  else
  {
    outlined init with take of PerformanceUtil.Ticket((uint64_t)v13, (uint64_t)v18, type metadata accessor for PommesBridgeResultCandidateState);
    v24 = *(int *)(v14 + 40);
    if (v18[v24] != 1)
    {
      v25 = 1;
      v18[v24] = 1;
      v28 = (uint64_t)v33;
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v33, v32, v5);
      outlined init with copy of PommesSearchRequest((uint64_t)v18, (uint64_t)v11, type metadata accessor for PommesBridgeResultCandidateState);
      v23(v11, 0, 1, v14);
      v29 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(class metadata base offset for PommesBridgeRequestProcessor
                                                                                     + *v3
                                                                                     + 136))(v35);
      specialized Dictionary.subscript.setter((uint64_t)v11, v28);
      v29(v35, 0);
      v27 = v34;
      outlined init with take of PerformanceUtil.Ticket((uint64_t)v18, v34, type metadata accessor for PommesBridgeResultCandidateState);
      v26 = 0;
      goto LABEL_11;
    }
    outlined destroy of PommesSearchRequest((uint64_t)v18, type metadata accessor for PommesBridgeResultCandidateState);
  }
  v25 = 0;
  v26 = 1;
  v27 = v34;
LABEL_11:
  v23((char *)v27, v26, 1, v14);
  return v25;
}

_QWORD *initializeWithCopy for PommesSearchError(_QWORD *a1, id *a2, uint64_t a3)
{
  id v6;
  id v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = *a2;
  *a1 = v6;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t storeEnumTagSinglePayload for PommesSearchError()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t outlined init with take of PommesSearchError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t getEnumTag for PommesSearchRequestProcessorError(_BYTE *a1)
{
  int v1;

  v1 = (char)*a1;
  if (v1 >= 0)
    return *a1 >> 6;
  else
    return (v1 & 7u) + 2;
}

ValueMetadata *type metadata accessor for PommesSearchRequestProcessorErrorFailureReason()
{
  return &type metadata for PommesSearchRequestProcessorErrorFailureReason;
}

_BYTE *destructiveProjectEnumData for PommesSearchRequestProcessorError(_BYTE *result)
{
  *result &= 0x3Fu;
  return result;
}

uint64_t getEnumTag for SearchError(unsigned __int8 *a1)
{
  return *a1;
}

unint64_t lazy protocol witness table accessor for type PommesError and conformance PommesError()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type PommesError and conformance PommesError;
  if (!lazy protocol witness table cache variable for type PommesError and conformance PommesError)
  {
    v1 = type metadata accessor for PommesError();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D9E858], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError);
  }
  return result;
}

uint64_t outlined destroy of PommesSearchError(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PommesSearchError(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t destroy for PommesSearchError(id *a1, uint64_t a2)
{
  char *v4;
  uint64_t v5;

  v4 = (char *)a1 + *(int *)(a2 + 20);
  v5 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t getEnumTagSinglePayload for PommesSearchError()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)()
{
  id v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v0 = objc_allocWithZone((Class)type metadata accessor for PommesResultCandidateMessage());
  v1 = PommesResultCandidateMessage.init(build:)();
  if (!v1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v5 = 0;
      _os_log_impl(&dword_1C2356000, v3, v4, "Could not construct PommesResultCandidate message, constructor failure", v5, 2u);
      MEMORY[0x1C3BBFF64](v5, -1, -1);
    }

  }
  return v1;
}

uint64_t partial apply for closure #1 in PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(void **)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t closure #1 in PommesBridgeRequestProcessor.buildCandidateMessage(_:pommesRes:error:searchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a6;
  v30 = a7;
  v27 = a3;
  v28 = a5;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesError?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MessageSource?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *MEMORY[0x1E0D9E658];
  v20 = type metadata accessor for MessageSource();
  v21 = *(_QWORD *)(v20 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 104))(v18, v19, v20);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  PommesResultCandidateMessage.Builder.source.setter();
  RequestProcessorBase.assistantId.getter();
  PommesResultCandidateMessage.Builder.assistantId.setter();
  RequestProcessorBase.sessionId.getter();
  v22 = type metadata accessor for UUID();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v15, 0, 1, v22);
  PommesResultCandidateMessage.Builder.sessionId.setter();
  RequestProcessorBase.requestId.getter();
  PommesResultCandidateMessage.Builder.requestId.setter();
  swift_bridgeObjectRetain();
  PommesResultCandidateMessage.Builder.resultCandidateId.setter();
  v23 = v28;
  PommesResultCandidateMessage.Builder.pommesResponse.setter();
  outlined init with copy of MediaUserStateCenter?(v29, (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for PommesError?);
  PommesResultCandidateMessage.Builder.error.setter();
  v24 = type metadata accessor for PommesSearchReason();
  v25 = *(_QWORD *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v9, v30, v24);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v9, 0, 1, v24);
  return PommesResultCandidateMessage.Builder.searchReason.setter();
}

void outlined consume of Result<PommesResponse, Error>(id a1)
{

}

uint64_t PommesSearch.logCompletionOfPommesRequest(requestId:pommesCandidateId:result:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  id v23;
  id v24;
  void *v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  id v30;
  id v31;
  id v32;
  int v33;
  void (*v34)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  id *v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void (*v46)(uint64_t, uint64_t, uint64_t, _QWORD, char *);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  id v50;
  void *v51;
  uint64_t v52;
  id *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  unsigned __int8 v58;
  id v59;

  v6 = v5;
  v56 = a3;
  v57 = a4;
  v54 = a1;
  v55 = a2;
  v8 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PommesSearchError(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (id *)((char *)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v15 = type metadata accessor for PommesSearchReason();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v52 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v52 - v20;
  if ((a5 & 1) == 0)
  {
    v22 = *(_QWORD *)(v6 + 64);
    v23 = v57;
    v24 = v57;
    v25 = PommesResponse.pommesRequestResult.getter();
    dispatch thunk of PommesResponse.searchReason.getter();
    v26 = PommesResponse.isHandledByPreflight.getter();
    v27 = PommesResponse.preflightClientHandlerIdentifier.getter();
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v22 + 136))(v54, v55, v56, v25, v21, v26 & 1, v27, v28);
    swift_bridgeObjectRelease();

    v29 = v23;
LABEL_9:
    outlined consume of Result<PommesResponse, Error>(v29);
    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v21, v15);
  }
  v53 = v14;
  v30 = v57;
  v59 = v57;
  v31 = v57;
  v32 = v30;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v33 = swift_dynamicCast();
  v34 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (!v33)
  {
    v34(v10, 1, 1, v11);
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
    v44 = *(_QWORD *)(v6 + 64);
    (*(void (**)(char *, _QWORD, uint64_t))(v16 + 104))(v21, *MEMORY[0x1E0D98920], v15);
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(*(_QWORD *)v44 + 144))(v54, v55, v56, 0, v21);
    v29 = v57;
    goto LABEL_9;
  }
  v34(v10, 0, 1, v11);
  v35 = (uint64_t)v10;
  v36 = v53;
  outlined init with take of PerformanceUtil.Ticket(v35, (uint64_t)v53, type metadata accessor for PommesSearchError);
  v37 = v16;
  v38 = v15;
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, (char *)v36 + *(int *)(v11 + 20), v15);
  v59 = *v36;
  v39 = v59;
  if (!swift_dynamicCast())
  {
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(**(_QWORD **)(v6 + 64) + 144);
    v47 = v54;
    v48 = v55;
    v49 = v56;
LABEL_11:
    v46(v47, v48, v49, 0, v19);
    goto LABEL_12;
  }
  v40 = v58 >> 6;
  v42 = v55;
  v41 = v56;
  v43 = v54;
  if (!v40)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v6 + 64) + 152))(v54, v55, v56);
    goto LABEL_12;
  }
  if (v40 != 1)
  {
    if (v58 != 128)
    {
      if (v58 == 129)
      {
        v50 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A308]), sel_init);
        v51 = v50;
        if (v50)
        {
          objc_msgSend(v50, sel_setPommesConfidenceScore_, 0.0);
          objc_msgSend(v51, sel_setPegasusDomain_, 0);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *, char *, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(v6 + 64)
                                                                                                  + 136))(v43, v42, v41, v51, v19, 0, 0, 0);

      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(**(_QWORD **)(v6 + 64) + 144))(v54, v55, v56, 3, v19);
      }
      goto LABEL_12;
    }
    v46 = *(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(**(_QWORD **)(v6 + 64) + 144);
    v47 = v54;
    v48 = v55;
    v49 = v56;
    goto LABEL_11;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, char *))(**(_QWORD **)(v6 + 64) + 144))(v54, v55, v56, dword_1C24FAD80[v58 & 0x3F], v19);
LABEL_12:
  outlined consume of Result<PommesResponse, Error>(v57);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v19, v38);
  return outlined destroy of PommesSearchRequest((uint64_t)v36, type metadata accessor for PommesSearchError);
}

void PommesRequestInstrumentationUtil.logFailedPommesRequest(requestId:pommesCandidateId:failedReason:pommesSearchReason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  void *v8;
  id v9;
  void *v10;
  id v11;
  void *v12;
  void *v13;
  id v14;
  char v15;
  id v16;
  uint64_t v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  NSObject *oslog;

  v5 = v4;
  v7 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)();
  if (v7)
  {
    v8 = (void *)v7;
    v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2F0]), sel_init);
    if (v9)
    {
      v10 = v9;
      v11 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A300]), sel_init);
      if (v11)
      {
        v12 = v11;
        objc_msgSend(v11, sel_setReason_, a4);
        objc_msgSend(v12, sel_setPommesSearchReason_, PommesSearchReason.toInt.getter());
        objc_msgSend(v10, sel_setFailed_, v12);
        objc_msgSend(v8, sel_setPommesRequestContext_, v10);
        v13 = (void *)objc_opt_self();
        swift_retain();
        v14 = objc_msgSend(v13, sel_processInfo);
        v15 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v15 & 1) != 0)
          v16 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 96))();
        else
          v16 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v20 = v16;
        swift_release();
        objc_msgSend(v20, sel_emitMessage_, v8);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v10 = v8;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v18 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v19 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v18, "Unable to log failed POMMES request", v19, 2u);
    MEMORY[0x1C3BBFF64](v19, -1, -1);
  }

}

uint64_t PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v7;

  v7 = AFIsInternalInstall();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v3 + 248))(a1, a2, a3, v7);
}

void PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  id v15;
  void *v16;
  uint64_t (*v17)(void);
  id v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  id v23;
  void *v24;
  double v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  id v31;
  uint64_t v32;
  void *v33;
  id v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  const char *v51;
  uint64_t v52;
  Class isa;
  uint64_t v54;
  id v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  id v61;
  id v62;
  void *v63;
  uint64_t v64;
  id v65;
  void *v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v5 = v4;
  v69 = type metadata accessor for PerformanceUtil.Measurement(0);
  v10 = *(_QWORD *)(v69 - 8);
  MEMORY[0x1E0C80A78](v69);
  v12 = (char *)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!specialized closure #1 in PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)(a4, v5))
  {
    if (one-time initialization token for pommes != -1)
      goto LABEL_35;
    goto LABEL_15;
  }
  v13 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
  if (v13)
  {
    v14 = v13;
    v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A208]), sel_init);
    v16 = *(void **)(v5 + 48);
    objc_msgSend(v16, sel_lock);
    if (v15)
    {
      v17 = *(uint64_t (**)(void))(*(_QWORD *)v5 + 152);
      v18 = v15;
      v19 = v17();
      v20 = MEMORY[0x1E0DEE9D8];
      v71 = MEMORY[0x1E0DEE9D8];
      v21 = *(_QWORD *)(v19 + 16);
      if (v21)
      {
        v65 = v18;
        v66 = v16;
        v67 = v14;
        v68 = v5;
        v22 = v19 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
        v70 = *(_QWORD *)(v10 + 72);
        v64 = v19;
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with copy of PommesSearchRequest(v22, (uint64_t)v12, type metadata accessor for PerformanceUtil.Measurement);
          v23 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A218]), sel_init);
          if (v23)
          {
            v24 = v23;
            Date.timeIntervalSinceReferenceDate.getter();
            objc_msgSend(v24, sel_setStartTimeIntervalSince2001InMs_, v25 * 1000.0);
            objc_msgSend(v24, sel_setDurationInMs_, *(double *)&v12[*(int *)(v69 + 20)]);
            v26 = type metadata accessor for PerformanceUtil.Ticket(0);
            v5 = v12[*(int *)(v26 + 20) + 16];
            v27 = v24;
            v28 = StaticString.description.getter();
            v29 = (void *)MEMORY[0x1C3BBEC44](v28);
            swift_bridgeObjectRelease();
            objc_msgSend(v27, sel_setFileId_, v29);

            v30 = *(_QWORD *)&v12[*(int *)(v26 + 24)];
            if (v30 < (uint64_t)0xFFFFFFFF80000000)
            {
              __break(1u);
LABEL_34:
              __break(1u);
LABEL_35:
              swift_once();
LABEL_15:
              v47 = type metadata accessor for Logger();
              __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
              v48 = Logger.logObject.getter();
              v49 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v48, v49))
              {
                v50 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v50 = 0;
                v51 = "Unable to emit PerformanceUtil measurements because this is a production build or this run has not"
                      " been selected in the subsample";
                goto LABEL_21;
              }
              goto LABEL_22;
            }
            if (v30 > 0x7FFFFFFF)
              goto LABEL_34;
            objc_msgSend(v27, sel_setLineNumber_);
            v31 = v27;
            v32 = StaticString.description.getter();
            v33 = (void *)MEMORY[0x1C3BBEC44](v32);
            swift_bridgeObjectRelease();
            objc_msgSend(v31, sel_setCallingFunction_, v33);

            v34 = v31;
            swift_bridgeObjectRetain();
            v35 = specialized Collection.prefix(_:)(100);
            v37 = v36;
            v39 = v38;
            v41 = v40;
            swift_bridgeObjectRelease();
            v42 = MEMORY[0x1C3BBECC8](v35, v37, v39, v41);
            v44 = v43;
            swift_bridgeObjectRelease();
            v45 = (void *)MEMORY[0x1C3BBEC44](v42, v44);
            swift_bridgeObjectRelease();
            objc_msgSend(v34, sel_setMeasurementLabel_, v45);

            v46 = outlined destroy of PommesSearchRequest((uint64_t)v12, type metadata accessor for PerformanceUtil.Measurement);
            MEMORY[0x1C3BBEE78](v46);
            if (*(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v71 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
              specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
            specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized Array._endMutation()();
          }
          else
          {
            outlined destroy of PommesSearchRequest((uint64_t)v12, type metadata accessor for PerformanceUtil.Measurement);
          }
          v22 += v70;
          if (!--v21)
          {
            swift_bridgeObjectRelease();
            v14 = v67;
            v5 = v68;
            v18 = v65;
            v16 = v66;
            v20 = MEMORY[0x1E0DEE9D8];
            break;
          }
        }
      }
      swift_bridgeObjectRelease();
      type metadata accessor for POMMESSchemaPOMMESFunctionPerformanceProfile();
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v18, sel_setPerformanceMeasurements_, isa);

      swift_beginAccess();
      *(_QWORD *)(v5 + 40) = v20;
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_unlock);
      v54 = one-time initialization token for pommes;
      v55 = v18;
      if (v54 != -1)
        swift_once();
      v56 = type metadata accessor for Logger();
      __swift_project_value_buffer(v56, (uint64_t)static Logger.pommes);
      v57 = Logger.logObject.getter();
      v58 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v57, v58))
      {
        v59 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v59 = 0;
        _os_log_impl(&dword_1C2356000, v57, v58, "Emitting POMMESSchemaPOMMESDebugPerformanceReported event", v59, 2u);
        MEMORY[0x1C3BBFF64](v59, -1, -1);
      }

      objc_msgSend(v14, sel_setPerformanceReported_, v55);
      v60 = objc_opt_self();
      swift_retain();
      v61 = objc_msgSend((id)v60, sel_processInfo);
      LOBYTE(v60) = NSProcessInfo.isRunningUnitTests.getter();

      if ((v60 & 1) != 0)
        v62 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v5 + 128))();
      else
        v62 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
      v63 = v62;
      swift_release();
      objc_msgSend(v63, sel_emitMessage_, v14);
      swift_unknownObjectRelease();

    }
    else
    {
      swift_beginAccess();
      *(_QWORD *)(v5 + 40) = MEMORY[0x1E0DEE9D8];
      swift_bridgeObjectRelease();
      objc_msgSend(v16, sel_unlock);

    }
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
    v48 = Logger.logObject.getter();
    v49 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v50 = 0;
      v51 = "Unable to emit PerformanceUtil measurements because of missing eventWrapper";
LABEL_21:
      _os_log_impl(&dword_1C2356000, v48, v49, v51, v50, 2u);
      MEMORY[0x1C3BBFF64](v50, -1, -1);
    }
LABEL_22:

    (*(void (**)(void))(*(_QWORD *)v5 + 224))();
  }
}

BOOL specialized closure #1 in PerformanceUtil.emitMeasurements(requestId:pommesCandidateId:isInternalInstall:)(char a1, uint64_t a2)
{
  void *v3;
  void *v4;
  void *v5;
  id v6;
  unsigned int v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _BOOL8 result;
  uint64_t v16;

  v3 = *(void **)(a2 + 16);
  v4 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000001CLL, 0x80000001C25068D0);
  v5 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000017, 0x80000001C2506820);
  v6 = objc_msgSend(v3, sel_levelForFactor_withNamespaceName_, v4, v5);

  if (v6)
  {
    v7 = objc_msgSend(v6, sel_BOOLeanValue);

  }
  else
  {
    v7 = 2;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v16 = v12;
    *(_DWORD *)v11 = 136315138;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Bool?);
    v13 = Optional.debugDescription.getter();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v9, v10, "trialClient.level for enable_performance_profiling? %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v12, -1, -1);
    MEMORY[0x1C3BBFF64](v11, -1, -1);
  }

  if (v7 == 2)
  {
    if ((a1 & 1) == 0)
      return 0;
  }
  else
  {
    result = v7 != 0;
    if ((a1 & 1) == 0)
      return result;
  }
  return 1;
}

uint64_t PerformanceUtil.measurements.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t specialized Collection.prefix(_:)(uint64_t result)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    String.index(_:offsetBy:limitedBy:)();
    return String.subscript.getter();
  }
  return result;
}

unint64_t type metadata accessor for POMMESSchemaPOMMESFunctionPerformanceProfile()
{
  unint64_t result;

  result = lazy cache variable for type metadata for POMMESSchemaPOMMESFunctionPerformanceProfile;
  if (!lazy cache variable for type metadata for POMMESSchemaPOMMESFunctionPerformanceProfile)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for POMMESSchemaPOMMESFunctionPerformanceProfile);
  }
  return result;
}

void specialized PommesSearch.runGeoPersonalizationShadowLogging(result:)(unint64_t a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  unint64_t v23;
  uint8_t *v24;
  uint8_t *v25;
  unint64_t v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  void (*v39)(char *);
  uint64_t v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  void *v58;
  void *v59;
  id v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  void *v69;
  _QWORD v70[5];

  v4 = type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v65 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v65 - v12;
  v70[3] = &type metadata for FeatureFlag;
  v70[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v14 = swift_allocObject();
  v70[0] = v14;
  *(_QWORD *)(v14 + 16) = 3;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  *(_QWORD *)(v14 + 40) = 0;
  *(_BYTE *)(v14 + 48) = 3;
  v15 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v70);
  if ((v15 & 1) == 0 || (a2 & 1) != 0)
    return;
  v66 = v8;
  (id)a1;
  v17 = PommesResponse.metadataDomainName.getter();
  v18 = v16;
  if (v17 == 1936744813 && v16 == 0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
    || v17 == 7300455 && v18 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      if (one-time initialization token for pommes != -1)
        goto LABEL_51;
      goto LABEL_40;
    }
  }
  if (one-time initialization token for pommes != -1)
    goto LABEL_44;
  while (1)
  {
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = a1;
      v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v24 = 0;
      _os_log_impl(&dword_1C2356000, v21, v22, "Shadow logging for geo personalization", v24, 2u);
      v25 = v24;
      a1 = v23;
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }

    v26 = dispatch thunk of PommesResponse.experiences.getter();
    if (v26 >> 62)
    {
      if (!_CocoaArrayWrapper.endIndex.getter())
      {
LABEL_46:
        swift_bridgeObjectRelease();
LABEL_47:
        outlined consume of Result<PommesResponse, Error>((id)a1);
        return;
      }
    }
    else if (!*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_46;
    }
    if ((v26 & 0xC000000000000001) == 0)
      break;
    v27 = (id)MEMORY[0x1C3BBF3F4](0, v26);
LABEL_19:
    v28 = v27;
    swift_bridgeObjectRelease();
    v29 = dispatch thunk of Experience.associatedEntities.getter();

    v30 = MEMORY[0x1E0DEE9D8];
    v69 = *(void **)(v29 + 16);
    v70[0] = MEMORY[0x1E0DEE9D8];
    v65 = a1;
    if (!v69)
    {
LABEL_33:
      swift_bridgeObjectRelease();
      v47 = *(_QWORD *)(v30 + 16);
      if (v47)
      {
        v70[0] = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        v48 = v30 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        v69 = *(void **)(v5 + 72);
        v49 = *(char **)(v5 + 16);
        v67 = v30;
        v68 = v49;
        v50 = v66;
        do
        {
          ((void (*)(char *, unint64_t, uint64_t))v68)(v50, v48, v4);
          v51 = Apple_Parsec_Siri_Context_ResultEntity.mapsEncryptedMuid.getter();
          v53 = v52;
          v54 = Apple_Parsec_Siri_Context_ResultEntity.name.getter();
          v56 = v55;
          v57 = objc_allocWithZone(MEMORY[0x1E0D3AAD0]);
          v58 = (void *)MEMORY[0x1C3BBEC44](v51, v53);
          swift_bridgeObjectRelease();
          v59 = (void *)MEMORY[0x1C3BBEC44](v54, v56);
          swift_bridgeObjectRelease();
          objc_msgSend(v57, sel_initWithMUID_name_, v58, v59);

          (*(void (**)(char *, uint64_t))(v5 + 8))(v50, v4);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          v48 += (unint64_t)v69;
          --v47;
        }
        while (v47);
        swift_release();
        a1 = v65;
      }
      else
      {
        swift_release();
      }
      v60 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D3AAD8]), sel_initWithVisitCountThreshold_lastVisitDaysThreshold_visitCountGivenLocationThreshold_entityRelevanceThreshold_enableEntityRelevance_, 0, 0.0, 1.79769313e308, 0.0, 0.0);
      IQFMapsPersonalizationRanker.rankedEvents(for:completion:)();
      swift_bridgeObjectRelease();

      goto LABEL_47;
    }
    a1 = 0;
    v67 = v29;
    v68 = v11;
    while (a1 < *(_QWORD *)(v29 + 16))
    {
      v31 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      v32 = *(_QWORD *)(v5 + 72);
      (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))(v13, v29 + v31 + v32 * a1, v4);
      v33 = Apple_Parsec_Siri_Context_ResultEntity.mapsEncryptedMuid.getter();
      v35 = v34;
      swift_bridgeObjectRelease();
      v36 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0)
        v36 = v33 & 0xFFFFFFFFFFFFLL;
      if (v36)
      {
        v37 = v13;
        v38 = v5;
        v39 = *(void (**)(char *))(v5 + 32);
        v40 = v4;
        v41 = v37;
        v42 = v40;
        v39(v11);
        v43 = v70[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v43 + 16) + 1, 1);
          v43 = v70[0];
        }
        v45 = *(_QWORD *)(v43 + 16);
        v44 = *(_QWORD *)(v43 + 24);
        if (v45 >= v44 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v44 > 1, v45 + 1, 1);
          v43 = v70[0];
        }
        *(_QWORD *)(v43 + 16) = v45 + 1;
        v46 = v43 + v31 + v45 * v32;
        v11 = v68;
        ((void (*)(unint64_t, char *, uint64_t))v39)(v46, v68, v42);
        v70[0] = v43;
        v13 = v41;
        v4 = v42;
        v5 = v38;
        v29 = v67;
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v13, v4);
      }
      if (v69 == (void *)++a1)
      {
        v30 = v70[0];
        a1 = v65;
        goto LABEL_33;
      }
    }
    __break(1u);
LABEL_44:
    swift_once();
  }
  if (*(_QWORD *)((v26 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v27 = *(id *)(v26 + 32);
    goto LABEL_19;
  }
  __break(1u);
LABEL_51:
  swift_once();
LABEL_40:
  v61 = type metadata accessor for Logger();
  __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
  v62 = Logger.logObject.getter();
  v63 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v62, v63))
  {
    v64 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v64 = 0;
    _os_log_impl(&dword_1C2356000, v62, v63, "Skipping geo personalization shadow logging because response is not geo domain", v64, 2u);
    MEMORY[0x1C3BBFF64](v64, -1, -1);
  }
  outlined consume of Result<PommesResponse, Error>((id)a1);

}

unint64_t lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag;
  if (!lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for FeatureFlag, &type metadata for FeatureFlag);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FeatureFlag and conformance FeatureFlag);
  }
  return result;
}

const char *protocol witness for FeatureFlagsKey.domain.getter in conformance FeatureFlag()
{
  uint64_t v0;
  uint64_t v1;

  if (*(_BYTE *)(v0 + 32) != 3)
    return "Pommes";
  v1 = *(_QWORD *)(v0 + 16) | *(_QWORD *)(v0 + 24) | *(_QWORD *)(v0 + 8);
  if (*(_QWORD *)v0 == 5 && v1 == 0)
    return "SiriVideo";
  if (*(_QWORD *)v0 != 7 || v1 != 0)
    return "Pommes";
  return "SiriSettings";
}

void protocol witness for FeatureFlagsKey.feature.getter in conformance FeatureFlag()
{
  __int128 *v0;
  _BYTE v1[40];

  outlined init with take of FeatureFlag(v0, (uint64_t)v1);
  FeatureFlag.feature.getter();
}

uint64_t outlined init with take of FeatureFlag(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

void FeatureFlag.feature.getter()
{
  __int128 *v0;
  _QWORD v1[4];

  outlined init with take of FeatureFlag(v0, (uint64_t)v1);
  __asm { BR              X10 }
}

const char *sub_1C23746AC()
{
  return specialized FeatureFlag.disableDeviceFeature(_:)();
}

uint64_t outlined consume of FeatureFlag(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  uint64_t result;

  if (a5 >= 2u)
  {
    if (a5 != 2)
      return result;
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t block_destroy_helper_2()
{
  return swift_release();
}

uint64_t block_destroy_helper_3()
{
  return swift_release();
}

uint64_t block_destroy_helper_4()
{
  return swift_release();
}

uint64_t block_destroy_helper_5()
{
  return swift_release();
}

uint64_t block_destroy_helper_6()
{
  return swift_release();
}

uint64_t block_destroy_helper_7()
{
  return swift_release();
}

uint64_t block_destroy_helper_8()
{
  return swift_release();
}

uint64_t block_destroy_helper_9()
{
  return swift_release();
}

uint64_t block_destroy_helper_10()
{
  return swift_release();
}

uint64_t block_destroy_helper_11()
{
  return swift_release();
}

uint64_t block_destroy_helper_12()
{
  return swift_release();
}

uint64_t block_destroy_helper_13()
{
  return swift_release();
}

uint64_t block_destroy_helper_14()
{
  return swift_release();
}

uint64_t block_destroy_helper_15()
{
  return swift_release();
}

uint64_t block_destroy_helper_16()
{
  return swift_release();
}

uint64_t block_destroy_helper_17()
{
  return swift_release();
}

uint64_t block_destroy_helper_18()
{
  return swift_release();
}

uint64_t block_destroy_helper_19()
{
  return swift_release();
}

uint64_t block_destroy_helper_20()
{
  return swift_release();
}

uint64_t block_destroy_helper_21()
{
  return swift_release();
}

uint64_t block_destroy_helper_22()
{
  return swift_release();
}

uint64_t block_destroy_helper_23()
{
  return swift_release();
}

unint64_t type metadata accessor for SOMediaNowPlayingObserver()
{
  unint64_t result;

  result = lazy cache variable for type metadata for SOMediaNowPlayingObserver;
  if (!lazy cache variable for type metadata for SOMediaNowPlayingObserver)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for SOMediaNowPlayingObserver);
  }
  return result;
}

void AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  _BOOL4 v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  char *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  NSObject *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void (*v56)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t);
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  void (*v65)(uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t);
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77[3];
  uint64_t v78;
  uint64_t v79;

  v4 = v3;
  v75 = a1;
  v7 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v72 = *((_QWORD *)v7 - 1);
  v8 = MEMORY[0x1E0C80A78](v7);
  v73 = (uint64_t)&v66 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v66 - v11;
  v74 = v13;
  MEMORY[0x1E0C80A78](v10);
  v15 = (char *)&v66 - v14;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  v69 = __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.info.getter();
  v19 = os_log_type_enabled(v17, v18);
  v20 = v3;
  v71 = a3;
  if (v19)
  {
    v21 = 0xEB00000000646569;
    v22 = a2;
    v23 = swift_slowAlloc();
    v24 = swift_slowAlloc();
    v77[0] = v24;
    *(_DWORD *)v23 = 136315394;
    v67 = v24;
    v68 = v22;
    v26 = v22;
    v25 = 0x6669636570736E75;
    v27 = 0xEB00000000646569;
    switch(v26)
    {
      case 0:
        break;
      case 1:
        v27 = 0xE700000000000000;
        v28 = 2036427888;
        goto LABEL_12;
      case 2:
        v27 = 0xE600000000000000;
        v25 = 0x646573756170;
        break;
      case 3:
        v27 = 0xE700000000000000;
        v25 = 0x646570706F7473;
        break;
      case 4:
        v25 = 0x7075727265746E69;
        v27 = 0xEB00000000646574;
        break;
      case 5:
        v27 = 0xE700000000000000;
        v28 = 1801807219;
LABEL_12:
        v25 = v28 | 0x676E6900000000;
        break;
      default:
        v27 = 0xE700000000000000;
        v25 = 0x6E776F6E6B6E75;
        break;
    }
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v23 + 12) = 2080;
    a3 = v71;
    v29 = 0x6669636570736E75;
    switch(v71)
    {
      case 0:
        break;
      case 1:
        v21 = 0xE700000000000000;
        v30 = 2036427888;
        goto LABEL_20;
      case 2:
        v21 = 0xE600000000000000;
        v29 = 0x646573756170;
        break;
      case 3:
        v21 = 0xE700000000000000;
        v29 = 0x646570706F7473;
        break;
      case 4:
        v29 = 0x7075727265746E69;
        v21 = 0xEB00000000646574;
        break;
      case 5:
        v21 = 0xE700000000000000;
        v30 = 1801807219;
LABEL_20:
        v29 = v30 | 0x676E6900000000;
        break;
      default:
        v21 = 0xE700000000000000;
        v29 = 0x6E776F6E6B6E75;
        break;
    }
    v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v21, v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v17, v18, "AudioQueueStateManager : now playing state changed from %s to %s", (uint8_t *)v23, 0x16u);
    v31 = v67;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v31, -1, -1);
    MEMORY[0x1C3BBFF64](v23, -1, -1);

    v4 = v20;
    a2 = v68;
  }
  else
  {

  }
  if (*(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache)
    && *(_QWORD *)(v4
                 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache
                 + 8)
    && (*(_BYTE *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache + 8) & 1) == 0
    && a2 == a3)
  {
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1C2356000, v32, v33, "AudioQueueStateManager : update skipped", v34, 2u);
      MEMORY[0x1C3BBFF64](v34, -1, -1);
    }

  }
  else
  {
    Date.init()();
    v35 = &v15[v7[5]];
    *(_QWORD *)v35 = "SiriInformationSearch/AudioQueueStateManager.swift";
    *((_QWORD *)v35 + 1) = 50;
    v35[16] = 2;
    *(_QWORD *)&v15[v7[6]] = 186;
    v36 = &v15[v7[7]];
    *(_QWORD *)v36 = "nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)";
    *((_QWORD *)v36 + 1) = 66;
    v36[16] = 2;
    v37 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000036);
    v38 = (uint64_t *)&v15[v7[8]];
    *v38 = v37;
    v38[1] = v39;
    Date.init()();
    v40 = &v12[v7[5]];
    *(_QWORD *)v40 = "SiriInformationSearch/AudioQueueStateManager.swift";
    *((_QWORD *)v40 + 1) = 50;
    v40[16] = 2;
    *(_QWORD *)&v12[v7[6]] = 187;
    v41 = &v12[v7[7]];
    *(_QWORD *)v41 = "nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)";
    *((_QWORD *)v41 + 1) = 66;
    v41[16] = 2;
    v42 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003FLL);
    v43 = (uint64_t *)&v12[v7[8]];
    *v43 = v42;
    v43[1] = v44;
    v45 = *(NSObject **)(v20
                       + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup);
    dispatch_group_enter(v45);
    dispatch_group_enter(v45);
    outlined init with copy of MediaNowPlayingObserving?(v75, (uint64_t)v77);
    v46 = v78;
    v70 = v12;
    if (v78)
    {
      v47 = v79;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      v48 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v49 = (uint64_t)v12;
      v50 = v15;
      v51 = v73;
      outlined init with copy of PerformanceUtil.Ticket(v49, v73);
      v52 = (*(unsigned __int8 *)(v72 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      v53 = (v74 + v52 + 7) & 0xFFFFFFFFFFFFFFF8;
      v54 = swift_allocObject();
      v55 = v51;
      v15 = v50;
      outlined init with take of PerformanceUtil.Ticket(v55, v54 + v52);
      *(_QWORD *)(v54 + v53) = v48;
      v56 = *(void (**)(uint64_t (*)(uint64_t, uint64_t), uint64_t, uint64_t, uint64_t))(v47 + 24);
      swift_retain();
      v56(partial apply for closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:), v54, v46, v47);
      swift_release();
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v77, &demangling cache variable for type metadata for MediaNowPlayingObserving?);
    }
    outlined init with copy of MediaNowPlayingObserving?(v75, (uint64_t)v77);
    v57 = v78;
    if (v78)
    {
      v58 = v79;
      __swift_project_boxed_opaque_existential_1(v77, v78);
      v59 = swift_allocObject();
      swift_unknownObjectWeakInit();
      v60 = v73;
      outlined init with copy of PerformanceUtil.Ticket((uint64_t)v15, v73);
      v61 = (*(unsigned __int8 *)(v72 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      v62 = (v74 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
      v63 = (uint64_t)v15;
      v64 = swift_allocObject();
      outlined init with take of PerformanceUtil.Ticket(v60, v64 + v61);
      *(_QWORD *)(v64 + v62) = v59;
      *(_QWORD *)(v64 + ((v62 + 15) & 0xFFFFFFFFFFFFFFF8)) = v71;
      v65 = *(void (**)(uint64_t (*)(uint64_t, void *), uint64_t, uint64_t, uint64_t))(v58 + 16);
      swift_retain();
      v65(partial apply for closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:), v64, v57, v58);
      swift_release();
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v70);
      outlined destroy of PerformanceUtil.Ticket(v63);
      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v77);
    }
    else
    {
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v70);
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v15);
      outlined destroy of MediaUserStateCenter?((uint64_t)v77, &demangling cache variable for type metadata for MediaNowPlayingObserving?);
    }
  }
}

uint64_t outlined init with copy of MediaNowPlayingObserving?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MediaNowPlayingObserving?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of PerformanceUtil.Ticket(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PerformanceUtil.Ticket(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void protocol witness for MediaNowPlayingObserving.getNowPlayingApplicationBundleIdentifier(_:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  protocol witness for MediaNowPlayingObserving.getNowPlayingInfoForCurrentItem(completion:) in conformance SOMediaNowPlayingObserver(a1, a2, a3, a4, (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed String?) -> (), (uint64_t)&block_descriptor_16, (SEL *)&selRef_getNowPlayingApplicationBundleIdentifier_);
}

void protocol witness for MediaNowPlayingObserving.getNowPlayingInfoForCurrentItem(completion:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, SEL *a7)
{
  void **v7;
  void *v9;
  void *v10;
  _QWORD v11[6];

  v9 = *v7;
  if (a1)
  {
    v11[4] = a1;
    v11[5] = a2;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 1107296256;
    v11[2] = a5;
    v11[3] = a6;
    v10 = _Block_copy(v11);
    swift_retain();
    swift_release();
  }
  else
  {
    v10 = 0;
  }
  objc_msgSend(v9, *a7, v10);
  _Block_release(v10);
}

void protocol witness for MediaNowPlayingObserving.getNowPlayingInfoForCurrentItem(completion:) in conformance SOMediaNowPlayingObserver(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  protocol witness for MediaNowPlayingObserving.getNowPlayingInfoForCurrentItem(completion:) in conformance SOMediaNowPlayingObserver(a1, a2, a3, a4, (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?, @guaranteed Error?) -> (), (uint64_t)&block_descriptor_11, (SEL *)&selRef_getNowPlayingInfoForCurrentItemWithCompletion_);
}

uint64_t outlined destroy of PerformanceUtil.Ticket(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PerformanceUtil.Ticket(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed String?) -> ()(uint64_t a1, uint64_t a2)
{
  void (*v2)(uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  if (a2)
  {
    v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v5 = v4;
  }
  else
  {
    v3 = 0;
    v5 = 0;
  }
  swift_retain();
  v2(v3, v5);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;

  v5 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + ((*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8)));
}

uint64_t closure #1 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;

  v7 = a4 + 16;
  swift_beginAccess();
  v8 = MEMORY[0x1C3BC0018](v7);
  if (v8)
  {
    v9 = (char *)v8;
    v10 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
    objc_msgSend(*(id *)(v8 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock), sel_lock);
    v11 = &v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache];
    *(_QWORD *)v11 = a1;
    *((_QWORD *)v11 + 1) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    objc_msgSend(*(id *)&v9[v10], sel_unlock);
    dispatch_group_leave(*(dispatch_group_t *)&v9[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup]);

  }
  if (one-time initialization token for shared != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(a3, 1);
}

Swift::Void __swiftcall PerformanceUtil.Measurement.log()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  os_log_t v30;
  uint64_t v31;
  uint64_t v32;
  os_log_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;

  v1 = type metadata accessor for PerformanceUtil.Measurement(0);
  v2 = MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v2);
  v7 = (char *)&v32 - v6;
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)&v32 - v9;
  v11 = MEMORY[0x1E0C80A78](v8);
  v13 = (char *)&v32 - v12;
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v32 - v14;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v15, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v13, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v10, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v7, type metadata accessor for PerformanceUtil.Measurement);
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v4, type metadata accessor for PerformanceUtil.Measurement);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    v20 = swift_slowAlloc();
    v35 = swift_slowAlloc();
    v37 = v35;
    *(_DWORD *)v20 = 136316162;
    v32 = v1;
    v21 = type metadata accessor for PerformanceUtil.Ticket(0);
    v22 = (uint64_t *)&v15[*(int *)(v21 + 32)];
    v33 = v17;
    v34 = v19;
    v24 = *v22;
    v23 = v22[1];
    swift_bridgeObjectRetain();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v23, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest((uint64_t)v15, type metadata accessor for PerformanceUtil.Measurement);
    *(_WORD *)(v20 + 12) = 2080;
    v25 = StaticString.description.getter();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PerformanceUtil.Measurement);
    *(_WORD *)(v20 + 22) = 2080;
    v27 = StaticString.description.getter();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest((uint64_t)v10, type metadata accessor for PerformanceUtil.Measurement);
    *(_WORD *)(v20 + 32) = 2048;
    v29 = *(_QWORD *)&v7[*(int *)(v21 + 24)];
    outlined destroy of PommesSearchRequest((uint64_t)v7, type metadata accessor for PerformanceUtil.Measurement);
    v36 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 42) = 2048;
    v36 = *(_QWORD *)&v4[*(int *)(v32 + 20)];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of PommesSearchRequest((uint64_t)v4, type metadata accessor for PerformanceUtil.Measurement);
    v30 = v33;
    _os_log_impl(&dword_1C2356000, v33, (os_log_type_t)v34, "[PerformanceUtil#Ticket] [%s] %s#%s#%ld %f ms", (uint8_t *)v20, 0x34u);
    v31 = v35;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v31, -1, -1);
    MEMORY[0x1C3BBFF64](v20, -1, -1);

  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v7, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PommesSearchRequest((uint64_t)v15, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PommesSearchRequest((uint64_t)v13, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PommesSearchRequest((uint64_t)v10, type metadata accessor for PerformanceUtil.Measurement);
    outlined destroy of PommesSearchRequest((uint64_t)v4, type metadata accessor for PerformanceUtil.Measurement);

  }
}

uint64_t partial apply for closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t closure #2 in AudioQueueStateManager.nowPlayingInfoChange(_:playbackStateDidChangeFrom:to:lastPlaying:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  NSDictionary v23;
  void *v24;
  uint64_t v25;
  char *v26;
  uint64_t v28;

  v9 = a4 + 16;
  swift_beginAccess();
  v10 = MEMORY[0x1C3BC0018](v9);
  if (v10)
  {
    v11 = (char *)v10;
    if (a2)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v12 = type metadata accessor for Logger();
      __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
      v13 = a2;
      v14 = a2;
      v15 = Logger.logObject.getter();
      v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        v17 = (uint8_t *)swift_slowAlloc();
        v18 = swift_slowAlloc();
        v28 = v18;
        *(_DWORD *)v17 = 136315138;
        v19 = a2;
        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Error?);
        v20 = String.init<A>(describing:)();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v15, v16, "nowPlayingObserver returned an error : %s", v17, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v18, -1, -1);
        MEMORY[0x1C3BBFF64](v17, -1, -1);
      }
      else
      {

      }
    }
    else
    {
      v22 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
      objc_msgSend(*(id *)(v10 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock), sel_lock);
      if (a1)
        v23.super.isa = Dictionary._bridgeToObjectiveC()().super.isa;
      else
        v23.super.isa = 0;
      v24 = *(void **)&v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache];
      *(NSDictionary *)&v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache] = v23;

      if (a5 == 4)
        v25 = 1;
      else
        v25 = a5;
      v26 = &v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache];
      *(_QWORD *)v26 = v25;
      v26[8] = 0;
      objc_msgSend(*(id *)&v11[v22], sel_unlock);
    }
    dispatch_group_leave(*(dispatch_group_t *)&v11[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup]);

  }
  if (one-time initialization token for shared != -1)
    swift_once();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(a3, 1);
}

uint64_t PommesBridgeRequestProcessor.handleEndRequest(_:)()
{
  _QWORD *v0;
  _QWORD *v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "PommesBridgeRequestProcessor received end message", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 104))(1);
}

uint64_t PommesBridgeRequestProcessor.isRequestFinished.setter(char a1)
{
  uint64_t v1;
  _BYTE *v3;
  uint64_t result;

  v3 = (_BYTE *)(v1 + direct field offset for PommesBridgeRequestProcessor.isRequestFinished);
  result = swift_beginAccess();
  *v3 = a1;
  return result;
}

uint64_t PommesBridgeRequestProcessor.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v0 = RequestProcessorBase.deinit();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + direct field offset for PommesBridgeRequestProcessor.sessionState, (uint64_t *)&demangling cache variable for type metadata for ConversationSessionState?);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  v1 = v0 + direct field offset for PommesBridgeRequestProcessor.timeout;
  v2 = type metadata accessor for DispatchTimeInterval();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  return swift_deallocClassInstance();
}

uint64_t PommesRequestContext.__deallocating_deinit()
{
  PommesRequestContext.deinit();
  return swift_deallocClassInstance();
}

uint64_t PommesRequestContext.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  swift_bridgeObjectRelease();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_sessionId;
  v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch20PommesRequestContext_approximatePreviousTTSInterval, &demangling cache variable for type metadata for DateInterval?);
  swift_bridgeObjectRelease();
  return v0;
}

void PommesBridgeRequestProcessor.handleStartCandidateRequestMessage(_:)(void *a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _QWORD *v6;
  id v7;
  id v8;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v8 = a1;
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    v6 = (_QWORD *)swift_slowAlloc();
    *(_DWORD *)v5 = 138412290;
    v7 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *v6 = v8;

    _os_log_impl(&dword_1C2356000, v3, v4, "PommesBridge handling message: %@", v5, 0xCu);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v6, -1, -1);
    MEMORY[0x1C3BBFF64](v5, -1, -1);

  }
  else
  {

  }
}

Swift::Void __swiftcall PommesBridgeRequestProcessor.transitionToActiveRequest()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  _BYTE *v6;

  v1 = v0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "PommesBridge handling transitionToActiveRequest", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  v6 = (_BYTE *)(v1 + direct field offset for PommesBridgeRequestProcessor.isCandidateRequest);
  swift_beginAccess();
  *v6 = 0;
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in PommesBridge.init(_:_:_:_:_:pommesSearch:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(void))(class metadata base offset for PommesBridgeRequestProcessor + *v0 + 288))();
}

void PommesBridgeRequestProcessor.handleStartSpeechRequestMessage(_:)(uint64_t a1)
{
  _QWORD *v1;
  id v3;

  if (StartSpeechRequestMessage.location.getter())
  {
    v3 = (id)dispatch thunk of Location.toCLLocation()();
    swift_release();
  }
  else
  {
    v3 = 0;
  }
  (*(void (**)(uint64_t, id))(class metadata base offset for PommesBridgeRequestProcessor + *v1 + 328))(a1, v3);

}

void protocol witness for PommesLocationManaging.setCachedLocation(location:) in conformance PommesLocationManager(uint64_t a1, uint64_t a2)
{
  PommesLocationManager.setCachedLocation(location:)(*(CLLocation *)&a1);
}

Swift::Void __swiftcall PommesLocationManager.setCachedLocation(location:)(CLLocation location)
{
  int *v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  id *v17;
  void *v18;
  id v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  void (*v24)(char *, uint64_t);
  void *v25;
  void (*v26)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(BOOL *@<X8>));
  objc_class *v27;
  id v28;
  id v29;
  uint64_t v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  objc_class *v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  int v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  Class isa;
  int *v48;
  uint64_t v49;

  v2 = v1;
  isa = location.super.isa;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v45 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v11 = (char *)&v44 - v10;
  v12 = type metadata accessor for LocationStatus(0);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (id *)((char *)&v44 - v16);
  v18 = *(void **)((char *)v1 + OBJC_IVAR____TtC21SiriInformationSearch21PommesLocationManager_statusQueue);
  v48 = v1;
  v19 = v18;
  OS_dispatch_queue.sync<A>(execute:)();
  v46 = 0;

  if (swift_getEnumCaseMultiPayload())
  {
    v20 = outlined destroy of PommesSearchRequest((uint64_t)v17, type metadata accessor for LocationStatus);
  }
  else
  {
    v21 = *v17;
    v22 = objc_msgSend(*v17, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v23 = -[objc_class timestamp](isa, sel_timestamp);
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v23) = static Date.> infix(_:_:)();
    v24 = *(void (**)(char *, uint64_t))(v6 + 8);
    v24(v9, v5);
    v20 = ((uint64_t (*)(char *, uint64_t))v24)(v11, v5);
    if ((v23 & 1) != 0)
      return;
  }
  if (one-time initialization token for shared != -1)
    v20 = swift_once();
  v25 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v20);
  v42 = v2;
  Date.init()();
  v26 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, void (*)(BOOL *@<X8>)))(*(_QWORD *)v25 + 200);
  v42 = &v41;
  v43 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v41) = 2;
  v26(&v49, 0xD000000000000035, 0x80000001C2509DB0, 0, v11, "SiriInformationSearch/PommesLocationManager.swift", 49, 2, 207, "setCachedLocation(location:)", 28, v41, partial apply for closure #1 in PommesLocationManager.setCachedLocation(location:));
  (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
  if (v49 == 1)
  {
    v27 = isa;
    v28 = PommesLocationManager.manager.getter();
    v29 = objc_msgSend(v28, sel_accuracyAuthorization);

    *(_QWORD *)v15 = v27;
    *((_QWORD *)v15 + 1) = v29;
    v15[16] = 0;
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v15);
    v30 = swift_allocObject();
    *(_QWORD *)(v30 + 16) = v2;
    v31 = v2;
    v32 = (uint64_t)v45;
    static TaskPriority.userInitiated.getter();
    v33 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 0, 1, v33);
    v34 = swift_allocObject();
    swift_unknownObjectWeakInit();
    v35 = (_QWORD *)swift_allocObject();
    v35[2] = 0;
    v35[3] = 0;
    v35[4] = v34;
    v35[5] = v27;
    v35[6] = partial apply for closure #2 in PommesLocationManager.setCachedLocation(location:);
    v35[7] = v30;
    v36 = v27;
    swift_retain();
    _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in PommesLocationManager.shiftedLocation(for:completion:), (uint64_t)v35);
    swift_release();
    outlined destroy of MediaUserStateCenter?(v32, &demangling cache variable for type metadata for TaskPriority?);
    swift_release();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    PommesLocationManager.status.setter((uint64_t)v15);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1C2356000, v38, v39, "Location use is not authorized. This may be due to Siri location permission reset. POMMES will *not* trigger an authorization prompt, and will drop incoming cached location data.", v40, 2u);
      MEMORY[0x1C3BBFF64](v40, -1, -1);
    }

  }
}

double specialized static PommesSearchRequest.pommesDUDAThreshold.getter()
{
  id v0;
  void *v1;
  id v2;
  void *v3;
  double v4;
  double v5;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (!v2)
    return 0.6;
  v3 = (void *)MEMORY[0x1C3BBEC44](0x685473656D6D6F70, 0xEF646C6F68736572);
  objc_msgSend(v2, sel_doubleForKey_, v3);
  v5 = v4;

  if ((*(_QWORD *)&v5 & 0x7FF0000000000000) == 0 && (*(_QWORD *)&v5 & 0xFFFFFFFFFFFFFLL) == 0)
    return 0.6;
  return v5;
}

uint64_t specialized static PommesSearchRequest.isSupportedExternalParseId(externalParseId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  uint64_t v15;
  id v16;
  char v17;
  uint64_t v19;
  _QWORD v21[5];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for DeviceClass();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v21[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for PommesMultiClassParserIds != -1)
    swift_once();
  if ((specialized Set.contains(_:)(a1, a2, static PommesSearchRequest.PommesMultiClassParserIds) & 1) == 0)
  {
    v11 = 0;
    return v11 & 1;
  }
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  SiriEnvironment.currentDevice.getter();
  swift_release();
  dispatch thunk of CurrentDevice.deviceClass.getter();
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for DeviceClass?);
LABEL_15:
    v11 = 1;
    return v11 & 1;
  }
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
  if (one-time initialization token for PommesMultiClassAllowedDeviceClasses != -1)
    swift_once();
  v12 = static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses;
  if (!*(_QWORD *)(static PommesSearchRequest.PommesMultiClassAllowedDeviceClasses + 16))
  {
LABEL_14:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  v13 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v14 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v16 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v17 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v17 & 1) != 0)
  {
    v11 = specialized Set.contains(_:)((uint64_t)v10, v15);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v21[3] = &type metadata for FeatureFlag;
    v21[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v19 = swift_allocObject();
    v21[0] = v19;
    *(_QWORD *)(v19 + 16) = 6;
    *(_QWORD *)(v19 + 24) = 0;
    *(_QWORD *)(v19 + 32) = 0;
    *(_QWORD *)(v19 + 40) = 0;
    *(_BYTE *)(v19 + 48) = 3;
    v11 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);
  }
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v11 & 1;
}

void *PommesSearch.performPreflightChecks(for:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  id v24;
  uint64_t v25;
  id v26;
  NSObject *v27;
  os_log_type_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD v39[2];
  char *v40;
  uint64_t v41[5];
  uint64_t v42;
  _QWORD v43[3];
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[3];
  uint64_t v47;
  uint64_t v48;

  v2 = v1;
  v4 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v7 = type metadata accessor for OSSignposter();
  v8 = __swift_project_value_buffer(v7, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("search.preflight", 16, 2u, 0, (uint64_t)v6);
  v9 = v2[2];
  v10 = *(_QWORD *)(v9 + 16);
  if (!v10)
  {
    v14 = 0;
    goto LABEL_22;
  }
  v39[1] = v8;
  v40 = v6;
  v11 = v9 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AppDataProviding(v11, (uint64_t)v46);
    outlined init with copy of AppDataProviding((uint64_t)v46, (uint64_t)v43);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchPreflightHandling);
    type metadata accessor for ClassicFollowupPreflightClient();
    if (swift_dynamicCast())
    {
      v15 = swift_release();
      (*(void (**)(_QWORD *__return_ptr, uint64_t))(*v2 + 152))(v43, v15);
      v16 = v44;
      v17 = v45;
      __swift_project_boxed_opaque_existential_1(v43, v44);
      v18 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(v17 + 8))(0, v16, v17);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      if ((v18 & 1) != 0)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v19 = type metadata accessor for Logger();
        __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
        v20 = Logger.logObject.getter();
        v21 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v20, v21))
        {
          v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v22 = 0;
          _os_log_impl(&dword_1C2356000, v20, v21, "NLv3 deprecation enabled, skipping ClassicFollowupPreflightClient", v22, 2u);
          MEMORY[0x1C3BBFF64](v22, -1, -1);
        }

        goto LABEL_6;
      }
    }
    v12 = v47;
    v13 = v48;
    __swift_project_boxed_opaque_existential_1(v46, v47);
    PommesSearchPreflightHandling.handleAndLog(pommesSearchRequest:)(a1, v12, v13, v43);
    v14 = (void *)v43[0];
    if (v43[0])
      break;
LABEL_6:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
    v11 += 40;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      v14 = 0;
      v6 = v40;
      goto LABEL_22;
    }
  }
  swift_bridgeObjectRelease();
  v23 = one-time initialization token for pommes;
  v24 = v14;
  if (v23 != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  outlined init with copy of AppDataProviding((uint64_t)v46, (uint64_t)v43);
  v26 = v24;
  v27 = Logger.logObject.getter();
  v28 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v27, v28))
  {
    v29 = swift_slowAlloc();
    v39[0] = swift_slowAlloc();
    v42 = v39[0];
    *(_DWORD *)v29 = 136315394;
    outlined init with copy of AppDataProviding((uint64_t)v43, (uint64_t)v41);
    v30 = String.init<A>(describing:)();
    v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    *(_WORD *)(v29 + 12) = 2080;
    v32 = v26;
    v33 = objc_msgSend(v32, sel_description);
    v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36 = v35;

    v41[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v36, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v27, v28, "Preflight client %s generated response: %s", (uint8_t *)v29, 0x16u);
    v37 = v39[0];
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v37, -1, -1);
    MEMORY[0x1C3BBFF64](v29, -1, -1);

  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);

  }
  v6 = v40;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v46);
LABEL_22:
  OSSignposter.end(token:message:)((uint64_t)v6, 0, 0xE000000000000000);
  outlined destroy of PommesSearchRequest((uint64_t)v6, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  return v14;
}

uint64_t PommesSearchPreflightHandling.handleAndLog(pommesSearchRequest:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  Swift::String v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint64_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;

  v5 = v4;
  v37 = a1;
  v38 = a4;
  v8 = *(_QWORD *)(a2 - 8);
  MEMORY[0x1E0C80A78](a1);
  v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v40 = 0;
  v41 = 0xE000000000000000;
  _StringGuts.grow(_:)(31);
  swift_getDynamicType();
  v14 = _typeName(_:qualified:)();
  v16 = v15;
  swift_bridgeObjectRelease();
  v40 = v14;
  v41 = v16;
  v17._object = (void *)0x80000001C25074D0;
  v17._countAndFlagsBits = 0xD00000000000001DLL;
  String.append(_:)(v17);
  v18 = v40;
  Date.init()();
  v19 = &v13[v11[5]];
  *(_QWORD *)v19 = "SiriInformationSearch/PommesSearchPreflightHandling.swift";
  *((_QWORD *)v19 + 1) = 57;
  v19[16] = 2;
  *(_QWORD *)&v13[v11[6]] = 38;
  v20 = &v13[v11[7]];
  *(_QWORD *)v20 = "handleAndLog(pommesSearchRequest:)";
  *((_QWORD *)v20 + 1) = 34;
  v20[16] = 2;
  v21 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v18);
  v23 = v22;
  swift_bridgeObjectRelease();
  v24 = (uint64_t *)&v13[v11[8]];
  *v24 = v21;
  v24[1] = v23;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v5, a2);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v35 = v8;
    v28 = swift_slowAlloc();
    v36 = v5;
    v29 = (uint8_t *)v28;
    v30 = swift_slowAlloc();
    v40 = v30;
    *(_DWORD *)v29 = 136446210;
    v34 = v29 + 4;
    swift_getDynamicType();
    v31 = _typeName(_:qualified:)();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v10, a2);
    _os_log_impl(&dword_1C2356000, v26, v27, "%{public}s#handle", v29, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v30, -1, -1);
    MEMORY[0x1C3BBFF64](v29, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, a2);
  }

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t))(a3 + 16))(&v40, v37, a2, a3);
  *v38 = v40;
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v13, 0);
  return outlined destroy of PerformanceUtil.Ticket((uint64_t)v13);
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance OpenAppOnTVPreflightClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 80))();
}

void ClassicFollowupPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v20;

  v4 = type metadata accessor for PommesSearchReason();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = 0;
  if ((PommesSearchRequest.hadPreviousClassicTurn.getter() & 1) != 0)
  {
    v12 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
    v13 = *v12;
    v14 = v12[1];
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v10);
    v15 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v10, 0, 1, v15);
    default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)((uint64_t)v7);
    v11 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(a1, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v13, v14, (uint64_t)v10, (uint64_t)v7, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD00000000000001ELL, 0x80000001C24FDAE0);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for PommesCandidateId?);
    if (!v11)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v16 = type metadata accessor for Logger();
      __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
      v17 = Logger.logObject.getter();
      v18 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v17, v18))
      {
        v19 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v19 = 0;
        _os_log_impl(&dword_1C2356000, v17, v18, "ClassicFollowupPreflightClient#ignore could not build PommesResponse with given parameters", v19, 2u);
        MEMORY[0x1C3BBFF64](v19, -1, -1);
      }

      v11 = 0;
    }
  }
  *a2 = v11;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance SmartPlayPreflightClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

void SmartPlayPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  char *v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (*v78)(char *, uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92[4];
  uint64_t v93;

  v5 = *v2;
  v67 = type metadata accessor for PommesSearchReason();
  v66 = *(_QWORD *)(v67 - 8);
  MEMORY[0x1E0C80A78](v67);
  v64 = (uint64_t)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v7);
  v63 = (uint64_t)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = type metadata accessor for Date();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v69 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v90 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Siri_Nlu_External_UserParse();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v84 = (char *)&v62 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for PommesSearchRequest(0);
  v16 = *(int *)(v62 + 76);
  v65 = a1;
  v17 = *(_QWORD *)(a1 + v16);
  v93 = MEMORY[0x1E0DEE9D8];
  v75 = *(_QWORD *)(v17 + 16);
  v74 = a2;
  v68 = v5;
  if (v75)
  {
    v80 = v17 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v18 = *(_QWORD *)(v14 + 72);
    v78 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
    v79 = v18;
    v73 = v17;
    swift_bridgeObjectRetain_n();
    v19 = 0;
    v81 = v11;
    v82 = v10;
    v85 = MEMORY[0x1E0DEE9B8] + 8;
    v77 = v13;
    v76 = v14;
    while (1)
    {
      v83 = v19;
      v78(v84, v80 + v79 * v19, v13);
      v20 = Siri_Nlu_External_Span.matcherNames.getter();
      v21 = MEMORY[0x1E0DEE9D8];
      v92[0] = MEMORY[0x1E0DEE9D8];
      v22 = *(_QWORD *)(v20 + 16);
      if (v22)
      {
        v23 = v20 + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
        swift_bridgeObjectRetain();
        v24 = *(_QWORD *)(v11 + 72);
        v25 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
        v26 = v90;
        do
        {
          v25(v26, v23, v10);
          v27 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
          (*(void (**)(char *, uint64_t))(v11 + 8))(v26, v10);
          specialized Array.append<A>(contentsOf:)(v27);
          v26 = v90;
          v23 += v24;
          --v22;
        }
        while (v22);
        swift_bridgeObjectRelease_n();
        v28 = v92[0];
      }
      else
      {
        swift_bridgeObjectRelease();
        v28 = v21;
      }
      if (v28 >> 62)
      {
        swift_bridgeObjectRetain();
        v29 = _CocoaArrayWrapper.endIndex.getter();
        if (v29)
        {
LABEL_10:
          v30 = 0;
          v88 = v28;
          v89 = v28 + 32;
          v86 = v28 & 0xC000000000000001;
          v87 = v29;
          do
          {
            if ((v28 & 0xC000000000000001) != 0)
            {
              v31 = MEMORY[0x1C3BBF3F4](v30, v28);
              v32 = __OFADD__(v30++, 1);
              if (v32)
                goto LABEL_47;
            }
            else
            {
              v31 = swift_retain();
              v32 = __OFADD__(v30++, 1);
              if (v32)
              {
LABEL_47:
                __break(1u);
                JUMPOUT(0x1C2378B2CLL);
              }
            }
            v33 = v31;
            static UsoTask_CodegenConverter.convert(task:)();
            if (v92[3])
            {
              v91 = v33;
              type metadata accessor for UsoTask_play_uso_NoEntity();
              if ((swift_dynamicCast() & 1) != 0)
              {
                swift_release();
                UsoTask.arguments.getter();
                JUMPOUT(0x1C2377C60);
              }
            }
            else
            {
              outlined destroy of MediaUserStateCenter?((uint64_t)v92, (uint64_t *)&demangling cache variable for type metadata for Any?);
            }
            swift_release();
          }
          while (v30 != v29);
        }
      }
      else
      {
        v29 = *(_QWORD *)((v28 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v29)
          goto LABEL_10;
      }
      swift_bridgeObjectRelease_n();
      v13 = v77;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v84, v77);
      v19 = v83 + 1;
      if (v83 + 1 == v75)
      {
        swift_bridgeObjectRelease();
        v52 = v93;
        goto LABEL_26;
      }
    }
  }
  swift_bridgeObjectRetain();
  v52 = MEMORY[0x1E0DEE9D8];
LABEL_26:
  swift_bridgeObjectRelease();
  if (!(v52 >> 62))
  {
    if (*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_28;
LABEL_49:
    swift_bridgeObjectRelease();
    goto LABEL_50;
  }
  swift_bridgeObjectRetain();
  v57 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v57)
    goto LABEL_49;
LABEL_28:
  if ((v52 & 0xC000000000000001) != 0)
  {
    v34 = MEMORY[0x1C3BBF3F4](0, v52);
  }
  else
  {
    if (!*(_QWORD *)((v52 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      JUMPOUT(0x1C2378C74);
    }
    v34 = *(_QWORD *)(v52 + 32);
    swift_retain();
  }
  swift_bridgeObjectRelease();
  swift_retain();
  if ((UsoTask.isSmartPlayTask.getter() & 1) == 0)
    goto LABEL_40;
  if (one-time initialization token for shared != -1)
    swift_once();
  v35 = static PerformanceUtil.shared;
  v36 = v69;
  Date.init()();
  (*(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)@<X0>(_BYTE *@<X8>), uint64_t, _QWORD))(*(_QWORD *)v35 + 200))(v92, 0xD00000000000001ALL, 0x80000001C2506910, 0, v36, "SiriInformationSearch/SmartPlayPreflightClient.swift", 52, 2, 99, "handle(pommesSearchRequest:)", 28, 2, partial apply for closure #2 in SmartPlayPreflightClient.handle(pommesSearchRequest:), v72, MEMORY[0x1E0DEAFA0]);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v36, v71);
  if (LOBYTE(v92[0]) != 1)
  {
LABEL_40:
    swift_release_n();
LABEL_50:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
    v59 = Logger.logObject.getter();
    v60 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v59, v60))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v61 = 0;
      _os_log_impl(&dword_1C2356000, v59, v60, "SmartPlayPreflightClient#handle no conclusive result, ignoring", v61, 2u);
      MEMORY[0x1C3BBFF64](v61, -1, -1);
    }

    goto LABEL_55;
  }
  v37 = v65;
  v38 = (uint64_t *)(v65 + *(int *)(v62 + 32));
  v39 = *v38;
  v40 = v38[1];
  v41 = v63;
  PommesSearchRequest.pommesCandidateId.getter(v63);
  v42 = type metadata accessor for PommesCandidateId();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v42 - 8) + 56))(v41, 0, 1, v42);
  v43 = v64;
  default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v64);
  v44 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v37, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v39, v40, v41, v43, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD000000000000018, 0x80000001C24FEB20);
  (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v43, v67);
  outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for PommesCandidateId?);
  if (!v44)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v55))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      _os_log_impl(&dword_1C2356000, v54, v55, "SmartPlayPreflightClient#ignore could not build PommesResponse with given parameters", v56, 2u);
      MEMORY[0x1C3BBFF64](v56, -1, -1);
      swift_release_n();

    }
    else
    {

      swift_release_n();
    }
LABEL_55:
    v44 = 0;
    goto LABEL_56;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v46 = Logger.logObject.getter();
  v47 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v46, v47))
  {
    v48 = (uint8_t *)swift_slowAlloc();
    v49 = swift_slowAlloc();
    v92[0] = v49;
    *(_DWORD *)v48 = 136315138;
    v93 = v34;
    type metadata accessor for UsoTask();
    swift_retain();
    v50 = String.init<A>(describing:)();
    v93 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v46, v47, "SmartPlayPreflightClient#handle Non-ambiguous play task: %s", v48, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v49, -1, -1);
    MEMORY[0x1C3BBFF64](v48, -1, -1);
    swift_release_n();

  }
  else
  {

    swift_release_n();
  }
LABEL_56:
  *v74 = v44;
}

void CallContactPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD v24[7];
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v5 = *v2;
  v6 = type metadata accessor for PommesSearchReason();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v24[5] = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v9);
  v24[4] = (char *)v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for PommesSearchRequest(0);
  v12 = *(int *)(v11 + 76);
  v24[6] = a1;
  v13 = *(_QWORD *)(a1 + v12);
  v14 = *(_QWORD *)(v13 + 16);
  if (v14)
  {
    v24[0] = v11;
    v24[1] = v7;
    v24[2] = v5;
    v24[3] = v6;
    v25 = a2;
    v15 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
    v16 = v13 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    v17 = *(_QWORD *)(v15 + 72);
    swift_bridgeObjectRetain();
    v18 = 0;
    v28 = v14;
    v29 = v13;
    v26 = v17;
    v27 = v16;
    do
    {
      v19 = Siri_Nlu_External_UserParse.firstCallTask()();
      if (v19)
      {
        v30 = v19;
        UsoTask.arguments.getter();
        JUMPOUT(0x1C2378E68);
      }
      ++v18;
    }
    while (v18 != v14);
    swift_bridgeObjectRelease();
    a2 = v25;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1C2356000, v21, v22, "PhoneCallPreflightClient#handle no conclusive result, ignoring", v23, 2u);
    MEMORY[0x1C3BBFF64](v23, -1, -1);
  }

  *a2 = 0;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AudioQueueStateDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

void PlayThisLibraryItemPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint8_t *v65;
  unsigned int (*v66)(uint64_t, uint64_t, uint64_t);
  char *v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  const char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  void (*v77)(char *, unint64_t, uint64_t);
  uint64_t v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  id v90;
  void *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  id v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  NSObject *v102;
  os_log_type_t v103;
  _BOOL4 v104;
  uint64_t v105;
  uint64_t v106;
  uint8_t *v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  char *v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;

  v135 = a2;
  v119 = *v2;
  v121 = type metadata accessor for PommesSearchReason();
  v120 = *(_QWORD *)(v121 - 8);
  MEMORY[0x1E0C80A78](v121);
  v118 = (uint64_t)&v108 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v5);
  v117 = (uint64_t)&v108 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v134 = *(_QWORD *)(v132 - 8);
  MEMORY[0x1E0C80A78](v132);
  v113 = (char *)&v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItem();
  v114 = *(_QWORD *)(v115 - 8);
  MEMORY[0x1E0C80A78](v115);
  v122 = (uint64_t)&v108 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier?);
  MEMORY[0x1E0C80A78](v9);
  v123 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UsoIdentifier();
  v12 = *(_QWORD *)(v11 - 8);
  v136 = v11;
  v137 = v12;
  v13 = MEMORY[0x1E0C80A78](v11);
  v131 = (char *)&v108 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v124 = (char *)&v108 - v15;
  v127 = type metadata accessor for Siri_Nlu_External_UserParse();
  v16 = *(_QWORD *)(v127 - 8);
  MEMORY[0x1E0C80A78](v127);
  v18 = (char *)&v108 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v126 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v19 = MEMORY[0x1E0C80A78](v126);
  v116 = (uint64_t)&v108 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v125 = (uint64_t)&v108 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v129 = (char *)&v108 - v24;
  MEMORY[0x1E0C80A78](v23);
  v133 = (char *)&v108 - v25;
  v26 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v26);
  v28 = (char *)&v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)&v108 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a1 + *(int *)(v33 + 44), (uint64_t)v28, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    v34 = v135;
    outlined destroy of MediaUserStateCenter?((uint64_t)v28, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1C2356000, v36, v37, "PlayThisLibraryItemPreflightClient#handle nil delegatedUDA", v38, 2u);
      MEMORY[0x1C3BBFF64](v38, -1, -1);
    }

    goto LABEL_40;
  }
  v111 = v30;
  v39 = *(void (**)(char *, char *, uint64_t))(v30 + 32);
  v112 = v29;
  v39(v32, v28, v29);
  outlined init with copy of AppDataProviding(v130 + 16, (uint64_t)&v139);
  v40 = v140;
  v41 = v141;
  __swift_project_boxed_opaque_existential_1(&v139, v140);
  v42 = RRReferenceResolverProtocol.getEntitiesFromMarrsSpans(relevantTo:)((uint64_t)v32, v40, v41);
  v43 = specialized Sequence.compactMap<A>(_:)(v42);
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v139);
  swift_retain();
  v128 = specialized Sequence.first(where:)(v43);
  swift_bridgeObjectRelease();
  swift_release();
  v130 = v33;
  v44 = *(_QWORD *)(a1 + *(int *)(v33 + 76));
  v45 = a1;
  if (*(_QWORD *)(v44 + 16))
  {
    v46 = v127;
    (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v18, v44 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v127);
    v47 = Siri_Nlu_External_Span.matcherNames.getter();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v46);
    v48 = v131;
    v49 = v132;
    if (*(_QWORD *)(v47 + 16))
    {
      v51 = (uint64_t)v133;
      v50 = v134;
      (*(void (**)(char *, unint64_t, uint64_t))(v134 + 16))(v133, v47 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80)), v132);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v51, 0, 1, v49);
    }
    else
    {
      v51 = (uint64_t)v133;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v134 + 56))(v133, 1, 1, v132);
    }
    swift_bridgeObjectRelease();
    v52 = v128;
  }
  else
  {
    v51 = (uint64_t)v133;
    v49 = v132;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v134 + 56))(v133, 1, 1, v132);
    v52 = v128;
    v48 = v131;
  }
  v53 = (uint64_t)v129;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v54 = type metadata accessor for Logger();
  v55 = __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
  outlined init with copy of MediaUserStateCenter?(v51, v53, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v56 = Logger.logObject.getter();
  v57 = static os_log_type_t.debug.getter();
  v58 = os_log_type_enabled(v56, v57);
  v110 = v45;
  if (v58)
  {
    v59 = swift_slowAlloc();
    v131 = (char *)v55;
    v60 = (uint8_t *)v59;
    v61 = swift_slowAlloc();
    v139 = v61;
    *(_DWORD *)v60 = 136315138;
    outlined init with copy of MediaUserStateCenter?(v53, v125, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    v62 = String.init<A>(describing:)();
    v138 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v62, v63, &v139);
    v49 = v132;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    _os_log_impl(&dword_1C2356000, v56, v57, "PlayThisLibraryItemPreflightClient#handle found userDialogAct: %s", v60, 0xCu);
    swift_arrayDestroy();
    v64 = v61;
    v51 = (uint64_t)v133;
    MEMORY[0x1C3BBFF64](v64, -1, -1);
    v65 = v60;
    v52 = v128;
    v55 = (uint64_t)v131;
    MEMORY[0x1C3BBFF64](v65, -1, -1);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?(v53, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  }

  v34 = v135;
  v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v134 + 48);
  v67 = v32;
  if (v66(v51, 1, v49) == 1)
  {
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      v71 = "PlayThisLibraryItemPreflightClient#handle userDialogAct is nil, this result cannot be used in the audio plug"
            "in so ignore and try going to the server";
      goto LABEL_38;
    }
    goto LABEL_39;
  }
  if (!v52)
    goto LABEL_36;
  v131 = (char *)v55;
  swift_retain();
  v72 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
  v73 = v52;
  v74 = *(_QWORD *)(v72 + 16);
  v109 = v67;
  if (!v74)
  {
    v82 = v67;
    v83 = 1;
    v51 = (uint64_t)v133;
    v78 = v136;
    v84 = v137;
LABEL_32:
    v85 = (uint64_t)v123;
    goto LABEL_34;
  }
  v75 = v72 + ((*(unsigned __int8 *)(v137 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80));
  v76 = *(_QWORD *)(v137 + 72);
  v77 = *(void (**)(char *, unint64_t, uint64_t))(v137 + 16);
  swift_bridgeObjectRetain();
  v78 = v136;
  while (1)
  {
    v77(v48, v75, v78);
    v80 = UsoIdentifier.namespace.getter();
    if (!v81)
      goto LABEL_25;
    if (v80 == 0x6574736973726570 && v81 == 0xED000064695F746ELL)
      break;
    v79 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v79 & 1) != 0)
      goto LABEL_33;
LABEL_25:
    v78 = v136;
    (*(void (**)(char *, uint64_t))(v137 + 8))(v48, v136);
    v75 += v76;
    if (!--v74)
    {
      swift_bridgeObjectRelease();
      v83 = 1;
      v34 = v135;
      v49 = v132;
      v51 = (uint64_t)v133;
      v84 = v137;
      v82 = v109;
      v73 = v128;
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRelease();
LABEL_33:
  swift_bridgeObjectRelease();
  v78 = v136;
  v84 = v137;
  v85 = (uint64_t)v123;
  (*(void (**)(char *, char *, uint64_t))(v137 + 32))(v123, v48, v136);
  v83 = 0;
  v34 = v135;
  v49 = v132;
  v51 = (uint64_t)v133;
  v82 = v109;
  v73 = v128;
LABEL_34:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v84 + 56))(v85, v83, 1, v78);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48))(v85, 1, v78) == 1)
  {
    swift_release();
    outlined destroy of MediaUserStateCenter?(v85, &demangling cache variable for type metadata for UsoIdentifier?);
    v67 = v82;
LABEL_36:
    v68 = Logger.logObject.getter();
    v69 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v68, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      v71 = "PlayThisLibraryItemPreflightClient#handle no conclusive result, ignoring";
LABEL_38:
      _os_log_impl(&dword_1C2356000, v68, v69, v71, v70, 2u);
      MEMORY[0x1C3BBFF64](v70, -1, -1);
    }
LABEL_39:

    swift_release();
    (*(void (**)(char *, uint64_t))(v111 + 8))(v67, v112);
    outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
LABEL_40:
    v86 = 0;
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 32))(v124, v85, v78);
    PlayThisLibraryItemPreflightClient.audioItem(from:)(v73, v122);
    v87 = v116;
    outlined init with copy of MediaUserStateCenter?(v51, v116, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (v66(v87, 1, v49) == 1)
    {
      Siri_Nlu_External_UserDialogAct.init()();
      v88 = outlined destroy of MediaUserStateCenter?(v87, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    }
    else
    {
      v88 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v134 + 32))(v113, v87, v49);
    }
    v89 = v130;
    MEMORY[0x1E0C80A78](v88);
    v90 = objc_allocWithZone((Class)type metadata accessor for AudioExperience());
    v91 = (void *)AudioExperience.init(pluginId:queryConfidence:userDialogAct:builder:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v92 = swift_allocObject();
    *(_OWORD *)(v92 + 16) = xmmword_1C24FB5A0;
    *(_QWORD *)(v92 + 32) = v91;
    v139 = v92;
    specialized Array._endMutation()();
    v93 = v139;
    v94 = v110;
    v95 = (uint64_t *)(v110 + *(int *)(v89 + 32));
    v96 = *v95;
    v97 = v95[1];
    v98 = v91;
    v99 = v117;
    PommesSearchRequest.pommesCandidateId.getter(v117);
    v100 = type metadata accessor for PommesCandidateId();
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56))(v99, 0, 1, v100);
    v101 = v118;
    default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v118);
    v86 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v94, v93, MEMORY[0x1E0DEE9D8], v96, v97, v99, v101, 0x616964656DLL, 0xE500000000000000, (void (*)(char *, uint64_t))0xD000000000000022, 0x80000001C24FDBD0);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v101, v121);
    outlined destroy of MediaUserStateCenter?(v99, &demangling cache variable for type metadata for PommesCandidateId?);
    if (v86)
    {
      (*(void (**)(char *, uint64_t))(v111 + 8))(v109, v112);

      swift_release_n();
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v122, v115);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v124, v136);
      outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      v34 = v135;
    }
    else
    {
      v102 = Logger.logObject.getter();
      v103 = static os_log_type_t.error.getter();
      v104 = os_log_type_enabled(v102, v103);
      v105 = v112;
      v106 = v111;
      if (v104)
      {
        v107 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v107 = 0;
        _os_log_impl(&dword_1C2356000, v102, v103, "PlayThisLibraryItemPreflightClient#ignore could not build PommesResponse with given parameters", v107, 2u);
        MEMORY[0x1C3BBFF64](v107, -1, -1);
      }

      swift_release_n();
      (*(void (**)(char *, uint64_t))(v106 + 8))(v109, v105);
      (*(void (**)(uint64_t, uint64_t))(v114 + 8))(v122, v115);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v124, v136);
      outlined destroy of MediaUserStateCenter?(v51, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
      v86 = 0;
      v34 = v135;
    }
  }
  *v34 = v86;
}

uint64_t outlined init with copy of Siri_Nlu_External_DelegatedUserDialogAct?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t RRReferenceResolverProtocol.getEntitiesFromMarrsSpans(relevantTo:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(unint64_t, _QWORD, uint64_t);
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  __n128 v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  id v52;
  id v53;
  NSObject *v54;
  os_log_type_t v55;
  uint64_t v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int isUniquelyReferenced_nonNull_native;
  char v74;
  unint64_t v75;
  uint64_t v76;
  _BOOL8 v77;
  uint64_t v78;
  char v79;
  unint64_t v80;
  char v81;
  _QWORD *v82;
  uint64_t *v83;
  unint64_t v84;
  uint64_t v85;
  BOOL v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  uint8_t *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  char v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t, uint64_t);
  char *v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  uint64_t result;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  char *v131;
  uint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  char *v137;
  uint64_t v138;
  __n128 v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  void *v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  void (*v156)(char *, unint64_t, uint64_t);
  char *v157;
  char *v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  _QWORD *v163;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span?);
  MEMORY[0x1E0C80A78](v6);
  v136 = (char *)&v127 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span, RREntity));
  v134 = *(_QWORD *)(v135 - 8);
  v8 = MEMORY[0x1E0C80A78](v135);
  v144 = (uint64_t)&v127 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v133 = (char *)&v127 - v11;
  MEMORY[0x1E0C80A78](v10);
  v132 = (uint64_t)&v127 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x1E0C80A78](v13);
  v130 = (char *)&v127 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for UsoIdentifier();
  v161 = *(_QWORD *)(v153 - 8);
  MEMORY[0x1E0C80A78](v153);
  v16 = (char *)&v127 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v149 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v146 = (char *)&v127 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for Siri_Nlu_External_Span();
  v151 = *(_QWORD *)(v154 - 8);
  v19 = MEMORY[0x1E0C80A78](v154);
  v131 = (char *)&v127 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v158 = (char *)&v127 - v22;
  MEMORY[0x1E0C80A78](v21);
  v157 = (char *)&v127 - v23;
  v24 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  v25 = *(_QWORD *)(v24 - 8);
  MEMORY[0x1E0C80A78](v24);
  v27 = (char *)&v127 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = *(_QWORD *)(Siri_Nlu_External_Span.matcherNames.getter() + 16);
  swift_bridgeObjectRelease();
  if (!v28)
    return MEMORY[0x1E0DEE9D8];
  v159 = v24;
  v137 = (char *)v17;
  v127 = v3;
  v128 = a2;
  v129 = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Siri_Nlu_External_Span.MatcherName>);
  v29 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  v30 = *(_QWORD *)(v29 - 8);
  v31 = *(_QWORD *)(v30 + 72);
  v32 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
  v33 = swift_allocObject();
  *(_OWORD *)(v33 + 16) = xmmword_1C24FB7E0;
  v34 = v33 + v32;
  v35 = *(void (**)(unint64_t, _QWORD, uint64_t))(v30 + 104);
  v35(v34, *MEMORY[0x1E0D9F008], v29);
  v35(v34 + v31, *MEMORY[0x1E0D9F018], v29);
  v36 = specialized Set.init(_nonEmptyArrayLiteral:)(v33);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v37 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  v38 = Siri_Nlu_External_Span.matcherNames.getter();
  v39 = 0;
  v40 = specialized _ArrayProtocol.filter(_:)(v38, v36);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v148 = *(_QWORD *)(v40 + 16);
  if (!v148)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v160 = v37;
  type metadata accessor for UsoEntityBuilder_common_ReferenceType();
  swift_allocObject();
  v41 = UsoEntityBuilder_common_ReferenceType.init()();
  v42 = v159;
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v27, *MEMORY[0x1E0DA1E60], v159);
  MEMORY[0x1C3BBD228](v27);
  v43 = ((__n128 (*)(char *, uint64_t))*(_QWORD *)(v25 + 8))(v27, v42);
  v44 = 0;
  v45 = v151;
  v147 = v40 + ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80));
  v43.n128_u64[0] = 136315138;
  v139 = v43;
  v138 = MEMORY[0x1E0DEE9B8] + 8;
  v46 = v153;
  v47 = v154;
  v152 = v41;
  v48 = v137;
  v49 = (uint64_t)v146;
  v145 = v40;
  while (1)
  {
    if (v44 >= *(_QWORD *)(v40 + 16))
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    v155 = *(_QWORD *)(v45 + 72);
    v150 = v44;
    v156 = *(void (**)(char *, unint64_t, uint64_t))(v45 + 16);
    v156(v157, v147 + v155 * v44, v47);
    Siri_Nlu_External_Span.usoGraph.getter();
    v50 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    if (v39)
    {
      (*(void (**)(uint64_t, char *))(v149 + 8))(v49, v48);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v51 = type metadata accessor for Logger();
      __swift_project_value_buffer(v51, (uint64_t)static Logger.pommes);
      v52 = v39;
      v53 = v39;
      v54 = Logger.logObject.getter();
      v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        v56 = swift_slowAlloc();
        v57 = swift_slowAlloc();
        v162 = (uint64_t)v39;
        v163 = (_QWORD *)v57;
        *(_DWORD *)v56 = v139.n128_u32[0];
        v58 = v39;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v59 = String.init<A>(describing:)();
        *(_QWORD *)(v56 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, (uint64_t *)&v163);
        v46 = v153;
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v54, v55, "Skipping span due to error: %s", (uint8_t *)v56, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v57, -1, -1);
        MEMORY[0x1C3BBFF64](v56, -1, -1);

      }
      else
      {

      }
      (*(void (**)(char *, uint64_t))(v45 + 8))(v157, v47);
      v39 = 0;
      v40 = v145;
      v49 = (uint64_t)v146;
      goto LABEL_6;
    }
    v61 = v50;
    (*(void (**)(uint64_t, char *))(v149 + 8))(v49, v48);
    v62 = static UsoConversionUtils.extractFirstEntityFromGraph(graph:)();
    if (!v62)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v157, v47);
      swift_release();
      goto LABEL_6;
    }
    v142 = v61;
    v143 = 0;
    v141 = v62;
    v63 = UsoEntity.usoIdentifiers.getter();
    v64 = *(_QWORD *)(v63 + 16);
    v140 = v63;
    if (v64)
      break;
LABEL_34:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v157, v47);
    v48 = v137;
    v40 = v145;
    v49 = (uint64_t)v146;
    v39 = v143;
LABEL_6:
    v44 = v150 + 1;
    if (v150 + 1 == v148)
    {
      swift_bridgeObjectRelease();
      type metadata accessor for UsoEntityBuilder_uso_NoEntity();
      swift_allocObject();
      v49 = UsoEntityBuilder_uso_NoEntity.init()();
      swift_retain();
      dispatch thunk of UsoEntityBuilderGlobalArgs.setUsoReferenceType(value:)();
      swift_release();
      v88 = MEMORY[0x1C3BBCEB0](v49);
      if (v88)
      {
        v48 = (char *)v88;
        if (one-time initialization token for pommes == -1)
        {
LABEL_38:
          v89 = type metadata accessor for Logger();
          __swift_project_value_buffer(v89, (uint64_t)static Logger.pommes);
          swift_retain_n();
          v90 = Logger.logObject.getter();
          v91 = static os_log_type_t.debug.getter();
          v92 = os_log_type_enabled(v90, v91);
          v159 = v49;
          if (v92)
          {
            v93 = (uint8_t *)swift_slowAlloc();
            v94 = swift_slowAlloc();
            v163 = (_QWORD *)v94;
            *(_DWORD *)v93 = v139.n128_u32[0];
            v95 = type metadata accessor for UsoBuilderOptions();
            v96 = (uint64_t)v130;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v95 - 8) + 56))(v130, 1, 1, v95);
            static UsoBuilderConversionUtils.convertEntityToRootedEntityGraph(entity:options:)();
            outlined destroy of MediaUserStateCenter?(v96, (uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
            v97 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
            v99 = v98;
            v45 = v151;
            swift_release();
            v162 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v99, (uint64_t *)&v163);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_release_n();
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C2356000, v90, v91, "Created entity for SRR: %s", v93, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v94, -1, -1);
            MEMORY[0x1C3BBFF64](v93, -1, -1);

          }
          else
          {

            swift_release_n();
          }
          v101 = (uint64_t)v136;
          v102 = (char *)MEMORY[0x1E0DEE9D8];
          v103 = specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(v127, 0, (uint64_t)v48, v128, v129);
          if (v103)
            v104 = (char *)v103;
          else
            v104 = v102;
          v105 = v48;
          v106 = *((_QWORD *)v104 + 2);
          if (v106)
          {
            v158 = v105;
            v161 = type metadata accessor for RREntity();
            v107 = *(_QWORD *)(v161 - 8);
            v108 = &v104[(*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80)];
            v109 = *(_QWORD *)(v107 + 72);
            v157 = v104;
            swift_bridgeObjectRetain();
            v100 = MEMORY[0x1E0DEE9D8];
            do
            {
              v110 = RREntity.id.getter();
              v112 = v160;
              if (*(_QWORD *)(v160 + 16)
                && (v113 = specialized __RawDictionaryStorage.find<A>(_:)(v110, v111), (v114 & 1) != 0))
              {
                v156((char *)v101, *(_QWORD *)(v112 + 56) + v113 * v155, v154);
                v115 = 0;
              }
              else
              {
                v115 = 1;
              }
              v116 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
              v117 = v45;
              v118 = v154;
              v116(v101, v115, 1, v154);
              swift_bridgeObjectRelease();
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v101, 1, v118) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for Siri_Nlu_External_Span?);
                v45 = v117;
              }
              else
              {
                v119 = *(void (**)(char *, uint64_t, uint64_t))(v117 + 32);
                v120 = v131;
                v119(v131, v101, v118);
                v121 = (uint64_t)v133;
                v122 = &v133[*(int *)(v135 + 48)];
                v119(v133, (uint64_t)v120, v118);
                (*(void (**)(char *, char *, uint64_t))(v107 + 16))(v122, v108, v161);
                v123 = v132;
                outlined init with take of (Siri_Nlu_External_Span, RREntity)(v121, v132);
                outlined init with take of (Siri_Nlu_External_Span, RREntity)(v123, v144);
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                  v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v100 + 16) + 1, 1, v100);
                v125 = *(_QWORD *)(v100 + 16);
                v124 = *(_QWORD *)(v100 + 24);
                v45 = v151;
                if (v125 >= v124 >> 1)
                  v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, v125 + 1, 1, v100);
                *(_QWORD *)(v100 + 16) = v125 + 1;
                outlined init with take of (Siri_Nlu_External_Span, RREntity)(v144, v100+ ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80))+ *(_QWORD *)(v134 + 72) * v125);
                v101 = (uint64_t)v136;
              }
              v108 += v109;
              --v106;
            }
            while (v106);
            swift_release();
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_release();
            swift_release();
            swift_release();
            v100 = MEMORY[0x1E0DEE9D8];
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v100;
        }
LABEL_68:
        swift_once();
        goto LABEL_38;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return MEMORY[0x1E0DEE9D8];
    }
  }
  v65 = v63 + ((*(unsigned __int8 *)(v161 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80));
  v159 = *(_QWORD *)(v161 + 72);
  v48 = *(char **)(v161 + 16);
  ((void (*)(char *, unint64_t, uint64_t))v48)(v16, v65, v46);
  while (1)
  {
    dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
    v67 = UsoIdentifier.namespace.getter();
    if (!v68)
      goto LABEL_18;
    if (v67 == 0x64695F6D657469 && v68 == 0xE700000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v69 & 1) == 0)
        goto LABEL_18;
    }
    v70 = UsoIdentifier.value.getter();
    v49 = v71;
    v156(v158, (unint64_t)v157, v47);
    v72 = v160;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v163 = (_QWORD *)v72;
    v75 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v49);
    v76 = *(_QWORD *)(v72 + 16);
    v77 = (v74 & 1) == 0;
    v78 = v76 + v77;
    if (__OFADD__(v76, v77))
    {
      __break(1u);
LABEL_66:
      __break(1u);
      goto LABEL_67;
    }
    v79 = v74;
    if (*(_QWORD *)(v72 + 24) >= v78)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        specialized _NativeDictionary.copy()();
      goto LABEL_31;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v78, isUniquelyReferenced_nonNull_native);
    v80 = specialized __RawDictionaryStorage.find<A>(_:)(v70, v49);
    if ((v79 & 1) != (v81 & 1))
      break;
    v75 = v80;
LABEL_31:
    v82 = v163;
    if ((v79 & 1) != 0)
    {
      v66 = v163[7] + v75 * v155;
      v45 = v151;
      v47 = v154;
      (*(void (**)(unint64_t, char *, uint64_t))(v151 + 40))(v66, v158, v154);
    }
    else
    {
      v163[(v75 >> 6) + 8] |= 1 << v75;
      v83 = (uint64_t *)(v82[6] + 16 * v75);
      *v83 = v70;
      v83[1] = v49;
      v84 = v82[7] + v75 * v155;
      v45 = v151;
      v47 = v154;
      (*(void (**)(unint64_t, char *, uint64_t))(v151 + 32))(v84, v158, v154);
      v85 = v82[2];
      v86 = __OFADD__(v85, 1);
      v87 = v85 + 1;
      if (v86)
        goto LABEL_66;
      v82[2] = v87;
      swift_bridgeObjectRetain();
    }
    v160 = (uint64_t)v163;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v46 = v153;
LABEL_18:
    (*(void (**)(char *, uint64_t))(v161 + 8))(v16, v46);
    v65 += v159;
    if (!--v64)
      goto LABEL_34;
    ((void (*)(char *, unint64_t, uint64_t))v48)(v16, v65, v46);
  }
  result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t outlined destroy of Siri_Nlu_External_DelegatedUserDialogAct?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance WholeHomeAudioPreflightClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

void WholeHomeAudioPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t inited;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  int64_t v45;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v47;
  int64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  int64_t v57;
  uint64_t v58;
  _QWORD *v59;
  int64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  NSObject *v79;
  os_log_type_t v80;
  _BOOL4 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_QWORD *__return_ptr, uint64_t *);
  uint64_t v87;
  _QWORD *v88;
  _QWORD *v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  _QWORD *v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  uint64_t v127;
  char *v128;
  uint64_t v129;
  void (*v130)(char *, unint64_t, uint64_t);
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  _QWORD v142[4];
  _QWORD v143[4];
  uint64_t v144[3];

  v120 = a2;
  v4 = 0;
  v113 = *v2;
  v114 = type metadata accessor for PommesSearchReason();
  v112 = *(_QWORD *)(v114 - 8);
  MEMORY[0x1E0C80A78](v114);
  v110 = (uint64_t)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v6);
  v109 = (uint64_t)&v107 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v137 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v136 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137);
  v9 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v135 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v134 = *(_QWORD *)(v135 - 8);
  MEMORY[0x1E0C80A78](v135);
  v133 = (char *)&v107 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v107 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(_:)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FBDD0;
  v16 = swift_allocObject();
  *(_QWORD *)(v16 + 16) = partial apply for implicit closure #2 in implicit closure #1 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(_QWORD *)(v16 + 24) = v2;
  *(_QWORD *)(inited + 32) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  v119 = inited + 32;
  *(_QWORD *)(inited + 40) = v16;
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = partial apply for implicit closure #4 in implicit closure #3 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(_QWORD *)(v17 + 24) = v2;
  *(_QWORD *)(inited + 48) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  *(_QWORD *)(inited + 56) = v17;
  v18 = swift_allocObject();
  *(_QWORD *)(v18 + 16) = partial apply for implicit closure #6 in implicit closure #5 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(_QWORD *)(v18 + 24) = v2;
  *(_QWORD *)(inited + 64) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  *(_QWORD *)(inited + 72) = v18;
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = partial apply for implicit closure #8 in implicit closure #7 in WholeHomeAudioPreflightClient.handle(pommesSearchRequest:);
  *(_QWORD *)(v19 + 24) = v2;
  *(_QWORD *)(inited + 80) = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed PommesUsoTask) -> (@unowned Bool);
  *(_QWORD *)(inited + 88) = v19;
  v108 = type metadata accessor for PommesSearchRequest(0);
  v20 = *(int *)(v108 + 76);
  v111 = a1;
  v21 = *(_QWORD *)(a1 + v20);
  v22 = *(_QWORD *)(v21 + 16);
  v122 = inited;
  v118 = v22;
  if (!v22)
  {
    swift_retain_n();
    v67 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_59:
    v68 = v67[2];
    if (!v68)
    {
      swift_bridgeObjectRelease();
LABEL_93:
      swift_setDeallocating();
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
      swift_arrayDestroy();
      goto LABEL_94;
    }
    v69 = v67 + 4;
    v123 = v67;
    swift_bridgeObjectRetain();
    v70 = 0;
    v138 = inited + 40;
    v141 = MEMORY[0x1E0DEE9B8] + 8;
    *(_QWORD *)&v71 = 136315138;
    v137 = v71;
    v139 = v68;
    while (1)
    {
      v72 = &v69[3 * v70];
      v74 = *v72;
      v73 = v72[1];
      v75 = v72[2];
      static UsoTask_CodegenConverter.convert(task:)();
      outlined init with copy of MediaUserStateCenter?((uint64_t)v144, (uint64_t)v143, (uint64_t *)&demangling cache variable for type metadata for Any?);
      if (!v143[3])
        break;
      type metadata accessor for UsoTask_play_common_MediaItem();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_68;
      v76 = v142[0];
      outlined init with take of Any?((uint64_t)v144, (uint64_t)v143);
      if (v76)
      {
        swift_release();
        outlined destroy of MediaUserStateCenter?((uint64_t)v143, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_72:
        if (one-time initialization token for pommes != -1)
          swift_once();
        v77 = type metadata accessor for Logger();
        v78 = (_QWORD *)__swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        v79 = Logger.logObject.getter();
        v80 = static os_log_type_t.debug.getter();
        v81 = os_log_type_enabled(v79, v80);
        v140 = v78;
        if (v81)
        {
          v82 = swift_slowAlloc();
          v83 = swift_slowAlloc();
          v144[0] = v83;
          *(_DWORD *)v82 = v137;
          swift_bridgeObjectRetain();
          *(_QWORD *)(v82 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v75, v144);
          swift_release_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C2356000, v79, v80, "Checking task:\n%s", (uint8_t *)v82, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v83, -1, -1);
          MEMORY[0x1C3BBFF64](v82, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
        v84 = *(_QWORD *)(v122 + 16);
        if (v84)
        {
          swift_bridgeObjectRetain();
          v85 = v138;
          while (1)
          {
            v86 = *(void (**)(_QWORD *__return_ptr, uint64_t *))(v85 - 8);
            v144[0] = v74;
            v144[1] = v73;
            v144[2] = v75;
            swift_retain();
            v86(v143, v144);
            swift_release();
            if ((v143[0] & 1) != 0)
              break;
            v85 += 16;
            if (!--v84)
            {
              swift_bridgeObjectRelease();
              goto LABEL_61;
            }
          }
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          swift_setDeallocating();
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
          swift_arrayDestroy();
          v97 = v111;
          v98 = (uint64_t *)(v111 + *(int *)(v108 + 32));
          v99 = *v98;
          v100 = v98[1];
          v101 = v109;
          PommesSearchRequest.pommesCandidateId.getter(v109);
          v102 = type metadata accessor for PommesCandidateId();
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v102 - 8) + 56))(v101, 0, 1, v102);
          v103 = v110;
          default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v110);
          v104 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v97, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v99, v100, v101, v103, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD00000000000001DLL, 0x80000001C24FC850);
          (*(void (**)(uint64_t, uint64_t))(v112 + 8))(v103, v114);
          outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for PommesCandidateId?);
          if (!v104)
          {
            v90 = Logger.logObject.getter();
            v105 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v90, v105))
            {
              v106 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v106 = 0;
              _os_log_impl(&dword_1C2356000, v90, v105, "WholeHomeAudioPreflightClient#ignore could not build PommesResponse with given parameters", v106, 2u);
              MEMORY[0x1C3BBFF64](v106, -1, -1);
            }
LABEL_87:

            goto LABEL_94;
          }
          goto LABEL_95;
        }
LABEL_61:
        v68 = v139;
        goto LABEL_62;
      }
LABEL_69:
      outlined init with take of Any?((uint64_t)v143, (uint64_t)v142);
      if (!v142[3])
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v142, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_62;
      }
      type metadata accessor for UsoTask_update_common_MediaItem();
      if ((swift_dynamicCast() & 1) != 0)
      {
        swift_release();
        goto LABEL_72;
      }
LABEL_62:
      if (++v70 == v68)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_93;
      }
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v143, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_68:
    outlined init with take of Any?((uint64_t)v144, (uint64_t)v143);
    goto LABEL_69;
  }
  v23 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  v24 = v21 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
  v25 = *(_QWORD *)(v23 + 72);
  swift_retain_n();
  v115 = v21;
  swift_bridgeObjectRetain_n();
  v26 = 0;
  v123 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v116 = v25;
  v126 = v9;
  v125 = v11;
  v124 = v12;
  v128 = v14;
  v127 = v24;
LABEL_3:
  v121 = v26;
  v27 = Siri_Nlu_External_Span.matcherNames.getter();
  v129 = *(_QWORD *)(v27 + 16);
  if (!v129)
  {
    v141 = (uint64_t)v4;
    swift_bridgeObjectRelease();
    v4 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_38;
  }
  v132 = v27 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  v117 = v27;
  swift_bridgeObjectRetain();
  v28 = 0;
  v131 = *(_QWORD *)(v12 + 72);
  v130 = *(void (**)(char *, unint64_t, uint64_t))(v12 + 16);
  v140 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v130(v14, v132, v11);
  while (1)
  {
    v29 = v133;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v134 + 8))(v29, v135);
    v30 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    if (v4)
      break;
    v31 = v30;
    v139 = v28;
    (*(void (**)(char *, _QWORD))(v136 + 8))(v9, v137);
    v141 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
    v33 = v32;
    v34 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v34 >> 62)
    {
      swift_bridgeObjectRetain();
      v35 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v35)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v37 = MEMORY[0x1E0DEE9D8];
        goto LABEL_22;
      }
    }
    else
    {
      v35 = *(_QWORD *)((v34 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v35)
        goto LABEL_21;
    }
    v138 = v31;
    v144[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v35 & ~(v35 >> 63), 0);
    if (v35 < 0)
      goto LABEL_98;
    v36 = 0;
    v37 = v144[0];
    do
    {
      if ((v34 & 0xC000000000000001) != 0)
      {
        v38 = MEMORY[0x1C3BBF3F4](v36, v34);
      }
      else
      {
        v38 = *(_QWORD *)(v34 + 8 * v36 + 32);
        swift_retain();
      }
      swift_bridgeObjectRetain();
      v144[0] = v37;
      v40 = *(_QWORD *)(v37 + 16);
      v39 = *(_QWORD *)(v37 + 24);
      if (v40 >= v39 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v39 > 1, v40 + 1, 1);
        v37 = v144[0];
      }
      ++v36;
      *(_QWORD *)(v37 + 16) = v40 + 1;
      v41 = (_QWORD *)(v37 + 24 * v40);
      v42 = v141;
      v41[4] = v38;
      v41[5] = v42;
      v41[6] = v33;
    }
    while (v35 != v36);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v9 = v126;
    v11 = v125;
    v12 = v124;
LABEL_22:
    v14 = v128;
    (*(void (**)(char *, uint64_t))(v12 + 8))(v128, v11);
    v43 = *(_QWORD *)(v37 + 16);
    v44 = v140[2];
    v45 = v44 + v43;
    if (__OFADD__(v44, v43))
    {
      __break(1u);
LABEL_97:
      __break(1u);
LABEL_98:
      __break(1u);
LABEL_99:
      __break(1u);
LABEL_100:
      __break(1u);
LABEL_101:
      __break(1u);
LABEL_102:
      __break(1u);
      goto LABEL_103;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v47 = v140;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v45 > v140[3] >> 1)
    {
      if (v44 <= v45)
        v48 = v44 + v43;
      else
        v48 = v44;
      v47 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v48, 1, v140);
    }
    v49 = *(_QWORD *)(v37 + 16);
    v140 = v47;
    if (v49)
    {
      v50 = v47[2];
      if ((v47[3] >> 1) - v50 < v43)
        goto LABEL_99;
      v51 = (unint64_t)&v47[3 * v50 + 4];
      if (v37 + 32 < v51 + 24 * v43 && v51 < v37 + 32 + 24 * v43)
        goto LABEL_106;
      swift_arrayInitWithCopy();
      if (v43)
      {
        v52 = v140[2];
        v53 = __OFADD__(v52, v43);
        v54 = v52 + v43;
        if (v53)
          goto LABEL_100;
        v140[2] = v54;
      }
    }
    else if (v43)
    {
      goto LABEL_97;
    }
    v28 = v139 + 1;
    swift_bridgeObjectRelease();
    if (v28 == v129)
    {
      v141 = 0;
      swift_bridgeObjectRelease_n();
      inited = v122;
      v4 = v140;
LABEL_38:
      v55 = v4[2];
      v56 = v123[2];
      v57 = v56 + v55;
      if (__OFADD__(v56, v55))
        goto LABEL_101;
      v58 = swift_isUniquelyReferenced_nonNull_native();
      v59 = v123;
      if ((v58 & 1) == 0 || v57 > v123[3] >> 1)
      {
        if (v56 <= v57)
          v60 = v56 + v55;
        else
          v60 = v56;
        v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)v58, v60, 1, v123);
      }
      v61 = v4[2];
      v123 = v59;
      if (!v61)
      {
        v4 = (_QWORD *)v141;
        if (!v55)
          goto LABEL_56;
        goto LABEL_102;
      }
      v62 = v59[2];
      if ((v59[3] >> 1) - v62 < v55)
      {
        __break(1u);
        goto LABEL_105;
      }
      v63 = (unint64_t)&v59[3 * v62 + 4];
      if ((unint64_t)(v4 + 4) < v63 + 24 * v55 && v63 < (unint64_t)&v4[3 * v55 + 4])
      {
LABEL_106:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      swift_arrayInitWithCopy();
      v4 = (_QWORD *)v141;
      if (v55)
      {
        v65 = v123[2];
        v53 = __OFADD__(v65, v55);
        v66 = v65 + v55;
        if (!v53)
        {
          v123[2] = v66;
          goto LABEL_56;
        }
LABEL_105:
        __break(1u);
        goto LABEL_106;
      }
LABEL_56:
      v26 = v121 + 1;
      swift_bridgeObjectRelease();
      if (v26 == v118)
      {
        swift_bridgeObjectRelease_n();
        v67 = v123;
        goto LABEL_59;
      }
      goto LABEL_3;
    }
    v130(v14, v132 + v131 * v28, v11);
  }
  (*(void (**)(char *, _QWORD))(v136 + 8))(v9, v137);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_setDeallocating();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for ());
  swift_arrayDestroy();
  swift_bridgeObjectRelease();
  if (one-time initialization token for pommes == -1)
    goto LABEL_84;
LABEL_103:
  swift_once();
LABEL_84:
  v87 = type metadata accessor for Logger();
  __swift_project_value_buffer(v87, (uint64_t)static Logger.pommes);
  v88 = v4;
  v89 = v4;
  v90 = Logger.logObject.getter();
  v91 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v90, v91))
  {

    goto LABEL_87;
  }
  v92 = (uint8_t *)swift_slowAlloc();
  v93 = swift_slowAlloc();
  v144[0] = v93;
  *(_DWORD *)v92 = 136315138;
  v143[0] = v4;
  v94 = v4;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v95 = String.init<A>(describing:)();
  v143[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v95, v96, v144);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1C2356000, v90, v91, "ConversionUtils.convertUserDialogActToTasks error: %s", v92, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v93, -1, -1);
  MEMORY[0x1C3BBFF64](v92, -1, -1);

LABEL_94:
  v104 = 0;
LABEL_95:
  *v120 = v104;
}

uint64_t protocol witness for PommesSearchPreflightHandling.handle(pommesSearchRequest:) in conformance PlayRadioStationPreflightClient()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 88))();
}

void PlayRadioStationPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  id v59;
  id v60;
  NSObject *v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  void (*v73)(char *, uint64_t, uint64_t);
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  char *v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  NSObject *v88;
  os_log_type_t v89;
  uint8_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;
  uint64_t *v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  char *v125;
  void (*v126)(char *, uint64_t, uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135[4];
  unint64_t v136;
  uint64_t v137;

  v5 = *v2;
  v6 = type metadata accessor for PommesSearchReason();
  v122 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v121 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v8);
  v120 = (uint64_t)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v109 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v108 = *(_QWORD *)(v109 - 8);
  MEMORY[0x1E0C80A78](v109);
  v107 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v11);
  v117 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v111 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v110 = *(_QWORD *)(v111 - 8);
  v13 = MEMORY[0x1E0C80A78](v111);
  v106 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v114 = (char *)&v104 - v15;
  v16 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v134 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v112 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v130 = (char *)&v104 - v23;
  v119 = type metadata accessor for PommesSearchRequest(0);
  v24 = *(int *)(v119 + 76);
  v123 = a1;
  v118 = v24;
  v25 = *(_QWORD *)(a1 + v24);
  v26 = MEMORY[0x1E0DEE9D8];
  v137 = MEMORY[0x1E0DEE9D8];
  v27 = *(char **)(v25 + 16);
  v131 = v19;
  v125 = v27;
  if (!v27)
  {
LABEL_23:
    v42 = v124;
    swift_retain();
    v43 = specialized Sequence.first(where:)(v26, v42);
    swift_bridgeObjectRelease();
    swift_release();
    if (v43)
    {
      v113 = v6;
      v44 = one-time initialization token for pommes;
      swift_retain();
      if (v44 != -1)
        swift_once();
      v132 = 0;
      v45 = type metadata accessor for Logger();
      v46 = __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
      swift_retain_n();
      v133 = v46;
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v47, v48))
      {
        v49 = swift_slowAlloc();
        v105 = v5;
        v50 = v49;
        v51 = swift_slowAlloc();
        v129 = v20;
        v52 = v51;
        v135[0] = v51;
        *(_DWORD *)v50 = 136315394;
        v53 = UsoTask.verbString.getter();
        v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v53, v54, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v50 + 12) = 2080;
        v55 = UsoTask.baseEntityAsString.getter();
        v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, v56, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v47, v48, "PlayRadioStationPreflightClient matched task: %s::%s", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        v57 = v52;
        v20 = v129;
        MEMORY[0x1C3BBFF64](v57, -1, -1);
        MEMORY[0x1C3BBFF64](v50, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v69 = (uint64_t)v117;
      v70 = v123;
      v71 = *(_QWORD *)(v123 + v118);
      if (*(_QWORD *)(v71 + 16))
      {
        v72 = v71 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
        v73 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
        v74 = v112;
        v75 = v20;
        v76 = v131;
        v73(v112, v72, v131);
        v77 = Siri_Nlu_External_Span.matcherNames.getter();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v74, v76);
        if (*(_QWORD *)(v77 + 16))
        {
          v78 = v134;
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v134 + 16))(v69, v77 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80)), v16);
          v79 = 0;
        }
        else
        {
          v79 = 1;
          v78 = v134;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v69, v79, 1, v16);
        swift_bridgeObjectRelease();
        v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v78 + 48))(v69, 1, v16);
        v81 = v114;
        if (v80 == 1)
        {
          outlined destroy of MediaUserStateCenter?(v69, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        }
        else
        {
          v82 = v69;
          v83 = v107;
          Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
          (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v82, v16);
          v84 = v106;
          Siri_Nlu_External_UserStatedTask.task.getter();
          (*(void (**)(char *, uint64_t))(v108 + 8))(v83, v109);
          v85 = v110;
          v86 = v111;
          (*(void (**)(char *, char *, uint64_t))(v110 + 32))(v81, v84, v111);
          v87 = v132;
          static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
          if (v87)
          {

            (*(void (**)(char *, uint64_t))(v85 + 8))(v81, v86);
          }
          else
          {
            swift_retain_n();
            v88 = Logger.logObject.getter();
            v89 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v88, v89))
            {
              v90 = (uint8_t *)swift_slowAlloc();
              v91 = swift_slowAlloc();
              v134 = v43;
              v92 = v91;
              v135[0] = v91;
              *(_DWORD *)v90 = 136315138;
              v93 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
              v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v135);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              v70 = v123;
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C2356000, v88, v89, "Likely matched graph: %s", v90, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1C3BBFF64](v92, -1, -1);
              MEMORY[0x1C3BBFF64](v90, -1, -1);
              swift_release();
            }
            else
            {
              swift_release_n();
            }

            (*(void (**)(char *, uint64_t))(v110 + 8))(v114, v111);
          }
        }
      }
      v95 = (uint64_t *)(v70 + *(int *)(v119 + 32));
      v96 = *v95;
      v97 = v95[1];
      v98 = v120;
      PommesSearchRequest.pommesCandidateId.getter(v120);
      v99 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v98, 0, 1, v99);
      v100 = v121;
      default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v121);
      v68 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v70, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v96, v97, v98, v100, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD00000000000001FLL, 0x80000001C24FBC40);
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v100, v113);
      outlined destroy of MediaUserStateCenter?(v98, &demangling cache variable for type metadata for PommesCandidateId?);
      if (v68)
      {
        swift_release_n();
        goto LABEL_51;
      }
      v101 = Logger.logObject.getter();
      v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v103 = 0;
        _os_log_impl(&dword_1C2356000, v101, v102, "PlayRadioStationPreflightClient#ignore could not build PommesResponse with given parameters", v103, 2u);
        MEMORY[0x1C3BBFF64](v103, -1, -1);
        swift_release_n();

      }
      else
      {

        swift_release_n();
      }
    }
    v68 = 0;
    goto LABEL_51;
  }
  v113 = v6;
  v105 = v5;
  v116 = a2;
  v128 = v25 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v129 = v20;
  v28 = *(_QWORD *)(v20 + 72);
  v126 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v127 = v28;
  v115 = v25;
  swift_bridgeObjectRetain_n();
  v29 = 0;
  v133 = MEMORY[0x1E0DEE9B8] + 8;
  v30 = v130;
  while (1)
  {
    v132 = v29;
    v126(v30, v128 + v127 * (_QWORD)v29, v19);
    v31 = Siri_Nlu_External_Span.matcherNames.getter();
    v135[0] = v26;
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v33 = v134;
      v34 = v31 + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
      swift_bridgeObjectRetain();
      v35 = *(_QWORD *)(v33 + 72);
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
      do
      {
        v36(v18, v34, v16);
        v37 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        (*(void (**)(char *, uint64_t))(v134 + 8))(v18, v16);
        specialized Array.append<A>(contentsOf:)(v37, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
        v34 += v35;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease_n();
      v38 = v135[0];
      v30 = v130;
      v19 = v131;
      v26 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      swift_bridgeObjectRelease();
      v38 = v26;
    }
    v136 = v26;
    if (!(v38 >> 62))
    {
      v39 = *(_QWORD *)((v38 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v39)
        break;
      goto LABEL_20;
    }
    swift_bridgeObjectRetain();
    v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v39)
      break;
LABEL_20:
    swift_bridgeObjectRelease();
    v26 = MEMORY[0x1E0DEE9D8];
    v41 = MEMORY[0x1E0DEE9D8];
LABEL_21:
    v29 = v132 + 1;
    (*(void (**)(char *, uint64_t))(v129 + 8))(v30, v19);
    specialized Array.append<A>(contentsOf:)(v41, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
    if (v29 == v125)
    {
      swift_bridgeObjectRelease_n();
      v26 = v137;
      a2 = v116;
      v5 = v105;
      v6 = v113;
      v20 = v129;
      goto LABEL_23;
    }
  }
  if (v39 >= 1)
  {
    v40 = 0;
    while (1)
    {
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      if (v135[3])
      {
        type metadata accessor for UsoTask_play_common_RadioStation();
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_release();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v135, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      swift_release();
LABEL_14:
      if (v39 == ++v40)
      {
        swift_bridgeObjectRelease();
        v41 = v136;
        v19 = v131;
        v26 = MEMORY[0x1E0DEE9D8];
        goto LABEL_21;
      }
    }
  }
  __break(1u);
  swift_once();
  v58 = type metadata accessor for Logger();
  __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
  v59 = 0;
  v60 = 0;
  v61 = Logger.logObject.getter();
  v62 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v61, v62))
  {
    v63 = (uint8_t *)swift_slowAlloc();
    v64 = swift_slowAlloc();
    v135[0] = v64;
    *(_DWORD *)v63 = 136315138;
    v137 = 0;
    v65 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v66 = String.init<A>(describing:)();
    v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v66, v67, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v61, v62, "ConversionUtils.convertUserDialogActToTasks error: %s", v63, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v64, -1, -1);
    MEMORY[0x1C3BBFF64](v63, -1, -1);

  }
  else
  {

  }
  v68 = 0;
  a2 = v116;
LABEL_51:
  *a2 = v68;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  void (*v16)(char *, unint64_t, uint64_t);
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v2 = type metadata accessor for UsoIdentifier();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1 >> 62)
    goto LABEL_25;
  v6 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v6)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_3:
  v7 = 0;
  v8 = a1 & 0xC000000000000001;
  v23 = v6;
  v24 = a1 + 32;
  v26 = a1;
  v22 = a1 & 0xC000000000000001;
  while (1)
  {
    if (v8)
    {
      v9 = MEMORY[0x1C3BBF3F4](v7, a1);
      v10 = __OFADD__(v7++, 1);
      if (v10)
        goto LABEL_24;
    }
    else
    {
      v9 = swift_retain();
      v10 = __OFADD__(v7++, 1);
      if (v10)
      {
LABEL_24:
        __break(1u);
LABEL_25:
        swift_bridgeObjectRetain();
        v6 = _CocoaArrayWrapper.endIndex.getter();
        if (!v6)
          goto LABEL_22;
        goto LABEL_3;
      }
    }
    v11 = v9;
    v12 = dispatch thunk of CodeGenBase.usoIdentifiers.getter();
    v13 = *(_QWORD *)(v12 + 16);
    if (v13)
      break;
    swift_release();
    swift_bridgeObjectRelease();
LABEL_21:
    if (v7 == v6)
      goto LABEL_22;
  }
  v28 = v11;
  v25 = v7;
  v14 = v12 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v27 = v12;
  swift_bridgeObjectRetain();
  v15 = *(_QWORD *)(v3 + 72);
  v16 = *(void (**)(char *, unint64_t, uint64_t))(v3 + 16);
  v16(v5, v14, v2);
  while (1)
  {
    v18 = UsoIdentifier.namespace.getter();
    if (!v19)
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      goto LABEL_12;
    }
    if (v18 == 0x6574736973726570 && v19 == 0xED000064695F746ELL)
      break;
    v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    if ((v17 & 1) != 0)
      goto LABEL_23;
LABEL_12:
    v14 += v15;
    if (!--v13)
    {
      swift_release();
      swift_bridgeObjectRelease_n();
      v7 = v25;
      a1 = v26;
      v8 = v22;
      v6 = v23;
      goto LABEL_21;
    }
    v16(v5, v14, v2);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
LABEL_23:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  return v28;
}

uint64_t specialized Sequence.first(where:)(unint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;

  if (a1 >> 62)
  {
LABEL_15:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4)
      goto LABEL_3;
  }
  else
  {
    v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      v5 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80);
      v6 = 4;
      do
      {
        v7 = v6 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          v8 = MEMORY[0x1C3BBF3F4](v6 - 4, a1);
          v9 = __OFADD__(v7, 1);
          v10 = v6 - 3;
          if (v9)
            goto LABEL_14;
        }
        else
        {
          v8 = *(_QWORD *)(a1 + 8 * v6);
          swift_retain();
          v9 = __OFADD__(v7, 1);
          v10 = v6 - 3;
          if (v9)
          {
LABEL_14:
            __break(1u);
            goto LABEL_15;
          }
        }
        if ((v5(v8) & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return v8;
        }
        swift_release();
        ++v6;
      }
      while (v10 != v4);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

void OfflineMusicPlaybackPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint8_t *v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v49;
  ValueMetadata *v50;
  uint64_t v51;
  void (*v52)(char *, uint64_t, uint64_t, ValueMetadata *);
  uint64_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  const char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  void (*v69)(char *, char *, ValueMetadata *);
  NSObject *v70;
  os_log_type_t v71;
  int v72;
  uint8_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t *v76;
  unint64_t v77;
  unint64_t v78;
  void (*v79)(char *, ValueMetadata *);
  uint8_t *v80;
  void (*v81)(_QWORD, _QWORD, _QWORD);
  uint64_t v82;
  uint64_t v83;
  void (*v84)(_QWORD, _QWORD);
  uint64_t (*v85)(void);
  unsigned __int8 v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  char *v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint8_t *v98;
  uint64_t v99;
  uint64_t v100;
  char v101;
  char v102;
  NSObject *v103;
  os_log_type_t v104;
  uint8_t *v105;
  uint8_t *v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  NSObject *v110;
  os_log_type_t v111;
  uint8_t *v112;
  uint8_t *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  NSObject *v117;
  os_log_type_t v118;
  uint8_t *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  id v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  id v131;
  uint64_t v132;
  uint64_t v133;
  NSObject *v134;
  uint64_t v135;
  _BOOL4 v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t *v139;
  void (*v140)(char *, uint64_t, uint64_t);
  void (*v141)(uint64_t, _QWORD, uint64_t, uint8_t *);
  uint8_t *v142;
  void (*v143)(_QWORD, _QWORD, _QWORD);
  uint64_t v144;
  uint64_t v145;
  void (*v146)(char *, _QWORD, uint64_t, ValueMetadata *);
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  char *v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char *v166;
  uint64_t *v167;
  uint64_t v168;
  char *v169;
  uint64_t v170;
  char *v171;
  uint64_t v172;
  void (*v173)(_QWORD, _QWORD, _QWORD);
  uint64_t v174;
  ValueMetadata *v175;
  unint64_t v176;

  v170 = a1;
  v157 = *v2;
  v4 = type metadata accessor for PommesSearchReason();
  v158 = *(_QWORD *)(v4 - 8);
  v159 = v4;
  MEMORY[0x1E0C80A78](v4);
  v156 = (uint64_t)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x1E0C80A78](v6);
  v153 = (char *)&v138 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_PlaybackSignals();
  MEMORY[0x1E0C80A78](v8);
  v154 = (char *)&v138 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v10);
  v155 = (uint64_t)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v161 = *(_QWORD *)(v168 - 8);
  v12 = MEMORY[0x1E0C80A78](v168);
  v152 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v166 = (char *)&v138 - v14;
  v150 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v149 = *(_QWORD *)(v150 - 8);
  MEMORY[0x1E0C80A78](v150);
  v165 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
  MEMORY[0x1E0C80A78](v16);
  v167 = (uint64_t *)((char *)&v138 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioUnderstanding();
  v163 = *(_QWORD *)(v18 - 8);
  v164 = v18;
  v19 = MEMORY[0x1E0C80A78](v18);
  v162 = (char *)&v138 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v160 = (char *)&v138 - v21;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v138 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v138 - v26;
  v172 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v28 = *(_QWORD *)(v172 - 8);
  v29 = MEMORY[0x1E0C80A78](v172);
  v151 = (char *)&v138 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v138 - v32;
  MEMORY[0x1E0C80A78](v31);
  v169 = (char *)&v138 - v34;
  v35 = type metadata accessor for Siri_Nlu_External_UserParse();
  v36 = *(_QWORD *)(v35 - 8);
  MEMORY[0x1E0C80A78](v35);
  v171 = (char *)&v138 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = &type metadata for FeatureFlag;
  v176 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v38 = swift_allocObject();
  v174 = v38;
  *(_QWORD *)(v38 + 16) = 1;
  *(_QWORD *)(v38 + 24) = 0;
  *(_QWORD *)(v38 + 32) = 0;
  *(_QWORD *)(v38 + 40) = 0;
  *(_BYTE *)(v38 + 48) = 3;
  v39 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
  if ((v39 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v53 = type metadata accessor for Logger();
    __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v54, v55))
      goto LABEL_25;
    v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v56 = 0;
    v57 = "OfflineMusicPlaybackPreflightClient : IGNORED feature flag not enabled";
    goto LABEL_24;
  }
  if ((dispatch thunk of NetworkAvailability.isAvailable.getter() & 1) != 0)
  {
    if ((specialized OfflineMusicPlaybackPreflightClient.userDefaultOverride.getter() & 1) == 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
      v54 = Logger.logObject.getter();
      v55 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v54, v55))
        goto LABEL_25;
      v56 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v56 = 0;
      v57 = "OfflineMusicPlaybackPreflightClient : IGNORED network is available";
      goto LABEL_24;
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v144 = v36;
      v44 = a2;
      v45 = v35;
      v46 = v43;
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_1C2356000, v41, v42, "OfflineMusicPlaybackPreflightClient : User default override network availability check", v43, 2u);
      v47 = v46;
      v35 = v45;
      a2 = v44;
      v36 = v144;
      MEMORY[0x1C3BBFF64](v47, -1, -1);
    }

  }
  v48 = type metadata accessor for PommesSearchRequest(0);
  v49 = *(_QWORD *)(v170 + *(int *)(v48 + 76));
  v50 = (ValueMetadata *)v172;
  if (!*(_QWORD *)(v49 + 16))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v58 = type metadata accessor for Logger();
    __swift_project_value_buffer(v58, (uint64_t)static Logger.pommes);
    v54 = Logger.logObject.getter();
    v55 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v54, v55))
      goto LABEL_25;
    v56 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v56 = 0;
    v57 = "OfflineMusicPlaybackPreflightClient : IGNORED No salient parses";
LABEL_24:
    _os_log_impl(&dword_1C2356000, v54, v55, v57, v56, 2u);
    MEMORY[0x1C3BBFF64](v56, -1, -1);
LABEL_25:

    goto LABEL_26;
  }
  v148 = v48;
  (*(void (**)(char *, unint64_t, uint64_t))(v36 + 16))(v171, v49 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)), v35);
  v51 = Siri_Nlu_External_Span.matcherNames.getter();
  if (*(_QWORD *)(v51 + 16))
  {
    (*(void (**)(char *, unint64_t, ValueMetadata *))(v28 + 16))(v27, v51 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v50);
    v52 = *(void (**)(char *, uint64_t, uint64_t, ValueMetadata *))(v28 + 56);
    v52(v27, 0, 1, v50);
  }
  else
  {
    v52 = *(void (**)(char *, uint64_t, uint64_t, ValueMetadata *))(v28 + 56);
    v52(v27, 1, 1, v50);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, ValueMetadata *))(v28 + 48))(v27, 1, v50) == 1)
  {
    v61 = v36;
    outlined destroy of MediaUserStateCenter?((uint64_t)v27, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v62 = type metadata accessor for Logger();
    __swift_project_value_buffer(v62, (uint64_t)static Logger.pommes);
    v63 = Logger.logObject.getter();
    v64 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v63, v64))
    {
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_1C2356000, v63, v64, "OfflineMusicPlaybackPreflightClient : IGNORED No UDA found for the top salient parse", v65, 2u);
      MEMORY[0x1C3BBFF64](v65, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v171, v35);
    goto LABEL_26;
  }
  v146 = v52;
  v66 = v169;
  (*(void (**)(char *, char *, ValueMetadata *))(v28 + 32))(v169, v27, v50);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v145 = v35;
  v67 = type metadata accessor for Logger();
  v68 = __swift_project_value_buffer(v67, (uint64_t)static Logger.pommes);
  v69 = *(void (**)(char *, char *, ValueMetadata *))(v28 + 16);
  v69(v33, v66, v50);
  v147 = v68;
  v70 = Logger.logObject.getter();
  v71 = static os_log_type_t.debug.getter();
  v72 = v71;
  if (os_log_type_enabled(v70, v71))
  {
    LODWORD(v144) = v72;
    v73 = (uint8_t *)swift_slowAlloc();
    v143 = (void (*)(_QWORD, _QWORD, _QWORD))swift_slowAlloc();
    v173 = v143;
    v142 = v73;
    *(_DWORD *)v73 = 136315138;
    v141 = (void (*)(uint64_t, _QWORD, uint64_t, uint8_t *))(v73 + 4);
    type metadata accessor for SiriNLUTypesPrintUtils();
    v175 = v50;
    v176 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F4B0], MEMORY[0x1E0D9F488]);
    v74 = __swift_allocate_boxed_opaque_existential_1(&v174);
    v69((char *)v74, v33, v50);
    v75 = static SiriNLUTypesPrintUtils.printableProtoObject(object:)();
    v76 = a2;
    v78 = v77;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v174);
    v174 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v78, (uint64_t *)&v173);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    a2 = v76;
    v50 = (ValueMetadata *)v172;
    swift_bridgeObjectRelease();
    v79 = *(void (**)(char *, ValueMetadata *))(v28 + 8);
    v79(v33, v50);
    v80 = v142;
    _os_log_impl(&dword_1C2356000, v70, (os_log_type_t)v144, "OfflineMusicPlaybackPreflightClient : found userDialogAct: %s", v142, 0xCu);
    v81 = v143;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v81, -1, -1);
    MEMORY[0x1C3BBFF64](v80, -1, -1);
  }
  else
  {
    v79 = *(void (**)(char *, ValueMetadata *))(v28 + 8);
    v79(v33, v50);
  }

  type metadata accessor for AudioUsoIntent();
  v69(v25, v169, v50);
  v146(v25, 0, 1, v50);
  v82 = AudioUsoIntent.__allocating_init(userDialogAct:)((uint64_t)v25);
  v84 = (void (*)(_QWORD, _QWORD))v167;
  v83 = v168;
  if (!v82)
  {
    v89 = v36;
    v95 = Logger.logObject.getter();
    v96 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v95, v96))
    {
      v97 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v97 = 0;
      _os_log_impl(&dword_1C2356000, v95, v96, "OfflineMusicPlaybackPreflightClient : IGNORED unable to convert UserDialogAct to AudioUsoIntent", v97, 2u);
      v98 = v97;
      v50 = (ValueMetadata *)v172;
      MEMORY[0x1C3BBFF64](v98, -1, -1);
    }

    goto LABEL_56;
  }
  v143 = (void (*)(_QWORD, _QWORD, _QWORD))v69;
  v85 = *(uint64_t (**)(void))(*(_QWORD *)v82 + 904);
  v146 = (void (*)(char *, _QWORD, uint64_t, ValueMetadata *))v82;
  v86 = v85();
  v88 = (uint64_t)v165;
  v87 = v166;
  if (v86 == 17)
  {
LABEL_42:
    v89 = v36;
    v90 = Logger.logObject.getter();
    v91 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v90, v91))
    {
      v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v92 = 0;
      _os_log_impl(&dword_1C2356000, v90, v91, "OfflineMusicPlaybackPreflightClient : IGNORED non-play verb", v92, 2u);
      MEMORY[0x1C3BBFF64](v92, -1, -1);
    }

    swift_release();
    v93 = v169;
    v94 = v172;
    goto LABEL_57;
  }
  if (CommonAudio.Verb.rawValue.getter(v86) == 2036427888 && v99 == 0xE400000000000000)
  {
    v100 = swift_bridgeObjectRelease();
  }
  else
  {
    v101 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v100 = swift_bridgeObjectRelease();
    if ((v101 & 1) == 0)
      goto LABEL_42;
  }
  v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v146 + 928))(v100);
  v50 = (ValueMetadata *)v172;
  if (v102 == 2)
  {
LABEL_53:
    v89 = v36;
    v103 = Logger.logObject.getter();
    v104 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v103, v104))
    {
      v105 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v105 = 0;
      _os_log_impl(&dword_1C2356000, v103, v104, "OfflineMusicPlaybackPreflightClient : IGNORED baseEntity is not a commonMediaItem", v105, 2u);
      v106 = v105;
      v50 = (ValueMetadata *)v172;
      MEMORY[0x1C3BBFF64](v106, -1, -1);
    }

    swift_release();
LABEL_56:
    v93 = v169;
    v94 = (uint64_t)v50;
LABEL_57:
    v79(v93, (ValueMetadata *)v94);
    (*(void (**)(char *, uint64_t))(v89 + 8))(v171, v145);
    goto LABEL_26;
  }
  if ((v102 & 1) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    v107 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v107 & 1) == 0)
      goto LABEL_53;
  }
  v144 = v36;
  OfflineMusicPlaybackPreflightClient.makeAudioUnderstanding(pommesSearchRequest:)(v84);
  v109 = v163;
  v108 = v164;
  if ((*(unsigned int (**)(void (*)(_QWORD, _QWORD), uint64_t, uint64_t))(v163 + 48))(v84, 1, v164) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v84, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioUnderstanding?);
    v110 = Logger.logObject.getter();
    v111 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v110, v111))
    {
      v112 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v112 = 0;
      _os_log_impl(&dword_1C2356000, v110, v111, "OfflineMusicPlaybackPreflightClient : IGNORED couldn't handle since AudioUnderstanding could not be built", v112, 2u);
      v113 = v112;
      v50 = (ValueMetadata *)v172;
      MEMORY[0x1C3BBFF64](v113, -1, -1);
    }

    swift_release();
    v114 = v169;
    v115 = (uint64_t)v50;
  }
  else
  {
    v139 = a2;
    v116 = (uint64_t)v160;
    (*(void (**)(char *, void (*)(_QWORD, _QWORD), uint64_t))(v109 + 32))(v160, v84, v108);
    v117 = Logger.logObject.getter();
    v118 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v117, v118))
    {
      v119 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v119 = 0;
      _os_log_impl(&dword_1C2356000, v117, v118, "OfflineMusicPlaybackPreflightClient : HANDLING request", v119, 2u);
      MEMORY[0x1C3BBFF64](v119, -1, -1);
    }

    Apple_Parsec_Siri_V2alpha_ClientSignals.init()();
    Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter();
    Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.setter();
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.init()();
    v140 = *(void (**)(char *, uint64_t, uint64_t))(v163 + 16);
    v120 = v164;
    v140(v162, v116, v164);
    Apple_Parsec_Siri_V2alpha_AudioClientComponent.understanding.setter();
    v148 = v170 + *(int *)(v148 + 32);
    v121 = *(_QWORD *)v148;
    v122 = *(_QWORD *)(v148 + 8);
    v123 = v155;
    PommesSearchRequest.pommesCandidateId.getter(v155);
    v142 = (uint8_t *)type metadata accessor for PommesCandidateId();
    v141 = *(void (**)(uint64_t, _QWORD, uint64_t, uint8_t *))(*((_QWORD *)v142 - 1) + 56);
    v141(v123, 0, 1, v142);
    v167 = (uint64_t *)specialized OfflineMusicPlaybackPreflightClient.clientSearch(audioUnderstanding:clientSignals:requestId:pommesCandidateId:)(v116, v88, v121, v122, v123);
    outlined destroy of MediaUserStateCenter?(v123, &demangling cache variable for type metadata for PommesCandidateId?);
    v140(v162, v116, v120);
    Apple_Parsec_Siri_V2alpha_PlaybackSignals.init()();
    (*(void (**)(char *, char *, uint64_t))(v161 + 16))(v152, v87, v83);
    v143(v151, v169, v172);
    v124 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v124 - 8) + 56))(v153, 1, 1, v124);
    v125 = objc_allocWithZone((Class)type metadata accessor for AudioExperience());
    v126 = (void *)AudioExperience.init(serverAudioResults:audioUnderstanding:playbackSignals:internalSignals:pegasusAudioType:launchID:systemExtensionBundleID:boltProxiedBundleID:shouldPerformAppSelection:audioClientComponent:pluginId:queryConfidence:userDialogAct:isGlideEligible:networkAvailableAtRequest:matchingSpans:multiUserContext:)();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v127 = swift_allocObject();
    *(_OWORD *)(v127 + 16) = xmmword_1C24FB5A0;
    *(_QWORD *)(v127 + 32) = v126;
    v174 = v127;
    specialized Array._endMutation()();
    v128 = v174;
    v130 = *(_QWORD *)v148;
    v129 = *(_QWORD *)(v148 + 8);
    v131 = v126;
    v132 = v170;
    PommesSearchRequest.pommesCandidateId.getter(v123);
    v141(v123, 0, 1, v142);
    v133 = v156;
    default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v156);
    v60 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v132, v128, (uint64_t)v167, v130, v129, v123, v133, 0x616964656DLL, 0xE500000000000000, (void (*)(char *, uint64_t))0xD000000000000023, 0x80000001C24FD310);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v158 + 8))(v133, v159);
    outlined destroy of MediaUserStateCenter?(v123, &demangling cache variable for type metadata for PommesCandidateId?);
    if (v60)
    {

      swift_release();
      (*(void (**)(char *, uint64_t))(v161 + 8))(v166, v168);
      (*(void (**)(char *, uint64_t))(v149 + 8))(v165, v150);
      (*(void (**)(char *, uint64_t))(v163 + 8))(v160, v164);
      v79(v169, (ValueMetadata *)v172);
      (*(void (**)(char *, uint64_t))(v144 + 8))(v171, v145);
      a2 = v139;
      goto LABEL_27;
    }
    v134 = Logger.logObject.getter();
    v135 = static os_log_type_t.error.getter();
    v136 = os_log_type_enabled(v134, (os_log_type_t)v135);
    a2 = v139;
    if (v136)
    {
      v137 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v137 = 0;
      _os_log_impl(&dword_1C2356000, v134, (os_log_type_t)v135, "OfflineMusicPlaybackPreflightClient#ignore could not build PommesResponse with given parameters", v137, 2u);
      MEMORY[0x1C3BBFF64](v137, -1, -1);
    }

    swift_release();
    (*(void (**)(char *, uint64_t))(v161 + 8))(v166, v168);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v165, v150);
    (*(void (**)(char *, uint64_t))(v163 + 8))(v160, v164);
    v114 = v169;
    v115 = v172;
  }
  v79(v114, (ValueMetadata *)v115);
  (*(void (**)(char *, uint64_t))(v144 + 8))(v171, v145);
LABEL_26:
  v60 = 0;
LABEL_27:
  *a2 = v60;
}

void NonSiriKitMediaAppLaunchPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  void (*v25)(char *, unint64_t, uint64_t);
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  id v37;
  id v38;
  NSObject *v39;
  os_log_type_t v40;
  uint8_t *v41;
  uint64_t v42;
  id v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint8_t *v60;
  int v61;
  os_log_type_t v62;
  uint8_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t v75;
  uint8_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint8_t *v79;
  uint64_t v80;
  const char *v81;
  unint64_t v82;
  _BOOL4 v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  NSObject *v87;
  os_log_type_t v88;
  uint64_t *v89;
  uint8_t *v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  void (*v106)(char *, uint64_t, uint64_t);
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  uint64_t v113;
  uint64_t v114;
  _BYTE v115[32];
  _QWORD v116[4];
  unint64_t v117;
  unint64_t v118;

  v98 = *v2;
  v5 = type metadata accessor for PommesSearchReason();
  v97 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v95 = (uint64_t)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v7);
  v94 = (uint64_t)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v113 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_UserParse();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v93 = type metadata accessor for PommesSearchRequest(0);
  v16 = *(int *)(v93 + 76);
  v96 = a1;
  v17 = *(_QWORD *)(a1 + v16);
  v18 = MEMORY[0x1E0DEE9D8];
  v118 = MEMORY[0x1E0DEE9D8];
  v102 = *(_QWORD *)(v17 + 16);
  v99 = v5;
  if (!v102)
  {
    swift_bridgeObjectRetain();
    v82 = MEMORY[0x1E0DEE9D8];
LABEL_45:
    swift_bridgeObjectRelease();
    if (v82 >> 62)
    {
      swift_bridgeObjectRetain();
      v85 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v85)
      {
LABEL_47:
        v101 = a2;
        if ((v82 & 0xC000000000000001) != 0)
        {
          v46 = MEMORY[0x1C3BBF3F4](0, v82);
        }
        else
        {
          if (!*(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_92;
          }
          v46 = *(_QWORD *)(v82 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v47 = specialized NonSiriKitMediaAppLaunchPreflightClient.extractBundleId(task:)();
        if (!v48)
        {
          if (one-time initialization token for pommes != -1)
            swift_once();
          v54 = type metadata accessor for Logger();
          __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
          swift_retain_n();
          v39 = Logger.logObject.getter();
          v55 = static os_log_type_t.default.getter();
          if (!os_log_type_enabled(v39, v55))
          {

            swift_release_n();
            goto LABEL_66;
          }
          v56 = (uint8_t *)swift_slowAlloc();
          v57 = swift_slowAlloc();
          v117 = v57;
          *(_DWORD *)v56 = 136315138;
          v116[0] = v46;
          type metadata accessor for UsoTask();
          swift_retain();
          v58 = String.init<A>(describing:)();
          v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v59, (uint64_t *)&v117);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2356000, v39, v55, "NonSiriKitMediaAppLaunchPreflightClient#ignore Received a nil bundle ID from UsoTask %s", v56, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v57, -1, -1);
          v60 = v56;
LABEL_64:
          MEMORY[0x1C3BBFF64](v60, -1, -1);
          swift_release();
          goto LABEL_65;
        }
        v9 = v47;
        v82 = v48;
        if (one-time initialization token for pommes == -1)
        {
LABEL_52:
          v49 = type metadata accessor for Logger();
          __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
          swift_bridgeObjectRetain_n();
          v50 = Logger.logObject.getter();
          v51 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v50, v51))
          {
            v52 = (uint8_t *)swift_slowAlloc();
            v53 = swift_slowAlloc();
            v117 = v53;
            *(_DWORD *)v52 = 136315138;
            swift_bridgeObjectRetain();
            v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v82, (uint64_t *)&v117);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2356000, v50, v51, "Extracted bundle ID: %s", v52, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v53, -1, -1);
            MEMORY[0x1C3BBFF64](v52, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          v61 = NonSiriKitMediaAppLaunchPreflightClient.isMediaIntent(bundleId:)(v9, v82);
          if (v61)
          {
            if (v61 == 2)
            {
              swift_bridgeObjectRelease();
              v39 = Logger.logObject.getter();
              v62 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v39, v62))
              {
                v63 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v63 = 0;
                _os_log_impl(&dword_1C2356000, v39, v62, "NonSiriKitMediaAppLaunchPreflightClient#ignore cannot look up app info, passing to Pegasus", v63, 2u);
                v60 = v63;
                goto LABEL_64;
              }

LABEL_82:
              swift_release();
              goto LABEL_66;
            }
            swift_bridgeObjectRetain();
            v72 = Logger.logObject.getter();
            LOBYTE(v78) = static os_log_type_t.default.getter();
            if (!os_log_type_enabled(v72, (os_log_type_t)v78))
            {

              swift_release();
              swift_bridgeObjectRelease_n();
              goto LABEL_66;
            }
            v79 = (uint8_t *)swift_slowAlloc();
            v80 = swift_slowAlloc();
            v117 = v80;
            *(_DWORD *)v79 = 136315138;
            swift_bridgeObjectRetain();
            v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v82, (uint64_t *)&v117);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            v81 = "NonSiriKitMediaAppLaunchPreflightClient#ignore found media app %s, passing to Pegasus";
          }
          else
          {
            v113 = v9;
            v65 = v96;
            v66 = (uint64_t *)(v96 + *(int *)(v93 + 32));
            v67 = *v66;
            v68 = v66[1];
            v69 = v94;
            PommesSearchRequest.pommesCandidateId.getter(v94);
            v70 = type metadata accessor for PommesCandidateId();
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v70 - 8) + 56))(v69, 0, 1, v70);
            v71 = v95;
            default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v95);
            v64 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v65, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v67, v68, v69, v71, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD000000000000027, 0x80000001C2500C50);
            (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v71, v99);
            outlined destroy of MediaUserStateCenter?(v69, &demangling cache variable for type metadata for PommesCandidateId?);
            swift_bridgeObjectRetain();
            v72 = Logger.logObject.getter();
            if (v64)
            {
              v73 = static os_log_type_t.default.getter();
              v74 = os_log_type_enabled(v72, v73);
              v75 = v113;
              if (v74)
              {
                v76 = (uint8_t *)swift_slowAlloc();
                v77 = swift_slowAlloc();
                v117 = v77;
                *(_DWORD *)v76 = 136315138;
                swift_bridgeObjectRetain();
                v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v75, v82, (uint64_t *)&v117);
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease_n();
                _os_log_impl(&dword_1C2356000, v72, v73, "NonSiriKitMediaAppLaunchPreflightClient#handle Non-ambiguous non-media app launch task: %s", v76, 0xCu);
                swift_arrayDestroy();
                MEMORY[0x1C3BBFF64](v77, -1, -1);
                MEMORY[0x1C3BBFF64](v76, -1, -1);
                swift_release();

              }
              else
              {

                swift_bridgeObjectRelease_n();
                swift_release();
              }
              goto LABEL_67;
            }
            v78 = static os_log_type_t.error.getter();
            v83 = os_log_type_enabled(v72, (os_log_type_t)v78);
            v84 = v113;
            if (!v83)
            {

              swift_bridgeObjectRelease_n();
              goto LABEL_82;
            }
            v79 = (uint8_t *)swift_slowAlloc();
            v80 = swift_slowAlloc();
            v117 = v80;
            *(_DWORD *)v79 = 136315138;
            swift_bridgeObjectRetain();
            v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v84, v82, (uint64_t *)&v117);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            v81 = "NonSiriKitMediaAppLaunchPreflightClient#ignore could not build PommesResponse with given parameters: %s";
          }
          _os_log_impl(&dword_1C2356000, v72, (os_log_type_t)v78, v81, v79, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v80, -1, -1);
          MEMORY[0x1C3BBFF64](v79, -1, -1);
          swift_release();

          goto LABEL_66;
        }
LABEL_92:
        swift_once();
        goto LABEL_52;
      }
    }
    else if (*(_QWORD *)((v82 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
      goto LABEL_47;
    }
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v86 = type metadata accessor for Logger();
    __swift_project_value_buffer(v86, (uint64_t)static Logger.pommes);
    v87 = Logger.logObject.getter();
    v88 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v87, v88))
    {
      v89 = a2;
      v90 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v90 = 0;
      _os_log_impl(&dword_1C2356000, v87, v88, "NonSiriKitMediaAppLaunchPreflightClient#ignore no valid appLaunch task from NLv4 parse", v90, 2u);
      v91 = v90;
      a2 = v89;
      MEMORY[0x1C3BBFF64](v91, -1, -1);
    }

    v64 = 0;
    goto LABEL_68;
  }
  v101 = a2;
  v108 = v17 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  v107 = *(_QWORD *)(v13 + 72);
  v106 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  v100 = v17;
  swift_bridgeObjectRetain_n();
  v19 = 0;
  v111 = MEMORY[0x1E0DEE9B8] + 8;
  v105 = v12;
  v104 = v13;
  v103 = v15;
  while (1)
  {
    v109 = v19;
    v106(v15, v108 + v107 * v19, v12);
    v20 = Siri_Nlu_External_Span.matcherNames.getter();
    v117 = v18;
    v21 = *(_QWORD *)(v20 + 16);
    if (v21)
    {
      v22 = v113;
      v23 = v20 + ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80));
      swift_bridgeObjectRetain();
      v24 = *(_QWORD *)(v22 + 72);
      v25 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
      do
      {
        v25(v11, v23, v9);
        v26 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        (*(void (**)(char *, uint64_t))(v113 + 8))(v11, v9);
        specialized Array.append<A>(contentsOf:)(v26);
        v23 += v24;
        --v21;
      }
      while (v21);
      swift_bridgeObjectRelease_n();
      v18 = v117;
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    if (!(v18 >> 62))
    {
      v27 = *(_QWORD *)((v18 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v27)
        break;
      goto LABEL_39;
    }
    swift_bridgeObjectRetain();
    v27 = _CocoaArrayWrapper.endIndex.getter();
    if (v27)
      break;
LABEL_39:
    swift_bridgeObjectRelease_n();
    v15 = v103;
    v12 = v105;
    (*(void (**)(char *, uint64_t))(v104 + 8))(v103, v105);
    v18 = MEMORY[0x1E0DEE9D8];
LABEL_40:
    v19 = v109 + 1;
    if (v109 + 1 == v102)
    {
      swift_bridgeObjectRelease();
      v82 = v118;
      a2 = v101;
      goto LABEL_45;
    }
  }
  v112 = v18 & 0xC000000000000001;
  v28 = 4;
  v110 = v27;
  while (1)
  {
    v29 = v28 - 4;
    if (!v112)
      break;
    MEMORY[0x1C3BBF3F4](v28 - 4, v18);
    v30 = v28 - 3;
    if (__OFADD__(v29, 1))
      goto LABEL_83;
LABEL_19:
    static UsoTask_CodegenConverter.convert(task:)();
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v117, (uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (!v116[3])
      goto LABEL_12;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v116, (uint64_t)v115, (uint64_t *)&demangling cache variable for type metadata for Any?);
    type metadata accessor for UsoTask_open_common_App();
    if (swift_dynamicCast())
    {
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)&v117, (uint64_t *)&demangling cache variable for type metadata for Any?);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
      outlined destroy of MediaUserStateCenter?((uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_35:
      swift_bridgeObjectRelease_n();
      v15 = v103;
      v12 = v105;
      v35 = (*(uint64_t (**)(char *, uint64_t))(v104 + 8))(v103, v105);
      MEMORY[0x1C3BBEE78](v35);
      v18 = MEMORY[0x1E0DEE9D8];
      if (*(_QWORD *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v118 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      goto LABEL_40;
    }
    type metadata accessor for UsoTask_start_uso_NoEntity();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v31 = swift_retain();
      MEMORY[0x1C3BBD204](&v114, v31);
      swift_release();
      LODWORD(v32) = v114;
      if (!v114)
      {
        swift_release();
        goto LABEL_32;
      }
      v33 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
      swift_release();
      swift_release();
      if (v33)
        goto LABEL_28;
    }
    else
    {
      type metadata accessor for UsoTask_play_uso_NoEntity();
      if ((swift_dynamicCast() & 1) == 0)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
LABEL_12:
        outlined destroy of MediaUserStateCenter?((uint64_t)&v117, (uint64_t *)&demangling cache variable for type metadata for Any?);
        outlined destroy of MediaUserStateCenter?((uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for Any?);
        goto LABEL_13;
      }
      v34 = swift_retain();
      MEMORY[0x1C3BBD204](&v114, v34);
      swift_release();
      if (v114)
      {
        v32 = dispatch thunk of CodeGenGlobalArgs.usoAssociatedApp.getter();
        swift_release();
        swift_release();
        if (!v32)
          goto LABEL_32;
LABEL_28:
        swift_release();
        LODWORD(v32) = 1;
        goto LABEL_32;
      }
      swift_release();
    }
    LODWORD(v32) = 0;
LABEL_32:
    v27 = v110;
    outlined destroy of MediaUserStateCenter?((uint64_t)&v117, (uint64_t *)&demangling cache variable for type metadata for Any?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v115);
    outlined destroy of MediaUserStateCenter?((uint64_t)v116, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if ((_DWORD)v32)
      goto LABEL_35;
LABEL_13:
    swift_release();
    ++v28;
    if (v30 == v27)
      goto LABEL_39;
  }
  swift_retain();
  v30 = v28 - 3;
  if (!__OFADD__(v29, 1))
    goto LABEL_19;
LABEL_83:
  __break(1u);
  swift_once();
  v36 = type metadata accessor for Logger();
  __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
  v37 = 0;
  v38 = 0;
  v39 = Logger.logObject.getter();
  v40 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v39, v40))
  {
    v41 = (uint8_t *)swift_slowAlloc();
    v42 = swift_slowAlloc();
    v117 = v42;
    *(_DWORD *)v41 = 136315138;
    v116[0] = 0;
    v43 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v44 = String.init<A>(describing:)();
    v116[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v39, v40, "ConversionUtils.convertUserDialogActToTasks error: %s", v41, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v42, -1, -1);
    MEMORY[0x1C3BBFF64](v41, -1, -1);

    goto LABEL_66;
  }

LABEL_65:
LABEL_66:
  v64 = 0;
LABEL_67:
  a2 = v101;
LABEL_68:
  *a2 = v64;
}

_QWORD *PommesSearch.makeSearchRequestProcessor(with:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v14;

  v3 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = v1[3];
  v7 = v1[4];
  v8 = v1[5];
  v9 = v1[7];
  outlined init with copy of PommesSearchRequest(a1, (uint64_t)v5, v10);
  v11 = v1[6];
  type metadata accessor for PommesSearchRequestProcessor();
  swift_allocObject();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  v12 = specialized PommesSearchRequestProcessor.init(remoteClient:localClients:pegasusCacheManager:domainWarmup:pommesSearchRequest:muxContextManager:)(v6, v7, v8, v9, (uint64_t)v5, v11);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v12;
}

uint64_t type metadata accessor for PommesSearchRequestProcessor()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PommesSearchRequestProcessor;
  if (!type metadata singleton initialization cache for PommesSearchRequestProcessor)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata accessor for AnalyticsComponentIdGenerator()
{
  return objc_opt_self();
}

uint64_t type metadata accessor for OnDeviceSearchInstrumentationUtil()
{
  return objc_opt_self();
}

uint64_t PommesSearchRequestProcessor.search(completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char v5;

  closure #1 in PommesSearchRequestProcessor.search(completion:)();
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)v2 + 216))(v5 & 1, a1, a2);
}

void closure #1 in PommesSearchRequestProcessor.search(completion:)()
{
  id v0;
  id v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  unint64_t v14;
  uint64_t v15;
  char v16;
  void *v17;
  void *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  NSObject *v24;
  os_log_type_t v25;
  char v26;
  uint8_t *v27;
  uint8_t *v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint8_t *v33;
  NSObject *v34;
  os_log_type_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned __int8 v42;
  uint64_t v43[3];
  ValueMetadata *v44;
  unint64_t v45;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v1 = objc_msgSend(v0, sel_languageCode);

  if (v1)
  {
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v3;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.debug.getter();
    v41 = v2;
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      v9 = swift_slowAlloc();
      v43[0] = v9;
      *(_DWORD *)v8 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v2, v4, v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v6, v7, "Checking if %s is enabled for POMMES", v8, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v9, -1, -1);
      MEMORY[0x1C3BBFF64](v8, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v44 = &type metadata for FeatureFlag;
    v14 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v45 = v14;
    v15 = swift_allocObject();
    v43[0] = v15;
    *(_OWORD *)(v15 + 16) = 0u;
    *(_OWORD *)(v15 + 32) = 0u;
    *(_BYTE *)(v15 + 48) = 3;
    v16 = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
    v42 = objc_msgSend((id)objc_opt_self(), sel_isSiriPommesEnabledForLanguage_, v1);

    type metadata accessor for SiriEnvironment();
    static SiriEnvironment.default.getter();
    SiriEnvironment.currentDevice.getter();
    swift_release();
    v17 = (void *)MEMORY[0x1C3BBEC44](0x536C65646F4D5748, 0xEA00000000007274);
    v18 = (void *)MGGetStringAnswer();

    if (v18)
    {
      v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v21 = v20;
      swift_release();

      v44 = &type metadata for FeatureFlag;
      v45 = v14;
      v22 = swift_allocObject();
      v43[0] = v22;
      *(_QWORD *)(v22 + 16) = v19;
      *(_QWORD *)(v22 + 24) = v21;
      *(_QWORD *)(v22 + 32) = 0;
      *(_QWORD *)(v22 + 40) = 0;
      *(_BYTE *)(v22 + 48) = 0;
      swift_bridgeObjectRetain_n();
      v23 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
      swift_bridgeObjectRelease();
      if ((v16 & 1) == 0)
      {
        v24 = Logger.logObject.getter();
        v25 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v24, v25))
        {
          v26 = v23;
          v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v27 = 0;
          _os_log_impl(&dword_1C2356000, v24, v25, "Siri is disabled for POMMES", v27, 2u);
          v28 = v27;
          v23 = v26;
          MEMORY[0x1C3BBFF64](v28, -1, -1);
        }

      }
      if ((v42 & 1) != 0)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        v29 = Logger.logObject.getter();
        v30 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v29, v30))
        {
          v40 = v19;
          v31 = (uint8_t *)swift_slowAlloc();
          v32 = swift_slowAlloc();
          v43[0] = v32;
          *(_DWORD *)v31 = 136315138;
          swift_bridgeObjectRetain();
          getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v41, v4, v43);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C2356000, v29, v30, "%s is disabled for POMMES", v31, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v32, -1, -1);
          v33 = v31;
          v19 = v40;
          MEMORY[0x1C3BBFF64](v33, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      swift_bridgeObjectRetain();
      v34 = Logger.logObject.getter();
      v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        v36 = swift_slowAlloc();
        v37 = swift_slowAlloc();
        v43[0] = v37;
        *(_DWORD *)v36 = 136315394;
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v36 + 12) = 2080;
        if ((v23 & 1) != 0)
          v38 = 7562585;
        else
          v38 = 28494;
        if ((v23 & 1) != 0)
          v39 = 0xE300000000000000;
        else
          v39 = 0xE200000000000000;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v38, v39, v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v34, v35, "Checking if device(%s) is disabled for POMMES, disabled: %s", (uint8_t *)v36, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v37, -1, -1);
        MEMORY[0x1C3BBFF64](v36, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, v11, v12, "No languageCode available", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }

  }
}

const char *specialized FeatureFlag.disableDeviceFeature(_:)()
{
  Swift::String v0;
  char v2;

  v0 = String.lowercased()();
  if (v0._countAndFlagsBits == 808596834 && v0._object == (void *)0xE400000000000000
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return "disable_b520";
  }
  else if (v0._countAndFlagsBits == 0x706130323562 && v0._object == (void *)0xE600000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return "disable_b520ap";
  }
  else if (v0._countAndFlagsBits == 808597090 && v0._object == (void *)0xE400000000000000
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return "disable_b620";
  }
  else if (v0._countAndFlagsBits == 0x706130323662 && v0._object == (void *)0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return "disable_b620ap";
  }
  else
  {
    v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v2 & 1) != 0)
      return "disable_b620ap";
    else
      return "";
  }
}

uint64_t PommesSearchRequestProcessor.search(enabled:completion:)(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _QWORD aBlock[6];

  v4 = v3;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v9 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8];
  v20 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19[1] = *(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_requestQueue);
  v16 = swift_allocObject();
  *(_BYTE *)(v16 + 16) = a1;
  *(_QWORD *)(v16 + 24) = v4;
  *(_QWORD *)(v16 + 32) = a2;
  *(_QWORD *)(v16 + 40) = a3;
  aBlock[4] = partial apply for closure #1 in PommesSearchRequestProcessor.search(enabled:completion:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6;
  v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v21 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, v9, MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C3BBF154](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

void partial apply for closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)()
{
  uint64_t v0;

  closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)(*(_BYTE *)(v0 + 16), *(_QWORD *)(v0 + 24), *(void (**)(void *, uint64_t))(v0 + 32), *(_QWORD *)(v0 + 40));
}

void closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)(char a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  void (*v12)(uint64_t (*)(uint64_t, char), uint64_t);
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  void *v17;
  _BYTE *v18;

  if ((a1 & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_1C2356000, v8, v9, "POMMES is enabled", v10, 2u);
      MEMORY[0x1C3BBFF64](v10, -1, -1);
    }

    v11 = swift_allocObject();
    *(_QWORD *)(v11 + 16) = a3;
    *(_QWORD *)(v11 + 24) = a4;
    v12 = *(void (**)(uint64_t (*)(uint64_t, char), uint64_t))(*(_QWORD *)a2 + 224);
    swift_retain();
    v12(partial apply for closure #1 in closure #1 in PommesSearchRequestProcessor.search(enabled:completion:), v11);
    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1C2356000, v14, v15, "POMMES is disabled", v16, 2u);
      MEMORY[0x1C3BBFF64](v16, -1, -1);
    }

    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    v17 = (void *)swift_allocError();
    *v18 = -127;
    a3(v17, 1);

  }
}

uint64_t PommesSearchRequestProcessor.search_sync(completion:)(uint64_t (*a1)(void *, uint64_t), uint64_t a2)
{
  uint8_t *v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  Class isa;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  dispatch_semaphore_t v48;
  void (*v49)(char *, Swift::Int (*)(uint64_t), uint64_t);
  uint64_t v50;
  uint8_t *v51;
  char *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  dispatch_semaphore_t v68;
  void (*v69)(uint64_t, uint64_t, Swift::Int (*)(void *), _QWORD *);
  NSObject *v70;
  char *v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char *v75;
  void (*v76)(char *, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(uint64_t, uint64_t);
  void **v82;
  void *v83;
  id v84;
  NSObject *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint8_t *v89;
  NSObject *v90;
  uint64_t v91;
  uint64_t v92;
  uint8_t *v93;
  uint64_t v94;
  void **v96;
  uint64_t v97;
  uint64_t (*v98)(void *, uint64_t);
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  void (*v103)(void);
  uint64_t v104;
  uint64_t v105;
  dispatch_semaphore_t v106;
  NSObject *v107;
  dispatch_semaphore_t v108;
  char *v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint8_t *v122;

  v3 = v2;
  v99 = a2;
  v98 = a1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  MEMORY[0x1E0C80A78](v4);
  v100 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v117 = type metadata accessor for DispatchTimeInterval();
  v115 = *(_QWORD *)(v117 - 8);
  MEMORY[0x1E0C80A78](v117);
  v114 = (void ***)((char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v116 = type metadata accessor for DispatchTime();
  v113 = *(_QWORD *)(v116 - 8);
  v7 = MEMORY[0x1E0C80A78](v116);
  v111 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v112 = (char *)&v96 - v9;
  v10 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for SignpostToken();
  v107 = *(NSObject **)(v13 - 8);
  isa = v107[8].isa;
  v15 = MEMORY[0x1E0C80A78](v13);
  v104 = (uint64_t)&v96 - (((unint64_t)isa + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)&v96 - v16;
  v18 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v105 = *((_QWORD *)v18 - 1);
  v19 = *(_QWORD *)(v105 + 64);
  v20 = MEMORY[0x1E0C80A78](v18);
  v110 = (char *)&v96 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v20);
  v109 = (char *)&v96 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)&v96 - v24;
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v96 - v26;
  v106 = dispatch_semaphore_create(0);
  v108 = dispatch_semaphore_create(0);
  v120 = swift_allocBox();
  v29 = v28;
  v30 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  v31 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56);
  v97 = v29;
  v31(v29, 1, 1, v30);
  v32 = swift_allocObject();
  v121 = v32;
  *(_QWORD *)(v32 + 16) = 0;
  v96 = (void **)(v32 + 16);
  Date.init()();
  v33 = &v27[v18[5]];
  *(_QWORD *)v33 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((_QWORD *)v33 + 1) = 56;
  v33[16] = 2;
  *(_QWORD *)&v27[v18[6]] = 108;
  v34 = &v27[v18[7]];
  *(_QWORD *)v34 = "search_sync(completion:)";
  *((_QWORD *)v34 + 1) = 24;
  v34[16] = 2;
  v35 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000034);
  v36 = (uint64_t *)&v27[v18[8]];
  *v36 = v35;
  v36[1] = v37;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v38 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v38, (uint64_t)static Signposter.pommes);
  v39 = OSSignposter.begin(name:context:)("search.remote", 13, 2u, (uint64_t)v3, (uint64_t)v17);
  v102 = *((_QWORD *)v3 + 2);
  v103 = *(void (**)(void))(*(_QWORD *)v3 + 152);
  ((void (*)(uint64_t))v103)(v39);
  v40 = swift_allocObject();
  v122 = v3;
  v101 = v12;
  v41 = v40;
  swift_weakInit();
  v118 = v27;
  outlined init with copy of PommesSearchRequest((uint64_t)v27, (uint64_t)v25, type metadata accessor for PerformanceUtil.Ticket);
  v119 = v17;
  v42 = v104;
  outlined init with copy of PommesSearchRequest((uint64_t)v17, v104, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  v43 = (*(unsigned __int8 *)(v105 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80);
  v44 = (v19 + LOBYTE(v107[10].isa) + v43) & ~(unint64_t)LOBYTE(v107[10].isa);
  v45 = ((unint64_t)isa + v44 + 7) & 0xFFFFFFFFFFFFFFF8;
  v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8;
  v47 = swift_allocObject();
  outlined init with take of PerformanceUtil.Ticket((uint64_t)v25, v47 + v43, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with take of PerformanceUtil.Ticket(v42, v47 + v44, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  v48 = v106;
  *(_QWORD *)(v47 + v45) = v106;
  *(_QWORD *)(v47 + v46) = v41;
  *(_QWORD *)(v47 + ((v46 + 15) & 0xFFFFFFFFFFFFFFF8)) = v120;
  v49 = *(void (**)(char *, Swift::Int (*)(uint64_t), uint64_t))(*(_QWORD *)v102 + 552);
  v107 = v48;
  swift_retain();
  swift_retain();
  v50 = (uint64_t)v101;
  v49(v101, partial apply for closure #1 in PommesSearchRequestProcessor.search_sync(completion:), v47);
  swift_release();
  outlined destroy of PommesSearchRequest(v50, type metadata accessor for PommesSearchRequest);
  v51 = v122;
  swift_release();
  v52 = v109;
  Date.init()();
  v53 = &v52[v18[5]];
  *(_QWORD *)v53 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((_QWORD *)v53 + 1) = 56;
  v53[16] = 2;
  *(_QWORD *)&v52[v18[6]] = 123;
  v54 = &v52[v18[7]];
  *(_QWORD *)v54 = "search_sync(completion:)";
  *((_QWORD *)v54 + 1) = 24;
  v54[16] = 2;
  v55 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000016);
  v56 = (uint64_t *)&v52[v18[8]];
  *v56 = v55;
  v56[1] = v57;
  v58 = v110;
  Date.init()();
  v59 = &v58[v18[5]];
  *(_QWORD *)v59 = "SiriInformationSearch/PommesSearchRequestProcessor.swift";
  *((_QWORD *)v59 + 1) = 56;
  v59[16] = 2;
  *(_QWORD *)&v58[v18[6]] = 124;
  v60 = &v58[v18[7]];
  *(_QWORD *)v60 = "search_sync(completion:)";
  *((_QWORD *)v60 + 1) = 24;
  v60[16] = 2;
  v61 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000024);
  v62 = (uint64_t *)&v58[v18[8]];
  *v62 = v61;
  v62[1] = v63;
  v64 = *((_QWORD *)v51 + 4);
  v103();
  v65 = *((_QWORD *)v51 + 5);
  v66 = swift_allocObject();
  swift_weakInit();
  v67 = (_QWORD *)swift_allocObject();
  v68 = v108;
  v67[2] = v108;
  v67[3] = v66;
  v67[4] = v121;
  v69 = *(void (**)(uint64_t, uint64_t, Swift::Int (*)(void *), _QWORD *))(*(_QWORD *)v64 + 216);
  v70 = v68;
  swift_retain();
  swift_retain();
  v69(v50, v65, partial apply for closure #2 in PommesSearchRequestProcessor.search_sync(completion:), v67);
  swift_release();
  outlined destroy of PommesSearchRequest(v50, type metadata accessor for PommesSearchRequest);
  swift_release();
  v71 = v111;
  static DispatchTime.now()();
  v73 = v114;
  v72 = v115;
  *v114 = 200;
  v74 = v117;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v72 + 104))(v73, *MEMORY[0x1E0DEF490], v117);
  v75 = v112;
  DispatchTime.advanced(by:)();
  (*(void (**)(_QWORD *, uint64_t))(v72 + 8))(v73, v74);
  v76 = *(void (**)(char *, uint64_t))(v113 + 8);
  v77 = v116;
  v76(v71, v116);
  MEMORY[0x1C3BBF190](v75);
  v76(v75, v77);
  v78 = (uint64_t)v58;
  v79 = (uint64_t)v52;
  v80 = v120;
  if (one-time initialization token for shared != -1)
    swift_once();
  v81 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184);
  v81(v78, 1);
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0 && (v82 = v96, swift_beginAccess(), (v83 = *v82) != 0))
  {
    v84 = v83;
    v98(v83, 0);
    v85 = v107;
    OS_dispatch_semaphore.wait()();
    v81(v79, 1);
    v86 = v97;
    swift_beginAccess();
    v87 = v86;
    v88 = v100;
    outlined init with copy of MediaUserStateCenter?(v87, v100, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
    swift_retain();
    v89 = v122;
    swift_retain();
    specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(v88, v89, (uint64_t)v89, v80);

  }
  else
  {
    v90 = v107;
    OS_dispatch_semaphore.wait()();
    v81((uint64_t)v52, 1);
    v91 = v97;
    swift_beginAccess();
    v92 = v91;
    v88 = v100;
    outlined init with copy of MediaUserStateCenter?(v92, v100, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
    swift_retain();
    v93 = v122;
    swift_retain();
    v94 = v99;
    swift_retain();
    specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(v88, v93, v98, v94, v93, v80);

    swift_release();
  }
  swift_release();
  swift_release();
  outlined destroy of MediaUserStateCenter?(v88, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  outlined destroy of PommesSearchRequest(v78, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PommesSearchRequest(v79, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of PommesSearchRequest((uint64_t)v119, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  outlined destroy of PommesSearchRequest((uint64_t)v118, type metadata accessor for PerformanceUtil.Ticket);
  swift_release();
  return swift_release();
}

uint64_t PommesSearchRequestProcessor.pommesSearchRequest.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest;
  swift_beginAccess();
  return outlined init with copy of PommesSearchRequest(v3, a1, type metadata accessor for PommesSearchRequest);
}

uint64_t PegasusProxy.search(pommesSearchRequest:completion:)(char **a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  void (*v50)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  void *v53;
  void (*v54)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)(), uint64_t, uint64_t);
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  char *v64;
  uint8_t *v65;
  char v66;
  uint64_t v67;
  char **v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  _BOOL4 v80;
  uint8_t *v81;
  uint64_t v82;
  uint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  unint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  _QWORD v101[8];
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  uint64_t v114;
  char *v115;
  char *v116;
  char *v117;
  char *v118;
  char *v119;
  char *v120;
  char *v121;
  uint64_t v122;
  char *v123;
  uint64_t v124;
  char *v125;
  char *v126;
  uint64_t v127;
  uint64_t Context;
  char *v129;
  char *v130;
  uint64_t v131;
  char **v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  void (*v136)(uint64_t);
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char *v147;
  uint64_t *v148;
  char *v149;
  _OWORD aBlock[2];
  uint64_t v151;
  uint64_t v152;

  v137 = a3;
  v136 = a2;
  v4 = type metadata accessor for PommesSearchRequest(0);
  v109 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v110 = v5;
  v119 = (char *)v101 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for SignpostToken();
  v107 = *(_QWORD *)(v6 - 8);
  v7 = MEMORY[0x1E0C80A78](v6);
  v118 = (char *)v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = v8;
  MEMORY[0x1E0C80A78](v7);
  v125 = (char *)v101 - v9;
  v10 = type metadata accessor for DispatchWorkItemFlags();
  v106 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v123 = (char *)v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v122 = type metadata accessor for DispatchQoS();
  v105 = *(_QWORD *)(v122 - 8);
  MEMORY[0x1E0C80A78](v122);
  v121 = (char *)v101 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v13);
  v104 = (char *)v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v102);
  v120 = (char *)v101 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v16);
  v113 = (char *)v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v114 = *(_QWORD *)(v131 - 8);
  v18 = MEMORY[0x1E0C80A78](v131);
  v115 = (char *)v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1E0C80A78](v18);
  v112 = (char *)v101 - v21;
  v22 = MEMORY[0x1E0C80A78](v20);
  v126 = (char *)v101 - v23;
  v111 = v24;
  MEMORY[0x1E0C80A78](v22);
  v129 = (char *)v101 - v25;
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v127 = *(_QWORD *)(Context - 8);
  MEMORY[0x1E0C80A78](Context);
  v135 = (uint64_t)v101 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v133 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  MEMORY[0x1E0C80A78](v133);
  v134 = (char *)v101 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for Date();
  v138 = *(_QWORD *)(v139 - 8);
  MEMORY[0x1E0C80A78](v139);
  v29 = (char *)v101 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for UUID();
  v31 = *(_QWORD *)(v30 - 8);
  v32 = MEMORY[0x1E0C80A78](v30);
  v130 = (char *)v101 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v103 = v33;
  MEMORY[0x1E0C80A78](v32);
  v149 = (char *)v101 - v34;
  v35 = type metadata accessor for PommesCandidateId();
  v143 = *(_QWORD *)(v35 - 8);
  v36 = MEMORY[0x1E0C80A78](v35);
  v117 = (char *)v101 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101[7] = v37;
  MEMORY[0x1E0C80A78](v36);
  v39 = (char *)v101 - v38;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v101[5] = *(_QWORD *)(v40 - 8);
  v41 = MEMORY[0x1E0C80A78](v40);
  v116 = (char *)v101 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v101[6] = v42;
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)v101 - v43;
  v45 = (uint64_t *)((char *)a1 + *(int *)(v4 + 32));
  v46 = *v45;
  v148 = (uint64_t *)v45[1];
  v145 = v46;
  if (v148)
  {
    swift_bridgeObjectRetain();
    UUID.init(uuidString:)();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))((char *)v101 - v43, 1, 1, v30);
  }
  v124 = v10;
  v141 = v44;
  v140 = v31;
  v146 = v35;
  v147 = v39;
  v132 = a1;
  v47 = PommesSearchRequest.pommesCandidateId.getter((uint64_t)v39);
  if (one-time initialization token for shared != -1)
    v47 = swift_once();
  v48 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v47);
  v49 = v144;
  v97 = v144;
  v98 = v145;
  v99 = v148;
  Date.init()();
  v50 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v48 + 200);
  v142 = v30;
  v99 = &v96;
  v100 = v30;
  LOBYTE(v97) = 2;
  v50(0xD000000000000040, 0x80000001C25089D0, 0, v29, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 395, "search(pommesSearchRequest:completion:)", 39, v97, partial apply for closure #2 in PegasusProxy.search(pommesSearchRequest:completion:));
  v51 = *(void (**)(char *, uint64_t))(v138 + 8);
  v52 = v139;
  v51(v29, v139);
  v53 = static PerformanceUtil.shared;
  Date.init()();
  v54 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)v53 + 200);
  LOBYTE(v97) = 2;
  v54(0xD00000000000003ALL, 0x80000001C2508A20, 0, v29, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 402, "search(pommesSearchRequest:completion:)", 39, v97, partial apply for closure #3 in PegasusProxy.search(pommesSearchRequest:completion:), v49, MEMORY[0x1E0DEE9C0] + 8);
  v51(v29, v52);
  if ((AFSupportsSiriInCall() & 1) == 0
    && (v55 = (*(uint64_t (**)(void))(*(_QWORD *)v49 + 352))()) != 0
    && (v56 = (*(uint64_t (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v55 + 144))(v145, v148, 0),
        swift_release(),
        (v56 & 1) != 0))
  {
    swift_bridgeObjectRelease();
    v57 = v140;
    v58 = (uint64_t)v141;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v59 = type metadata accessor for Logger();
    __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
    v60 = Logger.logObject.getter();
    v61 = static os_log_type_t.info.getter();
    v62 = os_log_type_enabled(v60, v61);
    v63 = v143;
    v64 = v147;
    if (v62)
    {
      v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v65 = 0;
      _os_log_impl(&dword_1C2356000, v60, v61, "SiriInCall is not supported and user is on phone call, unable to complete search", v65, 2u);
      MEMORY[0x1C3BBFF64](v65, -1, -1);
    }

    v66 = 9;
  }
  else
  {
    if ((dispatch thunk of NetworkAvailability.isAvailable.getter() & 1) != 0)
    {
      v67 = v135;
      v68 = v132;
      static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(v132, (char **)(v49 + 96), *(_QWORD *)(v49 + 184), v135);
      v69 = v131;
      v70 = swift_allocBox();
      v72 = v71;
      v73 = swift_allocObject();
      v74 = MEMORY[0x1E0DEE9D8];
      v75 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
      *(_QWORD *)(v73 + 16) = v74;
      *(_QWORD *)(v73 + 24) = v75;
      v76 = v129;
      (*(void (**)(char **, uint64_t, uint64_t))(*(_QWORD *)v49 + 568))(v68, v67, v73 + 16);
      v139 = v70;
      v101[4] = v73;
      v84 = v114;
      v138 = *(_QWORD *)(v114 + 32);
      ((void (*)(char *, char *, uint64_t))v138)(v72, v76, v69);
      v85 = *(void (**)(char *, char *, uint64_t))(v84 + 16);
      v86 = v126;
      v85(v126, v72, v69);
      v151 = 0;
      memset(aBlock, 0, sizeof(aBlock));
      v87 = (uint64_t)v113;
      static TaskPriority.background.getter();
      v88 = type metadata accessor for TaskPriority();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v88 - 8) + 56))(v87, 0, 1, v88);
      outlined init with copy of MediaUserStateCenter?((uint64_t)aBlock, (uint64_t)&v152, &demangling cache variable for type metadata for CurareInteractionStream?);
      v89 = v112;
      v85(v112, v86, v69);
      v90 = (*(unsigned __int8 *)(v84 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
      v91 = swift_allocObject();
      *(_QWORD *)(v91 + 16) = 0;
      *(_QWORD *)(v91 + 24) = 0;
      outlined init with take of PommesSearchReason?((uint64_t)&v152, v91 + 32, &demangling cache variable for type metadata for CurareInteractionStream?);
      ((void (*)(unint64_t, char *, uint64_t))v138)(v91 + v90, v89, v69);
      _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(v87, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:into:), v91);
      swift_release();
      outlined destroy of MediaUserStateCenter?((uint64_t)aBlock, &demangling cache variable for type metadata for CurareInteractionStream?);
      v92 = *(void (**)(char *, uint64_t))(v84 + 8);
      v92(v86, v69);
      v93 = v115;
      v134 = v72;
      v133 = (uint64_t)v85;
      v85(v115, v72, v69);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusRequest and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusRequest, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D028], MEMORY[0x1E0D6CFD8]);
      Message.serializedData(partial:)();
      v138 = 0;
      v129 = (char *)v92;
      v95 = v94;
      v92(v93, v69);
      __asm { BR              X10 }
    }
    swift_bridgeObjectRelease();
    v57 = v140;
    v64 = v147;
    v58 = (uint64_t)v141;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v77 = type metadata accessor for Logger();
    __swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
    v78 = Logger.logObject.getter();
    v79 = static os_log_type_t.info.getter();
    v80 = os_log_type_enabled(v78, v79);
    v63 = v143;
    if (v80)
    {
      v81 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v81 = 0;
      _os_log_impl(&dword_1C2356000, v78, v79, "Network is unavailable, unable to complete search", v81, 2u);
      MEMORY[0x1C3BBFF64](v81, -1, -1);
    }

    v66 = 2;
  }
  v82 = (uint64_t)v134;
  *v134 = v66;
  swift_storeEnumTagMultiPayload();
  v136(v82);
  outlined destroy of MediaUserStateCenter?(v82, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  (*(void (**)(char *, uint64_t))(v57 + 8))(v149, v142);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v64, v146);
  return outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for UUID?);
}

uint64_t static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)@<X0>(char **a1@<X0>, char **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Context;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void (*v22)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v23;
  uint64_t (*v24)(char *, uint64_t);
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t);
  void *v27;
  void (*v28)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)());
  uint64_t v29;
  void *v30;
  void (*v31)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)());
  uint64_t v32;
  uint64_t v33;
  void (*v34)(char *, uint64_t);
  void *v35;
  char *v36;
  char **v37;
  void (*v38)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v39;
  char *v40;
  uint64_t (*v41)(char *, char *, uint64_t);
  uint64_t v42;
  void *v43;
  char **v44;
  uint64_t v45;
  void (*v46)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  void (*v53)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v54;
  char **v55;
  void *v56;
  void (*v57)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v58;
  uint64_t v60;
  char *v61;
  _QWORD *v62;
  char **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char **v75;

  v74 = a3;
  v75 = a2;
  v70 = a4;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v72 = *(_QWORD *)(Context - 8);
  v73 = Context;
  v10 = MEMORY[0x1E0C80A78](Context);
  v67 = (char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v66 = (uint64_t *)((char *)&v65 - v13);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v65 - v14;
  v16 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v19 = type metadata accessor for OSSignposter();
  v68 = __swift_project_value_buffer(v19, (uint64_t)static Signposter.pommes);
  v69 = v18;
  OSSignposter.begin(name:context:)("proxy.createQueryContext", 24, 2u, 0, (uint64_t)v18);
  v20 = Apple_Parsec_Search_PegasusQueryContext.init()();
  if (one-time initialization token for shared != -1)
    v20 = swift_once();
  v21 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v20);
  v61 = v15;
  v62 = v75;
  v63 = a1;
  Date.init()();
  v22 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v21 + 200);
  v23 = MEMORY[0x1E0DEE9C0] + 8;
  v63 = (char **)&v60;
  v64 = MEMORY[0x1E0DEE9C0] + 8;
  LOBYTE(v61) = 2;
  v22(0xD000000000000017, 0x80000001C2507860, 0, v8, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 20, "build(for:withLocationManager:dataProviderManager:)", 51, (_DWORD)v61, partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v24 = *(uint64_t (**)(char *, uint64_t))(v6 + 8);
  v25 = v24(v8, v5);
  v26 = v24;
  v27 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v25);
  v75 = a1;
  v63 = (char **)v15;
  v64 = v74;
  Date.init()();
  v28 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(_QWORD *)v27 + 200);
  v64 = v23;
  v65 = v23;
  v63 = &v61;
  LOBYTE(v61) = 2;
  v28(0xD000000000000015, 0x80000001C2507900, 0, v8, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 24, "build(for:withLocationManager:dataProviderManager:)", 51, (_DWORD)v61, partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v29 = v26(v8, v5);
  v30 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v29);
  v63 = (char **)v15;
  v64 = (uint64_t)v75;
  Date.init()();
  v31 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(_QWORD *)v30 + 200);
  v63 = &v61;
  v64 = v23;
  LOBYTE(v61) = 2;
  v31(0xD000000000000026, 0x80000001C2507920, 0, v8, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 27, "build(for:withLocationManager:dataProviderManager:)", 51, (_DWORD)v61, partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v32 = v5;
  v71 = v5;
  v33 = v26(v8, v5);
  v34 = (void (*)(char *, uint64_t))v26;
  v35 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v33);
  v36 = v15;
  v37 = (char **)v74;
  v61 = (char *)v74;
  v62 = v36;
  v63 = v75;
  Date.init()();
  v38 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v35 + 200);
  v39 = v73;
  v63 = (char **)&v60;
  v64 = v73;
  LOBYTE(v61) = 2;
  v40 = (char *)v66;
  v38(0xD00000000000002DLL, 0x80000001C2507950, 0, v8, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 31, "build(for:withLocationManager:dataProviderManager:)", 51, (_DWORD)v61, partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v34(v8, v32);
  v41 = *(uint64_t (**)(char *, char *, uint64_t))(v72 + 40);
  v42 = v41(v36, v40, v39);
  v66 = &v65;
  v43 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v42);
  v63 = v37;
  v64 = (uint64_t)v36;
  v44 = v37;
  v45 = (uint64_t)v36;
  Date.init()();
  v46 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v43 + 200);
  v63 = &v61;
  v64 = v39;
  LOBYTE(v61) = 2;
  v47 = v67;
  v46(0xD000000000000023, 0x80000001C2507980, 0, v8, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 34, "build(for:withLocationManager:dataProviderManager:)", 51, (_DWORD)v61, partial apply for closure #5 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v48 = v71;
  v34(v8, v71);
  v49 = v39;
  v50 = v65;
  v51 = v41((char *)v45, v47, v49);
  v52 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v51);
  v63 = v44;
  v64 = v45;
  Date.init()();
  v53 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v52 + 200);
  v63 = &v61;
  v64 = v50;
  LOBYTE(v61) = 2;
  v53(0xD00000000000002BLL, 0x80000001C25079B0, 0, v8, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 37, "build(for:withLocationManager:dataProviderManager:)", 51, (_DWORD)v61, partial apply for closure #6 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
  v34(v8, v48);
  v54 = type metadata accessor for PommesSearchRequest(0);
  v55 = v75;
  if (*((_BYTE *)v75 + *(int *)(v54 + 60)) == 1)
  {
    v56 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v54);
    v61 = (char *)v74;
    v62 = (_QWORD *)v45;
    v63 = v55;
    Date.init()();
    v57 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v56 + 200);
    v63 = (char **)&v60;
    v64 = v50;
    LOBYTE(v61) = 2;
    v57(0xD00000000000002BLL, 0x80000001C25079E0, 0, v8, "SiriInformationSearch/PegasusQueryContext+Extensions.swift", 58, 2, 42, "build(for:withLocationManager:dataProviderManager:)", 51, (_DWORD)v61, partial apply for closure #7 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:));
    v34(v8, v71);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v72 + 32))(v70, v45, v73);
  v58 = (uint64_t)v69;
  OSSignposter.end(token:message:)((uint64_t)v69, 0, 0xE000000000000000);
  return outlined destroy of PommesSearchRequest(v58, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
}

uint64_t partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  uint64_t v0;

  return closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)(*(_QWORD *)(v0 + 16), *(int **)(v0 + 24), *(_QWORD *)(v0 + 32));
}

Swift::String_optional __swiftcall AssistantLocationProvider.countryCode()()
{
  id v0;
  void *v1;
  uint64_t v2;
  void *v3;
  void *v4;
  uint64_t v5;
  void *v6;
  Swift::String_optional result;

  v0 = (id)_AFPreferencesCountryCode();
  if (v0)
  {
    v1 = v0;
    v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v3;

  }
  else
  {
    v2 = 0;
    v4 = 0;
  }
  v5 = v2;
  v6 = v4;
  result.value._object = v6;
  result.value._countAndFlagsBits = v5;
  return result;
}

void protocol witness for PommesLocationManaging.cachedLocationInfo() in conformance PommesLocationManager()
{
  PommesLocationManager.cachedLocationInfo()();
}

void outlined consume of Result<PommesLocationInfo, LocationError>(id a1, uint64_t a2, uint64_t a3, char a4)
{
  if ((a4 & 1) == 0)

}

void partial apply for closure #2 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  partial apply for closure #1 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)();
}

uint64_t DataProviderManager.addAmpStorefront(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t Context;
  uint64_t (*v17)(uint64_t, uint64_t, uint64_t);
  uint64_t v18;
  void *v19;
  _DWORD *v20;
  void (*v21)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint64_t v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _DWORD *v65;
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  uint64_t v69;
  __int128 v70;
  __int128 v71;
  uint64_t v72;
  uint64_t v73;

  v63 = type metadata accessor for DispatchTimeInterval();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v7 = (uint64_t *)((char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v62 = type metadata accessor for DispatchTime();
  v60 = *(_QWORD *)(v62 - 8);
  MEMORY[0x1E0C80A78](v62);
  v59 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Context - 8) + 16);
  v64 = a3;
  v18 = v17(a3, a1, Context);
  if (one-time initialization token for shared != -1)
    v18 = swift_once();
  v19 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v18);
  v20 = v65;
  v56 = v65;
  v57 = a2;
  v66 = a2;
  Date.init()();
  v21 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v19 + 200);
  v56 = &v55;
  v57 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [MediaUserState]?);
  LOBYTE(v55) = 2;
  v21(&v73, 0xD00000000000003FLL, 0x80000001C2505C80, 0, v15, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 173, "addAmpStorefront(to:for:)", 25, v55, partial apply for closure #1 in DataProviderManager.addAmpStorefront(to:for:));
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v22 = v73;
  v23 = (_QWORD *)*((_QWORD *)v20 + 11);
  if (v23)
  {
    v24 = v59;
    static DispatchTime.now()();
    *v7 = 1;
    v25 = v61;
    v26 = v63;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v61 + 104))(v7, *MEMORY[0x1E0DEF490], v63);
    MEMORY[0x1C3BBEB6C](v24, v7);
    (*(void (**)(_QWORD *, uint64_t))(v25 + 8))(v7, v26);
    v27 = v60;
    v28 = v62;
    (*(void (**)(char *, uint64_t))(v60 + 8))(v24, v62);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v11, 0, 1, v28);
    v23 = (_QWORD *)(*(uint64_t (**)(char *))(*v23 + 168))(v11);
    outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for DispatchTime?);
  }
  v29 = type metadata accessor for PommesSearchRequest(0);
  if (*(_BYTE *)(v66 + *(int *)(v29 + 60)) != 1)
    goto LABEL_16;
  if (!v23)
  {
LABEL_17:
    if (v22)
    {
      v38 = *(_QWORD *)(v22 + 16);
      if (v38)
      {
        v39 = v22 + 32;
        swift_bridgeObjectRetain();
        while (1)
        {
          outlined init with copy of AppDataProviding(v39, (uint64_t)&v67);
          v40 = v68;
          v41 = v69;
          __swift_project_boxed_opaque_existential_1(&v67, v68);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v41 + 32))(v40, v41) & 1) != 0)
            break;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
          v39 += 40;
          if (!--v38)
          {
            swift_bridgeObjectRelease();
            goto LABEL_23;
          }
        }
        swift_bridgeObjectRelease();
        outlined init with take of AppDataProviding(&v67, (uint64_t)&v70);
      }
      else
      {
LABEL_23:
        v72 = 0;
        v70 = 0u;
        v71 = 0u;
      }
      swift_bridgeObjectRelease();
      v42 = *((_QWORD *)&v71 + 1);
      if (*((_QWORD *)&v71 + 1))
      {
        v43 = v72;
        __swift_project_boxed_opaque_existential_1(&v70, *((uint64_t *)&v71 + 1));
        (*(void (**)(uint64_t, uint64_t))(v43 + 16))(v42, v43);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)&v70, &demangling cache variable for type metadata for MediaUserState?);
      }
    }
    return Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
  }
  v30 = (uint64_t *)(v66 + *(int *)(v29 + 84));
  v31 = v30[1];
  if (!v31 || (v32 = v23[2]) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }
  v33 = *v30;
  v34 = v23 + 5;
  while (1)
  {
    v36 = v34[1];
    v35 = v34[2];
    v37 = *(v34 - 1) == v33 && v31 == *v34;
    if (v37 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      break;
    v34 += 7;
    if (!--v32)
      goto LABEL_16;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v22)
  {
    swift_bridgeObjectRelease();
    v72 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_46;
  }
  v45 = *(_QWORD *)(v22 + 16);
  if (!v45)
  {
LABEL_42:
    v72 = 0;
    v70 = 0u;
    v71 = 0u;
    goto LABEL_45;
  }
  v46 = v22 + 32;
  swift_bridgeObjectRetain();
  while (1)
  {
    outlined init with copy of AppDataProviding(v46, (uint64_t)&v67);
    v47 = v68;
    v48 = v69;
    __swift_project_boxed_opaque_existential_1(&v67, v68);
    v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 40))(v47, v48);
    if (!v50)
      goto LABEL_32;
    if (v49 == v36 && v50 == v35)
      break;
    v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v52 & 1) != 0)
      goto LABEL_44;
LABEL_32:
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
    v46 += 40;
    if (!--v45)
    {
      swift_bridgeObjectRelease();
      goto LABEL_42;
    }
  }
  swift_bridgeObjectRelease();
LABEL_44:
  swift_bridgeObjectRelease();
  outlined init with take of AppDataProviding(&v67, (uint64_t)&v70);
LABEL_45:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_46:
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v70, (uint64_t)&v67, &demangling cache variable for type metadata for MediaUserState?);
  v53 = v68;
  if (v68)
  {
    v54 = v69;
    __swift_project_boxed_opaque_existential_1(&v67, v68);
    (*(void (**)(uint64_t, uint64_t))(v54 + 16))(v53, v54);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v67, &demangling cache variable for type metadata for MediaUserState?);
  }
  Apple_Parsec_Search_PegasusQueryContext.storeFront.setter();
  return outlined destroy of MediaUserStateCenter?((uint64_t)&v70, &demangling cache variable for type metadata for MediaUserState?);
}

uint64_t partial apply for closure #1 in DataProviderManager.addAmpStorefront(to:for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DataProviderManager.addAmpStorefront(to:for:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t closure #1 in DataProviderManager.addAmpStorefront(to:for:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[96];
  uint64_t v29[15];

  v29[14] = a3;
  v5 = type metadata accessor for DispatchTimeInterval();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for DispatchTime();
  v26 = *(_QWORD *)(v27 - 8);
  v9 = MEMORY[0x1E0C80A78](v27);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[3];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v16);
  v17 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
  v23 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v18 = v25;
  OS_dispatch_queue.sync<A>(execute:)();
  v25 = v18;
  outlined init with take of PommesSearchReason?((uint64_t)v28, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v19 = a1[15];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  *v8 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF490], v5);
  MEMORY[0x1C3BBEB6C](v11, v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v21 = v27;
  v20(v11, v27);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)v24 + 240))(v16, v29, v19, v23, v13);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v29);
  v20(v13, v21);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t storeEnumTagSinglePayload for PommesSearchRequest()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t storeEnumTagSinglePayload for AssistantDataSnapshot(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 88) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 90) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 24) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 90) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

uint64_t partial apply for closure #1 in DataProviderManager.assistantDataSnapshot.getter@<X0>(_OWORD *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DataProviderManager.assistantDataSnapshot.getter(v1, a1);
}

uint64_t closure #1 in DataProviderManager.assistantDataSnapshot.getter@<X0>(uint64_t result@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3;
  void (*v4)(_QWORD *__return_ptr, uint64_t);
  uint64_t v5;
  _QWORD v6[12];

  v3 = *(_QWORD *)(result + 112);
  if (v3)
  {
    v4 = *(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v3 + 120);
    v5 = swift_retain();
    v4(v6, v5);
    swift_release();
    return outlined init with take of PommesSearchReason?((uint64_t)v6, (uint64_t)a2, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  }
  else
  {
    *(_OWORD *)((char *)a2 + 74) = 0u;
    a2[3] = 0u;
    a2[4] = 0u;
    a2[1] = 0u;
    a2[2] = 0u;
    *a2 = 0u;
  }
  return result;
}

uint64_t AssistantDataCache.lastAssistantDataSnapshot.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;

  swift_beginAccess();
  v3 = *(_QWORD *)(v1 + 48);
  v4 = *(_QWORD *)(v1 + 56);
  v5 = *(_QWORD *)(v1 + 64);
  v6 = *(_QWORD *)(v1 + 72);
  v7 = *(_QWORD *)(v1 + 80);
  v8 = *(_QWORD *)(v1 + 88);
  v9 = *(_QWORD *)(v1 + 96);
  v10 = *(_QWORD *)(v1 + 104);
  v15 = *(_WORD *)(v1 + 136);
  v13 = *(_QWORD *)(v1 + 120);
  v14 = *(_QWORD *)(v1 + 128);
  v12 = *(_QWORD *)(v1 + 112);
  result = outlined copy of AssistantDataSnapshot?(v3, v4, v5, v6);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v13;
  *(_QWORD *)(a1 + 80) = v14;
  *(_WORD *)(a1 + 88) = v15;
  return result;
}

uint64_t outlined copy of AssistantDataSnapshot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AssistantDataSnapshot(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 90))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t initializeWithCopy for AssistantDataSnapshot(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 64) = *(_BYTE *)(a2 + 64);
  v4 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a1 + 80) = v4;
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for AssistantDataSnapshot()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:timeout:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54[3];

  v7 = v6;
  v46 = a3;
  v47 = a4;
  v44 = a1;
  v45 = a2;
  v50 = a6;
  v9 = *v6;
  v10 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *(_QWORD *)(v9 + 80);
  v49 = type metadata accessor for Optional();
  v51 = *(_QWORD *)(v49 - 8);
  v14 = MEMORY[0x1E0C80A78](v49);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v43 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))((char *)&v43 - v17, 1, 1, v13);
  v19 = v7[13];
  v48 = v7[12];
  v54[0] = v48;
  v54[1] = v19;
  swift_bridgeObjectRetain();
  v20._countAndFlagsBits = 0x6420686374656620;
  v20._object = (void *)0xEB00000000617461;
  String.append(_:)(v20);
  v21 = v54[0];
  Date.init()();
  v22 = &v12[v10[5]];
  *(_QWORD *)v22 = "SiriInformationSearch/DataProvider.swift";
  *((_QWORD *)v22 + 1) = 40;
  v22[16] = 2;
  *(_QWORD *)&v12[v10[6]] = 108;
  v23 = &v12[v10[7]];
  *(_QWORD *)v23 = "fetch(for:assistantData:serviceHelper:dispatchQueue:timeout:)";
  *((_QWORD *)v23 + 1) = 61;
  v23[16] = 2;
  v24 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v21);
  v26 = v25;
  swift_bridgeObjectRelease();
  v27 = (uint64_t *)&v12[v10[8]];
  *v27 = v24;
  v27[1] = v26;
  MEMORY[0x1C3BBF0F4](a5);
  (*(void (**)(uint64_t))(*v7 + 224))(a5);
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v12, 0);
  if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0
    && (static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*v7 + 232))(v44, v45, v46, v47);
    v28 = v49;
    (*(void (**)(char *, char *, uint64_t))(v51 + 40))(v18, v16, v49);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    swift_retain_n();
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = swift_slowAlloc();
      v47 = swift_slowAlloc();
      v54[0] = v47;
      *(_DWORD *)v32 = 136315394;
      swift_bridgeObjectRetain();
      v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v19, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v32 + 12) = 2080;
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v51 + 16))(v16, v18, v28);
      v33 = String.init<A>(describing:)();
      v52 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v30, v31, "%s fetch complete %s", (uint8_t *)v32, 0x16u);
      v35 = v47;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v35, -1, -1);
      MEMORY[0x1C3BBFF64](v32, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    outlined destroy of PerformanceUtil.Ticket((uint64_t)v12);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v36 = type metadata accessor for Logger();
    __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
    swift_retain_n();
    v37 = Logger.logObject.getter();
    v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      v40 = swift_slowAlloc();
      v54[0] = v40;
      *(_DWORD *)v39 = 136315138;
      swift_bridgeObjectRetain();
      v53 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v48, v19, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v37, v38, "%s timeout while waiting for fetch", v39, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v40, -1, -1);
      MEMORY[0x1C3BBFF64](v39, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    outlined destroy of PerformanceUtil.Ticket((uint64_t)v12);
    v28 = v49;
  }
  swift_beginAccess();
  v41 = v51;
  (*(void (**)(uint64_t, char *, uint64_t))(v51 + 16))(v50, v18, v28);
  return (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v18, v28);
}

uint64_t AnyDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 32))() & 1;
}

uint64_t AmpDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  Swift::String v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a2;
  v21 = a3;
  v19 = a1;
  v22 = a4;
  v5 = type metadata accessor for Date();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    swift_once();
  v9 = static PerformanceUtil.shared;
  v10 = *(_QWORD *)(v4 + 104);
  v23 = *(_QWORD *)(v4 + 96);
  v24 = v10;
  swift_bridgeObjectRetain();
  v11._countAndFlagsBits = 0x2868637465665F20;
  v11._object = (void *)0xE900000000000029;
  String.append(_:)(v11);
  v18 = (uint64_t)&v18;
  v12 = v23;
  v13 = v24;
  MEMORY[0x1E0C80A78](v14);
  v17 = v19;
  v15 = type metadata accessor for Optional();
  Date.init()();
  LOBYTE(v17) = 2;
  (*(void (**)(uint64_t, uint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), uint64_t *, uint64_t))(*(_QWORD *)v9 + 200))(v12, v13, 0, v8, "SiriInformationSearch/DataProvider.swift", 40, 2, 94, "fetch(for:assistantData:serviceHelper:dispatchQueue:)", 53, v17, partial apply for closure #1 in AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:), &v18 - 8, v15);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t partial apply for closure #1 in AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  _QWORD *v0;

  return (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v0[2] + 48))(v0[3], v0[4], v0[5], v0[6]);
}

uint64_t AmpDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v5, &demangling cache variable for type metadata for PommesSearchRequest?);
  v6 = type metadata accessor for PommesSearchRequest(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(v5, 1, v6) == 1)
  {
    v7 = outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for PommesSearchRequest?);
  }
  else
  {
    v8 = v5[*(int *)(v6 + 60)];
    v7 = outlined destroy of PommesSearchRequest((uint64_t)v5, type metadata accessor for PommesSearchRequest);
    if (v8 == 1)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v7);
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v7);
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v12 = v10 + 32;
    while (1)
    {
      outlined init with copy of AppDataProviding(v12, (uint64_t)&v21);
      v13 = v22;
      v14 = v23;
      __swift_project_boxed_opaque_existential_1(&v21, v22);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 32))(v13, v14) & 1) != 0)
        break;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v21);
      v12 += 40;
      if (!--v11)
        goto LABEL_9;
    }
    outlined init with take of AppDataProviding(&v21, (uint64_t)&v24);
  }
  else
  {
LABEL_9:
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((_QWORD *)&v25 + 1))
  {
    outlined init with take of AppDataProviding(&v24, (uint64_t)v27);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MediaUserState>);
    v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_1C24FA1B0;
    outlined init with take of AppDataProviding(v27, v9 + 32);
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v24, &demangling cache variable for type metadata for MediaUserState?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1C2356000, v16, v17, "AmpDataProvider could not find an active user state for non-multi user request", v18, 2u);
      MEMORY[0x1C3BBFF64](v18, -1, -1);
    }

    return 0;
  }
  return v9;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequest()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t AmpDataProvider.cachedMediaUserStates.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

id protocol witness for MediaUserState.isActive.getter in conformance ICMediaUserState()
{
  id *v0;

  return objc_msgSend(*v0, sel_isActive);
}

uint64_t *outlined release of AssistantDataSnapshot?(uint64_t *a1)
{
  outlined consume of AssistantDataSnapshot?(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t outlined consume of AssistantDataSnapshot?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;

  if (a4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PommesMUXContextManager.fetch(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD v11[2];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for DispatchTime();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of DispatchTime?(a1, (uint64_t)v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    outlined destroy of DispatchTime?((uint64_t)v5);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    (*(void (**)(char *))(*(_QWORD *)v1 + 160))(v9);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  OS_dispatch_queue.sync<A>(execute:)();
  return v11[1];
}

uint64_t outlined init with copy of DispatchTime?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t PommesMUXContextManager.wait(timeout:)()
{
  return MEMORY[0x1C3BBF0F4]() & 1;
}

uint64_t partial apply for closure #1 in PommesMUXContextManager.fetch(timeout:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 120))();
  *a1 = result;
  return result;
}

uint64_t PommesMUXContextManager.cachedContext.getter()
{
  swift_beginAccess();
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for MediaUserState.storefrontIdentifier.getter in conformance ICMediaUserState()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = objc_msgSend(*v0, sel_storefrontIdentifier);
  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  return v2;
}

uint64_t partial apply for closure #4 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocationManager:dataProviderManager:)()
{
  return partial apply for closure #3 in static Apple_Parsec_Search_PegasusQueryContext.build(for:withLocation:dataProviderManager:)();
}

uint64_t DataProviderManager.addUIScale(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  void (*v6)(uint64_t *__return_ptr, uint64_t);
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t Context;
  uint64_t v19[12];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[5];
  __int128 v25;
  _OWORD v26[2];
  _BYTE v27[16];
  uint64_t v28;
  char v29;

  v5 = *(_QWORD *)(v2 + 112);
  if (!v5)
    goto LABEL_4;
  v6 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 120);
  v7 = swift_retain();
  v6(v19, v7);
  swift_release();
  outlined init with take of PommesSearchReason?((uint64_t)v19, (uint64_t)&v20, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  if (!*((_QWORD *)&v21 + 1))
    goto LABEL_4;
  v24[4] = v22;
  v25 = v23;
  v26[0] = v24[0];
  *(_OWORD *)((char *)v26 + 10) = *(_OWORD *)((char *)v24 + 10);
  v24[2] = v20;
  v24[3] = v21;
  outlined release of AssistantDataSnapshot?(v19);
  outlined init with take of PommesSearchReason?((uint64_t)&v25 + 8, (uint64_t)v27, &demangling cache variable for type metadata for Double?);
  outlined init with take of PommesSearchReason?((uint64_t)v27, (uint64_t)&v28, &demangling cache variable for type metadata for Double?);
  if ((v29 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v17 = 134217984;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v15, v16, "Adding UI scale %f to Pegasus query context", v17, 0xCu);
      MEMORY[0x1C3BBFF64](v17, -1, -1);
    }

    Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(Context - 8) + 16))(a2, a1, Context);
    return Apple_Parsec_Search_PegasusQueryContext.uiScale.setter();
  }
  else
  {
LABEL_4:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1C2356000, v9, v10, "No UI scale available from assistant data cache.", v11, 2u);
      MEMORY[0x1C3BBFF64](v11, -1, -1);
    }

    v12 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(a2, a1, v12);
  }
}

void DataProviderManager.addTemperatureUnit(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  void (*v8)(uint64_t *__return_ptr, uint64_t);
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint64_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  char v25;
  unsigned int *v26;
  uint64_t v27;
  char v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33[12];
  char v34[24];
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;

  v3 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *(_QWORD *)(v1 + 112);
  if (v7)
  {
    v8 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v7 + 120);
    v9 = swift_retain();
    v8(v33, v9);
    swift_release();
    outlined init with take of PommesSearchReason?((uint64_t)v33, (uint64_t)v34, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
    if (v35)
    {
      v11 = v36;
      v10 = v37;
      swift_bridgeObjectRetain();
      outlined release of AssistantDataSnapshot?(v33);
      if (v10)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v12 = type metadata accessor for Logger();
        __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
        swift_bridgeObjectRetain_n();
        v13 = Logger.logObject.getter();
        v14 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v13, v14))
        {
          v15 = swift_slowAlloc();
          v29[1] = a1;
          v16 = (uint8_t *)v15;
          v17 = swift_slowAlloc();
          v30 = v11;
          v18 = v17;
          v32 = v17;
          *(_DWORD *)v16 = 136315138;
          swift_bridgeObjectRetain();
          v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v10, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C2356000, v13, v14, "Adding temperatureUnit %s to Pegasus query context", v16, 0xCu);
          swift_arrayDestroy();
          v19 = v18;
          v11 = v30;
          MEMORY[0x1C3BBFF64](v19, -1, -1);
          MEMORY[0x1C3BBFF64](v16, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v10 == v24)
        {
          swift_bridgeObjectRelease();
        }
        else
        {
          v25 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if ((v25 & 1) == 0)
          {
            if (static String._unconditionallyBridgeFromObjectiveC(_:)() == v11 && v10 == v27)
            {
              swift_bridgeObjectRelease();
              v26 = (unsigned int *)MEMORY[0x1E0D6CA58];
            }
            else
            {
              v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
              swift_bridgeObjectRelease();
              v26 = (unsigned int *)MEMORY[0x1E0D6CA68];
              if ((v28 & 1) != 0)
                v26 = (unsigned int *)MEMORY[0x1E0D6CA58];
            }
            goto LABEL_19;
          }
        }
        v26 = (unsigned int *)MEMORY[0x1E0D6CA60];
LABEL_19:
        (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *v26, v3);
        swift_bridgeObjectRelease();
        Apple_Parsec_Search_PegasusQueryContext.temperatureUnit.setter();
        return;
      }
    }
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_1C2356000, v21, v22, "No temperatureUnit available from assistant data cache.", v23, 2u);
    MEMORY[0x1C3BBFF64](v23, -1, -1);
  }

}

uint64_t PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t (*a1)()@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void (*v71)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v72;
  void (*v73)(uint64_t *, _QWORD);
  void *v74;
  char *v75;
  void (*v76)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(_BYTE *@<X8>), _QWORD *, _QWORD);
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)();
  void (*v82)(uint64_t *, _QWORD);
  uint64_t v83;
  int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void (*v92)(char *, uint64_t (*)(), uint64_t);
  char *v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  void (*v97)(char *, uint64_t);
  uint64_t v98;
  void *v100;
  uint64_t v101;
  char *v102;
  void (*v103)(_QWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  NSObject *v112;
  os_log_type_t v113;
  _BOOL4 v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _BOOL4 v119;
  char *v120;
  uint8_t *v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  _QWORD *v125;
  unint64_t v126;
  unint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  uint8_t *v141;
  char *v142;
  void (*v143)(char *, char *, _QWORD *);
  char *v144;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  NSObject *v148;
  os_log_type_t v149;
  uint8_t *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  NSObject *v154;
  os_log_type_t v155;
  uint8_t *v156;
  uint64_t v157;
  uint8_t *v158;
  int *v159;
  void *v160;
  char *v161;
  void (*v162)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v163;
  char *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  void (*v168)(uint64_t *, _QWORD);
  uint64_t v169;
  char *v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t (*v182)();
  uint64_t v183;
  unint64_t v184;
  unint64_t v185;
  void (*v186)(uint64_t *, _QWORD);
  NSObject *v187;
  os_log_type_t v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  id v199;
  unsigned int v200;
  unint64_t v201;
  uint64_t v202;
  unint64_t v203;
  void (*v204)(uint64_t *, _QWORD);
  NSObject *v205;
  os_log_type_t v206;
  uint8_t *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  unint64_t v212;
  uint64_t v213;
  void (*v214)(uint64_t *, _QWORD);
  NSObject *v215;
  os_log_type_t v216;
  uint8_t *v217;
  uint64_t v218;
  uint64_t v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  void (*v223)(uint64_t *, _QWORD);
  NSObject *v224;
  os_log_type_t v225;
  uint8_t *v226;
  uint64_t v227;
  void *v228;
  _QWORD *v229;
  char *v230;
  void (*v231)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t);
  uint64_t (*v232)();
  _QWORD *v233;
  uint64_t v234;
  uint64_t (*v235)(char *, uint64_t);
  uint64_t v236;
  void *v237;
  uint64_t (*v238)();
  void (*v239)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v240;
  uint64_t v241;
  uint64_t v242;
  void *v243;
  void (*v244)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v245;
  uint64_t v246;
  void *v247;
  void (*v248)(uint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t (*v249)();
  int *v250;
  uint64_t v251;
  uint64_t v252;
  _QWORD *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  uint64_t v260;
  char *v261;
  uint64_t v262;
  void *v263;
  _QWORD *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  void *v268;
  uint64_t (*v269)();
  char *v270;
  void (*v271)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v272;
  void (*v273)(char *, uint64_t);
  uint64_t v274;
  void *v275;
  void (*v276)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v277;
  int *v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  void (*v282)(char *, uint64_t (*)(), uint64_t);
  uint64_t v283;
  void (*v284)(char *, uint64_t);
  uint64_t (*v285)();
  uint64_t v286;
  int *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t *v291;
  uint64_t v292;
  char *v293;
  char *v294;
  int *v295;
  int *v296;
  int *v297;
  NSObject *v298;
  os_log_type_t v299;
  uint64_t v300;
  uint8_t *v301;
  uint64_t v302;
  int *v303;
  uint64_t v304;
  unint64_t v305;
  NSObject *v306;
  os_log_type_t v307;
  uint8_t *v308;
  uint64_t v309;
  uint64_t v310;
  unint64_t v311;
  uint64_t v312;
  char *v313;
  void (*v314)(char *, uint64_t (*)(), uint64_t);
  uint64_t v315;
  uint64_t (*v316)();
  void (*v317)(uint64_t (*)(), uint64_t, uint64_t);
  uint64_t (*v318)();
  char *v319;
  uint64_t v320;
  uint64_t (*v321)();
  uint64_t v322;
  void *v323;
  void (*v324)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>));
  char *v325;
  int *v326;
  uint64_t (*v327)(uint64_t (*)(), char *, uint64_t);
  uint64_t v328;
  void *v329;
  void (*v330)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  char *v331;
  uint64_t v332;
  void (*v333)(char *, uint64_t);
  uint64_t v334;
  void *v335;
  void (*v336)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v337;
  int *v338;
  uint64_t v339;
  void *v340;
  uint64_t (*v341)();
  void (*v342)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  int *v343;
  uint64_t v344;
  int *v345;
  uint64_t v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  uint64_t *v350;
  uint64_t v351;
  char *v352;
  char *v353;
  uint64_t (*v354)();
  _QWORD *v355;
  _QWORD *v356;
  int *v357;
  int *v358;
  NSObject *v359;
  os_log_type_t v360;
  uint8_t *v361;
  uint64_t v362;
  int *v363;
  uint64_t v364;
  unint64_t v365;
  uint64_t v366;
  unint64_t v367;
  uint64_t v368;
  unint64_t v369;
  NSObject *v370;
  os_log_type_t v371;
  uint8_t *v372;
  uint64_t v373;
  uint64_t v374;
  NSObject *v375;
  os_log_type_t v376;
  _QWORD *v377;
  uint8_t *v378;
  uint8_t *v379;
  uint64_t v380;
  uint64_t v381;
  char *v382;
  void (*v383)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  _QWORD *v384;
  uint64_t v385;
  uint64_t (*v386)();
  uint64_t v387;
  void (*v388)(char *, uint64_t);
  uint64_t v389;
  uint64_t v390;
  void (*v391)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)());
  uint64_t v392;
  uint64_t v393;
  void (*v394)(uint64_t, uint64_t (*)(), uint64_t);
  uint64_t v395;
  uint64_t v396;
  void (*v397)(uint64_t (*)(), uint64_t);
  uint64_t v398;
  _QWORD v399[2];
  _QWORD *v400;
  uint64_t (*v401)();
  _QWORD *v402;
  uint64_t v403;
  _QWORD v404[2];
  uint64_t v405;
  char *v406;
  char *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  char *v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  char *v417;
  uint64_t v418;
  char *v419;
  char *v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  _QWORD *v424;
  uint64_t v425;
  uint64_t v426;
  uint64_t v427;
  _QWORD *v428;
  char *v429;
  char *v430;
  char *v431;
  char *v432;
  char *v433;
  uint64_t v434;
  _QWORD *v435;
  _QWORD *v436;
  char *v437;
  uint8_t *v438;
  void (*v439)(char *, uint64_t (*)(), uint64_t);
  void (*v440)(char *, uint64_t);
  char *v441;
  char *v442;
  uint64_t v443;
  uint64_t v444;
  unint64_t v445;
  uint64_t v446;
  uint64_t v447;
  char *v448;
  char *v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  int *v453;
  uint64_t v454;
  char *v455;
  uint64_t v456;
  int *v457;
  uint64_t v458;
  void (*v459)(char *, uint64_t);
  uint64_t (*v460)();
  _QWORD *v461;
  uint64_t (*v462)();
  uint64_t v463;
  uint64_t v464[4];
  _QWORD v465[2];
  uint64_t v466;
  uint64_t v467;

  v436 = a3;
  v451 = a2;
  v460 = a1;
  v434 = a4;
  v405 = type metadata accessor for Apple_Parsec_Siri_Context_ClientConversationContextInfo();
  MEMORY[0x1E0C80A78](v405);
  v404[1] = (char *)v404 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v7);
  v414 = (uint64_t)v404 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v416 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v415 = *(_QWORD *)(v416 - 8);
  MEMORY[0x1E0C80A78](v416);
  v417 = (char *)v404 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  MEMORY[0x1E0C80A78](v10);
  v426 = (uint64_t)v404 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v427 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v413 = (char *)v404 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v444 = type metadata accessor for UUID();
  v443 = *(_QWORD *)(v444 - 8);
  v14 = MEMORY[0x1E0C80A78](v444);
  v412 = (uint64_t)v404 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x1E0C80A78](v14);
  v423 = (char *)v404 - v17;
  MEMORY[0x1E0C80A78](v16);
  v441 = (char *)v404 - v18;
  v422 = type metadata accessor for JSONEncodingOptions();
  v421 = *(_QWORD *)(v422 - 8);
  MEMORY[0x1E0C80A78](v422);
  v420 = (char *)v404 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v435 = (_QWORD *)type metadata accessor for Apple_Parsec_Search_SearchConversationContext();
  v438 = (uint8_t *)*(v435 - 1);
  v20 = MEMORY[0x1E0C80A78](v435);
  v437 = (char *)v404 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v419 = (char *)v404 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  v24 = MEMORY[0x1E0C80A78](v23);
  v424 = (_QWORD *)((char *)v404 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
  v26 = MEMORY[0x1E0C80A78](v24);
  v411 = (uint64_t)v404 - v27;
  MEMORY[0x1E0C80A78](v26);
  v410 = (uint64_t)v404 - v28;
  v29 = type metadata accessor for PommesSearchRequest(0);
  v30 = MEMORY[0x1E0C80A78](v29);
  v425 = (uint64_t)v404 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v418 = (uint64_t)v404 - v32;
  v33 = type metadata accessor for PerformanceUtil.Ticket(0);
  v34 = MEMORY[0x1E0C80A78](v33);
  v433 = (char *)v404 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = MEMORY[0x1E0C80A78](v34);
  v409 = (uint64_t)v404 - v37;
  MEMORY[0x1E0C80A78](v36);
  v452 = (uint64_t)v404 - v38;
  v39 = type metadata accessor for Date();
  v40 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v42 = (char *)v404 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  v456 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v454 = *(_QWORD *)(v456 - 8);
  v43 = MEMORY[0x1E0C80A78](v456);
  v432 = (char *)v404 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v431 = (char *)v404 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v430 = (char *)v404 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v429 = (char *)v404 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v407 = (char *)v404 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v406 = (char *)v404 - v54;
  v55 = MEMORY[0x1E0C80A78](v53);
  v442 = (char *)v404 - v56;
  v57 = MEMORY[0x1E0C80A78](v55);
  v450 = (uint64_t)v404 - v58;
  v59 = MEMORY[0x1E0C80A78](v57);
  v449 = (char *)v404 - v60;
  v61 = MEMORY[0x1E0C80A78](v59);
  v446 = (uint64_t)v404 - v62;
  MEMORY[0x1E0C80A78](v61);
  v462 = (uint64_t (*)())((char *)v404 - v63);
  v64 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v64);
  v66 = (char *)v404 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v457 = (int *)v29;
  v428 = (_QWORD *)v12;
  v453 = (int *)v33;
  v458 = v39;
  v461 = v4;
  v67 = type metadata accessor for OSSignposter();
  v68 = __swift_project_value_buffer(v67, (uint64_t)static Signposter.pommes);
  v448 = v66;
  v447 = v68;
  v69 = OSSignposter.begin(name:context:)("proxy.constructSearchRequest", 28, 2u, 0, (uint64_t)v66);
  if (one-time initialization token for shared != -1)
    v69 = swift_once();
  v70 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v69);
  v400 = v461;
  v401 = v460;
  v402 = v451;
  Date.init()();
  v71 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v70 + 200);
  v402 = v399;
  v403 = v456;
  LOBYTE(v400) = 2;
  v71(0xD000000000000039, 0x80000001C2508A90, 0, v42, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 597, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v72 = v458;
  v459 = *(void (**)(char *, uint64_t))(v40 + 8);
  v459(v42, v458);
  v455 = v42;
  v73 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPushOffRequest.setter();
  v73(&v466, 0);
  v74 = static PerformanceUtil.shared;
  v75 = v455;
  Date.init()();
  v76 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(_BYTE *@<X8>), _QWORD *, _QWORD))(*(_QWORD *)v74 + 200);
  v77 = v461;
  LOBYTE(v400) = 2;
  v76(&v466, 0xD000000000000016, 0x80000001C2508B20, 0, v75, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 601, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #2 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:), v461, MEMORY[0x1E0DEAFA0]);
  v445 = v5;
  v459(v75, v72);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.userDataShareOptIn.setter();
  AFIsHorseman();
  v78 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.setter();
  v79 = (*(uint64_t (**)(uint64_t))(*v77 + 352))(v78);
  v80 = (uint64_t)v460;
  if (v79)
  {
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v79 + 144))(*(_QWORD *)((char *)v460 + v457[8]), *(_QWORD *)((char *)v460 + v457[8] + 8), 1);
    swift_release();
  }
  v81 = v462;
  v82 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isPhoneCallActive.setter();
  v82(&v466, 0);
  v83 = v452;
  Date.init()();
  v84 = v453;
  v85 = v83 + v453[5];
  *(_QWORD *)v85 = "SiriInformationSearch/PegasusProxy.swift";
  *(_QWORD *)(v85 + 8) = 40;
  *(_BYTE *)(v85 + 16) = 2;
  *(_QWORD *)(v83 + v84[6]) = 609;
  v86 = v83 + v84[7];
  *(_QWORD *)v86 = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
  *(_QWORD *)(v86 + 8) = 72;
  *(_BYTE *)(v86 + 16) = 2;
  v87 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000031);
  v88 = (uint64_t *)(v83 + v84[8]);
  *v88 = v87;
  v88[1] = v89;
  v90 = v461[23];
  v91 = v454;
  v92 = *(void (**)(char *, uint64_t (*)(), uint64_t))(v454 + 16);
  v93 = v449;
  v94 = v456;
  v92(v449, v81, v456);
  v95 = v446;
  v96 = v445;
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v90 + 328))(v93, v80);
  v445 = v96;
  if (v96)
  {
    v97 = *(void (**)(char *, uint64_t))(v91 + 8);
    v97(v93, v94);
    outlined destroy of PommesSearchRequest(v83, type metadata accessor for PerformanceUtil.Ticket);
    v97((char *)v462, v94);
    v98 = (uint64_t)v448;
    OSSignposter.end(token:message:)((uint64_t)v448, 0, 0xE000000000000000);
    return outlined destroy of PommesSearchRequest(v98, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  }
  v408 = v90;
  v439 = v92;
  v440 = *(void (**)(char *, uint64_t))(v91 + 8);
  v440(v93, v94);
  v449 = *(char **)(v91 + 40);
  ((void (*)(uint64_t (*)(), uint64_t, uint64_t))v449)(v462, v95, v94);
  v100 = static PerformanceUtil.shared;
  v101 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v83, 0);
  MEMORY[0x1E0C80A78](v101);
  v402 = (_QWORD *)v80;
  v102 = v455;
  Date.init()();
  v103 = *(void (**)(_QWORD *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v100 + 200);
  v104 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Data?);
  v402 = &v400;
  v403 = v104;
  LOBYTE(v400) = 2;
  v105 = v445;
  v103(v465, 0xD000000000000045, 0x80000001C2508B80, 0, v102, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 613, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v404[0] = v105;
  v459(v102, v458);
  v106 = v465[0];
  v107 = v465[1];
  if (one-time initialization token for pommes != -1)
    swift_once();
  v108 = type metadata accessor for Logger();
  v109 = __swift_project_value_buffer(v108, (uint64_t)static Logger.pommes);
  v110 = v418;
  outlined init with copy of PommesSearchRequest(v80, v418, type metadata accessor for PommesSearchRequest);
  outlined copy of Data?(v106, v107);
  v111 = v461;
  swift_retain();
  v454 = v109;
  v112 = Logger.logObject.getter();
  v113 = static os_log_type_t.debug.getter();
  v114 = os_log_type_enabled(v112, v113);
  v115 = v107 >> 60;
  v446 = v106;
  v445 = v107;
  if (v114)
  {
    v116 = swift_slowAlloc();
    *(_DWORD *)v116 = 67109632;
    v117 = v410;
    outlined init with copy of MediaUserStateCenter?(v110 + v457[10], v410, &demangling cache variable for type metadata for PommesContext?);
    v118 = type metadata accessor for PommesContext();
    v119 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v118 - 8) + 48))(v117, 1, v118) != 1;
    outlined destroy of MediaUserStateCenter?(v117, &demangling cache variable for type metadata for PommesContext?);
    outlined destroy of PommesSearchRequest(v110, type metadata accessor for PommesSearchRequest);
    LODWORD(v466) = v119;
    v106 = v446;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v116 + 8) = 1024;
    LODWORD(v466) = v107 >> 60 != 15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined consume of Data?(v106, v107);
    *(_WORD *)(v116 + 14) = 1024;
    v111 = v461;
    LODWORD(v466) = *(_QWORD *)((char *)v461
                              + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext
                              + 8) >> 60 != 15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl(&dword_1C2356000, v112, v113, "Considering adding Pegasus conversation context.\nPSR has PommesContext: %{BOOL}d\nPSR has explicit context bytes: %{BOOL}d\nPegasusProxy has persisted bytes: %{BOOL}d", (uint8_t *)v116, 0x14u);
    MEMORY[0x1C3BBFF64](v116, -1, -1);

  }
  else
  {
    outlined destroy of PommesSearchRequest(v110, type metadata accessor for PommesSearchRequest);
    outlined consume of Data?(v106, v107);

    swift_release();
  }
  v120 = v437;
  v121 = v438;
  if (v115 <= 0xE)
  {
    v127 = v445;
    outlined copy of Data._Representation(v106, v445);
    outlined copy of Data._Representation(v106, v127);
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.conversationContextBytes.setter();
    outlined copy of Data?(v106, v127);
    outlined copy of Data._Representation(v106, v127);
    v128 = Logger.logObject.getter();
    v129 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v128, v129))
    {
      v130 = (uint8_t *)swift_slowAlloc();
      v131 = swift_slowAlloc();
      v466 = v131;
      *(_DWORD *)v130 = 136315138;
      outlined copy of Data._Representation(v446, v127);
      v132 = Data.description.getter();
      v134 = v133;
      outlined consume of Data?(v446, v127);
      v135 = v132;
      v136 = v461;
      v464[3] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v135, v134, &v466);
      v137 = v446;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v121 = v438;
      swift_bridgeObjectRelease();
      outlined consume of Data?(v137, v127);
      outlined consume of Data?(v137, v127);
      _os_log_impl(&dword_1C2356000, v128, v129, "Adding Pegasus conversation context from explicit PommesContext value: %s", v130, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v131, -1, -1);
      MEMORY[0x1C3BBFF64](v130, -1, -1);

      v138 = v127;
      v111 = v136;
      v120 = v437;
      outlined consume of Data?(v137, v138);
    }
    else
    {
      outlined consume of Data?(v106, v127);
      outlined consume of Data?(v106, v127);
      outlined consume of Data._Representation(v106, v127);

      v111 = v461;
    }
    v125 = v435;
  }
  else
  {
    v122 = v411;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v460 + v457[10], v411, &demangling cache variable for type metadata for PommesContext?);
    v123 = type metadata accessor for PommesContext();
    v124 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v123 - 8) + 48))(v122, 1, v123);
    outlined destroy of MediaUserStateCenter?(v122, &demangling cache variable for type metadata for PommesContext?);
    v125 = v435;
    if (v124 != 1)
    {
      v126 = *(_QWORD *)((char *)v111
                       + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_persistentPegasusConversationContext
                       + 8);
      if (v126 >> 60 != 15)
        __asm { BR              X10 }
    }
  }
  v139 = Logger.logObject.getter();
  v140 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v139, v140))
  {
    v141 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v141 = 0;
    _os_log_impl(&dword_1C2356000, v139, v140, "Adding SearchConversationContext to Pegasus request", v141, 2u);
    MEMORY[0x1C3BBFF64](v141, -1, -1);
  }

  v142 = (char *)v111 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_searchConversationContext;
  swift_beginAccess();
  v143 = (void (*)(char *, char *, _QWORD *))*((_QWORD *)v121 + 2);
  v143(v419, v142, v125);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.searchConversationContext.setter();
  v143(v120, v142, v125);
  v144 = v420;
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Search_SearchConversationContext and conformance Apple_Parsec_Search_SearchConversationContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6CB98], MEMORY[0x1E0D6CB88]);
  v145 = (void *)v404[0];
  v146 = Message.jsonString(options:)();
  if (v145)
  {
    (*(void (**)(char *, uint64_t))(v421 + 8))(v144, v422);
    (*((void (**)(char *, _QWORD *))v121 + 1))(v120, v125);
    v148 = Logger.logObject.getter();
    v149 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v148, v149))
    {
      v150 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v150 = 0;
      _os_log_impl(&dword_1C2356000, v148, v149, "Could not convert SearchConversationContext to JSON before Pegasus request", v150, 2u);
      MEMORY[0x1C3BBFF64](v150, -1, -1);
    }

  }
  else
  {
    v152 = v146;
    v153 = v147;
    (*(void (**)(char *, uint64_t))(v421 + 8))(v144, v422);
    (*((void (**)(char *, _QWORD *))v121 + 1))(v120, v125);
    swift_bridgeObjectRetain();
    v154 = Logger.logObject.getter();
    v155 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v154, v155))
    {
      v156 = (uint8_t *)swift_slowAlloc();
      v157 = swift_slowAlloc();
      v466 = v157;
      *(_DWORD *)v156 = 136315138;
      swift_bridgeObjectRetain();
      v464[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v152, v153, &v466);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v154, v155, "SearchConversationContext JSON before Pegasus request: %s", v156, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v157, -1, -1);
      v158 = v156;
      v159 = v457;
      v111 = v461;
      MEMORY[0x1C3BBFF64](v158, -1, -1);

      goto LABEL_32;
    }

    v151 = swift_bridgeObjectRelease_n();
  }
  v159 = v457;
LABEL_32:
  v160 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v151);
  v402 = v111;
  v403 = (uint64_t)v460;
  v161 = v455;
  Date.init()();
  v162 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v160 + 200);
  v163 = v444;
  v402 = &v400;
  v403 = v444;
  LOBYTE(v400) = 2;
  v164 = v441;
  v162(0xD000000000000040, 0x80000001C25089D0, 0, v161, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 644, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v435 = 0;
  v459(v161, v458);
  v165 = UUID.uuidString.getter();
  v167 = v166;
  v168 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.modify();
  MEMORY[0x1C3BBC124](v165, v167);
  v168(&v466, 0);
  v169 = v443;
  v170 = v423;
  (*(void (**)(char *, char *, uint64_t))(v443 + 16))(v423, v164, v163);
  v171 = Logger.logObject.getter();
  v172 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v171, v172))
  {
    v173 = (uint8_t *)swift_slowAlloc();
    v174 = swift_slowAlloc();
    v466 = v174;
    *(_DWORD *)v173 = 136315138;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v175 = dispatch thunk of CustomStringConvertible.description.getter();
    v464[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v175, v176, &v466);
    v159 = v457;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v177 = *(void (**)(char *, uint64_t))(v443 + 8);
    v177(v170, v163);
    _os_log_impl(&dword_1C2356000, v171, v172, "Adding pegasusId (%s) to request", v173, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v174, -1, -1);
    MEMORY[0x1C3BBFF64](v173, -1, -1);
  }
  else
  {
    v177 = *(void (**)(char *, uint64_t))(v169 + 8);
    v177(v170, v163);
  }

  v178 = (uint64_t)v424;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v460 + v159[10], (uint64_t)v424, &demangling cache variable for type metadata for PommesContext?);
  v179 = type metadata accessor for PommesContext();
  v180 = *(_QWORD *)(v179 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v180 + 48))(v178, 1, v179) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v178, &demangling cache variable for type metadata for PommesContext?);
    v181 = (uint64_t)v460;
    v182 = v462;
  }
  else
  {
    v183 = PommesContext.domain.getter();
    v185 = v184;
    (*(void (**)(uint64_t, uint64_t))(v180 + 8))(v178, v179);
    v181 = (uint64_t)v460;
    v182 = v462;
    if (v185)
    {
      if (*((_BYTE *)v460 + v159[20]) == 1)
      {
        swift_bridgeObjectRetain();
        v186 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.modify();
        MEMORY[0x1C3BBC10C](v183, v185);
        v186(&v466, 0);
        swift_bridgeObjectRetain();
        v187 = Logger.logObject.getter();
        v188 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v187, v188))
        {
          v189 = (uint8_t *)swift_slowAlloc();
          v190 = swift_slowAlloc();
          v466 = v190;
          *(_DWORD *)v189 = 136315138;
          v191 = (uint64_t)v460;
          v438 = v189 + 4;
          swift_bridgeObjectRetain();
          v464[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v183, v185, &v466);
          v159 = v457;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1C2356000, v187, v188, "Adding personalDomainFallback (%s) to request", v189, 0xCu);
          swift_arrayDestroy();
          v192 = v190;
          v181 = v191;
          v182 = v462;
          MEMORY[0x1C3BBFF64](v192, -1, -1);
          MEMORY[0x1C3BBFF64](v189, -1, -1);

        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
  v193 = v425;
  outlined init with copy of PommesSearchRequest(v181, v425, type metadata accessor for PommesSearchRequest);
  if (*(_QWORD *)(v193 + v159[13]))
    swift_bridgeObjectRetain();
  v194 = (char *)specialized PommesAssistantIDManager.init(realAssistantID:)();
  v196 = v195;
  v198 = v197;
  outlined destroy of PommesSearchRequest(v193, type metadata accessor for PommesSearchRequest);
  v199 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v200 = objc_msgSend(v199, sel_longLivedIdentifierUploadingEnabled);

  v438 = (uint8_t *)v198;
  v437 = v194;
  if (!v200)
  {
    v202 = v412;
    PommesAssistantIDManager.replacementAssistantID()(v194, v196, v198, v412);
    v196 = UUID.uuidString.getter();
    v201 = v203;
    v177((char *)v202, v444);
LABEL_49:
    swift_bridgeObjectRetain();
    v204 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.assistantID.setter();
    v204(&v466, 0);
    swift_bridgeObjectRetain();
    v205 = Logger.logObject.getter();
    v206 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v205, v206))
    {
      v207 = (uint8_t *)swift_slowAlloc();
      v208 = v181;
      v209 = swift_slowAlloc();
      v466 = v209;
      *(_DWORD *)v207 = 136315138;
      swift_bridgeObjectRetain();
      v464[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v196, v201, &v466);
      v159 = v457;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v205, v206, "Adding assistantId (%s) to request", v207, 0xCu);
      swift_arrayDestroy();
      v210 = v209;
      v181 = v208;
      v182 = v462;
      MEMORY[0x1C3BBFF64](v210, -1, -1);
      MEMORY[0x1C3BBFF64](v207, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    goto LABEL_52;
  }
  if (v198)
  {
    v201 = (unint64_t)v438;
    swift_bridgeObjectRetain();
    goto LABEL_49;
  }
LABEL_52:
  v211 = (uint64_t *)(v181 + v159[8]);
  v212 = v211[1];
  if (v212)
  {
    v213 = *v211;
    swift_bridgeObjectRetain_n();
    v214 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.interactionID.setter();
    v214(&v466, 0);
    swift_bridgeObjectRetain();
    v215 = Logger.logObject.getter();
    v216 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v215, v216))
    {
      v217 = (uint8_t *)swift_slowAlloc();
      v218 = swift_slowAlloc();
      v466 = v218;
      *(_DWORD *)v217 = 136315138;
      swift_bridgeObjectRetain();
      v464[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v213, v212, &v466);
      v182 = v462;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v215, v216, "Adding interactionId (%s) to request", v217, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v218, -1, -1);
      MEMORY[0x1C3BBFF64](v217, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  v219 = PommesSearchRequest.resultCandidateId.getter();
  if (v220)
  {
    v221 = v219;
    v222 = v220;
    swift_bridgeObjectRetain();
    v223 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.resultCandidateID.setter();
    v223(&v466, 0);
    swift_bridgeObjectRetain();
    v224 = Logger.logObject.getter();
    v225 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v224, v225))
    {
      v226 = (uint8_t *)swift_slowAlloc();
      v227 = swift_slowAlloc();
      v466 = v227;
      *(_DWORD *)v226 = 136315138;
      swift_bridgeObjectRetain();
      v464[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v221, v222, &v466);
      v182 = v462;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v224, v225, "Adding resultCandidateId (%s) to request", v226, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v227, -1, -1);
      MEMORY[0x1C3BBFF64](v226, -1, -1);

    }
    else
    {

      v219 = swift_bridgeObjectRelease_n();
    }
  }
  v424 = v404;
  v228 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v219);
  v229 = v461;
  v400 = v461;
  v401 = v182;
  v402 = v460;
  v230 = v455;
  Date.init()();
  v231 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t))(*(_QWORD *)v228 + 200);
  v425 = 0xD000000000000026;
  v423 = (char *)(MEMORY[0x1E0DEE9C0] + 8);
  v402 = v399;
  v403 = MEMORY[0x1E0DEE9C0] + 8;
  v401 = partial apply for closure #5 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:);
  LOBYTE(v400) = 2;
  v232 = v182;
  v399[0] = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
  v399[1] = 72;
  v233 = v435;
  v231(0xD000000000000026, 0x80000001C2508BD0, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40);
  v422 = (uint64_t)v233;
  v234 = v458;
  v235 = (uint64_t (*)(char *, uint64_t))v459;
  v236 = ((uint64_t (*)(char *, uint64_t))v459)(v230, v458);
  v435 = v404;
  v237 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v236);
  v400 = v229;
  v401 = v232;
  v238 = v460;
  v402 = v460;
  Date.init()();
  v239 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v237 + 200);
  v240 = v423;
  v402 = v399;
  v403 = (uint64_t)v423;
  LOBYTE(v400) = 2;
  v241 = v422;
  v239(0xD00000000000002CLL, 0x80000001C2508C00, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 679, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #6 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v424 = (_QWORD *)v241;
  v242 = v235(v230, v234);
  v435 = v404;
  v243 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v242);
  v400 = v229;
  v401 = v232;
  v402 = v238;
  Date.init()();
  v244 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v243 + 200);
  v402 = v399;
  v403 = (uint64_t)v240;
  LOBYTE(v400) = 2;
  v245 = (uint64_t)v424;
  v244(0xD00000000000002ELL, 0x80000001C2508C30, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 683, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #7 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v246 = v235(v230, v234);
  v435 = v404;
  v247 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v246);
  v400 = v229;
  v401 = v232;
  v402 = v436;
  Date.init()();
  v248 = *(void (**)(uint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v247 + 200);
  v402 = v399;
  v403 = (uint64_t)v240;
  LOBYTE(v400) = 2;
  v248(v425, 0x80000001C2508C60, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 687, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #8 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v235(v230, v234);
  v249 = v460;
  v250 = v457;
  v251 = v426;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v460 + v457[6], v426, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
  v252 = v427;
  v253 = v428;
  if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD *))(v427 + 48))(v251, 1, v428) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v251, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_RewrittenUtterance?);
    v254 = (uint64_t)v249 + v250[11];
    v255 = v414;
    outlined init with copy of MediaUserStateCenter?(v254, v414, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    v256 = v415;
    v257 = v416;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v415 + 48))(v255, 1, v416) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v255, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
      v258 = v461;
      v259 = v456;
      v230 = v455;
      v260 = v408;
      v457 = (int *)v245;
    }
    else
    {
      v266 = v417;
      v267 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v256 + 32))(v417, v255, v257);
      v457 = (int *)v404;
      v268 = static PerformanceUtil.shared;
      MEMORY[0x1E0C80A78](v267);
      v258 = v461;
      v269 = v462;
      v400 = v461;
      v401 = v462;
      v402 = v266;
      v270 = v455;
      Date.init()();
      v271 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v268 + 200);
      v272 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_PegasusSearchQuery]);
      v402 = v399;
      v403 = v272;
      LOBYTE(v400) = 2;
      v271(v464, 0xD000000000000028, 0x80000001C2508DD0, 0, v270, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 697, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #10 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
      v435 = (_QWORD *)v245;
      v273 = v459;
      v459(v270, v458);
      v274 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
      v428 = v404;
      v275 = static PerformanceUtil.shared;
      MEMORY[0x1E0C80A78](v274);
      v402 = v258;
      v403 = (uint64_t)v266;
      Date.init()();
      v276 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v275 + 200);
      v277 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [(Siri_Nlu_External_Span, RREntity)]);
      v402 = &v400;
      v403 = v277;
      LOBYTE(v400) = 2;
      v278 = (int *)v435;
      v276(&v467, 0xD00000000000002FLL, 0x80000001C2508E00, 0, v270, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 701, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #11 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
      v457 = v278;
      v273(v270, v458);
      v279 = v467;
      if (*(_QWORD *)(v467 + 16))
      {
        v280 = (uint64_t)v442;
        v281 = v456;
        v282 = v439;
        v439(v442, v269, v456);
        v283 = v450;
        PegasusProxy.addResolvedEntities(_:to:)(v279, v280, v450);
        swift_bridgeObjectRelease();
        v284 = v440;
        v440((char *)v280, v281);
        ((void (*)(uint64_t (*)(), uint64_t, uint64_t))v449)(v269, v283, v281);
        v285 = v269;
      }
      else
      {
        swift_bridgeObjectRelease();
        v281 = v456;
        v285 = v269;
        v282 = v439;
        v284 = v440;
      }
      v286 = v409;
      Date.init()();
      v287 = v453;
      v288 = v286 + v453[5];
      *(_QWORD *)v288 = "SiriInformationSearch/PegasusProxy.swift";
      *(_QWORD *)(v288 + 8) = 40;
      *(_BYTE *)(v288 + 16) = 2;
      *(_QWORD *)(v286 + v287[6]) = 733;
      v289 = v286 + v287[7];
      *(_QWORD *)v289 = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
      *(_QWORD *)(v289 + 8) = 72;
      *(_BYTE *)(v289 + 16) = 2;
      v290 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001BLL);
      v291 = (uint64_t *)(v286 + v287[8]);
      *v291 = v290;
      v291[1] = v292;
      v293 = v407;
      v282(v407, v285, v281);
      v294 = v406;
      v295 = v457;
      (*(void (**)(char *, char *, _QWORD *))(*v258 + 664))(v417, v293, v436);
      if (v295)
      {
        v284(v293, v281);
        outlined destroy of PommesSearchRequest(v286, type metadata accessor for PerformanceUtil.Ticket);
        v296 = v295;
        v297 = v295;
        v298 = Logger.logObject.getter();
        v299 = static os_log_type_t.error.getter();
        v259 = v281;
        if (os_log_type_enabled(v298, v299))
        {
          v300 = v281;
          v301 = (uint8_t *)swift_slowAlloc();
          v302 = swift_slowAlloc();
          v466 = v302;
          *(_DWORD *)v301 = 136315138;
          v457 = (int *)(v301 + 4);
          v463 = (uint64_t)v295;
          v303 = v295;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          v304 = String.init<A>(describing:)();
          v463 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v304, v305, &v466);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v258 = v461;
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1C2356000, v298, v299, "Unable to add user spans to search request: %s. Continuing request without spans.", v301, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v302, -1, -1);
          v259 = v300;
          MEMORY[0x1C3BBFF64](v301, -1, -1);

        }
        else
        {

        }
        v260 = v408;
        (*(void (**)(char *, uint64_t))(v415 + 8))(v417, v416);
        v457 = 0;
      }
      else
      {
        v457 = 0;
        v284(v293, v281);
        ((void (*)(uint64_t (*)(), char *, uint64_t))v449)(v285, v294, v281);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v286, 0);
        v306 = Logger.logObject.getter();
        v307 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v306, v307))
        {
          v308 = (uint8_t *)swift_slowAlloc();
          v309 = swift_slowAlloc();
          v463 = v309;
          *(_DWORD *)v308 = 136315138;
          swift_beginAccess();
          Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
          swift_endAccess();
          v310 = String.init<A>(describing:)();
          v466 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v310, v311, &v463);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl(&dword_1C2356000, v306, v307, "Adding user spans to request. Generated client conversation context info: %s", v308, 0xCu);
          swift_arrayDestroy();
          v312 = v309;
          v284 = v440;
          v258 = v461;
          MEMORY[0x1C3BBFF64](v312, -1, -1);
          MEMORY[0x1C3BBFF64](v308, -1, -1);
        }

        swift_beginAccess();
        v313 = v442;
        v259 = v456;
        v314 = v439;
        v439(v442, v285, v456);
        v260 = v408;
        v315 = v450;
        v316 = v460;
        (*(void (**)(char *, uint64_t (*)()))(*(_QWORD *)v408 + 344))(v313, v460);
        v284(v313, v259);
        v317 = (void (*)(uint64_t (*)(), uint64_t, uint64_t))v449;
        ((void (*)(uint64_t (*)(), uint64_t, uint64_t))v449)(v285, v315, v259);
        v314(v313, v285, v259);
        (*(void (**)(char *, uint64_t (*)()))(*(_QWORD *)v260 + 352))(v313, v316);
        v440(v313, v259);
        outlined destroy of PommesSearchRequest(v409, type metadata accessor for PerformanceUtil.Ticket);
        (*(void (**)(char *, uint64_t))(v415 + 8))(v417, v416);
        v317(v285, v315, v259);
      }
      v230 = v455;
    }
  }
  else
  {
    v261 = v413;
    v262 = (*(uint64_t (**)(char *, uint64_t, _QWORD *))(v252 + 32))(v413, v251, v253);
    v436 = v404;
    v263 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v262);
    v264 = v461;
    v400 = v461;
    v401 = v462;
    v402 = v261;
    Date.init()();
    v457 = *(int **)(*(_QWORD *)v263 + 200);
    v265 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_PegasusSearchQuery]);
    v402 = v399;
    v403 = v265;
    LOBYTE(v400) = 2;
    ((void (*)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))v457)(&v466, 0xD00000000000002ALL, 0x80000001C2508E50, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 692, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #9 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
    v457 = (int *)v245;
    v459(v230, v458);
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
    (*(void (**)(char *, _QWORD *))(v252 + 8))(v261, v253);
    v258 = v264;
    v259 = v456;
    v260 = v408;
  }
  v318 = v462;
  swift_beginAccess();
  v319 = v442;
  v439(v442, v318, v259);
  v320 = v450;
  v321 = v460;
  (*(void (**)(char *))(*(_QWORD *)v260 + 360))(v319);
  v440(v319, v259);
  v322 = ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))v449)(v318, v320, v259);
  v323 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v322);
  v400 = v258;
  v401 = v318;
  v402 = v321;
  Date.init()();
  v324 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v323 + 200);
  v402 = v399;
  v403 = v259;
  LOBYTE(v400) = 2;
  v325 = v429;
  v326 = v457;
  v324(0xD000000000000043, 0x80000001C2508C90, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 748, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v459(v230, v458);
  v327 = (uint64_t (*)(uint64_t (*)(), char *, uint64_t))v449;
  v328 = ((uint64_t (*)(uint64_t (*)(), char *, uint64_t))v449)(v318, v325, v259);
  v329 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v328);
  v400 = v461;
  v401 = v318;
  v402 = v321;
  v403 = (uint64_t)v451;
  Date.init()();
  v330 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v329 + 200);
  v402 = v399;
  v403 = v259;
  LOBYTE(v400) = 2;
  v331 = v430;
  v330(0xD00000000000002DLL, 0x80000001C2508CE0, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 755, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v457 = v326;
  v332 = v458;
  v333 = v459;
  v459(v230, v458);
  v334 = v327(v318, v331, v259);
  v335 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v334);
  v402 = v461;
  v403 = (uint64_t)v318;
  Date.init()();
  v336 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v335 + 200);
  v402 = &v400;
  v403 = v259;
  LOBYTE(v400) = 2;
  v337 = v450;
  v338 = v457;
  v336(0xD00000000000002BLL, 0x80000001C2508D10, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 762, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #14 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v457 = v338;
  v333(v230, v332);
  v339 = ((uint64_t (*)(uint64_t (*)(), uint64_t, uint64_t))v449)(v318, v337, v259);
  v340 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v339);
  v341 = v460;
  v400 = v461;
  v401 = v318;
  v402 = v460;
  Date.init()();
  v342 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v340 + 200);
  v402 = v399;
  v403 = MEMORY[0x1E0DEE9C0] + 8;
  LOBYTE(v400) = 2;
  v343 = v457;
  v342(0xD000000000000019, 0x80000001C2508D40, 0, v230, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 767, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v459(v230, v332);
  v344 = (uint64_t)v433;
  Date.init()();
  v345 = v453;
  v346 = v344 + v453[5];
  *(_QWORD *)v346 = "SiriInformationSearch/PegasusProxy.swift";
  *(_QWORD *)(v346 + 8) = 40;
  *(_BYTE *)(v346 + 16) = 2;
  *(_QWORD *)(v344 + v345[6]) = 772;
  v347 = v344 + v345[7];
  *(_QWORD *)v347 = "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)";
  *(_QWORD *)(v347 + 8) = 72;
  v348 = v461;
  *(_BYTE *)(v347 + 16) = 2;
  v349 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001BLL);
  v350 = (uint64_t *)(v344 + v345[8]);
  *v350 = v349;
  v350[1] = v351;
  v352 = v432;
  v439(v432, v318, v259);
  v353 = v431;
  v354 = v341;
  v355 = v348;
  (*(void (**)(char *, uint64_t (*)()))(*v348 + 648))(v352, v354);
  v356 = &demangling cache variable for type metadata for (String, CacheHandling);
  if (v343)
  {
    v440(v352, v259);
    outlined destroy of PommesSearchRequest(v344, type metadata accessor for PerformanceUtil.Ticket);
    v357 = v343;
    v358 = v343;
    v359 = Logger.logObject.getter();
    v360 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v359, v360))
    {
      v361 = (uint8_t *)swift_slowAlloc();
      v362 = swift_slowAlloc();
      v464[0] = v362;
      *(_DWORD *)v361 = 136315138;
      v467 = (uint64_t)v343;
      v363 = v343;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v364 = String.init<A>(describing:)();
      v467 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v364, v365, v464);
      v318 = v462;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v356 = (_QWORD *)&demangling cache variable for type metadata for (String, CacheHandling);
      v355 = v461;
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v359, v360, "Unable to add resolved references for SmartPlay request: %s", v361, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v362, -1, -1);
      MEMORY[0x1C3BBFF64](v361, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    v440(v352, v259);
    ((void (*)(uint64_t (*)(), char *, uint64_t))v449)(v318, v353, v259);
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v344, 0);
    outlined destroy of PommesSearchRequest(v344, type metadata accessor for PerformanceUtil.Ticket);
  }
  v366 = specialized static PegasusOverrideUtil.requestFeatureFlag.getter();
  v460 = 0;
  if (v367)
  {
    v368 = v366;
    v369 = v367;
    swift_bridgeObjectRetain_n();
    v370 = Logger.logObject.getter();
    v371 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v370, v371))
    {
      v372 = (uint8_t *)swift_slowAlloc();
      v373 = swift_slowAlloc();
      v464[0] = v373;
      *(_DWORD *)v372 = 136315138;
      swift_bridgeObjectRetain();
      v467 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v368, v369, v464);
      v355 = v461;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v370, v371, "Using Pegasus request feature flag “%s”", v372, 0xCu);
      swift_arrayDestroy();
      v374 = v373;
      v356 = (_QWORD *)&demangling cache variable for type metadata for (String, CacheHandling);
      MEMORY[0x1C3BBFF64](v374, -1, -1);
      MEMORY[0x1C3BBFF64](v372, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v318 = v462;
    swift_beginAccess();
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter();
    v380 = swift_endAccess();
  }
  else
  {
    v375 = Logger.logObject.getter();
    v376 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v375, v376))
    {
      v377 = v356;
      v378 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v378 = 0;
      _os_log_impl(&dword_1C2356000, v375, v376, "Clearing Pegasus request feature flag (production)", v378, 2u);
      v379 = v378;
      v356 = v377;
      MEMORY[0x1C3BBFF64](v379, -1, -1);
    }

    swift_beginAccess();
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.setter();
    v380 = swift_endAccess();
  }
  v381 = v356[237];
  MEMORY[0x1E0C80A78](v380);
  v402 = v355;
  v403 = (uint64_t)v318;
  v382 = v455;
  Date.init()();
  v383 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v381 + 200);
  v384 = v356;
  v385 = MEMORY[0x1E0DEE9C0] + 8;
  v402 = &v400;
  v403 = MEMORY[0x1E0DEE9C0] + 8;
  LOBYTE(v400) = 2;
  v386 = v460;
  v383(0xD000000000000020, 0x80000001C2508D80, 0, v382, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 798, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #16 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v460 = v386;
  v387 = v458;
  v388 = v459;
  v459(v382, v458);
  swift_beginAccess();
  (*(void (**)(uint64_t (*)()))(*v355 + 80))(v318);
  v389 = swift_endAccess();
  v457 = (int *)v404;
  v390 = v384[237];
  MEMORY[0x1E0C80A78](v389);
  v402 = v355;
  v403 = (uint64_t)v318;
  Date.init()();
  v391 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)()))(*(_QWORD *)v390 + 200);
  v402 = &v400;
  v403 = v385;
  LOBYTE(v400) = 2;
  v391(0xD000000000000018, 0x80000001C2508DB0, 0, v382, "SiriInformationSearch/PegasusProxy.swift", 40, 2, 806, "constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)", 72, (_DWORD)v400, partial apply for closure #17 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:));
  v388(v382, v387);
  swift_beginAccess();
  (*(void (**)(uint64_t (*)(), uint64_t))(*v355 + 96))(v318, v408);
  swift_endAccess();
  v392 = (uint64_t)v442;
  v393 = v456;
  v394 = (void (*)(uint64_t, uint64_t (*)(), uint64_t))v439;
  v439(v442, v318, v456);
  v395 = v450;
  PegasusProxy.addCurareFlags(to:)(v392, v450);

  swift_bridgeObjectRelease();
  outlined consume of Data?(v446, v445);
  v396 = v392;
  v397 = (void (*)(uint64_t (*)(), uint64_t))v440;
  v440((char *)v396, v393);
  (*(void (**)(char *, uint64_t))(v443 + 8))(v441, v444);
  outlined destroy of PommesSearchRequest(v452, type metadata accessor for PerformanceUtil.Ticket);
  ((void (*)(uint64_t (*)(), uint64_t, uint64_t))v449)(v318, v395, v393);
  v394(v434, v318, v393);
  v397(v318, v393);
  v398 = (uint64_t)v448;
  OSSignposter.end(token:message:)((uint64_t)v448, 0, 0xE000000000000000);
  return outlined destroy of PommesSearchRequest(v398, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
}

uint64_t partial apply for closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t *v0;

  return closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v0[2], v0[3], v0[4]);
}

uint64_t closure #1 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t ObjectType;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;

  v18 = a3;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestType();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 328))(v7);
  v11 = v10;
  ObjectType = swift_getObjectType();
  v13 = (uint64_t *)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 20));
  v15 = *v13;
  v14 = v13[1];
  (*(void (**)(char *, _QWORD, uint64_t))(v6 + 104))(v9, *MEMORY[0x1E0D6E4E8], v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v11 + 40))(v15, v14, v18, v9, ObjectType, v11);
  swift_unknownObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t PegasusProxy.client.getter()
{
  swift_beginAccess();
  return swift_unknownObjectRetain();
}

uint64_t partial apply for closure #2 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 576))();
  *a1 = result & 1;
  return result;
}

Swift::Bool __swiftcall PegasusProxy.isUserDataShareOptIn()()
{
  uint64_t v0;

  return objc_msgSend(*(id *)(*(_QWORD *)(v0 + 184) + 104), sel_siriDataSharingOptInStatus) == (id)1;
}

Swift::Bool __swiftcall PommesPhoneCallStateManager.cachedIsUserOnPhoneCall(requestId:conservative:)(Swift::String_optional requestId, Swift::Bool conservative)
{
  Swift::Bool result;

  __asm { BR              X10 }
  return result;
}

uint64_t sub_1C2389468()
{
  char v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2356000, v2, v3, "PommesPhoneCallStateManager: pending phone call state", v4, 2u);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }

  return v0 & 1;
}

uint64_t DataProviderManager.resolveProfileSlice(to:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v46;
  _BYTE *v47;
  uint64_t v48;
  char *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67[96];
  uint64_t v68[2];
  uint64_t v69;

  v56 = a3;
  v63 = type metadata accessor for DispatchTimeInterval();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x1E0C80A78](v63);
  v57 = (uint64_t *)((char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v64 = type metadata accessor for DispatchTime();
  v60 = *(_QWORD *)(v64 - 8);
  v6 = MEMORY[0x1E0C80A78](v64);
  v59 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v62 = (char *)&v48 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v9);
  v65 = (uint64_t)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v15 = *(_QWORD *)(v14 - 8);
  v16 = MEMORY[0x1E0C80A78](v14);
  v18 = (char *)&v48 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v48 - v19;
  v50 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v50((char *)&v48 - v19, a1, v14);
  v21 = type metadata accessor for PommesSearchRequest(0);
  if (!*(_QWORD *)(*(_QWORD *)(a2 + *(int *)(v21 + 92)) + 16))
    return (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v56, v20, v14);
  v22 = v21;
  v49 = v18;
  v51 = v15;
  v52 = v20;
  v53 = v14;
  Date.init()();
  v23 = &v13[v11[5]];
  *(_QWORD *)v23 = "SiriInformationSearch/DataProviderManager.swift";
  *((_QWORD *)v23 + 1) = 47;
  v23[16] = 2;
  *(_QWORD *)&v13[v11[6]] = 151;
  v24 = &v13[v11[7]];
  *(_QWORD *)v24 = "resolveProfileSlice(to:with:)";
  *((_QWORD *)v24 + 1) = 29;
  v24[16] = 2;
  v25 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
  v26 = (uint64_t *)&v13[v11[8]];
  *v26 = v25;
  v26[1] = v27;
  v28 = v58;
  v55 = *(_QWORD *)(v58 + 64);
  v29 = v65;
  outlined init with copy of PommesSearchRequest(a2, v65);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v29, 0, 1, v22);
  v54 = *(_QWORD *)(v28 + 16);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v30 = v66;
  OS_dispatch_queue.sync<A>(execute:)();
  v66 = v30;
  outlined init with take of PommesSearchReason?((uint64_t)v67, (uint64_t)v68, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v31 = *(_QWORD *)(v28 + 120);
  swift_unknownObjectRetain();
  v32 = v59;
  static DispatchTime.now()();
  v33 = v57;
  *v57 = 1;
  v34 = v61;
  v35 = v63;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v61 + 104))(v33, *MEMORY[0x1E0DEF490], v63);
  v36 = v62;
  MEMORY[0x1C3BBEB6C](v32, v33);
  (*(void (**)(_QWORD *, uint64_t))(v34 + 8))(v33, v35);
  v37 = *(void (**)(char *, uint64_t))(v60 + 8);
  v38 = v64;
  v37(v32, v64);
  v39 = v65;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)v55 + 240))(&v69, v65, v68, v31, v54, v36);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v68);
  v37(v36, v38);
  outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for PommesSearchRequest?);
  if (v69)
  {
    v40 = (uint64_t)v52;
    v41 = v51;
    if (*(_QWORD *)(v69 + 16))
    {
      v42 = (uint64_t)v49;
      DataProviderManager.appendProfileSlices(_:to:)(v69, (uint64_t)v52, (uint64_t)v49);
      swift_bridgeObjectRelease();
      v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v44 = v53;
      v43(v40, v53);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v40, v42, v44);
      v50(v56, v40, v44);
      if (one-time initialization token for shared != -1)
        swift_once();
      (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v13, 0);
      outlined destroy of PerformanceUtil.Ticket((uint64_t)v13);
      return ((uint64_t (*)(uint64_t, uint64_t))v43)(v40, v44);
    }
    swift_bridgeObjectRelease();
    v46 = v53;
  }
  else
  {
    v46 = v53;
    v40 = (uint64_t)v52;
    v41 = v51;
  }
  lazy protocol witness table accessor for type PegasusError and conformance PegasusError();
  swift_allocError();
  *v47 = 5;
  swift_willThrow();
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v13, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v13);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v40, v46);
}

uint64_t partial apply for closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t closure #3 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a1 + *(int *)(v7 + 40), (uint64_t)v6, &demangling cache variable for type metadata for PommesContext?);
  v8 = type metadata accessor for PommesContext();
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) == 1)
  {
    result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for PommesContext?);
    v11 = 0;
    v12 = 0xF000000000000000;
  }
  else
  {
    v11 = PommesContext.exportPegasusConversationContext()();
    v12 = v13;
    result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  *a2 = v11;
  a2[1] = v12;
  return result;
}

uint64_t outlined copy of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined copy of Data._Representation(a1, a2);
  return a1;
}

uint64_t outlined consume of Data?(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return outlined consume of Data._Representation(a1, a2);
  return a1;
}

uint64_t partial apply for closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t closure #4 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (uint64_t *)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
  v4 = *v2;
  v3 = v2[1];
  swift_retain();
  specialized Emittable.makeComponentIdAndEmitRequestLink(for:with:)(24, v4, v3);
  return swift_release();
}

uint64_t PommesSearchRequest.resultCandidateId.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t (*v4)(_QWORD);
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;

  v1 = type metadata accessor for PommesSearchRequest.ParseState(0);
  MEMORY[0x1E0C80A78](v1);
  v3 = (uint64_t *)((char *)&v12 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  outlined init with copy of PommesSearchRequest(v0, (uint64_t)v3, v4);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of PommesSearchRequest((uint64_t)v3, type metadata accessor for PommesSearchRequest.ParseState);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    v6 = Logger.logObject.getter();
    v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_1C2356000, v6, v7, "Caller needs migrated to use TRP IDs", v8, 2u);
      MEMORY[0x1C3BBFF64](v8, -1, -1);
    }

    return 0;
  }
  else
  {
    v9 = *v3;
    v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate));
    outlined destroy of PommesSearchRequest((uint64_t)v3 + *(int *)(v10 + 48), (uint64_t (*)(_QWORD))type metadata accessor for NLXResultCandidate);
  }
  return v9;
}

uint64_t partial apply for closure #5 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 16) + 600))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t PegasusProxy.addInteractionType(to:pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(_BYTE *, _QWORD);
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, uint64_t);
  unsigned int *v38;
  void (*v39)(_BYTE *, _QWORD);
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE v49[32];

  v48 = a1;
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InteractionType?);
  v8 = MEMORY[0x1E0C80A78](v7);
  v47 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v40 - v11;
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v40 - v13;
  v15 = type metadata accessor for InteractionType();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v46 = (char *)&v40 - v20;
  v21 = type metadata accessor for PommesSearchRequest(0);
  v22 = *(int *)(v21 + 52);
  v44 = a2;
  v23 = *(_QWORD *)(a2 + v22);
  if (v23)
  {
    v24 = v21;
    v41 = v4;
    v42 = v3;
    v43 = v6;
    v25 = *(void (**)(uint64_t))(*(_QWORD *)v23 + 224);
    v26 = swift_retain();
    v25(v26);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for InteractionType?);
      v27 = v45;
      v28 = v44 + *(int *)(v24 + 56);
      v29 = v45 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
      swift_beginAccess();
      outlined init with copy of MediaUserStateCenter?(v29, (uint64_t)v12, &demangling cache variable for type metadata for InteractionType?);
      v30 = v46;
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 232))(v28, v12);
      outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for InteractionType?);
    }
    else
    {
      v30 = v46;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v46, v14, v15);
      v27 = v45;
    }
    v33 = *(void (**)(char *, char *, uint64_t))(v16 + 16);
    v33(v12, v30, v15);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v12, 0, 1, v15);
    v34 = (uint64_t)v12;
    v35 = v47;
    outlined init with take of PommesSearchReason?(v34, v47, &demangling cache variable for type metadata for InteractionType?);
    v36 = v27 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_previousInteractionType;
    swift_beginAccess();
    outlined assign with take of InteractionType?(v35, v36);
    swift_endAccess();
    v33(v19, v30, v15);
    LODWORD(v36) = (*(uint64_t (**)(char *, uint64_t))(v16 + 88))(v19, v15);
    LODWORD(v33) = *MEMORY[0x1E0DA8010];
    v37 = *(void (**)(char *, uint64_t))(v16 + 8);
    v37(v19, v15);
    if ((_DWORD)v36 == (_DWORD)v33)
      v38 = (unsigned int *)MEMORY[0x1E0D6CE78];
    else
      v38 = (unsigned int *)MEMORY[0x1E0D6CE80];
    (*(void (**)(char *, _QWORD, uint64_t))(v41 + 104))(v43, *v38, v42);
    v39 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.setter();
    v39(v49, 0);
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v37)(v30, v15);
  }
  else
  {
    (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0D6CE80], v3);
    v31 = (uint64_t (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.setter();
    return v31(v49, 0);
  }
}

uint64_t PommesRequestContext.responseModeInteractionType()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char v20;
  void (*v21)(char *, uint64_t);
  char v22;
  unsigned int *v23;
  char v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void (*v30)(char *, char *, uint64_t);
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _QWORD v37[2];
  uint64_t v38;
  void (*v39)(char *, char *, uint64_t);
  uint64_t v40;
  uint64_t v41;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ResponseMode?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for ResponseMode();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v7);
  v12 = (char *)v37 - v11;
  v13 = MEMORY[0x1E0C80A78](v10);
  v15 = (char *)v37 - v14;
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v37 - v16;
  swift_bridgeObjectRetain();
  ResponseMode.init(aceValue:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for ResponseMode?);
LABEL_3:
    v18 = type metadata accessor for InteractionType();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(a1, 1, 1, v18);
  }
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v17, v4, v5);
  v39 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  v39(v15, v17, v5);
  static ResponseMode.voiceOnly.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ResponseMode and conformance ResponseMode, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7DE8], MEMORY[0x1E0DA7E00]);
  v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  v21 = *(void (**)(char *, uint64_t))(v6 + 8);
  v21(v12, v5);
  if ((v20 & 1) != 0
    || (static ResponseMode.voiceForward.getter(),
        v22 = dispatch thunk of static Equatable.== infix(_:_:)(),
        v21(v12, v5),
        (v22 & 1) != 0))
  {
    v21(v15, v5);
    v21(v17, v5);
    v23 = (unsigned int *)MEMORY[0x1E0DA8010];
  }
  else
  {
    static ResponseMode.displayForward.getter();
    v24 = dispatch thunk of static Equatable.== infix(_:_:)();
    v21(v12, v5);
    if ((v24 & 1) != 0)
    {
      v21(v15, v5);
    }
    else
    {
      static ResponseMode.displayOnly.getter();
      v25 = dispatch thunk of static Equatable.== infix(_:_:)();
      v21(v12, v5);
      v21(v15, v5);
      if ((v25 & 1) == 0)
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v29 = type metadata accessor for Logger();
        __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
        v30 = v39;
        v39(v9, v17, v5);
        v31 = Logger.logObject.getter();
        v32 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v31, v32))
        {
          v33 = (uint8_t *)swift_slowAlloc();
          v38 = swift_slowAlloc();
          v41 = v38;
          *(_DWORD *)v33 = 136315138;
          v37[1] = v33 + 4;
          v30(v12, v9, v5);
          v34 = String.init<A>(describing:)();
          v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v34, v35, &v41);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v21(v9, v5);
          _os_log_impl(&dword_1C2356000, v31, v32, "Unknown (future?) response mode value: %s", v33, 0xCu);
          v36 = v38;
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v36, -1, -1);
          MEMORY[0x1C3BBFF64](v33, -1, -1);

        }
        else
        {

          v21(v9, v5);
        }
        v21(v17, v5);
        goto LABEL_3;
      }
    }
    v21(v17, v5);
    v23 = (unsigned int *)MEMORY[0x1E0DA8018];
  }
  v26 = *v23;
  v27 = type metadata accessor for InteractionType();
  v28 = *(_QWORD *)(v27 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 104))(a1, v26, v27);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(a1, 0, 1, v27);
}

uint64_t partial apply for closure #6 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 16) + 608))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t PegasusProxy.addMultiUserContext(to:pommesSearchRequest:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t result;
  void (*v11)(_BYTE *, _QWORD);
  _BYTE v12[32];

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v5);
  v9 = &v12[-v8];
  result = type metadata accessor for PommesSearchRequest(0);
  if (*(_BYTE *)(a2 + *(int *)(result + 60)) == 1)
  {
    static PegasusProxy.multiUserContext(for:)(a2);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v4 + 16))(v7, v9, v3);
    v11 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.multiUserContext.setter();
    v11(v12, 0);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v4 + 8))(v9, v3);
  }
  return result;
}

uint64_t partial apply for closure #7 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v0 + 16) + 616))(*(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32));
}

uint64_t PegasusProxy.addRewrittenUtterances(to:delegatedUDA:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t VG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v30 = a1;
  v1 = type metadata accessor for Siri_Nlu_External_RewriteMessage.RewriteType();
  v27 = *(_QWORD *)(v1 - 8);
  v28 = v1;
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewriteType();
  MEMORY[0x1E0C80A78](v4);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v25 = *(_QWORD *)(v5 - 8);
  v26 = v5;
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_RewriteMessage();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v25 - v13;
  Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
  v15 = Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter();
  v17 = v16;
  v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v14, v8);
  swift_bridgeObjectRelease();
  v19 = HIBYTE(v17) & 0xF;
  if ((v17 & 0x2000000000000000) == 0)
    v19 = v15 & 0xFFFFFFFFFFFFLL;
  if (v19)
  {
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.init()();
    Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
    v20 = Siri_Nlu_External_RewriteMessage.rewrittenUtterance.getter();
    v22 = v21;
    v18(v12, v8);
    MEMORY[0x1C3BBBE54](v20, v22);
    Siri_Nlu_External_DelegatedUserDialogAct.rewrite.getter();
    Siri_Nlu_External_RewriteMessage.rewriteType.getter();
    v18(v12, v8);
    (*(void (**)(char *))(*(_QWORD *)v29 + 632))(v3);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v3, v28);
    Apple_Parsec_Siri_V2alpha_RewrittenUtterance.rewriteType.setter();
    VG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n(v30, (uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v7, v26);
  }
  else
  {
    VG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n = v30;
    swift_bridgeObjectRetain();
  }
  return VG_AHs5NeverOTg504_s21h19InformationSearch12d59ProxyC22addRewrittenUtterances2to12delegatedUDASay0D3API013f1_g4_a9_i4_dC5K67VGAJ_0A8NLUTypes0A36_Nlu_External_DelegatedUserDialogActVtFA2IXEfU_AF0f1_g1_h1_i1_R9UtteranceVTf1cn_n;
}

uint64_t specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v30;
  void *v31;
  void (*v32)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), int *, uint64_t);
  void *v33;
  void (*v34)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), int *, uint64_t);
  uint64_t v35;
  void *v36;
  uint64_t v37;
  id v38;
  id v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, void **, uint64_t);
  void **v49;
  char *v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  void (*v65)(char *, uint64_t);
  int v66;
  uint64_t *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  void **v72;
  uint64_t *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81[6];

  v78 = a3;
  v71 = type metadata accessor for RRCandidate();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v69 = (char *)&v69 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for RRResult();
  v11 = *(_QWORD *)(v10 - 8);
  v75 = v10;
  v76 = v11;
  v12 = MEMORY[0x1E0C80A78](v10);
  v73 = (uint64_t *)((char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = MEMORY[0x1E0C80A78](v12);
  v72 = (void **)((char *)&v69 - v15);
  MEMORY[0x1E0C80A78](v14);
  v74 = (char *)&v69 - v16;
  v17 = type metadata accessor for Date();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (void **)((char *)&v69 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  v25 = MEMORY[0x1E0C80A78](v22);
  v27 = (char *)&v69 - v26;
  MEMORY[0x1E0C80A78](v25);
  v77 = (uint64_t)&v69 - v28;
  v81[3] = a4;
  v81[4] = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v81);
  v30 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a4 - 8) + 16))(boxed_opaque_existential_1, a1, a4);
  if ((a2 & 1) != 0)
  {
    if (one-time initialization token for shared != -1)
      v30 = swift_once();
    v31 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v30);
    v67 = v81;
    v68 = v78;
    Date.init()();
    v32 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), int *, uint64_t))(*(_QWORD *)v31 + 200);
    LOBYTE(v66) = 2;
    v32(0xD000000000000027, 0x80000001C2502E90, 0, v20, "SiriInformationSearch/UsoEntity+SRR.swift", 41, 2, 20, "resolveFromSRR(rrClient:useSRREntityAPI:)", 41, v66, partial apply for closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:), &v66, v21);
  }
  else
  {
    if (one-time initialization token for shared != -1)
      v30 = swift_once();
    v33 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v30);
    v67 = v81;
    v68 = v78;
    Date.init()();
    v34 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)(), int *, uint64_t))(*(_QWORD *)v33 + 200);
    LOBYTE(v66) = 2;
    v34(0xD00000000000001CLL, 0x80000001C2502E10, 0, v20, "SiriInformationSearch/UsoEntity+SRR.swift", 41, 2, 24, "resolveFromSRR(rrClient:useSRREntityAPI:)", 41, v66, partial apply for closure #2 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:), &v66, v21);
  }
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  v35 = v77;
  outlined init with take of Result<RRResult, Error>((uint64_t)v27, v77);
  outlined init with copy of Result<RRResult, Error>(v35, (uint64_t)v24);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    v36 = *v24;
    v80 = (uint64_t)*v24;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v37 = type metadata accessor for Logger();
    __swift_project_value_buffer(v37, (uint64_t)static Logger.pommes);
    v38 = v36;
    v39 = v36;
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      v43 = swift_slowAlloc();
      v80 = v43;
      *(_DWORD *)v42 = 136315138;
      swift_getErrorValue();
      v44 = Error.localizedDescription.getter();
      v79 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v44, v45, &v80);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v40, v41, "Could not resolve from SRR: %s", v42, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v43, -1, -1);
      MEMORY[0x1C3BBFF64](v42, -1, -1);

    }
    else
    {

    }
    outlined destroy of Result<RRResult, Error>(v35);
    v56 = 0;
    goto LABEL_22;
  }
  v47 = v75;
  v46 = v76;
  v48 = *(void (**)(char *, void **, uint64_t))(v76 + 32);
  v49 = v72;
  v48((char *)v72, v24, v75);
  v50 = v74;
  v48(v74, v49, v47);
  v51 = v73;
  (*(void (**)(uint64_t *, char *, uint64_t))(v46 + 16))(v73, v50, v47);
  v52 = (*(uint64_t (**)(uint64_t *, uint64_t))(v46 + 88))(v51, v47);
  if (v52 == *MEMORY[0x1E0DA3E88])
  {
    (*(void (**)(uint64_t *, uint64_t))(v46 + 96))(v51, v47);
    v53 = v70;
    v54 = v69;
    v55 = v71;
    (*(void (**)(char *, uint64_t *, uint64_t))(v70 + 32))(v69, v51, v71);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RREntity>);
    type metadata accessor for RREntity();
    v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = xmmword_1C24FA1B0;
    RRCandidate.entity.getter();
    (*(void (**)(char *, uint64_t))(v53 + 8))(v54, v55);
LABEL_21:
    (*(void (**)(char *, uint64_t))(v46 + 8))(v50, v47);
    outlined destroy of Result<RRResult, Error>(v35);
    goto LABEL_22;
  }
  v57 = v52;
  if (v52 == *MEMORY[0x1E0DA3E98] || v52 == *MEMORY[0x1E0DA3E90])
  {
    (*(void (**)(uint64_t *, uint64_t))(v46 + 96))(v51, v47);
    v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12LazySequenceVySay32SiriReferenceResolutionDataModel11RRCandidateVGG_AH8RREntityVs5NeverOTg504_s12f90Ontology9UsoEntityC0A17InformationSearchE14resolveFromSRR8rrClient15useSRREntityAPISay0A28ghi6Model8l50VGSg0aoP027RRReferenceResolverProtocol_p_SbtFAjH11K53Vcfu0_32a67697f07dd709dabbe90d955a98a5bfApJTf3nnnpk_nTf1cn_nTm(*v51);
LABEL_20:
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (v52 == *MEMORY[0x1E0DA3EA0])
  {
    (*(void (**)(uint64_t *, uint64_t))(v46 + 96))(v51, v47);
    v59 = *v51;
    v60 = *(_QWORD *)(*v51 + 16);
    if (v60)
    {
      swift_bridgeObjectRetain();
      v61 = 0;
      v62 = MEMORY[0x1E0DEE9D8];
      do
      {
        v63 = *(_QWORD *)(v59 + 8 * v61++ + 32);
        v80 = v62;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        specialized Array.append<A>(contentsOf:)(v63);
        swift_bridgeObjectRelease();
        v62 = v80;
      }
      while (v60 != v61);
      swift_bridgeObjectRelease();
      v46 = v76;
    }
    else
    {
      v62 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    v56 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12LazySequenceVySay32SiriReferenceResolutionDataModel11RRCandidateVGG_AH8RREntityVs5NeverOTg504_s12f90Ontology9UsoEntityC0A17InformationSearchE14resolveFromSRR8rrClient15useSRREntityAPISay0A28ghi6Model8l50VGSg0aoP027RRReferenceResolverProtocol_p_SbtFAjH11K53Vcfu0_32a67697f07dd709dabbe90d955a98a5bfApJTf3nnnpk_nTf1cn_nTm(v62);
    goto LABEL_20;
  }
  v64 = *MEMORY[0x1E0DA3EA8];
  v65 = *(void (**)(char *, uint64_t))(v46 + 8);
  v65(v50, v47);
  outlined destroy of Result<RRResult, Error>(v35);
  if (v57 != v64)
    v65((char *)v51, v47);
  v56 = 0;
LABEL_22:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v81);
  return v56;
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t partial apply for closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)()
{
  uint64_t v0;

  return closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), MEMORY[0x1E0DA3D00]);
}

uint64_t closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(_QWORD *a1, uint64_t a2, void (*a3)(void))
{
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  type metadata accessor for ResolveQuery();
  swift_allocObject();
  swift_retain();
  ResolveQuery.init(referenceEntity:alternativeEntityTypes:restrictedEntitiesKey:)();
  a3();
  return swift_release();
}

uint64_t outlined init with take of Result<RRResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined init with copy of Result<RRResult, Error>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of Result<RRResult, Error>(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for OnScreenContextType.GeneratedClientEntity()
{
  uint64_t result;

  result = type metadata singleton initialization cache for OnScreenContextType.GeneratedClientEntity;
  if (!type metadata singleton initialization cache for OnScreenContextType.GeneratedClientEntity)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t partial apply for closure #11 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #11 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  uint64_t v28;
  char *v29;
  char v30;
  void (*v31)(char *, char *, _QWORD *);
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  char v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  _QWORD *v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  void (*v67)(char *, uint64_t, uint64_t);
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;

  v53 = a1;
  v50 = a3;
  v4 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v70 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v48 - v8;
  v10 = (_QWORD *)type metadata accessor for Siri_Nlu_External_Span();
  v72 = *(v10 - 1);
  v11 = MEMORY[0x1E0C80A78](v10);
  v59 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v71 = (char *)&v48 - v13;
  v14 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    goto LABEL_32;
  while (1)
  {
    v17 = type metadata accessor for OSSignposter();
    __swift_project_value_buffer(v17, (uint64_t)static Signposter.pommes);
    OSSignposter.begin(name:context:)("proxy.userVocabSpans", 20, 2u, 0, (uint64_t)v16);
    v18 = Siri_Nlu_External_Span.matcherNames.getter();
    v19 = MEMORY[0x1E0DEE9D8];
    v73 = MEMORY[0x1E0DEE9D8];
    v56 = (char *)v18;
    v20 = *(_QWORD *)(v18 + 16);
    v52 = v16;
    v62 = v20;
    if (!v20)
      break;
    v49 = a2;
    a2 = 0;
    v61 = *MEMORY[0x1E0D9F000];
    v21 = v70;
    v16 = v56;
    v58 = v5;
    v68 = v9;
    v69 = v4;
    v60 = v10;
    while (1)
    {
      if (a2 >= *((_QWORD *)v16 + 2))
      {
        __break(1u);
        goto LABEL_31;
      }
      v22 = (*(unsigned __int8 *)(v72 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      v64 = *(_QWORD *)(v72 + 72);
      v65 = v22;
      (*(void (**)(char *, char *, _QWORD *))(v72 + 16))(v71, &v16[v22 + v64 * a2], v10);
      v23 = Siri_Nlu_External_Span.matcherNames.getter();
      (*(void (**)(char *, _QWORD, uint64_t))(v5 + 104))(v9, v61, v4);
      v24 = *(_QWORD *)(v23 + 16);
      if (v24)
        break;
      v10 = *(_QWORD **)(v5 + 8);
LABEL_5:
      ((void (*)(char *, uint64_t))v10)(v9, v4);
      swift_bridgeObjectRelease();
      v10 = v60;
      (*(void (**)(char *, _QWORD *))(v72 + 8))(v71, v60);
LABEL_6:
      if (++a2 == v62)
      {
        v19 = v73;
        a2 = v49;
        goto LABEL_27;
      }
    }
    v25 = *(unsigned __int8 *)(v5 + 80);
    v63 = v23;
    v55 = (v25 + 32) & ~v25;
    v26 = v23 + v55;
    v67 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v67(v21, v23 + v55, v4);
    v66 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F028], MEMORY[0x1E0D9F040]);
    v27 = dispatch thunk of static Equatable.== infix(_:_:)();
    v10 = *(_QWORD **)(v5 + 8);
    ((void (*)(char *, uint64_t))v10)(v21, v4);
    if ((v27 & 1) != 0)
      goto LABEL_12;
    if (v24 == 1)
      goto LABEL_18;
    v57 = *(_QWORD *)(v58 + 72);
    v28 = v69;
    v29 = v70;
    v67(v70, v26 + v57, v69);
    v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    ((void (*)(char *, uint64_t))v10)(v29, v28);
    if ((v30 & 1) != 0)
    {
LABEL_12:
      v9 = v68;
      v4 = v69;
      ((void (*)(char *, uint64_t))v10)(v68, v69);
      swift_bridgeObjectRelease();
      v31 = *(void (**)(char *, char *, _QWORD *))(v72 + 32);
      v10 = v60;
      v31(v59, v71, v60);
      v32 = v73;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v32 + 16) + 1, 1);
        v32 = v73;
      }
      v34 = *(_QWORD *)(v32 + 16);
      v33 = *(_QWORD *)(v32 + 24);
      if (v34 >= v33 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v33 > 1, v34 + 1, 1);
        v32 = v73;
      }
      *(_QWORD *)(v32 + 16) = v34 + 1;
      v31((char *)(v32 + v65 + v34 * v64), v59, v10);
      v73 = v32;
      v5 = v58;
      v21 = v70;
      v16 = v56;
      goto LABEL_6;
    }
    if (v24 == 2)
    {
LABEL_18:
      v5 = v58;
      v4 = v69;
      v21 = v70;
      v9 = v68;
LABEL_19:
      v16 = v56;
      goto LABEL_5;
    }
    v16 = (char *)(v63 + v55 + 2 * v57);
    v5 = 2;
    v4 = v69;
    v21 = v70;
    v9 = v68;
    while (1)
    {
      v67(v21, (uint64_t)v16, v4);
      v35 = v4;
      v4 = v5 + 1;
      if (__OFADD__(v5, 1))
        break;
      v36 = dispatch thunk of static Equatable.== infix(_:_:)();
      ((void (*)(char *, uint64_t))v10)(v21, v35);
      if ((v36 & 1) != 0)
        goto LABEL_12;
      ++v5;
      v16 += v57;
      v37 = v4 == v24;
      v4 = v69;
      v21 = v70;
      v9 = v68;
      if (v37)
      {
        v5 = v58;
        goto LABEL_19;
      }
    }
LABEL_31:
    __break(1u);
LABEL_32:
    swift_once();
  }
LABEL_27:
  swift_bridgeObjectRelease();
  v38 = v54;
  swift_retain();
  v39 = swift_retain();
  v40 = v51;
  v41 = specialized _ArrayProtocol.filter(_:)(v39, v38);
  swift_release();
  v42 = swift_release();
  MEMORY[0x1E0C80A78](v42);
  v43 = v53;
  *(&v48 - 2) = v38;
  *(&v48 - 1) = v43;
  v44 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriNLUTypes0D18_Nlu_External_SpanVG_10PegasusAPI013Apple_Parsec_D21_Context_ClientEntityVsAE_pTg5((void (*)(uint64_t, uint64_t *))partial apply for closure #3 in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:), (uint64_t)(&v48 - 4), v41);
  if (!v40)
  {
    v45 = v44;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 88))(v45, v43);
  }
  swift_bridgeObjectRelease();
  v46 = (uint64_t)v52;
  $defer #1 () in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)(a2, v19, (uint64_t)v52);
  swift_release();
  return outlined destroy of PommesSearchRequest(v46, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
}

uint64_t $defer #1 () in PegasusProxy.addUserVocabSpans(from:to:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v23[2];
  uint64_t v24;
  void (*v25)(char *, uint64_t, uint64_t);
  uint64_t v26;
  uint64_t v27;

  v6 = type metadata accessor for Siri_Nlu_External_Span();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = MEMORY[0x1E0DEE9D8];
  if (v10)
  {
    v23[1] = a1;
    v24 = a3;
    v27 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v10, 0);
    v12 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    v13 = *(_QWORD *)(v7 + 72);
    v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v26 = v13;
    v14 = v7;
    do
    {
      v25(v9, v12, v6);
      v15 = Siri_Nlu_External_Span.label.getter();
      v17 = v16;
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      v11 = v27;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v11 + 16) + 1, 1);
        v11 = v27;
      }
      v19 = *(_QWORD *)(v11 + 16);
      v18 = *(_QWORD *)(v11 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v11 = v27;
      }
      *(_QWORD *)(v11 + 16) = v19 + 1;
      v20 = v11 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      v12 += v26;
      --v10;
      v7 = v14;
    }
    while (v10);
    a3 = v24;
  }
  specialized Array.append<A>(contentsOf:)(v11);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v21 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v21, (uint64_t)static Signposter.pommes);
  return OSSignposter.end(token:message:)(a3, 0, 0xE000000000000000);
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1)
{
  unint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  int64_t v23;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *v1;
  v4 = *(_QWORD *)(*v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(_QWORD *)(v3 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v23 = v4 + v2;
  else
    v23 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = *(_QWORD *)(v3 + 16);
  v9 = (*(_QWORD *)(v3 + 24) >> 1) - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (itemId: String, value: String?, itemType: Apple_Parsec_Siri_V2alpha_AudioItemType));
  if (v9 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v11 = *(_QWORD *)(v10 - 8);
  v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v13 = *(_QWORD *)(v11 + 72);
  v14 = v3 + v12 + v13 * v8;
  v15 = a1 + v12;
  v16 = v13 * v2;
  v17 = v14 + v16;
  v18 = v15 + v16;
  if (v15 < v17 && v14 < v18)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *v1 = v3;
    return result;
  }
  v20 = *(_QWORD *)(v3 + 16);
  v21 = __OFADD__(v20, v2);
  v22 = v20 + v2;
  if (!v21)
  {
    *(_QWORD *)(v3 + 16) = v22;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0DA3D70]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), type metadata accessor for PerformanceUtil.Measurement);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E868]);
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(void))specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E758]);
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1)
{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

{
  return specialized Array.append<A>(contentsOf:)(a1, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
}

uint64_t specialized Array.append<A>(contentsOf:)(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(_QWORD))
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(_QWORD *)(v5 + 24) >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_15;
  }
  v5 = a2();
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
LABEL_5:
  v10 = *(_QWORD *)(v5 + 16);
  v11 = (*(_QWORD *)(v5 + 24) >> 1) - v10;
  v12 = a3(0);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v13 = *(_QWORD *)(v12 - 8);
  v14 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v15 = *(_QWORD *)(v13 + 72);
  v16 = v5 + v14 + v15 * v10;
  v17 = a1 + v14;
  v18 = v15 * v4;
  v19 = v16 + v18;
  v20 = v17 + v18;
  if (v17 < v19 && v16 < v20)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
  v22 = *(_QWORD *)(v5 + 16);
  v23 = __OFADD__(v22, v4);
  v24 = v22 + v4;
  if (!v23)
  {
    *(_QWORD *)(v5 + 16) = v24;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 16);
  v5 = *v3;
  v6 = *(_QWORD *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(_QWORD *)(v5 + 24) >> 1)
  {
    v10 = *(_QWORD *)(a1 + 16);
    if (v10)
      goto LABEL_5;
LABEL_15:
    if (!v4)
      goto LABEL_16;
    goto LABEL_18;
  }
  v5 = a2();
  v10 = *(_QWORD *)(a1 + 16);
  if (!v10)
    goto LABEL_15;
LABEL_5:
  v11 = *(_QWORD *)(v5 + 16);
  v12 = (*(_QWORD *)(v5 + 24) >> 1) - v11;
  v13 = a3(0);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(v13 - 8);
  v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  v16 = *(_QWORD *)(v14 + 72);
  v17 = v5 + v15 + v16 * v11;
  v18 = a1 + v15;
  v19 = v16 * v10;
  v20 = v17 + v19;
  v21 = v18 + v19;
  if (v18 < v20 && v17 < v21)
    goto LABEL_21;
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  v23 = *(_QWORD *)(v5 + 16);
  v24 = __OFADD__(v23, v10);
  v25 = v23 + v10;
  if (!v24)
  {
    *(_QWORD *)(v5 + 16) = v25;
LABEL_16:
    result = swift_bridgeObjectRelease();
    *v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized Array.append<A>(contentsOf:)(unint64_t a1, uint64_t (*a2)(uint64_t, _QWORD, unint64_t))
{
  unint64_t *v2;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;

  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  v6 = *v2;
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    v8 = v7 + v5;
    if (!__OFADD__(v7, v5))
      goto LABEL_5;
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  v7 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  v8 = v7 + v5;
  if (__OFADD__(v7, v5))
    goto LABEL_23;
LABEL_5:
  v6 = *v2;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v2 = v6;
  v7 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_15;
    v7 = 1;
  }
  if (v6 >> 62)
    goto LABEL_25;
  v11 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    if (v11 <= v8)
      v11 = v8;
    swift_bridgeObjectRetain();
    v6 = MEMORY[0x1C3BBF400](v7, v11, 1, v6);
    swift_bridgeObjectRelease();
    *v2 = v6;
    v10 = v6 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
    result = a2(v10 + 8 * *(_QWORD *)(v10 + 16) + 32, (*(_QWORD *)(v10 + 24) >> 1) - *(_QWORD *)(v10 + 16), a1);
    if (v13 >= v5)
      break;
LABEL_24:
    __break(1u);
LABEL_25:
    swift_bridgeObjectRetain();
    v11 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 < 1)
    goto LABEL_19;
  v14 = *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
  v15 = __OFADD__(v14, v13);
  v16 = v14 + v13;
  if (!v15)
  {
    *(_QWORD *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
LABEL_19:
    swift_bridgeObjectRelease();
    return specialized Array._endMutation()();
  }
  __break(1u);
  return result;
}

uint64_t DataProviderManager.addAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int *v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  void *v17;
  void (*v18)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  int v20;
  int *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v26 = a3;
  v6 = type metadata accessor for Date();
  v24 = *(_QWORD *)(v6 - 8);
  v25 = v6;
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v23 - v14;
  v16 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v23 - v14, a1, v9);
  if (one-time initialization token for shared != -1)
    v16 = swift_once();
  v17 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v16);
  v21 = v3;
  v22 = a2;
  Date.init()();
  v18 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v17 + 200);
  v21 = &v20;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]?);
  LOBYTE(v20) = 2;
  v18(&v27, 0xD000000000000043, 0x80000001C2505CE0, 0, v8, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 205, "addAppInfoSlice(to:for:)", 24, v20, partial apply for closure #1 in DataProviderManager.addAppInfoSlice(to:for:));
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v25);
  if (v27)
  {
    DataProviderManager.appendProfileSlices(_:to:)(v27, (uint64_t)v15, (uint64_t)v13);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v15, v9);
    v15 = v13;
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(v26, v15, v9);
}

uint64_t partial apply for closure #1 in DataProviderManager.addAppInfoSlice(to:for:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DataProviderManager.addAppInfoSlice(to:for:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t closure #1 in DataProviderManager.addAppInfoSlice(to:for:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t);
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE v28[96];
  uint64_t v29[15];

  v29[14] = a3;
  v5 = type metadata accessor for DispatchTimeInterval();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = type metadata accessor for DispatchTime();
  v26 = *(_QWORD *)(v27 - 8);
  v9 = MEMORY[0x1E0C80A78](v27);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v23 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a1[5];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v16);
  v17 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v16, 0, 1, v17);
  v23 = a1[2];
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v18 = v25;
  OS_dispatch_queue.sync<A>(execute:)();
  v25 = v18;
  outlined init with take of PommesSearchReason?((uint64_t)v28, (uint64_t)v29, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v19 = a1[15];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  *v8 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v6 + 104))(v8, *MEMORY[0x1E0DEF490], v5);
  MEMORY[0x1C3BBEB6C](v11, v8);
  (*(void (**)(_QWORD *, uint64_t))(v6 + 8))(v8, v5);
  v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v21 = v27;
  v20(v11, v27);
  (*(void (**)(char *, uint64_t *, uint64_t, uint64_t, char *))(*(_QWORD *)v24 + 240))(v16, v29, v19, v23, v13);
  swift_unknownObjectRelease();
  outlined release of AssistantDataSnapshot?(v29);
  v20(v13, v21);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t AppInfoDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  void *v14;
  void (*v15)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>));
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  int v26;
  int *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  v3 = *(_QWORD *)(v2 - 8);
  v32 = v2;
  v33 = v3;
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v6 = *(_QWORD *)(v31 - 8);
  MEMORY[0x1E0C80A78](v31);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    v11 = swift_once();
  v29 = (uint64_t)&v29;
  v14 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v11);
  v27 = a1;
  v28 = v30;
  Date.init()();
  v15 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(unint64_t *@<X8>)))(*(_QWORD *)v14 + 200);
  v27 = &v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_AppInfo]);
  LOBYTE(v26) = 2;
  v15(&v35, 0xD000000000000038, 0x80000001C2504AD0, 0, v13, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 43, "fetch(for:assistantData:serviceHelper:dispatchQueue:)", 53, v26, partial apply for closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:));
  (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
  v16 = v35;
  v17 = *(_QWORD *)(v35 + 16);
  if (v17)
  {
    v34 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v17, 0);
    v18 = v16 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
    v19 = *(_QWORD *)(v33 + 72);
    v29 = v16;
    v30 = v19;
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v33 + 16);
    do
    {
      v21 = v32;
      v20(v5, v18, v32);
      closure #2 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)((uint64_t)v5, (uint64_t)v8);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v5, v21);
      v22 = v34;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v22 + 16) + 1, 1);
        v22 = v34;
      }
      v24 = *(_QWORD *)(v22 + 16);
      v23 = *(_QWORD *)(v22 + 24);
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v23 > 1, v24 + 1, 1);
        v22 = v34;
      }
      *(_QWORD *)(v22 + 16) = v24 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v22+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(_QWORD *)(v6 + 72) * v24, v8, v31);
      v34 = v22;
      v18 += v30;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  return v22;
}

uint64_t partial apply for closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t closure #1 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[2];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v6, &demangling cache variable for type metadata for PommesSearchRequest?);
  v10 = type metadata accessor for PommesSearchRequest(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 48))(v6, 1, v10) == 1)
  {
    v11 = &demangling cache variable for type metadata for PommesSearchRequest?;
    v12 = (uint64_t)v6;
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)&v6[*(int *)(v10 + 44)], (uint64_t)v9, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesSearchRequest);
    v13 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v14 = *(_QWORD *)(v13 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v9, 1, v13) != 1)
    {
      v17 = Siri_Nlu_External_Span.matcherNames.getter();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v13);
      swift_retain();
      v16 = specialized Sequence.compactMap<A>(_:)(v17);
      swift_bridgeObjectRelease();
      result = swift_release();
      goto LABEL_7;
    }
    v11 = &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?;
    v12 = (uint64_t)v9;
  }
  result = outlined destroy of MediaUserStateCenter?(v12, v11);
  v16 = MEMORY[0x1E0DEE9D8];
LABEL_7:
  *a2 = v16;
  return result;
}

uint64_t AppInfoDataProvider.equivalentAppInfo(span:)@<X0>(unint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (**v22)(char *, unint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, unint64_t, uint64_t);
  uint64_t v41;
  void (*v42)(char *, unint64_t, uint64_t);
  unsigned int v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char v49;
  void (*v50)(char *, unint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  NSObject *v54;
  unint64_t v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, unint64_t, uint64_t);
  char *v62;
  uint64_t v63;
  char v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  NSObject *v75;
  os_log_type_t v76;
  uint8_t *v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  void *v84;
  char *v85;
  void (*v86)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint8_t *v87;
  void (*v88)(char *, uint64_t);
  uint64_t v89;
  char *v90;
  int *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  uint64_t v99;
  __int128 v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  NSObject *v104;
  os_log_type_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  os_log_type_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  NSObject *v123;
  os_log_type_t v124;
  uint8_t *v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  void (*v129)(char *, uint64_t);
  char *v130;
  int *v132;
  uint64_t v133;
  uint64_t v134;
  char v135;
  uint64_t v136;
  void *v137;
  char *v138;
  char *v139;
  void (*v140)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)());
  uint64_t v141;
  int v142;
  int *v143;
  uint64_t v144;
  char *v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  int *v154;
  char *v155;
  char *v156;
  uint64_t v157;
  char *v158;
  void (*v159)(char *, unint64_t, uint64_t);
  uint64_t v160;
  char *v161;
  void (*v162)(char *, uint64_t);
  char *v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  char *v170;
  char *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint8_t *v176;
  char *v177;
  _QWORD v178[5];
  uint64_t v179[3];
  uint64_t v180;

  v168 = a2;
  *(_QWORD *)&v169 = type metadata accessor for Siri_Nlu_External_Span();
  v173 = *(_QWORD *)(v169 - 8);
  v3 = MEMORY[0x1E0C80A78](v169);
  v170 = (char *)&v145 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v148 = (char *)&v145 - v6;
  MEMORY[0x1E0C80A78](v5);
  v150 = (char *)&v145 - v7;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppVocabularyConcept();
  v174 = *(_QWORD *)(v8 - 8);
  v175 = v8;
  MEMORY[0x1E0C80A78](v8);
  v177 = (char *)&v145 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v147 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v147);
  v151 = (char *)&v145 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = type metadata accessor for Date();
  v149 = *(_QWORD *)(v153 - 8);
  MEMORY[0x1E0C80A78](v153);
  v152 = (char *)&v145 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
  MEMORY[0x1E0C80A78](v12);
  v163 = (char *)&v145 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = (void (*)(char *, uint64_t))type metadata accessor for Siri_Nlu_External_UsoGraph();
  v157 = *((_QWORD *)v162 - 1);
  v14 = MEMORY[0x1E0C80A78](v162);
  v145 = (char *)&v145 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v156 = (char *)&v145 - v16;
  v164 = type metadata accessor for Siri_Nlu_External_UsoEntityIdentifier();
  v17 = *(_QWORD *)(v164 - 8);
  v18 = MEMORY[0x1E0C80A78](v164);
  v146 = (char *)&v145 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v161 = (char *)&v145 - v20;
  v21 = type metadata accessor for Siri_Nlu_External_Span.MatcherName();
  v22 = *(void (***)(char *, unint64_t, uint64_t))(v21 - 8);
  MEMORY[0x1E0C80A78](v21);
  v155 = (char *)&v145 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?));
  MEMORY[0x1E0C80A78](v24);
  v26 = (char *)&v145 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v160 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v27 = MEMORY[0x1E0C80A78](v160);
  v158 = (char *)&v145 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v145 - v30;
  v32 = MEMORY[0x1E0C80A78](v29);
  v34 = (char *)&v145 - v33;
  MEMORY[0x1E0C80A78](v32);
  v36 = (char *)&v145 - v35;
  v167 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  v166 = *(_QWORD *)(v167 - 8);
  MEMORY[0x1E0C80A78](v167);
  v171 = (char *)&v145 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_AppInfo.init()();
  v172 = a1;
  v38 = Siri_Nlu_External_Span.matcherNames.getter();
  v39 = *(_QWORD *)(v38 + 16);
  v165 = v17;
  if (v39)
  {
    v22[2](v36, v38 + ((*((unsigned __int8 *)v22 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v22 + 80)), v21);
    v40 = v22[7];
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v36, 0, 1, v21);
  }
  else
  {
    v40 = v22[7];
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v40)(v36, 1, 1, v21);
  }
  swift_bridgeObjectRelease();
  v22[13](v34, *MEMORY[0x1E0D9F000], v21);
  v159 = v40;
  ((void (*)(char *, _QWORD, uint64_t, uint64_t))v40)(v34, 0, 1, v21);
  v41 = (uint64_t)&v26[*(int *)(v24 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v36, (uint64_t)v26, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v34, v41, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v42 = v22[6];
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v42)(v26, 1, v21) != 1)
  {
    outlined init with copy of MediaUserStateCenter?((uint64_t)v26, (uint64_t)v31, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v42)(v41, 1, v21) != 1)
    {
      v48 = v155;
      v22[4](v155, v41, v21);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Span.MatcherName and conformance Siri_Nlu_External_Span.MatcherName, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F028], MEMORY[0x1E0D9F040]);
      v49 = dispatch thunk of static Equatable.== infix(_:_:)();
      v50 = v22[1];
      ((void (*)(char *, uint64_t))v50)(v48, v21);
      outlined destroy of MediaUserStateCenter?((uint64_t)v34, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      ((void (*)(char *, uint64_t))v50)(v31, v21);
      outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
      v45 = (char *)v169;
      v44 = v172;
      v46 = v173;
      v47 = (unint64_t)v170;
      if ((v49 & 1) != 0)
        goto LABEL_11;
LABEL_14:
      if (one-time initialization token for pommes == -1)
      {
LABEL_15:
        v53 = type metadata accessor for Logger();
        __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
        (*(void (**)(unint64_t, uint64_t, char *))(v46 + 16))(v47, v44, v45);
        v54 = Logger.logObject.getter();
        v55 = v47;
        v56 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v54, v56))
        {
          v57 = (uint8_t *)swift_slowAlloc();
          v58 = swift_slowAlloc();
          v179[0] = v58;
          *(_DWORD *)v57 = 136315138;
          v59 = Siri_Nlu_External_Span.matcherNames.getter();
          if (*(_QWORD *)(v59 + 16))
          {
            v60 = v59 + ((*((unsigned __int8 *)v22 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v22 + 80));
            v61 = v22[2];
            v62 = v158;
            v61(v158, v60, v21);
            v63 = 0;
          }
          else
          {
            v63 = 1;
            v62 = v158;
          }
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v159)(v62, v63, 1, v21);
          swift_bridgeObjectRelease();
          v69 = String.init<A>(describing:)();
          v178[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v69, v70, v179);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, char *))(v173 + 8))(v170, v45);
          _os_log_impl(&dword_1C2356000, v54, v56, "PegasusProxy#equivalentAppInfo matcher not siriVocabularyMatcher matcherNames:%s", v57, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v58, -1, -1);
          MEMORY[0x1C3BBFF64](v57, -1, -1);
        }
        else
        {
          (*(void (**)(unint64_t, char *))(v46 + 8))(v55, v45);
        }

        v71 = v166;
        goto LABEL_25;
      }
LABEL_76:
      swift_once();
      goto LABEL_15;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v34, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
    ((void (*)(char *, uint64_t))v22[1])(v31, v21);
    v44 = v172;
LABEL_9:
    outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for (Siri_Nlu_External_Span.MatcherName?, Siri_Nlu_External_Span.MatcherName?));
    v45 = (char *)v169;
    v46 = v173;
    v47 = (unint64_t)v170;
    goto LABEL_14;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v34, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v43 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v42)(v41, 1, v21);
  v44 = v172;
  if (v43 != 1)
    goto LABEL_9;
  outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for Siri_Nlu_External_Span.MatcherName?);
  v45 = (char *)v169;
  v46 = v173;
LABEL_11:
  if (Siri_Nlu_External_Span.label.getter() == 0x656D614E707061 && v51 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    v47 = v165;
    v52 = (uint64_t)v163;
  }
  else
  {
    v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v47 = v165;
    v52 = (uint64_t)v163;
    if ((v64 & 1) == 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v111 = type metadata accessor for Logger();
      __swift_project_value_buffer(v111, (uint64_t)static Logger.pommes);
      v112 = v148;
      (*(void (**)(char *, uint64_t, char *))(v46 + 16))(v148, v44, v45);
      v75 = Logger.logObject.getter();
      v113 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v75, v113))
      {
        (*(void (**)(char *, char *))(v46 + 8))(v112, v45);
        goto LABEL_69;
      }
      v77 = (uint8_t *)swift_slowAlloc();
      v114 = swift_slowAlloc();
      v179[0] = v114;
      *(_DWORD *)v77 = 136315138;
      v115 = Siri_Nlu_External_Span.label.getter();
      v178[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v115, v116, v179);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, char *))(v173 + 8))(v148, v45);
      _os_log_impl(&dword_1C2356000, v75, v113, "PegasusProxy#equivalentAppInfo matcher not appName label:%s", v77, 0xCu);
      swift_arrayDestroy();
      v81 = v114;
      goto LABEL_54;
    }
  }
  v65 = v156;
  Siri_Nlu_External_Span.usoGraph.getter();
  v66 = Siri_Nlu_External_UsoGraph.identifiers.getter();
  (*(void (**)(char *, _QWORD *))(v157 + 8))(v65, v162);
  if (*(_QWORD *)(v66 + 16))
  {
    v67 = v164;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v47 + 16))(v52, v66 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80)), v164);
    v68 = 0;
  }
  else
  {
    v68 = 1;
    v67 = v164;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v52, v68, 1, v67);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v52, 1, v67) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v52, &demangling cache variable for type metadata for Siri_Nlu_External_UsoEntityIdentifier?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v73 = type metadata accessor for Logger();
    __swift_project_value_buffer(v73, (uint64_t)static Logger.pommes);
    v74 = v150;
    (*(void (**)(char *, uint64_t, char *))(v46 + 16))(v150, v44, v45);
    v75 = Logger.logObject.getter();
    v76 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v75, v76))
    {
      (*(void (**)(char *, char *))(v46 + 8))(v74, v45);
      goto LABEL_69;
    }
    v77 = (uint8_t *)swift_slowAlloc();
    v177 = (char *)swift_slowAlloc();
    v179[0] = (uint64_t)v177;
    *(_DWORD *)v77 = 136315138;
    v176 = v77 + 4;
    Siri_Nlu_External_Span.usoGraph.getter();
    v78 = String.init<A>(describing:)();
    v178[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v79, v179);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *))(v173 + 8))(v74, v45);
    _os_log_impl(&dword_1C2356000, v75, v76, "PegasusProxy#equivalentAppInfo identifier not present in USO graph:%s", v77, 0xCu);
    v80 = v177;
    swift_arrayDestroy();
    v81 = (uint64_t)v80;
LABEL_54:
    MEMORY[0x1C3BBFF64](v81, -1, -1);
    MEMORY[0x1C3BBFF64](v77, -1, -1);
LABEL_69:

    v72 = v167;
    v71 = v166;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v166 + 56))(v168, 1, 1, v167);
    goto LABEL_70;
  }
  v82 = v161;
  v83 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v47 + 32))(v161, v52, v67);
  if (one-time initialization token for shared != -1)
    v83 = swift_once();
  v84 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v83);
  v143 = v154;
  v144 = (uint64_t)v82;
  v85 = v152;
  Date.init()();
  v86 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v84 + 200);
  v143 = &v142;
  v144 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppData?);
  LOBYTE(v142) = 2;
  v87 = v176;
  v86(v179, 0xD000000000000036, 0x80000001C2504C00, 0, v85, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 84, "equivalentAppInfo(span:)", 24, v142, partial apply for closure #1 in AppInfoDataProvider.equivalentAppInfo(span:));
  v176 = v87;
  v88 = *(void (**)(char *, uint64_t))(v149 + 8);
  v88(v85, v153);
  if (!v179[2])
  {
    if (one-time initialization token for pommes == -1)
    {
LABEL_66:
      v120 = type metadata accessor for Logger();
      __swift_project_value_buffer(v120, (uint64_t)static Logger.pommes);
      v121 = v146;
      v122 = v164;
      (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v146, v161, v164);
      v123 = Logger.logObject.getter();
      v124 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v123, v124))
      {
        v125 = (uint8_t *)swift_slowAlloc();
        v126 = swift_slowAlloc();
        v179[0] = v126;
        *(_DWORD *)v125 = 136315138;
        v127 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
        v178[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v127, v128, v179);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v129 = *(void (**)(char *, uint64_t))(v165 + 8);
        v129(v146, v122);
        _os_log_impl(&dword_1C2356000, v123, v124, "PegasusProxy#equivalentAppInfo failed to resolve appData for bundleIdentifier:%s", v125, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v126, -1, -1);
        MEMORY[0x1C3BBFF64](v125, -1, -1);
      }
      else
      {
        v129 = *(void (**)(char *, uint64_t))(v47 + 8);
        v129(v121, v122);
      }

      v71 = v166;
      v129(v161, v122);
LABEL_25:
      v72 = v167;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v71 + 56))(v168, 1, 1, v167);
LABEL_70:
      v130 = v171;
      return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v130, v72);
    }
LABEL_85:
    swift_once();
    goto LABEL_66;
  }
  v162 = v88;
  v46 = v179[1];
  Siri_Nlu_External_Span.input.getter();
  Apple_Parsec_Siri_V2alpha_AppInfo.appName.setter();
  Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  Apple_Parsec_Siri_V2alpha_AppInfo.bundleID.setter();
  Apple_Parsec_Siri_V2alpha_AppInfo.hasSiriIntegration_p.setter();
  v89 = swift_bridgeObjectRetain();
  specialized _copyCollectionToContiguousArray<A>(_:)(v89);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_AppInfo.supportedIntents.setter();
  v90 = v151;
  Date.init()();
  v91 = (int *)v147;
  v92 = &v90[*(int *)(v147 + 20)];
  *(_QWORD *)v92 = "SiriInformationSearch/AppInfoDataProvider.swift";
  *((_QWORD *)v92 + 1) = 47;
  v92[16] = 2;
  *(_QWORD *)&v90[v91[6]] = 97;
  v93 = &v90[v91[7]];
  *(_QWORD *)v93 = "equivalentAppInfo(span:)";
  *((_QWORD *)v93 + 1) = 24;
  v93[16] = 2;
  v94 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000001ELL);
  v95 = (uint64_t *)&v90[v91[8]];
  *v95 = v94;
  v95[1] = v96;
  v97 = (uint64_t *)Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  v47 = AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:)(v97, v98, 0);
  swift_bridgeObjectRelease();
  v99 = MEMORY[0x1E0DEE9D8];
  v178[0] = MEMORY[0x1E0DEE9D8];
  if (v47 >> 62)
  {
    swift_bridgeObjectRetain();
    v44 = _CocoaArrayWrapper.endIndex.getter();
    v22 = (void (**)(char *, unint64_t, uint64_t))v177;
    if (v44)
    {
LABEL_37:
      v172 = v47 & 0xC000000000000001;
      v173 = *MEMORY[0x1E0CBDDB0];
      v21 = 4;
      *(_QWORD *)&v100 = 136315138;
      v169 = v100;
      v163 = (char *)(MEMORY[0x1E0DEE9B8] + 8);
      v170 = (char *)v47;
      do
      {
        if (v172)
          v101 = (char *)MEMORY[0x1C3BBF3F4](v21 - 4, v47);
        else
          v101 = (char *)*(id *)(v47 + 8 * v21);
        v45 = v101;
        v102 = v21 - 3;
        if (__OFADD__(v21 - 4, 1))
        {
          __break(1u);
          goto LABEL_75;
        }
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        v46 = specialized NSDictionary.arrayValue<A>(for:)();
        swift_bridgeObjectRelease();
        if (v46)
        {

        }
        else
        {
          if (one-time initialization token for pommes != -1)
            swift_once();
          v103 = type metadata accessor for Logger();
          __swift_project_value_buffer(v103, (uint64_t)static Logger.pommes);
          v104 = Logger.logObject.getter();
          v105 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v104, v105))
          {
            v106 = swift_slowAlloc();
            v107 = swift_slowAlloc();
            v180 = v107;
            *(_DWORD *)v106 = v169;
            v108 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(_QWORD *)(v106 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, &v180);
            swift_bridgeObjectRelease();
            _os_log_impl(&dword_1C2356000, v104, v105, "PegasusProxy#equivalentAppInfo unable find concepts from key:%s", (uint8_t *)v106, 0xCu);
            swift_arrayDestroy();
            v110 = v107;
            v47 = (unint64_t)v170;
            MEMORY[0x1C3BBFF64](v110, -1, -1);
            MEMORY[0x1C3BBFF64](v106, -1, -1);
          }

          v46 = MEMORY[0x1E0DEE9D8];
        }
        v22 = (void (**)(char *, unint64_t, uint64_t))v177;
        specialized Array.append<A>(contentsOf:)(v46);
        ++v21;
      }
      while (v102 != v44);
      swift_bridgeObjectRelease_n();
      v117 = v178[0];
      v99 = MEMORY[0x1E0DEE9D8];
      if (v178[0] >> 62)
        goto LABEL_79;
      goto LABEL_57;
    }
  }
  else
  {
    v44 = *(_QWORD *)((v47 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    v22 = (void (**)(char *, unint64_t, uint64_t))v177;
    if (v44)
      goto LABEL_37;
  }
  swift_bridgeObjectRelease_n();
  v117 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
  {
LABEL_79:
    swift_bridgeObjectRetain();
    v21 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v21)
      goto LABEL_58;
    goto LABEL_80;
  }
LABEL_57:
  v21 = *(_QWORD *)((v117 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v21)
  {
LABEL_58:
    v45 = "equivalentAppInfo(span:)";
    v178[0] = v99;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21 & ~(v21 >> 63), 0);
    if ((v21 & 0x8000000000000000) == 0)
    {
      v47 = 0;
      v118 = v178[0];
      while (v21 != v47)
      {
        v180 = *(_QWORD *)(v117 + 8 * v47 + 32);
        closure #3 in AppInfoDataProvider.equivalentAppInfo(span:)();
        v178[0] = v118;
        v46 = *(_QWORD *)(v118 + 16);
        v119 = *(_QWORD *)(v118 + 24);
        v44 = v46 + 1;
        if (v46 >= v119 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v46 + 1, 1);
          v118 = v178[0];
        }
        ++v47;
        *(_QWORD *)(v118 + 16) = v44;
        (*(void (**)(unint64_t, char *, uint64_t))(v174 + 32))(v118+ ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80))+ *(_QWORD *)(v174 + 72) * v46, (char *)v22, v175);
        if (v21 == v47)
          goto LABEL_80;
      }
LABEL_75:
      __break(1u);
      goto LABEL_76;
    }
    __break(1u);
    goto LABEL_85;
  }
LABEL_80:
  swift_bridgeObjectRelease();
  v132 = (int *)v171;
  Apple_Parsec_Siri_V2alpha_AppInfo.vocabConcepts.setter();
  v133 = (uint64_t)v151;
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v151, 0);
  v178[3] = &type metadata for FeatureFlag;
  v178[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v134 = swift_allocObject();
  v178[0] = v134;
  *(_QWORD *)(v134 + 16) = 5;
  *(_QWORD *)(v134 + 24) = 0;
  *(_QWORD *)(v134 + 32) = 0;
  *(_QWORD *)(v134 + 40) = 0;
  *(_BYTE *)(v134 + 48) = 3;
  v135 = isFeatureEnabled(_:)();
  v136 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v178);
  if ((v135 & 1) != 0)
  {
    v137 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v136);
    v138 = v161;
    v143 = v132;
    v144 = (uint64_t)v161;
    v139 = v152;
    Date.init()();
    v140 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)()))(*(_QWORD *)v137 + 200);
    v143 = &v142;
    v144 = MEMORY[0x1E0DEE9C0] + 8;
    LOBYTE(v142) = 2;
    v140(0xD000000000000014, 0x80000001C2504C80, 0, v139, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 124, "equivalentAppInfo(span:)", 24, v142, partial apply for closure #4 in AppInfoDataProvider.equivalentAppInfo(span:));
    v162(v139, v153);
    outlined destroy of PommesSearchRequest(v133, type metadata accessor for PerformanceUtil.Ticket);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v138, v164);
  }
  else
  {
    outlined destroy of PommesSearchRequest(v133, type metadata accessor for PerformanceUtil.Ticket);
    (*(void (**)(char *, uint64_t))(v165 + 8))(v161, v164);
  }
  v141 = v168;
  v72 = v167;
  v71 = v166;
  (*(void (**)(uint64_t, int *, uint64_t))(v166 + 16))(v168, v132, v167);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v71 + 56))(v141, 0, 1, v72);
  v130 = (char *)v132;
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v130, v72);
}

uint64_t DataProviderManager.appendProfileSlices(_:to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  uint64_t v15;
  NSObject *v16;
  int v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  os_log_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v38;
  int v39;
  uint8_t *v40;
  os_log_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v7 = *(_QWORD *)(v6 - 8);
  v48 = v6;
  v49 = v7;
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a2, v10);
  v14 = *(_QWORD *)(a1 + 16);
  if (v14)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v16, (os_log_type_t)v17))
    {
      v39 = v17;
      v41 = v16;
      v42 = v13;
      v43 = v11;
      v44 = v10;
      v46 = a3;
      v18 = (uint8_t *)swift_slowAlloc();
      v38 = swift_slowAlloc();
      v51 = v38;
      v40 = v18;
      *(_DWORD *)v18 = 136315138;
      v50 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14, 0);
      v19 = *(unsigned __int8 *)(v49 + 80);
      v45 = a1;
      v20 = a1 + ((v19 + 32) & ~v19);
      v47 = *(_QWORD *)(v49 + 72);
      v21 = *(void (**)(char *, uint64_t, uint64_t))(v49 + 16);
      do
      {
        v22 = v48;
        v21(v9, v20, v48);
        v23 = Apple_Parsec_Siri_V2alpha_ProfileSlice.summarizedDescription.getter();
        v25 = v24;
        (*(void (**)(char *, uint64_t))(v49 + 8))(v9, v22);
        v26 = v50;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v26 + 16) + 1, 1);
          v26 = v50;
        }
        v28 = *(_QWORD *)(v26 + 16);
        v27 = *(_QWORD *)(v26 + 24);
        if (v28 >= v27 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v27 > 1, v28 + 1, 1);
          v26 = v50;
        }
        *(_QWORD *)(v26 + 16) = v28 + 1;
        v29 = v26 + 16 * v28;
        *(_QWORD *)(v29 + 32) = v23;
        *(_QWORD *)(v29 + 40) = v25;
        v20 += v47;
        --v14;
      }
      while (v14);
      v30 = v40;
      v50 = v26;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v31 = BidirectionalCollection<>.joined(separator:)();
      v33 = v32;
      swift_release();
      v50 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v33, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      a1 = v45;
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      v34 = v41;
      _os_log_impl(&dword_1C2356000, v41, (os_log_type_t)v39, "DataProviderManager Adding profile slices to request: %s", v30, 0xCu);
      v35 = v38;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v35, -1, -1);
      MEMORY[0x1C3BBFF64](v30, -1, -1);

      a3 = v46;
      v11 = v43;
      v10 = v44;
      v13 = v42;
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v36 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
    swift_bridgeObjectRetain();
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay10PegasusAPI026Apple_Parsec_Siri_V2alpha_D11SearchQueryVG_AHs5NeverOTg504_s21h103InformationSearch19DataProviderManagerC19appendProfileSlices33_025996E41686C8D59143D5DC4568B6E8LL_2to10d6API013f1_g4_a9_i62_aR7RequestVSayAG0t1_u1_a1_v1_H5SliceVG_AItFAG0t1_u1_a1_v1_rC5K9VANXEfU0_SayAF0f1_g1_h1_i1_T5SliceVGTf1cn_nTf4ng_n(v36, a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.setter();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v13, v10);
}

uint64_t partial apply for closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v1[2], v1[3], v1[4], a1);
}

uint64_t closure #12 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v22 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a2, v13);
  v17 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a3 + *(int *)(v17 + 40), (uint64_t)v9, &demangling cache variable for type metadata for PommesContext?);
  v18 = type metadata accessor for PommesContext();
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v9, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v9, &demangling cache variable for type metadata for PommesContext?);
    v20 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v12, 1, 1, v20);
  }
  else
  {
    PommesContext.exportPromptContext()();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v9, v18);
  }
  (*(void (**)(char *, char *))(*(_QWORD *)a1 + 688))(v16, v12);
  outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  return (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v16, v13);
}

uint64_t PegasusProxy.addPromptContext(to:with:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t (*v28)(_QWORD *, _QWORD);
  uint64_t v29;
  char *v30;
  uint64_t (*v31)(_QWORD *, _QWORD);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  os_log_type_t v39;
  uint8_t *v40;
  uint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  NSObject *v50;
  os_log_type_t v51;
  _BOOL4 v52;
  uint64_t v53;
  uint8_t *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD v61[2];
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(char *, uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  _QWORD v82[6];

  v79 = a1;
  v80 = a3;
  v4 = type metadata accessor for Apple_Parsec_Siri_Context_ClientConversationContextInfo();
  v75 = *(_QWORD *)(v4 - 8);
  v76 = v4;
  MEMORY[0x1E0C80A78](v4);
  v74 = (char *)v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientDisplayHints();
  v73 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v78 = (char *)v61 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_Context_PromptContext();
  v72 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  MEMORY[0x1E0C80A78](v15);
  v17 = (char *)v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for Com_Apple_Siri_Product_Proto_PromptContext();
  MEMORY[0x1E0C80A78](v18);
  v20 = (char *)v61 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = a2;
  v23 = v22;
  v25 = v24;
  outlined init with copy of MediaUserStateCenter?(v21, (uint64_t)v17, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v17, 1, v23) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Com_Apple_Siri_Product_Proto_PromptContext?);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16))(v80, v79, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v20, v17, v23);
    v70 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v27 = v70(v14, v79, v11);
    v71 = v25;
    MEMORY[0x1E0C80A78](v27);
    v61[-2] = v20;
    v65 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_PromptContext and conformance Apple_Parsec_Siri_Context_PromptContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D4F8], MEMORY[0x1E0D6D4E8]);
    v68 = v8;
    v79 = v23;
    static Message.with(_:)();
    v28 = (uint64_t (*)(_QWORD *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
    v67 = v10;
    Apple_Parsec_Siri_Context_ClientConversationContextInfo.promptContext.setter();
    v29 = v28(v82, 0);
    MEMORY[0x1E0C80A78](v29);
    v61[-2] = v20;
    v66 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientDisplayHints and conformance Apple_Parsec_Siri_Context_ClientDisplayHints, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F380], MEMORY[0x1E0D6F378]);
    v69 = v6;
    static Message.with(_:)();
    v30 = v14;
    v31 = (uint64_t (*)(_QWORD *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
    Apple_Parsec_Siri_Context_ClientConversationContextInfo.clientDisplayHints.setter();
    v32 = v31(v82, 0);
    v33 = v11;
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v77 + 256))(v32) & 1) != 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v34 = type metadata accessor for Logger();
      v77 = __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.debug.getter();
      v37 = os_log_type_enabled(v35, v36);
      v63 = v20;
      v38 = v68;
      v64 = v12;
      v62 = v33;
      if (v37)
      {
        v39 = v36;
        v40 = (uint8_t *)swift_slowAlloc();
        v41 = swift_slowAlloc();
        v81 = v41;
        *(_DWORD *)v40 = 136315138;
        v61[1] = v40 + 4;
        v42 = v14;
        swift_beginAccess();
        v43 = v74;
        Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
        v44 = v67;
        Apple_Parsec_Siri_Context_ClientConversationContextInfo.promptContext.getter();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v43, v76);
        swift_endAccess();
        v45 = Message.debugDescription.getter();
        v46 = v38;
        v48 = v47;
        (*(void (**)(char *, uint64_t))(v72 + 8))(v44, v46);
        v82[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v48, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v35, v39, "request.clientConversationContextInfo.promptContext = %s", v40, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v41, -1, -1);
        MEMORY[0x1C3BBFF64](v40, -1, -1);

      }
      else
      {

        v42 = v14;
      }
      v50 = Logger.logObject.getter();
      v51 = static os_log_type_t.debug.getter();
      v52 = os_log_type_enabled(v50, v51);
      v53 = v69;
      if (v52)
      {
        v54 = (uint8_t *)swift_slowAlloc();
        v55 = swift_slowAlloc();
        v81 = v55;
        *(_DWORD *)v54 = 136315138;
        v77 = (uint64_t)(v54 + 4);
        swift_beginAccess();
        v56 = v74;
        Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
        v57 = v78;
        Apple_Parsec_Siri_Context_ClientConversationContextInfo.clientDisplayHints.getter();
        (*(void (**)(char *, uint64_t))(v75 + 8))(v56, v76);
        swift_endAccess();
        v58 = Message.debugDescription.getter();
        v60 = v59;
        (*(void (**)(char *, uint64_t))(v73 + 8))(v57, v53);
        v82[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v58, v60, &v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v50, v51, "request.clientConversationContextInfo.clientDisplayHints = %s", v54, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v55, -1, -1);
        MEMORY[0x1C3BBFF64](v54, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v71 + 8))(v63, v79);
      v49 = v80;
      v33 = v62;
      v12 = v64;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v71 + 8))(v20, v79);
      v49 = v80;
      v42 = v30;
    }
    swift_beginAccess();
    v70(v49, (uint64_t)v42, v33);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v42, v33);
  }
}

uint64_t partial apply for closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t *v0;

  return closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t closure #13 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v14;

  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *(_QWORD *)(a1 + 184);
  swift_beginAccess();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v12 + 416))(v11, a3, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t DataProviderManager.addProviderData(to:searchRequest:queryContext:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  void (*v24)(char *, uint64_t, uint64_t);
  uint64_t v26;
  char *v27;
  uint64_t (*v28)(char *, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v32 = a3;
  v33 = a4;
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v26 - v11;
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v29 = *(_QWORD *)(v13 - 8);
  v14 = MEMORY[0x1E0C80A78](v13);
  v30 = (uint64_t)&v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v26 - v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))((char *)&v26 - v16, a1, v13);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
  v27 = a2;
  DataProviderManager.addDeviceState(to:searchRequest:)((uint64_t)v12, a2, (uint64_t)v10);
  v31 = v7;
  v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  v19(v12, v6);
  v20 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v20(v12, v10, v6);
  DataProviderManager.addRestrictions(to:searchRequest:queryContext:)((uint64_t)v12, (uint64_t)a2, v32, (uint64_t)v10);
  v28 = (uint64_t (*)(char *, uint64_t))v19;
  v19(v12, v6);
  v20(v12, v10, v6);
  DataProviderManager.addPerson(to:)((uint64_t)v12, (uint64_t)v10);
  v19(v12, v6);
  v20(v12, v10, v6);
  v21 = v30;
  DataProviderManager.addAmpState(to:searchRequest:)((uint64_t)v17, (uint64_t)v27, v30);
  v22 = v29;
  v23 = *(void (**)(char *, uint64_t))(v29 + 8);
  v23(v17, v13);
  v24 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  v24(v17, v21, v13);
  DataProviderManager.addQueueState(to:)((uint64_t)v17, v21);
  v23(v17, v13);
  v24(v33, v21, v13);
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v10, v12, v6);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.setter();
  return v28(v12, v6);
}

uint64_t DataProviderManager.addDeviceState(to:searchRequest:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(char *, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, _QWORD, uint64_t);
  void (*v47)(char *, uint64_t);
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *object;
  uint64_t v53;
  char *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void **v62;
  void *v63;
  uint64_t v64;
  void *v65;
  void **v66;
  void *v67;
  char v69;
  id v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  id v75;
  uint64_t v76;
  char *v77;
  char *v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  char *v96;
  char *v97;
  int *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;

  v99 = a2;
  v91 = a1;
  v92 = a3;
  v83 = type metadata accessor for DispatchTimeInterval();
  v81 = *(_QWORD *)(v83 - 8);
  MEMORY[0x1E0C80A78](v83);
  v79 = (uint64_t *)((char *)&v76 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v82 = type metadata accessor for DispatchTime();
  v80 = *(_QWORD *)(v82 - 8);
  MEMORY[0x1E0C80A78](v82);
  v77 = (char *)&v76 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v5);
  v78 = (char *)&v76 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DeviceClass?);
  MEMORY[0x1E0C80A78](v7);
  v86 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for SiriVoiceGender();
  v84 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v85 = (char *)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v97 = (char *)&v76 - v13;
  v14 = MEMORY[0x1E0C80A78](v12);
  v96 = (char *)&v76 - v15;
  v16 = MEMORY[0x1E0C80A78](v14);
  v95 = (char *)&v76 - v17;
  v18 = MEMORY[0x1E0C80A78](v16);
  v94 = (char *)&v76 - v19;
  MEMORY[0x1E0C80A78](v18);
  v93 = (char *)&v76 - v20;
  v21 = type metadata accessor for DeviceRestrictions();
  v100 = *(_QWORD *)(v21 - 8);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v76 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v76 - v25;
  v27 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v27);
  v29 = (char *)&v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30 = type metadata accessor for InputOrigin();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v76 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceState();
  v89 = *(_QWORD *)(v34 - 8);
  v90 = v34;
  v35 = MEMORY[0x1E0C80A78](v34);
  v88 = (char *)&v76 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v35);
  v38 = (char *)&v76 - v37;
  Apple_Parsec_Siri_V2alpha_DeviceState.init()();
  v98 = (int *)type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v99[v98[14]], (uint64_t)v29, &demangling cache variable for type metadata for InputOrigin?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    v39 = v38;
    outlined destroy of MediaUserStateCenter?((uint64_t)v29, &demangling cache variable for type metadata for InputOrigin?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v33, v29, v30);
    InputOrigin.rawValue.getter();
    v39 = v38;
    Apple_Parsec_Siri_V2alpha_DeviceState.inputOrigin.setter();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
  }
  v40 = v39;
  v41 = v92;
  if (*(_QWORD *)&v99[v98[13]])
  {
    swift_retain();
    Apple_Parsec_Siri_V2alpha_DeviceState.isEyesFree.setter();
    Apple_Parsec_Siri_V2alpha_DeviceState.isTextToSpeechEnabled.setter();
    Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceTriggerEnabled.setter();
    swift_bridgeObjectRetain();
    DeviceRestrictions.init(aceValue:)();
    static DeviceRestrictions.carDNDMode.getter();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA8108], MEMORY[0x1E0DA8110]);
    dispatch thunk of SetAlgebra.isSuperset(of:)();
    v42 = v41;
    v43 = *(void (**)(char *, uint64_t))(v100 + 8);
    v43(v24, v21);
    Apple_Parsec_Siri_V2alpha_DeviceState.isCarDnd.setter();
    static DeviceRestrictions.starkMode.getter();
    dispatch thunk of SetAlgebra.isSuperset(of:)();
    v43(v24, v21);
    Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.setter();
    swift_release();
    v43(v26, v21);
    v41 = v42;
  }
  Apple_Parsec_Siri_V2alpha_DeviceState.isMultiUser.setter();
  v44 = v87;
  v100 = SiriEnvironment.currentDevice.getter();
  if ((Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.getter() & 1) == 0)
    MKBGetDeviceLockState();
  v45 = v84;
  Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.setter();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  v46 = *(void (**)(char *, _QWORD, uint64_t))(v45 + 104);
  v46(v94, *MEMORY[0x1E0DA7B18], v9);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type SiriVoiceGender and conformance SiriVoiceGender, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7B28], MEMORY[0x1E0DA7B38]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v103 != v101 || v104 != v102)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47 = *(void (**)(char *, uint64_t))(v45 + 8);
  v47(v94, v9);
  v47(v93, v9);
  Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderFemale.setter();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  v46(v96, *MEMORY[0x1E0DA7B10], v9);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v103 != v101 || v104 != v102)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47(v96, v9);
  v47(v95, v9);
  Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderMale.setter();
  dispatch thunk of CurrentDevice.siriVoiceGender.getter();
  v48 = v85;
  v46(v85, *MEMORY[0x1E0DA7B20], v9);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v103 != v101 || v104 != v102)
    _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v47(v48, v9);
  v47(v97, v9);
  Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceGenderUnknown.setter();
  v49 = (uint64_t)v86;
  dispatch thunk of CurrentDevice.deviceClass.getter();
  v50 = type metadata accessor for DeviceClass();
  v51 = *(_QWORD *)(v50 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v49, &demangling cache variable for type metadata for DeviceClass?);
  }
  else
  {
    object = DeviceClass.stringValue()().value._object;
    (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
    if (object)
      Apple_Parsec_Siri_V2alpha_DeviceState.deviceName.setter();
  }
  v53 = *(_QWORD *)(v44 + 88);
  if (!v53)
  {
    if (*(_QWORD *)&v99[v98[21] + 8])
      goto LABEL_35;
    goto LABEL_34;
  }
  v54 = v77;
  static DispatchTime.now()();
  v55 = v79;
  *v79 = 1;
  v56 = v81;
  v57 = v83;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v81 + 104))(v55, *MEMORY[0x1E0DEF490], v83);
  v58 = (uint64_t)v78;
  MEMORY[0x1C3BBEB6C](v54, v55);
  (*(void (**)(_QWORD *, uint64_t))(v56 + 8))(v55, v57);
  v59 = v80;
  v60 = v82;
  (*(void (**)(char *, uint64_t))(v80 + 8))(v54, v82);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v59 + 56))(v58, 0, 1, v60);
  v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v53 + 168))(v58);
  outlined destroy of MediaUserStateCenter?(v58, &demangling cache variable for type metadata for DispatchTime?);
  v62 = (void **)&v99[v98[21]];
  v63 = v62[1];
  if (!v63)
    goto LABEL_34;
  if (!v61)
    goto LABEL_35;
  v64 = *(_QWORD *)(v61 + 16);
  if (!v64)
  {
LABEL_34:
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }
  v99 = v40;
  v65 = *v62;
  swift_bridgeObjectRetain_n();
  v98 = (int *)v61;
  v66 = (void **)(v61 + 80);
  while (1)
  {
    v67 = *v66;
    if (*(v66 - 6) == v65 && v63 == *(v66 - 5))
      break;
    v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v70 = v67;
    if ((v69 & 1) != 0)
      goto LABEL_37;
    v66 += 7;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (!--v64)
    {
      swift_bridgeObjectRelease_n();
      v41 = v92;
      v40 = v99;
      goto LABEL_35;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v75 = v67;
LABEL_37:

  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v40 = v99;
  Apple_Parsec_Siri_V2alpha_DeviceState.companionName.setter();
  v41 = v92;
LABEL_35:
  v71 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v71 - 8) + 16))(v41, v91, v71);
  v72 = v89;
  v73 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))(v88, v40, v90);
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.setter();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v72 + 8))(v40, v73);
}

Swift::String_optional __swiftcall DeviceClass.stringValue()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  void *v7;
  uint64_t v8;
  Swift::String_optional result;
  uint64_t v10;

  v1 = v0;
  v2 = type metadata accessor for DeviceClass();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0DA7C08])
  {
    v7 = (void *)0xE600000000000000;
    v8 = 0x656E6F685069;
  }
  else if (v6 == *MEMORY[0x1E0DA7BF8])
  {
    v7 = (void *)0xE400000000000000;
    v8 = 1684099177;
  }
  else if (v6 == *MEMORY[0x1E0DA7C18])
  {
    v7 = (void *)0xE700000000000000;
    v8 = 0x646F50656D6F48;
  }
  else if (v6 == *MEMORY[0x1E0DA7C10])
  {
    v7 = (void *)0xE800000000000000;
    v8 = 0x565420656C707041;
  }
  else if (v6 == *MEMORY[0x1E0DA7BF0])
  {
    v7 = (void *)0xE300000000000000;
    v8 = 6512973;
  }
  else if (v6 == *MEMORY[0x1E0DA7C00])
  {
    v7 = (void *)0xEB00000000686374;
    v8 = 0x615720656C707041;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v8 = 0;
    v7 = 0;
  }
  result.value._object = v7;
  result.value._countAndFlagsBits = v8;
  return result;
}

uint64_t DataProviderManager.addRestrictions(to:searchRequest:queryContext:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  void (*v38)(uint64_t, _QWORD, uint64_t);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  int v43;
  _QWORD *v44;
  uint64_t v45;
  void **v46;
  void *v47;
  uint64_t v48;
  void *v49;
  void **v50;
  void *v51;
  char v53;
  id v54;
  unsigned __int8 v55;
  uint64_t v56;
  uint64_t v57;
  NSObject *v58;
  os_log_type_t v59;
  uint8_t *v60;
  uint64_t v61;
  NSObject *v62;
  os_log_type_t v63;
  uint8_t *v64;
  void (*v65)(_BYTE *, _QWORD);
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  NSObject *v76;
  os_log_type_t v77;
  uint8_t *v78;
  void (*v79)(_BYTE *, _QWORD);
  unint64_t *v80;
  unint64_t *v81;
  unint64_t v82;
  char v83;
  unint64_t v84;
  unint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  char *v92;
  char v93;
  uint64_t v94;
  uint64_t v95;
  NSObject *v96;
  os_log_type_t v97;
  uint8_t *v98;
  void (*v99)(_BYTE *, _QWORD);
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  char v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  void (*v111)(uint64_t *__return_ptr, uint64_t);
  uint64_t v112;
  char v113;
  uint64_t v114;
  NSObject *v115;
  os_log_type_t v116;
  uint8_t *v117;
  void (*v118)(_QWORD *, _QWORD);
  unint64_t *v119;
  unint64_t *v120;
  unint64_t v121;
  char v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  NSObject *v126;
  os_log_type_t v127;
  uint8_t *v128;
  uint64_t v129;
  void (*v130)(uint64_t *__return_ptr, uint64_t);
  uint64_t v131;
  char v132;
  uint64_t v133;
  NSObject *v134;
  os_log_type_t v135;
  _BOOL4 v136;
  uint64_t v137;
  uint8_t *v138;
  uint64_t v139;
  void (*v140)(uint64_t *__return_ptr, uint64_t);
  uint64_t v141;
  uint64_t v142;
  NSObject *v143;
  os_log_type_t v144;
  uint8_t *v145;
  char *v146;
  uint64_t v147;
  char v148;
  void (*v149)(char *, uint64_t);
  uint64_t v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  void (*v155)(_BYTE *, _QWORD);
  unint64_t *v156;
  unint64_t *v157;
  unint64_t v158;
  char v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  NSObject *v163;
  os_log_type_t v164;
  uint8_t *v165;
  char *v166;
  uint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  NSObject *v171;
  os_log_type_t v172;
  uint8_t *v173;
  void (*v174)(_BYTE *, _QWORD);
  unint64_t *v175;
  unint64_t *v176;
  unint64_t v177;
  char v178;
  unint64_t v179;
  unint64_t v180;
  uint64_t v181;
  NSObject *v182;
  os_log_type_t v183;
  uint8_t *v184;
  uint64_t v186;
  NSObject *v187;
  os_log_type_t v188;
  uint8_t *v189;
  void (*v190)(_OWORD *, _QWORD);
  unint64_t *v191;
  unint64_t *v192;
  unint64_t v193;
  char v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  NSObject *v198;
  os_log_type_t v199;
  uint8_t *v200;
  uint64_t v201;
  id v202;
  uint64_t v203;
  NSObject *v204;
  os_log_type_t v205;
  _BOOL4 v206;
  uint64_t v207;
  uint8_t *v208;
  void (*v209)(_BYTE *, _QWORD);
  unint64_t *v210;
  unint64_t *v211;
  unint64_t v212;
  char v213;
  uint64_t v214;
  unint64_t v215;
  unint64_t v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  char *v222;
  char *v223;
  char *v224;
  uint64_t v225;
  char *v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char *v234;
  uint64_t v235;
  char *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  __int128 v241;
  _BYTE v242[40];
  uint64_t v243[12];
  uint64_t v244[12];
  uint64_t v245[12];
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  _OWORD v250[2];
  _OWORD v251[2];
  _OWORD v252[2];
  _OWORD v253[2];
  _QWORD v254[11];
  char v255;
  _BYTE v256[24];
  uint64_t v257;
  char v258;
  _BYTE v259[24];
  __int128 v260;
  char v261;

  v221 = a3;
  v235 = a2;
  *(_QWORD *)&v241 = a1;
  v238 = type metadata accessor for DeviceRestrictions();
  v231 = *(_QWORD *)(v238 - 8);
  v6 = MEMORY[0x1E0C80A78](v238);
  v236 = (char *)&v217 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v234 = (char *)&v217 - v8;
  v220 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions();
  MEMORY[0x1E0C80A78](v220);
  v219 = (char *)&v217 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v225 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceState();
  v228 = *(_QWORD *)(v225 - 8);
  MEMORY[0x1E0C80A78](v225);
  v227 = (char *)&v217 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v239 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Restriction();
  v237 = *(_QWORD *)(v239 - 8);
  v11 = MEMORY[0x1E0C80A78](v239);
  v233 = (char *)&v217 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v232 = (char *)&v217 - v14;
  v15 = MEMORY[0x1E0C80A78](v13);
  v223 = (char *)&v217 - v16;
  v17 = MEMORY[0x1E0C80A78](v15);
  v222 = (char *)&v217 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v229 = (char *)&v217 - v20;
  v21 = MEMORY[0x1E0C80A78](v19);
  v226 = (char *)&v217 - v22;
  v23 = MEMORY[0x1E0C80A78](v21);
  v224 = (char *)&v217 - v24;
  MEMORY[0x1E0C80A78](v23);
  v218 = (char *)&v217 - v25;
  v26 = type metadata accessor for DispatchTimeInterval();
  v27 = *(_QWORD *)(v26 - 8);
  MEMORY[0x1E0C80A78](v26);
  v29 = (uint64_t *)((char *)&v217 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  v30 = type metadata accessor for DispatchTime();
  v31 = *(_QWORD *)(v30 - 8);
  MEMORY[0x1E0C80A78](v30);
  v33 = (char *)&v217 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v34);
  v36 = (char *)&v217 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  v38 = *(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v37 - 8) + 16);
  v240 = a4;
  v38(a4, v241, v37);
  *(_QWORD *)&v241 = v4;
  v39 = *(_QWORD *)(v4 + 88);
  if (v39)
  {
    static DispatchTime.now()();
    *v29 = 1;
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(v27 + 104))(v29, *MEMORY[0x1E0DEF490], v26);
    MEMORY[0x1C3BBEB6C](v33, v29);
    (*(void (**)(_QWORD *, uint64_t))(v27 + 8))(v29, v26);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v33, v30);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v36, 0, 1, v30);
    v40 = (*(uint64_t (**)(char *))(*(_QWORD *)v39 + 168))(v36);
    outlined destroy of MediaUserStateCenter?((uint64_t)v36, &demangling cache variable for type metadata for DispatchTime?);
  }
  else
  {
    v40 = 0;
  }
  v41 = type metadata accessor for PommesSearchRequest(0);
  v42 = v234;
  v43 = *(unsigned __int8 *)(v235 + *(int *)(v41 + 60));
  v44 = &demangling cache variable for type metadata for (String, CacheHandling);
  v45 = v239;
  v230 = v41;
  if (v43 != 1)
    goto LABEL_16;
  if (!v40)
    goto LABEL_17;
  v46 = (void **)(v235 + *(int *)(v41 + 84));
  v47 = v46[1];
  if (!v47 || (v48 = *(_QWORD *)(v40 + 16)) == 0)
  {
LABEL_16:
    swift_bridgeObjectRelease();
LABEL_17:
    v55 = objc_msgSend(*(id *)(v241 + 104), sel_allowExplicitContent, v217);
    v56 = v44[240];
    if ((v55 & 1) != 0)
    {
      if (v56 != -1)
        swift_once();
      v57 = type metadata accessor for Logger();
      __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
      v58 = Logger.logObject.getter();
      v59 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v58, v59))
      {
        v60 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v60 = 0;
        _os_log_impl(&dword_1C2356000, v58, v59, "Restrictions: skipping .audioExplicitContentDisabled", v60, 2u);
        MEMORY[0x1C3BBFF64](v60, -1, -1);
      }

    }
    else
    {
      if (v56 != -1)
        swift_once();
      v61 = type metadata accessor for Logger();
      __swift_project_value_buffer(v61, (uint64_t)static Logger.pommes);
      v62 = Logger.logObject.getter();
      v63 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v62, v63))
      {
        v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v64 = 0;
        _os_log_impl(&dword_1C2356000, v62, v63, "Restrictions: explicit content disallowed. Adding .audioExplicitContentDisabled", v64, 2u);
        MEMORY[0x1C3BBFF64](v64, -1, -1);
      }

      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
      static Message.with(_:)();
      v65 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
      v67 = v66;
      v68 = *v66;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *v67 = v68;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v68 + 16) + 1, 1, v68);
        *v67 = v68;
      }
      v71 = *(_QWORD *)(v68 + 16);
      v70 = *(_QWORD *)(v68 + 24);
      if (v71 >= v70 >> 1)
      {
        v68 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v70 > 1, v71 + 1, 1, v68);
        *v67 = v68;
      }
      *(_QWORD *)(v68 + 16) = v71 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v68+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v71, v224, v45);
      v65(v256, 0);
    }
    goto LABEL_32;
  }
  v49 = *v46;
  swift_bridgeObjectRetain_n();
  v217 = v40;
  v50 = (void **)(v40 + 80);
  while (1)
  {
    v51 = *v50;
    if (*(v50 - 6) == v49 && v47 == *(v50 - 5))
      break;
    v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v54 = v51;
    if ((v53 & 1) != 0)
      goto LABEL_143;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v50 += 7;
    if (!--v48)
    {
      swift_bridgeObjectRelease_n();
LABEL_154:
      v42 = v234;
      v45 = v239;
      v44 = (_QWORD *)&demangling cache variable for type metadata for (String, CacheHandling);
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v202 = v51;
LABEL_143:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((objc_msgSend(v51, sel_mediaPlayerExplicitContentDisallowed, v217) & 1) == 0)
  {

    goto LABEL_154;
  }
  v44 = &demangling cache variable for type metadata for (String, CacheHandling);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v203 = type metadata accessor for Logger();
  __swift_project_value_buffer(v203, (uint64_t)static Logger.pommes);
  v204 = Logger.logObject.getter();
  v205 = static os_log_type_t.debug.getter();
  v206 = os_log_type_enabled(v204, v205);
  v207 = v239;
  if (v206)
  {
    v208 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v208 = 0;
    _os_log_impl(&dword_1C2356000, v204, v205, "Restrictions: explicit content disallowed via HomeSettings. Adding .audioExplicitContentDisabled", v208, 2u);
    MEMORY[0x1C3BBFF64](v208, -1, -1);
  }

  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
  static Message.with(_:)();
  v209 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
  v211 = v210;
  v212 = *v210;
  v213 = swift_isUniquelyReferenced_nonNull_native();
  *v211 = v212;
  v214 = v207;
  if ((v213 & 1) == 0)
  {
    v212 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v212 + 16) + 1, 1, v212);
    *v211 = v212;
  }
  v216 = *(_QWORD *)(v212 + 16);
  v215 = *(_QWORD *)(v212 + 24);
  if (v216 >= v215 >> 1)
  {
    v212 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v215 > 1, v216 + 1, 1, v212);
    *v211 = v212;
  }
  *(_QWORD *)(v212 + 16) = v216 + 1;
  v45 = v214;
  (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v212+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v216, v218, v214);
  v209(v256, 0);

  v42 = v234;
LABEL_32:
  v72 = objc_msgSend(*(id *)(v241 + 104), sel_isInRestrictedSharingMode);
  v73 = v44[240];
  v74 = v45;
  if (v72)
  {
    if (v73 != -1)
      swift_once();
    v75 = type metadata accessor for Logger();
    __swift_project_value_buffer(v75, (uint64_t)static Logger.pommes);
    v76 = Logger.logObject.getter();
    v77 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v76, v77))
    {
      v78 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v78 = 0;
      _os_log_impl(&dword_1C2356000, v76, v77, "Restrictions: in restricted sharing mode. Adding .personalInformationDisabled", v78, 2u);
      MEMORY[0x1C3BBFF64](v78, -1, -1);
    }

    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
    static Message.with(_:)();
    v79 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    v81 = v80;
    v82 = *v80;
    v83 = swift_isUniquelyReferenced_nonNull_native();
    *v81 = v82;
    if ((v83 & 1) == 0)
    {
      v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v82 + 16) + 1, 1, v82);
      *v81 = v82;
    }
    v85 = *(_QWORD *)(v82 + 16);
    v84 = *(_QWORD *)(v82 + 24);
    if (v85 >= v84 >> 1)
    {
      v82 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v84 > 1, v85 + 1, 1, v82);
      *v81 = v82;
    }
    v87 = v225;
    v86 = v226;
    *(_QWORD *)(v82 + 16) = v85 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v82+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v85, v86, v74);
    v79(v256, 0);
  }
  else
  {
    if (v73 != -1)
      swift_once();
    v88 = type metadata accessor for Logger();
    __swift_project_value_buffer(v88, (uint64_t)static Logger.pommes);
    v89 = Logger.logObject.getter();
    v90 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v89, v90))
    {
      v91 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v91 = 0;
      _os_log_impl(&dword_1C2356000, v89, v90, "Restrictions: skipping .personalInformationDisabled", v91, 2u);
      MEMORY[0x1C3BBFF64](v91, -1, -1);
    }

    v87 = v225;
  }
  v92 = v227;
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.getter();
  v93 = Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.getter();
  (*(void (**)(char *, uint64_t))(v228 + 8))(v92, v87);
  v94 = v44[240];
  if ((v93 & 1) != 0)
  {
    if (v94 != -1)
      swift_once();
    v95 = type metadata accessor for Logger();
    __swift_project_value_buffer(v95, (uint64_t)static Logger.pommes);
    v96 = Logger.logObject.getter();
    v97 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v96, v97))
    {
      v98 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v98 = 0;
      _os_log_impl(&dword_1C2356000, v96, v97, "Restrictions: device is locked. Adding .personalInformationDisabled", v98, 2u);
      MEMORY[0x1C3BBFF64](v98, -1, -1);
    }

    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
    static Message.with(_:)();
    v99 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    v101 = v100;
    v102 = *v100;
    v103 = swift_isUniquelyReferenced_nonNull_native();
    *v101 = v102;
    if ((v103 & 1) == 0)
    {
      v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v102 + 16) + 1, 1, v102);
      *v101 = v102;
    }
    v105 = *(_QWORD *)(v102 + 16);
    v104 = *(_QWORD *)(v102 + 24);
    if (v105 >= v104 >> 1)
    {
      v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v104 > 1, v105 + 1, 1, v102);
      *v101 = v102;
    }
    *(_QWORD *)(v102 + 16) = v105 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v102+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v105, v229, v74);
    v99(v256, 0);
  }
  else
  {
    if (v94 != -1)
      swift_once();
    v106 = type metadata accessor for Logger();
    __swift_project_value_buffer(v106, (uint64_t)static Logger.pommes);
    v107 = Logger.logObject.getter();
    v108 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v107, v108))
    {
      v109 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v109 = 0;
      _os_log_impl(&dword_1C2356000, v107, v108, "Restrictions: skipping .personalInformationDisabled because device is unlocked.", v109, 2u);
      MEMORY[0x1C3BBFF64](v109, -1, -1);
    }

  }
  v110 = *(_QWORD *)(v241 + 112);
  if (v110
    && (v111 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v110 + 120),
        v112 = swift_retain(),
        v111(v243, v112),
        swift_release(),
        outlined init with take of PommesSearchReason?((uint64_t)v243, (uint64_t)v256, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?), v257)&& (v113 = v258, outlined release of AssistantDataSnapshot?(v243), (v113 & 1) == 0))
  {
    if (v44[240] != -1)
      swift_once();
    v114 = type metadata accessor for Logger();
    __swift_project_value_buffer(v114, (uint64_t)static Logger.pommes);
    v115 = Logger.logObject.getter();
    v116 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v115, v116))
    {
      v117 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v117 = 0;
      _os_log_impl(&dword_1C2356000, v115, v116, "Restrictions: web search content disallowed. Adding .siriWebSearchContentDisabled", v117, 2u);
      MEMORY[0x1C3BBFF64](v117, -1, -1);
    }

    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
    static Message.with(_:)();
    v118 = (void (*)(_QWORD *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    v120 = v119;
    v121 = *v119;
    v122 = swift_isUniquelyReferenced_nonNull_native();
    *v120 = v121;
    if ((v122 & 1) == 0)
    {
      v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v121 + 16) + 1, 1, v121);
      *v120 = v121;
    }
    v124 = *(_QWORD *)(v121 + 16);
    v123 = *(_QWORD *)(v121 + 24);
    if (v124 >= v123 >> 1)
    {
      v121 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v123 > 1, v124 + 1, 1, v121);
      *v120 = v121;
    }
    *(_QWORD *)(v121 + 16) = v124 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v121+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v124, v222, v74);
    v118(v254, 0);
  }
  else
  {
    if (v44[240] != -1)
      swift_once();
    v125 = type metadata accessor for Logger();
    __swift_project_value_buffer(v125, (uint64_t)static Logger.pommes);
    v126 = Logger.logObject.getter();
    v127 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v126, v127))
    {
      v128 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v128 = 0;
      _os_log_impl(&dword_1C2356000, v126, v127, "Restrictions: skipping .siriWebSearchContentDisabled", v128, 2u);
      MEMORY[0x1C3BBFF64](v128, -1, -1);
    }

  }
  v129 = *(_QWORD *)(v241 + 112);
  if (v129
    && (v130 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v129 + 120),
        v131 = swift_retain(),
        v130(v244, v131),
        swift_release(),
        outlined init with take of PommesSearchReason?((uint64_t)v244, (uint64_t)v254, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?), v254[3])&& (v132 = v255, outlined release of AssistantDataSnapshot?(v244), (v132 & 1) != 0))
  {
    if (v44[240] != -1)
      swift_once();
    v186 = type metadata accessor for Logger();
    __swift_project_value_buffer(v186, (uint64_t)static Logger.pommes);
    v187 = Logger.logObject.getter();
    v188 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v187, v188))
    {
      v189 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v189 = 0;
      _os_log_impl(&dword_1C2356000, v187, v188, "Restrictions: explicit language disallowed. Adding .siriExplicitLanguageDisallowed", v189, 2u);
      MEMORY[0x1C3BBFF64](v189, -1, -1);
    }

    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
    static Message.with(_:)();
    v190 = (void (*)(_OWORD *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    v192 = v191;
    v193 = *v191;
    v194 = swift_isUniquelyReferenced_nonNull_native();
    *v192 = v193;
    if ((v194 & 1) == 0)
    {
      v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v193 + 16) + 1, 1, v193);
      *v192 = v193;
    }
    v196 = *(_QWORD *)(v193 + 16);
    v195 = *(_QWORD *)(v193 + 24);
    if (v196 >= v195 >> 1)
    {
      v193 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v195 > 1, v196 + 1, 1, v193);
      *v192 = v193;
    }
    *(_QWORD *)(v193 + 16) = v196 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v193+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v196, v223, v74);
    v190(v251, 0);
    v137 = v235;
  }
  else
  {
    if (v44[240] != -1)
      swift_once();
    v133 = type metadata accessor for Logger();
    __swift_project_value_buffer(v133, (uint64_t)static Logger.pommes);
    v134 = Logger.logObject.getter();
    v135 = static os_log_type_t.debug.getter();
    v136 = os_log_type_enabled(v134, v135);
    v137 = v235;
    if (v136)
    {
      v138 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v138 = 0;
      _os_log_impl(&dword_1C2356000, v134, v135, "Restrictions: skipping .siriExplicitLanguageDisallowed", v138, 2u);
      MEMORY[0x1C3BBFF64](v138, -1, -1);
    }

  }
  v139 = *(_QWORD *)(v241 + 112);
  if (!v139)
    goto LABEL_90;
  v140 = *(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v139 + 120);
  v141 = swift_retain();
  v140(v245, v141);
  swift_release();
  outlined init with take of PommesSearchReason?((uint64_t)v245, (uint64_t)&v246, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  if (!*((_QWORD *)&v247 + 1))
    goto LABEL_90;
  v252[0] = v248;
  v252[1] = v249;
  v253[0] = v250[0];
  *(_OWORD *)((char *)v253 + 10) = *(_OWORD *)((char *)v250 + 10);
  v251[0] = v246;
  v251[1] = v247;
  outlined release of AssistantDataSnapshot?(v245);
  outlined init with take of PommesSearchReason?((uint64_t)v252, (uint64_t)v259, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  outlined init with take of PommesSearchReason?((uint64_t)v259, (uint64_t)&v260, &demangling cache variable for type metadata for AssistantDataSnapshot.ContentRestriction?);
  if ((v261 & 1) == 0)
  {
    v241 = v260;
    if (v44[240] != -1)
      swift_once();
    v197 = type metadata accessor for Logger();
    __swift_project_value_buffer(v197, (uint64_t)static Logger.pommes);
    v198 = Logger.logObject.getter();
    v199 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v198, v199))
    {
      v200 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v200 = 0;
      _os_log_impl(&dword_1C2356000, v198, v199, "Restrictions: adding media content rating restrictions", v200, 2u);
      MEMORY[0x1C3BBFF64](v200, -1, -1);
    }

    MEMORY[0x1E0C80A78](v201);
    *(&v217 - 4) = v221;
    *(_OWORD *)(&v217 - 3) = v241;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions and conformance Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions, (uint64_t (*)(uint64_t))MEMORY[0x1E0D70578], MEMORY[0x1E0D70570]);
    static Message.with(_:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.setter();
  }
  else
  {
LABEL_90:
    if (v44[240] != -1)
      swift_once();
    v142 = type metadata accessor for Logger();
    __swift_project_value_buffer(v142, (uint64_t)static Logger.pommes);
    v143 = Logger.logObject.getter();
    v144 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v143, v144))
    {
      v145 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v145 = 0;
      _os_log_impl(&dword_1C2356000, v143, v144, "Restrictions: skipping media content rating restrictions", v145, 2u);
      MEMORY[0x1C3BBFF64](v145, -1, -1);
    }

  }
  if (*(_QWORD *)(v137 + *(int *)(v230 + 52)))
    swift_bridgeObjectRetain();
  DeviceRestrictions.init(aceValue:)();
  v146 = v236;
  static DeviceRestrictions.starkMode.getter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type DeviceRestrictions and conformance DeviceRestrictions, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA8108], MEMORY[0x1E0DA8110]);
  v147 = v238;
  v148 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v149 = *(void (**)(char *, uint64_t))(v231 + 8);
  v149(v146, v147);
  v150 = v44[240];
  if ((v148 & 1) != 0)
  {
    if (v150 != -1)
      swift_once();
    v151 = type metadata accessor for Logger();
    __swift_project_value_buffer(v151, (uint64_t)static Logger.pommes);
    v152 = Logger.logObject.getter();
    v153 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v152, v153))
    {
      v154 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v154 = 0;
      _os_log_impl(&dword_1C2356000, v152, v153, "Restrictions: Stark mode. Adding .restrictionPrimaryDisplayDisabled (.advancedCar)", v154, 2u);
      MEMORY[0x1C3BBFF64](v154, -1, -1);
    }

    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
    static Message.with(_:)();
    v155 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    v157 = v156;
    v158 = *v156;
    v159 = swift_isUniquelyReferenced_nonNull_native();
    *v157 = v158;
    if ((v159 & 1) == 0)
    {
      v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v158 + 16) + 1, 1, v158);
      *v157 = v158;
    }
    v161 = *(_QWORD *)(v158 + 16);
    v160 = *(_QWORD *)(v158 + 24);
    if (v161 >= v160 >> 1)
    {
      v158 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v160 > 1, v161 + 1, 1, v158);
      *v157 = v158;
    }
    *(_QWORD *)(v158 + 16) = v161 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v158+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v161, v232, v239);
    v155(v242, 0);
    v42 = v234;
  }
  else
  {
    if (v150 != -1)
      swift_once();
    v162 = type metadata accessor for Logger();
    __swift_project_value_buffer(v162, (uint64_t)static Logger.pommes);
    v163 = Logger.logObject.getter();
    v164 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v163, v164))
    {
      v165 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v165 = 0;
      _os_log_impl(&dword_1C2356000, v163, v164, "Restrictions: skipping .restrictionPrimaryDisplayDisabled (.advancedCar)", v165, 2u);
      MEMORY[0x1C3BBFF64](v165, -1, -1);
    }

  }
  v166 = v236;
  static DeviceRestrictions.carDNDMode.getter();
  v167 = v238;
  v168 = dispatch thunk of SetAlgebra.isSuperset(of:)();
  v149(v166, v167);
  v169 = v44[240];
  if ((v168 & 1) != 0)
  {
    if (v169 != -1)
      swift_once();
    v170 = type metadata accessor for Logger();
    __swift_project_value_buffer(v170, (uint64_t)static Logger.pommes);
    v171 = Logger.logObject.getter();
    v172 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v171, v172))
    {
      v173 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v173 = 0;
      _os_log_impl(&dword_1C2356000, v171, v172, "Restrictions: car DND mode. Adding .restrictionPrimaryDisplayDisabled (.carDnd)", v173, 2u);
      MEMORY[0x1C3BBFF64](v173, -1, -1);
    }

    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Restriction and conformance Apple_Parsec_Siri_V2alpha_Restriction, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E520], MEMORY[0x1E0D6E500]);
    static Message.with(_:)();
    v174 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.modify();
    v176 = v175;
    v177 = *v175;
    v178 = swift_isUniquelyReferenced_nonNull_native();
    *v176 = v177;
    if ((v178 & 1) == 0)
    {
      v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v177 + 16) + 1, 1, v177);
      *v176 = v177;
    }
    v180 = *(_QWORD *)(v177 + 16);
    v179 = *(_QWORD *)(v177 + 24);
    if (v180 >= v179 >> 1)
    {
      v177 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v179 > 1, v180 + 1, 1, v177);
      *v176 = v177;
    }
    *(_QWORD *)(v177 + 16) = v180 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v237 + 32))(v177+ ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80))+ *(_QWORD *)(v237 + 72) * v180, v233, v239);
    v174(v242, 0);
  }
  else
  {
    if (v169 != -1)
      swift_once();
    v181 = type metadata accessor for Logger();
    __swift_project_value_buffer(v181, (uint64_t)static Logger.pommes);
    v182 = Logger.logObject.getter();
    v183 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v182, v183))
    {
      v184 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v184 = 0;
      _os_log_impl(&dword_1C2356000, v182, v183, "Restrictions: skipping .restrictionPrimaryDisplayDisabled (.carDnd)", v184, 2u);
      MEMORY[0x1C3BBFF64](v184, -1, -1);
    }

  }
  return ((uint64_t (*)(char *, uint64_t))v149)(v42, v238);
}

uint64_t partial apply for closure #7 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #7 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(a1, v1[2], v1[3], v1[4]);
}

uint64_t closure #7 in DataProviderManager.addRestrictions(to:searchRequest:queryContext:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;

  v6 = Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
  result = MEMORY[0x1C3BBC4CC](v6);
  if (a3 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (a3 > 0x7FFFFFFF)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  result = Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.movieRestriction.setter();
  if (a4 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (a4 <= 0x7FFFFFFF)
    return Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.tvRestriction.setter();
LABEL_9:
  __break(1u);
  return result;
}

uint64_t DataProviderManager.addPerson(to:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)&v26 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v26 - v12;
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(a2, a1, v14);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  result = OS_dispatch_queue.sync<A>(execute:)();
  v16 = *((_QWORD *)&v36 + 1);
  if (*((_QWORD *)&v36 + 1))
  {
    v26 = 0;
    v27 = v11;
    v28 = v13;
    v29 = v8;
    v30 = v5;
    v31 = v4;
    v34 = v35;
    v17 = v36;
    v32 = a2;
    v33 = *((_QWORD *)&v35 + 1);
    swift_bridgeObjectRetain();
    outlined consume of AssistantDataSnapshot?(v34, v33, v17, v16);
    if (*(_QWORD *)(v16 + 16))
    {
      v18 = *(_OWORD *)(v16 + 96);
      v38 = *(_OWORD *)(v16 + 80);
      v39 = v18;
      v40 = *(_OWORD *)(v16 + 112);
      v41 = *(_QWORD *)(v16 + 128);
      v19 = *(_OWORD *)(v16 + 48);
      v35 = *(_OWORD *)(v16 + 32);
      v36 = v19;
      v37 = *(_OWORD *)(v16 + 64);
      outlined retain of AssistantDataSnapshot.MeCard((uint64_t)&v35);
      v20 = swift_bridgeObjectRelease();
      MEMORY[0x1E0C80A78](v20);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6DD60], MEMORY[0x1E0D6DD28]);
      v21 = v27;
      v22 = v31;
      static Message.with(_:)();
      outlined release of AssistantDataSnapshot.MeCard((uint64_t)&v35);
      v23 = v30;
      v24 = v28;
      v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(v28, v21, v22);
      MEMORY[0x1E0C80A78](v25);
      static Message.with(_:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusContext.person.setter();
      return (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v24, v22);
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t outlined retain of AssistantDataSnapshot.MeCard(uint64_t a1)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  _OWORD *v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v19[2];
  uint64_t v20;
  uint64_t v21;
  _OWORD v22[6];
  uint64_t v23;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ContactAddress();
  v20 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2[1])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  }
  if (a2[3])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  }
  if (a2[5])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  }
  if (a2[9])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  }
  if (a2[7])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
  }
  if (a2[12])
  {
    swift_bridgeObjectRetain();
    Apple_Parsec_Siri_V2alpha_Person.contactIdentifier.setter();
  }
  v7 = a2[10];
  v23 = v7;
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v19[1] = a1;
    v21 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    v9 = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    v10 = (_OWORD *)(v7 + 32);
    do
    {
      v11 = v10[1];
      v22[0] = *v10;
      v22[1] = v11;
      v12 = v10[2];
      v13 = v10[3];
      v14 = v10[5];
      v22[4] = v10[4];
      v22[5] = v14;
      v22[2] = v12;
      v22[3] = v13;
      MEMORY[0x1E0C80A78](v9);
      v19[-2] = v22;
      outlined retain of AssistantDataSnapshot.MeCard.ContactAddress((uint64_t)v22);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ContactAddress and conformance Apple_Parsec_Siri_V2alpha_ContactAddress, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6ECC0], MEMORY[0x1E0D6EC98]);
      static Message.with(_:)();
      outlined release of AssistantDataSnapshot.MeCard.ContactAddress((uint64_t)v22);
      v15 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v15 + 16) + 1, 1);
        v15 = v21;
      }
      v17 = *(_QWORD *)(v15 + 16);
      v16 = *(_QWORD *)(v15 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1);
        v15 = v21;
      }
      *(_QWORD *)(v15 + 16) = v17 + 1;
      v9 = (*(uint64_t (**)(unint64_t, char *, uint64_t))(v20 + 32))(v15+ ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80))+ *(_QWORD *)(v20 + 72) * v17, v6, v4);
      v21 = v15;
      v10 += 6;
      --v8;
    }
    while (v8);
    outlined release of [LNActionMetadata]((uint64_t)&v23);
  }
  return Apple_Parsec_Siri_V2alpha_Person.addresses.setter();
}

uint64_t partial apply for closure #1 in AssistantDataSnapshot.MeCard.ContactAddress.toContactAddressProtobuf()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AssistantDataSnapshot.MeCard.ContactAddress.toContactAddressProtobuf()(a1, *(_QWORD **)(v1 + 16));
}

uint64_t closure #1 in AssistantDataSnapshot.MeCard.ContactAddress.toContactAddressProtobuf()(uint64_t a1, _QWORD *a2)
{
  uint64_t result;

  if (a2[1])
  {
    swift_bridgeObjectRetain();
    result = Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  }
  if (a2[3])
  {
    swift_bridgeObjectRetain();
    result = Apple_Parsec_Siri_V2alpha_Person.middleName.setter();
  }
  if (a2[5])
  {
    swift_bridgeObjectRetain();
    result = Apple_Parsec_Siri_V2alpha_Person.familyName.setter();
  }
  if (a2[7])
  {
    swift_bridgeObjectRetain();
    result = Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
  }
  if (a2[9])
  {
    swift_bridgeObjectRetain();
    result = Apple_Parsec_Siri_V2alpha_Person.fullName.setter();
  }
  if (a2[11])
  {
    swift_bridgeObjectRetain();
    return Apple_Parsec_Siri_V2alpha_ContactAddress.countryCode.setter();
  }
  return result;
}

uint64_t outlined release of [LNActionMetadata](uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined release of AssistantDataSnapshot.MeCard(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t partial apply for closure #1 in DataProviderManager.addPerson(to:)()
{
  return closure #1 in DataProviderManager.addPerson(to:)();
}

uint64_t closure #1 in DataProviderManager.addPerson(to:)()
{
  Apple_Parsec_Siri_V2alpha_Person.givenName.getter();
  Apple_Parsec_Siri_V2alpha_Person.givenName.setter();
  Apple_Parsec_Siri_V2alpha_Person.nickname.getter();
  return Apple_Parsec_Siri_V2alpha_Person.nickname.setter();
}

void DataProviderManager.addAmpState(to:searchRequest:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  char *v40;
  void (*v41)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint64_t v42;
  uint64_t v43;
  char *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  uint8_t *v62;
  char *v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  char *v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, unint64_t, uint64_t);
  unsigned int v101;
  uint64_t v102;
  char *v103;
  char *v104;
  char *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110[13];

  v4 = v3;
  v98 = a2;
  v110[12] = *MEMORY[0x1E0C80C00];
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v77 = (uint64_t)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v90 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v88 = *(_QWORD *)(v90 - 8);
  MEMORY[0x1E0C80A78](v90);
  v87 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1E0C80A78](v11);
  v89 = (uint64_t)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v91 = *(_QWORD *)(v92 - 8);
  MEMORY[0x1E0C80A78](v92);
  v76 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for DispatchTimeInterval();
  v84 = *(_QWORD *)(v86 - 8);
  MEMORY[0x1E0C80A78](v86);
  v82 = (uint64_t *)((char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v85 = type metadata accessor for DispatchTime();
  v83 = *(_QWORD *)(v85 - 8);
  MEMORY[0x1E0C80A78](v85);
  v80 = (char *)&v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v16);
  v81 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v96 = type metadata accessor for Date();
  v95 = *(_QWORD *)(v96 - 8);
  MEMORY[0x1E0C80A78](v96);
  v94 = (char *)&v74 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v102 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v106 = *(_QWORD *)(v102 - 8);
  v19 = MEMORY[0x1E0C80A78](v102);
  v105 = (char *)&v74 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v104 = (char *)&v74 - v21;
  v107 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v22 = *(_QWORD *)(v107 - 8);
  MEMORY[0x1E0C80A78](v107);
  v103 = (char *)&v74 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(a3, a1, v7);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v97 = v4;
  OS_dispatch_queue.sync<A>(execute:)();
  v93 = 0;
  outlined init with take of PommesSearchReason?((uint64_t)&v109, (uint64_t)v110, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v24 = *(_QWORD *)(v98 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 92));
  v25 = *(_QWORD *)(v24 + 16);
  if (v25)
  {
    v74 = v7;
    v75 = a3;
    v26 = v24 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
    v101 = *MEMORY[0x1E0D6F178];
    v99 = *(_QWORD *)(v22 + 72);
    v100 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
    v79 = v24;
    swift_bridgeObjectRetain();
    v27 = v22;
    v28 = v103;
    v29 = v104;
    v30 = v105;
    v31 = v102;
    while (1)
    {
      v100(v28, v26, v107);
      Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
      v32 = v106;
      (*(void (**)(char *, _QWORD, uint64_t))(v106 + 104))(v30, v101, v31);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F1D8], MEMORY[0x1E0D6F1F0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v33 = v109;
      v34 = v108;
      v35 = *(void (**)(char *, uint64_t))(v32 + 8);
      v35(v30, v31);
      v35(v29, v31);
      (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v107);
      if (v33 == v34)
        break;
      v26 += v99;
      if (!--v25)
      {
        v24 = swift_bridgeObjectRelease();
        a3 = v75;
        v7 = v74;
        goto LABEL_6;
      }
    }
    swift_bridgeObjectRelease();
    outlined release of AssistantDataSnapshot?(v110);
  }
  else
  {
LABEL_6:
    v36 = v7;
    v37 = a3;
    if (one-time initialization token for shared != -1)
      v24 = swift_once();
    v38 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v24);
    v39 = v97;
    v70 = v97;
    v71 = v98;
    v72 = v110;
    v40 = v94;
    Date.init()();
    v41 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v38 + 200);
    v72 = &v69;
    v73 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [MediaUserState]?);
    LOBYTE(v70) = 2;
    v41(&v109, 0xD00000000000003FLL, 0x80000001C2505C80, 0, v40, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 557, "addAmpState(to:searchRequest:)", 30, v70, partial apply for closure #2 in DataProviderManager.addAmpState(to:searchRequest:));
    (*(void (**)(char *, uint64_t))(v95 + 8))(v40, v96);
    outlined release of AssistantDataSnapshot?(v110);
    v42 = v109;
    if (v109)
    {
      v43 = *(_QWORD *)(v39 + 88);
      if (v43)
      {
        v44 = v80;
        static DispatchTime.now()();
        v45 = v82;
        *v82 = 1;
        v46 = v84;
        v47 = v86;
        (*(void (**)(_QWORD *, _QWORD, uint64_t))(v84 + 104))(v45, *MEMORY[0x1E0DEF490], v86);
        v48 = (uint64_t)v81;
        MEMORY[0x1C3BBEB6C](v44, v45);
        (*(void (**)(_QWORD *, uint64_t))(v46 + 8))(v45, v47);
        v49 = v83;
        v50 = v85;
        (*(void (**)(char *, uint64_t))(v83 + 8))(v44, v85);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v49 + 56))(v48, 0, 1, v50);
        v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v43 + 168))(v48);
        outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for DispatchTime?);
        v52 = v88;
        v53 = (uint64_t)v87;
        v54 = v90;
        (*(void (**)(char *, _QWORD, uint64_t))(v88 + 104))(v87, *MEMORY[0x1E0D70598], v90);
        swift_bridgeObjectRetain();
        v55 = specialized Sequence.compactMap<A>(_:)(v42, v51);
        swift_bridgeObjectRelease();
        v56 = v89;
        createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v55, v53, 0, v89);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v53, v54);
        v57 = v91;
        v58 = v92;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v56, 1, v92) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
        }
        else
        {
          v63 = v76;
          (*(void (**)(char *, uint64_t, uint64_t))(v57 + 32))(v76, v56, v58);
          __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
          v64 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
          v65 = v57;
          v66 = swift_allocObject();
          *(_OWORD *)(v66 + 16) = xmmword_1C24FA1B0;
          (*(void (**)(unint64_t, char *, uint64_t))(v65 + 16))(v66 + v64, v63, v58);
          v67 = v77;
          DataProviderManager.appendProfileSlices(_:to:)(v66, v37, v77);
          swift_setDeallocating();
          swift_arrayDestroy();
          swift_deallocClassInstance();
          (*(void (**)(char *, uint64_t))(v65 + 8))(v63, v58);
          v68 = v78;
          (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v37, v36);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v68 + 32))(v37, v67, v36);
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
      v60 = Logger.logObject.getter();
      v61 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v60, v61))
      {
        v62 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v62 = 0;
        _os_log_impl(&dword_1C2356000, v60, v61, "DataProviderManager media user state is nil", v62, 2u);
        MEMORY[0x1C3BBFF64](v62, -1, -1);
      }

    }
  }
}

uint64_t partial apply for closure #2 in DataProviderManager.addAmpState(to:searchRequest:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #2 in DataProviderManager.addAmpState(to:searchRequest:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), a1);
}

uint64_t closure #2 in DataProviderManager.addAmpState(to:searchRequest:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  char *v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v29 = a4;
  v30 = a3;
  v6 = type metadata accessor for DispatchTimeInterval();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = type metadata accessor for DispatchTime();
  v27 = *(_QWORD *)(v10 - 8);
  v28 = v10;
  v11 = MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v27 - v14;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = a1[3];
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v18);
  v20 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v18, 0, 1, v20);
  v21 = a1[15];
  v22 = a1[2];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  *v9 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v7 + 104))(v9, *MEMORY[0x1E0DEF490], v6);
  MEMORY[0x1C3BBEB6C](v13, v9);
  (*(void (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  v23 = *(void (**)(char *, uint64_t))(v27 + 8);
  v24 = v13;
  v25 = v28;
  v23(v24, v28);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v19 + 240))(v18, v30, v21, v22, v15);
  swift_unknownObjectRelease();
  v23(v15, v25);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t createAMPUserState(mediaUserState:muxUserInfo:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t matched;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void *v50;
  void *v51;
  uint64_t v52;
  uint8_t **v53;
  uint8_t *v54;
  uint8_t *v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t (*v59)(uint64_t, uint64_t);
  uint8_t *v60;
  uint64_t v61;
  uint8_t *v62;
  char v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  void (*v85)(char *, uint64_t, uint64_t, uint64_t);
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint8_t *v90;
  uint8_t *v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  _QWORD v95[3];
  uint64_t v96;
  uint64_t v97;

  v87 = a2;
  v89 = a1;
  matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  MEMORY[0x1E0C80A78](matched);
  v84 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus();
  MEMORY[0x1E0C80A78](v6);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1C2356000, v15, v16, "Building server AMP user state from the media user state", v17, 2u);
    MEMORY[0x1C3BBFF64](v17, -1, -1);
  }

  v85 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
  v85(v13, 1, 1, v7);
  v18 = v89[3];
  v19 = v89[4];
  __swift_project_boxed_opaque_existential_1(v89, v18);
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v19 + 8))(&v93, v18, v19);
  if (!v94)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v93, (uint64_t *)&demangling cache variable for type metadata for MusicUserState?);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1C2356000, v40, v41, "The active music user state is nil", v42, 2u);
      MEMORY[0x1C3BBFF64](v42, -1, -1);
    }

    return outlined init with take of PommesSearchReason?((uint64_t)v13, a3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  }
  outlined init with take of AppDataProviding(&v93, (uint64_t)v95);
  Apple_Parsec_Siri_V2alpha_AmpUserState.init()();
  v20 = v96;
  v21 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v21 + 40))(v20, v21);
  Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.setter();
  v22 = v96;
  v23 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  v24 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v23 + 24))(v22, v23);

  v86 = v10;
  if (v24
    || (v44 = v96,
        v45 = v97,
        __swift_project_boxed_opaque_existential_1(v95, v96),
        (*(void (**)(uint64_t, uint64_t))(v45 + 16))(v44, v45),
        !v46))
  {
    v25 = v96;
    v26 = v97;
    __swift_project_boxed_opaque_existential_1(v95, v96);
    v27 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v26 + 24))(v25, v26);
    if (v27)
    {
      v28 = v27;
      v29 = v8;
      v30 = v27;
      v31 = v28;
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        v35 = swift_slowAlloc();
        v83 = v7;
        v36 = v35;
        *(_QWORD *)&v93 = v35;
        *(_DWORD *)v34 = 136315138;
        v91 = v34 + 4;
        swift_getErrorValue();
        v37 = Error.localizedDescription.getter();
        v92 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, (uint64_t *)&v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v32, v33, "Last error from music token refresh: %s", v34, 0xCu);
        swift_arrayDestroy();
        v39 = v36;
        v7 = v83;
        MEMORY[0x1C3BBFF64](v39, -1, -1);
        MEMORY[0x1C3BBFF64](v34, -1, -1);
      }
      else
      {

      }
      v47 = v96;
      v48 = v97;
      __swift_project_boxed_opaque_existential_1(v95, v96);
      v49 = (*(uint64_t (**)(uint64_t, uint64_t))(v48 + 24))(v47, v48);
      v8 = v29;
      if (!v49)
      {

        goto LABEL_21;
      }
      v50 = (void *)v49;
      v51 = (void *)_convertErrorToNSError(_:)();

      result = (uint64_t)objc_msgSend(v51, sel_code);
      if (result < (uint64_t)0xFFFFFFFF80000000)
      {
        __break(1u);
      }
      else if (result <= 0x7FFFFFFF)
      {
        Apple_Parsec_Siri_V2alpha_AmpUserState.tokenErrorCode.setter();

        goto LABEL_21;
      }
      __break(1u);
      return result;
    }
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.setter();
  }
LABEL_21:
  v52 = *(_QWORD *)(v87 + 16);
  if (!v52)
    goto LABEL_35;
  v80 = v8;
  v83 = v7;
  v81 = v13;
  v82 = a3;
  v53 = (uint8_t **)(swift_bridgeObjectRetain() + 40);
  while (1)
  {
    v54 = *v53;
    v88 = (uint64_t)*(v53 - 1);
    v55 = v53[2];
    v90 = v53[1];
    v56 = v53[5];
    v57 = v89[3];
    v58 = v89[4];
    __swift_project_boxed_opaque_existential_1(v89, v57);
    v59 = *(uint64_t (**)(uint64_t, uint64_t))(v58 + 40);
    v91 = v54;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v60 = v56;
    v61 = v59(v57, v58);
    if (!v62)
      goto LABEL_23;
    if ((uint8_t *)v61 == v90 && v62 == v55)
      break;
    v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v64 & 1) != 0)
      goto LABEL_33;
LABEL_23:

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v53 += 7;
    if (!--v52)
    {
      swift_bridgeObjectRelease();
      goto LABEL_34;
    }
  }
  swift_bridgeObjectRelease();
LABEL_33:
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.setter();
LABEL_34:
  a3 = v82;
  v13 = v81;
  v7 = v83;
  v8 = v80;
LABEL_35:
  v65 = v96;
  v66 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v66 + 64))(v65, v66);
  v67 = v86;
  Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.setter();
  v68 = v96;
  v69 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v69);
  Apple_Parsec_Siri_V2alpha_AmpUserState.isUserHistoryModifiable.setter();
  v70 = v96;
  v71 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v71 + 72))(v70, v71);
  if (v72)
    Apple_Parsec_Siri_V2alpha_AmpUserState.xpAbCookie.setter();
  v73 = v96;
  v74 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v74 + 80))(v73, v74);
  if (v75)
    Apple_Parsec_Siri_V2alpha_AmpUserState.itfeCookie.setter();
  Apple_Parsec_Siri_V2alpha_AmpUserState.isDefaultUser.setter();
  v76 = v96;
  v77 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v77 + 48))(v76, v77);
  Apple_Parsec_Siri_V2alpha_AmpUserState.eligibleOffers.setter();
  v78 = v96;
  v79 = v97;
  __swift_project_boxed_opaque_existential_1(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v79 + 56))(v78, v79);
  Apple_Parsec_Siri_V2alpha_AmpUserState.isSubscribedToGlide.setter();
  outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  (*(void (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3, v67, v7);
  v85((char *)a3, 0, 1, v7);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v95);
}

double protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState@<D0>(uint64_t a1@<X8>)
{
  return protocol witness for MediaUserState.musicUserState.getter in conformance ICMediaUserState((SEL *)&selRef_music, &lazy cache variable for type metadata for ICMusicUserState, (uint64_t)&protocol witness table for ICMusicUserState, a1);
}

uint64_t protocol witness for MusicUserState.ampSubscriptionStatus.getter in conformance ICMusicUserState@<X0>(uint64_t a1@<X8>)
{
  return ICMusicUserState.ampSubscriptionStatus.getter(a1);
}

uint64_t ICMusicUserState.ampSubscriptionStatus.getter@<X0>(uint64_t a1@<X8>)
{
  void *v1;
  void *v2;
  id v4;
  __int16 v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;

  v2 = v1;
  v4 = objc_msgSend(v1, sel_subscriptionStatus);
  if ((v4 || (v4 = objc_msgSend(v2, sel_lightweightSubscriptionStatus)) != 0)
    && (v5 = ~(unsigned __int16)objc_msgSend(v4, sel_capabilities), v4, (v5 & 0x101) == 0))
  {
    v6 = (unsigned int *)MEMORY[0x1E0D6FA28];
  }
  else
  {
    v6 = (unsigned int *)MEMORY[0x1E0D6FA30];
  }
  v7 = *v6;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 104))(a1, v7, v8);
}

id protocol witness for MusicUserState.lastError.getter in conformance ICMusicUserState()
{
  id *v0;
  id v1;
  void *v2;
  id v3;

  v1 = objc_msgSend(*v0, sel_libraryAuthTokenStatus);
  if (!v1)
    return 0;
  v2 = v1;
  v3 = objc_msgSend(v1, sel_lastError);

  return v3;
}

id protocol witness for MusicUserState.userToken.getter in conformance ICMusicUserState()
{
  id *v0;
  id v1;
  void *v2;
  id v3;
  id v4;

  v1 = objc_msgSend(*v0, sel_libraryAuthTokenStatus);
  v2 = v1;
  if (!v1)
    return 0;
  v3 = objc_msgSend(v1, sel_token);

  if (v3)
  {
    v4 = objc_msgSend(v3, sel_token);

    v3 = (id)static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v3;
}

uint64_t protocol witness for MusicUserState.itunesSubscriptionStatus.getter in conformance ICMusicUserState@<X0>(uint64_t a1@<X8>)
{
  id *v1;
  id v3;
  void *v4;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t matched;

  v3 = objc_msgSend(*v1, sel_subscriptionStatus);
  if (v3 && (v4 = v3, v5 = objc_msgSend(v3, sel_isMatchEnabled), v4, v5))
    v6 = (unsigned int *)MEMORY[0x1E0D704B8];
  else
    v6 = (unsigned int *)MEMORY[0x1E0D704C0];
  v7 = *v6;
  matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(matched - 8) + 104))(a1, v7, matched);
}

id protocol witness for MusicUserState.isUserHistoryModifiable.getter in conformance ICMusicUserState()
{
  id *v0;

  return objc_msgSend(*v0, sel_usesListeningHistory);
}

uint64_t protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(uint64_t a1, uint64_t a2)
{
  return protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(a1, a2, (SEL *)&selRef_xpab);
}

uint64_t protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(uint64_t a1, uint64_t a2, SEL *a3)
{
  id *v3;
  id v5;
  void *v6;
  id v7;
  uint64_t v8;

  v5 = objc_msgSend(*v3, sel_cookies);
  v6 = v5;
  if (!v5)
    return 0;
  v7 = objc_msgSend(v5, *a3);

  v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  return v8;
}

uint64_t protocol witness for MusicUserState.itfeCookie.getter in conformance ICMusicUserState(uint64_t a1, uint64_t a2)
{
  return protocol witness for MusicUserState.xpabCookie.getter in conformance ICMusicUserState(a1, a2, (SEL *)&selRef_itfe);
}

_QWORD *protocol witness for MusicUserState.eligibleOffers.getter in conformance ICMusicUserState()
{
  return ICMusicUserState.eligibleOffers.getter();
}

_QWORD *ICMusicUserState.eligibleOffers.getter()
{
  void *v0;
  id v1;
  void *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;

  v1 = objc_msgSend(v0, sel_subscriptionStatus);
  if (!v1
    || (v2 = v1, v3 = objc_msgSend(v1, sel_eligibleOffers), v2, !v3))
  {
    v4 = objc_msgSend(v0, sel_lightweightSubscriptionStatus);
    if (!v4)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
    v5 = v4;
    v3 = objc_msgSend(v4, sel_eligibleOffers);

    if (!v3)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  type metadata accessor for ICSubscriptionStatusOfferType(0);
  v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v7 = *(_QWORD *)(v6 + 16);
  if (v7)
  {
    swift_bridgeObjectRetain();
    v8 = 0;
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v12 = v11;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
      v14 = v9[2];
      v13 = v9[3];
      if (v14 >= v13 >> 1)
        v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v13 > 1), v14 + 1, 1, v9);
      ++v8;
      v9[2] = v14 + 1;
      v15 = &v9[2 * v14];
      v15[4] = v10;
      v15[5] = v12;
    }
    while (v7 != v8);
    swift_bridgeObjectRelease();
  }
  else
  {
    v9 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  swift_bridgeObjectRelease();
  return v9;
}

id protocol witness for MusicUserState.isSubscribedToGlide.getter in conformance ICMusicUserState()
{
  id *v0;
  id v1;
  id v2;
  id result;
  id v4;

  v1 = *v0;
  v2 = objc_msgSend(*v0, sel_subscriptionStatus);
  if (v2
    || (result = objc_msgSend(v1, sel_lightweightSubscriptionStatus),
        (v2 = result) != 0))
  {
    v4 = objc_msgSend(v2, sel_statusType);

    return (id)(v4 == (id)3);
  }
  return result;
}

uint64_t createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _BYTE v20[16];

  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a1 && *(_QWORD *)(a1 + 16))
  {
    MEMORY[0x1E0C80A78](v10);
    *(_QWORD *)&v20[-16] = a2;
    v20[-8] = a3 & 1;
    _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5Tm((void (*)(uint64_t))partial apply for closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:), (uint64_t)&v20[-32], a1, (uint64_t)v20, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F240], (void (*)(BOOL, unint64_t, uint64_t))specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:), (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E828]);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
    (*(void (**)(_BYTE *, _QWORD, uint64_t))(v9 + 104))(v12, *MEMORY[0x1E0D6F178], v8);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
    v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(a4, 0, 1, v13);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    v16 = Logger.logObject.getter();
    v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_1C2356000, v16, v17, "createAmpUserStateSlice failed to create the AMP user state", v18, 2u);
      MEMORY[0x1C3BBFF64](v18, -1, -1);
    }

    v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(a4, 1, 1, v19);
  }
}

uint64_t partial apply for closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(a1, *(_QWORD *)(v1 + 16), *(unsigned __int8 *)(v1 + 24));
}

uint64_t closure #1 in createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t *boxed_opaque_existential_1;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34[7];

  v32 = a3;
  v31 = a2;
  v33 = a1;
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x1E0C80A78](v3);
  v28 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Google_Protobuf_Any();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v27 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v27 - v16;
  v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  v34[3] = v18;
  v34[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState();
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(boxed_opaque_existential_1, v33, v18);
  defaultAnyTypeURLPrefix.getter();
  v20 = (void *)v34[6];
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v20)
  {

    v21 = 1;
  }
  else
  {
    v21 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v17, v21, 1, v5);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0D6FCC8], v8);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  outlined init with copy of Google_Protobuf_Any?((uint64_t)v17, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v15, 1, v5) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v27, v15, v5);
  }
  v23 = v30;
  v22 = v31;
  v25 = v28;
  v24 = v29;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v25, v22, v23);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for Google_Protobuf_Any?);
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6E7E8], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState);
  }
  return result;
}

uint64_t outlined init with copy of Google_Protobuf_Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSlice.summarizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  Swift::String v8;
  Swift::String v9;
  uint64_t v10;
  int64_t v11;
  unint64_t v12;
  void (*v13)(char *, unint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void *v23;
  Swift::String v24;
  Swift::String v25;
  _QWORD v27[2];
  void (*v28)(char *, unint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = 0;
  v33 = 0xE000000000000000;
  _StringGuts.grow(_:)(36);
  v8._countAndFlagsBits = 0x616C202020200A7BLL;
  v8._object = (void *)0xED0000203A6C6562;
  String.append(_:)(v8);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v9._countAndFlagsBits = 0x6C6176202020200ALL;
  v9._object = (void *)0xEE000A5B20736575;
  String.append(_:)(v9);
  v10 = Apple_Parsec_Siri_V2alpha_ProfileSlice.values.getter();
  v11 = *(_QWORD *)(v10 + 16);
  if (v11)
  {
    v31 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v11, 0);
    v12 = v10 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v29 = *(_QWORD *)(v1 + 72);
    v30 = v1;
    v13 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    v27[1] = v10;
    v28 = v13;
    do
    {
      v28(v3, v12, v0);
      v14 = Apple_Parsec_Siri_V2alpha_ProfileSliceValue.summarizedDescription.getter();
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
      v17 = v31;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v17 + 16) + 1, 1);
        v17 = v31;
      }
      v19 = *(_QWORD *)(v17 + 16);
      v18 = *(_QWORD *)(v17 + 24);
      if (v19 >= v18 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v18 > 1, v19 + 1, 1);
        v17 = v31;
      }
      *(_QWORD *)(v17 + 16) = v19 + 1;
      v20 = v17 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v14;
      *(_QWORD *)(v20 + 40) = v16;
      v1 = v30;
      v12 += v29;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
  }
  v31 = v17;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  lazy protocol witness table accessor for type [String] and conformance [A]();
  v21 = BidirectionalCollection<>.joined(separator:)();
  v23 = v22;
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = v21;
  v24._object = v23;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 0x7D0A5D090ALL;
  v25._object = (void *)0xE500000000000000;
  String.append(_:)(v25);
  return v32;
}

uint64_t Apple_Parsec_Siri_V2alpha_ProfileSliceValue.summarizedDescription.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  Swift::String v10;
  Swift::String v11;
  Swift::String v12;
  uint64_t v13;
  void *v14;
  void *v15;
  Swift::String v16;
  Swift::String v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v0 = type metadata accessor for Google_Protobuf_Any();
  v21 = *(_QWORD *)(v0 - 8);
  v22 = v0;
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v20 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = 0;
  v24 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v10._countAndFlagsBits = 0xD00000000000001DLL;
  v10._object = (void *)0x80000001C25060E0;
  String.append(_:)(v10);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  v11._countAndFlagsBits = 0xD000000000000014;
  v11._object = (void *)0x80000001C2506100;
  String.append(_:)(v11);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.getter();
  _print_unlocked<A, B>(_:_:)();
  (*(void (**)(char *, uint64_t))(v20 + 8))(v5, v3);
  v12._object = (void *)0x80000001C2506120;
  v12._countAndFlagsBits = 0xD000000000000013;
  String.append(_:)(v12);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.getter();
  v13 = Google_Protobuf_Any.typeURL.getter();
  v15 = v14;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v2, v22);
  v16._countAndFlagsBits = v13;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x202020202020200ALL;
  v17._object = (void *)0xEA00000000007D20;
  String.append(_:)(v17);
  return v23;
}

unint64_t lazy protocol witness table accessor for type [String] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [String] and conformance [A];
  if (!lazy protocol witness table cache variable for type [String] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [String]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF20], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [String] and conformance [A]);
  }
  return result;
}

void DataProviderManager.addQueueState(to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int *v2;
  int *v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  void *v24;
  void (*v25)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>));
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  int *v44;
  uint64_t *v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59[96];
  uint64_t v60[13];

  v3 = v2;
  v60[12] = *MEMORY[0x1E0C80C00];
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v48 = (uint64_t)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1E0C80A78](v9);
  v54 = (uint64_t)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v55 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v47 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for Date();
  v57 = *(_QWORD *)(v58 - 8);
  MEMORY[0x1E0C80A78](v58);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  v15 = MEMORY[0x1E0C80A78](v14);
  v52 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v46 - v17;
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v53 = (char *)&v46 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = v7;
  v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v51 = a2;
  v50 = v6;
  v22(a2, a1, v6);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  OS_dispatch_queue.sync<A>(execute:)();
  v23 = outlined init with take of PommesSearchReason?((uint64_t)v59, (uint64_t)v60, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  if (one-time initialization token for shared != -1)
    v23 = swift_once();
  v24 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v23);
  v44 = v3;
  v45 = v60;
  Date.init()();
  v25 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t@<X8>)))(*(_QWORD *)v24 + 200);
  v44 = &v43;
  v45 = (uint64_t *)v14;
  LOBYTE(v43) = 2;
  v25(0xD000000000000046, 0x80000001C2506050, 0, v13, "SiriInformationSearch/DataProviderManager.swift", 47, 2, 587, "addQueueState(to:)", 18, v43, partial apply for closure #1 in DataProviderManager.addQueueState(to:));
  (*(void (**)(char *, uint64_t))(v57 + 8))(v13, v58);
  outlined release of AssistantDataSnapshot?(v60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1C2356000, v27, v28, "DataProviderManager queue state is nil", v29, 2u);
      MEMORY[0x1C3BBFF64](v29, -1, -1);
    }

  }
  else
  {
    v30 = v20;
    v31 = v53;
    (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v53, v18, v19);
    v32 = (uint64_t)v52;
    (*(void (**)(char *, char *, uint64_t))(v20 + 16))(v52, v31, v19);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v32, 0, 1, v19);
    v33 = v54;
    createQueueStateProfileSlice(for:)(v32, v54);
    outlined destroy of MediaUserStateCenter?(v32, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    v34 = v55;
    v35 = v56;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v33, 1, v56) == 1)
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v19);
      outlined destroy of MediaUserStateCenter?(v33, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
    }
    else
    {
      v36 = v47;
      (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(v47, v33, v35);
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSlice>);
      v37 = (*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
      v38 = swift_allocObject();
      *(_OWORD *)(v38 + 16) = xmmword_1C24FA1B0;
      (*(void (**)(unint64_t, char *, uint64_t))(v34 + 16))(v38 + v37, v36, v35);
      v39 = v48;
      v40 = v51;
      DataProviderManager.appendProfileSlices(_:to:)(v38, v51, v48);
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v36, v35);
      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v19);
      v41 = v49;
      v42 = v50;
      (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v40, v50);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v40, v39, v42);
    }
  }
}

uint64_t partial apply for closure #1 in DataProviderManager.addQueueState(to:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DataProviderManager.addQueueState(to:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t closure #1 in DataProviderManager.addQueueState(to:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t);
  char *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v27 = a3;
  v28 = a2;
  v4 = type metadata accessor for DispatchTimeInterval();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (uint64_t *)((char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = type metadata accessor for DispatchTime();
  v25 = *(_QWORD *)(v8 - 8);
  v26 = v8;
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v25 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a1[4];
  v18 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v16, 1, 1, v18);
  v19 = a1[15];
  v20 = a1[2];
  swift_unknownObjectRetain();
  static DispatchTime.now()();
  *v7 = 1;
  (*(void (**)(_QWORD *, _QWORD, uint64_t))(v5 + 104))(v7, *MEMORY[0x1E0DEF490], v4);
  MEMORY[0x1C3BBEB6C](v11, v7);
  (*(void (**)(_QWORD *, uint64_t))(v5 + 8))(v7, v4);
  v21 = *(void (**)(char *, uint64_t))(v25 + 8);
  v22 = v11;
  v23 = v26;
  v21(v22, v26);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v17 + 240))(v16, v28, v19, v20, v13);
  swift_unknownObjectRelease();
  v21(v13, v23);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesSearchRequest?);
}

uint64_t AudioQueueStateDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x120))() & 1;
}

uint64_t AudioQueueStateManager.wait(timeout:)()
{
  return MEMORY[0x1C3BBF0F4]() & 1;
}

uint64_t AudioQueueStateDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x140))();
}

id AudioQueueStateManager.currentQueueState()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  void *v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  id v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int *v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  unsigned int *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v58 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem?);
  MEMORY[0x1E0C80A78](v2);
  v54 = (uint64_t)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x1E0C80A78](v4);
  v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v46 = (char *)&v45 - v7;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioEntitySource();
  v52 = *(_QWORD *)(v8 - 8);
  v53 = v8;
  MEMORY[0x1E0C80A78](v8);
  v51 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioState();
  v49 = *(_QWORD *)(v10 - 8);
  v50 = v10;
  MEMORY[0x1E0C80A78](v10);
  v48 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  v12 = *(_QWORD *)(v57 - 8);
  MEMORY[0x1E0C80A78](v57);
  v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
  objc_msgSend(*(id *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock), sel_lock);
  v16 = *(void **)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache);
  v17 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache);
  v18 = *(_BYTE *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache + 8);
  v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache);
  v19 = *(_QWORD *)(v1
                  + OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache
                  + 8);
  type metadata accessor for NowPlayingInfo();
  swift_allocObject();
  v21 = v16;
  swift_bridgeObjectRetain();
  v22 = NowPlayingInfo.init(_:_:_:)((uint64_t)v16, v17, v18, v20, v19);
  if (v22)
  {
    v23 = v22;
    v45 = v12;
    v25 = v57;
    v24 = v58;
    Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.init()();
    v26 = v23[3] - 1;
    if (v26 > 3)
      v27 = (unsigned int *)MEMORY[0x1E0D6E288];
    else
      v27 = (unsigned int *)qword_1E7C03628[v26];
    v29 = v1;
    v30 = v15;
    (*(void (**)(char *, _QWORD, uint64_t))(v49 + 104))(v48, *v27, v50);
    v31 = Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.setter();
    v32 = (*(uint64_t (**)(uint64_t))(*v23 + 184))(v31);
    v33 = (unsigned int *)MEMORY[0x1E0D6F118];
    if ((v32 & 1) == 0)
      v33 = (unsigned int *)MEMORY[0x1E0D6F110];
    (*(void (**)(char *, _QWORD, uint64_t))(v52 + 104))(v51, *v33, v53);
    v34 = Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.source.setter();
    v35 = v23[5];
    v36 = HIBYTE(v35) & 0xF;
    if ((v35 & 0x2000000000000000) == 0)
      v36 = v23[4] & 0xFFFFFFFFFFFFLL;
    if (v36)
    {
      swift_bridgeObjectRetain();
      v34 = Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.setter();
    }
    v37 = (*(uint64_t (**)(uint64_t))(*v23 + 192))(v34);
    v38 = v56;
    if ((v37 & 0x100000000) == 0)
      v37 = Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.nowPlayingQueueIndex.setter();
    v39 = v24;
    if (((*(uint64_t (**)(uint64_t))(*v23 + 200))(v37) & 0x100000000) == 0)
      Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.nowPlayingQueueCount.setter();
    v40 = v54;
    AudioQueueStateManager.audioQueueStateItem(from:)(v23, v54);
    v41 = v55;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v55 + 48))(v40, 1, v38) == 1)
    {
      v42 = outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem?);
    }
    else
    {
      v43 = v46;
      (*(void (**)(char *, uint64_t, uint64_t))(v41 + 32))(v46, v40, v38);
      (*(void (**)(char *, char *, uint64_t))(v41 + 16))(v47, v43, v38);
      Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.audioQueueStateItem.setter();
      v42 = (*(uint64_t (**)(char *, uint64_t))(v41 + 8))(v43, v38);
    }
    v44 = v45;
    (*(void (**)(uint64_t))(*v23 + 208))(v42);
    Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo.currentListeningToContainer.setter();
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v44 + 32))(v39, v14, v25);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v44 + 56))(v39, 0, 1, v25);
    return objc_msgSend(*(id *)(v29 + v30), sel_unlock);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v58, 1, 1, v57);
    return objc_msgSend(*(id *)(v1 + v15), sel_unlock);
  }
}

uint64_t type metadata accessor for NowPlayingInfo()
{
  return objc_opt_self();
}

_QWORD *NowPlayingInfo.mediaType.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E0D4CAA0]);
}

_QWORD *NowPlayingInfo.queueIndex.getter(_QWORD *result)
{
  uint64_t v1;
  unsigned int v2;
  unsigned __int8 v3;
  uint64_t v4;
  id v5;
  _OWORD v6[2];
  _BYTE v7[24];
  uint64_t v8;

  if (*result)
  {
    if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v6, 0, sizeof(v6));
    }
    outlined init with take of PommesSearchReason?((uint64_t)v6, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v8)
    {
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      if ((swift_dynamicCast() & 1) != 0)
      {
        v2 = objc_msgSend(v5, sel_intValue);

        v3 = 0;
        v4 = v2;
LABEL_10:
        v7[0] = v3;
        return (_QWORD *)(v4 | ((unint64_t)v3 << 32));
      }
    }
    else
    {
      outlined destroy of Any?((uint64_t)v7);
    }
    v4 = 0;
    v3 = 1;
    goto LABEL_10;
  }
  __break(1u);
  return result;
}

_QWORD *NowPlayingInfo.queueIndex.getter()
{
  return NowPlayingInfo.queueIndex.getter(MEMORY[0x1E0D4CAD0]);
}

_QWORD *NowPlayingInfo.totalQueueCount.getter()
{
  return NowPlayingInfo.queueIndex.getter(MEMORY[0x1E0D4CB58]);
}

uint64_t AudioQueueStateManager.audioQueueStateItem(from:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  Swift::String v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType?);
  MEMORY[0x1E0C80A78](v4);
  v49 = (char *)&v44 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType();
  v50 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v52 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URLComponents();
  v48 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateItem();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.init()();
  v16 = (*(uint64_t (**)(uint64_t))(*a1 + 136))(v15);
  v18 = v17 != 0;
  if (v17)
    v16 = Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.setter();
  v19 = (*(uint64_t (**)(uint64_t))(*a1 + 144))(v16);
  if (v20)
  {
    v19 = Apple_Parsec_Siri_V2alpha_AudioQueueStateItem.artist.setter();
    v18 = 1;
  }
  v21 = (*(uint64_t (**)(uint64_t))(*a1 + 152))(v19);
  if (v22)
  {
    v21 = Apple_Parsec_Siri_V2alpha_AmpUserState.xpAbCookie.setter();
    v18 = 1;
  }
  v23 = (*(uint64_t (**)(uint64_t))(*a1 + 184))(v21);
  v24 = *a1;
  v51 = v6;
  if ((v23 & 1) == 0)
  {
    v25 = (*(uint64_t (**)(void))(v24 + 224))();
    if (!v31)
      goto LABEL_13;
    goto LABEL_12;
  }
  v25 = (*(uint64_t (**)(void))(v24 + 176))();
  if (v26)
  {
    v27 = v26;
    v44 = v25;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v46 = v11;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v45 = v8;
    v47 = a2;
    URLComponents.init()();
    swift_bridgeObjectRetain();
    URLComponents.scheme.setter();
    swift_bridgeObjectRetain();
    URLComponents.host.setter();
    v53 = 47;
    v54 = 0xE100000000000000;
    v28._countAndFlagsBits = v44;
    v28._object = v27;
    String.append(_:)(v28);
    URLComponents.path.setter();
    URLComponents.string.getter();
    v30 = v29;
    (*(void (**)(char *, uint64_t))(v48 + 8))(v10, v45);
    v11 = v46;
    swift_bridgeObjectRelease();
    a2 = v47;
    swift_bridgeObjectRelease();
    v25 = swift_bridgeObjectRelease();
    if (v30)
    {
LABEL_12:
      v25 = Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.setter();
      v18 = 1;
    }
  }
LABEL_13:
  v32 = (*(uint64_t (**)(uint64_t))(*a1 + 160))(v25);
  if (v33)
  {
    v34 = v32;
    v35 = v33;
    if (one-time initialization token for mediaTypeMap != -1)
      swift_once();
    swift_beginAccess();
    v36 = static AudioQueueStateManager.mediaTypeMap;
    v38 = v50;
    v37 = v51;
    if (*((_QWORD *)static AudioQueueStateManager.mediaTypeMap + 2))
    {
      swift_bridgeObjectRetain();
      v39 = specialized __RawDictionaryStorage.find<A>(_:)(v34, v35);
      v41 = (uint64_t)v49;
      if ((v40 & 1) != 0)
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v38 + 16))(v49, v36[7] + *(_QWORD *)(v38 + 72) * v39, v37);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v38 + 56))(v41, 0, 1, v37);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v38 + 56))(v49, 1, 1, v37);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      v41 = (uint64_t)v49;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v49, 1, 1, v51);
    }
    swift_endAccess();
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v41, 1, v37) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v38 + 104))(v52, *MEMORY[0x1E0D6FDE0], v37);
      outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType?);
    }
    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 32))(v52, v41, v37);
    }
    Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.setter();
    goto LABEL_28;
  }
  if (v18)
  {
LABEL_28:
    (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(a2, v14, v11);
    v42 = 0;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v42, 1, v11);
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  v42 = 1;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(a2, v42, 1, v11);
}

_QWORD *NowPlayingInfo.title.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E0D4CB40]);
}

_QWORD *NowPlayingInfo.title.getter(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;
  _OWORD v3[2];
  _BYTE v4[24];
  uint64_t v5;

  if (*result)
  {
    if (objc_msgSend(*(id *)(v1 + 16), sel_objectForKey_))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v3, 0, sizeof(v3));
    }
    outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
    if (v5)
    {
      if (swift_dynamicCast())
        return (_QWORD *)v2;
      else
        return 0;
    }
    else
    {
      outlined destroy of Any?((uint64_t)v4);
      return 0;
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

_QWORD *NowPlayingInfo.artist.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E0D4C980]);
}

_QWORD *NowPlayingInfo.album.getter()
{
  return NowPlayingInfo.title.getter(MEMORY[0x1E0D4C968]);
}

uint64_t NowPlayingInfo.isRadio.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
  if (!v2)
  {
    v8 = 0;
    return v8 & 1;
  }
  v3 = v1;
  result = *MEMORY[0x1E0D4C8F8];
  if (*MEMORY[0x1E0D4C8F8])
  {
    v5 = v2;
    if (v3 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v5 == v6)
      v8 = 1;
    else
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v8 & 1;
  }
  __break(1u);
  return result;
}

uint64_t NowPlayingInfo.mediaItemIdURL.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  Swift::String v14;
  _QWORD v16[2];

  v1 = type metadata accessor for URLComponents();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = NowPlayingInfo.currentItemAdamIdentifier.getter();
  if ((v6 & 1) != 0)
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 168))(v5);
    if (v12)
    {
      v8 = v11;
      v10 = v12;
    }
    else
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 176))(v11);
      if (!v13)
        return v8;
      v10 = v13;
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
  }
  else
  {
    v7 = v5;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    v16[0] = v7;
    v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v10 = v9;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  URLComponents.init()();
  swift_bridgeObjectRetain();
  URLComponents.scheme.setter();
  swift_bridgeObjectRetain();
  URLComponents.host.setter();
  v16[0] = 47;
  v16[1] = 0xE100000000000000;
  v14._countAndFlagsBits = v8;
  v14._object = v10;
  String.append(_:)(v14);
  URLComponents.path.setter();
  v8 = URLComponents.string.getter();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t NowPlayingInfo.currentItemAdamIdentifier.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t inited;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  SEL *v9;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  void *v14;
  id v15;
  void *v16;
  id v17;
  void *v18;
  unsigned __int8 v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  SEL *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _OWORD v31[2];
  __int128 v32;
  uint64_t v33;

  v1 = v0;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<String>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FB7E0;
  result = *MEMORY[0x1E0D4CB88];
  if (!*MEMORY[0x1E0D4CB88])
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  *(_QWORD *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(_QWORD *)(inited + 40) = v4;
  result = *MEMORY[0x1E0D4CB90];
  if (!*MEMORY[0x1E0D4CB90])
  {
LABEL_21:
    __break(1u);
    return result;
  }
  v5 = inited + 32;
  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = 0;
  v7 = 0;
  *(_QWORD *)(inited + 48) = result;
  *(_QWORD *)(inited + 56) = v8;
  v9 = (SEL *)&unk_1E7C11000;
  v29 = inited;
  while (1)
  {
    v10 = v6;
    if (v7 >= *(_QWORD *)(inited + 16))
    {
      __break(1u);
      goto LABEL_20;
    }
    v11 = (uint64_t *)(v5 + 16 * v7);
    v12 = *v11;
    v13 = v11[1];
    v14 = *(void **)(v1 + 16);
    swift_bridgeObjectRetain();
    v15 = v14;
    v16 = (void *)MEMORY[0x1C3BBEC44](v12, v13);
    v17 = objc_msgSend(v15, v9[306], v16);

    if (v17)
      break;
    result = swift_bridgeObjectRelease();
LABEL_5:
    v6 = 1;
    v7 = 1;
    if ((v10 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  outlined init with take of Any(v31, &v32);
  __swift_project_boxed_opaque_existential_1(&v32, v33);
  v18 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
  v19 = objc_msgSend(v18, sel_respondsToSelector_, Selector.init(_:)());
  swift_unknownObjectRelease();
  if ((v19 & 1) == 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain();
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = swift_slowAlloc();
      v24 = v5;
      v25 = v1;
      v26 = v9;
      v27 = swift_slowAlloc();
      *(_QWORD *)&v31[0] = v27;
      *(_DWORD *)v23 = 136315138;
      swift_bridgeObjectRetain();
      *(_QWORD *)(v23 + 4) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, (uint64_t *)v31);
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v21, v22, "Found %s value that is illegal (not a 64 bit integer)", (uint8_t *)v23, 0xCu);
      swift_arrayDestroy();
      v28 = v27;
      v9 = v26;
      v1 = v25;
      v5 = v24;
      inited = v29;
      MEMORY[0x1C3BBFF64](v28, -1, -1);
      MEMORY[0x1C3BBFF64](v23, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
    goto LABEL_5;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined init with take of Any(&v32, v31);
  if (swift_dynamicCast())
    return v30;
  else
    return 0;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

void NowPlayingInfo.collectionInfo.getter()
{
  uint64_t v0;
  id v1;
  id v2[4];
  _OWORD v3[4];
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  unint64_t v7;

  if (!*MEMORY[0x1E0D4C9E0])
  {
    __break(1u);
    return;
  }
  if (objc_msgSend(*(id *)(v0 + 16), sel_objectForKey_))
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v3, 0, 32);
  }
  outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)&v4, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)&v4);
    goto LABEL_12;
  }
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_12:
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    return;
  }
  v1 = v2[0];
  if ((uint64_t)objc_msgSend(v2[0], sel_count) < 1)
  {
    specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);

  }
  else
  {
    v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    NSDictionary.makeIterator()();
    NSDictionary.Iterator.next()();
    outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)&v4, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    while (v5)
    {
      outlined init with take of Any(&v4, v3);
      outlined init with take of Any(&v6, v2);
      static NowPlayingInfo.addKVToListeningToContainer(key:value:container:)((uint64_t)v3, (uint64_t)v2, (uint64_t *)&v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v3);
      NSDictionary.Iterator.next()();
      outlined init with take of PommesSearchReason?((uint64_t)v3, (uint64_t)&v4, &demangling cache variable for type metadata for (key: Any, value: Any)?);
    }
    swift_release();

  }
}

uint64_t NowPlayingInfo.__deallocating_deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t createQueueStateProfileSlice(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t *boxed_opaque_existential_1;
  void (*v30)(uint64_t *, char *, uint64_t);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(char *, uint64_t, uint64_t);
  unsigned int v38;
  uint64_t v39;
  char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64[6];

  v60 = a2;
  v61 = (char *)a1;
  v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v46 = *(_QWORD *)(v47 - 8);
  MEMORY[0x1E0C80A78](v47);
  v45 = (char *)&v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v58 = *(_QWORD *)(v49 - 8);
  MEMORY[0x1E0C80A78](v49);
  v57 = (char *)&v43 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Google_Protobuf_Any();
  v62 = *(_QWORD *)(v56 - 8);
  MEMORY[0x1E0C80A78](v56);
  v48 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v54 = *(_QWORD *)(v5 - 8);
  v55 = v5;
  MEMORY[0x1E0C80A78](v5);
  v53 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v59 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v63 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  v9 = MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v43 - v12;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  v22 = MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v43 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v26 = (char *)&v43 - v25;
  v27 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v52 = *(_QWORD *)(v27 - 8);
  v51 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v52 + 56);
  v51(v26, 1, 1, v27);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v61, (uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
    return outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?((uint64_t)v26, v60);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v20, v16, v17);
    v64[3] = v17;
    v64[4] = lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v64);
    v30 = *(void (**)(uint64_t *, char *, uint64_t))(v18 + 16);
    v44 = v20;
    v30(boxed_opaque_existential_1, v20, v17);
    defaultAnyTypeURLPrefix.getter();
    v61 = v13;
    Google_Protobuf_Any.init(message:partial:typePrefix:)();
    v31 = v56;
    v32 = (uint64_t)v61;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v62 + 56))(v61, 0, 1, v56);
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
    (*(void (**)(char *, _QWORD, uint64_t))(v54 + 104))(v53, *MEMORY[0x1E0D6FCB0], v55);
    Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    v33 = v62;
    outlined init with copy of MediaUserStateCenter?(v32, (uint64_t)v11, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v11, 1, v31) == 1)
    {
      Google_Protobuf_Any.init()();
      outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v48, v11, v31);
    }
    v34 = v60;
    v35 = v49;
    v36 = v50;
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
    (*(void (**)(char *, _QWORD, uint64_t))(v58 + 104))(v57, *MEMORY[0x1E0D70598], v35);
    Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
    Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
    v51(v24, 0, 1, v27);
    outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?((uint64_t)v24, (uint64_t)v26);
    v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48);
    if (!v37(v26, 1, v27))
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v46 + 104))(v45, *MEMORY[0x1E0D6F180], v47);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
    }
    v38 = v37(v26, 1, v27);
    v39 = v59;
    v40 = v44;
    if (!v38)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
      v41 = (*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
      v42 = swift_allocObject();
      *(_OWORD *)(v42 + 16) = xmmword_1C24FA1B0;
      (*(void (**)(unint64_t, char *, uint64_t))(v39 + 16))(v42 + v41, v63, v36);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
    }
    (*(void (**)(char *, uint64_t))(v39 + 8))(v63, v36);
    outlined destroy of MediaUserStateCenter?((uint64_t)v61, &demangling cache variable for type metadata for Google_Protobuf_Any?);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v40, v17);
    outlined init with copy of MediaUserStateCenter?((uint64_t)v26, v34, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
    return outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  }
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6F6E0], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo and conformance Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo);
  }
  return result;
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void PegasusProxy.addGroundingInfo(to:for:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  void (*v8)(uint64_t *, _QWORD);
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23[4];

  v4 = type metadata accessor for PommesSearchRequest(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = PegasusProxy.isGroundingNeeded(for:)(a2);
  v8 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.userGroundingNeeded.setter();
  v8(v23, 0);
  if ((v7 & 1) != 0)
  {
    v9 = (_QWORD *)(a2 + *(int *)(v4 + 84));
    v10 = v9[1];
    *(_QWORD *)(v2 + 64) = *v9;
    *(_QWORD *)(v2 + 72) = v10;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v11 = type metadata accessor for Logger();
  __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
  outlined init with copy of PommesSearchRequest(a2, (uint64_t)v6, type metadata accessor for PommesSearchRequest);
  v12 = Logger.logObject.getter();
  v13 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v12, v13))
  {
    v14 = swift_slowAlloc();
    v15 = swift_slowAlloc();
    v23[0] = v15;
    *(_DWORD *)v14 = 136315394;
    v16 = (uint64_t *)&v6[*(int *)(v4 + 32)];
    if (v16[1])
    {
      v17 = *v16;
      v18 = v16[1];
    }
    else
    {
      v18 = 0xE700000000000000;
      v17 = 0x6E776F6E6B6E55;
    }
    swift_bridgeObjectRetain();
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v17, v18, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesSearchRequest);
    *(_WORD *)(v14 + 12) = 2080;
    if ((v7 & 1) != 0)
      v19 = 1702195828;
    else
      v19 = 0x65736C6166;
    if ((v7 & 1) != 0)
      v20 = 0xE400000000000000;
    else
      v20 = 0xE500000000000000;
    v22 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v20, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v12, v13, "POMMES add grounding need for request: %s, Grounded: %s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v15, -1, -1);
    MEMORY[0x1C3BBFF64](v14, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest((uint64_t)v6, type metadata accessor for PommesSearchRequest);
  }

}

uint64_t PegasusProxy.isGroundingNeeded(for:)(uint64_t a1)
{
  uint64_t v1;
  int *v3;
  _QWORD *v4;
  uint64_t v5;
  int *v6;
  uint64_t v7;
  char v9;
  uint64_t v10;
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  os_log_type_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;

  v3 = (int *)type metadata accessor for PommesSearchRequest(0);
  v4 = (_QWORD *)(a1 + v3[21]);
  v5 = v4[1];
  if (v5)
  {
    v6 = v3;
    v7 = *(_QWORD *)(v1 + 72);
    if (v7)
    {
      if (*(_QWORD *)(v1 + 64) == *v4 && v7 == v5)
      {
        if ((*(_BYTE *)(a1 + v3[16]) & 1) == 0)
        {
          if ((*(_BYTE *)(a1 + v3[15]) & 1) != 0)
            goto LABEL_24;
          goto LABEL_28;
        }
      }
      else
      {
        v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
        if ((*(_BYTE *)(a1 + v6[16]) & 1) == 0)
        {
          if ((*(_BYTE *)(a1 + v6[15]) & 1) != 0)
          {
            if ((v9 & 1) != 0)
            {
LABEL_24:
              if (one-time initialization token for pommes != -1)
                swift_once();
              v18 = type metadata accessor for Logger();
              __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
              v12 = Logger.logObject.getter();
              v16 = static os_log_type_t.info.getter();
              if (os_log_type_enabled(v12, v16))
              {
                v14 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v14 = 0;
                v17 = "Grounding: false, Same user grounded recently";
                goto LABEL_32;
              }
              goto LABEL_34;
            }
LABEL_14:
            if (one-time initialization token for pommes != -1)
              swift_once();
            v11 = type metadata accessor for Logger();
            __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
            v12 = Logger.logObject.getter();
            v13 = static os_log_type_t.info.getter();
            if (!os_log_type_enabled(v12, v13))
            {
              v10 = 1;
              goto LABEL_35;
            }
            v14 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v14 = 0;
            _os_log_impl(&dword_1C2356000, v12, v13, "Grounding: true, Not grounded recently", v14, 2u);
            v10 = 1;
            goto LABEL_33;
          }
LABEL_28:
          if (one-time initialization token for pommes != -1)
            swift_once();
          v19 = type metadata accessor for Logger();
          __swift_project_value_buffer(v19, (uint64_t)static Logger.pommes);
          v12 = Logger.logObject.getter();
          v16 = static os_log_type_t.info.getter();
          if (os_log_type_enabled(v12, v16))
          {
            v14 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v14 = 0;
            v17 = "Grounding: false, not a multiUser env";
            goto LABEL_32;
          }
          goto LABEL_34;
        }
      }
    }
    else if ((*(_BYTE *)(a1 + v3[16]) & 1) == 0)
    {
      if ((*(_BYTE *)(a1 + v3[15]) & 1) != 0)
        goto LABEL_14;
      goto LABEL_28;
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v15 = type metadata accessor for Logger();
    __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
    v12 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v12, v16))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v14 = 0;
      v17 = "Grounding: false, singleton user";
LABEL_32:
      _os_log_impl(&dword_1C2356000, v12, v16, v17, v14, 2u);
      v10 = 0;
LABEL_33:
      MEMORY[0x1C3BBFF64](v14, -1, -1);
LABEL_35:

      return v10;
    }
LABEL_34:
    v10 = 0;
    goto LABEL_35;
  }
  return 0;
}

uint64_t PegasusProxy.addPlaySRREntities(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void (*v31)(char *, uint64_t, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  int EnumCaseMultiPayload;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  NSObject *v55;
  os_log_type_t v56;
  _BOOL4 v57;
  uint64_t v58;
  uint8_t *v59;
  char *v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t *v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t *, uint64_t);
  char *v69;
  uint64_t v70;
  char *v71;
  NSObject *v72;
  os_log_type_t v73;
  _BOOL4 v74;
  uint64_t v75;
  char *v76;
  uint8_t *v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  NSObject *v86;
  os_log_type_t v87;
  uint8_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  int64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t (*v99)(char *, unint64_t, uint64_t);
  char *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  uint64_t v107;
  NSObject *v108;
  os_log_type_t v109;
  uint8_t *v110;
  const char *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  NSObject *v116;
  os_log_type_t v117;
  uint8_t *v118;
  uint8_t *v119;
  void (*v120)(char *, uint64_t);
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  char *v131;
  uint64_t v132;
  uint64_t *v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  char *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145[3];
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;

  v4 = v3;
  v141 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v138 = *(_QWORD *)(v141 - 8);
  MEMORY[0x1E0C80A78](v141);
  v140 = (char *)&v123 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for RRCandidate();
  v10 = *(_QWORD *)(v9 - 8);
  v142 = v9;
  v143 = v10;
  v11 = MEMORY[0x1E0C80A78](v9);
  v139 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x1E0C80A78](v11);
  v126 = (char *)&v123 - v14;
  MEMORY[0x1E0C80A78](v13);
  v127 = (char *)&v123 - v15;
  v16 = type metadata accessor for RRQuery();
  v135 = *(_QWORD *)(v16 - 8);
  v136 = v16;
  MEMORY[0x1E0C80A78](v16);
  v133 = (uint64_t *)((char *)&v123 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  v132 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<RRResult, Error>);
  MEMORY[0x1E0C80A78](v132);
  v134 = (char *)&v123 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for RRResult();
  v130 = *(_QWORD *)(v19 - 8);
  v20 = MEMORY[0x1E0C80A78](v19);
  v128 = (char *)&v123 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v131 = (char *)&v123 - v22;
  v23 = type metadata accessor for Siri_Nlu_External_UserParse();
  v24 = *(_QWORD *)(v23 - 8);
  MEMORY[0x1E0C80A78](v23);
  v26 = (char *)&v123 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = *(_QWORD *)(a2 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 76));
  v28 = *(_QWORD *)(v27 + 16);
  if (!v28)
  {
LABEL_7:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v34 = type metadata accessor for Logger();
    __swift_project_value_buffer(v34, (uint64_t)static Logger.pommes);
    v35 = Logger.logObject.getter();
    v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v37 = 0;
      _os_log_impl(&dword_1C2356000, v35, v36, "User parses do not have a SmartPlay USO task", v37, 2u);
      MEMORY[0x1C3BBFF64](v37, -1, -1);
    }

    v38 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v38 - 8) + 16))(a3, a1, v38);
  }
  v124 = v19;
  v129 = a3;
  v125 = a1;
  v29 = v27 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v30 = *(_QWORD *)(v24 + 72);
  v31 = *(void (**)(char *, uint64_t, uint64_t))(v24 + 16);
  swift_bridgeObjectRetain();
  while (1)
  {
    v31(v26, v29, v23);
    v32 = Siri_Nlu_External_UserParse.firstSmartPlayTask()();
    v144 = v4;
    if (v4)
    {
      (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
      return swift_bridgeObjectRelease();
    }
    v33 = v32;
    swift_release();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    if (v33)
      break;
    v29 += v30;
    --v28;
    v4 = v144;
    if (!v28)
    {
      swift_bridgeObjectRelease();
      a1 = v125;
      a3 = v129;
      goto LABEL_7;
    }
  }
  swift_bridgeObjectRelease();
  type metadata accessor for UsoEntityBuilder_common_MediaItem();
  swift_allocObject();
  v40 = UsoEntityBuilder_common_MediaItem.init()();
  v41 = MEMORY[0x1C3BBCEB0]();
  if (!v41)
  {
    v53 = v129;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v54 = type metadata accessor for Logger();
    __swift_project_value_buffer(v54, (uint64_t)static Logger.pommes);
    v55 = Logger.logObject.getter();
    v56 = static os_log_type_t.error.getter();
    v57 = os_log_type_enabled(v55, v56);
    v58 = v125;
    if (v57)
    {
      v59 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v59 = 0;
      _os_log_impl(&dword_1C2356000, v55, v56, "Unable to generate empty media item USO entity for reference resolution", v59, 2u);
      MEMORY[0x1C3BBFF64](v59, -1, -1);
      swift_release();

    }
    else
    {

      swift_release();
    }
    v82 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v82 - 8) + 16))(v53, v58, v82);
  }
  v42 = v41;
  outlined init with copy of AppDataProviding(v137 + 24, (uint64_t)v145);
  v43 = v146;
  v44 = v147;
  __swift_project_boxed_opaque_existential_1(v145, v146);
  v45 = v133;
  *v133 = v42;
  v47 = v135;
  v46 = v136;
  (*(void (**)(uint64_t *, _QWORD, uint64_t))(v135 + 104))(v45, *MEMORY[0x1E0DA3DE0], v136);
  swift_retain();
  v48 = (uint64_t *)v134;
  MEMORY[0x1C3BBE818](v45, v43, v44);
  v49 = v46;
  v50 = v48;
  (*(void (**)(uint64_t *, uint64_t))(v47 + 8))(v45, v49);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v52 = v129;
  if (EnumCaseMultiPayload == 1)
  {
    v148 = *v50;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    swift_willThrowTypedImpl();
    swift_release();
    swift_release();
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
  }
  v61 = v130;
  v60 = v131;
  v62 = v50;
  v63 = v124;
  (*(void (**)(char *, uint64_t *, uint64_t))(v130 + 32))(v131, v62, v124);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v145);
  v64 = (uint64_t *)v128;
  (*(void (**)(char *, char *, uint64_t))(v61 + 16))(v128, v60, v63);
  v65 = (*(uint64_t (**)(uint64_t *, uint64_t))(v61 + 88))(v64, v63);
  if (v65 == *MEMORY[0x1E0DA3E88])
  {
    v135 = v42;
    (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v64, v63);
    v66 = v142;
    v67 = v143;
    v68 = *(void (**)(char *, uint64_t *, uint64_t))(v143 + 32);
    v69 = v127;
    v68(v127, v64, v142);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v70 = type metadata accessor for Logger();
    __swift_project_value_buffer(v70, (uint64_t)static Logger.pommes);
    v71 = v126;
    (*(void (**)(char *, char *, uint64_t))(v67 + 16))(v126, v69, v66);
    v72 = Logger.logObject.getter();
    v73 = static os_log_type_t.debug.getter();
    v74 = os_log_type_enabled(v72, v73);
    v123 = v40;
    if (v74)
    {
      v75 = swift_slowAlloc();
      v136 = (uint64_t)v68;
      v76 = v71;
      v77 = (uint8_t *)v75;
      v78 = swift_slowAlloc();
      v145[0] = v78;
      *(_DWORD *)v77 = 136315138;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type RRCandidate and conformance RRCandidate, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA3D70], MEMORY[0x1E0DA3D80]);
      v79 = dispatch thunk of CustomStringConvertible.description.getter();
      v148 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v145);
      v67 = v143;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v81 = v76;
      v68 = (void (*)(char *, uint64_t *, uint64_t))v136;
      (*(void (**)(char *, uint64_t))(v67 + 8))(v81, v66);
      _os_log_impl(&dword_1C2356000, v72, v73, "Found single SRR match candidate for SmartPlay: %s", v77, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v78, -1, -1);
      MEMORY[0x1C3BBFF64](v77, -1, -1);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v67 + 8))(v71, v66);
    }

    v94 = v66;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<RRCandidate>);
    v95 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_1C24FA1B0;
    v68((char *)(v84 + v95), (uint64_t *)v127, v94);
    v63 = v124;
    v96 = *(_QWORD *)(v84 + 16);
    if (v96)
      goto LABEL_34;
    goto LABEL_50;
  }
  v83 = v125;
  if (v65 != *MEMORY[0x1E0DA3E98])
  {
    if (v65 == *MEMORY[0x1E0DA3E90])
    {
      (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v64, v63);
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1)
        swift_once();
      v107 = type metadata accessor for Logger();
      __swift_project_value_buffer(v107, (uint64_t)static Logger.pommes);
      v108 = Logger.logObject.getter();
      v109 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v108, v109))
        goto LABEL_63;
      v110 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v110 = 0;
      v111 = "No support for plural match in reference resolution for SmartPlay";
    }
    else if (v65 == *MEMORY[0x1E0DA3EA0])
    {
      (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v64, v63);
      swift_bridgeObjectRelease();
      if (one-time initialization token for pommes != -1)
        swift_once();
      v112 = type metadata accessor for Logger();
      __swift_project_value_buffer(v112, (uint64_t)static Logger.pommes);
      v108 = Logger.logObject.getter();
      v109 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v108, v109))
        goto LABEL_63;
      v110 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v110 = 0;
      v111 = "No support for plural disambiguation in reference resolution for SmartPlay";
    }
    else
    {
      if (v65 != *MEMORY[0x1E0DA3EA8])
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v115 = type metadata accessor for Logger();
        __swift_project_value_buffer(v115, (uint64_t)static Logger.pommes);
        v116 = Logger.logObject.getter();
        v117 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v116, v117))
        {
          v118 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v118 = 0;
          _os_log_impl(&dword_1C2356000, v116, v117, "Unknown (future?) reference resolution result case for SmartPlay", v118, 2u);
          v119 = v118;
          v64 = (uint64_t *)v128;
          MEMORY[0x1C3BBFF64](v119, -1, -1);
        }
        swift_release();
        swift_release();

        v120 = *(void (**)(char *, uint64_t))(v61 + 8);
        v121 = v124;
        v120(v131, v124);
        v122 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 16))(v52, v83, v122);
        return ((uint64_t (*)(uint64_t *, uint64_t))v120)(v64, v121);
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v113 = type metadata accessor for Logger();
      __swift_project_value_buffer(v113, (uint64_t)static Logger.pommes);
      v108 = Logger.logObject.getter();
      v109 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v108, v109))
      {
LABEL_63:
        swift_release();
        swift_release();

        (*(void (**)(char *, uint64_t))(v61 + 8))(v131, v63);
        v114 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v114 - 8) + 16))(v52, v83, v114);
      }
      v110 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v110 = 0;
      v111 = "No matching entities for SmartPlay task";
    }
    _os_log_impl(&dword_1C2356000, v108, v109, v111, v110, 2u);
    MEMORY[0x1C3BBFF64](v110, -1, -1);
    goto LABEL_63;
  }
  (*(void (**)(uint64_t *, uint64_t))(v61 + 96))(v64, v63);
  v84 = *v64;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v135 = v42;
  v123 = v40;
  v85 = type metadata accessor for Logger();
  __swift_project_value_buffer(v85, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v86 = Logger.logObject.getter();
  v87 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v86, v87))
  {
    v88 = (uint8_t *)swift_slowAlloc();
    v89 = swift_slowAlloc();
    v145[0] = v89;
    *(_DWORD *)v88 = 136315138;
    v63 = v124;
    v136 = (uint64_t)(v88 + 4);
    v90 = swift_bridgeObjectRetain();
    v91 = MEMORY[0x1C3BBEE9C](v90, v142);
    v93 = v92;
    swift_bridgeObjectRelease();
    v148 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v91, v93, v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v86, v87, "Found multiple SRR match candidates for SmartPlay: %s", v88, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v89, -1, -1);
    MEMORY[0x1C3BBFF64](v88, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v67 = v143;
  v96 = *(_QWORD *)(v84 + 16);
  if (v96)
  {
LABEL_34:
    v145[0] = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v96, 0);
    v97 = (*(unsigned __int8 *)(v67 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
    v134 = (char *)v84;
    v98 = v84 + v97;
    v136 = *(_QWORD *)(v67 + 72);
    v99 = *(uint64_t (**)(char *, unint64_t, uint64_t))(v67 + 16);
    v100 = v139;
    while (1)
    {
      v101 = v142;
      v102 = v99(v100, v98, v142);
      MEMORY[0x1E0C80A78](v102);
      *(&v123 - 2) = (uint64_t)v100;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientEntity and conformance Apple_Parsec_Siri_Context_ClientEntity, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E758], MEMORY[0x1E0D6E708]);
      v103 = v144;
      static Message.with(_:)();
      v144 = v103;
      if (v103)
        break;
      (*(void (**)(char *, uint64_t))(v143 + 8))(v100, v101);
      v104 = v145[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v104 + 16) + 1, 1);
        v104 = v145[0];
      }
      v106 = *(_QWORD *)(v104 + 16);
      v105 = *(_QWORD *)(v104 + 24);
      if (v106 >= v105 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v105 > 1, v106 + 1, 1);
        v104 = v145[0];
      }
      *(_QWORD *)(v104 + 16) = v106 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v138 + 32))(v104+ ((*(unsigned __int8 *)(v138 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80))+ *(_QWORD *)(v138 + 72) * v106, v140, v141);
      v145[0] = v104;
      v98 += v136;
      if (!--v96)
      {
        swift_bridgeObjectRelease();
        v63 = v124;
        goto LABEL_51;
      }
    }
    (*(void (**)(char *, uint64_t))(v143 + 8))(v100, v101);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v131, v124);
  }
LABEL_50:
  swift_bridgeObjectRelease();
  v104 = MEMORY[0x1E0DEE9D8];
LABEL_51:
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 88))(v104, v125);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v130 + 8))(v131, v63);
}

uint64_t partial apply for closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)()
{
  uint64_t *v0;

  return closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(v0[2], v0[3], v0[4]);
}

uint64_t closure #15 in PegasusProxy.constructSearchRequest(pommesSearchRequest:queryContext:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  PegasusProxy.addGroundingInfo(to:for:)(a2, a3);
  return swift_endAccess();
}

uint64_t PegasusProxy.appendMusicRankingInfluence(to:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint8_t *v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t);
  void (*v23)(uint64_t *, _QWORD);
  void (*v24)(_BYTE *, _QWORD);
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  _BYTE v29[32];
  uint64_t v30[4];

  v3 = type metadata accessor for Apple_Parsec_Siri_Context_MusicRankingInfluence();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v5);
  v10 = (char *)v26 - v9;
  MEMORY[0x1E0C80A78](v8);
  v12 = (char *)v26 - v11;
  v13 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider + 24);
  v14 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider + 32);
  __swift_project_boxed_opaque_existential_1((_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch12PegasusProxy_pimsEnablementProvider), v13);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v14);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v15 = type metadata accessor for Logger();
  __swift_project_value_buffer(v15, (uint64_t)static Logger.pommes);
  v16 = *(void (**)(char *, char *, uint64_t))(v4 + 16);
  v16(v10, v12, v3);
  v17 = Logger.logObject.getter();
  v18 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v17, v18))
  {
    v19 = (uint8_t *)swift_slowAlloc();
    v28 = a1;
    v20 = v19;
    v27 = v7;
    *(_DWORD *)v19 = 134217984;
    v26[1] = v19 + 4;
    v21 = MEMORY[0x1C3BBC1CC]();
    v22 = *(void (**)(char *, uint64_t))(v4 + 8);
    v22(v10, v3);
    v30[0] = v21;
    v7 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v17, v18, "Adding MusicRankingInfluence to request: %ld", v20, 0xCu);
    MEMORY[0x1C3BBFF64](v20, -1, -1);
  }
  else
  {
    v22 = *(void (**)(char *, uint64_t))(v4 + 8);
    v22(v10, v3);
  }

  v16(v7, v12, v3);
  v23 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.modify();
  v24 = (void (*)(_BYTE *, _QWORD))Apple_Parsec_Siri_Context_ClientConversationContextInfo.onDeviceContext.modify();
  Apple_Parsec_Siri_Context_OnDeviceContext.musicRankingInfluence.setter();
  v24(v29, 0);
  v23(v30, 0);
  return ((uint64_t (*)(char *, uint64_t))v22)(v12, v3);
}

uint64_t PIMSEnablementProvider.getMusicRankingInfluenceStatus()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  int v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  void (*v18)(char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v2 = type metadata accessor for MediaSuggestionManager.EnablementStatus();
  v3 = *(_QWORD *)(v2 - 8);
  v4 = MEMORY[0x1E0C80A78](v2);
  v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v21 - v7;
  type metadata accessor for MediaSuggestionManager();
  swift_allocObject();
  MediaSuggestionManager.init()();
  dispatch thunk of MediaSuggestionManager.fetchStatus()();
  swift_release();
  (*(void (**)(char *, char *, uint64_t))(v3 + 16))(v6, v8, v2);
  v9 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v6, v2);
  if (v9 == *MEMORY[0x1E0DA3B98])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    v10 = (unsigned int *)MEMORY[0x1E0D6FA10];
LABEL_7:
    v11 = *v10;
    v12 = type metadata accessor for Apple_Parsec_Siri_Context_MusicRankingInfluence();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 104))(a1, v11, v12);
  }
  if (v9 == *MEMORY[0x1E0DA3B88])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    v10 = (unsigned int *)MEMORY[0x1E0D6FA00];
    goto LABEL_7;
  }
  if (v9 == *MEMORY[0x1E0DA3B90])
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v8, v2);
    v10 = (unsigned int *)MEMORY[0x1E0D6FA08];
    goto LABEL_7;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1C2356000, v15, v16, "MediaSuggestionManager returned an unknown PIMS enablement status. Defaulting to disabled.", v17, 2u);
    MEMORY[0x1C3BBFF64](v17, -1, -1);
  }

  v18 = *(void (**)(char *, uint64_t))(v3 + 8);
  v18(v8, v2);
  v19 = *MEMORY[0x1E0D6FA10];
  v20 = type metadata accessor for Apple_Parsec_Siri_Context_MusicRankingInfluence();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 104))(a1, v19, v20);
  return ((uint64_t (*)(char *, uint64_t))v18)(v6, v2);
}

void PegasusProxy.addCurareFlags(to:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  unsigned int v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  void (*v14)(uint64_t *, _QWORD);
  uint64_t v15;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  v5 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v6 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000011, 0x80000001C2504680);
  v7 = objc_msgSend(v5, sel_initWithSuiteName_, v6);

  if (v7)
  {
    v8 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000020, 0x80000001C25091E0);
    v9 = objc_msgSend(v7, sel_BOOLForKey_, v8);

    if (v9)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v10 = type metadata accessor for Logger();
      __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
      v11 = Logger.logObject.getter();
      v12 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v11, v12))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v13 = 0;
        _os_log_impl(&dword_1C2356000, v11, v12, "POMMES override enabled for treatRandomAsFirst! Setting value to true", v13, 2u);
        MEMORY[0x1C3BBFF64](v13, -1, -1);
      }

      v14 = (void (*)(uint64_t *, _QWORD))Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.modify();
      Apple_Parsec_Siri_V2alpha_SiriPegasusContext.treatRandomAsFirst.setter();
      v14(&v15, 0);
    }
  }
}

uint64_t outlined consume of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

void *PegasusInstrumentationUtil.createPegasusRequestStartedEvent(payloadSizeInKB:)(long double a1)
{
  NSObject *v2;
  NSObject *v3;
  id v4;
  void *v5;
  uint64_t v6;
  os_log_type_t v7;
  uint8_t *v8;

  v2 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2A0]), sel_init);
  if (v2)
  {
    v3 = v2;
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A278]), sel_init);
    if (v4)
    {
      v5 = v4;
      specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(a1);
      -[NSObject setPayloadSizeInKB:](v3, sel_setPayloadSizeInKB_);
      objc_msgSend(v5, sel_setStartedOrChanged_, v3);
      goto LABEL_10;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1C2356000, v3, v7, "Failed to create the Start event and/or context", v8, 2u);
    MEMORY[0x1C3BBFF64](v8, -1, -1);
  }
  v5 = 0;
LABEL_10:

  return v5;
}

void specialized PegasusInstrumentationUtil.roundToTwoSigFigs(_:)(long double a1)
{
  double v1;

  if (a1 != 0.0)
  {
    v1 = ceil(log10(a1));
    if ((~*(_QWORD *)&v1 & 0x7FF0000000000000) != 0)
    {
      if (v1 > -9.22337204e18)
      {
        if (v1 < 9.22337204e18)
        {
          if (!__OFSUB__(2, (uint64_t)v1))
          {
            __exp10((double)(2 - (uint64_t)v1));
            return;
          }
LABEL_11:
          __break(1u);
          return;
        }
LABEL_10:
        __break(1u);
        goto LABEL_11;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_10;
  }
}

void (*protocol witness for PegasusProxyClient.metadata.modify in conformance PegasusProxyForAssistant(_QWORD *a1))(_QWORD *a1)
{
  _QWORD *v2;

  v2 = malloc(0x28uLL);
  *a1 = v2;
  v2[4] = dispatch thunk of BasePegasusProxy.metadata.modify();
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

void protocol witness for Collection.subscript.read in conformance [A]specialized (_QWORD *a1)
{
  void *v1;

  v1 = (void *)*a1;
  (*(void (**)(_QWORD))(*a1 + 32))(*a1);
  free(v1);
}

uint64_t specialized Dictionary._Variant.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  v3 = v2;
  swift_bridgeObjectRetain();
  v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0)
  {
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v9 = *v3;
    v17 = *v3;
    *v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      v9 = v17;
    }
    v10 = *(_QWORD *)(v9 + 48);
    v11 = type metadata accessor for PommesCandidateId();
    (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8))(v10 + *(_QWORD *)(*(_QWORD *)(v11 - 8) + 72) * v6, v11);
    v12 = *(_QWORD *)(v9 + 56);
    v13 = type metadata accessor for PommesBridgeResultCandidateState(0);
    v14 = *(_QWORD *)(v13 - 8);
    outlined init with take of PerformanceUtil.Ticket(v12 + *(_QWORD *)(v14 + 72) * v6, a2, type metadata accessor for PommesBridgeResultCandidateState);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *v3 = v9;
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v14 + 56))(a2, 0, 1, v13);
  }
  else
  {
    v16 = type metadata accessor for PommesBridgeResultCandidateState(0);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(a2, 1, 1, v16);
  }
}

uint64_t partial apply for closure #5 in PegasusProxy.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  return closure #5 in PegasusProxy.search(pommesSearchRequest:completion:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t closure #5 in PegasusProxy.search(pommesSearchRequest:completion:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_beginAccess();
  swift_retain();
  specialized Set._Variant.insert(_:)(&v4, a2);
  swift_endAccess();
  return swift_release();
}

Swift::Int partial apply for closure #2 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1)
{
  uint64_t *v1;

  return closure #2 in PommesSearchRequestProcessor.search_sync(completion:)(a1, v1[2], v1[3], v1[4]);
}

Swift::Int closure #2 in PommesSearchRequestProcessor.search_sync(completion:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t Strong;
  void *v7;
  id v8;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    swift_beginAccess();
    v7 = *(void **)(a4 + 16);
    *(_QWORD *)(a4 + 16) = a1;
    v8 = a1;

  }
  return OS_dispatch_semaphore.signal()();
}

uint64_t specialized static PegasusInstrumentationUtil.requestArguments(from:onDeviceLabels:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  id v17;
  id v18;
  void *v19;
  uint64_t v20;
  Class isa;
  void *v22;
  uint64_t v23;
  void *v24;
  void *v25;
  NSObject *v26;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  _QWORD v33[2];

  v33[0] = type metadata accessor for Apple_Parsec_Siri_V2alpha_POMMESRequestContext();
  MEMORY[0x1E0C80A78](v33[0]);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1C2356000, v14, v15, "No ParsecAlias.SiriPegasusRequest to extract POMMESSchemaPOMMESPegasusRequestArguments from", v16, 2u);
      MEMORY[0x1C3BBFF64](v16, -1, -1);
    }

  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    v17 = objc_allocWithZone(MEMORY[0x1E0D9A270]);
    v18 = objc_msgSend(v17, sel_init, v33[0]);
    if (v18)
    {
      v19 = v18;
      v20 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queries.getter();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Sequence.compactMap<A>(_:)(v20, a2);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for POMMESSchemaPOMMESPegasusSearchQuery);
      isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v19, sel_setQueries_, isa);

      v22 = (void *)specialized static PegasusInstrumentationUtil.extractQueryMetadata(from:)((uint64_t)v12);
      objc_msgSend(v19, sel_setQueryMetadata_, v22);

      v23 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.featureFlag.getter();
      v24 = (void *)MEMORY[0x1C3BBEC44](v23);
      swift_bridgeObjectRelease();
      objc_msgSend(v19, sel_setFeatureFlag_, v24);

      v25 = (void *)specialized static PegasusInstrumentationUtil.extractSiriPegasusMetadata(from:)((uint64_t)v12);
      objc_msgSend(v19, sel_setSiriPegasusMetadata_, v25);

      objc_msgSend(v19, sel_setIsDataOnlyRequest_, Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.isDataOnlyRequest.getter() & 1);
      v26 = specialized static PegasusInstrumentationUtil.extractClientConversationMetadata(from:onDeviceLabels:)((uint64_t)v12, a3);
      objc_msgSend(v19, sel_setClientConversationMetadata_, v26);

      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.conversationContextBytes.getter();
      __asm { BR              X10 }
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    v29 = Logger.logObject.getter();
    v30 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v29, v30))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_1C2356000, v29, v30, "Unable to initialize POMMESSchemaPOMMESPegasusRequestArguments()", v31, 2u);
      MEMORY[0x1C3BBFF64](v31, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return 0;
}

void closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  id v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  id v22;
  id v23;
  void *v24;
  id v25;
  Class isa;
  id v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void (*v40)(char *, uint64_t);
  uint64_t v41;
  id v42;
  void *v43;
  _QWORD v44[2];
  id v45;
  _QWORD *v46;
  id v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, unint64_t, uint64_t);
  id v52;
  uint64_t v53;
  char *v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;

  v53 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v57 = *(_QWORD *)(v53 - 8);
  v7 = MEMORY[0x1E0C80A78](v53);
  v56 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v55 = (char *)v44 - v9;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v58 = *(_QWORD *)(v10 - 8);
  v59 = v10;
  MEMORY[0x1E0C80A78](v10);
  v54 = (char *)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2B8]), sel_init);
  v13 = v12;
  if (v12)
  {
    v49 = v3;
    v47 = v12;
    v14 = v12;
    v15 = *(_QWORD *)(Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.rewrittenUtterances.getter() + 16);
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setHasRewrittenUtterances_, v15 != 0);

    v61 = MEMORY[0x1E0DEE9D8];
    v16 = *(_QWORD *)(a2 + 16);
    if (v16)
    {
      swift_bridgeObjectRetain_n();
      v52 = v14;
      v17 = v14;
      v18 = (uint64_t *)(a2 + 40);
      do
      {
        v20 = *(v18 - 1);
        v19 = *v18;
        v21 = objc_allocWithZone(MEMORY[0x1E0D9A2C8]);
        swift_bridgeObjectRetain();
        v22 = objc_msgSend(v21, (SEL)&selRef_sharedStream);
        if (v22)
        {
          v23 = v22;
          v24 = (void *)MEMORY[0x1C3BBEC44](v20, v19);
          objc_msgSend(v23, sel_setLabel_, v24);
          swift_bridgeObjectRelease();

          MEMORY[0x1C3BBEE78]();
          if (*(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v61 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        v18 += 2;
        --v16;
      }
      while (v16);
      swift_bridgeObjectRelease();
      v14 = v52;
    }
    else
    {
      v25 = v14;
      swift_bridgeObjectRetain();
    }
    swift_bridgeObjectRelease();
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for POMMESSchemaPOMMESPegasusSearchQueryUserSpan);
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v14, sel_setUserSpans_, isa);

    v27 = v14;
    v48 = a1;
    v28 = Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.getter();
    v29 = *(_QWORD *)(v28 + 16);
    if (v29)
    {
      v45 = v27;
      v46 = a3;
      v30 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
      v44[1] = v28;
      v31 = v28 + v30;
      LODWORD(v52) = *MEMORY[0x1E0D6F180];
      v32 = *(void (**)(char *, unint64_t, uint64_t))(v58 + 16);
      v50 = *(_QWORD *)(v58 + 72);
      v51 = v32;
      v34 = v54;
      v33 = v55;
      v35 = v56;
      v36 = v53;
      while (1)
      {
        v51(v34, v31, v59);
        Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
        v37 = v57;
        (*(void (**)(char *, _QWORD, uint64_t))(v57 + 104))(v35, v52, v36);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F1D8], MEMORY[0x1E0D6F1F0]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        dispatch thunk of RawRepresentable.rawValue.getter();
        v38 = v61;
        v39 = v60;
        v40 = *(void (**)(char *, uint64_t))(v37 + 8);
        v40(v35, v36);
        v40(v33, v36);
        (*(void (**)(char *, uint64_t))(v58 + 8))(v34, v59);
        if (v38 == v39)
          break;
        v31 += v50;
        if (!--v29)
        {
          swift_bridgeObjectRelease();
          v41 = 0;
          goto LABEL_19;
        }
      }
      swift_bridgeObjectRelease();
      v41 = 1;
LABEL_19:
      a3 = v46;
      v13 = v47;
      v27 = v45;
    }
    else
    {
      swift_bridgeObjectRelease();
      v41 = 0;
      v13 = v47;
    }
    objc_msgSend(v27, sel_setHasAudioQueueStateInfo_, v41);

    v42 = v27;
    v43 = closure #3 in closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)();
    objc_msgSend(v42, sel_setAmpUserState_, v43);

  }
  *a3 = v13;
}

void *closure #3 in closure #1 in static PegasusInstrumentationUtil.extractQueries(from:onDeviceLabels:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  void (*v41)(char *, unint64_t, uint64_t);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void (*v55)(char *, unint64_t, uint64_t);
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  void (*v64)(char *, uint64_t);
  uint64_t v65;
  uint64_t v66;
  char *v67;
  int v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  NSObject *v73;
  os_log_type_t v74;
  uint8_t *v75;
  void *v76;
  uint64_t v78;
  char *v79;
  id v80;
  char *v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  _BOOL8 v85;
  void (*v86)(char *, uint64_t);
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  _BOOL8 v91;
  void (*v92)(char *, uint64_t);
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t matched;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  char *v114;
  uint64_t v115;
  uint64_t v116;
  char *v117;
  char *v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  char *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  void (*v130)(char *, unint64_t, uint64_t);
  void (*v131)(char *, unint64_t, uint64_t);
  uint64_t v132;
  uint64_t v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  matched = type metadata accessor for Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus();
  v107 = *(_QWORD *)(matched - 8);
  v0 = MEMORY[0x1E0C80A78](matched);
  v106 = (char *)&v101 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v0);
  v105 = (char *)&v101 - v2;
  v104 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus();
  v103 = *(_QWORD *)(v104 - 8);
  v3 = MEMORY[0x1E0C80A78](v104);
  v102 = (char *)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v101 = (char *)&v101 - v5;
  v6 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v6);
  v117 = (char *)&v101 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v116 = type metadata accessor for Google_Protobuf_Any();
  v115 = *(_QWORD *)(v116 - 8);
  MEMORY[0x1E0C80A78](v116);
  v114 = (char *)&v101 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AmpUserState?);
  MEMORY[0x1E0C80A78](v9);
  v119 = (char *)&v101 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v120 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  v110 = *(_QWORD *)(v120 - 8);
  MEMORY[0x1E0C80A78](v120);
  v109 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v126 = *(_QWORD *)(v12 - 8);
  v127 = v12;
  v13 = MEMORY[0x1E0C80A78](v12);
  v125 = (char *)&v101 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v124 = (char *)&v101 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v16);
  v118 = (char *)&v101 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v121 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v128 = *(_QWORD *)(v121 - 8);
  v18 = MEMORY[0x1E0C80A78](v121);
  v20 = (char *)&v101 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v122 = (char *)&v101 - v21;
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v132 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v101 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v101 - v26;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  MEMORY[0x1E0C80A78](v28);
  v30 = (char *)&v101 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  v31 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v32 = *(_QWORD *)(v31 - 8);
  v33 = MEMORY[0x1E0C80A78](v31);
  v35 = (char *)&v101 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v33);
  v123 = (char *)&v101 - v36;
  v37 = Apple_Parsec_Siri_V2alpha_PegasusSearchQuery.profileSlices.getter();
  v38 = *(_QWORD *)(v37 + 16);
  v133 = v32;
  if (v38)
  {
    v112 = v30;
    v113 = v20;
    v39 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    v111 = v37;
    v40 = v37 + v39;
    LODWORD(v131) = *MEMORY[0x1E0D6F178];
    v41 = *(void (**)(char *, unint64_t, uint64_t))(v32 + 16);
    v129 = *(_QWORD *)(v32 + 72);
    v130 = v41;
    while (1)
    {
      v130(v35, v40, v31);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
      v42 = v132;
      (*(void (**)(char *, _QWORD, uint64_t))(v132 + 104))(v25, v131, v22);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceLabel, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F1D8], MEMORY[0x1E0D6F1F0]);
      v43 = v31;
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v44 = v134;
      v45 = v137;
      v46 = *(void (**)(char *, uint64_t))(v42 + 8);
      v46(v25, v22);
      v46(v27, v22);
      if (v44 == v45)
        break;
      v32 = v133;
      (*(void (**)(char *, uint64_t))(v133 + 8))(v35, v43);
      v40 += v129;
      --v38;
      v31 = v43;
      if (!v38)
      {
        v47 = 1;
        v20 = v113;
        v30 = v112;
        goto LABEL_8;
      }
    }
    v32 = v133;
    v30 = v112;
    (*(void (**)(char *, char *, uint64_t))(v133 + 32))(v112, v35, v43);
    v47 = 0;
    v31 = v43;
    v20 = v113;
  }
  else
  {
    v47 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v30, v47, 1, v31);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1)
  {
    v48 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?;
    v49 = (uint64_t)v30;
LABEL_20:
    outlined destroy of MediaUserStateCenter?(v49, v48);
LABEL_21:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v72 = type metadata accessor for Logger();
    __swift_project_value_buffer(v72, (uint64_t)static Logger.pommes);
    v73 = Logger.logObject.getter();
    v74 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v73, v74))
    {
      v75 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v75 = 0;
      _os_log_impl(&dword_1C2356000, v73, v74, "Unable to extract ampUserState", v75, 2u);
      MEMORY[0x1C3BBFF64](v75, -1, -1);
    }

    return 0;
  }
  v50 = *(void (**)(char *, char *, uint64_t))(v32 + 32);
  v129 = v31;
  v50(v123, v30, v31);
  v51 = Apple_Parsec_Siri_V2alpha_ProfileSlice.values.getter();
  v52 = *(_QWORD *)(v51 + 16);
  if (v52)
  {
    v53 = (*(unsigned __int8 *)(v128 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
    v113 = (char *)v51;
    v54 = v51 + v53;
    LODWORD(v132) = *MEMORY[0x1E0D6FCC8];
    v55 = *(void (**)(char *, unint64_t, uint64_t))(v128 + 16);
    v130 = *(void (**)(char *, unint64_t, uint64_t))(v128 + 72);
    v131 = v55;
    v56 = v121;
    v57 = v124;
    v58 = v125;
    v59 = v127;
    while (1)
    {
      v131(v20, v54, v56);
      Apple_Parsec_Siri_V2alpha_ProfileSlice.label.getter();
      v60 = v20;
      v61 = v126;
      (*(void (**)(char *, _QWORD, uint64_t))(v126 + 104))(v58, v132, v59);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6FCE0], MEMORY[0x1E0D6FCE8]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      dispatch thunk of RawRepresentable.rawValue.getter();
      v62 = v134;
      v63 = v137;
      v64 = *(void (**)(char *, uint64_t))(v61 + 8);
      v64(v58, v59);
      v64(v57, v59);
      if (v62 == v63)
        break;
      (*(void (**)(char *, uint64_t))(v128 + 8))(v60, v56);
      v54 += (unint64_t)v130;
      --v52;
      v20 = v60;
      if (!v52)
      {
        v65 = 1;
        v66 = v128;
        v67 = v118;
        goto LABEL_17;
      }
    }
    v66 = v128;
    v67 = v118;
    (*(void (**)(char *, char *, uint64_t))(v128 + 32))(v118, v60, v56);
    v65 = 0;
  }
  else
  {
    v65 = 1;
    v56 = v121;
    v66 = v128;
    v67 = v118;
  }
LABEL_17:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v67, v65, 1, v56);
  swift_bridgeObjectRelease();
  v68 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48))(v67, 1, v56);
  v69 = v120;
  v70 = v119;
  if (v68 == 1)
  {
    (*(void (**)(char *, uint64_t))(v133 + 8))(v123, v129);
    v48 = &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?;
    v49 = (uint64_t)v67;
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v122, v67, v56);
  v71 = v114;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.getter();
  Google_Protobuf_Any.value.getter();
  (*(void (**)(char *, uint64_t))(v115 + 8))(v71, v116);
  v136 = 0;
  v134 = 0u;
  v135 = 0u;
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpUserState and conformance Apple_Parsec_Siri_V2alpha_AmpUserState, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E828], MEMORY[0x1E0D6E7E8]);
  Message.init(serializedData:extensions:partial:options:)();
  v78 = v110;
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v110 + 56))(v70, 0, 1, v69);
  v79 = v109;
  (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v109, v70, v69);
  v80 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2C0]), sel_init);
  if (!v80)
  {
    (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v69);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v122, v121);
    (*(void (**)(char *, uint64_t))(v133 + 8))(v123, v129);
    goto LABEL_21;
  }
  v76 = v80;
  v81 = v101;
  Apple_Parsec_Siri_V2alpha_AmpUserState.ampSubscriptionStatus.getter();
  v82 = v103;
  v83 = v102;
  v84 = v104;
  (*(void (**)(char *, _QWORD, uint64_t))(v103 + 104))(v102, *MEMORY[0x1E0D6FA28], v104);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus and conformance Apple_Parsec_Siri_V2alpha_AmpSubscriptionStatus, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6FA38], MEMORY[0x1E0D6FA40]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v85 = v134 == v137;
  v86 = *(void (**)(char *, uint64_t))(v82 + 8);
  v86(v83, v84);
  v86(v81, v84);
  objc_msgSend(v76, sel_setHasAmpSubscriptionStatus_, v85);
  v87 = v105;
  Apple_Parsec_Siri_V2alpha_AmpUserState.itunesSubscriptionStatus.getter();
  v88 = v107;
  v89 = v106;
  v90 = matched;
  (*(void (**)(char *, _QWORD, uint64_t))(v107 + 104))(v106, *MEMORY[0x1E0D704B8], matched);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus and conformance Apple_Parsec_Siri_V2alpha_ITunesMatchSubscriptionStatus, (uint64_t (*)(uint64_t))MEMORY[0x1E0D704C8], MEMORY[0x1E0D704D0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v91 = v134 == v137;
  v92 = *(void (**)(char *, uint64_t))(v88 + 8);
  v92(v89, v90);
  v92(v87, v90);
  objc_msgSend(v76, sel_setHasItunesSubscriptionStatus_, v91);
  v93 = Apple_Parsec_Siri_V2alpha_AmpUserState.userToken.getter();
  v95 = v94;
  swift_bridgeObjectRelease();
  v96 = HIBYTE(v95) & 0xF;
  if ((v95 & 0x2000000000000000) == 0)
    v96 = v93 & 0xFFFFFFFFFFFFLL;
  objc_msgSend(v76, sel_setHasUserToken_, v96 != 0);
  v97 = Apple_Parsec_Siri_V2alpha_AmpUserState.sharedUserID.getter();
  v99 = v98;
  swift_bridgeObjectRelease();
  v100 = HIBYTE(v99) & 0xF;
  if ((v99 & 0x2000000000000000) == 0)
    v100 = v97 & 0xFFFFFFFFFFFFLL;
  objc_msgSend(v76, sel_setHasSharedUserId_, v100 != 0);
  (*(void (**)(char *, uint64_t))(v78 + 8))(v79, v69);
  (*(void (**)(char *, uint64_t))(v128 + 8))(v122, v121);
  (*(void (**)(char *, uint64_t))(v133 + 8))(v123, v129);
  return v76;
}

uint64_t specialized static PegasusInstrumentationUtil.extractQueryMetadata(from:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t Context;
  id v25;
  void *v26;
  uint64_t v27;
  float v28;
  void (*v29)(char *, uint64_t);
  float v30;
  float v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char v42;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t result;
  _QWORD v49[2];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;

  v68 = a1;
  v1 = type metadata accessor for Apple_Parsec_Search_V2_PreciseStatus();
  v59 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v58 = (char *)v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Search_V2_Location.Source();
  v53 = *(_QWORD *)(v3 - 8);
  v54 = v3;
  MEMORY[0x1E0C80A78](v3);
  v64 = (char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.MeasurementSystem();
  v63 = *(_QWORD *)(v52 - 8);
  MEMORY[0x1E0C80A78](v52);
  v65 = (char *)v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext.TemperatureUnit();
  v67 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v66 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  v61 = *(_QWORD *)(v7 - 8);
  v62 = v7;
  MEMORY[0x1E0C80A78](v7);
  v60 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Google_Protobuf_Int32Value();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Search_V2_Location();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v55 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v15);
  v51 = (char *)v49 - v18;
  v19 = MEMORY[0x1E0C80A78](v17);
  v21 = (char *)v49 - v20;
  MEMORY[0x1E0C80A78](v19);
  v23 = (char *)v49 - v22;
  Context = type metadata accessor for Apple_Parsec_Search_PegasusQueryContext();
  v56 = *(_QWORD *)(Context - 8);
  v57 = Context;
  MEMORY[0x1E0C80A78](Context);
  v25 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A268]), sel_init);
  if (v25)
  {
    v26 = v25;
    v49[1] = v1;
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.queryContext.getter();
    v27 = Apple_Parsec_Search_PegasusQueryContext.location.getter();
    v28 = MEMORY[0x1C3BBB230](v27);
    v29 = *(void (**)(char *, uint64_t))(v14 + 8);
    v29(v23, v13);
    objc_msgSend(v26, sel_setHasLatitude_, v28 != 0.0);
    Apple_Parsec_Search_PegasusQueryContext.location.getter();
    Apple_Parsec_Search_V2_Location.longitude.getter();
    v31 = v30;
    v29(v23, v13);
    objc_msgSend(v26, sel_setHasLongitude_, v31 != 0.0);
    Apple_Parsec_Search_PegasusQueryContext.location.getter();
    Apple_Parsec_Search_V2_Location.age.getter();
    v29(v21, v13);
    v32 = Google_Protobuf_Int32Value.value.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    if ((v32 & 0x80000000) == 0)
    {
      objc_msgSend(v26, sel_setLocationAgeInSeconds_, v32);
      v33 = Apple_Parsec_Search_PegasusQueryContext.countryCode.getter();
      v35 = v34;
      swift_bridgeObjectRelease();
      v36 = HIBYTE(v35) & 0xF;
      if ((v35 & 0x2000000000000000) == 0)
        v36 = v33 & 0xFFFFFFFFFFFFLL;
      objc_msgSend(v26, sel_setHasCountryCode_, v36 != 0);
      v37 = Apple_Parsec_Search_PegasusQueryContext.siriLocale.getter();
      v39 = v38;
      swift_bridgeObjectRelease();
      v40 = HIBYTE(v39) & 0xF;
      if ((v39 & 0x2000000000000000) == 0)
        v40 = v37 & 0xFFFFFFFFFFFFLL;
      objc_msgSend(v26, sel_setHasSiriLocale_, v40 != 0);
      Apple_Parsec_Search_PegasusQueryContext.uiScale.getter();
      objc_msgSend(v26, sel_setUiScale_);
      v41 = v60;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
      v42 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.isNavigationMode.getter();
      (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v62);
      objc_msgSend(v26, sel_setIsNavigationMode_, v42 & 1);
      Apple_Parsec_Search_PegasusQueryContext.installedAppsSignature.getter();
      __asm { BR              X10 }
    }
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.pommes);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1C2356000, v45, v46, "Unable to initialize POMMESSchemaPOMMESPegasusQueryMetadata()", v47, 2u);
      MEMORY[0x1C3BBFF64](v47, -1, -1);
    }

    return 0;
  }
  return result;
}

uint64_t specialized static PegasusInstrumentationUtil.extractSiriPegasusMetadata(from:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  char *v33;
  id v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  void (*v41)(char *, uint64_t);
  _QWORD *v42;
  char *v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  char *v53;
  uint64_t v54;
  char *v55;
  void (*v56)(char *, uint64_t);
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t);
  uint64_t v69;
  void (*v70)(char *, uint64_t);
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void (*v81)(char *, uint64_t);
  uint64_t v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  void (*v93)(char *, uint64_t);
  uint64_t v94;
  void *v95;
  uint64_t result;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  char *v100;
  char *v101;
  char *v102;
  _QWORD *v103;
  uint64_t v104;
  void (*v105)(char *, uint64_t);
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RestrictionCategory();
  v114 = *(_QWORD *)(v2 - 8);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v97 - v6;
  v113 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Restriction();
  v115 = *(_QWORD *)(v113 - 8);
  v8 = MEMORY[0x1E0C80A78](v113);
  v112 = (char *)&v97 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = MEMORY[0x1E0C80A78](v8);
  v111 = (char *)&v97 - v11;
  MEMORY[0x1E0C80A78](v10);
  v110 = (char *)&v97 - v12;
  v109 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions();
  v103 = *(_QWORD **)(v109 - 8);
  v13 = MEMORY[0x1E0C80A78](v109);
  v108 = (uint64_t)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v100 = (char *)&v97 - v15;
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext.SiriInteractionType();
  v97 = *(_QWORD *)(v16 - 8);
  v98 = v16;
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v102 = (char *)&v97 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = MEMORY[0x1E0C80A78](v21);
  v101 = (char *)&v97 - v24;
  v25 = MEMORY[0x1E0C80A78](v23);
  v107 = (uint64_t)&v97 - v26;
  v27 = MEMORY[0x1E0C80A78](v25);
  v99 = (char *)&v97 - v28;
  v29 = MEMORY[0x1E0C80A78](v27);
  v31 = (char *)&v97 - v30;
  MEMORY[0x1E0C80A78](v29);
  v33 = (char *)&v97 - v32;
  v34 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A348]), sel_init);
  if (!v34)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.pommes);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_1C2356000, v45, v46, "Unable to initialize POMMESSchemaPOMMESSiriPegasusMetadata()", v47, 2u);
      MEMORY[0x1C3BBFF64](v47, -1, -1);
    }

    return 0;
  }
  v35 = v34;
  v106 = a1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.siriInteractionType.getter();
  v105 = *(void (**)(char *, uint64_t))(v20 + 8);
  v105(v33, v19);
  v37 = v97;
  v36 = v98;
  v38 = (*(uint64_t (**)(char *, uint64_t))(v97 + 88))(v18, v98);
  v39 = *MEMORY[0x1E0D6CE70];
  v104 = v19;
  if (v38 == v39)
  {
    v40 = 0;
    v41 = v105;
    v42 = v103;
    v43 = v100;
  }
  else
  {
    v48 = v18;
    v41 = v105;
    v42 = v103;
    v43 = v100;
    if (v38 == *MEMORY[0x1E0D6CE80])
    {
      v40 = 2;
    }
    else if (v38 == *MEMORY[0x1E0D6CE78])
    {
      v40 = 1;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v48, v36);
      v40 = 0;
    }
  }
  objc_msgSend(v35, sel_setInteractionType_, v40);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.getter();
  v49 = v104;
  v41(v31, v104);
  v50 = Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.movieRestriction.getter();
  v51 = (void (*)(char *, uint64_t))v42[1];
  v52 = v109;
  v51(v43, v109);
  if ((v50 & 0x80000000) == 0)
  {
    objc_msgSend(v35, sel_setMovieRestriction_, v50);
    v53 = v99;
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
    v54 = v108;
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.contentRatingRestrictions.getter();
    v55 = v53;
    v56 = v105;
    v105(v55, v49);
    v57 = Apple_Parsec_Siri_V2alpha_MediaContentRatingRestrictions.tvRestriction.getter();
    v51((char *)v54, v52);
    if ((v57 & 0x80000000) == 0)
    {
      objc_msgSend(v35, sel_setTvRestriction_, v57);
      v58 = (char *)v107;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
      v59 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.getter();
      v56(v58, v49);
      v60 = *(_QWORD *)(v59 + 16);
      v103 = v35;
      if (v60)
      {
        v61 = v59 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
        LODWORD(v109) = *MEMORY[0x1E0D6F838];
        v62 = *(char **)(v115 + 16);
        v107 = *(_QWORD *)(v115 + 72);
        v108 = (uint64_t)v62;
        v100 = (char *)v59;
        swift_bridgeObjectRetain();
        v63 = v110;
        v64 = v113;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v108)(v63, v61, v64);
          Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
          v65 = v114;
          (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v5, v109, v2);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RestrictionCategory and conformance Apple_Parsec_Siri_V2alpha_RestrictionCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F860], MEMORY[0x1E0D6F868]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          v67 = v116;
          v66 = v117;
          v68 = *(void (**)(char *, uint64_t))(v65 + 8);
          v68(v5, v2);
          v68(v7, v2);
          (*(void (**)(char *, uint64_t))(v115 + 8))(v63, v64);
          if (v66 == v67)
            break;
          v61 += v107;
          if (!--v60)
          {
            swift_bridgeObjectRelease_n();
            v69 = 0;
            goto LABEL_23;
          }
        }
        swift_bridgeObjectRelease_n();
        v69 = 1;
LABEL_23:
        v70 = v105;
        v35 = v103;
        v49 = v104;
      }
      else
      {
        v70 = v56;
        swift_bridgeObjectRelease();
        v69 = 0;
      }
      objc_msgSend(v35, sel_setIsInRestrictedSharingMode_, v69);
      v71 = v101;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
      v72 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.getter();
      v70(v71, v49);
      v73 = *(_QWORD *)(v72 + 16);
      if (v73)
      {
        v74 = v72 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
        LODWORD(v110) = *MEMORY[0x1E0D6F840];
        v75 = *(_QWORD *)(v115 + 16);
        v108 = *(_QWORD *)(v115 + 72);
        v109 = v75;
        v107 = v72;
        swift_bridgeObjectRetain();
        v76 = v111;
        v77 = v113;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v109)(v76, v74, v77);
          Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
          v78 = v114;
          (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v5, v110, v2);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RestrictionCategory and conformance Apple_Parsec_Siri_V2alpha_RestrictionCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F860], MEMORY[0x1E0D6F868]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          v80 = v116;
          v79 = v117;
          v81 = *(void (**)(char *, uint64_t))(v78 + 8);
          v81(v5, v2);
          v81(v7, v2);
          (*(void (**)(char *, uint64_t))(v115 + 8))(v76, v77);
          if (v79 == v80)
            break;
          v74 += v108;
          if (!--v73)
          {
            swift_bridgeObjectRelease_n();
            v82 = 1;
            goto LABEL_31;
          }
        }
        swift_bridgeObjectRelease_n();
        v82 = 0;
LABEL_31:
        v70 = v105;
        v35 = v103;
      }
      else
      {
        swift_bridgeObjectRelease();
        v82 = 1;
      }
      objc_msgSend(v35, sel_setIsExplicitContentAllowed_, v82);
      v83 = v102;
      Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
      v84 = Apple_Parsec_Siri_V2alpha_SiriPegasusContext.restrictions.getter();
      v70(v83, v104);
      v85 = *(_QWORD *)(v84 + 16);
      if (v85)
      {
        v86 = v84 + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
        LODWORD(v111) = *MEMORY[0x1E0D6F848];
        v87 = *(char **)(v115 + 16);
        v109 = *(_QWORD *)(v115 + 72);
        v110 = v87;
        v108 = v84;
        swift_bridgeObjectRetain();
        v88 = v112;
        v89 = v113;
        while (1)
        {
          ((void (*)(char *, unint64_t, uint64_t))v110)(v88, v86, v89);
          Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
          v90 = v114;
          (*(void (**)(char *, _QWORD, uint64_t))(v114 + 104))(v5, v111, v2);
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RestrictionCategory and conformance Apple_Parsec_Siri_V2alpha_RestrictionCategory, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F860], MEMORY[0x1E0D6F868]);
          dispatch thunk of RawRepresentable.rawValue.getter();
          dispatch thunk of RawRepresentable.rawValue.getter();
          v92 = v116;
          v91 = v117;
          v93 = *(void (**)(char *, uint64_t))(v90 + 8);
          v93(v5, v2);
          v93(v7, v2);
          (*(void (**)(char *, uint64_t))(v115 + 8))(v88, v89);
          if (v91 == v92)
            break;
          v86 += v109;
          if (!--v85)
          {
            swift_bridgeObjectRelease_n();
            v94 = 0;
            goto LABEL_39;
          }
        }
        swift_bridgeObjectRelease_n();
        v94 = 1;
LABEL_39:
        v35 = v103;
      }
      else
      {
        swift_bridgeObjectRelease();
        v94 = 0;
      }
      objc_msgSend(v35, sel_setIsWebContentDisabled_, v94);
      v95 = specialized static PegasusInstrumentationUtil.extractDeviceState(from:)();
      objc_msgSend(v35, sel_setDeviceState_, v95);

      return (uint64_t)v35;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *specialized static PegasusInstrumentationUtil.extractDeviceState(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  id v8;
  void *v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusContext();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v17 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceState();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A210]), sel_init);
  if (v8)
  {
    v9 = v8;
    Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.siriPegasusContext.getter();
    Apple_Parsec_Siri_V2alpha_SiriPegasusContext.deviceState.getter();
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v10 = Apple_Parsec_Siri_V2alpha_DeviceState.companionName.getter();
    v11 = (void *)MEMORY[0x1C3BBEC44](v10);
    swift_bridgeObjectRelease();
    objc_msgSend(v9, sel_setCompanionName_, v11);

    objc_msgSend(v9, sel_setIsCarDoNotDisturbModeEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isCarDnd.getter() & 1);
    objc_msgSend(v9, sel_setIsCarPlayEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isCarplay.getter() & 1);
    objc_msgSend(v9, sel_setIsEyesFreeEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isEyesFree.getter() & 1);
    objc_msgSend(v9, sel_setIsLockedWithPasscode_, Apple_Parsec_Siri_V2alpha_DeviceState.isLockedWithPasscode.getter() & 1);
    objc_msgSend(v9, sel_setIsMultiUserDevice_, Apple_Parsec_Siri_V2alpha_DeviceState.isMultiUser.getter() & 1);
    objc_msgSend(v9, sel_setIsTextToSpeechEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isTextToSpeechEnabled.getter() & 1);
    objc_msgSend(v9, sel_setIsVoiceTriggerEnabled_, Apple_Parsec_Siri_V2alpha_DeviceState.isVoiceTriggerEnabled.getter() & 1);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C2356000, v13, v14, "Unable to initialize POMMESSchemaPOMMESDeviceState()", v15, 2u);
      MEMORY[0x1C3BBFF64](v15, -1, -1);
    }

    return 0;
  }
  return v9;
}

NSObject *specialized static PegasusInstrumentationUtil.extractClientConversationMetadata(from:onDeviceLabels:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  NSObject *v7;
  NSObject *v8;
  id v9;
  void *v10;
  char v11;
  void (*v12)(char *, uint64_t);
  char v13;
  unint64_t v14;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  os_log_type_t v21;
  uint8_t *v22;
  unint64_t v23;
  char v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v34;

  v3 = type metadata accessor for Apple_Parsec_Siri_Context_ClientConversationContextInfo();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A1F0]), sel_init);
  if (!v7)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v20 = type metadata accessor for Logger();
    __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
    v8 = Logger.logObject.getter();
    v21 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v8, v21))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_1C2356000, v8, v21, "Unable to initialize POMMESSchemaPOMMESClientConversationMetadata()", v22, 2u);
      MEMORY[0x1C3BBFF64](v22, -1, -1);
    }
    goto LABEL_21;
  }
  v8 = v7;
  v9 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A240]), sel_init);
  if (!v9)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1C2356000, v30, v31, "Unable to initialize POMMESSchemaPOMMESOnDeviceMetadata()", v32, 2u);
      MEMORY[0x1C3BBFF64](v32, -1, -1);
    }

LABEL_21:
    return 0;
  }
  v10 = v9;
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
  v11 = Apple_Parsec_Siri_Context_ClientConversationContextInfo.hasPromptContext.getter();
  v12 = *(void (**)(char *, uint64_t))(v4 + 8);
  v12(v6, v3);
  -[NSObject setHasPromptContext:](v8, sel_setHasPromptContext_, v11 & 1);
  Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.clientConversationContextInfo.getter();
  v13 = Apple_Parsec_Siri_Context_ClientConversationContextInfo.hasClientDisplayHints.getter();
  v12(v6, v3);
  -[NSObject setHasDisplayHints:](v8, sel_setHasDisplayHints_, v13 & 1);
  if (*(_QWORD *)(a2 + 16) && (v14 = specialized __RawDictionaryStorage.find<A>(_:)(0), (v15 & 1) != 0))
  {
    v16 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v14);
    v17 = *v16;
    v18 = v16[1];
    swift_bridgeObjectRetain();
    v19 = (void *)MEMORY[0x1C3BBEC44](v17, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    v19 = 0;
  }
  objc_msgSend(v10, sel_setOnScreenAppBundleIdDomain_, v19);

  if (*(_QWORD *)(a2 + 16) && (v23 = specialized __RawDictionaryStorage.find<A>(_:)(1), (v24 & 1) != 0))
  {
    v25 = (uint64_t *)(*(_QWORD *)(a2 + 56) + 16 * v23);
    v26 = *v25;
    v27 = v25[1];
    swift_bridgeObjectRetain();
    v28 = (void *)MEMORY[0x1C3BBEC44](v26, v27);
    swift_bridgeObjectRelease();
  }
  else
  {
    v28 = 0;
  }
  objc_msgSend(v10, sel_setOnScreenUriDomain_, v28);

  -[NSObject setOnDeviceMetadata:](v8, sel_setOnDeviceMetadata_, v10);
  return v8;
}

uint64_t type metadata accessor for PegasusSearchResponse(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PegasusSearchResponse);
}

uint64_t specialized static PegasusInstrumentationUtil.kfedLatency(from:)()
{
  id v0;
  void *v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t result;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A298]), sel_init);
  if (!v0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v4 = type metadata accessor for Logger();
    __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
    v5 = Logger.logObject.getter();
    v6 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v5, v6))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v7 = 0;
      _os_log_impl(&dword_1C2356000, v5, v6, "Unable to initialize POMMESSchemaPOMMESPegasusRequestKfedLatency()", v7, 2u);
      MEMORY[0x1C3BBFF64](v7, -1, -1);
    }

    return 0;
  }
  v1 = v0;
  v2 = Latencyinfopb_KfedLatencyInfo.banyanMs.getter();
  if ((v2 & 0x8000000000000000) == 0 && !HIDWORD(v2))
  {
    objc_msgSend(v1, sel_setBanyanLatencyInMs_, v2);
    v3 = Latencyinfopb_KfedLatencyInfo.overallMs.getter();
    if ((v3 & 0x8000000000000000) == 0 && !HIDWORD(v3))
    {
      objc_msgSend(v1, sel_setOverallLatencyInMs_, v3);
      return (uint64_t)v1;
    }
  }
  result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t closure #1 in PegasusInstrumentationUtil.buildClientDrivenContext(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  char *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, unint64_t, uint64_t);
  uint64_t v44;
  char *v45;
  int v46;
  char *v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  void (*v52)(char *, uint64_t, uint64_t);
  char *v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  int v64;
  int v65;
  int v66;
  void (*v67)(char *, unint64_t, uint64_t);
  uint64_t v68;
  int v69;
  uint64_t v71;
  char *v72;
  char *v73;
  char *v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  void (*v79)(char *, uint64_t, uint64_t);
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  char *v87;
  uint64_t v88;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  v76 = *(_QWORD *)(v0 - 8);
  v77 = v0;
  MEMORY[0x1E0C80A78](v0);
  v75 = (char *)&v71 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  MEMORY[0x1E0C80A78](v2);
  v84 = (char *)&v71 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  v78 = *(_QWORD *)(v88 - 8);
  v4 = MEMORY[0x1E0C80A78](v88);
  v6 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  v83 = (char *)&v71 - v8;
  MEMORY[0x1E0C80A78](v7);
  v74 = (char *)&v71 - v9;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component?);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = MEMORY[0x1E0C80A78](v15);
  v87 = (char *)&v71 - v19;
  v20 = MEMORY[0x1E0C80A78](v18);
  v86 = (unint64_t)&v71 - v21;
  MEMORY[0x1E0C80A78](v20);
  v73 = (char *)&v71 - v22;
  v82 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
  v23 = *(_QWORD *)(v82 - 8);
  v24 = MEMORY[0x1E0C80A78](v82);
  v26 = (char *)&v71 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v27 = MEMORY[0x1C3BBC250](v24);
  v28 = *(_QWORD *)(v27 + 16);
  v72 = v6;
  v85 = v17;
  if (v28)
  {
    v29 = *(unsigned __int8 *)(v23 + 80);
    v71 = v27;
    v30 = v27 + ((v29 + 32) & ~v29);
    v80 = *(_QWORD *)(v23 + 72);
    v81 = v23;
    v79 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
    v31 = MEMORY[0x1E0DEE9D8];
    do
    {
      v32 = v82;
      v79(v26, v30, v82);
      Apple_Parsec_Siri_V2alpha_ClientComponent.component.getter();
      (*(void (**)(char *, uint64_t))(v81 + 8))(v26, v32);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent.OneOf_Component?);
      }
      else
      {
        v33 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
        v34 = v73;
        v33(v73, v12, v13);
        v33((char *)v86, v34, v13);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v35 = v31;
        else
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v31 + 16) + 1, 1, v31);
        v37 = *(_QWORD *)(v35 + 16);
        v36 = *(_QWORD *)(v35 + 24);
        if (v37 >= v36 >> 1)
          v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v36 > 1, v37 + 1, 1, v35);
        *(_QWORD *)(v35 + 16) = v37 + 1;
        v31 = v35;
        v33((char *)(v35+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(_QWORD *)(v14 + 72) * v37), (char *)v86, v13);
        v17 = v85;
      }
      v30 += v80;
      --v28;
    }
    while (v28);
    swift_bridgeObjectRelease();
    v6 = v72;
    v38 = v31;
  }
  else
  {
    swift_bridgeObjectRelease();
    v38 = MEMORY[0x1E0DEE9D8];
  }
  v39 = *(_QWORD *)(v38 + 16);
  v40 = v78;
  v41 = (uint64_t)v84;
  if (v39)
  {
    v42 = v38 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v82 = *(_QWORD *)(v14 + 72);
    v43 = *(void (**)(char *, unint64_t, uint64_t))(v14 + 16);
    LODWORD(v81) = *MEMORY[0x1E0D6EDE0];
    v80 = v38;
    swift_bridgeObjectRetain();
    v86 = MEMORY[0x1E0DEE9D8];
    v44 = v76;
    do
    {
      v45 = v87;
      v43(v87, v42, v13);
      v43(v17, (unint64_t)v45, v13);
      v46 = (*(uint64_t (**)(char *, uint64_t))(v14 + 88))(v17, v13);
      if (v46 == (_DWORD)v81)
      {
        (*(void (**)(char *, uint64_t))(v14 + 96))(v17, v13);
        v47 = v75;
        v48 = v17;
        v49 = v77;
        (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v75, v48, v77);
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
        v50 = v49;
        v41 = (uint64_t)v84;
        v17 = v85;
        (*(void (**)(char *, uint64_t))(v44 + 8))(v47, v50);
        (*(void (**)(char *, uint64_t))(v14 + 8))(v87, v13);
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v40 + 56))(v41, 1, 1, v88);
        v51 = *(void (**)(char *, uint64_t))(v14 + 8);
        v51(v17, v13);
        v51(v87, v13);
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v41, 1, v88) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v41, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      }
      else
      {
        v52 = *(void (**)(char *, uint64_t, uint64_t))(v40 + 32);
        v53 = v74;
        v54 = v88;
        v52(v74, v41, v88);
        v52(v83, (uint64_t)v53, v54);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v55 = v86;
        else
          v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v86 + 16) + 1, 1, v86);
        v57 = *(_QWORD *)(v55 + 16);
        v56 = *(_QWORD *)(v55 + 24);
        if (v57 >= v56 >> 1)
          v55 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v56 > 1, v57 + 1, 1, v55);
        *(_QWORD *)(v55 + 16) = v57 + 1;
        v58 = v78;
        v59 = (*(unsigned __int8 *)(v58 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80);
        v86 = v55;
        v52((char *)(v55 + v59 + *(_QWORD *)(v78 + 72) * v57), (uint64_t)v83, v88);
        v40 = v58;
        v17 = v85;
      }
      v42 += v82;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease_n();
    v6 = v72;
    v60 = v86;
    v61 = *(_QWORD *)(v86 + 16);
    if (!v61)
      goto LABEL_36;
  }
  else
  {
    swift_bridgeObjectRelease();
    v60 = MEMORY[0x1E0DEE9D8];
    v61 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
    if (!v61)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      return 0;
    }
  }
  v62 = v60 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
  v63 = v40;
  v64 = *MEMORY[0x1E0D6FA68];
  v65 = *MEMORY[0x1E0D6FA70];
  v66 = *MEMORY[0x1E0D6FA58];
  v87 = *(char **)(v63 + 72);
  v67 = *(void (**)(char *, unint64_t, uint64_t))(v63 + 16);
  v68 = v88;
  while (1)
  {
    v67(v6, v62, v68);
    v69 = (*(uint64_t (**)(char *, uint64_t))(v63 + 88))(v6, v68);
    if (v69 == v64)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v72, v88);
      return 1;
    }
    if (v69 == v65)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v78 + 8))(v72, v88);
      return 2;
    }
    if (v69 == v66)
      break;
    v63 = v78;
    v6 = v72;
    (*(void (**)(char *, uint64_t))(v78 + 8))(v72, v88);
    v62 += (unint64_t)v87;
    if (!--v61)
      goto LABEL_36;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v72, v88);
  return 3;
}

id PegasusInstrumentationUtil.logPegasusSelfOpaquePayloads(requestId:payloads:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id result;
  void *v14;
  id v15;
  Class isa;
  id v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  id v22;
  id v23;
  void *v24;
  Class v25;
  void *v26;
  id v27;
  id v28;
  uint64_t v29;
  char v30;
  char v31;
  uint64_t v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A418]), sel_init);
  if (!result)
    return result;
  v14 = result;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {

    return (id)outlined destroy of MediaUserStateCenter?((uint64_t)v8, &demangling cache variable for type metadata for UUID?);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  objc_msgSend(v14, sel_setComponent_, 1);
  v15 = objc_allocWithZone(MEMORY[0x1E0D9A500]);
  v39 = v12;
  isa = UUID._bridgeToObjectiveC()().super.isa;
  v17 = objc_msgSend(v15, sel_initWithNSUUID_, isa);

  objc_msgSend(v14, sel_setUuid_, v17);
  v18 = *(_QWORD *)(a2 + 16);
  if (!v18)
    goto LABEL_16;
  v36 = v10;
  v37 = v9;
  swift_bridgeObjectRetain();
  v38 = a2;
  v19 = (unint64_t *)(a2 + 40);
  v40 = 0x80000001C2504400;
  do
  {
    v21 = *(v19 - 1);
    v20 = *v19;
    v22 = objc_allocWithZone(MEMORY[0x1E0D9A458]);
    outlined copy of Data._Representation(v21, v20);
    v23 = objc_msgSend(v22, sel_init);
    if (!v23)
    {
      outlined consume of Data._Representation(v21, v20);
      goto LABEL_7;
    }
    v24 = v23;
    objc_msgSend(v23, sel_setComponentId_, v14);
    v25 = Data._bridgeToObjectiveC()().super.isa;
    objc_msgSend(v24, sel_setAnyEventPayload_, v25);

    v26 = (void *)objc_opt_self();
    swift_retain();
    v27 = objc_msgSend(v26, sel_processInfo);
    v28 = objc_msgSend(v27, sel_environment);
    v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (!*(_QWORD *)(v29 + 16))
    {

      swift_bridgeObjectRelease();
LABEL_13:
      v33 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
      goto LABEL_14;
    }
    specialized __RawDictionaryStorage.find<A>(_:)(0xD00000000000001BLL, v40);
    v31 = v30;

    v32 = swift_bridgeObjectRelease();
    if ((v31 & 1) == 0)
      goto LABEL_13;
    v33 = (id)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 96))(v32);
LABEL_14:
    v34 = v33;
    swift_release();
    objc_msgSend(v34, sel_emitMessage_, v24);
    outlined consume of Data._Representation(v21, v20);

    swift_unknownObjectRelease();
LABEL_7:
    v19 += 2;
    --v18;
  }
  while (v18);
  swift_bridgeObjectRelease();
  v10 = v36;
  v9 = v37;
LABEL_16:

  return (id)(*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v39, v9);
}

uint64_t outlined copy of Data._Representation(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

uint64_t initializeWithCopy for PegasusSearchResponse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

Swift::Int partial apply for closure #1 in PommesSearchRequestProcessor.search_sync(completion:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v5 = *(_QWORD *)(v3 + 64);
  v6 = type metadata accessor for SignpostToken();
  return closure #1 in PommesSearchRequestProcessor.search_sync(completion:)(a1, v1 + v4, v1+ ((v4 + v5 + *(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v6 - 8) + 80)));
}

Swift::Int closure #1 in PommesSearchRequestProcessor.search_sync(completion:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t Strong;
  uint64_t v11;
  uint64_t v12;
  _BYTE v14[24];

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  MEMORY[0x1E0C80A78](v6);
  v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = swift_projectBox();
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  swift_release();
  if (Strong)
  {
    outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v8, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v8, 0, 1, v11);
    swift_beginAccess();
    outlined assign with take of Result<PegasusSearchResponse, PegasusError>?((uint64_t)v8, v9);
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(a2, 0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v12 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v12, (uint64_t)static Signposter.pommes);
  OSSignposter.end(token:message:)(a3, 0, 0xE000000000000000);
  return OS_dispatch_semaphore.signal()();
}

uint64_t outlined assign with take of Result<PegasusSearchResponse, PegasusError>?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t destroy for PegasusSearchResponse(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(unsigned __int8 *, uint64_t, uint64_t);
  uint64_t *v20;
  int v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  void *v33;
  _BYTE *v34;
  _BYTE v36[12];
  int v37;
  uint64_t v38[5];
  uint64_t v39;

  v8 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = &v36[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v10);
  v14 = &v36[-v13];
  v15 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1E0C80A78](v15);
  v17 = &v36[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v14, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  v19 = *(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
  if (v19(v14, 1, v18) != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of PerformanceUtil.Ticket((uint64_t)v14, (uint64_t)v17, type metadata accessor for PegasusSearchResponse);
      v38[3] = type metadata accessor for SportsResolver();
      v38[4] = (uint64_t)&protocol witness table for SportsResolver;
      __swift_allocate_boxed_opaque_existential_1(v38);
      swift_retain_n();
      swift_retain_n();
      SportsResolver.init()();
      swift_retain();
      swift_retain();
      specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v17, (uint64_t)v38, a2, a3, a4);
      swift_release();
      swift_release();
      outlined destroy of PommesSearchRequest((uint64_t)v17, type metadata accessor for PegasusSearchResponse);
      outlined destroy of DefaultExperiencesResolver((uint64_t)v38);
LABEL_18:
      swift_release_n();
      return swift_release_n();
    }
    v8 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
  }
  swift_retain_n();
  swift_retain_n();
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, v8);
  v20 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v12, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  if (v19(v12, 1, v18) == 1)
  {
LABEL_13:
    outlined destroy of MediaUserStateCenter?((uint64_t)v12, v20);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v32 = 0;
      _os_log_impl(&dword_1C2356000, v30, v31, "PireneResponse failure: none", v32, 2u);
      MEMORY[0x1C3BBFF64](v32, -1, -1);
    }

    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    v33 = (void *)swift_allocError();
    *v34 = 0x80;
    closure #3 in PommesSearchRequestProcessor.search_sync(completion:)(v33, 1, a3);

    goto LABEL_18;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v20 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
    goto LABEL_13;
  }
  v21 = *v12;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v37 = v21;
    v25 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v38[0] = v26;
    *(_DWORD *)v25 = 136315138;
    LOBYTE(v39) = v37;
    v27 = String.init<A>(describing:)();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    LOBYTE(v21) = v37;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v23, v24, "POMMES-CURARE: {\"error\":\"%s\"}", v25, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v26, -1, -1);
    MEMORY[0x1C3BBFF64](v25, -1, -1);
  }

  swift_retain();
  swift_retain();
  specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(v21, (uint64_t)a2, a3, a4);
  swift_release_n();
  return swift_release_n();
}

uint64_t specialized PommesSearchRequestProcessor.handlePegasusResponse(_:_:)(uint64_t a1, uint8_t *a2, uint64_t (*a3)(void *, uint64_t), uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  uint64_t *v22;
  char v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  void *v35;
  _BYTE *v36;
  _QWORD v38[2];
  uint8_t *v39;
  uint64_t (*v40)(void *, uint64_t);
  uint64_t v41[5];
  uint64_t v42;

  v39 = a2;
  v40 = a3;
  v10 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v12 = MEMORY[0x1E0C80A78](v11);
  v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)v38 - v15;
  v17 = type metadata accessor for PegasusSearchResponse(0);
  MEMORY[0x1E0C80A78](v17);
  v19 = (char *)v38 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v16, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 48);
  if (v21(v16, 1, v20) != 1)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      outlined init with take of PerformanceUtil.Ticket((uint64_t)v16, (uint64_t)v19, type metadata accessor for PegasusSearchResponse);
      v41[3] = type metadata accessor for SportsResolver();
      v41[4] = (uint64_t)&protocol witness table for SportsResolver;
      __swift_allocate_boxed_opaque_existential_1(v41);
      swift_retain_n();
      swift_retain_n();
      swift_retain_n();
      SportsResolver.init()();
      swift_retain();
      swift_retain();
      swift_retain();
      specialized PommesSearchRequestProcessor.handleSuccess(_:_:_:)(v19, (uint64_t)v41, v39, v40, a4, a5, a6);
      swift_release();
      swift_release();
      swift_release();
      outlined destroy of PommesSearchRequest((uint64_t)v19, type metadata accessor for PegasusSearchResponse);
      outlined destroy of DefaultExperiencesResolver((uint64_t)v41);
LABEL_18:
      swift_release();
      swift_release_n();
      goto LABEL_19;
    }
    v10 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
  }
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, v10);
  v22 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?;
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v14, &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>?);
  if (v21(v14, 1, v20) == 1)
  {
LABEL_13:
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, v22);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1C2356000, v32, v33, "PireneResponse failure: none", v34, 2u);
      MEMORY[0x1C3BBFF64](v34, -1, -1);
    }

    lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
    v35 = (void *)swift_allocError();
    *v36 = 0x80;
    closure #4 in PommesSearchRequestProcessor.search_sync(completion:)(v35, 1, v40, a4, a5);

    goto LABEL_18;
  }
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    v22 = &demangling cache variable for type metadata for Result<PegasusSearchResponse, PegasusError>;
    goto LABEL_13;
  }
  v23 = *v14;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    v41[0] = v28;
    *(_DWORD *)v27 = 136315138;
    v38[1] = v27 + 4;
    LOBYTE(v42) = v23;
    v29 = String.init<A>(describing:)();
    v42 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v25, v26, "POMMES-CURARE: {\"error\":\"%s\"}", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v28, -1, -1);
    MEMORY[0x1C3BBFF64](v27, -1, -1);
  }

  swift_retain();
  swift_retain();
  swift_retain();
  specialized PommesSearchRequestProcessor.handleFailure(with:completion:)(v23, (uint64_t)v39, (uint64_t)v40, a4, (uint64_t)a5, a6);
  swift_release_n();
  swift_release_n();
LABEL_19:
  swift_release_n();
  return swift_release();
}

uint64_t outlined init with copy of DefaultExperiencesResolver(uint64_t a1, uint64_t a2)
{
  initializeWithCopy for SportsPersonalizationExperiencesResolver(a2, a1);
  return a2;
}

uint64_t initializeWithCopy for SportsPersonalizationExperiencesResolver(uint64_t a1, uint64_t a2)
{
  __int128 v3;

  v3 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v3;
  (**(void (***)(void))(v3 - 8))();
  return a1;
}

uint64_t DomainWarmup.warmupFirstExperience(request:response:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  uint64_t v21;

  v2 = v1;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C2356000, v9, v10, "DomainWarmup#warmupFirstExperience", v11, 2u);
    MEMORY[0x1C3BBFF64](v11, -1, -1);
  }

  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  if (v12 <= 0.99)
  {
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v19 = 0;
      _os_log_impl(&dword_1C2356000, v17, v18, "DomainWarmup#warmupFirstExperience recieved low confidence PommesResponse. Skipping warmup", v19, 2u);
      MEMORY[0x1C3BBFF64](v19, -1, -1);
    }

    return MEMORY[0x1E0DEE9D8];
  }
  else
  {
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
    v13 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
    v15 = v14;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 184))(a1, v13, v15);
    swift_bridgeObjectRelease();
  }
  return v16;
}

uint64_t DomainWarmup.warmup(request:domain:)()
{
  uint64_t v1;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [WarmupComponent]);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

void partial apply for closure #1 in DomainWarmup.warmup(request:domain:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in DomainWarmup.warmup(request:domain:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD **)(v1 + 32), *(_QWORD *)(v1 + 40), a1);
}

void closure #1 in DomainWarmup.warmup(request:domain:)(uint64_t a1@<X0>, unint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  NSObject *v24;
  os_log_type_t v25;
  uint8_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t (*v31)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v32;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v36[3];
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40[3];
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v40[0] = v12;
    *(_DWORD *)v11 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v9, v10, "DomainWarmup#warmup %s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v12, -1, -1);
    MEMORY[0x1C3BBFF64](v11, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v13 = a3[4];
  if (*(_QWORD *)(v13 + 16))
  {
    swift_bridgeObjectRetain();
    v14 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
    if ((v15 & 1) != 0)
    {
      outlined init with copy of AppDataProviding(*(_QWORD *)(v13 + 56) + 40 * v14, (uint64_t)&v37);
    }
    else
    {
      v39 = 0;
      v37 = 0u;
      v38 = 0u;
    }
    swift_bridgeObjectRelease();
    if (*((_QWORD *)&v38 + 1))
    {
      outlined init with take of AppDataProviding(&v37, (uint64_t)v40);
      swift_beginAccess();
      v16 = a3[3];
      if (*(_QWORD *)(v16 + 16))
      {
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v17 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
        if ((v18 & 1) != 0)
        {
          v19 = *(_QWORD *)(*(_QWORD *)(v16 + 56) + 8 * v17);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain_n();
          v20 = Logger.logObject.getter();
          v21 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v20, v21))
          {
            v22 = (uint8_t *)swift_slowAlloc();
            v23 = swift_slowAlloc();
            v36[0] = v23;
            *(_DWORD *)v22 = 136315138;
            swift_bridgeObjectRetain();
            v43 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v36);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2356000, v20, v21, "DomainWarmup#warmup : Warmup already called for %s", v22, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v23, -1, -1);
            MEMORY[0x1C3BBFF64](v22, -1, -1);

          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          *a5 = v19;
          goto LABEL_24;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      v28 = v41;
      v29 = v42;
      __swift_project_boxed_opaque_existential_1(v40, v41);
      v30 = a3[5];
      v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v29 + 8);
      swift_unknownObjectRetain();
      v32 = v31(a4, v30, v28, v29);
      swift_unknownObjectRelease();
      swift_beginAccess();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v43 = a3[3];
      a3[3] = 0x8000000000000000;
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v32, a1, a2, isUniquelyReferenced_nonNull_native);
      a3[3] = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_endAccess();
      *a5 = v32;
LABEL_24:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v40);
      return;
    }
  }
  else
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
  }
  outlined destroy of DomainWarmupHandling?((uint64_t)&v37);
  swift_bridgeObjectRetain_n();
  v24 = Logger.logObject.getter();
  v25 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v24, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    v27 = swift_slowAlloc();
    v40[0] = v27;
    *(_DWORD *)v26 = 136315138;
    swift_bridgeObjectRetain();
    *(_QWORD *)&v37 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v24, v25, "DomainWarmup#warmup warmup handler not found for domain: %s", v26, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v27, -1, -1);
    MEMORY[0x1C3BBFF64](v26, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  *a5 = MEMORY[0x1E0DEE9D8];
}

uint64_t protocol witness for Featuriser.name.getter in conformance AudioTypeFeaturiser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))();
}

uint64_t PluginWarmupHandler.warmup(request:serviceHelper:)(uint64_t a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  id v16;
  id v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t *v22;
  void *v23;
  uint64_t v24;
  id v25;
  id v26;
  void *v27;
  id v28;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t aBlock[3];
  ValueMetadata *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v3 = v2;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v37 = &type metadata for FeatureFlag;
  v38 = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v10 = swift_allocObject();
  aBlock[0] = v10;
  *(_QWORD *)(v10 + 16) = 2;
  *(_QWORD *)(v10 + 24) = 0;
  *(_QWORD *)(v10 + 32) = 0;
  *(_QWORD *)(v10 + 40) = 0;
  *(_BYTE *)(v10 + 48) = 3;
  v11 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)aBlock);
  if ((v11 & 1) != 0)
  {
    v13 = *(_QWORD *)(v3 + 16);
    v12 = *(_QWORD *)(v3 + 24);
    v14 = objc_allocWithZone(MEMORY[0x1E0D88198]);
    swift_bridgeObjectRetain();
    v35 = v13;
    v15 = (void *)MEMORY[0x1C3BBEC44](v13, v12);
    swift_bridgeObjectRelease();
    v16 = objc_msgSend(v14, sel_initWithBundleIdentifier_, v15);

    v17 = v16;
    UUID.init()();
    v18 = UUID.uuidString.getter();
    v20 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    v21 = (void *)MEMORY[0x1C3BBEC44](v18, v20);
    swift_bridgeObjectRelease();
    objc_msgSend(v17, sel_setAceId_, v21);

    v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
    v23 = (void *)v22[1];
    if (v23)
    {
      v24 = *v22;
      v25 = v17;
      v23 = (void *)MEMORY[0x1C3BBEC44](v24, v23);
    }
    else
    {
      v26 = v17;
    }
    objc_msgSend(v17, sel_setRefId_, v23);

    if (a2)
    {
      v38 = (unint64_t)partial apply for closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:);
      v39 = v3;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
      v37 = (ValueMetadata *)&block_descriptor_13;
      v27 = _Block_copy(aBlock);
      v28 = v17;
      swift_unknownObjectRetain();
      swift_retain();
      swift_release();
      objc_msgSend(a2, sel_handleCommand_completion_, v28, v27);
      swift_unknownObjectRelease();

      _Block_release(v27);
      return swift_bridgeObjectRetain();
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    swift_retain();
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      v34 = swift_slowAlloc();
      aBlock[0] = v34;
      *(_DWORD *)v33 = 136315138;
      swift_bridgeObjectRetain();
      v40 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v35, v12, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v31, v32, "PluginWarmupHandler#warmup serviceHelper nil, skipping warming up for %s plugin", v33, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v34, -1, -1);
      MEMORY[0x1C3BBFF64](v33, -1, -1);

    }
    else
    {

      swift_release();
    }

  }
  return MEMORY[0x1E0DEE9D8];
}

uint64_t PegasusProxy.clientExperienceSignals(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for ClientExperienceSignals();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  ClientExperienceSignals.init(isGlideEligible:networkAvailableAtRequest:isPhoneCallActive:)();
  (*(void (**)(uint64_t, uint64_t))(*v2[23] + 464))(a2, a1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a2, v8);
  v12 = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(a2, v11, v8);
  v13 = ((uint64_t (*)(uint64_t))(*v2)[44])(v12);
  if (v13)
  {
    v14 = v13;
    v15 = type metadata accessor for PommesSearchRequest(0);
    (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)v14 + 144))(*(_QWORD *)(a1 + *(int *)(v15 + 32)), *(_QWORD *)(a1 + *(int *)(v15 + 32) + 8), 1);
    swift_release();
  }
  ClientExperienceSignals.isPhoneCallActive.setter();
  v16 = type metadata accessor for PommesSearchRequest(0);
  outlined init with copy of MediaUserStateCenter?(a1 + *(int *)(v16 + 44), (uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v17 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v18 = *(_QWORD *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v7, 1, v17) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v7, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  }
  else
  {
    Siri_Nlu_External_Span.matcherNames.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v7, v17);
  }
  return ClientExperienceSignals.matchingSpans.setter();
}

uint64_t DataProviderManager.addClientExperienceSignals(to:for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  void (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  void (*v29)(_BYTE *, _QWORD, uint64_t);
  uint64_t v30;
  void (*v31)(_QWORD);
  void (*v32)(_QWORD *, uint64_t);
  void (*v33)(_BYTE *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  uint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  BOOL v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  void (*v67)(__int128 *, _QWORD);
  uint64_t *v68;
  uint64_t *v69;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  __int128 *v83;
  void (*v84)(_QWORD *, _QWORD);
  _QWORD *v85;
  _QWORD *v86;
  char v87;
  _BYTE v88[12];
  unsigned int v89;
  void (*v90)(_QWORD *, _QWORD, uint64_t);
  uint64_t v91;
  uint64_t v92;
  _BYTE *v93;
  uint64_t v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  uint64_t v106;
  _QWORD v107[3];
  uint64_t v108;
  uint64_t v109;
  _OWORD v110[6];

  v4 = v3;
  v101 = (uint64_t *)a2;
  v97 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_MultiUserContext?);
  MEMORY[0x1E0C80A78](v6);
  v96 = &v88[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v100 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext();
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v98 = &v88[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v9);
  v93 = &v88[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = type metadata accessor for DispatchTimeInterval();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v14 = &v88[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15 = type metadata accessor for DispatchTime();
  v16 = *(_QWORD *)(v15 - 8);
  v17 = MEMORY[0x1E0C80A78](v15);
  v19 = &v88[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1E0C80A78](v17);
  v21 = &v88[-v20];
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v22);
  v24 = &v88[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = type metadata accessor for ClientExperienceSignals();
  v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16);
  v102 = a3;
  v26(a3, v97, v25);
  v27 = *(_QWORD *)(v4 + 24);
  outlined init with copy of PommesSearchRequest((uint64_t)v101, (uint64_t)v24);
  v28 = type metadata accessor for PommesSearchRequest(0);
  v29 = *(void (**)(_BYTE *, _QWORD, uint64_t))(*(_QWORD *)(v28 - 8) + 56);
  v94 = v28;
  v29(v24, 0, 1);
  memset(v110, 0, 90);
  v97 = v4;
  v30 = *(_QWORD *)(v4 + 16);
  static DispatchTime.now()();
  *v14 = 1;
  v31 = *(void (**)(_QWORD))(v12 + 104);
  v89 = *MEMORY[0x1E0DEF490];
  v90 = (void (*)(_QWORD *, _QWORD, uint64_t))v31;
  v31(v14);
  MEMORY[0x1C3BBEB6C](v19, v14);
  v32 = *(void (**)(_QWORD *, uint64_t))(v12 + 8);
  v92 = v11;
  v32(v14, v11);
  v91 = v16;
  v33 = *(void (**)(_BYTE *, uint64_t))(v16 + 8);
  v33(v19, v15);
  v34 = v30;
  v35 = v15;
  (*(void (**)(_QWORD *__return_ptr, _BYTE *, _OWORD *, _QWORD, uint64_t, _BYTE *))(*(_QWORD *)v27 + 240))(v107, v24, v110, 0, v34, v21);
  v33(v21, v15);
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v24, &demangling cache variable for type metadata for PommesSearchRequest?);
  v37 = v107[0];
  if (v107[0])
  {
    v38 = *(_QWORD *)(v97 + 88);
    if (v38)
    {
      static DispatchTime.now()();
      *v14 = 1;
      v39 = v92;
      v90(v14, v89, v92);
      v40 = (uint64_t)v93;
      MEMORY[0x1C3BBEB6C](v21, v14);
      v32(v14, v39);
      v33(v21, v35);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v91 + 56))(v40, 0, 1, v35);
      v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v38 + 168))(v40);
      outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for DispatchTime?);
    }
    else
    {
      v41 = 0;
    }
    type metadata accessor for PegasusProxy(0);
    v42 = v98;
    v43 = (uint64_t)v101;
    static PegasusProxy.multiUserContext(for:)((uint64_t)v101);
    v44 = v99;
    v45 = v96;
    v46 = v42;
    v47 = v100;
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v99 + 16))(v96, v46, v100);
    (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v45, 0, 1, v47);
    result = ClientExperienceSignals.multiUserContext.setter();
    v48 = v94;
    if (*(_BYTE *)(v43 + *(int *)(v94 + 60)) == 1)
    {
      v49 = *(_QWORD *)(v37 + 16);
      if (v49)
      {
        v50 = 0;
        v51 = (_BYTE *)(v37 + 32);
        v101 = (uint64_t *)(v41 + 40);
        v95 = v37;
        v97 = v41;
        v96 = (_BYTE *)(v37 + 32);
        while (v50 < *(_QWORD *)(v37 + 16))
        {
          outlined init with copy of AppDataProviding((uint64_t)&v51[40 * v50], (uint64_t)v107);
          v52 = v108;
          v53 = v109;
          __swift_project_boxed_opaque_existential_1(v107, v108);
          v54 = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 40))(v52, v53);
          if (v55)
          {
            v56 = v55;
            if (v41 && (v57 = *(_QWORD *)(v41 + 16)) != 0)
            {
              v58 = v54;
              v59 = v101;
              while (1)
              {
                v61 = *(v59 - 1);
                v60 = *v59;
                v62 = v59[1] == v58 && v56 == v59[2];
                if (v62 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                  break;
                v59 += 7;
                if (!--v57)
                {
                  swift_bridgeObjectRelease();
                  v37 = v95;
                  v41 = v97;
                  v51 = v96;
                  goto LABEL_9;
                }
              }
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v63 = v108;
              v64 = v109;
              __swift_project_boxed_opaque_existential_1(v107, v108);
              (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(v64 + 8))(&v104, v63, v64);
              v65 = *((_QWORD *)&v105 + 1);
              if (*((_QWORD *)&v105 + 1))
              {
                v66 = v106;
                __swift_project_boxed_opaque_existential_1(&v104, *((uint64_t *)&v105 + 1));
                LOBYTE(v65) = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 88))(v65, v66);
                __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
              }
              else
              {
                outlined destroy of MediaUserStateCenter?((uint64_t)&v104, (uint64_t *)&demangling cache variable for type metadata for MusicUserState?);
              }
              v37 = v95;
              v67 = (void (*)(__int128 *, _QWORD))ClientExperienceSignals.glideEligibilityPerSharedId.modify();
              v69 = v68;
              isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v103 = *v69;
              *v69 = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v65 & 1, v61, v60, isUniquelyReferenced_nonNull_native);
              *v69 = v103;
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v67(&v104, 0);
              v41 = v97;
              v51 = v96;
            }
            else
            {
              swift_bridgeObjectRelease();
            }
          }
LABEL_9:
          ++v50;
          result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
          if (v50 == v49)
            goto LABEL_30;
        }
        __break(1u);
        goto LABEL_49;
      }
LABEL_30:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return (*(uint64_t (**)(_BYTE *, uint64_t))(v99 + 8))(v98, v100);
    }
    swift_bridgeObjectRelease();
    v71 = *(_QWORD *)(v37 + 16);
    if (v71)
    {
      outlined init with copy of AppDataProviding(v37 + 32, (uint64_t)&v104);
      v72 = *((_QWORD *)&v105 + 1);
      v73 = v106;
      __swift_project_boxed_opaque_existential_1(&v104, *((uint64_t *)&v105 + 1));
      (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v73 + 8))(v107, v72, v73);
      v74 = v108;
      if (v108)
      {
        v75 = v109;
        __swift_project_boxed_opaque_existential_1(v107, v108);
        (*(void (**)(uint64_t, uint64_t))(v75 + 88))(v74, v75);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
      }
      else
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
        outlined destroy of MediaUserStateCenter?((uint64_t)v107, (uint64_t *)&demangling cache variable for type metadata for MusicUserState?);
      }
    }
    result = ClientExperienceSignals.isGlideEligible.setter();
    v76 = (uint64_t *)(v43 + *(int *)(v48 + 84));
    if (v76[1])
    {
      v77 = *v76;
      v78 = v76[1];
      if (v71)
      {
LABEL_35:
        if (!*(_QWORD *)(v37 + 16))
        {
LABEL_49:
          __break(1u);
          return result;
        }
        outlined init with copy of AppDataProviding(v37 + 32, (uint64_t)&v104);
LABEL_39:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        v79 = *((_QWORD *)&v105 + 1);
        if (*((_QWORD *)&v105 + 1))
        {
          v80 = v106;
          __swift_project_boxed_opaque_existential_1(&v104, *((uint64_t *)&v105 + 1));
          (*(void (**)(_QWORD *__return_ptr, uint64_t, uint64_t))(v80 + 8))(v107, v79, v80);
          v79 = v108;
          if (v108)
          {
            v81 = v109;
            __swift_project_boxed_opaque_existential_1(v107, v108);
            LOBYTE(v79) = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 88))(v79, v81);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)v107);
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
LABEL_45:
            v84 = (void (*)(_QWORD *, _QWORD))ClientExperienceSignals.glideEligibilityPerSharedId.modify();
            v86 = v85;
            v87 = swift_isUniquelyReferenced_nonNull_native();
            *(_QWORD *)&v104 = *v86;
            *v86 = 0x8000000000000000;
            specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v79 & 1, v77, v78, v87);
            *v86 = v104;
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            v84(v107, 0);
            return (*(uint64_t (**)(_BYTE *, uint64_t))(v99 + 8))(v98, v100);
          }
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v104);
          v82 = (uint64_t *)&demangling cache variable for type metadata for MusicUserState?;
          v83 = (__int128 *)v107;
        }
        else
        {
          v82 = &demangling cache variable for type metadata for MediaUserState?;
          v83 = &v104;
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v83, v82);
        goto LABEL_45;
      }
    }
    else
    {
      v78 = 0x80000001C2503090;
      v77 = 0xD000000000000024;
      if (v71)
        goto LABEL_35;
    }
    v106 = 0;
    v105 = 0u;
    v104 = 0u;
    goto LABEL_39;
  }
  return result;
}

void thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ()(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(void *, void *);
  id v6;
  id v7;

  v5 = *(void (**)(void *, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(a2, a3);
  swift_release();

}

void partial apply for closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:)(void *a1, void *a2)
{
  uint64_t v2;

  closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:)(a1, a2, v2);
}

void closure #1 in PluginWarmupHandler.warmup(request:serviceHelper:)(void *a1, id a2, uint64_t a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v16;
  id v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  NSObject *oslog;
  uint64_t v29;

  if (a2)
  {
    v4 = a2;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    v6 = a2;
    v7 = a2;
    oslog = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v29 = v10;
      *(_DWORD *)v9 = 136315138;
      v11 = a2;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v12 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v12, v13, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, oslog, v8, "PluginWarmupHandler#warmup Service helper returned an error: %s", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v10, -1, -1);
      MEMORY[0x1C3BBFF64](v9, -1, -1);

    }
    else
    {

    }
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    v17 = a1;
    swift_retain_n();
    v18 = v17;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = swift_slowAlloc();
      v22 = swift_slowAlloc();
      v29 = v22;
      *(_DWORD *)v21 = 136315394;
      v23 = *(_QWORD *)(a3 + 16);
      v24 = *(_QWORD *)(a3 + 24);
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v23, v24, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v21 + 12) = 2080;
      v25 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SABaseCommand?);
      v26 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v27, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v19, v20, "PluginWarmupHandler#warmup %s plugin warmup successful with result %s", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v22, -1, -1);
      MEMORY[0x1C3BBFF64](v21, -1, -1);

    }
    else
    {

      swift_release_n();
    }
  }
}

uint64_t type metadata accessor for PegasusProxy(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PegasusProxy);
}

uint64_t static PegasusProxy.multiUserContext(for:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  unsigned int *v8;
  uint64_t v10;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_MultiUserContext.UserIdentityClassification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_MultiUserContext.init()();
  v6 = type metadata accessor for PommesSearchRequest(0);
  swift_bridgeObjectRetain();
  Apple_Parsec_Siri_V2alpha_MultiUserContext.sharedUserID.setter();
  v7 = *(_QWORD *)(a1 + *(int *)(v6 + 88));
  if (v7 > 4)
    v8 = (unsigned int *)MEMORY[0x1E0D6EF50];
  else
    v8 = (unsigned int *)qword_1E7C03DA8[v7];
  (*(void (**)(char *, _QWORD, uint64_t))(v3 + 104))(v5, *v8, v2);
  return Apple_Parsec_Siri_V2alpha_MultiUserContext.userIdentificationClassification.setter();
}

uint64_t protocol witness for MusicUserState.isGlideEligible.getter in conformance ICMusicUserState()
{
  _QWORD *v0;
  char v1;

  v0 = ICMusicUserState.eligibleOffers.getter();
  v1 = specialized Sequence<>.contains(_:)(0x57454956455250, 0xE700000000000000, v0);
  swift_bridgeObjectRelease();
  return v1 & 1;
}

uint64_t closure #1 in PommesSearchRequestProcessor.handleSuccess(_:_:_:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = a1[3];
  v12 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v11);
  v13 = type metadata accessor for ClientExperienceSignals();
  v14 = *(_QWORD *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v10, a3, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v10, 0, 1, v13);
  v15 = (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t))(v12 + 8))(a2, v10, v11, v12);
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for ClientExperienceSignals?);
  *a4 = v15;
  return result;
}

char *DefaultExperiencesResolver.buildExperiences(from:with:)(uint64_t a1, uint64_t a2)
{
  int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  void *v21;
  void (*v22)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  char *v26;
  int *v27;
  char v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  void (*v32)(char *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(_BYTE *@<X8>));
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void (*v36)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>));
  void *v37;
  void (*v38)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, BOOL (*)@<W0>(_BYTE *@<X8>));
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v52;
  int *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char v65;
  unsigned __int8 v66[16];
  uint64_t v67;

  v62 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
  MEMORY[0x1E0C80A78](v4);
  v58 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v56);
  v57 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v60 = *(_QWORD *)(v7 - 8);
  v61 = v7;
  MEMORY[0x1E0C80A78](v7);
  v64 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  v17 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  v63 = v18;
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  v59 = v2;
  v19 = specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, v62);
  v20 = v19;
  if (one-time initialization token for shared != -1)
    v19 = swift_once();
  v21 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v19);
  v62 = a1;
  v53 = (int *)a1;
  Date.init()();
  v22 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v21 + 200);
  v23 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v53 = &v52;
  v54 = v23;
  LOBYTE(v52) = 2;
  v22(&v67, 0xD000000000000034, 0x80000001C2507FE0, 0, v12, "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 31, "buildExperiences(from:with:)", 28, v52, partial apply for closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:));
  v24 = *(void (**)(char *, uint64_t))(v10 + 8);
  v25 = v9;
  v24(v12, v9);
  *(_QWORD *)v66 = v67;
  specialized Array.append<A>(contentsOf:)(v20);
  v26 = *(char **)v66;
  if (v17 == 0x7374726F7073 && v63 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    v27 = (int *)v64;
  }
  else
  {
    v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    v27 = (int *)v64;
    if ((v28 & 1) == 0)
      return v26;
  }
  v63 = v23;
  v64 = v26;
  v29 = v62;
  v30 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v31 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v30);
  v53 = v27;
  Date.init()();
  v32 = *(void (**)(char *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(_BYTE *@<X8>)))(*(_QWORD *)v31 + 200);
  v53 = &v52;
  v54 = MEMORY[0x1E0DEAFA0];
  LOBYTE(v52) = 2;
  v32(&v65, 0xD000000000000052, 0x80000001C2508060, 0, v12, "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 39, "buildExperiences(from:with:)", 28, v52, partial apply for closure #2 in DefaultExperiencesResolver.buildExperiences(from:with:));
  v33 = ((uint64_t (*)(char *, uint64_t))v24)(v12, v25);
  if (v65 == 1)
  {
    v34 = swift_bridgeObjectRelease();
    v35 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v34);
    v53 = v59;
    v54 = v29;
    Date.init()();
    v36 = *(void (**)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v35 + 200);
    v53 = &v52;
    v54 = v63;
    LOBYTE(v52) = 2;
    v36(v66, 0xD000000000000035, 0x80000001C2508110, 0, v12, "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 45, "buildExperiences(from:with:)", 28, v52, partial apply for closure #3 in DefaultExperiencesResolver.buildExperiences(from:with:));
    v24(v12, v25);
    (*(void (**)(int *, uint64_t))(v60 + 8))(v27, v61);
    return *(char **)v66;
  }
  else
  {
    v37 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v33);
    v53 = v27;
    Date.init()();
    v38 = *(void (**)(unsigned __int8 *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, BOOL (*)@<W0>(_BYTE *@<X8>)))(*(_QWORD *)v37 + 200);
    v53 = &v52;
    v54 = MEMORY[0x1E0DEAFA0];
    LOBYTE(v52) = 2;
    v38(v66, 0xD00000000000004ALL, 0x80000001C25080C0, 0, v12, "SiriInformationSearch/DefaultExperiencesResolver.swift", 54, 2, 50, "buildExperiences(from:with:)", 28, v52, partial apply for closure #4 in DefaultExperiencesResolver.buildExperiences(from:with:));
    v24(v12, v25);
    v40 = v60;
    v39 = v61;
    if (v66[0] == 1)
    {
      v41 = (uint64_t)v57;
      Date.init()();
      v42 = (int *)v56;
      v43 = v41 + *(int *)(v56 + 20);
      *(_QWORD *)v43 = "SiriInformationSearch/DefaultExperiencesResolver.swift";
      *(_QWORD *)(v43 + 8) = 54;
      *(_BYTE *)(v43 + 16) = 2;
      *(_QWORD *)(v41 + v42[6]) = 58;
      v44 = v41 + v42[7];
      *(_QWORD *)v44 = "buildExperiences(from:with:)";
      *(_QWORD *)(v44 + 8) = 28;
      *(_BYTE *)(v44 + 16) = 2;
      v45 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000003CLL);
      v46 = (uint64_t *)(v41 + v42[8]);
      *v46 = v45;
      v46[1] = v47;
      v48 = (uint64_t)v58;
      (*(void (**)(char *, int *, uint64_t))(v40 + 16))(v58, v27, v39);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v40 + 56))(v48, 0, 1, v39);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v49 = type metadata accessor for Logger();
      v50 = __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
      specialized static SportsPersonalizationMetrics.submit<A>(for:instruction:logger:)(2, v48, v50);
      outlined destroy of MediaUserStateCenter?(v48, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction?);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v41, 0);
      outlined destroy of PerformanceUtil.Ticket(v41);
    }
    (*(void (**)(int *, uint64_t))(v40 + 8))(v27, v39);
    return v64;
  }
}

uint64_t specialized ExperiencesResolver.defaultExperiences(from:with:)(uint64_t a1, uint64_t a2)
{
  return specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, a2, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  void *v11;
  void (*v12)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v13;
  uint64_t (*v14)(char *, uint64_t);
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;

  v4 = type metadata accessor for Date();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  v10 = v9;
  if (one-time initialization token for shared != -1)
    v8 = swift_once();
  v11 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v8);
  v22 = a1;
  v23 = v10;
  v24 = a2;
  Date.init()();
  v12 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v11 + 200);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v23 = &v20;
  v24 = v13;
  LOBYTE(v21) = 2;
  v12(&v27, 0xD00000000000002BLL, 0x80000001C2507170, 0, v7, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 60, "defaultExperiences(from:with:)", 30, v21, partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:));
  v14 = *(uint64_t (**)(char *, uint64_t))(v5 + 8);
  v15 = v14(v7, v4);
  v16 = v27;
  v17 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v15);
  v21 = a1;
  v23 = v10;
  v24 = a2;
  Date.init()();
  v18 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v17 + 200);
  v23 = &v20;
  v24 = v13;
  LOBYTE(v21) = 2;
  v18(&v26, 0xD00000000000002ELL, 0x80000001C25071F0, 0, v7, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 63, "defaultExperiences(from:with:)", 30, v21, partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
  v14(v7, v4);
  v27 = v16;
  specialized Array.append<A>(contentsOf:)(v26);
  return v27;
}

{
  return specialized ExperiencesResolver.defaultExperiences(from:with:)(a1, a2, (uint64_t)partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:), (uint64_t)partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
}

uint64_t specialized ExperiencesResolver.defaultExperiences(from:with:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  void *v13;
  void (*v14)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void (*v20)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27[2];
  uint64_t v28;
  uint64_t v29;

  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a3;
  v10 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  v12 = v11;
  if (one-time initialization token for shared != -1)
    v10 = swift_once();
  v13 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v10);
  v23 = &v29;
  v24 = a1;
  v25 = v12;
  v26 = a2;
  Date.init()();
  v14 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v13 + 200);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v25 = &v22;
  v26 = v15;
  LOBYTE(v23) = 2;
  v14(&v28, 0xD00000000000002BLL, 0x80000001C2507170, 0, v9, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 60, "defaultExperiences(from:with:)", 30, (_DWORD)v23, partial apply for specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:));
  v16 = *(uint64_t (**)(char *, uint64_t))(v7 + 8);
  v17 = v16(v9, v6);
  v18 = v28;
  v19 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v17);
  v23 = a1;
  v24 = &v29;
  v25 = v12;
  v26 = a2;
  Date.init()();
  v20 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v19 + 200);
  v25 = &v22;
  v26 = v15;
  LOBYTE(v23) = 2;
  v20(v27, 0xD00000000000002ELL, 0x80000001C25071F0, 0, v9, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 63, "defaultExperiences(from:with:)", 30, (_DWORD)v23, partial apply for specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:));
  v16(v9, v6);
  v28 = v18;
  specialized Array.append<A>(contentsOf:)(v27[0]);
  return v28;
}

uint64_t specialized ExperiencesResolver.defaultExperiences(from:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  void (*v17)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t);
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void (*v23)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t);
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;

  v31 = a3;
  v32 = a4;
  v5 = v4;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  v14 = v13;
  if (one-time initialization token for shared != -1)
    v12 = swift_once();
  v15 = (uint64_t *)static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v12);
  v26 = v5;
  v27 = a1;
  v28 = v14;
  v29 = a2;
  Date.init()();
  v16 = *v15;
  v30 = a2;
  v17 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t))(v16 + 200);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Experience]);
  v28 = &v25;
  v29 = v18;
  LOBYTE(v26) = 2;
  v17(&v34, 0xD00000000000002BLL, 0x80000001C2507170, 0, v11, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 60, "defaultExperiences(from:with:)", 30, v26, v31);
  v19 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  v20 = v19(v11, v8);
  v21 = v34;
  v22 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v20);
  v26 = a1;
  v27 = v5;
  v28 = v14;
  v29 = v30;
  Date.init()();
  v23 = *(void (**)(unint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t))(*(_QWORD *)v22 + 200);
  v28 = &v25;
  v29 = v18;
  LOBYTE(v26) = 2;
  v23(&v33, 0xD00000000000002ELL, 0x80000001C25071F0, 0, v11, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 63, "defaultExperiences(from:with:)", 30, v26, v32);
  v19(v11, v8);
  v34 = v21;
  specialized Array.append<A>(contentsOf:)(v33);
  return v34;
}

uint64_t specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, uint64_t (*a2)(char *, uint64_t, double)@<X3>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v12 = a2(v11, a1, a4);
  result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  *a3 = v12;
  return result;
}

uint64_t specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t a1@<X2>, uint64_t *a2@<X8>, double a3@<D0>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (uint64_t *)((char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v10 = specialized ExperiencesResolver.extractExperiences(from:score:with:)(v9, a1, a3);
  result = (*(uint64_t (**)(_QWORD *, uint64_t))(v7 + 8))(v9, v6);
  *a2 = v10;
  return result;
}

uint64_t specialized closure #1 in ExperiencesResolver.defaultExperiences(from:with:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>, double a4@<D0>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  double *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;

  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (double *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v12 = *a1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v13 = specialized ExperiencesResolver.extractExperiences(from:score:with:)(v11, a2, v12, a4);
  result = (*(uint64_t (**)(double *, uint64_t))(v9 + 8))(v11, v8);
  *a3 = v13;
  return result;
}

uint64_t specialized ExperiencesResolver.extractExperiences(from:score:with:)(double *a1, uint64_t a2, double a3)
{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:)(a1, a2, (unint64_t)partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:), a3);
}

{
  return specialized ExperiencesResolver.extractExperiences(from:score:with:)(a1, a2, (unint64_t)partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:), (uint64_t)partial apply for closure #3 in ExperiencesResolver.extractExperiences(from:score:with:), (_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)partial apply, (uint64_t)partial apply for specialized closure #5 in ExperiencesResolver.extractExperiences(from:score:with:), a3);
}

uint64_t specialized ExperiencesResolver.extractExperiences(from:score:with:)(double *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  void *v101;
  void (*v102)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)());
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  void (*v109)(char *, unint64_t, uint64_t);
  unint64_t v110;
  char *v111;
  char *v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(char *, uint64_t, uint64_t);
  char *v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  uint8_t *v125;
  uint64_t v126;
  double *v127;
  objc_class *v128;
  id v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  char *v136;
  char *v137;
  char *v138;
  int v139;
  uint64_t v140;
  NSObject *v141;
  os_log_type_t v142;
  BOOL v143;
  objc_class *v144;
  uint8_t *v145;
  char *v146;
  char *v147;
  uint64_t v148;
  void (*v149)(char *, uint64_t);
  uint64_t v150;
  id v151;
  char *v152;
  void *v153;
  char v154;
  void *v155;
  char *v156;
  id v157;
  char *v158;
  uint64_t v159;
  id v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  char v166;
  char v167;
  void (*v168)(char *, char *, uint64_t);
  uint64_t v169;
  id v170;
  id v171;
  id v172;
  char *v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  char *v179;
  int v180;
  int v181;
  uint64_t v182;
  NSObject *v183;
  os_log_type_t v184;
  BOOL v185;
  char *v186;
  char *v187;
  uint8_t *v188;
  uint8_t *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  NSObject *v197;
  os_log_type_t v198;
  uint8_t *v199;
  void (*v200)(char *, uint64_t);
  uint64_t v201;
  unint64_t v202;
  int v204;
  uint64_t v205;
  char *v206;
  void (*v207)(uint64_t, uint64_t);
  uint64_t v208;
  char *v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(char *, char *, uint64_t);
  uint64_t v216;
  NSObject *v217;
  char *v218;
  os_log_type_t v219;
  BOOL v220;
  uint64_t v221;
  uint8_t *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  void (*v226)(char *, uint64_t);
  uint64_t v227;
  char *v228;
  char *v229;
  int v230;
  BOOL v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  char *v235;
  uint64_t v236;
  NSObject *v237;
  os_log_type_t v238;
  uint8_t *v239;
  uint64_t v240;
  uint64_t v241;
  unint64_t v242;
  int v243;
  uint64_t v244;
  char *v245;
  char *v246;
  NSObject *v247;
  os_log_type_t v248;
  BOOL v249;
  uint64_t v250;
  uint8_t *v251;
  uint64_t v252;
  uint64_t v253;
  char *v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  char *v259;
  int v260;
  int v261;
  uint64_t v262;
  uint8_t *v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  char *v267;
  NSObject *v268;
  os_log_type_t v269;
  uint64_t v270;
  uint8_t *v271;
  uint64_t v272;
  uint64_t v273;
  unint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  uint64_t v278;
  char *v279;
  id v280;
  uint64_t v281;
  char *v282;
  char *v283;
  uint64_t v284;
  char *v285;
  NSObject *v286;
  os_log_type_t v287;
  uint64_t v288;
  uint8_t *v289;
  uint64_t v290;
  uint64_t v291;
  unint64_t v292;
  char *v293;
  uint64_t v294;
  char *v295;
  uint64_t v296;
  char *v297;
  id v298;
  uint64_t v299;
  uint64_t v300;
  char *v301;
  NSObject *v302;
  os_log_type_t v303;
  uint64_t v304;
  uint8_t *v305;
  uint64_t v306;
  uint64_t v307;
  unint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  uint64_t v312;
  char *v313;
  void *v314;
  uint64_t v315;
  char *v316;
  NSObject *v317;
  os_log_type_t v318;
  uint64_t v319;
  uint8_t *v320;
  uint64_t v321;
  uint64_t v322;
  unint64_t v323;
  id v324;
  uint64_t v325;
  NSObject *v326;
  os_log_type_t v327;
  BOOL v328;
  uint8_t *v329;
  uint8_t *v330;
  void (*v331)(char *, uint64_t);
  uint64_t v332;
  char *v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  id v339;
  id v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  double v344;
  char *v345;
  double *v346;
  char *v347;
  uint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  char *v358;
  uint64_t v359;
  uint64_t v360;
  char *v361;
  char *v362;
  char *v363;
  uint64_t v364;
  uint64_t v365;
  char *v366;
  uint64_t v367;
  uint64_t v368;
  char *v369;
  char *v370;
  uint64_t v371;
  char *v372;
  char *v373;
  char *v374;
  uint64_t v375;
  uint64_t v376;
  char *v377;
  char *v378;
  char *v379;
  char *v380;
  char *v381;
  char *v382;
  char *v383;
  uint64_t v384;
  char *v385;
  char *v386;
  uint64_t v387;
  char *v388;
  char *v389;
  char *v390;
  uint64_t v391;
  uint64_t v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  char *v397;
  uint64_t v398;
  double v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  char *v409;
  char *v410;
  char *v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  char *v419;
  uint64_t v420;
  unsigned int v421;
  double *v422;
  unsigned int v423;
  uint64_t *v424;
  uint64_t v425;
  uint64_t v426;
  char *v427;
  uint64_t v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  objc_class *v432;
  char *v433;
  char *v434;
  uint64_t v435;
  unint64_t v436;
  uint64_t v437;

  v399 = *(double *)&a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1E0C80A78](v7);
  v433 = (char *)&v348 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for PommesRenderOptions.PromptType();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v432 = (objc_class *)((char *)&v348 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v11);
  v427 = (char *)&v348 - v13;
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  v428 = *(_QWORD *)(v14 - 8);
  v15 = MEMORY[0x1E0C80A78](v14);
  v434 = (char *)&v348 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v429 = (char *)&v348 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1E0C80A78](v18);
  v383 = (char *)&v348 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v20);
  v371 = (uint64_t)&v348 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v368 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v367 = *(_QWORD *)(v368 - 8);
  v22 = MEMORY[0x1E0C80A78](v368);
  v362 = (char *)&v348 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v366 = (char *)&v348 - v24;
  v355 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  v354 = *(_QWORD *)(v355 - 8);
  v25 = MEMORY[0x1E0C80A78](v355);
  v350 = (char *)&v348 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v353 = (char *)&v348 - v27;
  v360 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v359 = *(_QWORD *)(v360 - 8);
  v28 = MEMORY[0x1E0C80A78](v360);
  v352 = (char *)&v348 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v28);
  v358 = (char *)&v348 - v30;
  v365 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v364 = *(_QWORD *)(v365 - 8);
  v31 = MEMORY[0x1E0C80A78](v365);
  v357 = (char *)&v348 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v31);
  v363 = (char *)&v348 - v33;
  v376 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v375 = *(_QWORD *)(v376 - 8);
  v34 = MEMORY[0x1E0C80A78](v376);
  v370 = (char *)&v348 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v374 = (char *)&v348 - v36;
  v37 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  v38 = MEMORY[0x1E0C80A78](v37);
  v378 = (char *)&v348 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v38);
  v389 = (char *)&v348 - v40;
  v392 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  v391 = *(_QWORD *)(v392 - 8);
  v41 = MEMORY[0x1E0C80A78](v392);
  v373 = (char *)&v348 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v41);
  v379 = (char *)&v348 - v43;
  v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  v45 = MEMORY[0x1E0C80A78](v44);
  v382 = (char *)&v348 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v47 = MEMORY[0x1E0C80A78](v45);
  v377 = (char *)&v348 - v48;
  MEMORY[0x1E0C80A78](v47);
  v388 = (char *)&v348 - v49;
  v400 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  v398 = *(_QWORD *)(v400 - 8);
  v50 = MEMORY[0x1E0C80A78](v400);
  v372 = (char *)&v348 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  v52 = MEMORY[0x1E0C80A78](v50);
  v361 = (char *)&v348 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v349 = (char *)&v348 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v351 = (char *)&v348 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v356 = (char *)&v348 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v369 = (char *)&v348 - v61;
  v62 = MEMORY[0x1E0C80A78](v60);
  v380 = (char *)&v348 - v63;
  MEMORY[0x1E0C80A78](v62);
  v390 = (char *)&v348 - v64;
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1E0C80A78](v65);
  v381 = (char *)&v348 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1E0C80A78](v67);
  v393 = (char *)&v348 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  v69 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v70 = MEMORY[0x1E0C80A78](v69);
  v397 = (char *)&v348 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v70);
  v385 = (char *)&v348 - v72;
  v387 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  v384 = *(_QWORD *)(v387 - 8);
  MEMORY[0x1E0C80A78](v387);
  v386 = (char *)&v348 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v405 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  v402 = *(_QWORD *)(v405 - 8);
  v74 = MEMORY[0x1E0C80A78](v405);
  v394 = (char *)&v348 - ((v75 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = MEMORY[0x1E0C80A78](v74);
  v401 = (char *)&v348 - v77;
  MEMORY[0x1E0C80A78](v76);
  v409 = (char *)&v348 - v78;
  v408 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v407 = *(_QWORD *)(v408 - 8);
  MEMORY[0x1E0C80A78](v408);
  v411 = (char *)&v348 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1E0C80A78](v80);
  v415 = (char *)&v348 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  v416 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  v418 = *(_QWORD *)(v416 - 8);
  v82 = MEMORY[0x1E0C80A78](v416);
  v406 = (char *)&v348 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v82);
  v412 = (char *)&v348 - v84;
  v85 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  v430 = *(_QWORD *)(v85 - 8);
  v431 = v85;
  MEMORY[0x1E0C80A78](v85);
  v87 = (char *)&v348 - ((v86 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = type metadata accessor for Date();
  v425 = *(_QWORD *)(v88 - 8);
  v426 = v88;
  MEMORY[0x1E0C80A78](v88);
  v90 = (char *)&v348 - ((v89 + 15) & 0xFFFFFFFFFFFFFFF0);
  v91 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v417 = *(_QWORD *)(v91 - 8);
  v92 = MEMORY[0x1E0C80A78](v91);
  v396 = (char *)&v348 - ((v93 + 15) & 0xFFFFFFFFFFFFFFF0);
  v94 = MEMORY[0x1E0C80A78](v92);
  v395 = (char *)&v348 - v95;
  MEMORY[0x1E0C80A78](v94);
  v97 = (char *)&v348 - v96;
  v414 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  v413 = *(_QWORD *)(v414 - 8);
  MEMORY[0x1E0C80A78](v414);
  v99 = (char *)&v348 - ((v98 + 15) & 0xFFFFFFFFFFFFFFF0);
  v437 = a3;
  v422 = a1;
  v100 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1)
    v100 = swift_once();
  v424 = &v348;
  v101 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v100);
  v346 = (double *)&v437;
  v347 = v99;
  v419 = v99;
  Date.init()();
  v102 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(_QWORD *)v101 + 200);
  v420 = v91;
  v346 = &v344;
  v347 = (char *)v91;
  LOBYTE(v344) = 2;
  v102(0xD00000000000001ELL, 0x80000001C2507220, 0, v90, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 108, "extractExperiences(from:score:with:)", 36, LODWORD(v344), partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:));
  v404 = 0;
  (*(void (**)(char *, uint64_t))(v425 + 8))(v90, v426);
  v103 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  v104 = MEMORY[0x1C3BBBC2C](v103);
  (*(void (**)(char *, uint64_t))(v430 + 8))(v87, v431);
  v105 = *(_QWORD *)(v104 + 16);
  v106 = v97;
  if (v105)
  {
    v410 = v97;
    v107 = v428;
    v108 = v104 + ((*(unsigned __int8 *)(v428 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v428 + 80));
    v431 = *(_QWORD *)(v428 + 72);
    v109 = *(void (**)(char *, unint64_t, uint64_t))(v428 + 16);
    LODWORD(v430) = *MEMORY[0x1E0D6F290];
    LODWORD(v426) = *MEMORY[0x1E0D6F280];
    LODWORD(v424) = *MEMORY[0x1E0D6F288];
    v421 = *MEMORY[0x1E0D98E70];
    v423 = *MEMORY[0x1E0D98E68];
    LODWORD(v425) = *MEMORY[0x1E0D98E78];
    v403 = v104;
    swift_bridgeObjectRetain();
    v110 = MEMORY[0x1E0DEE9D8];
    v111 = v429;
    while (1)
    {
      v109(v111, v108, v14);
      v112 = v434;
      v109(v434, (unint64_t)v111, v14);
      v113 = (*(uint64_t (**)(char *, uint64_t))(v107 + 88))(v112, v14);
      if (v113 == (_DWORD)v430)
      {
        v114 = (uint64_t)v433;
        (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v433, v425, v9);
      }
      else
      {
        v114 = (uint64_t)v433;
        if (v113 == (_DWORD)v426)
        {
          (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v433, v423, v9);
        }
        else
        {
          if (v113 != (_DWORD)v424)
          {
            if (one-time initialization token for pommes != -1)
              swift_once();
            v121 = type metadata accessor for Logger();
            __swift_project_value_buffer(v121, (uint64_t)static Logger.pommes);
            v122 = Logger.logObject.getter();
            v123 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v122, v123))
            {
              v124 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v124 = 0;
              _os_log_impl(&dword_1C2356000, v122, v123, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v124, 2u);
              v125 = v124;
              v107 = v428;
              MEMORY[0x1C3BBFF64](v125, -1, -1);
            }

            v114 = (uint64_t)v433;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v433, 1, 1, v9);
            (*(void (**)(char *, uint64_t))(v107 + 8))(v434, v14);
            v111 = v429;
            goto LABEL_14;
          }
          (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v433, v421, v9);
        }
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v10 + 56))(v114, 0, 1, v9);
LABEL_14:
      (*(void (**)(char *, uint64_t))(v107 + 8))(v111, v14);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v114, 1, v9) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v114, &demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        v115 = v114;
        v116 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
        v117 = v427;
        v116(v427, v115, v9);
        v116((char *)v432, (uint64_t)v117, v9);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v118 = v110;
        else
          v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v110 + 16) + 1, 1, v110);
        v120 = *(_QWORD *)(v118 + 16);
        v119 = *(_QWORD *)(v118 + 24);
        if (v120 >= v119 >> 1)
          v118 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v119 > 1, v120 + 1, 1, v118);
        *(_QWORD *)(v118 + 16) = v120 + 1;
        v110 = v118;
        v116((char *)(v118+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v120), (uint64_t)v432, v9);
        v107 = v428;
        v111 = v429;
      }
      v108 += v431;
      if (!--v105)
      {
        v126 = swift_bridgeObjectRelease_n();
        v106 = v410;
        v127 = (double *)v110;
        goto LABEL_28;
      }
    }
  }
  v126 = swift_bridgeObjectRelease();
  v127 = (double *)MEMORY[0x1E0DEE9D8];
LABEL_28:
  MEMORY[0x1E0C80A78](v126);
  v346 = v127;
  v128 = (objc_class *)type metadata accessor for PommesRenderOptions();
  v129 = objc_allocWithZone(v128);
  v130 = (char *)PommesRenderOptions.init(_:)();
  v131 = (uint64_t)v415;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  v132 = v418;
  v133 = v416;
  v134 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v418 + 48))(v131, 1, v416);
  v135 = v420;
  v136 = v419;
  if (v134 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v131, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
LABEL_63:

    (*(void (**)(char *, uint64_t))(v417 + 8))(v106, v135);
    (*(void (**)(char *, uint64_t))(v413 + 8))(v136, v414);
    return MEMORY[0x1E0DEE9D8];
  }
  v432 = v128;
  v433 = (char *)v127;
  v137 = v412;
  (*(void (**)(char *, uint64_t, uint64_t))(v132 + 32))(v412, v131, v133);
  v138 = v406;
  (*(void (**)(char *, char *, uint64_t))(v132 + 16))(v406, v137, v133);
  v139 = (*(uint64_t (**)(char *, uint64_t))(v132 + 88))(v138, v133);
  if (v139 != *MEMORY[0x1E0D6D078])
  {
    v180 = v139;
    v181 = *MEMORY[0x1E0D6D070];
    swift_bridgeObjectRelease();
    if (v180 != v181)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v196 = type metadata accessor for Logger();
      __swift_project_value_buffer(v196, (uint64_t)static Logger.pommes);
      v197 = Logger.logObject.getter();
      v198 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v197, v198))
      {
        v199 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v199 = 0;
        _os_log_impl(&dword_1C2356000, v197, v198, "unexpected experience component", v199, 2u);
        MEMORY[0x1C3BBFF64](v199, -1, -1);
      }

      v200 = *(void (**)(char *, uint64_t))(v132 + 8);
      v200(v412, v133);
      v200(v138, v133);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v132 + 96))(v138, v133);
    (*(void (**)(char *, char *, uint64_t))(v402 + 32))(v409, v138, v405);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v182 = type metadata accessor for Logger();
    v433 = (char *)__swift_project_value_buffer(v182, (uint64_t)static Logger.pommes);
    v183 = Logger.logObject.getter();
    v184 = static os_log_type_t.debug.getter();
    v185 = os_log_type_enabled(v183, v184);
    v186 = v401;
    if (v185)
    {
      v187 = v130;
      v188 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v188 = 0;
      _os_log_impl(&dword_1C2356000, v183, v184, "Adding a client driven experience", v188, 2u);
      v189 = v188;
      v130 = v187;
      MEMORY[0x1C3BBFF64](v189, -1, -1);
    }

    v190 = MEMORY[0x1C3BBC250]();
    v191 = *(_QWORD *)(v190 + 16);
    v192 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
    v193 = *(_QWORD *)(v192 - 8);
    if (v191)
    {
      v194 = (uint64_t)v388;
      (*(void (**)(char *, unint64_t, uint64_t))(v193 + 16))(v388, v190 + ((*(unsigned __int8 *)(v193 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v193 + 80)), v192);
      v195 = 0;
    }
    else
    {
      v195 = 1;
      v194 = (uint64_t)v388;
    }
    v434 = v130;
    v432 = *(objc_class **)(v193 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v432)(v194, v195, 1, v192);
    swift_bridgeObjectRelease();
    v431 = *(_QWORD *)(v193 + 48);
    v204 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v431)(v194, 1, v192);
    v205 = (uint64_t)v389;
    if (v204 == 1)
    {
      v430 = v193;
      outlined destroy of MediaUserStateCenter?(v194, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
      goto LABEL_75;
    }
    v206 = v380;
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    v207 = *(void (**)(uint64_t, uint64_t))(v193 + 8);
    v429 = (char *)v192;
    v207(v194, v192);
    v208 = v398;
    v209 = v390;
    v210 = v206;
    v211 = v400;
    (*(void (**)(char *, char *, uint64_t))(v398 + 32))(v390, v210, v400);
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
    v212 = v391;
    v213 = v392;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v391 + 48))(v205, 1, v392) == 1)
    {
      v430 = v193;
      (*(void (**)(char *, uint64_t))(v208 + 8))(v209, v211);
      outlined destroy of MediaUserStateCenter?(v205, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      v186 = v401;
      v192 = (uint64_t)v429;
LABEL_75:
      v214 = v402;
      v215 = *(void (**)(char *, char *, uint64_t))(v402 + 16);
      v216 = v405;
      v215(v186, v409, v405);
      v217 = Logger.logObject.getter();
      v218 = v186;
      v219 = static os_log_type_t.debug.getter();
      v220 = os_log_type_enabled(v217, v219);
      v221 = (uint64_t)v383;
      if (v220)
      {
        v410 = v106;
        v222 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v222 = 67109120;
        v223 = MEMORY[0x1C3BBC250]();
        if (*(_QWORD *)(v223 + 16))
        {
          v224 = (uint64_t)v377;
          (*(void (**)(char *, unint64_t, uint64_t))(v430 + 16))(v377, v223 + ((*(unsigned __int8 *)(v430 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v430 + 80)), v192);
          v225 = 0;
        }
        else
        {
          v225 = 1;
          v224 = (uint64_t)v377;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v432)(v224, v225, 1, v192);
        swift_bridgeObjectRelease();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v431)(v224, 1, v192) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v224, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
          v243 = 0;
          v244 = 1;
        }
        else
        {
          Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
          (*(void (**)(uint64_t, uint64_t))(v430 + 8))(v224, v192);
          v244 = 0;
          v243 = 1;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v398 + 56))(v221, v244, 1, v400);
        outlined destroy of MediaUserStateCenter?(v221, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        v226 = *(void (**)(char *, uint64_t))(v214 + 8);
        v227 = v405;
        v226(v401, v405);
        LODWORD(v436) = v243;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v217, v219, "Has clientComponent? %{BOOL}d", v222, 8u);
        MEMORY[0x1C3BBFF64](v222, -1, -1);
        v106 = v410;
      }
      else
      {
        v226 = *(void (**)(char *, uint64_t))(v214 + 8);
        v226(v218, v216);
        v227 = v216;
      }

      v245 = v394;
      v246 = v409;
      v215(v394, v409, v227);
      v247 = Logger.logObject.getter();
      v248 = static os_log_type_t.debug.getter();
      v249 = os_log_type_enabled(v247, v248);
      v250 = (uint64_t)v382;
      if (!v249)
      {
        v254 = v245;
        v255 = v106;
        v226(v254, v227);
        v256 = v416;
        v257 = v420;
LABEL_98:

        v226(v246, v227);
        (*(void (**)(char *, uint64_t))(v418 + 8))(v412, v256);
        (*(void (**)(char *, uint64_t))(v417 + 8))(v255, v257);
        (*(void (**)(char *, uint64_t))(v413 + 8))(v419, v414);
        return MEMORY[0x1E0DEE9D8];
      }
      v251 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v251 = 67109120;
      v252 = MEMORY[0x1C3BBC250]();
      if (*(_QWORD *)(v252 + 16))
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v430 + 16))(v250, v252 + ((*(unsigned __int8 *)(v430 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v430 + 80)), v192);
        v253 = 0;
      }
      else
      {
        v253 = 1;
      }
      v258 = (uint64_t)v378;
      v255 = v106;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v432)(v250, v253, 1, v192);
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v431)(v250, 1, v192) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v250, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v391 + 56))(v258, 1, 1, v392);
        v256 = v416;
        v257 = v420;
      }
      else
      {
        v259 = v372;
        Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
        (*(void (**)(uint64_t, uint64_t))(v430 + 8))(v250, v192);
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
        (*(void (**)(char *, uint64_t))(v398 + 8))(v259, v400);
        v260 = 1;
        v261 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v391 + 48))(v258, 1, v392);
        v256 = v416;
        v257 = v420;
        if (v261 != 1)
        {
LABEL_97:
          outlined destroy of MediaUserStateCenter?(v258, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
          v262 = v405;
          v226(v394, v405);
          LODWORD(v436) = v260;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2356000, v247, v248, "Has domainComponent? %{BOOL}d", v251, 8u);
          v263 = v251;
          v227 = v262;
          MEMORY[0x1C3BBFF64](v263, -1, -1);
          v246 = v409;
          goto LABEL_98;
        }
      }
      v260 = 0;
      goto LABEL_97;
    }
    v228 = v379;
    (*(void (**)(char *, uint64_t, uint64_t))(v212 + 32))(v379, v205, v213);
    v229 = v373;
    (*(void (**)(char *, char *, uint64_t))(v212 + 16))(v373, v228, v213);
    v230 = (*(uint64_t (**)(char *, uint64_t))(v212 + 88))(v229, v213);
    v231 = v230 == *MEMORY[0x1E0D6FA68];
    v232 = v213;
    v233 = v212;
    v410 = v106;
    if (v231)
    {
      (*(void (**)(char *, uint64_t))(v212 + 96))(v229, v213);
      (*(void (**)(char *, char *, uint64_t))(v375 + 32))(v374, v229, v376);
      v234 = v398;
      v235 = v369;
      v236 = v400;
      (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v369, v390, v400);
      v237 = Logger.logObject.getter();
      v238 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v237, v238))
      {
        v239 = (uint8_t *)swift_slowAlloc();
        v240 = swift_slowAlloc();
        v436 = v240;
        *(_DWORD *)v239 = 136315138;
        v241 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v435 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v241, v242, (uint64_t *)&v436);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v433 = *(char **)(v234 + 8);
        ((void (*)(char *, uint64_t))v433)(v235, v236);
        _os_log_impl(&dword_1C2356000, v237, v238, "Adding AudioExperience with identifier %s to PommesResponse", v239, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v240, -1, -1);
        MEMORY[0x1C3BBFF64](v239, -1, -1);
      }
      else
      {
        v433 = *(char **)(v234 + 8);
        ((void (*)(char *, uint64_t))v433)(v235, v236);
      }

      v275 = *(_QWORD *)&v399;
      type metadata accessor for AudioExperience();
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v276 = v375;
      v277 = v374;
      v278 = v376;
      (*(void (**)(char *, char *, uint64_t))(v375 + 16))(v370, v374, v376);
      (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v395, v410, v420);
      outlined init with copy of ClientExperienceSignals?(v275, v371);
      v279 = v434;
      v280 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v281 = swift_allocObject();
      *(_OWORD *)(v281 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v281 + 32) = v280;
      v436 = v281;
      specialized Array._endMutation()();
      v201 = v436;

      (*(void (**)(char *, uint64_t))(v276 + 8))(v277, v278);
      (*(void (**)(char *, uint64_t))(v391 + 8))(v379, v392);
      v282 = v390;
    }
    else
    {
      v264 = v420;
      v265 = v400;
      if (v230 == *MEMORY[0x1E0D6FA70])
      {
        (*(void (**)(char *, uint64_t))(v233 + 96))(v229, v213);
        (*(void (**)(char *, char *, uint64_t))(v367 + 32))(v366, v229, v368);
        v266 = v398;
        v267 = v361;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v361, v390, v265);
        v268 = Logger.logObject.getter();
        v269 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v268, v269))
        {
          v270 = v265;
          v271 = (uint8_t *)swift_slowAlloc();
          v272 = swift_slowAlloc();
          v436 = v272;
          *(_DWORD *)v271 = 136315138;
          v273 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v435 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v273, v274, (uint64_t *)&v436);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v433 = *(char **)(v266 + 8);
          ((void (*)(char *, uint64_t))v433)(v267, v270);
          _os_log_impl(&dword_1C2356000, v268, v269, "Adding VideoExperience with identifier %s to PommesResponse", v271, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v272, -1, -1);
          MEMORY[0x1C3BBFF64](v271, -1, -1);
        }
        else
        {
          v433 = *(char **)(v266 + 8);
          ((void (*)(char *, uint64_t))v433)(v267, v265);
        }

        v293 = v390;
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v294 = v367;
        v295 = v366;
        v296 = v368;
        (*(void (**)(char *, char *, uint64_t))(v367 + 16))(v362, v366, v368);
        (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v395, v410, v420);
        objc_allocWithZone((Class)type metadata accessor for VideoExperience());
        v297 = v434;
        v298 = (id)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v299 = swift_allocObject();
        *(_OWORD *)(v299 + 16) = xmmword_1C24FB5A0;
        *(_QWORD *)(v299 + 32) = v298;
        v436 = v299;
        specialized Array._endMutation()();
        v201 = v436;

        (*(void (**)(char *, uint64_t))(v294 + 8))(v295, v296);
        (*(void (**)(char *, uint64_t))(v391 + 8))(v379, v392);
        v282 = v293;
      }
      else
      {
        v283 = v390;
        if (v230 == *MEMORY[0x1E0D6FA58])
        {
          (*(void (**)(char *, uint64_t))(v233 + 96))(v229, v232);
          (*(void (**)(char *, char *, uint64_t))(v364 + 32))(v363, v229, v365);
          v284 = v398;
          v285 = v356;
          (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v356, v283, v265);
          v286 = Logger.logObject.getter();
          v287 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v286, v287))
          {
            v288 = v265;
            v289 = (uint8_t *)swift_slowAlloc();
            v290 = swift_slowAlloc();
            v436 = v290;
            *(_DWORD *)v289 = 136315138;
            v291 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
            v435 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v291, v292, (uint64_t *)&v436);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v433 = *(char **)(v284 + 8);
            ((void (*)(char *, uint64_t))v433)(v285, v288);
            _os_log_impl(&dword_1C2356000, v286, v287, "Adding GeoExperience with identifier %s to PommesResponse", v289, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v290, -1, -1);
            MEMORY[0x1C3BBFF64](v289, -1, -1);
          }
          else
          {
            v433 = *(char **)(v284 + 8);
            ((void (*)(char *, uint64_t))v433)(v285, v265);
          }

          v309 = v390;
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v310 = v364;
          v311 = v363;
          v312 = v365;
          (*(void (**)(char *, char *, uint64_t))(v364 + 16))(v357, v363, v365);
          (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v395, v410, v420);
          objc_allocWithZone((Class)type metadata accessor for GeoExperience());
          v313 = v434;
          v314 = (void *)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        }
        else
        {
          if (v230 != *MEMORY[0x1E0D6FA60])
          {
            if (v230 != *MEMORY[0x1E0D6FA50])
            {
              v326 = Logger.logObject.getter();
              v327 = static os_log_type_t.error.getter();
              v328 = os_log_type_enabled(v326, v327);
              v130 = v434;
              if (v328)
              {
                v329 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v329 = 0;
                _os_log_impl(&dword_1C2356000, v326, v327, "Unexpected DomainComponent encountered when building Client Driven experience", v329, 2u);
                v330 = v329;
                v265 = v400;
                MEMORY[0x1C3BBFF64](v330, -1, -1);
              }

              v331 = *(void (**)(char *, uint64_t))(v391 + 8);
              v332 = v392;
              v331(v379, v392);
              (*(void (**)(char *, uint64_t))(v398 + 8))(v283, v265);
              (*(void (**)(char *, uint64_t))(v402 + 8))(v409, v405);
              (*(void (**)(char *, uint64_t))(v132 + 8))(v412, v416);
              v331(v229, v332);
              v135 = v264;
              goto LABEL_63;
            }
            (*(void (**)(char *, uint64_t))(v233 + 96))(v229, v232);
            (*(void (**)(char *, char *, uint64_t))(v354 + 32))(v353, v229, v355);
            v315 = v398;
            v316 = v349;
            (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v349, v283, v265);
            v317 = Logger.logObject.getter();
            v318 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v317, v318))
            {
              v319 = v265;
              v320 = (uint8_t *)swift_slowAlloc();
              v321 = swift_slowAlloc();
              v436 = v321;
              *(_DWORD *)v320 = 136315138;
              v322 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
              v435 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v322, v323, (uint64_t *)&v436);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v433 = *(char **)(v315 + 8);
              ((void (*)(char *, uint64_t))v433)(v316, v319);
              _os_log_impl(&dword_1C2356000, v317, v318, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v320, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1C3BBFF64](v321, -1, -1);
              MEMORY[0x1C3BBFF64](v320, -1, -1);
            }
            else
            {
              v433 = *(char **)(v315 + 8);
              ((void (*)(char *, uint64_t))v433)(v316, v265);
            }

            v333 = v390;
            Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
            v334 = v354;
            v335 = v353;
            v336 = v355;
            (*(void (**)(char *, char *, uint64_t))(v354 + 16))(v350, v353, v355);
            v337 = v410;
            v338 = v420;
            (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v395, v410, v420);
            v339 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
            v340 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
            Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
            dispatch thunk of Experience.associatedEntities.setter();

            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            v341 = swift_allocObject();
            *(_OWORD *)(v341 + 16) = xmmword_1C24FB5A0;
            *(_QWORD *)(v341 + 32) = v340;
            v436 = v341;
            specialized Array._endMutation()();
            v201 = v436;

            (*(void (**)(char *, uint64_t))(v334 + 8))(v335, v336);
            (*(void (**)(char *, uint64_t))(v391 + 8))(v379, v392);
            ((void (*)(char *, uint64_t))v433)(v333, v400);
            (*(void (**)(char *, uint64_t))(v402 + 8))(v409, v405);
            (*(void (**)(char *, uint64_t))(v418 + 8))(v412, v416);
            (*(void (**)(char *, uint64_t))(v417 + 8))(v337, v338);
LABEL_121:
            (*(void (**)(char *, uint64_t))(v413 + 8))(v419, v414);
            return v201;
          }
          (*(void (**)(char *, uint64_t))(v233 + 96))(v229, v232);
          (*(void (**)(char *, char *, uint64_t))(v359 + 32))(v358, v229, v360);
          v300 = v398;
          v301 = v351;
          (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v351, v283, v265);
          v302 = Logger.logObject.getter();
          v303 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v302, v303))
          {
            v304 = v265;
            v305 = (uint8_t *)swift_slowAlloc();
            v306 = swift_slowAlloc();
            v436 = v306;
            *(_DWORD *)v305 = 136315138;
            v307 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
            v435 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v307, v308, (uint64_t *)&v436);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v433 = *(char **)(v300 + 8);
            ((void (*)(char *, uint64_t))v433)(v301, v304);
            _os_log_impl(&dword_1C2356000, v302, v303, "Adding AppsExperience with identfier %s to PommesResponse", v305, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v306, -1, -1);
            MEMORY[0x1C3BBFF64](v305, -1, -1);
          }
          else
          {
            v433 = *(char **)(v300 + 8);
            ((void (*)(char *, uint64_t))v433)(v301, v265);
          }

          v309 = v390;
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v310 = v359;
          v311 = v358;
          v312 = v360;
          (*(void (**)(char *, char *, uint64_t))(v359 + 16))(v352, v358, v360);
          (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v395, v410, v420);
          objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
          v313 = v434;
          v314 = (void *)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        }
        v324 = v314;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v325 = swift_allocObject();
        *(_OWORD *)(v325 + 16) = xmmword_1C24FB5A0;
        *(_QWORD *)(v325 + 32) = v324;
        v436 = v325;
        specialized Array._endMutation()();
        v201 = v436;

        (*(void (**)(char *, uint64_t))(v310 + 8))(v311, v312);
        (*(void (**)(char *, uint64_t))(v391 + 8))(v379, v392);
        v282 = v309;
      }
    }
    ((void (*)(char *, uint64_t))v433)(v282, v400);
    (*(void (**)(char *, uint64_t))(v402 + 8))(v409, v405);
    (*(void (**)(char *, uint64_t))(v418 + 8))(v412, v416);
    (*(void (**)(char *, uint64_t))(v417 + 8))(v410, v420);
    goto LABEL_121;
  }
  (*(void (**)(char *, uint64_t))(v132 + 96))(v138, v133);
  (*(void (**)(char *, char *, uint64_t))(v407 + 32))(v411, v138, v408);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v434 = v130;
  v140 = type metadata accessor for Logger();
  __swift_project_value_buffer(v140, (uint64_t)static Logger.pommes);
  v141 = Logger.logObject.getter();
  v142 = static os_log_type_t.debug.getter();
  v143 = os_log_type_enabled(v141, v142);
  v144 = v432;
  if (v143)
  {
    v145 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v145 = 0;
    _os_log_impl(&dword_1C2356000, v141, v142, "Adding a server driven experience", v145, 2u);
    MEMORY[0x1C3BBFF64](v145, -1, -1);
  }

  v436 = MEMORY[0x1E0DEE9D8];
  v146 = v411;
  if ((Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter() & 1) != 0)
  {
    v147 = v386;
    v148 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    v431 = MEMORY[0x1C3BBBAD0](v148);
    v149 = *(void (**)(char *, uint64_t))(v384 + 8);
    v150 = v387;
    v149(v147, v387);
    (*(void (**)(char *, char *, uint64_t))(v417 + 16))(v395, v106, v420);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    v151 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    v152 = v434;
    v132 = v418;
    v153 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    v154 = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
    v431 = (uint64_t)v149;
    v149(v147, v150);
    v155 = v153;
    if ((v154 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
      type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C24FA1B0;
      v156 = v106;
      v157 = v153;
      Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
      ((void (*)(char *, uint64_t))v431)(v147, v150);
      dispatch thunk of Experience.associatedEntities.setter();

      v106 = v156;
      v132 = v418;
    }
    if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
    {
      v158 = v393;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      v159 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v159 - 8) + 56))(v158, 0, 1, v159);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    v160 = v155;
    MEMORY[0x1C3BBEE78]();
    v144 = v432;
    if (*(_QWORD *)((v436 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v436 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    v136 = v419;
    v146 = v411;
  }
  v161 = MEMORY[0x1C3BBC328]();
  MEMORY[0x1E0C80A78](v161);
  v344 = a4;
  v345 = v106;
  v346 = v422;
  v347 = v434;
  v162 = specialized Sequence.compactMap<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)partial apply, (uint64_t)&v342, v161, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EFC8]);
  swift_bridgeObjectRelease();
  v163 = specialized Array.append<A>(contentsOf:)(v162);
  v164 = *(_QWORD *)(MEMORY[0x1C3BBC31C](v163) + 16);
  swift_bridgeObjectRelease();
  v165 = v146;
  if (v164)
  {
    v166 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
    v167 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
    v432 = (objc_class *)MEMORY[0x1C3BBC31C]();
    v168 = *(void (**)(char *, char *, uint64_t))(v417 + 16);
    v410 = v106;
    v168(v396, v106, v420);
    v169 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    MEMORY[0x1E0C80A78](v169);
    v342 = v165;
    LOBYTE(v343) = v166 & 1;
    v344 = v399;
    v345 = (char *)&v437;
    LOBYTE(v346) = v167 & 1;
    v347 = v433;
    v170 = objc_allocWithZone(v144);
    PommesRenderOptions.init(_:)();
    swift_bridgeObjectRelease();
    v171 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    v172 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
    {
      v173 = v393;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      v174 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v174 - 8) + 56))(v173, 0, 1, v174);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    v175 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
    if ((v175 & 1) != 0)
    {
      v176 = v381;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
      v177 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v177 - 8) + 56))(v176, 0, 1, v177);
      v175 = dispatch thunk of GenericExperience.sageExperience.setter();
    }
    MEMORY[0x1C3BBEE78](v175);
    v106 = v410;
    v165 = v411;
    if (*(_QWORD *)((v436 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v436 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v178 = v420;
    v136 = v419;
    v179 = v434;
  }
  else
  {
    swift_bridgeObjectRelease();
    v179 = v434;
    v178 = v420;
  }
  v202 = v436;
  if (v436 >> 62)
  {
    type metadata accessor for Experience();
    swift_bridgeObjectRetain();
    v201 = _bridgeCocoaArray<A>(_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for Experience();

    v201 = v202;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v132 + 8))(v412, v133);
  (*(void (**)(char *, uint64_t))(v407 + 8))(v165, v408);
  (*(void (**)(char *, uint64_t))(v417 + 8))(v106, v178);
  (*(void (**)(char *, uint64_t))(v413 + 8))(v136, v414);
  return v201;
}

uint64_t specialized ExperiencesResolver.extractExperiences(from:score:with:)(double *a1, uint64_t a2, unint64_t a3, uint64_t a4, _QWORD *(*a5)(uint64_t *__return_ptr, uint64_t), uint64_t a6, double a7)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  void *v102;
  void (*v103)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, _QWORD *);
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char *v112;
  _QWORD *v113;
  void (**v114)(char *, unint64_t, uint64_t);
  void (*v115)(char *, _QWORD, _QWORD *);
  char *v116;
  uint64_t v117;
  int v118;
  void (*v119)(char *, _QWORD, uint64_t);
  void (*v120)(char *, _QWORD, uint64_t);
  void (*v121)(char *, char *, uint64_t);
  char *v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  NSObject *v128;
  os_log_type_t v129;
  uint8_t *v130;
  uint64_t v131;
  unint64_t v132;
  objc_class *v133;
  id v134;
  _QWORD *v135;
  char *v136;
  double *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  int v142;
  char *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  char *v147;
  char *v148;
  int v149;
  char *v150;
  uint64_t v151;
  NSObject *v152;
  os_log_type_t v153;
  uint8_t *v154;
  uint64_t v155;
  char *v156;
  void (*v157)(char *, uint64_t);
  char *v158;
  uint64_t v159;
  id v160;
  _QWORD *v161;
  uint64_t v162;
  char *v163;
  void *v164;
  id v165;
  char *v166;
  uint64_t v167;
  id v168;
  uint64_t v169;
  unint64_t v170;
  uint64_t v171;
  uint64_t v172;
  double *v173;
  char v174;
  char v175;
  uint64_t v176;
  id v177;
  id v178;
  id v179;
  char *v180;
  uint64_t v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  int v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  NSObject *v189;
  os_log_type_t v190;
  BOOL v191;
  char *v192;
  _QWORD *v193;
  uint8_t *v194;
  uint8_t *v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  NSObject *v203;
  os_log_type_t v204;
  uint64_t v205;
  uint8_t *v206;
  uint8_t *v207;
  void (*v208)(char *, uint64_t);
  uint64_t v209;
  id v210;
  unint64_t v211;
  void (*v212)(char *, uint64_t);
  char *v213;
  uint64_t v214;
  int v216;
  uint64_t v217;
  char *v218;
  char *v219;
  uint64_t v220;
  char *v221;
  char *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  int v226;
  uint64_t v227;
  void (*v228)(char *, char *, uint64_t);
  uint64_t v229;
  NSObject *v230;
  os_log_type_t v231;
  uint8_t *v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  void (*v237)(char *, uint64_t);
  char *v238;
  char *v239;
  int v240;
  uint64_t v241;
  char *v242;
  uint64_t v243;
  NSObject *v244;
  os_log_type_t v245;
  uint8_t *v246;
  uint64_t v247;
  uint64_t v248;
  unint64_t v249;
  int v250;
  uint64_t v251;
  uint64_t v252;
  uint8_t *v253;
  char *v254;
  NSObject *v255;
  os_log_type_t v256;
  uint8_t *v257;
  uint64_t v258;
  void (**v259)(char *, unint64_t, uint64_t);
  uint64_t v260;
  uint64_t v261;
  uint64_t v262;
  char *v263;
  char *v264;
  uint64_t v265;
  int v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  char *v270;
  uint64_t v271;
  NSObject *v272;
  os_log_type_t v273;
  uint8_t *v274;
  uint64_t v275;
  uint64_t v276;
  unint64_t v277;
  char *v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  _QWORD *v283;
  id v284;
  uint64_t v285;
  uint64_t v286;
  char *v287;
  uint64_t v288;
  NSObject *v289;
  os_log_type_t v290;
  uint8_t *v291;
  uint64_t v292;
  uint64_t v293;
  unint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  id v299;
  uint64_t v300;
  uint64_t v301;
  char *v302;
  uint64_t v303;
  NSObject *v304;
  os_log_type_t v305;
  uint8_t *v306;
  uint64_t v307;
  uint64_t v308;
  unint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  id v312;
  uint64_t v313;
  uint64_t v314;
  char *v315;
  uint64_t v316;
  NSObject *v317;
  os_log_type_t v318;
  uint8_t *v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  uint64_t v323;
  _QWORD *v324;
  id v325;
  uint64_t v326;
  NSObject *v327;
  os_log_type_t v328;
  BOOL v329;
  uint8_t *v330;
  uint8_t *v331;
  void (*v332)(char *, uint64_t);
  uint64_t v333;
  char *v334;
  char *v335;
  uint64_t v336;
  char *v337;
  uint64_t v338;
  id v339;
  id v340;
  uint64_t v341;
  char *v342;
  uint64_t v343;
  double v344;
  double *v345;
  double *v346;
  _QWORD *v347;
  uint64_t v348;
  char *v349;
  char *v350;
  char *v351;
  char *v352;
  char *v353;
  uint64_t v354;
  uint64_t v355;
  char *v356;
  char *v357;
  uint64_t v358;
  char *v359;
  uint64_t v360;
  char *v361;
  char *v362;
  uint64_t v363;
  char *v364;
  uint64_t v365;
  uint64_t v366;
  char *v367;
  char *v368;
  uint64_t v369;
  char *v370;
  uint64_t v371;
  char *v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  char *v381;
  char *v382;
  uint64_t v383;
  uint64_t v384;
  char *v385;
  uint64_t v386;
  char *v387;
  char *v388;
  char *v389;
  uint64_t v390;
  uint64_t v391;
  char *v392;
  char *v393;
  char *v394;
  char *v395;
  char *v396;
  uint64_t v397;
  uint64_t v398;
  double v399;
  uint64_t v400;
  char *v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  _QWORD *(*v405)(uint64_t *__return_ptr, uint64_t);
  uint64_t v406;
  char *v407;
  char *v408;
  char *v409;
  uint64_t v410;
  uint64_t v411;
  char *v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  char *v417;
  double *v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t v421;
  char *v422;
  uint64_t v423;
  char *v424;
  unsigned int v425;
  double *v426;
  unsigned int v427;
  int v428;
  uint64_t *v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  char *v436;
  char *v437;
  _QWORD *v438;
  void (**v439)(char *, unint64_t, uint64_t);
  _QWORD *v440;
  uint64_t v441;
  unint64_t v442;

  v397 = a6;
  v405 = a5;
  v416 = a4;
  v438 = (_QWORD *)a3;
  v399 = *(double *)&a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1E0C80A78](v9);
  v377 = (char *)&v348 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v11);
  v369 = (uint64_t)&v348 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v366 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v371 = *(_QWORD *)(v366 - 8);
  v13 = MEMORY[0x1E0C80A78](v366);
  v362 = (char *)&v348 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v370 = (char *)&v348 - v15;
  v355 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  v354 = *(_QWORD *)(v355 - 8);
  v16 = MEMORY[0x1E0C80A78](v355);
  v350 = (char *)&v348 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v353 = (char *)&v348 - v18;
  v358 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v360 = *(_QWORD *)(v358 - 8);
  v19 = MEMORY[0x1E0C80A78](v358);
  v352 = (char *)&v348 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v359 = (char *)&v348 - v21;
  v363 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v365 = *(_QWORD *)(v363 - 8);
  v22 = MEMORY[0x1E0C80A78](v363);
  v357 = (char *)&v348 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v22);
  v364 = (char *)&v348 - v24;
  v379 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v378 = *(_QWORD *)(v379 - 8);
  v25 = MEMORY[0x1E0C80A78](v379);
  v368 = (char *)&v348 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v374 = (char *)&v348 - v27;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  v29 = MEMORY[0x1E0C80A78](v28);
  v383 = (uint64_t)&v348 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v388 = (char *)&v348 - v31;
  v391 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  v390 = *(_QWORD *)(v391 - 8);
  v32 = MEMORY[0x1E0C80A78](v391);
  v373 = (char *)&v348 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v380 = (char *)&v348 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  v36 = MEMORY[0x1E0C80A78](v35);
  v376 = (char *)&v348 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x1E0C80A78](v36);
  v375 = (char *)&v348 - v39;
  MEMORY[0x1E0C80A78](v38);
  v387 = (char *)&v348 - v40;
  v400 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  v398 = *(_QWORD *)(v400 - 8);
  v41 = MEMORY[0x1E0C80A78](v400);
  v372 = (char *)&v348 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = MEMORY[0x1E0C80A78](v41);
  v361 = (char *)&v348 - v44;
  v45 = MEMORY[0x1E0C80A78](v43);
  v349 = (char *)&v348 - v46;
  v47 = MEMORY[0x1E0C80A78](v45);
  v351 = (char *)&v348 - v48;
  v49 = MEMORY[0x1E0C80A78](v47);
  v356 = (char *)&v348 - v50;
  v51 = MEMORY[0x1E0C80A78](v49);
  v367 = (char *)&v348 - v52;
  v53 = MEMORY[0x1E0C80A78](v51);
  v381 = (char *)&v348 - v54;
  MEMORY[0x1E0C80A78](v53);
  v389 = (char *)&v348 - v55;
  v56 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1E0C80A78](v56);
  v382 = (char *)&v348 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1E0C80A78](v58);
  v392 = (char *)&v348 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v61 = MEMORY[0x1E0C80A78](v60);
  v396 = (char *)&v348 - ((v62 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v61);
  v385 = (char *)&v348 - v63;
  v386 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  v384 = *(_QWORD *)(v386 - 8);
  MEMORY[0x1E0C80A78](v386);
  v417 = (char *)&v348 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v406 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  v402 = *(_QWORD *)(v406 - 8);
  v65 = MEMORY[0x1E0C80A78](v406);
  v393 = (char *)&v348 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = MEMORY[0x1E0C80A78](v65);
  v401 = (char *)&v348 - v68;
  MEMORY[0x1E0C80A78](v67);
  v407 = (char *)&v348 - v69;
  v411 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v410 = *(_QWORD *)(v411 - 8);
  MEMORY[0x1E0C80A78](v411);
  v409 = (char *)&v348 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1E0C80A78](v71);
  v73 = (char *)&v348 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for PommesRenderOptions.PromptType();
  v75 = *(_QWORD *)(v74 - 8);
  v76 = MEMORY[0x1E0C80A78](v74);
  v436 = (char *)&v348 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v76);
  v431 = (char *)&v348 - v78;
  v440 = (_QWORD *)type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  v432 = *(v440 - 1);
  v79 = MEMORY[0x1E0C80A78](v440);
  v437 = (char *)&v348 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v79);
  v439 = (void (**)(char *, unint64_t, uint64_t))((char *)&v348 - v81);
  v82 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1E0C80A78](v82);
  v415 = (char *)&v348 - ((v83 + 15) & 0xFFFFFFFFFFFFFFF0);
  v423 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  v421 = *(_QWORD *)(v423 - 8);
  v84 = MEMORY[0x1E0C80A78](v423);
  v408 = (char *)&v348 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v84);
  v412 = (char *)&v348 - v86;
  v87 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  v434 = *(_QWORD *)(v87 - 8);
  v435 = v87;
  MEMORY[0x1E0C80A78](v87);
  v89 = (char *)&v348 - ((v88 + 15) & 0xFFFFFFFFFFFFFFF0);
  v433 = type metadata accessor for Date();
  v430 = *(_QWORD *)(v433 - 8);
  MEMORY[0x1E0C80A78](v433);
  v91 = (char *)&v348 - ((v90 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v419 = *(_QWORD *)(v92 - 8);
  v93 = MEMORY[0x1E0C80A78](v92);
  v395 = (char *)&v348 - ((v94 + 15) & 0xFFFFFFFFFFFFFFF0);
  v95 = MEMORY[0x1E0C80A78](v93);
  v394 = (char *)&v348 - v96;
  MEMORY[0x1E0C80A78](v95);
  v98 = (char *)&v348 - v97;
  v414 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  v413 = *(_QWORD *)(v414 - 8);
  MEMORY[0x1E0C80A78](v414);
  v100 = (char *)&v348 - ((v99 + 15) & 0xFFFFFFFFFFFFFFF0);
  v426 = a1;
  v101 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1)
    v101 = swift_once();
  v429 = &v348;
  v102 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v101);
  v346 = v418;
  v347 = v100;
  v422 = v100;
  Date.init()();
  v103 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, _QWORD *))(*(_QWORD *)v102 + 200);
  v420 = v92;
  v346 = &v344;
  v347 = (_QWORD *)v92;
  LOBYTE(v344) = 2;
  v424 = v98;
  v103(0xD00000000000001ELL, 0x80000001C2507220, 0, v91, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 108, "extractExperiences(from:score:with:)", 36, LODWORD(v344), v438);
  v404 = 0;
  (*(void (**)(char *, uint64_t))(v430 + 8))(v91, v433);
  v104 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  v105 = MEMORY[0x1C3BBBC2C](v104);
  (*(void (**)(char *, uint64_t))(v434 + 8))(v89, v435);
  v106 = *(_QWORD *)(v105 + 16);
  if (v106)
  {
    v107 = v105 + ((*(unsigned __int8 *)(v432 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v432 + 80));
    v108 = *(_QWORD *)(v432 + 72);
    v109 = v432;
    v434 = *(_QWORD *)(v432 + 16);
    v435 = v108;
    LODWORD(v433) = *MEMORY[0x1E0D6F290];
    LODWORD(v430) = *MEMORY[0x1E0D6F280];
    v428 = *MEMORY[0x1E0D6F288];
    v425 = *MEMORY[0x1E0D98E70];
    v427 = *MEMORY[0x1E0D98E68];
    LODWORD(v429) = *MEMORY[0x1E0D98E78];
    v403 = v105;
    swift_bridgeObjectRetain();
    v438 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      v110 = v74;
      v111 = v75;
      v112 = v73;
      v114 = v439;
      v113 = v440;
      v115 = (void (*)(char *, _QWORD, _QWORD *))v434;
      ((void (*)(_QWORD, unint64_t, _QWORD *))v434)(v439, v107, v440);
      v116 = v437;
      v115(v437, v114, v113);
      v117 = v109;
      v118 = (*(uint64_t (**)(char *, _QWORD *))(v109 + 88))(v116, v113);
      if (v118 == (_DWORD)v433)
      {
        v75 = v111;
        v119 = *(void (**)(char *, _QWORD, uint64_t))(v111 + 104);
        v73 = v112;
        v74 = v110;
        v119(v112, v429, v110);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v112, 0, 1, v110);
      }
      else
      {
        v73 = v112;
        v75 = v111;
        if (v118 == (_DWORD)v430)
        {
          v120 = *(void (**)(char *, _QWORD, uint64_t))(v111 + 104);
          v74 = v110;
          v120(v112, v427, v110);
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v112, 0, 1, v110);
        }
        else
        {
          v74 = v110;
          if (v118 == v428)
          {
            (*(void (**)(char *, _QWORD, uint64_t))(v75 + 104))(v112, v425, v110);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v112, 0, 1, v110);
          }
          else
          {
            if (one-time initialization token for pommes != -1)
              swift_once();
            v127 = type metadata accessor for Logger();
            __swift_project_value_buffer(v127, (uint64_t)static Logger.pommes);
            v128 = Logger.logObject.getter();
            v129 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v128, v129))
            {
              v130 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v130 = 0;
              _os_log_impl(&dword_1C2356000, v128, v129, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v130, 2u);
              v117 = v432;
              MEMORY[0x1C3BBFF64](v130, -1, -1);
            }

            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v112, 1, 1, v74);
            (*(void (**)(char *, _QWORD *))(v117 + 8))(v437, v440);
          }
        }
      }
      (*(void (**)(void (**)(char *, unint64_t, uint64_t), _QWORD *))(v117 + 8))(v439, v440);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v75 + 48))(v73, 1, v74) == 1)
      {
        v109 = v117;
        outlined destroy of MediaUserStateCenter?((uint64_t)v73, &demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        v121 = *(void (**)(char *, char *, uint64_t))(v75 + 32);
        v122 = v431;
        v121(v431, v73, v74);
        v121(v436, v122, v74);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v438 = (_QWORD *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v438[2] + 1, 1, (unint64_t)v438);
        v123 = (uint64_t)v438;
        v125 = v438[2];
        v124 = v438[3];
        if (v125 >= v124 >> 1)
          v123 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v124 > 1, v125 + 1, 1, (unint64_t)v438);
        *(_QWORD *)(v123 + 16) = v125 + 1;
        v126 = (*(unsigned __int8 *)(v75 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v75 + 80);
        v438 = (_QWORD *)v123;
        v121((char *)(v123 + v126 + *(_QWORD *)(v75 + 72) * v125), v436, v74);
        v109 = v432;
      }
      v107 += v435;
      --v106;
    }
    while (v106);
    v131 = swift_bridgeObjectRelease_n();
    v132 = (unint64_t)v438;
  }
  else
  {
    v131 = swift_bridgeObjectRelease();
    v132 = MEMORY[0x1E0DEE9D8];
  }
  MEMORY[0x1E0C80A78](v131);
  v346 = (double *)v132;
  v133 = (objc_class *)type metadata accessor for PommesRenderOptions();
  v134 = objc_allocWithZone(v133);
  v135 = (_QWORD *)PommesRenderOptions.init(_:)();
  v136 = v415;
  v137 = v426;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  v138 = (uint64_t)v136;
  v139 = v421;
  v140 = v136;
  v141 = v423;
  v142 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v421 + 48))(v140, 1, v423);
  v143 = v422;
  v144 = v424;
  v145 = v417;
  if (v142 != 1)
  {
    v438 = (_QWORD *)v132;
    v146 = v138;
    v147 = v412;
    (*(void (**)(char *, uint64_t, uint64_t))(v139 + 32))(v412, v146, v141);
    v148 = v408;
    (*(void (**)(char *, char *, uint64_t))(v139 + 16))(v408, v147, v141);
    v149 = (*(uint64_t (**)(char *, uint64_t))(v139 + 88))(v148, v141);
    if (v149 == *MEMORY[0x1E0D6D078])
    {
      (*(void (**)(char *, uint64_t))(v139 + 96))(v148, v141);
      v150 = v409;
      (*(void (**)(char *, char *, uint64_t))(v410 + 32))(v409, v148, v411);
      if (one-time initialization token for pommes != -1)
        swift_once();
      v440 = v135;
      v151 = type metadata accessor for Logger();
      __swift_project_value_buffer(v151, (uint64_t)static Logger.pommes);
      v152 = Logger.logObject.getter();
      v153 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v152, v153))
      {
        v154 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v154 = 0;
        _os_log_impl(&dword_1C2356000, v152, v153, "Adding a server driven experience", v154, 2u);
        MEMORY[0x1C3BBFF64](v154, -1, -1);
      }

      v442 = MEMORY[0x1E0DEE9D8];
      if ((Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter() & 1) != 0)
      {
        v155 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
        MEMORY[0x1C3BBBAD0](v155);
        v156 = v144;
        v157 = *(void (**)(char *, uint64_t))(v384 + 8);
        v158 = v145;
        v159 = v386;
        v157(v158, v386);
        (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v394, v156, v420);
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
        v160 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
        v161 = v440;
        v162 = v159;
        v163 = v417;
        v164 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
        LOBYTE(v156) = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
        v157(v163, v162);
        if ((v156 & 1) != 0)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
          type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
          *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C24FA1B0;
          v165 = v164;
          Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
          Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
          v157(v163, v162);
          dispatch thunk of Experience.associatedEntities.setter();

          v137 = v426;
          v139 = v421;
        }
        if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
        {
          v166 = v392;
          Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
          v167 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v167 - 8) + 56))(v166, 0, 1, v167);
          dispatch thunk of GenericExperience.serverSuggestions.setter();
        }
        v168 = v164;
        MEMORY[0x1C3BBEE78]();
        v144 = v424;
        if (*(_QWORD *)((v442 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v442 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();

      }
      v169 = MEMORY[0x1C3BBC328]();
      MEMORY[0x1E0C80A78](v169);
      v344 = a7;
      v345 = (double *)v144;
      v346 = v137;
      v347 = v440;
      v170 = specialized Sequence.compactMap<A>(_:)(v405, (uint64_t)&v342, v169, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EFC8]);
      swift_bridgeObjectRelease();
      v171 = specialized Array.append<A>(contentsOf:)(v170);
      v172 = *(_QWORD *)(MEMORY[0x1C3BBC31C](v171) + 16);
      swift_bridgeObjectRelease();
      if (v172)
      {
        v173 = v418;
        v174 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
        v175 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
        MEMORY[0x1C3BBC31C]();
        (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v395, v144, v420);
        v176 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
        MEMORY[0x1E0C80A78](v176);
        v342 = v150;
        LOBYTE(v343) = v174 & 1;
        v344 = v399;
        v345 = v173;
        LOBYTE(v346) = v175 & 1;
        v347 = v438;
        v177 = objc_allocWithZone(v133);
        PommesRenderOptions.init(_:)();
        swift_bridgeObjectRelease();
        v178 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
        v179 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
        {
          v180 = v392;
          Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
          v181 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v181 - 8) + 56))(v180, 0, 1, v181);
          dispatch thunk of GenericExperience.serverSuggestions.setter();
        }
        v182 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
        if ((v182 & 1) != 0)
        {
          v183 = v382;
          Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
          v184 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
          (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v184 - 8) + 56))(v183, 0, 1, v184);
          v182 = dispatch thunk of GenericExperience.sageExperience.setter();
        }
        MEMORY[0x1C3BBEE78](v182);
        v139 = v421;
        v144 = v424;
        if (*(_QWORD *)((v442 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v442 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v210 = v440;
      v211 = v442;
      if (v442 >> 62)
      {
        type metadata accessor for Experience();
        swift_bridgeObjectRetain();
        v209 = _bridgeCocoaArray<A>(_:)();

        swift_bridgeObjectRelease();
      }
      else
      {
        swift_bridgeObjectRetain();
        dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
        type metadata accessor for Experience();

        v209 = v211;
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v139 + 8))(v412, v423);
      (*(void (**)(char *, uint64_t))(v410 + 8))(v409, v411);
      v212 = *(void (**)(char *, uint64_t))(v419 + 8);
      v213 = v144;
      goto LABEL_67;
    }
    v185 = v149;
    v186 = *MEMORY[0x1E0D6D070];
    swift_bridgeObjectRelease();
    if (v185 != v186)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v202 = type metadata accessor for Logger();
      __swift_project_value_buffer(v202, (uint64_t)static Logger.pommes);
      v203 = Logger.logObject.getter();
      v204 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v203, v204))
      {
        v205 = v141;
        v206 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v206 = 0;
        _os_log_impl(&dword_1C2356000, v203, v204, "unexpected experience component", v206, 2u);
        v207 = v206;
        v141 = v205;
        MEMORY[0x1C3BBFF64](v207, -1, -1);
      }

      v208 = *(void (**)(char *, uint64_t))(v139 + 8);
      v208(v412, v141);
      v208(v148, v141);
      goto LABEL_61;
    }
    (*(void (**)(char *, uint64_t))(v139 + 96))(v148, v141);
    (*(void (**)(char *, char *, uint64_t))(v402 + 32))(v407, v148, v406);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v187 = type metadata accessor for Logger();
    v188 = __swift_project_value_buffer(v187, (uint64_t)static Logger.pommes);
    v189 = Logger.logObject.getter();
    v190 = static os_log_type_t.debug.getter();
    v191 = os_log_type_enabled(v189, v190);
    v192 = v401;
    if (v191)
    {
      v193 = v135;
      v194 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v194 = 0;
      _os_log_impl(&dword_1C2356000, v189, v190, "Adding a client driven experience", v194, 2u);
      v195 = v194;
      v135 = v193;
      MEMORY[0x1C3BBFF64](v195, -1, -1);
    }

    v196 = MEMORY[0x1C3BBC250]();
    v197 = *(_QWORD *)(v196 + 16);
    v198 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
    v199 = *(char **)(v198 - 8);
    if (v197)
    {
      v200 = (uint64_t)v387;
      (*((void (**)(char *, unint64_t, uint64_t))v199 + 2))(v387, v196 + ((v199[80] + 32) & ~(unint64_t)v199[80]), v198);
      v201 = 0;
    }
    else
    {
      v201 = 1;
      v200 = (uint64_t)v387;
    }
    v440 = v135;
    v438 = (_QWORD *)*((_QWORD *)v199 + 7);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v200, v201, 1, v198);
    swift_bridgeObjectRelease();
    v437 = (char *)*((_QWORD *)v199 + 6);
    v216 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v437)(v200, 1, v198);
    v217 = (uint64_t)v388;
    v439 = (void (**)(char *, unint64_t, uint64_t))v199;
    if (v216 == 1)
    {
      outlined destroy of MediaUserStateCenter?(v200, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
      v218 = v407;
      goto LABEL_75;
    }
    v436 = (char *)v188;
    v219 = v381;
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    (*((void (**)(uint64_t, uint64_t))v199 + 1))(v200, v198);
    v220 = v398;
    v221 = v389;
    v222 = v219;
    v223 = v400;
    (*(void (**)(char *, char *, uint64_t))(v398 + 32))(v389, v222, v400);
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
    v224 = v390;
    v225 = v391;
    v226 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v390 + 48))(v217, 1, v391);
    v218 = v407;
    if (v226 == 1)
    {
      (*(void (**)(char *, uint64_t))(v220 + 8))(v221, v223);
      outlined destroy of MediaUserStateCenter?(v217, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      v192 = v401;
      v188 = (uint64_t)v436;
LABEL_75:
      v227 = v402;
      v228 = *(void (**)(char *, char *, uint64_t))(v402 + 16);
      v229 = v406;
      v228(v192, v218, v406);
      v230 = Logger.logObject.getter();
      v231 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v230, v231))
      {
        v436 = (char *)v188;
        v232 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v232 = 67109120;
        v233 = MEMORY[0x1C3BBC250]();
        if (*(_QWORD *)(v233 + 16))
        {
          v234 = (uint64_t)v375;
          v439[2](v375, v233 + ((*((unsigned __int8 *)v439 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v439 + 80)), v198);
          v235 = 0;
          v236 = (uint64_t)v377;
        }
        else
        {
          v235 = 1;
          v236 = (uint64_t)v377;
          v234 = (uint64_t)v375;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v234, v235, 1, v198);
        swift_bridgeObjectRelease();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v437)(v234, 1, v198) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v234, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
          v250 = 0;
          v251 = 1;
        }
        else
        {
          Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
          ((void (*)(uint64_t, uint64_t))v439[1])(v234, v198);
          v251 = 0;
          v250 = 1;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v398 + 56))(v236, v251, 1, v400);
        outlined destroy of MediaUserStateCenter?(v236, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        v237 = *(void (**)(char *, uint64_t))(v227 + 8);
        v252 = v406;
        v237(v401, v406);
        LODWORD(v442) = v250;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v230, v231, "Has clientComponent? %{BOOL}d", v232, 8u);
        v253 = v232;
        v229 = v252;
        MEMORY[0x1C3BBFF64](v253, -1, -1);
        v218 = v407;
      }
      else
      {
        v237 = *(void (**)(char *, uint64_t))(v227 + 8);
        v237(v192, v229);
      }

      v254 = v393;
      v228(v393, v218, v229);
      v255 = Logger.logObject.getter();
      v256 = static os_log_type_t.debug.getter();
      if (!os_log_type_enabled(v255, v256))
      {
        v237(v254, v229);
        v262 = v423;
        v263 = v424;
LABEL_97:

        v237(v407, v229);
        (*(void (**)(char *, uint64_t))(v421 + 8))(v412, v262);
        (*(void (**)(char *, uint64_t))(v419 + 8))(v263, v420);
        (*(void (**)(char *, uint64_t))(v413 + 8))(v422, v414);
        return MEMORY[0x1E0DEE9D8];
      }
      v257 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v257 = 67109120;
      v258 = MEMORY[0x1C3BBC250]();
      if (*(_QWORD *)(v258 + 16))
      {
        v259 = v439;
        v260 = (uint64_t)v376;
        v439[2](v376, v258 + ((*((unsigned __int8 *)v259 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v259 + 80)), v198);
        v261 = 0;
      }
      else
      {
        v261 = 1;
        v260 = (uint64_t)v376;
        v259 = v439;
      }
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v438)(v260, v261, 1, v198);
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v437)(v260, 1, v198) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v260, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v390 + 56))(v383, 1, 1, v391);
        v262 = v423;
        v263 = v424;
      }
      else
      {
        v264 = v372;
        Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
        ((void (*)(uint64_t, uint64_t))v259[1])(v260, v198);
        v265 = v383;
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
        (*(void (**)(char *, uint64_t))(v398 + 8))(v264, v400);
        v266 = 1;
        v267 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v390 + 48))(v265, 1, v391);
        v262 = v423;
        v263 = v424;
        if (v267 != 1)
        {
LABEL_96:
          outlined destroy of MediaUserStateCenter?(v383, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
          v229 = v406;
          v237(v393, v406);
          LODWORD(v442) = v266;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2356000, v255, v256, "Has domainComponent? %{BOOL}d", v257, 8u);
          MEMORY[0x1C3BBFF64](v257, -1, -1);
          goto LABEL_97;
        }
      }
      v266 = 0;
      goto LABEL_96;
    }
    v238 = v380;
    (*(void (**)(char *, uint64_t, uint64_t))(v224 + 32))(v380, v217, v225);
    v239 = v373;
    (*(void (**)(char *, char *, uint64_t))(v224 + 16))(v373, v238, v225);
    v240 = (*(uint64_t (**)(char *, uint64_t))(v224 + 88))(v239, v225);
    if (v240 == *MEMORY[0x1E0D6FA68])
    {
      (*(void (**)(char *, uint64_t))(v224 + 96))(v239, v225);
      (*(void (**)(char *, char *, uint64_t))(v378 + 32))(v374, v239, v379);
      v241 = v398;
      v242 = v367;
      v243 = v400;
      (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v367, v389, v400);
      v244 = Logger.logObject.getter();
      v245 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v244, v245))
      {
        v246 = (uint8_t *)swift_slowAlloc();
        v247 = swift_slowAlloc();
        v442 = v247;
        *(_DWORD *)v246 = 136315138;
        v248 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v441 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v248, v249, (uint64_t *)&v442);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v241 + 8);
        ((void (*)(char *, uint64_t))v439)(v242, v243);
        _os_log_impl(&dword_1C2356000, v244, v245, "Adding AudioExperience with identifier %s to PommesResponse", v246, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v247, -1, -1);
        MEMORY[0x1C3BBFF64](v246, -1, -1);
      }
      else
      {
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v241 + 8);
        ((void (*)(char *, uint64_t))v439)(v242, v243);
      }

      v278 = v424;
      v279 = v420;
      v280 = *(_QWORD *)&v399;
      type metadata accessor for AudioExperience();
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v281 = v374;
      (*(void (**)(char *, char *, uint64_t))(v378 + 16))(v368, v374, v379);
      v282 = v419;
      (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v394, v278, v279);
      outlined init with copy of ClientExperienceSignals?(v280, v369);
      v283 = v440;
      v284 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v285 = swift_allocObject();
      *(_OWORD *)(v285 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v285 + 32) = v284;
      v442 = v285;
      specialized Array._endMutation()();
      v209 = v442;

      (*(void (**)(char *, uint64_t))(v378 + 8))(v281, v379);
      (*(void (**)(char *, uint64_t))(v390 + 8))(v380, v391);
      ((void (*)(char *, uint64_t))v439)(v389, v400);
      (*(void (**)(char *, uint64_t))(v402 + 8))(v407, v406);
      (*(void (**)(char *, uint64_t))(v421 + 8))(v412, v423);
      v212 = *(void (**)(char *, uint64_t))(v282 + 8);
      v213 = v278;
LABEL_67:
      v214 = v420;
LABEL_68:
      v212(v213, v214);
      (*(void (**)(char *, uint64_t))(v413 + 8))(v422, v414);
      return v209;
    }
    v268 = v423;
    v144 = v424;
    if (v240 == *MEMORY[0x1E0D6FA70])
    {
      (*(void (**)(char *, uint64_t))(v224 + 96))(v239, v225);
      (*(void (**)(char *, char *, uint64_t))(v371 + 32))(v370, v239, v366);
      v269 = v398;
      v270 = v361;
      v271 = v400;
      (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v361, v389, v400);
      v272 = Logger.logObject.getter();
      v273 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v272, v273))
      {
        v274 = (uint8_t *)swift_slowAlloc();
        v275 = swift_slowAlloc();
        v442 = v275;
        *(_DWORD *)v274 = 136315138;
        v276 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v441 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v276, v277, (uint64_t *)&v442);
        v144 = v424;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v269 + 8);
        ((void (*)(char *, uint64_t))v439)(v270, v271);
        _os_log_impl(&dword_1C2356000, v272, v273, "Adding VideoExperience with identifier %s to PommesResponse", v274, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v275, -1, -1);
        MEMORY[0x1C3BBFF64](v274, -1, -1);
      }
      else
      {
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v269 + 8);
        ((void (*)(char *, uint64_t))v439)(v270, v271);
      }

      v295 = v420;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v296 = v366;
      (*(void (**)(char *, char *, uint64_t))(v371 + 16))(v362, v370, v366);
      v297 = v419;
      (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v394, v144, v295);
      objc_allocWithZone((Class)type metadata accessor for VideoExperience());
      v298 = v440;
      v299 = (id)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v300 = swift_allocObject();
      *(_OWORD *)(v300 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v300 + 32) = v299;
      v442 = v300;
      specialized Array._endMutation()();
      v209 = v442;

      (*(void (**)(char *, uint64_t))(v371 + 8))(v370, v296);
    }
    else if (v240 == *MEMORY[0x1E0D6FA58])
    {
      (*(void (**)(char *, uint64_t))(v224 + 96))(v239, v225);
      (*(void (**)(char *, char *, uint64_t))(v365 + 32))(v364, v239, v363);
      v286 = v398;
      v287 = v356;
      v288 = v400;
      (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v356, v389, v400);
      v289 = Logger.logObject.getter();
      v290 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v289, v290))
      {
        v291 = (uint8_t *)swift_slowAlloc();
        v292 = swift_slowAlloc();
        v442 = v292;
        *(_DWORD *)v291 = 136315138;
        v293 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v441 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v293, v294, (uint64_t *)&v442);
        v144 = v424;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v286 + 8);
        ((void (*)(char *, uint64_t))v439)(v287, v288);
        _os_log_impl(&dword_1C2356000, v289, v290, "Adding GeoExperience with identifier %s to PommesResponse", v291, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v292, -1, -1);
        MEMORY[0x1C3BBFF64](v291, -1, -1);
      }
      else
      {
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v286 + 8);
        ((void (*)(char *, uint64_t))v439)(v287, v288);
      }

      v295 = v420;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v310 = v363;
      (*(void (**)(char *, char *, uint64_t))(v365 + 16))(v357, v364, v363);
      v297 = v419;
      (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v394, v144, v295);
      objc_allocWithZone((Class)type metadata accessor for GeoExperience());
      v311 = v440;
      v312 = (id)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v313 = swift_allocObject();
      *(_OWORD *)(v313 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v313 + 32) = v312;
      v442 = v313;
      specialized Array._endMutation()();
      v209 = v442;

      (*(void (**)(char *, uint64_t))(v365 + 8))(v364, v310);
    }
    else
    {
      if (v240 != *MEMORY[0x1E0D6FA60])
      {
        if (v240 != *MEMORY[0x1E0D6FA50])
        {
          v327 = Logger.logObject.getter();
          v328 = static os_log_type_t.error.getter();
          v329 = os_log_type_enabled(v327, v328);
          v135 = v440;
          v143 = v422;
          if (v329)
          {
            v330 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v330 = 0;
            _os_log_impl(&dword_1C2356000, v327, v328, "Unexpected DomainComponent encountered when building Client Driven experience", v330, 2u);
            v331 = v330;
            v268 = v423;
            MEMORY[0x1C3BBFF64](v331, -1, -1);
          }

          v332 = *(void (**)(char *, uint64_t))(v390 + 8);
          v333 = v391;
          v332(v380, v391);
          (*(void (**)(char *, uint64_t))(v398 + 8))(v389, v400);
          (*(void (**)(char *, uint64_t))(v402 + 8))(v218, v406);
          (*(void (**)(char *, uint64_t))(v139 + 8))(v412, v268);
          v332(v239, v333);
          goto LABEL_61;
        }
        (*(void (**)(char *, uint64_t))(v224 + 96))(v239, v225);
        (*(void (**)(char *, char *, uint64_t))(v354 + 32))(v353, v239, v355);
        v314 = v398;
        v315 = v349;
        v316 = v400;
        (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v349, v389, v400);
        v317 = Logger.logObject.getter();
        v318 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v317, v318))
        {
          v319 = (uint8_t *)swift_slowAlloc();
          v320 = swift_slowAlloc();
          v442 = v320;
          *(_DWORD *)v319 = 136315138;
          v321 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v441 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v321, v322, (uint64_t *)&v442);
          v144 = v424;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v439 = *(void (***)(char *, unint64_t, uint64_t))(v314 + 8);
          ((void (*)(char *, uint64_t))v439)(v315, v400);
          _os_log_impl(&dword_1C2356000, v317, v318, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v319, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v320, -1, -1);
          MEMORY[0x1C3BBFF64](v319, -1, -1);
        }
        else
        {
          v439 = *(void (***)(char *, unint64_t, uint64_t))(v314 + 8);
          ((void (*)(char *, uint64_t))v439)(v315, v316);
        }

        v295 = v420;
        v334 = v394;
        v335 = v389;
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v336 = v354;
        v337 = v353;
        v338 = v355;
        (*(void (**)(char *, char *, uint64_t))(v354 + 16))(v350, v353, v355);
        (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v334, v144, v295);
        v339 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
        v340 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v341 = swift_allocObject();
        *(_OWORD *)(v341 + 16) = xmmword_1C24FB5A0;
        *(_QWORD *)(v341 + 32) = v340;
        v442 = v341;
        specialized Array._endMutation()();
        v209 = v442;

        (*(void (**)(char *, uint64_t))(v336 + 8))(v337, v338);
        (*(void (**)(char *, uint64_t))(v390 + 8))(v380, v391);
        ((void (*)(char *, uint64_t))v439)(v335, v400);
        (*(void (**)(char *, uint64_t))(v402 + 8))(v407, v406);
        (*(void (**)(char *, uint64_t))(v421 + 8))(v412, v423);
        v212 = *(void (**)(char *, uint64_t))(v419 + 8);
        goto LABEL_119;
      }
      (*(void (**)(char *, uint64_t))(v224 + 96))(v239, v225);
      (*(void (**)(char *, char *, uint64_t))(v360 + 32))(v359, v239, v358);
      v301 = v398;
      v302 = v351;
      v303 = v400;
      (*(void (**)(char *, char *, uint64_t))(v398 + 16))(v351, v389, v400);
      v304 = Logger.logObject.getter();
      v305 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v304, v305))
      {
        v306 = (uint8_t *)swift_slowAlloc();
        v307 = swift_slowAlloc();
        v442 = v307;
        *(_DWORD *)v306 = 136315138;
        v308 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v441 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v308, v309, (uint64_t *)&v442);
        v144 = v424;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v301 + 8);
        ((void (*)(char *, uint64_t))v439)(v302, v303);
        _os_log_impl(&dword_1C2356000, v304, v305, "Adding AppsExperience with identfier %s to PommesResponse", v306, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v307, -1, -1);
        MEMORY[0x1C3BBFF64](v306, -1, -1);
      }
      else
      {
        v439 = *(void (***)(char *, unint64_t, uint64_t))(v301 + 8);
        ((void (*)(char *, uint64_t))v439)(v302, v303);
      }

      v295 = v420;
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v323 = v358;
      (*(void (**)(char *, char *, uint64_t))(v360 + 16))(v352, v359, v358);
      v297 = v419;
      (*(void (**)(char *, char *, uint64_t))(v419 + 16))(v394, v144, v295);
      objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
      v324 = v440;
      v325 = (id)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v326 = swift_allocObject();
      *(_OWORD *)(v326 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v326 + 32) = v325;
      v442 = v326;
      specialized Array._endMutation()();
      v209 = v442;

      (*(void (**)(char *, uint64_t))(v360 + 8))(v359, v323);
    }
    (*(void (**)(char *, uint64_t))(v390 + 8))(v380, v391);
    ((void (*)(char *, uint64_t))v439)(v389, v400);
    (*(void (**)(char *, uint64_t))(v402 + 8))(v407, v406);
    (*(void (**)(char *, uint64_t))(v421 + 8))(v412, v423);
    v212 = *(void (**)(char *, uint64_t))(v297 + 8);
LABEL_119:
    v213 = v144;
    v214 = v295;
    goto LABEL_68;
  }
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v138, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
LABEL_61:

  (*(void (**)(char *, uint64_t))(v419 + 8))(v144, v420);
  (*(void (**)(char *, uint64_t))(v413 + 8))(v143, v414);
  return MEMORY[0x1E0DEE9D8];
}

uint64_t specialized ExperiencesResolver.extractExperiences(from:score:with:)(_QWORD *a1, uint64_t a2, double a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  void *v99;
  void (*v100)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)());
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  void (*v107)(char *, unint64_t, uint64_t);
  unint64_t v108;
  char *v109;
  char *v110;
  int v111;
  uint64_t v112;
  void (*v113)(char *, uint64_t, uint64_t);
  uint64_t v114;
  char *v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  NSObject *v120;
  os_log_type_t v121;
  uint8_t *v122;
  uint8_t *v123;
  uint64_t v124;
  _QWORD *v125;
  objc_class *v126;
  id v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  char *v133;
  uint64_t v134;
  char *v135;
  char *v136;
  int v137;
  uint64_t v138;
  NSObject *v139;
  os_log_type_t v140;
  BOOL v141;
  objc_class *v142;
  uint8_t *v143;
  char *v144;
  char *v145;
  uint64_t v146;
  void (*v147)(char *, uint64_t);
  uint64_t v148;
  id v149;
  char *v150;
  void *v151;
  char v152;
  void *v153;
  char *v154;
  id v155;
  char *v156;
  uint64_t v157;
  id v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  char *v163;
  char v164;
  char v165;
  void (*v166)(char *, char *, uint64_t);
  uint64_t v167;
  id v168;
  id v169;
  id v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  char *v177;
  int v178;
  int v179;
  uint64_t v180;
  NSObject *v181;
  os_log_type_t v182;
  BOOL v183;
  char *v184;
  char *v185;
  uint8_t *v186;
  uint8_t *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  NSObject *v195;
  os_log_type_t v196;
  uint8_t *v197;
  void (*v198)(char *, uint64_t);
  uint64_t v199;
  unint64_t v200;
  int v202;
  uint64_t v203;
  char *v204;
  void (*v205)(uint64_t, uint64_t);
  uint64_t v206;
  char *v207;
  char *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  void (*v213)(char *, char *, uint64_t);
  uint64_t v214;
  NSObject *v215;
  char *v216;
  os_log_type_t v217;
  BOOL v218;
  uint64_t v219;
  uint8_t *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  void (*v224)(char *, uint64_t);
  uint64_t v225;
  char *v226;
  char *v227;
  int v228;
  BOOL v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  char *v233;
  uint64_t v234;
  NSObject *v235;
  os_log_type_t v236;
  uint8_t *v237;
  uint64_t v238;
  uint64_t v239;
  unint64_t v240;
  int v241;
  uint64_t v242;
  char *v243;
  char *v244;
  NSObject *v245;
  os_log_type_t v246;
  BOOL v247;
  uint64_t v248;
  uint8_t *v249;
  uint64_t v250;
  uint64_t v251;
  char *v252;
  char *v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  char *v257;
  int v258;
  int v259;
  uint64_t v260;
  uint8_t *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  char *v265;
  NSObject *v266;
  os_log_type_t v267;
  uint64_t v268;
  uint8_t *v269;
  uint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  uint64_t v274;
  char *v275;
  uint64_t v276;
  char *v277;
  id v278;
  uint64_t v279;
  char *v280;
  char *v281;
  uint64_t v282;
  char *v283;
  NSObject *v284;
  os_log_type_t v285;
  uint64_t v286;
  uint8_t *v287;
  uint64_t v288;
  uint64_t v289;
  unint64_t v290;
  char *v291;
  uint64_t v292;
  char *v293;
  uint64_t v294;
  char *v295;
  id v296;
  uint64_t v297;
  uint64_t v298;
  char *v299;
  NSObject *v300;
  os_log_type_t v301;
  uint64_t v302;
  uint8_t *v303;
  uint64_t v304;
  uint64_t v305;
  unint64_t v306;
  char *v307;
  uint64_t v308;
  char *v309;
  uint64_t v310;
  char *v311;
  void *v312;
  uint64_t v313;
  char *v314;
  NSObject *v315;
  os_log_type_t v316;
  uint64_t v317;
  uint8_t *v318;
  uint64_t v319;
  uint64_t v320;
  unint64_t v321;
  id v322;
  uint64_t v323;
  NSObject *v324;
  os_log_type_t v325;
  BOOL v326;
  uint8_t *v327;
  uint8_t *v328;
  void (*v329)(char *, uint64_t);
  uint64_t v330;
  char *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  char *v335;
  uint64_t v336;
  id v337;
  id v338;
  uint64_t v339;
  char *v340;
  uint64_t v341;
  _QWORD v342[2];
  _QWORD *v343;
  char *v344;
  char *v345;
  char *v346;
  char *v347;
  char *v348;
  char *v349;
  uint64_t v350;
  uint64_t v351;
  char *v352;
  char *v353;
  char *v354;
  uint64_t v355;
  uint64_t v356;
  char *v357;
  char *v358;
  char *v359;
  uint64_t v360;
  uint64_t v361;
  char *v362;
  uint64_t v363;
  uint64_t v364;
  char *v365;
  char *v366;
  uint64_t v367;
  char *v368;
  char *v369;
  char *v370;
  uint64_t v371;
  uint64_t v372;
  char *v373;
  char *v374;
  char *v375;
  char *v376;
  char *v377;
  char *v378;
  char *v379;
  uint64_t v380;
  char *v381;
  char *v382;
  uint64_t v383;
  char *v384;
  char *v385;
  char *v386;
  uint64_t v387;
  uint64_t v388;
  char *v389;
  char *v390;
  char *v391;
  char *v392;
  char *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  char *v397;
  uint64_t v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  char *v402;
  uint64_t v403;
  uint64_t v404;
  char *v405;
  char *v406;
  char *v407;
  char *v408;
  uint64_t v409;
  uint64_t v410;
  char *v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  char *v415;
  uint64_t v416;
  unsigned int v417;
  _QWORD *v418;
  unsigned int v419;
  char **v420;
  uint64_t v421;
  uint64_t v422;
  char *v423;
  uint64_t v424;
  char *v425;
  uint64_t v426;
  uint64_t v427;
  objc_class *v428;
  char *v429;
  char *v430;
  uint64_t v431;
  unint64_t v432;

  v395 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1E0C80A78](v5);
  v429 = (char *)&v345 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for PommesRenderOptions.PromptType();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x1E0C80A78](v7);
  v428 = (objc_class *)((char *)&v345 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v9);
  v423 = (char *)&v345 - v11;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals.PromptType();
  v424 = *(_QWORD *)(v12 - 8);
  v13 = MEMORY[0x1E0C80A78](v12);
  v430 = (char *)&v345 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v425 = (char *)&v345 - v15;
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
  MEMORY[0x1E0C80A78](v16);
  v379 = (char *)&v345 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v18);
  v367 = (uint64_t)&v345 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v364 = type metadata accessor for Apple_Parsec_Siri_V2alpha_VideoClientComponent();
  v363 = *(_QWORD *)(v364 - 8);
  v20 = MEMORY[0x1E0C80A78](v364);
  v358 = (char *)&v345 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v20);
  v362 = (char *)&v345 - v22;
  v351 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DeviceExpertClientComponent();
  v350 = *(_QWORD *)(v351 - 8);
  v23 = MEMORY[0x1E0C80A78](v351);
  v346 = (char *)&v345 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v23);
  v349 = (char *)&v345 - v25;
  v356 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppsClientComponent();
  v355 = *(_QWORD *)(v356 - 8);
  v26 = MEMORY[0x1E0C80A78](v356);
  v348 = (char *)&v345 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v26);
  v354 = (char *)&v345 - v28;
  v361 = type metadata accessor for Apple_Parsec_Siri_V2alpha_GeoClientComponent();
  v360 = *(_QWORD *)(v361 - 8);
  v29 = MEMORY[0x1E0C80A78](v361);
  v353 = (char *)&v345 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v29);
  v359 = (char *)&v345 - v31;
  v372 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v371 = *(_QWORD *)(v372 - 8);
  v32 = MEMORY[0x1E0C80A78](v372);
  v366 = (char *)&v345 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v32);
  v370 = (char *)&v345 - v34;
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
  v36 = MEMORY[0x1E0C80A78](v35);
  v374 = (char *)&v345 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v36);
  v385 = (char *)&v345 - v38;
  v388 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent();
  v387 = *(_QWORD *)(v388 - 8);
  v39 = MEMORY[0x1E0C80A78](v388);
  v369 = (char *)&v345 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v39);
  v375 = (char *)&v345 - v41;
  v42 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  v43 = MEMORY[0x1E0C80A78](v42);
  v378 = (char *)&v345 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = MEMORY[0x1E0C80A78](v43);
  v373 = (char *)&v345 - v46;
  MEMORY[0x1E0C80A78](v45);
  v384 = (char *)&v345 - v47;
  v396 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  v394 = *(_QWORD *)(v396 - 8);
  v48 = MEMORY[0x1E0C80A78](v396);
  v368 = (char *)&v345 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x1E0C80A78](v48);
  v357 = (char *)&v345 - v51;
  v52 = MEMORY[0x1E0C80A78](v50);
  v345 = (char *)&v345 - v53;
  v54 = MEMORY[0x1E0C80A78](v52);
  v347 = (char *)&v345 - v55;
  v56 = MEMORY[0x1E0C80A78](v54);
  v352 = (char *)&v345 - v57;
  v58 = MEMORY[0x1E0C80A78](v56);
  v365 = (char *)&v345 - v59;
  v60 = MEMORY[0x1E0C80A78](v58);
  v376 = (char *)&v345 - v61;
  MEMORY[0x1E0C80A78](v60);
  v386 = (char *)&v345 - v62;
  v63 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SageExperience?);
  MEMORY[0x1E0C80A78](v63);
  v377 = (char *)&v345 - ((v64 + 15) & 0xFFFFFFFFFFFFFFF0);
  v65 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ServerSuggestion?);
  MEMORY[0x1E0C80A78](v65);
  v389 = (char *)&v345 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.InstructionIntent();
  v68 = MEMORY[0x1E0C80A78](v67);
  v393 = (char *)&v345 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v68);
  v381 = (char *)&v345 - v70;
  v383 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SingleExperience();
  v380 = *(_QWORD *)(v383 - 8);
  MEMORY[0x1E0C80A78](v383);
  v382 = (char *)&v345 - ((v71 + 15) & 0xFFFFFFFFFFFFFFF0);
  v401 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  v398 = *(_QWORD *)(v401 - 8);
  v72 = MEMORY[0x1E0C80A78](v401);
  v390 = (char *)&v345 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = MEMORY[0x1E0C80A78](v72);
  v397 = (char *)&v345 - v75;
  MEMORY[0x1E0C80A78](v74);
  v405 = (char *)&v345 - v76;
  v404 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v403 = *(_QWORD *)(v404 - 8);
  MEMORY[0x1E0C80A78](v404);
  v407 = (char *)&v345 - ((v77 + 15) & 0xFFFFFFFFFFFFFFF0);
  v78 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
  MEMORY[0x1E0C80A78](v78);
  v411 = (char *)&v345 - ((v79 + 15) & 0xFFFFFFFFFFFFFFF0);
  v412 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience();
  v414 = *(_QWORD *)(v412 - 8);
  v80 = MEMORY[0x1E0C80A78](v412);
  v402 = (char *)&v345 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v80);
  v408 = (char *)&v345 - v82;
  v83 = type metadata accessor for Apple_Parsec_Siri_V2alpha_UserPromptSignals();
  v426 = *(_QWORD *)(v83 - 8);
  v427 = v83;
  MEMORY[0x1E0C80A78](v83);
  v85 = (char *)&v345 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for Date();
  v421 = *(_QWORD *)(v86 - 8);
  v422 = v86;
  MEMORY[0x1E0C80A78](v86);
  v88 = (char *)&v345 - ((v87 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v413 = *(_QWORD *)(v89 - 8);
  v90 = MEMORY[0x1E0C80A78](v89);
  v392 = (char *)&v345 - ((v91 + 15) & 0xFFFFFFFFFFFFFFF0);
  v92 = MEMORY[0x1E0C80A78](v90);
  v391 = (char *)&v345 - v93;
  MEMORY[0x1E0C80A78](v92);
  v95 = (char *)&v345 - v94;
  v410 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerUnderstanding();
  v409 = *(_QWORD *)(v410 - 8);
  MEMORY[0x1E0C80A78](v410);
  v97 = (char *)&v345 - ((v96 + 15) & 0xFFFFFFFFFFFFFFF0);
  v418 = a1;
  v98 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverUnderstanding.getter();
  if (one-time initialization token for shared != -1)
    v98 = swift_once();
  v420 = &v345;
  v99 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v98);
  v415 = v97;
  v344 = v97;
  Date.init()();
  v100 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, void (*)()))(*(_QWORD *)v99 + 200);
  v416 = v89;
  v343 = v342;
  v344 = (char *)v89;
  LOBYTE(v342[0]) = 2;
  v100(0xD00000000000001ELL, 0x80000001C2507220, 0, v88, "SiriInformationSearch/ExperiencesResolver.swift", 47, 2, 108, "extractExperiences(from:score:with:)", 36, v342[0], partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:));
  v400 = 0;
  (*(void (**)(char *, uint64_t))(v421 + 8))(v88, v422);
  v101 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.userPromptSignals.getter();
  v102 = MEMORY[0x1C3BBBC2C](v101);
  (*(void (**)(char *, uint64_t))(v426 + 8))(v85, v427);
  v103 = *(_QWORD *)(v102 + 16);
  v104 = v95;
  if (v103)
  {
    v406 = v95;
    v105 = v424;
    v106 = v102 + ((*(unsigned __int8 *)(v424 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v424 + 80));
    v427 = *(_QWORD *)(v424 + 72);
    v107 = *(void (**)(char *, unint64_t, uint64_t))(v424 + 16);
    LODWORD(v426) = *MEMORY[0x1E0D6F290];
    LODWORD(v422) = *MEMORY[0x1E0D6F280];
    LODWORD(v420) = *MEMORY[0x1E0D6F288];
    v417 = *MEMORY[0x1E0D98E70];
    v419 = *MEMORY[0x1E0D98E68];
    LODWORD(v421) = *MEMORY[0x1E0D98E78];
    v399 = v102;
    swift_bridgeObjectRetain();
    v108 = MEMORY[0x1E0DEE9D8];
    v109 = v425;
    while (1)
    {
      v107(v109, v106, v12);
      v110 = v430;
      v107(v430, (unint64_t)v109, v12);
      v111 = (*(uint64_t (**)(char *, uint64_t))(v105 + 88))(v110, v12);
      if (v111 == (_DWORD)v426)
      {
        v112 = (uint64_t)v429;
        (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v429, v421, v7);
      }
      else
      {
        v112 = (uint64_t)v429;
        if (v111 == (_DWORD)v422)
        {
          (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v429, v419, v7);
        }
        else
        {
          if (v111 != (_DWORD)v420)
          {
            if (one-time initialization token for pommes != -1)
              swift_once();
            v119 = type metadata accessor for Logger();
            __swift_project_value_buffer(v119, (uint64_t)static Logger.pommes);
            v120 = Logger.logObject.getter();
            v121 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v120, v121))
            {
              v122 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v122 = 0;
              _os_log_impl(&dword_1C2356000, v120, v121, "siriInstruction.userPromptSignals.promptTypes contains unhandled promptType", v122, 2u);
              v123 = v122;
              v105 = v424;
              MEMORY[0x1C3BBFF64](v123, -1, -1);
            }

            v112 = (uint64_t)v429;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v429, 1, 1, v7);
            (*(void (**)(char *, uint64_t))(v105 + 8))(v430, v12);
            v109 = v425;
            goto LABEL_14;
          }
          (*(void (**)(char *, _QWORD, uint64_t))(v8 + 104))(v429, v417, v7);
        }
      }
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v8 + 56))(v112, 0, 1, v7);
LABEL_14:
      (*(void (**)(char *, uint64_t))(v105 + 8))(v109, v12);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v112, 1, v7) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v112, &demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
      }
      else
      {
        v113 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 32);
        v114 = v112;
        v115 = v423;
        v113(v423, v114, v7);
        v113((char *)v428, (uint64_t)v115, v7);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) != 0)
          v116 = v108;
        else
          v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v108 + 16) + 1, 1, v108);
        v118 = *(_QWORD *)(v116 + 16);
        v117 = *(_QWORD *)(v116 + 24);
        if (v118 >= v117 >> 1)
          v116 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v117 > 1, v118 + 1, 1, v116);
        *(_QWORD *)(v116 + 16) = v118 + 1;
        v108 = v116;
        v113((char *)(v116+ ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))+ *(_QWORD *)(v8 + 72) * v118), (uint64_t)v428, v7);
        v105 = v424;
        v109 = v425;
      }
      v106 += v427;
      if (!--v103)
      {
        v124 = swift_bridgeObjectRelease_n();
        v104 = v406;
        v125 = (_QWORD *)v108;
        goto LABEL_28;
      }
    }
  }
  v124 = swift_bridgeObjectRelease();
  v125 = (_QWORD *)MEMORY[0x1E0DEE9D8];
LABEL_28:
  MEMORY[0x1E0C80A78](v124);
  v343 = v125;
  v126 = (objc_class *)type metadata accessor for PommesRenderOptions();
  v127 = objc_allocWithZone(v126);
  v128 = (char *)PommesRenderOptions.init(_:)();
  v129 = (uint64_t)v411;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.experience.getter();
  v130 = v414;
  v131 = v412;
  v132 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v414 + 48))(v129, 1, v412);
  v133 = v415;
  v134 = v416;
  if (v132 == 1)
  {
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?(v129, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.OneOf_Experience?);
LABEL_63:

    (*(void (**)(char *, uint64_t))(v413 + 8))(v104, v134);
    (*(void (**)(char *, uint64_t))(v409 + 8))(v133, v410);
    return MEMORY[0x1E0DEE9D8];
  }
  v428 = v126;
  v429 = (char *)v125;
  v135 = v408;
  (*(void (**)(char *, uint64_t, uint64_t))(v130 + 32))(v408, v129, v131);
  v136 = v402;
  (*(void (**)(char *, char *, uint64_t))(v130 + 16))(v402, v135, v131);
  v137 = (*(uint64_t (**)(char *, uint64_t))(v130 + 88))(v136, v131);
  if (v137 != *MEMORY[0x1E0D6D078])
  {
    v178 = v137;
    v179 = *MEMORY[0x1E0D6D070];
    swift_bridgeObjectRelease();
    if (v178 != v179)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v194 = type metadata accessor for Logger();
      __swift_project_value_buffer(v194, (uint64_t)static Logger.pommes);
      v195 = Logger.logObject.getter();
      v196 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v195, v196))
      {
        v197 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v197 = 0;
        _os_log_impl(&dword_1C2356000, v195, v196, "unexpected experience component", v197, 2u);
        MEMORY[0x1C3BBFF64](v197, -1, -1);
      }

      v198 = *(void (**)(char *, uint64_t))(v130 + 8);
      v198(v408, v131);
      v198(v136, v131);
      goto LABEL_63;
    }
    (*(void (**)(char *, uint64_t))(v130 + 96))(v136, v131);
    (*(void (**)(char *, char *, uint64_t))(v398 + 32))(v405, v136, v401);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v180 = type metadata accessor for Logger();
    v429 = (char *)__swift_project_value_buffer(v180, (uint64_t)static Logger.pommes);
    v181 = Logger.logObject.getter();
    v182 = static os_log_type_t.debug.getter();
    v183 = os_log_type_enabled(v181, v182);
    v184 = v397;
    if (v183)
    {
      v185 = v128;
      v186 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v186 = 0;
      _os_log_impl(&dword_1C2356000, v181, v182, "Adding a client driven experience", v186, 2u);
      v187 = v186;
      v128 = v185;
      MEMORY[0x1C3BBFF64](v187, -1, -1);
    }

    v188 = MEMORY[0x1C3BBC250]();
    v189 = *(_QWORD *)(v188 + 16);
    v190 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
    v191 = *(_QWORD *)(v190 - 8);
    if (v189)
    {
      v192 = (uint64_t)v384;
      (*(void (**)(char *, unint64_t, uint64_t))(v191 + 16))(v384, v188 + ((*(unsigned __int8 *)(v191 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v191 + 80)), v190);
      v193 = 0;
    }
    else
    {
      v193 = 1;
      v192 = (uint64_t)v384;
    }
    v430 = v128;
    v428 = *(objc_class **)(v191 + 56);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v428)(v192, v193, 1, v190);
    swift_bridgeObjectRelease();
    v427 = *(_QWORD *)(v191 + 48);
    v202 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v427)(v192, 1, v190);
    v203 = (uint64_t)v385;
    if (v202 == 1)
    {
      v426 = v191;
      outlined destroy of MediaUserStateCenter?(v192, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
      goto LABEL_75;
    }
    v204 = v376;
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    v205 = *(void (**)(uint64_t, uint64_t))(v191 + 8);
    v425 = (char *)v190;
    v205(v192, v190);
    v206 = v394;
    v207 = v386;
    v208 = v204;
    v209 = v396;
    (*(void (**)(char *, char *, uint64_t))(v394 + 32))(v386, v208, v396);
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
    v210 = v387;
    v211 = v388;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v387 + 48))(v203, 1, v388) == 1)
    {
      v426 = v191;
      (*(void (**)(char *, uint64_t))(v206 + 8))(v207, v209);
      outlined destroy of MediaUserStateCenter?(v203, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
      v184 = v397;
      v190 = (uint64_t)v425;
LABEL_75:
      v212 = v398;
      v213 = *(void (**)(char *, char *, uint64_t))(v398 + 16);
      v214 = v401;
      v213(v184, v405, v401);
      v215 = Logger.logObject.getter();
      v216 = v184;
      v217 = static os_log_type_t.debug.getter();
      v218 = os_log_type_enabled(v215, v217);
      v219 = (uint64_t)v379;
      if (v218)
      {
        v406 = v104;
        v220 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v220 = 67109120;
        v221 = MEMORY[0x1C3BBC250]();
        if (*(_QWORD *)(v221 + 16))
        {
          v222 = (uint64_t)v373;
          (*(void (**)(char *, unint64_t, uint64_t))(v426 + 16))(v373, v221 + ((*(unsigned __int8 *)(v426 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v426 + 80)), v190);
          v223 = 0;
        }
        else
        {
          v223 = 1;
          v222 = (uint64_t)v373;
        }
        ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v428)(v222, v223, 1, v190);
        swift_bridgeObjectRelease();
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v427)(v222, 1, v190) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v222, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
          v241 = 0;
          v242 = 1;
        }
        else
        {
          Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
          (*(void (**)(uint64_t, uint64_t))(v426 + 8))(v222, v190);
          v242 = 0;
          v241 = 1;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v394 + 56))(v219, v242, 1, v396);
        outlined destroy of MediaUserStateCenter?(v219, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent?);
        v224 = *(void (**)(char *, uint64_t))(v212 + 8);
        v225 = v401;
        v224(v397, v401);
        LODWORD(v432) = v241;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v215, v217, "Has clientComponent? %{BOOL}d", v220, 8u);
        MEMORY[0x1C3BBFF64](v220, -1, -1);
        v104 = v406;
      }
      else
      {
        v224 = *(void (**)(char *, uint64_t))(v212 + 8);
        v224(v216, v214);
        v225 = v214;
      }

      v243 = v390;
      v244 = v405;
      v213(v390, v405, v225);
      v245 = Logger.logObject.getter();
      v246 = static os_log_type_t.debug.getter();
      v247 = os_log_type_enabled(v245, v246);
      v248 = (uint64_t)v378;
      if (!v247)
      {
        v252 = v243;
        v253 = v104;
        v224(v252, v225);
        v254 = v412;
        v255 = v416;
LABEL_98:

        v224(v244, v225);
        (*(void (**)(char *, uint64_t))(v414 + 8))(v408, v254);
        (*(void (**)(char *, uint64_t))(v413 + 8))(v253, v255);
        (*(void (**)(char *, uint64_t))(v409 + 8))(v415, v410);
        return MEMORY[0x1E0DEE9D8];
      }
      v249 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v249 = 67109120;
      v250 = MEMORY[0x1C3BBC250]();
      if (*(_QWORD *)(v250 + 16))
      {
        (*(void (**)(uint64_t, unint64_t, uint64_t))(v426 + 16))(v248, v250 + ((*(unsigned __int8 *)(v426 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v426 + 80)), v190);
        v251 = 0;
      }
      else
      {
        v251 = 1;
      }
      v256 = (uint64_t)v374;
      v253 = v104;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v428)(v248, v251, 1, v190);
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v427)(v248, 1, v190) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v248, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v387 + 56))(v256, 1, 1, v388);
        v254 = v412;
        v255 = v416;
      }
      else
      {
        v257 = v368;
        Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
        (*(void (**)(uint64_t, uint64_t))(v426 + 8))(v248, v190);
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.domainComponent.getter();
        (*(void (**)(char *, uint64_t))(v394 + 8))(v257, v396);
        v258 = 1;
        v259 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v387 + 48))(v256, 1, v388);
        v254 = v412;
        v255 = v416;
        if (v259 != 1)
        {
LABEL_97:
          outlined destroy of MediaUserStateCenter?(v256, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_DomainClientComponent.OneOf_DomainComponent?);
          v260 = v401;
          v224(v390, v401);
          LODWORD(v432) = v258;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1C2356000, v245, v246, "Has domainComponent? %{BOOL}d", v249, 8u);
          v261 = v249;
          v225 = v260;
          MEMORY[0x1C3BBFF64](v261, -1, -1);
          v244 = v405;
          goto LABEL_98;
        }
      }
      v258 = 0;
      goto LABEL_97;
    }
    v226 = v375;
    (*(void (**)(char *, uint64_t, uint64_t))(v210 + 32))(v375, v203, v211);
    v227 = v369;
    (*(void (**)(char *, char *, uint64_t))(v210 + 16))(v369, v226, v211);
    v228 = (*(uint64_t (**)(char *, uint64_t))(v210 + 88))(v227, v211);
    v229 = v228 == *MEMORY[0x1E0D6FA68];
    v230 = v211;
    v231 = v210;
    v406 = v104;
    if (v229)
    {
      (*(void (**)(char *, uint64_t))(v210 + 96))(v227, v211);
      (*(void (**)(char *, char *, uint64_t))(v371 + 32))(v370, v227, v372);
      v232 = v394;
      v233 = v365;
      v234 = v396;
      (*(void (**)(char *, char *, uint64_t))(v394 + 16))(v365, v386, v396);
      v235 = Logger.logObject.getter();
      v236 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v235, v236))
      {
        v237 = (uint8_t *)swift_slowAlloc();
        v238 = swift_slowAlloc();
        v432 = v238;
        *(_DWORD *)v237 = 136315138;
        v239 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v431 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v239, v240, (uint64_t *)&v432);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v429 = *(char **)(v232 + 8);
        ((void (*)(char *, uint64_t))v429)(v233, v234);
        _os_log_impl(&dword_1C2356000, v235, v236, "Adding AudioExperience with identifier %s to PommesResponse", v237, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v238, -1, -1);
        MEMORY[0x1C3BBFF64](v237, -1, -1);
      }
      else
      {
        v429 = *(char **)(v232 + 8);
        ((void (*)(char *, uint64_t))v429)(v233, v234);
      }

      v273 = v395;
      type metadata accessor for AudioExperience();
      Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
      v274 = v371;
      v275 = v370;
      v276 = v372;
      (*(void (**)(char *, char *, uint64_t))(v371 + 16))(v366, v370, v372);
      (*(void (**)(char *, char *, uint64_t))(v413 + 16))(v391, v406, v416);
      outlined init with copy of ClientExperienceSignals?(v273, v367);
      v277 = v430;
      v278 = (id)AudioExperience.__allocating_init(pluginId:audioClientComponent:queryConfidenceScore:userDialogAct:clientExperienceSignals:renderOptions:)();
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
      dispatch thunk of Experience.associatedEntities.setter();

      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v279 = swift_allocObject();
      *(_OWORD *)(v279 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v279 + 32) = v278;
      v432 = v279;
      specialized Array._endMutation()();
      v199 = v432;

      (*(void (**)(char *, uint64_t))(v274 + 8))(v275, v276);
      (*(void (**)(char *, uint64_t))(v387 + 8))(v375, v388);
      v280 = v386;
    }
    else
    {
      v262 = v416;
      v263 = v396;
      if (v228 == *MEMORY[0x1E0D6FA70])
      {
        (*(void (**)(char *, uint64_t))(v231 + 96))(v227, v211);
        (*(void (**)(char *, char *, uint64_t))(v363 + 32))(v362, v227, v364);
        v264 = v394;
        v265 = v357;
        (*(void (**)(char *, char *, uint64_t))(v394 + 16))(v357, v386, v263);
        v266 = Logger.logObject.getter();
        v267 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v266, v267))
        {
          v268 = v263;
          v269 = (uint8_t *)swift_slowAlloc();
          v270 = swift_slowAlloc();
          v432 = v270;
          *(_DWORD *)v269 = 136315138;
          v271 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v431 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v271, v272, (uint64_t *)&v432);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v429 = *(char **)(v264 + 8);
          ((void (*)(char *, uint64_t))v429)(v265, v268);
          _os_log_impl(&dword_1C2356000, v266, v267, "Adding VideoExperience with identifier %s to PommesResponse", v269, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v270, -1, -1);
          MEMORY[0x1C3BBFF64](v269, -1, -1);
        }
        else
        {
          v429 = *(char **)(v264 + 8);
          ((void (*)(char *, uint64_t))v429)(v265, v263);
        }

        v291 = v386;
        Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
        v292 = v363;
        v293 = v362;
        v294 = v364;
        (*(void (**)(char *, char *, uint64_t))(v363 + 16))(v358, v362, v364);
        (*(void (**)(char *, char *, uint64_t))(v413 + 16))(v391, v406, v416);
        objc_allocWithZone((Class)type metadata accessor for VideoExperience());
        v295 = v430;
        v296 = (id)VideoExperience.init(pluginId:videoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v297 = swift_allocObject();
        *(_OWORD *)(v297 + 16) = xmmword_1C24FB5A0;
        *(_QWORD *)(v297 + 32) = v296;
        v432 = v297;
        specialized Array._endMutation()();
        v199 = v432;

        (*(void (**)(char *, uint64_t))(v292 + 8))(v293, v294);
        (*(void (**)(char *, uint64_t))(v387 + 8))(v375, v388);
        v280 = v291;
      }
      else
      {
        v281 = v386;
        if (v228 == *MEMORY[0x1E0D6FA58])
        {
          (*(void (**)(char *, uint64_t))(v231 + 96))(v227, v230);
          (*(void (**)(char *, char *, uint64_t))(v360 + 32))(v359, v227, v361);
          v282 = v394;
          v283 = v352;
          (*(void (**)(char *, char *, uint64_t))(v394 + 16))(v352, v281, v263);
          v284 = Logger.logObject.getter();
          v285 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v284, v285))
          {
            v286 = v263;
            v287 = (uint8_t *)swift_slowAlloc();
            v288 = swift_slowAlloc();
            v432 = v288;
            *(_DWORD *)v287 = 136315138;
            v289 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
            v431 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v289, v290, (uint64_t *)&v432);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v429 = *(char **)(v282 + 8);
            ((void (*)(char *, uint64_t))v429)(v283, v286);
            _os_log_impl(&dword_1C2356000, v284, v285, "Adding GeoExperience with identifier %s to PommesResponse", v287, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v288, -1, -1);
            MEMORY[0x1C3BBFF64](v287, -1, -1);
          }
          else
          {
            v429 = *(char **)(v282 + 8);
            ((void (*)(char *, uint64_t))v429)(v283, v263);
          }

          v307 = v386;
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v308 = v360;
          v309 = v359;
          v310 = v361;
          (*(void (**)(char *, char *, uint64_t))(v360 + 16))(v353, v359, v361);
          (*(void (**)(char *, char *, uint64_t))(v413 + 16))(v391, v406, v416);
          objc_allocWithZone((Class)type metadata accessor for GeoExperience());
          v311 = v430;
          v312 = (void *)GeoExperience.init(pluginId:geoClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        }
        else
        {
          if (v228 != *MEMORY[0x1E0D6FA60])
          {
            if (v228 != *MEMORY[0x1E0D6FA50])
            {
              v324 = Logger.logObject.getter();
              v325 = static os_log_type_t.error.getter();
              v326 = os_log_type_enabled(v324, v325);
              v128 = v430;
              if (v326)
              {
                v327 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v327 = 0;
                _os_log_impl(&dword_1C2356000, v324, v325, "Unexpected DomainComponent encountered when building Client Driven experience", v327, 2u);
                v328 = v327;
                v263 = v396;
                MEMORY[0x1C3BBFF64](v328, -1, -1);
              }

              v329 = *(void (**)(char *, uint64_t))(v387 + 8);
              v330 = v388;
              v329(v375, v388);
              (*(void (**)(char *, uint64_t))(v394 + 8))(v281, v263);
              (*(void (**)(char *, uint64_t))(v398 + 8))(v405, v401);
              (*(void (**)(char *, uint64_t))(v130 + 8))(v408, v412);
              v329(v227, v330);
              v134 = v262;
              goto LABEL_63;
            }
            (*(void (**)(char *, uint64_t))(v231 + 96))(v227, v230);
            (*(void (**)(char *, char *, uint64_t))(v350 + 32))(v349, v227, v351);
            v313 = v394;
            v314 = v345;
            (*(void (**)(char *, char *, uint64_t))(v394 + 16))(v345, v281, v263);
            v315 = Logger.logObject.getter();
            v316 = static os_log_type_t.debug.getter();
            if (os_log_type_enabled(v315, v316))
            {
              v317 = v263;
              v318 = (uint8_t *)swift_slowAlloc();
              v319 = swift_slowAlloc();
              v432 = v319;
              *(_DWORD *)v318 = 136315138;
              v320 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
              v431 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v320, v321, (uint64_t *)&v432);
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_bridgeObjectRelease();
              v429 = *(char **)(v313 + 8);
              ((void (*)(char *, uint64_t))v429)(v314, v317);
              _os_log_impl(&dword_1C2356000, v315, v316, "Adding DeviceExpertExperience with identifier %s to PommesResponse", v318, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1C3BBFF64](v319, -1, -1);
              MEMORY[0x1C3BBFF64](v318, -1, -1);
            }
            else
            {
              v429 = *(char **)(v313 + 8);
              ((void (*)(char *, uint64_t))v429)(v314, v263);
            }

            v331 = v386;
            Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
            v332 = v350;
            v333 = v349;
            v334 = v351;
            (*(void (**)(char *, char *, uint64_t))(v350 + 16))(v346, v349, v351);
            v335 = v406;
            v336 = v416;
            (*(void (**)(char *, char *, uint64_t))(v413 + 16))(v391, v406, v416);
            v337 = objc_allocWithZone((Class)type metadata accessor for DeviceExpertExperience());
            v338 = (id)DeviceExpertExperience.init(pluginId:deviceExpertClientComponent:queryConfidenceScore:userDialogAct:)();
            Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
            dispatch thunk of Experience.associatedEntities.setter();

            __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
            v339 = swift_allocObject();
            *(_OWORD *)(v339 + 16) = xmmword_1C24FB5A0;
            *(_QWORD *)(v339 + 32) = v338;
            v432 = v339;
            specialized Array._endMutation()();
            v199 = v432;

            (*(void (**)(char *, uint64_t))(v332 + 8))(v333, v334);
            (*(void (**)(char *, uint64_t))(v387 + 8))(v375, v388);
            ((void (*)(char *, uint64_t))v429)(v331, v396);
            (*(void (**)(char *, uint64_t))(v398 + 8))(v405, v401);
            (*(void (**)(char *, uint64_t))(v414 + 8))(v408, v412);
            (*(void (**)(char *, uint64_t))(v413 + 8))(v335, v336);
LABEL_121:
            (*(void (**)(char *, uint64_t))(v409 + 8))(v415, v410);
            return v199;
          }
          (*(void (**)(char *, uint64_t))(v231 + 96))(v227, v230);
          (*(void (**)(char *, char *, uint64_t))(v355 + 32))(v354, v227, v356);
          v298 = v394;
          v299 = v347;
          (*(void (**)(char *, char *, uint64_t))(v394 + 16))(v347, v281, v263);
          v300 = Logger.logObject.getter();
          v301 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v300, v301))
          {
            v302 = v263;
            v303 = (uint8_t *)swift_slowAlloc();
            v304 = swift_slowAlloc();
            v432 = v304;
            *(_DWORD *)v303 = 136315138;
            v305 = Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
            v431 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v305, v306, (uint64_t *)&v432);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v429 = *(char **)(v298 + 8);
            ((void (*)(char *, uint64_t))v429)(v299, v302);
            _os_log_impl(&dword_1C2356000, v300, v301, "Adding AppsExperience with identfier %s to PommesResponse", v303, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v304, -1, -1);
            MEMORY[0x1C3BBFF64](v303, -1, -1);
          }
          else
          {
            v429 = *(char **)(v298 + 8);
            ((void (*)(char *, uint64_t))v429)(v299, v263);
          }

          v307 = v386;
          Apple_Parsec_Siri_V2alpha_DomainClientComponent.identifier.getter();
          v308 = v355;
          v309 = v354;
          v310 = v356;
          (*(void (**)(char *, char *, uint64_t))(v355 + 16))(v348, v354, v356);
          (*(void (**)(char *, char *, uint64_t))(v413 + 16))(v391, v406, v416);
          objc_allocWithZone((Class)type metadata accessor for AppLaunchExperience());
          v311 = v430;
          v312 = (void *)AppLaunchExperience.init(pluginId:appsClientComponent:queryConfidenceScore:userDialogAct:renderOptions:)();
        }
        v322 = v312;
        Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
        dispatch thunk of Experience.associatedEntities.setter();

        __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
        v323 = swift_allocObject();
        *(_OWORD *)(v323 + 16) = xmmword_1C24FB5A0;
        *(_QWORD *)(v323 + 32) = v322;
        v432 = v323;
        specialized Array._endMutation()();
        v199 = v432;

        (*(void (**)(char *, uint64_t))(v308 + 8))(v309, v310);
        (*(void (**)(char *, uint64_t))(v387 + 8))(v375, v388);
        v280 = v307;
      }
    }
    ((void (*)(char *, uint64_t))v429)(v280, v396);
    (*(void (**)(char *, uint64_t))(v398 + 8))(v405, v401);
    (*(void (**)(char *, uint64_t))(v414 + 8))(v408, v412);
    (*(void (**)(char *, uint64_t))(v413 + 8))(v406, v416);
    goto LABEL_121;
  }
  (*(void (**)(char *, uint64_t))(v130 + 96))(v136, v131);
  (*(void (**)(char *, char *, uint64_t))(v403 + 32))(v407, v136, v404);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v430 = v128;
  v138 = type metadata accessor for Logger();
  __swift_project_value_buffer(v138, (uint64_t)static Logger.pommes);
  v139 = Logger.logObject.getter();
  v140 = static os_log_type_t.debug.getter();
  v141 = os_log_type_enabled(v139, v140);
  v142 = v428;
  if (v141)
  {
    v143 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v143 = 0;
    _os_log_impl(&dword_1C2356000, v139, v140, "Adding a server driven experience", v143, 2u);
    MEMORY[0x1C3BBFF64](v143, -1, -1);
  }

  v432 = MEMORY[0x1E0DEE9D8];
  v144 = v407;
  if ((Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.hasPrimaryExperience.getter() & 1) != 0)
  {
    v145 = v382;
    v146 = Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    v427 = MEMORY[0x1C3BBBAD0](v146);
    v147 = *(void (**)(char *, uint64_t))(v380 + 8);
    v148 = v383;
    v147(v145, v383);
    (*(void (**)(char *, char *, uint64_t))(v413 + 16))(v391, v104, v416);
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    v149 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    v150 = v430;
    v130 = v414;
    v151 = (void *)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
    v152 = Apple_Parsec_Siri_V2alpha_SingleExperience.hasResultEntity.getter();
    v427 = (uint64_t)v147;
    v147(v145, v148);
    v153 = v151;
    if ((v152 & 1) != 0)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_Context_ResultEntity>);
      type metadata accessor for Apple_Parsec_Siri_Context_ResultEntity();
      *(_OWORD *)(swift_allocObject() + 16) = xmmword_1C24FA1B0;
      v154 = v104;
      v155 = v151;
      Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.primaryExperience.getter();
      Apple_Parsec_Siri_V2alpha_SingleExperience.resultEntity.getter();
      ((void (*)(char *, uint64_t))v427)(v145, v148);
      dispatch thunk of Experience.associatedEntities.setter();

      v104 = v154;
      v130 = v414;
    }
    if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
    {
      v156 = v389;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      v157 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v157 - 8) + 56))(v156, 0, 1, v157);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    v158 = v153;
    MEMORY[0x1C3BBEE78]();
    v142 = v428;
    if (*(_QWORD *)((v432 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v432 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();

    v133 = v415;
    v144 = v407;
  }
  v159 = MEMORY[0x1C3BBC328]();
  MEMORY[0x1E0C80A78](v159);
  *(double *)v342 = a3;
  v342[1] = v104;
  v343 = v418;
  v344 = v430;
  v160 = specialized Sequence.compactMap<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))closure #4 in ExperiencesResolver.extractExperiences(from:score:with:)partial apply, (uint64_t)&v340, v159, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6EFC8]);
  swift_bridgeObjectRelease();
  v161 = specialized Array.append<A>(contentsOf:)(v160);
  v162 = *(_QWORD *)(MEMORY[0x1C3BBC31C](v161) + 16);
  swift_bridgeObjectRelease();
  v163 = v144;
  if (v162)
  {
    v164 = specialized ExperiencesResolver.isSquawkResponse(serverExp:)();
    v165 = specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)();
    v428 = (objc_class *)MEMORY[0x1C3BBC31C]();
    v166 = *(void (**)(char *, char *, uint64_t))(v413 + 16);
    v406 = v104;
    v166(v392, v104, v416);
    v167 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.instructionIntent.getter();
    MEMORY[0x1E0C80A78](v167);
    v340 = v163;
    LOBYTE(v341) = v164 & 1;
    v342[0] = v395;
    LOBYTE(v343) = v165 & 1;
    v344 = v429;
    v168 = objc_allocWithZone(v142);
    PommesRenderOptions.init(_:)();
    swift_bridgeObjectRelease();
    v169 = objc_allocWithZone((Class)type metadata accessor for GenericExperience());
    v170 = (id)GenericExperience.init(components:queryConfidenceScore:userDialogAct:intent:renderOptions:)();
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.resultEntities.getter();
    dispatch thunk of Experience.associatedEntities.setter();

    if ((Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasServerSuggestion.getter() & 1) != 0)
    {
      v171 = v389;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverSuggestion.getter();
      v172 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerSuggestion();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v172 - 8) + 56))(v171, 0, 1, v172);
      dispatch thunk of GenericExperience.serverSuggestions.setter();
    }
    v173 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasSageExperience.getter();
    if ((v173 & 1) != 0)
    {
      v174 = v377;
      Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.sageExperience.getter();
      v175 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SageExperience();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v175 - 8) + 56))(v174, 0, 1, v175);
      v173 = dispatch thunk of GenericExperience.sageExperience.setter();
    }
    MEMORY[0x1C3BBEE78](v173);
    v104 = v406;
    v163 = v407;
    if (*(_QWORD *)((v432 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v432 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    v133 = v415;
    v176 = v416;
    v177 = v430;
  }
  else
  {
    swift_bridgeObjectRelease();
    v177 = v430;
    v176 = v416;
  }
  v200 = v432;
  if (v432 >> 62)
  {
    type metadata accessor for Experience();
    swift_bridgeObjectRetain();
    v199 = _bridgeCocoaArray<A>(_:)();

    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for Experience();

    v199 = v200;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v130 + 8))(v408, v131);
  (*(void (**)(char *, uint64_t))(v403 + 8))(v163, v404);
  (*(void (**)(char *, uint64_t))(v413 + 8))(v104, v176);
  (*(void (**)(char *, uint64_t))(v409 + 8))(v133, v410);
  return v199;
}

void partial apply for specialized closure #1 in ExperiencesResolver.extractExperiences(from:score:with:)()
{
  specialized static ExperiencesResolver.userDialogAct(from:)();
}

{
  specialized static ExperiencesResolver.userDialogAct(from:)();
}

uint64_t partial apply for closure #1 in static ExperiencesResolver.userDialogAct(from:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in static ExperiencesResolver.userDialogAct(from:)(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), a1);
}

uint64_t closure #1 in static ExperiencesResolver.userDialogAct(from:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  outlined copy of Data._Representation(a1, a2);
  BinaryDecodingOptions.init()();
  lazy protocol witness table accessor for type Siri_Nlu_External_UserDialogAct and conformance Siri_Nlu_External_UserDialogAct();
  Message.init(serializedData:extensions:partial:options:)();
  if (v3)
  {

    v9 = 1;
  }
  else
  {
    v9 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(a3, v9, 1, v8);
}

uint64_t specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(unint64_t, uint64_t, double))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v8 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  v15 = MEMORY[0x1E0DEE9D8];
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    v11 = v8 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    v12 = *(_QWORD *)(v10 + 72);
    do
    {
      v13 = a5(v11, a4, a1);
      specialized Array.append<A>(contentsOf:)(v13);
      v11 += v12;
      --v9;
    }
    while (v9);
    swift_bridgeObjectRelease();
    return v15;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
}

uint64_t specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(double a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  v5 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  v12 = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    v8 = (_QWORD *)(v5 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    v9 = *(_QWORD *)(v7 + 72);
    do
    {
      v10 = specialized ExperiencesResolver.extractExperiences(from:score:with:)(v8, a3, a1);
      specialized Array.append<A>(contentsOf:)(v10);
      v8 = (_QWORD *)((char *)v8 + v9);
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return v12;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
}

uint64_t specialized closure #2 in ExperiencesResolver.defaultExperiences(from:with:)(double a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v7 = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.alternateSiriInstructions.getter();
  v14 = MEMORY[0x1E0DEE9D8];
  v8 = *(_QWORD *)(v7 + 16);
  if (v8)
  {
    v9 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction() - 8);
    v10 = (double *)(v7 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
    v11 = *(_QWORD *)(v9 + 72);
    do
    {
      v12 = specialized ExperiencesResolver.extractExperiences(from:score:with:)(v10, a4, a3, a1);
      specialized Array.append<A>(contentsOf:)(v12);
      v10 = (double *)((char *)v10 + v11);
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    return v14;
  }
  else
  {
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
}

uint64_t partial apply for closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;

  return closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:)(*(_QWORD *)(v1 + 16), a1);
}

uint64_t closure #1 in DefaultExperiencesResolver.buildExperiences(from:with:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ClientExperienceSignals?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for ClientExperienceSignals();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = specialized PhoneCallExperiencesResolver.buildExperiences(from:with:)(a1);
  result = outlined destroy of MediaUserStateCenter?((uint64_t)v6, &demangling cache variable for type metadata for ClientExperienceSignals?);
  *a2 = v8;
  return result;
}

uint64_t specialized PhoneCallExperiencesResolver.buildExperiences(from:with:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int64_t v19;
  char *v20;
  int isUniquelyReferenced_nonNull_native;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v35;
  BOOL v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  unint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t result;
  char v47[8];
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v55 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ServerDrivenExperience();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = a1;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.serverDrivenExperience.getter();
  v13 = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  v14 = MEMORY[0x1C3BBC31C](v13);
  v15 = *(_QWORD *)(v14 + 16);
  if (!v15)
  {
    v38 = swift_bridgeObjectRelease();
    v17 = MEMORY[0x1E0DEE9D8];
LABEL_25:
    MEMORY[0x1E0C80A78](v38);
    v49 = v54;
    v15 = specialized Sequence.compactMap<A>(_:)((_QWORD *(*)(uint64_t *__return_ptr, uint64_t))partial apply for closure #2 in PhoneCallExperiencesResolver.buildExperiences(from:with:), (uint64_t)v47, v17);
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      goto LABEL_38;
    goto LABEL_26;
  }
  v51 = (char *)v12;
  v52 = v10;
  v53 = v9;
  v16 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent() - 8);
  v10 = v14 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  v9 = *(_QWORD *)(v16 + 72);
  v50 = v14;
  swift_bridgeObjectRetain();
  v17 = MEMORY[0x1E0DEE9D8];
  while (1)
  {
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.delayedActionComponent.getter();
    v18 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    (*(void (**)(char *, uint64_t))(v55 + 8))(v4, v2);
    v12 = *(_QWORD *)(v18 + 16);
    v19 = *(_QWORD *)(v17 + 16);
    v20 = (char *)(v19 + v12);
    if (__OFADD__(v19, v12))
      break;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && (uint64_t)v20 <= *(_QWORD *)(v17 + 24) >> 1)
    {
      if (*(_QWORD *)(v18 + 16))
        goto LABEL_14;
    }
    else
    {
      if (v19 <= (uint64_t)v20)
        v22 = v19 + v12;
      else
        v22 = v19;
      v17 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v22, 1, v17);
      if (*(_QWORD *)(v18 + 16))
      {
LABEL_14:
        v23 = *(_QWORD *)(v17 + 16);
        v24 = (*(_QWORD *)(v17 + 24) >> 1) - v23;
        v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
        if (v24 < v12)
          goto LABEL_36;
        v26 = *(_QWORD *)(v25 - 8);
        v27 = (*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
        v28 = *(_QWORD *)(v26 + 72);
        v29 = v17 + v27 + v28 * v23;
        v30 = v18 + v27;
        v31 = v28 * v12;
        v32 = v29 + v31;
        v33 = v30 + v31;
        if (v30 < v32 && v29 < v33)
        {
          LODWORD(v49) = 0;
          v48 = 1092;
          v47[0] = 2;
          result = _fatalErrorMessage(_:_:file:line:flags:)();
          __break(1u);
          return result;
        }
        swift_arrayInitWithCopy();
        if (v12)
        {
          v35 = *(_QWORD *)(v17 + 16);
          v36 = __OFADD__(v35, v12);
          v37 = (char *)(v35 + v12);
          if (v36)
            goto LABEL_37;
          *(_QWORD *)(v17 + 16) = v37;
        }
        goto LABEL_4;
      }
    }
    if (v12)
      goto LABEL_35;
LABEL_4:
    swift_bridgeObjectRelease();
    v10 += v9;
    if (!--v15)
    {
      v38 = swift_bridgeObjectRelease_n();
      v10 = v52;
      v9 = v53;
      v12 = (uint64_t)v51;
      goto LABEL_25;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  swift_once();
LABEL_26:
  v39 = type metadata accessor for Logger();
  __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  v42 = v15 >> 62;
  if (os_log_type_enabled(v40, v41))
  {
    v43 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v43 = 134217984;
    if (v42)
    {
      swift_bridgeObjectRetain();
      v44 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v44 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v56 = v44;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v40, v41, "Extracted phone call param builders; adding %ld PhoneCallExperience(s)",
      v43,
      0xCu);
    MEMORY[0x1C3BBFF64](v43, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (v42)
  {
    type metadata accessor for Experience();
    swift_bridgeObjectRetain();
    v45 = _bridgeCocoaArray<A>(_:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for Experience();
    v45 = v15;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v12, v9);
  return v45;
}

uint64_t protocol witness for LocalDomainSearch.name.getter in conformance MusicDomain()
{
  uint64_t v0;

  return *(unsigned __int8 *)(*(_QWORD *)v0 + 24);
}

void OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OnDeviceSearchInstrumentationUtil.logStartOnDeviceSearch(requestId:pommesCandidateId:indexType:)(a1, a2, a3, a4, (Class *)0x1E0D9A238, (SEL *)&selRef_setName_, (SEL *)&selRef_setStartedOrChanged_, "Unable to log start of OnDeviceSearch");
}

uint64_t MusicDomain.extractClientSignals(_:)@<X0>(uint64_t a1@<X8>)
{
  return MusicDomain.extractAudioUnderstanding(_:)((uint64_t (*)(_QWORD))MEMORY[0x1E0D6EA40], (void (*)(uint64_t))MEMORY[0x1E0D6F918], a1);
}

uint64_t outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t MusicDomain.extractAudioUnderstanding(_:)@<X0>(uint64_t a1@<X8>)
{
  return MusicDomain.extractAudioUnderstanding(_:)((uint64_t (*)(_QWORD))MEMORY[0x1E0D6F4A0], MEMORY[0x1E0D6F920], a1);
}

uint64_t MusicDomain.extractAudioUnderstanding(_:)@<X0>(uint64_t (*a1)(_QWORD)@<X1>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t);
  uint64_t v43;
  uint64_t v44;

  v42 = a2;
  v44 = a3;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioClientComponent();
  v40 = *(_QWORD *)(v4 - 8);
  v41 = v4;
  MEMORY[0x1E0C80A78](v4);
  v39 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DomainClientComponent();
  v37 = *(_QWORD *)(v6 - 8);
  v38 = v6;
  MEMORY[0x1E0C80A78](v6);
  v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientDrivenExperience();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v43 = a1(0);
  v19 = *(_QWORD *)(v43 - 8);
  MEMORY[0x1E0C80A78](v43);
  v21 = (char *)&v35 - v20;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.clientDrivenExperience.getter();
  v22 = (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  v23 = MEMORY[0x1C3BBC250](v22);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  v24 = *(_QWORD *)(v23 + 16);
  v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientComponent();
  v26 = *(_QWORD *)(v25 - 8);
  if (v24)
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v26 + 16))(v18, v23 + ((*(unsigned __int8 *)(v26 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80)), v25);
    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v18, v27, 1, v25);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v18, 1, v25) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientComponent?);
    v28 = 1;
    v30 = v43;
    v29 = v44;
  }
  else
  {
    v31 = v36;
    Apple_Parsec_Siri_V2alpha_ClientComponent.domainComponent.getter();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v18, v25);
    v32 = v39;
    Apple_Parsec_Siri_V2alpha_DomainClientComponent.audioClientComponent.getter();
    v33 = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v31, v38);
    v42(v33);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v41);
    v30 = v43;
    v29 = v44;
    (*(void (**)(uint64_t, char *, uint64_t))(v19 + 32))(v44, v21, v43);
    v28 = 0;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v29, v28, 1, v30);
}

uint64_t MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, _QWORD), uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  void (*v26)(char *, unint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void (*v32)(char *, unint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _QWORD v37[2];
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(uint64_t, _QWORD);
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  v6 = v5;
  v40 = a5;
  v41 = a4;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_LibrarySearchTerm();
  v47 = *(_QWORD *)(v9 - 8);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)v37 - v13;
  v48 = MEMORY[0x1E0DEE9D8];
  v15 = closure #1 in MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)(a2);
  v16 = *(_QWORD *)(a3 + 16);
  v44 = v15;
  v17 = *(_QWORD *)(v15 + 16);
  if (v16)
  {
    v42 = a3 + 32;
    v37[1] = a3;
    swift_bridgeObjectRetain();
    v18 = 0;
    v19 = v44;
    v38 = v16;
    v39 = v17;
    do
    {
      if (v17)
      {
        v43 = v18;
        v20 = (uint64_t *)(v42 + 16 * v18);
        v21 = v20[1];
        v45 = *v20;
        v46 = v21;
        v22 = v47;
        v23 = v17;
        v24 = v19 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v25 = *(_QWORD *)(v22 + 72);
        v26 = *(void (**)(char *, unint64_t, uint64_t))(v22 + 16);
        v27 = v23;
        v26(v14, v24, v9);
        while (1)
        {
          if ((Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.getter() & 1) != 0)
          {
            (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v9);
          }
          else
          {
            v28 = MEMORY[0x1C3BBBB60]();
            (*(void (**)(uint64_t *, uint64_t, uint64_t, void *, _QWORD, uint64_t, uint64_t))(*v6 + 120))(&v48, v28, v29, &outlined read-only object #0 of MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:), v6[4], v45, v46);
            (*(void (**)(char *, uint64_t))(v47 + 8))(v14, v9);
            swift_bridgeObjectRelease();
          }
          v24 += v25;
          if (!--v27)
            break;
          v26(v14, v24, v9);
        }
        swift_bridgeObjectRelease();
        v19 = v44;
        swift_bridgeObjectRelease();
        v16 = v38;
        v17 = v39;
        v18 = v43;
      }
      ++v18;
    }
    while (v18 != v16);
    swift_bridgeObjectRelease();
    goto LABEL_21;
  }
  if (!v17)
  {
LABEL_21:
    v35 = swift_bridgeObjectRelease();
    goto LABEL_22;
  }
  v30 = v44 + ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80));
  v31 = *(_QWORD *)(v47 + 72);
  v32 = *(void (**)(char *, unint64_t, uint64_t))(v47 + 16);
  swift_bridgeObjectRetain();
  do
  {
    v32(v12, v30, v9);
    if ((Apple_Parsec_Siri_V2alpha_LibrarySearchTerm.rankingOnly.getter() & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v9);
    }
    else
    {
      v33 = MEMORY[0x1C3BBBB60]();
      (*(void (**)(uint64_t *, uint64_t, uint64_t, void *, _QWORD, _QWORD, _QWORD))(*v5 + 120))(&v48, v33, v34, &outlined read-only object #0 of MusicDomain.search(_:queryFields:allowedFieldTypes:userId:), v5[4], 0, 0);
      (*(void (**)(char *, uint64_t))(v47 + 8))(v12, v9);
      swift_bridgeObjectRelease();
    }
    v30 += v31;
    --v17;
  }
  while (v17);
  v35 = swift_bridgeObjectRelease_n();
LABEL_22:
  (*(void (**)(uint64_t))(*(_QWORD *)v6[2] + 144))(v35);
  v41(v48, 0);
  return swift_bridgeObjectRelease();
}

unint64_t closure #1 in MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v17;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_V2alpha_ClientSignals?(a1, (uint64_t)v4);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ClientSignals();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ClientSignals?);
LABEL_10:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C2356000, v13, v14, "MusicDomain : librarySearchTerms from AudioUnderstanding", v15, 2u);
      MEMORY[0x1C3BBFF64](v15, -1, -1);
    }

    return Apple_Parsec_Siri_V2alpha_AudioUnderstanding.librarySearchTerms.getter();
  }
  v7 = Apple_Parsec_Siri_V2alpha_ClientSignals.librarySearchTerms.getter();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
  if (!*(_QWORD *)(v7 + 16))
  {
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v8 = type metadata accessor for Logger();
  __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v11 = 0;
    _os_log_impl(&dword_1C2356000, v9, v10, "MusicDomain : librarySearchTerms from ClientSignals", v11, 2u);
    MEMORY[0x1C3BBFF64](v11, -1, -1);
  }

  return v7;
}

uint64_t MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)(uint64_t a1, uint64_t a2, unint64_t a3, int64_t a4, unint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  NSObject *v12;
  os_log_type_t v13;
  uint8_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  _BYTE *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  os_log_type_t v44;
  uint64_t v45;
  int64_t v46;
  NSObject *v47;
  unint64_t v48;
  uint64_t v50;
  uint64_t v52;
  uint64_t v53[3];
  uint64_t v54;
  uint64_t v55;

  if (one-time initialization token for music != -1)
    goto LABEL_33;
  while (1)
  {
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.music);
    swift_bridgeObjectRetain_n();
    v12 = Logger.logObject.getter();
    v13 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v12, v13))
    {
      v14 = (uint8_t *)swift_slowAlloc();
      v46 = a4;
      v15 = swift_slowAlloc();
      v53[0] = v15;
      *(_DWORD *)v14 = 136315138;
      swift_bridgeObjectRetain();
      v55 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v12, v13, "Searching music domain with: \"%s\"", v14, 0xCu);
      swift_arrayDestroy();
      v16 = v15;
      a4 = v46;
      MEMORY[0x1C3BBFF64](v16, -1, -1);
      MEMORY[0x1C3BBFF64](v14, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v55 = a5;
    if (!*(_QWORD *)(a5 + 16))
      v55 = *(_QWORD *)(v50 + 32);
    swift_bridgeObjectRetain();
    v17 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, int64_t, _QWORD))(**(_QWORD **)(v50 + 16) + 136))(a2, a3, a6, a7, a4, 0);
    if (!v17)
      break;
    v18 = v17;
    v19 = specialized Sequence.compactMap<A>(_:)(v17, &v55);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    v20 = Logger.logObject.getter();
    v21 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v20, v21))
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
LABEL_28:
      specialized Array.append<A>(contentsOf:)(v19);
      return swift_bridgeObjectRelease();
    }
    a5 = v18;
    v44 = v21;
    v47 = v20;
    v22 = swift_slowAlloc();
    v43 = swift_slowAlloc();
    v54 = v43;
    *(_DWORD *)v22 = 136315906;
    swift_bridgeObjectRetain();
    v53[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    v45 = v22;
    *(_WORD *)(v22 + 12) = 2080;
    swift_beginAccess();
    v23 = v55;
    a4 = *(_QWORD *)(v55 + 16);
    v48 = v19;
    if (!a4)
    {
LABEL_23:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
      lazy protocol witness table accessor for type [String] and conformance [A]();
      v39 = BidirectionalCollection<>.joined(separator:)();
      v41 = v40;
      swift_bridgeObjectRelease();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v41, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 22) = 2048;
      if (a5 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      v19 = v48;
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 32) = 2048;
      if (v48 >> 62)
      {
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v47, v44, "SKIT search query=\"%s\" allowedFieldTypes=[%s] found %ld items and resolved to %ld items", (uint8_t *)v45, 0x2Au);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v43, -1, -1);
      MEMORY[0x1C3BBFF64](v45, -1, -1);

      goto LABEL_28;
    }
    v52 = MEMORY[0x1E0DEE9D8];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, a4, 0);
    a7 = specialized Set.startIndex.getter(v23);
    v25 = v24;
    v27 = v26 & 1;
    v50 = v23 + 56;
    while ((a7 & 0x8000000000000000) == 0 && a7 < 1 << *(_BYTE *)(v23 + 32))
    {
      if (((*(_QWORD *)(v50 + (((unint64_t)a7 >> 3) & 0xFFFFFFFFFFFFF8)) >> a7) & 1) == 0)
        goto LABEL_31;
      if (*(_DWORD *)(v23 + 36) != (_DWORD)v25)
        goto LABEL_32;
      LODWORD(a2) = v27;
      v28 = KVFieldType.description.getter();
      a6 = v29;
      a3 = *(_QWORD *)(v52 + 16);
      v30 = *(_QWORD *)(v52 + 24);
      if (a3 >= v30 >> 1)
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v30 > 1, a3 + 1, 1);
      *(_QWORD *)(v52 + 16) = a3 + 1;
      v31 = v52 + 16 * a3;
      *(_QWORD *)(v31 + 32) = v28;
      *(_QWORD *)(v31 + 40) = a6;
      v32 = specialized _NativeSet.index(after:)(a7, v25, a2 & 1, v23);
      a7 = v32;
      v25 = v33;
      v27 = v34 & 1;
      if (!--a4)
      {
        outlined consume of Set<CommonAudio.Attribute>.Index._Variant(v32, v33, v27);
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    swift_once();
  }
  v35 = Logger.logObject.getter();
  v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v37 = 0;
    _os_log_impl(&dword_1C2356000, v35, v36, "Error calling VocabularySearchClient", v37, 2u);
    MEMORY[0x1C3BBFF64](v37, -1, -1);
  }

  lazy protocol witness table accessor for type SearchError and conformance SearchError();
  swift_allocError();
  *v38 = 0;
  swift_willThrow();
  return swift_bridgeObjectRelease();
}

Swift::OpaquePointer_optional __swiftcall VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(Swift::String_optional _, Swift::String_optional userId, Swift::OpaquePointer_optional itemTypes, Swift::OpaquePointer_optional fieldTypes)
{
  uint64_t v4;
  uint64_t v5;
  void *rawValue;
  uint64_t countAndFlagsBits;
  unint64_t object;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  Swift::Bool v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  void *v26;
  _QWORD v27[2];
  Swift::OpaquePointer_optional result;

  v5 = *(_QWORD *)&itemTypes.is_nil;
  rawValue = itemTypes.value._rawValue;
  countAndFlagsBits = userId.value._countAndFlagsBits;
  object = (unint64_t)_.value._object;
  v9 = _.value._countAndFlagsBits;
  v10 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v10);
  v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!object)
    goto LABEL_8;
  v13 = HIBYTE(object) & 0xF;
  if ((object & 0x2000000000000000) == 0)
    v13 = v9 & 0xFFFFFFFFFFFFLL;
  if (v13)
  {
    Date.init()();
    v14 = &v12[v10[5]];
    *(_QWORD *)v14 = "SiriInformationSearch/VocabularySearchClient.swift";
    *((_QWORD *)v14 + 1) = 50;
    v14[16] = 2;
    *(_QWORD *)&v12[v10[6]] = 62;
    v15 = &v12[v10[7]];
    *(_QWORD *)v15 = "search(_:userId:itemTypes:fieldTypes:)";
    *((_QWORD *)v15 + 1) = 38;
    v15[16] = 2;
    v16 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000023);
    v17 = (uint64_t *)&v12[v10[8]];
    *v17 = v16;
    v17[1] = v18;
    MEMORY[0x1E0C80A78](v16);
    v27[-8] = v4;
    v27[-7] = v9;
    v27[-6] = object;
    v27[-5] = rawValue;
    v27[-4] = v5;
    v27[-3] = countAndFlagsBits;
    v27[-2] = v19;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [VocabularyResult]?);
    OS_dispatch_queue.sync<A>(execute:)();
    v20 = (void *)v27[1];
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)static PerformanceUtil.shared + 184))(v12, 1);
    outlined destroy of PerformanceUtil.Ticket((uint64_t)v12);
  }
  else
  {
LABEL_8:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v25 = 0;
      _os_log_impl(&dword_1C2356000, v23, v24, "Empty query given to vocabulary search client", v25, 2u);
      MEMORY[0x1C3BBFF64](v25, -1, -1);
    }

    v20 = 0;
  }
  v26 = v20;
  result.value._rawValue = v26;
  result.is_nil = v21;
  return result;
}

void partial apply for closure #1 in VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(uint64_t *a1@<X8>)
{
  uint64_t v1;

  closure #1 in VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(*(_QWORD **)(v1 + 16), *(_QWORD *)(v1 + 24), *(void **)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64), a1);
}

void closure #1 in VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)(_QWORD *a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>)
{
  void *v8;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  uint64_t v23;
  id v24;
  Class v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  Class v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  void *v34;
  uint64_t v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  id v41;
  id v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  id v55;
  Class isa;
  id v57;
  void *v58;
  uint64_t v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  id v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;

  v66 = a3;
  v67 = a7;
  v65 = a2;
  v14 = type metadata accessor for Locale();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = (void *)a1[8];
  v64 = a6;
  if (v18)
  {
    v68 = v8;
    goto LABEL_3;
  }
  v62 = a5;
  v63 = a8;
  v39 = a1[6];
  v38 = a1[7];
  __swift_project_boxed_opaque_existential_1(a1 + 3, v39);
  (*(void (**)(uint64_t, uint64_t))(v38 + 40))(v39, v38);
  if (!v8)
  {
    v68 = 0;
    v55 = objc_allocWithZone(MEMORY[0x1E0D981D0]);
    isa = Locale._bridgeToObjectiveC()().super.isa;
    v57 = objc_msgSend(v55, sel_initWithLocale_, isa);

    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    v58 = (void *)a1[8];
    a1[8] = v57;

    v18 = (void *)a1[8];
    if (!v18)
    {
      a8 = v63;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v59 = type metadata accessor for Logger();
      __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
      v43 = Logger.logObject.getter();
      v60 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v43, v60))
      {
        v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v61 = 0;
        _os_log_impl(&dword_1C2356000, v43, v60, "VocabularySearchClient : Failed to initialize the tokenizer", v61, 2u);
        MEMORY[0x1C3BBFF64](v61, -1, -1);
      }
      goto LABEL_25;
    }
    a5 = v62;
    a8 = v63;
LABEL_3:
    v19 = v18;
    v20 = (void *)MEMORY[0x1C3BBEC44](v65, v66);
    v21 = objc_msgSend(v19, sel_queryFromText_, v20);

    if (a4)
    {
      v22 = *(_QWORD *)(a4 + 16);
      if (v22)
      {
        v66 = v19;
        v70 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        v23 = a4 + 32;
        do
        {
          v23 += 8;
          v24 = (id)KVItemTypeToNumber();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v22;
        }
        while (v22);
        v19 = v66;
      }
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v25 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v21, sel_setIncludedKVItemTypes_, v25);

    }
    v26 = v67;
    if (a5)
    {
      v27 = *(_QWORD *)(a5 + 16);
      if (v27)
      {
        v70 = MEMORY[0x1E0DEE9D8];
        specialized ContiguousArray.reserveCapacity(_:)();
        v28 = a5 + 32;
        do
        {
          v28 += 8;
          v29 = (id)KVFieldTypeToNumber();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          --v27;
        }
        while (v27);
        v26 = v67;
      }
      type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
      v30 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      objc_msgSend(v21, sel_setIncludedKVFieldTypes_, v30);

    }
    v31 = a1 + 3;
    if (v26)
    {
      v32 = a1[6];
      v33 = a1[7];
      __swift_project_boxed_opaque_existential_1(v31, v32);
      v34 = v68;
      v35 = (*(uint64_t (**)(id, uint64_t, uint64_t, uint64_t, uint64_t))(v33 + 24))(v21, v64, v26, v32, v33);
      v36 = v34;
      if (v34)
      {
LABEL_17:

        v37 = v36;
        goto LABEL_20;
      }
    }
    else
    {
      v52 = a1[6];
      v53 = a1[7];
      __swift_project_boxed_opaque_existential_1(v31, v52);
      v54 = v68;
      v35 = (*(uint64_t (**)(id, uint64_t, uint64_t))(v53 + 32))(v21, v52, v53);
      v36 = v54;
      if (v54)
        goto LABEL_17;
    }
    v51 = v35;

    goto LABEL_28;
  }
  v37 = v8;
  a8 = v63;
LABEL_20:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v40 = type metadata accessor for Logger();
  __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
  v41 = v37;
  v42 = v37;
  v43 = Logger.logObject.getter();
  v44 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v43, v44))
  {

LABEL_25:
    v51 = 0;
    goto LABEL_28;
  }
  v45 = (uint8_t *)swift_slowAlloc();
  v46 = swift_slowAlloc();
  v68 = 0;
  v69 = (uint64_t)v37;
  v47 = v46;
  v70 = v46;
  *(_DWORD *)v45 = 136315138;
  v48 = v37;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  v49 = String.init<A>(describing:)();
  v69 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v70);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();

  _os_log_impl(&dword_1C2356000, v43, v44, "VocabularySearchClient search failed : %s", v45, 0xCu);
  swift_arrayDestroy();
  MEMORY[0x1C3BBFF64](v47, -1, -1);
  MEMORY[0x1C3BBFF64](v45, -1, -1);

  v51 = 0;
LABEL_28:
  *a8 = v51;
}

uint64_t closure #1 in MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)@<X0>(void **a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v5;
  uint64_t v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  id v11;
  id v12;
  uint64_t *v13;
  uint64_t *v14;
  id v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  Swift::UInt v20;
  BOOL v21;
  uint64_t result;
  id v23;
  id v24;
  uint8_t *buf;
  uint64_t v26;
  os_log_type_t type;
  uint64_t v28;

  v5 = *a1;
  if (one-time initialization token for music != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  __swift_project_value_buffer(v6, (uint64_t)static Logger.music);
  v7 = v5;
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    type = v9;
    v10 = (uint8_t *)swift_slowAlloc();
    v26 = swift_slowAlloc();
    v28 = v26;
    *(_DWORD *)v10 = 136315138;
    buf = v10;
    v11 = v7;
    v12 = v7;
    v13 = a2;
    v14 = a3;
    v15 = objc_msgSend(v11, sel_description);
    v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v18 = v17;

    a3 = v14;
    a2 = v13;
    v7 = v12;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v8, type, "Vocabulary item: %s", buf, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v26, -1, -1);
    MEMORY[0x1C3BBFF64](buf, -1, -1);

  }
  else
  {

  }
  v19 = *a2;
  swift_bridgeObjectRetain();
  v20 = dispatch thunk of VocabularyResult.fieldType.getter();
  v21 = specialized Set.contains(_:)(v20, v19);
  swift_bridgeObjectRelease();
  result = 0;
  if (v21)
  {
    v23 = objc_allocWithZone((Class)type metadata accessor for ClientAudioResult());
    v24 = v7;
    result = ClientAudioResult.init(domain:vocabularyResult:)();
  }
  *a3 = result;
  return result;
}

uint64_t specialized Set.startIndex.getter(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t specialized _NativeSet.index(after:)(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

Swift::Void __swiftcall VocabularySearchClient.resetTokenizer()()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in VocabularySearchClient.resetTokenizer();
  *(_QWORD *)(v2 + 24) = v0;
  v4[4] = _sIg_Ieg_TRTA_0;
  v4[5] = v2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_2;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
}

void partial apply for closure #1 in VocabularySearchClient.resetTokenizer()()
{
  uint64_t v0;
  void *v1;

  v1 = *(void **)(v0 + 64);
  *(_QWORD *)(v0 + 64) = 0;

}

void OnDeviceSearchInstrumentationUtil.logEndOnDeviceSearch(requestId:pommesCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  void *v3;
  id v4;
  void *v5;
  id v6;
  void *v7;
  void *v8;
  id v9;
  char v10;
  id v11;
  uint64_t v12;
  os_log_type_t v13;
  uint8_t *v14;
  void *v15;
  NSObject *oslog;

  v1 = v0;
  v2 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)();
  if (v2)
  {
    v3 = (void *)v2;
    v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A220]), sel_init);
    if (v4)
    {
      v5 = v4;
      v6 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A228]), sel_init);
      if (v6)
      {
        v7 = v6;
        objc_msgSend(v6, sel_setExists_, 1);
        objc_msgSend(v5, sel_setEnded_, v7);
        objc_msgSend(v3, sel_setOnDeviceIndexSearchContext_, v5);
        v8 = (void *)objc_opt_self();
        swift_retain();
        v9 = objc_msgSend(v8, sel_processInfo);
        v10 = NSProcessInfo.isRunningUnitTests.getter();

        if ((v10 & 1) != 0)
          v11 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v1 + 96))();
        else
          v11 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
        v15 = v11;
        swift_release();
        objc_msgSend(v15, sel_emitMessage_, v3);

        swift_unknownObjectRelease();
        return;
      }

    }
    else
    {
      v5 = v3;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v13 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v13))
  {
    v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v14 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v13, "Unable to log end of OnDeviceSearch", v14, 2u);
    MEMORY[0x1C3BBFF64](v14, -1, -1);
  }

}

uint64_t PommesResponse.curareDescription.getter()
{
  Swift::String v0;
  Swift::String v1;
  Swift::String v2;
  Swift::String v3;

  _StringGuts.grow(_:)(32);
  v0._countAndFlagsBits = 0x6469666E6F63227BLL;
  v0._object = (void *)0xEF203A2265636E65;
  String.append(_:)(v0);
  dispatch thunk of PommesResponse.primaryQueryConfidence()();
  Double.write<A>(to:)();
  v1._countAndFlagsBits = 0x644974616322202CLL;
  v1._object = (void *)0xEC000000203A2273;
  String.append(_:)(v1);
  dispatch thunk of PommesResponse.primaryCatIds()();
  v2._countAndFlagsBits = MEMORY[0x1C3BBEE9C]();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 125;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0;
}

uint64_t outlined init with copy of CurareInteractionStream?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in closure #1 in PommesSearchRequestProcessor.search(enabled:completion:)(uint64_t a1, char a2)
{
  uint64_t v2;

  return (*(uint64_t (**)(uint64_t, _QWORD))(v2 + 16))(a1, a2 & 1);
}

double static PommesResponse.makeDefaultInteractionStream()@<D0>(uint64_t a1@<X8>)
{
  id v2;
  char v3;
  id v4;
  void *v5;
  id v6;
  double result;

  v2 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v3 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v3 & 1) != 0
    || (v4 = objc_allocWithZone(MEMORY[0x1E0D20F70]),
        v5 = (void *)MEMORY[0x1C3BBEC44](0x4D4D4F5049524953, 0xEA00000000005345),
        v6 = objc_msgSend(v4, sel_initWithStreamId_, v5),
        v5,
        !v6))
  {
    *(_QWORD *)(a1 + 32) = 0;
    result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  else
  {
    *(_QWORD *)(a1 + 24) = type metadata accessor for FSFCurareInteractionStream();
    *(_QWORD *)(a1 + 32) = &protocol witness table for FSFCurareInteractionStream;
    *(_QWORD *)a1 = v6;
  }
  return result;
}

void *PommesResponse.pommesRequestResult.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  id v7;
  void *v8;
  uint64_t v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  id v14;
  void *v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  id v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v37 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for PommesRenderOptions.PromptType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A308]), sel_init);
  if (v7)
  {
    v8 = v7;
    v38 = v6;
    dispatch thunk of PommesResponse.primaryQueryConfidence()();
    objc_msgSend(v8, sel_setPommesConfidenceScore_);
    v9 = PommesResponse.metadataDomainName.getter();
    v10 = (void *)MEMORY[0x1C3BBEC44](v9);
    swift_bridgeObjectRelease();
    objc_msgSend(v8, sel_setPegasusDomain_, v10);

    v11 = dispatch thunk of PommesResponse.experiences.getter();
    v12 = v11;
    v39 = v4;
    v40 = v3;
    if (v11 >> 62)
      goto LABEL_32;
    v13 = *(_QWORD *)((v11 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
      while (1)
      {
        v14 = (v12 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C3BBF3F4](0, v12) : *(id *)(v12 + 32);
        v15 = v14;
        v16 = (void *)dispatch thunk of Experience.renderOptions.getter();
        v17 = PommesRenderOptions.promptTypes.getter();

        v18 = *(_QWORD *)(v17 + 16);
        swift_bridgeObjectRelease();
        if (v18)
          break;

        if (v13 != 1)
        {
          v29 = 5;
          while (1)
          {
            v30 = (v12 & 0xC000000000000001) != 0
                ? (id)MEMORY[0x1C3BBF3F4](v29 - 4, v12)
                : *(id *)(v12 + 8 * v29);
            v15 = v30;
            v31 = v29 - 3;
            if (__OFADD__(v29 - 4, 1))
              break;
            v32 = (void *)dispatch thunk of Experience.renderOptions.getter();
            v33 = PommesRenderOptions.promptTypes.getter();

            v34 = *(_QWORD *)(v33 + 16);
            swift_bridgeObjectRelease();
            if (v34)
              goto LABEL_7;

            ++v29;
            if (v31 == v13)
              goto LABEL_23;
          }
          __break(1u);
LABEL_32:
          swift_bridgeObjectRetain();
          v13 = _CocoaArrayWrapper.endIndex.getter();
          if (v13)
            continue;
        }
        goto LABEL_23;
      }
LABEL_7:
      v20 = v39;
      v19 = v40;
      swift_bridgeObjectRelease_n();
      if (v15)
      {
        v21 = v15;
        v22 = (void *)dispatch thunk of Experience.renderOptions.getter();

        v23 = PommesRenderOptions.promptTypes.getter();
        if (*(_QWORD *)(v23 + 16))
        {
          (*(void (**)(char *, unint64_t, uint64_t))(v20 + 16))(v2, v23 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80)), v19);
          v24 = 0;
        }
        else
        {
          v24 = 1;
        }
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v2, v24, 1, v19);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v2, 1, v19) != 1)
        {
          v36 = (uint64_t)v38;
          (*(void (**)(char *, char *, uint64_t))(v20 + 32))(v38, v2, v19);
          objc_msgSend(v8, sel_setPegasusPromptType_, closure #2 in PommesResponse.pommesRequestResult.getter(v36));

          (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v36, v19);
          return v8;
        }

        goto LABEL_25;
      }
    }
    else
    {
LABEL_23:
      swift_bridgeObjectRelease_n();
      v20 = v39;
      v19 = v40;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v2, 1, 1, v19);
LABEL_25:
    outlined destroy of PommesRenderOptions.PromptType?((uint64_t)v2);
    return v8;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v25 = type metadata accessor for Logger();
  __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v26, v27))
  {
    v28 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v28 = 0;
    _os_log_impl(&dword_1C2356000, v26, v27, "Unable to initialize POMMESSchemaPOMMESRequestResult", v28, 2u);
    MEMORY[0x1C3BBFF64](v28, -1, -1);
  }

  return 0;
}

void PommesRequestInstrumentationUtil.logEndOfPommesRequest(requestId:pommesCandidateId:result:pommesSearchReason:isHandledByPreflight:preflightClientHandlerIdentifier:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8;
  uint64_t v9;
  id v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  id v21;
  void *v22;
  void *v23;
  uint64_t v24;
  os_log_type_t v25;
  uint8_t *v26;
  void *v27;
  id v28;
  char v29;
  id v30;
  void *v31;
  NSObject *oslog;

  if (a4)
  {
    v9 = v8;
    v16 = a4;
    v17 = specialized Emittable.eventWrapper(requestId:pommesCandidateId:)(a1, a2, a3);
    if (v17)
    {
      v18 = (void *)v17;
      v19 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2F0]), sel_init);
      if (v19)
      {
        v20 = v19;
        v21 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2F8]), sel_init);
        if (v21)
        {
          v22 = v21;
          objc_msgSend(v21, sel_setIsHandledByPreflight_, a6 & 1);
          if ((a6 & 1) != 0)
          {
            if (a8)
              v23 = (void *)MEMORY[0x1C3BBEC44](a7, a8);
            else
              v23 = 0;
            objc_msgSend(v22, sel_setPreflightClientHandlerIdentifier_, v23);

          }
          objc_msgSend(v22, sel_setResult_, v16);
          objc_msgSend(v22, sel_setPommesSearchReason_, PommesSearchReason.toInt.getter());
          objc_msgSend(v20, sel_setEnded_, v22);
          objc_msgSend(v18, sel_setPommesRequestContext_, v20);
          v27 = (void *)objc_opt_self();
          swift_retain();
          v28 = objc_msgSend(v27, sel_processInfo);
          v29 = NSProcessInfo.isRunningUnitTests.getter();

          if ((v29 & 1) != 0)
            v30 = (id)(*(uint64_t (**)(void))(*(_QWORD *)v9 + 96))();
          else
            v30 = objc_msgSend((id)objc_opt_self(), sel_sharedStream);
          v31 = v30;
          swift_release();
          objc_msgSend(v31, sel_emitMessage_, v18);

          swift_unknownObjectRelease();
          return;
        }

        v16 = v18;
      }
      else
      {
        v20 = v18;
      }

      v16 = v20;
    }

  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v25))
  {
    v26 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v26 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v25, "Unable to log end of POMMES request", v26, 2u);
    MEMORY[0x1C3BBFF64](v26, -1, -1);
  }

}

Swift::Void __swiftcall DomainWarmup.reset()()
{
  uint64_t v0;
  NSObject *v1;
  uint64_t v2;
  void *v3;
  _QWORD v4[6];

  v1 = *(NSObject **)(v0 + 16);
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = partial apply for closure #1 in DomainWarmup.reset();
  *(_QWORD *)(v2 + 24) = v0;
  v4[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v4[5] = v2;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1107296256;
  v4[2] = thunk for @escaping @callee_guaranteed () -> ();
  v4[3] = &block_descriptor_21;
  v3 = _Block_copy(v4);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if ((v1 & 1) != 0)
    __break(1u);
}

uint64_t partial apply for closure #1 in DomainWarmup.reset()()
{
  uint64_t v0;

  return closure #1 in DomainWarmup.reset()(v0);
}

uint64_t closure #1 in DomainWarmup.reset()(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "DomainWarmup clearing warmup state", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  swift_beginAccess();
  *(_QWORD *)(a1 + 24) = MEMORY[0x1E0DEE9E0];
  return swift_bridgeObjectRelease();
}

uint64_t outlined destroy of DefaultExperiencesResolver(uint64_t a1)
{
  destroy for SportsPersonalizationExperiencesResolver();
  return a1;
}

uint64_t PommesSearchRequestProcessor.__deallocating_deinit()
{
  PommesSearchRequestProcessor.deinit();
  return swift_deallocClassInstance();
}

uint64_t PommesSearchRequestProcessor.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest(v0 + OBJC_IVAR____TtC21SiriInformationSearch28PommesSearchRequestProcessor_pommesSearchRequest, type metadata accessor for PommesSearchRequest);
  swift_release();

  return v0;
}

uint64_t OnDeviceSearchInstrumentationUtil.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  return swift_deallocClassInstance();
}

uint64_t AnalyticsComponentIdGenerator.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

unint64_t type metadata accessor for FSFCurareInteractionStream()
{
  unint64_t result;

  result = lazy cache variable for type metadata for FSFCurareInteractionStream;
  if (!lazy cache variable for type metadata for FSFCurareInteractionStream)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for FSFCurareInteractionStream);
  }
  return result;
}

uint64_t specialized FSFCurareInteractionStream.shouldInsertInteraction()()
{
  void *v0;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  const char *v6;
  uint64_t v7;

  v0 = (void *)objc_opt_self();
  if (!objc_msgSend(v0, sel_isSupportedPlatform))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v2 = type metadata accessor for Logger();
    __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
    v3 = Logger.logObject.getter();
    v4 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v3, v4))
      goto LABEL_13;
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    v6 = "FSFUtils: unsupported platform.";
    goto LABEL_12;
  }
  if ((objc_msgSend(v0, sel_isSupportedUser) & 1) != 0)
    return 1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    v6 = "FSFUtils: unsupported user.";
LABEL_12:
    _os_log_impl(&dword_1C2356000, v3, v4, v6, v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }
LABEL_13:

  return 0;
}

unint64_t lazy protocol witness table accessor for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse;
  if (!lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse)
  {
    v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0D6D198], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse);
  }
  return result;
}

id protocol witness for CurareInteractionStream.insert(_:) in conformance FSFCurareInteractionStream(uint64_t a1)
{
  return @nonobjc FSFCurareInteractionStream.insert(_:)(a1);
}

id @nonobjc FSFCurareInteractionStream.insert(_:)(uint64_t a1)
{
  void *v1;
  id v3;
  id v4[2];

  v4[1] = *(id *)MEMORY[0x1E0C80C00];
  v4[0] = 0;
  if (objc_msgSend(v1, sel_insert_error_, a1, v4))
    return v4[0];
  v3 = v4[0];
  _convertNSErrorToError(_:)();

  return (id)swift_willThrow();
}

uint64_t protocol witness for ContactFetching.contactsAddressAndPhoneFlags(id:) in conformance CNContactStore(uint64_t a1, uint64_t a2, Swift::OpaquePointer_optional a3)
{
  unsigned __int16 v3;

  a3.value._rawValue = 0;
  LOBYTE(v3) = CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(*(Swift::String *)&a1, a3).hasAddress;
  return v3 & 1 | ((v3 > 0xFFu) << 8);
}

Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CNContactStore.contactsAddressAndPhoneFlags(id:)(Swift::String id)
{
  Swift::OpaquePointer_optional v1;
  Swift::Bool hasPhoneNumber;
  Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool v3;
  Swift::Bool hasAddress;
  Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool result;

  v1.value._rawValue = 0;
  v3 = CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(id, v1);
  hasPhoneNumber = v3.hasPhoneNumber;
  hasAddress = v3.hasAddress;
  result.hasPhoneNumber = hasPhoneNumber;
  result.hasAddress = hasAddress;
  return result;
}

uint64_t partial apply for closure #1 in AppInfoDataProvider.equivalentAppInfo(span:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return closure #1 in AppInfoDataProvider.equivalentAppInfo(span:)(*(_QWORD **)(v1 + 16), a1);
}

uint64_t closure #1 in AppInfoDataProvider.equivalentAppInfo(span:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[5];

  v3 = a1[6];
  __swift_project_boxed_opaque_existential_1(a1 + 2, a1[5]);
  v4 = Siri_Nlu_External_UsoEntityIdentifier.value.getter();
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(v3 + 8))(v6, v4);
  swift_bridgeObjectRelease();
  return outlined init with take of PommesSearchReason?((uint64_t)v6, a2, &demangling cache variable for type metadata for AppData?);
}

uint64_t protocol witness for AppDataProviding.getAppInfo(bundleId:allowPlaceholder:) in conformance AppDataProvider@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  _QWORD v4[5];

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)v1 + 104))(v4);
  return outlined init with take of AppData?((uint64_t)v4, a1);
}

void AppDataProvider.getAppInfo(bundleId:allowPlaceholder:)(uint64_t a1@<X0>, unint64_t a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  __int16 v13;
  id v14;
  id v15;
  uint64_t v16;
  NSObject *v17;
  os_log_type_t v18;
  uint8_t *v19;
  void *v20;
  const char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  char v32;
  void *v33;
  void *v34;
  id v35;
  id v36;
  id v37;
  id v38;
  void *v39;
  id v40;
  void *v41;
  uint64_t v42;
  id v43;
  id v44;
  id v45[6];

  v5 = v4;
  v45[5] = *(id *)MEMORY[0x1E0C80C00];
  v10 = v4[5];
  v11 = v4[6];
  __swift_project_boxed_opaque_existential_1(v4 + 2, v10);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v11 + 8))(a1, a2, v10, v11);
  v13 = v12;
  swift_bridgeObjectRelease();
  if ((v13 & 0x100) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = (void *)swift_slowAlloc();
      v45[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v21 = "AppDataProvider#getAppInfo failed to locate app for bundleIdentifier:%s";
      goto LABEL_11;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    goto LABEL_13;
  }
  v14 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();
  v15 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, a3 & 1);
  v28 = v15;
  if (!v15)
  {
LABEL_3:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v16 = type metadata accessor for Logger();
    __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v17 = Logger.logObject.getter();
    v18 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v17, v18))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = (void *)swift_slowAlloc();
      v45[0] = v20;
      *(_DWORD *)v19 = 136315138;
      swift_bridgeObjectRetain();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v21 = "AppDataProvider#getAppInfo failed to resolve appData for bundleIdentifier:%s";
LABEL_11:
      _os_log_impl(&dword_1C2356000, v17, v18, v21, v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v20, -1, -1);
      MEMORY[0x1C3BBFF64](v19, -1, -1);

LABEL_13:
      v23 = 0;
      v24 = 0;
      v25 = 0;
      v26 = 0;
      v27 = 0;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  v29 = objc_msgSend((id)objc_opt_self(), sel_appInfoWithApplicationRecord_, v15);
  if (!v29)
  {

    goto LABEL_3;
  }
  v30 = v29;
  v45[3] = &type metadata for FeatureFlag;
  v45[4] = (id)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v31 = swift_allocObject();
  v45[0] = (id)v31;
  *(_QWORD *)(v31 + 16) = 5;
  *(_QWORD *)(v31 + 24) = 0;
  *(_QWORD *)(v31 + 32) = 0;
  *(_QWORD *)(v31 + 40) = 0;
  *(_BYTE *)(v31 + 48) = 3;
  v32 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v45);
  if ((v32 & 1) == 0)
  {
LABEL_22:
    v27 = MEMORY[0x1E0DEE9D8];
    goto LABEL_23;
  }
  v33 = (void *)v5[7];
  v34 = (void *)MEMORY[0x1C3BBEC44](a1, a2);
  v45[0] = 0;
  v35 = objc_msgSend(v33, sel_actionsForBundleIdentifier_error_, v34, v45);

  v36 = v45[0];
  if (!v35)
  {
    v38 = v45[0];
    v39 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    goto LABEL_22;
  }
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for LNActionMetadata);
  v27 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v37 = v36;

LABEL_23:
  v40 = objc_msgSend(v30, sel_applicationIdentifier);
  if (v40)
  {
    v41 = v40;
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v24 = v42;

  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
  v43 = objc_msgSend(v30, sel_supportedIntents);
  v25 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

  v44 = objc_msgSend(v30, sel_supportedMediaCategories);
  v26 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

LABEL_14:
  *a4 = v23;
  a4[1] = v24;
  a4[2] = v25;
  a4[3] = v26;
  a4[4] = v27;
}

id @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(uint64_t a1, uint64_t a2, char a3)
{
  void *v3;
  void *v5;
  id v6;
  id v7;
  id v8;
  id v10[2];

  v10[1] = *(id *)MEMORY[0x1E0C80C00];
  v5 = (void *)MEMORY[0x1C3BBEC44]();
  swift_bridgeObjectRelease();
  v10[0] = 0;
  v6 = objc_msgSend(v3, sel_initWithBundleIdentifier_allowPlaceholder_error_, v5, a3 & 1, v10);

  if (v6)
  {
    v7 = v10[0];
  }
  else
  {
    v8 = v10[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v6;
}

uint64_t AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:)(uint64_t *a1, uint64_t *a2, char a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  void *v17;
  void (*v18)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>));
  uint64_t v19;
  id v20;
  void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  unint64_t v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  unint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char v75;
  id v76;
  NSObject *v77;
  os_log_type_t v78;
  uint8_t *v79;
  uint64_t v80;
  NSObject *v81;
  os_log_type_t v82;
  uint8_t *v83;
  uint64_t v84;
  os_log_type_t v86;
  uint8_t *v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t *v93;
  uint64_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  char *v104;
  char *v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  __int128 v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118[4];

  v4 = v3;
  v103 = type metadata accessor for Locale.Language();
  v102 = *(_QWORD *)(v103 - 8);
  MEMORY[0x1E0C80A78](v103);
  v101 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale.LanguageCode?);
  MEMORY[0x1E0C80A78](v9);
  v104 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = type metadata accessor for Locale();
  v99 = *(_QWORD *)(v100 - 8);
  MEMORY[0x1E0C80A78](v100);
  v105 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Date();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    v14 = swift_once();
  v17 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v14);
  v92 = v4;
  v93 = a1;
  v94 = a2;
  LOBYTE(v95) = a3 & 1;
  Date.init()();
  v18 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, _DWORD, uint64_t (*)@<X0>(uint64_t *@<X8>)))(*(_QWORD *)v17 + 200);
  v94 = &v91;
  v95 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String : NSDictionary]);
  LOBYTE(v92) = 2;
  v18(v118, 0xD00000000000003BLL, 0x80000001C2504B80, 0, v16, "SiriInformationSearch/AppInfoDataProvider.swift", 47, 2, 133, "getVocabularyConcepts(bundleId:allowPlaceholder:)", 49, v92, partial apply for closure #1 in AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:));
  (*(void (**)(char *, uint64_t))(v13 + 8))(v16, v12);
  v19 = v118[0];
  v20 = objc_msgSend(*(id *)(v4 + 56), sel_languageCode);
  if (!v20)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v39 = type metadata accessor for Logger();
    __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
    v40 = Logger.logObject.getter();
    v41 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v40, v41))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_1C2356000, v40, v41, "PegasusProxy#equivalentAppInfo unable get siriLocale", v42, 2u);
      MEMORY[0x1C3BBFF64](v42, -1, -1);
    }

    return MEMORY[0x1E0DEE9D8];
  }
  v21 = v20;
  v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v24 = v23;

  v118[0] = v22;
  v118[1] = v24;
  v116 = 45;
  v117 = 0xE100000000000000;
  v114 = 95;
  v115 = 0xE100000000000000;
  v94 = (uint64_t *)lazy protocol witness table accessor for type String and conformance String();
  v95 = (uint64_t)v94;
  v92 = MEMORY[0x1E0DEA968];
  v93 = v94;
  v25 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
  v27 = v26;
  swift_bridgeObjectRelease();
  v28 = static Locale.canonicalLanguageIdentifier(from:)();
  v30 = v29;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v31 = type metadata accessor for Logger();
  v32 = __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v98 = v32;
  v33 = Logger.logObject.getter();
  v34 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v33, v34))
  {
    v35 = swift_slowAlloc();
    v36 = swift_slowAlloc();
    v97 = v28;
    v37 = v36;
    v118[0] = v36;
    *(_DWORD *)v35 = 136315394;
    swift_bridgeObjectRetain();
    v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v27, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v35 + 12) = 2080;
    swift_bridgeObjectRetain();
    v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v97, v30, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v33, v34, "PegasusProxy#equivalentAppInfo siriLocale: %s canonical: %s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    v38 = v37;
    v28 = v97;
    MEMORY[0x1C3BBFF64](v38, -1, -1);
    MEMORY[0x1C3BBFF64](v35, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v43 = (uint64_t)v104;
  Locale.init(identifier:)();
  v106 = xmmword_1C24FBDD0;
  v107 = v28;
  v108 = v30;
  v109 = Locale.identifier.getter();
  v110 = v44;
  v45 = v101;
  Locale.language.getter();
  Locale.Language.languageCode.getter();
  (*(void (**)(char *, uint64_t))(v102 + 8))(v45, v103);
  v46 = type metadata accessor for Locale.LanguageCode();
  v47 = *(_QWORD *)(v46 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v43, 1, v46) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v43, &demangling cache variable for type metadata for Locale.LanguageCode?);
    v48 = 0;
    v49 = 0;
  }
  else
  {
    v48 = MEMORY[0x1C3BBA780]();
    v49 = v50;
    (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v43, v46);
  }
  v111 = v48;
  v112 = v49;
  v113 = xmmword_1C24FD760;
  v51 = v108;
  if (v108)
  {
    v52 = v107;
    swift_bridgeObjectRetain();
    v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E0DEE9D8]);
    v55 = v53[2];
    v54 = v53[3];
    if (v55 >= v54 >> 1)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v54 > 1), v55 + 1, 1, v53);
    v53[2] = v55 + 1;
    v56 = &v53[2 * v55];
    v56[4] = v52;
    v56[5] = v51;
  }
  else
  {
    v53 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  v57 = v110;
  if (v110)
  {
    v58 = v109;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
    v60 = v53[2];
    v59 = v53[3];
    if (v60 >= v59 >> 1)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v59 > 1), v60 + 1, 1, v53);
    v53[2] = v60 + 1;
    v61 = &v53[2 * v60];
    v61[4] = v58;
    v61[5] = v57;
    v48 = v111;
    v49 = v112;
  }
  if (v49)
  {
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
    v63 = v53[2];
    v62 = v53[3];
    if (v63 >= v62 >> 1)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v62 > 1), v63 + 1, 1, v53);
    v53[2] = v63 + 1;
    v64 = &v53[2 * v63];
    v64[4] = v48;
    v64[5] = v49;
  }
  v65 = *((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v66 = v113;
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v53[2] + 1, 1, v53);
    v68 = v53[2];
    v67 = v53[3];
    if (v68 >= v67 >> 1)
      v53 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v67 > 1), v68 + 1, 1, v53);
    v53[2] = v68 + 1;
    v69 = &v53[2 * v68];
    v69[4] = v66;
    v69[5] = v65;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  swift_arrayDestroy();
  v70 = v53[2];
  if (!v70)
  {
LABEL_48:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v81 = Logger.logObject.getter();
    v82 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v81, v82))
    {
      v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v83 = 0;
      _os_log_impl(&dword_1C2356000, v81, v82, "PegasusProxy#equivalentAppInfo no vocabulary matches for any locale identifier", v83, 2u);
      MEMORY[0x1C3BBFF64](v83, -1, -1);
    }
    goto LABEL_50;
  }
  v71 = v53 + 5;
  while (1)
  {
    if (!*(_QWORD *)(v19 + 16))
      goto LABEL_43;
    v73 = *(v71 - 1);
    v72 = *v71;
    swift_bridgeObjectRetain_n();
    v74 = specialized __RawDictionaryStorage.find<A>(_:)(v73, v72);
    if ((v75 & 1) != 0)
      break;
    swift_bridgeObjectRelease_n();
LABEL_43:
    v71 += 2;
    if (!--v70)
      goto LABEL_48;
  }
  v76 = *(id *)(*(_QWORD *)(v19 + 56) + 8 * v74);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v77 = Logger.logObject.getter();
  v78 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v77, v78))
  {
    v79 = (uint8_t *)swift_slowAlloc();
    v80 = swift_slowAlloc();
    v118[0] = v80;
    *(_DWORD *)v79 = 136315138;
    swift_bridgeObjectRetain();
    v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v73, v72, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v77, v78, "PegasusProxy#equivalentAppInfo matched vocabulary for locale identifier: %s", v79, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v80, -1, -1);
    MEMORY[0x1C3BBFF64](v79, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  v84 = specialized NSDictionary.arrayValue<A>(for:)();
  swift_bridgeObjectRelease();
  if (v84)
  {
    (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v100);

    return v84;
  }
  v81 = Logger.logObject.getter();
  v86 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v81, v86))
  {
    v87 = (uint8_t *)swift_slowAlloc();
    v88 = swift_slowAlloc();
    v118[0] = v88;
    *(_DWORD *)v87 = 136315138;
    v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v116 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v89, v90, v118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v81, v86, "PegasusProxy#equivalentAppInfo no policies found in vocabulary for key:%s", v87, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v88, -1, -1);
    MEMORY[0x1C3BBFF64](v87, -1, -1);
  }

LABEL_50:
  (*(void (**)(char *, uint64_t))(v99 + 8))(v105, v100);
  return MEMORY[0x1E0DEE9D8];
}

uint64_t partial apply for closure #1 in AppInfoDataProvider.getVocabularyConcepts(bundleId:allowPlaceholder:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;

  v3 = *(_QWORD **)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 24);
  v5 = *(_QWORD *)(v1 + 32);
  v6 = *(unsigned __int8 *)(v1 + 40);
  v7 = v3[5];
  v8 = v3[6];
  __swift_project_boxed_opaque_existential_1(v3 + 2, v7);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 16))(v4, v5, v6, v7, v8);
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance AudioQueueStateDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 112))();
}

unint64_t AppDataProvider.getVocabularies(bundleId:allowPlaceholder:)(uint64_t a1, unint64_t a2)
{
  _QWORD *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  id v20;
  id v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;
  id v31;
  void (*v32)(char *, uint64_t);
  id v33;
  NSURL *v34;
  void *v35;
  void *v36;
  id v37;
  id v38;
  uint64_t v39;
  id v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  void *v48;
  void *v49;
  id v50;
  char *v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;
  int v54;
  char *v55;
  id v56;
  NSURL *v57;
  char *v58;
  void *v59;
  void *v60;
  id v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v68;
  id v69;
  NSObject *v70;
  os_log_type_t v71;
  uint8_t *v72;
  id v73;
  char *v74;
  char *v75;
  uint64_t v76;
  void (*v77)(char *, uint64_t);
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  id v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  id v93;
  void (*v94)(char *, uint64_t);
  uint64_t v95;
  char *v96;
  unint64_t v97;
  id v98;
  uint64_t v99;
  char *v100;
  uint64_t v101;
  uint64_t v102[2];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for URL();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v100 = (char *)&v92 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v92 - v13;
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v92 - v15;
  v17 = v2[5];
  v18 = v2[6];
  __swift_project_boxed_opaque_existential_1(v2 + 2, v17);
  (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(v18 + 8))(a1, a2, v17, v18);
  LOWORD(v17) = v19;
  swift_bridgeObjectRelease();
  if ((v17 & 0x100) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v28 = type metadata accessor for Logger();
    __swift_project_value_buffer(v28, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v102[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain();
      v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v27 = "AppDataProvider#getAppInfo failed to locate app for bundleIdentifier:%s";
      goto LABEL_11;
    }
LABEL_12:

    swift_bridgeObjectRelease_n();
    return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
  }
  v20 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
  swift_bridgeObjectRetain();
  v21 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(a1, a2, 0);
  if (!v21)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v22 = type metadata accessor for Logger();
    __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v23 = Logger.logObject.getter();
    v24 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v23, v24))
    {
      v25 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v102[0] = v26;
      *(_DWORD *)v25 = 136315138;
      swift_bridgeObjectRetain();
      v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      v27 = "AppDataProvider#getVocabularies failed to resolve appData for bundleIdentifier:%s";
LABEL_11:
      _os_log_impl(&dword_1C2356000, v23, v24, v27, v25, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v26, -1, -1);
      MEMORY[0x1C3BBFF64](v25, -1, -1);

      return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
    }
    goto LABEL_12;
  }
  v93 = v21;
  v31 = objc_msgSend(v21, sel_URL);
  static URL._unconditionallyBridgeFromObjectiveC(_:)();

  URL.absoluteURL.getter();
  v32 = *(void (**)(char *, uint64_t))(v9 + 8);
  v96 = v16;
  v32(v16, v8);
  v33 = objc_allocWithZone(MEMORY[0x1E0CB34D0]);
  URL._bridgeToObjectiveC()(v34);
  v36 = v35;
  v37 = objc_msgSend(v33, sel_initWithURL_, v35);

  v94 = v32;
  v32(v14, v8);
  v99 = v8;
  if (v37)
  {
    v38 = objc_msgSend(v37, sel_localizations);
    v39 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v40 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C99E08]), sel_initWithCapacity_, *(_QWORD *)(v39 + 16));
    v102[0] = 0;
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
    static Dictionary._conditionallyBridgeFromObjectiveC(_:result:)();

    if (v102[0])
    {
      v95 = v102[0];
      swift_bridgeObjectRelease();
      v98 = v37;
      v41 = objc_msgSend(v37, sel_localizations);
      v42 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v43 = *(_QWORD *)(v42 + 16);
      v92 = v42;
      if (v43)
      {
        v44 = (uint64_t *)(v42 + 40);
        v97 = 0x80000001C25077C0;
        do
        {
          v45 = *(v44 - 1);
          v46 = *v44;
          swift_bridgeObjectRetain();
          v47 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000013, v97);
          v48 = (void *)MEMORY[0x1C3BBEC44](0x7473696C70, 0xE500000000000000);
          v49 = (void *)MEMORY[0x1C3BBEC44](v45, v46);
          v50 = objc_msgSend(v98, sel_URLForResource_withExtension_subdirectory_localization_, v47, v48, 0, v49, v92);

          if (v50)
          {
            v51 = v96;
            static URL._unconditionallyBridgeFromObjectiveC(_:)();

            v52 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
            v53 = v99;
            v52(v7, v51, v99);
            (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v53);
            v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v53);
            v55 = v100;
            if (v54 != 1)
            {
              v52(v100, v7, v53);
              v56 = objc_allocWithZone(MEMORY[0x1E0C99D80]);
              URL._bridgeToObjectiveC()(v57);
              v58 = v55;
              v60 = v59;
              v61 = objc_msgSend(v56, sel_initWithContentsOfURL_, v59);

              if (v61)
              {
                v62 = static Locale.canonicalLanguageIdentifier(from:)();
                v64 = v63;
                swift_bridgeObjectRelease();
                v65 = v61;
                v66 = v95;
                isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                v102[0] = v66;
                specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v65, v62, v64, isUniquelyReferenced_nonNull_native);
                v95 = v102[0];

                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                v94(v58, v99);
              }
              else
              {
                v94(v58, v99);
                swift_bridgeObjectRelease();
              }
              goto LABEL_22;
            }
          }
          else
          {
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v99);
          }
          swift_bridgeObjectRelease();
          outlined destroy of URL?((uint64_t)v7);
LABEL_22:
          v44 += 2;
          --v43;
        }
        while (v43);
      }

      swift_bridgeObjectRelease();
      return v95;
    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v82 = type metadata accessor for Logger();
      __swift_project_value_buffer(v82, (uint64_t)static Logger.pommes);
      swift_bridgeObjectRetain();
      v83 = Logger.logObject.getter();
      v84 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v83, v84))
      {
        v85 = (uint8_t *)swift_slowAlloc();
        v86 = swift_slowAlloc();
        v102[0] = v86;
        *(_DWORD *)v85 = 136315138;
        v87 = swift_bridgeObjectRetain();
        v88 = MEMORY[0x1C3BBEE9C](v87, MEMORY[0x1E0DEA968]);
        v89 = v37;
        v91 = v90;
        swift_bridgeObjectRelease();
        v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v88, v91, v102);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        v37 = v89;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v83, v84, "AppDataProvider#getVocabularies unable create vocabulariesByLocale from allLocalizations:%s", v85, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v86, -1, -1);
        MEMORY[0x1C3BBFF64](v85, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);

    }
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v68 = type metadata accessor for Logger();
    __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
    v69 = v93;
    v70 = Logger.logObject.getter();
    v71 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v70, v71))
    {
      v72 = (uint8_t *)swift_slowAlloc();
      v100 = (char *)swift_slowAlloc();
      v102[0] = (uint64_t)v100;
      *(_DWORD *)v72 = 136315138;
      v98 = v72 + 4;
      v73 = objc_msgSend(v69, sel_URL);
      v74 = v96;
      static URL._unconditionallyBridgeFromObjectiveC(_:)();

      URL.absoluteURL.getter();
      v75 = v74;
      v76 = v99;
      v77 = v94;
      v94(v75, v99);
      v78 = URL.absoluteString.getter();
      v80 = v79;
      v77(v14, v76);
      v101 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v78, v80, v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v70, v71, "AppDataProvider#getVocabularies unable to construct bundle for url: %s", v72, 0xCu);
      v81 = v100;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v81, -1, -1);
      MEMORY[0x1C3BBFF64](v72, -1, -1);

    }
    else
    {

    }
    v29 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);

  }
  return v29;
}

uint64_t closure #2 in AppInfoDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t *boxed_opaque_existential_1;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44[5];
  uint64_t v45;

  v37 = a2;
  v38 = a1;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v35 = *(_QWORD *)(v2 - 8);
  v36 = v2;
  MEMORY[0x1E0C80A78](v2);
  v34 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v42 = *(_QWORD *)(v4 - 8);
  v43 = v4;
  MEMORY[0x1E0C80A78](v4);
  v41 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Google_Protobuf_Any();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v33 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v9 = *(_QWORD *)(v39 - 8);
  MEMORY[0x1E0C80A78](v39);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v45 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v12 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  v16 = MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v33 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v20 = (char *)&v33 - v19;
  v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AppInfo();
  v44[3] = v21;
  v44[4] = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AppInfo and conformance Apple_Parsec_Siri_V2alpha_AppInfo, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6DDC0], MEMORY[0x1E0D6DD90]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v44);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(boxed_opaque_existential_1, v38, v21);
  defaultAnyTypeURLPrefix.getter();
  v23 = v40;
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v23)
  {

    v24 = 1;
  }
  else
  {
    v24 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v20, v24, 1, v6);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v9 + 104))(v11, *MEMORY[0x1E0D6FCD0], v39);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  outlined init with copy of MediaUserStateCenter?((uint64_t)v20, (uint64_t)v18, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v18, 1, v6) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v33, v18, v6);
  }
  v25 = v36;
  v27 = v34;
  v26 = v35;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v42 + 104))(v41, *MEMORY[0x1E0D70598], v43);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSlice.init()();
  (*(void (**)(char *, _QWORD, uint64_t))(v26 + 104))(v27, *MEMORY[0x1E0D6F1A8], v25);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  v28 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_1C24FA1B0;
  v30 = v29 + v28;
  v31 = v45;
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 16))(v30, v14, v45);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v31);
  return outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for Google_Protobuf_Any?);
}

id specialized PegasusInstrumentationUtil.buildServerDrivenContext(_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  id result;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  void (*v17)(_QWORD, _QWORD, _QWORD);
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  _QWORD *v34;
  Class isa;
  id v36;
  _QWORD v37[2];
  id v38;
  id v39;
  void (*v40)(char *, unint64_t, _QWORD);
  uint64_t v41;
  void (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v1 = *(_QWORD *)(v0 - 8);
  v42 = (void (*)(_QWORD, _QWORD, _QWORD))v0;
  v43 = v1;
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RenderedDialogComponent();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)v37 - v9;
  result = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D9A2B0]), sel_init);
  if (result)
  {
    v39 = result;
    v38 = result;
    v12 = MEMORY[0x1C3BBC31C]();
    v13 = *(_QWORD *)(v12 + 16);
    v44 = v4;
    if (v13)
    {
      v45 = MEMORY[0x1E0DEE9D8];
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v13, 0);
      v14 = (*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
      v37[1] = v12;
      v15 = v12 + v14;
      v16 = *(_QWORD *)(v43 + 72);
      v40 = *(void (**)(char *, unint64_t, _QWORD))(v43 + 16);
      v41 = v16;
      do
      {
        v17 = v42;
        v40(v3, v15, v42);
        Apple_Parsec_Siri_V2alpha_ExperienceComponent.renderedDialog.getter();
        (*(void (**)(char *, void (*)(_QWORD, _QWORD, _QWORD)))(v43 + 8))(v3, v17);
        v18 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1);
          v18 = v45;
        }
        v20 = *(_QWORD *)(v18 + 16);
        v19 = *(_QWORD *)(v18 + 24);
        if (v20 >= v19 >> 1)
        {
          specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v19 > 1, v20 + 1, 1);
          v18 = v45;
        }
        *(_QWORD *)(v18 + 16) = v20 + 1;
        v4 = v44;
        (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v18+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(_QWORD *)(v5 + 72) * v20, v10, v44);
        v45 = v18;
        v15 += v41;
        --v13;
      }
      while (v13);
      swift_bridgeObjectRelease();
      v21 = *(_QWORD *)(v18 + 16);
      if (v21)
        goto LABEL_10;
    }
    else
    {
      swift_bridgeObjectRelease();
      v18 = MEMORY[0x1E0DEE9D8];
      v21 = *(_QWORD *)(MEMORY[0x1E0DEE9D8] + 16);
      if (v21)
      {
LABEL_10:
        v22 = v18 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        v23 = *(_QWORD *)(v5 + 72);
        v42 = *(void (**)(_QWORD, _QWORD, _QWORD))(v5 + 16);
        v43 = v23;
        swift_bridgeObjectRetain();
        v24 = (_QWORD *)MEMORY[0x1E0DEE9D8];
        do
        {
          v42(v8, v22, v4);
          v25 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
          v27 = v26;
          swift_bridgeObjectRelease();
          v28 = HIBYTE(v27) & 0xF;
          if ((v27 & 0x2000000000000000) == 0)
            v28 = v25 & 0xFFFFFFFFFFFFLL;
          if (v28)
          {
            v29 = Apple_Parsec_Siri_V2alpha_RenderedDialogComponent.catID.getter();
            v31 = v30;
            (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
              v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
            v33 = v24[2];
            v32 = v24[3];
            if (v33 >= v32 >> 1)
              v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v32 > 1), v33 + 1, 1, v24);
            v24[2] = v33 + 1;
            v34 = &v24[2 * v33];
            v34[4] = v29;
            v34[5] = v31;
            v4 = v44;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
          }
          v22 += v43;
          --v21;
        }
        while (v21);
        swift_bridgeObjectRelease_n();
        goto LABEL_24;
      }
    }
    swift_bridgeObjectRelease();
LABEL_24:
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    v36 = v38;
    objc_msgSend(v38, sel_setCatIds_, isa);

    return v39;
  }
  return result;
}

uint64_t specialized ExperiencesResolver.isSquawkResponse(serverExp:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t, uint64_t);
  char *v33;
  int v34;
  char *v35;
  char *v36;
  void (*v37)(char *, uint64_t);
  char *v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  char v43;
  void (*v44)(char *, uint64_t);
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
  v48 = *(_QWORD *)(v0 - 8);
  v49 = v0;
  MEMORY[0x1E0C80A78](v0);
  v47 = (char *)&v46 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v60 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v46 - v9;
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v64 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v55 = *(_QWORD *)(v17 - 8);
  v18 = MEMORY[0x1E0C80A78](v17);
  v54 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x1C3BBC31C](v18);
  v58 = *(_QWORD *)(v20 + 16);
  if (v58)
  {
    v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
    v22 = 0;
    v23 = *(_QWORD *)(v21 - 8);
    v24 = *(unsigned __int8 *)(v23 + 80);
    v46 = v20;
    v57 = v20 + ((v24 + 32) & ~v24);
    v53 = *MEMORY[0x1E0D6F778];
    v59 = *MEMORY[0x1E0D6CE30];
    v56 = *(_QWORD *)(v23 + 72);
    v62 = v13;
    v50 = v16;
    v51 = v17;
    do
    {
      v61 = v22;
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      v25 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      v26 = *(_QWORD *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v16, 1, v25) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
        goto LABEL_4;
      }
      v27 = (*(uint64_t (**)(char *, uint64_t))(v26 + 88))(v16, v25);
      if (v27 != v53)
      {
        (*(void (**)(char *, uint64_t))(v26 + 8))(v16, v25);
        goto LABEL_4;
      }
      (*(void (**)(char *, uint64_t))(v26 + 96))(v16, v25);
      (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v54, v16, v17);
      v28 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
      v29 = *(_QWORD *)(v28 + 16);
      if (!v29)
      {
        swift_bridgeObjectRelease();
LABEL_18:
        v17 = v51;
        (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v51);
        goto LABEL_4;
      }
      v30 = *(unsigned __int8 *)(v64 + 80);
      v52 = v28;
      v31 = v28 + ((v30 + 32) & ~v30);
      v63 = *(_QWORD *)(v64 + 72);
      v32 = *(void (**)(char *, uint64_t, uint64_t))(v64 + 16);
      v32(v13, v31, v11);
      while (1)
      {
        Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
        {
          (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v11);
          outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
          goto LABEL_10;
        }
        (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
        v33 = v60;
        (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v60, v10, v5);
        v34 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v33, v5);
        if (v34 == v59)
          break;
        v35 = v4;
        v36 = v33;
        v37 = *(void (**)(char *, uint64_t))(v6 + 8);
        v37(v10, v5);
        (*(void (**)(char *, uint64_t))(v64 + 8))(v62, v11);
        v38 = v36;
        v4 = v35;
        v13 = v62;
        v37(v38, v5);
LABEL_10:
        v31 += v63;
        if (!--v29)
        {
          swift_bridgeObjectRelease();
          v16 = v50;
          goto LABEL_18;
        }
        v32(v13, v31, v11);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 96))(v33, v5);
      v40 = v48;
      v39 = v49;
      v41 = v33;
      v42 = v47;
      (*(void (**)(char *, char *, uint64_t))(v48 + 32))(v47, v41, v49);
      v43 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter();
      v44 = *(void (**)(char *, uint64_t))(v40 + 8);
      v13 = v62;
      v44(v42, v39);
      (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v13, v11);
      v17 = v51;
      (*(void (**)(char *, uint64_t))(v55 + 8))(v54, v51);
      v16 = v50;
      if ((v43 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_4:
      v22 = v61 + 1;
    }
    while (v61 + 1 != v58);
  }
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  void (*v33)(char *, uint64_t, uint64_t);
  char *v34;
  int v35;
  char *v36;
  char *v37;
  void (*v38)(char *, uint64_t);
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  char v45;
  void (*v46)(char *, uint64_t);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  void (*v59)(char *, unint64_t, uint64_t);
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  int v63;
  char *v64;
  uint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SayItBuilderParams();
  v50 = *(_QWORD *)(v0 - 8);
  v51 = v0;
  MEMORY[0x1E0C80A78](v0);
  v49 = (char *)&v48 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v64 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v48 - v9;
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v70 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v57 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v56 = (char *)&v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v67 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v19 = *(_QWORD *)(v67 - 8);
  v20 = MEMORY[0x1E0C80A78](v67);
  v66 = (char *)&v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = MEMORY[0x1C3BBC31C](v20);
  v62 = *(_QWORD *)(v22 + 16);
  if (!v62)
    goto LABEL_24;
  v23 = 0;
  v24 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v48 = v22;
  v61 = v22 + v24;
  v55 = *MEMORY[0x1E0D6F778];
  v63 = *MEMORY[0x1E0D6CE30];
  v25 = *(_QWORD *)(v19 + 72);
  v58 = v19;
  v59 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
  v60 = v25;
  v68 = v13;
  v52 = v16;
  v53 = v17;
  do
  {
    v65 = v23;
    v59(v66, v61 + v60 * v23, v67);
    Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
    v26 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v16, 1, v26) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
LABEL_15:
      v40 = v58;
LABEL_19:
      (*(void (**)(char *, uint64_t))(v40 + 8))(v66, v67);
      goto LABEL_20;
    }
    v28 = (*(uint64_t (**)(char *, uint64_t))(v27 + 88))(v16, v26);
    if (v28 != v55)
    {
      (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v26);
      goto LABEL_15;
    }
    (*(void (**)(char *, uint64_t))(v27 + 96))(v16, v26);
    (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v16, v17);
    v29 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
    v30 = *(_QWORD *)(v29 + 16);
    if (!v30)
    {
      swift_bridgeObjectRelease();
LABEL_18:
      v17 = v53;
      v40 = v58;
      (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v53);
      goto LABEL_19;
    }
    v31 = *(unsigned __int8 *)(v70 + 80);
    v54 = v29;
    v32 = v29 + ((v31 + 32) & ~v31);
    v69 = *(_QWORD *)(v70 + 72);
    v33 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
    v33(v13, v32, v11);
    while (1)
    {
      Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
      {
        (*(void (**)(char *, uint64_t))(v70 + 8))(v13, v11);
        outlined destroy of MediaUserStateCenter?((uint64_t)v4, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
        goto LABEL_9;
      }
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v10, v4, v5);
      v34 = v64;
      (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v64, v10, v5);
      v35 = (*(uint64_t (**)(char *, uint64_t))(v6 + 88))(v34, v5);
      if (v35 == v63)
        break;
      v36 = v4;
      v37 = v34;
      v38 = *(void (**)(char *, uint64_t))(v6 + 8);
      v38(v10, v5);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v68, v11);
      v39 = v37;
      v4 = v36;
      v13 = v68;
      v38(v39, v5);
LABEL_9:
      v32 += v69;
      if (!--v30)
      {
        swift_bridgeObjectRelease();
        v16 = v52;
        goto LABEL_18;
      }
      v33(v13, v32, v11);
    }
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 96))(v34, v5);
    v42 = v50;
    v41 = v51;
    v43 = v34;
    v44 = v49;
    (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v49, v43, v51);
    v45 = Apple_Parsec_Siri_V2alpha_SayItBuilderParams.hasAudioData.getter();
    v46 = *(void (**)(char *, uint64_t))(v42 + 8);
    v13 = v68;
    v46(v44, v41);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    (*(void (**)(char *, uint64_t))(v70 + 8))(v13, v11);
    v17 = v53;
    (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v53);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v66, v67);
    v16 = v52;
    if ((v45 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      return 1;
    }
LABEL_20:
    v23 = v65 + 1;
  }
  while (v65 + 1 != v62);
LABEL_24:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized ExperiencesResolver.shouldPreserveResultSpaceIfPossible(for:)()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  void (*v17)(char *, unint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  void (*v25)(char *, uint64_t);
  _QWORD v26[2];
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t v32;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v26 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.preserveResultSpaceIfPossible.getter() & 1) != 0)
    return 1;
  v30 = v8;
  v12 = MEMORY[0x1C3BBC31C]();
  v13 = *(_QWORD *)(v12 + 16);
  if (v13)
  {
    v27 = v6;
    v28 = v4;
    v29 = v3;
    v14 = v30;
    v15 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v26[1] = v12;
    v16 = v12 + v15;
    v31 = *MEMORY[0x1E0D6F778];
    v32 = *(_QWORD *)(v30 + 72);
    v17 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
    v17(v10, v12 + v15, v7);
    while (1)
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      v19 = *(_QWORD *)(v18 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v2, 1, v18) == 1)
        break;
      v20 = (*(uint64_t (**)(char *, uint64_t))(v19 + 88))(v2, v18);
      if (v20 != v31)
      {
        (*(void (**)(char *, uint64_t))(v19 + 8))(v2, v18);
        goto LABEL_6;
      }
      (*(void (**)(char *, uint64_t))(v19 + 96))(v2, v18);
      v21 = v27;
      v22 = v28;
      v23 = v29;
      (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v27, v2, v29);
      v24 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.preserveResultSpaceIfPossible.getter();
      v25 = *(void (**)(char *, uint64_t))(v22 + 8);
      v14 = v30;
      v25(v21, v23);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v7);
      if ((v24 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        return 1;
      }
LABEL_7:
      v16 += v32;
      if (!--v13)
        goto LABEL_14;
      v17(v10, v16, v7);
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
LABEL_6:
    (*(void (**)(char *, uint64_t))(v14 + 8))(v10, v7);
    goto LABEL_7;
  }
LABEL_14:
  swift_bridgeObjectRelease();
  return 0;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD v18[2];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v18 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((Apple_Parsec_Siri_V2alpha_ServerDrivenExperience.preserveResultSpaceIfPossible.getter() & 1) != 0)
    return 1;
  v8 = MEMORY[0x1C3BBC31C]();
  v9 = *(_QWORD *)(v8 + 16);
  if (v9)
  {
    v10 = *(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent() - 8);
    v11 = *(unsigned __int8 *)(v10 + 80);
    v18[1] = v8;
    v12 = v8 + ((v11 + 32) & ~v11);
    v13 = *MEMORY[0x1E0D6F778];
    v14 = *(_QWORD *)(v10 + 72);
    do
    {
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
      v16 = *(_QWORD *)(v15 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v2, 1, v15) == 1)
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v2, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else if ((*(unsigned int (**)(char *, uint64_t))(v16 + 88))(v2, v15) == v13)
      {
        (*(void (**)(char *, uint64_t))(v16 + 96))(v2, v15);
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v2, v3);
        v17 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.preserveResultSpaceIfPossible.getter();
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        if ((v17 & 1) != 0)
        {
          swift_bridgeObjectRelease();
          return 1;
        }
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v16 + 8))(v2, v15);
      }
      v12 += v14;
      --v9;
    }
    while (v9);
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized ExperiencesResolver.extractSwitchProfile(serverExp:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t result;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  void (*v37)(char *, unint64_t, uint64_t);
  uint64_t v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void (*v43)(void);
  char *v44;
  int v45;
  void (*v46)(char *, uint64_t);
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  char *v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  char *v65;
  int v66;
  uint64_t v67;
  char *v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  void (*v72)(char *, unint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
  MEMORY[0x1E0C80A78](v2);
  v75 = (uint64_t)&v51 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams();
  v4 = *(_QWORD *)(v74 - 8);
  v5 = MEMORY[0x1E0C80A78](v74);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v69 = (char *)&v51 - v8;
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder();
  v73 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = type metadata accessor for Apple_Parsec_Siri_V2alpha_DelayedActionComponent();
  v57 = *(_QWORD *)(v54 - 8);
  MEMORY[0x1E0C80A78](v54);
  v56 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
  MEMORY[0x1E0C80A78](v13);
  v63 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component();
  v15 = *(_QWORD *)(v62 - 8);
  v16 = MEMORY[0x1E0C80A78](v62);
  v58 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v51 - v18;
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ExperienceComponent();
  v21 = *(_QWORD *)(v20 - 8);
  v22 = MEMORY[0x1E0C80A78](v20);
  v65 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = MEMORY[0x1C3BBC31C](v22);
  v59 = *(_QWORD *)(result + 16);
  if (v59)
  {
    v68 = v7;
    v52 = a1;
    v25 = 0;
    v61 = result + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v55 = *MEMORY[0x1E0D6F778];
    v66 = *MEMORY[0x1E0D6CE28];
    v26 = v62;
    v64 = v21;
    v27 = v65;
    v67 = v20;
    v60 = result;
    while (v25 < *(_QWORD *)(result + 16))
    {
      v28 = *(_QWORD *)(v21 + 72);
      v70 = v25;
      (*(void (**)(char *, unint64_t, uint64_t))(v21 + 16))(v27, v61 + v28 * v25, v20);
      Apple_Parsec_Siri_V2alpha_ExperienceComponent.component.getter();
      v29 = (uint64_t)v63;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v63, 1, v26) == 1)
      {
        (*(void (**)(char *, uint64_t))(v21 + 8))(v27, v20);
        outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ExperienceComponent.OneOf_Component?);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v19, v29, v26);
        v30 = v58;
        (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v58, v19, v26);
        v31 = (*(uint64_t (**)(char *, uint64_t))(v15 + 88))(v30, v26);
        if (v31 == v55)
        {
          (*(void (**)(char *, uint64_t))(v15 + 96))(v30, v26);
          v32 = v54;
          (*(void (**)(char *, char *, uint64_t))(v57 + 32))(v56, v30, v54);
          v33 = Apple_Parsec_Siri_V2alpha_DelayedActionComponent.siriCommandBuilder.getter();
          v34 = *(_QWORD *)(v33 + 16);
          if (v34)
          {
            v35 = (*(unsigned __int8 *)(v73 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v73 + 80);
            v53 = v33;
            v36 = v33 + v35;
            v37 = *(void (**)(char *, unint64_t, uint64_t))(v73 + 16);
            v71 = *(_QWORD *)(v73 + 72);
            v72 = v37;
            v37(v11, v36, v9);
            while (1)
            {
              v38 = v75;
              Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.siriCommandBuilderParams.getter();
              (*(void (**)(char *, uint64_t))(v73 + 8))(v11, v9);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v38, 1, v74) == 1)
              {
                outlined destroy of MediaUserStateCenter?(v75, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_SiriCommandBuilder.OneOf_SiriCommandBuilderParams?);
              }
              else
              {
                v39 = v19;
                v40 = v15;
                v41 = v74;
                v42 = v9;
                v43 = *(void (**)(void))(v4 + 32);
                ((void (*)(char *, uint64_t, uint64_t))v43)(v69, v75, v74);
                v44 = v68;
                v43();
                v45 = (*(uint64_t (**)(char *, uint64_t))(v4 + 88))(v44, v41);
                if (v45 == v66)
                {
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v54);
                  (*(void (**)(char *, uint64_t))(v40 + 8))(v39, v62);
                  (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v67);
                  swift_bridgeObjectRelease();
                  (*(void (**)(char *, uint64_t))(v4 + 96))(v44, v41);
                  v47 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
                  v48 = *(_QWORD *)(v47 - 8);
                  v49 = v52;
                  (*(void (**)(uint64_t, char *, uint64_t))(v48 + 32))(v52, v44, v47);
                  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v48 + 56))(v49, 0, 1, v47);
                }
                (*(void (**)(char *, uint64_t))(v4 + 8))(v44, v41);
                v9 = v42;
                v15 = v40;
                v19 = v39;
                v20 = v67;
              }
              v36 += v71;
              if (!--v34)
              {
                swift_bridgeObjectRelease();
                v32 = v54;
                goto LABEL_19;
              }
              v72(v11, v36, v9);
            }
          }
          swift_bridgeObjectRelease();
LABEL_19:
          (*(void (**)(char *, uint64_t))(v57 + 8))(v56, v32);
          v26 = v62;
          (*(void (**)(char *, uint64_t))(v15 + 8))(v19, v62);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v20);
        }
        else
        {
          v46 = *(void (**)(char *, uint64_t))(v15 + 8);
          v46(v19, v62);
          (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v20);
          v46(v30, v62);
          v26 = v62;
        }
      }
      v25 = v70 + 1;
      result = v60;
      v21 = v64;
      v27 = v65;
      if (v70 + 1 == v59)
      {
        swift_bridgeObjectRelease();
        a1 = v52;
        goto LABEL_23;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
LABEL_23:
    v50 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SwitchProfileBuilderParams();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v50 - 8) + 56))(a1, 1, 1, v50);
  }
  return result;
}

uint64_t closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  uint64_t v0;
  uint64_t (*v1)(uint64_t);

  v0 = type metadata accessor for Google_Protobuf_Int32Value();
  v1 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D3E640];
  MEMORY[0x1E0C80A78](v0);
  Com_Apple_Siri_Product_Proto_PromptContext.previousDomainName.getter();
  Apple_Parsec_Siri_Context_PegasusSemanticValue.label.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.previousNldomainName.getter();
  Apple_Parsec_Siri_Context_PegasusSemanticValue.value.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter();
  Apple_Parsec_Siri_Context_PromptContext.domainHints.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.alertDomainHints.getter();
  Apple_Parsec_Siri_Context_PromptContext.alertDomainHints.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.backgroundDomainHints.getter();
  Apple_Parsec_Siri_Context_PromptContext.backgroundDomainHints.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.dictationPrompt.getter();
  Apple_Parsec_Siri_Context_PromptContext.dictationPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.strictPrompt.getter();
  Apple_Parsec_Siri_Context_PromptContext.strictPrompt.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.objectDisambiguation.getter();
  Apple_Parsec_Siri_Context_PromptContext.objectDisambiguation.setter();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Google_Protobuf_Int32Value and conformance Google_Protobuf_Int32Value, v1, MEMORY[0x1E0D3E630]);
  static Message.with(_:)();
  Apple_Parsec_Siri_Context_PromptContext.ambiguityTarget.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.listenAfterSpeaking.getter();
  Apple_Parsec_Siri_Context_PromptContext.listenAfterSpeaking.setter();
  Com_Apple_Siri_Product_Proto_PromptContext.promptTargetHints.getter();
  return Apple_Parsec_Siri_Context_PromptContext.promptTargetHints.setter();
}

uint64_t partial apply for closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  return closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()();
}

uint64_t closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v5;

  v0 = type metadata accessor for Google_Protobuf_Int32Value();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  Com_Apple_Siri_Product_Proto_PromptContext.ambiguityTarget.getter();
  Google_Protobuf_Int32Value.value.getter();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return Google_Protobuf_Int32Value.value.setter();
}

uint64_t closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _BYTE v9[8];

  v3 = type metadata accessor for Apple_Parsec_Siri_Context_ResponseOptions();
  MEMORY[0x1E0C80A78](v3);
  if (*(_QWORD *)(Com_Apple_Siri_Product_Proto_PromptContext.domainHints.getter() + 16))
    swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  Apple_Parsec_Siri_Context_ClientDisplayHints.displayHintsDomain.setter();
  v4 = Com_Apple_Siri_Product_Proto_PromptContext.displayHints.getter();
  MEMORY[0x1E0C80A78](v4);
  *(&v8 - 2) = a2;
  v5 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D26_Product_Proto_DisplayHintVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints(), (uint64_t)(&v8 - 4), v4, (uint64_t)v9);
  swift_bridgeObjectRelease();
  v6 = MEMORY[0x1C3BBBC44](v5);
  MEMORY[0x1E0C80A78](v6);
  *(&v8 - 2) = a2;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ResponseOptions and conformance Apple_Parsec_Siri_Context_ResponseOptions, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6EDD8], MEMORY[0x1E0D6EDC8]);
  static Message.with(_:)();
  return Apple_Parsec_Siri_Context_ClientDisplayHints.responseOptions.setter();
}

uint64_t partial apply for closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD v6[4];
  _BYTE v7[8];

  v3 = Com_Apple_Siri_Product_Proto_PromptContext.responseOptions.getter();
  v6[2] = a2;
  v4 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay12SiriOntology010Com_Apple_D28_Product_Proto_SemanticValueVG_10PegasusAPI0g8_Parsec_d9_Context_ljK0Vs5NeverOTg5((void (*)(uint64_t))partial apply for closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints(), (uint64_t)v6, v3, (uint64_t)v7);
  swift_bridgeObjectRelease();
  return MEMORY[0x1C3BBB9C8](v4);
}

uint64_t PegasusProxy.enablePromptContextLogging.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t Featuriser.featurise(candidate:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 16))(a1, -1, a2);
}

id default argument 0 of PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFE920]), sel_init);
}

uint64_t default argument 1 of PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)()
{
  return AFSupportsMultiUser();
}

uint64_t default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0;
  id v1;
  uint64_t v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v8;
  __int128 v9;
  _UNKNOWN **v10;

  type metadata accessor for AppDataProvider();
  v0 = swift_allocObject();
  *((_QWORD *)&v9 + 1) = &type metadata for PommesSystemAppChecking;
  v10 = &protocol witness table for PommesSystemAppChecking;
  *(_QWORD *)(v0 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  outlined init with take of AppDataProviding(&v8, v0 + 16);
  v1 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  type metadata accessor for PreferredNavigationAppDataProvider();
  v8 = 0u;
  v9 = 0u;
  v10 = 0;
  v2 = swift_allocObject();
  v3 = v1;
  v4 = swift_retain();
  v5 = specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(v4, (uint64_t)v3, 0, 0, (uint64_t)&v8, v2);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  v6 = specialized AnyDataProvider.init<A>(provider:)(v5);
  swift_release();

  return v6;
}

uint64_t default argument 4 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v3;
  __int128 v4;
  _UNKNOWN **v5;

  type metadata accessor for AppDataProvider();
  v0 = swift_allocObject();
  *((_QWORD *)&v4 + 1) = &type metadata for PommesSystemAppChecking;
  v5 = &protocol witness table for PommesSystemAppChecking;
  *(_QWORD *)(v0 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  outlined init with take of AppDataProviding(&v3, v0 + 16);
  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  v1 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v0, 0, 0, (uint64_t)&v3);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v3, &demangling cache variable for type metadata for AppSearchViewProvider?);
  swift_release();
  return v1;
}

uint64_t default argument 6 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for MarketplaceInfoDataProvider();
  v0 = swift_allocObject();
  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  v2 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(v1, 1, 1, v2);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t default argument 7 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0;

  type metadata accessor for PairedDeviceDataProvider();
  v0 = swift_allocObject();
  *(_QWORD *)(v0 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v0);
}

uint64_t default argument 10 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  type metadata accessor for SiriEnvironment();
  return static SiriEnvironment.default.getter();
}

uint64_t default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(_QWORD))type metadata accessor for PegasusInstrumentationUtil);
}

uint64_t default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(_QWORD *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E0C97298, (unint64_t *)&lazy cache variable for type metadata for CNContactStore, (uint64_t)&protocol witness table for CNContactStore, a1);
}

unint64_t default argument 0 of DomainWarmup.init(warmupClients:)()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  void (*v5)(unint64_t, uint64_t, uint64_t);
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, DomainWarmupHandling)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FA1A0;
  *(_QWORD *)(inited + 32) = 0x616964656DLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<WarmupComponent>);
  v1 = type metadata accessor for WarmupComponent();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FA1B0;
  v5 = *(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 104);
  v5(v4 + v3, *MEMORY[0x1E0D988A8], v1);
  v6 = type metadata accessor for PluginWarmupHandler();
  v7 = (_QWORD *)swift_allocObject();
  v7[2] = 0xD00000000000002CLL;
  v7[3] = 0x80000001C2502460;
  v7[4] = v4;
  *(_QWORD *)(inited + 72) = v6;
  *(_QWORD *)(inited + 80) = &protocol witness table for PluginWarmupHandler;
  *(_QWORD *)(inited + 48) = v7;
  *(_QWORD *)(inited + 88) = 0x7374726F7073;
  *(_QWORD *)(inited + 96) = 0xE600000000000000;
  v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1C24FA1B0;
  v9 = *MEMORY[0x1E0D988A0];
  v5(v8 + v3, v9, v1);
  v10 = (_QWORD *)swift_allocObject();
  v10[2] = 0xD000000000000024;
  v10[3] = 0x80000001C2502490;
  v10[4] = v8;
  *(_QWORD *)(inited + 128) = v6;
  *(_QWORD *)(inited + 104) = v10;
  *(_QWORD *)(inited + 136) = &protocol witness table for PluginWarmupHandler;
  *(_QWORD *)(inited + 144) = 0x72656874616577;
  *(_QWORD *)(inited + 152) = 0xE700000000000000;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_1C24FA1B0;
  v5(v11 + v3, v9, v1);
  v12 = (_QWORD *)swift_allocObject();
  v12[2] = 0xD000000000000024;
  v12[3] = 0x80000001C2502490;
  v12[4] = v11;
  *(_QWORD *)(inited + 184) = v6;
  *(_QWORD *)(inited + 192) = &protocol witness table for PluginWarmupHandler;
  *(_QWORD *)(inited + 160) = v12;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t default argument 1 of static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(_QWORD))type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil);
}

uint64_t default argument 0 of PommesSearch.init(remoteSearchClient:domainSearchClients:)()
{
  uint64_t v0;
  char v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  char v10;
  ValueMetadata *v11;
  unint64_t v12;
  id v13;
  id v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD v18[5];
  _QWORD v19[3];
  ValueMetadata *v20;
  _UNKNOWN **v21;

  v20 = &type metadata for FeatureFlag;
  v21 = (_UNKNOWN **)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v0 = swift_allocObject();
  v19[0] = v0;
  *(_QWORD *)(v0 + 16) = 4;
  *(_QWORD *)(v0 + 24) = 0;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = 0;
  *(_BYTE *)(v0 + 48) = 3;
  v1 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if ((v1 & 1) != 0)
  {
    v2 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    v3 = AssistantLocationProvider.init(serviceHelper:)(0);
    v20 = (ValueMetadata *)v2;
    v21 = &protocol witness table for AssistantLocationProvider;
    v19[0] = v3;
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v4 = (void *)static PommesLocationManager.shared;
    v20 = (ValueMetadata *)type metadata accessor for PommesLocationManager(0);
    v21 = &protocol witness table for PommesLocationManager;
    v19[0] = v4;
    v5 = v4;
  }
  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  v6 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  type metadata accessor for AnalyticsComponentIdGenerator();
  v7 = swift_allocObject();
  type metadata accessor for PegasusInstrumentationUtil();
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = v7;
  v9 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v10 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v10 & 1) != 0)
  {
    v11 = &type metadata for EmptyReferenceResolver;
    v12 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    v11 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    v18[0] = ReferenceResolutionClient.__allocating_init()();
    v12 = MEMORY[0x1E0DA3CC8];
  }
  v18[3] = v11;
  v18[4] = v12;
  v13 = default argument 6 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)();
  v14 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
  type metadata accessor for PegasusProxy(0);
  v15 = swift_allocObject();
  v16 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((uint64_t)v19, v6, v8, (uint64_t)v18, (uint64_t)v13, (uint64_t)v14, v15);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v16;
}

id default argument 6 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id result;
  uint64_t v4;
  char *v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[40];
  __int128 v24;
  __int128 v25;
  _UNKNOWN **v26;

  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v24, (uint64_t)v23);
  type metadata accessor for AmpDataProvider();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = v1;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v23, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  v2 = specialized AnyDataProvider.init<A>(provider:)(v0);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v24, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  result = objc_msgSend((id)objc_opt_self(), sel_defaultObserver);
  if (result)
  {
    v4 = (uint64_t)result;
    v5 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    v6 = specialized AudioQueueStateManager.init(queueStateObserver:)(v4, v5);
    type metadata accessor for AudioQueueStateDataProvider();
    v7 = swift_allocObject();
    *(_QWORD *)(v7 + 16) = v6;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    v8 = specialized AnyDataProvider.init<A>(provider:)(v7);
    v9 = default argument 2 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)();
    v10 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    type metadata accessor for AppDataProvider();
    v11 = swift_allocObject();
    *((_QWORD *)&v25 + 1) = &type metadata for PommesSystemAppChecking;
    v26 = &protocol witness table for PommesSystemAppChecking;
    *(_QWORD *)(v11 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
    outlined init with take of AppDataProviding(&v24, v11 + 16);
    v26 = 0;
    v24 = 0u;
    v25 = 0u;
    v12 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v11, 0, 0, (uint64_t)&v24);
    outlined destroy of MediaUserStateCenter?((uint64_t)&v24, &demangling cache variable for type metadata for AppSearchViewProvider?);
    swift_release();
    type metadata accessor for MarketplaceInfoDataProvider();
    v13 = swift_allocObject();
    v14 = v13 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
    v15 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
    swift_allocObject();
    v16 = specialized AnyDataProvider.init<A>(provider:)(v13);
    type metadata accessor for PairedDeviceDataProvider();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
    swift_allocObject();
    v18 = specialized AnyDataProvider.init<A>(provider:)(v17);
    v19 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
    type metadata accessor for SiriEnvironment();
    v20 = static SiriEnvironment.default.getter();
    type metadata accessor for DataProviderManager();
    v21 = swift_allocObject();
    v22 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v2, v8, v9, v10, v12, 0, v16, v18, 0, v19, v20, 0, 0, v21);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    return (id)v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t default argument 1 of PommesSearch.init(remoteSearchClient:domainSearchClients:)()
{
  return specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E0DEE9D8]);
}

uint64_t default argument 5 of PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)()
{
  id v0;
  int v1;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFE920]), sel_init);
  v1 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  return PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v0, v1);
}

uint64_t default argument 1 of OSSignposter.end(token:message:)()
{
  return 0;
}

uint64_t default argument 2 of OSSignposter.end(name:context:message:)()
{
  return 0;
}

uint64_t default argument 1 of UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)()
{
  return 0;
}

id default argument 0 of PommesSearchService.init(pommesSearch:instrumentationUtil:)()
{
  type metadata accessor for PommesSearch();
  return PommesSearch.__allocating_init()();
}

uint64_t default argument 1 of PommesSearchService.init(pommesSearch:instrumentationUtil:)()
{
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  return swift_retain();
}

uint64_t default argument 1 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 2 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0D98920];
  v3 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t default argument 6 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)()
{
  return 0x6867696C66657270;
}

uint64_t default argument 5 of ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)@<X0>(uint64_t *a1@<X8>)
{
  a1[3] = type metadata accessor for SiriKitContactResolver();
  a1[4] = (uint64_t)&protocol witness table for SiriKitContactResolver;
  __swift_allocate_boxed_opaque_existential_1(a1);
  return SiriKitContactResolver.init()();
}

id default argument 6 of ContactProfileSliceResolver.init(from:requestId:pommesCandidateId:profileResolutionRequest:instrumentationUtil:contactResolver:contactStore:)()
{
  return objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
}

uint64_t default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D70598], (uint64_t (*)(_QWORD))MEMORY[0x1E0D705A0], a1);
}

uint64_t default argument 0 of VocabularySearchClient.init(spanMatcher:)@<X0>(_QWORD *a1@<X8>)
{
  id v2;
  uint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(), sel_indexMatcher);
  result = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SEMSpanMatcher);
  a1[3] = result;
  a1[4] = &protocol witness table for SEMSpanMatcher;
  *a1 = v2;
  return result;
}

id default argument 0 of static AudioQueueStateDataProvider.make(audioQueueStateManager:)()
{
  id result;
  uint64_t v1;
  char *v2;

  result = objc_msgSend((id)objc_opt_self(), sel_defaultObserver);
  if (result)
  {
    v1 = (uint64_t)result;
    v2 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    return specialized AudioQueueStateManager.init(queueStateObserver:)(v1, v2);
  }
  else
  {
    __break(1u);
  }
  return result;
}

id default argument 0 of AudioQueueStateManager.init(queueStateObserver:)@<X0>(_QWORD *a1@<X8>)
{
  id result;
  id v3;

  result = objc_msgSend((id)objc_opt_self(), sel_defaultObserver);
  if (result)
  {
    v3 = result;
    result = (id)type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SOMediaNowPlayingObserver);
    a1[3] = result;
    a1[4] = &protocol witness table for SOMediaNowPlayingObserver;
    *a1 = v3;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t default argument 1 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  uint64_t inited;
  uint64_t v1;
  uint64_t v2;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CacheHandling)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FA1B0;
  *(_QWORD *)(inited + 32) = 0x616964656DLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v1 = type metadata accessor for AudioCacheHandler();
  v2 = swift_allocObject();
  *(_QWORD *)(inited + 72) = v1;
  *(_QWORD *)(inited + 80) = &protocol witness table for AudioCacheHandler;
  *(_QWORD *)(inited + 48) = v2;
  return specialized Dictionary.init(dictionaryLiteral:)(inited);
}

uint64_t default argument 3 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  return 6;
}

uint64_t default argument 4 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  return 0;
}

uint64_t default argument 6 of PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  return 0;
}

double default argument 0 of PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  double v4;
  double v5;
  uint64_t v7;

  v0 = type metadata accessor for Date();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  v5 = v4;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v5;
}

id default argument 1 of PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  return v2;
}

uint64_t default argument 0 of PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;

  Date.init()();
  v2 = type metadata accessor for Date();
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 56))(a1, 0, 1, v2);
}

uint64_t default argument 0 of OnDeviceSearchInstrumentationUtil.init(analyticsComponentIdGenerator:)()
{
  type metadata accessor for AnalyticsComponentIdGenerator();
  return swift_allocObject();
}

uint64_t default argument 2 of MusicDomain.search(audioUnderstanding:clientSignals:userIds:completion:)()
{
  return MEMORY[0x1E0DEE9D8];
}

void default argument 0 of AppDataProvider.init(appChecking:)(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for PommesSystemAppChecking;
  *(_QWORD *)(a1 + 32) = &protocol witness table for PommesSystemAppChecking;
}

uint64_t default argument 1 of createAMPUserState(mediaUserState:muxUserInfo:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 2 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)()
{
  return 0;
}

uint64_t default argument 3 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 1 of createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D70598], (uint64_t (*)(_QWORD))MEMORY[0x1E0D705A0], a1);
}

uint64_t default argument 2 of createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)()
{
  return 0;
}

uint64_t default argument 0 of AppIntentMetadataMapper.init(metadataProvider:)@<X0>(_QWORD *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E0D44208, &lazy cache variable for type metadata for LNMetadataProvider, (uint64_t)&protocol witness table for LNMetadataProvider, a1);
}

uint64_t default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(Class *a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  id v7;
  uint64_t result;

  v7 = objc_msgSend(objc_allocWithZone(*a1), sel_init);
  result = type metadata accessor for CNContactStore(0, a2);
  a4[3] = result;
  a4[4] = a3;
  *a4 = v7;
  return result;
}

uint64_t default argument 2 of Collection<>.merge<A>(with:by:isAscending:)()
{
  return 1;
}

uint64_t default argument 0 of UsoEntity_common_MediaItem.findAll(options:with:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 0 of UsoEntity_common_MediaItem.findFirst(options:with:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 0 of Array<A>.findAll(options:with:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 0 of Array<A>.findFirst(options:with:)()
{
  return MEMORY[0x1E0DEE9D8];
}

void default argument 2 of static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for RunningBoardForegroundAppProvider;
  *(_QWORD *)(a1 + 32) = &protocol witness table for RunningBoardForegroundAppProvider;
}

double default argument 3 of static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)@<D0>(uint64_t a1@<X8>)
{
  double result;

  *(_QWORD *)(a1 + 32) = 0;
  result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t default argument 1 of AssistantDataCache.updateSnapshot(on:onlyIfNeeded:)()
{
  return 0;
}

uint64_t default argument 4 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 5 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 6 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 7 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 8 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return 0;
}

uint64_t default argument 9 of PommesBridgeResultCandidateState.init(resultCandidateId:userId:speechPackage:utterance:started:finished:selected:fallback:hasNLResultCandidate:userParses:fallbackParse:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 5 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:)()
{
  return 0;
}

uint64_t default argument 6 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:)()
{
  return 0;
}

uint64_t default argument 7 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:)()
{
  return 0;
}

uint64_t default argument 8 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:)()
{
  return 0;
}

uint64_t default argument 9 of PommesBridgeResultCandidateState.init(trpCandidateId:tcuId:userId:speechPackage:utterance:started:finished:selected:fallback:hasTTResponse:parseResponse:originalUserInput:rewriteReason:)()
{
  return 0;
}

uint64_t default argument 2 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

uint64_t default argument 3 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

uint64_t default argument 4 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

uint64_t default argument 5 of PommesBridgeResultCandidateState.init(runPommesRequest:userId:started:finished:selected:fallback:)()
{
  return 0;
}

id default argument 1 of PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)()
{
  return objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 131);
}

uint64_t default argument 1 of ResponseCache.open(directoryPath:flags:)()
{
  return 6;
}

uint64_t default argument 0 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  type metadata accessor for PegasusProxyForIntelligenceFlow();
  return static PegasusProxyForIntelligenceFlow.shared.getter();
}

id default argument 1 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(_QWORD *a1@<X8>)
{
  id v3;

  if (one-time initialization token for shared != -1)
    swift_once();
  v3 = (id)static PommesLocationManager.shared;
  a1[3] = type metadata accessor for PommesLocationManager(0);
  a1[4] = &protocol witness table for PommesLocationManager;
  *a1 = v3;
  return v3;
}

uint64_t default argument 3 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(_QWORD))type metadata accessor for PegasusInstrumentationUtil);
}

id default argument 5 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id result;
  uint64_t v6;
  char *v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE v23[40];
  _OWORD v24[2];
  uint64_t v25;

  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchToolEmptyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  v0 = swift_allocObject();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  v1 = specialized AnyDataProvider.init<A>(provider:)(v0);
  v25 = 0;
  memset(v24, 0, sizeof(v24));
  outlined init with copy of MediaUserStateCenter?((uint64_t)v24, (uint64_t)v23);
  type metadata accessor for AmpDataProvider();
  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = v3;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v23, v2 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  v4 = specialized AnyDataProvider.init<A>(provider:)(v2);
  outlined destroy of MediaUserStateCenter?((uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  result = objc_msgSend((id)objc_opt_self(), sel_defaultObserver);
  if (result)
  {
    v6 = (uint64_t)result;
    v7 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    v8 = specialized AudioQueueStateManager.init(queueStateObserver:)(v6, v7);
    type metadata accessor for AudioQueueStateDataProvider();
    v9 = swift_allocObject();
    *(_QWORD *)(v9 + 16) = v8;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    v10 = specialized AnyDataProvider.init<A>(provider:)(v9);
    v11 = default argument 2 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)();
    v12 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    type metadata accessor for MarketplaceInfoDataProvider();
    v13 = swift_allocObject();
    v14 = v13 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
    v15 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(v14, 1, 1, v15);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
    swift_allocObject();
    v16 = specialized AnyDataProvider.init<A>(provider:)(v13);
    type metadata accessor for PairedDeviceDataProvider();
    v17 = swift_allocObject();
    *(_QWORD *)(v17 + 16) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
    swift_allocObject();
    v18 = specialized AnyDataProvider.init<A>(provider:)(v17);
    v19 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
    type metadata accessor for SiriEnvironment();
    v20 = static SiriEnvironment.default.getter();
    type metadata accessor for DataProviderManager();
    v21 = swift_allocObject();
    v22 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v4, v10, v11, v12, v1, 0, v16, v18, 0, v19, v20, 0, 0, v21);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();

    swift_release();
    return (id)v22;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t default argument 6 of SagePegasusProxy.init(pegasusClient:locationManager:networkAvailabilityProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(_QWORD *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E0C97298, (unint64_t *)&lazy cache variable for type metadata for CNContactStore, (uint64_t)&protocol witness table for CNContactStore, a1);
}

uint64_t default argument 2 of AudioResult.init(itemSource:audioItem:isDownloaded:)()
{
  return 0;
}

uint64_t default argument 2 of PommesLocationInfo.init(location:accuracyAuthorization:locationNeedsUpdateForAccuracy:)()
{
  return 0;
}

uint64_t default argument 1 of AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t default argument 2 of AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t default argument 3 of AppData.init(applicationIdentifier:supportedIntents:supportedMediaCategories:linkActions:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 3 of PegasusCacheManager.store(siriRequestId:pegasusResponse:pommesResponse:waitFor:completion:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = 5;
  v2 = *MEMORY[0x1E0DEF4A0];
  v3 = type metadata accessor for DispatchTimeInterval();
  return (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t default argument 0 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];
  _OWORD v5[2];
  uint64_t v6;

  v6 = 0;
  memset(v5, 0, sizeof(v5));
  outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v4);
  type metadata accessor for AmpDataProvider();
  v0 = swift_allocObject();
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  v1 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v0 + 48) = 0;
  *(_QWORD *)(v0 + 56) = v1;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v4, v0 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  v2 = specialized AnyDataProvider.init<A>(provider:)(v0);
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  return v2;
}

id default argument 1 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  id result;
  uint64_t v1;
  char *v2;
  id v3;
  uint64_t v4;

  result = objc_msgSend((id)objc_opt_self(), sel_defaultObserver);
  if (result)
  {
    v1 = (uint64_t)result;
    v2 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    v3 = specialized AudioQueueStateManager.init(queueStateObserver:)(v1, v2);
    type metadata accessor for AudioQueueStateDataProvider();
    v4 = swift_allocObject();
    *(_QWORD *)(v4 + 16) = v3;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    return (id)specialized AnyDataProvider.init<A>(provider:)(v4);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t default argument 2 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)()
{
  uint64_t v0;
  uint64_t v1;
  id v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v6[2];
  __int128 v7;
  ValueMetadata *v8;
  _UNKNOWN **v9;

  v0 = type metadata accessor for AppDataProvider();
  v1 = swift_allocObject();
  v8 = &type metadata for PommesSystemAppChecking;
  v9 = &protocol witness table for PommesSystemAppChecking;
  *(_QWORD *)(v1 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  outlined init with take of AppDataProviding(&v7, v1 + 16);
  v8 = (ValueMetadata *)v0;
  v9 = &protocol witness table for AppDataProvider;
  *(_QWORD *)&v7 = v1;
  v2 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  outlined init with copy of AppDataProviding((uint64_t)&v7, (uint64_t)v6);
  type metadata accessor for AppInfoDataProvider();
  v3 = swift_allocObject();
  outlined init with take of AppDataProviding(v6, v3 + 16);
  *(_QWORD *)(v3 + 56) = v2;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  v4 = specialized AnyDataProvider.init<A>(provider:)(v3);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v7);
  return v4;
}

void default argument 4 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 24) = &type metadata for PIMSEnablementProvider;
  *(_QWORD *)(a1 + 32) = &protocol witness table for PIMSEnablementProvider;
}

id default argument 1 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  id result;
  id v6;
  _QWORD v7[5];

  v7[3] = &type metadata for FeatureFlag;
  v7[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v2 = swift_allocObject();
  v7[0] = v2;
  *(_QWORD *)(v2 + 16) = 4;
  *(_QWORD *)(v2 + 24) = 0;
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 48) = 3;
  v3 = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  if ((v3 & 1) != 0)
  {
    v4 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    result = (id)AssistantLocationProvider.init(serviceHelper:)(0);
    a1[3] = v4;
    a1[4] = &protocol witness table for AssistantLocationProvider;
    *a1 = result;
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v6 = (id)static PommesLocationManager.shared;
    a1[3] = type metadata accessor for PommesLocationManager(0);
    a1[4] = &protocol witness table for PommesLocationManager;
    *a1 = v6;
    return v6;
  }
  return result;
}

uint64_t default argument 2 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)()
{
  uint64_t v0;

  type metadata accessor for SiriEnvironment();
  static SiriEnvironment.default.getter();
  v0 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  return v0;
}

uint64_t default argument 8 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)()
{
  return default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((void (*)(_QWORD))type metadata accessor for PegasusInstrumentationUtil);
}

uint64_t default argument 4 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)(void (*a1)(_QWORD))
{
  uint64_t v2;
  uint64_t result;

  type metadata accessor for AnalyticsComponentIdGenerator();
  v2 = swift_allocObject();
  a1(0);
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = v2;
  return result;
}

id default argument 9 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)()
{
  return objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
}

unint64_t default argument 0 of PlayThisLibraryItemPreflightClient.init(rrClient:)@<X0>(uint64_t *a1@<X8>)
{
  id v2;
  char v3;
  ValueMetadata *v4;
  unint64_t result;

  v2 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v3 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v3 & 1) != 0)
  {
    v4 = &type metadata for EmptyReferenceResolver;
    result = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    v4 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *a1 = ReferenceResolutionClient.__allocating_init()();
    result = MEMORY[0x1E0DA3CC8];
  }
  a1[3] = (uint64_t)v4;
  a1[4] = result;
  return result;
}

uint64_t default argument 11 of PegasusProxy.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:profileSliceResolvingDataProvider:pimsEnablementProvider:pegasusClientBuilder:locationManager:networkAvailabilityProvider:instrumentationUtil:preferences:rrClient:contactStore:muxContextManager:)@<X0>(_QWORD *a1@<X8>)
{
  return default argument 7 of PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((Class *)0x1E0C97298, (unint64_t *)&lazy cache variable for type metadata for CNContactStore, (uint64_t)&protocol witness table for CNContactStore, a1);
}

uint64_t default argument 1 of PommesPhoneCallStateManager.cachedIsUserOnPhoneCall(requestId:conservative:)()
{
  return 0;
}

unint64_t lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type EmptyReferenceResolver and conformance EmptyReferenceResolver;
  if (!lazy protocol witness table cache variable for type EmptyReferenceResolver and conformance EmptyReferenceResolver)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for EmptyReferenceResolver, &type metadata for EmptyReferenceResolver);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyReferenceResolver and conformance EmptyReferenceResolver);
  }
  return result;
}

uint64_t outlined init with copy of MediaUserStateCenter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t default argument 1 of SagePegasusProxy.search(searchRequest:clientEntities:)()
{
  return MEMORY[0x1E0DEE9D8];
}

void *default argument 2 of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)()
{
  return &outlined read-only object #0 of default argument 2 of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:);
}

uint64_t default argument 3 of MusicDomain.search(_:query:allowedItemTypes:allowedFieldTypes:userId:)()
{
  return MEMORY[0x1E0DEE9E8];
}

uint64_t default argument 3 of MusicDomain.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 0 of static AppInfoDataProvider.make(appDataProvider:preferences:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  __int128 v5;
  ValueMetadata *v6;
  _UNKNOWN **v7;

  v2 = type metadata accessor for AppDataProvider();
  v3 = swift_allocObject();
  v6 = &type metadata for PommesSystemAppChecking;
  v7 = &protocol witness table for PommesSystemAppChecking;
  *(_QWORD *)(v3 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  result = outlined init with take of AppDataProviding(&v5, v3 + 16);
  a1[3] = v2;
  a1[4] = (uint64_t)&protocol witness table for AppDataProvider;
  *a1 = v3;
  return result;
}

uint64_t default argument 2 of SageSearchRequestProcessor.init(remoteClient:pommesSearchRequest:clientEntities:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 15 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6F580], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F5A0], a1);
}

uint64_t default argument 16 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6E0D8], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E0F8], a1);
}

uint64_t default argument 17 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6E110], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E118], a1);
}

uint64_t default argument 18 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6E070], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E080], a1);
}

uint64_t default argument 21 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)()
{
  return 0;
}

uint64_t default argument 22 of AudioQuery.init(entity:musicTitle:album:artist:podcastTitle:playlistTitle:decade:activity:genre:mood:audiobookAuthor:audiobookTitle:radioStationName:radioStationFrequency:audioRadioType:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:)()
{
  return 0;
}

uint64_t default argument 9 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return 1;
}

uint64_t default argument 0 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 1 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6F580], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6F5A0], a1);
}

uint64_t default argument 2 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6E0D8], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E0F8], a1);
}

uint64_t default argument 3 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6E110], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E118], a1);
}

uint64_t default argument 4 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)@<X0>(uint64_t a1@<X8>)
{
  return default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)(MEMORY[0x1E0D6E070], (uint64_t (*)(_QWORD))MEMORY[0x1E0D6E080], a1);
}

uint64_t default argument 1 of createAmpUsersStateSlice(mediaUserStates:resolution:isPostResolution:muxUserInfo:)@<X0>(unsigned int *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;

  v4 = *a1;
  v5 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 104))(a3, v4, v5);
}

uint64_t default argument 7 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return 0;
}

uint64_t default argument 8 of AudioQuery.init(queryFields:requestType:audioSort:verb:noun:appName:modifier:hasNonExplicitReference:isGlideEligible:networkAvailableAtRequest:)()
{
  return 0;
}

uint64_t default argument 1 of static AudioQuery.makeNormalQuery(audioExperience:mode:)()
{
  return 0;
}

BOOL protocol witness for SetAlgebra.insert(_:) in conformance NSStringCompareOptions(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v3 = *a2;
  v4 = *v2 & *a2;
  if (v4 != *a2)
    *v2 |= v3;
  *a1 = v3;
  return v4 != v3;
}

void protocol witness for SetAlgebra.init() in conformance LSApplicationEnumerationOptions(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance RBSTaskState(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB1940]);
}

id protocol witness for _BridgedStoredNSError._nsError.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  id *v0;

  return *v0;
}

uint64_t protocol witness for _BridgedStoredNSError.init(_nsError:) in conformance related decl 'e' for AFLocationServiceErrorCode@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance LNSystemProtocolIdentifier(uint64_t a1, uint64_t a2)
{
  return protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(a1, a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEA950]);
}

uint64_t protocol witness for static _ObjectiveCBridgeable._forceBridgeFromObjectiveC(_:result:) in conformance ICSubscriptionStatusOfferType(uint64_t a1, id *a2)
{
  uint64_t result;

  result = static String._forceBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return result;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._conditionallyBridgeFromObjectiveC(_:result:) in conformance ICSubscriptionStatusOfferType(uint64_t a1, id *a2)
{
  char v3;

  v3 = static String._conditionallyBridgeFromObjectiveC(_:result:)();
  *a2 = 0;
  return v3 & 1;
}

uint64_t protocol witness for static _ObjectiveCBridgeable._unconditionallyBridgeFromObjectiveC(_:) in conformance ICSubscriptionStatusOfferType@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v3 = MEMORY[0x1C3BBEC44](v2);
  result = swift_bridgeObjectRelease();
  *a1 = v3;
  return result;
}

_QWORD *protocol witness for RawRepresentable.init(rawValue:) in conformance KVFieldType@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *result;
  *(_BYTE *)(a2 + 8) = 0;
  return result;
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance LSDeveloperType(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void protocol witness for Hashable.hash(into:) in conformance KVFieldType()
{
  Swift::UInt *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance KVFieldType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance KVFieldType()
{
  Swift::UInt *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance CLClientLocationReferenceFrame(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MCRestrictedBoolType(_DWORD *a1@<X8>)
{
  _DWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for OptionSet.init(rawValue:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for AFLocationServiceErrorCode(void *a1)
{
  id v2;

  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hashValue.getter in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  id *v0;
  id v1;
  uint64_t v2;

  v1 = *v0;
  v2 = NSObject.hashValue.getter();

  return v2;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return _BridgedStoredNSError.hash(into:)();
}

uint64_t protocol witness for static CustomNSError.errorDomain.getter in conformance related decl 'e' for CLError()
{
  return static String._unconditionallyBridgeFromObjectiveC(_:)();
}

uint64_t protocol witness for CustomNSError.errorCode.getter in conformance related decl 'e' for CLError()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  return _BridgedStoredNSError.errorCode.getter();
}

uint64_t protocol witness for CustomNSError.errorUserInfo.getter in conformance related decl 'e' for CLError()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  return _BridgedStoredNSError.errorUserInfo.getter();
}

uint64_t protocol witness for _ObjectiveCBridgeableError.init(_bridgedNSError:) in conformance related decl 'e' for CLError(void *a1)
{
  id v2;

  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  v2 = a1;
  return _BridgedStoredNSError.init(_bridgedNSError:)();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance related decl 'e' for CLError()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  return _BridgedStoredNSError.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  Hasher.init(_seed:)();
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

void protocol witness for RawRepresentable.rawValue.getter in conformance AFCallState(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

_QWORD *protocol witness for SetAlgebra.intersection(_:) in conformance AFCallState@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;

  *a2 = *v2 & *result;
  return result;
}

_QWORD *protocol witness for SetAlgebra.formIntersection(_:) in conformance AFCallState(_QWORD *result)
{
  _QWORD *v1;

  *v1 &= *result;
  return result;
}

BOOL protocol witness for SetAlgebra.isSubset(of:) in conformance AFCallState(_QWORD *a1)
{
  _QWORD *v1;

  return (*v1 & ~*a1) == 0;
}

BOOL protocol witness for SetAlgebra.isSuperset(of:) in conformance AFCallState(_QWORD *a1)
{
  _QWORD *v1;

  return (*a1 & ~*v1) == 0;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance ICSubscriptionStatusOfferType()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, (uint64_t (*)(uint64_t))type metadata accessor for ICSubscriptionStatusOfferType, (uint64_t)&protocol conformance descriptor for ICSubscriptionStatusOfferType);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, (uint64_t (*)(uint64_t))type metadata accessor for ICSubscriptionStatusOfferType, (uint64_t)&protocol conformance descriptor for ICSubscriptionStatusOfferType);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for AFLocationServiceErrorCode()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
  return static _BridgedStoredNSError.== infix(_:_:)();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance ICSubscriptionStatusOfferType@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = MEMORY[0x1C3BBEC44](*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  *a2 = v3;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance LNSystemProtocolIdentifier@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t protocol witness for _HasCustomAnyHashableRepresentation._toCustomAnyHashable() in conformance LNSystemProtocolIdentifier()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
  return _SwiftNewtypeWrapper<>._toCustomAnyHashable()();
}

uint64_t protocol witness for Error._domain.getter in conformance related decl 'e' for CLError()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  return Error<>._domain.getter();
}

uint64_t protocol witness for Error._code.getter in conformance related decl 'e' for CLError()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  return Error<>._code.getter();
}

uint64_t protocol witness for Error._getEmbeddedNSError() in conformance related decl 'e' for CLError()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  return _BridgedStoredNSError._getEmbeddedNSError()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance related decl 'e' for CLError()
{
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
  return static _BridgedStoredNSError.== infix(_:_:)();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AFCallState(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

uint64_t protocol witness for _ObjectiveCBridgeable._bridgeToObjectiveC() in conformance ICSubscriptionStatusOfferType(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4;
  uint64_t v5;

  v4 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LNSystemProtocolIdentifier()
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LNSystemProtocolIdentifier()
{
  Swift::Int v0;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v0 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LNSystemProtocolIdentifier()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;

  v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3)
    v5 = 1;
  else
    v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t specialized PreferredNavigationAppDataProvider.init(appDataProvider:preferences:carPlayAppHistoryController:carPlaySessionStatus:foregroundAppProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(_QWORD *)(a6 + 40) = type metadata accessor for AppDataProvider();
  *(_QWORD *)(a6 + 48) = &protocol witness table for AppDataProvider;
  *(_QWORD *)(a6 + 16) = a1;
  *(_OWORD *)(a6 + 72) = 0u;
  *(_OWORD *)(a6 + 88) = 0u;
  *(_OWORD *)(a6 + 104) = 0u;
  *(_QWORD *)(a6 + 56) = a2;
  *(_QWORD *)(a6 + 64) = a3;
  *(_QWORD *)(a6 + 72) = a4;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a5, a6 + 80, &demangling cache variable for type metadata for ForegroundAppProvider?);
  swift_endAccess();
  return a6;
}

uint64_t sub_1C23B4BAC()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t dispatch thunk of Featuriser.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of Featuriser.featurise(candidate:rankedSlotIndex:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

void type metadata accessor for KVFieldType(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for KVFieldType);
}

void type metadata accessor for AFUserIdentityClassfication(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for AFUserIdentityClassfication);
}

void type metadata accessor for MPMediaEntityType(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for MPMediaEntityType);
}

void type metadata accessor for AFMediaPlaybackState(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for AFMediaPlaybackState);
}

void type metadata accessor for AFLocationAuthorizationStyle(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for AFLocationAuthorizationStyle);
}

void type metadata accessor for LNSystemProtocolIdentifier(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for LNSystemProtocolIdentifier);
}

void type metadata accessor for ICSubscriptionStatusOfferType(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for ICSubscriptionStatusOfferType);
}

void type metadata accessor for POMMESSchemaPOMMESCacheInvalidationStartedReason(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for POMMESSchemaPOMMESCacheInvalidationStartedReason);
}

uint64_t base witness table accessor for RawRepresentable in ICSubscriptionStatusOfferType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, (uint64_t (*)(uint64_t))type metadata accessor for ICSubscriptionStatusOfferType, (uint64_t)&protocol conformance descriptor for ICSubscriptionStatusOfferType);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in ICSubscriptionStatusOfferType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, (uint64_t (*)(uint64_t))type metadata accessor for ICSubscriptionStatusOfferType, (uint64_t)&protocol conformance descriptor for ICSubscriptionStatusOfferType);
}

uint64_t base witness table accessor for Equatable in ICSubscriptionStatusOfferType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType, (uint64_t (*)(uint64_t))type metadata accessor for ICSubscriptionStatusOfferType, (uint64_t)&protocol conformance descriptor for ICSubscriptionStatusOfferType);
}

uint64_t base witness table accessor for RawRepresentable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for _HasCustomAnyHashableRepresentation in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
}

uint64_t base witness table accessor for Equatable in CLAccuracyAuthorization()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type CLAccuracyAuthorization and conformance CLAccuracyAuthorization, (uint64_t (*)(uint64_t))type metadata accessor for CLAccuracyAuthorization, (uint64_t)&protocol conformance descriptor for CLAccuracyAuthorization);
}

uint64_t base witness table accessor for Equatable in KVFieldType()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type KVFieldType and conformance KVFieldType, (uint64_t (*)(uint64_t))type metadata accessor for KVFieldType, (uint64_t)&protocol conformance descriptor for KVFieldType);
}

uint64_t base witness table accessor for Equatable in LNSystemProtocolIdentifier()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type LNSystemProtocolIdentifier and conformance LNSystemProtocolIdentifier, (uint64_t (*)(uint64_t))type metadata accessor for LNSystemProtocolIdentifier, (uint64_t)&protocol conformance descriptor for LNSystemProtocolIdentifier);
}

void type metadata accessor for CFNotificationName(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for CFNotificationName);
}

void type metadata accessor for CFNotificationCenterRef(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for CFNotificationCenterRef);
}

void type metadata accessor for INMediaSortOrder(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for INMediaSortOrder);
}

void type metadata accessor for INMediaItemType(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for INMediaItemType);
}

void type metadata accessor for related decl 'e' for AFLocationServiceErrorCode(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for related decl 'e' for AFLocationServiceErrorCode);
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for GEOLocationCoordinate2D(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GEOLocationCoordinate2D(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_QWORD *)(result + 8) = 0;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 16) = v3;
  return result;
}

void type metadata accessor for GEOLocationCoordinate2D(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for GEOLocationCoordinate2D);
}

void type metadata accessor for related decl 'e' for CLError(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for related decl 'e' for CLError);
}

uint64_t base witness table accessor for Equatable in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for Error in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for Equatable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for Error in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for AFLocationServiceErrorCode);
}

void type metadata accessor for AFLocationServiceErrorCode(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for AFLocationServiceErrorCode);
}

unint64_t lazy protocol witness table accessor for type Int and conformance Int()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Int and conformance Int;
  if (!lazy protocol witness table cache variable for type Int and conformance Int)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEB470], MEMORY[0x1E0DEB418]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Int and conformance Int);
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type AFLocationServiceErrorCode and conformance AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for AFLocationServiceErrorCode);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in AFLocationServiceErrorCode()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for AFLocationServiceErrorCode and conformance related decl 'e' for AFLocationServiceErrorCode, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for AFLocationServiceErrorCode, (uint64_t)&protocol conformance descriptor for related decl 'e' for AFLocationServiceErrorCode);
}

uint64_t base witness table accessor for CustomNSError in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for _ObjectiveCBridgeableError in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
}

uint64_t base witness table accessor for Hashable in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : _ErrorCodeProtocol in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type CLError and conformance CLError, (uint64_t (*)(uint64_t))type metadata accessor for CLError, (uint64_t)&protocol conformance descriptor for CLError);
}

void type metadata accessor for CLError(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, &lazy cache variable for type metadata for CLError);
}

uint64_t associated type witness table accessor for _BridgedStoredNSError.Code : RawRepresentable in related decl 'e' for CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type CLError and conformance CLError, (uint64_t (*)(uint64_t))type metadata accessor for CLError, (uint64_t)&protocol conformance descriptor for CLError);
}

uint64_t base witness table accessor for Equatable in CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type CLError and conformance CLError, (uint64_t (*)(uint64_t))type metadata accessor for CLError, (uint64_t)&protocol conformance descriptor for CLError);
}

uint64_t associated type witness table accessor for _ErrorCodeProtocol._ErrorType : _BridgedStoredNSError in CLError()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type related decl 'e' for CLError and conformance related decl 'e' for CLError, (uint64_t (*)(uint64_t))type metadata accessor for related decl 'e' for CLError, (uint64_t)&protocol conformance descriptor for related decl 'e' for CLError);
}

void type metadata accessor for CFStringRef(uint64_t a1)
{
  type metadata accessor for KVFieldType(a1, (unint64_t *)&lazy cache variable for type metadata for CFStringRef);
}

void type metadata accessor for KVFieldType(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void ParkingLocationProfileSliceResolver.resolutionSucceeded.setter()
{
  swift_deletedMethodError();
  __break(1u);
}

id PommesSearchError.underlyingError.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t PommesSearchError.searchReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for PommesSearchError(0) + 20);
  v4 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PommesSearchError.init(underlyingError:searchReason:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char *v4;
  uint64_t v5;

  *a3 = a1;
  v4 = (char *)a3 + *(int *)(type metadata accessor for PommesSearchError(0) + 20);
  v5 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(v4, a2, v5);
}

uint64_t PommesSearchEagerInfo.searchReason.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t PommesSearchEagerInfo.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *MEMORY[0x1E0D98920];
  v3 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 104))(a1, v2, v3);
}

uint64_t PommesSearchEagerInfo.init(searchReason:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
}

uint64_t PommesSearch.preflightClients.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearch.remoteSearchClient.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.localSearchClients.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesSearch.pegasusCacheManager.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.muxContextManager.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.domainWarmup.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.requestInstrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PommesSearch.serverFallbackPreferences.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of AppDataProviding(v1 + 72, a1);
}

uint64_t PommesSearch.serverFallbackPreferences.setter(__int128 *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = v1 + 72;
  swift_beginAccess();
  __swift_destroy_boxed_opaque_existential_1(v3);
  outlined init with take of AppDataProviding(a1, v3);
  return swift_endAccess();
}

uint64_t (*PommesSearch.serverFallbackPreferences.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

unint64_t static PommesSearch.UserDefaultsSuiteName.getter()
{
  return 0xD000000000000015;
}

uint64_t PommesSearch.hasCompletedInitialPrepare.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 112);
}

id PommesSearch.__allocating_init()()
{
  id v0;
  int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id result;
  uint64_t v7;
  char *v8;
  id v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  void *v30;
  id v31;
  uint64_t v32;
  uint64_t v33;
  id v34;
  ValueMetadata *v35;
  unint64_t v36;
  id v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t inited;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  id v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD v54[5];
  __int128 v55;
  __int128 v56;
  _UNKNOWN **v57;

  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFE920]), sel_init);
  v1 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  v2 = PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v0, v1);
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v55, (uint64_t)v54, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for AmpDataProvider();
  v3 = swift_allocObject();
  *(_OWORD *)(v3 + 32) = 0u;
  *(_OWORD *)(v3 + 16) = 0u;
  v4 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = v4;
  swift_beginAccess();
  v52 = v2;
  swift_retain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v54, v3 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  v5 = specialized AnyDataProvider.init<A>(provider:)(v3);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v55, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  result = objc_msgSend((id)objc_opt_self(), sel_defaultObserver);
  if (result)
  {
    v7 = (uint64_t)result;
    v8 = (char *)objc_allocWithZone((Class)type metadata accessor for AudioQueueStateManager());
    v9 = specialized AudioQueueStateManager.init(queueStateObserver:)(v7, v8);
    type metadata accessor for AudioQueueStateDataProvider();
    v10 = swift_allocObject();
    *(_QWORD *)(v10 + 16) = v9;
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
    swift_allocObject();
    v11 = specialized AnyDataProvider.init<A>(provider:)(v10);
    v12 = default argument 2 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    v13 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
    type metadata accessor for AppDataProvider();
    v14 = swift_allocObject();
    *((_QWORD *)&v56 + 1) = &type metadata for PommesSystemAppChecking;
    v57 = &protocol witness table for PommesSystemAppChecking;
    *(_QWORD *)(v14 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
    outlined init with take of AppDataProviding(&v55, v14 + 16);
    v57 = 0;
    v55 = 0u;
    v56 = 0u;
    v15 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v14, 0, 0, (uint64_t)&v55);
    outlined destroy of MediaUserStateCenter?((uint64_t)&v55, &demangling cache variable for type metadata for AppSearchViewProvider?);
    swift_release();
    type metadata accessor for MarketplaceInfoDataProvider();
    v16 = swift_allocObject();
    v17 = v16 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
    v18 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 56))(v17, 1, 1, v18);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
    swift_allocObject();
    v19 = specialized AnyDataProvider.init<A>(provider:)(v16);
    type metadata accessor for PairedDeviceDataProvider();
    v20 = swift_allocObject();
    *(_QWORD *)(v20 + 16) = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
    swift_allocObject();
    v21 = specialized AnyDataProvider.init<A>(provider:)(v20);
    v51 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
    type metadata accessor for SiriEnvironment();
    v22 = static SiriEnvironment.default.getter();
    type metadata accessor for DataProviderManager();
    v23 = swift_allocObject();
    v24 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v5, v11, v12, v13, v15, 0, v19, v21, v52, v51, v22, 0, 0, v23);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    v25 = v24;
    swift_release();

    swift_release();
    static SiriEnvironment.default.getter();
    v26 = SiriEnvironment.networkAvailability.getter();
    swift_release();
    *((_QWORD *)&v56 + 1) = &type metadata for FeatureFlag;
    v57 = (_UNKNOWN **)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v27 = swift_allocObject();
    *(_QWORD *)&v55 = v27;
    *(_QWORD *)(v27 + 16) = 4;
    *(_QWORD *)(v27 + 24) = 0;
    *(_QWORD *)(v27 + 32) = 0;
    *(_QWORD *)(v27 + 40) = 0;
    *(_BYTE *)(v27 + 48) = 3;
    swift_retain();
    swift_retain();
    LOBYTE(v24) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    if ((v24 & 1) != 0)
    {
      v28 = type metadata accessor for AssistantLocationProvider();
      swift_allocObject();
      v29 = AssistantLocationProvider.init(serviceHelper:)(0);
      *((_QWORD *)&v56 + 1) = v28;
      v57 = &protocol witness table for AssistantLocationProvider;
      *(_QWORD *)&v55 = v29;
    }
    else
    {
      if (one-time initialization token for shared != -1)
        swift_once();
      v30 = (void *)static PommesLocationManager.shared;
      *((_QWORD *)&v56 + 1) = type metadata accessor for PommesLocationManager(0);
      v57 = &protocol witness table for PommesLocationManager;
      *(_QWORD *)&v55 = v30;
      v31 = v30;
    }
    type metadata accessor for AnalyticsComponentIdGenerator();
    v32 = swift_allocObject();
    type metadata accessor for PegasusInstrumentationUtil();
    v33 = swift_allocObject();
    *(_QWORD *)(v33 + 16) = 0;
    *(_QWORD *)(v33 + 24) = v32;
    v34 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
    LOBYTE(v32) = NSProcessInfo.isRunningUnitTests.getter();

    if ((v32 & 1) != 0)
    {
      v35 = &type metadata for EmptyReferenceResolver;
      v36 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
    }
    else
    {
      v35 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
      v54[0] = ReferenceResolutionClient.__allocating_init()();
      v36 = MEMORY[0x1E0DA3CC8];
    }
    v54[3] = v35;
    v54[4] = v36;
    v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
    type metadata accessor for PegasusProxy(0);
    v38 = swift_allocObject();
    v39 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((uint64_t)&v55, v26, v33, (uint64_t)v54, v25, (uint64_t)v37, v38);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(LocalDomainTypes, LocalDomainSearch)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C24FA1B0;
    *(_BYTE *)(inited + 32) = 1;
    v41 = objc_msgSend((id)objc_opt_self(), sel_indexMatcher);
    v42 = type metadata accessor for MusicDomain();
    v43 = swift_allocObject();
    v44 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v41, v43);
    *(_QWORD *)(inited + 64) = v42;
    *(_QWORD *)(inited + 72) = &protocol witness table for MusicDomain;
    *(_QWORD *)(inited + 40) = v44;
    v45 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    v46 = specialized static PommesSearch.defaultPreflightClients(dataProviderManager:networkAvailabilityProvider:)(v25, v26);
    if (one-time initialization token for shared != -1)
      swift_once();
    v47 = static PegasusCacheManager.shared;
    swift_retain();
    v48 = default argument 0 of DomainWarmup.init(warmupClients:)();
    type metadata accessor for DomainWarmup();
    swift_allocObject();
    v49 = DomainWarmup.init(warmupClients:)(v48);
    v50 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t, uint64_t, _QWORD *, uint64_t))(v53 + 208))(v39, v45, v46, v47, v49, v52);
    swift_release();
    swift_release();
    return (id)v50;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (textMatchScore: Float, itemTypeMatchScore: Float)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 56);
  while (1)
  {
    v5 = *(v4 - 3);
    v6 = *(v4 - 2);
    v8 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    v12 = (_QWORD *)(v2[7] + 16 * result);
    *v12 = v8;
    v12[1] = v7;
    v13 = v2[2];
    v14 = __OFADD__(v13, 1);
    v15 = v13 + 1;
    if (v14)
      goto LABEL_11;
    v4 += 4;
    v2[2] = v15;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, CacheHandling>, (uint64_t *)&demangling cache variable for type metadata for (String, CacheHandling), (uint64_t (*)(uint64_t *, unint64_t))outlined init with take of AppDataProviding);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, DomainWarmupHandling>, &demangling cache variable for type metadata for (String, DomainWarmupHandling), (uint64_t (*)(uint64_t *, unint64_t))outlined init with take of AppDataProviding);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, [WarmupComponent]>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  char v13[8];
  __int128 v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<LocalDomainTypes, LocalDomainSearch>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v6, (uint64_t)v13, &demangling cache variable for type metadata for (LocalDomainTypes, LocalDomainSearch));
    v7 = v13[0];
    result = specialized __RawDictionaryStorage.find<A>(_:)(v13[0]);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    *(_BYTE *)(v3[6] + result) = v7;
    result = outlined init with take of AppDataProviding(&v14, v3[7] + 40 * result);
    v10 = v3[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v3[2] = v12;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (String, Siri_Nlu_External_Span), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Siri_Nlu_External_Span>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D9F078]);
}

{
  _QWORD *v2;
  uint64_t v3;
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, Float>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_DWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_DWORD *)(v2[7] + 4 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 6;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, Set<DeviceClass>>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t result;
  char v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (uint64_t *)((char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = (uint64_t)v5 + *(int *)(v2 + 48);
  v24 = a1;
  v25 = v9;
  v10 = v6 + 64;
  v11 = a1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v12 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v11, (uint64_t)v5, (uint64_t *)&demangling cache variable for type metadata for (String, (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool)));
    v13 = *v5;
    v14 = v5[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v5, v14);
    if ((v16 & 1) != 0)
      break;
    v17 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v18 = (uint64_t *)(v7[6] + 16 * result);
    *v18 = v13;
    v18[1] = v14;
    v19 = v7[7];
    v20 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    result = outlined init with take of PommesSearchReason?(v25, v19 + *(_QWORD *)(*(_QWORD *)(v20 - 8) + 72) * v17, &demangling cache variable for type metadata for (delegatedUDA: Siri_Nlu_External_DelegatedUserDialogAct, score: Double, isEligibleForCombination: Bool));
    v21 = v7[2];
    v22 = __OFADD__(v21, 1);
    v23 = v21 + 1;
    if (v22)
      goto LABEL_11;
    v7[2] = v23;
    v11 += v12;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [[String : String]]>);
}

{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Any>);
  v2 = static _DictionaryStorage.allocate(capacity:)();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v6, (uint64_t)&v15, &demangling cache variable for type metadata for (String, Any));
    v7 = v15;
    v8 = v16;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)outlined init with take of Any(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_QWORD *)(v7[7] + 8 * v16) = *(_QWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Bool>);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, (uint64_t *)&demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType), &demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AudioQueueStateItemType>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6FE00]);
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, String>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 48);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 16);
    v7 = *(v4 - 1);
    v6 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v7;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, CommonAudio.Decade>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v5 = *((_QWORD *)v4 - 2);
    v6 = *((_QWORD *)v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_BYTE *)(v2[7] + result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 24;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  unsigned __int8 v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<CommonAudio.Decade, Int>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 8);
    v6 = *v4;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_QWORD *)(v2[7] + 8 * result) = v6;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v4 += 2;
    v2[2] = v11;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CommonAudio.Sort, INMediaSortOrder>, (uint64_t (*)(_QWORD))specialized __RawDictionaryStorage.find<A>(_:));
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues, CommonAudio.MediaType?));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_BYTE *)(v7[7] + v16) = v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<CommonAudio.MediaType, INMediaItemType>, specialized __RawDictionaryStorage.find<A>(_:));
}

{
  _QWORD *v2;
  uint64_t v3;
  _OWORD *v4;
  id v5;
  unint64_t result;
  char v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<LNSystemProtocolIdentifier, (_:)>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_OWORD *)(a1 + 40);
  while (1)
  {
    v11 = *v4;
    v5 = *((id *)v4 - 1);
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v7 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v5;
    *(_OWORD *)(v2[7] + 16 * result) = v11;
    v8 = v2[2];
    v9 = __OFADD__(v8, 1);
    v10 = v8 + 1;
    if (v9)
      goto LABEL_11;
    v2[2] = v10;
    v4 = (_OWORD *)((char *)v4 + 24);
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata), &demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_AppIntentProtocolMetadata>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D70050]);
}

{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  id v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, NSDictionary>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (void **)(a1 + 48);
  while (1)
  {
    v5 = (uint64_t)*(v4 - 2);
    v6 = (uint64_t)*(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    v8 = v7;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v2[6] + 16 * result);
    *v11 = v5;
    v11[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v8;
    v12 = v2[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v2[2] = v14;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, DispatchTimeoutResult>);
}

{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, DomainAffinityKVStore>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    swift_bridgeObjectRetain();
    swift_retain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for _DictionaryStorage<String, [String : Float]>);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  _QWORD v22[2];

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_AudioItemType, Float));
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a1 + 16))
  {
    v7 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<Apple_Parsec_Siri_V2alpha_AudioItemType, Float>);
  v6 = static _DictionaryStorage.allocate(capacity:)();
  v7 = (_QWORD *)v6;
  v8 = *(_QWORD *)(a1 + 16);
  if (!v8)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v7;
  }
  v9 = *(int *)(v2 + 48);
  v10 = v6 + 64;
  v11 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v22[1] = a1;
  v12 = a1 + v11;
  v13 = *(_QWORD *)(v3 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v12, (uint64_t)v5, &demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_AudioItemType, Float));
    result = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v5);
    if ((v15 & 1) != 0)
      break;
    v16 = result;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v17 = v7[6];
    v18 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v17 + *(_QWORD *)(*(_QWORD *)(v18 - 8) + 72) * v16, v5, v18);
    *(_DWORD *)(v7[7] + 4 * v16) = *(_DWORD *)&v5[v9];
    v19 = v7[2];
    v20 = __OFADD__(v19, 1);
    v21 = v19 + 1;
    if (v20)
      goto LABEL_11;
    v7[2] = v21;
    v12 += v13;
    if (!--v8)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v2;
  uint64_t v3;
  _QWORD *v4;
  char v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<OnScreenContextType, [String]>);
  v2 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v5 = *((_BYTE *)v4 - 8);
    v6 = *v4;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v5);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v2[6] + result) = v5;
    *(_QWORD *)(v2[7] + 8 * result) = v6;
    v9 = v2[2];
    v10 = __OFADD__(v9, 1);
    v11 = v9 + 1;
    if (v10)
      goto LABEL_11;
    v2[2] = v11;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentType>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6CD50]);
}

{
  return specialized Dictionary.init(dictionaryLiteral:)(a1, &demangling cache variable for type metadata for (String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory), (uint64_t *)&demangling cache variable for type metadata for _DictionaryStorage<String, Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.IntentMediaCategory>, (uint64_t (*)(_QWORD))MEMORY[0x1E0D6CDB8]);
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v8 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = static _DictionaryStorage.allocate(capacity:)();
  v8 = (_QWORD *)v7;
  v9 = *(_QWORD *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }
  v10 = v7 + 64;
  v11 = a1 + 32;
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v11, (uint64_t)&v20, a3);
    v12 = v20;
    v13 = v21;
    result = specialized __RawDictionaryStorage.find<A>(_:)(v20, v21);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v10 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v8[6] + 16 * result);
    *v16 = v12;
    v16[1] = v13;
    result = a4(&v22, v8[7] + 40 * result);
    v17 = v8[2];
    v18 = __OFADD__(v17, 1);
    v19 = v17 + 1;
    if (v18)
      goto LABEL_11;
    v8[2] = v19;
    v11 += 56;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t (*v30)(_QWORD);
  uint64_t *v31;

  v30 = a4;
  v31 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (_QWORD *)((char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v11 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v10 = static _DictionaryStorage.allocate(capacity:)();
  v11 = (_QWORD *)v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (!v12)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v11;
  }
  v13 = (char *)v9 + *(int *)(v6 + 48);
  v14 = v10 + 64;
  v15 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v29[1] = a1;
  v16 = a1 + v15;
  v17 = *(_QWORD *)(v7 + 72);
  swift_retain();
  while (1)
  {
    outlined init with copy of MediaUserStateCenter?(v16, (uint64_t)v9, v31);
    v18 = *v9;
    v19 = v9[1];
    result = specialized __RawDictionaryStorage.find<A>(_:)(*v9, v19);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v14 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = (uint64_t *)(v11[6] + 16 * result);
    *v23 = v18;
    v23[1] = v19;
    v24 = v11[7];
    v25 = v30(0);
    result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 32))(v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, v13, v25);
    v26 = v11[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v11[2] = v28;
    v16 += v17;
    if (!--v12)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(_QWORD))
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  unsigned __int8 v8;
  uint64_t v9;
  unint64_t result;
  char v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v5 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v5 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v6 = *(_QWORD *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v5;
  }
  swift_retain();
  v7 = (_QWORD *)(a1 + 40);
  while (1)
  {
    v8 = *((_BYTE *)v7 - 8);
    v9 = *v7;
    result = a3(v8);
    if ((v11 & 1) != 0)
      break;
    *(_QWORD *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_BYTE *)(v5[6] + result) = v8;
    *(_QWORD *)(v5[7] + 8 * result) = v9;
    v12 = v5[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v7 += 2;
    v5[2] = v14;
    if (!--v6)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t specialized Dictionary.init(dictionaryLiteral:)(uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (_BYTE *)(a1 + 48);
  while (1)
  {
    v6 = *((_QWORD *)v5 - 2);
    v7 = *((_QWORD *)v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_BYTE *)(v3[7] + result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v5 += 24;
    v3[2] = v14;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

{
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x1E0DEE9E0];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a2);
  v3 = (_QWORD *)static _DictionaryStorage.allocate(capacity:)();
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = specialized __RawDictionaryStorage.find<A>(_:)(v6, v7);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v6;
    v11[1] = v7;
    *(_QWORD *)(v3[7] + 8 * result) = v8;
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v5 += 3;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t static PommesSearch.pommesSearchForSistoolFactory()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  id v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  char v43;
  ValueMetadata *v44;
  unint64_t v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t inited;
  id v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  _QWORD *v58;
  id v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  __int128 v72;
  ValueMetadata *v73;
  unint64_t v74;
  __int128 v75;
  __int128 v76;
  _UNKNOWN **v77;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  v1 = MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v64 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v5 = (char *)&v64 - v4;
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  outlined init with copy of MediaUserStateCenter?((uint64_t)&v75, (uint64_t)&v72, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for AmpDataProvider();
  v6 = swift_allocObject();
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 16) = 0u;
  v7 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 56) = v7;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)&v72, v6 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  v71 = specialized AnyDataProvider.init<A>(provider:)(v6);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo();
  v9 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56);
  v9(v5, 1, 1, v8);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v5, (uint64_t)v3, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DummyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  v10 = swift_allocObject();
  v11 = v10 + *(_QWORD *)(*(_QWORD *)v10 + 88);
  v9((char *)v11, 1, 1, v8);
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v3, v11, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  swift_allocObject();
  v69 = specialized AnyDataProvider.init<A>(provider:)(v10);
  outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo?);
  v12 = type metadata accessor for AppDataProvider();
  v13 = swift_allocObject();
  *((_QWORD *)&v76 + 1) = &type metadata for PommesSystemAppChecking;
  v77 = &protocol witness table for PommesSystemAppChecking;
  *(_QWORD *)(v13 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  outlined init with take of AppDataProviding(&v75, v13 + 16);
  *((_QWORD *)&v76 + 1) = v12;
  v77 = &protocol witness table for AppDataProvider;
  *(_QWORD *)&v75 = v13;
  v14 = (void *)objc_opt_self();
  v15 = objc_msgSend(v14, sel_sharedPreferences);
  outlined init with copy of AppDataProviding((uint64_t)&v75, (uint64_t)&v72);
  type metadata accessor for AppInfoDataProvider();
  v16 = swift_allocObject();
  outlined init with take of AppDataProviding(&v72, v16 + 16);
  *(_QWORD *)(v16 + 56) = v15;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  v67 = specialized AnyDataProvider.init<A>(provider:)(v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
  v17 = type metadata accessor for AnalyticsComponentIdGenerator();
  v75 = 0u;
  v76 = 0u;
  v77 = 0;
  v70 = v17;
  v18 = swift_allocObject();
  type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil();
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = 0;
  *(_QWORD *)(v19 + 24) = v18;
  v68 = specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)((uint64_t)&v75, v19, 0);
  swift_release();
  outlined destroy of MediaUserStateCenter?((uint64_t)&v75, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  v20 = default argument 3 of DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)();
  v21 = swift_allocObject();
  *((_QWORD *)&v76 + 1) = &type metadata for PommesSystemAppChecking;
  v77 = &protocol witness table for PommesSystemAppChecking;
  *(_QWORD *)(v21 + 56) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  outlined init with take of AppDataProviding(&v75, v21 + 16);
  v77 = 0;
  v75 = 0u;
  v76 = 0u;
  v22 = specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(v21, 0, 0, (uint64_t)&v75);
  outlined destroy of MediaUserStateCenter?((uint64_t)&v75, &demangling cache variable for type metadata for AppSearchViewProvider?);
  swift_release();
  type metadata accessor for MarketplaceInfoDataProvider();
  v23 = swift_allocObject();
  v24 = v23 + OBJC_IVAR____TtC21SiriInformationSearch27MarketplaceInfoDataProvider_marketplaceInfo;
  v25 = type metadata accessor for Apple_Parsec_Search_V2_MarketplaceInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(v24, 1, 1, v25);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Search_V2_MarketplaceInfo>);
  swift_allocObject();
  v26 = specialized AnyDataProvider.init<A>(provider:)(v23);
  type metadata accessor for PairedDeviceDataProvider();
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = 0;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[Useragentpb_CompanionDevice]>);
  swift_allocObject();
  v28 = specialized AnyDataProvider.init<A>(provider:)(v27);
  v29 = objc_msgSend(v14, sel_sharedPreferences);
  v65 = v29;
  v66 = type metadata accessor for SiriEnvironment();
  v30 = static SiriEnvironment.default.getter();
  type metadata accessor for DataProviderManager();
  v31 = swift_allocObject();
  v32 = specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(v71, v69, v67, v20, v22, v68, v26, v28, 0, v29, v30, 0, 0, v31);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  static SiriEnvironment.default.getter();
  v33 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  *((_QWORD *)&v76 + 1) = &type metadata for FeatureFlag;
  v77 = (_UNKNOWN **)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v34 = swift_allocObject();
  *(_QWORD *)&v75 = v34;
  *(_QWORD *)(v34 + 16) = 4;
  *(_QWORD *)(v34 + 24) = 0;
  *(_QWORD *)(v34 + 32) = 0;
  *(_QWORD *)(v34 + 40) = 0;
  *(_BYTE *)(v34 + 48) = 3;
  swift_retain();
  LOBYTE(v30) = isFeatureEnabled(_:)();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v75);
  if ((v30 & 1) != 0)
  {
    v35 = type metadata accessor for AssistantLocationProvider();
    swift_allocObject();
    v36 = AssistantLocationProvider.init(serviceHelper:)(0);
    *((_QWORD *)&v76 + 1) = v35;
    v77 = &protocol witness table for AssistantLocationProvider;
    *(_QWORD *)&v75 = v36;
  }
  else
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    v37 = (void *)static PommesLocationManager.shared;
    *((_QWORD *)&v76 + 1) = type metadata accessor for PommesLocationManager(0);
    v77 = &protocol witness table for PommesLocationManager;
    *(_QWORD *)&v75 = v37;
    v38 = v37;
  }
  static SiriEnvironment.default.getter();
  v39 = SiriEnvironment.networkAvailability.getter();
  swift_release();
  v40 = swift_allocObject();
  type metadata accessor for PegasusInstrumentationUtil();
  v41 = swift_allocObject();
  *(_QWORD *)(v41 + 16) = 0;
  *(_QWORD *)(v41 + 24) = v40;
  v42 = objc_msgSend((id)objc_opt_self(), sel_processInfo);
  v43 = NSProcessInfo.isRunningUnitTests.getter();

  if ((v43 & 1) != 0)
  {
    v44 = &type metadata for EmptyReferenceResolver;
    v45 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    v44 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *(_QWORD *)&v72 = ReferenceResolutionClient.__allocating_init()();
    v45 = MEMORY[0x1E0DA3CC8];
  }
  v73 = v44;
  v74 = v45;
  v46 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
  type metadata accessor for PegasusProxy(0);
  v47 = swift_allocObject();
  v48 = specialized PegasusProxy.init(pegasusClientBuilder:locationManager:networkAvailabilityProvider:pimsEnablementProvider:instrumentationUtil:rrClient:dataProviderManager:contactStore:)((uint64_t)&v75, v39, v41, (uint64_t)&v72, v32, (uint64_t)v46, v47);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(LocalDomainTypes, LocalDomainSearch)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FA1B0;
  *(_BYTE *)(inited + 32) = 1;
  v50 = objc_msgSend((id)objc_opt_self(), sel_indexMatcher);
  v51 = type metadata accessor for MusicDomain();
  v52 = swift_allocObject();
  v53 = specialized MusicDomain.init(spanMatcher:)((uint64_t)v50, v52);
  *(_QWORD *)(inited + 64) = v51;
  *(_QWORD *)(inited + 72) = &protocol witness table for MusicDomain;
  *(_QWORD *)(inited + 40) = v53;
  v54 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v55 = specialized static PommesSearch.defaultPreflightClients(dataProviderManager:networkAvailabilityProvider:)(v32, v33);
  if (one-time initialization token for shared != -1)
    swift_once();
  v56 = static PegasusCacheManager.shared;
  swift_retain();
  v57 = default argument 0 of DomainWarmup.init(warmupClients:)();
  type metadata accessor for DomainWarmup();
  swift_allocObject();
  v58 = DomainWarmup.init(warmupClients:)(v57);
  v59 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFE920]), sel_init);
  v60 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  v61 = PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v59, v60);
  type metadata accessor for PommesSearch();
  v62 = swift_allocObject();
  PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(v48, v54, v55, v56, (uint64_t)v58, v61);
  swift_release();
  swift_release();
  return v62;
}

uint64_t PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12;

  v12 = swift_allocObject();
  PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(a1, a2, a3, a4, a5, a6);
  return v12;
}

uint64_t PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  swift_allocObject();
  v4 = specialized PommesSearch.init(remoteSearchClient:domainSearchClients:)(a1, a2);
  swift_release();
  return v4;
}

uint64_t PommesSearch.init(remoteSearchClient:domainSearchClients:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = specialized PommesSearch.init(remoteSearchClient:domainSearchClients:)(a1, a2);
  swift_release();
  return v2;
}

uint64_t PommesSearch.init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  uint64_t v17;

  type metadata accessor for AnalyticsComponentIdGenerator();
  v13 = swift_allocObject();
  type metadata accessor for PommesRequestInstrumentationUtil();
  v14 = swift_allocObject();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v13;
  *(_QWORD *)(v6 + 64) = v14;
  v15 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v16 = type metadata accessor for PommesServerFallbackPreferences();
  v17 = swift_allocObject();
  *(_QWORD *)(v17 + 16) = v15;
  *(_QWORD *)(v6 + 96) = v16;
  *(_QWORD *)(v6 + 104) = &protocol witness table for PommesServerFallbackPreferences;
  *(_QWORD *)(v6 + 72) = v17;
  *(_BYTE *)(v6 + 112) = 0;
  *(_QWORD *)(v6 + 16) = a3;
  *(_QWORD *)(v6 + 24) = a1;
  *(_QWORD *)(v6 + 32) = a2;
  *(_QWORD *)(v6 + 40) = a4;
  *(_QWORD *)(v6 + 48) = a6;
  *(_QWORD *)(v6 + 56) = a5;
  return v6;
}

uint64_t PommesSearch.setServiceHelper(_:)(uint64_t a1)
{
  uint64_t v1;

  (*(void (**)(void))(**(_QWORD **)(v1 + 24) + 504))();
  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v1 + 56) + 176))(a1);
}

uint64_t PommesSearch.search(pommesSearchRequest:completion:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  void (*v50)(char *, char *, uint64_t);
  void (*v51)(char *, _QWORD, uint64_t, uint64_t);
  void (*v52)(uint64_t, uint64_t, char *);
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  uint64_t v59;
  uint64_t v60;
  double v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  NSObject *v69;
  os_log_type_t v70;
  _BOOL4 v71;
  char *v72;
  uint8_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  unint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  uint64_t v108;
  char *v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  void *v113;
  char *v114;
  uint64_t v115;
  char *v116;
  uint64_t v117;
  void (*v118)(char *, uint64_t, uint64_t);
  char *v119;
  uint64_t (*v120)(uint64_t);
  uint64_t v121;
  uint64_t v122;
  void *v123;
  uint64_t v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  void *v129;
  id v130;
  char *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int (*v142)(uint64_t, uint64_t, uint64_t);
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  char *v147;
  uint64_t v148;
  uint64_t v149;
  char *v150;
  uint64_t v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  char *v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  char *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t aBlock;
  uint64_t v191;
  uint64_t (*v192)(uint64_t);
  void *v193;
  void *v194;
  _QWORD *v195;

  v5 = v4;
  v171 = a3;
  v170 = a2;
  v156 = a4;
  v155 = type metadata accessor for DispatchWorkItemFlags();
  v153 = *(_QWORD *)(v155 - 8);
  MEMORY[0x1E0C80A78](v155);
  v152 = (char *)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v154 = type metadata accessor for DispatchQoS();
  v151 = *(_QWORD *)(v154 - 8);
  MEMORY[0x1E0C80A78](v154);
  v150 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for DispatchQoS.QoSClass();
  v148 = *(_QWORD *)(v149 - 8);
  MEMORY[0x1E0C80A78](v149);
  v147 = (char *)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v172 = type metadata accessor for PommesSearchReason();
  v173 = *(_QWORD *)(v172 - 8);
  MEMORY[0x1E0C80A78](v172);
  v146 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for SignpostToken();
  v167 = *(_QWORD *)(v11 - 8);
  v12 = MEMORY[0x1E0C80A78](v11);
  v186 = (uint64_t)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = v13;
  MEMORY[0x1E0C80A78](v12);
  v179 = (uint64_t)&v141 - v14;
  v160 = type metadata accessor for PerformanceUtil.Ticket(0);
  v165 = *(_QWORD *)(v160 - 8);
  v15 = MEMORY[0x1E0C80A78](v160);
  v185 = (uint64_t)&v141 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v166 = v16;
  MEMORY[0x1E0C80A78](v15);
  v178 = (uint64_t)&v141 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  v163 = *(_QWORD *)(v18 - 8);
  v19 = MEMORY[0x1E0C80A78](v18);
  v169 = (uint64_t)&v141 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v19);
  v184 = (uint64_t)&v141 - v22;
  v164 = v23;
  MEMORY[0x1E0C80A78](v21);
  v188 = (uint64_t)&v141 - v24;
  v25 = type metadata accessor for PommesSearchRequest(0);
  v161 = *(_QWORD *)(v25 - 8);
  v26 = MEMORY[0x1E0C80A78](v25);
  v183 = (uint64_t)&v141 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = v27;
  MEMORY[0x1E0C80A78](v26);
  v158 = (uint64_t)&v141 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v30 = MEMORY[0x1E0C80A78](v29);
  v145 = (uint64_t)&v141 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v30);
  v157 = (char *)&v141 - v32;
  v33 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v34 = MEMORY[0x1E0C80A78](v33);
  v36 = (char *)&v141 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v34);
  v38 = (char *)&v141 - v37;
  v39 = type metadata accessor for PommesCandidateId();
  v40 = *(_QWORD *)(v39 - 8);
  v41 = MEMORY[0x1E0C80A78](v39);
  v182 = (char *)&v141 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  v159 = v42;
  MEMORY[0x1E0C80A78](v41);
  v44 = (char *)&v141 - v43;
  v45 = *(int *)(v25 + 32);
  v175 = a1;
  v46 = (uint64_t *)(a1 + v45);
  v47 = *v46;
  v48 = v46[1];
  swift_bridgeObjectRetain();
  PommesSearchRequest.pommesCandidateId.getter((uint64_t)v44);
  v187 = v5;
  v49 = *(_QWORD *)(v5 + 64);
  v50 = *(void (**)(char *, char *, uint64_t))(v40 + 16);
  v50(v38, v44, v39);
  v174 = v40;
  v51 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v40 + 56);
  v51(v38, 0, 1, v39);
  v52 = *(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v49 + 128);
  v181 = v47;
  v53 = v47;
  v54 = v25;
  v55 = (uint64_t)v36;
  v56 = (uint64_t)v157;
  v180 = v48;
  v57 = v48;
  v58 = v50;
  v52(v53, v57, v38);
  outlined destroy of MediaUserStateCenter?((uint64_t)v38, &demangling cache variable for type metadata for PommesCandidateId?);
  v176 = v44;
  v50((char *)v55, v44, v39);
  v177 = v39;
  v59 = v39;
  v60 = v175;
  v51((char *)v55, 0, 1, v59);
  v61 = *(double *)(v60 + *(int *)(v54 + 48));
  v144 = v60 + *(int *)(v54 + 44);
  outlined init with copy of MediaUserStateCenter?(v144, v56, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
  v62 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v63 = *(_QWORD *)(v62 - 8);
  v142 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48);
  if (v142(v56, 1, v62) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v56, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    v64 = 0;
    v65 = 0;
  }
  else
  {
    v64 = Siri_Nlu_External_DelegatedUserDialogAct.externalParserID.getter();
    v65 = v66;
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v56, v62);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v49 + 160))(v181, v180, v55, v64, v65, v61);
  swift_bridgeObjectRelease();
  outlined destroy of MediaUserStateCenter?(v55, &demangling cache variable for type metadata for PommesCandidateId?);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v67 = type metadata accessor for Logger();
  __swift_project_value_buffer(v67, (uint64_t)static Logger.pommes);
  v68 = v158;
  outlined init with copy of PommesSearchRequest(v60, v158, type metadata accessor for PommesSearchRequest);
  v69 = Logger.logObject.getter();
  v70 = static os_log_type_t.debug.getter();
  v71 = os_log_type_enabled(v69, v70);
  v72 = v176;
  v143 = v62;
  if (v71)
  {
    v73 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)v73 = 134217984;
    aBlock = *(_QWORD *)(v68 + *(int *)(v54 + 48));
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    outlined destroy of PommesSearchRequest(v68, type metadata accessor for PommesSearchRequest);
    _os_log_impl(&dword_1C2356000, v69, v70, "Checking if PSC score is above threshold: %f", v73, 0xCu);
    MEMORY[0x1C3BBFF64](v73, -1, -1);
  }
  else
  {
    outlined destroy of PommesSearchRequest(v68, type metadata accessor for PommesSearchRequest);
  }
  v74 = v179;

  v75 = v188;
  (*(void (**)(uint64_t))(*(_QWORD *)v187 + 224))(v60);
  v76 = v178;
  Date.init()();
  v77 = (int *)v160;
  v78 = v76 + *(int *)(v160 + 20);
  *(_QWORD *)v78 = "SiriInformationSearch/PommesSearch.swift";
  *(_QWORD *)(v78 + 8) = 40;
  *(_BYTE *)(v78 + 16) = 2;
  *(_QWORD *)(v76 + v77[6]) = 250;
  v79 = v76 + v77[7];
  *(_QWORD *)v79 = "search(pommesSearchRequest:completion:)";
  *(_QWORD *)(v79 + 8) = 39;
  *(_BYTE *)(v79 + 16) = 2;
  v80 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000017);
  v81 = (uint64_t *)(v76 + v77[8]);
  *v81 = v80;
  v81[1] = v82;
  v83 = v177;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v84 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v84, (uint64_t)static Signposter.pommes);
  OSSignposter.begin(name:context:)("search", 6, 2u, 0, v74);
  outlined init with copy of PommesSearchRequest(v76, v185, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with copy of PommesSearchRequest(v74, v186, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  outlined init with copy of MediaUserStateCenter?(v75, v184, &demangling cache variable for type metadata for PommesSearchReason?);
  v58(v182, v72, v83);
  outlined init with copy of PommesSearchRequest(v60, v183, type metadata accessor for PommesSearchRequest);
  v85 = (*(unsigned __int8 *)(v165 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v165 + 80);
  v86 = (v166 + *(unsigned __int8 *)(v167 + 80) + v85) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80);
  v87 = (v168 + *(unsigned __int8 *)(v163 + 80) + v86) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
  v88 = (v164 + v87 + 7) & 0xFFFFFFFFFFFFFFF8;
  v89 = (v88 + 23) & 0xFFFFFFFFFFFFFFF8;
  v90 = (v89 + 15) & 0xFFFFFFFFFFFFFFF8;
  v91 = v174;
  v92 = (*(unsigned __int8 *)(v174 + 80) + v90 + 16) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80);
  v168 = (v159 + *(unsigned __int8 *)(v161 + 80) + v92) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
  v93 = swift_allocObject();
  outlined init with take of PerformanceUtil.Ticket(v185, v93 + v85, type metadata accessor for PerformanceUtil.Ticket);
  outlined init with take of PerformanceUtil.Ticket(v186, v93 + v86, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  outlined init with take of PommesSearchReason?(v184, v93 + v87, &demangling cache variable for type metadata for PommesSearchReason?);
  v94 = (_QWORD *)(v93 + v88);
  v95 = v187;
  v96 = v188;
  v97 = v171;
  *v94 = v170;
  v94[1] = v97;
  *(_QWORD *)(v93 + v89) = v95;
  v98 = (_QWORD *)(v93 + v90);
  v99 = v182;
  v100 = v180;
  *v98 = v181;
  v98[1] = v100;
  (*(void (**)(unint64_t, char *, uint64_t))(v91 + 32))(v93 + v92, v99, v83);
  outlined init with take of PerformanceUtil.Ticket(v183, v93 + v168, type metadata accessor for PommesSearchRequest);
  v101 = v96;
  v102 = v96;
  v103 = v169;
  outlined init with copy of MediaUserStateCenter?(v102, v169, &demangling cache variable for type metadata for PommesSearchReason?);
  v104 = v173;
  v105 = v172;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v173 + 48))(v103, 1, v172) == 1)
  {
    swift_retain();
    swift_retain();
    outlined destroy of MediaUserStateCenter?(v103, &demangling cache variable for type metadata for PommesSearchReason?);
    v106 = v145;
    outlined init with copy of MediaUserStateCenter?(v144, v145, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    if (v142(v106, 1, v143) == 1)
      v107 = 65;
    else
      v107 = 2;
    outlined destroy of MediaUserStateCenter?(v106, &demangling cache variable for type metadata for Siri_Nlu_External_DelegatedUserDialogAct?);
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v108 = v148;
    v109 = v147;
    v110 = v149;
    (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v147, *MEMORY[0x1E0DEF540], v149);
    v111 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v109, v110);
    v112 = swift_allocObject();
    *(_QWORD *)(v112 + 16) = partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:);
    *(_QWORD *)(v112 + 24) = v93;
    *(_BYTE *)(v112 + 32) = v107;
    v194 = partial apply for closure #2 in PommesSearch.search(pommesSearchRequest:completion:);
    v195 = (_QWORD *)v112;
    aBlock = MEMORY[0x1E0C809B0];
    v191 = 1107296256;
    v192 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v193 = &block_descriptor;
    v113 = _Block_copy(&aBlock);
    swift_retain();
    v114 = v150;
    static DispatchQoS.unspecified.getter();
    v189 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v115 = v91;
    v116 = v152;
    v117 = v155;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C3BBF154](0, v114, v116, v113);
    _Block_release(v113);
    swift_release();

    (*(void (**)(char *, uint64_t))(v153 + 8))(v116, v117);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v114, v154);
    outlined destroy of PommesSearchRequest(v179, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
    outlined destroy of PommesSearchRequest(v178, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of MediaUserStateCenter?(v101, &demangling cache variable for type metadata for PommesSearchReason?);
    (*(void (**)(char *, uint64_t))(v115 + 8))(v176, v177);
    goto LABEL_18;
  }
  v118 = *(void (**)(char *, uint64_t, uint64_t))(v104 + 32);
  v119 = v146;
  v118(v146, v103, v105);
  v120 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 256);
  swift_retain();
  swift_retain();
  v121 = v175;
  v122 = v120(v175);
  if (v122)
  {
    v123 = (void *)v122;
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
    v124 = v148;
    v125 = v147;
    v126 = v149;
    (*(void (**)(char *, _QWORD, uint64_t))(v148 + 104))(v147, *MEMORY[0x1E0DEF540], v149);
    v187 = static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v124 + 8))(v125, v126);
    v127 = (_QWORD *)swift_allocObject();
    v127[2] = partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:);
    v127[3] = v93;
    v127[4] = v123;
    v194 = partial apply for closure #3 in PommesSearch.search(pommesSearchRequest:completion:);
    v195 = v127;
    aBlock = MEMORY[0x1E0C809B0];
    v191 = 1107296256;
    v192 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v193 = &block_descriptor_13;
    v128 = v105;
    v129 = _Block_copy(&aBlock);
    swift_retain();
    v130 = v123;
    v131 = v150;
    static DispatchQoS.unspecified.getter();
    v189 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v132 = v119;
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v133 = v152;
    v134 = v155;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    v135 = (void *)v187;
    MEMORY[0x1C3BBF154](0, v131, v133, v129);
    _Block_release(v129);
    swift_release();

    (*(void (**)(char *, uint64_t))(v153 + 8))(v133, v134);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v131, v154);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v132, v128);
    outlined destroy of PommesSearchRequest(v179, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
    outlined destroy of PommesSearchRequest(v178, type metadata accessor for PerformanceUtil.Ticket);
    outlined destroy of MediaUserStateCenter?(v188, &demangling cache variable for type metadata for PommesSearchReason?);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v176, v177);
LABEL_18:
    swift_release();
    v136 = type metadata accessor for PommesSearchEagerInfo(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v136 - 8) + 56))(v156, 1, 1, v136);
  }
  v138 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v95 + 264))(v121);
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v138 + 208))(partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:), v93);
  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest(v179, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
  outlined destroy of PommesSearchRequest(v178, type metadata accessor for PerformanceUtil.Ticket);
  outlined destroy of MediaUserStateCenter?(v188, &demangling cache variable for type metadata for PommesSearchReason?);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v176, v177);
  v139 = v156;
  v118(v156, (uint64_t)v119, v105);
  v140 = type metadata accessor for PommesSearchEagerInfo(0);
  return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v140 - 8) + 56))(v139, 0, 1, v140);
}

void closure #1 in PommesSearch.search(pommesSearchRequest:completion:)(unint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void *, _QWORD), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  void *v31;
  id v32;
  id v33;
  id v34;
  uint64_t v35;
  void *v36;
  char *v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(char *, uint64_t, uint64_t);
  uint64_t v43;
  void (*v44)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void (*v55)(void *, _QWORD);
  uint64_t v56;
  void *v57;
  unsigned int v58;

  v55 = a6;
  v56 = a8;
  v54 = a7;
  v49 = a5;
  v57 = (void *)a1;
  v58 = a2 & 1;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v49 - v21;
  v23 = type metadata accessor for PommesSearchReason();
  v24 = *(_QWORD *)(v23 - 8);
  v25 = MEMORY[0x1E0C80A78](v23);
  v27 = (char *)&v49 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)&v49 - v28;
  if (one-time initialization token for shared != -1)
    swift_once();
  v52 = a10;
  v53 = a11;
  v51 = a9;
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(a3, 0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v50 = a12;
  v30 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v30, (uint64_t)static Signposter.pommes);
  OSSignposter.end(token:message:)(a4, 0, 0xE000000000000000);
  v31 = v57;
  if (v58)
  {
    outlined init with copy of MediaUserStateCenter?(v49, (uint64_t)v20, &demangling cache variable for type metadata for PommesSearchReason?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v20, 1, v23) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v27, *MEMORY[0x1E0D98920], v23);
      v32 = v31;
      outlined destroy of MediaUserStateCenter?((uint64_t)v20, &demangling cache variable for type metadata for PommesSearchReason?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v27, v20, v23);
      v34 = v31;
    }
    v35 = type metadata accessor for PommesSearchError(0);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type PommesSearchError and conformance PommesSearchError, type metadata accessor for PommesSearchError, (uint64_t)&protocol conformance descriptor for PommesSearchError);
    v36 = (void *)swift_allocError();
    *(_QWORD *)v37 = v31;
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v37[*(int *)(v35 + 20)], v27, v23);
  }
  else
  {
    outlined init with copy of MediaUserStateCenter?(v49, (uint64_t)v22, &demangling cache variable for type metadata for PommesSearchReason?);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23) == 1)
    {
      (*(void (**)(char *, _QWORD, uint64_t))(v24 + 104))(v29, *MEMORY[0x1E0D98920], v23);
      v33 = v31;
      outlined destroy of MediaUserStateCenter?((uint64_t)v22, &demangling cache variable for type metadata for PommesSearchReason?);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v29, v22, v23);
      v38 = v31;
    }
    dispatch thunk of PommesResponse.setSearchReason(_:)();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v29, v23);
    v36 = v31;
  }
  v39 = v58;
  v55(v36, v58);
  v40 = type metadata accessor for PommesCandidateId();
  v41 = *(_QWORD *)(v40 - 8);
  v42 = *(void (**)(char *, uint64_t, uint64_t))(v41 + 16);
  v43 = v53;
  v42(v16, v53, v40);
  v44 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v41 + 56);
  v44(v16, 0, 1, v40);
  (*(void (**)(uint64_t, uint64_t, char *, void *, uint64_t))(*(_QWORD *)v56 + 328))(v51, v52, v16, v36, v39);
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesCandidateId?);
  v45 = (uint64_t *)(v50 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 32));
  v47 = *v45;
  v46 = v45[1];
  v48 = static PerformanceUtil.shared;
  v42(v16, v43, v40);
  v44(v16, 0, 1, v40);
  (*(void (**)(uint64_t, uint64_t, char *))(*(_QWORD *)v48 + 240))(v47, v46, v16);
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for PommesCandidateId?);
  specialized PommesSearch.runGeoPersonalizationShadowLogging(result:)((unint64_t)v57, v39);
  outlined consume of Result<PommesResponse, Error>(v36);
}

void closure #2 in PommesSearch.search(pommesSearchRequest:completion:)(void (*a1)(void *, uint64_t), uint64_t a2, char a3)
{
  void *v5;
  _BYTE *v6;

  lazy protocol witness table accessor for type PommesSearchRequestProcessorError and conformance PommesSearchRequestProcessorError();
  v5 = (void *)swift_allocError();
  *v6 = a3;
  a1(v5, 1);

}

Swift::Void __swiftcall PommesSearch.prepareForSearch()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = v0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "POMMES preparing for search", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  v6 = *(_QWORD *)(v1 + 24);
  v7 = (*(uint64_t (**)(void))(*(_QWORD *)v6 + 512))();
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 520))(v7);
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtSessionStart()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  _QWORD v19[5];

  v1 = v0;
  v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v3 = MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v19[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 176))(v3) & 1) != 0)
  {
    if (one-time initialization token for shared != -1)
      swift_once();
    (*(void (**)(void))(*(_QWORD *)static PerformanceUtil.shared + 224))();
  }
  Date.init()();
  v6 = &v5[v2[5]];
  *(_QWORD *)v6 = "SiriInformationSearch/PommesSearch.swift";
  *((_QWORD *)v6 + 1) = 40;
  v6[16] = 2;
  *(_QWORD *)&v5[v2[6]] = 372;
  v7 = &v5[v2[7]];
  *(_QWORD *)v7 = "prepareForSearchAtSessionStart()";
  *((_QWORD *)v7 + 1) = 32;
  v7[16] = 2;
  v8 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD000000000000033);
  v9 = (uint64_t *)&v5[v2[8]];
  *v9 = v8;
  v9[1] = v10;
  v19[3] = &type metadata for FeatureFlag;
  v19[4] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
  v11 = swift_allocObject();
  v19[0] = v11;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_BYTE *)(v11 + 48) = 3;
  v12 = isFeatureEnabled(_:)();
  v13 = __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
  if ((v12 & 1) != 0)
  {
    (*(void (**)(uint64_t))(**(_QWORD **)(v1 + 24) + 512))(v13);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1C2356000, v15, v16, "Sphinx FF is disabled, skipping prepareForSearchAtSessionStart", v17, 2u);
      MEMORY[0x1C3BBFF64](v17, -1, -1);
    }

  }
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v5, 0);
  outlined destroy of PommesSearchRequest((uint64_t)v5, type metadata accessor for PerformanceUtil.Ticket);
  swift_beginAccess();
  *(_BYTE *)(v1 + 112) = 1;
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtRequestStart()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  NSObject *v3;
  os_log_type_t v4;
  uint8_t *v5;

  v1 = v0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = Logger.logObject.getter();
  v4 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v3, v4))
  {
    v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v5 = 0;
    _os_log_impl(&dword_1C2356000, v3, v4, "POMMES preparing for search at request start", v5, 2u);
    MEMORY[0x1C3BBFF64](v5, -1, -1);
  }

  (*(void (**)(void))(**(_QWORD **)(v1 + 24) + 520))();
}

Swift::Void __swiftcall PommesSearch.prepareForSearchAtRequestStart(requestId:)(Swift::String requestId)
{
  uint64_t v1;

  (*(void (**)(uint64_t, void *, _QWORD))(**(_QWORD **)(v1 + 24) + 536))(requestId._countAndFlagsBits, requestId._object, 0);
}

uint64_t PommesSearch.cacheMUXContext(msg:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1C2356000, v5, v6, "POMMES caching MUX context", v7, 2u);
    MEMORY[0x1C3BBFF64](v7, -1, -1);
  }

  return (*(uint64_t (**)(uint64_t))(**(_QWORD **)(v2 + 48) + 152))(a1);
}

Swift::Void __swiftcall PommesSearch.tearDown()()
{
  _QWORD **v0;
  uint64_t v1;
  uint64_t v2;

  v1 = (*(uint64_t (**)(void))(*v0[3] + 544))();
  v2 = (*(uint64_t (**)(uint64_t))(*v0[5] + 208))(v1);
  (*(void (**)(uint64_t))(*v0[6] + 176))(v2);
}

void closure #3 in PommesSearch.runGeoPersonalizationShadowLogging(result:)(unint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  uint8_t *v6;
  id v7;
  uint64_t v8;
  id v9;
  id v10;
  os_log_type_t v11;
  uint8_t *v12;
  _QWORD *v13;
  id v14;
  NSObject *oslog;
  uint64_t v16;

  if ((a2 & 1) != 0)
  {
    v7 = (id)a1;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    v9 = (id)a1;
    v10 = (id)a1;
    oslog = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(oslog, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      v13 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v12 = 138412290;
      v14 = (id)a1;
      v16 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v13 = v16;
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
      _os_log_impl(&dword_1C2356000, oslog, v11, "Shadow logger failed due to error: %@", v12, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v13, -1, -1);
      MEMORY[0x1C3BBFF64](v12, -1, -1);

      outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
      return;
    }
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 1);

    goto LABEL_14;
  }
  v3 = one-time initialization token for pommes;
  swift_bridgeObjectRetain();
  if (v3 != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  oslog = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (!os_log_type_enabled(oslog, v5))
  {
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
LABEL_14:

    return;
  }
  v6 = (uint8_t *)swift_slowAlloc();
  *(_DWORD *)v6 = 134217984;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
  }
  outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  outlined consume of Result<[IQFMapsPersonalizationResult], Error>((id)a1, 0);
  _os_log_impl(&dword_1C2356000, oslog, v5, "Shadow logger found and logged details about %ld events", v6, 0xCu);
  MEMORY[0x1C3BBFF64](v6, -1, -1);

}

uint64_t PommesSearch.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  return v0;
}

uint64_t PommesSearch.__deallocating_deinit()
{
  PommesSearch.deinit();
  return swift_deallocClassInstance();
}

BOOL static SearchError.== infix(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void SearchError.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
  Hasher._combine(_:)(a2);
}

Swift::Int SearchError.hashValue.getter(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SearchError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SearchError()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SearchError()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

SiriInformationSearch::LocalDomainTypes_optional __swiftcall LocalDomainTypes.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriInformationSearch::LocalDomainTypes_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocalDomainTypes.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriInformationSearch_LocalDomainTypes_music;
  else
    v4.value = SiriInformationSearch_LocalDomainTypes_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t LocalDomainTypes.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x636973756DLL;
  else
    return 1701736302;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance LocalDomainTypes(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x636973756DLL;
  else
    v3 = 1701736302;
  if (v2)
    v4 = 0xE400000000000000;
  else
    v4 = 0xE500000000000000;
  if (*a2)
    v5 = 0x636973756DLL;
  else
    v5 = 1701736302;
  if (*a2)
    v6 = 0xE500000000000000;
  else
    v6 = 0xE400000000000000;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance LocalDomainTypes()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance LocalDomainTypes()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance LocalDomainTypes()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance LocalDomainTypes@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of LocalDomainTypes.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance LocalDomainTypes(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701736302;
  if (*v1)
    v2 = 0x636973756DLL;
  v3 = 0xE400000000000000;
  if (*v1)
    v3 = 0xE500000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t specialized AnyDataProvider.init<A>(provider:)(uint64_t a1)
{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for AmpDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AmpDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for AudioQueueStateDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AudioQueueStateDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for AppInfoDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AppInfoDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for PreferredNavigationAppDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PreferredNavigationAppDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for SiriKitAppInfoDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SiriKitAppInfoDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for MarketplaceInfoDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for MarketplaceInfoDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for PairedDeviceDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PairedDeviceDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  type metadata accessor for ProfileSliceResolvingDataProvider();
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for ProfileSliceResolvingDataProvider.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for DummyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DummyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

{
  uint64_t v1;
  dispatch_group_t v3;
  uint64_t v4;

  v3 = dispatch_group_create();
  *(_QWORD *)(v1 + 72) = a1;
  *(_QWORD *)(v1 + 80) = v3;
  *(_WORD *)(v1 + 88) = 0;
  *(_QWORD *)(v1 + 16) = partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 24) = a1;
  *(_QWORD *)(v1 + 32) = partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 40) = a1;
  *(_QWORD *)(v1 + 48) = partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
  *(_QWORD *)(v1 + 56) = a1;
  *(_QWORD *)(v1 + 64) = partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for SearchToolEmptyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_retain_n();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for SearchToolEmptyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>.Type);
  *(_QWORD *)(v1 + 96) = String.init<A>(describing:)();
  *(_QWORD *)(v1 + 104) = v4;
  return v1;
}

uint64_t serialize(_:at:)(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t closure #1 in osLogInternal(_:log:type:)(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v6, v7, a3);
  v8 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

_BYTE **closure #1 in OSLogArguments.append(_:)(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t closure #1 in OSLogArguments.append(_:)(uint64_t *a1, uint64_t a2, uint64_t a3, void (*a4)(void))
{
  uint64_t v5;
  uint64_t result;

  a4();
  v5 = *a1 + 8;
  result = UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v5;
  return result;
}

id specialized AudioQueueStateManager.init(queueStateObserver:)(uint64_t a1, char *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  id v9;
  objc_super v11;
  _QWORD v12[5];

  v12[3] = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SOMediaNowPlayingObserver);
  v12[4] = &protocol witness table for SOMediaNowPlayingObserver;
  v12[0] = a1;
  v4 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_updateAudioQueueStateCacheGroup;
  v5 = a2;
  *(_QWORD *)&a2[v4] = dispatch_group_create();
  v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_isObserverRegistered] = 0;
  v6 = OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_lock;
  *(_QWORD *)&v5[v6] = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CB3740]), sel_init);
  *(_QWORD *)&v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_nowPlayingInfoCache] = 0;
  v7 = &v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateCache];
  *(_QWORD *)v7 = 0;
  v7[8] = 1;
  v8 = &v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_applicationBundleIdentifierCache];
  *(_QWORD *)v8 = 0;
  *((_QWORD *)v8 + 1) = 0;
  outlined init with copy of AppDataProviding((uint64_t)v12, (uint64_t)&v5[OBJC_IVAR____TtC21SiriInformationSearch22AudioQueueStateManager_queueStateObserver]);

  v11.receiver = v5;
  v11.super_class = (Class)type metadata accessor for AudioQueueStateManager();
  v9 = objc_msgSendSuper2(&v11, sel_init);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v9;
}

uint64_t specialized static SiriKitAppInfoDataProvider.make(appDataProvider:satisfyingAppsDataProvider:foregroundAppProvider:appSearchViewProvider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t inited;
  uint64_t (*v15)(void);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v23[40];
  __int128 v24[2];
  __int128 v25[2];
  _BYTE v26[24];
  ValueMetadata *v27;
  _UNKNOWN **v28;
  _QWORD v29[5];

  v29[3] = type metadata accessor for AppDataProvider();
  v29[4] = &protocol witness table for AppDataProvider;
  v29[0] = a1;
  v27 = &type metadata for RunningBoardForegroundAppProvider;
  v28 = &protocol witness table for RunningBoardForegroundAppProvider;
  v8 = one-time initialization token for pommes;
  swift_retain();
  if (v8 != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_unknownObjectRetain();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    *(_DWORD *)v12 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 8) = 1024;
    LODWORD(v25[0]) = a2 != 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_unknownObjectRelease();
    _os_log_impl(&dword_1C2356000, v10, v11, "SiriKitAppInfoDataProvider make, isEnabled=%{BOOL}d, satisfyingAppsDataProvider specified=%{BOOL}d", (uint8_t *)v12, 0xEu);
    MEMORY[0x1C3BBFF64](v12, -1, -1);

    v13 = a2;
    if (!a2)
      goto LABEL_7;
  }
  else
  {

    swift_unknownObjectRelease();
    v13 = a2;
    if (!a2)
    {
LABEL_7:
      type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();
      inited = swift_initStaticObject();
      v15 = (uint64_t (*)(void))(*(uint64_t (**)(void))(*(_QWORD *)inited + 88))();
      v13 = v15();
      a3 = v16;
      swift_release();
    }
  }
  outlined init with copy of AppDataProviding((uint64_t)v29, (uint64_t)v25);
  outlined init with copy of AppDataProviding((uint64_t)v26, (uint64_t)v24);
  outlined init with copy of MediaUserStateCenter?(a4, (uint64_t)v23, &demangling cache variable for type metadata for AppSearchViewProvider?);
  type metadata accessor for SiriKitAppInfoDataProvider();
  v17 = swift_allocObject();
  v18 = v17 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_appInfo;
  v19 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriKitAppInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v18, 1, 1, v19);
  *(_BYTE *)(v17 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_searchViewVisible) = 2;
  v20 = v17 + OBJC_IVAR____TtC21SiriInformationSearch26SiriKitAppInfoDataProvider_numThirdPartyVideoApps;
  *(_QWORD *)v20 = 0;
  *(_BYTE *)(v20 + 8) = 1;
  outlined init with take of AppDataProviding(v25, v17 + 16);
  *(_QWORD *)(v17 + 56) = v13;
  *(_QWORD *)(v17 + 64) = a3;
  outlined init with take of AppDataProviding(v24, v17 + 72);
  outlined init with take of PommesSearchReason?((uint64_t)v23, v17 + 112, &demangling cache variable for type metadata for AppSearchViewProvider?);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  swift_unknownObjectRetain();
  v21 = specialized AnyDataProvider.init<A>(provider:)(v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v26);
  return v21;
}

uint64_t specialized MusicDomain.init(spanMatcher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_BYTE *)(a2 + 24) = 1;
  *(_QWORD *)(a2 + 32) = specialized Set.init(_nonEmptyArrayLiteral:)((uint64_t)&outlined read-only object #0 of specialized MusicDomain.init(spanMatcher:));
  type metadata accessor for VocabularySearchClient();
  v4 = swift_allocObject();
  *(_QWORD *)(a2 + 16) = specialized VocabularySearchClient.init(spanMatcher:)(a1, v4);
  return a2;
}

uint64_t specialized VocabularySearchClient.init(spanMatcher:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  _QWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  _UNKNOWN **v20;

  v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v15 = *(_QWORD *)(v4 - 8);
  v16 = v4;
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8);
  v9 = type metadata accessor for DispatchQoS.QoSClass();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for SEMSpanMatcher);
  v20 = &protocol witness table for SEMSpanMatcher;
  *(_QWORD *)&v18 = a1;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v10 + 104))(v12, *MEMORY[0x1E0DEF540], v9);
  v14[1] = static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  static DispatchQoS.unspecified.getter();
  v17 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v6, *MEMORY[0x1E0DEF8D0], v16);
  *(_QWORD *)(a2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_QWORD *)(a2 + 64) = 0;
  outlined init with take of AppDataProviding(&v18, a2 + 24);
  return a2;
}

uint64_t specialized static PommesSearch.defaultPreflightClients(dataProviderManager:networkAvailabilityProvider:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t matched;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  ValueMetadata *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v32;
  ValueMetadata *v33;
  unint64_t v34;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<PommesSearchPreflightHandling>);
  v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1C24FAD70;
  matched = type metadata accessor for UtteranceMatchPreflightClient();
  v6 = swift_allocObject();
  *(_QWORD *)(v4 + 56) = matched;
  *(_QWORD *)(v4 + 64) = &protocol witness table for UtteranceMatchPreflightClient;
  *(_QWORD *)(v4 + 32) = v6;
  v7 = type metadata accessor for ClassicFollowupPreflightClient();
  v8 = swift_allocObject();
  *(_QWORD *)(v4 + 96) = v7;
  *(_QWORD *)(v4 + 104) = &protocol witness table for ClassicFollowupPreflightClient;
  *(_QWORD *)(v4 + 72) = v8;
  v9 = type metadata accessor for SmartPlayPreflightClient();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = a1;
  *(_QWORD *)(v4 + 136) = v9;
  *(_QWORD *)(v4 + 144) = &protocol witness table for SmartPlayPreflightClient;
  *(_QWORD *)(v4 + 112) = v10;
  v11 = type metadata accessor for CallContactPreflightClient();
  v12 = swift_allocObject();
  *(_QWORD *)(v4 + 176) = v11;
  *(_QWORD *)(v4 + 184) = &protocol witness table for CallContactPreflightClient;
  *(_QWORD *)(v4 + 152) = v12;
  v13 = objc_opt_self();
  swift_retain();
  v14 = objc_msgSend((id)v13, sel_processInfo);
  LOBYTE(v13) = NSProcessInfo.isRunningUnitTests.getter();

  if ((v13 & 1) != 0)
  {
    v15 = &type metadata for EmptyReferenceResolver;
    v16 = lazy protocol witness table accessor for type EmptyReferenceResolver and conformance EmptyReferenceResolver();
  }
  else
  {
    v15 = (ValueMetadata *)type metadata accessor for ReferenceResolutionClient();
    *(_QWORD *)&v32 = ReferenceResolutionClient.__allocating_init()();
    v16 = MEMORY[0x1E0DA3CC8];
  }
  v33 = v15;
  v34 = v16;
  v17 = type metadata accessor for PlayThisLibraryItemPreflightClient();
  v18 = swift_allocObject();
  outlined init with take of AppDataProviding(&v32, v18 + 16);
  *(_QWORD *)(v4 + 216) = v17;
  *(_QWORD *)(v4 + 224) = &protocol witness table for PlayThisLibraryItemPreflightClient;
  *(_QWORD *)(v4 + 192) = v18;
  v19 = type metadata accessor for WholeHomeAudioPreflightClient();
  v20 = swift_allocObject();
  *(_QWORD *)(v4 + 256) = v19;
  *(_QWORD *)(v4 + 264) = &protocol witness table for WholeHomeAudioPreflightClient;
  *(_QWORD *)(v4 + 232) = v20;
  v21 = type metadata accessor for PlayRadioStationPreflightClient();
  v22 = swift_allocObject();
  *(_QWORD *)(v4 + 296) = v21;
  *(_QWORD *)(v4 + 304) = &protocol witness table for PlayRadioStationPreflightClient;
  *(_QWORD *)(v4 + 272) = v22;
  v23 = type metadata accessor for OfflineMusicPlaybackPreflightClient();
  v24 = swift_allocObject();
  *(_QWORD *)(v24 + 16) = a2;
  *(_QWORD *)(v4 + 336) = v23;
  *(_QWORD *)(v4 + 344) = &protocol witness table for OfflineMusicPlaybackPreflightClient;
  *(_QWORD *)(v4 + 312) = v24;
  v25 = type metadata accessor for EnvironmentNamePreflightClient();
  v26 = swift_allocObject();
  *(_QWORD *)(v4 + 376) = v25;
  *(_QWORD *)(v4 + 384) = &protocol witness table for EnvironmentNamePreflightClient;
  *(_QWORD *)(v4 + 352) = v26;
  v27 = type metadata accessor for OpenAppOnTVPreflightClient();
  v28 = swift_allocObject();
  *(_QWORD *)(v4 + 416) = v27;
  *(_QWORD *)(v4 + 424) = &protocol witness table for OpenAppOnTVPreflightClient;
  *(_QWORD *)(v4 + 392) = v28;
  v29 = type metadata accessor for OpenAppVocPreflightClient();
  v30 = swift_allocObject();
  *(_QWORD *)(v4 + 456) = v29;
  *(_QWORD *)(v4 + 464) = &protocol witness table for OpenAppVocPreflightClient;
  *(_QWORD *)(v4 + 432) = v30;
  swift_retain();
  return v4;
}

uint64_t specialized DataProviderManager.init(ampDataProvider:queueStateDataProvider:appInfoDataProvider:preferredNavigationAppDataProvider:siriKitAppInfoDataProvider:profileSliceResolvingDataProvider:marketplaceInfoDataProvider:pairedDeviceDataProvider:muxContextManager:preferences:environment:assistantDataCache:serviceHelper:appChecking:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t);
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(char *, _QWORD, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void *v39;
  id v40;
  void (*v41)(uint64_t);
  void (*v42)(uint64_t);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  _OWORD v59[2];
  uint64_t v60;
  _BYTE v61[24];
  ValueMetadata *v62;
  _UNKNOWN **v63;

  v57 = a8;
  v54 = a7;
  v47 = a6;
  v51 = a5;
  v48 = a4;
  v50 = a3;
  v49 = a2;
  v46 = a1;
  v58 = a13;
  v55 = a11;
  v56 = a10;
  v52 = a9;
  v53 = a12;
  v45 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v14 = *(_QWORD *)(v45 - 8);
  MEMORY[0x1E0C80A78](v45);
  v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = type metadata accessor for DispatchQoS.QoSClass();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v21);
  v22 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v22);
  v62 = &type metadata for PommesSystemAppChecking;
  v63 = &protocol witness table for PommesSystemAppChecking;
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  static DispatchQoS.userInitiated.getter();
  static OS_dispatch_queue.Attributes.concurrent.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v18 + 104))(v20, *MEMORY[0x1E0DEF540], v17);
  static OS_dispatch_queue.global(qos:)();
  v23 = *(void (**)(char *, uint64_t))(v18 + 8);
  v24 = v47;
  v25 = v17;
  v26 = v46;
  v23(v20, v25);
  v27 = *(void (**)(char *, _QWORD, uint64_t))(v14 + 104);
  v28 = v48;
  v27(v16, *MEMORY[0x1E0DEF8D0], v45);
  v29 = v51;
  v30 = v50;
  v31 = v49;
  v32 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(a14 + 112) = 0u;
  *(_OWORD *)(a14 + 128) = 0u;
  *(_OWORD *)(a14 + 144) = 0u;
  *(_QWORD *)(a14 + 160) = 0;
  *(_QWORD *)(a14 + 16) = v32;
  *(_QWORD *)(a14 + 24) = v26;
  *(_QWORD *)(a14 + 32) = v31;
  *(_QWORD *)(a14 + 40) = v30;
  *(_QWORD *)(a14 + 48) = v28;
  *(_QWORD *)(a14 + 56) = v29;
  if (v24)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v33 = v24;
    v34 = v52;
  }
  else
  {
    type metadata accessor for AnalyticsComponentIdGenerator();
    memset(v59, 0, sizeof(v59));
    v60 = 0;
    v35 = swift_allocObject();
    type metadata accessor for ProfileSliceResolutionRequestInstrumentationUtil();
    v36 = swift_allocObject();
    *(_QWORD *)(v36 + 16) = 0;
    *(_QWORD *)(v36 + 24) = v35;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v34 = v52;
    v33 = specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)((uint64_t)v59, v36, v52);
    swift_release();
    outlined destroy of MediaUserStateCenter?((uint64_t)v59, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  }
  v38 = v54;
  v37 = v55;
  *(_QWORD *)(a14 + 64) = v33;
  *(_QWORD *)(a14 + 72) = v38;
  v39 = v56;
  *(_QWORD *)(a14 + 80) = v57;
  *(_QWORD *)(a14 + 88) = v34;
  *(_QWORD *)(a14 + 96) = v37;
  *(_QWORD *)(a14 + 104) = v39;
  *(_QWORD *)(a14 + 112) = v53;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  v40 = v39;
  swift_release();
  *(_QWORD *)(a14 + 120) = v58;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  outlined init with copy of AppDataProviding((uint64_t)v61, (uint64_t)v59);
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v59, a14 + 128, (uint64_t *)&demangling cache variable for type metadata for PommesAppChecking?);
  swift_endAccess();
  v41 = *(void (**)(uint64_t))(**(_QWORD **)(a14 + 40) + 160);
  swift_retain();
  v41(1);
  swift_release();
  v42 = *(void (**)(uint64_t))(**(_QWORD **)(a14 + 48) + 160);
  swift_retain();
  v42(1);
  swift_release();
  (*(void (**)(uint64_t))(**(_QWORD **)(a14 + 56) + 160))(1);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v61);
  return a14;
}

uint64_t sub_1C23BBC34()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t type metadata accessor for PommesSearch()
{
  return objc_opt_self();
}

uint64_t specialized PommesSearch.init(remoteSearchClient:domainSearchClients:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  id v13;
  int v14;

  v3 = v2;
  type metadata accessor for AnalyticsComponentIdGenerator();
  v6 = swift_allocObject();
  type metadata accessor for PommesRequestInstrumentationUtil();
  v7 = swift_allocObject();
  *(_QWORD *)(v7 + 16) = 0;
  *(_QWORD *)(v7 + 24) = v6;
  *(_QWORD *)(v3 + 64) = v7;
  v8 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v9 = type metadata accessor for PommesServerFallbackPreferences();
  v10 = swift_allocObject();
  *(_QWORD *)(v10 + 16) = v8;
  *(_QWORD *)(v3 + 96) = v9;
  *(_QWORD *)(v3 + 104) = &protocol witness table for PommesServerFallbackPreferences;
  *(_QWORD *)(v3 + 72) = v10;
  *(_BYTE *)(v3 + 112) = 0;
  *(_QWORD *)(v3 + 32) = a2;
  *(_QWORD *)(v3 + 16) = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v3 + 24) = a1;
  v11 = one-time initialization token for shared;
  swift_retain();
  if (v11 != -1)
    swift_once();
  *(_QWORD *)(v3 + 40) = static PegasusCacheManager.shared;
  swift_retain();
  v12 = default argument 0 of DomainWarmup.init(warmupClients:)();
  type metadata accessor for DomainWarmup();
  swift_allocObject();
  *(_QWORD *)(v3 + 56) = DomainWarmup.init(warmupClients:)(v12);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0CFE920]), sel_init);
  v14 = AFSupportsMultiUser();
  type metadata accessor for PommesMUXContextManager();
  swift_allocObject();
  *(_QWORD *)(v3 + 48) = PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)((uint64_t)v13, v14);
  return v3;
}

uint64_t sub_1C23BBE14()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int EnumCaseMultiPayload;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t v47;

  v1 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = *(_QWORD *)(v1 + 64);
  v4 = type metadata accessor for SignpostToken();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = (v2 + v3 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = *(_QWORD *)(v5 + 64);
  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?)
                 - 8);
  v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  v46 = (((((*(_QWORD *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  v47 = type metadata accessor for PommesCandidateId();
  v10 = *(_QWORD *)(v47 - 8);
  v11 = (*(unsigned __int8 *)(v10 + 80) + v46 + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = *(_QWORD *)(v10 + 64);
  v13 = (int *)type metadata accessor for PommesSearchRequest(0);
  v14 = (v12 + *(unsigned __int8 *)(*((_QWORD *)v13 - 1) + 80) + v11) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v13 - 1) + 80);
  v15 = type metadata accessor for Date();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v0 + v2, v15);
  swift_bridgeObjectRelease();
  v16 = v0 + v6 + *(int *)(v4 + 20);
  v17 = type metadata accessor for OSSignpostID();
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 8))(v16, v17);
  swift_release();
  v18 = v0 + v9;
  v19 = type metadata accessor for PommesSearchReason();
  v20 = *(_QWORD *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v10 + 8))(v0 + v11, v47);
  v21 = v0 + v14;
  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v27 = v21
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                 + 64);
    v28 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v29 = *(_QWORD *)(v28 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      goto LABEL_14;
    swift_bridgeObjectRelease();
    v23 = v21
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    swift_bridgeObjectRelease();
    v24 = v23 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    v25 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v26 = *(_QWORD *)(v25 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
    goto LABEL_11;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v30 = v21
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v31 = type metadata accessor for TCUMappedNLResponse();
  v32 = *(_QWORD *)(v31 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
LABEL_14:
  swift_bridgeObjectRelease();
  v33 = v21 + v13[6];
  v34 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v35 = *(_QWORD *)(v34 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36 = v21 + v13[10];
  v37 = type metadata accessor for PommesContext();
  v38 = *(_QWORD *)(v37 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v36, v37);
  v39 = v21 + v13[11];
  v40 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v41 = *(_QWORD *)(v40 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48))(v39, 1, v40))
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
  swift_release();
  v42 = v21 + v13[14];
  v43 = type metadata accessor for InputOrigin();
  v44 = *(_QWORD *)(v43 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v42, v43);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

void partial apply for closure #1 in PommesSearch.search(pommesSearchRequest:completion:)(unint64_t a1, char a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = a2 & 1;
  v4 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(_QWORD *)(type metadata accessor for SignpostToken() - 8);
  v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = *(_QWORD *)(v7 + 64);
  v10 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchReason?)
                  - 8);
  v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  v12 = (*(_QWORD *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  v13 = (v12 + 23) & 0xFFFFFFFFFFFFFFF8;
  v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_QWORD *)(type metadata accessor for PommesCandidateId() - 8);
  v16 = (*(unsigned __int8 *)(v15 + 80) + v14 + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  v17 = *(_QWORD *)(v15 + 64);
  v18 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PommesSearchRequest(0) - 8) + 80);
  closure #1 in PommesSearch.search(pommesSearchRequest:completion:)(a1, v3, v2 + v5, v2 + v8, v2 + v11, *(void (**)(void *, _QWORD))(v2 + v12), *(_QWORD *)(v2 + v12 + 8), *(_QWORD *)(v2 + v13), *(_QWORD *)(v2 + v14), *(_QWORD *)(v2 + v14 + 8), v2 + v16, v2 + ((v17 + v18 + v16) & ~v18));
}

uint64_t sub_1C23BC488()
{
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #2 in PommesSearch.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  closure #2 in PommesSearch.search(pommesSearchRequest:completion:)(*(void (**)(void *, uint64_t))(v0 + 16), *(_QWORD *)(v0 + 24), *(_BYTE *)(v0 + 32));
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x1C3BBFE68](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

uint64_t type metadata accessor for PommesSearchEagerInfo(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for PommesSearchEagerInfo);
}

uint64_t sub_1C23BC510()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in PommesSearch.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(_QWORD, _QWORD))(v0 + 16))(*(_QWORD *)(v0 + 32), 0);
}

unint64_t lazy protocol witness table accessor for type SearchError and conformance SearchError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchError and conformance SearchError;
  if (!lazy protocol witness table cache variable for type SearchError and conformance SearchError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for SearchError, &type metadata for SearchError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchError and conformance SearchError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type SearchError and conformance SearchError;
  if (!lazy protocol witness table cache variable for type SearchError and conformance SearchError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for SearchError, &type metadata for SearchError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchError and conformance SearchError);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LocalDomainTypes and conformance LocalDomainTypes()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type LocalDomainTypes and conformance LocalDomainTypes;
  if (!lazy protocol witness table cache variable for type LocalDomainTypes and conformance LocalDomainTypes)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for LocalDomainTypes, &type metadata for LocalDomainTypes);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LocalDomainTypes and conformance LocalDomainTypes);
  }
  return result;
}

uint64_t sub_1C23BC5F8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
}

uint64_t sub_1C23BC620(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of AppDataProviding(a1, (uint64_t)v4);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 160))(v4);
}

uint64_t sub_1C23BC660@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 176))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C23BC694(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 112) = v2;
  return result;
}

char *initializeBufferWithCopyOfBuffer for PommesSearchError(char *a1, void **a2, uint64_t a3)
{
  char *v3;
  int v4;
  char *v5;
  char *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v3 = a1;
  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = (char *)*a2;
  if ((v4 & 0x20000) != 0)
  {
    *(_QWORD *)a1 = v5;
    v3 = &v5[(v4 + 16) & ~(unint64_t)v4];
    swift_retain();
  }
  else
  {
    v8 = v5;
    *(_QWORD *)v3 = v5;
    v9 = *(int *)(a3 + 20);
    v10 = &v3[v9];
    v11 = (char *)a2 + v9;
    v12 = type metadata accessor for PommesSearchReason();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v3;
}

void **assignWithCopy for PommesSearchError(void **a1, id *a2, uint64_t a3)
{
  id v6;
  id v7;
  void *v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;

  v6 = *a2;
  v7 = *a2;
  v8 = *a1;
  *a1 = v6;

  v9 = *(int *)(a3 + 20);
  v10 = (char *)a1 + v9;
  v11 = (char *)a2 + v9;
  v12 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 24))(v10, v11, v12);
  return a1;
}

_QWORD *initializeWithTake for PommesSearchError(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void **assignWithTake for PommesSearchError(void **a1, void **a2, uint64_t a3)
{
  void *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;

  v6 = *a1;
  *a1 = *a2;

  v7 = *(int *)(a3 + 20);
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = type metadata accessor for PommesSearchReason();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_1C23BC8A8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for PommesSearchReason();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

char *sub_1C23BC924(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for PommesSearchReason();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata completion function for PommesSearchError()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PommesSearchReason();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t destroy for PommesSearchEagerInfo(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
}

uint64_t initializeWithCopy for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t assignWithCopy for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t initializeWithTake for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t assignWithTake for PommesSearchEagerInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesSearchEagerInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23BCB98(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 48))(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for PommesSearchEagerInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23BCBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchReason();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 56))(a1, a2, a2, v4);
}

uint64_t type metadata completion function for PommesSearchEagerInfo()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for PommesSearchReason();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t method lookup function for PommesSearch()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesSearch.serverFallbackPreferences.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PommesSearch.serverFallbackPreferences.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of PommesSearch.serverFallbackPreferences.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PommesSearch.hasCompletedInitialPrepare.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of PommesSearch.__allocating_init(remoteSearchClient:domainSearchClients:preflightClients:pegasusCacheManager:domainWarmup:muxContextManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 208))();
}

uint64_t dispatch thunk of PommesSearch.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PommesSearch.shouldHandleRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PommesSearch.search(pommesSearchRequest:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of PommesSearch.performPreflightChecks(for:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PommesSearch.makeSearchRequestProcessor(with:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearch()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtSessionStart()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtRequestStart()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtRequestStart(requestId:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 296))();
}

uint64_t dispatch thunk of PommesSearch.prepareForSearchAtRequestStart(requestId:location:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of PommesSearch.cacheMUXContext(msg:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t dispatch thunk of PommesSearch.tearDown()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 320))();
}

uint64_t dispatch thunk of PommesSearch.logCompletionOfPommesRequest(requestId:pommesCandidateId:result:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v5;

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v5 + 328))(a1, a2, a3, a4, a5 & 1);
}

uint64_t getEnumTagSinglePayload for SearchError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFD)
    goto LABEL_17;
  if (a2 + 3 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 3) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 3;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 3;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 3;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 4;
  v8 = v6 - 4;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for SearchError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C23BCE5C + 4 * byte_1C24FADD5[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C23BCE90 + 4 * byte_1C24FADD0[v4]))();
}

uint64_t sub_1C23BCE90(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23BCE98(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23BCEA0);
  return result;
}

uint64_t sub_1C23BCEAC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23BCEB4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C23BCEB8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23BCEC0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for SearchError(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for SearchError()
{
  return &type metadata for SearchError;
}

uint64_t getEnumTagSinglePayload for LocalDomainTypes(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for LocalDomainTypes(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C23BCFC0 + 4 * byte_1C24FADDF[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C23BCFF4 + 4 * byte_1C24FADDA[v4]))();
}

uint64_t sub_1C23BCFF4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23BCFFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23BD004);
  return result;
}

uint64_t sub_1C23BD010(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23BD018);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C23BD01C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23BD024(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for LocalDomainTypes(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

ValueMetadata *type metadata accessor for LocalDomainTypes()
{
  return &type metadata for LocalDomainTypes;
}

uint64_t dispatch thunk of LocalDomainSearch.name.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))() & 1;
}

uint64_t dispatch thunk of LocalDomainSearch.search(query:userIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(void))(a7 + 16))();
}

uint64_t dispatch thunk of LocalDomainSearch.search(searchRequest:pegasusResponse:serviceHelper:userIds:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return (*(uint64_t (**)(void))(a8 + 24))();
}

_QWORD *partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  _QWORD *result;
  uint64_t v4;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v1 + 120))(&v4);
  *a1 = v4;
  return result;
}

uint64_t partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:)();
}

{
  return partial apply for specialized implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:)();
}

uint64_t partial apply for specialized implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))() & 1;
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))() & 1;
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 232))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 208))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 224))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 128))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 136))();
  *a1 = result;
  return result;
}

{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(*(_QWORD *)v1 + 168))();
  *a1 = result;
  return result;
}

uint64_t partial apply for specialized implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

void outlined consume of Result<[IQFMapsPersonalizationResult], Error>(id a1, char a2)
{
  if ((a2 & 1) != 0)

  else
    swift_bridgeObjectRelease();
}

uint64_t partial apply for specialized implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t PommesMUXContextManager.__allocating_init(multiUserConnection:isMultiUserSupported:)(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)(a1, a2);
  return v4;
}

uint64_t MUXUserInfo.sharedUserId.getter()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MUXUserInfo.altDSID.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MUXUserInfo.companionName.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  swift_bridgeObjectRetain();
  return v1;
}

id MUXUserInfo.homeSettings.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 48);
}

uint64_t MUXUserInfo.init(sharedUserId:altDSID:companionName:homeSettings:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  *a8 = result;
  a8[1] = a2;
  a8[2] = a3;
  a8[3] = a4;
  a8[4] = a5;
  a8[5] = a6;
  a8[6] = a7;
  return result;
}

uint64_t MUXContext.allInfo.setter(uint64_t a1)
{
  _QWORD *v1;
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *v1 = a1;
  return result;
}

uint64_t (*MUXContext.allInfo.modify())()
{
  return destructiveProjectEnumData for SearchError;
}

uint64_t MUXContext.userInfo(where:is:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  id v13;
  char v14;
  uint64_t result;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v21;
  uint64_t v22;

  if (a2 && (v5 = *(_QWORD *)(a3 + 16)) != 0)
  {
    v17 = a4;
    swift_bridgeObjectRetain_n();
    v6 = (void **)(a3 + 80);
    while (1)
    {
      v7 = (uint64_t)*(v6 - 5);
      v9 = (uint64_t)*(v6 - 4);
      v8 = (uint64_t)*(v6 - 3);
      v11 = (uint64_t)*(v6 - 2);
      v10 = (uint64_t)*(v6 - 1);
      v12 = *v6;
      v18 = (uint64_t)*(v6 - 6);
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v13 = v12;
      swift_getAtKeyPath();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v21 == a1 && v22 == a2)
      {
        swift_bridgeObjectRelease_n();
        result = swift_bridgeObjectRelease();
        goto LABEL_12;
      }
      v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v14 & 1) != 0)
        break;
      v6 += 7;

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!--v5)
      {
        result = swift_bridgeObjectRelease_n();
        v16 = 0;
        v7 = 0;
        v9 = 0;
        v8 = 0;
        v11 = 0;
        v10 = 0;
        v13 = 0;
        a4 = v17;
        goto LABEL_13;
      }
    }
    result = swift_bridgeObjectRelease_n();
LABEL_12:
    a4 = v17;
    v16 = v18;
  }
  else
  {
    v16 = 0;
    v7 = 0;
    v9 = 0;
    v8 = 0;
    v11 = 0;
    v10 = 0;
    v13 = 0;
  }
LABEL_13:
  *a4 = v16;
  a4[1] = v7;
  a4[2] = v9;
  a4[3] = v8;
  a4[4] = v11;
  a4[5] = v10;
  a4[6] = v13;
  return result;
}

SiriInformationSearch::MUXContext __swiftcall MUXContext.init()()
{
  return (SiriInformationSearch::MUXContext)MEMORY[0x1E0DEE9D8];
}

uint64_t default argument 0 of MUXContext.init(allInfo:)()
{
  return MEMORY[0x1E0DEE9D8];
}

id PommesMUXContextManager.dispatchGroup.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

id PommesMUXContextManager.syncQueue.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 24);
}

id PommesMUXContextManager.multiUserConnection.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 32);
}

uint64_t PommesMUXContextManager.isMultiUserSupported.getter()
{
  uint64_t v0;

  return *(unsigned __int8 *)(v0 + 40);
}

uint64_t PommesMUXContextManager.cachedContext.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 48) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*PommesMUXContextManager.cachedContext.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t PommesMUXContextManager.init(multiUserConnection:isMultiUserSupported:)(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  v14 = a2;
  v13 = a1;
  v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v8);
  *(_QWORD *)(v2 + 16) = dispatch_group_create();
  type metadata accessor for OS_dispatch_queue();
  static DispatchQoS.unspecified.getter();
  v15 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v4 + 104))(v6, *MEMORY[0x1E0DEF8D0], v3);
  v9 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_QWORD *)(v2 + 48) = MEMORY[0x1E0DEE9D8];
  v10 = v13;
  *(_QWORD *)(v2 + 24) = v9;
  *(_QWORD *)(v2 + 32) = v10;
  *(_BYTE *)(v2 + 40) = v14;
  return v2;
}

unint64_t lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes;
  if (!lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes)
  {
    v1 = type metadata accessor for OS_dispatch_queue.Attributes();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEF828], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF38], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A]);
  }
  return result;
}

void PommesMUXContextManager.cacheWithMUXContextMessage(msg:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  void (*v16)(char *, uint64_t, uint64_t);
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  id v28;
  unint64_t v29;
  NSObject *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  int64_t v38;
  unint64_t v39;
  int64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  os_log_type_t v46;
  uint8_t *v47;
  int64_t v48;
  uint64_t v49;
  int64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  int64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  NSObject *v62;
  _QWORD aBlock[7];

  v1 = type metadata accessor for UserID();
  v59 = *(_QWORD *)(v1 - 8);
  v60 = v1;
  v2 = MEMORY[0x1E0C80A78](v1);
  v55 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = v3;
  MEMORY[0x1E0C80A78](v2);
  v54 = (char *)&v48 - v4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  v6 = MEMORY[0x1E0C80A78](v5);
  MEMORY[0x1E0C80A78](v6);
  v57 = v0;
  if (*(_BYTE *)(v0 + 40) != 1)
  {
    if (one-time initialization token for pommes != -1)
      goto LABEL_34;
    goto LABEL_30;
  }
  v52 = (uint64_t)&v48 - v7;
  v53 = v8;
  v9 = MUXContextMessage.userIdToHomeMember.getter();
  v58 = 0;
  v10 = *(_QWORD *)(v9 + 64);
  v49 = v9 + 64;
  v11 = 1 << *(_BYTE *)(v9 + 32);
  v12 = -1;
  if (v11 < 64)
    v12 = ~(-1 << v11);
  v13 = v12 & v10;
  v50 = (unint64_t)(v11 + 63) >> 6;
  v51 = v9;
  v48 = v50 - 1;
  v14 = v59;
  if ((v12 & v10) == 0)
    goto LABEL_9;
LABEL_7:
  v29 = __clz(__rbit64(v13));
  v30 = ((v13 - 1) & v13);
  v31 = v29 | (v58 << 6);
  v32 = v53;
LABEL_8:
  v33 = v51;
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v59 + 16))(v32, *(_QWORD *)(v51 + 48) + *(_QWORD *)(v59 + 72) * v31, v60);
  v34 = *(_QWORD *)(v33 + 56);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
  v36 = *(void **)(v34 + 8 * v31);
  *(_QWORD *)(v32 + *(int *)(v35 + 48)) = v36;
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v32, 0, 1, v35);
  v37 = v36;
  while (1)
  {
    v42 = v32;
    v43 = v52;
    outlined init with take of (key: UserID, value: SAHomeMemberInfo)?(v42, v52);
    v44 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 48))(v43, 1, v44) == 1)
    {
      swift_release();
      return;
    }
    v15 = *(void **)(v43 + *(int *)(v44 + 48));
    v62 = v30;
    v16 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 32);
    v17 = v54;
    v18 = v43;
    v19 = v60;
    v16(v54, v18, v60);
    v20 = v57;
    dispatch_group_enter(*(dispatch_group_t *)(v57 + 16));
    v61 = *(id *)(v20 + 32);
    v21 = UserID.sharedUserId.getter();
    v22 = (void *)MEMORY[0x1C3BBEC44](v21);
    swift_bridgeObjectRelease();
    v23 = swift_allocObject();
    swift_weakInit();
    v24 = v55;
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v55, v17, v19);
    v25 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
    v26 = swift_allocObject();
    *(_QWORD *)(v26 + 16) = v23;
    *(_QWORD *)(v26 + 24) = v15;
    v16((char *)(v26 + v25), (uint64_t)v24, v19);
    v13 = (unint64_t)v62;
    aBlock[4] = partial apply for closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:);
    aBlock[5] = v26;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed AFSharedUserInfo?) -> ();
    aBlock[3] = &block_descriptor_0;
    v27 = _Block_copy(aBlock);
    v28 = v15;
    swift_release();
    objc_msgSend(v61, sel_getSharedUserInfoForSharedUserID_completion_, v22, v27);
    _Block_release(v27);

    (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v19);
    if (v13)
      goto LABEL_7;
LABEL_9:
    v38 = v58 + 1;
    v32 = v53;
    if (__OFADD__(v58, 1))
      break;
    if (v38 < v50)
    {
      v39 = *(_QWORD *)(v49 + 8 * v38);
      if (v39)
        goto LABEL_12;
      v40 = v58 + 2;
      ++v58;
      if (v38 + 1 < v50)
      {
        v39 = *(_QWORD *)(v49 + 8 * v40);
        if (v39)
          goto LABEL_15;
        v58 = v38 + 1;
        if (v38 + 2 < v50)
        {
          v39 = *(_QWORD *)(v49 + 8 * (v38 + 2));
          if (v39)
          {
            v38 += 2;
            goto LABEL_12;
          }
          v40 = v38 + 3;
          v58 = v38 + 2;
          if (v38 + 3 < v50)
          {
            v39 = *(_QWORD *)(v49 + 8 * v40);
            if (!v39)
            {
              while (1)
              {
                v38 = v40 + 1;
                if (__OFADD__(v40, 1))
                  break;
                if (v38 >= v50)
                {
                  v58 = v48;
                  goto LABEL_26;
                }
                v39 = *(_QWORD *)(v49 + 8 * v38);
                ++v40;
                if (v39)
                  goto LABEL_12;
              }
              __break(1u);
              return;
            }
LABEL_15:
            v38 = v40;
LABEL_12:
            v30 = ((v39 - 1) & v39);
            v31 = __clz(__rbit64(v39)) + (v38 << 6);
            v58 = v38;
            goto LABEL_8;
          }
        }
      }
    }
LABEL_26:
    v41 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo));
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56))(v32, 1, 1, v41);
    v30 = 0;
  }
  __break(1u);
LABEL_34:
  swift_once();
LABEL_30:
  v45 = type metadata accessor for Logger();
  __swift_project_value_buffer(v45, (uint64_t)static Logger.pommes);
  v62 = Logger.logObject.getter();
  v46 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v62, v46))
  {
    v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v47 = 0;
    _os_log_impl(&dword_1C2356000, v62, v46, "MUXDataProvider - MultiUser not supported on this device", v47, 2u);
    MEMORY[0x1C3BBFF64](v47, -1, -1);
  }

}

void closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  uint64_t v18;
  NSObject *v19;
  NSObject *v20;
  os_log_type_t v21;
  _BOOL4 v22;
  uint8_t *v23;
  NSObject *v24;
  NSObject *v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  id v37;
  void *v38;
  id v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t Strong;
  void *v44;
  unint64_t v45;
  unint64_t v46;
  id v47;
  void *v48;
  id v49;
  void *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  dispatch_queue_t v54;
  NSObject *v55;
  os_log_type_t v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  id v62;
  id v63;
  _QWORD *v64;
  os_log_t v65;
  uint64_t v66;
  uint64_t v67;
  id v68;
  os_log_type_t v69;
  uint8_t *v70;
  const char *v71;
  NSObject *v72;
  uint64_t v73;
  NSObject *v74;
  os_log_type_t v75;
  uint8_t *v76;
  NSObject *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  void *v83;
  id v84;
  id v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  char *v90;
  uint64_t v91;
  id v92;
  uint64_t v93;
  NSObject *v94;
  void *v95;
  id v96;
  dispatch_queue_t v97;
  void (*v98)();
  uint64_t v99;
  NSObject *v100;
  uint64_t v101;
  os_log_t v102;
  void *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  void (*v109)(dispatch_queue_t, uint64_t, uint64_t);
  id v110;
  NSObject *v111;
  uint64_t v112;
  char *v113;
  dispatch_queue_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  id v118;
  uint64_t v119;
  uint64_t aBlock[6];
  uint64_t v121;
  uint64_t v122;

  v8 = type metadata accessor for UserID();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x1E0C80A78](v8);
  v12 = (char *)&v101 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  if (!a1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1C2356000, v34, v35, "Could not fetch sharedUserInfo for sharedUserId", v36, 2u);
      MEMORY[0x1C3BBFF64](v36, -1, -1);
    }
    goto LABEL_27;
  }
  v118 = a3;
  v114 = (dispatch_queue_t)((char *)&v101 - v13);
  v112 = v14;
  v15 = one-time initialization token for pommes;
  v16 = a1;
  if (v15 != -1)
    swift_once();
  v17 = type metadata accessor for Logger();
  v18 = __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
  v19 = v16;
  v119 = v18;
  v20 = Logger.logObject.getter();
  v21 = static os_log_type_t.debug.getter();
  v22 = os_log_type_enabled(v20, v21);
  v115 = a2;
  v113 = v12;
  v117 = a4;
  if (v22)
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v110 = (id)swift_slowAlloc();
    aBlock[0] = (uint64_t)v110;
    *(_DWORD *)v23 = 136380675;
    v109 = (void (*)(dispatch_queue_t, uint64_t, uint64_t))(v23 + 4);
    v24 = v19;
    v116 = v9;
    v25 = v24;
    v26 = -[NSObject description](v24, sel_description);
    v27 = v8;
    v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v111 = v19;
    v30 = v29;

    v31 = v28;
    v8 = v27;
    v122 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v30, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    v9 = v116;
    v19 = v111;
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v20, v21, "SharedUserInfo: %{private}s", v23, 0xCu);
    v32 = v110;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v32, -1, -1);
    MEMORY[0x1C3BBFF64](v23, -1, -1);

  }
  else
  {

  }
  v37 = -[NSObject companionDeviceInfo](v19, sel_companionDeviceInfo);
  if (!v37
    || (v38 = v37,
        v39 = objc_msgSend(v37, sel_productPrefix),
        v38,
        !v39))
  {
LABEL_20:
    v34 = Logger.logObject.getter();
    v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      v71 = "Could not get companion name for sharedUserId";
LABEL_22:
      _os_log_impl(&dword_1C2356000, v34, v69, v71, v70, 2u);
      MEMORY[0x1C3BBFF64](v70, -1, -1);
      v72 = v19;
LABEL_26:

      goto LABEL_27;
    }
LABEL_25:
    v72 = v34;
    v34 = v19;
    goto LABEL_26;
  }
  v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v42 = v41;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (!Strong)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  v44 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)Strong + 184))(v40, v42);
  v46 = v45;
  swift_release();
  swift_bridgeObjectRelease();
  if (!v46)
    goto LABEL_20;
  v47 = objc_msgSend(v118, sel_homeMemberSettings);
  if (!v47)
  {
    swift_bridgeObjectRelease();
    v34 = Logger.logObject.getter();
    v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v69))
    {
      v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v70 = 0;
      v71 = "No saved SAHomeUserSettings for sharedUserId";
      goto LABEL_22;
    }
    goto LABEL_25;
  }
  v48 = v47;
  v49 = -[NSObject iCloudAltDSID](v19, sel_iCloudAltDSID);
  if (!v49)
  {
    swift_bridgeObjectRelease();
    v34 = Logger.logObject.getter();
    v75 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v75))
    {
      v76 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v76 = 0;
      _os_log_impl(&dword_1C2356000, v34, v75, "No iCloudAltDSID for sharedUserId", v76, 2u);
      MEMORY[0x1C3BBFF64](v76, -1, -1);
      v77 = v19;
    }
    else
    {
      v77 = v34;
      v34 = v19;
    }

LABEL_27:
    swift_beginAccess();
    v73 = swift_weakLoadStrong();
    if (v73)
    {
      v74 = *(id *)(v73 + 16);
      swift_release();
      dispatch_group_leave(v74);

    }
    return;
  }
  v50 = v49;
  v118 = v44;
  v51 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  v53 = v52;

  v54 = v114;
  v109 = *(void (**)(dispatch_queue_t, uint64_t, uint64_t))(v9 + 16);
  v109(v114, v117, v8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  v110 = v48;
  v55 = Logger.logObject.getter();
  v56 = static os_log_type_t.debug.getter();
  LODWORD(v108) = v56;
  v57 = os_log_type_enabled(v55, v56);
  v116 = v9;
  v111 = v53;
  if (v57)
  {
    v58 = swift_slowAlloc();
    v119 = v8;
    v59 = v58;
    v104 = (_QWORD *)swift_slowAlloc();
    v105 = swift_slowAlloc();
    aBlock[0] = v105;
    *(_DWORD *)v59 = 141559043;
    v121 = 1752392040;
    v103 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v59 + 12) = 2081;
    v106 = v51;
    v102 = v55;
    v60 = UserID.sharedUserId.getter();
    v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v60, v61, aBlock);
    v51 = v106;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(dispatch_queue_t, uint64_t))(v9 + 8))(v54, v119);
    *(_WORD *)(v59 + 22) = 2080;
    swift_bridgeObjectRetain();
    v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v51, v53, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v59 + 32) = 2080;
    swift_bridgeObjectRetain();
    v121 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v118, v46, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v59 + 42) = 2112;
    v62 = v110;
    v121 = (uint64_t)v110;
    v63 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v64 = v104;
    *v104 = v103;

    v65 = v102;
    _os_log_impl(&dword_1C2356000, v102, (os_log_type_t)v108, "Creating new MUXUserInfo with:\n  suid: %{private,mask.hash}s\n  altDSID: %s\n  companionName: %s\n  settings:%@", (uint8_t *)v59, 0x34u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v64, -1, -1);
    v66 = v105;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v66, -1, -1);
    v67 = v59;
    v8 = v119;
    MEMORY[0x1C3BBFF64](v67, -1, -1);

    v68 = v62;
  }
  else
  {
    (*(void (**)(dispatch_queue_t, uint64_t))(v9 + 8))(v54, v8);

    v68 = v110;
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  v78 = v117;
  v79 = UserID.sharedUserId.getter();
  v81 = v80;
  swift_beginAccess();
  v82 = swift_weakLoadStrong();
  if (v82)
  {
    v119 = v81;
    v83 = *(void **)(v82 + 24);
    v84 = v68;
    v108 = v79;
    v85 = v84;
    v110 = v84;
    v114 = v83;
    swift_release();
    v107 = v46;
    v86 = v113;
    v109((dispatch_queue_t)v113, v78, v8);
    v87 = v51;
    v88 = v116;
    v89 = (*(unsigned __int8 *)(v116 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
    v90 = (char *)swift_allocObject();
    v91 = v108;
    *((_QWORD *)v90 + 2) = v115;
    *((_QWORD *)v90 + 3) = v91;
    *((_QWORD *)v90 + 4) = v119;
    *((_QWORD *)v90 + 5) = v87;
    v92 = v118;
    *((_QWORD *)v90 + 6) = v111;
    *((_QWORD *)v90 + 7) = v92;
    *((_QWORD *)v90 + 8) = v46;
    *((_QWORD *)v90 + 9) = v85;
    (*(void (**)(char *, char *, uint64_t))(v88 + 32))(&v90[v89], v86, v8);
    v93 = swift_allocObject();
    *(_QWORD *)(v93 + 16) = partial apply for closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:);
    *(_QWORD *)(v93 + 24) = v90;
    aBlock[4] = (uint64_t)partial apply for thunk for @callee_guaranteed () -> ();
    aBlock[5] = v93;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_12;
    v94 = v19;
    v95 = _Block_copy(aBlock);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v96 = v110;
    swift_retain();
    swift_release();
    v97 = v114;
    dispatch_sync(v114, v95);

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    _Block_release(v95);
    LOBYTE(v97) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v97 & 1) != 0)
    {
      __break(1u);
      return;
    }
    v98 = partial apply for closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:);
  }
  else
  {

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    v98 = 0;
  }
  swift_beginAccess();
  v99 = swift_weakLoadStrong();
  if (v99)
  {
    v100 = *(id *)(v99 + 16);
    swift_release();
    dispatch_group_leave(v100);

  }
  outlined consume of (@escaping @callee_guaranteed () -> ())?((uint64_t)v98);
}

void closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t Strong;
  uint64_t (*v10)(uint64_t *);
  void (*v11)(uint64_t *, _QWORD);
  _QWORD **v12;
  _QWORD *v13;
  _QWORD *v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  unint64_t v17;
  _QWORD *v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32[4];

  v5 = type metadata accessor for UserID();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v30 = a3;
    v10 = *(uint64_t (**)(uint64_t *))(*(_QWORD *)Strong + 136);
    outlined retain of MUXUserInfo(a2);
    v11 = (void (*)(uint64_t *, _QWORD))v10(v32);
    v13 = v12;
    v14 = *v12;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *v13 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *v13 = v14;
    }
    v17 = v14[2];
    v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v16 > 1), v17 + 1, 1, v14);
      *v13 = v14;
    }
    v14[2] = v17 + 1;
    v18 = &v14[7 * v17];
    v19 = *(_OWORD *)a2;
    v20 = *(_OWORD *)(a2 + 16);
    v21 = *(_OWORD *)(a2 + 32);
    v18[10] = *(_QWORD *)(a2 + 48);
    *((_OWORD *)v18 + 3) = v20;
    *((_OWORD *)v18 + 4) = v21;
    *((_OWORD *)v18 + 2) = v19;
    v11(v32, 0);
    swift_release();
    a3 = v30;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v22 = type metadata accessor for Logger();
  __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a3, v5);
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v23, v24))
  {
    v25 = swift_slowAlloc();
    v26 = swift_slowAlloc();
    *(_DWORD *)v25 = 141558275;
    v31 = 1752392040;
    v32[0] = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2081;
    v27 = UserID.sharedUserId.getter();
    v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    _os_log_impl(&dword_1C2356000, v23, v24, "MUXUserInfo for suid(%{private,mask.hash}s) added to cache", (uint8_t *)v25, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v26, -1, -1);
    MEMORY[0x1C3BBFF64](v25, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }

}

void thunk for @escaping @callee_guaranteed (@guaranteed AFSharedUserInfo?) -> ()(uint64_t a1, void *a2)
{
  void (*v3)(void *);
  id v4;

  v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  v4 = a2;
  v3(a2);
  swift_release();

}

Swift::Void __swiftcall PommesMUXContextManager.reset()()
{
  uint64_t v0;
  void (*v1)(_BYTE *, _QWORD);
  _QWORD *v2;
  _BYTE v3[32];

  v1 = (void (*)(_BYTE *, _QWORD))(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v0 + 136))(v3);
  *v2 = MEMORY[0x1E0DEE9D8];
  swift_bridgeObjectRelease();
  v1(v3, 0);
}

Swift::String_optional __swiftcall PommesMUXContextManager.companionNameFromUserAgentString(_:)(Swift::String a1)
{
  void *object;
  uint64_t countAndFlagsBits;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint64_t v10;
  uint64_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint8_t *v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  Swift::String_optional result;
  _QWORD v21[2];
  uint64_t v22[2];

  object = a1._object;
  countAndFlagsBits = a1._countAndFlagsBits;
  v3 = type metadata accessor for CharacterSet();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = swift_slowAlloc();
    v21[0] = v3;
    v11 = countAndFlagsBits;
    v12 = (uint8_t *)v10;
    v13 = swift_slowAlloc();
    v22[0] = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    v21[1] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, (unint64_t)object, v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v8, v9, "Getting companion name from UAString: %s", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    v14 = v12;
    countAndFlagsBits = v11;
    v3 = v21[0];
    MEMORY[0x1C3BBFF64](v14, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v22[0] = countAndFlagsBits;
  v22[1] = (uint64_t)object;
  CharacterSet.init(charactersIn:)();
  lazy protocol witness table accessor for type String and conformance String();
  v15 = (_QWORD *)StringProtocol.components(separatedBy:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  if (v15[2] < 3uLL)
  {
    v16 = 0;
    v17 = 0;
  }
  else
  {
    v16 = v15[6];
    v17 = (void *)v15[7];
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  v18 = v16;
  v19 = v17;
  result.value._object = v19;
  result.value._countAndFlagsBits = v18;
  return result;
}

id *PommesMUXContextManager.deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PommesMUXContextManager.__deallocating_deinit()
{
  id *v0;

  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t outlined init with take of (key: UserID, value: SAHomeMemberInfo)?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: UserID, value: SAHomeMemberInfo)?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1C23BF314()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C23BF338()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UserID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UserID() - 8) + 80);
  closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(a1, *(_QWORD *)(v1 + 16), *(void **)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

uint64_t outlined destroy of DispatchTime?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1C23BF434@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C23BF464(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 128);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t initializeBufferWithCopyOfBuffer for MUXUserInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

void destroy for MUXUserInfo(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

}

_QWORD *initializeWithCopy for MUXUserInfo(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  id v7;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  v6 = (void *)a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v7 = v6;
  return a1;
}

_QWORD *assignWithCopy for MUXUserInfo(_QWORD *a1, _QWORD *a2)
{
  void *v4;
  void *v5;
  id v6;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v4 = (void *)a2[6];
  v5 = (void *)a1[6];
  a1[6] = v4;
  v6 = v4;

  return a1;
}

__n128 __swift_memcpy56_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MUXUserInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  v5 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v6 = *(void **)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);

  return a1;
}

uint64_t getEnumTagSinglePayload for MUXUserInfo(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 56))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MUXUserInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 56) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 56) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for MUXUserInfo()
{
  return &type metadata for MUXUserInfo;
}

ValueMetadata *type metadata accessor for MUXContext()
{
  return &type metadata for MUXContext;
}

uint64_t type metadata accessor for PommesMUXContextManager()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesMUXContextManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesMUXContextManager.cachedContext.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of PommesMUXContextManager.cachedContext.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PommesMUXContextManager.cachedContext.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of PommesMUXContextManager.__allocating_init(multiUserConnection:isMultiUserSupported:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of PommesMUXContextManager.cacheWithMUXContextMessage(msg:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of PommesMUXContextManager.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))() & 1;
}

uint64_t dispatch thunk of PommesMUXContextManager.fetch(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of PommesMUXContextManager.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PommesMUXContextManager.companionNameFromUserAgentString(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t sub_1C23BF7E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v1 = type metadata accessor for UserID();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for UserID() - 8) + 80);
  closure #1 in closure #1 in PommesMUXContextManager.cacheWithMUXContextMessage(msg:)(*(_QWORD *)(v0 + 16), v0 + 24, v0 + ((v1 + 80) & ~v1));
}

uint64_t sub_1C23BF8A8()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed () -> ()()
{
  uint64_t v0;

  return implicit closure #1 in OSLogInterpolation.appendInterpolation(_:align:privacy:)(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t outlined consume of (@escaping @callee_guaranteed () -> ())?(uint64_t result)
{
  if (result)
    return swift_release();
  return result;
}

uint64_t outlined retain of MUXUserInfo(uint64_t a1)
{
  void *v2;
  id v3;

  v2 = *(void **)(a1 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v3 = v2;
  return a1;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioDecade.toString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  uint64_t v9;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioDecade();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  result = 0;
  if (v6 != *MEMORY[0x1E0D6E3B8] && v6 != *MEMORY[0x1E0D6E418])
  {
    result = 7548978;
    if (v6 != *MEMORY[0x1E0D6E3C0])
    {
      if (v6 == *MEMORY[0x1E0D6E3C8])
      {
        return 7548979;
      }
      else if (v6 == *MEMORY[0x1E0D6E3D0])
      {
        return 7548980;
      }
      else if (v6 == *MEMORY[0x1E0D6E3D8])
      {
        return 7548981;
      }
      else if (v6 == *MEMORY[0x1E0D6E3E0])
      {
        return 7548982;
      }
      else if (v6 == *MEMORY[0x1E0D6E3E8])
      {
        return 7548983;
      }
      else if (v6 == *MEMORY[0x1E0D6E3F0])
      {
        return 7548984;
      }
      else if (v6 == *MEMORY[0x1E0D6E3F8])
      {
        return 7548985;
      }
      else
      {
        result = 0x7330303032;
        if (v6 != *MEMORY[0x1E0D6E400])
        {
          if (v6 == *MEMORY[0x1E0D6E408])
          {
            return 0x7330313032;
          }
          else if (v6 == *MEMORY[0x1E0D6E410])
          {
            return 0x7330323032;
          }
          else
          {
            (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
            return 0;
          }
        }
      }
    }
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioRadioType.toString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioRadioType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  result = 0;
  if (v6 != *MEMORY[0x1E0D6EC38])
  {
    if (v6 == *MEMORY[0x1E0D6EC18])
    {
      return 28001;
    }
    else if (v6 == *MEMORY[0x1E0D6EC20])
    {
      return 28006;
    }
    else if (v6 == *MEMORY[0x1E0D6EC28])
    {
      return 25704;
    }
    else if (v6 == *MEMORY[0x1E0D6EC40])
    {
      return 0x74696C6C65746173;
    }
    else if (v6 == *MEMORY[0x1E0D6EC30])
    {
      return 6447460;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_RequestedMediaType.toString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 == *MEMORY[0x1E0D6F580])
    return 0x6E776F6E6B6E75;
  if (v6 == *MEMORY[0x1E0D6F588])
    return 0x7473696C79616C70;
  if (v6 == *MEMORY[0x1E0D6F570])
    return 0x74736163646F70;
  if (v6 == *MEMORY[0x1E0D6F538])
    return 0x636973756DLL;
  if (v6 == *MEMORY[0x1E0D6F4D8])
    return 0x646956636973756DLL;
  if (v6 == *MEMORY[0x1E0D6F590])
    return 0x6F6F426F69647561;
  if (v6 == *MEMORY[0x1E0D6F540])
    return 0x6F65646976;
  if (v6 == *MEMORY[0x1E0D6F568])
    return 0x5573656E757469;
  if (v6 == *MEMORY[0x1E0D6F4E0])
    return 0x74616C69706D6F63;
  if (v6 == *MEMORY[0x1E0D6F528])
    return 0x6D75626C61;
  if (v6 == *MEMORY[0x1E0D6F548])
    return 0x747369747261;
  if (v6 == *MEMORY[0x1E0D6F558])
    return 0x776F68537674;
  if (v6 == *MEMORY[0x1E0D6F598])
    return 0x6F68536F69646172;
  if (v6 == *MEMORY[0x1E0D6F518])
    return 2003789939;
  if (v6 == *MEMORY[0x1E0D6F4E8])
    return 0x6174536F69646172;
  if (v6 == *MEMORY[0x1E0D6F4F8])
    return 0x5374736163646F70;
  if (v6 == *MEMORY[0x1E0D6F578])
    return 0x6E6F6974617473;
  if (v6 == *MEMORY[0x1E0D6F4F0])
    return 0x616C50636973756DLL;
  if (v6 == *MEMORY[0x1E0D6F560])
    return 0x65646F73697065;
  if (v6 == *MEMORY[0x1E0D6F550])
    return 0x656C676E6973;
  if (v6 == *MEMORY[0x1E0D6F500])
    return 28773;
  if (v6 == *MEMORY[0x1E0D6F508])
    return 28780;
  if (v6 == *MEMORY[0x1E0D6F520])
    return 1735290739;
  if (v6 == *MEMORY[0x1E0D6F530])
    return 0x65726E6567;
  if (v6 == *MEMORY[0x1E0D6F510])
    return 1937204590;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return 0;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioSort.toString.getter()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t result;
  uint64_t v8;

  v1 = v0;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioSort();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  result = 0;
  if (v6 != *MEMORY[0x1E0D6E0A0])
  {
    if (v6 == *MEMORY[0x1E0D6E0D8])
    {
      return 0x6E776F6E6B6E75;
    }
    else if (v6 == *MEMORY[0x1E0D6E0D0])
    {
      return 0x72616C75706F70;
    }
    else if (v6 == *MEMORY[0x1E0D6E0F0])
    {
      return 0x616C75706F706E75;
    }
    else if (v6 == *MEMORY[0x1E0D6E0A8])
    {
      return 1953719650;
    }
    else if (v6 == *MEMORY[0x1E0D6E0B0])
    {
      return 0x7473726F77;
    }
    else if (v6 == *MEMORY[0x1E0D6E0B8])
    {
      return 0x74736577656ELL;
    }
    else if (v6 == *MEMORY[0x1E0D6E0C0])
    {
      return 0x747365646C6FLL;
    }
    else if (v6 == *MEMORY[0x1E0D6E0C8])
    {
      return 0x74736574746F68;
    }
    else if (v6 == *MEMORY[0x1E0D6E0E8])
    {
      return 0x6572636F6964656DLL;
    }
    else if (v6 == *MEMORY[0x1E0D6E0E0])
    {
      return 0x7473657461657267;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      return 0;
    }
  }
  return result;
}

uint64_t Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequencyStr.getter()
{
  double v0;

  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
  if (v0 < 0.01)
    return 0;
  Apple_Parsec_Siri_V2alpha_AudioUnderstanding.radioStationFrequency.getter();
  return Double.description.getter();
}

void *static OnScreenContextType.allCases.getter()
{
  return &outlined read-only object #0 of static OnScreenContextType.allCases.getter;
}

uint64_t OnScreenContextType.USOEntityBuilder.getter(char a1)
{
  if ((a1 & 1) != 0)
  {
    type metadata accessor for UsoEntityBuilder_common_Uri();
    swift_allocObject();
    return UsoEntityBuilder_common_Uri.init()();
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_App();
    swift_allocObject();
    return UsoEntityBuilder_common_App.init()();
  }
}

uint64_t OnScreenContextType.requiresDomainAffinityTranslation.getter()
{
  return 1;
}

uint64_t OnScreenContextType.domainAffinityKVStore.getter(char a1)
{
  uint64_t v1;
  uint64_t v2;

  if ((a1 & 1) != 0)
    v1 = 0x6E65657263536E6FLL;
  else
    v1 = 0xD000000000000013;
  type metadata accessor for DomainAffinityKVStoreManager();
  v2 = static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t OnScreenContextType.rawValue.getter(char a1)
{
  if ((a1 & 1) != 0)
    return 0x6E65657263536E6FLL;
  else
    return 0xD000000000000013;
}

Swift::String __swiftcall OnScreenContextType.normalize(_:)(Swift::String a1)
{
  char v1;
  char v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  Swift::String v6;
  uint64_t countAndFlagsBits;
  void *object;
  uint64_t v9;
  void *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  Swift::String result;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  Swift::String v31;

  v2 = v1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = String.lowercased()();
  countAndFlagsBits = v6._countAndFlagsBits;
  object = v6._object;
  if ((v2 & 1) != 0)
  {
    URL.init(string:)();
    v12 = type metadata accessor for URL();
    v13 = *(_QWORD *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v5, 1, v12) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v5, &demangling cache variable for type metadata for URL?);
    }
    else
    {
      v14 = URL.host.getter();
      v16 = v15;
      (*(void (**)(char *, uint64_t))(v13 + 8))(v5, v12);
      if (v16)
      {
        swift_bridgeObjectRelease();
        countAndFlagsBits = v14;
        object = v16;
      }
    }
    v31._countAndFlagsBits = countAndFlagsBits;
    v31._object = object;
    v29 = 11885;
    v30 = 0xE200000000000000;
    v27 = 0;
    v28 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v17 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v19 = v18;
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = v17;
    v31._object = v19;
    v29 = 779581303;
    v30 = 0xE400000000000000;
    v27 = 0;
    v28 = 0xE000000000000000;
    v20 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v22 = v21;
    swift_bridgeObjectRelease();
    v31._countAndFlagsBits = v20;
    v31._object = v22;
    v29 = 1836016430;
    v30 = 0xE400000000000000;
    v27 = 0;
    v28 = 0xE000000000000000;
    v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v11 = v23;
  }
  else
  {
    v31 = v6;
    v29 = 778923875;
    v30 = 0xE400000000000000;
    v27 = 0;
    v28 = 0xE000000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v11 = v10;
  }
  swift_bridgeObjectRelease();
  v24 = v9;
  v25 = v11;
  result._object = v25;
  result._countAndFlagsBits = v24;
  return result;
}

uint64_t OnScreenContextType.GeneratedClientEntity.clientEntity.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;

  v3 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 16))(a1, v1, v3);
}

uint64_t OnScreenContextType.GeneratedClientEntity.identifier.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OnScreenContextType.GeneratedClientEntity() + 20));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t OnScreenContextType.GeneratedClientEntity.value.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + *(int *)(type metadata accessor for OnScreenContextType.GeneratedClientEntity() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

double OnScreenContextType.GeneratedClientEntity.score.getter()
{
  uint64_t v0;

  return *(double *)(v0 + *(int *)(type metadata accessor for OnScreenContextType.GeneratedClientEntity() + 28));
}

int *OnScreenContextType.GeneratedClientEntity.init(clientEntity:identifier:value:score:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>, double a7@<D0>)
{
  uint64_t v14;
  int *result;
  _QWORD *v16;
  _QWORD *v17;

  v14 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 32))(a6, a1, v14);
  result = (int *)type metadata accessor for OnScreenContextType.GeneratedClientEntity();
  v16 = (_QWORD *)(a6 + result[5]);
  *v16 = a2;
  v16[1] = a3;
  v17 = (_QWORD *)(a6 + result[6]);
  *v17 = a4;
  v17[1] = a5;
  *(double *)(a6 + result[7]) = a7;
  return result;
}

uint64_t OnScreenContextType.generateClientEntity(context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  Swift::String v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  float v26;
  float v27;
  uint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  os_log_type_t v45;
  _BOOL4 v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  NSObject *v53;
  os_log_type_t v54;
  uint8_t *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v68;
  uint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  double v77;
  uint64_t v78;
  int *v79;
  uint64_t *v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  char *v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  double v105;
  uint64_t v106;
  unint64_t v107;

  v99 = a4;
  v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v8 = *(_QWORD *)(v7 - 8);
  v93 = v7;
  v94 = v8;
  MEMORY[0x1E0C80A78](v7);
  v92 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v95 = *(_QWORD *)(v97 - 8);
  MEMORY[0x1E0C80A78](v97);
  v96 = (char *)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)&v82 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UsoIdentifier();
  v100 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = a3 & 1;
  if ((a3 & 1) != 0)
    v18 = 0x6E65657263536E6FLL;
  else
    v18 = 0xD000000000000013;
  if ((a3 & 1) != 0)
    v19 = 0xEB00000000495255;
  else
    v19 = 0x80000001C2501B90;
  v106 = v18;
  v107 = v19;
  v20._countAndFlagsBits = 0x6E69616D6F44;
  v20._object = (void *)0xE600000000000000;
  String.append(_:)(v20);
  swift_bridgeObjectRetain();
  v101 = v16;
  UsoIdentifier.init(value:appBundleId:namespace:)();
  v105 = 1.0;
  type metadata accessor for DomainAffinityKVStoreManager();
  v98 = v18;
  v21 = static DomainAffinityKVStoreManager.domainAffinityKVStore(name:)(v18);
  swift_bridgeObjectRelease();
  v22 = swift_allocObject();
  *(_BYTE *)(v22 + 16) = v17;
  v23 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t (*)(Swift::String), uint64_t))(*(_QWORD *)v21 + 152))(a1, a2, partial apply for implicit closure #2 in implicit closure #1 in OnScreenContextType.generateClientEntity(context:), v22);
  v25 = v24;
  v27 = v26;
  swift_release();
  swift_release();
  if (!v25)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v29 = type metadata accessor for Logger();
    __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
    v30 = Logger.logObject.getter();
    v31 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v30, v31))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = v14;
      v34 = swift_slowAlloc();
      v102 = v34;
      *(_DWORD *)v32 = 136315138;
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v19, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v30, v31, "[OnScreenContextUtils][%s] Failed to create client entity due to domain affinity translation failure", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v34, -1, -1);
      MEMORY[0x1C3BBFF64](v32, -1, -1);

      (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v33);
    }
    else
    {

      (*(void (**)(char *, uint64_t))(v100 + 8))(v101, v14);
    }
    goto LABEL_28;
  }
  v105 = v27;
  if (v17)
  {
    type metadata accessor for UsoEntityBuilder_common_Uri();
    swift_allocObject();
    v28 = UsoEntityBuilder_common_Uri.init()();
  }
  else
  {
    type metadata accessor for UsoEntityBuilder_common_App();
    swift_allocObject();
    v28 = UsoEntityBuilder_common_App.init()();
  }
  v35 = v28;
  v36 = v101;
  v102 = v23;
  v103 = v25;
  swift_bridgeObjectRetain();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_bridgeObjectRelease();
  v102 = v23;
  v103 = v25;
  swift_bridgeObjectRetain();
  dispatch thunk of UsoEntityBuilder.setAsHelper<A>(attributeName:value:)();
  swift_bridgeObjectRelease();
  dispatch thunk of UsoBuilder.addUsoIdentifier(usoIdentifier:)();
  v37 = MEMORY[0x1C3BBCEB0](v35);
  if (!v37)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v52 = type metadata accessor for Logger();
    __swift_project_value_buffer(v52, (uint64_t)static Logger.pommes);
    v53 = Logger.logObject.getter();
    v54 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v53, v54))
    {
      v55 = (uint8_t *)swift_slowAlloc();
      v56 = v14;
      v57 = swift_slowAlloc();
      v102 = v57;
      *(_DWORD *)v55 = 136315138;
      v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v19, &v102);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v53, v54, "[OnScreenContextUtils][%s] Failed to create client entity due to USO entity conversion failure", v55, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v57, -1, -1);
      MEMORY[0x1C3BBFF64](v55, -1, -1);
      swift_release();

      (*(void (**)(char *, uint64_t))(v100 + 8))(v36, v56);
    }
    else
    {
      swift_release();

      (*(void (**)(char *, uint64_t))(v100 + 8))(v36, v14);
    }
LABEL_28:
    v62 = type metadata accessor for OnScreenContextType.GeneratedClientEntity();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v62 - 8) + 56))(v99, 1, 1, v62);
  }
  v38 = v37;
  v91 = v19;
  v39 = static UsoBuilderConversionUtils.convertEntityToGraph(entity:)();
  v40 = type metadata accessor for UsoBuilderOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v40 - 8) + 56))(v13, 1, 1, v40);
  v89 = v38;
  v41 = static UsoBuilderConversionUtils.convertEntityToRootedEntityGraph(entity:options:)();
  outlined destroy of MediaUserStateCenter?((uint64_t)v13, (uint64_t *)&demangling cache variable for type metadata for UsoBuilderOptions?);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v42 = type metadata accessor for Logger();
  v43 = __swift_project_value_buffer(v42, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v87 = v43;
  v44 = Logger.logObject.getter();
  v45 = static os_log_type_t.debug.getter();
  v46 = os_log_type_enabled(v44, v45);
  v90 = v14;
  v86 = v23;
  v88 = v41;
  if (v46)
  {
    v47 = swift_slowAlloc();
    v48 = swift_slowAlloc();
    v102 = v48;
    *(_DWORD *)v47 = 136315394;
    v85 = v35;
    v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v91, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v47 + 12) = 2080;
    v49 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
    v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v50, &v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v44, v45, "[OnScreenContextUtils][%s] Created USO graph for client entity: %s", (uint8_t *)v47, 0x16u);
    swift_arrayDestroy();
    v51 = v48;
    v36 = v101;
    MEMORY[0x1C3BBFF64](v51, -1, -1);
    MEMORY[0x1C3BBFF64](v47, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v58 = v96;
  static UsoGraphProtoWriter.toSwiftProtobuf(graph:vocabManager:)();
  v59 = v97;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F270], MEMORY[0x1E0D9F238]);
  v60 = Message.serializedData(partial:)();
  v61 = v91;
  v83 = v64;
  v84 = v60;
  v85 = v39;
  (*(void (**)(char *, uint64_t))(v95 + 8))(v58, v59);
  v65 = Logger.logObject.getter();
  v66 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v65, v66))
  {
    v68 = (uint8_t *)swift_slowAlloc();
    v69 = swift_slowAlloc();
    v102 = v69;
    *(_DWORD *)v68 = 136315138;
    v104 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v98, v61, &v102);
    v36 = v101;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v65, v66, "[OnScreenContextUtils][%s] Successfully created client entity", v68, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v69, -1, -1);
    MEMORY[0x1C3BBFF64](v68, -1, -1);
  }

  v71 = v92;
  v70 = v93;
  MEMORY[0x1E0C80A78](v72);
  v73 = v84;
  v74 = v83;
  *(&v82 - 4) = v84;
  *(&v82 - 3) = v74;
  *(&v82 - 2) = (uint64_t)&v105;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientEntity and conformance Apple_Parsec_Siri_Context_ClientEntity, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E758], MEMORY[0x1E0D6E708]);
  static Message.with(_:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v100 + 8))(v36, v90);
  outlined consume of Data._Representation(v73, v74);
  v75 = v106;
  v76 = v107;
  v77 = v105;
  v78 = v99;
  (*(void (**)(uint64_t, char *, uint64_t))(v94 + 32))(v99, v71, v70);
  v79 = (int *)type metadata accessor for OnScreenContextType.GeneratedClientEntity();
  v80 = (uint64_t *)(v78 + v79[5]);
  *v80 = v75;
  v80[1] = v76;
  v81 = (uint64_t *)(v78 + v79[6]);
  *v81 = v86;
  v81[1] = v25;
  *(double *)(v78 + v79[7]) = v77;
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v79 - 1) + 56))(v78, 0, 1, v79);
}

uint64_t OnScreenContextType.parseClientEntity(clientEntity:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  char v37;
  uint64_t v38;
  NSObject *v39;
  os_log_type_t v40;
  int v41;
  uint64_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint8_t *v47;
  uint64_t v48;
  int *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int *v58;
  uint64_t v59;
  uint8_t *v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  uint64_t v64;
  uint64_t v65;
  int *v66;
  uint64_t v67;
  _OWORD v68[2];
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  LODWORD(v66) = a2;
  v67 = a3;
  v4 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v59 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v59 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Apple_Parsec_Siri_Context_ClientEntity?(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    v70 = Apple_Parsec_Siri_Context_ClientEntity.usoGraph.getter();
    v71 = v19;
    v69 = 0;
    memset(v68, 0, sizeof(v68));
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F270], MEMORY[0x1E0D9F238]);
    Message.init<A>(contiguousBytes:extensions:partial:options:)();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
    (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    if (static UsoConversionUtils.extractFirstEntityFromGraph(graph:)())
    {
      v30 = UsoEntity.attributes.getter();
      if (*(_QWORD *)(v30 + 16)
        && (v31 = specialized __RawDictionaryStorage.find<A>(_:)(1701667182, 0xE400000000000000), (v32 & 1) != 0))
      {
        v33 = *(_QWORD *)(*(_QWORD *)(v30 + 56) + 8 * v31);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        if ((v33 & 0xC000000000000001) != 0)
        {
          v34 = MEMORY[0x1C3BBF3F4](0, v33);
        }
        else
        {
          if (!*(_QWORD *)((v33 & 0xFFFFFFFFFFFFF8) + 0x10))
          {
            __break(1u);
            goto LABEL_44;
          }
          v34 = *(_QWORD *)(v33 + 32);
          swift_retain();
        }
        swift_bridgeObjectRelease();
        v35 = UsoEntity.attributes.getter();
        if (*(_QWORD *)(v35 + 16))
        {
          v36 = specialized __RawDictionaryStorage.find<A>(_:)(0x65756C6176, 0xE500000000000000);
          if ((v37 & 1) != 0)
          {
            v64 = v34;
            v30 = *(_QWORD *)(*(_QWORD *)(v35 + 56) + 8 * v36);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRelease();
            if ((v30 & 0xC000000000000001) == 0)
            {
              if (!*(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10))
              {
                __break(1u);
                goto LABEL_46;
              }
              v65 = *(_QWORD *)(v30 + 32);
              swift_retain();
LABEL_26:
              swift_bridgeObjectRelease();
              if (one-time initialization token for pommes == -1)
              {
LABEL_27:
                v38 = type metadata accessor for Logger();
                __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
                v39 = Logger.logObject.getter();
                v40 = static os_log_type_t.debug.getter();
                v41 = v40;
                if (os_log_type_enabled(v39, v40))
                {
                  v63 = v39;
                  v42 = swift_slowAlloc();
                  LODWORD(v62) = v41;
                  v43 = (uint8_t *)v42;
                  v44 = swift_slowAlloc();
                  v61 = v44;
                  v60 = v43;
                  *(_DWORD *)v43 = 136315138;
                  *(_QWORD *)&v68[0] = v44;
                  if ((v66 & 1) != 0)
                    v45 = 0x6E65657263536E6FLL;
                  else
                    v45 = 0xD000000000000013;
                  if ((v66 & 1) != 0)
                    v46 = 0xEB00000000495255;
                  else
                    v46 = 0x80000001C2501B90;
                  v66 = (int *)(v43 + 4);
                  v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, (uint64_t *)v68);
                  UnsafeMutableRawBufferPointer.copyMemory(from:)();
                  swift_bridgeObjectRelease();
                  v47 = v60;
                  _os_log_impl(&dword_1C2356000, (os_log_t)v63, (os_log_type_t)v62, "[OnScreenContextUtils][%s] Successfully parsed client entity", v60, 0xCu);
                  v48 = v61;
                  swift_arrayDestroy();
                  MEMORY[0x1C3BBFF64](v48, -1, -1);
                  MEMORY[0x1C3BBFF64](v47, -1, -1);

                }
                else
                {

                }
                v49 = (int *)__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (usoIdentifier: UsoIdentifier, usoNameAttribute: UsoValue, usoValueAttribute: UsoValue, score: Double));
                v50 = v49[12];
                v61 = v49[16];
                v62 = v50;
                v66 = v49;
                v63 = (id)v49[20];
                result = UsoEntity.usoIdentifiers.getter();
                if (*(_QWORD *)(result + 16))
                {
                  v51 = result;
                  v52 = type metadata accessor for UsoIdentifier();
                  v53 = v67;
                  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)(v52 - 8) + 16))(v67, v51+ ((*(unsigned __int8 *)(*(_QWORD *)(v52 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v52 - 8) + 80)), v52);
                  swift_bridgeObjectRelease();
                  v54 = v65;
                  *(_QWORD *)(v53 + v62) = v64;
                  *(_QWORD *)(v53 + v61) = v54;
                  v65 = v54;
                  swift_retain();
                  swift_retain();
                  Apple_Parsec_Siri_Context_ClientEntity.score.getter();
                  v56 = v55;
                  swift_release();
                  swift_release();
                  swift_release();
                  swift_release();
                  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
                  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
                  v58 = v66;
                  v57 = v67;
                  *(_QWORD *)((char *)v63 + v67) = v56;
                  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, int *))(*((_QWORD *)v58 - 1) + 56))(v57, 0, 1, v58);
                }
                else
                {
                  __break(1u);
                }
                return result;
              }
LABEL_46:
              swift_once();
              goto LABEL_27;
            }
LABEL_44:
            v65 = MEMORY[0x1C3BBF3F4](0, v30);
            goto LABEL_26;
          }
        }
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_release();
        swift_bridgeObjectRelease();
      }
    }
    swift_release();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    goto LABEL_4;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
LABEL_4:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    *(_DWORD *)v23 = 136315138;
    *(_QWORD *)&v68[0] = v24;
    if ((v66 & 1) != 0)
      v25 = 0x6E65657263536E6FLL;
    else
      v25 = 0xD000000000000013;
    if ((v66 & 1) != 0)
      v26 = 0xEB00000000495255;
    else
      v26 = 0x80000001C2501B90;
    v70 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v25, v26, (uint64_t *)v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v21, v22, "[OnScreenContextUtils][%s] Failed to parse client entity", v23, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v24, -1, -1);
    MEMORY[0x1C3BBFF64](v23, -1, -1);
  }

  v27 = v67;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (usoIdentifier: UsoIdentifier, usoNameAttribute: UsoValue, usoValueAttribute: UsoValue, score: Double));
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v27, 1, 1, v28);
}

SiriInformationSearch::OnScreenContextType_optional __swiftcall OnScreenContextType.init(rawValue:)(Swift::String rawValue)
{
  void *object;
  Swift::String v2;
  Swift::Int v3;
  SiriInformationSearch::OnScreenContextType_optional v4;

  object = rawValue._object;
  v2._countAndFlagsBits = rawValue._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OnScreenContextType.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 == 1)
    v4.value = SiriInformationSearch_OnScreenContextType_onScreenURI;
  else
    v4.value = SiriInformationSearch_OnScreenContextType_unknownDefault;
  if (v3)
    return v4;
  else
    return 0;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance OnScreenContextType(_BYTE *a1, _BYTE *a2)
{
  BOOL v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  char v8;

  v2 = *a1 == 0;
  if (*a1)
    v3 = 0x6E65657263536E6FLL;
  else
    v3 = 0xD000000000000013;
  if (v2)
    v4 = 0x80000001C2501B90;
  else
    v4 = 0xEB00000000495255;
  if (*a2)
    v5 = 0x6E65657263536E6FLL;
  else
    v5 = 0xD000000000000013;
  if (*a2)
    v6 = 0xEB00000000495255;
  else
    v6 = 0x80000001C2501B90;
  if (v3 == v5 && v4 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance OnScreenContextType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance OnScreenContextType()
{
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance OnScreenContextType()
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance OnScreenContextType@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3;
  uint64_t result;
  char v5;

  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of OnScreenContextType.init(rawValue:), *a1);
  result = swift_bridgeObjectRelease();
  if (v3 == 1)
    v5 = 1;
  else
    v5 = 2;
  if (!v3)
    v5 = 0;
  *a2 = v5;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance OnScreenContextType(unint64_t *a1@<X8>)
{
  _BYTE *v1;
  unint64_t v2;
  unint64_t v3;

  v2 = 0xD000000000000013;
  if (*v1)
    v2 = 0x6E65657263536E6FLL;
  v3 = 0x80000001C2501B90;
  if (*v1)
    v3 = 0xEB00000000495255;
  *a1 = v2;
  a1[1] = v3;
}

void protocol witness for static CaseIterable.allCases.getter in conformance OnScreenContextType(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance OnScreenContextType;
}

uint64_t sub_1C23C2200()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in OnScreenContextType.generateClientEntity(context:)(Swift::String a1)
{
  return OnScreenContextType.normalize(_:)(a1)._countAndFlagsBits;
}

uint64_t partial apply for closure #1 in OnScreenContextType.generateClientEntity(context:)()
{
  uint64_t v0;

  outlined copy of Data._Representation(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  Apple_Parsec_Siri_Context_ClientEntity.usoGraph.setter();
  return Apple_Parsec_Siri_Context_ClientEntity.score.setter();
}

uint64_t outlined init with copy of Apple_Parsec_Siri_Context_ClientEntity?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_Context_ClientEntity?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, MEMORY[0x1E0D6F5B8]);
}

{
  uint64_t v1;
  uint64_t v2;
  Swift::Int v4;

  v2 = v1;
  v4 = AnyHashable._rawHashValue(seed:)(*(_QWORD *)(v2 + 40));
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v4);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E38]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, (unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, MEMORY[0x1E0DA1E40]);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for PommesCandidateId();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D988D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId, (uint64_t (*)(uint64_t))MEMORY[0x1E0D988D8], MEMORY[0x1E0D988E8]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, (unint64_t *)&lazy protocol witness table cache variable for type PommesCandidateId and conformance PommesCandidateId, MEMORY[0x1E0D988F0]);
}

{
  Swift::Int v2;

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v2);
}

{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v2 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
  v3 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, v3, v2, &lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, MEMORY[0x1E0D6E9D8]);
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, uint64_t a2)
{
  Swift::Int v4;

  Hasher.init(_seed:)();
  String.hash(into:)();
  v4 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1, a2, v4);
}

unint64_t lazy protocol witness table accessor for type OnScreenContextType and conformance OnScreenContextType()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type OnScreenContextType and conformance OnScreenContextType;
  if (!lazy protocol witness table cache variable for type OnScreenContextType and conformance OnScreenContextType)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for OnScreenContextType, &type metadata for OnScreenContextType);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnScreenContextType and conformance OnScreenContextType);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [OnScreenContextType] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [OnScreenContextType] and conformance [A];
  if (!lazy protocol witness table cache variable for type [OnScreenContextType] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [OnScreenContextType]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [OnScreenContextType] and conformance [A]);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for OnScreenContextType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C23C24A0 + 4 * byte_1C24FB1C5[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C23C24D4 + 4 * byte_1C24FB1C0[v4]))();
}

uint64_t sub_1C23C24D4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23C24DC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23C24E4);
  return result;
}

uint64_t sub_1C23C24F0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23C24F8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C23C24FC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23C2504(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OnScreenContextType()
{
  return &type metadata for OnScreenContextType;
}

uint64_t *initializeBufferWithCopyOfBuffer for OnScreenContextType.GeneratedClientEntity(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = a3[5];
    v9 = a3[6];
    v10 = (uint64_t *)((char *)a1 + v8);
    v11 = (uint64_t *)((char *)a2 + v8);
    v12 = v11[1];
    *v10 = *v11;
    v10[1] = v12;
    v13 = (uint64_t *)((char *)a1 + v9);
    v14 = (uint64_t *)((char *)a2 + v9);
    v15 = v14[1];
    *v13 = *v14;
    v13[1] = v15;
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for OnScreenContextType.GeneratedClientEntity(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = a3[5];
  v8 = a3[6];
  v9 = (_QWORD *)(a1 + v7);
  v10 = (_QWORD *)(a2 + v7);
  v11 = v10[1];
  *v9 = *v10;
  v9[1] = v11;
  v12 = (_QWORD *)(a1 + v8);
  v13 = (_QWORD *)(a2 + v8);
  v14 = v13[1];
  *v12 = *v13;
  v12[1] = v14;
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (_QWORD *)(a2 + v7);
  *v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v10 = a3[6];
  v11 = (_QWORD *)(a1 + v10);
  v12 = (_QWORD *)(a2 + v10);
  *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t initializeWithTake for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;

  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for OnScreenContextType.GeneratedClientEntity(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = a3[5];
  v8 = (_QWORD *)(a1 + v7);
  v9 = (uint64_t *)(a2 + v7);
  v11 = *v9;
  v10 = v9[1];
  *v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  v12 = a3[6];
  v13 = (_QWORD *)(a1 + v12);
  v14 = (uint64_t *)(a2 + v12);
  v16 = *v14;
  v15 = v14[1];
  *v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  *(_QWORD *)(a1 + a3[7]) = *(_QWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnScreenContextType.GeneratedClientEntity()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23C2880(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 20) + 8);
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for OnScreenContextType.GeneratedClientEntity()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23C290C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for OnScreenContextType.GeneratedClientEntity()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_Context_ClientEntity();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Swift::Int v2;

  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 1, v2);
}

{
  Swift::Int v2;

  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v2 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(a1 & 1, v2);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1)
{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))CommonAudio.Decade.rawValue.getter, (uint64_t (*)(uint64_t, Swift::Int))specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

{
  return specialized __RawDictionaryStorage.find<A>(_:)(a1, (void (*)(uint64_t))CommonAudio.MediaType.rawValue.getter, specialized __RawDictionaryStorage.find<A>(_:hashValue:));
}

void specialized __RawDictionaryStorage.find<A>(_:)(char a1)
{
  Hasher.init(_seed:)();
  __asm { BR              X10 }
}

uint64_t sub_1C23C2BCC()
{
  uint64_t v0;
  Swift::Int v1;

  String.hash(into:)();
  swift_bridgeObjectRelease();
  v1 = Hasher._finalize()();
  return specialized __RawDictionaryStorage.find<A>(_:hashValue:)(v0, v1);
}

uint64_t specialized __RawDictionaryStorage.find<A>(_:)(uint64_t a1, void (*a2)(uint64_t), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Swift::Int v5;

  Hasher.init(_seed:)();
  a2(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  v5 = Hasher._finalize()();
  return a3(a1, v5);
}

uint64_t outlined init with copy of AnyHashable(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x1E0DEC198] - 8) + 8))();
  return a1;
}

uint64_t Logger.pommes.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for pommes, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.pommes);
}

uint64_t Signposter.pommes.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for pommes, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.pommes);
}

char **LogConstants.Signpost.search.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.search;
}

char **LogConstants.Signpost.searchPreflight.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.searchPreflight;
}

uint64_t one-time initialization function for pommes(uint64_t a1)
{
  return one-time initialization function for pommes(a1, static Logger.pommes);
}

{
  return one-time initialization function for pommes(a1, static Signposter.pommes, &one-time initialization token for pommes, (uint64_t)static Logger.pommes);
}

void *LogConstants.subsystem.unsafeMutableAddressor()
{
  return &static LogConstants.subsystem;
}

const char *LogConstants.Category.pommes.unsafeMutableAddressor()
{
  return "pommes";
}

uint64_t static Logger.pommes.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for pommes, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.pommes, a1);
}

uint64_t one-time initialization function for music(uint64_t a1)
{
  return one-time initialization function for pommes(a1, static Logger.music);
}

{
  return one-time initialization function for pommes(a1, static Signposter.music, &one-time initialization token for music, (uint64_t)static Logger.music);
}

const char *LogConstants.Category.music.unsafeMutableAddressor()
{
  return "music";
}

uint64_t Logger.music.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for music, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.music);
}

uint64_t static Logger.music.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for music, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.music, a1);
}

uint64_t one-time initialization function for insightRequestSummaryLogger()
{
  uint64_t v0;

  v0 = type metadata accessor for InsightRequestSummaryLogger();
  __swift_allocate_value_buffer(v0, static Logger.insightRequestSummaryLogger);
  __swift_project_value_buffer(v0, (uint64_t)static Logger.insightRequestSummaryLogger);
  return InsightRequestSummaryLogger.init()();
}

uint64_t Logger.insightRequestSummaryLogger.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for insightRequestSummaryLogger, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA4498], (uint64_t)static Logger.insightRequestSummaryLogger);
}

uint64_t static Logger.insightRequestSummaryLogger.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for insightRequestSummaryLogger, (uint64_t (*)(_QWORD))MEMORY[0x1E0DA4498], (uint64_t)static Logger.insightRequestSummaryLogger, a1);
}

uint64_t one-time initialization function for sage(uint64_t a1)
{
  return one-time initialization function for pommes(a1, static Logger.sage);
}

{
  return one-time initialization function for pommes(a1, static Signposter.sage, &one-time initialization token for sage, (uint64_t)static Logger.sage);
}

uint64_t one-time initialization function for pommes(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for Logger();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

const char *LogConstants.Category.sage.unsafeMutableAddressor()
{
  return "sage";
}

uint64_t Logger.sage.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for sage, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.sage);
}

uint64_t static Logger.sage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for sage, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2258], (uint64_t)static Logger.sage, a1);
}

uint64_t static Signposter.pommes.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for pommes, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.pommes, a1);
}

uint64_t one-time initialization function for pommes(uint64_t a1, uint64_t *a2, _QWORD *a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;

  v7 = type metadata accessor for Logger();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v11, a2);
  __swift_project_value_buffer(v11, (uint64_t)a2);
  if (*a3 != -1)
    swift_once();
  v12 = __swift_project_value_buffer(v7, a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  return OSSignposter.init(logger:)();
}

uint64_t Signposter.music.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(one-time initialization token for music, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.music);
}

uint64_t static Signposter.music.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(one-time initialization token for music, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.music, a1);
}

uint64_t one-time initialization function for loc()
{
  uint64_t v0;

  v0 = type metadata accessor for OSSignposter();
  __swift_allocate_value_buffer(v0, static Signposter.loc);
  __swift_project_value_buffer(v0, (uint64_t)static Signposter.loc);
  return OSSignposter.init(subsystem:category:)();
}

void *LogConstants.Category.locationManager.unsafeMutableAddressor()
{
  return &static LogConstants.Category.locationManager;
}

uint64_t Signposter.loc.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for loc, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.loc);
}

uint64_t static Signposter.loc.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for loc, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.loc, a1);
}

uint64_t Signposter.sage.unsafeMutableAddressor()
{
  return Logger.pommes.unsafeMutableAddressor(&one-time initialization token for sage, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.sage);
}

uint64_t Logger.pommes.unsafeMutableAddressor(_QWORD *a1, uint64_t (*a2)(_QWORD), uint64_t a3)
{
  uint64_t v5;

  if (*a1 != -1)
    swift_once();
  v5 = a2(0);
  return __swift_project_value_buffer(v5, a3);
}

uint64_t static Signposter.sage.getter@<X0>(uint64_t a1@<X8>)
{
  return static Logger.pommes.getter(&one-time initialization token for sage, (uint64_t (*)(_QWORD))MEMORY[0x1E0DF2170], (uint64_t)static Signposter.sage, a1);
}

uint64_t static Logger.pommes.getter@<X0>(_QWORD *a1@<X0>, uint64_t (*a2)(_QWORD)@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;

  if (*a1 != -1)
    swift_once();
  v7 = a2(0);
  v8 = __swift_project_value_buffer(v7, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a4, v8, v7);
}

uint64_t OSSignposter.makeSignpostID(from:)(uint64_t a1)
{
  if (a1)
  {
    swift_unknownObjectRetain();
    OSSignposter.logHandle.getter();
    return OSSignpostID.init(log:object:)();
  }
  else
  {
    OSSignposter.logHandle.getter();
    return OSSignpostID.init(log:)();
  }
}

uint64_t SignpostToken.init(name:id:state:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;

  *(_QWORD *)a6 = a1;
  *(_QWORD *)(a6 + 8) = a2;
  *(_BYTE *)(a6 + 16) = a3;
  v9 = type metadata accessor for SignpostToken();
  v10 = a6 + *(int *)(v9 + 20);
  v11 = type metadata accessor for OSSignpostID();
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 32))(v10, a4, v11);
  *(_QWORD *)(a6 + *(int *)(v9 + 24)) = a5;
  return result;
}

uint64_t SignpostToken.name.getter()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

uint64_t SignpostToken.id.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for SignpostToken() + 20);
  v4 = type metadata accessor for OSSignpostID();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t SignpostToken.state.getter()
{
  type metadata accessor for SignpostToken();
  return swift_retain();
}

unint64_t static LogConstants.subsystem.getter()
{
  return 0xD000000000000010;
}

uint64_t static LogConstants.Category.pommes.getter()
{
  return 0x73656D6D6F70;
}

uint64_t static LogConstants.Category.music.getter()
{
  return 0x636973756DLL;
}

uint64_t static LogConstants.Category.locationManager.getter()
{
  return 0x6E6F697461636F6CLL;
}

const char *LogConstants.Category.pommesBridge.unsafeMutableAddressor()
{
  return "PommesBridge";
}

uint64_t static LogConstants.Category.pommesBridge.getter()
{
  return 0x724273656D6D6F50;
}

uint64_t static LogConstants.Category.sage.getter()
{
  return 1701273971;
}

const char *static LogConstants.Signpost.search.getter()
{
  return "search";
}

char **LogConstants.Signpost.searchRemote.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.searchRemote;
}

const char *static LogConstants.Signpost.searchRemote.getter()
{
  return "search.remote";
}

char **LogConstants.Signpost.searchClient.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.searchClient;
}

const char *static LogConstants.Signpost.searchClient.getter()
{
  return "search.client";
}

const char *static LogConstants.Signpost.searchPreflight.getter()
{
  return "search.preflight";
}

char **LogConstants.Signpost.LocationManager.startup.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.LocationManager.startup;
}

const char *static LogConstants.Signpost.LocationManager.startup.getter()
{
  return "locationManager.startup";
}

char **LogConstants.Signpost.LocationManager.geocode.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.LocationManager.geocode;
}

const char *static LogConstants.Signpost.LocationManager.geocode.getter()
{
  return "locationManager.geocode";
}

char **LogConstants.Signpost.Proxy.createQueryContext.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.createQueryContext;
}

const char *static LogConstants.Signpost.Proxy.createQueryContext.getter()
{
  return "proxy.createQueryContext";
}

char **LogConstants.Signpost.Proxy.constructSearchRequest.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.constructSearchRequest;
}

const char *static LogConstants.Signpost.Proxy.constructSearchRequest.getter()
{
  return "proxy.constructSearchRequest";
}

char **LogConstants.Signpost.Proxy.request.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.request;
}

const char *static LogConstants.Signpost.Proxy.request.getter()
{
  return "proxy.request";
}

char **LogConstants.Signpost.Proxy.ampSlice.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.ampSlice;
}

const char *static LogConstants.Signpost.Proxy.ampSlice.getter()
{
  return "proxy.AMPSlice";
}

char **LogConstants.Signpost.Proxy.userVocabSpans.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.Proxy.userVocabSpans;
}

const char *static LogConstants.Signpost.Proxy.userVocabSpans.getter()
{
  return "proxy.userVocabSpans";
}

char **LogConstants.Signpost.TapEngagement.request.unsafeMutableAddressor()
{
  return &static LogConstants.Signpost.TapEngagement.request;
}

const char *static LogConstants.Signpost.TapEngagement.request.getter()
{
  return "tapEngagement.request";
}

uint64_t closure #1 in _globalStringTablePointerOfStaticString(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  if (result)
    *a2 = result;
  else
    __break(1u);
  return result;
}

ValueMetadata *type metadata accessor for Logger()
{
  return &type metadata for Logger;
}

ValueMetadata *type metadata accessor for Signposter()
{
  return &type metadata for Signposter;
}

_QWORD *initializeBufferWithCopyOfBuffer for SignpostToken(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v11 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = *(int *)(a3 + 20);
    v8 = a1 + v7;
    v9 = (uint64_t)a2 + v7;
    v10 = type metadata accessor for OSSignpostID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
    *(_QWORD *)((char *)v4 + *(int *)(a3 + 24)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 24));
  }
  swift_retain();
  return v4;
}

uint64_t assignWithCopy for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for SignpostToken(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(int *)(a3 + 20);
  v7 = a1 + v6;
  v8 = a2 + v6;
  v9 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  *(_QWORD *)(a1 + *(int *)(a3 + 24)) = *(_QWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SignpostToken()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23C3D64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v9;

  v6 = type metadata accessor for OSSignpostID();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24));
  if (v9 >= 0xFFFFFFFF)
    LODWORD(v9) = -1;
  return (v9 + 1);
}

uint64_t storeEnumTagSinglePayload for SignpostToken()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23C3DF0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;

  result = type metadata accessor for OSSignpostID();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + *(int *)(a4 + 20), a2, a2, result);
  *(_QWORD *)(a1 + *(int *)(a4 + 24)) = (a2 - 1);
  return result;
}

uint64_t type metadata completion function for SignpostToken()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for LogConstants()
{
  return &type metadata for LogConstants;
}

ValueMetadata *type metadata accessor for LogConstants.Category()
{
  return &type metadata for LogConstants.Category;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost()
{
  return &type metadata for LogConstants.Signpost;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost.LocationManager()
{
  return &type metadata for LogConstants.Signpost.LocationManager;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost.Proxy()
{
  return &type metadata for LogConstants.Signpost.Proxy;
}

ValueMetadata *type metadata accessor for LogConstants.Signpost.TapEngagement()
{
  return &type metadata for LogConstants.Signpost.TapEngagement;
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t PommesServerFallbackPreferences.__allocating_init(_:)(uint64_t a1)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  return result;
}

uint64_t PommesServerFallbackPreferences.init(_:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return v1;
}

Swift::Bool __swiftcall PommesServerFallbackPreferences.shouldDisableServerFallbackNL(isDomainDirected:)(Swift::Bool isDomainDirected)
{
  uint64_t v1;
  char **v2;

  v2 = &selRef_shouldDisableServerFallbackDomain;
  if (!isDomainDirected)
    v2 = &selRef_shouldDisableServerFallbackNL;
  return objc_msgSend(*(id *)(v1 + 16), *v2);
}

uint64_t PommesServerFallbackPreferences.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PommesServerFallbackPreferences.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:) in conformance PommesServerFallbackPreferences()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))() & 1;
}

uint64_t type metadata accessor for PommesServerFallbackPreferences()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesServerFallbackPreferences()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesServerFallbackPreferences.__allocating_init(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t dispatch thunk of PommesServerFallbackPreferences.shouldDisableServerFallbackNL(isDomainDirected:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFs12LazySequenceVySay32SiriReferenceResolutionDataModel11RRCandidateVGG_AH8RREntityVs5NeverOTg504_s12f90Ontology9UsoEntityC0A17InformationSearchE14resolveFromSRR8rrClient15useSRREntityAPISay0A28ghi6Model8l50VGSg0aoP027RRReferenceResolverProtocol_p_SbtFAjH11K53Vcfu0_32a67697f07dd709dabbe90d955a98a5bfApJTf3nnnpk_nTf1cn_nTm(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v15 = type metadata accessor for RREntity();
  v3 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x1E0DEE9D8];
  if (v6)
  {
    v14 = v1;
    v16 = MEMORY[0x1E0DEE9D8];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    v7 = v16;
    v8 = *(_QWORD *)(type metadata accessor for RRCandidate() - 8);
    v9 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    v10 = *(_QWORD *)(v8 + 72);
    do
    {
      RRCandidate.entity.getter();
      v16 = v7;
      v12 = *(_QWORD *)(v7 + 16);
      v11 = *(_QWORD *)(v7 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v11 > 1, v12 + 1, 1);
        v7 = v16;
      }
      *(_QWORD *)(v7 + 16) = v12 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(_QWORD *)(v3 + 72) * v12, v5, v15);
      v9 += v10;
      --v6;
    }
    while (v6);
  }
  return v7;
}

uint64_t UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(_QWORD *a1, char a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  v4 = a1[3];
  v5 = a1[4];
  v6 = __swift_project_boxed_opaque_existential_1(a1, v4);
  return specialized UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)((uint64_t)v6, a2, v2, v4, v5);
}

uint64_t partial apply for closure #2 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)()
{
  uint64_t v0;

  return closure #1 in UsoEntity.resolveFromSRR(rrClient:useSRREntityAPI:)(*(_QWORD **)(v0 + 16), *(_QWORD *)(v0 + 24), (void (*)(void))MEMORY[0x1E0DA3D08]);
}

uint64_t dispatch thunk of PommesServerFallbackDisabling.shouldDisableServerFallbackNL(isDomainDirected:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

id CNContactStore.fetchMeCards()()
{
  void *v0;
  void *v1;
  Class isa;
  id v3;
  id v4;
  uint64_t v5;
  id v6;
  uint64_t v7;
  id v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  id v18;
  id v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  void *v23;
  id v24;
  id v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  NSObject *v30;
  os_log_type_t v31;
  uint8_t *v32;
  uint64_t v33;
  uint8_t *v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  id v40;
  id v41[2];

  v41[1] = *(id *)MEMORY[0x1E0C80C00];
  v1 = (void *)objc_opt_self();
  isa = (Class)objc_msgSend(v1, sel_descriptorsForRequiredKeys);
  if (!isa)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
    static Array._unconditionallyBridgeFromObjectiveC(_:)();
    isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  v41[0] = 0;
  v3 = objc_msgSend(v0, sel__crossPlatformUnifiedMeContactWithKeysToFetch_error_, isa, v41);

  v4 = v41[0];
  if (v3)
  {
    v5 = one-time initialization token for pommes;
    v6 = v41[0];
    if (v5 != -1)
      swift_once();
    v7 = type metadata accessor for Logger();
    __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
    v8 = v3;
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      v36 = (void *)swift_slowAlloc();
      v41[0] = v36;
      *(_DWORD *)v11 = 136642819;
      v35 = v11 + 4;
      v39 = v8;
      v12 = v8;
      v13 = objc_msgSend(v12, sel_description);
      v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v37 = v1;
      v16 = v15;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v16, (uint64_t *)v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      v1 = v37;
      v8 = v39;
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v9, v10, "Fetched Me card from Contacts: %{sensitive}s", v11, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v36, -1, -1);
      MEMORY[0x1C3BBFF64](v11, -1, -1);

    }
    else
    {

    }
    v18 = objc_msgSend(v1, sel_createSAPersonFromCNContact_, v8, v35);
    if (v18)
    {
      v19 = v18;
      v20 = Logger.logObject.getter();
      v21 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v20, v21))
      {
        v40 = v8;
        v22 = (uint8_t *)swift_slowAlloc();
        v23 = (void *)swift_slowAlloc();
        v41[0] = v23;
        *(_DWORD *)v22 = 136315138;
        v24 = v19;
        v25 = objc_msgSend(v24, sel_description);
        v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v38 = v19;
        v28 = v27;

        v29 = v26;
        v8 = v40;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v28, (uint64_t *)v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        v19 = v38;
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v20, v21, "Converted Me card from Contacts: %s", v22, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v23, -1, -1);
        MEMORY[0x1C3BBFF64](v22, -1, -1);

      }
      else
      {

      }
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v33 = swift_allocObject();
      *(_OWORD *)(v33 + 16) = xmmword_1C24FB5A0;
      *(_QWORD *)(v33 + 32) = v19;
      v41[0] = (id)v33;
      specialized Array._endMutation()();
      v4 = v41[0];

    }
    else
    {
      v30 = Logger.logObject.getter();
      v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        v32 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v32 = 0;
        _os_log_impl(&dword_1C2356000, v30, v31, "Unable to convert Me CNContact to SAPerson. Proceeding as if there were no Me contact", v32, 2u);
        MEMORY[0x1C3BBFF64](v32, -1, -1);
      }

      return (id)MEMORY[0x1E0DEE9D8];
    }
  }
  else
  {
    v17 = v41[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

id protocol witness for AssistantDataContactFetching.fetchMeCards() in conformance CNContactStore()
{
  return CNContactStore.fetchMeCards()();
}

Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(Swift::String id, Swift::OpaquePointer_optional contactFetchKeys)
{
  void *v2;
  void *v3;
  void *object;
  uint64_t countAndFlagsBits;
  unint64_t rawValue;
  uint64_t v7;
  void *v8;
  Class isa;
  id v10;
  id v11;
  id v12;
  unint64_t v13;
  uint64_t v14;
  id v15;
  unint64_t v16;
  Swift::Bool v17;
  BOOL v18;
  uint64_t v19;
  void *v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  Swift::Bool v27;
  Swift::tuple_hasAddress_Bool_hasPhoneNumber_Bool result;
  id v29[2];

  v3 = v2;
  object = id._object;
  countAndFlagsBits = id._countAndFlagsBits;
  v29[1] = *(id *)MEMORY[0x1E0C80C00];
  if (contactFetchKeys.value._rawValue)
  {
    rawValue = (unint64_t)contactFetchKeys.value._rawValue;
    if (!((unint64_t)contactFetchKeys.value._rawValue >> 62))
      goto LABEL_3;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
    v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_1C24FB5B0;
    v20 = (void *)*MEMORY[0x1E0C967F0];
    v21 = (void *)*MEMORY[0x1E0C967C0];
    *(_QWORD *)(v19 + 32) = *MEMORY[0x1E0C967F0];
    *(_QWORD *)(v19 + 40) = v21;
    v29[0] = (id)v19;
    specialized Array._endMutation()();
    rawValue = (unint64_t)v29[0];
    v22 = v20;
    v23 = v21;
    if (!((unint64_t)v29[0] >> 62))
    {
LABEL_3:
      v7 = *(_QWORD *)((rawValue & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v7)
        goto LABEL_4;
LABEL_12:
      swift_bridgeObjectRelease();
      v18 = 0;
      goto LABEL_14;
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v24)
    goto LABEL_12;
LABEL_4:
  v8 = (void *)MEMORY[0x1C3BBEC44](countAndFlagsBits, object);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNKeyDescriptor);
  isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v29[0] = 0;
  v10 = objc_msgSend(v3, sel_unifiedContactWithIdentifier_keysToFetch_error_, v8, isa, v29);

  if (v10)
  {
    v11 = v29[0];
    v12 = objc_msgSend(v10, sel_postalAddresses);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for CNLabeledValue);
    v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    }
    swift_bridgeObjectRelease();
    v15 = objc_msgSend(v10, sel_phoneNumbers);
    v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v16 >> 62)
    {
      swift_bridgeObjectRetain();
      _CocoaArrayWrapper.endIndex.getter();

      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();

    }
    v18 = v14 != 0;
  }
  else
  {
    v25 = v29[0];
    v26 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v18 = 0;
  }
LABEL_14:
  v27 = v18;
  result.hasPhoneNumber = v17;
  result.hasAddress = v27;
  return result;
}

uint64_t protocol witness for ContactFetching.contactsAddressAndPhoneFlags(id:contactFetchKeys:) in conformance CNContactStore(uint64_t a1, uint64_t a2, Swift::OpaquePointer_optional a3)
{
  unsigned __int16 v3;

  LOBYTE(v3) = CNContactStore.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(*(Swift::String *)&a1, a3).hasAddress;
  return v3 & 1 | ((v3 > 0xFFu) << 8);
}

uint64_t dispatch thunk of AssistantDataContactFetching.fetchMeCards()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of ContactFetching.contactsAddressAndPhoneFlags(id:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v4;

  v4 = (*(uint64_t (**)(void))(a4 + 8))();
  return v4 & 1 | (((v4 >> 8) & 1) << 8);
}

uint64_t dispatch thunk of ContactFetching.contactsAddressAndPhoneFlags(id:contactFetchKeys:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v5;

  v5 = (*(uint64_t (**)(void))(a5 + 16))();
  return v5 & 1 | (((v5 >> 8) & 1) << 8);
}

uint64_t one-time initialization function for shared()
{
  id v0;
  uint64_t v1;
  void *v2;
  uint64_t result;

  type metadata accessor for PommesSearch();
  v0 = PommesSearch.__allocating_init()();
  if (one-time initialization token for sharedInstance != -1)
    swift_once();
  v1 = static PommesBridgeInstrumentationUtil.sharedInstance;
  type metadata accessor for PommesSearchService();
  v2 = (void *)swift_allocObject();
  swift_retain();
  result = PommesSearchService.init(pommesSearch:instrumentationUtil:)((uint64_t)v0, v1);
  static PommesSearchService.shared = v2;
  return result;
}

{
  uint64_t v0;
  id v1;
  void *v2;
  uint64_t result;

  type metadata accessor for AnalyticsComponentIdGenerator();
  v0 = swift_allocObject();
  v1 = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 131);
  type metadata accessor for PerformanceUtil();
  v2 = (void *)swift_allocObject();
  result = PerformanceUtil.init(analyticsComponentIdGenerator:trialClient:)(v0, (uint64_t)v1);
  static PerformanceUtil.shared = v2;
  return result;
}

{
  uint64_t result;

  type metadata accessor for SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator();
  result = swift_initStaticObject();
  static SiriKitAppInfoDataProvider.SatisfyingAppsDataProviderCreator.shared = result;
  return result;
}

uint64_t PommesSearchService.__allocating_init(pommesSearch:instrumentationUtil:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  PommesSearchService.init(pommesSearch:instrumentationUtil:)(a1, a2);
  return v4;
}

uint64_t static PommesSearchService.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t one-time initialization function for defaultSessionId()
{
  uint64_t v0;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  __swift_allocate_value_buffer(v0, static PommesSearchService.defaultSessionId);
  __swift_project_value_buffer(v0, (uint64_t)static PommesSearchService.defaultSessionId);
  return UUID.init(uuidString:)();
}

uint64_t PommesSearchService.defaultSessionId.unsafeMutableAddressor()
{
  uint64_t v0;

  if (one-time initialization token for defaultSessionId != -1)
    swift_once();
  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  return __swift_project_value_buffer(v0, (uint64_t)static PommesSearchService.defaultSessionId);
}

uint64_t static PommesSearchService.defaultSessionId.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2;
  uint64_t v3;

  if (one-time initialization token for defaultSessionId != -1)
    swift_once();
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v3 = __swift_project_value_buffer(v2, (uint64_t)static PommesSearchService.defaultSessionId);
  return outlined init with copy of MediaUserStateCenter?(v3, a1, &demangling cache variable for type metadata for UUID?);
}

void one-time initialization function for defaultTimeoutInSec()
{
  static PommesSearchService.defaultTimeoutInSec = 2;
}

uint64_t *PommesSearchService.defaultTimeoutInSec.unsafeMutableAddressor()
{
  if (one-time initialization token for defaultTimeoutInSec != -1)
    swift_once();
  return &static PommesSearchService.defaultTimeoutInSec;
}

uint64_t static PommesSearchService.defaultTimeoutInSec.getter()
{
  if (one-time initialization token for defaultTimeoutInSec != -1)
    swift_once();
  return static PommesSearchService.defaultTimeoutInSec;
}

uint64_t PommesSearchService.handler.getter()
{
  return swift_retain();
}

uint64_t PommesSearchService.instrumentationUtil.getter()
{
  return swift_retain();
}

uint64_t PommesSearchService.init(pommesSearch:instrumentationUtil:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;

  v3 = v2;
  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  v4 = one-time initialization token for pommes;
  swift_retain();
  swift_retain();
  if (v4 != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  v6 = Logger.logObject.getter();
  v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    v8 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v8 = 0;
    _os_log_impl(&dword_1C2356000, v6, v7, "PommesSearchService init successfully", v8, 2u);
    MEMORY[0x1C3BBFF64](v8, -1, -1);
  }
  swift_release();
  swift_release();

  return v3;
}

uint64_t PommesSearchService.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)(v0 + 16) + 216))();
}

uint64_t PommesSearchService.searchInfiEntity(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = v1;
  return swift_task_switch();
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t PommesSearchService.searchInfiEntity(request:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  if (one-time initialization token for defaultTimeoutInSec != -1)
    swift_once();
  v1 = static PommesSearchService.defaultTimeoutInSec;
  v2 = *(int **)(**(_QWORD **)(v0 + 24) + 120);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 32) = v3;
  *v3 = v0;
  v3[1] = PommesSearchService.searchInfiEntity(request:);
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(*(_QWORD *)(v0 + 16), v1);
}

uint64_t @objc closure #1 in PommesSearchService.searchInfiEntity(request:)(void *a1, void *aBlock, uint64_t a3)
{
  _QWORD *v3;
  id v5;

  v3[2] = a1;
  v3[3] = a3;
  v3[4] = _Block_copy(aBlock);
  v5 = a1;
  swift_retain();
  return swift_task_switch();
}

uint64_t @objc closure #1 in PommesSearchService.searchInfiEntity(request:)()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  _QWORD *v3;
  int *v5;

  if (one-time initialization token for defaultTimeoutInSec != -1)
    swift_once();
  v1 = static PommesSearchService.defaultTimeoutInSec;
  v2 = *(int **)(**(_QWORD **)(v0 + 24) + 120);
  v5 = (int *)((char *)v2 + *v2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 40) = v3;
  *v3 = v0;
  v3[1] = @objc closure #1 in PommesSearchService.searchInfiEntity(request:);
  return ((uint64_t (*)(_QWORD, uint64_t))v5)(*(_QWORD *)(v0 + 16), v1);
}

uint64_t @objc closure #1 in PommesSearchService.searchInfiEntity(request:)(void *a1)
{
  void *v1;
  uint64_t *v2;
  void *v3;
  void *v5;
  uint64_t v6;
  void (**v7)(_QWORD, _QWORD, _QWORD);
  void *v8;

  v3 = v1;
  v5 = *(void **)(*v2 + 16);
  v6 = *v2;
  swift_task_dealloc();

  swift_release();
  v7 = *(void (***)(_QWORD, _QWORD, _QWORD))(v6 + 32);
  if (v3)
  {
    v8 = (void *)_convertErrorToNSError(_:)();

    ((void (**)(_QWORD, _QWORD, void *))v7)[2](v7, 0, v8);
    _Block_release(v7);
  }
  else
  {
    ((void (**)(_QWORD, void *, _QWORD))v7)[2](*(_QWORD *)(v6 + 32), a1, 0);
    _Block_release(v7);

  }
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  v3[8] = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  v3[9] = swift_task_alloc();
  v4 = *(_QWORD *)(type metadata accessor for PommesSearchRequest(0) - 8);
  v3[10] = v4;
  v3[11] = *(_QWORD *)(v4 + 64);
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  v5 = type metadata accessor for PommesCandidateId();
  v3[14] = v5;
  v6 = *(_QWORD *)(v5 - 8);
  v3[15] = v6;
  v3[16] = *(_QWORD *)(v6 + 64);
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  _QWORD *v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void (*v27)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  v0[19] = __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2356000, v2, v3, "PommesSearchService entering searchInfiEntity...", v4, 2u);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }
  v5 = (_QWORD *)v0[18];
  v6 = v0[13];
  v25 = v0[14];
  v26 = v0[17];
  v7 = v0[12];
  v29 = v0[11];
  v8 = v0[9];
  v23 = v0[15];
  v24 = v0[10];
  v9 = (_QWORD *)v0[7];
  v30 = v0[6];
  v10 = v0[5];

  PommesSearchRequestXPC.pommesCandidateId.getter(v5);
  v11 = v10 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId;
  v12 = *(_QWORD *)(v10 + OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId);
  v0[20] = v12;
  v13 = *(_QWORD *)(v11 + 8);
  v0[21] = v13;
  v14 = v9[3];
  v0[22] = v14;
  (*(void (**)(_QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 128))(v5, v12, v13, v12, v13);
  (*(void (**)(uint64_t))(*v9 + 136))(v10);
  v15 = type metadata accessor for TaskPriority();
  v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56);
  v28 = v15;
  v27(v8, 1, 1, v15);
  outlined init with copy of PommesSearchRequest(v6, v7, type metadata accessor for PommesSearchRequest);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(v23 + 16))(v26, v5, v25);
  v16 = (*(unsigned __int8 *)(v24 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80);
  v17 = (v29 + *(unsigned __int8 *)(v23 + 80) + v16) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v18 = (char *)swift_allocObject();
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = v9;
  *((_QWORD *)v18 + 5) = v12;
  *((_QWORD *)v18 + 6) = v13;
  outlined init with take of PommesSearchRequest(v7, (uint64_t)&v18[v16]);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 32))(&v18[v17], v26, v25);
  swift_retain();
  swift_bridgeObjectRetain();
  v19 = _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCs6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pG_Tgm5(v8, (uint64_t)&async function pointer to partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), (uint64_t)v18);
  v0[23] = v19;
  v27(v8, 1, 1, v28);
  v20 = (_QWORD *)swift_allocObject();
  v20[2] = 0;
  v20[3] = 0;
  v20[4] = v30;
  v20[5] = v19;
  swift_retain();
  v0[24] = _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5Tm(v8, (uint64_t)&async function pointer to partial apply for closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:), (uint64_t)v20);
  v21 = (_QWORD *)swift_task_alloc();
  v0[25] = v21;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  *v21 = v0;
  v21[1] = PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return Task<>.value.getter();
}

{
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  char isCancelled;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  id v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;

  v1 = *(void **)(v0 + 16);
  v2 = *(unsigned __int8 *)(v0 + 24);
  isCancelled = swift_task_isCancelled();
  v4 = *(_QWORD *)(v0 + 192);
  if ((isCancelled & 1) != 0)
  {
    v32 = *(_QWORD *)(v0 + 144);
    v6 = *(_QWORD *)(v0 + 112);
    v5 = *(_QWORD *)(v0 + 120);
    v7 = *(_QWORD *)(v0 + 104);
    v8 = v1;
    v9 = type metadata accessor for PommesError();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E848], MEMORY[0x1E0D9E858]);
    swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v9 - 8) + 104))(v10, *MEMORY[0x1E0D9E838], v9);
    swift_willThrow();
    swift_release();
    outlined consume of Result<PommesResponse, Error>(v8);
    swift_release();
    outlined destroy of PommesSearchRequest(v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v32, v6);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v12))
    {
LABEL_4:

      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
LABEL_3:
    v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v13 = 0;
    _os_log_impl(&dword_1C2356000, v11, v12, "PommesSearchService leaving searchInfiEntity...", v13, 2u);
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    goto LABEL_4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
  MEMORY[0x1C3BBEF98](v4, MEMORY[0x1E0DEE9C0] + 8);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_1C2356000, v15, v16, "PommesSearchService search has completed, cancel the timeout task", v17, 2u);
    MEMORY[0x1C3BBFF64](v17, -1, -1);
  }
  v18 = *(_QWORD *)(v0 + 168);
  v19 = *(_QWORD *)(v0 + 176);
  v20 = *(_QWORD *)(v0 + 160);
  v21 = *(_QWORD *)(v0 + 144);
  v22 = *(_QWORD *)(v0 + 64);

  outlined destroy of MediaUserStateCenter?(v22, (uint64_t *)&demangling cache variable for type metadata for PommesSearchError?);
  v23 = *(_QWORD *)(v0 + 144);
  v24 = v1;
  v26 = *(_QWORD *)(v0 + 112);
  v25 = *(_QWORD *)(v0 + 120);
  v27 = *(_QWORD *)(v0 + 104);
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)(v0 + 32) = v24;
    v28 = v24;
    swift_willThrowTypedImpl();
    swift_release();
    outlined consume of Result<PommesResponse, Error>(v24);
    swift_release();
    outlined destroy of PommesSearchRequest(v27);
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v26);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v11, v12))
      goto LABEL_4;
    goto LABEL_3;
  }
  swift_release();
  swift_release();
  outlined destroy of PommesSearchRequest(v27);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v26);
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v31 = 0;
    _os_log_impl(&dword_1C2356000, v29, v30, "PommesSearchService leaving searchInfiEntity...", v31, 2u);
    MEMORY[0x1C3BBFF64](v31, -1, -1);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void *))(v0 + 8))(v24);
}

uint64_t closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  _QWORD *v8;

  v8[8] = a7;
  v8[9] = a8;
  v8[6] = a5;
  v8[7] = a6;
  v8[4] = a1;
  v8[5] = a4;
  return swift_task_switch();
}

uint64_t closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 v4;
  _QWORD *v5;

  v2 = *(_QWORD *)(v0 + 40);
  v1 = *(_QWORD *)(v0 + 48);
  v3 = swift_task_alloc();
  *(_QWORD *)(v0 + 80) = v3;
  v4 = *(_OWORD *)(v0 + 56);
  *(_QWORD *)(v3 + 16) = v2;
  *(_QWORD *)(v3 + 24) = v1;
  *(_OWORD *)(v3 + 32) = v4;
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 88) = v5;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  *v5 = v0;
  v5[1] = closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return withCheckedContinuation<A>(isolation:function:_:)();
}

{
  swift_task_dealloc();
  swift_task_dealloc();
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  char v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;

  v1 = *(void **)(v0 + 16);
  v2 = *(_BYTE *)(v0 + 24);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C2356000, v4, v5, "PommesSearchService search has started, check if search task is canceled", v6, 2u);
    MEMORY[0x1C3BBFF64](v6, -1, -1);
  }

  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(*(_QWORD *)(v0 + 40) + 24)
                                                                            + 144))(3, *(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56));
    v7 = type metadata accessor for PommesError();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type PommesError and conformance PommesError, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9E848], MEMORY[0x1E0D9E858]);
    v8 = swift_allocError();
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)(v7 - 8) + 104))(v9, *MEMORY[0x1E0D9E838], v7);
    outlined consume of Result<PommesResponse, Error>(v1);
    v2 = 1;
    v1 = (void *)v8;
  }
  else
  {
    v10 = Logger.logObject.getter();
    v11 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v12 = 0;
      _os_log_impl(&dword_1C2356000, v10, v11, "PommesSearchService search has completed, and search task hasn't been canceled, returning the search result", v12, 2u);
      MEMORY[0x1C3BBFF64](v12, -1, -1);
    }

  }
  v13 = *(_QWORD *)(v0 + 32);
  *(_QWORD *)v13 = v1;
  *(_BYTE *)(v13 + 8) = v2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;

  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Result<PommesResponse, Error>, Never>);
  v11 = *(_QWORD *)(v10 - 8);
  v12 = *(_QWORD *)(v11 + 64);
  MEMORY[0x1E0C80A78](v10);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchEagerInfo?);
  MEMORY[0x1E0C80A78](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(a2 + 16);
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v16 + 304))(a3, a4, 0);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  v17 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  v18 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v18 + v17, (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  v19 = swift_allocObject();
  *(_QWORD *)(v19 + 16) = _s21SiriInformationSearch06PommesC7ServiceC16searchInfiEntity7request12timeoutInSecAA0D8ResponseCAA0dC10RequestXPCC_s6UInt64VtYaKFs6ResultOyAHs5Error_pGyYacfU_yScCyAPs5NeverOGXEfU_yAPnYucAScfu_yAPnYucfu0_TA;
  *(_QWORD *)(v19 + 24) = v18;
  (*(void (**)(uint64_t, uint64_t (*)(void *, char), uint64_t))(*(_QWORD *)v16 + 240))(a5, _ss6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pGIegxT_AGIegg_TRTA, v19);
  swift_release();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesSearchEagerInfo?);
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCs6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pG_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  return swift_task_create();
}

uint64_t closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 16) = a4;
  *(_QWORD *)(v5 + 24) = a5;
  return swift_task_switch();
}

void closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v0;
  _QWORD *v1;

  if (is_mul_ok(*(_QWORD *)(v0 + 16), 0x3B9ACA00uLL))
  {
    v1 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 32) = v1;
    *v1 = v0;
    v1[1] = closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
    static Task<>.sleep(nanoseconds:)();
  }
  else
  {
    __break(1u);
  }
}

uint64_t closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  swift_task_dealloc();
  if (v0)
    return (*(uint64_t (**)(void))(v2 + 8))();
  else
    return swift_task_switch();
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;

  v1 = *(_QWORD *)(v0 + 24);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<PommesResponse, Error>);
  MEMORY[0x1C3BBEF98](v1, v2, MEMORY[0x1E0DEDCE8], MEMORY[0x1E0DEDD18]);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v3 = type metadata accessor for Logger();
  __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v6 = 0;
    _os_log_impl(&dword_1C2356000, v4, v5, "PommesSearchService search has timed out, cancel the search task", v6, 2u);
    MEMORY[0x1C3BBFF64](v6, -1, -1);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5Tm(a1, a2, a3);
}

uint64_t _sScTss5Error_pRs_rlE8priority9operationScTyxsAA_pGScPSg_xyYaKYAcntcfCSb_Tgm5Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;

  v5 = type metadata accessor for TaskPriority();
  v6 = *(_QWORD *)(v5 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, v5);
    if (!*(_QWORD *)(a3 + 16))
      return swift_task_create();
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
  return swift_task_create();
}

void PommesSearchService.invalidate(cachedResponse:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  void (*v8)(uint64_t, uint64_t);
  os_log_type_t v9;
  uint8_t *v10;
  NSObject *oslog;

  v2 = v1;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v7 = 0;
    _os_log_impl(&dword_1C2356000, v5, v6, "PommesSearchService invalidating cached response...", v7, 2u);
    MEMORY[0x1C3BBFF64](v7, -1, -1);
  }

  v8 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)(*(_QWORD *)(v2 + 16) + 40) + 264);
  swift_retain();
  v8(a1, 2);
  swift_release();
  oslog = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v9, "PommesSearchService leaving invalidating cached response...", v10, 2u);
    MEMORY[0x1C3BBFF64](v10, -1, -1);
  }

}

uint64_t PommesSearchService.buildPommesSearchRequest(from:)@<X0>(_BYTE *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char v40;
  char v41;
  char v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  int EnumCaseMultiPayload;
  uint64_t v52;
  void (*v53)(_QWORD, _QWORD, _QWORD);
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  _BYTE *v60;
  char *v61;
  NSObject *v62;
  os_log_type_t v63;
  int v64;
  _BOOL4 v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  _BYTE *v94;
  char *v95;
  uint64_t v96;
  NSObject *v97;
  os_log_type_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  char *v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  int v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(_QWORD, _QWORD, _QWORD);
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v133[2];
  char *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t *v148;
  uint64_t v149;
  void (*v150)(char *, uint64_t);
  uint64_t v151;
  _QWORD *v152;
  char *v153;
  char *v154;
  _QWORD *v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162[2];

  v155 = a2;
  v133[0] = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  v3 = MEMORY[0x1E0C80A78](v133[0]);
  v140 = (uint64_t)v133 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = MEMORY[0x1E0C80A78](v3);
  v139 = (uint64_t)v133 - v6;
  MEMORY[0x1E0C80A78](v5);
  v152 = (_QWORD *)((char *)v133 - v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for InputOrigin?);
  MEMORY[0x1E0C80A78](v8);
  v154 = (char *)v133 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesContext?);
  MEMORY[0x1E0C80A78](v10);
  v153 = (char *)v133 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v137 = type metadata accessor for PommesCandidateId();
  v136 = *(_QWORD *)(v137 - 8);
  MEMORY[0x1E0C80A78](v137);
  v135 = (_QWORD *)((char *)v133 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v150 = (void (*)(char *, uint64_t))type metadata accessor for ParseStateXPC(0);
  MEMORY[0x1E0C80A78](v150);
  v148 = (_QWORD *)((char *)v133 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DateInterval?);
  MEMORY[0x1E0C80A78](v14);
  v156 = (uint64_t)v133 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v16);
  v18 = (char *)v133 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for UUID();
  v20 = *(_QWORD *)(v19 - 8);
  MEMORY[0x1E0C80A78](v19);
  v158 = (uint64_t)v133 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for PommesContext.Source();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)v133 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for PommesContext();
  v159 = *(_QWORD *)(v26 - 8);
  v160 = v26;
  v27 = MEMORY[0x1E0C80A78](v26);
  v134 = (char *)v133 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x1E0C80A78](v27);
  v138 = (char *)v133 - v30;
  MEMORY[0x1E0C80A78](v29);
  v32 = (char *)v133 - v31;
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E0D98A50], v22);
  swift_bridgeObjectRetain();
  v157 = v32;
  PommesContext.init(source:domain:listenAfterSpeaking:)();
  v33 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId + 8];
  v151 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_assistantId];
  v34 = one-time initialization token for defaultSessionId;
  v149 = v33;
  swift_bridgeObjectRetain();
  if (v34 != -1)
    swift_once();
  v35 = __swift_project_value_buffer(v16, (uint64_t)static PommesSearchService.defaultSessionId);
  outlined init with copy of MediaUserStateCenter?(v35, (uint64_t)v18, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    UUID.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v18, &demangling cache variable for type metadata for UUID?);
  }
  else
  {
    (*(void (**)(uint64_t, char *, uint64_t))(v20 + 32))(v158, v18, v19);
  }
  v36 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId + 8];
  v146 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_requestId];
  v142 = v36;
  v37 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource];
  v144 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioSource + 8];
  v145 = v37;
  v38 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination + 8];
  v143 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_audioDestination];
  v141 = v38;
  v39 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isEyesFree];
  v40 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isVoiceTriggerEnabled];
  v41 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTextToSpeechEnabled];
  v42 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isPushOffRequest];
  v43 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode];
  v44 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_responseMode + 8];
  v45 = a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isTriggerlessFollowup];
  v46 = type metadata accessor for DateInterval();
  v47 = v156;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v156, 1, 1, v46);
  v48 = *(_QWORD *)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_deviceRestrictions];
  v133[1] = type metadata accessor for PommesRequestContext();
  swift_allocObject();
  v147 = v48;
  v49 = PommesRequestContext.init(assistantId:sessionId:requestId:audioSource:audioDestination:responseMode:isEyesFree:isVoiceTriggerEnabled:isTextToSpeechEnabled:isPushOffRequest:isTriggerlessFollowup:bargeInModes:approximatePreviousTTSInterval:deviceRestrictions:)(v151, v149, v158, v146, v142, v145, v144, v143, v141, v43, v44, v39, v40, v41, v42, v45, MEMORY[0x1E0DEE9D8], v47, v48);
  v50 = v148;
  outlined init with copy of PommesSearchRequest((uint64_t)&a1[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_parseState], (uint64_t)v148, type metadata accessor for ParseStateXPC);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v158 = *v50;
  v156 = v50[1];
  v151 = v49;
  if (EnumCaseMultiPayload == 1)
  {
    v149 = v50[2];
    v146 = v50[3];
    v52 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?, hasTTResponse: Bool));
    v53 = (void (*)(_QWORD, _QWORD, _QWORD))v152;
    outlined init with take of TCUMappedNLResponse?((uint64_t)v50 + *(int *)(v52 + 64), (uint64_t)v152);
    v54 = one-time initialization token for pommes;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v55 = v157;
    v56 = v159;
    if (v54 != -1)
      swift_once();
    v57 = type metadata accessor for Logger();
    __swift_project_value_buffer(v57, (uint64_t)static Logger.pommes);
    v58 = v134;
    v148 = *(uint64_t **)(v56 + 16);
    ((void (*)(char *, char *, uint64_t))v148)(v134, v55, v160);
    v59 = v139;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v53, v139, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v60 = a1;
    swift_retain_n();
    v61 = v60;
    v62 = Logger.logObject.getter();
    v63 = static os_log_type_t.debug.getter();
    v64 = v63;
    v65 = os_log_type_enabled(v62, v63);
    v66 = v140;
    if (v65)
    {
      v67 = swift_slowAlloc();
      v147 = swift_slowAlloc();
      v162[0] = v147;
      *(_DWORD *)v67 = 136316418;
      LODWORD(v145) = v64;
      v68 = *(_QWORD *)&v61[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
      v69 = *(_QWORD *)&v61[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
      swift_bridgeObjectRetain();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v162);
      v70 = v49;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 12) = 2080;
      v71 = v135;
      PommesSearchRequestXPC.pommesCandidateId.getter(v135);
      v72 = PommesCandidateId.description.getter();
      v74 = v73;
      (*(void (**)(_QWORD *, uint64_t))(v136 + 8))(v71, v137);
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v72, v74, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 22) = 1024;
      v75 = v61[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];

      LODWORD(v161) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v67 + 28) = 2080;
      v161 = v70;
      swift_retain();
      v76 = String.init<A>(describing:)();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v76, v77, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v67 + 38) = 2080;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98A90], MEMORY[0x1E0D98AB0]);
      v78 = v160;
      v79 = dispatch thunk of CustomStringConvertible.description.getter();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v79, v80, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v150 = *(void (**)(char *, uint64_t))(v159 + 8);
      v150(v58, v78);
      *(_WORD *)(v67 + 48) = 2080;
      v81 = v139;
      v82 = v140;
      outlined init with copy of MediaUserStateCenter?(v139, v140, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      v83 = String.init<A>(describing:)();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v83, v84, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v85 = v81;
      v55 = v157;
      outlined destroy of MediaUserStateCenter?(v85, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
      _os_log_impl(&dword_1C2356000, v62, (os_log_type_t)v145, "    Constructing Pommes search request:\n    utterance: \"%s\",\n    %s,\n    isMultiUser: %{BOOL}d,\n    requestContext: %s,\n    pommesContext: %s,\n    response: %s,\n    isFallback: true", (uint8_t *)v67, 0x3Au);
      v86 = v147;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v86, -1, -1);
      MEMORY[0x1C3BBFF64](v67, -1, -1);

    }
    else
    {
      swift_release_n();

      v150 = *(void (**)(char *, uint64_t))(v159 + 8);
      v150(v58, v160);
      outlined destroy of MediaUserStateCenter?(v59, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);

      v82 = v66;
    }
    v117 = *(_QWORD *)&v61[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
    v118 = *(_QWORD *)&v61[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
    v119 = v61[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];
    v120 = (uint64_t)v153;
    v121 = v160;
    ((void (*)(char *, char *, uint64_t))v148)(v153, v55, v160);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v159 + 56))(v120, 0, 1, v121);
    v122 = type metadata accessor for InputOrigin();
    v123 = (uint64_t)v154;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v122 - 8) + 56))(v154, 1, 1, v122);
    v124 = (void (*)(_QWORD, _QWORD, _QWORD))v152;
    outlined init with copy of MediaUserStateCenter?((uint64_t)v152, v82, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    swift_bridgeObjectRetain();
    PommesSearchRequest.init(utterance:trpCandidateId:tcuId:isMultiUser:requestContext:pommesContext:inputOrigin:parseResponse:asrSpeechPackage:isFallback:sharedUserId:userIdentityClassification:)(v117, v118, v158, v156, v149, v146, v119, v151, v155, v120, v123, v82, 0, 1, 0, 0, 0);
    outlined destroy of MediaUserStateCenter?((uint64_t)v124, (uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
    v93 = v121;
  }
  else
  {
    v87 = v50[2];
    v88 = one-time initialization token for pommes;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v89 = v157;
    v90 = v159;
    if (v88 != -1)
      swift_once();
    v91 = type metadata accessor for Logger();
    __swift_project_value_buffer(v91, (uint64_t)static Logger.pommes);
    v92 = v138;
    v93 = v160;
    v152 = *(_QWORD **)(v90 + 16);
    ((void (*)(char *, char *, uint64_t))v152)(v138, v89, v160);
    v94 = a1;
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    v95 = v94;
    v96 = Logger.logObject.getter();
    v149 = v87;
    v97 = v96;
    v98 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v97, v98))
    {
      v99 = swift_slowAlloc();
      v148 = (uint64_t *)swift_slowAlloc();
      v162[0] = (uint64_t)v148;
      *(_DWORD *)v99 = 136316418;
      v100 = *(_QWORD *)&v95[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
      v101 = *(_QWORD *)&v95[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
      swift_bridgeObjectRetain();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v100, v101, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      v102 = v49;
      *(_WORD *)(v99 + 12) = 2080;
      v103 = v135;
      PommesSearchRequestXPC.pommesCandidateId.getter(v135);
      v104 = PommesCandidateId.description.getter();
      v106 = v105;
      (*(void (**)(_QWORD *, uint64_t))(v136 + 8))(v103, v137);
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v104, v106, v162);
      v89 = v157;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      *(_WORD *)(v99 + 22) = 1024;
      v107 = v95[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];

      LODWORD(v161) = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v99 + 28) = 2080;
      v161 = v102;
      swift_retain();
      v108 = String.init<A>(describing:)();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v108, v109, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v90 = v159;
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v99 + 38) = 2080;
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type PommesContext and conformance PommesContext, (uint64_t (*)(uint64_t))MEMORY[0x1E0D98A90], MEMORY[0x1E0D98AB0]);
      v110 = v138;
      v111 = dispatch thunk of CustomStringConvertible.description.getter();
      v161 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v111, v112, v162);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v150 = *(void (**)(char *, uint64_t))(v90 + 8);
      v150(v110, v160);
      *(_WORD *)(v99 + 48) = 2048;
      v113 = v149;
      v114 = *(_QWORD *)(v149 + 16);
      swift_bridgeObjectRelease();
      v161 = v114;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v97, v98, "    Constructing Pommes search request:\n    utterance: \"%s\",\n    %s,\n    isMultiUser: %{BOOL}d,\n    requestContext: %s,\n    pommesContext: %s,\n    userParses: %ld,\n    isFallback: true", (uint8_t *)v99, 0x3Au);
      v115 = v148;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v115, -1, -1);
      v116 = v99;
      v93 = v160;
      MEMORY[0x1C3BBFF64](v116, -1, -1);

    }
    else
    {
      swift_release_n();

      v125 = v149;
      swift_bridgeObjectRelease();
      v113 = v125;
      v150 = *(void (**)(char *, uint64_t))(v90 + 8);
      v150(v92, v93);

      swift_bridgeObjectRelease();
    }
    v126 = *(_QWORD *)&v95[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance];
    v127 = *(_QWORD *)&v95[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_utterance + 8];
    v128 = v95[OBJC_IVAR____TtC21SiriInformationSearch22PommesSearchRequestXPC_isMultiUser];
    v129 = (uint64_t)v153;
    ((void (*)(char *, char *, uint64_t))v152)(v153, v89, v93);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v90 + 56))(v129, 0, 1, v93);
    v130 = type metadata accessor for InputOrigin();
    v55 = v89;
    v131 = (uint64_t)v154;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v130 - 8) + 56))(v154, 1, 1, v130);
    swift_bridgeObjectRetain();
    PommesSearchRequest.init(utterance:resultCandidateId:isMultiUser:requestContext:pommesContext:inputOrigin:userParses:asrSpeechPackage:isFallback:)(v126, v127, v158, v156, v128, v151, v129, v131, v155, v113, 0, 1u);
  }
  return ((uint64_t (*)(char *, uint64_t))v150)(v55, v93);
}

uint64_t PommesSearchService.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return v0;
}

uint64_t PommesSearchService.__deallocating_deinit()
{
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

unint64_t PommesSearchServiceError.description.getter()
{
  _BYTE *v0;
  unint64_t v1;

  v1 = 0xD000000000000016;
  if (*v0 == 1)
    v1 = 0xD000000000000036;
  if (*v0)
    return v1;
  else
    return 0xD000000000000048;
}

BOOL static PommesSearchServiceError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PommesSearchServiceError.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

Swift::Int PommesSearchServiceError.hashValue.getter()
{
  unsigned __int8 *v0;
  Swift::UInt v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1C23C7AA0()
{
  uint64_t v0;
  int *v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int EnumCaseMultiPayload;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v1 = (int *)type metadata accessor for PommesSearchRequest(0);
  v2 = *((_QWORD *)v1 - 1);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = *(_QWORD *)(v2 + 64);
  v5 = type metadata accessor for PommesCandidateId();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned __int8 *)(v6 + 80);
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  v8 = v0 + v3;
  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  v35 = v4;
  v36 = v3;
  if (EnumCaseMultiPayload == 2)
  {
    v34 = v6;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v14 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                 + 64);
    v15 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v16 = *(_QWORD *)(v15 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    swift_bridgeObjectRelease();
LABEL_10:
    v6 = v34;
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      goto LABEL_13;
    v33 = v5;
    v34 = v6;
    swift_bridgeObjectRelease();
    v10 = v8
        + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                 + 48);
    swift_bridgeObjectRelease();
    v11 = v10 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    v12 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v13 = *(_QWORD *)(v12 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
    swift_bridgeObjectRelease();
    v5 = v33;
    goto LABEL_10;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = v8
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v18 = type metadata accessor for TCUMappedNLResponse();
  v19 = *(_QWORD *)(v18 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
LABEL_13:
  swift_bridgeObjectRelease();
  v20 = v8 + v1[6];
  v21 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v22 = *(_QWORD *)(v21 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23 = v8 + v1[10];
  v24 = type metadata accessor for PommesContext();
  v25 = *(_QWORD *)(v24 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
  v26 = v8 + v1[11];
  v27 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v28 = *(_QWORD *)(v27 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v26, v27);
  swift_release();
  v29 = v8 + v1[14];
  v30 = type metadata accessor for InputOrigin();
  v31 = *(_QWORD *)(v30 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v29, v30);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + ((v36 + v35 + v7) & ~v7), v5);
  return swift_deallocObject();
}

uint64_t outlined init with take of PommesSearchRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v14;

  v4 = *(_QWORD *)(type metadata accessor for PommesSearchRequest(0) - 8);
  v5 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  v6 = *(_QWORD *)(v4 + 64);
  v7 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for PommesCandidateId() - 8) + 80);
  v8 = v5 + v6 + v7;
  v14 = *(_OWORD *)(v1 + 32);
  v9 = *(_QWORD *)(v1 + 48);
  v10 = v1 + v5;
  v11 = v1 + (v8 & ~v7);
  v12 = swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v12;
  *(_QWORD *)v12 = v2;
  *(_QWORD *)(v12 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(_QWORD *)(v12 + 64) = v10;
  *(_QWORD *)(v12 + 72) = v11;
  *(_QWORD *)(v12 + 56) = v9;
  *(_OWORD *)(v12 + 40) = v14;
  *(_QWORD *)(v12 + 32) = a1;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t partial apply for closure #2 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v4;
  *v4 = v1;
  v4[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  v4[2] = v2;
  v4[3] = v3;
  return swift_task_switch();
}

uint64_t outlined destroy of PommesSearchRequest(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PommesSearchRequest(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t _sIeghH_IeAgH_TR(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t (*v6)(void);

  v6 = (uint64_t (*)(void))((char *)a3 + *a3);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v4;
  *v4 = v3;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v6();
}

uint64_t _sIeAgH_ytIeAgHr_TR(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t (*v7)(void);

  v7 = (uint64_t (*)(void))((char *)a4 + *a4);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v5;
  *v5 = v4;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return v7();
}

uint64_t _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgmq5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v6 = type metadata accessor for TaskPriority();
  v7 = *(_QWORD *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1, v6) != 1)
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    if (!*(_QWORD *)(a3 + 16))
      goto LABEL_5;
    goto LABEL_3;
  }
  outlined destroy of MediaUserStateCenter?(a1, &demangling cache variable for type metadata for TaskPriority?);
  if (*(_QWORD *)(a3 + 16))
  {
LABEL_3:
    swift_getObjectType();
    swift_unknownObjectRetain();
    dispatch thunk of Actor.unownedExecutor.getter();
    swift_unknownObjectRelease();
  }
LABEL_5:
  v8 = swift_allocObject();
  *(_QWORD *)(v8 + 16) = a2;
  *(_QWORD *)(v8 + 24) = a3;
  return swift_task_create();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_;
  return v6(a1);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TQ0_()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

void *closure #1 in serialize<A>(_:at:)(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:format:privacy:)(uint64_t (*a1)(void))
{
  return a1() & 1;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int32)@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t outlined init with take of TCUMappedNLResponse?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for TCUMappedNLResponse?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Int)@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesSearchServiceError and conformance PommesSearchServiceError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError;
  if (!lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesSearchServiceError, &type metadata for PommesSearchServiceError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError;
  if (!lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesSearchServiceError, &type metadata for PommesSearchServiceError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchServiceError and conformance PommesSearchServiceError);
  }
  return result;
}

uint64_t type metadata accessor for PommesSearchService()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesSearchService()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesSearchService.__allocating_init(pommesSearch:instrumentationUtil:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t dispatch thunk of PommesSearchService.setServiceHelper(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of PommesSearchService.searchInfiEntity(request:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t);

  v6 = (uint64_t (*)(uint64_t))(**(int **)(*(_QWORD *)v1 + 112) + *(_QWORD *)(*(_QWORD *)v1 + 112));
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v4;
  *v4 = v2;
  v4[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:);
  return v6(a1);
}

uint64_t dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 120) + *(_QWORD *)(*(_QWORD *)v2 + 120));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v8(a1, a2);
}

uint64_t dispatch thunk of PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of PommesSearchService.invalidate(cachedResponse:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of PommesSearchService.buildPommesSearchRequest(from:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t getEnumTagSinglePayload for PommesSearchServiceError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesSearchServiceError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_1C23C8710 + 4 * byte_1C24FB665[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1C23C8744 + 4 * byte_1C24FB660[v4]))();
}

uint64_t sub_1C23C8744(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23C874C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23C8754);
  return result;
}

uint64_t sub_1C23C8760(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23C8768);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_1C23C876C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23C8774(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PommesSearchServiceError()
{
  return &type metadata for PommesSearchServiceError;
}

uint64_t sub_1C23C8790()
{
  uint64_t v0;

  _Block_release(*(const void **)(v0 + 24));
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for @objc closure #1 in PommesSearchService.searchInfiEntity(request:)()
{
  _QWORD *v0;
  uint64_t v1;
  void *v2;
  void *v3;
  uint64_t v4;
  _QWORD *v5;

  v2 = (void *)v0[2];
  v3 = (void *)v0[3];
  v4 = v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(void *, void *, uint64_t))((char *)&async function pointer to @objc closure #1 in PommesSearchService.searchInfiEntity(request:)
                                                          + async function pointer to @objc closure #1 in PommesSearchService.searchInfiEntity(request:)))(v2, v3, v4);
}

uint64_t _sIeghH_IeAgH_TRTA()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  _QWORD *v5;

  v2 = v0[2];
  v3 = v0[3];
  v4 = (int *)v0[4];
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v5;
  *v5 = v1;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, int *))((char *)&_sIeghH_IeAgH_TRTu + _sIeghH_IeAgH_TRTu))(v2, v3, v4);
}

uint64_t objectdestroy_5Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  return swift_deallocObject();
}

uint64_t _sIeAgH_ytIeAgHr_TRTA(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int *v6;
  _QWORD *v7;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (int *)v1[4];
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v7;
  *v7 = v2;
  v7[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))((char *)&_sIeAgH_ytIeAgHr_TRTu
                                                                   + _sIeAgH_ytIeAgHr_TRTu))(a1, v4, v5, v6);
}

uint64_t sub_1C23C8960()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5Tu))(a1, v4);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5(uint64_t a1, int *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t (*v5)(uint64_t);

  *(_QWORD *)(v2 + 32) = a1;
  v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 40) = v3;
  *v3 = v2;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5TQ0_;
  return v5(v2 + 16);
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5TQ0_()
{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  uint64_t v5;

  v1 = *v0;
  v2 = *(_QWORD *)(*v0 + 32);
  v5 = *v0;
  swift_task_dealloc();
  v3 = *(_BYTE *)(v1 + 24);
  *(_QWORD *)v2 = *(_QWORD *)(v1 + 16);
  *(_BYTE *)(v2 + 8) = v3;
  return (*(uint64_t (**)(void))(v5 + 8))();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5TA(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  int *v4;
  _QWORD *v5;

  v4 = *(int **)(v1 + 16);
  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return ((uint64_t (*)(uint64_t, int *))((char *)&_sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5Tu
                                                 + _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRs6ResultOy21SiriInformationSearch14PommesResponseCsAA_pG_TG5Tu))(a1, v4);
}

uint64_t partial apply for closure #1 in closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(uint64_t a1)
{
  uint64_t *v1;

  return closure #1 in closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:)(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1C23C8BA0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Result<PommesResponse, Error>, Never>);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v1 - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(v1 - 8) + 80)), v1);
  return swift_deallocObject();
}

uint64_t _s21SiriInformationSearch06PommesC7ServiceC16searchInfiEntity7request12timeoutInSecAA0D8ResponseCAA0dC10RequestXPCC_s6UInt64VtYaKFs6ResultOyAHs5Error_pGyYacfU_yScCyAPs5NeverOGXEfU_yAPnYucAScfu_yAPnYucfu0_TA()
{
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Result<PommesResponse, Error>, Never>);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CheckedContinuation<Result<PommesResponse, Error>, Never>);
  return CheckedContinuation.resume(returning:)();
}

uint64_t _ss6ResultOy21SiriInformationSearch14PommesResponseCs5Error_pGIegxT_AGIegg_TRTA(void *a1, char a2)
{
  uint64_t v2;
  uint64_t (*v4)(void *, uint64_t);
  uint64_t v5;

  v4 = *(uint64_t (**)(void *, uint64_t))(v2 + 16);
  v5 = a2 & 1;
  outlined copy of Result<PommesResponse, Error>(a1);
  return v4(a1, v5);
}

void protocol witness for CurareInteractionStream.init(streamId:) in conformance FSFCurareInteractionStream(uint64_t a1@<X1>, _QWORD *a2@<X8>)
{
  void *v3;
  id v4;

  if (a1)
  {
    v3 = (void *)MEMORY[0x1C3BBEC44]();
    swift_bridgeObjectRelease();
  }
  else
  {
    v3 = 0;
  }
  v4 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithStreamId_, v3);

  *a2 = v4;
}

uint64_t one-time initialization function for lazySetup()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C2356000, v1, v2, "CURARE: performing one-time setup for FeatureStore donation", v3, 2u);
    MEMORY[0x1C3BBFF64](v3, -1, -1);
  }

  type metadata accessor for Searchfoundation_Card();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Searchfoundation_Card and conformance Searchfoundation_Card, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D7A8], MEMORY[0x1E0D6D7A0]);
  return static Google_Protobuf_Any.register(messageType:)();
}

void *CurareDonation.curareInteractionDataVersion.unsafeMutableAddressor()
{
  return &static CurareDonation.curareInteractionDataVersion;
}

uint64_t static CurareDonation.curareInteractionDataVersion.getter()
{
  return 0;
}

uint64_t static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  id v13;
  NSObject *v14;
  os_log_type_t v15;
  uint64_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint8_t *v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  id v27;
  _QWORD v29[2];
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35[5];

  v33 = a3;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(_QWORD *)(v6 + 64);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v12 = type metadata accessor for Logger();
  __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
  v13 = a2;
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = swift_slowAlloc();
    v30 = a1;
    v17 = (uint8_t *)v16;
    v18 = swift_slowAlloc();
    v31 = v11;
    v19 = v18;
    v35[0] = v18;
    v29[1] = v7;
    *(_DWORD *)v17 = 136315138;
    v32 = (char *)v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
    v20 = PommesResponse.curareDescription.getter();
    v34 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, v35);
    v8 = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v14, v15, "POMMES-CURARE: %s", v17, 0xCu);
    swift_arrayDestroy();
    v22 = v19;
    v11 = v31;
    MEMORY[0x1C3BBFF64](v22, -1, -1);
    v23 = v17;
    a1 = v30;
    MEMORY[0x1C3BBFF64](v23, -1, -1);

  }
  else
  {

  }
  static TaskPriority.background.getter();
  v24 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 0, 1, v24);
  outlined init with copy of CurareInteractionStream?(v33, (uint64_t)v35);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1, v5);
  v25 = (*(unsigned __int8 *)(v6 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  v26 = (char *)swift_allocObject();
  *((_QWORD *)v26 + 2) = 0;
  *((_QWORD *)v26 + 3) = 0;
  outlined init with take of PommesSearchReason?((uint64_t)v35, (uint64_t)(v26 + 32), &demangling cache variable for type metadata for CurareInteractionStream?);
  *((_QWORD *)v26 + 9) = v13;
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(&v26[v25], v8, v5);
  v27 = v13;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v11, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:with:into:), (uint64_t)v26);
  return swift_release();
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[4] = a5;
  v6[5] = a6;
  v6[2] = a1;
  v6[3] = a4;
  v7 = type metadata accessor for Date();
  v6[6] = v7;
  v6[7] = *(_QWORD *)(v7 - 8);
  v6[8] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;

  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 56);
  v1 = *(_QWORD *)(v0 + 64);
  v4 = *(_QWORD *)(v0 + 40);
  v3 = *(_QWORD *)(v0 + 48);
  v5 = static PerformanceUtil.shared;
  v6 = swift_task_alloc();
  *(_OWORD *)(v6 + 16) = *(_OWORD *)(v0 + 24);
  *(_QWORD *)(v6 + 32) = v4;
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)v5 + 200))(0xD00000000000002ALL, 0x80000001C25031D0, 0, v1, "SiriInformationSearch/CurareDonation.swift", 42, 2, 169, "donateCurareInfo(for:with:into:)", 32, 2, partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:), v6, MEMORY[0x1E0DEE9C0] + 8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  void (*v12)(_BYTE *, uint64_t, uint64_t);
  _BYTE v15[40];

  v5 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1E0C80A78](v5);
  v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with copy of CurareInteractionStream?(a1, (uint64_t)v15);
  }
  else
  {
    type metadata accessor for PommesResponse();
    static PommesResponse.makeDefaultInteractionStream()((uint64_t)v15);
  }
  v8 = PommesResponse.requestId.getter();
  v10 = v9;
  v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v12 = *(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v7, a3, v11);
  swift_storeEnumTagMultiPayload();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v7, v8, v10, (uint64_t)v15);
  outlined destroy of PommesCurareInteractionValue((uint64_t)v7);
  v12(v7, a3, v11);
  swift_storeEnumTagMultiPayload();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v7, v8, v10, (uint64_t)v15);
  swift_bridgeObjectRelease();
  outlined destroy of PommesCurareInteractionValue((uint64_t)v7);
  return outlined destroy of CurareInteractionStream?((uint64_t)v15);
}

uint64_t static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _BYTE v15[40];

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_QWORD *)(v5 + 64);
  MEMORY[0x1E0C80A78](v4);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v7);
  v9 = &v15[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static TaskPriority.background.getter();
  v10 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v9, 0, 1, v10);
  outlined init with copy of CurareInteractionStream?(a2, (uint64_t)v15);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(&v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], a1, v4);
  v11 = (*(unsigned __int8 *)(v5 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v12 = swift_allocObject();
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 24) = 0;
  outlined init with take of PommesSearchReason?((uint64_t)v15, v12 + 32, &demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))(v12 + v11, &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0) - 8], v4);
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v9, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:into:), v12);
  return swift_release();
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = type metadata accessor for Date();
  v5[5] = v6;
  v5[6] = *(_QWORD *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static CurareDonation.donateCurareInfo(for:into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = static PerformanceUtil.shared;
  v5 = swift_task_alloc();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 24);
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)v4 + 200))(0xD000000000000025, 0x80000001C2503180, 0, v1, "SiriInformationSearch/CurareDonation.swift", 42, 2, 183, "donateCurareInfo(for:into:)", 27, 2, partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:), v5, MEMORY[0x1E0DEE9C0] + 8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE v18[40];

  v4 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1E0C80A78](v4);
  v6 = &v18[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_POMMESRequestContext();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with copy of CurareInteractionStream?(a1, (uint64_t)v18);
  }
  else
  {
    type metadata accessor for PommesResponse();
    static PommesResponse.makeDefaultInteractionStream()((uint64_t)v18);
  }
  v11 = Apple_Parsec_Siri_V2alpha_SiriPegasusRequest.pommesRequestContext.getter();
  v12 = MEMORY[0x1C3BBC118](v11);
  v14 = v13;
  (*(void (**)(_BYTE *, uint64_t))(v8 + 8))(v10, v7);
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v6, a2, v15);
  swift_storeEnumTagMultiPayload();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v6, v12, v14, (uint64_t)v18);
  swift_bridgeObjectRelease();
  outlined destroy of PommesCurareInteractionValue((uint64_t)v6);
  return outlined destroy of CurareInteractionStream?((uint64_t)v18);
}

uint64_t static CurareDonation.donateCurareResponseUsedMarker(from:into:)(void *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  _BYTE v12[40];

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v4);
  v6 = &v12[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  static TaskPriority.background.getter();
  v7 = type metadata accessor for TaskPriority();
  (*(void (**)(_BYTE *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 0, 1, v7);
  outlined init with copy of CurareInteractionStream?(a2, (uint64_t)v12);
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = 0;
  v8[3] = 0;
  outlined init with take of PommesSearchReason?((uint64_t)v12, (uint64_t)(v8 + 4), &demangling cache variable for type metadata for CurareInteractionStream?);
  v8[9] = a1;
  v9 = a1;
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v6, (uint64_t)&async function pointer to partial apply for closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:), (uint64_t)v8);
  return swift_release();
}

uint64_t closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v6;

  v5[3] = a4;
  v5[4] = a5;
  v5[2] = a1;
  v6 = type metadata accessor for Date();
  v5[5] = v6;
  v5[6] = *(_QWORD *)(v6 - 8);
  v5[7] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;

  if (one-time initialization token for shared != -1)
    swift_once();
  v2 = *(_QWORD *)(v0 + 48);
  v1 = *(_QWORD *)(v0 + 56);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = static PerformanceUtil.shared;
  v5 = swift_task_alloc();
  *(_OWORD *)(v5 + 16) = *(_OWORD *)(v0 + 24);
  Date.init()();
  (*(void (**)(unint64_t, unint64_t, _QWORD, uint64_t, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, char, uint64_t (*)(), uint64_t, uint64_t))(*(_QWORD *)v4 + 200))(0xD000000000000034, 0x80000001C25030C0, 0, v1, "SiriInformationSearch/CurareDonation.swift", 42, 2, 197, "donateCurareResponseUsedMarker(from:into:)", 42, 2, partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:), v5, MEMORY[0x1E0DEE9C0] + 8);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  unint64_t v6;
  _BYTE v9[40];

  v2 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1E0C80A78](v2);
  v4 = &v9[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  if (*(_QWORD *)(a1 + 24))
  {
    outlined init with copy of CurareInteractionStream?(a1, (uint64_t)v9);
  }
  else
  {
    type metadata accessor for PommesResponse();
    static PommesResponse.makeDefaultInteractionStream()((uint64_t)v9);
  }
  swift_storeEnumTagMultiPayload();
  v5 = PommesResponse.requestId.getter();
  specialized static CurareDonation.donateCurareValue(_:with:into:)((uint64_t)v4, v5, v6, a1);
  swift_bridgeObjectRelease();
  outlined destroy of PommesCurareInteractionValue((uint64_t)v4);
  return outlined destroy of CurareInteractionStream?((uint64_t)v9);
}

uint64_t sub_1C23C9C34()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 80) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse() - 8)
                          + 80);
  v5 = v1[2];
  v6 = v1[3];
  v7 = (uint64_t)(v1 + 4);
  v8 = v1[9];
  v9 = (uint64_t)v1 + ((v4 + 80) & ~v4);
  v10 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v10;
  *v10 = v2;
  v10[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(a1, v5, v6, v7, v8, v9);
}

uint64_t sub_1C23C9D64()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(unsigned __int8 *)(v2 + 80);
  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + ((v3 + 72) & ~v3), v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CurareDonation.donateCurareInfo(for:into:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = *(unsigned __int8 *)(*(_QWORD *)(type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest() - 8)
                          + 80);
  v5 = *(_QWORD *)(v1 + 16);
  v6 = *(_QWORD *)(v1 + 24);
  v7 = v1 + 32;
  v8 = v1 + ((v4 + 72) & ~v4);
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in static CurareDonation.donateCurareInfo(for:into:)(a1, v5, v6, v7, v8);
}

uint64_t sub_1C23C9E7C()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  if (*(_QWORD *)(v0 + 56))
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;

  v4 = v1[2];
  v5 = v1[3];
  v6 = (uint64_t)(v1 + 4);
  v7 = v1[9];
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v8;
  *v8 = v2;
  v8[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(a1, v4, v5, v6, v7);
}

uint64_t dispatch thunk of CurareInteractionStream.init(streamId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t dispatch thunk of CurareInteractionStream.insert(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 16))();
}

uint64_t dispatch thunk of CurareInteractionStream.shouldInsertInteraction()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

ValueMetadata *type metadata accessor for CurareDonation()
{
  return &type metadata for CurareDonation;
}

uint64_t partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in static CurareDonation.donateCurareResponseUsedMarker(from:into:)(*(_QWORD *)(v0 + 16));
}

uint64_t type metadata accessor for PommesCurareInteractionValue()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PommesCurareInteractionValue;
  if (!type metadata singleton initialization cache for PommesCurareInteractionValue)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t specialized static CurareJSONBuilder.copyFields(from:to:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  void (*v11)(char *, uint64_t);
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v18 = *(_QWORD *)(v0 - 8);
  v19 = v0;
  v1 = MEMORY[0x1E0C80A78](v0);
  v17 = (char *)&v16 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v1);
  v16 = (char *)&v16 - v3;
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v6);
  v10 = (char *)&v16 - v9;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryString.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.queryConfidenceScore.setter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.getter();
  v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v10, v4);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.ResponseMetadata.domainName.setter();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v8, v10, v4);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.responseMetadata.setter();
  v11(v10, v4);
  v12 = v16;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  v13 = v18;
  v14 = v19;
  (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v17, v12, v19);
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v12, v14);
}

uint64_t specialized static CurareJSONBuilder.build(from:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint8_t *v24;
  char *v25;
  uint64_t v26;
  void (*v27)(char *, uint64_t);
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint8_t *v35;
  uint8_t *v36;
  _QWORD v38[2];
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45[3];
  uint64_t v46;

  v0 = type metadata accessor for JSONEncodingOptions();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v38 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x1E0C80A78](v4);
  v8 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x1E0C80A78](v6);
  v11 = (char *)v38 - v10;
  MEMORY[0x1E0C80A78](v9);
  v13 = (char *)v38 - v12;
  if (one-time initialization token for lazySetup != -1)
    swift_once();
  v44 = v8;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.init()();
  specialized static CurareJSONBuilder.copyFields(from:to:)();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  v42 = __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  v15 = Logger.logObject.getter();
  v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    v17 = swift_slowAlloc();
    v41 = v0;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc();
    v40 = v1;
    v20 = v19;
    v45[0] = v19;
    v39 = v3;
    *(_DWORD *)v18 = 136315138;
    v38[1] = v18 + 4;
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v11, v13, v4);
    v21 = String.init<A>(describing:)();
    v46 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v21, v22, v45);
    v3 = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v15, v16, "CURARE: filtered to %s", v18, 0xCu);
    swift_arrayDestroy();
    v23 = v20;
    v1 = v40;
    MEMORY[0x1C3BBFF64](v23, -1, -1);
    v24 = v18;
    v0 = v41;
    MEMORY[0x1C3BBFF64](v24, -1, -1);
  }

  swift_beginAccess();
  v25 = v44;
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v44, v13, v4);
  JSONEncodingOptions.init()();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_SiriPegasusResponse and conformance Apple_Parsec_Siri_V2alpha_SiriPegasusResponse, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D1E0], MEMORY[0x1E0D6D198]);
  v26 = v43;
  v43 = Message.jsonString(options:)();
  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v27 = *(void (**)(char *, uint64_t))(v5 + 8);
    v27(v25, v4);
    v27(v13, v4);
    return v43;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    v29 = *(char **)(v5 + 8);
    v30 = v25;
    v31 = v4;
    ((void (*)(char *, uint64_t))v29)(v30, v4);
    swift_bridgeObjectRetain();
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      v44 = v29;
      v35 = v34;
      *(_DWORD *)v34 = 134217984;
      v42 = (uint64_t)(v34 + 4);
      v28 = v43;
      v46 = String.count.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v32, v33, "CURARE: generated JSON (%ldb) for donation", v35, 0xCu);
      v36 = v35;
      v29 = v44;
      MEMORY[0x1C3BBFF64](v36, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      v28 = v43;
    }
    ((void (*)(char *, uint64_t))v29)(v13, v31);
  }
  return v28;
}

void specialized static CurareDonation.makeCurareFeatureStoreInteraction(forID:value:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  _QWORD v22[7];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;

  v22[5] = a2;
  v22[4] = a1;
  v4 = type metadata accessor for JSONEncodingOptions();
  v32 = *(_QWORD *)(v4 - 8);
  v33 = v4;
  MEMORY[0x1E0C80A78](v4);
  v30 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  v7 = MEMORY[0x1E0C80A78](v6);
  MEMORY[0x1E0C80A78](v7);
  v8 = type metadata accessor for String.Encoding();
  MEMORY[0x1E0C80A78](v8);
  v22[2] = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Google_Protobuf_Any();
  v31 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v34 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = type metadata accessor for Debuglevelspb_AnyArray();
  v24 = *(_QWORD *)(v25 - 8);
  MEMORY[0x1E0C80A78](v25);
  v29 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (key: String, value: Debuglevelspb_AnyArray)?);
  v14 = MEMORY[0x1E0C80A78](v13);
  v28 = (char *)v22 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v14);
  v27 = (char *)v22 - v16;
  v23 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  v22[6] = *(_QWORD *)(v23 - 8);
  v17 = MEMORY[0x1E0C80A78](v23);
  v26 = (char *)v22 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v19 = type metadata accessor for PommesCurareInteractionValue();
  MEMORY[0x1E0C80A78](v19);
  outlined init with copy of PommesCurareInteractionValue(a3, (uint64_t)v22 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = (char *)&loc_1C23CA8D8 + *((int *)qword_1C23CB3E8 + swift_getEnumCaseMultiPayload());
  __asm { BR              X10 }
}

id sub_1C23CA8E8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  id v11;
  uint64_t v12;
  void *v13;
  void *v14;

  v3 = *(_QWORD *)(v2 - 384);
  v4 = v0;
  v5 = *(id *)(v2 - 376);
  (*(void (**)(uint64_t, uint64_t, id))(v3 + 32))(v1, v4, v5);
  v6 = *(_QWORD *)(v2 - 328);
  v7 = specialized static CurareJSONBuilder.build(from:)();
  if (v6)
  {
    (*(void (**)(uint64_t, id))(v3 + 8))(v1, v5);
  }
  else
  {
    v9 = v7;
    v10 = v8;
    *(_QWORD *)(v2 - 328) = 0;
    (*(void (**)(uint64_t, id))(v3 + 8))(v1, v5);
    v11 = objc_allocWithZone(MEMORY[0x1E0D20F68]);
    v12 = *(_QWORD *)(v2 - 392);
    swift_bridgeObjectRetain();
    v13 = (void *)MEMORY[0x1C3BBEC44](v9, v10);
    swift_bridgeObjectRelease();
    v14 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v2 - 400), v12);
    swift_bridgeObjectRelease();
    v5 = objc_msgSend(v11, sel_initWithJsonStr_interactionId_dataVersion_, v13, v14, 0);

  }
  return v5;
}

void specialized static CurareDonation.donateCurareValue(_:with:into:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  NSObject *v23;
  os_log_type_t v24;
  uint8_t *v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *oslog;
  __int128 v32;
  uint64_t v33;
  _QWORD v34[3];
  uint64_t v35;
  uint64_t v36;

  if (a3)
  {
    outlined init with copy of CurareInteractionStream?(a4, (uint64_t)&v32);
    if (v33)
    {
      outlined init with take of AppDataProviding(&v32, (uint64_t)v34);
      v7 = v35;
      v8 = v36;
      __swift_project_boxed_opaque_existential_1(v34, v35);
      v9 = *(uint64_t (**)(uint64_t, uint64_t))(v8 + 24);
      swift_bridgeObjectRetain();
      if ((v9(v7, v8) & 1) != 0)
      {
        specialized static CurareDonation.makeCurareFeatureStoreInteraction(forID:value:)(a2, a3, a1);
        if (v10)
        {
          v18 = v35;
          v19 = v36;
          __swift_project_boxed_opaque_existential_1(v34, v35);
          v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16);
          v21 = swift_unknownObjectRetain();
          v20(v21, v18, v19);
          swift_unknownObjectRelease();
          if (one-time initialization token for pommes != -1)
            swift_once();
          v26 = type metadata accessor for Logger();
          __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
          swift_bridgeObjectRetain();
          v27 = Logger.logObject.getter();
          v28 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v27, v28))
          {
            v29 = (uint8_t *)swift_slowAlloc();
            v30 = swift_slowAlloc();
            *(_QWORD *)&v32 = v30;
            *(_DWORD *)v29 = 136315138;
            swift_bridgeObjectRetain();
            getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, (uint64_t *)&v32);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl(&dword_1C2356000, v27, v28, "Inserted Curare feature for interaction ID: %s", v29, 0xCu);
            swift_arrayDestroy();
            MEMORY[0x1C3BBFF64](v30, -1, -1);
            MEMORY[0x1C3BBFF64](v29, -1, -1);
            swift_unknownObjectRelease();

          }
          else
          {

            swift_bridgeObjectRelease_n();
            swift_unknownObjectRelease();
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          if (one-time initialization token for pommes != -1)
            swift_once();
          v22 = type metadata accessor for Logger();
          __swift_project_value_buffer(v22, (uint64_t)static Logger.pommes);
          v23 = Logger.logObject.getter();
          v24 = static os_log_type_t.debug.getter();
          if (os_log_type_enabled(v23, v24))
          {
            v25 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v25 = 0;
            _os_log_impl(&dword_1C2356000, v23, v24, "Interaction returned by makeCurareFeatureStoreInteraction was nil", v25, 2u);
            MEMORY[0x1C3BBFF64](v25, -1, -1);
          }

        }
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
        return;
      }
      swift_bridgeObjectRelease();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v34);
    }
    else
    {
      outlined destroy of CurareInteractionStream?((uint64_t)&v32);
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1C2356000, v15, v16, "Skipping Curare feature donation: no stream available, or stream not accepting interactions.", v17, 2u);
      MEMORY[0x1C3BBFF64](v17, -1, -1);
    }

  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    oslog = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, oslog, v12, "Skipping Curare donation because this POMMES response doesn't have a request ID", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }

  }
}

uint64_t outlined destroy of PommesCurareInteractionValue(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for PommesCurareInteractionValue();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of CurareInteractionStream?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CurareInteractionStream?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of PommesCurareInteractionValue(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for PommesCurareInteractionValue();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type [[String : String]] and conformance <A> [A]()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;

  result = lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [[String : String]]);
    v2 = lazy protocol witness table accessor for type [String : String] and conformance <> [A : B]();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF10], v1, &v2);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [[String : String]] and conformance <A> [A]);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:)()
{
  uint64_t v0;

  return closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:into:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
}

uint64_t partial apply for closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)()
{
  uint64_t *v0;

  return closure #1 in closure #1 in static CurareDonation.donateCurareInfo(for:with:into:)(v0[2], v0[3], v0[4]);
}

uint64_t *initializeBufferWithCopyOfBuffer for PommesCurareInteractionValue(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unsigned int EnumCaseMultiPayload;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v5 = *(_QWORD *)(a3 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(unint64_t)v6));
    swift_retain();
  }
  else
  {
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(a1, a2, v10);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(v5 + 64));
    }
    else
    {
      v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t destroy for PommesCurareInteractionValue(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;

  result = swift_getEnumCaseMultiPayload();
  if ((_DWORD)result == 2)
  {
    v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
  }
  else
  {
    if (result > 1)
      return result;
    v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
}

void *initializeWithCopy for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithCopy for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PommesCurareInteractionValue((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

void *initializeWithTake for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload > 1)
  {
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
  }
  else
  {
    v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
    (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for PommesCurareInteractionValue(void *a1, const void *a2, uint64_t a3)
{
  unsigned int EnumCaseMultiPayload;
  uint64_t v7;
  uint64_t v8;

  if (a1 != a2)
  {
    outlined destroy of PommesCurareInteractionValue((uint64_t)a1);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 2)
    {
      v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(a1, a2, v8);
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload > 1)
    {
      memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(a3 - 8) + 64));
    }
    else
    {
      v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
      (*(void (**)(void *, const void *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesCurareInteractionValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a3 - 8) + 48))();
}

uint64_t storeEnumTagSinglePayload for PommesCurareInteractionValue(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a4 - 8) + 56))();
}

uint64_t destructiveInjectEnumTag for PommesCurareInteractionValue()
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata completion function for PommesCurareInteractionValue()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusRequest();
    if (v2 <= 0x3F)
    {
      swift_initEnumMetadataMultiPayload();
      return 0;
    }
  }
  return result;
}

void *PommesAssistantIDManager.IDKey.unsafeMutableAddressor()
{
  return &static PommesAssistantIDManager.IDKey;
}

unint64_t static PommesAssistantIDManager.IDKey.getter()
{
  return 0xD000000000000016;
}

void *PommesAssistantIDManager.ExpirationDateKey.unsafeMutableAddressor()
{
  return &static PommesAssistantIDManager.ExpirationDateKey;
}

unint64_t static PommesAssistantIDManager.ExpirationDateKey.getter()
{
  return 0xD000000000000024;
}

void *PommesAssistantIDManager.DefaultExpirationTimeInterval.unsafeMutableAddressor()
{
  return &static PommesAssistantIDManager.DefaultExpirationTimeInterval;
}

double static PommesAssistantIDManager.DefaultExpirationTimeInterval.getter()
{
  return 900.0;
}

id PommesAssistantIDManager.init(pommesSearchRequest:)(uint64_t a1)
{
  id v2;

  if (*(_QWORD *)(a1 + *(int *)(type metadata accessor for PommesSearchRequest(0) + 52)))
    swift_bridgeObjectRetain();
  v2 = specialized PommesAssistantIDManager.init(realAssistantID:)();
  outlined destroy of PommesSearchRequest(a1);
  return v2;
}

uint64_t static PommesAssistantIDManager.shouldReplaceAssistantID.getter()
{
  id v0;
  unsigned int v1;

  v0 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v1 = objc_msgSend(v0, sel_longLivedIdentifierUploadingEnabled);

  return v1 ^ 1;
}

Swift::String_optional __swiftcall PommesAssistantIDManager.effectiveAssistantID()()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  id v10;
  unsigned __int8 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  Swift::String_optional result;
  uint64_t v16;

  v3 = v2;
  v4 = v1;
  v5 = v0;
  v6 = type metadata accessor for UUID();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v11 = objc_msgSend(v10, sel_longLivedIdentifierUploadingEnabled);

  if ((v11 & 1) != 0)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    PommesAssistantIDManager.replacementAssistantID()(v5, v4, v3, (uint64_t)v9);
    v4 = UUID.uuidString.getter();
    v3 = v12;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  v13 = v4;
  v14 = (void *)v3;
  result.value._object = v14;
  result.value._countAndFlagsBits = v13;
  return result;
}

void PommesAssistantIDManager.replacementAssistantID()(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  id v27;
  void *v28;
  void *v29;
  id v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  void (*v39)(char *, uint64_t *, uint64_t);
  void *v40;
  id v41;
  uint64_t v42;
  int v43;
  char *v44;
  double v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  uint8_t *v49;
  uint64_t v50;
  unint64_t v51;
  void (*v52)(char *, uint64_t);
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  _QWORD v59[2];
  uint8_t *v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70[3];
  uint64_t v71;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for Date();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = MEMORY[0x1E0C80A78](v11);
  v15 = (char *)v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)v59 - v16;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  MEMORY[0x1E0C80A78](v18);
  v20 = (_QWORD *)((char *)v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = type metadata accessor for UUID();
  v22 = MEMORY[0x1E0C80A78](v21);
  v25 = (char *)v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a1)
  {
    UUID.init()();
    return;
  }
  v61 = v17;
  v62 = v11;
  v63 = v25;
  v64 = v23;
  v65 = v22;
  v66 = a2;
  v67 = a3;
  v26 = a4;
  v27 = a1;
  v28 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000016, 0x80000001C2503230);
  v29 = v27;
  v30 = objc_msgSend(v27, sel_objectForKey_, v28);

  if (v30)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v68 = 0u;
    v69 = 0u;
  }
  outlined init with take of Any?((uint64_t)&v68, (uint64_t)v70);
  if (!v71)
  {
    v33 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v34 = v70;
    goto LABEL_11;
  }
  if ((swift_dynamicCast() & 1) != 0)
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    v32 = v64;
    v31 = v65;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v64 + 48))(v20, 1, v65) == 1)
    {
      v33 = &demangling cache variable for type metadata for UUID?;
      v34 = v20;
LABEL_11:
      outlined destroy of MediaUserStateCenter?((uint64_t)v34, v33);
      goto LABEL_12;
    }
    v39 = *(void (**)(char *, uint64_t *, uint64_t))(v32 + 32);
    v39(v63, v20, v31);
    v40 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000024, 0x80000001C2503250);
    v41 = objc_msgSend(v29, sel_objectForKey_, v40);

    if (v41)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      v68 = 0u;
      v69 = 0u;
    }
    v42 = v62;
    outlined init with take of Any?((uint64_t)&v68, (uint64_t)v70);
    if (v71)
    {
      v43 = swift_dynamicCast();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v10, v43 ^ 1u, 1, v42);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v42) != 1)
      {
        v44 = v61;
        (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v61, v10, v42);
        Date.timeIntervalSinceNow.getter();
        if (v45 >= 0.0)
        {
          (*(void (**)(char *, uint64_t))(v12 + 8))(v44, v42);

          v39((char *)v26, (uint64_t *)v63, v65);
          return;
        }
        if (one-time initialization token for pommes != -1)
          swift_once();
        v46 = type metadata accessor for Logger();
        __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
        (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v15, v61, v42);
        v47 = Logger.logObject.getter();
        v48 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v47, v48))
        {
          v49 = (uint8_t *)swift_slowAlloc();
          v62 = swift_slowAlloc();
          v70[0] = v62;
          v60 = v49;
          *(_DWORD *)v49 = 136315138;
          v59[1] = v49 + 4;
          lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
          v50 = dispatch thunk of CustomStringConvertible.description.getter();
          *(_QWORD *)&v68 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v50, v51, v70);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v52 = *(void (**)(char *, uint64_t))(v12 + 8);
          v52(v15, v42);
          v53 = v60;
          _os_log_impl(&dword_1C2356000, v47, v48, "Replacement assistant ID is expired (at %s).", v60, 0xCu);
          v54 = v62;
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v54, -1, -1);
          MEMORY[0x1C3BBFF64](v53, -1, -1);
        }
        else
        {
          v52 = *(void (**)(char *, uint64_t))(v12 + 8);
          v52(v15, v42);
        }

        PommesAssistantIDManager.mintReplacementAssistantID()(a1, v26);
        v52(v61, v42);
LABEL_33:
        (*(void (**)(char *, uint64_t))(v64 + 8))(v63, v65);
        return;
      }
    }
    else
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v70, (uint64_t *)&demangling cache variable for type metadata for Any?);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v42);
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)v10, &demangling cache variable for type metadata for Date?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.pommes);
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v58 = 0;
      _os_log_impl(&dword_1C2356000, v56, v57, "Unable to read expiration date for assistantID from user defaults. This should have been registered; why is it missing?",
        v58,
        2u);
      MEMORY[0x1C3BBFF64](v58, -1, -1);
    }

    PommesAssistantIDManager.mintReplacementAssistantID()(a1, v26);
    goto LABEL_33;
  }
LABEL_12:
  if (one-time initialization token for pommes != -1)
    swift_once();
  v35 = type metadata accessor for Logger();
  __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
  v36 = Logger.logObject.getter();
  v37 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v36, v37))
  {
    v38 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v38 = 0;
    _os_log_impl(&dword_1C2356000, v36, v37, "No assistant ID saved in user defaults.", v38, 2u);
    MEMORY[0x1C3BBFF64](v38, -1, -1);
  }

  PommesAssistantIDManager.mintReplacementAssistantID()(a1, v26);
}

uint64_t PommesAssistantIDManager.mintReplacementAssistantID()@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  _BOOL4 v16;
  uint64_t v17;
  uint8_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint8_t *v22;
  char *v23;
  void (*v24)(char *, uint64_t);
  id v25;
  uint64_t v26;
  void *v27;
  void *v28;
  Class isa;
  void *v30;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  id v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;

  v36 = a1;
  v3 = type metadata accessor for Date();
  v4 = *(_QWORD *)(v3 - 8);
  v5 = MEMORY[0x1E0C80A78](v3);
  v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v37 = (char *)&v32 - v8;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  UUID.init()();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  v16 = os_log_type_enabled(v14, v15);
  v35 = a2;
  if (v16)
  {
    v17 = swift_slowAlloc();
    v33 = v4;
    v18 = (uint8_t *)v17;
    v19 = swift_slowAlloc();
    v39 = v19;
    v34 = v3;
    *(_DWORD *)v18 = 136315138;
    v32 = v18 + 4;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UUID and conformance UUID, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0998], MEMORY[0x1E0CB09F0]);
    v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v38 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v20, v21, &v39);
    v3 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    _os_log_impl(&dword_1C2356000, v14, v15, "Minted new replacement assistantID: %s", v18, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v19, -1, -1);
    v22 = v18;
    v4 = v33;
    MEMORY[0x1C3BBFF64](v22, -1, -1);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  static Date.now.getter();
  v23 = v37;
  Date.addingTimeInterval(_:)();
  v24 = *(void (**)(char *, uint64_t))(v4 + 8);
  v24(v7, v3);
  if (v36)
  {
    v25 = v36;
    v26 = UUID.uuidString.getter();
    v27 = (void *)MEMORY[0x1C3BBEC44](v26);
    swift_bridgeObjectRelease();
    v28 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000016, 0x80000001C2503230);
    objc_msgSend(v25, sel_setObject_forKey_, v27, v28);

    isa = Date._bridgeToObjectiveC()().super.isa;
    v30 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000024, 0x80000001C2503250);
    objc_msgSend(v25, sel_setObject_forKey_, isa, v30);

  }
  return ((uint64_t (*)(char *, uint64_t))v24)(v23, v3);
}

Swift::Void __swiftcall PommesAssistantIDManager.reset()()
{
  void *v0;
  void *v1;
  void *v2;
  id v3;

  if (v0)
  {
    v1 = v0;
    v2 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000016, 0x80000001C2503230);
    objc_msgSend(v1, sel_removeObjectForKey_, v2);

    v3 = (id)MEMORY[0x1C3BBEC44](0xD000000000000024, 0x80000001C2503250);
    objc_msgSend(v1, sel_removeObjectForKey_, v3);

  }
}

id specialized PommesAssistantIDManager.init(realAssistantID:)()
{
  id v0;
  void *v1;
  id v2;
  uint64_t inited;
  id v4;
  Class isa;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v12;

  v0 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
  v2 = objc_msgSend(v0, sel_initWithSuiteName_, v1);

  if (v2)
  {
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1C24FA1B0;
    *(_QWORD *)(inited + 32) = 0xD000000000000024;
    *(_QWORD *)(inited + 40) = 0x80000001C2503250;
    *(_QWORD *)(inited + 72) = type metadata accessor for Date();
    __swift_allocate_boxed_opaque_existential_1((uint64_t *)(inited + 48));
    v4 = v2;
    static Date.distantPast.getter();
    specialized Dictionary.init(dictionaryLiteral:)(inited);
    isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_registerDefaults_, isa);

  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v6 = type metadata accessor for Logger();
    __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
    v7 = Logger.logObject.getter();
    v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      v9 = (uint8_t *)swift_slowAlloc();
      v10 = swift_slowAlloc();
      v12 = v10;
      *(_DWORD *)v9 = 136315138;
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000015, 0x80000001C25024C0, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v7, v8, "No user defaults access to %s! This may impact dialog randomization from Pegasus.", v9, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v10, -1, -1);
      MEMORY[0x1C3BBFF64](v9, -1, -1);
    }

  }
  return v2;
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void specialized PommesAssistantIDManager.save(assistantID:expiringAt:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3;
  uint64_t v4;
  void *v5;
  void *v6;
  Class isa;
  id v8;

  if (a3)
  {
    v3 = a3;
    v4 = UUID.uuidString.getter();
    v5 = (void *)MEMORY[0x1C3BBEC44](v4);
    swift_bridgeObjectRelease();
    v6 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000016, 0x80000001C2503230);
    objc_msgSend(v3, sel_setObject_forKey_, v5, v6);

    isa = Date._bridgeToObjectiveC()().super.isa;
    v8 = (id)MEMORY[0x1C3BBEC44](0xD000000000000024, 0x80000001C2503250);
    objc_msgSend(v3, sel_setObject_forKey_, isa, v8);

  }
}

uint64_t destroy for PommesAssistantIDManager(id *a1)
{

  return swift_bridgeObjectRelease();
}

_QWORD *initializeBufferWithCopyOfBuffer for PommesAssistantIDManager(_QWORD *a1, uint64_t a2)
{
  void *v3;
  uint64_t v4;
  id v5;

  v3 = *(void **)a2;
  v4 = *(_QWORD *)(a2 + 8);
  *a1 = *(_QWORD *)a2;
  a1[1] = v4;
  a1[2] = *(_QWORD *)(a2 + 16);
  v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PommesAssistantIDManager(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  v4 = *(void **)a1;
  v5 = *(void **)a2;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  v6 = v5;

  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for PommesAssistantIDManager(uint64_t a1, _QWORD *a2)
{
  void *v4;
  uint64_t v5;

  v4 = *(void **)a1;
  *(_QWORD *)a1 = *a2;

  v5 = a2[2];
  *(_QWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 16) = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PommesAssistantIDManager(uint64_t *a1, unsigned int a2)
{
  uint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *((_BYTE *)a1 + 24))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesAssistantIDManager(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
      *(_QWORD *)result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for PommesAssistantIDManager()
{
  return &type metadata for PommesAssistantIDManager;
}

uint64_t PommesEngagement.tapEngagement(engagementContext:with:)(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t PommesEngagement.tapEngagement(engagementContext:with:)()
{
  uint64_t v0;

  Apple_Parsec_Responseframework_Engagement_V1alpha_EngagementResponse.init()();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t protocol witness for PommesEngagementProtocol.tapEngagement(engagementContext:with:) in conformance PommesEngagement(uint64_t a1)
{
  uint64_t v1;

  *(_QWORD *)(v1 + 16) = a1;
  return swift_task_switch();
}

uint64_t dispatch thunk of PommesEngagementProtocol.tapEngagement(engagementContext:with:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v11;
  uint64_t (*v13)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(a5 + 8) + *(_QWORD *)(a5 + 8));
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 16) = v11;
  *v11 = v5;
  v11[1] = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  return v13(a1, a2, a3, a4, a5);
}

ValueMetadata *type metadata accessor for PommesEngagement()
{
  return &type metadata for PommesEngagement;
}

uint64_t PommesSearchRequestProcessorErrorUnableToHandleReason.loggingReason.getter()
{
  unsigned __int8 *v0;

  return *v0;
}

uint64_t PommesSearchRequestProcessorErrorFailureReason.loggingReason.getter()
{
  char *v0;

  return dword_1C24FAD80[*v0];
}

BOOL static PommesSearchRequestProcessorErrorFailureReason.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void PommesSearchRequestProcessorErrorFailureReason.equivalentPommesError.getter()
{
  __asm { BR              X10 }
}

uint64_t sub_1C23CD81C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = *MEMORY[0x1E0D9E828];
  v2 = type metadata accessor for PommesError();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 104))(v0, v1, v2);
}

void PommesSearchRequestProcessorErrorFailureReason.hash(into:)()
{
  unsigned __int8 *v0;

  Hasher._combine(_:)(*v0);
}

void *static PommesSearchRequestProcessorErrorFailureReason.allCases.getter()
{
  return &outlined read-only object #0 of static PommesSearchRequestProcessorErrorFailureReason.allCases.getter;
}

void protocol witness for static CaseIterable.allCases.getter in conformance PommesSearchRequestProcessorErrorFailureReason(_QWORD *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance PommesSearchRequestProcessorErrorFailureReason;
}

BOOL specialized static PommesSearchRequestProcessorError.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v2;
  unsigned int v3;

  v2 = *a1;
  v3 = *a2;
  if (v2 >> 6)
  {
    if (v2 >> 6 == 1)
    {
      if ((v3 & 0xC0) == 0x40)
        return ((v3 ^ v2) & 0x3F) == 0;
    }
    else if (v2 == 128)
    {
      if (v3 == 128)
        return 1;
    }
    else if (v2 == 129)
    {
      if (v3 == 129)
        return 1;
    }
    else if (v3 == 130)
    {
      return 1;
    }
  }
  else if (v3 <= 0x3F)
  {
    return v2 == v3;
  }
  return 0;
}

unint64_t lazy protocol witness table accessor for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason;
  if (!lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesSearchRequestProcessorErrorUnableToHandleReason, &type metadata for PommesSearchRequestProcessorErrorUnableToHandleReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorUnableToHandleReason and conformance PommesSearchRequestProcessorErrorUnableToHandleReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason;
  if (!lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesSearchRequestProcessorErrorFailureReason, &type metadata for PommesSearchRequestProcessorErrorFailureReason);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesSearchRequestProcessorErrorFailureReason and conformance PommesSearchRequestProcessorErrorFailureReason);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A]()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A];
  if (!lazy protocol witness table cache variable for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A])
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&demangling cache variable for type metadata for [PommesSearchRequestProcessorErrorFailureReason]);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF50], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [PommesSearchRequestProcessorErrorFailureReason] and conformance [A]);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequestProcessorError(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;

  if (!a2)
    return 0;
  if (a2 < 0x1E)
    goto LABEL_17;
  if (a2 + 226 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 226) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 226;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 226;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 226;
  }
LABEL_17:
  v6 = ((*a1 >> 1) & 0x1C | (*a1 >> 6)) ^ 0x1F;
  if (v6 >= 0x1D)
    v6 = -1;
  return v6 + 1;
}

uint64_t storeEnumTagSinglePayload for PommesSearchRequestProcessorError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 226 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 226) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x1E)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x1D)
    return ((uint64_t (*)(void))((char *)&loc_1C23CDB18 + 4 * byte_1C24FB969[v4]))();
  *a1 = a2 - 30;
  return ((uint64_t (*)(void))((char *)sub_1C23CDB4C + 4 * byte_1C24FB964[v4]))();
}

uint64_t sub_1C23CDB4C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23CDB54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23CDB5CLL);
  return result;
}

uint64_t sub_1C23CDB74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23CDB7CLL);
  *(_BYTE *)result = 8 * (((-a2 >> 2) & 7) - 8 * a2);
  return result;
}

uint64_t sub_1C23CDB80(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23CDB88(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *destructiveInjectEnumTag for PommesSearchRequestProcessorError(_BYTE *result, unsigned int a2)
{
  if (a2 < 2)
    *result = *result & 7 | ((_BYTE)a2 << 6);
  else
    *result = (a2 + 6) & 7 | 0x80;
  return result;
}

ValueMetadata *type metadata accessor for PommesSearchRequestProcessorError()
{
  return &type metadata for PommesSearchRequestProcessorError;
}

uint64_t getEnumTagSinglePayload for PommesSearchRequestProcessorErrorUnableToHandleReason(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesSearchRequestProcessorErrorUnableToHandleReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_1C23CDCB0 + 4 * byte_1C24FB973[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1C23CDCE4 + 4 * byte_1C24FB96E[v4]))();
}

uint64_t sub_1C23CDCE4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23CDCEC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23CDCF4);
  return result;
}

uint64_t sub_1C23CDD00(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23CDD08);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_1C23CDD0C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23CDD14(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PommesSearchRequestProcessorErrorUnableToHandleReason()
{
  return &type metadata for PommesSearchRequestProcessorErrorUnableToHandleReason;
}

uint64_t storeEnumTagSinglePayload for PommesSearchRequestProcessorErrorFailureReason(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 3 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 3) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFD)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFC)
    return ((uint64_t (*)(void))((char *)&loc_1C23CDD7C + 4 * byte_1C24FB97D[v4]))();
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1C23CDDB0 + 4 * byte_1C24FB978[v4]))();
}

uint64_t sub_1C23CDDB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23CDDB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23CDDC0);
  return result;
}

uint64_t sub_1C23CDDCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23CDDD4);
  *(_BYTE *)result = a2 + 3;
  return result;
}

uint64_t sub_1C23CDDD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23CDDE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void *RouteInfoProfileSliceResolver.navigationNotRunningErrorCode.unsafeMutableAddressor()
{
  return &static RouteInfoProfileSliceResolver.navigationNotRunningErrorCode;
}

uint64_t static RouteInfoProfileSliceResolver.navigationNotRunningErrorCode.getter()
{
  return 1500;
}

void *RouteInfoProfileSliceResolver.mapsNotRunningErrorCode.unsafeMutableAddressor()
{
  return &static RouteInfoProfileSliceResolver.mapsNotRunningErrorCode;
}

uint64_t static RouteInfoProfileSliceResolver.mapsNotRunningErrorCode.getter()
{
  return 1501;
}

uint64_t RouteInfoProfileSliceResolver.__allocating_init()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = swift_allocObject();
  v4 = v3 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v6 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v7 = OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_dispatchGroup;
  *(_QWORD *)(v3 + v7) = dispatch_group_create();
  *(_QWORD *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6((uint64_t)v2, 1, 1, v5);
  v8 = v3 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v2, v8);
  swift_endAccess();
  return v3;
}

uint64_t RouteInfoProfileSliceResolver.init()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  char *v4;
  uint64_t v5;
  void (*v6)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;

  v1 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v1);
  v3 = (char *)&v10 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = (char *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue);
  v5 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v7 = OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_dispatchGroup;
  *(_QWORD *)(v0 + v7) = dispatch_group_create();
  *(_QWORD *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
  v6(v3, 1, 1, v5);
  v8 = v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
  swift_beginAccess();
  outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v3, v8);
  swift_endAccess();
  return v0;
}

uint64_t outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X5>, uint64_t *a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t (*v26)(uint64_t, uint64_t, uint64_t, char *);
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  _BOOL4 v43;
  uint8_t *v44;
  uint64_t v45;
  uint64_t v46;
  NSObject *v47;
  os_log_type_t v48;
  _BOOL4 v49;
  uint8_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t *v57;
  char *v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;

  v65 = a6;
  v72 = a7;
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
  v70 = *(_QWORD *)(v12 - 8);
  v71 = v12;
  MEMORY[0x1E0C80A78](v12);
  v61 = (char *)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v63 = *(_QWORD *)(v14 - 8);
  v64 = v14;
  MEMORY[0x1E0C80A78](v14);
  v60 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  v17 = MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v59 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v59 - v20;
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v23 = *(_QWORD *)(v22 - 8);
  MEMORY[0x1E0C80A78](v22);
  v25 = (char *)&v59 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, _QWORD, uint64_t))(v23 + 104))(v25, *MEMORY[0x1E0D6F1C8], v22);
  v26 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD, _QWORD))(*(_QWORD *)a4 + 128);
  v66 = a1;
  v67 = a2;
  v68 = a3;
  v69 = a4;
  v27 = a3;
  v28 = a5;
  v29 = (void *)v26(a1, a2, v27, v25);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  if (a5)
  {
    v30 = v65;
    if (v65)
    {
      v31 = v63;
      v32 = v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v63 + 56))(v21, 1, 1, v64);
      v33 = v62 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
      swift_beginAccess();
      swift_unknownObjectRetain();
      v34 = v30;
      outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v21, v33);
      swift_endAccess();
      RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(v28, v34);
      outlined init with copy of MediaUserStateCenter?(v33, (uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v19, 1, v32) != 1)
      {
        v55 = v60;
        v56 = (*(uint64_t (**)(char *, char *, uint64_t))(v31 + 32))(v60, v19, v32);
        v65 = &v59;
        MEMORY[0x1E0C80A78](v56);
        *(&v59 - 2) = (uint64_t)v55;
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E868], MEMORY[0x1E0D6E838]);
        v57 = v34;
        v58 = v61;
        v35 = v71;
        static Message.with(_:)();
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(_QWORD *)v69 + 136))(v66, v67, v68, v29);
        swift_unknownObjectRelease();

        (*(void (**)(char *, uint64_t))(v31 + 8))(v55, v32);
        v53 = v70;
        v52 = v72;
        (*(void (**)(uint64_t, char *, uint64_t))(v70 + 32))(v72, v58, v35);
        v51 = 0;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, v51, 1, v35);
      }
      outlined destroy of MediaUserStateCenter?((uint64_t)v19, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
      v35 = v71;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v36 = type metadata accessor for Logger();
      __swift_project_value_buffer(v36, (uint64_t)static Logger.pommes);
      v37 = Logger.logObject.getter();
      v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v39 = 0;
        _os_log_impl(&dword_1C2356000, v37, v38, "There was an error while creating the routeInfoProfileSlice. Returning no profile slice for .sliceLabelRouteInfo", v39, 2u);
        MEMORY[0x1C3BBFF64](v39, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v69 + 144))(v66, v67, v68, v29, 3);
      swift_unknownObjectRelease();

    }
    else
    {
      v45 = one-time initialization token for pommes;
      swift_unknownObjectRetain();
      if (v45 != -1)
        swift_once();
      v46 = type metadata accessor for Logger();
      __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
      v47 = Logger.logObject.getter();
      v48 = static os_log_type_t.error.getter();
      v49 = os_log_type_enabled(v47, v48);
      v35 = v71;
      if (v49)
      {
        v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v50 = 0;
        _os_log_impl(&dword_1C2356000, v47, v48, "Cannot create route info slice because there is no dispatch queue provided", v50, 2u);
        MEMORY[0x1C3BBFF64](v50, -1, -1);
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v69 + 144))(v66, v67, v68, v29, 3);
      swift_unknownObjectRelease();
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.error.getter();
    v43 = os_log_type_enabled(v41, v42);
    v35 = v71;
    if (v43)
    {
      v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v44 = 0;
      _os_log_impl(&dword_1C2356000, v41, v42, "Cannot create route info slice because there is no service helper", v44, 2u);
      MEMORY[0x1C3BBFF64](v44, -1, -1);
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(*(_QWORD *)v69 + 144))(v66, v67, v68, v29, 3);
  }

  v51 = 1;
  v52 = v72;
  v53 = v70;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v53 + 56))(v52, v51, 1, v35);
}

uint64_t closure #1 in RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, _QWORD))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6F1C8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C24FA1B0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v9 + v8, a2, v6);
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  id v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  id v17;
  void *v18;
  Class isa;
  uint64_t v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  void *v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void *v46;
  id v47;
  uint64_t v48;
  uint64_t aBlock[6];

  v3 = v2;
  v46 = a2;
  v47 = a1;
  v4 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  v43 = *((_QWORD *)v4 - 1);
  v5 = MEMORY[0x1E0C80A78](v4);
  v44 = v6;
  v45 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)&v41 - v7;
  v9 = type metadata accessor for UUID();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D881B8]), sel_init);
  UUID.init()();
  v14 = UUID.uuidString.getter();
  v16 = v15;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  v17 = v13;
  v42 = v14;
  v18 = (void *)MEMORY[0x1C3BBEC44](v14, v16);
  objc_msgSend(v17, sel_setAceId_, v18);

  objc_msgSend(v17, sel_setRefId_, 0);
  type metadata accessor for NSNumber();
  isa = NSNumber.init(integerLiteral:)(1).super.super.isa;
  objc_msgSend(v17, sel_setGetRoute_, isa);

  if (one-time initialization token for pommes != -1)
    swift_once();
  v20 = type metadata accessor for Logger();
  __swift_project_value_buffer(v20, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain();
  v21 = Logger.logObject.getter();
  v22 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v21, v22))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    v24 = swift_slowAlloc();
    v41 = v3;
    v25 = v24;
    aBlock[0] = v24;
    *(_DWORD *)v23 = 136315138;
    swift_bridgeObjectRetain();
    v48 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v42, v16, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v21, v22, "Starting ACE Command with ID: %s", v23, 0xCu);
    swift_arrayDestroy();
    v26 = v25;
    v3 = v41;
    MEMORY[0x1C3BBFF64](v26, -1, -1);
    MEMORY[0x1C3BBFF64](v23, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  Date.init()();
  v27 = &v8[v4[5]];
  *(_QWORD *)v27 = "SiriInformationSearch/RouteInfoProfileSliceResolver.swift";
  *((_QWORD *)v27 + 1) = 57;
  v27[16] = 2;
  *(_QWORD *)&v8[v4[6]] = 77;
  v28 = &v8[v4[7]];
  *(_QWORD *)v28 = "populateProfileSliceValue(serviceHelper:dispatchQueue:)";
  *((_QWORD *)v28 + 1) = 55;
  v28[16] = 2;
  v29 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(0xD00000000000002BLL);
  v30 = (uint64_t *)&v8[v4[8]];
  *v30 = v29;
  v30[1] = v31;
  v32 = v45;
  outlined init with copy of PerformanceUtil.Ticket((uint64_t)v8, v45);
  v33 = (*(unsigned __int8 *)(v43 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80);
  v34 = (v44 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
  v35 = swift_allocObject();
  outlined init with take of PerformanceUtil.Ticket(v32, v35 + v33);
  v36 = v46;
  *(_QWORD *)(v35 + v34) = v46;
  *(_QWORD *)(v35 + ((v34 + 15) & 0xFFFFFFFFFFFFFFF8)) = v3;
  aBlock[4] = (uint64_t)partial apply for closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:);
  aBlock[5] = v35;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed SABaseCommand?, @guaranteed Error?) -> ();
  aBlock[3] = (uint64_t)&block_descriptor_1;
  v37 = _Block_copy(aBlock);
  v38 = v17;
  v39 = v36;
  swift_retain();
  swift_release();
  objc_msgSend(v47, sel_handleCommand_completion_, v38, v37);
  _Block_release(v37);

  OS_dispatch_semaphore.wait()();
  return outlined destroy of PerformanceUtil.Ticket((uint64_t)v8);
}

uint64_t closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  _QWORD *v16;
  void *v17;
  id v18;
  id v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD aBlock[6];

  v23 = a4;
  v9 = type metadata accessor for DispatchWorkItemFlags();
  v22 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(a3, 0);
  v16 = (_QWORD *)swift_allocObject();
  v16[2] = a2;
  v16[3] = a5;
  v16[4] = a1;
  aBlock[4] = partial apply for closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:);
  aBlock[5] = v16;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_6;
  v17 = _Block_copy(aBlock);
  v18 = a2;
  v19 = a1;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v24 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x1C3BBF154](0, v15, v11, v17);
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

void closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, uint64_t a2, void *a3)
{
  id v4;
  uint64_t v5;
  id v6;
  id v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  id v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  id v16;
  uint64_t v17;
  id v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  id v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;

  if (a1)
  {
    v4 = a1;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v5 = type metadata accessor for Logger();
    __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
    v6 = a1;
    v7 = a1;
    v8 = Logger.logObject.getter();
    v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      v11 = swift_slowAlloc();
      v32 = v11;
      *(_DWORD *)v10 = 136315138;
      v12 = a1;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
      v13 = String.init<A>(describing:)();
      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v14, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      _os_log_impl(&dword_1C2356000, v8, v9, "Service helper returned an error: %s", v10, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v11, -1, -1);
      MEMORY[0x1C3BBFF64](v10, -1, -1);
    }
    else
    {

    }
    OS_dispatch_semaphore.signal()();

  }
  else if (a3)
  {
    v15 = one-time initialization token for pommes;
    v16 = a3;
    if (v15 != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    v18 = v16;
    v19 = Logger.logObject.getter();
    v20 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v19, v20))
    {
      v21 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v32 = v31;
      *(_DWORD *)v21 = 136315138;
      v22 = v18;
      v23 = objc_msgSend(v22, sel_description);
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v26, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v19, v20, "RouteInfoResponse %s", v21, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v31, -1, -1);
      MEMORY[0x1C3BBFF64](v21, -1, -1);

    }
    else
    {

    }
    RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(v18);
    OS_dispatch_semaphore.signal()();

  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v27 = type metadata accessor for Logger();
    __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1C2356000, v28, v29, "Ace Command returned from MAF is nil", v30, 2u);
      MEMORY[0x1C3BBFF64](v30, -1, -1);
    }

    OS_dispatch_semaphore.signal()();
  }
}

void RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(void *a1)
{
  unint64_t *v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  id v17;
  void *v18;
  uint64_t v19;
  void *v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  id v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  void *v29;
  id v30;
  void *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  void (**v37)(char *, char *, uint64_t);
  char *v38;
  uint64_t v39;
  id v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  unint64_t v51;
  unint64_t *v52;
  id v53;
  unint64_t *v54;
  id v55;
  uint64_t v56[5];

  v3 = *v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  v5 = MEMORY[0x1E0C80A78](v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v51 - v8;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  objc_opt_self();
  v14 = swift_dynamicCastObjCClass();
  if (!v14)
    return;
  v15 = v14;
  v16 = (void *)objc_opt_self();
  v55 = a1;
  v17 = objc_msgSend(v16, sel_aceObjectWithGenericCommand_, v15);
  if (!v17)
  {
LABEL_27:

    return;
  }
  v18 = v17;
  objc_opt_self();
  v19 = swift_dynamicCastObjCClass();
  if (!v19)
  {
    objc_opt_self();
    v28 = swift_dynamicCastObjCClass();
    if (v28)
    {
      v29 = (void *)v28;
      v53 = v18;
      v30 = objc_msgSend(v29, sel_route);
      if (v30)
      {
        v31 = v30;
        v52 = &v51;
        v32 = MEMORY[0x1E0C80A78](v30);
        v54 = v1;
        v33 = v7;
        *(&v51 - 2) = v32;
        *(&v51 - 1) = v3;
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
        static Message.with(_:)();

        (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v9, v13, v10);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
        outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v9, (uint64_t)v7);
        v34 = (uint64_t)v54
            + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
        swift_beginAccess();
        v35 = (uint64_t)v33;
LABEL_14:
        outlined assign with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?(v35, v34);
        swift_endAccess();
        return;
      }
      if (one-time initialization token for pommes != -1)
        swift_once();
      v47 = type metadata accessor for Logger();
      __swift_project_value_buffer(v47, (uint64_t)static Logger.pommes);
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v50 = 0;
        _os_log_impl(&dword_1C2356000, v48, v49, "Returned command has no provided route. Cannot construct routeInfoProfileSlice", v50, 2u);
        MEMORY[0x1C3BBFF64](v50, -1, -1);

        return;
      }

    }
    else
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v39 = type metadata accessor for Logger();
      __swift_project_value_buffer(v39, (uint64_t)static Logger.pommes);
      v40 = v18;
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        v44 = swift_slowAlloc();
        v56[0] = v44;
        *(_DWORD *)v43 = 136315138;
        swift_getObjectType();
        v45 = _typeName(_:qualified:)();
        v56[4] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v45, v46, v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v41, v42, "Service helper response was of type %s, not SALocalSearchGetNavigationStatusCompleted. Cannot complete RouteInfo profile slice", v43, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v44, -1, -1);
        MEMORY[0x1C3BBFF64](v43, -1, -1);

        return;
      }

    }
    goto LABEL_27;
  }
  v20 = (void *)v19;
  v53 = (id)v11;
  v54 = v1;
  v21 = v18;
  v22 = (unint64_t)objc_msgSend(v20, sel_errorCode);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v23 = type metadata accessor for Logger();
  __swift_project_value_buffer(v23, (uint64_t)static Logger.pommes);
  v24 = v21;
  v25 = Logger.logObject.getter();
  v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    v52 = (unint64_t *)v7;
    v27 = (uint8_t *)swift_slowAlloc();
    v51 = v22;
    *(_DWORD *)v27 = 134217984;
    v56[0] = (uint64_t)objc_msgSend(v20, (SEL)&selRef_promptContextProto);
    v22 = v51;
    v7 = (char *)v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl(&dword_1C2356000, v25, v26, "Command failed with error code = %ld", v27, 0xCu);
    MEMORY[0x1C3BBFF64](v27, -1, -1);

  }
  else
  {

  }
  v37 = (void (**)(char *, char *, uint64_t))v53;
  v36 = v54;
  if ((v22 & 0xFFFFFFFFFFFFFFFELL) == 0x5DC)
  {
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
    static Message.with(_:)();

    v37[4](v9, v13, v10);
    ((void (*)(char *, _QWORD, uint64_t, uint64_t))v37[7])(v9, 0, 1, v10);
    outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?((uint64_t)v9, (uint64_t)v7);
    v38 = v7;
    v34 = (uint64_t)v36
        + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
    swift_beginAccess();
    v35 = (uint64_t)v38;
    goto LABEL_14;
  }

}

uint64_t closure #1 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, _QWORD))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6FCD8]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D70590], v0);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
}

uint64_t closure #2 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t (**v21)(char *, uint64_t);
  uint64_t *boxed_opaque_existential_1;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t (**v33)(char *, uint64_t);
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[5];
  uint64_t v38;

  v31 = a1;
  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v29 = *(_QWORD *)(v3 - 8);
  v30 = v3;
  MEMORY[0x1E0C80A78](v3);
  v28 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  v35 = *(_QWORD *)(v38 - 8);
  MEMORY[0x1E0C80A78](v38);
  v34 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Google_Protobuf_Any();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v32 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  v10 = MEMORY[0x1E0C80A78](v9);
  v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v10);
  v14 = (char *)&v28 - v13;
  v15 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RouteInfo();
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x1E0C80A78](v15);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v36 = a2;
  v20 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RouteInfo and conformance Apple_Parsec_Siri_V2alpha_RouteInfo, v19, MEMORY[0x1E0D6E148]);
  v21 = v33;
  static Message.with(_:)();
  v37[3] = v15;
  v37[4] = v20;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v37);
  v33 = (uint64_t (**)(char *, uint64_t))v16;
  (*(void (**)(uint64_t *, char *, uint64_t))(v16 + 16))(boxed_opaque_existential_1, v18, v15);
  defaultAnyTypeURLPrefix.getter();
  Google_Protobuf_Any.init(message:partial:typePrefix:)();
  if (v21)
  {

    v23 = 1;
  }
  else
  {
    v23 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v14, v23, 1, v6);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v14, (uint64_t)v12, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    Google_Protobuf_Any.init()();
    outlined destroy of MediaUserStateCenter?((uint64_t)v12, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v32, v12, v6);
  }
  v24 = v30;
  v26 = v28;
  v25 = v29;
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.value.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v35 + 104))(v34, *MEMORY[0x1E0D6FCD8], v38);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v25 + 104))(v26, *MEMORY[0x1E0D70598], v24);
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
  outlined destroy of MediaUserStateCenter?((uint64_t)v14, &demangling cache variable for type metadata for Google_Protobuf_Any?);
  return v33[1](v18, v15);
}

id closure #1 in static RouteInfoProfileSliceResolver.buildRouteInfoSliceValue(aceRoute:)(int a1, id a2)
{
  id v3;
  void *v4;
  id v5;
  void *v6;
  id v7;
  void *v8;
  id v9;
  void *v10;
  id result;
  void *v12;

  v3 = objc_msgSend(a2, sel_originalWaypointRoute);
  if (v3)
  {
    v4 = v3;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.originalWaypointRoute.setter();
  }
  v5 = objc_msgSend(a2, sel_routeId);
  if (v5)
  {
    v6 = v5;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.routeID.setter();
  }
  v7 = objc_msgSend(a2, sel_sessionState);
  if (v7)
  {
    v8 = v7;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.sessionState.setter();
  }
  v9 = objc_msgSend(a2, sel_etaFilter);
  if (v9)
  {
    v10 = v9;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    Apple_Parsec_Siri_V2alpha_RouteInfo.etaFilter.setter();
  }
  result = objc_msgSend(a2, sel_evChargingMetadata);
  if (result)
  {
    v12 = result;
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    return (id)Apple_Parsec_Siri_V2alpha_RouteInfo.evChargingMetadata.setter();
  }
  return result;
}

uint64_t RouteInfoProfileSliceResolver.deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return v0;
}

uint64_t RouteInfoProfileSliceResolver.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);

  return swift_deallocClassInstance();
}

uint64_t partial apply for closure #1 in RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t ObjC metadata update function for RouteInfoProfileSliceResolver()
{
  return type metadata accessor for RouteInfoProfileSliceResolver();
}

uint64_t type metadata accessor for RouteInfoProfileSliceResolver()
{
  uint64_t result;

  result = type metadata singleton initialization cache for RouteInfoProfileSliceResolver;
  if (!type metadata singleton initialization cache for RouteInfoProfileSliceResolver)
    return swift_getSingletonMetadata();
  return result;
}

void type metadata completion function for RouteInfoProfileSliceResolver()
{
  unint64_t v0;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?();
  if (v0 <= 0x3F)
    swift_updateClassMetadata2();
}

uint64_t method lookup function for RouteInfoProfileSliceResolver()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of RouteInfoProfileSliceResolver.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  __int16 v3;
  uint64_t (*v4)(_OWORD *);
  __int128 v5;
  __int128 v6;
  _OWORD v8[5];
  uint64_t v9;
  __int16 v10;

  v2 = *(_QWORD *)(a1 + 80);
  v3 = *(_WORD *)(a1 + 88);
  v4 = *(uint64_t (**)(_OWORD *))(*(_QWORD *)v1 + 136);
  v5 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v5;
  v6 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v6;
  v8[4] = *(_OWORD *)(a1 + 64);
  v9 = v2;
  v10 = v3;
  return v4(v8);
}

void type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?()
{
  unint64_t v0;
  uint64_t v1;

  if (!lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?)
  {
    type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
    v0 = type metadata accessor for Optional();
    if (!v1)
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  }
}

uint64_t partial apply for closure #2 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in RouteInfoProfileSliceResolver.handleAceResponse(responseCommand:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSliceValue?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

id partial apply for closure #1 in static RouteInfoProfileSliceResolver.buildRouteInfoSliceValue(aceRoute:)(int a1)
{
  uint64_t v1;

  return closure #1 in static RouteInfoProfileSliceResolver.buildRouteInfoSliceValue(aceRoute:)(a1, *(id *)(v1 + 16));
}

unint64_t type metadata accessor for NSNumber()
{
  unint64_t result;

  result = lazy cache variable for type metadata for NSNumber;
  if (!lazy cache variable for type metadata for NSNumber)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  }
  return result;
}

uint64_t sub_1C23D026C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  v4 = v0 + v2;
  v5 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(void *a1, void *a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v5 = *(_QWORD *)(type metadata accessor for PerformanceUtil.Ticket(0) - 8);
  v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  v7 = (*(_QWORD *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(a1, a2, v2 + v6, *(_QWORD *)(v2 + v7), *(_QWORD *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFF8)));
}

uint64_t sub_1C23D0390()
{
  uint64_t v0;

  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)()
{
  uint64_t v0;

  closure #1 in closure #1 in RouteInfoProfileSliceResolver.populateProfileSliceValue(serviceHelper:dispatchQueue:)(*(void **)(v0 + 16), *(_QWORD *)(v0 + 24), *(void **)(v0 + 32));
}

uint64_t closure #2 in PommesResponse.pommesRequestResult.getter(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;

  v2 = type metadata accessor for PommesRenderOptions.PromptType();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  v6 = (*(uint64_t (**)(char *, uint64_t))(v3 + 88))(v5, v2);
  if (v6 != *MEMORY[0x1E0D98E78])
  {
    if (v6 == *MEMORY[0x1E0D98E68])
      return 1;
    if (v6 == *MEMORY[0x1E0D98E70])
      return 2;
    if (one-time initialization token for pommes != -1)
      swift_once();
    v8 = type metadata accessor for Logger();
    __swift_project_value_buffer(v8, (uint64_t)static Logger.pommes);
    v9 = Logger.logObject.getter();
    v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_1C2356000, v9, v10, "Received @unknown promptType from experience", v11, 2u);
      MEMORY[0x1C3BBFF64](v11, -1, -1);
    }

    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  return 0;
}

void *PommesResponse.curareInteractionDataVersion.unsafeMutableAddressor()
{
  return &static PommesResponse.curareInteractionDataVersion;
}

uint64_t static PommesResponse.curareInteractionDataVersion.getter()
{
  return 0;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

{
  uint64_t (*v6)();

  v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized protocol witness for Collection.subscript.read in conformance [A](void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  void (*v6)(id *);

  v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((_QWORD *)v6 + 4) = specialized Array.subscript.read(v6, a2, a3);
  return protocol witness for Collection.subscript.read in conformance [A]specialized ;
}

uint64_t (*specialized Array.subscript.read(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t (*v3)();
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1C3BBF3F4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1C3BBF3F4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v3;
  uint64_t v4;

  v3 = (uint64_t *)result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = MEMORY[0x1C3BBF3F4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = swift_retain();
LABEL_5:
    *v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

uint64_t Array.subscript.readspecialized ()
{
  return swift_release();
}

void (*specialized Array.subscript.read(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  void (*v3)(id *);
  id v4;

  v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    v4 = (id)MEMORY[0x1C3BBF3F4](a2, a3);
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(_QWORD *)v3 = v4;
    return Array.subscript.readspecialized ;
  }
  __break(1u);
  return result;
}

void Array.subscript.readspecialized (id *a1)
{

}

uint64_t outlined destroy of PommesRenderOptions.PromptType?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesRenderOptions.PromptType?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  return Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()((uint64_t (*)(uint64_t))MEMORY[0x1E0D6D4F8], &lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_PromptContext and conformance Apple_Parsec_Siri_Context_PromptContext, MEMORY[0x1E0D6D4E8]);
}

uint64_t partial apply for closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()()
{
  return closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()();
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()((uint64_t (*)(uint64_t))MEMORY[0x1E0D6F380], &lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_ClientDisplayHints and conformance Apple_Parsec_Siri_Context_ClientDisplayHints, MEMORY[0x1E0D6F378]);
}

uint64_t Com_Apple_Siri_Product_Proto_PromptContext.asPegasusPromptContext()(uint64_t (*a1)(uint64_t), unint64_t *a2, uint64_t a3)
{
  a1(0);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(a2, a1, a3);
  return static Message.with(_:)();
}

uint64_t partial apply for closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(_QWORD *)(v2 + 16), a2, MEMORY[0x1E0D6CC78], &lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_PegasusDisplayHint and conformance Apple_Parsec_Siri_Context_PegasusDisplayHint, MEMORY[0x1E0D6CC68]);
}

uint64_t closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t (*v2)(uint64_t);

  v0 = type metadata accessor for Apple_Parsec_Siri_Context_PegasusSemanticValue();
  v1 = MEMORY[0x1E0C80A78](v0);
  MEMORY[0x1E0C80A78](v1);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_PegasusSemanticValue and conformance Apple_Parsec_Siri_Context_PegasusSemanticValue, v2, MEMORY[0x1E0D6CC88]);
  static Message.with(_:)();
  Apple_Parsec_Siri_Context_PegasusDisplayHint.idValue.setter();
  static Message.with(_:)();
  return Apple_Parsec_Siri_Context_PegasusDisplayHint.displayValue.setter();
}

unint64_t Com_Apple_Siri_Product_Proto_PromptContext.makeLabel(fromNode:)()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t result;
  char v7;
  unint64_t v8;
  uint64_t countAndFlagsBits;
  char v10;

  v0 = lazy protocol witness table accessor for type String and conformance String();
  v1 = MEMORY[0x1C3BBF2F8](46, 0xE100000000000000, 0x7FFFFFFFFFFFFFFFLL, 1, MEMORY[0x1E0DEA968], v0);
  v2 = *(_QWORD *)(v1 + 16);
  if (v2)
  {
    v3 = (unint64_t *)(v1 + 32 * v2);
    v4 = *v3;
    v5 = v3[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRelease();
    result = Substring.index(_:offsetBy:limitedBy:)();
    if ((v7 & 1) != 0)
      v8 = v5;
    else
      v8 = result;
    if (v8 >> 14 < v4 >> 14)
    {
      __break(1u);
    }
    else
    {
      Substring.subscript.getter();
      swift_bridgeObjectRelease();
      countAndFlagsBits = Substring.lowercased()()._countAndFlagsBits;
      swift_bridgeObjectRelease();
      result = Substring.index(_:offsetBy:limitedBy:)();
      if ((v10 & 1) != 0)
        result = v5;
      if (v5 >> 14 >= result >> 14)
      {
        Substring.subscript.getter();
        swift_bridgeObjectRelease();
        lazy protocol witness table accessor for type Substring and conformance Substring();
        swift_bridgeObjectRetain();
        String.append<A>(contentsOf:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return countAndFlagsBits;
      }
    }
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void (*v10)(char *, uint64_t);
  uint64_t v11;
  uint64_t v13;

  v5 = type metadata accessor for Com_Apple_Siri_Product_Proto_SemanticValue();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = MEMORY[0x1E0C80A78](v5);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  a4(v7);
  Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter();
  v10 = *(void (**)(char *, uint64_t))(v6 + 8);
  v10(v9, v5);
  v11 = Apple_Parsec_Siri_Context_PegasusSemanticValue.value.setter();
  a4(v11);
  Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.getter();
  v10(v9, v5);
  Com_Apple_Siri_Product_Proto_PromptContext.makeLabel(fromNode:)();
  swift_bridgeObjectRelease();
  return Apple_Parsec_Siri_Context_PegasusSemanticValue.label.setter();
}

uint64_t closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), unint64_t *a5, uint64_t a6)
{
  a4(0);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(a5, a4, a6);
  return static Message.with(_:)();
}

uint64_t partial apply for closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  return closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(_QWORD *)(v2 + 16), a2, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6CCA0], &lazy protocol witness table cache variable for type Apple_Parsec_Siri_Context_PegasusSemanticValue and conformance Apple_Parsec_Siri_Context_PegasusSemanticValue, MEMORY[0x1E0D6CC88]);
}

uint64_t closure #1 in closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  Com_Apple_Siri_Product_Proto_SemanticValue.serializedValue.getter();
  Apple_Parsec_Siri_Context_PegasusSemanticValue.value.setter();
  Com_Apple_Siri_Product_Proto_SemanticValue.ontologyNodePojoClassName.getter();
  Com_Apple_Siri_Product_Proto_PromptContext.makeLabel(fromNode:)();
  swift_bridgeObjectRelease();
  return Apple_Parsec_Siri_Context_PegasusSemanticValue.label.setter();
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return closure #1 in closure #1 in closure #2 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()();
}

unint64_t lazy protocol witness table accessor for type Substring and conformance Substring()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEBB10], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type Substring and conformance Substring;
  if (!lazy protocol witness table cache variable for type Substring and conformance Substring)
  {
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEBB28], MEMORY[0x1E0DEBAF0]);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Substring and conformance Substring);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()()
{
  return closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), MEMORY[0x1E0DA0018]);
}

uint64_t partial apply for closure #2 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in closure #1 in closure #1 in closure #1 in Com_Apple_Siri_Product_Proto_PromptContext.exportClientDisplayHints()(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), MEMORY[0x1E0DA0008]);
}

uint64_t PlayRadioStationPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static PlayRadioStationPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001FLL;
}

uint64_t PlayRadioStationPreflightClient.isSpanMatchedPlayRadioStationTask(task:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[14];
  uint64_t v12;
  char *v13;
  _QWORD v14[5];

  v0 = type metadata accessor for UsoIdentifier.NluComponent();
  MEMORY[0x1E0C80A78](v0);
  v11[7] = (char *)v11 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoIdentifier.NluComponent?, UsoIdentifier.NluComponent?));
  MEMORY[0x1E0C80A78](v2);
  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  v4 = MEMORY[0x1E0C80A78](v3);
  v6 = (char *)v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x1E0C80A78](v4);
  MEMORY[0x1E0C80A78](v7);
  v13 = (char *)v11 - v8;
  v12 = type metadata accessor for UsoIdentifier();
  v11[12] = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v11[13] = (char *)v11 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UsoTask_CodegenConverter.convert(task:)();
  if (v14[3])
  {
    type metadata accessor for UsoTask_play_common_RadioStation();
    if ((swift_dynamicCast() & 1) != 0)
    {
      v11[8] = v6;
      swift_release();
      UsoTask.arguments.getter();
      JUMPOUT(0x1C23D12A4);
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v14, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t Siri_Nlu_External_UserParse.playRadioStationRelevantTasks()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;

  v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v6 = MEMORY[0x1E0DEE9D8];
  v20[0] = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    v21 = v6;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v16)
        goto LABEL_9;
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v16)
      {
LABEL_9:
        if (v16 < 1)
        {
          __break(1u);
          return result;
        }
        v17 = 0;
        while (1)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          if (!v20[3])
            break;
          type metadata accessor for UsoTask_play_common_RadioStation();
          if ((swift_dynamicCast() & 1) == 0)
            goto LABEL_17;
          swift_release();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
LABEL_12:
          if (v16 == ++v17)
          {
            swift_bridgeObjectRelease();
            return v21;
          }
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_17:
        swift_release();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v8 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v9 = *(_QWORD *)(v2 + 72);
  v18[1] = v5;
  v19 = v9;
  v10 = v2;
  v11 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  while (1)
  {
    v11(v4, v8, v1);
    v12 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v0)
      break;
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v1);
    specialized Array.append<A>(contentsOf:)(v13, (uint64_t (*)(uint64_t, _QWORD, unint64_t))specialized Array._copyContents(initializing:));
    v8 += v19;
    if (!--v7)
    {
      result = swift_bridgeObjectRelease();
      v15 = v20[0];
      v6 = MEMORY[0x1E0DEE9D8];
      goto LABEL_7;
    }
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PlayRadioStationPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PlayRadioStationPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PlayRadioStationPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance PlayRadioStationPreflightClient()
{
  return 0xD00000000000001FLL;
}

uint64_t UsoEntity.recursiveAttributeCheck(where:)(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  uint64_t result;
  int64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  uint64_t v30;
  int64_t v31;
  uint64_t v32;

  result = UsoEntity.attributes.getter();
  v5 = 0;
  v28 = result + 64;
  v32 = result;
  v6 = 1 << *(_BYTE *)(result + 32);
  v7 = -1;
  if (v6 < 64)
    v7 = ~(-1 << v6);
  v8 = v7 & *(_QWORD *)(result + 64);
  v29 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      v30 = (v8 - 1) & v8;
      v31 = v5;
      v9 = __clz(__rbit64(v8)) | (v5 << 6);
    }
    else
    {
      v10 = v5 + 1;
      if (__OFADD__(v5, 1))
        goto LABEL_58;
      if (v10 >= v29)
        goto LABEL_54;
      v11 = *(_QWORD *)(v28 + 8 * v10);
      v12 = v5 + 1;
      if (!v11)
      {
        v12 = v5 + 2;
        if (v5 + 2 >= v29)
          goto LABEL_54;
        v11 = *(_QWORD *)(v28 + 8 * v12);
        if (!v11)
        {
          v12 = v5 + 3;
          if (v5 + 3 >= v29)
            goto LABEL_54;
          v11 = *(_QWORD *)(v28 + 8 * v12);
          if (!v11)
          {
            v12 = v5 + 4;
            if (v5 + 4 >= v29)
              goto LABEL_54;
            v11 = *(_QWORD *)(v28 + 8 * v12);
            if (!v11)
            {
              v12 = v5 + 5;
              if (v5 + 5 >= v29)
                goto LABEL_54;
              v11 = *(_QWORD *)(v28 + 8 * v12);
              if (!v11)
              {
                v13 = v5 + 6;
                if (v5 + 6 >= v29)
                  goto LABEL_54;
                v11 = *(_QWORD *)(v28 + 8 * v13);
                if (!v11)
                {
                  while (1)
                  {
                    v12 = v13 + 1;
                    if (__OFADD__(v13, 1))
                      goto LABEL_59;
                    if (v12 >= v29)
                      break;
                    v11 = *(_QWORD *)(v28 + 8 * v12);
                    ++v13;
                    if (v11)
                      goto LABEL_24;
                  }
LABEL_54:
                  swift_release();
                  return 0;
                }
                v12 = v5 + 6;
              }
            }
          }
        }
      }
LABEL_24:
      v30 = (v11 - 1) & v11;
      v31 = v12;
      v9 = __clz(__rbit64(v11)) + (v12 << 6);
    }
    v14 = (uint64_t *)(*(_QWORD *)(v32 + 48) + 16 * v9);
    v15 = *v14;
    v16 = v14[1];
    swift_bridgeObjectRetain();
    v17 = UsoEntity.attributes.getter();
    if (*(_QWORD *)(v17 + 16))
    {
      v18 = specialized __RawDictionaryStorage.find<A>(_:)(v15, v16);
      v19 = MEMORY[0x1E0DEE9D8];
      if ((v20 & 1) != 0)
      {
        v19 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      v19 = MEMORY[0x1E0DEE9D8];
    }
    swift_bridgeObjectRelease();
    result = swift_bridgeObjectRelease();
    if (v19 >> 62)
      break;
    v21 = *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v21)
      goto LABEL_31;
LABEL_4:
    result = swift_bridgeObjectRelease();
    v8 = v30;
    v5 = v31;
  }
  swift_bridgeObjectRetain();
  v21 = _CocoaArrayWrapper.endIndex.getter();
  result = swift_bridgeObjectRelease();
  if (!v21)
    goto LABEL_4;
LABEL_31:
  if ((v19 & 0xC000000000000001) != 0)
  {
    v22 = MEMORY[0x1C3BBF3F4](0, v19);
  }
  else
  {
    if (!*(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_57;
    v22 = *(_QWORD *)(v19 + 32);
    swift_retain();
  }
  if ((a1(v22) & 1) != 0)
  {
LABEL_51:
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 1;
  }
  v23 = 0;
  v24 = v21 - 1;
  while (2)
  {
    if (dispatch thunk of UsoValue.getAsEntity()())
    {
      v26 = UsoEntity.recursiveAttributeCheck(where:)(a1, a2);
      swift_release();
      result = swift_release();
      if ((v26 & 1) != 0)
      {
        swift_release();
        swift_bridgeObjectRelease();
        return 1;
      }
      if (v24 == v23)
        goto LABEL_4;
    }
    else
    {
      result = swift_release();
      if (v24 == v23)
        goto LABEL_4;
    }
    v27 = v23 + 1;
    if ((v19 & 0xC000000000000001) != 0)
    {
      result = MEMORY[0x1C3BBF3F4](v23 + 1, v19);
      v25 = result;
      if (__OFADD__(v27, 1))
        break;
      goto LABEL_37;
    }
    if (v27 >= *(_QWORD *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10))
      goto LABEL_56;
    v25 = *(_QWORD *)(v19 + 8 * v23 + 40);
    result = swift_retain();
    if (!__OFADD__(v27, 1))
    {
LABEL_37:
      ++v23;
      if ((a1(v25) & 1) != 0)
        goto LABEL_51;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of UsoIdentifier.NluComponent?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoIdentifier.NluComponent?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t lazy protocol witness table accessor for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent()
{
  unint64_t result;
  uint64_t v1;

  result = lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent;
  if (!lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent)
  {
    v1 = type metadata accessor for UsoIdentifier.NluComponent();
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DA0630], v1);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UsoIdentifier.NluComponent and conformance UsoIdentifier.NluComponent);
  }
  return result;
}

uint64_t type metadata accessor for PlayRadioStationPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for PlayRadioStationPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PlayRadioStationPreflightClient.isSpanMatchedPlayRadioStationTask(task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of PlayRadioStationPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of PlayRadioStationPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t AudioTypeFeaturiser.name.getter()
{
  type metadata accessor for AudioTypeFeaturiser(0);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AudioTypeFeaturiser.Type);
  return String.init<A>(describing:)();
}

uint64_t type metadata accessor for AudioTypeFeaturiser(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioTypeFeaturiser);
}

uint64_t AudioTypeFeaturiser.__allocating_init(query:)(uint64_t a1)
{
  uint64_t v2;

  swift_allocObject();
  v2 = specialized AudioTypeFeaturiser.init(query:)(a1);
  swift_release();
  return v2;
}

uint64_t AudioTypeFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t v1;

  v1 = specialized AudioTypeFeaturiser.init(query:)(a1);
  swift_release();
  return v1;
}

void AudioTypeFeaturiser.featurise(candidate:rankedSlotIndex:)(uint64_t **a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t matched;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  __n128 v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t *v23;
  char v24;
  _QWORD *v25;
  __n128 v26;
  uint64_t v27;
  _QWORD *v28;
  __n128 v29;
  uint64_t v30;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v6 = (char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  MEMORY[0x1E0C80A78](matched);
  v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_exactScore);
  v11 = v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v9, v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType, v3);
  v12 = (uint64_t)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType;
  v13 = &v9[*(int *)(matched + 20)];
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v13, v12, v14);
  LOBYTE(v13) = specialized Set.contains(_:)((uint64_t)v9, v10);
  v15 = outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v9);
  if ((v13 & 1) != 0)
  {
    v16 = **a1;
    v17 = (_QWORD *)MEMORY[0x1E0DEEDD8];
    v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & v16) + 0xB8))(v15);
    v19.n128_u32[0] = 1068289229;
    (*(void (**)(__n128))((*v17 & *v18) + 0xA0))(v19);
  }
  else
  {
    v20 = *(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_relatedScore);
    if (*(_QWORD *)(v20 + 16)
      && (v15 = specialized __RawDictionaryStorage.find<A>(_:)(v11), (v21 & 1) != 0)
      && (v22 = specialized Dictionary.subscript.getter((uint64_t)v6, v15, *(_DWORD *)(v20 + 36), 0, v20),
          (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3),
          v23 = *a1,
          v24 = specialized Set.contains(_:)((uint64_t)*a1 + OBJC_IVAR____TtC21SiriInformationSearch18AudioItemCandidate_itemType, v22), v15 = swift_bridgeObjectRelease(), (v24 & 1) != 0))
    {
      v25 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & *v23) + 0xB8))(v15);
      v26.n128_u32[0] = 1066821222;
      (*(void (**)(__n128))((*v25 & *v18) + 0xA0))(v26);
    }
    else
    {
      v27 = **a1;
      v28 = (_QWORD *)MEMORY[0x1E0DEEDD8];
      v18 = (_QWORD *)(*(uint64_t (**)(uint64_t))((*MEMORY[0x1E0DEEDD8] & v27) + 0xB8))(v15);
      v29.n128_u32[0] = 1.0;
      (*(void (**)(__n128))((*v28 & *v18) + 0xA0))(v29);
    }
  }

}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t matched;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Swift::Int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(uint64_t);
  _QWORD v18[5];
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v5 = *(_QWORD *)(matched - 8);
  MEMORY[0x1E0C80A78](matched);
  v7 = (char *)v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
  dispatch thunk of Hashable.hash(into:)();
  v8 = a1 + *(int *)(matched + 20);
  v9 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
  v18[2] = v9;
  v18[3] = v8;
  dispatch thunk of Hashable.hash(into:)();
  v10 = Hasher._finalize()();
  v11 = -1 << *(_BYTE *)(a2 + 32);
  v12 = v10 & ~v11;
  v13 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
    return 0;
  v18[1] = matched;
  v18[4] = a1;
  v19 = a2;
  v14 = ~v11;
  v15 = *(_QWORD *)(v5 + 72);
  v16 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0];
  v18[0] = v7;
  while (1)
  {
    outlined init with copy of AudioTypeFeaturiser.ExactMatchKey(*(_QWORD *)(v19 + 48) + v15 * v12, (uint64_t)v7);
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, v16, MEMORY[0x1E0D6F5C0]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    if (v21 == v20)
    {
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9E0]);
      dispatch thunk of RawRepresentable.rawValue.getter();
      v7 = (char *)v18[0];
      dispatch thunk of RawRepresentable.rawValue.getter();
      if (v21 == v20)
        break;
    }
    outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v7);
    v12 = (v12 + 1) & v14;
    if (((*(_QWORD *)(v13 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8)) >> v12) & 1) == 0)
      return 0;
  }
  outlined destroy of AudioTypeFeaturiser.ExactMatchKey((uint64_t)v7);
  return 1;
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D8]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for DeviceClass();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7C28], MEMORY[0x1E0DA7C38]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DeviceClass and conformance DeviceClass, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA7C28], MEMORY[0x1E0DA7C40]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  char v12;
  uint64_t v14;
  uint64_t v15;

  v3 = type metadata accessor for Siri_Nlu_External_Parser.ParserIdentifier();
  v15 = *(_QWORD *)(v3 - 8);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a2 + 16)
    && (lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F160]), v6 = dispatch thunk of Hashable._rawHashValue(seed:)(), v7 = -1 << *(_BYTE *)(a2 + 32), v8 = v6 & ~v7, ((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0))
  {
    v9 = ~v7;
    v10 = *(_QWORD *)(v15 + 72);
    v11 = *(void (**)(char *, unint64_t, uint64_t))(v15 + 16);
    do
    {
      v11(v5, *(_QWORD *)(a2 + 48) + v10 * v8, v3);
      lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Siri_Nlu_External_Parser.ParserIdentifier and conformance Siri_Nlu_External_Parser.ParserIdentifier, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F140], MEMORY[0x1E0D9F170]);
      v12 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v15 + 8))(v5, v3);
      if ((v12 & 1) != 0)
        break;
      v8 = (v8 + 1) & v9;
    }
    while (((*(_QWORD *)(a2 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0);
  }
  else
  {
    v12 = 0;
  }
  return v12 & 1;
}

uint64_t specialized Set.contains(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Swift::Int v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    Hasher.init(_seed:)();
    String.hash(into:)();
    v6 = Hasher._finalize()();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

BOOL specialized Set.contains(_:)(Swift::UInt a1, uint64_t a2)
{
  Swift::Int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BOOL8 result;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;

  if (!*(_QWORD *)(a2 + 16))
    return 0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  v4 = Hasher._finalize()();
  v5 = -1 << *(_BYTE *)(a2 + 32);
  v6 = v4 & ~v5;
  v7 = a2 + 56;
  if (((*(_QWORD *)(a2 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
    return 0;
  v8 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(v8 + 8 * v6) == a1)
    return 1;
  v10 = ~v5;
  v11 = (v6 + 1) & v10;
  if (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) == 0)
    return 0;
  do
  {
    v12 = *(_QWORD *)(v8 + 8 * v11);
    result = v12 == a1;
    if (v12 == a1)
      break;
    v11 = (v11 + 1) & v10;
  }
  while (((*(_QWORD *)(v7 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8)) >> v11) & 1) != 0);
  return result;
}

uint64_t specialized Set.contains(_:)(unsigned __int8 a1, uint64_t a2)
{
  unint64_t v4;

  if (*(_QWORD *)(a2 + 16))
  {
    Hasher.init(_seed:)();
    CommonAudio.Attribute.rawValue.getter(a1);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    v4 = Hasher._finalize()() & ~(-1 << *(_BYTE *)(a2 + 32));
    if (((*(_QWORD *)(a2 + 56 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
      __asm { BR              X9 }
  }
  return 0;
}

uint64_t specialized Dictionary.subscript.getter(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (a2 < 0 || 1 << *(_BYTE *)(a5 + 32) <= a2)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(_QWORD *)(a5 + (((unint64_t)a2 >> 3) & 0xFFFFFFFFFFFFF8) + 64) >> a2) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a5 + 36) == a3)
  {
    v6 = result;
    v7 = *(_QWORD *)(a5 + 48);
    v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 16))(v6, v7 + *(_QWORD *)(*(_QWORD *)(v8 - 8) + 72) * a2, v8);
    return swift_bridgeObjectRetain();
  }
LABEL_8:
  __break(1u);
  return result;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AudioTypeFeaturiser.ExactMatchKey()
{
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance AudioTypeFeaturiser.ExactMatchKey()
{
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AudioTypeFeaturiser.ExactMatchKey()
{
  Hasher.init(_seed:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5B0]);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9D0]);
  dispatch thunk of Hashable.hash(into:)();
  return Hasher._finalize()();
}

uint64_t AudioTypeFeaturiser.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AudioTypeFeaturiser.__deallocating_deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType;
  v2 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for Featuriser.featurise(candidate:rankedSlotIndex:) in conformance AudioTypeFeaturiser()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 120))();
}

BOOL specialized static AudioTypeFeaturiser.ExactMatchKey.== infix(_:_:)()
{
  uint64_t v1;
  uint64_t v2;

  type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_RequestedMediaType and conformance Apple_Parsec_Siri_V2alpha_RequestedMediaType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F5A0], MEMORY[0x1E0D6F5C0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  if (v2 != v1)
    return 0;
  type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_AudioItemType and conformance Apple_Parsec_Siri_V2alpha_AudioItemType, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6E9C0], MEMORY[0x1E0D6E9E0]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  return v2 == v1;
}

uint64_t specialized AudioTypeFeaturiser.init(query:)(uint64_t a1)
{
  uint64_t matched;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(unint64_t, uint64_t, uint64_t);
  void (*v9)(unint64_t, uint64_t, uint64_t);
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(unint64_t, uint64_t, uint64_t);
  void (*v14)(unint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  void (*v26)(unint64_t, uint64_t, uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  NSObject *v57;
  os_log_type_t v58;
  uint8_t *v59;
  uint64_t v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v82;
  uint64_t v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unsigned int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  void (*v99)(void);
  uint64_t v100;
  uint64_t v101;
  unsigned int v102;
  unsigned int v103;
  uint64_t v104;
  void (*v105)(unint64_t);
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;

  v106 = OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_exactScore;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<AudioTypeFeaturiser.ExactMatchKey>);
  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  v2 = *(_QWORD *)(matched - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v104 = swift_allocObject();
  *(_OWORD *)(v104 + 16) = xmmword_1C24FBDC0;
  v5 = v104 + v4;
  v6 = *MEMORY[0x1E0D6F588];
  v103 = *MEMORY[0x1E0D6F588];
  v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v82 = *(_QWORD *)(v7 - 8);
  v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v82 + 104);
  v8(v5, v6, v7);
  v9 = v8;
  v10 = v5 + *(int *)(matched + 20);
  v11 = *MEMORY[0x1E0D6E9A8];
  v102 = *MEMORY[0x1E0D6E9A8];
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  v94 = *(_QWORD *)(v12 - 8);
  v13 = *(void (**)(unint64_t, uint64_t, uint64_t))(v94 + 104);
  v13(v10, v11, v12);
  v14 = (void (*)(unint64_t))v13;
  v15 = *MEMORY[0x1E0D6F570];
  v9(v5 + v3, v15, v7);
  v89 = *MEMORY[0x1E0D6E918];
  v14(v5 + v3 + *(int *)(matched + 20));
  v9(v5 + 2 * v3, v15, v7);
  v88 = *MEMORY[0x1E0D6E938];
  v14(v5 + 2 * v3 + *(int *)(matched + 20));
  v9(v5 + 3 * v3, v15, v7);
  v95 = *MEMORY[0x1E0D6E948];
  v14(v5 + 3 * v3 + *(int *)(matched + 20));
  v93 = *MEMORY[0x1E0D6F538];
  ((void (*)(unint64_t))v9)(v5 + 4 * v3);
  v91 = *MEMORY[0x1E0D6E980];
  v14(v5 + 4 * v3 + *(int *)(matched + 20));
  v9(v5 + 5 * v3, *MEMORY[0x1E0D6F4D8], v7);
  v90 = *MEMORY[0x1E0D6E910];
  v14(v5 + 5 * v3 + *(int *)(matched + 20));
  v9(v5 + 6 * v3, *MEMORY[0x1E0D6F590], v7);
  ((void (*)(unint64_t, _QWORD, uint64_t))v14)(v5 + 6 * v3 + *(int *)(matched + 20), *MEMORY[0x1E0D6E9B8], v12);
  v9(v5 + 7 * v3, *MEMORY[0x1E0D6F528], v7);
  v85 = *MEMORY[0x1E0D6E968];
  v14(v5 + 7 * v3 + *(int *)(matched + 20));
  v16 = *MEMORY[0x1E0D6F548];
  v9(v5 + 8 * v3, v16, v7);
  v84 = *MEMORY[0x1E0D6E988];
  v14(v5 + 8 * v3 + *(int *)(matched + 20));
  v9(v5 + 9 * v3, v16, v7);
  v17 = *MEMORY[0x1E0D6E928];
  v86 = *MEMORY[0x1E0D6E928];
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v5 + 9 * v3 + *(int *)(matched + 20), v17, v12);
  v9(v5 + 10 * v3, *MEMORY[0x1E0D6F558], v7);
  v70 = *MEMORY[0x1E0D6E990];
  v14(v5 + 10 * v3 + *(int *)(matched + 20));
  v9(v5 + 11 * v3, *MEMORY[0x1E0D6F4E8], v7);
  ((void (*)(unint64_t, uint64_t, uint64_t))v14)(v5 + 11 * v3 + *(int *)(matched + 20), v17, v12);
  v72 = *MEMORY[0x1E0D6F4F8];
  ((void (*)(unint64_t))v9)(v5 + 12 * v3);
  v87 = *MEMORY[0x1E0D6E940];
  v14(v5 + 12 * v3 + *(int *)(matched + 20));
  ((void (*)(unint64_t))v9)(v5 + 13 * v3);
  v80 = *MEMORY[0x1E0D6E998];
  v14(v5 + 13 * v3 + *(int *)(matched + 20));
  v75 = *MEMORY[0x1E0D6F4F0];
  ((void (*)(unint64_t))v9)(v5 + 14 * v3);
  ((void (*)(unint64_t, _QWORD, uint64_t))v14)(v5 + 14 * v3 + *(int *)(matched + 20), v102, v12);
  v100 = v3;
  v18 = 16 * v3;
  v19 = v5 + 15 * v3;
  v78 = *MEMORY[0x1E0D6F520];
  ((void (*)(unint64_t))v9)(v19);
  v68 = *MEMORY[0x1E0D6E960];
  v14(v19 + *(int *)(matched + 20));
  v20 = *MEMORY[0x1E0D6F530];
  v9(v5 + v18, v20, v7);
  ((void (*)(unint64_t, _QWORD, uint64_t))v14)(v5 + v18 + *(int *)(matched + 20), *MEMORY[0x1E0D6E970], v12);
  v9(v5 + v18 + v100, v20, v7);
  v105 = v14;
  ((void (*)(unint64_t, _QWORD, uint64_t))v14)(v5 + v18 + v100 + *(int *)(matched + 20), v86, v12);
  v77 = *MEMORY[0x1E0D6F510];
  ((void (*)(unint64_t))v9)(v5 + 18 * v100);
  ((void (*)(unint64_t, _QWORD, uint64_t))v14)(v5 + 18 * v100 + *(int *)(matched + 20), *MEMORY[0x1E0D6E958], v12);
  v21 = specialized Set.init<A>(_:)(v104);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v92 + v106) = v21;
  v79 = OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_relatedScore;
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<(Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>)>);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (Apple_Parsec_Siri_V2alpha_RequestedMediaType, Set<Apple_Parsec_Siri_V2alpha_AudioItemType>));
  v23 = *(_QWORD *)(v22 - 8);
  v101 = *(_QWORD *)(v23 + 72);
  v24 = (*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80);
  v76 = swift_allocObject();
  *(_OWORD *)(v76 + 16) = xmmword_1C24FAD70;
  v25 = v76 + v24;
  v83 = *(int *)(v22 + 48);
  v99 = (void (*)(void))v9;
  v26 = v9;
  v9(v76 + v24, v103, v7);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AudioItemType>);
  v98 = *(_QWORD *)(v94 + 72);
  v27 = (*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80);
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = xmmword_1C24FA1B0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v28 + v27, v95, v12);
  v29 = specialized Set.init(_nonEmptyArrayLiteral:)(v28);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v25 + v83) = v29;
  v66 = *(int *)(v22 + 48);
  v26(v25 + v101, v93, v7);
  v107 = v27;
  v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_1C24FB7E0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v30 + v27, v85, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v30 + v27 + v98, v84, v12);
  v31 = specialized Set.init(_nonEmptyArrayLiteral:)(v30);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v25 + v101 + v66) = v31;
  v65 = *(int *)(v22 + 48);
  v99();
  v32 = swift_allocObject();
  *(_OWORD *)(v32 + 16) = xmmword_1C24FA1B0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v32 + v107, v90, v12);
  v33 = specialized Set.init(_nonEmptyArrayLiteral:)(v32);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v25 + 2 * v101 + v65) = v33;
  v34 = v25 + 3 * v101;
  v67 = *(int *)(v22 + 48);
  ((void (*)(unint64_t, _QWORD, uint64_t))v99)(v34, *MEMORY[0x1E0D6F4E0], v7);
  v35 = swift_allocObject();
  *(_OWORD *)(v35 + 16) = xmmword_1C24FBDD0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v35 + v107, v68, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v35 + v107 + v98, v91, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v35 + v107 + 2 * v98, v85, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v35 + v107 + 3 * v98, v84, v12);
  v36 = specialized Set.init(_nonEmptyArrayLiteral:)(v35);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v34 + v67) = v36;
  v69 = *(int *)(v22 + 48);
  v99();
  v37 = swift_allocObject();
  *(_OWORD *)(v37 + 16) = xmmword_1C24FA1B0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v37 + v107, v70, v12);
  v38 = specialized Set.init(_nonEmptyArrayLiteral:)(v37);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v25 + 4 * v101 + v69) = v38;
  v39 = v25 + 5 * v101;
  v71 = *(int *)(v22 + 48);
  ((void (*)(unint64_t, _QWORD, uint64_t))v99)(v39, v72, v7);
  v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_1C24FA1A0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v40 + v107, v89, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v40 + v107 + v98, v88, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v40 + v107 + 2 * v98, v95, v12);
  v41 = specialized Set.init(_nonEmptyArrayLiteral:)(v40);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v39 + v71) = v41;
  v73 = *(int *)(v22 + 48);
  v99();
  v42 = swift_allocObject();
  *(_OWORD *)(v42 + 16) = xmmword_1C24FA1A0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v42 + v107, v87, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v42 + v107 + v98, v86, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v42 + v107 + 2 * v98, *MEMORY[0x1E0D6E950], v12);
  v43 = specialized Set.init(_nonEmptyArrayLiteral:)(v42);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v25 + 6 * v101 + v73) = v43;
  v44 = v25 + 7 * v101;
  v74 = *(int *)(v22 + 48);
  ((void (*)(unint64_t, _QWORD, uint64_t))v99)(v44, v75, v7);
  v45 = swift_allocObject();
  *(_OWORD *)(v45 + 16) = xmmword_1C24FA1B0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v45 + v107, v95, v12);
  v46 = specialized Set.init(_nonEmptyArrayLiteral:)(v45);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v44 + v74) = v46;
  v96 = *(int *)(v22 + 48);
  ((void (*)(unint64_t, _QWORD, uint64_t))v99)(v25 + 8 * v101, *MEMORY[0x1E0D6F560], v7);
  v47 = swift_allocObject();
  *(_OWORD *)(v47 + 16) = xmmword_1C24FB7E0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v47 + v107, v88, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v47 + v107 + v98, *MEMORY[0x1E0D6E930], v12);
  v48 = specialized Set.init(_nonEmptyArrayLiteral:)(v47);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v25 + 8 * v101 + v96) = v48;
  v49 = v25 + 9 * v101;
  v97 = *(int *)(v22 + 48);
  ((void (*)(unint64_t, _QWORD, uint64_t))v99)(v49, v78, v7);
  v50 = swift_allocObject();
  *(_OWORD *)(v50 + 16) = xmmword_1C24FB7E0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v50 + v107, v91, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v50 + v107 + v98, v90, v12);
  v51 = specialized Set.init(_nonEmptyArrayLiteral:)(v50);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v49 + v97) = v51;
  v52 = v25 + 10 * v101;
  v53 = *(int *)(v22 + 48);
  ((void (*)(unint64_t, _QWORD, uint64_t))v99)(v52, v77, v7);
  v54 = swift_allocObject();
  *(_OWORD *)(v54 + 16) = xmmword_1C24FA1A0;
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v54 + v107, v89, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v54 + v107 + v98, v87, v12);
  ((void (*)(unint64_t, _QWORD, uint64_t))v105)(v54 + v107 + 2 * v98, v80, v12);
  v55 = specialized Set.init(_nonEmptyArrayLiteral:)(v54);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  *(_QWORD *)(v52 + v53) = v55;
  *(_QWORD *)(v92 + v79) = specialized Dictionary.init(dictionaryLiteral:)(v76);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v56 = type metadata accessor for Logger();
  __swift_project_value_buffer(v56, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v57 = Logger.logObject.getter();
  v58 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v57, v58))
  {
    v59 = (uint8_t *)swift_slowAlloc();
    v60 = swift_slowAlloc();
    v108 = v60;
    *(_DWORD *)v59 = 136315138;
    v61 = Apple_Parsec_Siri_V2alpha_RequestedMediaType.toString.getter();
    if (v62)
    {
      v63 = v62;
    }
    else
    {
      v61 = 0;
      v63 = 0xE000000000000000;
    }
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v57, v58, "AudioTypeFeaturiser : requestedMediaType=%s", v59, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v60, -1, -1);
    MEMORY[0x1C3BBFF64](v59, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v82 + 16))(v92 + OBJC_IVAR____TtC21SiriInformationSearch19AudioTypeFeaturiser_requestedType, a1 + OBJC_IVAR____TtC21SiriInformationSearch10AudioQuery_requestedType, v7);
  return v92;
}

uint64_t type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1)
{
  return type metadata accessor for PommesSearchError(a1, (uint64_t *)&type metadata singleton initialization cache for AudioTypeFeaturiser.ExactMatchKey);
}

uint64_t outlined destroy of AudioTypeFeaturiser.ExactMatchKey(uint64_t a1)
{
  uint64_t matched;

  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(matched - 8) + 8))(a1, matched);
  return a1;
}

uint64_t ObjC metadata update function for AudioTypeFeaturiser()
{
  return type metadata accessor for AudioTypeFeaturiser(0);
}

uint64_t type metadata completion function for AudioTypeFeaturiser()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for AudioTypeFeaturiser()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioTypeFeaturiser.name.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AudioTypeFeaturiser.__allocating_init(query:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 112))();
}

uint64_t dispatch thunk of AudioTypeFeaturiser.featurise(candidate:rankedSlotIndex:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t *initializeBufferWithCopyOfBuffer for AudioTypeFeaturiser.ExactMatchKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t destroy for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t initializeWithCopy for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t assignWithCopy for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t initializeWithTake for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t assignWithTake for AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for AudioTypeFeaturiser.ExactMatchKey()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23D4BD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t storeEnumTagSinglePayload for AudioTypeFeaturiser.ExactMatchKey()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_1C23D4C54(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata completion function for AudioTypeFeaturiser.ExactMatchKey()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for Apple_Parsec_Siri_V2alpha_RequestedMediaType();
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for Apple_Parsec_Siri_V2alpha_AudioItemType();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t base witness table accessor for Equatable in AudioTypeFeaturiser.ExactMatchKey()
{
  return lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type AudioTypeFeaturiser.ExactMatchKey and conformance AudioTypeFeaturiser.ExactMatchKey, type metadata accessor for AudioTypeFeaturiser.ExactMatchKey, (uint64_t)&protocol conformance descriptor for AudioTypeFeaturiser.ExactMatchKey);
}

uint64_t outlined init with copy of AudioTypeFeaturiser.ExactMatchKey(uint64_t a1, uint64_t a2)
{
  uint64_t matched;

  matched = type metadata accessor for AudioTypeFeaturiser.ExactMatchKey(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(matched - 8) + 16))(a2, a1, matched);
  return a2;
}

uint64_t ProfileSliceResolvingDataProvider.__allocating_init(mediaUserStateCenter:instrumentationUtil:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;

  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 64) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_QWORD *)(v6 + 48) = 0;
  *(_OWORD *)(v6 + 16) = 0u;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v6 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  *(_QWORD *)(v6 + 56) = a2;
  *(_QWORD *)(v6 + 64) = a3;
  swift_release();
  return v6;
}

uint64_t ProfileSliceResolvingDataProvider.init(mediaUserStateCenter:instrumentationUtil:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  *(_QWORD *)(v3 + 64) = 0;
  *(_OWORD *)(v3 + 32) = 0u;
  *(_QWORD *)(v3 + 48) = 0;
  *(_OWORD *)(v3 + 16) = 0u;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v3 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  *(_QWORD *)(v3 + 56) = a2;
  *(_QWORD *)(v3 + 64) = a3;
  swift_release();
  return v3;
}

uint64_t ProfileSliceResolvingDataProvider.wait(timeout:)()
{
  return 0;
}

uint64_t ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  void (*v18)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, unint64_t (*)@<X0>(unint64_t *@<X8>), _QWORD *, uint64_t);
  uint64_t v19;
  int v21;
  _QWORD v22[3];
  uint64_t v23;
  _BYTE v24[96];

  outlined init with take of PommesSearchReason?(a2, (uint64_t)v24, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v7 = type metadata accessor for Date();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v11);
  v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v13, &demangling cache variable for type metadata for PommesSearchRequest?);
  v14 = type metadata accessor for PommesSearchRequest(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesSearchRequest?);
    return 0;
  }
  v15 = *(_QWORD *)&v13[*(int *)(v14 + 92)];
  swift_bridgeObjectRetain();
  v16 = outlined destroy of PommesSearchRequest((uint64_t)v13);
  if (!*(_QWORD *)(v15 + 16))
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  v22[1] = a4;
  if (one-time initialization token for shared != -1)
    v16 = swift_once();
  v22[0] = v22;
  v17 = static PerformanceUtil.shared;
  MEMORY[0x1E0C80A78](v16);
  v21 = a3;
  Date.init()();
  v18 = *(void (**)(uint64_t *__return_ptr, unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, unint64_t (*)@<X0>(unint64_t *@<X8>), _QWORD *, uint64_t))(*(_QWORD *)v17 + 200);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [Apple_Parsec_Siri_V2alpha_ProfileSlice]);
  LOBYTE(v21) = 2;
  v18(&v23, 0xD000000000000034, 0x80000001C2503490, 0, v10, "SiriInformationSearch/ProfileSliceResolvingDataProvider.swift", 61, 2, 57, "fetch(for:assistantData:serviceHelper:dispatchQueue:)", 53, v21, partial apply for closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:), &v22[-8], v19);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return v23;
}

uint64_t closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned int (*v19)(char *, uint64_t, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;

  v29 = a4;
  v30 = a5;
  v27 = a1;
  v28 = a3;
  v31 = a2;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v26 - v16;
  outlined init with copy of MediaUserStateCenter?(a6, (uint64_t)&v26 - v16, &demangling cache variable for type metadata for PommesSearchRequest?);
  v18 = type metadata accessor for PommesSearchRequest(0);
  v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v18 - 8) + 48);
  if (v19(v17, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v17, &demangling cache variable for type metadata for PommesSearchRequest?);
    v20 = 0;
    v21 = 0;
  }
  else
  {
    v22 = (uint64_t *)&v17[*(int *)(v18 + 32)];
    v20 = *v22;
    v21 = v22[1];
    swift_bridgeObjectRetain();
    outlined destroy of PommesSearchRequest((uint64_t)v17);
  }
  outlined init with copy of MediaUserStateCenter?(a6, (uint64_t)v15, &demangling cache variable for type metadata for PommesSearchRequest?);
  if (v19(v15, 1, v18) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, &demangling cache variable for type metadata for PommesSearchRequest?);
    v23 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v23 - 8) + 56))(v11, 1, 1, v23);
  }
  else
  {
    PommesSearchRequest.pommesCandidateId.getter((uint64_t)v11);
    outlined destroy of PommesSearchRequest((uint64_t)v15);
    v24 = type metadata accessor for PommesCandidateId();
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v11, 0, 1, v24);
  }
  ProfileSliceResolvingDataProvider.resolve(_:serviceHelper:dispatchQueue:assistantData:requestId:pommesCandidateId:pommesSearchRequest:)(v27, v28, v29, v30, v20, v21, (uint64_t)v11, a6, a7);
  swift_bridgeObjectRelease();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for PommesCandidateId?);
}

uint64_t ProfileSliceResolvingDataProvider.resolve(_:serviceHelper:dispatchQueue:assistantData:requestId:pommesCandidateId:pommesSearchRequest:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  NSObject *v40;
  os_log_type_t v41;
  _BOOL4 v42;
  uint8_t *v43;
  uint8_t *v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint8_t *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  char *v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v61;
  unint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  char *v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  char *v74;
  uint64_t v75;
  char *v76;
  char *v77;
  uint64_t (*v78)(void);
  void *v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t (*v87)(uint64_t);
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  NSObject *v91;
  os_log_type_t v92;
  uint8_t *v93;
  uint64_t v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  void (*v101)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  void (*v113)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  void (*v124)(char *, uint64_t);
  void (*v125)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t);
  uint64_t v126;
  uint64_t *v127;
  char *v128;
  NSObject *v129;
  os_log_type_t v130;
  void (*v131)(char *, uint64_t);
  uint8_t *v132;
  char *v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint8_t *v137;
  uint64_t v138;
  uint64_t v139;
  _DWORD *v140;
  uint64_t v141;
  char *v142;
  char *v143;
  void *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  char *v148;
  void (*v149)(char *, uint64_t);
  char *v150;
  char *v151;
  char *v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  void (*v158)(char *, uint64_t, uint64_t);
  uint64_t *v159;
  uint64_t v160;
  _QWORD *v161;
  uint64_t v162;
  char *v163;
  uint64_t v164;
  char *v165;
  uint64_t *v166;
  char *v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;

  v160 = a7;
  v161 = (_QWORD *)a6;
  v159 = a4;
  v145 = a3;
  v144 = a2;
  v162 = a9;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v12);
  v143 = (char *)&v140 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for SiriKitContactResolver();
  v156 = *(_QWORD *)(v14 - 8);
  v157 = v14;
  v15 = MEMORY[0x1E0C80A78](v14);
  v154 = (char *)&v140 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v15);
  v148 = (char *)&v140 - v17;
  v18 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v19 = MEMORY[0x1E0C80A78](v18);
  v153 = (uint64_t)&v140 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v19);
  v147 = (uint64_t)&v140 - v21;
  v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v169 = *(_QWORD *)(v22 - 8);
  v23 = MEMORY[0x1E0C80A78](v22);
  v150 = (char *)&v140 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x1E0C80A78](v23);
  v165 = (char *)&v140 - v26;
  MEMORY[0x1E0C80A78](v25);
  v167 = (char *)&v140 - v27;
  v28 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceResolutionRequest();
  v29 = *(_QWORD *)(v28 - 8);
  v30 = MEMORY[0x1E0C80A78](v28);
  v142 = (char *)&v140 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v32 = MEMORY[0x1E0C80A78](v30);
  v152 = (char *)&v140 - v33;
  v34 = MEMORY[0x1E0C80A78](v32);
  v151 = (char *)&v140 - v35;
  MEMORY[0x1E0C80A78](v34);
  v37 = (char *)&v140 - v36;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v38 = type metadata accessor for Logger();
  v39 = __swift_project_value_buffer(v38, (uint64_t)static Logger.pommes);
  v158 = *(void (**)(char *, uint64_t, uint64_t))(v29 + 16);
  v158(v37, a1, v28);
  v146 = v39;
  v40 = Logger.logObject.getter();
  v41 = static os_log_type_t.debug.getter();
  v42 = os_log_type_enabled(v40, v41);
  v164 = a5;
  v166 = (uint64_t *)a1;
  v155 = v29;
  v168 = v22;
  if (v42)
  {
    v43 = (uint8_t *)swift_slowAlloc();
    v141 = a8;
    v44 = v43;
    *(_DWORD *)v43 = 134217984;
    v140 = v43 + 4;
    v45 = v167;
    Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
    v46 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
    v47 = v169;
    (*(void (**)(char *, uint64_t))(v169 + 8))(v45, v168);
    v149 = *(void (**)(char *, uint64_t))(v29 + 8);
    v149(v37, v28);
    v170 = v46;
    a1 = (uint64_t)v166;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v40, v41, "Attempting to resolve profile slice type: %ld", v44, 0xCu);
    v48 = v44;
    a8 = v141;
    v22 = v168;
    MEMORY[0x1C3BBFF64](v48, -1, -1);
  }
  else
  {
    v149 = *(void (**)(char *, uint64_t))(v29 + 8);
    v149(v37, v28);
    v47 = v169;
  }

  v49 = v165;
  Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
  v50 = (*(uint64_t (**)(char *, uint64_t))(v47 + 88))(v49, v22);
  if ((_DWORD)v50 == *MEMORY[0x1E0D6F1B0])
    goto LABEL_7;
  v64 = v50;
  if ((_DWORD)v50 == *MEMORY[0x1E0D6F178])
    return ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)(v164, (uint64_t)v161, v160, a8, v162);
  if ((_DWORD)v50 == *MEMORY[0x1E0D6F1C0] || (_DWORD)v50 == *MEMORY[0x1E0D6F1B8])
  {
LABEL_7:
    v51 = v153;
    outlined init with copy of MediaUserStateCenter?(v160, v153, &demangling cache variable for type metadata for PommesCandidateId?);
    v52 = v28;
    v53 = v152;
    v158(v152, a1, v52);
    v54 = *((_QWORD *)v163 + 7);
    v55 = v159;
    outlined retain of AssistantDataSnapshot?(v159);
    v56 = (uint64_t)v161;
    swift_bridgeObjectRetain();
    swift_retain();
    v57 = v154;
    SiriKitContactResolver.init()();
    v165 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
    type metadata accessor for ContactProfileSliceResolver();
    v58 = (uint64_t *)swift_allocObject();
    v59 = v157;
    v58[5] = v157;
    v58[6] = (uint64_t)&protocol witness table for SiriKitContactResolver;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v58 + 2);
    v61 = v156;
    (*(void (**)(uint64_t *, char *, uint64_t))(v156 + 16))(boxed_opaque_existential_1, v57, v59);
    outlined init with take of PommesSearchReason?((uint64_t)v55, (uint64_t)(v58 + 7), (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
    v58[19] = v164;
    v58[20] = v56;
    outlined init with take of PommesSearchReason?(v51, (uint64_t)v58 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
    (*(void (**)(uint64_t, char *, uint64_t))(v155 + 32))((uint64_t)v58 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest, v53, v52);
    *(uint64_t *)((char *)v58 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore) = (uint64_t)v165;
    *(uint64_t *)((char *)v58 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil) = v54;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v57, v59);
    v62 = (unint64_t)v167;
    Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
    ContactProfileSliceResolver.resolveNameSlice(label:)(v62, v162);
    swift_release();
    return (*(uint64_t (**)(unint64_t, uint64_t))(v169 + 8))(v62, v168);
  }
  if ((_DWORD)v50 == *MEMORY[0x1E0D6F170])
  {
    v65 = v147;
    outlined init with copy of MediaUserStateCenter?(v160, v147, &demangling cache variable for type metadata for PommesCandidateId?);
    v158(v151, a1, v28);
    v165 = (char *)*((_QWORD *)v163 + 7);
    v66 = v159;
    outlined retain of AssistantDataSnapshot?(v159);
    v67 = (uint64_t)v161;
    swift_bridgeObjectRetain();
    swift_retain();
    v68 = v148;
    SiriKitContactResolver.init()();
    v163 = (char *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E0C97298]), sel_init);
    type metadata accessor for ContactProfileSliceResolver();
    v69 = (uint64_t *)swift_allocObject();
    v70 = v157;
    v69[5] = v157;
    v69[6] = (uint64_t)&protocol witness table for SiriKitContactResolver;
    v166 = v69 + 2;
    v71 = __swift_allocate_boxed_opaque_existential_1(v69 + 2);
    v72 = v156;
    (*(void (**)(uint64_t *, char *, uint64_t))(v156 + 16))(v71, v68, v70);
    outlined init with take of PommesSearchReason?((uint64_t)v66, (uint64_t)(v69 + 7), (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
    v69[19] = v164;
    v69[20] = v67;
    outlined init with take of PommesSearchReason?(v65, (uint64_t)v69 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
    v73 = *(void (**)(char *, char *, uint64_t))(v155 + 32);
    v167 = (char *)v28;
    v73((char *)v69 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest, v151, v28);
    *(uint64_t *)((char *)v69 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_contactStore) = (uint64_t)v163;
    *(uint64_t *)((char *)v69 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil) = (uint64_t)v165;
    (*(void (**)(char *, uint64_t))(v72 + 8))(v68, v70);
    v74 = v150;
    (*(void (**)(char *, uint64_t, uint64_t))(v169 + 104))(v150, v64, v22);
    v75 = *(uint64_t *)((char *)v69
                     + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_instrumentationUtil);
    v76 = (char *)v69[19];
    v77 = (char *)v69 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId;
    v78 = *(uint64_t (**)(void))(*(_QWORD *)v75 + 128);
    v164 = v69[20];
    v165 = v76;
    v79 = (void *)v78();
    v80 = MEMORY[0x1C3BBC478]();
    v82 = HIBYTE(v81) & 0xF;
    if ((v81 & 0x2000000000000000) == 0)
      v82 = v80 & 0xFFFFFFFFFFFFLL;
    if (v82)
    {
      v83 = specialized ContactProfileSliceResolver.buildContactQuery(request:contactName:)(0, v80, v81);
      swift_bridgeObjectRelease();
      v84 = ContactProfileSliceResolver.searchContacts(contactQuery:)(v83);
      swift_bridgeObjectRelease();
      if (v84)
      {
        swift_retain();
        _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo8INPersonCG_10PegasusAPI43Apple_Parsec_Siri_V2alpha_ProfileSliceValueVs5NeverOTg504_s21i26InformationSearch27Contactkl79ResolverC07resolvedF033_93CEC19A51F00F19257E9CB35202CC6DLL11requestType5label10e6API013g1_h4_a9_j71_eF0VSgAC0d7RequestQ0AELLO_AH0u1_v1_a1_w1_eF5LabelOtFAH0u1_v1_a1_w1_eF5m4VSo8D6CXEfU_0iP6Search0rklS0CTf1cn_nTf4ng_n(v84, (uint64_t)v69);
        v163 = v77;
        v85 = v162;
        swift_bridgeObjectRelease();
        swift_release();
        v86 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
        v161 = &v140;
        MEMORY[0x1E0C80A78](v86);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, v87, MEMORY[0x1E0D6E838]);
        v74 = v150;
        static Message.with(_:)();
        swift_bridgeObjectRelease();
        v88 = v85;
        v77 = v163;
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v86 - 8) + 56))(v88, 0, 1, v86);
      }
      else
      {
        v116 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v116 - 8) + 56))(v162, 1, 1, v116);
      }
    }
    else
    {
      v106 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v106 - 8) + 56))(v162, 1, 1, v106);
      swift_bridgeObjectRelease();
    }
    (*(void (**)(char *, uint64_t, char *, void *))(*(_QWORD *)v75 + 136))(v165, v164, v77, v79);

    (*(void (**)(char *, uint64_t))(v169 + 8))(v74, v22);
    swift_setDeallocating();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v166);
    outlined consume of AssistantDataSnapshot?(v69[7], v69[8], v69[9], v69[10]);
    swift_bridgeObjectRelease();
    outlined destroy of MediaUserStateCenter?((uint64_t)v69 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_pommesCandidateId, &demangling cache variable for type metadata for PommesCandidateId?);
    v149((char *)v69 + OBJC_IVAR____TtC21SiriInformationSearch27ContactProfileSliceResolver_resolutionRequest, (uint64_t)v167);

    swift_release();
    return swift_deallocClassInstance();
  }
  else
  {
    v89 = v47;
    v90 = v164;
    if ((_DWORD)v50 == *MEMORY[0x1E0D6F1A0])
    {
      v91 = Logger.logObject.getter();
      v92 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v91, v92))
      {
        v93 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v93 = 0;
        _os_log_impl(&dword_1C2356000, v91, v92, "Resolving me card slice", v93, 2u);
        MEMORY[0x1C3BBFF64](v93, -1, -1);
      }

      return ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)((uint64_t)v159, v90, (uint64_t)v161, v160, v162);
    }
    else if ((_DWORD)v50 == *MEMORY[0x1E0D6F1C8])
    {
      v94 = v164;
      v95 = Logger.logObject.getter();
      v96 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v95, v96))
      {
        v97 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v97 = 0;
        _os_log_impl(&dword_1C2356000, v95, v96, "Resolving RouteInfo slice", v97, 2u);
        MEMORY[0x1C3BBFF64](v97, -1, -1);
      }

      type metadata accessor for RouteInfoProfileSliceResolver();
      v98 = swift_allocObject();
      v99 = v98 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
      v100 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
      v101 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v100 - 8) + 56);
      v101(v99, 1, 1, v100);
      v102 = OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_dispatchGroup;
      *(_QWORD *)(v98 + v102) = dispatch_group_create();
      *(_QWORD *)(v98 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
      v103 = (uint64_t)v143;
      v101((uint64_t)v143, 1, 1, v100);
      v104 = v98 + OBJC_IVAR____TtC21SiriInformationSearch29RouteInfoProfileSliceResolver_routeInfoProfileSliceValue;
      swift_beginAccess();
      outlined assign with take of MediaUserStateCenter?(v103, v104, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
      swift_endAccess();
      v105 = *((_QWORD *)v163 + 7);
      swift_retain();
      RouteInfoProfileSliceResolver.resolveRouteInfoSlice(from:requestId:pommesCandidateId:instrumentationUtil:serviceHelper:dispatchQueue:)(v94, (uint64_t)v161, v160, v105, v144, v145, v162);
      swift_release();
      return swift_release();
    }
    else if ((_DWORD)v50 == *MEMORY[0x1E0D6F188])
    {
      v107 = Logger.logObject.getter();
      v108 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v107, v108))
      {
        v109 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v109 = 0;
        _os_log_impl(&dword_1C2356000, v107, v108, "Resolving parking location slice", v109, 2u);
        MEMORY[0x1C3BBFF64](v109, -1, -1);
      }

      type metadata accessor for ParkingLocationProfileSliceResolver();
      v110 = swift_allocObject();
      v111 = v110 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
      v112 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
      v113 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v112 - 8) + 56);
      v113(v111, 1, 1, v112);
      *(_QWORD *)(v110 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_semaphore) = dispatch_semaphore_create(0);
      v114 = (uint64_t)v143;
      v113((uint64_t)v143, 1, 1, v112);
      v115 = v110 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_profileSliceValue;
      swift_beginAccess();
      outlined assign with take of MediaUserStateCenter?(v114, v115, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
      swift_endAccess();
      *(_BYTE *)(v110 + OBJC_IVAR____TtC21SiriInformationSearch35ParkingLocationProfileSliceResolver_resolutionSucceeded) = 0;
      ParkingLocationProfileSliceResolver.resolveParkingLocationSlice(serviceHelper:dispatchQueue:)(v144, v145, v162);
      return swift_release();
    }
    else
    {
      v117 = v22;
      v118 = *((_QWORD *)v163 + 7);
      swift_retain();
      v119 = v167;
      Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
      v120 = v89;
      v122 = v160;
      v121 = (uint64_t)v161;
      v159 = (uint64_t *)(*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, char *))(*(_QWORD *)v118 + 128))(v90, v161, v160, v119);
      swift_release();
      v123 = v117;
      v124 = *(void (**)(char *, uint64_t))(v120 + 8);
      v124(v119, v123);
      v125 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(**((_QWORD **)v163 + 7) + 144);
      swift_retain();
      v126 = v122;
      v127 = v159;
      v125(v90, v121, v126, v159, 2);
      swift_release();
      v128 = v142;
      v158(v142, a1, v28);
      v129 = Logger.logObject.getter();
      v130 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v129, v130))
      {
        v131 = v124;
        v132 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v132 = 134217984;
        v133 = v167;
        Apple_Parsec_Siri_V2alpha_Restriction.category.getter();
        v134 = Apple_Parsec_Siri_V2alpha_SiriKitAppInfo.AppContext.rawValue.getter();
        v135 = v133;
        v136 = v168;
        v131(v135, v168);
        v149(v128, v28);
        v170 = v134;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1C2356000, v129, v130, "Skipping profile resolution request for an unsupported type: %ld", v132, 0xCu);
        v137 = v132;
        v124 = v131;
        MEMORY[0x1C3BBFF64](v137, -1, -1);
        v138 = v136;
        v127 = v159;
      }
      else
      {
        v149(v128, v28);
        v138 = v168;
      }

      v124(v165, v138);
      v139 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 56))(v162, 1, 1, v139);
    }
  }
}

uint64_t ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t, uint64_t, char *);
  void (*v26)(char *, uint64_t);
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  id v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  NSObject *v39;
  unint64_t v40;
  _UNKNOWN **v41;
  _QWORD *v42;
  void (*v43)(_QWORD, _QWORD, _QWORD, _QWORD);
  NSObject *v44;
  _QWORD *v45;
  uint64_t v46;
  void (*v47)(_QWORD);
  uint64_t v48;
  char *v49;
  uint64_t v50;
  void (*v51)(char *, uint64_t);
  uint64_t v52;
  int v53;
  char v54;
  unint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  NSObject *v60;
  os_log_type_t v61;
  _BOOL4 v62;
  uint64_t v63;
  unint64_t v64;
  uint8_t *v65;
  void (*v66)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  void (*v94)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD));
  uint64_t v95;
  uint64_t v96;
  unint64_t v97;
  void **v98;
  void *v99;
  id v100;
  uint64_t v101;
  id v102;
  id v103;
  NSObject *v104;
  os_log_type_t v105;
  uint8_t *v106;
  uint64_t v107;
  id v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  NSObject *v112;
  os_log_type_t v113;
  uint8_t *v114;
  void (*v115)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  void (*v119)(char *, uint64_t);
  uint64_t v120;
  uint64_t v121;
  NSObject *v122;
  os_log_type_t v123;
  uint8_t *v124;
  const char *v125;
  void (*v126)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t);
  uint64_t v127;
  uint64_t v128;
  uint64_t v130;
  _DWORD v131[3];
  unsigned int v132;
  void (*v133)(_QWORD *, _QWORD, uint64_t);
  uint64_t v134;
  uint64_t v135;
  NSObject *v136;
  uint64_t v137;
  void (*v138)(char *, uint64_t);
  uint64_t v139;
  char *v140;
  _QWORD *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  char *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  uint64_t v155;
  unint64_t v156;
  _BYTE v157[24];
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  __int128 v162;
  uint64_t v163;
  uint64_t v164;
  id v165;
  unint64_t v166;
  _UNKNOWN **v167;

  v6 = v5;
  v135 = a4;
  v153 = a5;
  v155 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v152 = *(_QWORD *)(v155 - 8);
  MEMORY[0x1E0C80A78](v155);
  v154 = (char *)v131 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for DispatchTime?);
  MEMORY[0x1E0C80A78](v11);
  v140 = (char *)v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesSearchRequest?);
  MEMORY[0x1E0C80A78](v13);
  v134 = (uint64_t)v131 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v143 = type metadata accessor for DispatchTimeInterval();
  v142 = *(_QWORD *)(v143 - 8);
  MEMORY[0x1E0C80A78](v143);
  v148 = (_QWORD *)((char *)v131 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v145 = type metadata accessor for DispatchTime();
  v144 = *(_QWORD *)(v145 - 8);
  v16 = MEMORY[0x1E0C80A78](v145);
  v18 = (char *)v131 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v16);
  v147 = (char *)v131 - v19;
  v20 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x1E0C80A78](v20);
  v23 = (char *)v131 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = *(_QWORD *)(v5 + 56);
  (*(void (**)(char *, _QWORD, uint64_t))(v21 + 104))(v23, *MEMORY[0x1E0D6F178], v20);
  v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v24 + 128);
  swift_retain();
  v149 = a1;
  v150 = a2;
  v151 = a3;
  v26 = (void (*)(char *, uint64_t))v25(a1, a2, a3, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  v27 = swift_allocObject();
  *(_QWORD *)(v27 + 16) = 0;
  v146 = (uint64_t *)(v27 + 16);
  v28 = swift_allocObject();
  *(_QWORD *)(v28 + 16) = 0;
  v141 = (_QWORD *)(v28 + 16);
  v156 = v6;
  v29 = v6 + 16;
  swift_beginAccess();
  outlined init with copy of MediaUserStateCenter?(v6 + 16, (uint64_t)&v165, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  v30 = v166;
  outlined destroy of MediaUserStateCenter?((uint64_t)&v165, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  if (!v30)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v31 = type metadata accessor for Logger();
    __swift_project_value_buffer(v31, (uint64_t)static Logger.pommes);
    v32 = Logger.logObject.getter();
    v33 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v32, v33))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_1C2356000, v32, v33, "ProfileSliceResolvingDataProvider Initializing the shared media user state center ...", v34, 2u);
      MEMORY[0x1C3BBFF64](v34, -1, -1);
    }

    v35 = objc_msgSend((id)objc_opt_self(), sel_shared);
    v166 = type metadata accessor for ICMediaUserStateCenter();
    v167 = &protocol witness table for ICMediaUserStateCenter;
    v165 = v35;
    swift_beginAccess();
    outlined assign with take of MediaUserStateCenter?((uint64_t)&v165, v29, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
    swift_endAccess();
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1C2356000, v36, v37, "ProfileSliceResolvingDataProvider Initializing the shared media user state center complete", v38, 2u);
      MEMORY[0x1C3BBFF64](v38, -1, -1);
    }

  }
  outlined init with copy of MediaUserStateCenter?(v29, (uint64_t)&v162, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  if (v163)
  {
    v138 = v26;
    outlined init with take of AppDataProviding(&v162, (uint64_t)&v165);
    v39 = dispatch_group_create();
    dispatch_group_enter(v39);
    v40 = v166;
    v41 = v167;
    __swift_project_boxed_opaque_existential_1(&v165, v166);
    v42 = (_QWORD *)swift_allocObject();
    v42[2] = v39;
    v42[3] = v28;
    v42[4] = v27;
    v43 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v41[4];
    v44 = v39;
    v139 = v28;
    swift_retain();
    v137 = v27;
    swift_retain();
    v43(partial apply for closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:), v42, v40, v41);
    swift_release();
    static DispatchTime.now()();
    v45 = v148;
    *v148 = 1000;
    v46 = v142;
    v47 = *(void (**)(_QWORD))(v142 + 104);
    v132 = *MEMORY[0x1E0DEF490];
    v48 = v143;
    v133 = (void (*)(_QWORD *, _QWORD, uint64_t))v47;
    v47(v45);
    v49 = v147;
    MEMORY[0x1C3BBEB6C](v18, v45);
    v142 = *(_QWORD *)(v46 + 8);
    ((void (*)(_QWORD *, uint64_t))v142)(v45, v48);
    v50 = v144;
    v51 = *(void (**)(char *, uint64_t))(v144 + 8);
    v52 = v145;
    v51(v18, v145);
    v53 = MEMORY[0x1C3BBF0F4](v49) & 1;
    v51(v49, v52);
    v54 = static DispatchTimeoutResult.== infix(_:_:)();
    v55 = v156;
    if ((v54 & 1) != 0)
    {
      v56 = v141;
      swift_beginAccess();
      if (!*v56)
      {
        v131[2] = v53;
        v57 = v134;
        outlined init with copy of MediaUserStateCenter?(v135, v134, &demangling cache variable for type metadata for PommesSearchRequest?);
        v58 = type metadata accessor for PommesSearchRequest(0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 48))(v57, 1, v58) == 1)
        {
          outlined destroy of MediaUserStateCenter?(v57, &demangling cache variable for type metadata for PommesSearchRequest?);
        }
        else
        {
          v70 = *(_BYTE *)(v57 + *(int *)(v58 + 60));
          outlined destroy of PommesSearchRequest(v57);
          if ((v70 & 1) == 0)
          {
            v71 = v146;
            swift_beginAccess();
            v72 = *v71;
            if (*v71)
            {
              v161 = MEMORY[0x1E0DEE9D8];
              v73 = *(_QWORD *)(v72 + 16);
              v74 = swift_bridgeObjectRetain();
              v135 = v73;
              if (v73)
              {
                v55 = 0;
                v75 = v74 + 32;
                v134 = v74;
                while (v55 < *(_QWORD *)(v74 + 16))
                {
                  outlined init with copy of AppDataProviding(v75, (uint64_t)&v162);
                  v76 = v163;
                  v77 = v164;
                  __swift_project_boxed_opaque_existential_1(&v162, v163);
                  if (((*(uint64_t (**)(uint64_t, uint64_t))(v77 + 32))(v76, v77) & 1) != 0)
                  {
                    outlined init with take of AppDataProviding(&v162, (uint64_t)v157);
                    v78 = v161;
                    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                    {
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v78 + 16) + 1, 1);
                      v78 = v161;
                    }
                    v80 = *(_QWORD *)(v78 + 16);
                    v79 = *(_QWORD *)(v78 + 24);
                    if (v80 >= v79 >> 1)
                      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v79 > 1, v80 + 1, 1);
                    v81 = v158;
                    v82 = v159;
                    v83 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)v157, v158);
                    MEMORY[0x1E0C80A78](v83);
                    v85 = (char *)v131 - ((v84 + 15) & 0xFFFFFFFFFFFFFFF0);
                    (*(void (**)(char *))(v86 + 16))(v85);
                    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v80, (uint64_t)v85, &v161, v81, v82);
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)v157);
                    v45 = v148;
                    v49 = v147;
                  }
                  else
                  {
                    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v162);
                  }
                  ++v55;
                  v75 += 40;
                  v74 = v134;
                  if (v135 == v55)
                  {
                    v87 = v161;
                    v55 = v156;
                    v52 = v145;
                    v50 = v144;
                    goto LABEL_35;
                  }
                }
                __break(1u);
                goto LABEL_75;
              }
              v87 = MEMORY[0x1E0DEE9D8];
LABEL_35:
              swift_bridgeObjectRelease();
              v88 = v146;
            }
            else
            {
              v87 = 0;
              v88 = v146;
            }
            *v88 = v87;
            swift_bridgeObjectRelease();
          }
        }
      }
    }
    v89 = *(_QWORD *)(v55 + 64);
    v136 = v44;
    if (v89)
    {
      swift_retain();
      static DispatchTime.now()();
      *v45 = 1;
      v133(v45, v132, v48);
      v90 = (uint64_t)v140;
      MEMORY[0x1C3BBEB6C](v49, v45);
      ((void (*)(_QWORD *, uint64_t))v142)(v45, v48);
      v51(v49, v52);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v90, 0, 1, v52);
      v91 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v89 + 168))(v90);
      swift_release();
      outlined destroy of MediaUserStateCenter?(v90, &demangling cache variable for type metadata for DispatchTime?);
    }
    else
    {
      v91 = 0;
    }
    v49 = (char *)v155;
    v48 = v152;
    v51 = v138;
    v92 = v146;
    swift_beginAccess();
    v93 = *v92;
    if (*v92 && *(_QWORD *)(v93 + 16))
    {
      v94 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD)))(**(_QWORD **)(v55 + 56)
                                                                                                  + 136);
      swift_retain();
      swift_bridgeObjectRetain();
      v94(v149, v150, v151, (void (*)(_QWORD, _QWORD))v51);
      swift_release();
      if (v91)
        v95 = v91;
      else
        v95 = MEMORY[0x1E0DEE9D8];
      v96 = (uint64_t)v154;
      (*(void (**)(char *, _QWORD, char *))(v48 + 104))(v154, *MEMORY[0x1E0D70598], v49);
      swift_bridgeObjectRetain();
      v97 = specialized Sequence.compactMap<A>(_:)(v93, v95);
      swift_bridgeObjectRelease();
      createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v97, v96, 1, v153);
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      (*(void (**)(uint64_t, char *))(v48 + 8))(v96, v49);
      goto LABEL_66;
    }
    swift_bridgeObjectRelease();
    if ((static DispatchTimeoutResult.== infix(_:_:)() & 1) != 0)
    {
      v98 = (void **)v141;
      swift_beginAccess();
      v99 = *v98;
      if (v99)
      {
        v100 = v99;
        if (one-time initialization token for pommes != -1)
          swift_once();
        v101 = type metadata accessor for Logger();
        __swift_project_value_buffer(v101, (uint64_t)static Logger.pommes);
        v102 = v99;
        v103 = v99;
        v104 = Logger.logObject.getter();
        v105 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v104, v105))
        {
          v106 = (uint8_t *)swift_slowAlloc();
          v107 = swift_slowAlloc();
          v160 = (uint64_t)v99;
          v161 = v107;
          *(_DWORD *)v106 = 136315138;
          v108 = v99;
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
          v109 = String.init<A>(describing:)();
          v160 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v109, v110, &v161);
          v49 = (char *)v155;
          v51 = v138;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          v55 = v156;
          swift_bridgeObjectRelease();

          _os_log_impl(&dword_1C2356000, v104, v105, "ProfileSliceResolvingDataProvider : AMP user state refresh return an error : %s", v106, 0xCu);
          swift_arrayDestroy();
          MEMORY[0x1C3BBFF64](v107, -1, -1);
          MEMORY[0x1C3BBFF64](v106, -1, -1);
        }
        else
        {

        }
        v126 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t))(**(_QWORD **)(v55 + 56) + 144);
        swift_retain();
        v126(v149, v150, v151, (void (*)(_QWORD, _QWORD))v51, 3);
        swift_release();

        goto LABEL_65;
      }
      if (*v92)
      {
        if (*(_QWORD *)(*v92 + 16))
          goto LABEL_65;
        if (one-time initialization token for pommes != -1)
          swift_once();
        v121 = type metadata accessor for Logger();
        __swift_project_value_buffer(v121, (uint64_t)static Logger.pommes);
        v122 = Logger.logObject.getter();
        v123 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v122, v123))
          goto LABEL_73;
        v124 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v124 = 0;
        v125 = "ProfileSliceResolvingDataProvider : AMP user state refresh returned no user states";
      }
      else
      {
        if (one-time initialization token for pommes != -1)
          swift_once();
        v130 = type metadata accessor for Logger();
        __swift_project_value_buffer(v130, (uint64_t)static Logger.pommes);
        v122 = Logger.logObject.getter();
        v123 = static os_log_type_t.error.getter();
        if (!os_log_type_enabled(v122, v123))
          goto LABEL_73;
        v124 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v124 = 0;
        v125 = "ProfileSliceResolvingDataProvider : AMP user state refresh return nil";
      }
      _os_log_impl(&dword_1C2356000, v122, v123, v125, v124, 2u);
      MEMORY[0x1C3BBFF64](v124, -1, -1);
LABEL_73:

      v115 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t))(**(_QWORD **)(v55 + 56) + 144);
      swift_retain();
      v116 = v149;
      v117 = v150;
      v118 = v151;
      v119 = v51;
      v120 = 3;
LABEL_56:
      v115(v116, v117, v118, (void (*)(_QWORD, _QWORD))v119, v120);
      swift_release();
LABEL_65:
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AmpUserState>);
      type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
      v127 = swift_allocObject();
      *(_OWORD *)(v127 + 16) = xmmword_1C24FA1B0;
      Apple_Parsec_Siri_V2alpha_AmpUserState.init()();
      v128 = (uint64_t)v154;
      (*(void (**)(char *, _QWORD, char *))(v48 + 104))(v154, *MEMORY[0x1E0D70590], v49);
      createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v127, v128, 1, v153);

      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, char *))(v48 + 8))(v128, v49);
LABEL_66:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v165);
      goto LABEL_67;
    }
    if (one-time initialization token for pommes == -1)
    {
LABEL_53:
      v111 = type metadata accessor for Logger();
      __swift_project_value_buffer(v111, (uint64_t)static Logger.pommes);
      v112 = Logger.logObject.getter();
      v113 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v112, v113))
      {
        v114 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v114 = 0;
        _os_log_impl(&dword_1C2356000, v112, v113, "ProfileSliceResolvingDataProvider : timeout while waiting for AMP user state refresh", v114, 2u);
        MEMORY[0x1C3BBFF64](v114, -1, -1);
      }

      v115 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t))(**(_QWORD **)(v55 + 56) + 144);
      swift_retain();
      v116 = v149;
      v117 = v150;
      v118 = v151;
      v119 = v51;
      v120 = 1;
      goto LABEL_56;
    }
LABEL_75:
    swift_once();
    goto LABEL_53;
  }
  outlined destroy of MediaUserStateCenter?((uint64_t)&v162, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v59 = type metadata accessor for Logger();
  __swift_project_value_buffer(v59, (uint64_t)static Logger.pommes);
  v60 = Logger.logObject.getter();
  v61 = static os_log_type_t.error.getter();
  v62 = os_log_type_enabled(v60, v61);
  v63 = v152;
  v64 = v156;
  if (v62)
  {
    v65 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v65 = 0;
    _os_log_impl(&dword_1C2356000, v60, v61, "ProfileSliceResolvingDataProvider the shared media user state center initialization failed", v65, 2u);
    MEMORY[0x1C3BBFF64](v65, -1, -1);
  }

  v66 = *(void (**)(uint64_t, uint64_t, uint64_t, void (*)(_QWORD, _QWORD), uint64_t))(**(_QWORD **)(v64 + 56) + 144);
  swift_retain();
  v66(v149, v150, v151, (void (*)(_QWORD, _QWORD))v26, 3);
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_AmpUserState>);
  type metadata accessor for Apple_Parsec_Siri_V2alpha_AmpUserState();
  v67 = swift_allocObject();
  *(_OWORD *)(v67 + 16) = xmmword_1C24FA1B0;
  Apple_Parsec_Siri_V2alpha_AmpUserState.init()();
  v68 = (uint64_t)v154;
  v69 = v155;
  (*(void (**)(char *, _QWORD, uint64_t))(v63 + 104))(v154, *MEMORY[0x1E0D70590], v155);
  createAmpUsersStateSlice(ampUserStates:resolution:isPostResolution:)(v67, v68, 1, v153);
  swift_bridgeObjectRelease();

  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v68, v69);
LABEL_67:
  swift_release();
  return swift_release();
}

void closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)(uint64_t a1, void *a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  void **v10;
  void *v11;
  id v12;
  void *v13;
  id v14;

  v10 = (void **)(a4 + 16);
  swift_beginAccess();
  v11 = *(void **)(a4 + 16);
  *(_QWORD *)(a4 + 16) = a2;
  v12 = a2;

  swift_beginAccess();
  if (a2)
  {
    v13 = *v10;
    *v10 = a2;
    v14 = a2;

  }
  else
  {
    *(_QWORD *)(a5 + 16) = a1;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
  }
  dispatch_group_leave(a3);
}

uint64_t ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t, char *);
  void *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t);
  uint64_t v24;
  void (*v25)(uint64_t, uint64_t, uint64_t, void *);
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  _BOOL4 v29;
  uint8_t *v30;
  void (*v31)(uint64_t, uint64_t, uint64_t, void *, uint64_t);
  uint64_t v32;
  uint64_t (*v33)(uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  char v43[24];
  uint64_t v44;

  v42 = a5;
  v10 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v11 = *(_QWORD *)(v10 - 8);
  v36 = v10;
  v37 = v11;
  MEMORY[0x1E0C80A78](v10);
  v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x1E0C80A78](v14);
  v17 = (char *)&v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = v5;
  v18 = *(_QWORD *)(v5 + 56);
  (*(void (**)(char *, _QWORD, uint64_t))(v15 + 104))(v17, *MEMORY[0x1E0D6F1A0], v14);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(_QWORD *)v18 + 128);
  swift_retain();
  v39 = a2;
  v40 = a3;
  v41 = a4;
  v20 = (void *)v19(a2, a3, a4, v17);
  swift_release();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  outlined init with take of PommesSearchReason?(a1, (uint64_t)v43, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v21 = v44;
  if (v44 && *(_QWORD *)(v44 + 16))
  {
    v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    MEMORY[0x1E0C80A78](v22);
    *(&v35 - 2) = v21;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, v23, MEMORY[0x1E0D6E838]);
    v24 = v42;
    static Message.with(_:)();
    v25 = *(void (**)(uint64_t, uint64_t, uint64_t, void *))(**(_QWORD **)(v38 + 56) + 136);
    swift_retain();
    v25(v39, v40, v41, v20);
    swift_release();

  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v26 = type metadata accessor for Logger();
    __swift_project_value_buffer(v26, (uint64_t)static Logger.pommes);
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    v29 = os_log_type_enabled(v27, v28);
    v24 = v42;
    if (v29)
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_1C2356000, v27, v28, "No Me card data available; returning no profile slice for .sliceLabelMe",
        v30,
        2u);
      MEMORY[0x1C3BBFF64](v30, -1, -1);
    }

    v31 = *(void (**)(uint64_t, uint64_t, uint64_t, void *, uint64_t))(**(_QWORD **)(v38 + 56) + 144);
    swift_retain();
    v31(v39, v40, v41, v20, 3);
    swift_release();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
    v32 = v36;
    static Message.with(_:)();
    v22 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSlice();
    MEMORY[0x1E0C80A78](v22);
    *(&v35 - 2) = (uint64_t)v13;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSlice and conformance Apple_Parsec_Siri_V2alpha_ProfileSlice, v33, MEMORY[0x1E0D6E838]);
    static Message.with(_:)();

    (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v32);
  }
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v24, 0, 1, v22);
}

uint64_t closure #1 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;

  v0 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueResolutionState();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValueLabel();
  MEMORY[0x1E0C80A78](v4);
  (*(void (**)(char *, _QWORD))(v6 + 104))((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6FCC0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  Apple_Parsec_Siri_V2alpha_ProfileSliceValue.isPostResolution.setter();
  (*(void (**)(char *, _QWORD, uint64_t))(v1 + 104))(v3, *MEMORY[0x1E0D70590], v0);
  return Apple_Parsec_Siri_V2alpha_ProfileSliceValue.state.setter();
}

uint64_t closure #2 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1E0C80A78](v3);
  (*(void (**)(char *, _QWORD))(v5 + 104))((char *)&v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6F1A0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<Apple_Parsec_Siri_V2alpha_ProfileSliceValue>);
  v6 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1C24FA1B0;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v9 + v8, a2, v6);
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t closure #3 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  void (*v37)(char *, uint64_t, uint64_t);
  char *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56[5];
  _OWORD v57[6];
  uint64_t v58;
  uint64_t v59;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Google_Protobuf_Any?);
  MEMORY[0x1E0C80A78](v5);
  v54 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v51 = type metadata accessor for Google_Protobuf_Any();
  v50 = *(_QWORD *)(v51 - 8);
  MEMORY[0x1E0C80A78](v51);
  v45 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
  MEMORY[0x1E0C80A78](v8);
  v59 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v55 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceValue();
  v10 = *(_QWORD *)(v55 - 8);
  v11 = MEMORY[0x1E0C80A78](v55);
  v52 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v46 = (char *)&v43 - v13;
  v14 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ProfileSliceLabel();
  MEMORY[0x1E0C80A78](v14);
  (*(void (**)(char *, _QWORD))(v16 + 104))((char *)&v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), *MEMORY[0x1E0D6F1A0]);
  Apple_Parsec_Siri_V2alpha_ProfileSlice.label.setter();
  v17 = *(_QWORD *)(a2 + 16);
  if (v17)
  {
    v43 = a1;
    v48 = type metadata accessor for Apple_Parsec_Siri_V2alpha_Person();
    v47 = lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_Person and conformance Apple_Parsec_Siri_V2alpha_Person, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6DD60], MEMORY[0x1E0D6DD28]);
    swift_bridgeObjectRetain();
    v18 = MEMORY[0x1E0DEE9D8];
    v19 = 32;
    v20 = v2;
    v49 = a2;
    v44 = v10;
    do
    {
      v53 = v18;
      v21 = *(_OWORD *)(a2 + v19 + 80);
      v57[4] = *(_OWORD *)(a2 + v19 + 64);
      v57[5] = v21;
      v58 = *(_QWORD *)(a2 + v19 + 96);
      v22 = *(_OWORD *)(a2 + v19 + 16);
      v57[0] = *(_OWORD *)(a2 + v19);
      v57[1] = v22;
      v23 = *(_OWORD *)(a2 + v19 + 48);
      v57[2] = *(_OWORD *)(a2 + v19 + 32);
      v57[3] = v23;
      v56[3] = v48;
      v56[4] = v47;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v56);
      MEMORY[0x1E0C80A78](boxed_opaque_existential_1);
      *(&v43 - 2) = (uint64_t)v57;
      outlined retain of AssistantDataSnapshot.MeCard((uint64_t)v57);
      static Message.with(_:)();
      defaultAnyTypeURLPrefix.getter();
      Google_Protobuf_Any.init(message:partial:typePrefix:)();
      if (v20)
      {

        v25 = 1;
        v26 = (uint64_t)v54;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v54, 1, 1, v51);
        outlined destroy of MediaUserStateCenter?(v26, &demangling cache variable for type metadata for Google_Protobuf_Any?);
        v20 = 0;
      }
      else
      {
        v27 = v50;
        v28 = v54;
        v29 = v51;
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v50 + 56))(v54, 0, 1, v51);
        v30 = v45;
        v31 = (*(uint64_t (**)(char *, char *, uint64_t))(v27 + 32))(v45, v28, v29);
        MEMORY[0x1E0C80A78](v31);
        *(&v43 - 2) = (uint64_t)v30;
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Apple_Parsec_Siri_V2alpha_ProfileSliceValue and conformance Apple_Parsec_Siri_V2alpha_ProfileSliceValue, (uint64_t (*)(uint64_t))MEMORY[0x1E0D6F240], MEMORY[0x1E0D6F200]);
        static Message.with(_:)();
        v32 = *(void (**)(char *, uint64_t))(v27 + 8);
        v10 = v44;
        v32(v30, v29);
        v25 = 0;
      }
      v33 = v59;
      v34 = v25;
      v35 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v59, v34, 1, v55);
      outlined release of AssistantDataSnapshot.MeCard((uint64_t)v57);
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v33, 1, v35);
      v18 = v53;
      if (v36 == 1)
      {
        outlined destroy of MediaUserStateCenter?(v59, &demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSliceValue?);
        a2 = v49;
      }
      else
      {
        v37 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 32);
        v38 = v46;
        v39 = v55;
        v37(v46, v59, v55);
        v37(v52, (uint64_t)v38, v39);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(_QWORD *)(v18 + 16) + 1, 1, v18);
        v41 = *(_QWORD *)(v18 + 16);
        v40 = *(_QWORD *)(v18 + 24);
        if (v41 >= v40 >> 1)
          v18 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v18);
        *(_QWORD *)(v18 + 16) = v41 + 1;
        v37((char *)(v18+ ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80))+ *(_QWORD *)(v10 + 72) * v41), (uint64_t)v52, v55);
        a2 = v49;
        v20 = 0;
      }
      v19 += 104;
      --v17;
    }
    while (v17);
    swift_bridgeObjectRelease();
  }
  return Apple_Parsec_Siri_V2alpha_ProfileSlice.values.setter();
}

uint64_t ProfileSliceResolvingDataProvider.deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_release();
  swift_release();
  return v0;
}

uint64_t ProfileSliceResolvingDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_release();
  swift_release();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance ProfileSliceResolvingDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 184))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance ProfileSliceResolvingDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 192))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance ProfileSliceResolvingDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 208))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance ProfileSliceResolvingDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 200))();
}

uint64_t specialized static ProfileSliceResolvingDataProvider.make(mediaUserStateCenter:instrumentationUtil:muxContextManager:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  _BYTE v7[40];

  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v7, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for ProfileSliceResolvingDataProvider();
  v5 = swift_allocObject();
  *(_QWORD *)(v5 + 64) = 0;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 48) = 0;
  *(_OWORD *)(v5 + 16) = 0u;
  swift_beginAccess();
  swift_retain();
  swift_retain();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v7, v5 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_endAccess();
  *(_QWORD *)(v5 + 56) = a2;
  *(_QWORD *)(v5 + 64) = a3;
  swift_release();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<[Apple_Parsec_Siri_V2alpha_ProfileSlice]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v5);
}

unint64_t partial apply for closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(unint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unint64_t result;
  __int128 v6;
  __int128 v7;
  _BYTE v8[16];
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  _BYTE v12[96];

  v3 = *(_QWORD *)(v1 + 16);
  v4 = *(_QWORD *)(v1 + 40);
  v6 = *(_OWORD *)(v1 + 48);
  v7 = *(_OWORD *)(v1 + 24);
  outlined init with take of PommesSearchReason?(*(_QWORD *)(v1 + 48), (uint64_t)v12, (uint64_t *)&demangling cache variable for type metadata for AssistantDataSnapshot?);
  v9 = v7;
  v10 = v4;
  v11 = v6;
  result = specialized Sequence.compactMap<A>(_:)((void (*)(_QWORD))partial apply for closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:), (uint64_t)v8, v3);
  *a1 = result;
  return result;
}

uint64_t type metadata accessor for ProfileSliceResolvingDataProvider()
{
  return objc_opt_self();
}

uint64_t method lookup function for ProfileSliceResolvingDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.__allocating_init(mediaUserStateCenter:instrumentationUtil:muxContextManager:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 184))();
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 192))() & 1;
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 208);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t partial apply for closure #2 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #3 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(uint64_t a1)
{
  uint64_t v1;

  return closure #3 in ProfileSliceResolvingDataProvider.resolveMeCardSlice(from:requestId:pommesCandidateId:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AssistantDataSnapshot.MeCard.toPersonProtobuf()(a1, *(_QWORD **)(v1 + 16));
}

uint64_t partial apply for closure #1 in AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()(uint64_t a1)
{
  uint64_t v1;

  return closure #1 in AssistantDataSnapshot.MeCard.toProfileSliceProtobuf()(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_1C23D863C()
{
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t sub_1C23D8660()
{
  uint64_t v0;

  return swift_deallocObject();
}

unint64_t type metadata accessor for ICMediaUserStateCenter()
{
  unint64_t result;

  result = lazy cache variable for type metadata for ICMediaUserStateCenter;
  if (!lazy cache variable for type metadata for ICMediaUserStateCenter)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ICMediaUserStateCenter);
  }
  return result;
}

uint64_t sub_1C23D86C0()
{
  uint64_t v0;

  swift_release();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)(uint64_t a1, void *a2)
{
  uint64_t v2;

  closure #1 in ProfileSliceResolvingDataProvider.resolveAmpSlice(requestId:pommesCandidateId:pommesSearchRequest:serviceHelper:dispatchQueue:)(a1, a2, *(NSObject **)(v2 + 16), *(_QWORD *)(v2 + 24), *(_QWORD *)(v2 + 32));
}

uint64_t __swift_mutable_project_boxed_opaque_existential_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
  {
    swift_makeBoxUnique();
    return v2;
  }
  return result;
}

uint64_t *outlined retain of AssistantDataSnapshot?(uint64_t *a1)
{
  outlined copy of AssistantDataSnapshot?(*a1, a1[1], a1[2], a1[3]);
  return a1;
}

uint64_t partial apply for closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in ContactProfileSliceResolver.resolveContactSlice(requestType:label:)(a1, *(_QWORD *)(v1 + 16));
}

uint64_t partial apply for closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  return closure #1 in closure #1 in ProfileSliceResolvingDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(a1, *(_QWORD *)(v2 + 16), *(void **)(v2 + 24), *(uint64_t **)(v2 + 32), *(uint64_t **)(v2 + 40), *(_QWORD *)(v2 + 48), a2);
}

void SEMSpanMatcher.indexLocale()()
{
  void *v0;
  id v1;
  id v2;
  void *v3;
  id v4;
  id v5;
  id v6[2];

  v6[1] = *(id *)MEMORY[0x1E0C80C00];
  v6[0] = 0;
  v1 = objc_msgSend(v0, sel_indexLocaleWithUserId_error_, 0, v6);
  v2 = v6[0];
  if (v1)
  {
    v3 = v1;
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();
    v4 = v2;

  }
  else
  {
    v5 = v6[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t SEMSpanMatcher.search(_:userId:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void *v3;
  uint64_t v4;
  uint64_t v5;
  void *v7;
  id v8;
  id v9;
  unint64_t v10;
  id v11;
  id v12;
  id v14[2];

  v5 = v4;
  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v7 = (void *)MEMORY[0x1C3BBEC44](a2, a3);
  v14[0] = 0;
  v8 = objc_msgSend(v3, sel_matchSpans_userId_error_, a1, v7, v14);

  v9 = v14[0];
  if (v8)
  {
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
    v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v11 = v9;

    swift_bridgeObjectRetain();
    v5 = specialized Sequence.flatMap<A>(_:)(v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v12 = v14[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v5;
}

id SEMSpanMatcher.search(_:)(uint64_t a1)
{
  void *v1;
  id v2;
  id v3;
  void *v4;
  unint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  void *v10;
  unint64_t v11;
  id v13;
  id v14[2];

  v14[1] = *(id *)MEMORY[0x1E0C80C00];
  v14[0] = 0;
  v2 = objc_msgSend(v1, sel_matchSpans_error_, a1, v14);
  v3 = v14[0];
  if (!v2)
  {
    v13 = v14[0];
    _convertNSErrorToError(_:)();

    return (id)swift_willThrow();
  }
  v4 = v2;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
  v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v6 = v3;

  v14[0] = (id)MEMORY[0x1E0DEE9D8];
  if (v5 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    if (v7)
      goto LABEL_4;
LABEL_13:
    swift_bridgeObjectRelease_n();
    return (id)MEMORY[0x1E0DEE9D8];
  }
  v7 = *(_QWORD *)((v5 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v7)
    goto LABEL_13;
LABEL_4:
  if (v7 < 1)
    __break(1u);
  v8 = 0;
  do
  {
    if ((v5 & 0xC000000000000001) != 0)
      v9 = (id)MEMORY[0x1C3BBF3F4](v8, v5);
    else
      v9 = *(id *)(v5 + 8 * v8 + 32);
    v10 = v9;
    ++v8;
    v11 = specialized static VocabularyResult.makeResults(from:userId:)(v9);

    specialized Array.append<A>(contentsOf:)(v11);
  }
  while (v7 != v8);
  swift_bridgeObjectRelease_n();
  return v14[0];
}

id protocol witness for static SpanMatcher.indexMatcher() in conformance SEMSpanMatcher@<X0>(_QWORD *a1@<X8>)
{
  id result;

  result = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_indexMatcher);
  *a1 = result;
  return result;
}

id protocol witness for static SpanMatcher.itemMatcher(_:tokenizer:) in conformance SEMSpanMatcher@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  id result;

  result = @nonobjc static SEMSpanMatcher.itemMatcher(_:tokenizer:)(a1, a2);
  if (!v3)
    *a3 = result;
  return result;
}

id @nonobjc static SEMSpanMatcher.itemMatcher(_:tokenizer:)(uint64_t a1, uint64_t a2)
{
  Class isa;
  id v4;
  id v5;
  id v6;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
  isa = Array._bridgeToObjectiveC()().super.isa;
  v8[0] = 0;
  v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_itemMatcher_tokenizer_error_, isa, a2, v8);

  if (v4)
  {
    v5 = v8[0];
  }
  else
  {
    v6 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
  return v4;
}

uint64_t protocol witness for SpanMatcher.search(_:userId:) in conformance SEMSpanMatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return SEMSpanMatcher.search(_:userId:)(a1, a2, a3);
}

id protocol witness for SpanMatcher.search(_:) in conformance SEMSpanMatcher(uint64_t a1)
{
  return SEMSpanMatcher.search(_:)(a1);
}

void protocol witness for SpanMatcher.indexLocale() in conformance SEMSpanMatcher()
{
  SEMSpanMatcher.indexLocale()();
}

void protocol witness for SpanMatcher.indexLocale(userId:) in conformance SEMSpanMatcher(uint64_t a1, uint64_t a2)
{
  @nonobjc SEMSpanMatcher.indexLocale(userId:)(a1, a2);
}

void @nonobjc SEMSpanMatcher.indexLocale(userId:)(uint64_t a1, uint64_t a2)
{
  void *v2;
  void *v3;
  id v4;
  id v5;
  id v6;
  id v7;
  id v8[2];

  v8[1] = *(id *)MEMORY[0x1E0C80C00];
  if (a2)
    v3 = (void *)MEMORY[0x1C3BBEC44]();
  else
    v3 = 0;
  v8[0] = 0;
  v4 = objc_msgSend(v2, sel_indexLocaleWithUserId_error_, v3, v8);

  v5 = v8[0];
  if (v4)
  {
    static Locale._unconditionallyBridgeFromObjectiveC(_:)();
    v6 = v5;

  }
  else
  {
    v7 = v8[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
  }
}

uint64_t VocabularySearchClient.__allocating_init(spanMatcher:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v2 = swift_allocObject();
  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized VocabularySearchClient.init(spanMatcher:)((uint64_t)v7, v2, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t VocabularySearchClient.init(spanMatcher:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = __swift_mutable_project_boxed_opaque_existential_1(a1, v3);
  MEMORY[0x1E0C80A78](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v8 + 16))(v7);
  v9 = specialized VocabularySearchClient.init(spanMatcher:)((uint64_t)v7, v1, v3, v4);
  __swift_destroy_boxed_opaque_existential_1(a1);
  return v9;
}

uint64_t VocabularySearchClient.deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return v0;
}

uint64_t VocabularySearchClient.__deallocating_deinit()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  return swift_deallocClassInstance();
}

void VocabularyResult.__allocating_init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(void *a1, void *a2, void *a3)
{
  uint64_t v5;
  id v6;
  NSObject *v7;
  os_log_type_t v8;
  SEL *v9;
  void *v10;
  uint8_t *v11;
  uint64_t v12;
  void *v13;
  id v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint8_t *v18;
  id v19;
  id v20;
  id v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  id v26;
  void *v27;
  id v28;
  void *v29;
  id v30;
  unint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  id v35;
  uint64_t v36;
  uint64_t v37;
  id v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  void *v42;
  uint64_t aBlock[6];
  uint64_t v45;

  if (one-time initialization token for music != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  __swift_project_value_buffer(v5, (uint64_t)static Logger.music);
  v6 = a3;
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  v9 = (SEL *)&unk_1E7C11000;
  if (os_log_type_enabled(v7, v8))
  {
    v10 = v6;
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    aBlock[0] = v12;
    *(_DWORD *)v11 = 136315138;
    v13 = a2;
    v14 = objc_msgSend(v10, sel_itemId);
    v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v17 = v16;

    a2 = v13;
    v9 = (SEL *)&unk_1E7C11000;
    v45 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v7, v8, "CKVMatchingSpan  itemId=%s", v11, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v12, -1, -1);
    v18 = v11;
    v6 = v10;
    MEMORY[0x1C3BBFF64](v18, -1, -1);

  }
  else
  {

  }
  v19 = objc_msgSend(a2, sel_sourceIdentifierOrConstant);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  v20 = objc_msgSend(v6, v9[335]);
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  objc_msgSend(v6, sel_itemType);
  v21 = objc_msgSend(a1, sel_fieldMatches);
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMFieldMatch);
  v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v22 >> 62)
  {
    swift_bridgeObjectRetain();
    v23 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    v23 = *(_QWORD *)((v22 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  v42 = a2;
  if (v23)
  {
    if (v23 < 1)
      goto LABEL_28;
    v24 = 0;
    v25 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    do
    {
      if ((v22 & 0xC000000000000001) != 0)
        v26 = (id)MEMORY[0x1C3BBF3F4](v24, v22);
      else
        v26 = *(id *)(v22 + 8 * v24 + 32);
      v27 = v26;
      v28 = objc_msgSend(v26, sel_entityFieldInfo);
      objc_opt_self();
      v29 = (void *)swift_dynamicCastObjCClass();
      if (v29)
      {
        v30 = objc_msgSend(v29, sel_toKVFieldType_, 0);

        swift_unknownObjectRelease();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
        v32 = v25[2];
        v31 = v25[3];
        if (v32 >= v31 >> 1)
          v25 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v31 > 1), v32 + 1, 1, v25);
        v25[2] = v32 + 1;
        v25[v32 + 4] = v30;
      }
      else
      {

        swift_unknownObjectRelease();
      }
      ++v24;
    }
    while (v23 != v24);
  }
  swift_bridgeObjectRelease_n();
  objc_msgSend(a1, sel_score);
  v33 = objc_msgSend(a1, sel_spanInfo);
  objc_msgSend(v33, sel_spanRange);

  v34 = objc_msgSend(a1, sel_spanInfo);
  v35 = objc_msgSend(v34, sel_spanRange);
  v37 = v36;

  if (__OFADD__(v35, v37))
  {
    __break(1u);
  }
  else
  {
    v38 = objc_msgSend(a1, sel_spanValue);
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v45 = MEMORY[0x1E0DEE9D8];
    v39 = swift_allocObject();
    *(_QWORD *)(v39 + 16) = &v45;
    v40 = swift_allocObject();
    *(_QWORD *)(v40 + 16) = partial apply for closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:);
    *(_QWORD *)(v40 + 24) = v39;
    aBlock[4] = (uint64_t)_sIg_Ieg_TRTA_0;
    aBlock[5] = v40;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ();
    aBlock[3] = (uint64_t)&block_descriptor_9;
    v41 = _Block_copy(aBlock);
    swift_retain();
    swift_release();
    objc_msgSend(v6, sel_enumerateFieldsUsingBlock_, v41);
    _Block_release(v41);
    LOBYTE(v41) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    if ((v41 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      dispatch thunk of VocabularyResult.__allocating_init(appId:itemId:itemType:fieldTypes:score:spanBegin:spanEnd:semanticValue:fields:userId:)();

      swift_release();
      swift_bridgeObjectRelease();
      return;
    }
  }
  __break(1u);
LABEL_28:
  __break(1u);
}

uint64_t closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(void *a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;

  v6 = objc_msgSend(a1, sel_label);
  if (v6)
  {
    v7 = v6;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  v8 = objc_msgSend(a1, sel_value);
  if (v8)
  {
    v9 = v8;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

  }
  objc_msgSend(a1, sel_fieldType);
  v10 = objc_allocWithZone((Class)type metadata accessor for VocabularyField());
  VocabularyField.init(label:value:fieldType:)();
  MEMORY[0x1C3BBEE78]();
  if (*(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((*a4 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
  return specialized Array._endMutation()();
}

void thunk for @escaping @callee_guaranteed (@guaranteed KVField, @unowned Int, @unowned UnsafeMutablePointer<ObjCBool>) -> ()(uint64_t a1, void *a2)
{
  void (*v2)(void);
  id v3;

  v2 = *(void (**)(void))(a1 + 32);
  v3 = a2;
  v2();

}

uint64_t specialized VocabularySearchClient.init(spanMatcher:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v20 = *(_QWORD *)(v8 - 8);
  v21 = v8;
  MEMORY[0x1E0C80A78](v8);
  v19 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v10);
  v11 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v11);
  v12 = type metadata accessor for DispatchQoS.QoSClass();
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = a3;
  v25 = a4;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v23);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(boxed_opaque_existential_1, a1, a3);
  type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  (*(void (**)(char *, _QWORD, uint64_t))(v13 + 104))(v15, *MEMORY[0x1E0DEF540], v12);
  static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  static DispatchQoS.unspecified.getter();
  v22 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [OS_dispatch_queue.Attributes] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v20 + 104))(v19, *MEMORY[0x1E0DEF8D0], v21);
  *(_QWORD *)(a2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_QWORD *)(a2 + 64) = 0;
  outlined init with take of AppDataProviding(&v23, a2 + 24);
  return a2;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6KVItemCG_21SiriInformationSearch16VocabularyResultCs5NeverOTg504_s21ef8Search16hi65C11makeResults4from6userIdSayACGSo012SEMSpanMatchE0C_SSSgtFZACSo6D6CXEfU_So0rsI0CSo20SEMCascadeEntityInfoCSSSgTf1cn_nTf4nggg_n(unint64_t a1, void *a2, void *a3)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v13;

  if (a1 >> 62)
    goto LABEL_14;
  v4 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    result = MEMORY[0x1E0DEE9D8];
    if (!v4)
      break;
    v13 = MEMORY[0x1E0DEE9D8];
    result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v4 < 0)
    {
      __break(1u);
      return result;
    }
    type metadata accessor for VocabularyResult();
    v6 = 0;
    while (v4 != v6)
    {
      if ((a1 & 0xC000000000000001) != 0)
        v7 = (id)MEMORY[0x1C3BBF3F4](v6, a1);
      else
        v7 = *(id *)(a1 + 8 * v6 + 32);
      v8 = v7;
      ++v6;
      v9 = a2;
      v10 = a3;
      swift_bridgeObjectRetain();
      VocabularyResult.__allocating_init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(v9, v10, v8);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      if (v4 == v6)
        return v13;
    }
    __break(1u);
LABEL_14:
    swift_bridgeObjectRetain();
    v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static VocabularyResult.makeResults(from:userId:)(void *a1)
{
  id v2;
  void *v3;
  void *v4;
  id v5;
  id v6;
  void *v7;
  unint64_t v8;
  id v9;
  id v10;
  uint64_t matched;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  id v16;
  void *v17;
  uint64_t v18;
  id v19;
  id v20;
  NSObject *v21;
  os_log_type_t v22;
  uint8_t *v23;
  _QWORD *v24;
  id v25;
  void *v26;
  id v28[2];

  v28[1] = *(id *)MEMORY[0x1E0C80C00];
  v2 = objc_msgSend(a1, sel_entityInfo);
  objc_opt_self();
  v3 = (void *)swift_dynamicCastObjCClass();
  if (!v3)
  {
    swift_unknownObjectRelease();
    if (one-time initialization token for music != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.music);
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_1C2356000, v13, v14, "VocabularyResult: SEM span match result did not contain Cascade entity info", v15, 2u);
      MEMORY[0x1C3BBFF64](v15, -1, -1);
    }

    return MEMORY[0x1E0DEE9D8];
  }
  v4 = v3;
  v28[0] = 0;
  v5 = objc_msgSend(v3, sel_toKVItems_, v28);
  v6 = v28[0];
  if (!v5)
  {
    v16 = v28[0];
    v17 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    if (one-time initialization token for music != -1)
      swift_once();
    v18 = type metadata accessor for Logger();
    __swift_project_value_buffer(v18, (uint64_t)static Logger.music);
    v19 = v17;
    v20 = v17;
    v21 = Logger.logObject.getter();
    v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      v23 = (uint8_t *)swift_slowAlloc();
      v24 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v23 = 138412290;
      v25 = v17;
      v26 = (void *)_swift_stdlib_bridgeErrorToNSError();
      v28[0] = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *v24 = v26;

      _os_log_impl(&dword_1C2356000, v21, v22, "VocabularyResult: Cascade entity info was not convertible to KV items. %@", v23, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v24, -1, -1);
      MEMORY[0x1C3BBFF64](v23, -1, -1);
    }
    else
    {

    }
    swift_unknownObjectRelease();

    return MEMORY[0x1E0DEE9D8];
  }
  v7 = v5;
  type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for KVItem);
  v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  v9 = v6;

  swift_bridgeObjectRetain();
  v10 = a1;
  swift_unknownObjectRetain();
  matched = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSaySo6KVItemCG_21SiriInformationSearch16VocabularyResultCs5NeverOTg504_s21ef8Search16hi65C11makeResults4from6userIdSayACGSo012SEMSpanMatchE0C_SSSgtFZACSo6D6CXEfU_So0rsI0CSo20SEMCascadeEntityInfoCSSSgTf1cn_nTf4nggg_n(v8, v10, v4);
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease_n();
  swift_bridgeObjectRelease();
  return matched;
}

uint64_t specialized Sequence.flatMap<A>(_:)(unint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;

  v9 = MEMORY[0x1E0DEE9D8];
  if (a1 >> 62)
    goto LABEL_11;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (i = 4; ; ++i)
    {
      v4 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1C3BBF3F4](i - 4, a1) : *(id *)(a1 + 8 * i);
      v5 = v4;
      v6 = i - 3;
      if (__OFADD__(i - 4, 1))
        break;
      v7 = specialized static VocabularyResult.makeResults(from:userId:)(v4);

      specialized Array.append<A>(contentsOf:)(v7);
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v9;
      }
    }
    __break(1u);
LABEL_11:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

{
  uint64_t v2;
  unint64_t v3;
  uint64_t i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int64_t v11;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t result;
  uint64_t v30;

  if (a1 >> 62)
    goto LABEL_40;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v2; v2 = _CocoaArrayWrapper.endIndex.getter())
  {
    v3 = MEMORY[0x1E0DEE9D8];
    for (i = 4; ; ++i)
    {
      v5 = i - 4;
      if ((a1 & 0xC000000000000001) == 0)
        break;
      MEMORY[0x1C3BBF3F4](i - 4, a1);
      v6 = i - 3;
      if (__OFADD__(v5, 1))
        goto LABEL_35;
LABEL_11:
      dispatch thunk of CodeGenListEntry.entry.getter();
      if (v30)
      {
        v7 = dispatch thunk of CodeGenGlobalArgs.getUsoIdentifiersFor(attributeName:)();
        swift_release();
        swift_release();
        if (v7)
          v8 = v7;
        else
          v8 = MEMORY[0x1E0DEE9D8];
      }
      else
      {
        swift_release();
        v8 = MEMORY[0x1E0DEE9D8];
      }
      v9 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v3 + 16);
      v11 = v10 + v9;
      if (__OFADD__(v10, v9))
        goto LABEL_36;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && v11 <= *(_QWORD *)(v3 + 24) >> 1)
      {
        if (*(_QWORD *)(v8 + 16))
          goto LABEL_25;
      }
      else
      {
        if (v10 <= v11)
          v13 = v10 + v9;
        else
          v13 = v10;
        v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v3);
        if (*(_QWORD *)(v8 + 16))
        {
LABEL_25:
          v14 = *(_QWORD *)(v3 + 16);
          v15 = (*(_QWORD *)(v3 + 24) >> 1) - v14;
          v16 = type metadata accessor for UsoIdentifier();
          if (v15 < v9)
            goto LABEL_38;
          v17 = *(_QWORD *)(v16 - 8);
          v18 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
          v19 = *(_QWORD *)(v17 + 72);
          v20 = v3 + v18 + v19 * v14;
          v21 = v8 + v18;
          v22 = v19 * v9;
          v23 = v20 + v22;
          v24 = v21 + v22;
          if (v21 < v23 && v20 < v24)
          {
            result = _fatalErrorMessage(_:_:file:line:flags:)();
            __break(1u);
            return result;
          }
          swift_arrayInitWithCopy();
          if (v9)
          {
            v26 = *(_QWORD *)(v3 + 16);
            v27 = __OFADD__(v26, v9);
            v28 = v26 + v9;
            if (v27)
              goto LABEL_39;
            *(_QWORD *)(v3 + 16) = v28;
          }
          goto LABEL_5;
        }
      }
      if (v9)
        goto LABEL_37;
LABEL_5:
      swift_bridgeObjectRelease();
      if (v6 == v2)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
    swift_retain();
    v6 = i - 3;
    if (!__OFADD__(v5, 1))
      goto LABEL_11;
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return MEMORY[0x1E0DEE9D8];
}

uint64_t sub_1C23DA09C()
{
  return swift_deallocObject();
}

uint64_t _sIg_Ieg_TRTA_0()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t dispatch thunk of static SpanMatcher.indexMatcher()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t dispatch thunk of static SpanMatcher.itemMatcher(_:tokenizer:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of SpanMatcher.search(_:userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 24))();
}

uint64_t dispatch thunk of SpanMatcher.search(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 32))();
}

uint64_t dispatch thunk of SpanMatcher.indexLocale()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t dispatch thunk of SpanMatcher.indexLocale(userId:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 48))();
}

uint64_t type metadata accessor for VocabularySearchClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for VocabularySearchClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of VocabularySearchClient.__allocating_init(spanMatcher:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 128))();
}

uint64_t dispatch thunk of VocabularySearchClient.search(_:userId:itemTypes:fieldTypes:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of VocabularySearchClient.resetTokenizer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 144))();
}

uint64_t sub_1C23DA198()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #2 in VocabularyResult.init(spanMatchResult:cascadeEntityInfo:kvItem:userId:)(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

uint64_t sub_1C23DA1B0()
{
  return swift_deallocObject();
}

uint64_t static AmpDataProvider.make(mediaUserStateCenter:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE v4[40];

  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  type metadata accessor for AmpDataProvider();
  v1 = swift_allocObject();
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v2 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = v2;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?((uint64_t)v4, v1 + 16);
  swift_endAccess();
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for AnyDataProvider<[MediaUserState]>);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(v1);
}

uint64_t AmpDataProvider.mediaUserStateCenter.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  return outlined init with copy of MediaUserStateCenter?(v1 + 16, a1, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
}

uint64_t AmpDataProvider.mediaUserStateCenter.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v1 + 16);
  return swift_endAccess();
}

uint64_t (*AmpDataProvider.mediaUserStateCenter.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t AmpDataProvider.cachedMediaUserStates.setter(uint64_t a1)
{
  uint64_t v1;

  swift_beginAccess();
  *(_QWORD *)(v1 + 56) = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*AmpDataProvider.cachedMediaUserStates.modify())()
{
  swift_beginAccess();
  return AmpDataProvider.cachedMediaUserStates.modify;
}

uint64_t AmpDataProvider.__allocating_init(mediaUserStateCenter:)(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = swift_allocObject();
  *(_OWORD *)(v2 + 32) = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = v3;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v2 + 16);
  swift_endAccess();
  return v2;
}

uint64_t type metadata accessor for AmpDataProvider()
{
  return objc_opt_self();
}

uint64_t AmpDataProvider.init(mediaUserStateCenter:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 16) = 0u;
  v3 = MEMORY[0x1E0DEE9D8];
  *(_QWORD *)(v1 + 48) = 0;
  *(_QWORD *)(v1 + 56) = v3;
  swift_beginAccess();
  outlined assign with take of MediaUserStateCenter?(a1, v1 + 16);
  swift_endAccess();
  return v1;
}

uint64_t outlined assign with take of MediaUserStateCenter?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AmpDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  void (*v7)(__int128 *__return_ptr, uint64_t);
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  id v14;
  NSObject *v15;
  os_log_type_t v16;
  uint8_t *v17;
  uint64_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  unint64_t v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  _BYTE *v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint8_t *v38;
  unint64_t v39;
  _UNKNOWN **v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  _BYTE *v49;
  uint64_t v50;
  __int128 v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  unint64_t v56;
  _UNKNOWN **v57;

  v1 = v0;
  v2 = type metadata accessor for SignpostToken();
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v50 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v5 = type metadata accessor for OSSignposter();
  __swift_project_value_buffer(v5, (uint64_t)static Signposter.pommes);
  v6 = OSSignposter.begin(name:context:)("proxy.AMPSlice", 14, 2u, 0, (uint64_t)v4);
  v7 = *(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v0 + 96);
  v7(&v55, v6);
  v8 = v56;
  v9 = outlined destroy of MediaUserStateCenter?((uint64_t)&v55, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  if (!v8)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, v11, v12, "AmpDataProvider Initializing the shared media user state center ...", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }

    v14 = objc_msgSend((id)objc_opt_self(), sel_shared);
    v56 = type metadata accessor for ICMediaUserStateCenter();
    v57 = &protocol witness table for ICMediaUserStateCenter;
    *(_QWORD *)&v55 = v14;
    (*(void (**)(__int128 *))(*(_QWORD *)v1 + 104))(&v55);
    v15 = Logger.logObject.getter();
    v16 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl(&dword_1C2356000, v15, v16, "AmpDataProvider Initializing the shared media user state center complete", v17, 2u);
      MEMORY[0x1C3BBFF64](v17, -1, -1);
    }

  }
  v7(&v53, v9);
  if (!v54)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v53, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v30 = type metadata accessor for Logger();
    __swift_project_value_buffer(v30, (uint64_t)static Logger.pommes);
    v31 = Logger.logObject.getter();
    v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_1C2356000, v31, v32, "AmpDataProvider the shared media user state center initialization failed", v33, 2u);
      MEMORY[0x1C3BBFF64](v33, -1, -1);
    }

    lazy protocol witness table accessor for type DataProviderError and conformance DataProviderError();
    swift_allocError();
    *v34 = 0;
    swift_willThrow();
    goto LABEL_38;
  }
  outlined init with take of AppDataProviding(&v53, (uint64_t)&v55);
  if (!AFSupportsMultiUser())
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v35 = type metadata accessor for Logger();
    __swift_project_value_buffer(v35, (uint64_t)static Logger.pommes);
    v36 = Logger.logObject.getter();
    v37 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v36, v37))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_1C2356000, v36, v37, "AmpDataProvider getting the current user state from shared media user state center ...", v38, 2u);
      MEMORY[0x1C3BBFF64](v38, -1, -1);
    }

    v39 = v56;
    v40 = v57;
    __swift_project_boxed_opaque_existential_1(&v55, v56);
    ((void (*)(__int128 *__return_ptr, unint64_t, _UNKNOWN **))v40[2])(&v51, v39, v40);
    if (v52)
    {
      outlined init with take of AppDataProviding(&v51, (uint64_t)&v53);
      v41 = Logger.logObject.getter();
      v42 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v41, v42))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_1C2356000, v41, v42, "AmpDataProvider getting the current user state from shared media user state center complete", v43, 2u);
        MEMORY[0x1C3BBFF64](v43, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _ContiguousArrayStorage<MediaUserState>);
      v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_1C24FA1B0;
      outlined init with copy of AppDataProviding((uint64_t)&v53, v44 + 32);
      (*(void (**)(uint64_t))(*(_QWORD *)v1 + 128))(v44);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v53);
      goto LABEL_34;
    }
    outlined destroy of MediaUserStateCenter?((uint64_t)&v51, &demangling cache variable for type metadata for MediaUserState?);
    v46 = Logger.logObject.getter();
    v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_1C2356000, v46, v47, "AmpDataProvider the current user state cache is not initialized", v48, 2u);
      MEMORY[0x1C3BBFF64](v48, -1, -1);
    }

    lazy protocol witness table accessor for type DataProviderError and conformance DataProviderError();
    swift_allocError();
    *v49 = 1;
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
LABEL_38:
    v45 = (uint64_t)v4;
    goto LABEL_39;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v18 = type metadata accessor for Logger();
  __swift_project_value_buffer(v18, (uint64_t)static Logger.pommes);
  v19 = Logger.logObject.getter();
  v20 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v19, v20))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_1C2356000, v19, v20, "AmpDataProvider getting the current user states from shared media user state center", v21, 2u);
    MEMORY[0x1C3BBFF64](v21, -1, -1);
  }

  v22 = v56;
  v23 = v57;
  __swift_project_boxed_opaque_existential_1(&v55, v56);
  v24 = ((uint64_t (*)(unint64_t, _UNKNOWN **))v23[3])(v22, v23);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 128))(v24);
  v26 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 120))(v25) + 16);
  swift_bridgeObjectRelease();
  if (!v26)
  {
    v27 = Logger.logObject.getter();
    v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v27, v28))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_1C2356000, v27, v28, "AmpDataProvider mediaUserStates is empty under Multi-User mode", v29, 2u);
      MEMORY[0x1C3BBFF64](v29, -1, -1);
    }

  }
LABEL_34:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  v45 = (uint64_t)v4;
LABEL_39:
  OSSignposter.end(token:message:)(v45, 0, 0xE000000000000000);
  outlined destroy of PommesSearchRequest((uint64_t)v4, (uint64_t (*)(_QWORD))type metadata accessor for SignpostToken);
}

Swift::Void __swiftcall AmpDataProvider.reset()()
{
  uint64_t v0;
  _OWORD v1[2];
  uint64_t v2;

  (*(void (**)(_QWORD))(*(_QWORD *)v0 + 128))(MEMORY[0x1E0DEE9D8]);
  v2 = 0;
  memset(v1, 0, sizeof(v1));
  (*(void (**)(_OWORD *))(*(_QWORD *)v0 + 104))(v1);
}

uint64_t AmpDataProvider.deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AmpDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  outlined destroy of MediaUserStateCenter?(v0 + 16, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AmpDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 152))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AmpDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 160))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AmpDataProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)v1 + 168))();
  *a1 = result;
  return result;
}

uint64_t protocol witness for DataProvider.reset() in conformance AmpDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 176))();
}

unint64_t lazy protocol witness table accessor for type DataProviderError and conformance DataProviderError()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError;
  if (!lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for DataProviderError, &type metadata for DataProviderError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError);
  }
  return result;
}

{
  unint64_t result;

  result = lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError;
  if (!lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for DataProviderError, &type metadata for DataProviderError);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DataProviderError and conformance DataProviderError);
  }
  return result;
}

uint64_t sub_1C23DAE7C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)a1 + 96))();
}

uint64_t sub_1C23DAEA4(uint64_t a1, uint64_t a2)
{
  _BYTE v4[40];

  outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)v4, (uint64_t *)&demangling cache variable for type metadata for MediaUserStateCenter?);
  return (*(uint64_t (**)(_BYTE *))(**(_QWORD **)a2 + 104))(v4);
}

uint64_t sub_1C23DAEEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 120))();
  *a2 = result;
  return result;
}

uint64_t sub_1C23DAF1C(uint64_t a1, uint64_t a2)
{
  uint64_t (*v2)(uint64_t);
  uint64_t v3;

  v2 = *(uint64_t (**)(uint64_t))(**(_QWORD **)a2 + 128);
  v3 = swift_bridgeObjectRetain();
  return v2(v3);
}

uint64_t method lookup function for AmpDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AmpDataProvider.mediaUserStateCenter.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AmpDataProvider.mediaUserStateCenter.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))();
}

uint64_t dispatch thunk of AmpDataProvider.mediaUserStateCenter.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AmpDataProvider.cachedMediaUserStates.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 120))();
}

uint64_t dispatch thunk of AmpDataProvider.cachedMediaUserStates.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 128))();
}

uint64_t dispatch thunk of AmpDataProvider.cachedMediaUserStates.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 136))();
}

uint64_t dispatch thunk of AmpDataProvider.__allocating_init(mediaUserStateCenter:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 144))();
}

uint64_t dispatch thunk of AmpDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AmpDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))() & 1;
}

uint64_t dispatch thunk of AmpDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 168);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of AmpDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 176))();
}

uint64_t dispatch thunk of PIMSEnablementProviding.getMusicRankingInfluenceStatus()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for PIMSEnablementProvider()
{
  return &type metadata for PIMSEnablementProvider;
}

id AudioQueueStateDataProvider.audioQueueStateManager.getter()
{
  uint64_t v0;

  return *(id *)(v0 + 16);
}

uint64_t static AudioQueueStateDataProvider.make(audioQueueStateManager:)(void *a1)
{
  uint64_t v2;
  id v3;

  type metadata accessor for AudioQueueStateDataProvider();
  v2 = swift_allocObject();
  *(_QWORD *)(v2 + 16) = a1;
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for AnyDataProvider<Apple_Parsec_Siri_V2alpha_AudioQueueStateInfo>);
  swift_allocObject();
  v3 = a1;
  return specialized AnyDataProvider.init<A>(provider:)(v2);
}

uint64_t type metadata accessor for AudioQueueStateDataProvider()
{
  return objc_opt_self();
}

Swift::Void __swiftcall AudioQueueStateDataProvider.prepare()()
{
  uint64_t v0;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x108))();
}

Swift::Void __swiftcall AudioQueueStateDataProvider.reset()()
{
  uint64_t v0;

  (*(void (**)(void))((*MEMORY[0x1E0DEEDD8] & **(_QWORD **)(v0 + 16)) + 0x110))();
}

uint64_t AudioQueueStateDataProvider.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t AudioQueueStateDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AudioQueueStateDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 96))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AudioQueueStateDataProvider()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 104))() & 1;
}

uint64_t outlined init with take of Apple_Parsec_Siri_V2alpha_ProfileSlice?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Apple_Parsec_Siri_V2alpha_ProfileSlice?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t method lookup function for AudioQueueStateDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 96))();
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 104))() & 1;
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 112))();
}

uint64_t dispatch thunk of AudioQueueStateDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 120);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

void SportsProperty.apply(to:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  __asm { BR              X10 }
}

uint64_t sub_1C23DB320()
{
  swift_bridgeObjectRetain();
  return SportsItem.team.setter();
}

uint64_t static PersonalizationLevel.from(uso:)@<X0>(unint64_t a1@<X8>)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t i;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  unint64_t v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;

  v2 = MEMORY[0x1C3BBD000]();
  if (v2)
  {
    v3 = v2;
    if (v2 >> 62)
      goto LABEL_23;
    for (i = *(_QWORD *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10); i; i = _CocoaArrayWrapper.endIndex.getter())
    {
      v16 = a1;
      v5 = 0;
      a1 = v3 & 0xC000000000000001;
      while (1)
      {
        if (a1)
          MEMORY[0x1C3BBF3F4](v5, v3);
        else
          swift_retain();
        v6 = dispatch thunk of CodeGenListEntry.entry.getter();
        if (v17
          && (v7 = MEMORY[0x1C3BBD018](v6), v8 = swift_release(), v7)
          && (v9 = MEMORY[0x1C3BBD0F0](v8), v11 = v10, swift_release(), v11))
        {
          if (v9 == 0xD000000000000015 && v11 == 0x80000001C25037A0)
          {
            swift_bridgeObjectRelease();
            swift_release();
LABEL_21:
            swift_bridgeObjectRelease();
            v17 = v5;
            return closure #2 in static PersonalizationLevel.from(uso:)(&v17, v16);
          }
          v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_release();
          swift_bridgeObjectRelease();
          if ((v12 & 1) != 0)
            goto LABEL_21;
        }
        else
        {
          swift_release();
        }
        v13 = v5 + 1;
        if (__OFADD__(v5, 1))
          break;
        ++v5;
        if (v13 == i)
        {
          swift_bridgeObjectRelease();
          a1 = v16;
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_23:
      ;
    }
    swift_bridgeObjectRelease();
  }
LABEL_25:
  v15 = type metadata accessor for PersonalizationLevel();
  return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 56))(a1, 1, 1, v15);
}

uint64_t closure #2 in static PersonalizationLevel.from(uso:)@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v3 = *a1;
  result = MEMORY[0x1C3BBD000]();
  if (!result)
  {
LABEL_26:
    v14 = type metadata accessor for PersonalizationLevel();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(a2, 1, 1, v14);
  }
  if ((result & 0xC000000000000001) != 0)
  {
    MEMORY[0x1C3BBF3F4](v3, result);
    goto LABEL_6;
  }
  if ((v3 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (v3 < *(_QWORD *)((result & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    swift_retain();
LABEL_6:
    swift_bridgeObjectRelease();
    dispatch thunk of CodeGenListEntry.entry.getter();
    v5 = swift_release();
    if (v15)
    {
      v6 = MEMORY[0x1C3BBD00C](v5);
      v8 = v7;
      swift_release();
      if (v8)
      {
        if (v6 == 0xD00000000000001ALL && v8 == 0x80000001C25037C0
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = (unsigned int *)MEMORY[0x1E0D98660];
LABEL_25:
          v11 = *v9;
          v12 = type metadata accessor for PersonalizationLevel();
          v13 = *(_QWORD *)(v12 - 8);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 104))(a2, v11, v12);
          return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(a2, 0, 1, v12);
        }
        if (v6 == 0xD00000000000001CLL && v8 == 0x80000001C25037E0
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = (unsigned int *)MEMORY[0x1E0D98670];
          goto LABEL_25;
        }
        if (v6 == 0xD00000000000001DLL && v8 == 0x80000001C2503800
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          swift_bridgeObjectRelease();
          v9 = (unsigned int *)MEMORY[0x1E0D98678];
          goto LABEL_25;
        }
        if (v6 == 0xD00000000000001BLL && v8 == 0x80000001C2503820)
        {
          swift_bridgeObjectRelease();
LABEL_24:
          v9 = (unsigned int *)MEMORY[0x1E0D98668];
          goto LABEL_25;
        }
        v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v10 & 1) != 0)
          goto LABEL_24;
      }
    }
    goto LABEL_26;
  }
  __break(1u);
  return result;
}

uint64_t static SportsItem.empty.getter()
{
  return SportsItem.init(sport:league:team:athlete:sportQId:leagueQId:teamQId:athleteQId:)();
}

uint64_t specialized static SportsProperty.from(entity:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  if (MEMORY[0x1C3BBD018]())
  {
    v0 = MEMORY[0x1C3BBD0F0]();
    v2 = v1;
    v3 = swift_release();
    v4 = MEMORY[0x1C3BBD00C](v3);
    if (v2 && v5)
    {
      v6 = v4;
      if (v0 == 0x74726F7073 && v2 == 0xE500000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x69715F74726F7073 && v2 == 0xE900000000000064
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x65756761656CLL && v2 == 0xE600000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x715F65756761656CLL && v2 == 0xEA00000000006469
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 1835099508 && v2 == 0xE400000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x6469715F6D616574 && v2 == 0xE800000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x6574656C687461 && v2 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
        || v0 == 0x5F6574656C687461 && v2 == 0xEB00000000646971)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
      v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if ((v8 & 1) != 0)
        return v6;
    }
  }
  else
  {
    MEMORY[0x1C3BBD00C]();
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t specialized static UsoEntity_common_SportsItem.from(resultEntity:logger:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  NSObject *v35;
  os_log_type_t v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;

  v45 = a2;
  v2 = type metadata accessor for BinaryDecodingOptions();
  MEMORY[0x1E0C80A78](v2);
  v43 = (char *)&v41 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UsoGraph?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v44 = *(_QWORD *)(v7 - 8);
  MEMORY[0x1E0C80A78](v7);
  v42 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Typespb_Domain();
  v10 = (uint64_t (*)(uint64_t))MEMORY[0x1E0D6D6F8];
  v11 = *(_QWORD *)(v9 - 8);
  v12 = MEMORY[0x1E0C80A78](v9);
  v14 = (char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v41 - v15;
  Apple_Parsec_Siri_Context_ResultEntity.domain.getter();
  (*(void (**)(char *, _QWORD, uint64_t))(v11 + 104))(v14, *MEMORY[0x1E0D6D6F0], v9);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Typespb_Domain and conformance Typespb_Domain, v10, MEMORY[0x1E0D6D710]);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  v17 = v46;
  v18 = v49;
  v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v14, v9);
  v19(v16, v9);
  v20 = 0;
  if (v17 == v18)
  {
    Apple_Parsec_Siri_Context_ResultEntity.usoEntity.getter();
    v48 = 0;
    v46 = 0u;
    v47 = 0u;
    BinaryDecodingOptions.init()();
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type Siri_Nlu_External_UsoGraph and conformance Siri_Nlu_External_UsoGraph, (uint64_t (*)(uint64_t))MEMORY[0x1E0D9F270], MEMORY[0x1E0D9F238]);
    Message.init(serializedData:extensions:partial:options:)();
    v21 = v7;
    v22 = v44;
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v6, 0, 1, v7);
    v23 = v42;
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v42, v6, v7);
    static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    swift_retain_n();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      *(_QWORD *)&v46 = v29;
      *(_DWORD *)v28 = 136315138;
      v22 = v44;
      v30 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
      v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v30, v31, (uint64_t *)&v46);
      v23 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v25, v26, "Got USO graph for alternative entity: %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v29, -1, -1);
      MEMORY[0x1C3BBFF64](v28, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    if (static UsoConversionUtils.extractFirstEntityFromGraph(graph:)())
    {
      swift_retain();
      static UsoEntity_CodeGenConverter.convert(entity:)();
      swift_release();
      if (*((_QWORD *)&v47 + 1))
      {
        type metadata accessor for UsoEntity_common_SportsItem();
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_release();
          swift_release();
          v20 = v49;
          (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v21);
          return v20;
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)&v46, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      swift_retain_n();
      v35 = Logger.logObject.getter();
      v36 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v35, v36))
      {
        v37 = (uint8_t *)swift_slowAlloc();
        v38 = swift_slowAlloc();
        *(_QWORD *)&v46 = v38;
        *(_DWORD *)v37 = 136315138;
        v39 = UsoTask.verbString.getter();
        v49 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v39, v40, (uint64_t *)&v46);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v35, v36, "Entity was not a sports entity but was a %s. Will ignore item", v37, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v38, -1, -1);
        MEMORY[0x1C3BBFF64](v37, -1, -1);
        swift_release();
        swift_release();

        (*(void (**)(char *, uint64_t))(v44 + 8))(v42, v21);
        return 0;
      }

      swift_release_n();
    }
    else
    {
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v34 = 0;
        _os_log_impl(&dword_1C2356000, v32, v33, "Unable to extract sports entity from USO graph", v34, 2u);
        MEMORY[0x1C3BBFF64](v34, -1, -1);
        swift_release();

LABEL_3:
        (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v21);
        return 0;
      }

    }
    swift_release();
    goto LABEL_3;
  }
  return v20;
}

uint64_t outlined copy of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 7u)
    return swift_bridgeObjectRetain();
  return result;
}

uint64_t destroy for SportsProperty(uint64_t a1)
{
  return outlined consume of SportsProperty(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t outlined consume of SportsProperty(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t result;

  if (a3 <= 7u)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SportsProperty(*(_QWORD *)a2, v4, v5);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for SportsProperty(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  uint64_t v7;
  unsigned __int8 v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 16);
  outlined copy of SportsProperty(*(_QWORD *)a2, v4, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v5;
  outlined consume of SportsProperty(v6, v7, v8);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for SportsProperty(uint64_t a1, uint64_t a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  unsigned __int8 v6;

  v3 = *(_BYTE *)(a2 + 16);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + 16) = v3;
  outlined consume of SportsProperty(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for SportsProperty(uint64_t a1, unsigned int a2)
{
  unsigned int v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0xF9 && *(_BYTE *)(a1 + 17))
    return (*(_DWORD *)a1 + 249);
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 7)
    v4 = -1;
  else
    v4 = v3 ^ 0xFF;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SportsProperty(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF8)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 249;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if (a3 >= 0xF9)
      *(_BYTE *)(result + 17) = 0;
    if (a2)
      *(_BYTE *)(result + 16) = -(char)a2;
  }
  return result;
}

uint64_t getEnumTag for SportsProperty(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t destructiveInjectEnumTag for SportsProperty(uint64_t result, char a2)
{
  *(_BYTE *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SportsProperty()
{
  return &type metadata for SportsProperty;
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.__allocating_init(satisfies:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = swift_allocObject();
  LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, a2);
  return v4;
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  _QWORD *v14;
  id v15;
  void *v16;
  uint64_t v17;
  void *v18;
  id v19;
  void *v20;
  void *v21;
  id v22;
  uint64_t aBlock;
  uint64_t v25;
  uint64_t (*v26)(uint64_t);
  void *v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;

  v3 = v2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(_QWORD *)(v2 + 128) = MEMORY[0x1E0DEE9E0];
  *(_QWORD *)(v2 + 136) = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D44208]), sel_init);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v12 = 0;
    _os_log_impl(&dword_1C2356000, v10, v11, "LaunchServicesSatisfyingAppsDataProvider initialize", v12, 2u);
    MEMORY[0x1C3BBFF64](v12, -1, -1);
  }

  *(_QWORD *)(v3 + 112) = a1;
  *(_QWORD *)(v3 + 120) = a2;
  swift_retain();
  static TaskPriority.low.getter();
  v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 56))(v8, 0, 1, v13);
  v14 = (_QWORD *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  v14[4] = v3;
  v14[5] = a1;
  v14[6] = a2;
  swift_retain();
  swift_retain();
  _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), (uint64_t)v14);
  swift_release();
  v15 = objc_msgSend((id)objc_opt_self(), sel_defaultCenter);
  v16 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000002ELL, 0x80000001C2503840);
  v28 = partial apply for closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:);
  v29 = v3;
  v17 = MEMORY[0x1E0C809B0];
  aBlock = MEMORY[0x1E0C809B0];
  v25 = 1107296256;
  v26 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v27 = &block_descriptor_3;
  v18 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v19 = objc_msgSend(v15, sel_addObserverForName_object_queue_usingBlock_, v16, 0, 0, v18);
  _Block_release(v18);
  swift_unknownObjectRelease();

  v20 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000030, 0x80000001C2503890);
  v28 = partial apply for closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:);
  v29 = v3;
  aBlock = v17;
  v25 = 1107296256;
  v26 = thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ();
  v27 = &block_descriptor_4;
  v21 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  v22 = objc_msgSend(v15, sel_addObserverForName_object_queue_usingBlock_, v20, 0, 0, v21);
  swift_release();
  _Block_release(v21);

  swift_unknownObjectRelease();
  return v3;
}

uint64_t closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;

  v6[17] = a5;
  v6[18] = a6;
  v6[16] = a4;
  v7 = type metadata accessor for NSFastEnumerationIterator();
  v6[19] = v7;
  v6[20] = *(_QWORD *)(v7 - 8);
  v6[21] = swift_task_alloc();
  return swift_task_switch();
}

uint64_t closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  _QWORD *v5;
  id v6;
  unint64_t v7;
  id v8;
  uint64_t v9;
  uint64_t (*v10)(_QWORD, _QWORD, _QWORD);
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t v24[2];

  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2356000, v2, v3, "LaunchServicesSatisfyingAppsDataProvider get installed apps", v4, 2u);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }
  v5 = (_QWORD *)(v0 + 120);

  v6 = objc_msgSend((id)objc_opt_self(), sel_enumeratorWithOptions_, 0);
  v7 = MEMORY[0x1E0DEE9D8];
  v24[0] = MEMORY[0x1E0DEE9D8];
  v8 = v6;
  NSEnumerator.makeIterator()();

  lazy protocol witness table accessor for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider(&lazy protocol witness table cache variable for type NSFastEnumerationIterator and conformance NSFastEnumerationIterator, 255, (uint64_t (*)(uint64_t))MEMORY[0x1E0CAFB58], MEMORY[0x1E0CAFB80]);
  dispatch thunk of IteratorProtocol.next()();
  if (*(_QWORD *)(v0 + 40))
  {
    do
    {
      outlined init with take of Any((_OWORD *)(v0 + 16), (_OWORD *)(v0 + 48));
      outlined init with copy of Any(v0 + 48, v0 + 80);
      type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for LSApplicationRecord);
      if ((swift_dynamicCast() & 1) == 0)
        *v5 = 0;
      v9 = __swift_destroy_boxed_opaque_existential_1(v0 + 48);
      if (*v5)
      {
        MEMORY[0x1C3BBEE78](v9);
        if (*(_QWORD *)((v24[0] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((v24[0] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      dispatch thunk of IteratorProtocol.next()();
    }
    while (*(_QWORD *)(v0 + 40));
    v7 = v24[0];
  }
  v11 = *(_QWORD *)(v0 + 128);
  v10 = *(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 136);
  (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 160) + 8))(*(_QWORD *)(v0 + 168), *(_QWORD *)(v0 + 152));

  swift_retain();
  swift_retain();
  v12 = specialized Sequence.compactMap<A>(_:)(v7, v11, v10);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (v12[2])
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
    v13 = static _DictionaryStorage.allocate(capacity:)();
  }
  else
  {
    v13 = MEMORY[0x1E0DEE9E0];
  }
  v24[0] = v13;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)((uint64_t)v12, 1, v24);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v0 + 176) = v24[0];
  swift_retain_n();
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    v23 = swift_slowAlloc();
    v24[0] = v23;
    *(_DWORD *)v16 = 136315138;
    v17 = swift_retain();
    v18 = specialized _copyCollectionToContiguousArray<A>(_:)(v17);
    swift_release();
    v19 = MEMORY[0x1C3BBEE9C](v18, MEMORY[0x1E0DEA968]);
    v21 = v20;
    swift_release();
    *(_QWORD *)(v0 + 112) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, v21, v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1C2356000, v14, v15, "LaunchServicesSatisfyingAppsDataProvider satisfying app IDs initialized to %s", v16, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v23, -1, -1);
    MEMORY[0x1C3BBFF64](v16, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 128) + 128) = *(_QWORD *)(v0 + 176);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1C23DCF00()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v4 = v1[2];
  v5 = v1[3];
  v6 = v1[4];
  v7 = v1[5];
  v8 = v1[6];
  v9 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v9;
  *v9 = v2;
  v9[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  return closure #1 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v4, v5, v6, v7, v8);
}

uint64_t partial apply for closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v1, (uint64_t)&unk_1E7BFFC40, (uint64_t)&async function pointer to partial apply for closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:));
}

uint64_t closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 64) = a4;
  *(_QWORD *)(v5 + 72) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 80) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 128);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  id v6;
  void *v7;
  id v8;
  void *v9;
  id v10;
  void *v11;
  uint64_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v22;
  id v23;
  uint64_t v24;
  uint8_t *buf;
  uint64_t v26;
  uint64_t v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v0[7] = v0[10];
  v1 = *(_QWORD *)(v0[9] + 16);
  v0[11] = v1;
  if (v1)
  {
    swift_bridgeObjectRetain();
    v2 = 0;
    while (1)
    {
      v0[12] = v2;
      v3 = v0[9] + 16 * v2;
      v4 = *(_QWORD *)(v3 + 32);
      v0[13] = v4;
      v5 = *(_QWORD *)(v3 + 40);
      v0[14] = v5;
      v6 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
      swift_bridgeObjectRetain();
      v7 = (void *)MEMORY[0x1C3BBEC44](v4, v5);
      v0[2] = 0;
      v8 = objc_msgSend(v6, sel_initWithBundleIdentifier_allowPlaceholder_error_, v7, 0, v0 + 2);
      v0[15] = v8;

      v9 = (void *)v0[2];
      if (v8)
        break;
      v10 = v9;
      v11 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();

      v2 = v0[12] + 1;
      if (v2 == v0[11])
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    v22 = objc_opt_self();
    v23 = v9;
    v0[16] = objc_msgSend((id)v22, sel_appInfoWithApplicationRecord_, v8);
    v0[5] = &type metadata for FeatureFlag;
    v0[6] = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v24 = swift_allocObject();
    v0[2] = v24;
    *(_QWORD *)(v24 + 16) = 5;
    *(_QWORD *)(v24 + 24) = 0;
    *(_QWORD *)(v24 + 32) = 0;
    *(_QWORD *)(v24 + 40) = 0;
    *(_BYTE *)(v24 + 48) = 3;
    LOBYTE(v22) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v0 + 2));
    if ((v22 & 1) == 0)
      v0[18] = MEMORY[0x1E0DEE9D8];
  }
  else
  {
LABEL_6:
    if (one-time initialization token for pommes != -1)
      swift_once();
    v12 = type metadata accessor for Logger();
    __swift_project_value_buffer(v12, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v13 = Logger.logObject.getter();
    v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      v26 = swift_slowAlloc();
      v27[0] = v26;
      *(_DWORD *)v15 = 136315138;
      buf = v15;
      v16 = swift_bridgeObjectRetain();
      v17 = specialized _copyCollectionToContiguousArray<A>(_:)(v16);
      swift_bridgeObjectRelease();
      v18 = MEMORY[0x1C3BBEE9C](v17, MEMORY[0x1E0DEA968]);
      v20 = v19;
      swift_release();
      v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v20, v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v13, v14, "Satisfying app IDs updated to %s to due to apps installation", buf, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v26, -1, -1);
      MEMORY[0x1C3BBFF64](buf, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_beginAccess();
    v0[21] = v0[7];
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(v0 + 136) = *(_QWORD *)(*(_QWORD *)(v0 + 64) + 136);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  void *v2;
  id v3;
  id v4;
  uint64_t v5;
  void *v6;
  void *v7;

  v1 = *(void **)(v0 + 136);
  v2 = (void *)MEMORY[0x1C3BBEC44](*(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  *(_QWORD *)(v0 + 16) = 0;
  v3 = objc_msgSend(v1, sel_actionsForBundleIdentifier_error_, v2, v0 + 16);

  v4 = *(id *)(v0 + 16);
  if (v3)
  {
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for LNActionMetadata);
    v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  }
  else
  {
    v6 = v4;
    v7 = (void *)_convertNSErrorToError(_:)();

    swift_willThrow();
    v5 = MEMORY[0x1E0DEE9D8];
  }
  *(_QWORD *)(v0 + 144) = v5;
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;

  v1 = v0[8];
  v0[19] = *(_QWORD *)(v1 + 112);
  v0[20] = *(_QWORD *)(v1 + 120);
  return swift_task_switch();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  void *v10;
  id v11;
  id v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char isUniquelyReferenced_nonNull_native;
  char v20;
  unint64_t v21;
  uint64_t v22;
  _BOOL8 v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char v29;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t v40;
  BOOL v41;
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  id v49;
  void *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  uint64_t v55;
  NSObject *v56;
  os_log_type_t v57;
  uint8_t *v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  id v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70[2];

  v70[1] = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(v0 + 152))(*(_QWORD *)(v0 + 120), *(_QWORD *)(v0 + 128), *(_QWORD *)(v0 + 144)) & 1) != 0)
  {
    v1 = *(void **)(v0 + 128);
    v2 = *(id *)(v0 + 120);
    v3 = v1;
    v4 = objc_msgSend(v2, sel_bundleIdentifier);
    if (v4)
    {
      v5 = v4;
      v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v8 = v7;

      v10 = *(void **)(v0 + 120);
      v9 = *(void **)(v0 + 128);
      if (v9)
      {
LABEL_4:
        v11 = objc_msgSend(v9, sel_supportedIntents);
        v69 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        v12 = objc_msgSend(v9, sel_supportedMediaCategories);
        v13 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

        goto LABEL_8;
      }
    }
    else
    {
      v6 = 0;
      v8 = 0;
      v10 = *(void **)(v0 + 120);
      v9 = *(void **)(v0 + 128);
      if (v9)
        goto LABEL_4;
    }
    v13 = MEMORY[0x1E0DEE9E8];
    v69 = MEMORY[0x1E0DEE9E8];
LABEL_8:

    v17 = *(_QWORD *)(v0 + 104);
    v16 = *(_QWORD *)(v0 + 112);
    v18 = *(_QWORD *)(v0 + 56);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)(v0 + 16) = v18;
    *(_QWORD *)(v0 + 56) = 0x8000000000000000;
    v21 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v16);
    v22 = *(_QWORD *)(v18 + 16);
    v23 = (v20 & 1) == 0;
    v24 = v22 + v23;
    if (__OFADD__(v22, v23))
    {
      __break(1u);
    }
    else
    {
      v25 = v20;
      if (*(_QWORD *)(v18 + 24) >= v24)
      {
        v67 = v13;
        v31 = v8;
        v32 = v6;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        v26 = *(_QWORD *)(v0 + 104);
        v27 = *(_QWORD *)(v0 + 112);
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, isUniquelyReferenced_nonNull_native);
        v28 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
        if ((v25 & 1) != (v29 & 1))
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        v21 = v28;
        v67 = v13;
        v31 = v8;
        v32 = v6;
      }
      v33 = *(_QWORD **)(v0 + 16);
      v34 = *(_QWORD *)(v0 + 144);
      if ((v25 & 1) != 0)
      {
        v35 = (uint64_t *)(v33[7] + 40 * v21);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *v35 = v32;
        v35[1] = v31;
        v35[2] = v69;
        v35[3] = v67;
        v35[4] = v34;
LABEL_19:
        v44 = *(void **)(v0 + 120);
        v43 = *(void **)(v0 + 128);
        *(_QWORD *)(v0 + 56) = v33;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        goto LABEL_20;
      }
      v37 = *(_QWORD *)(v0 + 104);
      v36 = *(_QWORD *)(v0 + 112);
      v33[(v21 >> 6) + 8] |= 1 << v21;
      v38 = (_QWORD *)(v33[6] + 16 * v21);
      *v38 = v37;
      v38[1] = v36;
      v39 = (uint64_t *)(v33[7] + 40 * v21);
      *v39 = v32;
      v39[1] = v31;
      v39[2] = v69;
      v39[3] = v67;
      v39[4] = v34;
      v40 = v33[2];
      v41 = __OFADD__(v40, 1);
      v42 = v40 + 1;
      if (!v41)
      {
        v33[2] = v42;
        swift_bridgeObjectRetain();
        goto LABEL_19;
      }
    }
    __break(1u);
  }
  v15 = *(void **)(v0 + 120);
  v14 = *(void **)(v0 + 128);
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
LABEL_20:
  v45 = *(_QWORD *)(v0 + 96) + 1;
  if (v45 == *(_QWORD *)(v0 + 88))
  {
LABEL_23:
    swift_bridgeObjectRelease();
    if (one-time initialization token for pommes != -1)
      swift_once();
    v55 = type metadata accessor for Logger();
    __swift_project_value_buffer(v55, (uint64_t)static Logger.pommes);
    swift_bridgeObjectRetain_n();
    v56 = Logger.logObject.getter();
    v57 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v56, v57))
    {
      v58 = (uint8_t *)swift_slowAlloc();
      v68 = swift_slowAlloc();
      v70[0] = v68;
      *(_DWORD *)v58 = 136315138;
      v59 = swift_bridgeObjectRetain();
      v60 = specialized _copyCollectionToContiguousArray<A>(_:)(v59);
      swift_bridgeObjectRelease();
      v61 = MEMORY[0x1C3BBEE9C](v60, MEMORY[0x1E0DEA968]);
      v63 = v62;
      swift_release();
      *(_QWORD *)(v0 + 16) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v61, v63, v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl(&dword_1C2356000, v56, v57, "Satisfying app IDs updated to %s to due to apps installation", v58, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v68, -1, -1);
      MEMORY[0x1C3BBFF64](v58, -1, -1);
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    swift_beginAccess();
    *(_QWORD *)(v0 + 168) = *(_QWORD *)(v0 + 56);
  }
  else
  {
    while (1)
    {
      *(_QWORD *)(v0 + 96) = v45;
      v46 = *(_QWORD *)(v0 + 72) + 16 * v45;
      v47 = *(_QWORD *)(v46 + 32);
      *(_QWORD *)(v0 + 104) = v47;
      v48 = *(_QWORD *)(v46 + 40);
      *(_QWORD *)(v0 + 112) = v48;
      v49 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
      swift_bridgeObjectRetain();
      v50 = (void *)MEMORY[0x1C3BBEC44](v47, v48);
      *(_QWORD *)(v0 + 16) = 0;
      v51 = objc_msgSend(v49, sel_initWithBundleIdentifier_allowPlaceholder_error_, v50, 0, v0 + 16);
      *(_QWORD *)(v0 + 120) = v51;

      v52 = *(void **)(v0 + 16);
      if (v51)
        break;
      v53 = v52;
      v54 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      swift_bridgeObjectRelease();

      v45 = *(_QWORD *)(v0 + 96) + 1;
      if (v45 == *(_QWORD *)(v0 + 88))
        goto LABEL_23;
    }
    v64 = objc_opt_self();
    v65 = v52;
    *(_QWORD *)(v0 + 128) = objc_msgSend((id)v64, sel_appInfoWithApplicationRecord_, v51);
    *(_QWORD *)(v0 + 40) = &type metadata for FeatureFlag;
    *(_QWORD *)(v0 + 48) = lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
    v66 = swift_allocObject();
    *(_QWORD *)(v0 + 16) = v66;
    *(_QWORD *)(v66 + 16) = 5;
    *(_QWORD *)(v66 + 24) = 0;
    *(_QWORD *)(v66 + 32) = 0;
    *(_QWORD *)(v66 + 40) = 0;
    *(_BYTE *)(v66 + 48) = 3;
    LOBYTE(v64) = isFeatureEnabled(_:)();
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    if ((v64 & 1) == 0)
      *(_QWORD *)(v0 + 144) = MEMORY[0x1E0DEE9D8];
  }
  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 64) + 128) = *(_QWORD *)(v0 + 168);
  swift_bridgeObjectRelease();
  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void (*v6)(char *);
  uint64_t v8;

  v2 = type metadata accessor for Notification();
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  _QWORD *v20;
  _DWORD v22[4];
  unsigned __int8 v23[40];
  __int128 v24;
  __int128 v25;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v22[-2] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = Notification.userInfo.getter();
  if (!v9)
  {
    v24 = 0u;
    v25 = 0u;
    return outlined destroy of Any?((uint64_t)&v24);
  }
  v10 = v9;
  strcpy((char *)v22, "bundleIDs");
  HIWORD(v22[2]) = 0;
  v22[3] = -385875968;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v10 + 16) && (v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v12 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v10 + 56) + 32 * v11, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v23);
  if (!*((_QWORD *)&v25 + 1))
    return outlined destroy of Any?((uint64_t)&v24);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [String]);
  result = swift_dynamicCast();
  if ((result & 1) == 0)
    return result;
  v14 = *(_QWORD *)v23;
  v15 = Notification.userInfo.getter();
  if (!v15)
  {
    v24 = 0u;
    v25 = 0u;
LABEL_20:
    outlined destroy of Any?((uint64_t)&v24);
    return swift_bridgeObjectRelease();
  }
  v16 = v15;
  strcpy((char *)v22, "isPlaceholder");
  HIWORD(v22[3]) = -4864;
  AnyHashable.init<A>(_:)();
  if (*(_QWORD *)(v16 + 16) && (v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v18 & 1) != 0))
  {
    outlined init with copy of Any(*(_QWORD *)(v16 + 56) + 32 * v17, (uint64_t)&v24);
  }
  else
  {
    v24 = 0u;
    v25 = 0u;
  }
  swift_bridgeObjectRelease();
  outlined destroy of AnyHashable((uint64_t)v23);
  if (!*((_QWORD *)&v25 + 1))
    goto LABEL_20;
  if ((swift_dynamicCast() & 1) != 0 && v23[0] != 1)
  {
    v19 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 56))(v8, 1, 1, v19);
    v20 = (_QWORD *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    v20[4] = a2;
    v20[5] = v14;
    swift_retain();
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, a4, (uint64_t)v20);
    return swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t partial apply for closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1)
{
  uint64_t v1;

  return closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, v1, (uint64_t)&unk_1E7BFFC18, (uint64_t)&async function pointer to partial apply for closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:));
}

uint64_t closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;

  *(_QWORD *)(v5 + 24) = a4;
  *(_QWORD *)(v5 + 32) = a5;
  return swift_task_switch();
}

uint64_t closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  uint64_t v0;

  *(_QWORD *)(v0 + 40) = *(_QWORD *)(*(_QWORD *)(v0 + 24) + 128);
  swift_bridgeObjectRetain();
  return swift_task_switch();
}

{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;

  v1 = v0[4];
  v2 = v0[5];
  v3 = swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v1;
  v0[6] = specialized _NativeDictionary.filter(_:)(v2, (uint64_t (*)(uint64_t, uint64_t, __int128 *))partial apply for closure #1 in closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:), v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v4 = type metadata accessor for Logger();
  __swift_project_value_buffer(v4, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v5, v6))
  {
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v15 = v8;
    *(_DWORD *)v7 = 136315138;
    v9 = swift_retain();
    v10 = specialized _copyCollectionToContiguousArray<A>(_:)(v9);
    swift_release();
    v11 = MEMORY[0x1C3BBEE9C](v10, MEMORY[0x1E0DEA968]);
    v13 = v12;
    swift_release();
    v0[2] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v13, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_1C2356000, v5, v6, "Satisfying app IDs updated to %s to due apps uninstalled", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v8, -1, -1);
    MEMORY[0x1C3BBFF64](v7, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  return swift_task_switch();
}

{
  uint64_t v0;

  *(_QWORD *)(*(_QWORD *)(v0 + 24) + 128) = *(_QWORD *)(v0 + 48);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  char v9;
  uint64_t result;
  _QWORD *v11;
  uint64_t i;
  uint64_t v13;
  BOOL v14;

  v4 = a4[2];
  if (!v4)
    return 1;
  if (a4[4] == a1 && a4[5] == a2)
    return 0;
  v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  result = 0;
  if ((v9 & 1) == 0)
  {
    if (v4 == 1)
      return 1;
    v11 = a4 + 7;
    for (i = 1; ; ++i)
    {
      v13 = i + 1;
      if (__OFADD__(i, 1))
        break;
      v14 = *(v11 - 1) == a1 && *v11 == a2;
      if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        return 0;
      v11 += 2;
      result = 1;
      if (v13 == v4)
        return result;
    }
    __break(1u);
  }
  return result;
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:)(void (*a1)(_QWORD *))
{
  uint64_t v2;
  _QWORD *v3;

  v2 = swift_bridgeObjectRetain();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  a1(v3);
  return swift_release();
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return v0;
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.__deallocating_deinit()
{
  uint64_t v0;

  swift_release();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();
  return swift_defaultActor_deallocate();
}

uint64_t LaunchServicesSatisfyingAppsDataProvider.unownedExecutor.getter()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for Actor.unownedExecutor.getter in conformance LaunchServicesSatisfyingAppsDataProvider()
{
  uint64_t v0;

  return v0;
}

uint64_t protocol witness for SatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:) in conformance LaunchServicesSatisfyingAppsDataProvider(void (*a1)(_QWORD *))
{
  uint64_t v2;
  _QWORD *v3;

  v2 = swift_bridgeObjectRetain();
  v3 = specialized _copyCollectionToContiguousArray<A>(_:)(v2);
  swift_bridgeObjectRelease();
  a1(v3);
  return swift_release();
}

_QWORD *specialized _copyCollectionToContiguousArray<A>(_:)(unint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  uint64_t v5;
  unint64_t v6;

  v1 = a1;
  if (a1 >> 62)
    goto LABEL_10;
  v2 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (!v2)
    return (_QWORD *)MEMORY[0x1E0DEE9D8];
  while (1)
  {
    if (v2 <= 0)
    {
      v3 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    }
    else
    {
      __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>);
      v3 = (_QWORD *)swift_allocObject();
      v4 = _swift_stdlib_malloc_size(v3);
      v5 = v4 - 32;
      if (v4 < 32)
        v5 = v4 - 25;
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    specialized Array._copyContents(initializing:)((unint64_t)(v3 + 4), v2, v1, (void (*)(_QWORD))type metadata accessor for AudioItemCandidate, &lazy protocol witness table cache variable for type [AudioItemCandidate] and conformance [A], &demangling cache variable for type metadata for [AudioItemCandidate], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
    v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2)
      break;
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2)
      return (_QWORD *)MEMORY[0x1E0DEE9D8];
  }
  return v3;
}

uint64_t instantiation function for generic protocol witness table for LaunchServicesSatisfyingAppsDataProvider(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = lazy protocol witness table accessor for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider((unint64_t *)&lazy protocol witness table cache variable for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider, a2, (uint64_t (*)(uint64_t))type metadata accessor for LaunchServicesSatisfyingAppsDataProvider, (uint64_t)&protocol conformance descriptor for LaunchServicesSatisfyingAppsDataProvider);
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for LaunchServicesSatisfyingAppsDataProvider()
{
  return objc_opt_self();
}

uint64_t dispatch thunk of SatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t method lookup function for LaunchServicesSatisfyingAppsDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of LaunchServicesSatisfyingAppsDataProvider.__allocating_init(satisfies:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 136))();
}

uint64_t dispatch thunk of LaunchServicesSatisfyingAppsDataProvider.readSatisfyingAppDatas(setValue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t specialized _NativeDictionary.extractDictionary(using:count:)(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;

  if (!a3)
    return MEMORY[0x1E0DEE9E0];
  v4 = a4;
  v5 = a3;
  if (*(_QWORD *)(a4 + 16) == a3)
  {
    swift_retain();
    return v4;
  }
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for _DictionaryStorage<String, AppData>);
  result = static _DictionaryStorage.allocate(capacity:)();
  v8 = result;
  v36 = a2;
  if (a2 < 1)
    v9 = 0;
  else
    v9 = *a1;
  v10 = 0;
  v11 = result + 64;
  v38 = v4;
  while (1)
  {
    if (v9)
    {
      v12 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      v39 = v10;
      v13 = v12 | (v10 << 6);
    }
    else
    {
      v14 = v10 + 1;
      if (__OFADD__(v10, 1))
        goto LABEL_40;
      if (v14 >= v36)
        return v8;
      v15 = a1[v14];
      v16 = v10 + 1;
      if (!v15)
      {
        v16 = v10 + 2;
        if (v10 + 2 >= v36)
          return v8;
        v15 = a1[v16];
        if (!v15)
        {
          v16 = v10 + 3;
          if (v10 + 3 >= v36)
            return v8;
          v15 = a1[v16];
          if (!v15)
          {
            v17 = v10 + 4;
            if (v10 + 4 >= v36)
              return v8;
            v15 = a1[v17];
            if (!v15)
            {
              while (1)
              {
                v16 = v17 + 1;
                if (__OFADD__(v17, 1))
                  goto LABEL_41;
                if (v16 >= v36)
                  return v8;
                v15 = a1[v16];
                ++v17;
                if (v15)
                  goto LABEL_24;
              }
            }
            v16 = v10 + 4;
          }
        }
      }
LABEL_24:
      v9 = (v15 - 1) & v15;
      v39 = v16;
      v13 = __clz(__rbit64(v15)) + (v16 << 6);
    }
    v18 = (uint64_t *)(*(_QWORD *)(v4 + 48) + 16 * v13);
    v20 = *v18;
    v19 = v18[1];
    v21 = *(_QWORD *)(v4 + 56) + 40 * v13;
    v22 = *(_QWORD *)v21;
    v23 = *(_QWORD *)(v21 + 8);
    v40 = *(_OWORD *)(v21 + 16);
    v24 = *(_QWORD *)(v21 + 32);
    Hasher.init(_seed:)();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    String.hash(into:)();
    result = Hasher._finalize()();
    v25 = -1 << *(_BYTE *)(v8 + 32);
    v26 = result & ~v25;
    v27 = v26 >> 6;
    if (((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6))) != 0)
    {
      v28 = __clz(__rbit64((-1 << v26) & ~*(_QWORD *)(v11 + 8 * (v26 >> 6)))) | v26 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      v29 = 0;
      v30 = (unint64_t)(63 - v25) >> 6;
      do
      {
        if (++v27 == v30 && (v29 & 1) != 0)
        {
          __break(1u);
          goto LABEL_39;
        }
        v31 = v27 == v30;
        if (v27 == v30)
          v27 = 0;
        v29 |= v31;
        v32 = *(_QWORD *)(v11 + 8 * v27);
      }
      while (v32 == -1);
      v28 = __clz(__rbit64(~v32)) + (v27 << 6);
    }
    *(_QWORD *)(v11 + ((v28 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v28;
    v33 = (_QWORD *)(*(_QWORD *)(v8 + 48) + 16 * v28);
    *v33 = v20;
    v33[1] = v19;
    v34 = *(_QWORD *)(v8 + 56) + 40 * v28;
    *(_QWORD *)v34 = v22;
    *(_QWORD *)(v34 + 8) = v23;
    *(_OWORD *)(v34 + 16) = v40;
    *(_QWORD *)(v34 + 32) = v24;
    ++*(_QWORD *)(v8 + 16);
    if (__OFSUB__(v5--, 1))
      break;
    v4 = v38;
    v10 = v39;
    if (!v5)
      return v8;
  }
LABEL_39:
  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](&lazy protocol witness table cache variable for type [SEMSpanMatchResult] and conformance [A], &demangling cache variable for type metadata for [SEMSpanMatchResult]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [SEMSpanMatchResult]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for SEMSpanMatchResult);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA2A60], &lazy protocol witness table cache variable for type [UsoTask] and conformance [A], &demangling cache variable for type metadata for [UsoTask], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA01E0], &lazy protocol witness table cache variable for type [UsoEntity_common_UserEntity] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_UserEntity], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA0178], &lazy protocol witness table cache variable for type [UsoEntity_uso_NoEntity] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_uso_NoEntity], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA1960], &lazy protocol witness table cache variable for type [UsoEntity_common_EventTrigger] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_EventTrigger], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA0F98], &lazy protocol witness table cache variable for type [UsoEntity_common_App] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_App], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA15A0], &lazy protocol witness table cache variable for type [UsoEntity_common_MediaItem] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_MediaItem], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0D989C8], &lazy protocol witness table cache variable for type [PommesResult] and conformance [A], &demangling cache variable for type metadata for [PommesResult], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA1AF0], &lazy protocol witness table cache variable for type [UsoEntity_common_RadioStation] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_RadioStation], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](&lazy protocol witness table cache variable for type [INPerson] and conformance [A], &demangling cache variable for type metadata for [INPerson]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [INPerson]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CNContactStore(0, (unint64_t *)&lazy cache variable for type metadata for INPerson);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0D98DD8], &lazy protocol witness table cache variable for type [VocabularyResult] and conformance [A], &demangling cache variable for type metadata for [VocabularyResult], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0D989B0], &lazy protocol witness table cache variable for type [Experience] and conformance [A], &demangling cache variable for type metadata for [Experience], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0D98E48], &lazy protocol witness table cache variable for type [GenericExperience] and conformance [A], &demangling cache variable for type metadata for [GenericExperience], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))MEMORY[0x1E0DA15B8], (unint64_t *)&lazy protocol witness table cache variable for type [UsoEntity_common_PhoneCall] and conformance [A], &demangling cache variable for type metadata for [UsoEntity_common_PhoneCall], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  uint64_t *v13;
  uint64_t v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](&lazy protocol witness table cache variable for type [CodeGenListEntry<UsoEntity_common_Agent>] and conformance [A], &demangling cache variable for type metadata for [CodeGenListEntry<UsoEntity_common_Agent>]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [CodeGenListEntry<UsoEntity_common_Agent>]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          swift_retain();
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CodeGenListEntry<UsoEntity_common_Agent>);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t i;
  uint64_t (*v12)();
  id *v13;
  id v14;
  uint64_t result;
  uint64_t (*v16[4])();

  v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7)
      return a3;
  }
  else
  {
    v7 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](&lazy protocol witness table cache variable for type [NSDictionary] and conformance [A], &demangling cache variable for type metadata for [NSDictionary]);
        swift_bridgeObjectRetain();
        for (i = 0; i != v7; ++i)
        {
          __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [NSDictionary]);
          v12 = specialized protocol witness for Collection.subscript.read in conformance [A](v16, i, a3);
          v14 = *v13;
          ((void (*)(uint64_t (**)(), _QWORD))v12)(v16, 0);
          *(_QWORD *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v9 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for NSDictionary);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  return specialized Array._copyContents(initializing:)(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for AudioResult, &lazy protocol witness table cache variable for type [AudioResult] and conformance [A], &demangling cache variable for type metadata for [AudioResult], (uint64_t (*)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))specialized protocol witness for Collection.subscript.read in conformance [A]);
}

uint64_t specialized Array._copyContents(initializing:)(unint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(_QWORD), unint64_t *a5, uint64_t *a6, uint64_t (*a7)(_BYTE *, uint64_t, unint64_t, uint64_t, uint64_t))
{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t matched;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  uint64_t *v23;
  uint64_t v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        matched = lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, matched);
          v24 = *v23;
          swift_retain();
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t matched;
  uint64_t i;
  uint64_t v21;
  void (*v22)(_BYTE *, _QWORD);
  id *v23;
  id v24;
  uint64_t result;
  _BYTE v26[32];

  v14 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    v15 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v15)
      return a3;
  }
  else
  {
    v15 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (!v15)
      return a3;
  }
  if (!a1)
    goto LABEL_19;
  v16 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v14)
  {
    swift_bridgeObjectRetain();
    v18 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v18 <= a2)
    {
      if (v15 >= 1)
      {
        matched = lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](a5, a6);
        swift_bridgeObjectRetain();
        for (i = 0; i != v15; ++i)
        {
          v21 = __swift_instantiateConcreteTypeFromMangledName(a6);
          v22 = (void (*)(_BYTE *, _QWORD))a7(v26, i, a3, v21, matched);
          v24 = *v23;
          v22(v26, 0);
          *(_QWORD *)(a1 + 8 * i) = v24;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  v17 = *(_QWORD *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v17 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v16 + 32 >= a1 + 8 * v17 || v16 + 32 + 8 * v17 <= a1)
  {
    a4(0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

_QWORD *specialized Sequence._copySequenceContents(initializing:)(_QWORD *result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;

  v4 = a4 + 64;
  v5 = -1;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v5 = ~(-1 << -(char)v6);
  v7 = v5 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v8 = 0;
    a3 = 0;
LABEL_35:
    *result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (_QWORD *)a3;
  }
  if (!a3)
  {
    v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  v8 = 0;
  v9 = 0;
  v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(_QWORD *)(*(_QWORD *)(a4 + 56) + 8 * v12);
    if (v9 == a3)
      goto LABEL_35;
  }
  v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v13);
  if (v14)
    goto LABEL_19;
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    v7 = 0;
    v8 = v13;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    v13 = v8;
LABEL_19:
    v16 = __clz(__rbit64(v14));
    v7 = (v14 - 1) & v14;
    v12 = v16 + (v13 << 6);
    v8 = v13;
    goto LABEL_8;
  }
  v15 = v13 + 2;
  if (v13 + 2 >= v10)
    goto LABEL_30;
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    v13 = v15;
    goto LABEL_19;
  }
  v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    v7 = 0;
    v8 = v13 + 2;
    goto LABEL_34;
  }
  v14 = *(_QWORD *)(v4 + 8 * v8);
  if (v14)
    goto LABEL_15;
  v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  v14 = *(_QWORD *)(v4 + 8 * v15);
  if (v14)
    goto LABEL_18;
  while (1)
  {
    v13 = v15 + 1;
    if (__OFADD__(v15, 1))
      break;
    if (v13 >= v10)
    {
      v7 = 0;
      v8 = v10 - 1;
      goto LABEL_34;
    }
    v14 = *(_QWORD *)(v4 + 8 * v13);
    ++v15;
    if (v14)
      goto LABEL_19;
  }
LABEL_38:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  int64_t v25;

  v5 = a4 + 64;
  v6 = -1 << *(_BYTE *)(a4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v11 = 0;
    v9 = 0;
LABEL_39:
    *result = a4;
    result[1] = v5;
    result[2] = ~v6;
    result[3] = v11;
    result[4] = v8;
    return (_QWORD *)v9;
  }
  v9 = a3;
  if (!a3)
  {
    v11 = 0;
    goto LABEL_39;
  }
  if (a3 < 0)
    goto LABEL_41;
  v10 = a2;
  v23 = -1 << *(_BYTE *)(a4 + 32);
  v24 = result;
  v11 = 0;
  v12 = 0;
  v25 = (unint64_t)(63 - v6) >> 6;
  if (!v8)
    goto LABEL_9;
LABEL_8:
  v13 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v12;
    v18 = (_QWORD *)(*(_QWORD *)(a4 + 56) + 40 * v14);
    v19 = v18[1];
    v21 = v18[2];
    v20 = v18[3];
    v22 = v18[4];
    *v10 = *v18;
    v10[1] = v19;
    v10[2] = v21;
    v10[3] = v20;
    v10[4] = v22;
    if (v12 == v9)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v10 += 5;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    result = (_QWORD *)swift_bridgeObjectRetain();
    if (v8)
      goto LABEL_8;
LABEL_9:
    v15 = v11 + 1;
    if (__OFADD__(v11, 1))
      break;
    if (v15 >= v25)
      goto LABEL_33;
    v16 = *(_QWORD *)(v5 + 8 * v15);
    if (!v16)
    {
      v11 += 2;
      if (v15 + 1 >= v25)
      {
        v8 = 0;
        v11 = v15;
      }
      else
      {
        v16 = *(_QWORD *)(v5 + 8 * v11);
        if (v16)
          goto LABEL_14;
        v17 = v15 + 2;
        if (v15 + 2 >= v25)
          goto LABEL_33;
        v16 = *(_QWORD *)(v5 + 8 * v17);
        if (v16)
        {
LABEL_17:
          v15 = v17;
          goto LABEL_18;
        }
        v11 = v15 + 3;
        if (v15 + 3 < v25)
        {
          v16 = *(_QWORD *)(v5 + 8 * v11);
          if (v16)
          {
LABEL_14:
            v15 = v11;
            goto LABEL_18;
          }
          v17 = v15 + 4;
          if (v15 + 4 >= v25)
          {
LABEL_33:
            v8 = 0;
            goto LABEL_37;
          }
          v16 = *(_QWORD *)(v5 + 8 * v17);
          if (!v16)
          {
            while (1)
            {
              v15 = v17 + 1;
              if (__OFADD__(v17, 1))
                goto LABEL_42;
              if (v15 >= v25)
              {
                v8 = 0;
                v11 = v25 - 1;
                goto LABEL_37;
              }
              v16 = *(_QWORD *)(v5 + 8 * v15);
              ++v17;
              if (v16)
                goto LABEL_18;
            }
          }
          goto LABEL_17;
        }
        v8 = 0;
        v11 = v15 + 2;
      }
LABEL_37:
      v9 = v12;
LABEL_38:
      v6 = v23;
      result = v24;
      goto LABEL_39;
    }
LABEL_18:
    v8 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v15 << 6);
    v11 = v15;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t specialized Sequence._copySequenceContents(initializing:)(uint64_t result, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 56;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 56);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

{
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  int64_t v12;
  uint64_t v13;
  int64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  _QWORD *v20;
  uint64_t v21;

  v5 = (_QWORD *)result;
  v6 = a4 + 64;
  v7 = -1 << *(_BYTE *)(a4 + 32);
  if (-v7 < 64)
    v8 = ~(-1 << -(char)v7);
  else
    v8 = -1;
  v9 = v8 & *(_QWORD *)(a4 + 64);
  if (!a2)
  {
    v12 = 0;
    v10 = 0;
LABEL_38:
    *v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  v10 = a3;
  if (!a3)
  {
    v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  v11 = a2;
  v12 = 0;
  v13 = 0;
  v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9)
    goto LABEL_9;
LABEL_8:
  v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    v20 = (_QWORD *)(*(_QWORD *)(a4 + 48) + 16 * v16);
    v21 = v20[1];
    *v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    result = swift_bridgeObjectRetain();
    if (v9)
      goto LABEL_8;
LABEL_9:
    v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14)
      goto LABEL_33;
    v18 = *(_QWORD *)(v6 + 8 * v17);
    if (!v18)
      break;
LABEL_18:
    v9 = (v18 - 1) & v18;
    v16 = __clz(__rbit64(v18)) + (v17 << 6);
    v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    v9 = 0;
    v12 = v17;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
    goto LABEL_14;
  v19 = v17 + 2;
  if (v17 + 2 >= v14)
    goto LABEL_33;
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
    goto LABEL_17;
  v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    v9 = 0;
    v12 = v17 + 2;
    goto LABEL_37;
  }
  v18 = *(_QWORD *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    v17 = v12;
    goto LABEL_18;
  }
  v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    v9 = 0;
LABEL_37:
    v10 = v13;
    goto LABEL_38;
  }
  v18 = *(_QWORD *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    v17 = v19 + 1;
    if (__OFADD__(v19, 1))
      break;
    if (v17 >= v14)
    {
      v9 = 0;
      v12 = v14 - 1;
      goto LABEL_37;
    }
    v18 = *(_QWORD *)(v6 + 8 * v17);
    ++v19;
    if (v18)
      goto LABEL_18;
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  *(_OWORD *)(v2 + 24) = v3;
  return swift_task_switch();
}

uint64_t partial apply for closure #1 in closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;

  return closure #1 in closure #1 in closure #3 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)(a1, a2, a3, *(_QWORD **)(v3 + 16));
}

_QWORD *specialized Sequence.compactMap<A>(_:)(unint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD, _QWORD))
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  void *v8;
  uint64_t v9;
  id v10;
  void *v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  char v15;
  void *v16;
  id v17;
  id v18;
  id v19;
  unint64_t v20;
  uint64_t (*v21)(_QWORD, _QWORD, _QWORD);
  uint64_t v22;
  id v23;
  uint64_t v24;
  id v25;
  void *v26;
  id v27;
  void *v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v41;
  uint64_t (*v42)(_QWORD, _QWORD, _QWORD);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  id v52[6];

  v4 = a1;
  v52[5] = *(id *)MEMORY[0x1E0C80C00];
  if (a1 >> 62)
  {
LABEL_33:
    swift_bridgeObjectRetain();
    v5 = _CocoaArrayWrapper.endIndex.getter();
    if (v5)
      goto LABEL_3;
  }
  else
  {
    v5 = *(_QWORD *)((a1 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      v49 = v4 & 0xC000000000000001;
      v6 = 4;
      v50 = (_QWORD *)MEMORY[0x1E0DEE9D8];
      v41 = v4;
      v42 = a3;
      v47 = v5;
      while (1)
      {
        if (v49)
          v7 = (id)MEMORY[0x1C3BBF3F4](v6 - 4, v4);
        else
          v7 = *(id *)(v4 + 8 * v6);
        v8 = v7;
        v9 = v6 - 3;
        if (__OFADD__(v6 - 4, 1))
        {
          __break(1u);
          goto LABEL_33;
        }
        v10 = objc_msgSend(v7, sel_bundleIdentifier);
        if (v10)
          break;

LABEL_5:
        ++v6;
        if (v9 == v5)
        {
          swift_bridgeObjectRelease();
          return v50;
        }
      }
      v11 = v10;
      v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v51 = v12;
      v13 = objc_msgSend((id)objc_opt_self(), sel_appInfoWithApplicationRecord_, v8);
      v52[3] = &type metadata for FeatureFlag;
      v52[4] = (id)lazy protocol witness table accessor for type FeatureFlag and conformance FeatureFlag();
      v14 = swift_allocObject();
      v52[0] = (id)v14;
      *(_QWORD *)(v14 + 16) = 5;
      *(_QWORD *)(v14 + 24) = 0;
      *(_QWORD *)(v14 + 32) = 0;
      *(_QWORD *)(v14 + 40) = 0;
      *(_BYTE *)(v14 + 48) = 3;
      v15 = isFeatureEnabled(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v52);
      if ((v15 & 1) != 0)
      {
        v16 = *(void **)(a2 + 136);
        v52[0] = 0;
        v17 = objc_msgSend(v16, sel_actionsForBundleIdentifier_error_, v11, v52);

        v18 = v52[0];
        if (v17)
        {
          type metadata accessor for CNContactStore(0, &lazy cache variable for type metadata for LNActionMetadata);
          v19 = v13;
          v20 = v4;
          v21 = a3;
          v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
          v23 = v18;
          v24 = v22;
          a3 = v21;
          v4 = v20;
          v13 = v19;
          v9 = v6 - 3;

          goto LABEL_17;
        }
        v25 = v52[0];
        v26 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
      }
      else
      {

      }
      v24 = MEMORY[0x1E0DEE9D8];
LABEL_17:
      if ((a3(v8, v13, v24) & 1) == 0)
      {

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_29:
        v5 = v47;
        goto LABEL_5;
      }
      v45 = v24;
      v27 = objc_msgSend(v8, sel_bundleIdentifier);
      if (v27)
      {
        v28 = v27;
        v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        v44 = v29;

        if (v13)
          goto LABEL_20;
      }
      else
      {
        v46 = 0;
        v44 = 0;
        if (v13)
        {
LABEL_20:
          v30 = objc_msgSend(v13, sel_supportedIntents);
          v31 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          v32 = objc_msgSend(v13, sel_supportedMediaCategories);
          v33 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

          v34 = v51;
          v35 = v48;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            goto LABEL_30;
          goto LABEL_26;
        }
      }

      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v33 = MEMORY[0x1E0DEE9E8];
      v31 = MEMORY[0x1E0DEE9E8];
      v34 = v51;
      v35 = v48;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
LABEL_30:
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v50[2] + 1, 1, v50);
        goto LABEL_26;
      }
      v31 = MEMORY[0x1E0DEE9E8];
LABEL_26:
      v38 = v50[2];
      v37 = v50[3];
      if (v38 >= v37 >> 1)
        v50 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)(v37 > 1), v38 + 1, 1, v50);
      v50[2] = v38 + 1;
      v39 = &v50[7 * v38];
      v39[4] = v35;
      v39[5] = v34;
      v39[6] = v46;
      v39[7] = v44;
      v39[8] = v31;
      v39[9] = v33;
      v39[10] = v45;
      v4 = v41;
      a3 = v42;
      goto LABEL_29;
    }
  }
  swift_bridgeObjectRelease();
  return (_QWORD *)MEMORY[0x1E0DEE9D8];
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, char a2, _QWORD *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  _BOOL8 v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char v20;
  _QWORD *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  v4 = *(_QWORD *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v4)
  {
    v5 = a1 + 40;
    do
    {
      v7 = *(_QWORD *)(v5 + 40);
      v33 = *(_OWORD *)(v5 + 24);
      v9 = *(_QWORD *)(v5 + 8);
      v8 = *(_QWORD *)(v5 + 16);
      v10 = *(_QWORD *)(v5 - 8);
      v11 = *(_QWORD *)v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (!v11)
        break;
      v30 = v9;
      v31 = v8;
      v32 = v7;
      v29 = v4;
      v12 = (_QWORD *)*a3;
      v14 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
      v15 = v12[2];
      v16 = (v13 & 1) == 0;
      v17 = v15 + v16;
      if (__OFADD__(v15, v16))
      {
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        __break(1u);
        return result;
      }
      v18 = v13;
      if (v12[3] >= v17)
      {
        if ((a2 & 1) == 0)
          specialized _NativeDictionary.copy()();
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a2 & 1);
        v19 = specialized __RawDictionaryStorage.find<A>(_:)(v10, v11);
        if ((v18 & 1) != (v20 & 1))
          goto LABEL_18;
        v14 = v19;
      }
      v21 = (_QWORD *)*a3;
      if ((v18 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        v6 = v21[7] + 40 * v14;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(_QWORD *)v6 = v30;
        *(_QWORD *)(v6 + 8) = v31;
        *(_OWORD *)(v6 + 16) = v33;
        *(_QWORD *)(v6 + 32) = v32;
      }
      else
      {
        v21[(v14 >> 6) + 8] |= 1 << v14;
        v22 = (uint64_t *)(v21[6] + 16 * v14);
        *v22 = v10;
        v22[1] = v11;
        v23 = v21[7] + 40 * v14;
        *(_QWORD *)v23 = v30;
        *(_QWORD *)(v23 + 8) = v31;
        *(_OWORD *)(v23 + 16) = v33;
        *(_QWORD *)(v23 + 32) = v32;
        v24 = v21[2];
        v25 = __OFADD__(v24, 1);
        v26 = v24 + 1;
        if (v25)
          goto LABEL_17;
        v21[2] = v26;
      }
      v5 += 56;
      a2 = 1;
      --v4;
    }
    while (v29 != 1);
  }
  return swift_bridgeObjectRelease();
}

uint64_t specialized closure #1 in _NativeDictionary.filter(_:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, __int128 *))
{
  int64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  int64_t v19;
  unint64_t v20;
  int64_t v21;
  unint64_t *v24;
  uint64_t v25;
  int64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _BYTE v30[16];
  __int128 v31;
  uint64_t v32;

  v24 = (unint64_t *)result;
  v25 = 0;
  v6 = 0;
  v7 = a3 + 64;
  v8 = 1 << *(_BYTE *)(a3 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & *(_QWORD *)(a3 + 64);
  v26 = (unint64_t)(v8 + 63) >> 6;
  while (1)
  {
    if (v10)
    {
      v11 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v12 = v11 | (v6 << 6);
      goto LABEL_5;
    }
    v19 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v19 >= v26)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    v20 = *(_QWORD *)(v7 + 8 * v19);
    ++v6;
    if (!v20)
    {
      v6 = v19 + 1;
      if (v19 + 1 >= v26)
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      v20 = *(_QWORD *)(v7 + 8 * v6);
      if (!v20)
      {
        v6 = v19 + 2;
        if (v19 + 2 >= v26)
          return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
        v20 = *(_QWORD *)(v7 + 8 * v6);
        if (!v20)
          break;
      }
    }
LABEL_20:
    v10 = (v20 - 1) & v20;
    v12 = __clz(__rbit64(v20)) + (v6 << 6);
LABEL_5:
    v13 = (uint64_t *)(*(_QWORD *)(a3 + 48) + 16 * v12);
    v15 = *v13;
    v14 = v13[1];
    v16 = *(_QWORD *)(a3 + 56) + 40 * v12;
    v17 = *(_QWORD *)(v16 + 32);
    v18 = *(_OWORD *)(v16 + 16);
    v27 = *(_OWORD *)v16;
    v28 = v18;
    v29 = v17;
    outlined init with take of String?((uint64_t)&v27, (uint64_t)v30);
    v31 = v28;
    v32 = v29;
    swift_bridgeObjectRetain();
    outlined retain of String?((uint64_t)v30);
    outlined retain of [LNActionMetadata]((uint64_t)&v31);
    outlined retain of [LNActionMetadata]((uint64_t)&v31 + 8);
    outlined retain of [LNActionMetadata]((uint64_t)&v32);
    LOBYTE(v15) = a4(v15, v14, &v27);
    outlined release of String?((uint64_t)v30);
    outlined release of [LNActionMetadata]((uint64_t)&v31);
    outlined release of [LNActionMetadata]((uint64_t)&v31 + 8);
    outlined release of [LNActionMetadata]((uint64_t)&v32);
    result = swift_bridgeObjectRelease();
    if ((v15 & 1) != 0)
    {
      *(unint64_t *)((char *)v24 + ((v12 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v12;
      if (__OFADD__(v25++, 1))
      {
        __break(1u);
        return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
      }
    }
  }
  v21 = v19 + 3;
  if (v21 >= v26)
    return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
  v20 = *(_QWORD *)(v7 + 8 * v21);
  if (v20)
  {
    v6 = v21;
    goto LABEL_20;
  }
  while (1)
  {
    v6 = v21 + 1;
    if (__OFADD__(v21, 1))
      break;
    if (v6 >= v26)
      return specialized _NativeDictionary.extractDictionary(using:count:)(v24, a2, v25, a3);
    v20 = *(_QWORD *)(v7 + 8 * v6);
    ++v21;
    if (v20)
      goto LABEL_20;
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t specialized _NativeDictionary.filter(_:)(uint64_t isStackAllocationSafe, uint64_t (*a2)(uint64_t, uint64_t, __int128 *), uint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  char v7;
  unint64_t v8;
  size_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[2];

  v6 = isStackAllocationSafe;
  v13[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_BYTE *)(isStackAllocationSafe + 32);
  v8 = (unint64_t)((1 << v7) + 63) >> 6;
  v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    MEMORY[0x1E0C80A78](isStackAllocationSafe);
    bzero((char *)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    v10 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v8, v6, a2);
    if (v3)
      swift_willThrow();
    else
      return v10;
  }
  else
  {
    v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = specialized closure #1 in _NativeDictionary.filter(_:)((uint64_t)v11, v8, v6, a2);
    MEMORY[0x1C3BBFF64](v11, -1, -1);
  }
  return a3;
}

uint64_t outlined init with take of String?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for String?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of String?(uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined retain of [LNActionMetadata](uint64_t a1)
{
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of String?(uint64_t a1)
{
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t objectdestroy_6Tm()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #2 in LaunchServicesSatisfyingAppsDataProvider.init(satisfies:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;

  v2 = swift_task_alloc();
  v3 = *(_OWORD *)(v0 + 32);
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)v2 = v1;
  *(_QWORD *)(v2 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(_OWORD *)(v2 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1C23E1074()
{
  uint64_t v0;

  outlined consume of FeatureFlag(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), *(_BYTE *)(v0 + 48));
  return swift_deallocObject();
}

uint64_t lazy protocol witness table accessor for type LaunchServicesSatisfyingAppsDataProvider and conformance LaunchServicesSatisfyingAppsDataProvider(unint64_t *a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t result;
  uint64_t v7;

  result = *a1;
  if (!result)
  {
    v7 = a3(a2);
    result = MEMORY[0x1C3BBFE74](a4, v7);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [SEMSpanMatchResult] and conformance [A](unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x1C3BBFE74](MEMORY[0x1E0DEAF50], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t *PegasusCacheManager.shared.unsafeMutableAddressor()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return &static PegasusCacheManager.shared;
}

uint64_t static PegasusCacheManager.defaultDirectoryPath.getter()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  uint64_t v4;
  id v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)&v10 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(), sel_defaultManager);
  v4 = 1;
  v5 = objc_msgSend(v3, sel_URLsForDirectory_inDomains_, 13, 1);

  v6 = type metadata accessor for URL();
  v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v8 = *(_QWORD *)(v6 - 8);
  if (*(_QWORD *)(v7 + 16))
  {
    (*(void (**)(char *, unint64_t, uint64_t))(v8 + 16))(v2, v7 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)), v6);
    v4 = 0;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v2, v4, 1, v6);
  swift_bridgeObjectRelease();
  result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v2, 1, v6);
  if ((_DWORD)result == 1)
  {
    __break(1u);
  }
  else
  {
    URL.appendingPathComponent(_:isDirectory:)();
    return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v2, v6);
  }
  return result;
}

void one-time initialization function for shared()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t inited;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  id v17;
  _BYTE *v18;
  _QWORD v19[7];

  v0 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v0);
  v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = objc_msgSend((id)objc_opt_self(), sel_sharedPreferences);
  v4 = objc_msgSend(v3, sel_languageCode);
  if (v4)
  {
    v5 = v4;
    v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v8 = v7;

    v19[5] = v6;
    v19[6] = v8;
    v19[3] = 45;
    v19[4] = 0xE100000000000000;
    v19[1] = 95;
    v19[2] = 0xE100000000000000;
    lazy protocol witness table accessor for type String and conformance String();
    v9 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)();
    v11 = v10;

    swift_bridgeObjectRelease();
  }
  else
  {

    v9 = 0;
    v11 = 0xE000000000000000;
  }
  type metadata accessor for PegasusCacheManager();
  static PegasusCacheManager.defaultDirectoryPath.getter();
  v12 = type metadata accessor for URL();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v2, 0, 1, v12);
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for _ContiguousArrayStorage<(String, CacheHandling)>);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1C24FA1B0;
  *(_QWORD *)(inited + 32) = 0x616964656DLL;
  *(_QWORD *)(inited + 40) = 0xE500000000000000;
  v14 = type metadata accessor for AudioCacheHandler();
  v15 = swift_allocObject();
  *(_QWORD *)(inited + 72) = v14;
  *(_QWORD *)(inited + 80) = &protocol witness table for AudioCacheHandler;
  *(_QWORD *)(inited + 48) = v15;
  v16 = specialized Dictionary.init(dictionaryLiteral:)(inited);
  v17 = objc_msgSend((id)objc_opt_self(), sel_clientWithIdentifier_, 131);
  swift_allocObject();
  v18 = specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(v9, v11, v16, (uint64_t)v2, 6, 0, v17, 1);

  static PegasusCacheManager.shared = (uint64_t)v18;
}

_BYTE *PegasusCacheManager.__allocating_init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, int a8)
{
  _BYTE *v16;

  swift_allocObject();
  v16 = specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(a1, a2, a3, a4, a5, a6, a7, a8);

  return v16;
}

uint64_t static PegasusCacheManager.shared.getter()
{
  if (one-time initialization token for shared != -1)
    swift_once();
  return swift_retain();
}

uint64_t PegasusCacheManager.directoryPath.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath;
  v4 = type metadata accessor for URL();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t PegasusCacheManager.responseCache.getter()
{
  return swift_retain();
}

id PegasusCacheManager.trialClient.getter()
{
  uint64_t v0;

  return *(id *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
}

id PegasusCacheManager.experimentationAnalyticsManager.getter()
{
  uint64_t v0;

  return objc_retain(*(id *)(v0
                           + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager));
}

uint64_t PegasusCacheManager.cachingEnabled.getter()
{
  uint64_t v0;
  id v1;
  void *v2;
  void *v3;
  void *v4;
  id v5;

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) != 0)
    return 1;
  v2 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  v3 = (void *)MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
  v4 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
  v5 = objc_msgSend(v2, sel_levelForFactor_withNamespaceName_, v3, v4);

  if (!v5)
    return 0;
  v1 = objc_msgSend(v5, sel_BOOLeanValue);

  return (uint64_t)v1;
}

_BYTE *PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, int a8)
{
  _BYTE *v9;

  v9 = specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(a1, a2, a3, a4, a5, a6, a7, a8);

  return v9;
}

uint64_t (**PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback.unsafeMutableAddressor())()
{
  return static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback;
}

void closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  id v16;
  id v17;
  id v18;
  id v19;
  id v20;
  id v21;
  id v22;
  NSObject *v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void *v35;
  id v36;
  uint64_t v37;
  NSObject *v38;
  os_log_type_t v39;
  uint8_t *v40;
  _QWORD *v41;
  uint64_t v42;
  NSObject *v43;
  os_log_type_t v44;
  uint8_t *v45;
  uint64_t v46;
  uint64_t v47;
  id v48;
  void *v49;
  id v50;
  _BYTE v51[12];
  int v52;
  _QWORD *v53;
  uint64_t v54;
  _BYTE *v55;
  uint64_t v56;
  _BYTE *v57;
  void *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62[2];

  v59 = a4;
  v62[1] = *MEMORY[0x1E0C80C00];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v9);
  v57 = &v51[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v11);
  v13 = &v51[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (one-time initialization token for pommes != -1)
    swift_once();
  v14 = type metadata accessor for Logger();
  v15 = __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
  v16 = a5;
  v17 = a1;
  v18 = a3;
  v58 = a5;
  v19 = v18;
  v20 = v16;
  v21 = v17;
  v22 = v19;
  v60 = v15;
  v23 = Logger.logObject.getter();
  v24 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v23, (os_log_type_t)v24))
  {
    v52 = v24;
    v55 = v13;
    v25 = a2;
    v26 = swift_slowAlloc();
    v53 = (_QWORD *)swift_slowAlloc();
    v54 = swift_slowAlloc();
    v61 = (uint64_t)a1;
    v62[0] = v54;
    *(_DWORD *)v26 = 136316162;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFNotificationCenterRef?);
    v27 = Optional.debugDescription.getter();
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, v28, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 12) = 2080;
    v56 = v25;
    v61 = v25;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeMutableRawPointer?);
    v29 = Optional.debugDescription.getter();
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v29, v30, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 22) = 2080;
    v61 = (uint64_t)a3;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for CFNotificationName?);
    v31 = Optional.debugDescription.getter();
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 32) = 2080;
    v61 = v59;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UnsafeRawPointer?);
    v33 = Optional.debugDescription.getter();
    v61 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v33, v34, v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v26 + 42) = 2112;
    v35 = v58;
    if (v58)
    {
      v61 = (uint64_t)v20;
      v36 = v20;
    }
    else
    {
      v61 = 0;
    }
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v41 = v53;
    *v53 = v35;

    _os_log_impl(&dword_1C2356000, v23, (os_log_type_t)v52, "PegasusCacheManager : Received callback for kAFSiriAndDictationHistoryDeletionRequestedDarwinNotification center:%s observer:%s name: %s object:%s userInfo:%@", (uint8_t *)v26, 0x34u);
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v41, -1, -1);
    v42 = v54;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v42, -1, -1);
    MEMORY[0x1C3BBFF64](v26, -1, -1);

    v13 = v55;
    a2 = v56;
    if (!v56)
      goto LABEL_14;
  }
  else
  {

    if (!a2)
    {
LABEL_14:
      v43 = Logger.logObject.getter();
      v44 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v43, v44))
      {
        v45 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v45 = 0;
        _os_log_impl(&dword_1C2356000, v43, v44, "PegasusCacheManager : Observer for siriAndDictationHistoryDeletionRequestedCallback is nil", v45, 2u);
        MEMORY[0x1C3BBFF64](v45, -1, -1);
      }

      return;
    }
  }
  swift_retain();
  if ((PegasusCacheManager.cachingEnabled.getter() & 1) != 0)
  {
    v37 = type metadata accessor for PommesCandidateId();
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v37 - 8) + 56))(v13, 1, 1, v37);
    (*(void (**)(_QWORD, _QWORD, _BYTE *, uint64_t))(*(_QWORD *)a2 + 248))(0, 0, v13, 5);
    outlined destroy of MediaUserStateCenter?((uint64_t)v13, &demangling cache variable for type metadata for PommesCandidateId?);
    v46 = type metadata accessor for Date();
    v47 = (uint64_t)v57;
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v46 - 8) + 56))(v57, 1, 1, v46);
    v48 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
    v49 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
    v50 = objc_msgSend(v48, sel_initWithSuiteName_, v49);

    (*(void (**)(uint64_t, id))(*(_QWORD *)a2 + 280))(v47, v50);
    swift_release();

    outlined destroy of MediaUserStateCenter?(v47, &demangling cache variable for type metadata for Date?);
  }
  else
  {
    v38 = Logger.logObject.getter();
    v39 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v38, v39))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v40 = 0;
      _os_log_impl(&dword_1C2356000, v38, v39, "PegasusCacheManager : Ignoring callback because caching is disabled", v40, 2u);
      MEMORY[0x1C3BBFF64](v40, -1, -1);
    }

    swift_release();
  }
}

void @objc closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  id v10;
  id v11;
  id v12;

  v10 = a1;
  v11 = a3;
  v12 = a5;
  closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback(a1, a2, a3, a4, a5);

}

void (*static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback.getter())(void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5)
{
  return @objc closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback;
}

id PegasusCacheManager.processResponse(domain:response:)(uint64_t a1, unint64_t a2, void *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v7;
  char v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[3];
  uint64_t v23;
  uint64_t v24;

  v4 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_domainCacheHandlers);
  if (!*(_QWORD *)(v4 + 16))
  {
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    goto LABEL_10;
  }
  swift_bridgeObjectRetain();
  v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    v21 = 0;
    v19 = 0u;
    v20 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  outlined init with copy of AppDataProviding(*(_QWORD *)(v4 + 56) + 40 * v7, (uint64_t)&v19);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v20 + 1))
  {
LABEL_10:
    outlined destroy of MediaUserStateCenter?((uint64_t)&v19, &demangling cache variable for type metadata for CacheHandling?);
    return a3;
  }
  outlined init with take of AppDataProviding(&v19, (uint64_t)v22);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = (uint8_t *)swift_slowAlloc();
    v13 = swift_slowAlloc();
    *(_QWORD *)&v19 = v13;
    *(_DWORD *)v12 = 136315138;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, (uint64_t *)&v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1C2356000, v10, v11, "PegasusCacheManager : Processing response for caching domain=\"%s\"", v12, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    MEMORY[0x1C3BBFF64](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  v15 = v23;
  v16 = v24;
  __swift_project_boxed_opaque_existential_1(v22, v23);
  v17 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 8))(a3, v15, v16);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  return (id)v17;
}

uint64_t PegasusCacheManager.normalizeUtterance(_:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *i;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v3 = v2;
  v6 = type metadata accessor for CharacterSet();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v37 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Locale?);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = a1;
  v39 = a2;
  swift_bridgeObjectRetain();
  Locale.init(identifier:)();
  v12 = type metadata accessor for Locale();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v11, 0, 1, v12);
  lazy protocol witness table accessor for type String and conformance String();
  v13 = StringProtocol.lowercased(with:)();
  v15 = v14;
  outlined destroy of MediaUserStateCenter?((uint64_t)v11, &demangling cache variable for type metadata for Locale?);
  v16 = *(_QWORD *)(v3 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_triggers);
  v17 = *(_QWORD *)(v16 + 16);
  if (v17)
  {
    v34 = v7;
    v35 = v6;
    swift_bridgeObjectRetain();
    lazy protocol witness table accessor for type String and conformance String();
    lazy protocol witness table accessor for type String and conformance String();
    v36 = v16;
    for (i = (uint64_t *)(v16 + 40); ; i += 2)
    {
      v19 = *(i - 1);
      v20 = *i;
      v38 = v13;
      v39 = v15;
      v42 = v19;
      v43 = v20;
      swift_bridgeObjectRetain();
      if ((BidirectionalCollection<>.starts<A>(with:)() & 1) != 0)
        break;
      swift_bridgeObjectRelease();
      if (!--v17)
      {
        swift_bridgeObjectRelease();
        return v13;
      }
    }
    swift_bridgeObjectRelease();
    v21 = String.count.getter();
    swift_bridgeObjectRelease();
    v22 = specialized Collection.dropFirst(_:)(v21, v13, v15);
    v24 = v23;
    v26 = v25;
    v28 = v27;
    swift_bridgeObjectRelease();
    v38 = v22;
    v39 = v24;
    v40 = v26;
    v41 = v28;
    v29 = v37;
    static CharacterSet.whitespacesAndNewlines.getter();
    lazy protocol witness table accessor for type Substring and conformance Substring();
    v30 = StringProtocol.trimmingCharacters(in:)();
    v32 = v31;
    (*(void (**)(char *, uint64_t))(v34 + 8))(v29, v35);
    swift_bridgeObjectRelease();
    v38 = v30;
    v39 = v32;
    return String.init<A>(_:)();
  }
  return v13;
}

uint64_t closure #1 in PegasusCacheManager.prepare()()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  void (*v3)(uint64_t, uint64_t);

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath;
    v2 = *(unsigned int *)(result + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags);
    v3 = *(void (**)(uint64_t, uint64_t))(**(_QWORD **)(result
                                                               + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                                                 + 136);
    swift_retain();
    v3(v1, v2);
    swift_release();
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall PegasusCacheManager.reset()()
{
  uint64_t v0;
  void *v1;
  void *v2;
  void *v3;
  id v4;
  unsigned int v5;
  NSObject *v6;
  uint64_t v7;
  void *v8;
  _QWORD v9[6];

  if ((*(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) != 0)
    goto LABEL_4;
  v1 = *(void **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  v2 = (void *)MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
  v3 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
  v4 = objc_msgSend(v1, sel_levelForFactor_withNamespaceName_, v2, v3);

  if (v4)
  {
    v5 = objc_msgSend(v4, sel_BOOLeanValue);

    if (v5)
    {
LABEL_4:
      v6 = *(NSObject **)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      v7 = swift_allocObject();
      *(_QWORD *)(v7 + 16) = partial apply for closure #1 in PegasusCacheManager.reset();
      *(_QWORD *)(v7 + 24) = v0;
      v9[4] = partial apply for thunk for @callee_guaranteed () -> ();
      v9[5] = v7;
      v9[0] = MEMORY[0x1E0C809B0];
      v9[1] = 1107296256;
      v9[2] = thunk for @escaping @callee_guaranteed () -> ();
      v9[3] = &block_descriptor_6_0;
      v8 = _Block_copy(v9);
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v6, v8);
      _Block_release(v8);
      LOBYTE(v6) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v6 & 1) != 0)
        __break(1u);
    }
  }
}

uint64_t closure #1 in PegasusCacheManager.reset()(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(_QWORD **)(a1
                                            + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                              + 144))();
}

uint64_t PegasusCacheManager.fetch(request:domainWarmup:completion:)(char *a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  uint64_t v16;
  uint64_t (*v17)(_QWORD);
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  void *v45;
  uint64_t v46;
  char *v47;
  uint64_t v49;
  uint64_t (*v50)(_QWORD);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  _QWORD aBlock[6];

  v59 = a1;
  v8 = type metadata accessor for DispatchWorkItemFlags();
  v56 = *(_QWORD *)(v8 - 8);
  v57 = v8;
  MEMORY[0x1E0C80A78](v8);
  v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v58 = type metadata accessor for PommesSearchRequest(0);
  v53 = *(_QWORD *)(v58 - 8);
  v11 = *(_QWORD *)(v53 + 64);
  MEMORY[0x1E0C80A78](v58);
  v54 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for DispatchQoS();
  v55 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) == 0)
  {
    v15 = *(void **)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
    v16 = MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
    v52 = v4;
    v17 = a3;
    v18 = a2;
    v19 = v14;
    v20 = v12;
    v21 = v10;
    v22 = a4;
    v23 = (void *)v16;
    v24 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
    v25 = objc_msgSend(v15, sel_levelForFactor_withNamespaceName_, v23, v24);

    a4 = v22;
    v10 = v21;
    v12 = v20;
    v14 = v19;
    a2 = v18;
    a3 = v17;
    v4 = v52;

    if (!v25)
      return a3(0);
    v26 = objc_msgSend(v25, sel_BOOLeanValue);

    if (!v26)
      return a3(0);
  }
  if ((specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD000000000000019, 0x80000001C2503970) & 1) != 0)return a3(0);
  v27 = (uint64_t)v59;
  v28 = (unint64_t *)&v59[*(int *)(v58 + 20)];
  v29 = *v28;
  v30 = v28[1];
  v31 = HIBYTE(v30) & 0xF;
  if ((v30 & 0x2000000000000000) == 0)
    v31 = v29 & 0xFFFFFFFFFFFFLL;
  if (!v31)
    return a3(0);
  v32 = PegasusCacheManager.normalizeUtterance(_:)(v29, v30);
  v51 = v33;
  v52 = v32;
  v58 = *(_QWORD *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
  static DispatchQoS.userInitiated.getter();
  v34 = v27;
  v35 = v54;
  outlined init with copy of PommesSearchRequest(v34, v54);
  v36 = *(unsigned __int8 *)(v53 + 80);
  v59 = v14;
  v37 = (v36 + 24) & ~v36;
  v38 = (v11 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v53 = a4;
  v39 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8;
  v50 = a3;
  v40 = swift_allocObject();
  *(_QWORD *)(v40 + 16) = v4;
  outlined init with take of PommesSearchRequest(v35, v40 + v37);
  *(_QWORD *)(v40 + v38) = a2;
  v41 = (uint64_t *)(v40 + v39);
  v42 = v53;
  v43 = v51;
  *v41 = v52;
  v41[1] = v43;
  v44 = (_QWORD *)(v40 + ((v39 + 23) & 0xFFFFFFFFFFFFFFF8));
  *v44 = v50;
  v44[1] = v42;
  aBlock[4] = partial apply for closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:);
  aBlock[5] = v40;
  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed @Sendable () -> ();
  aBlock[3] = &block_descriptor_12_0;
  v45 = _Block_copy(aBlock);
  v60 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
  swift_retain();
  swift_retain();
  swift_retain();
  __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
  v46 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v47 = v59;
  MEMORY[0x1C3BBF154](0, v59, v10, v45);
  _Block_release(v45);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v10, v46);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v12);
  return swift_release();
}

void closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, void (*a6)(id))
{
  uint64_t v12;
  void *v13;
  uint64_t v14;
  id v15;
  uint64_t v16;
  id v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  unint64_t v21;
  id v22;
  Swift::String v23;
  uint64_t v24;
  id v25;
  id v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  id v31;

  v31 = 0;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(void))(*(_QWORD *)v12 + 128))() & 1) == 0)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
  v13 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 160))(a2, a3);
  v31 = v13;
  v14 = one-time initialization token for pommes;
  v15 = v13;
  if (v14 != -1)
    swift_once();
  v16 = type metadata accessor for Logger();
  __swift_project_value_buffer(v16, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v17 = v15;
  v18 = Logger.logObject.getter();
  v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    v20 = swift_slowAlloc();
    v27 = swift_slowAlloc();
    v28 = v27;
    *(_DWORD *)v20 = 136315394;
    swift_bridgeObjectRetain();
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a4, a5, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v20 + 12) = 2080;
    v21 = 0xE400000000000000;
    if (v13)
    {
      v29 = 542394696;
      v30 = 0xE400000000000000;
      v22 = v17;
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesResponse?);
      v23._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24 = v29;
      v21 = v30;
    }
    else
    {
      v24 = 1397967181;
    }
    v29 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v24, v21, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v18, v19, "PegasusCacheManager : Fetched POMMES response for key=\"%s\" : %s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v27, -1, -1);
    MEMORY[0x1C3BBFF64](v20, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  v25 = v31;
  v26 = v31;
  a6(v25);

}

uint64_t PegasusCacheManager.store(siriRequestId:pegasusResponse:pommesResponse:waitFor:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, void (*a6)(_QWORD, _QWORD), void (*a7)(_QWORD, _QWORD))
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  int v22;
  int v23;
  void (*v24)(char *, uint64_t);
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  int v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void (*v38)(_QWORD, _QWORD);
  void (*v39)(_QWORD, _QWORD);

  v38 = a7;
  v39 = a6;
  v33 = a4;
  v34 = a5;
  v35 = a1;
  v36 = a2;
  v8 = type metadata accessor for Apple_Parsec_Siri_V2alpha_ResponseCacheControl();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction();
  v13 = *(_QWORD *)(v12 - 8);
  v14 = MEMORY[0x1E0C80A78](v12);
  v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x1E0C80A78](v14);
  v19 = (char *)&v32 - v18;
  MEMORY[0x1E0C80A78](v17);
  v21 = (char *)&v32 - v20;
  v22 = specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD00000000000001ELL, 0x80000001C2503990);
  v32 = a3;
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  LOBYTE(a3) = Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.hasResponseCacheControl.getter();
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v19, v21, v12);
  if ((a3 & 1) != 0)
  {
    Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.responseCacheControl.getter();
    v23 = Apple_Parsec_Siri_V2alpha_ResponseCacheControl.canCacheDomainResponse.getter();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v24(v19, v12);
    if (((v23 | v22) & 1) == 0)
    {
LABEL_3:
      if (one-time initialization token for pommes != -1)
        swift_once();
      v25 = type metadata accessor for Logger();
      __swift_project_value_buffer(v25, (uint64_t)static Logger.pommes);
      v26 = Logger.logObject.getter();
      v27 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v28 = 0;
        _os_log_impl(&dword_1C2356000, v26, v27, "PegasusCacheManager : Pegasus response is not cacheable", v28, 2u);
        MEMORY[0x1C3BBFF64](v28, -1, -1);
      }

      goto LABEL_11;
    }
  }
  else
  {
    v24 = *(void (**)(char *, uint64_t))(v13 + 8);
    v24(v19, v12);
    if ((v22 & 1) == 0)
      goto LABEL_3;
  }
  specialized static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)(v35, v36, *(void **)(v37 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager));
  if ((PegasusCacheManager.cachingEnabled.getter() & 1) == 0
    || (specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD000000000000019, 0x80000001C25039B0) & 1) != 0)
  {
LABEL_11:
    v39(0, 0);
    return ((uint64_t (*)(char *, uint64_t))v24)(v21, v12);
  }
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.siriInstruction.getter();
  Apple_Parsec_Siri_V2alpha_SiriPegasusResponse.SiriInstruction.responseCacheControl.getter();
  v24(v16, v12);
  v30 = Apple_Parsec_Siri_V2alpha_ResponseCacheControl.ttl.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((v22 & 1) != 0)
    v31 = 1209600;
  else
    v31 = v30;
  if (v30 > 0)
    v31 = v30;
  PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(v33, v34, v39, v38, (double)v31);
  return ((uint64_t (*)(char *, uint64_t))v24)(v21, v12);
}

uint64_t PegasusCacheManager.store(ttl:response:waitFor:completion:)(void *a1, uint64_t a2, uint64_t (*a3)(_QWORD, _QWORD), void (*a4)(_QWORD, _QWORD), double a5)
{
  uint64_t v5;
  void *v11;
  void *v12;
  void *v13;
  id v14;
  unsigned int v15;

  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) == 0)
  {
    v11 = *(void **)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
    v12 = (void *)MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
    v13 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
    v14 = objc_msgSend(v11, sel_levelForFactor_withNamespaceName_, v12, v13);

    if (!v14)
      return a3(0, 0);
    v15 = objc_msgSend(v14, sel_BOOLeanValue);

    if (!v15)
      return a3(0, 0);
  }
  if ((specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0xD000000000000019, 0x80000001C25039B0) & 1) == 0)return PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(a1, a2, a3, a4, a5);
  else
    return a3(0, 0);
}

uint64_t PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(void *a1, uint64_t a2, void *a3, void (*a4)(_QWORD, _QWORD), double a5)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  void *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  void (*v43)(char *, char *, char *);
  uint64_t v44;
  _QWORD *v45;
  void (*v46)(_QWORD, _QWORD);
  id v47;
  char v48;
  char *v49;
  void *v50;
  char *v51;
  char *v53;
  char *v54;
  void *v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  id v76;
  void (*v77)(_QWORD, _QWORD);
  uint64_t v78;
  uint64_t aBlock;
  uint64_t v80;
  uint64_t (*v81)(uint64_t);
  void *v82;
  uint64_t (*v83)();
  _QWORD *v84;

  v68 = a2;
  v76 = a3;
  v77 = a4;
  v71 = type metadata accessor for DispatchWorkItemFlags();
  v74 = *(_QWORD *)(v71 - 8);
  MEMORY[0x1E0C80A78](v71);
  v73 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v75 = type metadata accessor for DispatchQoS();
  v72 = *(_QWORD *)(v75 - 8);
  MEMORY[0x1E0C80A78](v75);
  v70 = (char *)&v58 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchTime();
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x1E0C80A78](v9);
  v13 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v11);
  v15 = (char *)&v58 - v14;
  v16 = type metadata accessor for Date();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = *(_QWORD *)(v17 + 64);
  v19 = MEMORY[0x1E0C80A78](v16);
  MEMORY[0x1E0C80A78](v19);
  v21 = (char *)&v58 - v20;
  if ((PommesResponse.isCachedResponse.getter() & 1) != 0)
    return ((uint64_t (*)(_QWORD, _QWORD))v76)(0, 0);
  v64 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v61 = v13;
  v62 = v10;
  v63 = v15;
  v65 = v9;
  v66 = v17;
  v67 = v21;
  if (a5 <= 1.0)
    return ((uint64_t (*)(_QWORD, _QWORD))v76)(0, 0);
  v22 = (char *)v16;
  v23 = a1;
  v24 = PommesResponse.searchRequestUtterance.getter();
  v25 = v69;
  v60 = PegasusCacheManager.normalizeUtterance(_:)(v24, v26);
  v59 = v27;
  swift_bridgeObjectRelease();
  v28 = PommesResponse.metadataDomainName.getter();
  v30 = v29;
  v31 = v64;
  static Date.now.getter();
  v32 = v67;
  Date.init(timeInterval:since:)();
  Date.timeIntervalSinceReferenceDate.getter();
  v34 = v33;
  v35 = PegasusCacheManager.processResponse(domain:response:)(v28, v30, a1);
  swift_bridgeObjectRelease();
  v36 = v66;
  (*(void (**)(char *, char *, char *))(v66 + 16))(v31, v32, v22);
  v37 = (*(unsigned __int8 *)(v36 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  v38 = (v18 + v37 + 7) & 0xFFFFFFFFFFFFFFF8;
  v39 = (_QWORD *)swift_allocObject();
  v39[2] = v25;
  v39[3] = v35;
  v39[4] = v34;
  v40 = v59;
  v39[5] = v60;
  v39[6] = v40;
  v41 = (char *)v39 + v37;
  v42 = v36;
  v43 = *(void (**)(char *, char *, char *))(v36 + 32);
  v64 = v22;
  v43(v41, v31, v22);
  *(_QWORD *)((char *)v39 + v38) = v23;
  v44 = v71;
  v45 = (_QWORD *)((char *)v39 + ((v38 + 15) & 0xFFFFFFFFFFFFFFF8));
  v46 = v77;
  *v45 = v76;
  v45[1] = v46;
  swift_retain();
  v76 = v35;
  v47 = v23;
  swift_retain();
  v48 = specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(0x6361437265676165, 0xEF65726F74536568);
  v49 = v70;
  if ((v48 & 1) != 0)
  {
    v83 = partial apply for closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:);
    v84 = v39;
    aBlock = MEMORY[0x1E0C809B0];
    v80 = 1107296256;
    v81 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v82 = &block_descriptor_55;
    v50 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v78 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v51 = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C3BBF154](0, v49, v51, v50);
    _Block_release(v50);

    swift_release();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v51, v44);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v49, v75);
    (*(void (**)(char *, char *))(v42 + 8))(v67, v64);
  }
  else
  {
    v53 = v61;
    static DispatchTime.now()();
    v54 = v63;
    MEMORY[0x1C3BBEB6C](v53, v68);
    v77 = *(void (**)(_QWORD, _QWORD))(v62 + 8);
    v77(v53, v65);
    static DispatchQoS.background.getter();
    v83 = partial apply for closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:);
    v84 = v39;
    aBlock = MEMORY[0x1E0C809B0];
    v80 = 1107296256;
    v81 = thunk for @escaping @callee_guaranteed @Sendable () -> ();
    v82 = &block_descriptor_52;
    v55 = _Block_copy(&aBlock);
    v78 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    swift_retain();
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], (uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    v56 = v49;
    v57 = v73;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C3BBF124](v54, v56, v57, v55);
    _Block_release(v55);

    swift_release();
    (*(void (**)(char *, uint64_t))(v74 + 8))(v57, v44);
    (*(void (**)(char *, uint64_t))(v72 + 8))(v56, v75);
    v77(v54, v65);
    (*(void (**)(char *, char *))(v66 + 8))(v67, v64);
  }
  return swift_release();
}

uint64_t closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t), uint64_t a8, double a9)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  NSObject *v26;
  os_log_type_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  id v33;
  id v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  os_log_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  id v42;
  double v43;
  double v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD v50[2];
  os_log_t v51;
  uint64_t v52;
  int v53;
  id v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;
  uint64_t v62;
  uint64_t v63[2];

  v59 = a8;
  v60 = a7;
  v58 = a6;
  v55 = a3;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v14);
  v57 = (char *)v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56 = type metadata accessor for Date();
  v61 = *(_QWORD *)(v56 - 8);
  v16 = MEMORY[0x1E0C80A78](v56);
  v18 = (char *)v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x1E0C80A78](v16);
  v21 = (char *)v50 - v20;
  v22 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 128))(v19) & 1) == 0)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v22 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
  LODWORD(v23) = (*(uint64_t (**)(void *, double))(*(_QWORD *)v22 + 152))(a2, a9);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v24 = type metadata accessor for Logger();
  __swift_project_value_buffer(v24, (uint64_t)static Logger.pommes);
  v25 = v56;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v21, a5, v56);
  swift_bridgeObjectRetain_n();
  v54 = a2;
  v26 = Logger.logObject.getter();
  v27 = static os_log_type_t.debug.getter();
  v28 = v27;
  if (os_log_type_enabled(v26, v27))
  {
    v29 = swift_slowAlloc();
    v53 = v28;
    v30 = v29;
    v52 = swift_slowAlloc();
    v63[0] = v52;
    *(_DWORD *)v30 = 136315650;
    v51 = v26;
    swift_bridgeObjectRetain();
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, a4, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    LODWORD(v55) = v23;
    *(_WORD *)(v30 + 12) = 2080;
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type Date and conformance Date, (uint64_t (*)(uint64_t))MEMORY[0x1E0CB0870], MEMORY[0x1E0CB08F0]);
    v31 = dispatch thunk of CustomStringConvertible.description.getter();
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v31, v32, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v61 + 8))(v21, v25);
    *(_WORD *)(v30 + 22) = 2080;
    v50[1] = v30 + 24;
    v33 = v54;
    v34 = objc_msgSend(v33, sel_description);
    v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    v36 = v35;

    v37 = v23;
    LOBYTE(v23) = v55;
    v62 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v36, v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    v38 = v51;
    _os_log_impl(&dword_1C2356000, v51, (os_log_type_t)v53, "PegasusCacheManager : Store POMMES response key=\"%s\" expiration=%s : %s", (uint8_t *)v30, 0x20u);
    v39 = v52;
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v39, -1, -1);
    MEMORY[0x1C3BBFF64](v30, -1, -1);

    v40 = (uint64_t)v57;
    v41 = v61;
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v41 = v61;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v21, v25);

    v42 = v54;
    v40 = (uint64_t)v57;
  }
  static Date.now.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v41 + 8))(v18, v25);
  v45 = PommesResponse.requestId.getter();
  v47 = v46;
  PommesResponse.pommesCandidateId.getter();
  v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v22 + 176))(v45, v47, v40, 1, v44);
  outlined destroy of MediaUserStateCenter?(v40, &demangling cache variable for type metadata for PommesCandidateId?);
  swift_bridgeObjectRelease();
  return v60(v23 & 1, v48);
}

void PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  void *v11;
  void *v12;
  id v13;
  unsigned int v14;
  NSObject *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  _QWORD aBlock[6];

  v23 = a4;
  v22 = a1;
  v7 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(_QWORD *)(v8 + 64);
  MEMORY[0x1E0C80A78](v7);
  if ((*(_BYTE *)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) != 0)
    goto LABEL_4;
  v10 = *(void **)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  v11 = (void *)MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
  v12 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
  v13 = objc_msgSend(v10, sel_levelForFactor_withNamespaceName_, v11, v12);

  if (v13)
  {
    v14 = objc_msgSend(v13, sel_BOOLeanValue);

    if (v14)
    {
LABEL_4:
      v15 = *(NSObject **)(v4 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      outlined init with copy of MediaUserStateCenter?(a3, (uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PommesCandidateId?);
      v16 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      v17 = (_QWORD *)swift_allocObject();
      v18 = v22;
      v17[2] = v4;
      v17[3] = v18;
      v17[4] = a2;
      outlined init with take of PommesSearchReason?((uint64_t)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v17 + v16, &demangling cache variable for type metadata for PommesCandidateId?);
      *(_DWORD *)((char *)v17 + ((v9 + v16 + 3) & 0xFFFFFFFFFFFFFFFCLL)) = v23;
      v19 = swift_allocObject();
      *(_QWORD *)(v19 + 16) = partial apply for closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:);
      *(_QWORD *)(v19 + 24) = v17;
      aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
      aBlock[5] = v19;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_22;
      v20 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v15, v20);
      _Block_release(v20);
      LOBYTE(v20) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((v20 & 1) != 0)
        __break(1u);
    }
  }
}

void closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)(uint64_t a1)
{
  uint64_t v1;
  os_log_type_t v2;
  uint8_t *v3;
  NSObject *oslog;

  (*(void (**)(uint64_t))(**(_QWORD **)(a1
                                                + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                                  + 168))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  oslog = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(oslog, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C2356000, oslog, v2, "PegasusCacheManager : responseCache successfully purged", v3, 2u);
    MEMORY[0x1C3BBFF64](v3, -1, -1);
  }

}

void PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  void *v19;
  id v20;
  unsigned int v21;
  NSObject *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  char isEscapingClosureAtFileLocation;
  uint64_t v28;
  uint64_t v29;
  _QWORD aBlock[6];

  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(_QWORD *)(v12 + 64);
  MEMORY[0x1E0C80A78](v11);
  if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) != 0)
    goto LABEL_4;
  v14 = *(void **)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  v15 = (void *)MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
  v29 = a3;
  v16 = a2;
  v17 = a1;
  v18 = a4;
  v19 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
  v20 = objc_msgSend(v14, sel_levelForFactor_withNamespaceName_, v15, v19);

  a4 = v18;
  a1 = v17;
  a2 = v16;
  a3 = v29;
  if (v20)
  {
    v21 = objc_msgSend(v20, sel_BOOLeanValue);

    if (v21)
    {
LABEL_4:
      v22 = *(NSObject **)(v5 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      outlined init with copy of MediaUserStateCenter?(a3, (uint64_t)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), &demangling cache variable for type metadata for PommesCandidateId?);
      v23 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      v24 = swift_allocObject();
      *(_QWORD *)(v24 + 16) = v5;
      *(double *)(v24 + 24) = a5;
      *(_QWORD *)(v24 + 32) = a1;
      *(_QWORD *)(v24 + 40) = a2;
      outlined init with take of PommesSearchReason?((uint64_t)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v24 + v23, &demangling cache variable for type metadata for PommesCandidateId?);
      *(_DWORD *)(v24 + ((v13 + v23 + 3) & 0xFFFFFFFFFFFFFFFCLL)) = a4;
      v25 = swift_allocObject();
      *(_QWORD *)(v25 + 16) = partial apply for closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:);
      *(_QWORD *)(v25 + 24) = v24;
      aBlock[4] = thunk for @callee_guaranteed () -> ()partial apply;
      aBlock[5] = v25;
      aBlock[0] = MEMORY[0x1E0C809B0];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
      aBlock[3] = &block_descriptor_32;
      v26 = _Block_copy(aBlock);
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v22, v26);
      _Block_release(v26);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
  }
}

_BYTE *closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v18;

  LOBYTE(v18) = 0;
  v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(void))(*(_QWORD *)v12 + 128))() & 1) == 0)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v12 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
    LOBYTE(v18) = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(*(_QWORD *)v12 + 176))(a2, a3, a4, a5, a6);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v13 = type metadata accessor for Logger();
  __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
  v14 = Logger.logObject.getter();
  v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v16 = 0;
    _os_log_impl(&dword_1C2356000, v14, v15, "PegasusCacheManager : responseCache successfully purged expired entries", v16, 2u);
    MEMORY[0x1C3BBFF64](v16, -1, -1);
  }

  return $defer #1 () in closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(&v18, a1);
}

void PegasusCacheManager.purge(response:reason:)(void *a1, int a2)
{
  uint64_t v2;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  unsigned int v9;
  NSObject *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  id v14;
  char isEscapingClosureAtFileLocation;
  _QWORD v16[6];

  if ((*(_BYTE *)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled) & 1) != 0)
    goto LABEL_4;
  v5 = *(void **)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient);
  v6 = (void *)MEMORY[0x1C3BBEC44](0x635F656C62616E65, 0xEE00676E69686361);
  v7 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000018, 0x80000001C2501C60);
  v8 = objc_msgSend(v5, sel_levelForFactor_withNamespaceName_, v6, v7);

  if (v8)
  {
    v9 = objc_msgSend(v8, sel_BOOLeanValue);

    if (v9)
    {
LABEL_4:
      v10 = *(NSObject **)(v2 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue);
      v11 = swift_allocObject();
      *(_QWORD *)(v11 + 16) = v2;
      *(_QWORD *)(v11 + 24) = a1;
      *(_DWORD *)(v11 + 32) = a2;
      v12 = swift_allocObject();
      *(_QWORD *)(v12 + 16) = partial apply for closure #1 in PegasusCacheManager.purge(response:reason:);
      *(_QWORD *)(v12 + 24) = v11;
      v16[4] = thunk for @callee_guaranteed () -> ()partial apply;
      v16[5] = v12;
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 1107296256;
      v16[2] = thunk for @escaping @callee_guaranteed () -> ();
      v16[3] = &block_descriptor_42;
      v13 = _Block_copy(v16);
      swift_retain();
      v14 = a1;
      swift_retain();
      swift_release();
      dispatch_sync(v10, v13);
      _Block_release(v13);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
        __break(1u);
    }
  }
}

_BYTE *closure #1 in PegasusCacheManager.purge(response:reason:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v12;

  LOBYTE(v12) = 0;
  v6 = *(_QWORD *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache);
  if (((*(uint64_t (**)(void))(*(_QWORD *)v6 + 128))() & 1) == 0)
  {
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v6 + 136))(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath, *(unsigned int *)(a1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags));
    LOBYTE(v12) = 1;
  }
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 184))(a2, a3);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  v8 = Logger.logObject.getter();
  v9 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v8, v9))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_1C2356000, v8, v9, "PegasusCacheManager : responseCache successfully purged response", v10, 2u);
    MEMORY[0x1C3BBFF64](v10, -1, -1);
  }

  return $defer #1 () in closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(&v12, a1);
}

_BYTE *$defer #1 () in closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(_BYTE *result, uint64_t a2)
{
  if (*result == 1)
    return (_BYTE *)(*(uint64_t (**)(void))(**(_QWORD **)(a2
                                                       + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache)
                                         + 144))();
  return result;
}

void one-time initialization function for triggerCodePathUUID()
{
  id v0;
  void *v1;
  id v2;

  v0 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  v1 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000024, 0x80000001C2503B90);
  v2 = objc_msgSend(v0, sel_initWithUUIDString_, v1);

  static PegasusCacheManager.triggerCodePathUUID = (uint64_t)v2;
}

uint64_t closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, void *);

  v9 = (uint64_t (*)(uint64_t, void *))((int)*MEMORY[0x1E0CF1368] + MEMORY[0x1E0CF1368]);
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v5 + 56) = v7;
  *v7 = v5;
  v7[1] = closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:);
  return v9(a5, &outlined read-only object #0 of closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:));
}

uint64_t closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 64) = v0;
  swift_task_dealloc();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

{
  uint64_t v0;
  void *v1;
  uint64_t v2;
  id v3;
  id v4;
  NSObject *v5;
  os_log_type_t v6;
  BOOL v7;
  void *v8;
  uint8_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = *(void **)(v0 + 64);
  v2 = type metadata accessor for Logger();
  __swift_project_value_buffer(v2, (uint64_t)static Logger.pommes);
  v3 = v1;
  v4 = v1;
  v5 = Logger.logObject.getter();
  v6 = static os_log_type_t.error.getter();
  v7 = os_log_type_enabled(v5, v6);
  v8 = *(void **)(v0 + 64);
  if (v7)
  {
    v9 = (uint8_t *)swift_slowAlloc();
    v10 = swift_slowAlloc();
    v14 = v10;
    *(_DWORD *)v9 = 136315138;
    swift_getErrorValue();
    v11 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v5, v6, "PegasusCacheManager : Failed to cache Trial experiment with error=%s", v9, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v10, -1, -1);
    MEMORY[0x1C3BBFF64](v9, -1, -1);

  }
  else
  {

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _QWORD *v7;

  v7[9] = a6;
  v7[10] = a7;
  v7[7] = a4;
  v7[8] = a5;
  return swift_task_switch();
}

uint64_t closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  void *v4;
  id v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  uint8_t *v9;
  id v10;
  _QWORD *v11;
  uint64_t (*v13)(_QWORD, id);

  v1 = *(_QWORD *)(v0 + 64);
  if (!v1)
    return (*(uint64_t (**)(void))(v0 + 8))();
  v2 = *(_QWORD *)(v0 + 56);
  v3 = objc_allocWithZone(MEMORY[0x1E0CB3A28]);
  swift_bridgeObjectRetain();
  v4 = (void *)MEMORY[0x1C3BBEC44](v2, v1);
  swift_bridgeObjectRelease();
  v5 = objc_msgSend(v3, sel_initWithUUIDString_, v4);
  *(_QWORD *)(v0 + 88) = v5;

  if (!v5)
    return (*(uint64_t (**)(void))(v0 + 8))();
  if (one-time initialization token for pommes != -1)
    swift_once();
  v6 = type metadata accessor for Logger();
  *(_QWORD *)(v0 + 96) = __swift_project_value_buffer(v6, (uint64_t)static Logger.pommes);
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v9 = 0;
    _os_log_impl(&dword_1C2356000, v7, v8, "PegasusCacheManager : Emitting Trigger Log", v9, 2u);
    MEMORY[0x1C3BBFF64](v9, -1, -1);
  }

  v13 = (uint64_t (*)(_QWORD, id))((int)*MEMORY[0x1E0CF1360] + MEMORY[0x1E0CF1360]);
  v10 = v5;
  v11 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 104) = v11;
  *v11 = v0;
  v11[1] = closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:);
  return v13(*(_QWORD *)(v0 + 80), v5);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 112) = v0;
  swift_task_dealloc();
  if (!v0)

  return swift_task_switch();
}

{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  NSObject *v4;
  os_log_type_t v5;
  void *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  void *v13;
  uint64_t v14;

  v1 = *(void **)(v0 + 112);

  v2 = v1;
  v3 = v1;
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v6 = *(void **)(v0 + 112);
    v13 = *(void **)(v0 + 88);
    v7 = (uint8_t *)swift_slowAlloc();
    v8 = swift_slowAlloc();
    v14 = v8;
    *(_DWORD *)v7 = 136315138;
    swift_getErrorValue();
    v9 = Error.localizedDescription.getter();
    *(_QWORD *)(v0 + 48) = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v9, v10, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v4, v5, "PegasusCacheManager : Failed to emit trigger log with error=%s", v7, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v8, -1, -1);
    MEMORY[0x1C3BBFF64](v7, -1, -1);

  }
  else
  {
    v11 = *(void **)(v0 + 112);

  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t PegasusCacheManager.secondsSinceLastMaintenanceStarted(from:userDefaults:)(uint64_t a1, void *a2)
{
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  void *v10;
  id v11;
  void *v12;
  id v13;
  uint64_t *v14;
  char *v15;
  int v16;
  double v17;
  double v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for Date();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2)
  {
    v33 = 0u;
    v34 = 0u;
LABEL_9:
    v14 = (uint64_t *)&demangling cache variable for type metadata for Any?;
    v15 = (char *)&v33;
LABEL_20:
    outlined destroy of MediaUserStateCenter?((uint64_t)v15, v14);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v21 = type metadata accessor for Logger();
    __swift_project_value_buffer(v21, (uint64_t)static Logger.pommes);
    v22 = Logger.logObject.getter();
    v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      *(_QWORD *)&v33 = v25;
      *(_DWORD *)v24 = 136315138;
      *(_QWORD *)&v31 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD00000000000001ALL, 0x80000001C25039D0, (uint64_t *)&v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1C2356000, v22, v23, "PegasusCacheManager : No value for %s in UserDefaults", v24, 0xCu);
      v19 = 1;
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v25, -1, -1);
      MEMORY[0x1C3BBFF64](v24, -1, -1);

      v20 = 0;
      goto LABEL_26;
    }

LABEL_25:
    v20 = 0;
    v19 = 1;
    goto LABEL_26;
  }
  v10 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000001ALL, 0x80000001C25039D0);
  v11 = objc_msgSend(a2, sel_valueForKey_, v10);

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  outlined init with take of PommesSearchReason?((uint64_t)&v31, (uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v34 + 1))
    goto LABEL_9;
  outlined destroy of MediaUserStateCenter?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
  v12 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000001ALL, 0x80000001C25039D0);
  v13 = objc_msgSend(a2, sel_objectForKey_, v12);

  if (v13)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    v31 = 0u;
    v32 = 0u;
  }
  outlined init with take of PommesSearchReason?((uint64_t)&v31, (uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
  if (!*((_QWORD *)&v34 + 1))
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)&v33, (uint64_t *)&demangling cache variable for type metadata for Any?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1, 1, v6);
    goto LABEL_19;
  }
  v16 = swift_dynamicCast();
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v5, v16 ^ 1u, 1, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
LABEL_19:
    v14 = &demangling cache variable for type metadata for Date?;
    v15 = v5;
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
  if ((static Date.< infix(_:_:)() & 1) == 0)
  {
    if (one-time initialization token for pommes == -1)
    {
LABEL_28:
      v27 = type metadata accessor for Logger();
      __swift_project_value_buffer(v27, (uint64_t)static Logger.pommes);
      v28 = Logger.logObject.getter();
      v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v30 = 0;
        _os_log_impl(&dword_1C2356000, v28, v29, "PegasusCacheManager : Last maintenance started date is greater than now", v30, 2u);
        MEMORY[0x1C3BBFF64](v30, -1, -1);
      }

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      goto LABEL_25;
    }
LABEL_34:
    swift_once();
    goto LABEL_28;
  }
  Date.timeIntervalSince(_:)();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((~*(_QWORD *)&v18 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v18 <= -1.0)
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (v18 >= 4294967300.0)
  {
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  v19 = 0;
  v20 = v18;
LABEL_26:
  LOBYTE(v33) = v19;
  return v20 | ((unint64_t)v19 << 32);
}

void PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)(uint64_t a1, void *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  Class isa;
  void *v11;
  uint64_t v12;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v4);
  v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0;
  v7 = (char *)&v12 - v6;
  if (a2)
  {
    outlined init with copy of MediaUserStateCenter?(a1, (uint64_t)&v12 - v6, &demangling cache variable for type metadata for Date?);
    v8 = type metadata accessor for Date();
    v9 = *(_QWORD *)(v8 - 8);
    isa = 0;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      isa = Date._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v7, v8);
    }
    v11 = (void *)MEMORY[0x1C3BBEC44](0xD00000000000001ALL, 0x80000001C25039D0);
    objc_msgSend(a2, sel_setObject_forKey_, isa, v11);
    swift_unknownObjectRelease();

  }
}

uint64_t PegasusCacheManager.runMaintenanceActivity(_:)(_xpc_activity_s *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  id v18;
  void *v19;
  id v20;
  unint64_t v21;
  uint64_t v22;
  void (*v23)(unint64_t);
  void (*v24)(char *, _QWORD, uint64_t, uint64_t);
  uint64_t v25;
  id v26;
  void *v27;
  id v28;
  void (*v29)(char *, id);
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  char *v37;
  char *v38;
  id v39;
  void *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  const char *v48;
  uint64_t v49;
  uint64_t v51;
  void (*v52)(char *, uint64_t);
  char *v53;
  uint64_t (*v54)(char *, id);
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  xpc_activity_t v63;

  v2 = v1;
  v63 = a1;
  v3 = type metadata accessor for UUID();
  v4 = *(_QWORD *)(v3 - 8);
  v59 = v3;
  v60 = v4;
  MEMORY[0x1E0C80A78](v3);
  v57 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Date?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for Date();
  v62 = *(char **)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UUID?);
  v13 = MEMORY[0x1E0C80A78](v12);
  v58 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v16 = (char *)&v51 - v15;
  v17 = *(_QWORD *)(*(_QWORD *)(v1 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache) + 16);
  swift_retain();
  Date.init()();
  v18 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v19 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
  v20 = objc_msgSend(v18, sel_initWithSuiteName_, v19);

  v54 = *(uint64_t (**)(char *, id))(*(_QWORD *)v2 + 272);
  v21 = v54(v11, v20);

  v22 = (uint64_t)v62;
  v52 = (void (*)(char *, uint64_t))*((_QWORD *)v62 + 1);
  v53 = v11;
  v52(v11, v9);
  v23 = *(void (**)(unint64_t))(*(_QWORD *)v17 + 200);
  v61 = v17;
  v23(v21 | ((HIDWORD(v21) & 1) << 32));
  Date.init()();
  v24 = *(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56);
  v25 = v59;
  v55 = v9;
  v24(v8, 0, 1, v9);
  v26 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v27 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
  v28 = objc_msgSend(v26, sel_initWithSuiteName_, v27);

  v29 = *(void (**)(char *, id))(*(_QWORD *)v2 + 280);
  v56 = v2;
  v30 = (uint64_t)v58;
  v29(v8, v28);

  v31 = (uint64_t)v8;
  v32 = v60;
  outlined destroy of MediaUserStateCenter?(v31, &demangling cache variable for type metadata for Date?);
  v62 = v16;
  outlined init with copy of MediaUserStateCenter?((uint64_t)v16, v30, &demangling cache variable for type metadata for UUID?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v25) == 1)
  {
    outlined destroy of MediaUserStateCenter?(v30, &demangling cache variable for type metadata for UUID?);
    if (one-time initialization token for pommes != -1)
      swift_once();
    v33 = type metadata accessor for Logger();
    __swift_project_value_buffer(v33, (uint64_t)static Logger.pommes);
    v34 = Logger.logObject.getter();
    v35 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v34, v35))
    {
      v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v36 = 0;
      _os_log_impl(&dword_1C2356000, v34, v35, "PegasusCacheManager : Unable to log PommesCacheMaintenanceEnded because maintenanceStartedStreamUUID is missing", v36, 2u);
      MEMORY[0x1C3BBFF64](v36, -1, -1);
    }

  }
  else
  {
    v37 = v57;
    (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v57, v30, v25);
    v38 = v53;
    Date.init()();
    v39 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
    v40 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000015, 0x80000001C25024C0);
    v41 = objc_msgSend(v39, sel_initWithSuiteName_, v40);

    v42 = v54(v38, v41);
    v52(v38, v55);
    if ((v42 & 0x100000000) != 0)
      v43 = 0;
    else
      v43 = v42;
    (*(void (**)(char *, _QWORD, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v61 + 208))(v37, 0, 0, v43, 1);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v37, v25);
  }
  if (xpc_activity_set_state(v63, 5))
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v44 = type metadata accessor for Logger();
    __swift_project_value_buffer(v44, (uint64_t)static Logger.pommes);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      v48 = "PegasusCacheManager : Maintenance activity is marked as done";
LABEL_20:
      _os_log_impl(&dword_1C2356000, v45, v46, v48, v47, 2u);
      MEMORY[0x1C3BBFF64](v47, -1, -1);
    }
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v49 = type metadata accessor for Logger();
    __swift_project_value_buffer(v49, (uint64_t)static Logger.pommes);
    v45 = Logger.logObject.getter();
    v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      v48 = "PegasusCacheManager : Failed to set maintenance activity to done";
      goto LABEL_20;
    }
  }

  swift_release();
  return outlined destroy of MediaUserStateCenter?((uint64_t)v62, &demangling cache variable for type metadata for UUID?);
}

Swift::Bool __swiftcall PegasusCacheManager.registerMaintenanceActivity()()
{
  uint64_t v0;
  uint64_t v1;
  NSObject *v2;
  os_log_type_t v3;
  uint8_t *v4;
  xpc_object_t v5;
  Swift::Bool result;
  Swift::Bool v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint64_t v13;
  _QWORD v14[6];

  (*(void (**)(void))(*(_QWORD *)v0 + 312))();
  if ((PegasusCacheManager.cachingEnabled.getter() & 1) == 0
    || *(_BYTE *)(v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_prepopulate) != 1)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v10 = type metadata accessor for Logger();
    __swift_project_value_buffer(v10, (uint64_t)static Logger.pommes);
    swift_retain();
    v11 = Logger.logObject.getter();
    v12 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v11, v12))
    {
      v13 = swift_slowAlloc();
      *(_DWORD *)v13 = 67109376;
      LODWORD(v14[0]) = PegasusCacheManager.cachingEnabled.getter() & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 8) = 1024;
      LODWORD(v14[0]) = *(unsigned __int8 *)(v0
                                           + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_prepopulate);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl(&dword_1C2356000, v11, v12, "PegasusCacheManager : Unable to register maintenance activity cachingEnabled=%{BOOL}d prepopulate=%{BOOL}d", (uint8_t *)v13, 0xEu);
      MEMORY[0x1C3BBFF64](v13, -1, -1);

    }
    else
    {

      swift_release();
    }
    return 0;
  }
  if (one-time initialization token for pommes != -1)
    swift_once();
  v1 = type metadata accessor for Logger();
  __swift_project_value_buffer(v1, (uint64_t)static Logger.pommes);
  v2 = Logger.logObject.getter();
  v3 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v2, v3))
  {
    v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v4 = 0;
    _os_log_impl(&dword_1C2356000, v2, v3, "PegasusCacheManager : Registering maintenance activity", v4, 2u);
    MEMORY[0x1C3BBFF64](v4, -1, -1);
  }

  v5 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v5, (const char *)*MEMORY[0x1E0C807A8], *MEMORY[0x1E0C807E8]);
  xpc_dictionary_set_BOOL(v5, (const char *)*MEMORY[0x1E0C80898], 1);
  if (*MEMORY[0x1E0C808D0])
  {
    v7 = 1;
    xpc_dictionary_set_BOOL(v5, (const char *)*MEMORY[0x1E0C808D0], 1);
    xpc_dictionary_set_string(v5, (const char *)*MEMORY[0x1E0C80878], (const char *)*MEMORY[0x1E0C80880]);
    v8 = swift_allocObject();
    swift_weakInit();
    v14[4] = partial apply for closure #1 in PegasusCacheManager.registerMaintenanceActivity();
    v14[5] = v8;
    v14[0] = MEMORY[0x1E0C809B0];
    v14[1] = 1107296256;
    v14[2] = thunk for @escaping @callee_guaranteed (@guaranteed OS_xpc_object) -> ();
    v14[3] = &block_descriptor_46;
    v9 = _Block_copy(v14);
    swift_release();
    xpc_activity_register("com.apple.siri.xpc_activity.siri-information-prepopulate-cache", v5, v9);
    _Block_release(v9);
    swift_unknownObjectRelease();
    return v7;
  }
  __break(1u);
  return result;
}

void closure #1 in PegasusCacheManager.registerMaintenanceActivity()(_xpc_activity_s *a1)
{
  uint64_t Strong;
  uint64_t v3;
  xpc_activity_state_t state;
  uint64_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint8_t *v20;
  xpc_object_t v21;
  xpc_object_t v22;

  swift_beginAccess();
  Strong = swift_weakLoadStrong();
  if (Strong)
  {
    v3 = Strong;
    state = xpc_activity_get_state(a1);
    if (state)
    {
      if (state == 2)
      {
        if (!xpc_activity_set_state(a1, 4))
        {
          if (one-time initialization token for pommes != -1)
            swift_once();
          v5 = type metadata accessor for Logger();
          __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
          v6 = Logger.logObject.getter();
          v7 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v6, v7))
          {
            v8 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v8 = 0;
            _os_log_impl(&dword_1C2356000, v6, v7, "PegasusCacheManager : Failed to set maintenance activity to continue", v8, 2u);
            MEMORY[0x1C3BBFF64](v8, -1, -1);
          }

        }
        if (one-time initialization token for pommes != -1)
          swift_once();
        v9 = type metadata accessor for Logger();
        __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
        v10 = Logger.logObject.getter();
        v11 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v10, v11))
        {
          v12 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v12 = 0;
          _os_log_impl(&dword_1C2356000, v10, v11, "PegasusCacheManager : Running maintenance activity", v12, 2u);
          MEMORY[0x1C3BBFF64](v12, -1, -1);
        }

        (*(void (**)(_xpc_activity_s *))(*(_QWORD *)v3 + 288))(a1);
      }
      goto LABEL_27;
    }
    if (one-time initialization token for pommes != -1)
      swift_once();
    v17 = type metadata accessor for Logger();
    __swift_project_value_buffer(v17, (uint64_t)static Logger.pommes);
    v18 = Logger.logObject.getter();
    v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v20 = 0;
      _os_log_impl(&dword_1C2356000, v18, v19, "PegasusCacheManager : Checking in maintenance activity", v20, 2u);
      MEMORY[0x1C3BBFF64](v20, -1, -1);
    }

    v21 = xpc_activity_copy_criteria(a1);
    swift_unknownObjectRelease();
    if (v21)
      goto LABEL_27;
    v22 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v22, (const char *)*MEMORY[0x1E0C807A8], *MEMORY[0x1E0C807E8]);
    xpc_dictionary_set_BOOL(v22, (const char *)*MEMORY[0x1E0C80898], 1);
    if (*MEMORY[0x1E0C808D0])
    {
      xpc_dictionary_set_BOOL(v22, (const char *)*MEMORY[0x1E0C808D0], 1);
      xpc_dictionary_set_string(v22, (const char *)*MEMORY[0x1E0C80878], (const char *)*MEMORY[0x1E0C80880]);
      xpc_activity_set_criteria(a1, v22);
      swift_unknownObjectRelease();
LABEL_27:
      swift_release();
      return;
    }
    __break(1u);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1C2356000, v14, v15, "PegasusCacheManager : Unable to register activity because PegasusCacheManager has not been instantiated", v16, 2u);
      MEMORY[0x1C3BBFF64](v16, -1, -1);
    }

  }
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed OS_xpc_object) -> ()(uint64_t a1)
{
  void (*v1)(uint64_t);
  uint64_t v2;

  v1 = *(void (**)(uint64_t))(a1 + 32);
  swift_retain();
  v2 = swift_unknownObjectRetain();
  v1(v2);
  swift_release();
  return swift_unknownObjectRelease();
}

Swift::Void __swiftcall PegasusCacheManager.unregisterMaintenanceActivity()()
{
  uint64_t v0;
  NSObject *v1;
  os_log_type_t v2;
  uint8_t *v3;

  if (one-time initialization token for pommes != -1)
    swift_once();
  v0 = type metadata accessor for Logger();
  __swift_project_value_buffer(v0, (uint64_t)static Logger.pommes);
  v1 = Logger.logObject.getter();
  v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v3 = 0;
    _os_log_impl(&dword_1C2356000, v1, v2, "PegasusCacheManager : Unregistering maintenance activity", v3, 2u);
    MEMORY[0x1C3BBFF64](v3, -1, -1);
  }

  xpc_activity_unregister("com.apple.siri.xpc_activity.siri-information-prepopulate-cache");
}

uint64_t PegasusCacheManager.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  v1 = v0 + OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath;
  v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(v1, v2);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PegasusCacheManager.__deallocating_deinit()
{
  PegasusCacheManager.deinit();
  return swift_deallocClassInstance();
}

void *specialized static PegasusCacheManager.getTriggerPhrases(locale:)(uint64_t a1, uint64_t a2)
{
  void *result;
  char v5;
  BOOL v7;
  char v8;
  BOOL v9;
  BOOL v10;
  char v11;
  BOOL v12;
  BOOL v13;
  char v14;
  BOOL v15;
  BOOL v16;
  char v17;
  BOOL v18;
  BOOL v19;
  char v20;
  BOOL v21;
  BOOL v22;
  char v23;
  BOOL v24;
  BOOL v25;
  char v26;
  BOOL v27;
  BOOL v28;
  char v29;
  BOOL v30;
  BOOL v31;
  char v32;
  BOOL v34;
  void *v35;
  char v36;
  BOOL v37;
  BOOL v38;
  char v39;
  BOOL v40;
  BOOL v41;
  char v42;
  BOOL v43;
  BOOL v44;
  char v45;
  BOOL v46;
  BOOL v47;
  char v48;
  BOOL v49;
  BOOL v50;
  char v51;
  BOOL v52;
  BOOL v53;
  char v54;
  BOOL v55;
  BOOL v56;
  char v57;
  BOOL v58;
  BOOL v59;
  char v60;
  BOOL v61;
  BOOL v62;
  char v63;
  BOOL v64;
  BOOL v65;
  char v66;
  BOOL v67;
  BOOL v68;
  char v69;
  BOOL v70;
  BOOL v71;
  char v72;
  BOOL v74;

  if (a1 == 0x45415F7261 && a2 == 0xE500000000000000)
    return &outlined read-only object #0 of static PegasusCacheManager.getTriggerPhrases(locale:);
  v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  v7 = a1 == 0x41535F7261 && a2 == 0xE500000000000000;
  result = &outlined read-only object #0 of static PegasusCacheManager.getTriggerPhrases(locale:);
  if ((v5 & 1) == 0 && !v7)
  {
    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return &outlined read-only object #0 of static PegasusCacheManager.getTriggerPhrases(locale:);
    if (a1 == 0x4B445F6164 && a2 == 0xE500000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      return &outlined read-only object #1 of static PegasusCacheManager.getTriggerPhrases(locale:);
    if (a1 == 0x54415F6564 && a2 == 0xE500000000000000)
      return &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    v9 = a1 == 0x48435F6564 && a2 == 0xE500000000000000;
    v10 = v9;
    result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
    if ((v8 & 1) == 0 && !v10)
    {
      v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      v12 = a1 == 0x45445F6564 && a2 == 0xE500000000000000;
      v13 = v12;
      result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
      if ((v11 & 1) == 0 && !v13)
      {
        v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        v15 = a1 == 0x53555F6E65 && a2 == 0xE500000000000000;
        v16 = v15;
        result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
        if ((v14 & 1) == 0 && !v16)
        {
          v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          v18 = a1 == 0x55415F6E65 && a2 == 0xE500000000000000;
          v19 = v18;
          result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
          if ((v17 & 1) == 0 && !v19)
          {
            v20 = _stringCompareWithSmolCheck(_:_:expecting:)();
            v21 = a1 == 0x41435F6E65 && a2 == 0xE500000000000000;
            v22 = v21;
            result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
            if ((v20 & 1) == 0 && !v22)
            {
              v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
              v24 = a1 == 0x42475F6E65 && a2 == 0xE500000000000000;
              v25 = v24;
              result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
              if ((v23 & 1) == 0 && !v25)
              {
                v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
                v27 = a1 == 0x45495F6E65 && a2 == 0xE500000000000000;
                v28 = v27;
                result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                if ((v26 & 1) == 0 && !v28)
                {
                  v29 = _stringCompareWithSmolCheck(_:_:expecting:)();
                  v30 = a1 == 0x4E495F6E65 && a2 == 0xE500000000000000;
                  v31 = v30;
                  result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                  if ((v29 & 1) == 0 && !v31)
                  {
                    v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v34 = a1 == 0x5A4E5F6E65 && a2 == 0xE500000000000000;
                    v35 = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v32 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v34)
                      return result;
                    v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v37 = a1 == 0x47535F6E65 && a2 == 0xE500000000000000;
                    v38 = v37;
                    v35 = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v36 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v38)
                      return result;
                    v39 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v40 = a1 == 0x415A5F6E65 && a2 == 0xE500000000000000;
                    v41 = v40;
                    v35 = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v39 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v41)
                      return result;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      return &outlined read-only object #2 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (a1 == 0x4C435F7365 && a2 == 0xE500000000000000)
                      return &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v43 = a1 == 0x53455F7365 && a2 == 0xE500000000000000;
                    v44 = v43;
                    v35 = &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v42 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v44)
                      return result;
                    v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v46 = a1 == 0x584D5F7365 && a2 == 0xE500000000000000;
                    v47 = v46;
                    v35 = &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v45 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v47)
                      return result;
                    v48 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v49 = a1 == 0x53555F7365 && a2 == 0xE500000000000000;
                    v50 = v49;
                    v35 = &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v48 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v50)
                      return result;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      return &outlined read-only object #3 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (a1 == 0x49465F6966 && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #4 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x45425F7266 && a2 == 0xE500000000000000)
                      return &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    v51 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v52 = a1 == 0x41435F7266 && a2 == 0xE500000000000000;
                    v53 = v52;
                    v35 = &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v51 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v53)
                      return result;
                    v54 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v55 = a1 == 0x48435F7266 && a2 == 0xE500000000000000;
                    v56 = v55;
                    v35 = &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v54 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v56)
                      return result;
                    v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v58 = a1 == 0x52465F7266 && a2 == 0xE500000000000000;
                    v59 = v58;
                    v35 = &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v57 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v59)
                      return result;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      return &outlined read-only object #5 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (a1 == 0x4C495F6568 && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #6 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x48435F7469 && a2 == 0xE500000000000000)
                      return &outlined read-only object #7 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    v60 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v61 = a1 == 0x54495F7469 && a2 == 0xE500000000000000;
                    v62 = v61;
                    v35 = &outlined read-only object #7 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v60 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #7 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v62)
                      return result;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      return &outlined read-only object #7 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (a1 == 0x504A5F616ALL && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #8 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x524B5F6F6BLL && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #9 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x594D5F736DLL && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #10 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x4F4E5F626ELL && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #11 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x4C4E5F6C6ELL && a2 == 0xE500000000000000)
                      return &outlined read-only object #12 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v64 = a1 == 0x45425F6C6ELL && a2 == 0xE500000000000000;
                    v65 = v64;
                    v35 = &outlined read-only object #12 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v63 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #12 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v65)
                      return result;
                    if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                      return &outlined read-only object #12 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (a1 == 0x52425F7470 && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #13 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x55525F7572 && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #14 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x45535F7673 && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #15 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x48545F6874 && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #16 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x52545F7274 && a2 == 0xE500000000000000
                      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                    {
                      return &outlined read-only object #17 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    }
                    if (a1 == 0x4E435F657579 && a2 == 0xE600000000000000)
                      return &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    v66 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v67 = a1 == 0x4E435F687ALL && a2 == 0xE500000000000000;
                    v68 = v67;
                    v35 = &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v66 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (v68)
                      return result;
                    v69 = _stringCompareWithSmolCheck(_:_:expecting:)();
                    v70 = a1 == 0x4B485F687ALL && a2 == 0xE500000000000000;
                    v71 = v70;
                    v35 = &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if ((v69 & 1) != 0)
                      return v35;
                    result = &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                    if (!v71)
                    {
                      v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
                      v74 = a1 == 0x57545F687ALL && a2 == 0xE500000000000000;
                      if ((v72 & 1) != 0)
                      {
                        return &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                      }
                      else
                      {
                        result = &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                        if (!v74)
                        {
                          if ((_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
                            return &outlined read-only object #18 of static PegasusCacheManager.getTriggerPhrases(locale:);
                          else
                            return (void *)MEMORY[0x1E0DEE9D8];
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return result;
}

void specialized static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  id v9;
  id v10;
  uint64_t v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  NSObject *v15;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for triggerCodePathUUID != -1)
    swift_once();
  v6 = (void *)static PegasusCacheManager.triggerCodePathUUID;
  if (static PegasusCacheManager.triggerCodePathUUID)
  {
    v7 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5, 1, 1, v7);
    v8 = (_QWORD *)swift_allocObject();
    v8[2] = 0;
    v8[3] = 0;
    v8[4] = a1;
    v8[5] = v6;
    v8[6] = v1;
    v9 = v6;
    v10 = a1;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v5, (uint64_t)&async function pointer to partial apply for closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:), (uint64_t)v8);
    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v11 = type metadata accessor for Logger();
    __swift_project_value_buffer(v11, (uint64_t)static Logger.pommes);
    v15 = Logger.logObject.getter();
    v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v12))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_1C2356000, v15, v12, "PegasusCacheManager : Failed to cache Trial experiment because triggerCodePathUUID is nil", v13, 2u);
      MEMORY[0x1C3BBFF64](v13, -1, -1);
    }

  }
}

_BYTE *specialized PegasusCacheManager.init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, void *a7, int a8)
{
  _QWORD *v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(char *, uint64_t);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  char *v33;
  void (*v34)(char *, uint64_t, uint64_t);
  char *v35;
  void *v36;
  void *v37;
  id v38;
  __CFNotificationCenter *v39;
  __CFNotificationCenter *v40;
  void *v41;
  id v42;
  id v43;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  int v60;
  int v61;
  void *v62;
  uint64_t v63;

  v9 = v8;
  v60 = a6;
  v61 = a8;
  v62 = a7;
  v58 = a5;
  v54 = a1;
  v55 = a4;
  v59 = a3;
  v49 = a2;
  v57 = *v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for URL?);
  MEMORY[0x1E0C80A78](v10);
  v52 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for URL();
  v51 = *(_QWORD *)(v53 - 8);
  MEMORY[0x1E0C80A78](v53);
  v56 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  v48 = *(_QWORD *)(v50 - 8);
  MEMORY[0x1E0C80A78](v50);
  v47 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for OS_dispatch_queue.Attributes();
  MEMORY[0x1E0C80A78](v14);
  v15 = type metadata accessor for DispatchQoS();
  MEMORY[0x1E0C80A78](v15);
  v16 = type metadata accessor for DispatchQoS.QoSClass();
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x1E0C80A78](v16);
  v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_responseCache;
  type metadata accessor for ResponseCache();
  v21 = swift_allocObject();
  *(_QWORD *)(v21 + 24) = 0;
  type metadata accessor for AnalyticsComponentIdGenerator();
  v22 = swift_allocObject();
  type metadata accessor for PommesCacheInstrumentationUtil();
  v23 = swift_allocObject();
  *(_QWORD *)(v23 + 16) = 0;
  *(_QWORD *)(v23 + 24) = v22;
  *(_QWORD *)(v21 + 16) = v23;
  *(_QWORD *)&v9[v20] = v21;
  v24 = OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager;
  *(_QWORD *)&v9[v24] = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ExperimentationAnalyticsManager()), sel_init);
  v46 = OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_cacheQueue;
  type metadata accessor for OS_dispatch_queue();
  (*(void (**)(char *, _QWORD, uint64_t))(v17 + 104))(v19, *MEMORY[0x1E0DEF540], v16);
  static OS_dispatch_queue.global(qos:)();
  v25 = *(void (**)(char *, uint64_t))(v17 + 8);
  v26 = v49;
  v25(v19, v16);
  static DispatchQoS.unspecified.getter();
  v63 = MEMORY[0x1E0DEE9D8];
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type OS_dispatch_queue.Attributes and conformance OS_dispatch_queue.Attributes, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF810], MEMORY[0x1E0DEF828]);
  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]((unint64_t *)&lazy protocol witness table cache variable for type [OS_dispatch_queue.Attributes] and conformance [A], &demangling cache variable for type metadata for [OS_dispatch_queue.Attributes]);
  v27 = v54;
  v28 = v51;
  v29 = (uint64_t)v52;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, _QWORD, uint64_t))(v48 + 104))(v47, *MEMORY[0x1E0DEF8D0], v50);
  v30 = v55;
  v31 = v53;
  *(_QWORD *)&v9[v46] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v32 = (uint64_t *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_locale];
  *v32 = v27;
  v32[1] = v26;
  outlined init with copy of MediaUserStateCenter?(v30, v29, &demangling cache variable for type metadata for URL?);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1, v31) == 1)
  {
    swift_bridgeObjectRetain();
    v33 = v56;
    static PegasusCacheManager.defaultDirectoryPath.getter();
    outlined destroy of MediaUserStateCenter?(v29, &demangling cache variable for type metadata for URL?);
    (*(void (**)(_BYTE *, char *, uint64_t))(v28 + 32))(&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath], v33, v31);
  }
  else
  {
    v34 = *(void (**)(char *, uint64_t, uint64_t))(v28 + 32);
    v35 = v56;
    v34(v56, v29, v31);
    swift_bridgeObjectRetain();
    v34(&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_directoryPath], (uint64_t)v35, v31);
  }
  *(_DWORD *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_dbFlags] = v58;
  v36 = specialized static PegasusCacheManager.getTriggerPhrases(locale:)(v27, v26);
  swift_bridgeObjectRelease();
  *(_QWORD *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_triggers] = v36;
  *(_QWORD *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_domainCacheHandlers] = v59;
  v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_overrideEnabled] = v60 & 1;
  v37 = v62;
  *(_QWORD *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient] = v62;
  v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_prepopulate] = v61 & 1;
  v38 = v37;
  v39 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v39)
  {
    v40 = v39;
    if (*MEMORY[0x1E0CFEB70])
      CFNotificationCenterAddObserver(v39, v9, (CFNotificationCallback)@objc closure #1 in variable initialization expression of static PegasusCacheManager.siriAndDictationHistoryDeletionRequestedCallback, (CFStringRef)*MEMORY[0x1E0CFEB70], 0, CFNotificationSuspensionBehaviorDeliverImmediately);

  }
  v41 = *(void **)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_trialClient];
  v42 = *(id *)&v9[OBJC_IVAR____TtC21SiriInformationSearch19PegasusCacheManager_experimentationAnalyticsManager];
  v43 = v41;
  specialized static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)(v42);

  (*(void (**)(void))(*(_QWORD *)v9 + 304))();
  outlined destroy of MediaUserStateCenter?(v30, &demangling cache variable for type metadata for URL?);
  return v9;
}

uint64_t sub_1C23E8C20()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PegasusCacheManager.prepare()()
{
  return closure #1 in PegasusCacheManager.prepare()();
}

uint64_t partial apply for closure #1 in PegasusCacheManager.reset()()
{
  uint64_t v0;

  return closure #1 in PegasusCacheManager.reset()(v0);
}

uint64_t sub_1C23E8C54()
{
  return swift_deallocObject();
}

unint64_t specialized Collection.dropFirst(_:)(unint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;

  if ((result & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else
  {
    if ((a3 & 0x2000000000000000) != 0)
      v3 = HIBYTE(a3) & 0xF;
    else
      v3 = a2 & 0xFFFFFFFFFFFFLL;
    v4 = 7;
    if (((a3 >> 60) & ((a2 & 0x800000000000000) == 0)) != 0)
      v4 = 11;
    v5 = v4 | (v3 << 16);
    result = String.index(_:offsetBy:limitedBy:)();
    if ((v6 & 1) != 0)
      result = v5;
    if (4 * v3 >= result >> 14)
      return String.subscript.getter();
  }
  __break(1u);
  return result;
}

uint64_t specialized static PegasusCacheManager.checkUserDefaultDisableCache(key:)(uint64_t a1, unint64_t a2)
{
  id v4;
  void *v5;
  id v6;
  void *v7;
  unsigned int v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v4 = objc_allocWithZone(MEMORY[0x1E0C99EA0]);
  v5 = (void *)MEMORY[0x1C3BBEC44](0xD000000000000010, 0x80000001C2502CA0);
  v6 = objc_msgSend(v4, sel_initWithSuiteName_, v5);

  if (!v6)
    return 0;
  v7 = (void *)MEMORY[0x1C3BBEC44](a1, a2);
  v8 = objc_msgSend(v6, sel_BOOLForKey_, v7);

  if (!v8)
    return 0;
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_bridgeObjectRetain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v16 = v13;
    *(_DWORD *)v12 = 136315650;
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000010, 0x80000001C2502CA0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2080;
    swift_bridgeObjectRetain();
    getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v12 + 22) = 1024;
    v14 = 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl(&dword_1C2356000, v10, v11, "PegasusCacheManager : User default %s/%s=%{BOOL}d", (uint8_t *)v12, 0x1Cu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    MEMORY[0x1C3BBFF64](v12, -1, -1);

  }
  else
  {

    swift_bridgeObjectRelease_n();
    return 1;
  }
  return v14;
}

uint64_t sub_1C23E8F90()
{
  uint64_t v0;
  int *v1;
  unint64_t v2;
  uint64_t v3;
  int EnumCaseMultiPayload;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  v1 = (int *)type metadata accessor for PommesSearchRequest(0);
  v2 = (*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*((_QWORD *)v1 - 1) + 80);
  swift_release();
  v3 = v0 + v2;
  type metadata accessor for PommesSearchRequest.ParseState(0);
  EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v9 = v3
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (refId: String, userParses: [Siri_Nlu_External_UserParse], fallbackParse: Siri_Nlu_External_DelegatedUserDialogAct?, responseVariantResult: String?))
                + 64);
    v10 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v11 = *(_QWORD *)(v10 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
LABEL_6:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload)
      goto LABEL_12;
    swift_bridgeObjectRelease();
    v5 = v3
       + *(int *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (id: String, nlxResultCandidate: NLXResultCandidate))
                + 48);
    swift_bridgeObjectRelease();
    v6 = v5 + *(int *)(type metadata accessor for NLXResultCandidate() + 20);
    v7 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
    v8 = *(_QWORD *)(v7 - 8);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v12 = v3
      + *(int *)(__swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for (id: String, tcuId: String, response: TCUMappedNLResponse?))
               + 64);
  v13 = type metadata accessor for TCUMappedNLResponse();
  v14 = *(_QWORD *)(v13 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v13);
LABEL_12:
  swift_bridgeObjectRelease();
  v15 = v3 + v1[6];
  v16 = type metadata accessor for Apple_Parsec_Siri_V2alpha_RewrittenUtterance();
  v17 = *(_QWORD *)(v16 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = v3 + v1[10];
  v19 = type metadata accessor for PommesContext();
  v20 = *(_QWORD *)(v19 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
  v21 = v3 + v1[11];
  v22 = type metadata accessor for Siri_Nlu_External_DelegatedUserDialogAct();
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  swift_release();
  v24 = v3 + v1[14];
  v25 = type metadata accessor for InputOrigin();
  v26 = *(_QWORD *)(v25 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

void partial apply for closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for PommesSearchRequest(0) - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  closure #1 in PegasusCacheManager.fetch(request:domainWarmup:completion:)(*(_QWORD *)(v0 + 16), v0 + v2, *(_QWORD *)(v0 + v3), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(void (**)(id))(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

void specialized static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  id v12;
  id v13;
  uint64_t v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  NSObject *v18;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for TaskPriority?);
  MEMORY[0x1E0C80A78](v6);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for triggerCodePathUUID != -1)
    swift_once();
  v9 = (void *)static PegasusCacheManager.triggerCodePathUUID;
  if (static PegasusCacheManager.triggerCodePathUUID)
  {
    v10 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56))(v8, 1, 1, v10);
    v11 = (_QWORD *)swift_allocObject();
    v11[2] = 0;
    v11[3] = 0;
    v11[4] = a1;
    v11[5] = a2;
    v11[6] = a3;
    v11[7] = v9;
    swift_bridgeObjectRetain();
    v12 = a3;
    v13 = v9;
    _sScTss5NeverORs_rlE8priority9operationScTyxABGScPSg_xyYaYAcntcfCyt_Tgm5((uint64_t)v8, (uint64_t)&async function pointer to partial apply for closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:), (uint64_t)v11);
    swift_release();
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v14 = type metadata accessor for Logger();
    __swift_project_value_buffer(v14, (uint64_t)static Logger.pommes);
    v18 = Logger.logObject.getter();
    v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v16 = 0;
      _os_log_impl(&dword_1C2356000, v18, v15, "PegasusCacheManager : Failed to cache Trial experiment because triggerCodePathUUID is nil", v16, 2u);
      MEMORY[0x1C3BBFF64](v16, -1, -1);
    }

  }
}

uint64_t sub_1C23E9590()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                                      - 8)
                          + 80);
  v2 = (v1 + 40) & ~v1;
  swift_release();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for PommesCandidateId();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  return swift_deallocObject();
}

void partial apply for closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  closure #1 in PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)(*(_QWORD *)(v0 + 16));
}

uint64_t sub_1C23E9690()
{
  return swift_deallocObject();
}

uint64_t sub_1C23E96A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(unsigned __int8 *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                                      - 8)
                          + 80);
  v2 = (v1 + 48) & ~v1;
  swift_release();
  swift_bridgeObjectRelease();
  v3 = type metadata accessor for PommesCandidateId();
  v4 = *(_QWORD *)(v3 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v2, 1, v3))
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v0 + v2, v3);
  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?)
                 - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return closure #1 in PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 32), *(_QWORD *)(v0 + 40), v0 + v2, *(unsigned int *)(v0 + ((*(_QWORD *)(v1 + 64) + v2 + 3) & 0xFFFFFFFFFFFFFCLL)), *(double *)(v0 + 24));
}

uint64_t sub_1C23E97A4()
{
  return swift_deallocObject();
}

uint64_t sub_1C23E97B4()
{
  uint64_t v0;

  swift_release();

  return swift_deallocObject();
}

_BYTE *partial apply for closure #1 in PegasusCacheManager.purge(response:reason:)()
{
  uint64_t v0;

  return closure #1 in PegasusCacheManager.purge(response:reason:)(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24), *(unsigned int *)(v0 + 32));
}

uint64_t sub_1C23E97EC()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PegasusCacheManager.registerMaintenanceActivity()(_xpc_activity_s *a1)
{
  closure #1 in PegasusCacheManager.registerMaintenanceActivity()(a1);
}

uint64_t ObjC metadata update function for PegasusCacheManager()
{
  return type metadata accessor for PegasusCacheManager();
}

uint64_t type metadata accessor for PegasusCacheManager()
{
  uint64_t result;

  result = type metadata singleton initialization cache for PegasusCacheManager;
  if (!type metadata singleton initialization cache for PegasusCacheManager)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t type metadata completion function for PegasusCacheManager()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    result = swift_updateClassMetadata2();
    if (!result)
      return 0;
  }
  return result;
}

uint64_t method lookup function for PegasusCacheManager()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PegasusCacheManager.__allocating_init(locale:domainCacheHandlers:path:flags:enabled:trialClient:prepopulate:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 176))();
}

uint64_t dispatch thunk of PegasusCacheManager.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 200))();
}

uint64_t dispatch thunk of PegasusCacheManager.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of PegasusCacheManager.fetch(request:domainWarmup:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of PegasusCacheManager.store(siriRequestId:pegasusResponse:pommesResponse:waitFor:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))();
}

uint64_t dispatch thunk of PegasusCacheManager.store(ttl:response:waitFor:completion:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 232))();
}

uint64_t dispatch thunk of PegasusCacheManager.deleteCache(requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t dispatch thunk of PegasusCacheManager.purge(expirationThreshold:requestId:pommesCandidateId:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 256))();
}

uint64_t dispatch thunk of PegasusCacheManager.purge(response:reason:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of PegasusCacheManager.secondsSinceLastMaintenanceStarted(from:userDefaults:)()
{
  uint64_t v0;
  unint64_t v1;

  v1 = (*(uint64_t (**)(void))(*(_QWORD *)v0 + 272))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of PegasusCacheManager.updateLastMaintenanceStartedTimestamp(with:userDefaults:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 280))();
}

uint64_t dispatch thunk of PegasusCacheManager.runMaintenanceActivity(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 288))();
}

uint64_t dispatch thunk of PegasusCacheManager.registerMaintenanceActivity()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 304))();
}

uint64_t dispatch thunk of PegasusCacheManager.unregisterMaintenanceActivity()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 312))();
}

uint64_t sub_1C23E99EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v1 = type metadata accessor for Date();
  v2 = *(_QWORD *)(v1 - 8);
  v3 = (*(unsigned __int8 *)(v2 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v4 = (*(_QWORD *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();

  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v2 + 8))(v0 + v3, v1);

  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)(type metadata accessor for Date() - 8);
  v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v3 = (*(_QWORD *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in PegasusCacheManager.store_internal(ttl:response:waitFor:completion:)(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), v0 + v2, *(_QWORD *)(v0 + v3), *(uint64_t (**)(uint64_t, uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(_QWORD *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 8), *(double *)(v0 + 32));
}

uint64_t sub_1C23E9AFC()
{
  uint64_t v0;

  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PegasusCacheManager.emitTriggerLogForPommesCaching(siriRequestId:experimentationAnalyticsManager:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  __int128 v5;

  v2 = *(_QWORD *)(v0 + 32);
  v3 = *(_QWORD *)(v0 + 40);
  v4 = swift_task_alloc();
  v5 = *(_OWORD *)(v0 + 48);
  *(_QWORD *)(v1 + 16) = v4;
  *(_QWORD *)v4 = v1;
  *(_QWORD *)(v4 + 8) = partial apply for closure #1 in PommesSearchService.searchInfiEntity(request:timeoutInSec:);
  *(_OWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 56) = v2;
  *(_QWORD *)(v4 + 64) = v3;
  return swift_task_switch();
}

uint64_t sub_1C23E9BEC()
{
  uint64_t v0;

  swift_unknownObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:)()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t (*v6)(uint64_t, void *);

  v2 = *(_QWORD *)(v0 + 40);
  v3 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v1 + 16) = v3;
  *v3 = v1;
  v3[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tgq5TATQ0_;
  v6 = (uint64_t (*)(uint64_t, void *))((int)*MEMORY[0x1E0CF1368] + MEMORY[0x1E0CF1368]);
  v4 = (_QWORD *)swift_task_alloc();
  v3[7] = v4;
  *v4 = v3;
  v4[1] = closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:);
  return v6(v2, &outlined read-only object #0 of closure #1 in static PegasusCacheManager.cacheTrialExperimentsForTriggerLogging(_:_:));
}

uint64_t PommesAudioPluginResults.audioResults.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesAudioPluginResults.targetPlaylists.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t PommesAudioPluginResults.__allocating_init(audioResults:targetPlaylists:)(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = swift_allocObject();
  *(_QWORD *)(result + 16) = a1;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t PommesAudioPluginResults.init(audioResults:targetPlaylists:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  *(_QWORD *)(v2 + 16) = a1;
  *(_QWORD *)(v2 + 24) = a2;
  return v2;
}

uint64_t PommesAudioPluginResults.deinit()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t PommesAudioPluginResults.__deallocating_deinit()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PommesAudioPluginResults()
{
  return objc_opt_self();
}

uint64_t method lookup function for PommesAudioPluginResults()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PommesAudioPluginResults.__allocating_init(audioResults:targetPlaylists:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t PommesInsightRequestSummaryMessageDescription.rawValue.getter(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1C23E9E14 + 4 * byte_1C24FC270[a1]))(0xD00000000000001ELL, 0x80000001C2501C80);
}

uint64_t sub_1C23E9E14()
{
  uint64_t v0;

  return v0 - 3;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance PommesInsightRequestSummaryMessageDescription(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v8;

  v2 = *a2;
  v3 = PommesInsightRequestSummaryMessageDescription.rawValue.getter(*a1);
  v5 = v4;
  if (v3 == PommesInsightRequestSummaryMessageDescription.rawValue.getter(v2) && v5 == v6)
    v8 = 1;
  else
    v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PommesInsightRequestSummaryMessageDescription()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PommesInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance PommesInsightRequestSummaryMessageDescription()
{
  unsigned __int8 *v0;

  PommesInsightRequestSummaryMessageDescription.rawValue.getter(*v0);
  String.hash(into:)();
  return swift_bridgeObjectRelease();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PommesInsightRequestSummaryMessageDescription()
{
  unsigned __int8 *v0;
  unsigned __int8 v1;

  v1 = *v0;
  Hasher.init(_seed:)();
  PommesInsightRequestSummaryMessageDescription.rawValue.getter(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t protocol witness for RawRepresentable.init(rawValue:) in conformance PommesInsightRequestSummaryMessageDescription@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result;

  result = specialized PommesInsightRequestSummaryMessageDescription.init(rawValue:)(*a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for RawRepresentable.rawValue.getter in conformance PommesInsightRequestSummaryMessageDescription@<X0>(uint64_t *a1@<X8>)
{
  unsigned __int8 *v1;
  uint64_t result;
  uint64_t v4;

  result = PommesInsightRequestSummaryMessageDescription.rawValue.getter(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t one-time initialization function for pommesError(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.pommesError);
}

uint64_t PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for pommesError, (uint64_t)static PommesInsightRequestSummaryKey.pommesError);
}

uint64_t static PommesInsightRequestSummaryKey.pommesError.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for pommesError, (uint64_t)static PommesInsightRequestSummaryKey.pommesError, a1);
}

uint64_t one-time initialization function for isFromTimeoutHandler(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
}

uint64_t PommesInsightRequestSummaryKey.isFromTimeoutHandler.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for isFromTimeoutHandler, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler);
}

uint64_t PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  if (*a1 != -1)
    swift_once();
  v3 = type metadata accessor for InsightRequestSummaryKey();
  return __swift_project_value_buffer(v3, a2);
}

uint64_t static PommesInsightRequestSummaryKey.isFromTimeoutHandler.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for isFromTimeoutHandler, (uint64_t)static PommesInsightRequestSummaryKey.isFromTimeoutHandler, a1);
}

uint64_t static PommesInsightRequestSummaryKey.pommesError.getter@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = type metadata accessor for InsightRequestSummaryKey();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t one-time initialization function for isRequestFinished(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isRequestFinished);
}

uint64_t PommesInsightRequestSummaryKey.isRequestFinished.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for isRequestFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRequestFinished);
}

uint64_t static PommesInsightRequestSummaryKey.isRequestFinished.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for isRequestFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRequestFinished, a1);
}

uint64_t one-time initialization function for isRcFinished(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isRcFinished);
}

uint64_t PommesInsightRequestSummaryKey.isRcFinished.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for isRcFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished);
}

uint64_t static PommesInsightRequestSummaryKey.isRcFinished.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for isRcFinished, (uint64_t)static PommesInsightRequestSummaryKey.isRcFinished, a1);
}

uint64_t one-time initialization function for isMessagePosted(uint64_t a1)
{
  return one-time initialization function for pommesError(a1, static PommesInsightRequestSummaryKey.isMessagePosted);
}

uint64_t one-time initialization function for pommesError(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = type metadata accessor for InsightRequestSummaryKey();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return InsightRequestSummaryKey.init(rawValue:)();
}

uint64_t PommesInsightRequestSummaryKey.isMessagePosted.unsafeMutableAddressor()
{
  return PommesInsightRequestSummaryKey.pommesError.unsafeMutableAddressor(&one-time initialization token for isMessagePosted, (uint64_t)static PommesInsightRequestSummaryKey.isMessagePosted);
}

uint64_t static PommesInsightRequestSummaryKey.isMessagePosted.getter@<X0>(uint64_t a1@<X8>)
{
  return static PommesInsightRequestSummaryKey.pommesError.getter(&one-time initialization token for isMessagePosted, (uint64_t)static PommesInsightRequestSummaryKey.isMessagePosted, a1);
}

unint64_t specialized PommesInsightRequestSummaryMessageDescription.init(rawValue:)(Swift::String string)
{
  void *object;
  Swift::String v2;
  unint64_t v3;

  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&outlined read-only object #0 of PommesInsightRequestSummaryMessageDescription.init(rawValue:), v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9)
    return 9;
  else
    return v3;
}

unint64_t lazy protocol witness table accessor for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription()
{
  unint64_t result;

  result = lazy protocol witness table cache variable for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription;
  if (!lazy protocol witness table cache variable for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription)
  {
    result = MEMORY[0x1C3BBFE74](&protocol conformance descriptor for PommesInsightRequestSummaryMessageDescription, &type metadata for PommesInsightRequestSummaryMessageDescription);
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PommesInsightRequestSummaryMessageDescription and conformance PommesInsightRequestSummaryMessageDescription);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PommesInsightRequestSummaryMessageDescription(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF8)
    goto LABEL_17;
  if (a2 + 8 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 8) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 8;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 8;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 8;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 9;
  v8 = v6 - 9;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PommesInsightRequestSummaryMessageDescription(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 8 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 8) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF8)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF7)
    return ((uint64_t (*)(void))((char *)&loc_1C23EA4C8 + 4 * byte_1C24FC27E[v4]))();
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1C23EA4FC + 4 * byte_1C24FC279[v4]))();
}

uint64_t sub_1C23EA4FC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23EA504(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23EA50CLL);
  return result;
}

uint64_t sub_1C23EA518(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23EA520);
  *(_BYTE *)result = a2 + 8;
  return result;
}

uint64_t sub_1C23EA524(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23EA52C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PommesInsightRequestSummaryMessageDescription()
{
  return &type metadata for PommesInsightRequestSummaryMessageDescription;
}

ValueMetadata *type metadata accessor for PommesInsightRequestSummaryKey()
{
  return &type metadata for PommesInsightRequestSummaryKey;
}

unint64_t static PlayRestOfThisAlbumPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD000000000000022;
}

uint64_t PlayRestOfThisAlbumPreflightClient.isPlayRestOfThisAlbumTask(task:)()
{
  _QWORD v1[4];

  static UsoTask_CodegenConverter.convert(task:)();
  if (v1[3])
  {
    type metadata accessor for UsoTask_resume_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      UsoTask.arguments.getter();
      JUMPOUT(0x1C23EA650);
    }
  }
  else
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v1, (uint64_t *)&demangling cache variable for type metadata for Any?);
  }
  return 0;
}

uint64_t closure #1 in PlayRestOfThisAlbumPreflightClient.isPlayRestOfThisAlbumTask(task:)(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int (*v29)(uint64_t, uint64_t, uint64_t);
  char v30;
  char *v31;
  char v32;
  void (*v33)(char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int (*v41)(uint64_t, uint64_t, uint64_t);
  uint64_t v42;
  char *v43;
  void (*v44)(char *, uint64_t);
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;

  v2 = type metadata accessor for UsoEntity_common_ReferenceType.DefinedValues();
  v51 = *(_QWORD *)(v2 - 8);
  MEMORY[0x1E0C80A78](v2);
  v46 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v49 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
  MEMORY[0x1E0C80A78](v49);
  v52 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
  v6 = MEMORY[0x1E0C80A78](v5);
  v48 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x1E0C80A78](v6);
  v50 = (char *)&v46 - v9;
  MEMORY[0x1E0C80A78](v8);
  v55 = (uint64_t)&v46 - v10;
  v11 = type metadata accessor for UsoEntity_common_MediaItemType.DefinedValues();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x1E0C80A78](v11);
  v47 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
  MEMORY[0x1E0C80A78](v14);
  v16 = (char *)&v46 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v18 = MEMORY[0x1E0C80A78](v17);
  v20 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x1E0C80A78](v18);
  v23 = (char *)&v46 - v22;
  v24 = MEMORY[0x1E0C80A78](v21);
  v26 = (char *)&v46 - v25;
  v54 = *a1;
  v27 = MEMORY[0x1C3BBCF1C](v24);
  v53 = v2;
  if (v27)
  {
    MEMORY[0x1C3BBD09C]();
    swift_release();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v26, 1, 1, v11);
  }
  (*(void (**)(char *, _QWORD, uint64_t))(v12 + 104))(v23, *MEMORY[0x1E0DA1D98], v11);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v23, 0, 1, v11);
  v28 = (uint64_t)&v16[*(int *)(v14 + 48)];
  outlined init with copy of MediaUserStateCenter?((uint64_t)v26, (uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined init with copy of MediaUserStateCenter?((uint64_t)v23, v28, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v29 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (v29((uint64_t)v16, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v23, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    if (v29(v28, 1, v11) == 1)
    {
      outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  outlined init with copy of MediaUserStateCenter?((uint64_t)v16, (uint64_t)v20, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if (v29(v28, 1, v11) == 1)
  {
    outlined destroy of MediaUserStateCenter?((uint64_t)v23, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v20, v11);
LABEL_9:
    outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for (UsoEntity_common_MediaItemType.DefinedValues?, UsoEntity_common_MediaItemType.DefinedValues?));
    goto LABEL_10;
  }
  v31 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v47, v28, v11);
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type UsoEntity_common_MediaItemType.DefinedValues and conformance UsoEntity_common_MediaItemType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E28], MEMORY[0x1E0DA1E40]);
  v32 = dispatch thunk of static Equatable.== infix(_:_:)();
  v33 = *(void (**)(char *, uint64_t))(v12 + 8);
  v33(v31, v11);
  outlined destroy of MediaUserStateCenter?((uint64_t)v23, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  outlined destroy of MediaUserStateCenter?((uint64_t)v26, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  v33(v20, v11);
  outlined destroy of MediaUserStateCenter?((uint64_t)v16, &demangling cache variable for type metadata for UsoEntity_common_MediaItemType.DefinedValues?);
  if ((v32 & 1) != 0)
  {
LABEL_12:
    if (dispatch thunk of CodeGenGlobalArgs.usoReferenceType.getter())
    {
      v34 = v55;
      MEMORY[0x1C3BBD0B4]();
      swift_release();
      v36 = (uint64_t)v52;
      v35 = v53;
      v37 = v51;
    }
    else
    {
      v37 = v51;
      v34 = v55;
      v35 = v53;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v51 + 56))(v55, 1, 1, v53);
      v36 = (uint64_t)v52;
    }
    v38 = v49;
    v39 = (uint64_t)v50;
    (*(void (**)(char *, _QWORD, uint64_t))(v37 + 104))(v50, *MEMORY[0x1E0DA1E60], v35);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v37 + 56))(v39, 0, 1, v35);
    v40 = v36 + *(int *)(v38 + 48);
    outlined init with copy of MediaUserStateCenter?(v34, v36, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    outlined init with copy of MediaUserStateCenter?(v39, v40, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
    v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48);
    if (v41(v36, 1, v35) == 1)
    {
      outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      if (v41(v40, 1, v35) == 1)
      {
        outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        v30 = 1;
        return v30 & 1;
      }
    }
    else
    {
      v42 = (uint64_t)v48;
      outlined init with copy of MediaUserStateCenter?(v36, (uint64_t)v48, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      if (v41(v40, 1, v35) != 1)
      {
        v43 = v46;
        (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v46, v40, v35);
        lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType(&lazy protocol witness table cache variable for type UsoEntity_common_ReferenceType.DefinedValues and conformance UsoEntity_common_ReferenceType.DefinedValues, (uint64_t (*)(uint64_t))MEMORY[0x1E0DA1E68], MEMORY[0x1E0DA1E78]);
        v30 = dispatch thunk of static Equatable.== infix(_:_:)();
        v44 = *(void (**)(char *, uint64_t))(v37 + 8);
        v44(v43, v35);
        outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        outlined destroy of MediaUserStateCenter?(v55, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        v44(v48, v35);
        outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
        return v30 & 1;
      }
      outlined destroy of MediaUserStateCenter?(v39, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      outlined destroy of MediaUserStateCenter?(v34, &demangling cache variable for type metadata for UsoEntity_common_ReferenceType.DefinedValues?);
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v42, v35);
    }
    outlined destroy of MediaUserStateCenter?(v36, &demangling cache variable for type metadata for (UsoEntity_common_ReferenceType.DefinedValues?, UsoEntity_common_ReferenceType.DefinedValues?));
    v30 = 0;
    return v30 & 1;
  }
LABEL_10:
  v30 = 0;
  return v30 & 1;
}

void PlayRestOfThisAlbumPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void (*v36)(char *, unint64_t, uint64_t);
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  id v61;
  id v62;
  NSObject *v63;
  os_log_type_t v64;
  uint8_t *v65;
  uint64_t v66;
  id v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  BOOL v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  char *v87;
  char *v88;
  NSObject *v89;
  os_log_type_t v90;
  uint8_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  NSObject *v101;
  os_log_type_t v102;
  uint8_t *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  char *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  char *v126;
  char *v127;
  void (*v128)(char *, uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135[4];
  unint64_t v136;
  uint64_t v137;

  v5 = *v2;
  v6 = type metadata accessor for PommesSearchReason();
  v119 = *(_QWORD *)(v6 - 8);
  MEMORY[0x1E0C80A78](v6);
  v118 = (uint64_t)&v104 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v8);
  v117 = (uint64_t)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v108 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v107 = *(_QWORD *)(v108 - 8);
  MEMORY[0x1E0C80A78](v108);
  v106 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
  MEMORY[0x1E0C80A78](v11);
  v111 = (char *)&v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v109 = *(_QWORD *)(v110 - 8);
  v13 = MEMORY[0x1E0C80A78](v110);
  v105 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v13);
  v121 = (char *)&v104 - v15;
  v134 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v16 = *(_QWORD *)(v134 - 8);
  MEMORY[0x1E0C80A78](v134);
  v18 = (char *)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = type metadata accessor for Siri_Nlu_External_UserParse();
  v20 = *(_QWORD *)(v19 - 8);
  v21 = MEMORY[0x1E0C80A78](v19);
  v112 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v21);
  v24 = (char *)&v104 - v23;
  v116 = type metadata accessor for PommesSearchRequest(0);
  v25 = *(int *)(v116 + 76);
  v120 = a1;
  v115 = v25;
  v26 = *(_QWORD *)(a1 + v25);
  v27 = MEMORY[0x1E0DEE9D8];
  v137 = MEMORY[0x1E0DEE9D8];
  v28 = *(char **)(v26 + 16);
  v131 = v20;
  v123 = MEMORY[0x1E0DEE9D8];
  v126 = v28;
  if (!v28)
  {
LABEL_23:
    v43 = v122;
    swift_retain();
    v44 = specialized Sequence.first(where:)(v123, v43);
    swift_bridgeObjectRelease();
    swift_release();
    if (v44)
    {
      v113 = v6;
      v45 = one-time initialization token for pommes;
      swift_retain();
      if (v45 != -1)
        swift_once();
      v132 = 0;
      v46 = type metadata accessor for Logger();
      v47 = __swift_project_value_buffer(v46, (uint64_t)static Logger.pommes);
      swift_retain_n();
      v133 = v47;
      v48 = Logger.logObject.getter();
      v49 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v48, v49))
      {
        v50 = swift_slowAlloc();
        v104 = v5;
        v51 = v50;
        v52 = swift_slowAlloc();
        v124 = a2;
        v53 = v52;
        v135[0] = v52;
        *(_DWORD *)v51 = 136315394;
        v54 = UsoTask.verbString.getter();
        v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v54, v55, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v51 + 12) = 2080;
        v56 = UsoTask.baseEntityAsString.getter();
        v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, v57, v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v48, v49, "PlayRestOfThisAlbumPreflightClient matched task: %s::%s", (uint8_t *)v51, 0x16u);
        swift_arrayDestroy();
        v58 = v53;
        a2 = v124;
        MEMORY[0x1C3BBFF64](v58, -1, -1);
        v59 = v51;
        v5 = v104;
        MEMORY[0x1C3BBFF64](v59, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v71 = v121;
      v72 = v120;
      v73 = *(_QWORD *)(v120 + v115);
      if (*(_QWORD *)(v73 + 16))
      {
        v74 = v131;
        v75 = v112;
        (*(void (**)(char *, unint64_t, uint64_t))(v131 + 16))(v112, v73 + ((*(unsigned __int8 *)(v131 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v131 + 80)), v19);
        v76 = Siri_Nlu_External_Span.matcherNames.getter();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v75, v19);
        if (*(_QWORD *)(v76 + 16))
        {
          v77 = (uint64_t)v111;
          v78 = v134;
          (*(void (**)(char *, unint64_t, uint64_t))(v16 + 16))(v111, v76 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)), v134);
          v79 = 0;
        }
        else
        {
          v79 = 1;
          v77 = (uint64_t)v111;
          v78 = v134;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v77, v79, 1, v78);
        swift_bridgeObjectRelease();
        v80 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v77, 1, v78) == 1;
        v81 = v77;
        if (v80)
        {
          outlined destroy of MediaUserStateCenter?(v77, &demangling cache variable for type metadata for Siri_Nlu_External_UserDialogAct?);
        }
        else
        {
          v82 = v106;
          v83 = v81;
          Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
          (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v83, v78);
          v84 = v105;
          Siri_Nlu_External_UserStatedTask.task.getter();
          (*(void (**)(char *, uint64_t))(v107 + 8))(v82, v108);
          v85 = v109;
          v86 = v110;
          (*(void (**)(char *, char *, uint64_t))(v109 + 32))(v71, v84, v110);
          v87 = v71;
          v88 = v132;
          static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
          if (v88)
          {

            (*(void (**)(char *, uint64_t))(v85 + 8))(v87, v86);
          }
          else
          {
            v104 = v5;
            swift_retain_n();
            v89 = Logger.logObject.getter();
            v90 = static os_log_type_t.info.getter();
            if (os_log_type_enabled(v89, v90))
            {
              v91 = (uint8_t *)swift_slowAlloc();
              v92 = swift_slowAlloc();
              v135[0] = v92;
              *(_DWORD *)v91 = 136315138;
              v93 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
              v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v93, v94, v135);
              v72 = v120;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              swift_release_n();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_1C2356000, v89, v90, "Likely matched graph: %s", v91, 0xCu);
              swift_arrayDestroy();
              MEMORY[0x1C3BBFF64](v92, -1, -1);
              MEMORY[0x1C3BBFF64](v91, -1, -1);
              swift_release();

              (*(void (**)(char *, uint64_t))(v109 + 8))(v121, v110);
            }
            else
            {
              swift_release_n();

              (*(void (**)(char *, uint64_t))(v85 + 8))(v121, v110);
            }
          }
        }
      }
      v95 = (uint64_t *)(v72 + *(int *)(v116 + 32));
      v96 = *v95;
      v97 = v95[1];
      v98 = v117;
      PommesSearchRequest.pommesCandidateId.getter(v117);
      v99 = type metadata accessor for PommesCandidateId();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v99 - 8) + 56))(v98, 0, 1, v99);
      v100 = v118;
      default argument 5 of static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v118);
      v70 = static PommesSearchPreflightHandling.preflightResponse(pommesSearchRequest:experiences:clientResults:requestId:pommesCandidateId:searchReason:domainName:preflightClientHandlerIdentifier:)(v72, MEMORY[0x1E0DEE9D8], MEMORY[0x1E0DEE9D8], v96, v97, v98, v100, 0x6867696C66657270, 0xE900000000000074, (void (*)(char *, uint64_t))0xD000000000000022, 0x80000001C24FC380);
      (*(void (**)(uint64_t, uint64_t))(v119 + 8))(v100, v113);
      outlined destroy of MediaUserStateCenter?(v98, &demangling cache variable for type metadata for PommesCandidateId?);
      if (v70)
      {
        swift_release_n();
        goto LABEL_51;
      }
      v101 = Logger.logObject.getter();
      v102 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v101, v102))
      {
        v103 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v103 = 0;
        _os_log_impl(&dword_1C2356000, v101, v102, "PlayRestOfThisAlbumPreflightClient#ignore could not build PommesResponse with given parameters", v103, 2u);
        MEMORY[0x1C3BBFF64](v103, -1, -1);
        swift_release_n();

      }
      else
      {

        swift_release_n();
      }
    }
    v70 = 0;
    goto LABEL_51;
  }
  v113 = v6;
  v104 = v5;
  v124 = a2;
  v130 = v26 + ((*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
  v29 = *(_QWORD *)(v20 + 72);
  v128 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v129 = v29;
  v114 = v26;
  swift_bridgeObjectRetain_n();
  v30 = 0;
  v133 = MEMORY[0x1E0DEE9B8] + 8;
  v125 = v19;
  v127 = v24;
  while (1)
  {
    v132 = v30;
    v128(v24, v130 + v129 * (_QWORD)v30, v19);
    v31 = Siri_Nlu_External_Span.matcherNames.getter();
    v135[0] = v27;
    v32 = *(_QWORD *)(v31 + 16);
    if (v32)
    {
      v33 = v31 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
      swift_bridgeObjectRetain();
      v34 = *(_QWORD *)(v16 + 72);
      v35 = v16;
      v36 = *(void (**)(char *, unint64_t, uint64_t))(v16 + 16);
      v37 = v134;
      do
      {
        v36(v18, v33, v37);
        v38 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
        (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v37);
        specialized Array.append<A>(contentsOf:)(v38);
        v37 = v134;
        v33 += v34;
        --v32;
      }
      while (v32);
      swift_bridgeObjectRelease_n();
      v39 = v135[0];
      v16 = v35;
      v19 = v125;
      v27 = MEMORY[0x1E0DEE9D8];
    }
    else
    {
      swift_bridgeObjectRelease();
      v39 = v27;
    }
    v136 = v27;
    if (!(v39 >> 62))
    {
      v40 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v40)
        break;
      goto LABEL_20;
    }
    swift_bridgeObjectRetain();
    v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v40)
      break;
LABEL_20:
    swift_bridgeObjectRelease();
    v42 = v27;
LABEL_21:
    v30 = v132 + 1;
    v24 = v127;
    (*(void (**)(char *, uint64_t))(v131 + 8))(v127, v19);
    specialized Array.append<A>(contentsOf:)(v42);
    if (v30 == v126)
    {
      swift_bridgeObjectRelease_n();
      v123 = v137;
      a2 = v124;
      v5 = v104;
      v6 = v113;
      goto LABEL_23;
    }
  }
  if (v40 >= 1)
  {
    v41 = 0;
    while (1)
    {
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      if (v135[3])
      {
        type metadata accessor for UsoTask_resume_common_MediaItem();
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_release();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          goto LABEL_14;
        }
      }
      else
      {
        outlined destroy of MediaUserStateCenter?((uint64_t)v135, (uint64_t *)&demangling cache variable for type metadata for Any?);
      }
      swift_release();
LABEL_14:
      if (v40 == ++v41)
      {
        swift_bridgeObjectRelease();
        v42 = v136;
        v27 = MEMORY[0x1E0DEE9D8];
        goto LABEL_21;
      }
    }
  }
  __break(1u);
  swift_once();
  v60 = type metadata accessor for Logger();
  __swift_project_value_buffer(v60, (uint64_t)static Logger.pommes);
  v61 = 0;
  v62 = 0;
  v63 = Logger.logObject.getter();
  v64 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v63, v64))
  {
    v65 = (uint8_t *)swift_slowAlloc();
    v66 = swift_slowAlloc();
    v135[0] = v66;
    *(_DWORD *)v65 = 136315138;
    v137 = 0;
    v67 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
    v68 = String.init<A>(describing:)();
    v137 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v68, v69, v135);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl(&dword_1C2356000, v63, v64, "ConversionUtils.convertUserDialogActToTasks error: %s", v65, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v66, -1, -1);
    MEMORY[0x1C3BBFF64](v65, -1, -1);

  }
  else
  {

  }
  v70 = 0;
  a2 = v124;
LABEL_51:
  *a2 = v70;
}

uint64_t Siri_Nlu_External_UserParse.resumeMediaItemRelevantTasks()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void (*v11)(char *, unint64_t, uint64_t);
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[2];
  uint64_t v19;
  _QWORD v20[4];
  uint64_t v21;

  v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v6 = MEMORY[0x1E0DEE9D8];
  v20[0] = MEMORY[0x1E0DEE9D8];
  v7 = *(_QWORD *)(v5 + 16);
  if (!v7)
  {
    result = swift_bridgeObjectRelease();
    v15 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    v21 = v6;
    if (v15 >> 62)
    {
      swift_bridgeObjectRetain();
      v16 = _CocoaArrayWrapper.endIndex.getter();
      result = swift_bridgeObjectRelease();
      if (v16)
        goto LABEL_9;
    }
    else
    {
      v16 = *(_QWORD *)((v15 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (v16)
      {
LABEL_9:
        if (v16 < 1)
        {
          __break(1u);
          return result;
        }
        v17 = 0;
        while (1)
        {
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          if (!v20[3])
            break;
          type metadata accessor for UsoTask_resume_common_MediaItem();
          if ((swift_dynamicCast() & 1) == 0)
            goto LABEL_17;
          swift_release();
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
LABEL_12:
          if (v16 == ++v17)
          {
            swift_bridgeObjectRelease();
            return v21;
          }
        }
        outlined destroy of MediaUserStateCenter?((uint64_t)v20, (uint64_t *)&demangling cache variable for type metadata for Any?);
LABEL_17:
        swift_release();
        goto LABEL_12;
      }
    }
    swift_bridgeObjectRelease();
    return MEMORY[0x1E0DEE9D8];
  }
  v8 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v9 = *(_QWORD *)(v2 + 72);
  v18[1] = v5;
  v19 = v9;
  v10 = v2;
  v11 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  while (1)
  {
    v11(v4, v8, v1);
    v12 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v0)
      break;
    v13 = v12;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v1);
    specialized Array.append<A>(contentsOf:)(v13);
    v8 += v19;
    if (!--v7)
    {
      result = swift_bridgeObjectRelease();
      v15 = v20[0];
      v6 = MEMORY[0x1E0DEE9D8];
      goto LABEL_7;
    }
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t PlayRestOfThisAlbumPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t PlayRestOfThisAlbumPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t PlayRestOfThisAlbumPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

uint64_t PlayRestOfThisAlbumPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance PlayRestOfThisAlbumPreflightClient()
{
  return 0xD000000000000022;
}

uint64_t type metadata accessor for PlayRestOfThisAlbumPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for PlayRestOfThisAlbumPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of PlayRestOfThisAlbumPreflightClient.isPlayRestOfThisAlbumTask(task:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of PlayRestOfThisAlbumPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 88))();
}

uint64_t dispatch thunk of PlayRestOfThisAlbumPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 96))();
}

uint64_t OpenAppOnTVPreflightClient.__allocating_init()()
{
  return swift_allocObject();
}

unint64_t static OpenAppOnTVPreflightClient.preflightClientHandlerIdentifier.getter()
{
  return 0xD00000000000001ALL;
}

void OpenAppOnTVPreflightClient.handle(pommesSearchRequest:)(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  int64_t v40;
  int64_t v41;
  uint64_t v42;
  _QWORD *v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  int64_t v53;
  int64_t v54;
  uint64_t isUniquelyReferenced_nonNull_native;
  _QWORD *v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  id v69;
  id v70;
  NSObject *v71;
  os_log_type_t v72;
  uint8_t *v73;
  _QWORD *v74;
  id v75;
  uint64_t v76;
  uint64_t v77;
  NSObject *v78;
  os_log_type_t v79;
  uint8_t *v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  _QWORD *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void (*v100)(char *, unint64_t, uint64_t);
  uint64_t v101;
  unint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  _QWORD v114[4];
  _QWORD *v115;

  v93 = a2;
  v88 = *v2;
  v87 = type metadata accessor for PommesSearchReason();
  v86 = *(_QWORD *)(v87 - 8);
  MEMORY[0x1E0C80A78](v87);
  v84 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for PommesCandidateId?);
  MEMORY[0x1E0C80A78](v5);
  v83 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for Siri_Nlu_External_UsoGraph();
  v106 = *(_QWORD *)(v7 - 8);
  v107 = v7;
  MEMORY[0x1E0C80A78](v7);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for Siri_Nlu_External_UserStatedTask();
  v104 = *(_QWORD *)(v10 - 8);
  v105 = v10;
  MEMORY[0x1E0C80A78](v10);
  v103 = (char *)&v81 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v109 = *(_QWORD *)(v12 - 8);
  MEMORY[0x1E0C80A78](v12);
  v14 = (char *)&v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for PommesSearchRequest(0);
  v16 = *(int *)(v15 + 76);
  v85 = a1;
  v17 = *(_QWORD *)(a1 + v16);
  v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
  v92 = *(_QWORD *)(v17 + 16);
  if (!v92)
  {
    v64 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_57;
  }
  v82 = v15;
  v19 = *(_QWORD *)(type metadata accessor for Siri_Nlu_External_UserParse() - 8);
  v20 = v17 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
  v21 = *(_QWORD *)(v19 + 72);
  v89 = v17;
  swift_bridgeObjectRetain_n();
  v22 = 0;
  v95 = v18;
  v110 = v14;
  v96 = v9;
  v98 = v12;
  v90 = v20;
  v97 = v21;
  while (1)
  {
    v94 = v22;
    v23 = Siri_Nlu_External_Span.matcherNames.getter();
    v99 = *(_QWORD *)(v23 + 16);
    if (v99)
      break;
    swift_bridgeObjectRelease();
    v51 = v18;
LABEL_36:
    v52 = v51[2];
    v53 = v95[2];
    v54 = v53 + v52;
    if (__OFADD__(v53, v52))
    {
      __break(1u);
LABEL_80:
      __break(1u);
      swift_once();
      v68 = type metadata accessor for Logger();
      __swift_project_value_buffer(v68, (uint64_t)static Logger.pommes);
      v69 = 0;
      v70 = 0;
      v71 = Logger.logObject.getter();
      v72 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v71, v72))
      {
        v73 = (uint8_t *)swift_slowAlloc();
        v74 = (_QWORD *)swift_slowAlloc();
        *(_DWORD *)v73 = 138412290;
        v75 = 0;
        v76 = _swift_stdlib_bridgeErrorToNSError();
        v115 = (_QWORD *)v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *v74 = v76;

        _os_log_impl(&dword_1C2356000, v71, v72, "#OpenAppOnTV: Error scanning for matching USO tasks. %@", v73, 0xCu);
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for NSObject?);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v74, -1, -1);
        MEMORY[0x1C3BBFF64](v73, -1, -1);

      }
      else
      {

      }
      goto LABEL_69;
    }
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v56 = v95;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0 || v54 > v95[3] >> 1)
    {
      if (v53 <= v54)
        v57 = v53 + v52;
      else
        v57 = v53;
      v56 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)isUniquelyReferenced_nonNull_native, v57, 1, v95);
    }
    v14 = v110;
    v58 = v51[2];
    v95 = v56;
    if (v58)
    {
      v59 = v56[2];
      if ((v56[3] >> 1) - v59 < v52)
      {
        __break(1u);
        JUMPOUT(0x1C23ED558);
      }
      v60 = (unint64_t)&v56[3 * v59 + 4];
      if ((unint64_t)(v51 + 4) < v60 + 24 * v52 && v60 < (unint64_t)&v51[3 * v52 + 4])
      {
LABEL_83:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x1C23ED5CCLL);
      }
      swift_arrayInitWithCopy();
      if (v52)
      {
        v62 = v95[2];
        v49 = __OFADD__(v62, v52);
        v63 = v62 + v52;
        if (v49)
        {
          __break(1u);
          JUMPOUT(0x1C23ED560);
        }
        v95[2] = v63;
      }
    }
    else if (v52)
    {
      goto LABEL_80;
    }
    v22 = v94 + 1;
    swift_bridgeObjectRelease();
    if (v22 == v92)
    {
      swift_bridgeObjectRelease_n();
      v15 = v82;
      v64 = v95;
LABEL_57:
      v65 = v64[2];
      if (v65)
      {
        v82 = v15;
        v113 = (uint64_t)(v64 + 4);
        v95 = v64;
        swift_bridgeObjectRetain();
        v66 = 0;
        v111 = v65;
        v112 = (_QWORD *)(MEMORY[0x1E0DEE9B8] + 8);
        do
        {
          v67 = *(_QWORD *)(v113 + 24 * v66 + 8);
          swift_retain();
          swift_bridgeObjectRetain();
          static UsoTask_CodegenConverter.convert(task:)();
          outlined init with copy of Any?((uint64_t)&v115, (uint64_t)v114);
          if (v114[3])
          {
            type metadata accessor for UsoTask_open_common_App();
            if ((swift_dynamicCast() & 1) != 0)
            {
              v109 = v67;
              swift_release();
              UsoTask.arguments.getter();
              JUMPOUT(0x1C23EC99CLL);
            }
          }
          else
          {
            outlined destroy of MediaUserStateCenter?((uint64_t)v114, (uint64_t *)&demangling cache variable for type metadata for Any?);
          }
          ++v66;
          outlined destroy of MediaUserStateCenter?((uint64_t)&v115, (uint64_t *)&demangling cache variable for type metadata for Any?);
          swift_bridgeObjectRelease();
          swift_release();
        }
        while (v66 != v65);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
LABEL_69:
      if (one-time initialization token for pommes != -1)
        goto LABEL_78;
      goto LABEL_70;
    }
  }
  v24 = v109;
  v102 = v23 + ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80));
  v91 = v23;
  swift_bridgeObjectRetain();
  v101 = *(_QWORD *)(v24 + 72);
  v100 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
  v25 = 0;
  v112 = v18;
  while (1)
  {
    v111 = v25;
    v100(v14, v102 + v101 * v25, v12);
    v26 = v103;
    Siri_Nlu_External_UserDialogAct.userStatedTask.getter();
    Siri_Nlu_External_UserStatedTask.task.getter();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v26, v105);
    v27 = static UsoGraphProtoReader.fromSwiftProtobuf(protobufGraph:vocabManager:)();
    (*(void (**)(char *, uint64_t))(v106 + 8))(v9, v107);
    v113 = static UsoPrintUtils.flattenUsoGraph(graph:printIdentifiers:)();
    v29 = v28;
    v30 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v30 >> 62)
    {
      swift_bridgeObjectRetain();
      v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v31)
      {
LABEL_19:
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        v33 = v18;
        goto LABEL_20;
      }
    }
    else
    {
      v31 = *(_QWORD *)((v30 & 0xFFFFFFFFFFFFF8) + 0x10);
      if (!v31)
        goto LABEL_19;
    }
    v108 = v27;
    v115 = v18;
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v31 & ~(v31 >> 63), 0);
    if (v31 < 0)
      goto LABEL_75;
    v32 = 0;
    v33 = v115;
    do
    {
      if ((v30 & 0xC000000000000001) != 0)
      {
        v34 = MEMORY[0x1C3BBF3F4](v32, v30);
      }
      else
      {
        v34 = *(_QWORD *)(v30 + 8 * v32 + 32);
        swift_retain();
      }
      swift_bridgeObjectRetain();
      v115 = v33;
      v36 = v33[2];
      v35 = v33[3];
      if (v36 >= v35 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v35 > 1, v36 + 1, 1);
        v33 = v115;
      }
      ++v32;
      v33[2] = v36 + 1;
      v37 = &v33[3 * v36];
      v38 = v113;
      v37[4] = v34;
      v37[5] = v38;
      v37[6] = v29;
    }
    while (v31 != v32);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    v18 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    v9 = v96;
    v14 = v110;
LABEL_20:
    v12 = v98;
    (*(void (**)(char *, uint64_t))(v109 + 8))(v14, v98);
    v39 = v33[2];
    v40 = v112[2];
    v41 = v40 + v39;
    if (__OFADD__(v40, v39))
      break;
    v42 = swift_isUniquelyReferenced_nonNull_native();
    v43 = v112;
    if ((v42 & 1) == 0 || v41 > v112[3] >> 1)
    {
      if (v40 <= v41)
        v44 = v40 + v39;
      else
        v44 = v40;
      v43 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((_QWORD *)v42, v44, 1, v112);
    }
    v14 = v110;
    v45 = v33[2];
    v112 = v43;
    if (v45)
    {
      v46 = v43[2];
      if ((v43[3] >> 1) - v46 < v39)
        goto LABEL_76;
      v47 = (unint64_t)&v43[3 * v46 + 4];
      if ((unint64_t)(v33 + 4) < v47 + 24 * v39 && v47 < (unint64_t)&v33[3 * v39 + 4])
        goto LABEL_83;
      swift_arrayInitWithCopy();
      if (v39)
      {
        v48 = v112[2];
        v49 = __OFADD__(v48, v39);
        v50 = v48 + v39;
        if (v49)
          goto LABEL_77;
        v112[2] = v50;
      }
    }
    else if (v39)
    {
      goto LABEL_74;
    }
    v25 = v111 + 1;
    swift_bridgeObjectRelease();
    if (v25 == v99)
    {
      swift_bridgeObjectRelease_n();
      v51 = v112;
      goto LABEL_36;
    }
  }
  __break(1u);
LABEL_74:
  __break(1u);
LABEL_75:
  __break(1u);
LABEL_76:
  __break(1u);
LABEL_77:
  __break(1u);
LABEL_78:
  swift_once();
LABEL_70:
  v77 = type metadata accessor for Logger();
  __swift_project_value_buffer(v77, (uint64_t)static Logger.pommes);
  v78 = Logger.logObject.getter();
  v79 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v78, v79))
  {
    v80 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v80 = 0;
    _os_log_impl(&dword_1C2356000, v78, v79, "#OpenAppOnTV: No matching task.", v80, 2u);
    MEMORY[0x1C3BBFF64](v80, -1, -1);
  }

  *v93 = 0;
}

uint64_t OpenAppOnTVPreflightClient.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t OpenAppOnTVPreflightClient.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t OpenAppOnTVPreflightClient.init()()
{
  uint64_t v0;

  return v0;
}

unint64_t protocol witness for static PommesSearchPreflightHandling.preflightClientHandlerIdentifier.getter in conformance OpenAppOnTVPreflightClient()
{
  return 0xD00000000000001ALL;
}

uint64_t implicit closure #1 in OSLogInterpolation.appendInterpolation(_:privacy:attributes:)(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

uint64_t specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x1E0DEE9D8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    specialized _ArrayBuffer._copyContents(subRange:initializing:)(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

void closure #1 in OSLogArguments.append(_:)(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t outlined init with copy of Any?(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for Any?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for OpenAppOnTVPreflightClient()
{
  return objc_opt_self();
}

uint64_t method lookup function for OpenAppOnTVPreflightClient()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of OpenAppOnTVPreflightClient.handle(pommesSearchRequest:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 80))();
}

uint64_t dispatch thunk of OpenAppOnTVPreflightClient.__allocating_init()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 88))();
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (beginIndex: Int, parenOpen: Character));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 8 * a1 + 32;
    v6 = a3 + 8 * v4;
    if (v5 >= v6 || v5 + 8 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for [UsoIdentifier]);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 32 * a1 + 32;
    v6 = a3 + 32 * v4;
    if (v5 >= v6 || v5 + 32 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (name: String, identifier: String));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 56 * a1 + 32;
    v6 = a3 + 56 * v4;
    if (v5 >= v6 || v5 + 56 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for (String, AppData));
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

char *specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, char *__dst, uint64_t a4)
{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 16 * a1 + 32);
    v6 = 16 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  size_t v4;
  char *v5;
  char *v6;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + a1 + 32);
    v6 = &__dst[v4];
    if (v5 >= &__dst[v4] || &v5[v4] <= __dst)
    {
      memcpy(__dst, v5, v4);
      return v6;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 8 * a1 + 32);
    v6 = 8 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v4;
  char *v5;
  size_t v6;
  char *v7;
  char *result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = (char *)(a4 + 4 * a1 + 32);
    v6 = 4 * v4;
    v7 = &__dst[v6];
    if (v5 >= &__dst[v6] || &v5[v6] <= __dst)
    {
      memcpy(__dst, v5, v6);
      return v7;
    }
  }
  result = (char *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized _ArrayBuffer._copyContents(subRange:initializing:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t AnyDataProvider.__allocating_init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnyDataProvider.__allocating_init<A>(provider:)(a1, a2, a3, (uint64_t (*)(void))specialized AnyDataProvider.__allocating_init<A>(provider:));
}

BOOL static DataProviderError.== infix(_:_:)(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

void DataProviderError.hash(into:)(uint64_t a1, char a2)
{
  Hasher._combine(_:)(a2 & 1);
}

Swift::Int DataProviderError.hashValue.getter(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 & 1);
  return Hasher._finalize()();
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance DataProviderError(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t AnyDataProvider.oneTimeInit.getter()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned __int8 *)(v0 + 88);
}

uint64_t AnyDataProvider.oneTimeInit.setter(char a1)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *(_BYTE *)(v1 + 88) = a1;
  return result;
}

uint64_t (*AnyDataProvider.oneTimeInit.modify())()
{
  swift_beginAccess();
  return PommesSearch.serverFallbackPreferences.modify;
}

uint64_t AnyDataProvider.name.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 96);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return AnyDataProvider.__allocating_init<A>(provider:)(a1, a2, a3, (uint64_t (*)(void))specialized AnyDataProvider.init<A>(provider:));
}

uint64_t AnyDataProvider.__allocating_init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6;

  v6 = a4();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a2 - 8) + 8))(a1, a2);
  return v6;
}

uint64_t (*implicit closure #1 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = a2;
  *((_QWORD *)v11 + 3) = a3;
  *((_QWORD *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:);
}

uint64_t (*implicit closure #3 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = a2;
  *((_QWORD *)v11 + 3) = a3;
  *((_QWORD *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:);
}

uint64_t (*implicit closure #5 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = a2;
  *((_QWORD *)v11 + 3) = a3;
  *((_QWORD *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:);
}

uint64_t (*implicit closure #7 in AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4))()
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v13;

  v7 = *(_QWORD *)(a3 - 8);
  v8 = *(_QWORD *)(v7 + 64);
  MEMORY[0x1E0C80A78](a1);
  v9 = (char *)&v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v7 + 16))(v9);
  v10 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v11 = (char *)swift_allocObject();
  *((_QWORD *)v11 + 2) = a2;
  *((_QWORD *)v11 + 3) = a3;
  *((_QWORD *)v11 + 4) = a4;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v11[v10], v9, a3);
  return partial apply for implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> AnyDataProvider.prepare()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  Swift::String v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  NSObject *v28;
  uint64_t v29;
  uint8_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint8_t *v36;
  char *v37;
  uint64_t v38[2];
  uint64_t v39;

  v2 = v1;
  v3 = v0;
  v4 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v4);
  v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v7 = type metadata accessor for Logger();
  v8 = __swift_project_value_buffer(v7, (uint64_t)static Logger.pommes);
  swift_retain();
  v36 = (uint8_t *)v8;
  v9 = Logger.logObject.getter();
  v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v9, v10))
  {
    v11 = (uint8_t *)swift_slowAlloc();
    v12 = swift_slowAlloc();
    v37 = v6;
    v38[0] = v12;
    v13 = v12;
    *(_DWORD *)v11 = 136315138;
    v35 = v1;
    v15 = *(_QWORD *)(v3 + 96);
    v14 = *(_QWORD *)(v3 + 104);
    swift_bridgeObjectRetain();
    v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v14, v38);
    v2 = v35;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v9, v10, "%s preparing ...", v11, 0xCu);
    swift_arrayDestroy();
    v16 = v13;
    v6 = v37;
    MEMORY[0x1C3BBFF64](v16, -1, -1);
    MEMORY[0x1C3BBFF64](v11, -1, -1);

  }
  else
  {

    swift_release();
  }
  v18 = *(_QWORD *)(v3 + 96);
  v17 = *(_QWORD *)(v3 + 104);
  v38[0] = v18;
  v38[1] = v17;
  swift_bridgeObjectRetain();
  v19._countAndFlagsBits = 0x7261706572705F20;
  v19._object = (void *)0xEB00000000292865;
  String.append(_:)(v19);
  v20 = v38[0];
  Date.init()();
  v21 = &v6[v4[5]];
  *(_QWORD *)v21 = "SiriInformationSearch/DataProvider.swift";
  *((_QWORD *)v21 + 1) = 40;
  v21[16] = 2;
  *(_QWORD *)&v6[v4[6]] = 53;
  v22 = &v6[v4[7]];
  *(_QWORD *)v22 = "prepare()";
  *((_QWORD *)v22 + 1) = 9;
  v22[16] = 2;
  v23 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v20);
  v25 = v24;
  v26 = swift_bridgeObjectRelease();
  v27 = (uint64_t *)&v6[v4[8]];
  *v27 = v23;
  v27[1] = v25;
  (*(void (**)(uint64_t))(v3 + 16))(v26);
  if (!v2)
  {
    swift_retain();
    v28 = Logger.logObject.getter();
    v29 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v28, (os_log_type_t)v29))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      v31 = swift_slowAlloc();
      v37 = v6;
      v38[0] = v31;
      v32 = v31;
      *(_DWORD *)v30 = 136315138;
      v36 = v30 + 4;
      swift_bridgeObjectRetain();
      v39 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v17, v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v28, (os_log_type_t)v29, "%s prepare complete", v30, 0xCu);
      swift_arrayDestroy();
      v33 = v32;
      v6 = v37;
      MEMORY[0x1C3BBFF64](v33, -1, -1);
      MEMORY[0x1C3BBFF64](v30, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  if (one-time initialization token for shared != -1)
    swift_once();
  (*(void (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v6, 0);
  outlined destroy of PerformanceUtil.Ticket((uint64_t)v6);
}

void AnyDataProvider.prepare(dispatchQueue:)(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  NSObject *v14;
  os_log_type_t v15;
  uint8_t *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD v24[2];
  dispatch_group_t v25;
  uint64_t v26;
  uint64_t aBlock[6];

  v2 = v1;
  v4 = *v1;
  v5 = type metadata accessor for DispatchWorkItemFlags();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x1E0C80A78](v5);
  v8 = (char *)v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = type metadata accessor for DispatchQoS();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x1E0C80A78](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*((_BYTE *)v2 + 89) & 1) != 0)
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v13 = type metadata accessor for Logger();
    __swift_project_value_buffer(v13, (uint64_t)static Logger.pommes);
    swift_retain();
    v14 = Logger.logObject.getter();
    v15 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      v17 = swift_slowAlloc();
      aBlock[0] = v17;
      *(_DWORD *)v16 = 136315138;
      v18 = v2[12];
      v19 = v2[13];
      swift_bridgeObjectRetain();
      v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v18, v19, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v14, v15, "%s skipping prepared", v16, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v17, -1, -1);
      MEMORY[0x1C3BBFF64](v16, -1, -1);

    }
    else
    {

      swift_release();
    }
  }
  else
  {
    v25 = (dispatch_group_t)v2[10];
    dispatch_group_enter(v25);
    v20 = swift_allocObject();
    v24[1] = a1;
    v21 = v20;
    swift_weakInit();
    v22 = swift_allocObject();
    *(_QWORD *)(v22 + 16) = *(_QWORD *)(v4 + 80);
    *(_QWORD *)(v22 + 24) = v21;
    aBlock[4] = (uint64_t)partial apply for closure #1 in AnyDataProvider.prepare(dispatchQueue:);
    aBlock[5] = v22;
    aBlock[0] = MEMORY[0x1E0C809B0];
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)thunk for @escaping @callee_guaranteed @Sendable () -> ();
    aBlock[3] = (uint64_t)&block_descriptor_5;
    v23 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v26 = MEMORY[0x1E0DEE9D8];
    lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, (uint64_t (*)(uint64_t))MEMORY[0x1E0DEF4F8], MEMORY[0x1E0DEF510]);
    __swift_instantiateConcreteTypeFromMangledName((uint64_t *)&demangling cache variable for type metadata for [DispatchWorkItemFlags]);
    lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
    dispatch thunk of SetAlgebra.init<A>(_:)();
    MEMORY[0x1C3BBF154](v25, v12, v8, v23);
    _Block_release(v23);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    swift_release();
    swift_release();
  }
}

uint64_t closure #1 in AnyDataProvider.prepare(dispatchQueue:)()
{
  uint64_t result;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint8_t *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;

  swift_beginAccess();
  result = swift_weakLoadStrong();
  if (result)
  {
    v1 = result;
    v2 = (*(uint64_t (**)(void))(*(_QWORD *)result + 208))();
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v2) & 1) != 0)
    {
      if (one-time initialization token for pommes != -1)
        swift_once();
      v3 = type metadata accessor for Logger();
      __swift_project_value_buffer(v3, (uint64_t)static Logger.pommes);
      swift_retain();
      v4 = Logger.logObject.getter();
      v5 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v4, v5))
      {
        v6 = (uint8_t *)swift_slowAlloc();
        v7 = swift_slowAlloc();
        v10 = v7;
        *(_DWORD *)v6 = 136315138;
        v8 = *(_QWORD *)(v1 + 96);
        v9 = *(_QWORD *)(v1 + 104);
        swift_bridgeObjectRetain();
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_1C2356000, v4, v5, "%s set isPrepared", v6, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v7, -1, -1);
        MEMORY[0x1C3BBFF64](v6, -1, -1);

      }
      else
      {

        swift_release();
      }
      *(_BYTE *)(v1 + 89) = 1;
    }
    dispatch_group_leave(*(dispatch_group_t *)(v1 + 80));
    return swift_release();
  }
  return result;
}

Swift::Void __swiftcall AnyDataProvider.reset()()
{
  uint64_t v0;
  uint64_t v1;
  int *v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  NSObject *v7;
  os_log_type_t v8;
  _BOOL4 v9;
  uint8_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  Swift::String v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  NSObject *v25;
  os_log_type_t v26;
  uint8_t *v27;
  uint64_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37[2];

  v1 = v0;
  v2 = (int *)type metadata accessor for PerformanceUtil.Ticket(0);
  MEMORY[0x1E0C80A78](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v5 = type metadata accessor for Logger();
  v6 = __swift_project_value_buffer(v5, (uint64_t)static Logger.pommes);
  swift_retain();
  v7 = Logger.logObject.getter();
  v8 = static os_log_type_t.debug.getter();
  v9 = os_log_type_enabled(v7, v8);
  v35 = v6;
  if (v9)
  {
    v10 = (uint8_t *)swift_slowAlloc();
    v11 = swift_slowAlloc();
    v37[0] = v11;
    *(_DWORD *)v10 = 136315138;
    v34 = v4;
    v13 = *(_QWORD *)(v1 + 96);
    v12 = *(_QWORD *)(v1 + 104);
    swift_bridgeObjectRetain();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v13, v12, v37);
    v4 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v7, v8, "%s reseting ...", v10, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v11, -1, -1);
    MEMORY[0x1C3BBFF64](v10, -1, -1);

  }
  else
  {

    swift_release();
  }
  v14 = *(_QWORD *)(v1 + 104);
  v34 = *(char **)(v1 + 96);
  v37[0] = (uint64_t)v34;
  v37[1] = v14;
  swift_bridgeObjectRetain();
  v15._countAndFlagsBits = 0x2874657365725F20;
  v15._object = (void *)0xE900000000000029;
  String.append(_:)(v15);
  v16 = v37[0];
  Date.init()();
  v17 = &v4[v2[5]];
  *(_QWORD *)v17 = "SiriInformationSearch/DataProvider.swift";
  *((_QWORD *)v17 + 1) = 40;
  v17[16] = 2;
  *(_QWORD *)&v4[v2[6]] = 125;
  v18 = &v4[v2[7]];
  *(_QWORD *)v18 = "reset()";
  *((_QWORD *)v18 + 1) = 7;
  v18[16] = 2;
  v19 = specialized static PerformanceUtil.Ticket.trimIfNeeded(_:)(v16);
  v21 = v20;
  v22 = swift_bridgeObjectRelease();
  v23 = (uint64_t *)&v4[v2[8]];
  *v23 = v19;
  v23[1] = v21;
  (*(void (**)(uint64_t))(v1 + 64))(v22);
  if (one-time initialization token for shared != -1)
    swift_once();
  v24 = (*(uint64_t (**)(char *, _QWORD))(*(_QWORD *)static PerformanceUtil.shared + 184))(v4, 0);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 152))(v24) & 1) != 0)
  {
    swift_retain();
    v25 = Logger.logObject.getter();
    v26 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v25, v26))
    {
      v27 = (uint8_t *)swift_slowAlloc();
      v28 = swift_slowAlloc();
      v37[0] = v28;
      *(_DWORD *)v27 = 136315138;
      swift_bridgeObjectRetain();
      v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v34, v14, v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1C2356000, v25, v26, "%s reset isPrepared", v27, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x1C3BBFF64](v28, -1, -1);
      MEMORY[0x1C3BBFF64](v27, -1, -1);

    }
    else
    {

      swift_release();
    }
    *(_BYTE *)(v1 + 89) = 0;
  }
  swift_retain_n();
  v29 = Logger.logObject.getter();
  v30 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v29, v30))
  {
    v31 = (uint8_t *)swift_slowAlloc();
    v32 = swift_slowAlloc();
    v37[0] = v32;
    *(_DWORD *)v31 = 136315138;
    swift_bridgeObjectRetain();
    v36 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)((uint64_t)v34, v14, v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v29, v30, "%s reset complete", v31, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v32, -1, -1);
    MEMORY[0x1C3BBFF64](v31, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  outlined destroy of PerformanceUtil.Ticket((uint64_t)v4);
}

uint64_t AnyDataProvider.deinit()
{
  uint64_t v0;

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  return v0;
}

uint64_t AnyDataProvider.__deallocating_deinit()
{
  AnyDataProvider.deinit();
  return swift_deallocClassInstance();
}

uint64_t protocol witness for DataProvider.prepare() in conformance AnyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 208))();
}

uint64_t protocol witness for DataProvider.wait(timeout:) in conformance AnyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 224))() & 1;
}

uint64_t protocol witness for DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:) in conformance AnyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 232))();
}

uint64_t protocol witness for DataProvider.reset() in conformance AnyDataProvider<A>()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(**(_QWORD **)v0 + 248))();
}

uint64_t AnyDataProvider.waitForPrepare(timeout:)(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t (*v5)(uint64_t);
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  _BYTE v19[16];
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned __int8 v25;

  v2 = v1;
  v4 = type metadata accessor for ContinuousClock();
  v5 = (uint64_t (*)(uint64_t))MEMORY[0x1E0DF0BA0];
  v6 = *(_QWORD *)(v4 - 8);
  MEMORY[0x1E0C80A78](v4);
  v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v25 = 1;
  ContinuousClock.init()();
  v20 = &v25;
  v21 = v2;
  v22 = a1;
  lazy protocol witness table accessor for type ICSubscriptionStatusOfferType and conformance ICSubscriptionStatusOfferType((unint64_t *)&lazy protocol witness table cache variable for type ContinuousClock and conformance ContinuousClock, v5, MEMORY[0x1E0DF0BB0]);
  Clock.measure(_:)();
  (*(void (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v4);
  if (one-time initialization token for pommes != -1)
    swift_once();
  v9 = type metadata accessor for Logger();
  __swift_project_value_buffer(v9, (uint64_t)static Logger.pommes);
  swift_retain_n();
  v10 = Logger.logObject.getter();
  v11 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v10, v11))
  {
    v12 = swift_slowAlloc();
    v13 = swift_slowAlloc();
    v24 = v13;
    *(_DWORD *)v12 = 136315394;
    v14 = Duration.description.getter();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2080;
    v16 = *(_QWORD *)(v2 + 96);
    v17 = *(_QWORD *)(v2 + 104);
    swift_bridgeObjectRetain();
    v23 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_1C2356000, v10, v11, "Waited %s for %s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    MEMORY[0x1C3BBFF64](v13, -1, -1);
    MEMORY[0x1C3BBFF64](v12, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  return v25;
}

uint64_t *specialized AnyDataProvider.init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v7 = *v3;
  v3[10] = (uint64_t)dispatch_group_create();
  *((_WORD *)v3 + 44) = 0;
  v8 = *(_QWORD *)(v7 + 80);
  v3[2] = (uint64_t)implicit closure #1 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[3] = v9;
  v3[4] = (uint64_t)implicit closure #3 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[5] = v10;
  v3[6] = (uint64_t)implicit closure #5 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[7] = v11;
  v3[8] = (uint64_t)implicit closure #7 in AnyDataProvider.init<A>(provider:)(a1, v8, a2, a3);
  v3[9] = v12;
  swift_getMetatypeMetadata();
  v3[12] = String.init<A>(describing:)();
  v3[13] = v13;
  return v3;
}

uint64_t *specialized AnyDataProvider.__allocating_init<A>(provider:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;

  type metadata accessor for AnyDataProvider(0, *(_QWORD *)(v4 + 80), a3, a4);
  swift_allocObject();
  return specialized AnyDataProvider.init<A>(provider:)(a1, a2, a3);
}

uint64_t sub_1C23F0570()
{
  swift_weakDestroy();
  return swift_deallocObject();
}

uint64_t sub_1C23F0594()
{
  swift_release();
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AnyDataProvider.prepare(dispatchQueue:)()
{
  return closure #1 in AnyDataProvider.prepare(dispatchQueue:)();
}

uint64_t partial apply for closure #1 in AnyDataProvider.waitForPrepare(timeout:)()
{
  uint64_t v0;
  _BYTE *v1;
  uint64_t result;

  v1 = *(_BYTE **)(v0 + 16);
  result = MEMORY[0x1C3BBF0F4](*(_QWORD *)(v0 + 32));
  *v1 = result & 1;
  return result;
}

uint64_t sub_1C23F0648@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(void))(**(_QWORD **)a1 + 152))();
  *a2 = result & 1;
  return result;
}

uint64_t sub_1C23F067C(unsigned __int8 *a1, uint64_t a2)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)a2 + 160))(*a1);
}

uint64_t sub_1C23F06A8()
{
  return 8;
}

_QWORD *sub_1C23F06B4(_QWORD *result, _QWORD *a2)
{
  *a2 = *result;
  return result;
}

uint64_t storeEnumTagSinglePayload for DataProviderError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_1C23F070C + 4 * byte_1C24FC475[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1C23F0740 + 4 * byte_1C24FC470[v4]))();
}

uint64_t sub_1C23F0740(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23F0748(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x1C23F0750);
  return result;
}

uint64_t sub_1C23F075C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x1C23F0764);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_1C23F0768(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1C23F0770(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DataProviderError()
{
  return &type metadata for DataProviderError;
}

uint64_t dispatch thunk of DataProvider.prepare()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t dispatch thunk of DataProvider.wait(timeout:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))() & 1;
}

uint64_t dispatch thunk of DataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  __int16 v7;
  uint64_t (*v8)(uint64_t, _OWORD *);
  __int128 v9;
  __int128 v10;
  _OWORD v12[5];
  uint64_t v13;
  __int16 v14;

  v6 = *(_QWORD *)(a2 + 80);
  v7 = *(_WORD *)(a2 + 88);
  v8 = *(uint64_t (**)(uint64_t, _OWORD *))(a6 + 32);
  v9 = *(_OWORD *)(a2 + 16);
  v12[0] = *(_OWORD *)a2;
  v12[1] = v9;
  v10 = *(_OWORD *)(a2 + 48);
  v12[2] = *(_OWORD *)(a2 + 32);
  v12[3] = v10;
  v12[4] = *(_OWORD *)(a2 + 64);
  v13 = v6;
  v14 = v7;
  return v8(a1, v12);
}

uint64_t dispatch thunk of DataProvider.reset()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t type metadata completion function for AnyDataProvider()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for AnyDataProvider(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for AnyDataProvider);
}

uint64_t method lookup function for AnyDataProvider()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of AnyDataProvider.oneTimeInit.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 152))();
}

uint64_t dispatch thunk of AnyDataProvider.oneTimeInit.setter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 160))();
}

uint64_t dispatch thunk of AnyDataProvider.oneTimeInit.modify()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 168))();
}

uint64_t dispatch thunk of AnyDataProvider.__allocating_init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 200))();
}

uint64_t dispatch thunk of AnyDataProvider.prepare()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 208))();
}

uint64_t dispatch thunk of AnyDataProvider.prepare(dispatchQueue:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of AnyDataProvider.wait(timeout:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 224))() & 1;
}

uint64_t dispatch thunk of AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 232);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of AnyDataProvider.fetch(for:assistantData:serviceHelper:dispatchQueue:timeout:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  __int16 v4;
  uint64_t (*v5)(uint64_t, _OWORD *);
  __int128 v6;
  __int128 v7;
  _OWORD v9[5];
  uint64_t v10;
  __int16 v11;

  v3 = *(_QWORD *)(a2 + 80);
  v4 = *(_WORD *)(a2 + 88);
  v5 = *(uint64_t (**)(uint64_t, _OWORD *))(*(_QWORD *)v2 + 240);
  v6 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v6;
  v7 = *(_OWORD *)(a2 + 48);
  v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v7;
  v9[4] = *(_OWORD *)(a2 + 64);
  v10 = v3;
  v11 = v4;
  return v5(a1, v9);
}

uint64_t dispatch thunk of AnyDataProvider.reset()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 248))();
}

uint64_t partial apply for implicit closure #8 in implicit closure #7 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 40))();
}

uint64_t partial apply for implicit closure #6 in implicit closure #5 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 32))();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 24))() & 1;
}

uint64_t objectdestroy_5Tm_0()
{
  uint64_t v0;

  (*(void (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v0 + 24) - 8) + 80)));
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in AnyDataProvider.init<A>(provider:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)(v0 + 32) + 16))();
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x1C3BBFDD8](a1, v6, a5);
}

uint64_t UsoTask.isSmartPlayTask.getter()
{
  _QWORD v1[4];

  static UsoTask_CodegenConverter.convert(task:)();
  if (v1[3])
  {
    type metadata accessor for UsoTask_play_uso_NoEntity();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      UsoTask.arguments.getter();
      JUMPOUT(0x1C23F0C54);
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v1);
  }
  return 0;
}

void sub_1C23F1050(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v11;
  unint64_t v12;
  char v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  if (!*(_QWORD *)(v11 + 16)
    || (v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x746567726174, 0xE600000000000000), (v13 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v20 = MEMORY[0x1E0DEE9D8];
    goto LABEL_20;
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v15 = MEMORY[0x1E0DEE9D8];
  a11 = MEMORY[0x1E0DEE9D8];
  if (v14 >> 62)
  {
    swift_bridgeObjectRetain();
    v16 = _CocoaArrayWrapper.endIndex.getter();
    if (v16)
      goto LABEL_5;
  }
  else
  {
    v16 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v16)
    {
LABEL_5:
      type metadata accessor for UsoEntity_common_EventTrigger();
      if (v16 < 1)
      {
        __break(1u);
        JUMPOUT(0x1C23F1404);
      }
      for (i = 0; i != v16; ++i)
      {
        if ((v14 & 0xC000000000000001) != 0)
          v18 = MEMORY[0x1C3BBF3F4](i, v14);
        else
          v18 = swift_retain();
        dispatch thunk of UsoValue.getAsEntity()(v18);
        static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&a10);
        swift_release();
        v19 = swift_release();
        if (a10)
        {
          MEMORY[0x1C3BBEE78](v19);
          if (*(_QWORD *)((a11 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(_QWORD *)((a11 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
      }
      swift_bridgeObjectRelease();
      v21 = a11;
      goto LABEL_19;
    }
  }
  swift_bridgeObjectRelease();
  v21 = MEMORY[0x1E0DEE9D8];
LABEL_19:
  swift_bridgeObjectRelease();
  a11 = v15;
  swift_bridgeObjectRetain();
  specialized Array.append<A>(contentsOf:)(v21);
  swift_bridgeObjectRelease();
  v20 = a11;
LABEL_20:
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  JUMPOUT(0x1C23F1004);
}

void sub_1C23F1090(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  uint64_t v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;

  if (*(_QWORD *)(v11 + 16))
  {
    v12 = specialized __RawDictionaryStorage.find<A>(_:)(0x636E657265666572, 0xE900000000000065);
    if ((v13 & 1) != 0)
    {
      v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
      swift_bridgeObjectRetain(v14);
      swift_bridgeObjectRelease(0xE900000000000065);
      swift_bridgeObjectRelease(v11);
      a11 = MEMORY[0x1E0DEE9D8];
      if (!(v14 >> 62))
      {
        v15 = *(_QWORD *)((v14 & 0xFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain(v14);
        if (v15)
        {
          v16 = type metadata accessor for UsoEntity_common_EventTrigger(0);
          if (v15 >= 1)
          {
            v17 = v16;
            v18 = 0;
            while (1)
            {
              if ((v14 & 0xC000000000000001) != 0)
              {
                v20 = MEMORY[0x1C3BBF3F4](v18, v14);
              }
              else
              {
                v20 = *(_QWORD *)(v14 + 8 * v18 + 32);
                swift_retain(v20);
              }
              v21 = dispatch thunk of UsoValue.getAsEntity()();
              static UsoEntity_CodeGenConverter.convertAs<A>(entity:asType:)(&a10, v21, v17, v17);
              swift_release(v20);
              v22 = swift_release(v21);
              v23 = a10;
              if (a10)
              {
                MEMORY[0x1C3BBEE78](v22);
                v25 = *(_QWORD *)((a11 & 0xFFFFFFFFFFFFFF8) + 0x10);
                v24 = *(_QWORD *)((a11 & 0xFFFFFFFFFFFFFF8) + 0x18);
                if (v25 >= v24 >> 1)
                  specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v24 > 1, v25 + 1, 1);
                v19 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
                specialized Array._endMutation()(v19);
              }
              if (v15 == ++v18)
              {
                swift_bridgeObjectRelease(v14);
                JUMPOUT(0x1C23F1384);
              }
            }
          }
          JUMPOUT(0x1C23F1400);
        }
        JUMPOUT(0x1C23F1374);
      }
      JUMPOUT(0x1C23F1350);
    }
  }
  swift_bridgeObjectRelease(0xE900000000000065);
  swift_bridgeObjectRelease(v11);
  JUMPOUT(0x1C23F13B0);
}

void sub_1C23F10AC()
{
  JUMPOUT(0x1C23F10C0);
}

uint64_t UsoTask.isOfflineSupportedPlayTask.getter()
{
  _QWORD v1[4];
  _BYTE v2[24];
  uint64_t v3;
  _BYTE v4[32];

  static UsoTask_CodegenConverter.convert(task:)();
  outlined init with copy of Any?((uint64_t)v4, (uint64_t)v2);
  if (!v3)
  {
    outlined destroy of Any?((uint64_t)v2);
    goto LABEL_6;
  }
  type metadata accessor for UsoTask_play_uso_NoEntity();
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_6:
    outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
    goto LABEL_7;
  }
  outlined init with take of Any?((uint64_t)v4, (uint64_t)v2);
  if (v1[0])
  {
    swift_release();
    outlined destroy of Any?((uint64_t)v2);
    return 1;
  }
LABEL_7:
  outlined init with take of Any?((uint64_t)v2, (uint64_t)v1);
  if (v1[3])
  {
    type metadata accessor for UsoTask_play_common_MediaItem();
    if ((swift_dynamicCast() & 1) != 0)
    {
      swift_release();
      return 1;
    }
  }
  else
  {
    outlined destroy of Any?((uint64_t)v1);
  }
  return 0;
}

BOOL UsoTask.isSummarizeMediaTask.getter()
{
  uint64_t v0;
  _BOOL8 v1;
  uint64_t v3;
  _BYTE v4[24];
  uint64_t v5;

  static UsoTask_CodegenConverter.convert(task:)();
  if (!v5)
  {
    outlined destroy of Any?((uint64_t)v4);
    goto LABEL_5;
  }
  type metadata accessor for UsoTask_summarise_common_MediaItem();
  if (!swift_dynamicCast())
  {
LABEL_5:
    v0 = 0;
    goto LABEL_6;
  }
  v0 = v3;
LABEL_6:
  v1 = v0 != 0;
  swift_release();
  return v1;
}

uint64_t Siri_Nlu_External_UserParse.firstSmartPlayTask()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  void (*v9)(char *, unint64_t, uint64_t);
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v21[4];
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];

  v0 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x1E0C80A78](v0);
  v3 = (char *)v21 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = Siri_Nlu_External_Span.matcherNames.getter();
  v24[0] = MEMORY[0x1E0DEE9D8];
  v5 = *(_QWORD *)(v4 + 16);
  if (!v5)
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      v14 = _CocoaArrayWrapper.endIndex.getter();
      if (v14)
      {
LABEL_9:
        v15 = 0;
        v21[0] = v13;
        v16 = v13 + 32;
        v21[2] = v14;
        v21[3] = MEMORY[0x1E0DEE9B8] + 8;
        v21[1] = v13 + 32;
        do
        {
          v17 = v15 + 1;
          if (__OFADD__(v15, 1))
          {
            __break(1u);
            JUMPOUT(0x1C23F1F80);
          }
          v18 = *(_QWORD *)(v16 + 8 * v15);
          swift_retain();
          static UsoTask_CodegenConverter.convert(task:)();
          if (v24[3])
          {
            type metadata accessor for UsoTask_play_uso_NoEntity();
            if ((swift_dynamicCast() & 1) != 0)
            {
              swift_release();
              v22 = v18;
              UsoTask.arguments.getter();
              JUMPOUT(0x1C23F17E4);
            }
          }
          else
          {
            outlined destroy of Any?((uint64_t)v24);
          }
          swift_release();
          v15 = v17;
        }
        while (v17 != v14);
        v19 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
      swift_bridgeObjectRetain();
      if (v14)
        goto LABEL_9;
    }
    v19 = 0;
LABEL_21:
    swift_bridgeObjectRelease_n();
    return v19;
  }
  v6 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  v22 = v4;
  v7 = v4 + v6;
  v8 = *(_QWORD *)(v1 + 72);
  v9 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
  while (1)
  {
    v9(v3, v7, v0);
    v10 = v23;
    v11 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    v23 = v10;
    if (v10)
      break;
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
    specialized Array.append<A>(contentsOf:)(v12);
    v7 += v8;
    if (!--v5)
    {
      swift_bridgeObjectRelease();
      v13 = v24[0];
      goto LABEL_7;
    }
  }
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v19 = v24[0];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t Siri_Nlu_External_UserParse.firstOfflineSupportedPlayTask()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _QWORD v21[4];
  _BYTE v22[24];
  uint64_t v23;
  _QWORD v24[4];

  v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v24[0] = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    if (v13 >> 62)
      goto LABEL_24;
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v14)
    {
LABEL_25:
      swift_bridgeObjectRelease_n();
      return 0;
    }
LABEL_9:
    v15 = 0;
    while (1)
    {
      v16 = v15 + 1;
      if (__OFADD__(v15, 1))
      {
        __break(1u);
LABEL_24:
        swift_bridgeObjectRetain();
        v14 = _CocoaArrayWrapper.endIndex.getter();
        if (!v14)
          goto LABEL_25;
        goto LABEL_9;
      }
      v9 = *(_QWORD *)(v13 + 8 * v15 + 32);
      swift_retain();
      static UsoTask_CodegenConverter.convert(task:)();
      outlined init with copy of Any?((uint64_t)v24, (uint64_t)v22);
      if (!v23)
        break;
      type metadata accessor for UsoTask_play_uso_NoEntity();
      if ((swift_dynamicCast() & 1) == 0)
        goto LABEL_18;
      v17 = v21[0];
      outlined init with take of Any?((uint64_t)v24, (uint64_t)v22);
      if (v17)
      {
        swift_release();
        outlined destroy of Any?((uint64_t)v22);
        swift_bridgeObjectRelease_n();
        return v9;
      }
LABEL_19:
      outlined init with take of Any?((uint64_t)v22, (uint64_t)v21);
      if (v21[3])
      {
        type metadata accessor for UsoTask_play_common_MediaItem();
        if ((swift_dynamicCast() & 1) != 0)
        {
          swift_bridgeObjectRelease_n();
          swift_release();
          return v9;
        }
      }
      else
      {
        outlined destroy of Any?((uint64_t)v21);
      }
      swift_release();
      ++v15;
      if (v16 == v14)
        goto LABEL_25;
    }
    outlined destroy of Any?((uint64_t)v22);
LABEL_18:
    outlined init with take of Any?((uint64_t)v24, (uint64_t)v22);
    goto LABEL_19;
  }
  v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v8 = *(_QWORD *)(v2 + 72);
  v19 = v5;
  v20 = v8;
  v9 = v2;
  v10 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
  while (1)
  {
    v10(v4, v7, v1);
    v11 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
    if (v0)
      break;
    v12 = v11;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
    specialized Array.append<A>(contentsOf:)(v12);
    v7 += v20;
    if (!--v6)
    {
      swift_bridgeObjectRelease();
      v13 = v24[0];
      goto LABEL_7;
    }
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

char *Siri_Nlu_External_UserParse.firstSummarizeMediaTask()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(char *, unint64_t, uint64_t);
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];

  v1 = type metadata accessor for Siri_Nlu_External_UserDialogAct();
  v2 = *(_QWORD *)(v1 - 8);
  MEMORY[0x1E0C80A78](v1);
  v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = Siri_Nlu_External_Span.matcherNames.getter();
  v20[0] = MEMORY[0x1E0DEE9D8];
  v6 = *(_QWORD *)(v5 + 16);
  if (v6)
  {
    v7 = v5 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
    v8 = *(_QWORD *)(v2 + 72);
    v18 = v5;
    v19 = v8;
    v9 = v2;
    v10 = *(void (**)(char *, unint64_t, uint64_t))(v2 + 16);
    while (1)
    {
      v10(v4, v7, v1);
      v11 = static ConversionUtils.convertUserDialogActToTasks(userDialogAct:)();
      if (v0)
        break;
      v12 = v11;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
      specialized Array.append<A>(contentsOf:)(v12);
      v7 += v19;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        v13 = v20[0];
        goto LABEL_7;
      }
    }
    (*(void (**)(char *, uint64_t))(v9 + 8))(v4, v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    v13 = MEMORY[0x1E0DEE9D8];
LABEL_7:
    if (v13 >> 62)
      goto LABEL_18;
    v14 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v14; v14 = _CocoaArrayWrapper.endIndex.getter())
    {
      v15 = 0;
      while (1)
      {
        v16 = v15 + 1;
        if (__OFADD__(v15, 1))
          break;
        v4 = *(char **)(v13 + 8 * v15 + 32);
        swift_retain();
        static UsoTask_CodegenConverter.convert(task:)();
        if (v20[3])
        {
          type metadata accessor for UsoTask_summarise_common_MediaItem();
          if ((swift_dynamicCast() & 1) != 0)
          {
            swift_bridgeObjectRelease_n();
            swift_release();
            return v4;
          }
        }
        else
        {
          outlined destroy of Any?((uint64_t)v20);
        }
        swift_release();
        ++v15;
        if (v16 == v14)
          goto LABEL_19;
      }
      __break(1u);
LABEL_18:
      swift_bridgeObjectRetain();
    }
LABEL_19:
    swift_bridgeObjectRelease_n();
    return 0;
  }
  return v4;
}

void closure #1 in RunningBoardForegroundAppProvider.getForegroundAppId()(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  id v4;
  void *v5;
  uint64_t v6;
  id v7;
  void *v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  id v14;
  id v15;
  void *v16;
  unsigned int v17;

  v3 = *a1;
  if (objc_msgSend(*a1, sel_taskState) == 4)
  {
    v4 = objc_msgSend(v3, sel_endowmentNamespaces);
    if (v4)
    {
      v5 = v4;
      v6 = static Set._unconditionallyBridgeFromObjectiveC(_:)();

      LOBYTE(v5) = specialized Set.contains(_:)(0xD00000000000001FLL, 0x80000001C2501DE0, v6);
      swift_bridgeObjectRelease();
      if ((v5 & 1) != 0)
      {
        v7 = objc_msgSend(v3, sel_process);
        if (v7)
        {
          v8 = v7;
          v9 = objc_msgSend(v7, sel_bundle);

          if (v9)
          {
            v10 = objc_msgSend(v9, sel_identifier);

            if (v10)
            {
              v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              v13 = v12;

              v14 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
              swift_bridgeObjectRetain();
              v15 = @nonobjc LSApplicationRecord.init(bundleIdentifier:allowPlaceholder:)(v11, v13, 0);
              v16 = v15;
              if (v15)
              {
                v17 = objc_msgSend(v15, sel_developerType);

                if (v17 == 3)
                {
                  *a2 = v11;
                  a2[1] = v13;
                  return;
                }
              }
              swift_bridgeObjectRelease();
            }
          }
        }
      }
    }
  }
  *a2 = 0;
  a2[1] = 0;
}

void specialized RunningBoardForegroundAppProvider.getForegroundAppId()()
{
  id v0;
  Class isa;
  id v2;
  id v3;
  id v4;
  void *v5;
  unint64_t v6;
  id v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  SEL *v11;
  uint64_t v12;
  id v13;
  void *v14;
  void *v15;
  id v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  id v20;
  void *v21;
  id v22;
  id v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  id v27;
  void *v28;
  id v29;
  id v30;
  unsigned int v31;
  unint64_t v32;
  id v33;
  void *v34;
  id v35;
  void *v36;
  id v37;
  id v38;
  id v39;
  id v40;
  id v41[3];

  v41[2] = *(id *)MEMORY[0x1E0C80C00];
  v0 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E0D87DC0]), sel_init);
  isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v0, sel_setEndowmentNamespaces_, isa);

  objc_msgSend(v0, sel_setValues_, 1);
  v2 = objc_msgSend((id)objc_opt_self(), sel_predicateMatchingProcessTypeApplication);
  v41[0] = 0;
  v3 = objc_msgSend((id)objc_opt_self(), sel_statesForPredicate_withDescriptor_error_, v2, v0, v41);
  v4 = v41[0];
  if (v3)
  {
    v5 = v3;
    type metadata accessor for RBSProcessState();
    v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    v7 = v4;

    if (!(v6 >> 62))
      goto LABEL_3;
LABEL_26:
    swift_bridgeObjectRetain();
    v8 = _CocoaArrayWrapper.endIndex.getter();
    if (!v8)
      goto LABEL_30;
    goto LABEL_4;
  }
  v35 = v41[0];
  v36 = (void *)_convertNSErrorToError(_:)();

  swift_willThrow();
  v6 = MEMORY[0x1E0DEE9D8];
  if (MEMORY[0x1E0DEE9D8] >> 62)
    goto LABEL_26;
LABEL_3:
  v8 = *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v8)
    goto LABEL_30;
LABEL_4:
  v38 = v0;
  v39 = v2;
  v9 = 0;
  v10 = v6 & 0xC000000000000001;
  v11 = (SEL *)&unk_1E7C11000;
  v12 = MEMORY[0x1E0DEA968];
  while (1)
  {
    if (v10)
    {
      swift_bridgeObjectRetain();
      v13 = (id)MEMORY[0x1C3BBF3F4](v9, v6);
    }
    else
    {
      v14 = *(void **)(v6 + 8 * v9 + 32);
      swift_bridgeObjectRetain();
      v13 = v14;
    }
    v15 = v13;
    if (objc_msgSend(v13, v11[369]) != 4
      || (v16 = objc_msgSend(v15, sel_endowmentNamespaces)) == 0
      || (v17 = v16,
          v18 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
          v17,
          LOBYTE(v17) = specialized Set.contains(_:)(0xD00000000000001FLL, 0x80000001C2501DE0, v18),
          swift_bridgeObjectRelease(),
          (v17 & 1) == 0))
    {
      swift_bridgeObjectRelease();

      v32 = v9 + 1;
      if (__OFADD__(v9, 1))
        break;
      goto LABEL_18;
    }
    v19 = v12;
    v20 = objc_msgSend(v15, sel_process);
    if (v20
      && (v21 = v20, v22 = objc_msgSend(v20, sel_bundle), v21, v22)
      && (v23 = objc_msgSend(v22, sel_identifier), v22, v23))
    {
      v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      v26 = v25;

      v27 = objc_allocWithZone(MEMORY[0x1E0CA5870]);
      swift_bridgeObjectRetain();
      v28 = (void *)MEMORY[0x1C3BBEC44](v24, v26);
      swift_bridgeObjectRelease();
      v41[0] = 0;
      v29 = objc_msgSend(v27, sel_initWithBundleIdentifier_allowPlaceholder_error_, v28, 0, v41);

      if (v29)
      {
        v30 = v41[0];
        v31 = objc_msgSend(v29, sel_developerType);

        if (v31 == 3)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          if (v8 != v9)
            goto LABEL_32;
LABEL_29:
          v0 = v38;
          v2 = v39;
          goto LABEL_30;
        }
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
      else
      {
        v33 = v41[0];
        v34 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        swift_bridgeObjectRelease();

        swift_bridgeObjectRelease();
      }
    }
    else
    {
      swift_bridgeObjectRelease();

    }
    v12 = v19;
    v11 = (SEL *)&unk_1E7C11000;
    v32 = v9 + 1;
    if (__OFADD__(v9, 1))
      break;
LABEL_18:
    ++v9;
    if (v32 == v8)
      goto LABEL_29;
  }
  __break(1u);
LABEL_32:
  if (v10)
  {
    v37 = (id)MEMORY[0x1C3BBF3F4](v9, v6);
    v2 = v39;
    goto LABEL_37;
  }
  if ((v9 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
  }
  v2 = v39;
  if (v9 >= *(_QWORD *)((v6 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_40;
  v37 = *(id *)(v6 + 8 * v9 + 32);
LABEL_37:
  v40 = v37;
  closure #1 in RunningBoardForegroundAppProvider.getForegroundAppId()(&v40, (uint64_t *)v41);

  v0 = v38;
  if (v41[1])
  {
LABEL_30:

    swift_bridgeObjectRelease_n();
  }
  else
  {
    __break(1u);
  }
}

uint64_t dispatch thunk of ForegroundAppProvider.getForegroundAppId()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

ValueMetadata *type metadata accessor for RunningBoardForegroundAppProvider()
{
  return &type metadata for RunningBoardForegroundAppProvider;
}

unint64_t type metadata accessor for RBSProcessState()
{
  unint64_t result;

  result = lazy cache variable for type metadata for RBSProcessState;
  if (!lazy cache variable for type metadata for RBSProcessState)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for RBSProcessState);
  }
  return result;
}

uint64_t SportsResolver.makeRecommendation(entities:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  void *v24;
  void (*v25)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(_QWORD *@<X8>));
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  id v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  id v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  int *v52;
  uint64_t v53;
  char *v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  void (*v61)(char *, uint64_t);
  void (*v62)(char *, uint64_t);
  uint64_t v63;
  int v64;
  int *v65;
  char *v66;
  uint8_t *v67;
  char *v68;
  char *v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int *v75;
  uint64_t v76;
  uint64_t v77[2];

  v72 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Recommendation<SportsItem>);
  v74 = *(_QWORD *)(v72 - 8);
  v4 = MEMORY[0x1E0C80A78](v72);
  v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1E0C80A78](v4);
  v69 = (char *)&v67 - v7;
  v8 = type metadata accessor for Date();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x1E0C80A78](v8);
  v11 = (char *)&v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  v13 = MEMORY[0x1E0C80A78](v12);
  v15 = (void **)((char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1E0C80A78](v13);
  v17 = (char *)&v67 - v16;
  v18 = type metadata accessor for SportsRecommendationQuery();
  v19 = MEMORY[0x1E0C80A78](v18);
  v22 = (char *)&v67 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(a1 + 16))
  {
    v68 = v6;
    v70 = v20;
    v71 = v19;
    v73 = a2;
    swift_bridgeObjectRetain();
    v23 = SportsRecommendationQuery.init(sportsPersonalizationEntities:)();
    if (one-time initialization token for shared != -1)
      v23 = swift_once();
    v24 = static PerformanceUtil.shared;
    MEMORY[0x1E0C80A78](v23);
    v65 = v75;
    v66 = v22;
    v75 = (int *)v22;
    Date.init()();
    v25 = *(void (**)(unint64_t, unint64_t, _QWORD, char *, const char *, uint64_t, uint64_t, uint64_t, const char *, uint64_t, int, uint64_t (*)@<X0>(_QWORD *@<X8>)))(*(_QWORD *)v24 + 200);
    v65 = &v64;
    v66 = (char *)v12;
    LOBYTE(v64) = 2;
    v26 = (uint64_t)v17;
    v25(0xD000000000000025, 0x80000001C2503E80, 0, v11, "SiriInformationSearch/SportsInferenceQuerying.swift", 51, 2, 33, "makeRecommendation(entities:)", 29, v64, partial apply for closure #1 in SportsResolver.makeRecommendation(entities:));
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    outlined init with copy of Result<Recommendation<SportsItem>, Error>((uint64_t)v17, (uint64_t)v15);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v27 = *v15;
      v28 = v73;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v29 = type metadata accessor for Logger();
      __swift_project_value_buffer(v29, (uint64_t)static Logger.pommes);
      v30 = v27;
      v31 = v27;
      v32 = Logger.logObject.getter();
      v33 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v32, v33))
      {
        v34 = (uint8_t *)swift_slowAlloc();
        v35 = swift_slowAlloc();
        v76 = (uint64_t)v27;
        v77[0] = v35;
        *(_DWORD *)v34 = 136315138;
        v74 = v26;
        v36 = v27;
        __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Error);
        v37 = String.init<A>(describing:)();
        v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v37, v38, v77);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();

        _os_log_impl(&dword_1C2356000, v32, v33, "Got error calling inference for sports recommendation: %s", v34, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v35, -1, -1);
        MEMORY[0x1C3BBFF64](v34, -1, -1);

        v39 = v74;
      }
      else
      {

        v39 = (uint64_t)v17;
      }
      outlined destroy of Result<Recommendation<SportsItem>, Error>(v39);
      (*(void (**)(int *, uint64_t))(v70 + 8))(v75, v71);
    }
    else
    {
      v46 = v74;
      v47 = v72;
      v48 = (*(uint64_t (**)(void **, uint64_t))(v74 + 88))(v15, v72);
      v28 = v73;
      if (v48 == *MEMORY[0x1E0D985E8])
      {
        outlined destroy of Result<Recommendation<SportsItem>, Error>((uint64_t)v17);
        (*(void (**)(int *, uint64_t))(v70 + 8))(v75, v71);
        (*(void (**)(void **, uint64_t))(v46 + 96))(v15, v47);
        v49 = type metadata accessor for SportsItem();
        v50 = *(_QWORD *)(v49 - 8);
        (*(void (**)(uint64_t, void **, uint64_t))(v50 + 32))(v28, v15, v49);
        return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v50 + 56))(v28, 0, 1, v49);
      }
      v51 = v69;
      (*(void (**)(char *, void **, uint64_t))(v46 + 32))(v69, v15, v47);
      v52 = v75;
      if (one-time initialization token for pommes != -1)
        swift_once();
      v53 = type metadata accessor for Logger();
      __swift_project_value_buffer(v53, (uint64_t)static Logger.pommes);
      v54 = v68;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v68, v51, v47);
      v55 = Logger.logObject.getter();
      v56 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v55, v56))
      {
        v57 = (uint8_t *)swift_slowAlloc();
        v58 = swift_slowAlloc();
        v77[0] = v58;
        *(_DWORD *)v57 = 136315138;
        v67 = v57 + 4;
        v59 = Recommendation.description.getter();
        v76 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v59, v60, v77);
        v28 = v73;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v61 = *(void (**)(char *, uint64_t))(v74 + 8);
        v61(v54, v47);
        _os_log_impl(&dword_1C2356000, v55, v56, "Got non-confident sports recommendation, will not select: '%s'", v57, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x1C3BBFF64](v58, -1, -1);
        MEMORY[0x1C3BBFF64](v57, -1, -1);

        v61(v69, v47);
      }
      else
      {

        v62 = *(void (**)(char *, uint64_t))(v46 + 8);
        v62(v54, v47);
        v62(v51, v47);
      }
      outlined destroy of Result<Recommendation<SportsItem>, Error>(v26);
      (*(void (**)(int *, uint64_t))(v70 + 8))(v52, v71);
    }
    v63 = type metadata accessor for SportsItem();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 56))(v28, 1, 1, v63);
  }
  else
  {
    if (one-time initialization token for pommes != -1)
      swift_once();
    v40 = type metadata accessor for Logger();
    __swift_project_value_buffer(v40, (uint64_t)static Logger.pommes);
    v41 = Logger.logObject.getter();
    v42 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v41, v42))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_1C2356000, v41, v42, "Got no sports items from the alternative result entities. Nothing to recommend against...", v43, 2u);
      MEMORY[0x1C3BBFF64](v43, -1, -1);
    }

    v44 = type metadata accessor for SportsItem();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v44 - 8) + 56))(a2, 1, 1, v44);
  }
}

uint64_t closure #1 in SportsResolver.makeRecommendation(entities:)@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&demangling cache variable for type metadata for Result<Recommendation<SportsItem>, Error>);
  MEMORY[0x1E0C80A78](v3);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  SportsResolver.makeRecommendation(query:)();
  if (v1)
  {
    *a1 = v1;
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    swift_storeEnumTagMultiPayload();
    return outlined init with take of Result<Recommendation<SportsItem>, Error>((uint64_t)v5, (uint64_t)a1);
  }
}

